{
    "funcInfo": [
        {
            "funcName": "function_401dc0",
            "funcStartAddr": "401dc0",
            "funcEndAddr": "401dc5",
            "decompiledFuncCode": "int64_t function_401dc0(void) {\n    // 0x401dc0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dc5",
            "funcStartAddr": "401dc5",
            "funcEndAddr": "401dca",
            "decompiledFuncCode": "int64_t function_401dc5(void) {\n    // 0x401dc5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dca",
            "funcStartAddr": "401dca",
            "funcEndAddr": "401dcf",
            "decompiledFuncCode": "int64_t function_401dca(void) {\n    // 0x401dca\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dcf",
            "funcStartAddr": "401dcf",
            "funcEndAddr": "401dd4",
            "decompiledFuncCode": "int64_t function_401dcf(void) {\n    // 0x401dcf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dd4",
            "funcStartAddr": "401dd4",
            "funcEndAddr": "401dd9",
            "decompiledFuncCode": "int64_t function_401dd4(void) {\n    // 0x401dd4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dd9",
            "funcStartAddr": "401dd9",
            "funcEndAddr": "401dde",
            "decompiledFuncCode": "int64_t function_401dd9(void) {\n    // 0x401dd9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dde",
            "funcStartAddr": "401dde",
            "funcEndAddr": "401de3",
            "decompiledFuncCode": "int64_t function_401dde(void) {\n    // 0x401dde\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401df0",
            "funcStartAddr": "401df0",
            "funcEndAddr": "4026c0",
            "decompiledFuncCode": "int64_t function_401df0(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401dfe\n    int64_t v2; // bp-264, 0x401df0\n    int64_t v3 = &v2; // 0x401e06\n    function_408430(a2);\n    setlocale(LC_ALL, (char *)&g25);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v4; // 0x401df0\n    function_410ee0(0x402f30, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v4);\n    g57 = 0;\n    g59 = 0;\n    g58 = 0;\n    int64_t v5 = 0; // 0x401e5f\n    int64_t v6 = 0; // 0x401e5f\n    int64_t v7; // 0x401df0\n    int64_t v8; // 0x401df0\n    int64_t v9; // 0x401df0\n    int64_t v10; // 0x401df0\n    int64_t v11; // 0x401e73\n    while (true) {\n      lab_0x401e60_2:\n        // 0x401e60\n        v8 = v6;\n        v7 = v5;\n        int64_t v12 = v10;\n        v11 = function_40b5f0(v1, a2, \"acd:fhmr:t:\", &g4, 0, v12);\n        int32_t v13 = v11;\n        v9 = v12;\n        v5 = v7;\n        v6 = v8;\n        switch (v13) {\n            case -1: {\n                goto lab_0x40202a;\n            }\n            case 102: {\n                goto lab_0x401e60;\n            }\n            default: {\n                if (v13 > 102) {\n                    if (v13 == 114) {\n                        char * v14 = g74;\n                        g57 = 1;\n                        *(int64_t *)&g50 = (int64_t)v14;\n                        v9 = v12;\n                        v5 = v7;\n                        v6 = v8;\n                    } else {\n                        if (v13 > 114) {\n                            if (v13 != 116) {\n                                if (v13 != 128) {\n                                    // 0x402576\n                                    function_4027e0(1);\n                                    // UNREACHABLE\n                                }\n                                int64_t v15 = g33; // 0x401fcc\n                                char * v16 = g74; // 0x401fd3\n                                int64_t v17 = function_402e50(\"--time\", (int64_t)v16, g3, (int64_t *)&g2, 4, v15); // 0x401fdf\n                                int32_t v18 = *(int32_t *)(4 * v17 + (int64_t)&g2); // 0x401fe4\n                                int32_t v19 = g59; // 0x401feb\n                                g59 = v19 | v18;\n                                v9 = v15;\n                                v5 = v7;\n                                v6 = v8;\n                            } else {\n                                char * v20 = g74; // 0x401f5d\n                                int64_t v21 = function_408100((int64_t *)&g51, (int64_t)v20, 6); // 0x401f6e\n                                if ((char)v21 == 0) {\n                                    char * v22 = g74; // 0x402682\n                                    function_40a050((int64_t)v22);\n                                    error(1, (int32_t)\"invalid date format %s\" ^ (int32_t)\"invalid date format %s\", dcgettext(NULL, \"invalid date format %s\", 5));\n                                    return &g81;\n                                }\n                                // 0x401f7e\n                                g52 = 0;\n                                int128_t v23 = *(int128_t *)&g51; // 0x401f89\n                                int64_t v24 = __asm_movaps(__asm_movdqa(v23)); // 0x401f91\n                                *(int128_t *)&g53 = (int128_t)v24;\n                                v9 = v12;\n                                v5 = v21 & 0xffffffff;\n                                v6 = v8;\n                            }\n                        } else {\n                            if (v13 != 104) {\n                                if (v13 != 109) {\n                                    // 0x402576\n                                    function_4027e0(1);\n                                    // UNREACHABLE\n                                }\n                                int32_t v25 = g59; // 0x401ed9\n                                g59 = v25 | 2;\n                                v9 = v12;\n                                v5 = v7;\n                                v6 = v8;\n                            } else {\n                                // 0x401e9e\n                                g56 = 1;\n                                v9 = v12;\n                                v5 = v7;\n                                v6 = v8;\n                            }\n                        }\n                    }\n                } else {\n                    if (v13 == 97) {\n                        // 0x402000\n                        g59 |= 1;\n                        v9 = v12;\n                        v5 = v7;\n                        v6 = v8;\n                    } else {\n                        if (v13 <= 97) {\n                            if (v13 == -131) {\n                                // 0x401f0c\n                                function_40a4d0((int64_t)g45, \"touch\", \"GNU coreutils\", (int64_t)g32, \"Paul Rubin\", \"Arnold Robbins\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v13 == -130) {\n                                // 0x401fa9\n                                function_4027e0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x402576;\n                        }\n                        if (v13 != 99) {\n                            if (v13 != 100) {\n                              lab_0x402576:\n                                // 0x402576\n                                function_4027e0(1);\n                                // UNREACHABLE\n                            }\n                            // 0x401ef1\n                            v9 = v12;\n                            v5 = v7;\n                            v6 = (int64_t)g74;\n                        } else {\n                            // 0x401ec0\n                            g58 = 1;\n                            v9 = v12;\n                            v5 = v7;\n                            v6 = v8;\n                        }\n                    }\n                }\n                goto lab_0x401e60;\n            }\n        }\n    }\n  lab_0x40202a:\n    // 0x40202a\n    if (g59 == 0) {\n        // 0x402033\n        g59 = 3;\n    }\n    int64_t v26 = v11 & 0xffffffff; // 0x401e78\n    int64_t v27; // 0x401df0\n    int64_t v28; // 0x401df0\n    int64_t v29; // 0x401df0\n    int64_t v30; // 0x401df0\n    if ((char)v7 == 0) {\n        int64_t v31; // bp-200, 0x401df0\n        if (g57 != 0) {\n            // 0x402427\n            int32_t v32; // 0x401df0\n            if (g56 != 0) {\n                // 0x4024bf\n                v32 = __lxstat(1, g50, (struct stat *)&v31);\n            } else {\n                // 0x402441\n                v32 = __xstat(1, g50, (struct stat *)&v31);\n            }\n            // 0x40244b\n            if (v32 != 0) {\n                int64_t v33 = function_409e00(4, (int64_t)g50); // 0x40258c\n                char * format = dcgettext(NULL, \"failed to get attributes of %s\", 5); // 0x4025a0\n                error(1, *__errno_location(), format);\n                v30 = (int64_t)format;\n                v28 = v33;\n                goto lab_0x4025c1;\n            } else {\n                // 0x402453\n                g51 = (int32_t *)v4;\n                v29 = v26;\n                v27 = a2;\n                if (v8 != 0) {\n                    // 0x402498\n                    if (g59 % 2 != 0) {\n                        // 0x4024d7\n                        function_4027a0((int64_t *)&g51, v8);\n                    }\n                    // 0x4024a2\n                    v29 = v26;\n                    v27 = a2;\n                    if ((g59 & 2) != 0) {\n                        // 0x4024aa\n                        function_4027a0(&g53, v8);\n                        v29 = v26;\n                        v27 = a2;\n                    }\n                }\n                goto lab_0x40205e;\n            }\n        } else {\n            if (v8 == 0) {\n                goto lab_0x4023ed;\n            } else {\n                // 0x402351\n                int64_t v34; // bp-232, 0x401df0\n                function_4030d0(&v34);\n                function_4027a0((int64_t *)&g51, v8);\n                int64_t v35 = __asm_movaps(__asm_movdqa(*(int128_t *)&g51)); // 0x40237c\n                *(int128_t *)&g53 = (int128_t)v35;\n                v29 = v26;\n                v27 = a2;\n                if (g59 != 3) {\n                    goto lab_0x40205e;\n                } else {\n                    // 0x402389\n                    v29 = v26;\n                    v27 = a2;\n                    if (v34 != (int64_t)g51) {\n                        goto lab_0x40205e;\n                    } else {\n                        // 0x40239b\n                        if (g52 != v4) {\n                            goto lab_0x40205e;\n                        } else {\n                            // 0x4023ad\n                            function_4027a0(&v31, v8);\n                            v29 = v26;\n                            v27 = a2;\n                            if (true == v31 == (v34 ^ 1)) {\n                                goto lab_0x4023ed;\n                            } else {\n                                goto lab_0x40205e;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40204d\n        v29 = v26;\n        v27 = a2;\n        if (v8 == 0 != (g57 == 0)) {\n            // 0x402561\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot specify times from more than one source\", 5));\n            // 0x402576\n            function_4027e0(1);\n            // UNREACHABLE\n        }\n        goto lab_0x40205e;\n    }\n  lab_0x40213b:;\n    // 0x40213b\n    int64_t v36; // 0x401df0\n    int64_t v37 = v36;\n    int64_t v38; // 0x401df0\n    int64_t v39 = v38;\n    int32_t v40 = g59; // 0x40213b\n    switch (v40) {\n        case 3: {\n            goto lab_0x402163;\n        }\n        case 2: {\n            // 0x402264\n            g52 = 0x3ffffffe;\n            goto lab_0x402163;\n        }\n        default: {\n            if (v40 != 1) {\n                // break -> 0x40265a\n                break;\n            }\n            // 0x402158\n            g54 = 0x3ffffffe;\n            goto lab_0x402163;\n        }\n    }\n  lab_0x402163:;\n    int64_t v41 = g55 != 0 ? 0 : (int64_t)&g51; // 0x402174\n    char v42 = g56 & (char)(v39 == 0xffffffff); // 0x402180\n    int32_t err_num; // 0x401df0\n    int64_t v43; // 0x401df0\n    int64_t v44; // 0x401df0\n    int32_t * v45; // 0x401df0\n    char * v46; // 0x401df0\n    int32_t * v47; // 0x401df0\n    char * v48; // 0x401df0\n    int64_t v49; // 0x402104\n    if (v42 != 0) {\n        // 0x402274\n        v44 = function_403040(0xffffffff, 0xffffff9c, v49, v41, 256) & 0xffffffff;\n        goto lab_0x4021de;\n    } else {\n        if (v39 == 1) {\n            // 0x4021f1\n            v43 = 1;\n            if ((int32_t)function_403040(1, 0xffffff9c, 0, v41, 0) == 0) {\n                goto lab_0x4020d7;\n            } else {\n                // 0x402209\n                if (*__errno_location() != 9) {\n                    goto lab_0x40207a;\n                } else {\n                    // 0x402217\n                    v43 = 1;\n                    if (g58 != 0) {\n                        goto lab_0x4020d7;\n                    } else {\n                        int32_t v50 = v37;\n                        err_num = v50;\n                        if (v50 == 0) {\n                            goto lab_0x40209a;\n                        } else {\n                            goto lab_0x402229;\n                        }\n                    }\n                }\n            }\n        } else {\n            // 0x402193\n            *v46 = v42;\n            *v45 = (int32_t)v39;\n            int64_t v51 = function_403040(v39, 0xffffff9c, v49, v41, 0); // 0x4021ab\n            v44 = v51 & 0xffffffff;\n            if (*v45 != 0) {\n                goto lab_0x4021de;\n            } else {\n                // 0x4021c2\n                *v47 = (int32_t)v51;\n                *v48 = *v46;\n                int32_t v52 = close(0); // 0x4021cd\n                v44 = (int64_t)*v47;\n                if (v52 != 0) {\n                    // 0x4022fb\n                    function_409e00(4, v49);\n                    error(0, *__errno_location(), dcgettext(NULL, \"failed to close %s\", 5));\n                    v43 = (int64_t)*v48;\n                    goto lab_0x4020d7;\n                } else {\n                    goto lab_0x4021de;\n                }\n            }\n        }\n    }\n  lab_0x4021de:\n    // 0x4021de\n    v43 = 1;\n    if (v44 != 0) {\n        goto lab_0x40207a;\n    } else {\n        goto lab_0x4020d7;\n    }\n  lab_0x40207a:;\n    int32_t v53 = v37;\n    err_num = v53;\n    if (v53 != 0) {\n        goto lab_0x402229;\n    } else {\n        int32_t * v54 = __errno_location(); // 0x402083\n        if (g58 == 0) {\n            goto lab_0x40209a;\n        } else {\n            // 0x402091\n            if (*v54 == 2) {\n                goto lab_0x4020d7;\n            } else {\n                goto lab_0x40209a;\n            }\n        }\n    }\n  lab_0x4020d7:;\n    // 0x4020d7\n    int64_t v55; // 0x401df0\n    int64_t v56 = v43 & v55;\n    g42 = &g43;\n    int64_t v57 = &g43; // 0x4020ec\n    int64_t v58 = v56; // 0x4020ec\n    int64_t result; // 0x401df0\n    if (v1 <= (int64_t)&g43) {\n        // 0x402291\n        result = v56 ^ 1;\n        return result;\n    }\n    goto lab_0x4020f2;\n  lab_0x402229:\n    // 0x402229\n    function_409e00(4, v49);\n    error(0, err_num, dcgettext(NULL, \"cannot touch %s\", 5));\n    v43 = 0;\n    goto lab_0x4020d7;\n  lab_0x40209a:\n    // 0x40209a\n    function_409e00(4, v49);\n    error(0, *__errno_location(), dcgettext(NULL, \"setting times of %s\", 5));\n    v43 = 0;\n    goto lab_0x4020d7;\n  lab_0x401e60:\n    // 0x401e60\n    v10 = v9;\n    goto lab_0x401e60_2;\n  lab_0x40205e:;\n    uint32_t v75 = *(int32_t *)0x61831c; // 0x40205e\n    if (v75 == (int32_t)a1) {\n        // 0x402561\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing file operand\", 5));\n        // 0x402576\n        function_4027e0(1);\n        // UNREACHABLE\n    }\n    int64_t v76 = v75; // 0x40205e\n    result = 0;\n    if (v1 <= v76) {\n        // 0x402291\n        return result;\n    }\n    // 0x4020f2\n    bool v77; // 0x401df0\n    int64_t v67 = v77 ? -1 : 1; // 0x40210c\n    int64_t v78 = v3 + 12;\n    v45 = (int32_t *)v78;\n    int64_t v74 = v29 & 0xffffffff;\n    int64_t v79 = v3 + 16;\n    v46 = (char *)v79;\n    v47 = (int32_t *)v79;\n    v48 = (char *)v78;\n    v57 = v76;\n    v58 = 1;\n    while (true) {\n      lab_0x4020f2:\n        // 0x4020f2\n        v55 = v58;\n        v49 = *(int64_t *)((0x100000000 * v57 >> 29) + v27);\n        int64_t v59 = 2; // 0x40210c\n        int64_t v60 = v49;\n        int64_t v61 = (int64_t)&g5;\n        unsigned char v62 = *(char *)v60; // 0x40210c\n        char v63 = *(char *)v61; // 0x40210c\n        char v64 = v63; // 0x40210c\n        bool v65 = false; // 0x40210c\n        while (v62 == v63) {\n            v59--;\n            int64_t v66 = v61 + v67; // 0x40210c\n            int64_t v68 = v60 + v67; // 0x40210c\n            v64 = v62;\n            v65 = true;\n            if (v59 == 0) {\n                // break -> \n                break;\n            }\n            v60 = v68;\n            v61 = v66;\n            v62 = *(char *)v60;\n            v63 = *(char *)v61;\n            v64 = v63;\n            v65 = false;\n        }\n        unsigned char v69 = v64;\n        int64_t v70 = (int64_t)!((v62 < v69 | v65)) - (int64_t)(v62 < v69); // 0x402112\n        v38 = 1;\n        v36 = v70;\n        if ((int32_t)v70 == 0) {\n            goto lab_0x40213b;\n        } else {\n            // 0x40211f\n            if ((g56 || g58) == 0) {\n                int64_t v71 = function_402fd0(0, v49, 2369, 438); // 0x4022ba\n                int32_t v72 = v71; // 0x4022c5\n                v38 = v71 & 0xffffffff;\n                v36 = 0;\n                if (v72 != -1) {\n                    goto lab_0x40213b;\n                } else {\n                    // 0x4022ce\n                    *v45 = v72;\n                    uint32_t v73 = *__errno_location(); // 0x4022d7\n                    if (v73 < 23) {\n                        // 0x402135\n                        v38 = v74;\n                        v36 = 0;\n                        goto lab_0x40213b;\n                    } else {\n                        // 0x4022e7\n                        v38 = (int64_t)*v45;\n                        v36 = v73;\n                        if (v73 != 1) {\n                            goto lab_0x40213b;\n                        } else {\n                            // 0x402135\n                            v38 = v74;\n                            v36 = 0;\n                            goto lab_0x40213b;\n                        }\n                    }\n                }\n            } else {\n                // 0x402135\n                v38 = v74;\n                v36 = 0;\n                goto lab_0x40213b;\n            }\n        }\n    }\n    // 0x40265a\n    __assert_fail(\"change_times == CH_ATIME\", \"src/touch.c\", 153, \"touch\");\n    int64_t v80 = (int64_t)\"cannot specify times from more than one source\"; // 0x40266e\n    int64_t v81 = v80;\n    error(0, 0, dcgettext(NULL, (char *)v81, 5));\n    // 0x402576\n    function_4027e0(1);\n    // UNREACHABLE\n  lab_0x4023ed:;\n    // 0x4023ed\n    int64_t v82; // 0x401df0\n    int64_t v83; // 0x401df0\n    if ((int32_t)a1 - g42 > 1) {\n        // 0x4024ef\n        if ((int32_t)function_4083b0() > 0x30daf) {\n            goto lab_0x4023ff;\n        } else {\n            int64_t v84 = *(int64_t *)(8 * (int64_t)g42 + a2); // 0x402510\n            if ((char)function_408100((int64_t *)&g51, v84, 9) == 0) {\n                goto lab_0x4023ff;\n            } else {\n                // 0x402522\n                g52 = 0;\n                int64_t v85 = __asm_movaps(__asm_movdqa(*(int128_t *)&g51)); // 0x40253a\n                *(int128_t *)&g53 = (int128_t)v85;\n                v83 = v26;\n                v82 = a2;\n                v30 = v26;\n                v28 = a2;\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    goto lab_0x4025c1;\n                } else {\n                    goto lab_0x40254b;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4023ff;\n    }\n  lab_0x4025c1:;\n    int64_t v86 = v28;\n    int64_t v87 = v30;\n    struct tm * time_info = localtime((int32_t *)&g51); // 0x4025c6\n    v83 = v87;\n    v82 = v86;\n    if (time_info != NULL) {\n        // 0x4025d4\n        error(0, (int32_t)\"warning: 'touch %s' is obsolete; use 'touch -t %04ld%02d%02d%02d%02d.%02d'\" ^ (int32_t)\"warning: 'touch %s' is obsolete; use 'touch -t %04ld%02d%02d%02d%02d.%02d'\", dcgettext(NULL, \"warning: 'touch %s' is obsolete; use 'touch -t %04ld%02d%02d%02d%02d.%02d'\", 5));\n        v83 = v87;\n        v82 = v86;\n    }\n    goto lab_0x40254b;\n  lab_0x4023ff:\n    // 0x4023ff\n    if (g59 == 3) {\n        // 0x4024cb\n        g55 = 1;\n        v29 = v26;\n        v27 = a2;\n    } else {\n        // 0x40240c\n        g52 = 0x3fffffff;\n        g54 = 0x3fffffff;\n        v29 = v26;\n        v27 = a2;\n    }\n    goto lab_0x40205e;\n  lab_0x40254b:\n    // 0x40254b\n    g42 = &g43;\n    v29 = v83;\n    v27 = v82;\n    goto lab_0x40205e;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4026c0",
            "funcEndAddr": "4026eb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4026c0\n    int64_t v1; // 0x4026c0\n    __libc_start_main(0x401df0, (int32_t)a4, (char **)&v1, (void (*)())0x410e70, (void (*)())0x410ed0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4026eb",
            "funcStartAddr": "4026eb",
            "funcEndAddr": "40270a",
            "decompiledFuncCode": "int64_t function_4026eb(void) {\n    // 0x4026eb\n    return &g44;\n}\n"
        },
        {
            "funcName": "function_40270a",
            "funcStartAddr": "40270a",
            "funcEndAddr": "402741",
            "decompiledFuncCode": "int64_t function_40270a(void) {\n    // 0x40270a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402741",
            "funcStartAddr": "402741",
            "funcEndAddr": "402798",
            "decompiledFuncCode": "int64_t function_402741(void) {\n    // 0x402741\n    if (g48 != 0) {\n        // 0x402797\n        int64_t result; // 0x402741\n        return result;\n    }\n    int64_t v1 = g49; // 0x402774\n    int64_t result2; // 0x402786\n    if (g49 >= ((int64_t)&g29 - (int64_t)&g28 >> 3) - 1) {\n        // 0x402786\n        result2 = function_4026eb();\n        g48 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g29 - (int64_t)&g28 >> 3) - 1) {\n        // 0x402776\n        v1++;\n    }\n    // 0x40276a\n    g49 = v1;\n    // 0x402786\n    result2 = function_4026eb();\n    g48 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402798",
            "funcStartAddr": "402798",
            "funcEndAddr": "40279d",
            "decompiledFuncCode": "int64_t function_402798(void) {\n    // 0x402798\n    return function_40270a();\n}\n"
        },
        {
            "funcName": "function_4027a0",
            "funcStartAddr": "4027a0",
            "funcEndAddr": "4027e0",
            "decompiledFuncCode": "int64_t function_4027a0(int64_t * a1, int64_t a2) {\n    // 0x4027a0\n    int64_t v1; // 0x4027a0\n    int64_t result = function_408000((int64_t)a1, a2, v1, v1); // 0x4027a4\n    if ((char)result != 0) {\n        // 0x4027ad\n        return result;\n    }\n    // 0x4027af\n    function_40a050(a2);\n    error(1, (int32_t)\"invalid date format %s\" ^ (int32_t)\"invalid date format %s\", dcgettext(NULL, \"invalid date format %s\", 5));\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_4027e0",
            "funcStartAddr": "4027e0",
            "funcEndAddr": "402b7d",
            "decompiledFuncCode": "int64_t function_4027e0(int32_t status) {\n    // 0x4027e0\n    if (status != 0) {\n        // 0x4027fa\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40281f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402826\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Update the access and modification times of each FILE to the current time.\\n\\nA FILE argument that does not exist is created empty, unless -c or -h\\nis supplied.\\n\\nA FILE argument string of - is handled specially and causes touch to\\nchange the times of the file associated with standard output.\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"  -a                     change only the access time\\n  -c, --no-create        do not create any files\\n  -d, --date=STRING      parse STRING and use it instead of current time\\n  -f                     (ignored)\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"  -h, --no-dereference   affect each symbolic link instead of any referenced\\n                         file (useful only on systems that can change the\\n                         timestamps of a symlink)\\n  -m                     change only the modification time\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"  -r, --reference=FILE   use this file's times instead of current time\\n  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of current time\\n      --time=WORD        change the specified time:\\n                           WORD is access, atime, or use: equivalent to -a\\n                           WORD is modify or mtime: equivalent to -m\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\nNote that the -d and -t options accept different time-date formats.\\n\", 5), g45);\n    int64_t v1 = &g1; // bp-136, 0x40295c\n    bool v2; // 0x4027e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4029e0\n    int64_t v6 = *(int64_t *)v5; // 0x4029e4\n    int64_t v7 = 6; // 0x4029ea\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"touch\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4029f6\n        char v11 = *(char *)v9; // 0x4029f6\n        char v12 = v11; // 0x4029f6\n        bool v13 = false; // 0x4029f6\n        while (v10 == v11) {\n            // 0x4029ec\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4029f6\n            int64_t v15 = v8 + v3; // 0x4029f6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402a02\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402a02\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402b14;\n        } else {\n            // 0x402afe\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402b53\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402a64;\n            } else {\n                goto lab_0x402b14;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402a64;\n        } else {\n            // 0x402a4a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402b53\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402a64;\n            } else {\n                goto lab_0x402a64;\n            }\n        }\n    }\n  lab_0x402b14:\n    // 0x402b14\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402aa4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40281f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402a64:\n    // 0x402a64\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402aa4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40281f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402b80",
            "funcStartAddr": "402b80",
            "funcEndAddr": "402b8a",
            "decompiledFuncCode": "int64_t function_402b80(void) {\n    // 0x402b80\n    return function_4027e0(1);\n}\n"
        },
        {
            "funcName": "function_402b90",
            "funcStartAddr": "402b90",
            "funcEndAddr": "402ca6",
            "decompiledFuncCode": "int64_t function_402b90(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x402bb1\n    int32_t len = strlen(str); // 0x402bb1\n    if (a2 == 0) {\n        // 0x402c7d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x402c17\n    int64_t v4 = a3; // 0x402b90\n    int64_t v5 = a2; // 0x402c1e\n    int64_t str4; // 0x402b90\n    int64_t v6; // 0x402b90\n    int32_t v7; // 0x402b90\n    int32_t v8; // 0x402b90\n    int32_t v9; // 0x402b90\n    int64_t v10; // 0x402b90\n    int64_t result; // 0x402b90\n    int32_t v11; // 0x402c13\n    char * str2; // 0x402c32\n    while (true) {\n        // 0x402c27\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x402c3b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x402c7d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x402c4f\n                break;\n            }\n            // 0x402be0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x402bee\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x402c17\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x402c53\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x402c5a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x402c27\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x402c27\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x402c3b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x402c7d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x402c4f\n                    break;\n                }\n                // 0x402be0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x402bee\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x402c17\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x402c4f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x402c68:\n    // 0x402c7d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_402cb0",
            "funcStartAddr": "402cb0",
            "funcEndAddr": "402d21",
            "decompiledFuncCode": "int64_t function_402cb0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x402cb0\n    if (a3 == -1) {\n        // 0x402d10\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x402cc5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x402cd4\n    function_40a030(1, a1);\n    function_409d20(0, 8, a2);\n    error(0, 0, format);\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_402d30",
            "funcStartAddr": "402d30",
            "funcEndAddr": "402e48",
            "decompiledFuncCode": "int64_t function_402d30(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x402d5d\n    fputs_unlocked(v1, g47);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x402dd0\n        int64_t v5; // 0x402dd7\n        int64_t v6; // 0x402df7\n        while (v3 != 0) {\n            // 0x402dbb\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x402d80\n                break;\n            }\n            // 0x402dcd\n            v4 = v3 + 1;\n            v5 = function_40a050(v2);\n            __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x402e00\n                goto lab_0x402e00;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x402d83\n        int64_t v8 = function_40a050(v2); // 0x402d8d\n        __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x402dad\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x402dbb\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x402d80\n                    break;\n                }\n                // 0x402dcd\n                v4 = v3 + 1;\n                v5 = function_40a050(v2);\n                __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x402e00\n                    goto lab_0x402e00;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x402d80\n            v7 = v3 + 1;\n            v8 = function_40a050(v2);\n            __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x402e00:;\n    int64_t v10 = (int64_t)g47; // 0x402e00\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x402e07\n    uint64_t result = *v11; // 0x402e07\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x402e30\n        return __overflow(g47, 10);\n    }\n    // 0x402e11\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402e50",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402ec0",
            "decompiledFuncCode": "int64_t function_402e50(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_402b90(a2, v2, v1, a5); // 0x402e7c\n    int64_t result = v3; // 0x402e84\n    if (v3 < 0) {\n        // 0x402e98\n        function_402cb0((int64_t)a1, a2, v3);\n        function_402d30(v2, v1, a5);\n        result = -1;\n    }\n    // 0x402e86\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ec0",
            "funcStartAddr": "402ec0",
            "funcEndAddr": "402f0d",
            "decompiledFuncCode": "int64_t function_402ec0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x402ec0\n    if (result == 0) {\n        // 0x402f01\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x402ef8\n    int32_t n = a4; // 0x402ef8\n    int64_t v1 = result; // 0x402eff\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x402f01\n        return result;\n    }\n    int64_t str3 = str2; // 0x402eff\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x402ee0\n    int64_t result2 = 0; // 0x402eed\n    while (v2 != 0) {\n        // 0x402eef\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x402f01\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x402f01\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "402f18",
            "decompiledFuncCode": "int64_t function_402f10(int64_t a1) {\n    // 0x402f10\n    g61 = a1;\n    int64_t result; // 0x402f10\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f20",
            "funcStartAddr": "402f20",
            "funcEndAddr": "402f28",
            "decompiledFuncCode": "int64_t function_402f20(int64_t a1) {\n    // 0x402f20\n    g60 = a1;\n    int64_t result; // 0x402f20\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f30",
            "funcStartAddr": "402f30",
            "funcEndAddr": "402fce",
            "decompiledFuncCode": "int64_t function_402f30(void) {\n    // 0x402f30\n    int32_t * err_num; // 0x402f46\n    if ((int32_t)function_40c430((int64_t)g45) == 0) {\n        goto lab_0x402f5c;\n    } else {\n        // 0x402f46\n        err_num = __errno_location();\n        if (g60 == 0) {\n            goto lab_0x402f73;\n        } else {\n            // 0x402f57\n            if (*err_num != 32) {\n                goto lab_0x402f73;\n            } else {\n                goto lab_0x402f5c;\n            }\n        }\n    }\n  lab_0x402f5c:;\n    int64_t result = function_40c430((int64_t)g47); // 0x402f63\n    if ((int32_t)result == 0) {\n        // 0x402f6c\n        return result;\n    }\n    // 0x402fae\n    _exit(g34);\n    // UNREACHABLE\n  lab_0x402f73:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402f7f\n    if (g61 == 0) {\n        // 0x402fb9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402f93\n        error(0, *err_num, \"%s: %s\", (char *)function_409ea0((int64_t)g61), v1);\n    }\n    // 0x402fae\n    _exit(g34);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402fd0",
            "funcStartAddr": "402fd0",
            "funcEndAddr": "40303a",
            "decompiledFuncCode": "int64_t function_402fd0(int32_t fd2, int64_t path, int64_t oflag, int64_t a4) {\n    int32_t fd = open((char *)path, (int32_t)oflag); // 0x402fe5\n    if (fd != fd2 != fd >= 0) {\n        // 0x402ff4\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x40300c\n    int32_t * v1 = __errno_location(); // 0x403014\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403040",
            "funcStartAddr": "403040",
            "funcEndAddr": "4030cb",
            "decompiledFuncCode": "int64_t function_403040(int64_t a1, int64_t fd2, int64_t path, int64_t a4, int32_t flag) {\n    struct timespec v1; // 0x40306b\n    struct timespec times2[2]; // 0x403040\n    struct timespec v2[2]; // 0x40306b\n    struct timespec v3; // 0x403040\n    struct timespec times[2]; // 0x403040\n    int32_t fd = a1; // 0x403056\n    int32_t result; // 0x403040\n    if (fd >= 0) {\n        // 0x403080\n        v3 = (struct {int64_t e0; int32_t e1;}){\n            .e0 = 0,\n            .e1 = 0\n        };\n        v3.e0 = a4;\n        times[0] = v3;\n        int32_t v4 = futimens(fd, times); // 0x403083\n        result = v4;\n        if (path == 0 || v4 != -1) {\n            goto lab_0x403070;\n        } else {\n            int32_t v5 = *__errno_location(); // 0x403097\n            times2 = times;\n            if (v5 != 38) {\n                // 0x403075\n                return 0xffffffff;\n            }\n            goto lab_0x40305f;\n        }\n    } else {\n        if (path == 0) {\n            // 0x4030b0\n            *__errno_location() = 9;\n            return 0xffffffff;\n        }\n        // 0x40305a\n        v1 = (struct {int64_t e0; int32_t e1;}){\n            .e0 = 0,\n            .e1 = 0\n        };\n        v1.e0 = a4;\n        v2[0] = v1;\n        times2 = v2;\n        goto lab_0x40305f;\n    }\n  lab_0x403070:\n    // 0x403070\n    if (result == 1) {\n        // 0x4030b0\n        *__errno_location() = 9;\n        return 0xffffffff;\n    }\n    // 0x403075\n    return result;\n  lab_0x40305f:\n    // 0x40305f\n    result = utimensat((int32_t)fd2, (char *)path, times2, flag);\n    goto lab_0x403070;\n}\n"
        },
        {
            "funcName": "function_4030d0",
            "funcStartAddr": "4030d0",
            "funcEndAddr": "40310a",
            "decompiledFuncCode": "int64_t function_4030d0(int64_t * tp) {\n    int64_t result = 0; // 0x4030e4\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x4030e6\n        int64_t tp2; // bp-24, 0x4030d0\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *tp = tp2;\n        int128_t v1; // 0x4030d0\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)((int64_t)tp + 8) = result;\n    }\n    // 0x403104\n    return result;\n}\n"
        },
        {
            "funcName": "function_403110",
            "funcStartAddr": "403110",
            "funcEndAddr": "40328e",
            "decompiledFuncCode": "int64_t function_403110(int64_t a1, int64_t a2, uint64_t a3, uint64_t result) {\n    int64_t * v1 = (int64_t *)(a1 + 168); // 0x403110\n    int64_t result3 = *v1; // 0x403110\n    if (result3 == 0) {\n        goto lab_0x403168;\n    } else {\n        int64_t * v2 = (int64_t *)(a1 + 48); // 0x403126\n        if (*v2 != 0) {\n            goto lab_0x403168;\n        } else {\n            // 0x40312d\n            if (*(char *)(a1 + 161) != 0) {\n                goto lab_0x403168;\n            } else {\n                int64_t * v3 = (int64_t *)(a1 + 200); // 0x403136\n                if (result < 3 != (*v3 == 0)) {\n                    int128_t v4 = __asm_movdqu((int128_t)a2); // 0x40314a\n                    *(char *)(a1 + 216) = 1;\n                    __asm_movups(*(int128_t *)(a1 + 32), v4);\n                    *v2 = result;\n                    return result;\n                }\n                // 0x403270\n                *v3 = 1;\n                goto lab_0x403280;\n            }\n        }\n    }\n  lab_0x403168:\n    if (result >= 5) {\n        // 0x403172\n        *v1 = result3 + 1;\n        *(int64_t *)(a1 + 48) = result - 4;\n        *(int64_t *)(a1 + 64) = (a3 / 0x8000000000000000 & -100) + a3;\n        *(int64_t *)(a1 + 56) = a3 / 0x8000000000000000;\n        *(int64_t *)(a1 + 40) = a3 / 0x8000000000000000;\n        return 0x346dc5d63886594b * a3;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 200); // 0x403208\n    *v5 = *v5 + 1;\n    if (result >= 3) {\n        // 0x403216\n        *(int64_t *)(a1 + 72) = a3 / 0x8000000000000000;\n        int64_t result2 = a3 / 0x8000000000000000 & 100; // 0x403243\n        *(int64_t *)(a1 + 80) = a3 - result2;\n        // 0x40324e\n        *(int64_t *)(a1 + 88) = 0;\n        *(int64_t *)(a1 + 96) = 0;\n        *(int32_t *)(a1 + 28) = 2;\n        return result2;\n    }\n    goto lab_0x403280;\n  lab_0x403280:\n    // 0x403280\n    *(int64_t *)(a1 + 72) = a3;\n    *(int64_t *)(a1 + 80) = 0;\n    // 0x40324e\n    *(int64_t *)(a1 + 88) = 0;\n    *(int64_t *)(a1 + 96) = 0;\n    *(int32_t *)(a1 + 28) = 2;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "403389",
            "decompiledFuncCode": "int64_t function_403290(int32_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int32_t v1 = a1 / 797; // 0x4032cd\n    int32_t v2 = __sprintf_chk((char *)a2, 1, -1, \"%c%02d\", 43, (int64_t)(v1 < 0 ? -v1 : v1)); // 0x4032e5\n    int32_t v3 = -3600 * v1 + a1; // 0x4032ea\n    if (v3 == 0) {\n        // 0x403350\n        return result;\n    }\n    int64_t v4 = (int64_t)v2 + result; // 0x4032fb\n    *(char *)v4 = 58;\n    *(char *)(v4 + 1) = 48;\n    uint32_t v5 = (v3 < 0 ? -v3 : v3) % 60;\n    if (v5 != 0) {\n        // 0x403360\n        *(char *)(v4 + 3) = 58;\n        char v6 = v5 / 10;\n        *(char *)(v4 + 4) = v6 | 48;\n        *(char *)(v4 + 5) = (char)v5 + 48 + -10 * v6;\n        *(char *)(v4 + 6) = 0;\n    } else {\n        // 0x40334d\n        *(char *)(v4 + 3) = 0;\n    }\n    // 0x403350\n    return result;\n}\n"
        },
        {
            "funcName": "function_403390",
            "funcStartAddr": "403390",
            "funcEndAddr": "4033fe",
            "decompiledFuncCode": "int64_t function_403390(int32_t a1, int64_t * a2, int32_t a3, int64_t a4) {\n    int32_t v1 = a1 + 1900; // 0x4033d2\n    char * v2 = v1 < 0 == ((v1 ^ a1) & (a1 ^ -0x80000000)) < 0 ? (char *)((int64_t)\"-%02d%02d\" + 1) : \"-%02d%02d\"; // 0x4033f4\n    __sprintf_chk((char *)a2, 1, -1, v2);\n    return (int64_t)a2;\n}\n"
        },
        {
            "funcName": "function_403400",
            "funcStartAddr": "403400",
            "funcEndAddr": "4034be",
            "decompiledFuncCode": "int64_t function_403400(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403400\n    int64_t v1; // 0x403400\n    if ((char)v1 != 0) {\n        // 0x403428\n        int128_t v2; // 0x403400\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x40345f\n    fwrite((int64_t *)\"date: \", 1, 6, g47);\n    int64_t v3 = 8; // bp-208, 0x40349b\n    return function_40c370((int64_t)g47, a1, &v3);\n}\n"
        },
        {
            "funcName": "function_4034c0",
            "funcStartAddr": "4034c0",
            "funcEndAddr": "40352b",
            "decompiledFuncCode": "int64_t function_4034c0(int64_t a1, int32_t * a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = a4; // bp-80, 0x4034c8\n    int64_t v2 = (int64_t)a3; // 0x4034d1\n    if (a4 == -1) {\n        // 0x403510\n        int64_t v3; // bp-72, 0x4034c0\n        v2 = function_40c180(a1, &v1, &v3);\n        if (v2 == 0) {\n            // 0x403502\n            return 0;\n        }\n    }\n    int64_t v4 = (int64_t)a2;\n    int32_t v5 = *(int32_t *)(v4 + 4); // 0x4034d5\n    int32_t v6 = *(int32_t *)v2; // 0x4034d8\n    int32_t v7 = *(int32_t *)(v2 + 4); // 0x4034da\n    int32_t v8 = *(int32_t *)(v4 + 8); // 0x4034df\n    int32_t v9 = *(int32_t *)(v2 + 8); // 0x4034e2\n    int32_t v10 = *(int32_t *)(v4 + 12); // 0x4034e7\n    int32_t v11 = *(int32_t *)(v2 + 12); // 0x4034ea\n    int32_t v12 = *(int32_t *)(v4 + 16); // 0x4034ef\n    int32_t v13 = *(int32_t *)(v2 + 16); // 0x4034f2\n    int32_t v14 = *(int32_t *)(v2 + 20) ^ *(int32_t *)(v4 + 20); // 0x4034fa\n    int64_t v15; // 0x4034c0\n    int64_t result = (int64_t)((v7 ^ v5 | v6 ^ (int32_t)v15 | v9 ^ v8 | v11 ^ v10 | v13 ^ v12 | v14) == 0) | (int64_t)(v14 & -256); // 0x4034ff\n    // 0x403502\n    return result;\n}\n"
        },
        {
            "funcName": "function_403530",
            "funcStartAddr": "403530",
            "funcEndAddr": "403565",
            "decompiledFuncCode": "int64_t function_403530(uint64_t a1, int64_t a2, char * a3) {\n    // 0x403530\n    __fprintf_chk(g47, 1, (char *)((a1 % 256 ^ 1) + (int64_t)\" %+ld %s\"));\n    return 1;\n}\n"
        },
        {
            "funcName": "function_403570",
            "funcStartAddr": "403570",
            "funcEndAddr": "403625",
            "decompiledFuncCode": "int64_t function_403570(int64_t a1, char a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1; // 0x403570\n    int64_t v2; // 0x403570\n    if (a4 > 2) {\n        if (a5 >= 0) {\n            goto lab_0x40357e;\n        } else {\n            // 0x4035ed\n            v1 = (uint64_t)a3 / 0x8000000000000000;\n            v2 = (a3 >> 63 & -100) + a3;\n            goto lab_0x4035d2;\n        }\n    } else {\n        // 0x403579\n        v1 = a3;\n        v2 = 0;\n        if (a5 < 0) {\n            goto lab_0x4035d2;\n        } else {\n            goto lab_0x40357e;\n        }\n    }\n  lab_0x40357e:;\n    int128_t v3 = a3; // 0x403580\n    int128_t v4 = 60 * v3; // 0x403580\n    int64_t v5 = v4; // 0x403580\n    int64_t v6; // 0x403570\n    int64_t v7; // 0x403570\n    if (a2 != 0) {\n        int64_t v8 = v5 - a5; // 0x4035c2\n        v6 = v8;\n        v7 = (v8 ^ v5) & (v5 ^ a5);\n    } else {\n        int64_t v9 = v5 + a5; // 0x40358e\n        v6 = v9;\n        v7 = (v9 ^ v5) & (v9 ^ a5);\n    }\n    int64_t v10 = v6; // 0x403598\n    if (v4 != 0x3c0000000000000000 * v3 >> 64 || v7 < 0) {\n        // 0x4035b8\n        return 0;\n    }\n    goto lab_0x40359a;\n  lab_0x4035d2:\n    // 0x4035d2\n    v10 = v2 + 60 * v1;\n    goto lab_0x40359a;\n  lab_0x40359a:;\n    int64_t result = 0; // 0x4035aa\n    if (v10 < 1441) {\n        // 0x4035ac\n        *(int32_t *)a1 = 60 * (int32_t)v10;\n        result = 1;\n    }\n    // 0x4035b8\n    return result;\n}\n"
        },
        {
            "funcName": "function_403630",
            "funcStartAddr": "403630",
            "funcEndAddr": "4036ea",
            "decompiledFuncCode": "int64_t function_403630(int64_t a1, int64_t a2) {\n    char * str = (char *)a2;\n    int64_t v1 = (int64_t)&g10; // 0x403644\n    int64_t str2 = (int64_t)\"GMT\"; // 0x403644\n    int64_t result = v1; // 0x403666\n    int64_t v2; // 0x403630\n    int64_t v3; // 0x403630\n    int64_t str4; // 0x403630\n    int64_t str3; // 0x403630\n    while (strcmp(str, (char *)str2) != 0) {\n        // 0x403650\n        v1 += 16;\n        str2 = *(int64_t *)v1;\n        if (str2 == 0) {\n            int64_t v4 = a1 + 232; // 0x403670\n            int64_t v5 = *(int64_t *)v4; // 0x403670\n            v3 = v4;\n            str3 = v5;\n            if (v5 != 0) {\n                goto lab_0x4036c4;\n            } else {\n                // 0x403688\n                v2 = (int64_t)&g9;\n                str4 = (int64_t)\"WET\";\n                goto lab_0x4036a4;\n            }\n        }\n        result = v1;\n    }\n    // 0x403668\n    return result;\n  lab_0x4036c4:\n    // 0x4036c4\n    result = v3;\n    if (strcmp(str, (char *)str3) != 0) {\n        int64_t v6 = v3 + 16; // 0x4036b8\n        int64_t v7 = *(int64_t *)v6; // 0x4036bc\n        v3 = v6;\n        str3 = v7;\n        if (v7 == 0) {\n            // 0x403688\n            v2 = (int64_t)&g9;\n            str4 = (int64_t)\"WET\";\n            goto lab_0x4036a4;\n        } else {\n            goto lab_0x4036c4;\n        }\n    } else {\n        return result;\n    }\n  lab_0x4036a4:\n    // 0x4036a4\n    result = v2;\n    if (strcmp(str, (char *)str4) != 0) {\n        int64_t v8 = v2 + 16; // 0x403698\n        int64_t v9 = *(int64_t *)v8; // 0x40369c\n        result = 0;\n        v2 = v8;\n        str4 = v9;\n        if (v9 == 0) {\n            return result;\n        } else {\n            goto lab_0x4036a4;\n        }\n    } else {\n        return result;\n    }\n}\n"
        },
        {
            "funcName": "function_4036f0",
            "funcStartAddr": "4036f0",
            "funcEndAddr": "403875",
            "decompiledFuncCode": "int64_t function_4036f0(int64_t a1, int64_t a2) {\n    // 0x4036f0\n    int64_t v1; // 0x4036f0\n    function_403400((int64_t)dcgettext(NULL, \"parsed %s part: \", 5), a1, 5, v1, v1, v1);\n    int64_t v2 = *(int64_t *)(a2 + 104); // 0x40371a\n    int64_t v3; // 0x4036f0\n    int64_t v4; // 0x4036f0\n    int64_t v5; // 0x4036f0\n    int64_t v6; // 0x4036f0\n    int64_t v7; // 0x4036f0\n    int64_t v8; // 0x4036f0\n    if (v2 != 0) {\n        uint64_t v9 = function_403530(0, v2, \"year(s)\"); // 0x403857\n        int64_t v10 = *(int64_t *)(a2 + 112); // 0x40385c\n        int64_t v11 = v9 % 256; // 0x403860\n        v3 = v11;\n        v7 = v10;\n        v4 = v11;\n        if (v10 != 0) {\n            goto lab_0x403736;\n        } else {\n            goto lab_0x403747;\n        }\n    } else {\n        int64_t v12 = *(int64_t *)(a2 + 112); // 0x403727\n        v3 = 0;\n        v7 = v12;\n        if (v12 == 0) {\n            int64_t v13 = *(int64_t *)(a2 + 120); // 0x4037d8\n            v5 = 0;\n            v8 = v13;\n            if (v13 != 0) {\n                goto lab_0x40374c;\n            } else {\n                // 0x4037e7\n                v6 = 0;\n                if (*(int64_t *)(a2 + 128) == 0) {\n                    // 0x4037f5\n                    v6 = 0;\n                    if (*(int64_t *)(a2 + 136) == 0) {\n                        // 0x403803\n                        v6 = 0;\n                        if (*(int64_t *)(a2 + 144) == 0) {\n                            // 0x403811\n                            v6 = 0;\n                            if (*(int32_t *)(a2 + 152) == 0) {\n                                // 0x40381f\n                                return fputs(dcgettext(NULL, \"today/this/now\\n\", 5), g47);\n                            }\n                        }\n                    }\n                }\n                goto lab_0x403759;\n            }\n        } else {\n            goto lab_0x403736;\n        }\n    }\n  lab_0x403736:\n    // 0x403736\n    v4 = function_403530(v3, v7, \"month(s)\") % 256;\n    goto lab_0x403747;\n  lab_0x403747:;\n    int64_t v14 = *(int64_t *)(a2 + 120);\n    v5 = v4;\n    v8 = v14;\n    v6 = v4;\n    if (v14 == 0) {\n        goto lab_0x403759;\n    } else {\n        goto lab_0x40374c;\n    }\n  lab_0x403759:;\n    int64_t v15 = *(int64_t *)(a2 + 128); // 0x403759\n    int64_t v16 = v6; // 0x403763\n    if (v15 != 0) {\n        // 0x403765\n        v16 = function_403530(v6, v15, \"hour(s)\") % 256;\n    }\n    int64_t v17 = *(int64_t *)(a2 + 136); // 0x403772\n    int64_t v18 = v16; // 0x40377c\n    if (v17 != 0) {\n        // 0x40377e\n        v18 = function_403530(v16, v17, \"minutes\") % 256;\n    }\n    int64_t v19 = *(int64_t *)(a2 + 144); // 0x40378b\n    int64_t v20 = v18; // 0x403795\n    if (v19 != 0) {\n        // 0x403797\n        v20 = function_403530(v18, v19, \"seconds\") % 256;\n    }\n    int32_t v21 = *(int32_t *)(a2 + 152); // 0x4037a4\n    if (v21 != 0) {\n        // 0x4037b0\n        function_403530(v20, (int64_t)v21, \"nanoseconds\");\n    }\n    // 0x4037ba\n    return fputc(10, g47);\n  lab_0x40374c:\n    // 0x40374c\n    v6 = function_403530(v5, v8, \"day(s)\") % 256;\n    goto lab_0x403759;\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "403915",
            "decompiledFuncCode": "int64_t function_403880(int32_t * a1, int64_t * a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = (int64_t)a3;\n    int64_t v1; // 0x403880\n    int64_t v2 = function_40e2d0(result, 100, \"(Y-M-D) %Y-%m-%d %H:%M:%S\", (int64_t)a1, 0, 0, v1, v1, v1); // 0x4038a4\n    int32_t v3 = v2; // 0x4038b4\n    if (a2 == NULL || v3 > 99) {\n        // 0x4038c1\n        return result;\n    }\n    int64_t v4 = (int64_t)a2;\n    if (*(int64_t *)(v4 + 208) == 0) {\n        // 0x4038c1\n        return result;\n    }\n    // 0x4038d0\n    int64_t v5; // bp-56, 0x403880\n    int64_t v6 = function_403290(*(int32_t *)(v4 + 24), &v5); // 0x4038d8\n    __snprintf_chk((char *)((0x100000000 * v2 >> 32) + result), 100 - v3, 1, -1, \" TZ=%s\", (char *)v6);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403920",
            "funcStartAddr": "403920",
            "funcEndAddr": "403a0d",
            "decompiledFuncCode": "int64_t function_403920(int64_t a1, int64_t * str) {\n    int64_t result = (int64_t)str;\n    if (*(char *)(a1 + 224) == 0) {\n        // 0x4039c8\n        *(char *)str = 0;\n        if (*(int32_t *)(a1 + 16) >= 7) {\n            // 0x4039ba\n            return result;\n        }\n        // 0x4039e1\n        __snprintf_chk((char *)result, 100, 1, -1, (char *)0x411a7c);\n        return result;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x403939\n    uint64_t v2 = v1 + 1; // 0x40393d\n    int32_t v3; // 0x403920\n    if (v2 < 14) {\n        int32_t chars_printed = snprintf((char *)str, 100, \"%s\", (char *)(v1 + (int64_t)\"last\" + 1 + 10 * v2)); // 0x403962\n        v3 = chars_printed;\n        if (chars_printed < 100 != *(int32_t *)(a1 + 16) < 7) {\n            // 0x4039ba\n            return result;\n        }\n    } else {\n        // 0x403990\n        v3 = __snprintf_chk((char *)str, 100, 1, -1, \"%ld\", (int32_t)v1);\n        if (*(int32_t *)(a1 + 16) >= 7) {\n            // 0x4039ba\n            return result;\n        }\n    }\n    char * v4 = v3 == 0 ? (char *)0x411a7c : (char *)0x411a7b; // 0x40398d\n    int32_t v5 = (0x6400000000 - 0x100000000 * (int64_t)v3) / 0x100000000;\n    __snprintf_chk((char *)((int64_t)v3 + result), v5, 1, -1, v4);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403db0",
            "decompiledFuncCode": "int64_t function_403a10(int64_t a1, int64_t a2) {\n    // 0x403a10\n    int64_t v1; // 0x403a10\n    function_403400((int64_t)dcgettext(NULL, \"parsed %s part: \", 5), a1, 5, v1, v1, v1);\n    char * v2; // 0x403a10\n    char * v3; // 0x403a10\n    int64_t v4; // 0x403a10\n    if (*(int64_t *)(a2 + 168) == 0) {\n        goto lab_0x403a55;\n    } else {\n        char * v5 = (char *)(a2 + 218); // 0x403a48\n        if (*v5 == 0) {\n            int64_t v6 = *(int64_t *)(a2 + 40); // 0x403c30\n            int64_t v7 = *(int64_t *)(a2 + 64); // 0x403c34\n            int64_t v8 = *(int64_t *)(a2 + 56); // 0x403c3f\n            __fprintf_chk(g47, 1, \"(Y-M-D) %04ld-%02ld-%02ld\", (int32_t)v6, (int32_t)v8, (int32_t)v7);\n            *v5 = 1;\n            char * v9 = (char *)(a2 + 223);\n            char * v10 = (char *)(a2 + 216);\n            v4 = 1;\n            if (*v10 == *v9) {\n                goto lab_0x403aa6;\n            } else {\n                // 0x403c73\n                fputc(32, g47);\n                v3 = v9;\n                v2 = v10;\n                goto lab_0x403a66;\n            }\n        } else {\n            goto lab_0x403a55;\n        }\n    }\n  lab_0x403a55:;\n    char * v11 = (char *)(a2 + 223);\n    char * v12 = (char *)(a2 + 216);\n    v3 = v11;\n    v2 = v12;\n    v4 = 0;\n    if (*v12 == *v11) {\n        goto lab_0x403aa6;\n    } else {\n        goto lab_0x403a66;\n    }\n  lab_0x403aa6:;\n    // 0x403aa6\n    char * v13; // 0x403a10\n    int64_t v14; // 0x403a10\n    if (*(int64_t *)(a2 + 200) == 0) {\n        goto lab_0x403abd;\n    } else {\n        char * v15 = (char *)(a2 + 221); // 0x403ab0\n        if (*v15 == 0) {\n            // 0x403c90\n            __fprintf_chk(g47, 1, (char *)((v4 | (int64_t)\" %02ld:%02ld:%02ld\") ^ 1));\n            int64_t v16 = *(int64_t *)(a2 + 96); // 0x403cbc\n            if (v16 != 0) {\n                // 0x403d68\n                __fprintf_chk(g47, 1, \".%09d\", v16);\n            }\n            // 0x403cc9\n            if (*(int32_t *)(a2 + 28) == 1) {\n                // 0x403d90\n                fwrite((int64_t *)\"pm\", 1, 2, g47);\n            }\n            // 0x403cd3\n            *v15 = 1;\n            v14 = 1;\n            if (*(int64_t *)(a2 + 176) == 0) {\n                goto lab_0x403b2a;\n            } else {\n                char * v17 = (char *)(a2 + 219);\n                unsigned char v18 = *v17; // 0x403ced\n                v14 = v18;\n                v13 = v17;\n                if (v18 != 0) {\n                    goto lab_0x403b2a;\n                } else {\n                    goto lab_0x403cfc;\n                }\n            }\n        } else {\n            goto lab_0x403abd;\n        }\n    }\n  lab_0x403a66:\n    // 0x403a66\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"year: %04ld\", 5));\n    *v3 = *v2;\n    v4 = 1;\n    goto lab_0x403aa6;\n  lab_0x403abd:\n    // 0x403abd\n    v14 = v4;\n    char * v19; // 0x403a10\n    if (*(int64_t *)(a2 + 176) == 0) {\n        goto lab_0x403b2a;\n    } else {\n        char * v20 = (char *)(a2 + 219);\n        v14 = v4;\n        if (*v20 != 0) {\n            goto lab_0x403b2a;\n        } else {\n            // 0x403ad0\n            v19 = v20;\n            v13 = v20;\n            if (v4 != 0) {\n                goto lab_0x403cfc;\n            } else {\n                goto lab_0x403ad8;\n            }\n        }\n    }\n  lab_0x403b2a:;\n    // 0x403b2a\n    char * v21; // 0x403a10\n    int64_t v22; // 0x403a10\n    if (*(int64_t *)(a2 + 184) == 0) {\n        goto lab_0x403bc0;\n    } else {\n        char * v23 = (char *)(a2 + 220); // 0x403b38\n        if (*v23 != 0) {\n            goto lab_0x403bc0;\n        } else {\n            // 0x403b41\n            __fprintf_chk(g47, 1, (char *)((v14 ^ 1) + (int64_t)\" isdst=%d%s\"));\n            *v23 = 1;\n            if (*(int64_t *)(a2 + 208) == 0) {\n                goto lab_0x403b99;\n            } else {\n                char * v24 = (char *)(a2 + 222);\n                v21 = v24;\n                v22 = (int64_t)\" UTC%s\";\n                if (*v24 == 0) {\n                    goto lab_0x403d25;\n                } else {\n                    goto lab_0x403b99;\n                }\n            }\n        }\n    }\n  lab_0x403bc0:\n    // 0x403bc0\n    if (*(int64_t *)(a2 + 208) == 0) {\n        goto lab_0x403bd7;\n    } else {\n        char * v25 = (char *)(a2 + 222);\n        if (*v25 == 0) {\n            // 0x403d18\n            v21 = v25;\n            v22 = (v14 ^ 1) + (int64_t)\" UTC%s\";\n            goto lab_0x403d25;\n        } else {\n            goto lab_0x403bd7;\n        }\n    }\n  lab_0x403bd7:\n    // 0x403bd7\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x403c12\n        return fputc(10, g47);\n    }\n    if ((char)v14 != 0) {\n        // 0x403ba6\n        fputc(32, g47);\n        goto lab_0x403be8;\n    } else {\n        goto lab_0x403be8;\n    }\n  lab_0x403cfc:\n    // 0x403cfc\n    fputc(32, g47);\n    v19 = v13;\n    goto lab_0x403ad8;\n  lab_0x403ad8:;\n    // 0x403ad8\n    int64_t v26; // bp-152, 0x403a10\n    function_403920(a2, &v26);\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s (day ordinal=%ld number=%d)\", 5));\n    *v19 = 1;\n    v14 = 1;\n    goto lab_0x403b2a;\n  lab_0x403be8:\n    // 0x403be8\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"number of seconds: %ld\", 5));\n    // 0x403c12\n    return fputc(10, g47);\n  lab_0x403b99:\n    // 0x403b99\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x403c12\n        return fputc(10, g47);\n    }\n    // 0x403ba6\n    fputc(32, g47);\n    goto lab_0x403be8;\n  lab_0x403d25:\n    // 0x403d25\n    function_403290(*(int32_t *)(a2 + 24), &v26);\n    __fprintf_chk(g47, 1, (char *)v22);\n    *v21 = 1;\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x403c12\n        return fputc(10, g47);\n    }\n    // 0x403ba6\n    fputc(32, g47);\n    goto lab_0x403be8;\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "406022",
            "decompiledFuncCode": "int64_t function_403db0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403db0\n    int64_t v1; // bp-1512, 0x403db0\n    int64_t v2 = &v1; // 0x403dd8\n    int64_t v3; // bp-1352, 0x403db0\n    int64_t v4 = &v3; // 0x403ddf\n    v3 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 16);\n    int64_t v6 = v2 + 56;\n    int64_t * v7 = (int64_t *)v6;\n    int64_t v8 = v2 + 64;\n    int64_t * v9 = (int64_t *)(v2 + 8);\n    int64_t * v10 = (int64_t *)v8;\n    int64_t v11 = v2 + 208;\n    int64_t * v12 = (int64_t *)(v2 + 40);\n    int64_t * v13 = (int64_t *)(v2 + 48);\n    int32_t * v14 = (int32_t *)(v2 + 36);\n    int64_t v15 = v2 + 224;\n    int64_t v16 = v2 + 272;\n    int128_t * v17 = (int128_t *)v16;\n    int64_t v18 = v2 + 320;\n    int64_t * v19 = (int64_t *)v18;\n    int64_t v20 = v2 + 288;\n    int128_t * v21 = (int128_t *)v20;\n    int64_t v22 = v2 + 304;\n    int128_t * v23 = (int128_t *)v22;\n    int32_t * v24 = (int32_t *)(v2 + 24);\n    int64_t v25 = v2 + 72;\n    int64_t * v26 = (int64_t *)v25;\n    int64_t * v27 = (int64_t *)(v2 - 16);\n    int64_t * v28 = (int64_t *)(v2 - 24);\n    int64_t * v29 = (int64_t *)(v2 - 32);\n    int32_t * v30 = (int32_t *)(v2 + 324);\n    char * v31 = (char *)v8;\n    int64_t v32 = v2 + 88;\n    int64_t * v33 = (int64_t *)v32;\n    int64_t * v34 = (int64_t *)(v2 + 96);\n    int64_t v35 = v2 + 104;\n    int64_t * v36 = (int64_t *)v35;\n    int64_t * v37 = (int64_t *)(v2 + 80);\n    int64_t * v38 = (int64_t *)(v2 + 112);\n    int64_t * v39 = (int64_t *)(v2 + 120);\n    int32_t * v40 = (int32_t *)v35;\n    int32_t * v41 = (int32_t *)v32;\n    int64_t v42; // bp-1176, 0x403db0\n    int64_t v43 = &v42; // 0x403db0\n    int64_t v44 = 0xfffffffe; // 0x403db0\n    int64_t v45 = 0; // 0x403db0\n    int64_t v46 = (int64_t)a1; // 0x403db0\n    int64_t v47 = v4; // 0x403db0\n    int64_t v48 = 38; // 0x403db0\n    int64_t v49; // 0x403db0\n    int64_t v50; // 0x403db0\n    int64_t v51; // 0x403db0\n    int64_t v52; // 0x403db0\n    int64_t v53; // 0x403db0\n    int64_t v54; // 0x403db0\n    int64_t v55; // 0x403db0\n    int64_t v56; // 0x403db0\n    int64_t v57; // 0x403db0\n    int64_t v58; // 0x403db0\n    int64_t v59; // 0x403db0\n    int64_t v60; // 0x403db0\n    int64_t v61; // 0x403db0\n    int64_t v62; // 0x403db0\n    int64_t v63; // 0x403db0\n    int64_t v64; // 0x403db0\n    int64_t v65; // 0x403db0\n    int64_t v66; // 0x403db0\n    int64_t v67; // 0x403db0\n    int64_t v68; // 0x403db0\n    int64_t v69; // 0x403db0\n    int64_t v70; // 0x403db0\n    int64_t * v71; // 0x404060\n    int128_t v72; // 0x403db0\n    int128_t v73; // 0x403db0\n    while (true) {\n      lab_0x403e0c:\n        // 0x403e0c\n        v53 = v48;\n        v52 = v47;\n        v59 = v46;\n        v56 = v45;\n        v65 = v43;\n        v73 = v72;\n        int32_t v74 = v44;\n        int32_t v75 = v74; // 0x403e0f\n        int64_t v76 = v65; // 0x403e0f\n        int64_t v77 = v44; // 0x403e0f\n        int64_t v78 = v56; // 0x403e0f\n        int64_t v79 = v59; // 0x403e0f\n        int64_t v80 = v53; // 0x403e0f\n        if (v74 == -2) {\n            // 0x404060\n            v71 = (int64_t *)v59;\n            int64_t v81 = *v71; // 0x404060\n            v49 = v81;\n            v68 = (int64_t)*(char *)v81;\n            while (true) {\n              lab_0x404077_2:;\n                int64_t v82 = v68;\n                int64_t v83 = v49;\n                v51 = v83;\n                v70 = v82;\n                if (v82 < 33) {\n                    int64_t v84 = v83; // 0x404098\n                    v50 = v83;\n                    v69 = v82;\n                    if ((1 << v82 % 64 & 0x100003e00) == 0) {\n                        goto lab_0x4040d1;\n                    } else {\n                        int64_t v85 = v84 + 1;\n                        *v71 = v85;\n                        unsigned char v86 = *(char *)v85; // 0x4040a1\n                        int64_t v87 = v86; // 0x4040a1\n                        v51 = v85;\n                        v70 = v87;\n                        while (v86 < 33) {\n                            // 0x4040b3\n                            v84 = v85;\n                            v50 = v85;\n                            v69 = v87;\n                            if ((1 << v87 % 64 & 0x100003e00) == 0) {\n                                goto lab_0x4040d1;\n                            }\n                            v85 = v84 + 1;\n                            *v71 = v85;\n                            v86 = *(char *)v85;\n                            v87 = v86;\n                            v51 = v85;\n                            v70 = v87;\n                        }\n                        goto lab_0x4041f0;\n                    }\n                } else {\n                    goto lab_0x4041f0;\n                }\n            }\n            goto lab_0x404319_3;\n        } else {\n            int64_t v88 = v80;\n            int64_t v89 = v79;\n            int64_t v90 = v78;\n            int64_t v91 = v76;\n            int32_t v92 = v75;\n            v62 = 0;\n            v66 = v91;\n            v64 = 0;\n            v57 = v90;\n            v60 = v89;\n            v54 = v88;\n            if (v92 < 1) {\n                goto lab_0x403e32;\n            } else {\n                int64_t v93 = v77;\n                v67 = v91;\n                v63 = v93;\n                v58 = v90;\n                v61 = v89;\n                v55 = v88;\n                if (v92 < 278) {\n                    goto lab_0x4042c8;\n                } else {\n                    // 0x403e29\n                    v62 = 2;\n                    v66 = v91;\n                    v64 = v93;\n                    v57 = v90;\n                    v60 = v89;\n                    v54 = v88 + 2 & 0xffffffff;\n                    goto lab_0x403e32;\n                }\n            }\n        }\n    }\n  lab_0x403f2d_8:;\n    // 0x403f2d\n    int64_t result; // 0x403db0\n    return result;\n  lab_0x4040d1:;\n    int64_t v94 = v69;\n    int64_t v95 = v50;\n    int64_t v96 = v95; // 0x4040d7\n    int64_t v97 = v94; // 0x4040d7\n    int64_t v98 = 0; // 0x4040d7\n    if ((int32_t)v94 < 58) {\n        // break -> 0x404319\n        goto lab_0x404319_3;\n    }\n    int64_t v99 = v94 + 0xffffffbf; // 0x4040dd\n    int64_t v100 = v95; // 0x4040e3\n    int64_t v101 = v95; // 0x4040e3\n    int64_t v102 = v99; // 0x4040e3\n    int64_t v103 = v94; // 0x4040e3\n    if ((int32_t)v99 >= 58) {\n        goto lab_0x404025_2;\n    }\n    goto lab_0x4040e9;\n  lab_0x404077:;\n    // 0x404077\n    int64_t v114; // 0x403db0\n    v49 = v114;\n    int64_t v115; // 0x403db0\n    v68 = v115;\n    goto lab_0x404077_2;\n  lab_0x404124:;\n    // 0x404124\n    int64_t v106; // 0x403db0\n    int64_t v116 = v106;\n    int64_t v105; // 0x403db0\n    int64_t v117 = v105;\n    int64_t v118 = v117; // 0x404127\n    int64_t v104; // 0x403db0\n    if (v117 >= v2 + 147) {\n        goto lab_0x40412f;\n    } else {\n        // 0x404129\n        *(char *)v117 = (char)v104;\n        v118 = v117 + 1;\n        goto lab_0x40412f;\n    }\n  lab_0x404025_2:\n    // 0x404025\n    *v71 = v100 + 1;\n    unsigned char v119 = *(char *)v100; // 0x40402c\n    v62 = 0;\n    v66 = v65;\n    v64 = 0;\n    v57 = v56;\n    v60 = v59;\n    v54 = v53;\n    v67 = v65;\n    v63 = v119;\n    v58 = v56;\n    v61 = v59;\n    v55 = v53;\n    if (v119 != 0) {\n        goto lab_0x4042c8;\n    } else {\n        goto lab_0x403e32;\n    }\n  lab_0x403e32:;\n    int64_t v120 = v54;\n    int64_t v121 = v60;\n    int64_t v122 = v57;\n    int64_t v123 = v64;\n    int64_t v124 = v66;\n    int128_t v125 = v73; // 0x403e36\n    int64_t v126 = v124; // 0x403e36\n    int64_t v127 = v123; // 0x403e36\n    int64_t v128 = v122; // 0x403e36\n    int64_t v129 = v121; // 0x403e36\n    int64_t v130 = v52; // 0x403e36\n    int64_t v131; // 0x403db0\n    int64_t v132; // 0x403db0\n    int64_t v133; // 0x403db0\n    int64_t v134; // 0x403db0\n    int64_t v135; // 0x403db0\n    int64_t v136; // 0x403db0\n    int64_t v137; // 0x403db0\n    int64_t v138; // 0x403db0\n    int64_t v139; // 0x403db0\n    int64_t v140; // 0x403db0\n    int64_t v141; // 0x403db0\n    int64_t v142; // 0x403db0\n    int64_t v143; // 0x403db0\n    int64_t v144; // 0x403db0\n    int64_t v145; // 0x403db0\n    int128_t v146; // 0x403db0\n    int128_t v147; // 0x403db0\n    if ((int32_t)v120 < 113) {\n        int64_t v148 = 0x100000000 * v120 >> 32; // 0x403e3c\n        char v149 = *(char *)(v148 + (int64_t)&g13); // 0x403e3f\n        v125 = v73;\n        v126 = v124;\n        v127 = v123;\n        v128 = v122;\n        v129 = v121;\n        v130 = v52;\n        if ((int32_t)v149 != (int32_t)v62) {\n            goto lab_0x403f00;\n        } else {\n            unsigned char v150 = *(char *)(v148 + (int64_t)&g14); // 0x403e4f\n            if (v150 == 0) {\n                int64_t v151 = v124 + 104; // 0x4044d0\n                int64_t v152 = v124 + 56; // 0x4044d4\n                int128_t v153 = __asm_movdqu(*(int128_t *)v152); // 0x4044d4\n                int64_t v154 = v124 + 72; // 0x4044df\n                int128_t v155 = __asm_movdqu(*(int128_t *)v154); // 0x4044df\n                *v17 = (int128_t)__asm_movaps(v153);\n                int64_t v156 = v124 + 88; // 0x4044f0\n                int128_t v157 = __asm_movdqu(*(int128_t *)v156); // 0x4044f0\n                *v19 = *(int64_t *)v151;\n                *v21 = (int128_t)__asm_movaps(v155);\n                *v23 = (int128_t)__asm_movaps(v157);\n                *v5 = *(int64_t *)v156;\n                *v9 = *(int64_t *)(v124 + 96);\n                *v24 = *(int32_t *)v151;\n                v147 = v155;\n                v139 = 0xffffffe4;\n                v144 = v52;\n                v145 = v124;\n                v140 = v123;\n                v135 = 0;\n                v138 = v121;\n                v131 = *(int64_t *)(v124 + 64);\n                v132 = *(int64_t *)(v124 + 80);\n                v133 = *(int64_t *)v154;\n                v134 = *(int64_t *)v152;\n                goto lab_0x404540;\n            } else {\n                int32_t v158 = *v14; // 0x403e60\n                int64_t v159 = v124 + 56; // 0x403e72\n                *v14 = v158 - 1 + (int32_t)(v158 == 0);\n                *(int64_t *)(v2 + 216) = *v12;\n                int128_t v160 = __asm_movdqa(*(int128_t *)v11); // 0x403e8c\n                *(int64_t *)v15 = *v13;\n                int128_t v161 = __asm_movdqa(*(int128_t *)v15); // 0x403ea5\n                __asm_movups(*(int128_t *)v159, v160);\n                int128_t v162 = __asm_movdqa(*(int128_t *)(v2 + 240)); // 0x403eb1\n                *(int64_t *)(v124 + 104) = *(int64_t *)(v2 + 256);\n                __asm_movups(*(int128_t *)(v124 + 72), v161);\n                __asm_movups(*(int128_t *)(v124 + 88), v162);\n                v146 = v161;\n                v143 = v52;\n                v142 = v159;\n                v141 = 0xfffffffe;\n                v136 = v150;\n                v137 = v121;\n                goto lab_0x403ec6;\n            }\n        }\n    } else {\n        goto lab_0x403f00;\n    }\n  lab_0x4042d2_2:;\n    // 0x4042d2\n    int64_t v163; // 0x403db0\n    v62 = v163;\n    int64_t v164; // 0x403db0\n    v66 = v164;\n    int64_t v165; // 0x403db0\n    v64 = v165;\n    int64_t v166; // 0x403db0\n    v57 = v166;\n    int64_t v167; // 0x403db0\n    v60 = v167;\n    int64_t v168; // 0x403db0\n    v54 = v168 + v163 & 0xffffffff;\n    goto lab_0x403e32;\n  lab_0x4041f0:;\n    int64_t v169 = v70;\n    int64_t v170 = v51; // 0x404270\n    char v171 = v169;\n    char v107; // 0x403db0\n    int64_t v108; // 0x403db0\n    if ((int32_t)v169 < 58) {\n        // 0x404260\n        v96 = v170;\n        v97 = v169;\n        v98 = 0;\n        if ((v171 - 43 & -3) != 0) {\n            // break -> 0x404319\n            goto lab_0x404319_3;\n        }\n        goto lab_0x40426e;\n    } else {\n        if ((v171 - 43 & -3) == 0) {\n            goto lab_0x40426e;\n        } else {\n            int64_t v172 = v169 + 0xffffffbf; // 0x404206\n            v101 = v170;\n            v102 = v172;\n            v103 = v169;\n            v107 = v171;\n            v108 = v170;\n            if ((int32_t)v172 < 58) {\n                goto lab_0x4040e9;\n            } else {\n                goto lab_0x404212;\n            }\n        }\n    }\n  lab_0x4040e9:\n    // 0x4040e9\n    v104 = v103;\n    v105 = v2 + 128;\n    v106 = v101;\n    if ((1 << v102 % 64) % 0x3ffffff04000000 != 0) {\n        goto lab_0x404124;\n    }\n    // 0x4040e9\n    v107 = v103;\n    v108 = v101;\n    goto lab_0x404212;\n  lab_0x40426e:;\n    int64_t v563 = v170 + 1;\n    *v71 = v563;\n    unsigned char v564 = *(char *)v563; // 0x404282\n    int64_t v565 = v564; // 0x404282\n    while (v564 < 33) {\n        int64_t v566 = v563; // 0x4042a6\n        v114 = v563;\n        v115 = v565;\n        if ((1 << v565 % 64 & 0x100003e00) == 0) {\n            goto lab_0x404077;\n        }\n        v563 = v566 + 1;\n        *v71 = v563;\n        v564 = *(char *)v563;\n        v565 = v564;\n    }\n    // 0x4042e0\n    v114 = v563;\n    v115 = v565;\n    if ((int32_t)v564 < 58) {\n        // 0x4042f1\n        v96 = v563;\n        v97 = v565;\n        v98 = v171 != 45 ? 1 : 0xffffffff;\n        goto lab_0x404319_3;\n    }\n    goto lab_0x404077;\n  lab_0x404212:\n    // 0x404212\n    v100 = v108;\n    int64_t v109 = v108; // 0x404215\n    if (v107 != 40) {\n        goto lab_0x404025_2;\n    }\n    int64_t v110 = v109 + 1; // 0x404240\n    *v71 = v110;\n    char v111 = *(char *)v109; // 0x404247\n    v62 = 0;\n    v66 = v65;\n    v64 = 0;\n    v57 = v56;\n    v60 = v59;\n    v54 = v53;\n    if (v111 == 0) {\n        goto lab_0x403e32;\n    }\n    int64_t v112 = v111 != 40 ? (int64_t)(v111 == 41) : 1;\n    v109 = v110;\n    while (v112 != 0) {\n        int64_t v113 = v112;\n        v110 = v109 + 1;\n        *v71 = v110;\n        v111 = *(char *)v109;\n        v62 = 0;\n        v66 = v65;\n        v64 = 0;\n        v57 = v56;\n        v60 = v59;\n        v54 = v53;\n        if (v111 == 0) {\n            goto lab_0x403e32;\n        }\n        // 0x404253\n        v112 = (v111 != 40 ? (int64_t)(v111 == 41) : 1) + v113;\n        v109 = v110;\n    }\n    // 0x4044bb\n    v114 = v110;\n    v115 = (int64_t)*(char *)v110;\n    goto lab_0x404077;\n  lab_0x404319_3:;\n    int64_t v173 = v98;\n    int64_t v174 = v96;\n    uint64_t v175 = v97 % 256; // 0x4042f6\n    int64_t v176 = v174;\n    int64_t v177 = 0x100000000 * (v173 == 0xffffffff ? 48 - v175 : v175 + 0xffffffd0) / 0x100000000;\n    int64_t v178 = v176 + 1; // 0x404319\n    unsigned char v179 = *(char *)v178; // 0x404319\n    while (v179 == 57 || (int32_t)v179 < 57) {\n        int128_t v180 = v177; // 0x404400\n        int128_t v181 = 10 * v180; // 0x404400\n        v163 = 2;\n        v164 = v65;\n        v165 = 63;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        if (v181 != 0xa0000000000000000 * v180 >> 64) {\n            goto lab_0x4042d2_2;\n        }\n        int64_t v182 = v179; // 0x404319\n        int64_t v183 = v181; // 0x404400\n        int64_t v184 = 0x100000000 * (v173 == 0xffffffff ? 48 - v182 : v182 + 0xffffffd0) >> 32; // 0x40430d\n        int64_t v185 = v184 + v183; // 0x404310\n        v163 = 2;\n        v164 = v65;\n        v165 = 63;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        int64_t v186 = v185; // 0x404313\n        int64_t v187 = v178; // 0x404313\n        if (((v185 ^ v183) & (v185 ^ v184)) < 0) {\n            goto lab_0x4042d2_2;\n        }\n        v176 = v187;\n        v177 = v186;\n        v178 = v176 + 1;\n        v179 = *(char *)v178;\n    }\n    int64_t v188; // 0x403db0\n    int64_t v189; // 0x403db0\n    int64_t v190; // 0x403db0\n    int64_t v191; // 0x403db0\n    int64_t v192; // 0x403db0\n    int64_t v193; // 0x403db0\n    int64_t v194; // 0x403db0\n    int64_t v195; // 0x403db0\n    if ((v179 - 44 & -3) != 0) {\n        goto lab_0x404480;\n    } else {\n        // 0x40433e\n        if ((int32_t)((int64_t)*(char *)(v176 + 2) + 0xffffffd0) < 10) {\n            int64_t v196; // 0x403db0\n            int64_t v197 = v196 + 0xffffffd0; // 0x404363\n            int64_t v198; // 0x403db0\n            int64_t v199; // 0x403db0\n            int64_t v200; // 0x403db0\n            int64_t v201; // 0x403db0\n            int64_t v202; // 0x403db0\n            int64_t v203; // 0x403db0\n            int64_t v204; // 0x404367\n            int64_t v205; // 0x40436e\n            char v206; // 0x40436e\n            int64_t v207; // 0x40436e\n            if ((int32_t)v197 < 10) {\n                // 0x40436e\n                v205 = v200 + 1;\n                v206 = *(char *)v205;\n                v207 = v206;\n                v203 = v197 + v204 & 0xffffffff;\n                v201 = v205;\n                v202 = v207 + 0xffffffd0;\n                v198 = v207;\n                v199 = v207 & 0xffffffff;\n            }\n            // 0x404380\n            int64_t v208; // 0x403db0\n            int64_t v209 = v208;\n            int64_t v210; // 0x403db0\n            int64_t v211 = v210;\n            int64_t v212; // 0x403db0\n            v195 = 10 * v212 & 0xfffffffe;\n            int32_t v213; // 0x403db0\n            int32_t v214 = v213 - 1; // 0x404380\n            v213 = v214;\n            v212 = v195;\n            v210 = v211;\n            v208 = v209;\n            // 0x40434e\n            while (v214 != 0) {\n                // 0x404360\n                v197 = v196 + 0xffffffd0;\n                if ((int32_t)v197 < 10) {\n                    // 0x40436e\n                    v205 = v200 + 1;\n                    v206 = *(char *)v205;\n                    v207 = v206;\n                    v203 = v197 + v204 & 0xffffffff;\n                    v201 = v205;\n                    v202 = v207 + 0xffffffd0;\n                    v198 = v207;\n                    v199 = v207 & 0xffffffff;\n                }\n                // 0x404380\n                v209 = v208;\n                v211 = v210;\n                v195 = 10 * v212 & 0xfffffffe;\n                v214 = v213 - 1;\n                v213 = v214;\n                v212 = v195;\n                v210 = v211;\n                v208 = v209;\n            }\n            int64_t v215 = v197;\n            if (v173 == 0xffffffff) {\n                // 0x404721\n                v191 = v211;\n                if ((int32_t)v215 < 10) {\n                    int64_t v216 = v211; // 0x40472e\n                    int32_t v217; // 0x403db0\n                    char v218; // 0x403db0\n                    int64_t v219; // 0x403db0\n                    if ((char)v209 != 48) {\n                        char v220 = *(char *)v211;\n                        v217 = (int32_t)v220 - 48;\n                        v218 = v220;\n                        v219 = v211;\n                      lab_0x40474c:;\n                        int64_t v221 = v195 + 1 & 0xffffffff; // 0x404750\n                        v192 = v221;\n                        v188 = v219;\n                        v193 = v221;\n                        v189 = v219;\n                        if (v217 < 9 || v218 == 57) {\n                            goto lab_0x404397;\n                        } else {\n                            goto lab_0x4043b7;\n                        }\n                    } else {\n                        int64_t v222 = v216 + 1; // 0x404730\n                        char v223 = *(char *)v222; // 0x404734\n                        int32_t v224 = (int32_t)v223 - 48;\n                        v191 = v222;\n                        while (v223 == 57 || v224 < 9) {\n                            // 0x404746\n                            v216 = v222;\n                            v217 = v224;\n                            v218 = v223;\n                            v219 = v222;\n                            if (v223 != 48) {\n                                goto lab_0x40474c;\n                            }\n                            v222 = v216 + 1;\n                            v223 = *(char *)v222;\n                            v224 = (int32_t)v223 - 48;\n                            v191 = v222;\n                        }\n                        goto lab_0x405b40;\n                    }\n                } else {\n                    goto lab_0x405b40;\n                }\n            } else {\n                // 0x40438e\n                v192 = v195;\n                v188 = v211;\n                v194 = v195;\n                v190 = v211;\n                if ((int32_t)v215 < 10) {\n                    goto lab_0x404397;\n                } else {\n                    goto lab_0x405b11;\n                }\n            }\n        } else {\n            goto lab_0x404480;\n        }\n    }\n  lab_0x404480:\n    // 0x404480\n    *v71 = v178;\n    *v12 = v177;\n    *(char *)v11 = (char)((int32_t)v173 < 0);\n    *v13 = v178 - v174;\n    v163 = v174 + 20 + (v174 ^ 0xffffffff) + (int64_t)(v173 == 0) & 0xffffffff;\n    v164 = v65;\n    v165 = v178 + (v173 == 0 ? 276 : 275) + (v178 ^ 0xffffffff) & 0xffffffff;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    goto lab_0x4042d2_2;\n  lab_0x403f00:;\n    int64_t v225 = v130;\n    int64_t v226 = v129;\n    int64_t v227 = v128;\n    int64_t v228 = v127;\n    int64_t v229 = v126;\n    unsigned char v230 = *(char *)(v227 + (int64_t)&g17); // 0x403f00\n    int64_t v231; // 0x403db0\n    int64_t v232; // 0x403db0\n    int64_t v233; // 0x403db0\n    int64_t v234; // 0x403db0\n    int64_t v235; // 0x403db0\n    int64_t v236; // 0x403db0\n    int64_t v237; // 0x403db0\n    int64_t v238; // 0x403db0\n    int64_t v239; // 0x403db0\n    int64_t v240; // 0x403db0\n    int64_t v241; // 0x403db0\n    int64_t v242; // 0x403db0\n    int64_t v243; // 0x403db0\n    int64_t v244; // 0x403db0\n    int64_t v245; // 0x403db0\n    int64_t v246; // 0x403db0\n    int64_t v247; // 0x403db0\n    int64_t v248; // 0x403db0\n    int64_t v249; // 0x403db0\n    int64_t v250; // 0x403db0\n    int64_t v251; // 0x403db0\n    int64_t v252; // 0x403db0\n    int64_t v253; // 0x403db0\n    int64_t v254; // 0x403db0\n    int64_t v255; // 0x403db0\n    int64_t v256; // 0x403db0\n    int64_t v257; // 0x403db0\n    int64_t v258; // 0x403db0\n    char * v259; // 0x403db0\n    int64_t v260; // 0x403db0\n    int64_t v261; // 0x403db0\n    int64_t v262; // 0x403db0\n    int64_t v263; // 0x403db0\n    int64_t v264; // 0x403db0\n    int64_t v265; // 0x403db0\n    int64_t v266; // 0x403db0\n    int64_t v267; // 0x403fca\n    int64_t v268; // 0x403fcd\n    int64_t v269; // 0x403fdd\n    int64_t v270; // 0x403fe9\n    int128_t v271; // 0x403db0\n    int128_t v272; // 0x403db0\n    int128_t v273; // 0x403db0\n    int128_t v274; // 0x403db0\n    int128_t v275; // 0x403db0\n    if (v230 != 0) {\n        // 0x403f90\n        v271 = v125;\n        int64_t v276 = v230; // 0x403f00\n        int64_t v277 = (int64_t)*(char *)(v276 + (int64_t)&g11); // 0x403f9b\n        int64_t v278 = 56 * (1 - v277) + v229; // 0x403fb4\n        int64_t v279 = v278 + 48; // 0x403fb8\n        int128_t v280 = __asm_movdqu(*(int128_t *)v278); // 0x403fbc\n        int64_t v281 = v278 + 16; // 0x403fc0\n        int128_t v282 = __asm_movdqu(*(int128_t *)v281); // 0x403fc0\n        int64_t v283 = v278 + 32; // 0x403fc5\n        int128_t v284 = __asm_movdqu(*(int128_t *)v283); // 0x403fc5\n        v267 = *(int64_t *)v278;\n        v268 = *(int64_t *)(v278 + 8);\n        *v19 = *(int64_t *)v279;\n        v269 = *(int64_t *)v281;\n        *v17 = (int128_t)__asm_movaps(v280);\n        v270 = *(int64_t *)(v278 + 24);\n        *v21 = (int128_t)__asm_movaps(v282);\n        *v5 = *(int64_t *)v283;\n        *v23 = (int128_t)__asm_movaps(v284);\n        *v9 = *(int64_t *)(v278 + 40);\n        *v24 = *(int32_t *)v279;\n        g75 = v230 - 4;\n        v252 = (int64_t)\"hybrid\";\n        switch (v230) {\n            case 4: {\n                int128_t v285 = __asm_movdqu(*(int128_t *)v229); // 0x404be2\n                *(char *)(v226 + 160) = 1;\n                __asm_movups(*(int128_t *)(v226 + 88), v285);\n                *v26 = v268;\n                *v10 = v270;\n                *v7 = v226;\n                v274 = v285;\n                v247 = v225 - 4;\n                v251 = v229 - 112;\n                v259 = dcgettext(NULL, \"number of seconds\", 5);\n                v257 = 2;\n                goto lab_0x404c29;\n            }\n            case 7: {\n                // 0x405134\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v286 = (int64_t *)(v226 + 200); // 0x405148\n                *v286 = *v286 + 1;\n                int64_t * v287 = (int64_t *)(v226 + 168); // 0x405150\n                *v287 = *v287 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"datetime\";\n                goto lab_0x404cae;\n            }\n            case 8: {\n                // 0x40510e\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v288 = (int64_t *)(v226 + 200); // 0x405122\n                *v288 = *v288 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"time\";\n                goto lab_0x404cae;\n            }\n            case 9: {\n                // 0x404cd0\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v289 = (int64_t *)(v226 + 184); // 0x404ce4\n                *v289 = *v289 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"local_zone\";\n                goto lab_0x404cae;\n            }\n            case 10: {\n                // 0x404c8d\n                *v26 = v268;\n                int64_t * v290 = (int64_t *)(v226 + 208); // 0x404c9c\n                *v290 = *v290 + 1;\n                *v10 = v270;\n                *v7 = v226;\n                v253 = (int64_t)\"zone\";\n                goto lab_0x404cae;\n            }\n            case 11: {\n                // 0x405371\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v291 = (int64_t *)(v226 + 168); // 0x405385\n                *v291 = *v291 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"date\";\n                goto lab_0x404cae;\n            }\n            case 12: {\n                // 0x40534b\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v292 = (int64_t *)(v226 + 176); // 0x40535f\n                *v292 = *v292 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"day\";\n                goto lab_0x404cae;\n            }\n            case 13: {\n                // 0x40532d\n                v252 = (int64_t)\"relative\";\n                goto lab_0x405247;\n            }\n            case 14: {\n                // 0x4052ab\n                *v26 = v226;\n                *v10 = v268;\n                *v7 = v270;\n                char * v293 = dcgettext(NULL, \"number\", 5); // 0x4052c6\n                int64_t v294 = *v26; // 0x4052cb\n                int64_t v295 = v229 - 56; // 0x4052d0\n                int64_t v296 = v225 - 2; // 0x4052d4\n                int64_t v297 = *v7; // 0x4052e6\n                int64_t v298 = *v10; // 0x4052f3\n                v147 = v271;\n                v139 = 4;\n                v144 = v296;\n                v145 = v295;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v294;\n                v131 = v298;\n                v132 = v297;\n                v133 = v269;\n                v134 = v267;\n                if (*(char *)(v294 + 217) == 0) {\n                    goto lab_0x404540;\n                } else {\n                    // 0x4052fe\n                    *v40 = -93;\n                    *v34 = v295;\n                    *v41 = 4;\n                    *v37 = v298;\n                    *v26 = v296;\n                    *v10 = v297;\n                    *v7 = v294;\n                    function_403a10((int64_t)v293, v294);\n                    v275 = v271;\n                    goto lab_0x404c66;\n                }\n            }\n            case 15: {\n                goto lab_0x405247;\n            }\n            case 18: {\n                // 0x4051ef\n                *(int64_t *)(v226 + 80) = 0;\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 96) = 0;\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 19: {\n                // 0x4051aa\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 96) = 0;\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 160);\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 20: {\n                // 0x405162\n                *(int64_t *)(v226 + 88) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 272);\n                *(int64_t *)(v226 + 96) = (int64_t)*(int32_t *)(v229 - 48);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 160);\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 12;\n                v145 = v229 - 336;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 22: {\n                // 0x404f77\n                *(int64_t *)(v226 + 80) = 0;\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 96) = 0;\n                *(int32_t *)(v226 + 28) = 2;\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 23: {\n                // 0x404f31\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 96) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 160);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 48);\n                *(int32_t *)(v226 + 28) = 2;\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 24: {\n                // 0x40488f\n                *(int32_t *)(v226 + 28) = 2;\n                *(int64_t *)(v226 + 88) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 272);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 160);\n                *(int64_t *)(v226 + 96) = (int64_t)*(int32_t *)(v229 - 48);\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 12;\n                v145 = v229 - 336;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 27: {\n                int64_t v299 = *(int64_t *)(v229 - 40); // 0x404831\n                int64_t v300 = *(int64_t *)v229; // 0x404835\n                *v26 = v268;\n                int64_t v301 = *(int64_t *)(v229 - 48); // 0x404841\n                char v302 = *(char *)(v229 - 56); // 0x404845\n                *v10 = v270;\n                int64_t * v303 = (int64_t *)(v226 + 208); // 0x40484e\n                *v303 = *v303 + 1;\n                *v7 = v226;\n                if ((char)function_403570(v226 + 24, v302, v301, v299, v300) == 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x404877\n                v147 = v271;\n                v139 = 10;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffe5;\n                v138 = *v7;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 28: {\n                // 0x404812\n                *(int32_t *)(v226 + 20) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 11;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 29: {\n                // 0x4047ea\n                *(int32_t *)(v226 + 20) = 1;\n                int64_t * v304 = (int64_t *)(v226 + 192); // 0x404800\n                *v304 = *v304 + 1;\n                v147 = v271;\n                v139 = 11;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 30: {\n                // 0x4047cb\n                v256 = *(int64_t *)v229;\n                goto lab_0x4047ce;\n            }\n            case 31: {\n                // 0x4047ab\n                *(int32_t *)(v226 + 24) = 0x6270;\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 32: {\n                // 0x4050f7\n                *v26 = v268;\n                *v10 = v270;\n                *(int32_t *)(v226 + 24) = (int32_t)*(int64_t *)(v229 - 56);\n                goto lab_0x404fc9;\n            }\n            case 33: {\n                // 0x404fb7\n                *v26 = v268;\n                *v10 = v270;\n                *(int32_t *)(v226 + 24) = 0x6270;\n                goto lab_0x404fc9;\n            }\n            case 34: {\n                int64_t v305 = *(int64_t *)(v229 - 40); // 0x405445\n                int64_t v306 = *(int64_t *)v229; // 0x405449\n                *v26 = v268;\n                int64_t v307 = *(int64_t *)(v229 - 48); // 0x405455\n                char v308 = *(char *)(v229 - 56); // 0x405459\n                *v10 = v270;\n                *v7 = v226;\n                if ((char)function_403570(v226 + 24, v308, v307, v305, v306) == 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                int64_t v309 = *v7; // 0x405474\n                int32_t * v310 = (int32_t *)(v309 + 24); // 0x40547b\n                int64_t v311 = (int64_t)*v310; // 0x40547b\n                int64_t v312 = *(int64_t *)(v229 - 112); // 0x40547f\n                int64_t v313 = v312 + v311; // 0x40547f\n                *v310 = (int32_t)v313;\n                if (v313 >= 0x80000000 || ((v313 ^ v311) & (v313 ^ v312)) < 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x4054a0\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v309;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 35: {\n                // 0x405439\n                v256 = (int64_t)(*(int32_t *)v229 + 3600);\n                goto lab_0x4047ce;\n            }\n            case 36: {\n                // 0x405415\n                *(int32_t *)(v226 + 24) = *(int32_t *)(v229 - 56) + 3600;\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 37: {\n                // 0x4053ee\n                *(int64_t *)(v226 + 8) = 0;\n                *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 13;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 38: {\n                // 0x4053c6\n                *(int64_t *)(v226 + 8) = 0;\n                *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)(v229 - 56);\n                v147 = v271;\n                v139 = 13;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 39: {\n                // 0x405397\n                v255 = v229 - 56;\n                goto lab_0x40539b;\n            }\n            case 40: {\n                // 0x40589f\n                v255 = v229 - 48;\n                goto lab_0x40539b;\n            }\n            case 41: {\n                // 0x405874\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 + 8);\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 42: {\n                int64_t * v314 = (int64_t *)(v229 - 208); // 0x405810\n                int64_t v315 = *v314; // 0x405810\n                char v316 = *(char *)(v226 + 217); // 0x405817\n                if (v315 < 4) {\n                    int64_t v317 = *(int64_t *)(v229 - 216); // 0x405c39\n                    *v7 = v317;\n                    int64_t v318 = v317; // 0x405c47\n                    int64_t v319 = v226; // 0x405c47\n                    int64_t v320 = v268; // 0x405c47\n                    int64_t v321 = v270; // 0x405c47\n                    if (v316 != 0) {\n                        // 0x405d90\n                        *v37 = v226;\n                        *v26 = v268;\n                        *v10 = v270;\n                        char * v322 = dcgettext(NULL, \"warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\\n\", 5); // 0x405dab\n                        function_403400((int64_t)v322, *v7, 5, v315, v227, v226);\n                        v319 = *v37;\n                        v320 = *v26;\n                        v321 = *v10;\n                        v318 = *v7;\n                    }\n                    int128_t v323 = __asm_movdqu(*(int128_t *)v229); // 0x405c52\n                    *(int64_t *)(v319 + 56) = v318;\n                    __asm_movups(*(int128_t *)(v319 + 32), v323);\n                    *(int64_t *)(v319 + 64) = *(int64_t *)(v229 - 104);\n                    *(int64_t *)(v319 + 48) = *(int64_t *)(v229 + 16);\n                    v147 = v271;\n                    v139 = 14;\n                    v144 = v225 - 10;\n                    v145 = v229 - 280;\n                    v140 = v228;\n                    v135 = 0xffffffa3;\n                    v138 = v319;\n                    v131 = v320;\n                    v132 = v321;\n                    v133 = v269;\n                    v134 = v267;\n                } else {\n                    int64_t v324 = v315; // 0x40582b\n                    int64_t v325 = v226; // 0x40582b\n                    int64_t v326 = v268; // 0x40582b\n                    int64_t v327 = v270; // 0x40582b\n                    if (v316 != 0) {\n                        // 0x405d34\n                        *v33 = v226;\n                        *v37 = v268;\n                        *v26 = v270;\n                        *v10 = v315;\n                        *v7 = *(int64_t *)(v229 - 216);\n                        char * v328 = dcgettext(NULL, \"warning: value %ld has %ld digits. Assuming YYYY/MM/DD\\n\", 5); // 0x405d60\n                        int64_t v329 = *v10; // 0x405d65\n                        function_403400((int64_t)v328, *v7, v329, v329, v227, v226);\n                        v325 = *v33;\n                        v326 = *v37;\n                        v327 = *v26;\n                        v324 = *v314;\n                    }\n                    int128_t v330 = __asm_movdqu(*(int128_t *)(v229 - 224)); // 0x405838\n                    *(int64_t *)(v325 + 48) = v324;\n                    __asm_movups(*(int128_t *)(v325 + 32), v330);\n                    *(int64_t *)(v325 + 56) = *(int64_t *)(v229 - 104);\n                    *(int64_t *)(v325 + 64) = *(int64_t *)(v229 + 8);\n                    v147 = v330;\n                    v139 = 14;\n                    v144 = v225 - 10;\n                    v145 = v229 - 280;\n                    v140 = v228;\n                    v135 = 0xffffffa3;\n                    v138 = v325;\n                    v131 = v326;\n                    v132 = v327;\n                    v133 = v269;\n                    v134 = v267;\n                }\n                goto lab_0x404540;\n            }\n            case 43: {\n                // 0x4057d0\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                int64_t v331 = *(int64_t *)(v229 + 8); // 0x4057ea\n                *(int64_t *)(v226 + 40) = -v331;\n                if (v331 == -0x8000000000000000) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                goto lab_0x4056d3;\n            }\n            case 44: {\n                // 0x405784\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 112);\n                int64_t v332 = *(int64_t *)(v229 - 48); // 0x405796\n                *(int64_t *)(v226 + 64) = -v332;\n                if (v332 == -0x8000000000000000) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                int64_t v333 = *(int64_t *)(v229 + 8); // 0x4057ad\n                *(int64_t *)(v226 + 40) = -v333;\n                if (v333 == -0x8000000000000000) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                goto lab_0x4056d3;\n            }\n            case 45: {\n                // 0x40575c\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 + 8);\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 46: {\n                int128_t v334 = __asm_movdqu(*(int128_t *)v229); // 0x405724\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 168);\n                __asm_movups(*(int128_t *)(v226 + 32), v334);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 48) = *(int64_t *)(v229 + 16);\n                v147 = v334;\n                v139 = 14;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 47: {\n                // 0x4056f6\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 56) = *(int64_t *)v229;\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 48: {\n                int128_t v335 = __asm_movdqu(*(int128_t *)v229); // 0x4056be\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                __asm_movups(*(int128_t *)(v226 + 32), v335);\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                goto lab_0x4056d3;\n            }\n            case 50: {\n                int128_t v336 = __asm_movdqu(*(int128_t *)(v229 - 112)); // 0x405659\n                *(int64_t *)(v226 + 48) = *(int64_t *)(v229 - 96);\n                int64_t v337 = *(int64_t *)(v229 - 48); // 0x40566c\n                __asm_movups(*(int128_t *)(v226 + 32), v336);\n                *(int64_t *)(v226 + 56) = -v337;\n                if (v337 == -0x8000000000000000) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                int64_t v338 = *(int64_t *)(v229 + 8); // 0x405688\n                *(int64_t *)(v226 + 64) = -v338;\n                if (v338 == -0x8000000000000000) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x40569f\n                v147 = v336;\n                v139 = 15;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 51: {\n                int64_t * v339 = (int64_t *)(v226 + 144); // 0x40550e\n                int32_t v340 = *(int32_t *)(v229 - 8); // 0x405525\n                *v33 = *v339;\n                int64_t * v341 = (int64_t *)(v226 + 128); // 0x40552e\n                *v7 = *(int64_t *)(v229 - 56);\n                *v10 = *(int64_t *)(v229 - 48);\n                int64_t * v342 = (int64_t *)(v226 + 136); // 0x40553f\n                int64_t v343 = *v342; // 0x40553f\n                *v34 = *v341;\n                int64_t * v344 = (int64_t *)(v226 + 120); // 0x40554b\n                *v26 = *(int64_t *)(v229 - 40);\n                int64_t v345 = *(int64_t *)(v229 - 16); // 0x405554\n                *v36 = *v344;\n                int64_t * v346 = (int64_t *)(v226 + 112); // 0x40555d\n                *v37 = *(int64_t *)(v229 - 32);\n                int64_t v347 = *(int64_t *)(v229 - 24); // 0x405566\n                *v38 = *v346;\n                int64_t * v348 = (int64_t *)(v226 + 104); // 0x40556f\n                int32_t * v349 = (int32_t *)(v226 + 152); // 0x405573\n                int32_t v350 = *v349; // 0x405573\n                *v39 = *v348;\n                int64_t v351 = *v33;\n                char v352; // 0x403db0\n                if (*(int32_t *)v229 < 0) {\n                    int32_t v353 = v350 - v340; // 0x405c8f\n                    *v349 = v353;\n                    int64_t v354 = v351 - v345; // 0x405c9f\n                    *v339 = v354;\n                    int64_t v355 = v343 - v347; // 0x405cb2\n                    *v342 = v355;\n                    int64_t v356 = *v34; // 0x405cc1\n                    int64_t v357 = *v37; // 0x405cc6\n                    int64_t v358 = v356 - v357; // 0x405cc6\n                    *v341 = v358;\n                    int64_t v359 = *v36; // 0x405cd8\n                    int64_t v360 = *v26; // 0x405cdd\n                    int64_t v361 = v359 - v360; // 0x405cdd\n                    *v344 = v361;\n                    int64_t v362 = *v38; // 0x405cea\n                    *v26 = (int64_t)(((v361 ^ v359) & (v360 ^ v359)) < 0);\n                    int64_t v363 = *v10; // 0x405cf6\n                    int64_t v364 = v362 - v363; // 0x405cf6\n                    *v346 = v364;\n                    int64_t v365 = *v39; // 0x405d03\n                    *v10 = (int64_t)(((v364 ^ v362) & (v363 ^ v362)) < 0);\n                    int64_t v366 = *v7; // 0x405d0f\n                    int64_t v367 = v365 - v366; // 0x405d0f\n                    *v348 = v367;\n                    char v368 = *(char *)v25; // 0x405d25\n                    char v369 = *v31; // 0x405d29\n                    v352 = v368 | (char)(((v355 ^ v343) & (v347 ^ v343)) < 0 | ((v353 ^ v350) & (v350 ^ v340)) < 0 | ((v354 ^ v351) & (v351 ^ v345)) < 0 | ((v358 ^ v356) & (v357 ^ v356)) < 0) | v369 | (char)(((v367 ^ v365) & (v366 ^ v365)) < 0);\n                } else {\n                    int32_t v370 = v350 + v340; // 0x40558e\n                    *v349 = v370;\n                    int64_t v371 = v351 + v345; // 0x40559e\n                    int64_t v372 = v347 + v343; // 0x4055aa\n                    *v339 = v371;\n                    *v342 = v372;\n                    int64_t v373 = *v34; // 0x4055c1\n                    int64_t v374 = *v37; // 0x4055c6\n                    int64_t v375 = v374 + v373; // 0x4055c6\n                    *v33 = (int64_t)(((v372 ^ v343) & (v372 ^ v347)) < 0);\n                    *v341 = v375;\n                    int64_t v376 = *v36; // 0x4055dd\n                    int64_t v377 = *v26; // 0x4055e2\n                    int64_t v378 = v377 + v376; // 0x4055e2\n                    *v344 = v378;\n                    int64_t v379 = *v38; // 0x4055f1\n                    int64_t v380 = *v10; // 0x4055f6\n                    int64_t v381 = v380 + v379; // 0x4055f6\n                    *v346 = v381;\n                    int64_t v382 = *v39; // 0x405602\n                    *v10 = (int64_t)(((v381 ^ v379) & (v381 ^ v380)) < 0);\n                    int64_t v383 = *v7; // 0x40560e\n                    int64_t v384 = v383 + v382; // 0x40560e\n                    *v348 = v384;\n                    char v385 = *(char *)v32; // 0x40561f\n                    char v386 = *v31; // 0x405627\n                    v352 = v385 | (char)(((v370 ^ v350) & (v370 ^ v340)) < 0 | ((v371 ^ v351) & (v371 ^ v345)) < 0 | ((v375 ^ v373) & (v375 ^ v374)) < 0 | ((v378 ^ v376) & (v378 ^ v377)) < 0) | v386 | (char)(((v384 ^ v382) & (v384 ^ v383)) < 0);\n                }\n                // 0x40562d\n                if (v352 != 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x405635\n                *(char *)(v226 + 161) = 1;\n                v147 = v271;\n                v139 = 16;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 52: {\n                goto lab_0x4045f8;\n            }\n            case 53: {\n                goto lab_0x4045f8;\n            }\n            case 54: {\n                // 0x404e2c\n                *v30 = 0;\n                v254 = v229 - 56;\n                goto lab_0x404e3b;\n            }\n            case 55: {\n                // 0x4054c5\n                *v30 = 0;\n                v254 = v229 - 48;\n                goto lab_0x404e3b;\n            }\n            case 56: {\n                // 0x404e53\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 0;\n                v133 = 0;\n                v134 = 1;\n                goto lab_0x404540;\n            }\n            case 57: {\n                // 0x404bbe\n                *v30 = 0;\n                v245 = 17;\n                v241 = 0xffffffa3;\n                v231 = *(int64_t *)(v229 - 56);\n                goto lab_0x404b96;\n            }\n            case 58: {\n                // 0x404b74\n                *v30 = 0;\n                v245 = 17;\n                v241 = 0xffffffa3;\n                v231 = *(int64_t *)(v229 - 48);\n                goto lab_0x404b96;\n            }\n            case 59: {\n                // 0x404b28\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 1;\n                v132 = 0;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x404540;\n            }\n            case 60: {\n                int64_t v387 = *(int64_t *)v229; // 0x404aef\n                int128_t v388 = (int128_t)v387 * (int128_t)*(int64_t *)(v229 - 56); // 0x404aef\n                int128_t v389 = __asm_pxor(v271, v271); // 0x404af3\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v389);\n                *v21 = (int128_t)__asm_movaps(v389);\n                *v23 = (int128_t)__asm_movaps(v389);\n                v273 = v389;\n                v234 = v388;\n                if (v388 > 0x7fffffffffffffff) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                goto lab_0x404ad6;\n            }\n            case 61: {\n                int64_t v390 = *(int64_t *)v229; // 0x404aa1\n                int128_t v391 = (int128_t)v390 * (int128_t)*(int64_t *)(v229 - 48); // 0x404aa1\n                int128_t v392 = __asm_pxor(v271, v271); // 0x404aa5\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v392);\n                *v21 = (int128_t)__asm_movaps(v392);\n                *v23 = (int128_t)__asm_movaps(v392);\n                v273 = v392;\n                v234 = v391;\n                if (v391 > 0x7fffffffffffffff) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                goto lab_0x404ad6;\n            }\n            case 62: {\n                // 0x404a54\n                *v30 = 0;\n                v272 = v271;\n                v244 = 17;\n                v246 = v225 - 2;\n                v250 = v229 - 56;\n                v240 = 0xffffffa3;\n                v233 = *(int64_t *)v229;\n                goto lab_0x404a75;\n            }\n            case 63: {\n                // 0x404a30\n                *v30 = 0;\n                v243 = 17;\n                v239 = 0xffffffa3;\n                v232 = *(int64_t *)(v229 - 56);\n                goto lab_0x404a08;\n            }\n            case 64: {\n                // 0x4049e6\n                *v30 = 0;\n                v243 = 17;\n                v239 = 0xffffffa3;\n                v232 = *(int64_t *)(v229 - 48);\n                goto lab_0x404a08;\n            }\n            case 65: {\n                // 0x40499a\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 1;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x404540;\n            }\n            case 66: {\n                // 0x404989\n                *v30 = 0;\n                v264 = v229 - 56;\n                goto lab_0x40494f;\n            }\n            case 67: {\n                // 0x404940\n                *v30 = 0;\n                v264 = v229 - 48;\n                goto lab_0x40494f;\n            }\n            case 68: {\n                // 0x4048f7\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 1;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 0;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x404540;\n            }\n            case 69: {\n                // 0x404e9f\n                *v30 = 0;\n                v262 = v229 - 56;\n                goto lab_0x404786;\n            }\n            case 70: {\n                // 0x404777\n                *v30 = 0;\n                v262 = v229 - 48;\n                goto lab_0x404786;\n            }\n            case 71: {\n                goto lab_0x4046d9;\n            }\n            case 72: {\n                goto lab_0x4046d9;\n            }\n            case 73: {\n                // 0x404ddc\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 1;\n                v242 = 17;\n                v248 = v225 - 2;\n                v249 = v229 - 56;\n                v236 = 0xffffffa3;\n                goto lab_0x404707;\n            }\n            case 75: {\n                // 0x404d92\n                *v30 = 0;\n                v235 = *(int64_t *)(v229 - 48);\n                v258 = 60;\n                v265 = 18;\n                goto lab_0x404db4;\n            }\n            case 76: {\n                // 0x404d6b\n                *v30 = 0;\n                v245 = 18;\n                v241 = 60;\n                v231 = *(int64_t *)(v229 - 48);\n                goto lab_0x404b96;\n            }\n            case 77: {\n                int64_t v393 = *(int64_t *)v229; // 0x404d1e\n                int128_t v394 = (int128_t)v393 * (int128_t)*(int64_t *)(v229 - 48); // 0x404d1e\n                int128_t v395 = __asm_pxor(v271, v271); // 0x404d22\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v395);\n                *v21 = (int128_t)__asm_movaps(v395);\n                *v23 = (int128_t)__asm_movaps(v395);\n                if (v394 > 0x7fffffffffffffff) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x404d53\n                v272 = v395;\n                v244 = 18;\n                v246 = v225 - 4;\n                v250 = v229 - 112;\n                v240 = 60;\n                v233 = v394;\n                goto lab_0x404a75;\n            }\n            case 78: {\n                // 0x404cf3\n                *v30 = 0;\n                v243 = 18;\n                v239 = 60;\n                v232 = *(int64_t *)(v229 - 48);\n                goto lab_0x404a08;\n            }\n            case 79: {\n                // 0x404f05\n                *v30 = 0;\n                v261 = *(int64_t *)(v229 - 48);\n                v238 = 60;\n                v263 = 18;\n                goto lab_0x404967;\n            }\n            case 80: {\n                // 0x404ed9\n                *v30 = 0;\n                v260 = *(int64_t *)(v229 - 48);\n                v237 = 60;\n                v266 = 18;\n                goto lab_0x40479e;\n            }\n            case 81: {\n                // 0x404eb3\n                *v30 = 0;\n                v272 = v271;\n                v244 = 19;\n                v246 = v225 - 2;\n                v250 = v229 - 56;\n                v240 = 0xffffffa3;\n                v233 = *(int64_t *)v229;\n                goto lab_0x404a75;\n            }\n            case 85: {\n                // 0x4048d8\n                v147 = v271;\n                v139 = 21;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x404540;\n            }\n            case 87: {\n                // 0x405a05\n                v147 = v271;\n                v139 = 22;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa4;\n                v138 = v226;\n                v131 = 0;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x404540;\n            }\n            case 88: {\n                // 0x4059b7\n                *v26 = v268;\n                *v10 = v270;\n                *v27 = *(int64_t *)(v229 + 16);\n                *v28 = *(int64_t *)(v229 + 8);\n                *v29 = *(int64_t *)v229;\n                *v7 = v226;\n                function_403110(v226, (int64_t)&g81, (int64_t)&g81, (int64_t)&g81);\n                v147 = v271;\n                v139 = 23;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = *v7;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 89: {\n                // 0x4058a8\n                *v26 = v268;\n                *v10 = v270;\n                *v27 = *(int64_t *)(v229 - 40);\n                *v28 = *(int64_t *)(v229 - 48);\n                *v29 = *(int64_t *)(v229 - 56);\n                *v7 = v226;\n                function_403110(v226, (int64_t)&g81, (int64_t)&g81, (int64_t)&g81);\n                int32_t v396 = *(int32_t *)(v229 + 48); // 0x4058d0\n                int64_t v397 = *v7; // 0x4058d6\n                int32_t * v398 = (int32_t *)(v397 + 152); // 0x4058db\n                int32_t v399 = *v398; // 0x4058db\n                int32_t v400 = v399 + v396; // 0x4058db\n                *v398 = v400;\n                int64_t * v401 = (int64_t *)(v397 + 144); // 0x4058ed\n                int64_t v402 = *v401; // 0x4058ed\n                int64_t v403 = *(int64_t *)(v229 + 40); // 0x4058f4\n                int64_t v404 = v403 + v402; // 0x4058f4\n                *v401 = v404;\n                int64_t * v405 = (int64_t *)(v397 + 136); // 0x405907\n                int64_t v406 = *v405; // 0x405907\n                int64_t v407 = *(int64_t *)(v229 + 32); // 0x405911\n                int64_t v408 = v407 + v406; // 0x405911\n                *v405 = v408;\n                int64_t * v409 = (int64_t *)(v397 + 128); // 0x405922\n                int64_t v410 = *v409; // 0x405922\n                int64_t v411 = *(int64_t *)(v229 + 24); // 0x405929\n                int64_t v412 = v411 + v410; // 0x405929\n                *v409 = v412;\n                int64_t * v413 = (int64_t *)(v397 + 120); // 0x40593b\n                int64_t v414 = *v413; // 0x40593b\n                int64_t v415 = *(int64_t *)(v229 + 16); // 0x40593f\n                int64_t v416 = v415 + v414; // 0x40593f\n                *v413 = v416;\n                int64_t * v417 = (int64_t *)(v397 + 112); // 0x40594e\n                int64_t v418 = *v417; // 0x40594e\n                int64_t v419 = *(int64_t *)(v229 + 8); // 0x405952\n                int64_t v420 = v419 + v418; // 0x405952\n                *v417 = v420;\n                int64_t * v421 = (int64_t *)(v397 + 104); // 0x405960\n                int64_t v422 = *v421; // 0x405960\n                int64_t v423 = *(int64_t *)v229; // 0x405964\n                int64_t v424 = v423 + v422; // 0x405964\n                *v421 = v424;\n                if (((v400 ^ v396) & (v400 ^ v399)) < 0 | ((v404 ^ v402) & (v404 ^ v403)) < 0 | ((v408 ^ v406) & (v408 ^ v407)) < 0 | ((v412 ^ v410) & (v412 ^ v411)) < 0 || ((v416 ^ v414) & (v416 ^ v415)) < 0 || ((v420 ^ v418) & (v420 ^ v419)) < 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x405984\n                if (((v424 ^ v422) & (v424 ^ v423)) < 0) {\n                    // break -> 0x403f2d\n                    break;\n                }\n                // 0x40598d\n                *(char *)(v397 + 161) = 1;\n                v147 = v271;\n                v139 = 24;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v397;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n            case 90: {\n                // 0x4054d9\n                v147 = v271;\n                v139 = 25;\n                v144 = v225 - 2 * v277;\n                v145 = -56 * v277 + v229;\n                v140 = v228;\n                v135 = 43;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = -1;\n                goto lab_0x404540;\n            }\n            case 91: {\n                // 0x404e10\n                v147 = v271;\n                v139 = 25;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 43;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x404540;\n            }\n            default: {\n                unsigned char v425 = *(char *)(v276 + (int64_t)&g12); // 0x405f97\n                int64_t v426 = (int64_t)v425 + 0xffffffe4; // 0x405fa1\n                char v427 = *(char *)((0x100000000 * v426 >> 32) + (int64_t)&g16); // 0x405fa7\n                v147 = v271;\n                v139 = v426 & 0xffffffff;\n                v144 = v225 - 2 * v277;\n                v145 = -56 * v277 + v229;\n                v140 = v228;\n                v135 = v427;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x404540;\n            }\n        }\n    } else {\n        // 0x403f12\n        if (*v14 == 3) {\n            int32_t v428 = v228; // 0x403f19\n            result = 1;\n            if (v428 == 0 && v428 >= 0 != v428 != 0) {\n                // break -> 0x403f2d\n                goto lab_0x403f2d_8;\n            }\n        }\n        int64_t v429 = v229; // 0x403db0\n        int64_t v430 = v227; // 0x403db0\n        int64_t v431 = v225; // 0x403f5d\n        unsigned char v432; // 0x403f40\n        while (true) {\n            char v433 = *(char *)(v430 + (int64_t)&g18); // 0x403f69\n            if (v433 != -93) {\n                if ((int32_t)v433 < 112) {\n                    int64_t v434 = v433; // 0x403f69\n                    char v435 = *(char *)(v434 + 0x4135e1); // 0x403f80\n                    if (v435 == 1) {\n                        // 0x403f89\n                        v432 = *(char *)(v434 + 0x413661);\n                        if (v432 != 0) {\n                            // break -> 0x404420\n                            break;\n                        }\n                    }\n                }\n            }\n            // 0x403f58\n            result = 1;\n            if (v431 == v4) {\n                // break (via goto) -> 0x403f2d\n                goto lab_0x403f2d_8;\n            }\n            // 0x403f5d\n            v431 -= 2;\n            v429 -= 56;\n            v430 = (int64_t)*(int16_t *)v431;\n        }\n        int64_t v436 = *v12; // 0x404420\n        int64_t v437; // 0x403db0\n        int64_t v438 = v437 + 56; // 0x404425\n        *v14 = 3;\n        int64_t * v439; // 0x403db0\n        *v439 = v436;\n        int64_t v440 = *v13; // 0x40443c\n        int128_t * v441; // 0x403db0\n        int128_t v442 = *v441; // 0x404441\n        int128_t v443 = __asm_movdqa(v442); // 0x404441\n        int64_t * v444; // 0x403db0\n        *v444 = v440;\n        int64_t * v445; // 0x403db0\n        int64_t v446 = *v445; // 0x404452\n        int128_t v447 = *(int128_t *)v438; // 0x40445a\n        __asm_movups(v447, v443);\n        int128_t * v448; // 0x403db0\n        int128_t v449 = *v448; // 0x40445d\n        int128_t v450 = __asm_movdqa(v449); // 0x40445d\n        *(int64_t *)(v437 + 104) = v446;\n        int128_t v451 = *(int128_t *)(v437 + 72); // 0x40446a\n        __asm_movups(v451, v450);\n        int128_t * v452; // 0x403db0\n        int128_t v453 = *v452; // 0x40446e\n        int128_t v454 = __asm_movdqa(v453); // 0x40446e\n        int128_t v455 = *(int128_t *)(v437 + 88); // 0x404477\n        __asm_movups(v455, v454);\n        v146 = v454;\n        int64_t v456; // 0x403db0\n        v143 = v456;\n        v142 = v438;\n        int64_t v457; // 0x403db0\n        v141 = v457;\n        v136 = v432;\n        v137 = v226;\n        goto lab_0x403ec6;\n    }\n  lab_0x4042c8:;\n    unsigned char v458 = *(char *)((0x100000000 * v63 >> 32) + (int64_t)&g19); // 0x4042cb\n    v163 = v458;\n    v164 = v67;\n    v165 = v63;\n    v166 = v58;\n    v167 = v61;\n    v168 = v55;\n    goto lab_0x4042d2_2;\n  lab_0x405247:\n    // 0x405247\n    *v26 = v226;\n    *v10 = v268;\n    *v7 = v270;\n    char * v459 = dcgettext(NULL, (char *)v252, 5); // 0x405249\n    int64_t v460 = *v26; // 0x40524e\n    int64_t v461 = v229 - 56; // 0x405253\n    int64_t v462 = v225 - 2; // 0x405257\n    int64_t v463 = *v7; // 0x405269\n    int64_t v464 = *v10; // 0x405276\n    v147 = v271;\n    v139 = 4;\n    v144 = v462;\n    v145 = v461;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v460;\n    v131 = v464;\n    v132 = v463;\n    v133 = v269;\n    v134 = v267;\n    char * v465; // 0x403db0\n    int64_t v466; // 0x403db0\n    if (*(char *)(v460 + 217) == 0) {\n        goto lab_0x404540;\n    } else {\n        // 0x405281\n        *v40 = -93;\n        *v34 = v461;\n        *v41 = 4;\n        *v37 = v464;\n        *v26 = v462;\n        *v10 = v463;\n        *v7 = v460;\n        v466 = v460;\n        v465 = v459;\n        goto lab_0x4050ed;\n    }\n  lab_0x4045f8:;\n    int32_t v467 = *(int32_t *)(v229 + 48); // 0x4045f8\n    int32_t * v468 = (int32_t *)(v226 + 152); // 0x4045fe\n    int32_t v469 = *v468; // 0x4045fe\n    int32_t v470 = v469 + v467; // 0x4045fe\n    *v468 = v470;\n    int64_t * v471 = (int64_t *)(v226 + 144); // 0x404610\n    int64_t v472 = *v471; // 0x404610\n    int64_t v473 = *(int64_t *)(v229 + 40); // 0x404617\n    int64_t v474 = v473 + v472; // 0x404617\n    *v471 = v474;\n    int64_t * v475 = (int64_t *)(v226 + 136); // 0x40462a\n    int64_t v476 = *v475; // 0x40462a\n    int64_t v477 = *(int64_t *)(v229 + 32); // 0x404634\n    int64_t v478 = v477 + v476; // 0x404634\n    *v475 = v478;\n    int64_t * v479 = (int64_t *)(v226 + 128); // 0x404645\n    int64_t v480 = *v479; // 0x404645\n    int64_t v481 = *(int64_t *)(v229 + 24); // 0x40464c\n    int64_t v482 = v481 + v480; // 0x40464c\n    *v479 = v482;\n    int64_t * v483 = (int64_t *)(v226 + 120); // 0x40465d\n    int64_t v484 = *v483; // 0x40465d\n    int64_t v485 = *(int64_t *)(v229 + 16); // 0x404661\n    int64_t v486 = v485 + v484; // 0x404661\n    *v483 = v486;\n    int64_t * v487 = (int64_t *)(v226 + 112); // 0x40466c\n    int64_t v488 = *v487; // 0x40466c\n    *v7 = (int64_t)(((v486 ^ v484) & (v486 ^ v485)) < 0);\n    int64_t v489 = *(int64_t *)(v229 + 8); // 0x404677\n    int64_t v490 = v489 + v488; // 0x404677\n    *v487 = v490;\n    *v10 = (int64_t)(((v490 ^ v488) & (v490 ^ v489)) < 0);\n    int64_t * v491 = (int64_t *)(v226 + 104); // 0x404687\n    int64_t v492 = *v491; // 0x404687\n    int64_t v493 = *(int64_t *)v229; // 0x40468d\n    int64_t v494 = v493 + v492; // 0x40468d\n    *v491 = v494;\n    char v495 = *v31; // 0x40469c\n    char v496 = *(char *)v6; // 0x4046a3\n    result = 1;\n    if ((v495 || (char)(((v470 ^ v467) & (v470 ^ v469)) < 0 | ((v474 ^ v472) & (v474 ^ v473)) < 0 | ((v478 ^ v476) & (v478 ^ v477)) < 0 || ((v482 ^ v480) & (v482 ^ v481)) < 0) || v496) != 0) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    // 0x4046b0\n    result = 1;\n    if (((v494 ^ v492) & (v494 ^ v493)) < 0) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    // 0x4046b9\n    *(char *)(v226 + 161) = 1;\n    v147 = v271;\n    v139 = 16;\n    v144 = v225 - 2;\n    v145 = v229 - 56;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x404540;\n  lab_0x4046d9:\n    // 0x4046d9\n    *v30 = 0;\n    *v9 = *(int64_t *)(v229 - 56);\n    *v24 = *(int32_t *)(v229 - 48);\n    v242 = 17;\n    v248 = v225 - 4;\n    v249 = v229 - 112;\n    v236 = 0xffffffa3;\n    goto lab_0x404707;\n  lab_0x403ec6:;\n    int64_t v551 = v143 + 2; // 0x403ec6\n    *(int16_t *)v551 = (int16_t)v136;\n    result = 2;\n    int64_t v552; // bp-1314, 0x403db0\n    if (v551 >= (int64_t)&v552) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    // 0x403edd\n    result = 0;\n    if ((int32_t)v136 == 12) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    char v553 = *(char *)(v136 + (int64_t)&g18); // 0x403eea\n    v72 = v146;\n    v43 = v142;\n    v44 = v141;\n    v45 = v136;\n    v46 = v137;\n    v47 = v551;\n    v48 = v553;\n    v125 = v146;\n    v126 = v142;\n    v127 = v141;\n    v128 = v136;\n    v129 = v137;\n    v130 = v551;\n    if (v553 != -93) {\n        goto lab_0x403e0c;\n    } else {\n        goto lab_0x403f00;\n    }\n  lab_0x405b40:;\n    int64_t v554 = v191;\n    v193 = v195;\n    v189 = v554;\n    int64_t * v549; // 0x403db0\n    if (v195 != 0) {\n        goto lab_0x4043b7;\n    } else {\n        // 0x405b48\n        *v71 = v554;\n        *v549 = v177;\n        *v12 = 0;\n        v163 = 21;\n        v164 = v65;\n        v165 = 276;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        goto lab_0x4042d2_2;\n    }\n  lab_0x404397:;\n    int64_t v555 = v188 + 1; // 0x404397\n    char v556 = *(char *)v555; // 0x40439b\n    while (v556 == 57 || (int32_t)v556 < 57) {\n        // 0x404397\n        v555++;\n        v556 = *(char *)v555;\n    }\n    // 0x4043a7\n    v193 = v192;\n    v189 = v555;\n    v194 = v192;\n    v190 = v555;\n    if ((int32_t)v173 >= 0 || (int32_t)v192 == 0) {\n        goto lab_0x405b11;\n    } else {\n        goto lab_0x4043b7;\n    }\n  lab_0x405b11:;\n    int64_t v557 = v190;\n    int64_t v558 = 0x100000000 * v194 >> 32; // 0x405b14\n    *v71 = v557;\n    *v12 = v558;\n    *v549 = v177;\n    v163 = v558 + (v173 == 0 ? 23 : 22) + (v558 ^ 0xffffffff) & 0xffffffff;\n    v164 = v65;\n    v165 = v557 + (v173 == 0 ? 278 : 277) + (v557 ^ 0xffffffff) & 0xffffffff;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    goto lab_0x4042d2_2;\n  lab_0x404540:;\n    int64_t v497 = v138;\n    int64_t v498 = v140;\n    int64_t v499 = v144;\n    int64_t v500 = v139;\n    int128_t v501 = v147;\n    *(int64_t *)v16 = v134;\n    int64_t v502 = v145 + 56; // 0x404551\n    *(int64_t *)(v2 + 280) = v131;\n    int128_t v503 = __asm_movdqa(*v17); // 0x40455d\n    *(int64_t *)v22 = *v5;\n    *(int64_t *)v20 = v133;\n    *(int64_t *)(v2 + 296) = v132;\n    int128_t v504 = __asm_movdqa(*v21); // 0x404583\n    *(int64_t *)(v2 + 312) = *v9;\n    int128_t v505 = __asm_movdqa(*v23); // 0x404594\n    *(int32_t *)v18 = *v24;\n    __asm_movups(*(int128_t *)v502, v503);\n    *(int64_t *)(v145 + 104) = *v19;\n    __asm_movups(*(int128_t *)(v145 + 72), v504);\n    __asm_movups(*(int128_t *)(v145 + 88), v505);\n    int16_t v506 = *(int16_t *)v499; // 0x4045bc\n    int64_t v507 = v135 + (int64_t)v506; // 0x4045bf\n    if ((int32_t)v507 < 113) {\n        int64_t v508 = 0x100000000 * v507 >> 32; // 0x4045ca\n        char v509 = *(char *)(v508 + (int64_t)&g13); // 0x4045cd\n        if (v506 == (int16_t)v509) {\n            // 0x405a28\n            v146 = v501;\n            v143 = v499;\n            v142 = v502;\n            v141 = v498;\n            v136 = (int64_t)*(char *)(v508 + (int64_t)&g14);\n            v137 = v497;\n            goto lab_0x403ec6;\n        } else {\n            goto lab_0x4045df;\n        }\n    } else {\n        goto lab_0x4045df;\n    }\n  lab_0x404c29:;\n    int64_t v510 = v257;\n    int64_t v511 = v251;\n    int64_t v512 = v247;\n    int128_t v513 = v274;\n    int64_t v514 = *v7; // 0x404c29\n    int64_t v515 = *v26; // 0x404c33\n    v147 = v513;\n    v139 = v510;\n    v144 = v512;\n    v145 = v511;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v514;\n    v131 = v515;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    if (*(char *)(v514 + 217) == 0) {\n        goto lab_0x404540;\n    } else {\n        // 0x404c46\n        *v40 = -93;\n        *v34 = v511;\n        *v41 = (int32_t)v510;\n        *v37 = v515;\n        *v26 = v512;\n        function_403a10((int64_t)v259, v514);\n        v275 = v513;\n        goto lab_0x404c66;\n    }\n  lab_0x404cae:\n    // 0x404cae\n    v274 = v271;\n    v247 = v225 - 2;\n    v251 = v229 - 56;\n    v259 = dcgettext(NULL, (char *)v253, 5);\n    v257 = 4;\n    goto lab_0x404c29;\n  lab_0x4047ce:\n    // 0x4047ce\n    *(int32_t *)(v226 + 24) = (int32_t)v256;\n    v147 = v271;\n    v139 = 12;\n    v144 = v225 - 2;\n    v145 = v229 - 56;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x404540;\n  lab_0x404fc9:;\n    int32_t v516 = *(int32_t *)(v229 + 48); // 0x404fc9\n    int32_t * v517 = (int32_t *)(v226 + 152); // 0x404fcf\n    int32_t v518 = *v517; // 0x404fcf\n    int32_t v519 = v518 + v516; // 0x404fcf\n    *v517 = v519;\n    int64_t * v520 = (int64_t *)(v226 + 144); // 0x404fe1\n    int64_t v521 = *v520; // 0x404fe1\n    int64_t v522 = *(int64_t *)(v229 + 40); // 0x404fe8\n    int64_t v523 = v522 + v521; // 0x404fe8\n    *v520 = v523;\n    int64_t * v524 = (int64_t *)(v226 + 136); // 0x404ffb\n    int64_t v525 = *v524; // 0x404ffb\n    int64_t v526 = *(int64_t *)(v229 + 32); // 0x405005\n    int64_t v527 = v526 + v525; // 0x405005\n    *v524 = v527;\n    int64_t * v528 = (int64_t *)(v226 + 128); // 0x405016\n    int64_t v529 = *v528; // 0x405016\n    int64_t v530 = *(int64_t *)(v229 + 24); // 0x40501d\n    int64_t v531 = v530 + v529; // 0x40501d\n    *v528 = v531;\n    int64_t * v532 = (int64_t *)(v226 + 120); // 0x40502f\n    int64_t v533 = *v532; // 0x40502f\n    int64_t v534 = *(int64_t *)(v229 + 16); // 0x405033\n    int64_t v535 = v534 + v533; // 0x405033\n    *v532 = v535;\n    int64_t * v536 = (int64_t *)(v226 + 112); // 0x405042\n    int64_t v537 = *v536; // 0x405042\n    int64_t v538 = *(int64_t *)(v229 + 8); // 0x405046\n    int64_t v539 = v538 + v537; // 0x405046\n    *v536 = v539;\n    int64_t * v540 = (int64_t *)(v226 + 104); // 0x405054\n    int64_t v541 = *v540; // 0x405054\n    int64_t v542 = *(int64_t *)v229; // 0x405058\n    int64_t v543 = v542 + v541; // 0x405058\n    *v540 = v543;\n    result = 1;\n    if (((v519 ^ v516) & (v519 ^ v518)) < 0 | ((v523 ^ v521) & (v523 ^ v522)) < 0 | ((v527 ^ v525) & (v527 ^ v526)) < 0 | ((v531 ^ v529) & (v531 ^ v530)) < 0 || ((v535 ^ v533) & (v535 ^ v534)) < 0 || ((v539 ^ v537) & (v539 ^ v538)) < 0) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    // 0x405078\n    result = 1;\n    if (((v543 ^ v541) & (v543 ^ v542)) < 0) {\n        // break -> 0x403f2d\n        goto lab_0x403f2d_8;\n    }\n    // 0x405081\n    *(char *)(v226 + 161) = 1;\n    *v7 = v226;\n    char * v544 = dcgettext(NULL, \"relative\", 5); // 0x40509a\n    int64_t v545 = *v7; // 0x40509f\n    int64_t v546 = v225 - 4; // 0x4050a4\n    int64_t v547 = v229 - 112; // 0x4050a8\n    int64_t v548 = *v26; // 0x4050c7\n    v147 = v271;\n    v139 = 12;\n    v144 = v546;\n    v145 = v547;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v545;\n    v131 = v548;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    if (*(char *)(v545 + 217) == 0) {\n        goto lab_0x404540;\n    } else {\n        // 0x4050d2\n        *v40 = -93;\n        *v34 = v547;\n        *v41 = 12;\n        *v37 = v548;\n        *v26 = v546;\n        v466 = v545;\n        v465 = v544;\n        goto lab_0x4050ed;\n    }\n  lab_0x40539b:\n    // 0x40539b\n    *(int64_t *)(v226 + 8) = *(int64_t *)v255;\n    *(char *)(v226 + 224) = 1;\n    *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)v229;\n    v147 = v271;\n    v139 = 13;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x404540;\n  lab_0x4056d3:\n    // 0x4056d3\n    *(int64_t *)(v226 + 48) = *(int64_t *)(v229 + 16);\n    v147 = v271;\n    v139 = 14;\n    v144 = v225 - 6;\n    v145 = v229 - 168;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x404540;\n  lab_0x404e3b:\n    // 0x404e3b\n    v235 = *(int64_t *)v254;\n    v258 = 0xffffffa3;\n    v265 = 17;\n    goto lab_0x404db4;\n  lab_0x404b96:\n    // 0x404b96\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v245;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v241;\n    v138 = v226;\n    v131 = v231;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x404540;\n  lab_0x404ad6:\n    // 0x404ad6\n    v272 = v273;\n    v244 = 17;\n    v246 = v225 - 4;\n    v250 = v229 - 112;\n    v240 = 0xffffffa3;\n    v233 = v234;\n    goto lab_0x404a75;\n  lab_0x404a75:\n    // 0x404a75\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v272;\n    v139 = v244;\n    v144 = v246;\n    v145 = v250;\n    v140 = v228;\n    v135 = v240;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = v233;\n    v134 = 0;\n    goto lab_0x404540;\n  lab_0x404a08:\n    // 0x404a08\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v243;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v239;\n    v138 = v226;\n    v131 = 0;\n    v132 = v232;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x404540;\n  lab_0x40494f:\n    // 0x40494f\n    v261 = *(int64_t *)v264;\n    v238 = 0xffffffa3;\n    v263 = 17;\n    goto lab_0x404967;\n  lab_0x404786:\n    // 0x404786\n    v260 = *(int64_t *)v262;\n    v237 = 0xffffffa3;\n    v266 = 17;\n    goto lab_0x40479e;\n  lab_0x404707:\n    // 0x404707\n    *v5 = 0;\n    v147 = v271;\n    v139 = v242;\n    v144 = v248;\n    v145 = v249;\n    v140 = v228;\n    v135 = v236;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x404540;\n  lab_0x404db4:\n    // 0x404db4\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v265;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v258;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = v235;\n    goto lab_0x404540;\n  lab_0x404967:\n    // 0x404967\n    *v5 = v261;\n    *v24 = 0;\n    *v9 = 0;\n    v147 = v271;\n    v139 = v263;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v238;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x404540;\n  lab_0x40479e:\n    // 0x40479e\n    *v9 = v260;\n    *v24 = 0;\n    v242 = v266;\n    v248 = v225 - 4;\n    v249 = v229 - 112;\n    v236 = v237;\n    goto lab_0x404707;\n  lab_0x4043b7:\n    // 0x4043b7\n    v163 = 2;\n    v164 = v65;\n    v165 = 63;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    if (v177 != -0x8000000000000000) {\n        // 0x4043ca\n        *v71 = v189;\n        *v549 = v177 - 1;\n        *v12 = 0x3b9aca0000000000 - 0x100000000 * v193 >> 32;\n        v163 = 21;\n        v164 = v65;\n        v165 = 276;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n    }\n    goto lab_0x4042d2_2;\n  lab_0x4045df:;\n    char v550 = *(char *)((0x100000000 * v500 >> 32) + (int64_t)&g15); // 0x4045e1\n    v146 = v501;\n    v143 = v499;\n    v142 = v502;\n    v141 = v498;\n    v136 = v550;\n    v137 = v497;\n    goto lab_0x403ec6;\n  lab_0x404c66:\n    // 0x404c66\n    v147 = v275;\n    v139 = (int64_t)*v41;\n    v144 = *v26;\n    v145 = *v34;\n    v140 = v228;\n    v135 = (int64_t)*v40;\n    v138 = *v7;\n    v131 = *v37;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x404540;\n  lab_0x4050ed:\n    // 0x4050ed\n    function_4036f0((int64_t)v465, v466);\n    v275 = v271;\n    goto lab_0x404c66;\n  lab_0x40412f:;\n    int64_t v559 = v116 + 1;\n    int64_t v560 = v118;\n    *v71 = v559;\n    unsigned char v561 = *(char *)v559; // 0x404132\n    if ((int32_t)v561 < 123) {\n        unsigned char v562 = (v561 + 63) % 64;\n        if (v561 == 46 || v562 != 0 != ((1 << (int64_t)v562) % 0x3ffffff04000000 == 0)) {\n            goto lab_0x404120;\n        } else {\n            goto lab_0x40414f;\n        }\n    } else {\n        if (v561 == 46) {\n            goto lab_0x404120;\n        } else {\n            goto lab_0x40414f;\n        }\n    }\n  lab_0x404120:\n    // 0x404120\n    v104 = v561;\n    v105 = v560;\n    v106 = v559;\n    goto lab_0x404124;\n  lab_0x40414f:\n    // 0x40414f\n    *(char *)v560 = 0;\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "407ff6",
            "decompiledFuncCode": "int64_t function_406030(int64_t a1, int64_t str, int64_t a3, uint32_t a4, int64_t a5, int64_t a6) {\n    // 0x406030\n    int128_t v1; // 0x406030\n    int128_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x40605b\n    int64_t v3 = a3; // 0x406068\n    if (a3 == 0) {\n        // 0x406ad0\n        int64_t v4; // bp-984, 0x406030\n        function_4030d0(&v4);\n        v3 = &v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40606e\n    int64_t * v6 = (int64_t *)v3; // 0x406072\n    int64_t v7 = *v6; // 0x406072\n    int64_t v8; // 0x406030\n    unsigned char v9 = *(char *)&v8; // 0x40607e\n    int64_t v10 = str; // 0x406084\n    if (v9 < 33) {\n        // 0x406086\n        v10 = str;\n        if ((1 << (int64_t)(v9 % 64) & 0x100003e00) != 0) {\n            int64_t v11 = str + 1; // 0x406875\n            unsigned char v12 = *(char *)v11; // 0x406879\n            v10 = v11;\n            while (v12 < 33) {\n                unsigned char v13 = v12 % 64;\n                int64_t v14 = v13 == 0 ? 1 : 1 << (int64_t)v13;\n                v8 = v14;\n                v10 = v11;\n                if ((v14 & 0x100003e00) == 0) {\n                    // break -> 0x40609a\n                    break;\n                }\n                v11++;\n                v12 = *(char *)v11;\n                v10 = v11;\n            }\n        }\n    }\n    // 0x40609a\n    int64_t v15; // bp-1080, 0x406030\n    int64_t v16 = &v15; // 0x406043\n    v8 = v10;\n    bool v17; // 0x406030\n    int64_t v18 = v17 ? -1 : 1;\n    int64_t v19 = (int64_t)\"TZ=\\\"\"; // 0x406030\n    int64_t v20 = v10; // 0x4060a7\n    int64_t v21 = 4; // 0x4060a7\n    unsigned char v22 = *(char *)v20; // 0x4060a7\n    char v23 = *(char *)v19; // 0x4060a7\n    v20 += v18;\n    v8 = v20;\n    v21--;\n    char v24 = v23; // 0x4060a7\n    bool v25 = false; // 0x4060a7\n    while (v22 == v23) {\n        v19 += v18;\n        v24 = v22;\n        v25 = true;\n        if (v21 == 0) {\n            // break -> \n            break;\n        }\n        v22 = *(char *)v20;\n        v23 = *(char *)v19;\n        v20 += v18;\n        v8 = v20;\n        v21--;\n        v24 = v23;\n        v25 = false;\n    }\n    unsigned char v26 = v24;\n    int64_t v27; // 0x406030\n    int64_t size; // 0x4068f0\n    int64_t v28; // 0x406030\n    int64_t v29; // 0x406030\n    int64_t v30; // 0x406030\n    int64_t v31; // 0x406030\n    char v32; // 0x406030\n    int64_t v33; // 0x406030\n    int64_t v34; // 0x406030\n    int64_t v35; // 0x406030\n    int64_t v36; // 0x406030\n    int32_t v37; // bp-808, 0x406030\n    if ((v22 >= v26 && !v25) != v22 < v26) {\n        goto lab_0x406108;\n    } else {\n        int64_t v38 = v10 + 4; // 0x4060b2\n        char v39 = *(char *)v38; // 0x4060b2\n        v8 = v38;\n        v27 = 1;\n        v32 = v39;\n        v35 = v38;\n        if (v39 == 0) {\n            goto lab_0x406108;\n        } else {\n            while (true) {\n              lab_0x4060eb:;\n                int64_t v40 = v35;\n                char v41 = v32;\n                size = v27;\n                if (v41 != 92) {\n                    // 0x4060d0\n                    v31 = v40;\n                    if (v41 == 34) {\n                        // break -> 0x4068f0\n                        break;\n                    }\n                    goto lab_0x4060db;\n                } else {\n                    int64_t v42 = v40 + 1; // 0x4060ef\n                    v31 = v42;\n                    switch (*(char *)v42) {\n                        case 92: {\n                            goto lab_0x4060db;\n                        }\n                        case 34: {\n                            goto lab_0x4060db;\n                        }\n                        default: {\n                            goto lab_0x406108;\n                        }\n                    }\n                }\n            }\n            int64_t v43 = v38; // 0x4068f4\n            int64_t v44; // bp-568, 0x406030\n            int64_t * mem = &v44; // 0x4068f4\n            if (size > 100) {\n                // 0x406a9b\n                mem = malloc((int32_t)size);\n                v43 = 0x100000000 * v38 >> 32;\n                v8 = v43;\n                if (mem == NULL) {\n                    // 0x40684f\n                    free((int64_t *)*(int64_t *)(v16 + 8));\n                    return 0;\n                }\n            }\n            int64_t v45 = (int64_t)mem;\n            int64_t v46 = v21; // 0x406919\n            int64_t v47 = v45; // 0x406919\n            if (v39 != 34) {\n                int64_t v48 = v45 + 1; // 0x406929\n                int64_t v49 = v43 + (int64_t)(v39 == 92); // 0x40692d\n                char v50 = *(char *)v49; // 0x406930\n                int64_t v51 = v49 + 1; // 0x406933\n                char v52 = *(char *)v51; // 0x406933\n                v8 = v51;\n                *(char *)mem = v50;\n                int64_t v53 = v48; // 0x406943\n                char v54 = v50; // 0x406943\n                if (v52 != 34) {\n                    int64_t v55 = v48 + 1; // 0x406929\n                    int64_t v56 = v8 + (int64_t)(v52 == 92); // 0x40692d\n                    char v57 = *(char *)v56; // 0x406930\n                    int64_t v58 = v56 + 1; // 0x406933\n                    char v59 = *(char *)v58; // 0x406933\n                    v8 = v58;\n                    *(char *)v48 = v57;\n                    int64_t v60 = v55; // 0x406943\n                    v53 = v55;\n                    v54 = v57;\n                    while (v59 != 34) {\n                        // 0x406920\n                        v55 = v60 + 1;\n                        v56 = v8 + (int64_t)(v59 == 92);\n                        v57 = *(char *)v56;\n                        v58 = v56 + 1;\n                        v59 = *(char *)v58;\n                        v8 = v58;\n                        *(char *)v60 = v57;\n                        v60 = v55;\n                        v53 = v55;\n                        v54 = v57;\n                    }\n                }\n                // 0x406945\n                v46 = v54;\n                v47 = v53;\n            }\n            // 0x406945\n            *(char *)v47 = 0;\n            int64_t v61 = function_40bea0(v45, v8, v47); // 0x406952\n            if (v61 == 0) {\n                // 0x40684f\n                free((int64_t *)*(int64_t *)(v16 + 8));\n                return 0;\n            }\n            int64_t v62 = (0x100000000 * v8 >> 32) + 1; // 0x406968\n            unsigned char v63 = *(char *)v62; // 0x406968\n            int64_t v64 = v46; // 0x406972\n            int64_t v65 = v62; // 0x406972\n            if (v63 < 33) {\n                // 0x406974\n                v64 = v46;\n                v65 = v62;\n                if ((1 << (int64_t)(v63 % 64) & 0x100003e00) != 0) {\n                    int64_t v66 = v62 + 1; // 0x406989\n                    unsigned char v67 = *(char *)v66; // 0x40698d\n                    int64_t v68 = v67; // 0x40698d\n                    v64 = v68;\n                    v65 = v66;\n                    while (v67 < 33) {\n                        int64_t v69 = 1 << v68 % 64;\n                        v8 = v69;\n                        v64 = v68;\n                        v65 = v66;\n                        if ((v69 & 0x100003e00) == 0) {\n                            // break -> 0x4069a8\n                            break;\n                        }\n                        v66++;\n                        v67 = *(char *)v66;\n                        v68 = v67;\n                        v64 = v68;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x4069a8\n            v8 = v3;\n            int64_t v70 = function_40c180(v61, v6, (int64_t *)&v37); // 0x4069b6\n            v36 = v45;\n            v34 = v64;\n            v28 = v65;\n            v29 = v61;\n            v33 = 0;\n            v30 = v61;\n            if (v70 != 0) {\n                goto lab_0x406130;\n            } else {\n                goto lab_0x406842;\n            }\n        }\n    }\n  lab_0x406108:\n    // 0x406108\n    v8 = v3;\n    int64_t v71 = function_40c180(a5, v6, (int64_t *)&v37); // 0x406116\n    v36 = a6;\n    v34 = v21;\n    v28 = v10;\n    v29 = a5;\n    if (v71 == 0) {\n        // 0x40684f\n        free((int64_t *)*(int64_t *)(v16 + 8));\n        return 0;\n    }\n    goto lab_0x406130;\n  lab_0x4060db:;\n    int64_t v305 = v31 + 1; // 0x4060db\n    char v306 = *(char *)v305; // 0x4060df\n    v27 = size + 1;\n    v32 = v306;\n    v35 = v305;\n    if (v306 == 0) {\n        goto lab_0x406108;\n    }\n    goto lab_0x4060eb;\n  lab_0x406130:;\n    char v72 = *(char *)v28; // 0x406130\n    int128_t v73 = __asm_pxor(v2, v2); // 0x406135\n    __asm_movups(v1, v73);\n    int32_t v74 = v72 == 0 ? (int32_t)&g7 : (int32_t)v28; // 0x40617b\n    int32_t v75 = v74; // bp-344, 0x40617b\n    __asm_movups(v1, v73);\n    __asm_movups(v1, v73);\n    int64_t v76 = v7 + 0x76a700; // 0x4062d0\n    char * str3 = NULL; // 0x4062d3\n    int64_t v77; // 0x406030\n    int64_t v78; // bp-456, 0x406030\n    int64_t v79; // bp-680, 0x406030\n    int32_t v80; // 0x406030\n    if ((v76 & (v7 ^ -0x8000000000000000)) >= 0) {\n        int64_t v81 = v80;\n        int64_t v82 = &v78; // 0x4062d5\n        int64_t v83 = 0x76a700; // 0x406030\n        v8 = &v79;\n        v79 = v76;\n        char * v84; // 0x406030\n        bool v85 = v84 == NULL | function_40c180(v29, &v79, &v78) == 0;\n        v77 = v81;\n        while (true || v85) {\n            int64_t v86 = v83 + 0x76a700; // 0x40631b\n            if ((int32_t)v86 == 0x1da9c00) {\n                // 0x40632b\n                str3 = NULL;\n                v77 = v85 ? v82 : v81;\n                goto lab_0x40632b_3;\n            }\n            int64_t v87 = 0x100000000 * v86 >> 32; // 0x4062cd\n            int64_t v88 = v87 + v7; // 0x4062d0\n            v83 = v86 & 0xffffffff;\n            if (((v88 ^ v87) & (v88 ^ v7)) < 0) {\n                // 0x40632b\n                str3 = NULL;\n                v77 = v85 ? v82 : v81;\n                goto lab_0x40632b_3;\n            }\n            v8 = &v79;\n            v79 = v88;\n            v85 = v84 == NULL | function_40c180(v29, &v79, &v78) == 0;\n            v77 = v81;\n        }\n    }\n    goto lab_0x40632b_3;\n  lab_0x40632b_3:;\n    // 0x40632b\n    int64_t str2; // 0x406030\n    if (str2 != 0) {\n        // 0x406338\n        v8 = (int64_t)str3;\n        if (str3 != NULL) {\n            // 0x406345\n            strcmp((char *)str2, str3);\n        }\n    }\n    uint32_t v89 = a4 % 2; // 0x40618e\n    int64_t v90 = function_403db0((int64_t *)&v75, v8, v77, v34); // 0x40635a\n    int64_t v91; // 0x406030\n    char * v92; // 0x406030\n    char v93; // 0x406030\n    int64_t v94; // 0x406030\n    if ((int32_t)v90 != 0) {\n        // 0x4068a0\n        v33 = 0;\n        v30 = v29;\n        if (v89 != 0) {\n            uint64_t v95 = (int64_t)v75; // 0x4068ac\n            char * v96; // 0x406030\n            if ((int64_t)len + str > v95) {\n                // 0x406dc0\n                v96 = dcgettext(NULL, \"error: parsing failed, stopped at '%s'\\n\", 5);\n            } else {\n                // 0x4068c7\n                v96 = dcgettext(NULL, \"error: parsing failed\\n\", 5);\n            }\n            // 0x4068d3\n            function_403400((int64_t)v96, v95, 5, v34, a5, a6);\n            v33 = 0;\n            v30 = v29;\n        }\n        goto lab_0x406842;\n    } else {\n        // 0x406367\n        v94 = v34;\n        v93 = 0;\n        if (v89 != 0) {\n            // 0x406a10\n            function_403400((int64_t)dcgettext(NULL, \"input timezone: \", 5), (int64_t)\"input timezone: \", 5, v34, a5, a6);\n            v8 = (int64_t)\"parsed date/time string\";\n            if (v36 == 0) {\n                // 0x406ae4\n                v8 = (int64_t)\"system default\";\n                v91 = (int64_t)\"system default\";\n                goto lab_0x406af0;\n            } else {\n                if (v29 == a5) {\n                    // 0x406e50\n                    v8 = v36;\n                    int64_t v97 = (int64_t)\"UTC0\"; // 0x406030\n                    int64_t v98 = v36; // 0x406e64\n                    int64_t v99 = 5; // 0x406e64\n                    unsigned char v100 = *(char *)v98; // 0x406e64\n                    char v101 = *(char *)v97; // 0x406e64\n                    v98 += v18;\n                    v8 = v98;\n                    char v102 = v101; // 0x406e64\n                    bool v103 = false; // 0x406e64\n                    while (v100 == v101) {\n                        v99--;\n                        v97 += v18;\n                        v102 = v100;\n                        v103 = true;\n                        if (v99 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v100 = *(char *)v98;\n                        v101 = *(char *)v97;\n                        v98 += v18;\n                        v8 = v98;\n                        v102 = v101;\n                        v103 = false;\n                    }\n                    unsigned char v104 = v102;\n                    v8 = (int64_t)\"TZ=\\\"UTC0\\\" environment value or -u\";\n                    v91 = (int64_t)\"TZ=\\\"UTC0\\\" environment value or -u\";\n                    if ((v100 >= v104 && !v103) == v100 < v104) {\n                        goto lab_0x406af0;\n                    } else {\n                        // 0x406e78\n                        v92 = dcgettext(NULL, \"TZ=\\\"%s\\\" environment value\", 5);\n                        goto lab_0x406a83;\n                    }\n                } else {\n                    // 0x406a6f\n                    v92 = dcgettext(NULL, \"TZ=\\\"%s\\\" in date string\", 5);\n                    goto lab_0x406a83;\n                }\n            }\n        } else {\n            goto lab_0x4063c2;\n        }\n    }\n  lab_0x406842:\n    // 0x406842\n    if (v30 != a5) {\n        // 0x406847\n        function_40c160(v30);\n    }\n    // 0x40684f\n    free((int64_t *)*(int64_t *)(v16 + 8));\n    return v33 & 0xffffffff;\n  lab_0x4063c2:;\n    int64_t v105 = v80; // 0x406173\n    int64_t v106 = v105 + 1900; // 0x406188\n    int64_t v107; // 0x406030\n    int32_t v108; // 0x406030\n    int64_t v109; // 0x406030\n    if (v106 < 0) {\n        int64_t v110 = -3800 - v105; // 0x406ef6\n        v108 = v110;\n        v109 = (v105 - 0x7ffffffffffff894 & 0x7ffffffffffff128 - v105) < 0 | v110 >= 0x80000000;\n        goto lab_0x40641a;\n    } else {\n        if (v106 >= 1900) {\n            // 0x406e3a\n            v107 = 0;\n            if (v80 >= 0) {\n                goto lab_0x406402;\n            } else {\n                // 0x406e43\n                v107 = 1;\n                goto lab_0x406402;\n            }\n        } else {\n            // 0x4063f9\n            v107 = 0;\n            if (v80 >= 0) {\n                // 0x406e43\n                v107 = 1;\n                goto lab_0x406402;\n            } else {\n                goto lab_0x406402;\n            }\n        }\n    }\n  lab_0x406af0:\n    // 0x406af0\n    __fprintf_chk(g47, 1, dcgettext(NULL, (char *)v91, 5));\n    goto lab_0x406d10;\n  lab_0x40641a:;\n    // 0x40641a\n    int32_t v111; // 0x406030\n    int32_t v112; // 0x406030\n    int64_t v113; // 0x406030\n    int64_t v114; // 0x406030\n    int64_t v115; // 0x406030\n    int32_t v116; // 0x406030\n    int32_t v117; // 0x406030\n    int32_t v118; // bp-936, 0x406030\n    char v119; // 0x406030\n    int64_t v120; // 0x406470\n    int64_t v121; // 0x406423\n    int64_t v122; // 0x40642d\n    int64_t v123; // 0x406437\n    int64_t v124; // 0x40644b\n    if ((char)v109 != 0) {\n        if (v93 != 0) {\n            // 0x407321\n            function_403400((int64_t)dcgettext(NULL, \"error: out-of-range year %ld\\n\", 5), v106, 5, v94, a5, a6);\n        }\n        // 0x406ebb\n        v113 = v89;\n        goto lab_0x406ec3;\n    } else {\n        // 0x406423\n        v121 = v80 + 1;\n        v122 = v121 - 1;\n        v123 = v122 & 0xffffffff;\n        v8 = v123;\n        v124 = v89;\n        v113 = v124;\n        if (v121 >= 0x80000001 || ((v122 ^ v121) & -v121) < 0) {\n            goto lab_0x406ec3;\n        } else {\n            // 0x40645b\n            v120 = v80;\n            if (v119 == 0) {\n                // 0x407344\n                v118 = 0;\n                v111 = 0;\n                v116 = 0;\n                v114 = 0;\n                v112 = 0;\n                if (v89 != 0) {\n                    // 0x4077c0\n                    function_403400((int64_t)\"warning: using midnight as starting time: 00:00:00\\n\", v123, v120, v124, a5, a6);\n                    v117 = 0;\n                    v115 = 0;\n                    goto lab_0x4077cc;\n                } else {\n                    goto lab_0x4072f0;\n                }\n            } else {\n                int64_t v125 = v80; // 0x40728a\n                if (v80 < 24) {\n                    // 0x4072af\n                    v118 = v37;\n                    v111 = v37;\n                    v114 = v5;\n                    if (v89 != 0) {\n                        int64_t v126 = v125 & 0xffffffff; // 0x4072af\n                        int64_t v127 = v37; // 0x4072c2\n                        __snprintf_chk((char *)&v79, 100, 1, 100, \"%02d:%02d:%02d\", v126, (int64_t)v80, v127);\n                        char * v128 = dcgettext(NULL, \"using current time as starting value: '%s'\\n\", 5); // 0x4079d9\n                        function_403400((int64_t)v128, (int64_t)&v79, 5, 100, v127, v126);\n                        v115 = v5;\n                        goto lab_0x4077cc;\n                    } else {\n                        goto lab_0x4072f0;\n                    }\n                } else {\n                    // 0x4079f3\n                    v33 = 0;\n                    v30 = v29;\n                    if (v89 != 0) {\n                        char * v129 = dcgettext(NULL, \"error: invalid hour %ld%s\\n\", 5); // 0x407a07\n                        function_403400((int64_t)v129, v125, (int64_t)&g25, v124, a5, 2);\n                        v33 = 0;\n                        v30 = v29;\n                    }\n                    goto lab_0x406842;\n                }\n            }\n        }\n    }\n  lab_0x406d10:\n    // 0x406d10\n    v8 = (int64_t)g47;\n    fputc(10, g47);\n    v8 = 0;\n    v94 = 0;\n    v93 = v89;\n    goto lab_0x4063c2;\n  lab_0x406a83:\n    // 0x406a83\n    __fprintf_chk(g47, 1, v92);\n    goto lab_0x406d10;\n  lab_0x406402:\n    // 0x406402\n    v109 = v105 >= 0x80000000 ? 1 : v107;\n    goto lab_0x40641a;\n  lab_0x406ec3:\n    // 0x406ec3\n    v8 = (int64_t)\"error: year, month, or day overflow\\n\";\n    int64_t v130 = (int64_t)\"error: year, month, or day overflow\\n\"; // 0x406ecf\n    int64_t v131 = v113; // 0x406ecf\n    int64_t v132 = a5; // 0x406ecf\n    int64_t v133 = a6; // 0x406ecf\n    if ((char)v113 == 0) {\n        goto lab_0x406842;\n    } else {\n        goto lab_0x406ed5;\n    }\n  lab_0x406ed5:\n    // 0x406ed5\n    function_403400((int64_t)dcgettext(NULL, (char *)v130, 5), v8, 5, v131, v132, v133);\n    v33 = 0;\n    v30 = v29;\n    goto lab_0x406842;\n  lab_0x4072f0:;\n    int64_t v134 = v112;\n    int32_t v135 = v111; // bp-872, 0x406521\n    int64_t v136 = function_40c230(v29, (int64_t *)&v118, v108, 0); // 0x406558\n    v8 = &v135;\n    int64_t v137 = function_4034c0(v29, &v135, (int64_t *)&v118, v136); // 0x406576\n    int64_t v138; // 0x406030\n    int64_t v139; // 0x406030\n    int64_t v140; // 0x406030\n    int64_t v141; // 0x406030\n    int64_t v142; // 0x406030\n    int64_t v143; // 0x406030\n    int64_t v144; // 0x406030\n    int64_t v145; // 0x406030\n    int64_t v146; // 0x406030\n    int64_t v147; // 0x406030\n    int64_t v148; // 0x406030\n    int64_t v149; // 0x406030\n    int64_t v150; // 0x406030\n    int32_t v151; // 0x406030\n    int32_t v152; // 0x406030\n    int64_t v153; // 0x406030\n    int64_t v154; // bp-744, 0x406030\n    int32_t v155; // 0x406030\n    int64_t v156; // 0x407a75\n    int64_t * v157; // 0x407447\n    int64_t * v158; // 0x40744f\n    if ((char)v137 != 0) {\n        // 0x40700b\n        v153 = v114;\n        if (v89 == 0) {\n            int64_t v159 = v116;\n            int64_t v160 = v80; // 0x4070f6\n            int64_t v161 = v1; // 0x4070fe\n            v151 = 0;\n            v143 = 0;\n            v146 = v136;\n            v145 = v136;\n            v139 = v134;\n            v141 = v159;\n            v148 = v160;\n            v152 = 0;\n            v149 = v161;\n            v138 = v134;\n            v140 = v159;\n            if (((int64_t)v1 || v160 || v161) != 0) {\n                goto lab_0x407792;\n            } else {\n                goto lab_0x40711c;\n            }\n        } else {\n            // 0x4073fd\n            v156 = function_403390(v108, &v154, v80, v136);\n            __snprintf_chk((char *)&v79, 100, 1, 100, \"(Y-M-D) %s-%02d-%02d\", (char *)v156, v121 & 0xffffffff, v120);\n            char * v162 = dcgettext(NULL, \"using current date as starting value: '%s'\\n\", 5); // 0x407aaf\n            function_403400((int64_t)v162, (int64_t)&v79, 5, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n            int64_t v163 = function_403880((int32_t *)(v16 + 144), (int64_t *)(v16 + 736), &v79, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156); // 0x407421\n            function_403400((int64_t)dcgettext(NULL, \"starting date/time: '%s'\\n\", 5), v163, 5, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n            v157 = (int64_t *)(v16 + 840);\n            int64_t v164 = *v157; // 0x407447\n            v158 = (int64_t *)(v16 + 848);\n            int64_t v165 = *v158; // 0x40744f\n            int64_t * v166 = (int64_t *)(v16 + 856); // 0x407457\n            int64_t v167 = *v166; // 0x407457\n            unsigned char v168 = *(char *)(v16 + 953); // 0x40745f\n            int64_t v169 = v165 | v164; // 0x40746a\n            v8 = v169;\n            v143 = v168;\n            v146 = v167;\n            v145 = v136;\n            v139 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n            v141 = v156;\n            if ((v167 || v169) == 0) {\n                goto lab_0x40711c;\n            } else {\n                // 0x407479\n                v148 = v165;\n                v149 = v164;\n                v138 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n                v140 = v156;\n                if (v168 == 0) {\n                    goto lab_0x407792;\n                } else {\n                    // 0x407481\n                    v147 = v167;\n                    if (v169 == 0) {\n                        goto lab_0x4079a4;\n                    } else {\n                        int64_t v170 = v167; // 0x407492\n                        if (*(int32_t *)(v16 + 156) != 15) {\n                            // 0x407494\n                            function_403400((int64_t)dcgettext(NULL, \"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\", 5), (int64_t)\"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\", 5, v167, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n                            v170 = *v166;\n                        }\n                        // 0x4074b7\n                        v147 = v170;\n                        if (v147 != 0) {\n                            goto lab_0x4079a4;\n                        } else {\n                            goto lab_0x4074c0;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        int64_t v171 = v118; // 0x4065a8\n        int64_t v172 = v155; // 0x4065c3\n        if (v155 == v112 == v135 == v118) {\n            // 0x407de1\n            v33 = 0;\n            v30 = v29;\n            if (v89 == 0) {\n                goto lab_0x406842;\n            } else {\n                // 0x407de9\n                function_403400((int64_t)dcgettext(NULL, \"error: invalid date/time value:\\n\", 5), (int64_t)\"error: invalid date/time value:\\n\", 5, v172, v134, v171);\n                int64_t v173 = function_403880(&v135, (int64_t *)&v75, &v78, v172, v134, v171); // 0x407e1f\n                function_403400((int64_t)dcgettext(NULL, \"    user provided time: '%s'\\n\", 5), v173, 5, v172, v134, v171);\n                int64_t v174 = function_403880(&v118, (int64_t *)&v75, &v78, v172, v134, v171); // 0x407e58\n                function_403400((int64_t)dcgettext(NULL, \"       normalized time: '%s'\\n\", 5), v174, 5, v172, v134, v171);\n                v142 = (int64_t)&g25;\n                v150 = (int64_t)&g25;\n                v144 = &v78;\n                goto lab_0x407c05;\n            }\n        } else {\n            // 0x407b28\n            v33 = 0;\n            v30 = v29;\n            if (v89 == 0) {\n                goto lab_0x406842;\n            } else {\n                char * v175 = dcgettext(NULL, \"error: invalid date/time value:\\n\", 5); // 0x407b4f\n                int64_t v176 = &v78; // 0x407b54\n                function_403400((int64_t)v175, (int64_t)\"error: invalid date/time value:\\n\", 5, v172, v134, v171);\n                int64_t v177 = function_403880(&v135, (int64_t *)&v75, &v78, v172, v134, v171); // 0x407b79\n                function_403400((int64_t)dcgettext(NULL, \"    user provided time: '%s'\\n\", 5), v177, 5, v172, v134, v171);\n                int64_t v178 = function_403880(&v118, (int64_t *)&v75, &v78, v172, v134, v171); // 0x407bb2\n                function_403400((int64_t)dcgettext(NULL, \"       normalized time: '%s'\\n\", 5), v178, 5, v172, v134, v171);\n                v142 = (int64_t)\"--\";\n                v150 = (int64_t)&g25;\n                v144 = v176;\n                if (v135 != v118) {\n                    int64_t v179 = v155 != v112 ? (int64_t)\"--\" : (int64_t)&g25; // 0x407c01\n                    v142 = v179;\n                    v150 = (int64_t)\"--\";\n                    v144 = v176;\n                }\n                goto lab_0x407c05;\n            }\n        }\n    }\n  lab_0x4077cc:\n    // 0x4077cc\n    v8 = v123;\n    v111 = v118;\n    v116 = v117;\n    int32_t v180; // 0x406030\n    v155 = v180;\n    v114 = v115;\n    v112 = v180;\n    goto lab_0x4072f0;\n  lab_0x407792:;\n    int64_t v181 = (int64_t)*(int32_t *)(v16 + 164); // 0x407792\n    int64_t v182 = v149 + v181; // 0x40779a\n    int64_t v183 = 0x100000000 * v182 >> 32; // 0x4077a0\n    v33 = 0;\n    v30 = v29;\n    int64_t v184; // 0x406030\n    int64_t v185; // 0x406030\n    int64_t v186; // 0x406030\n    int64_t v187; // 0x406030\n    int32_t v188; // 0x406030\n    if (v182 != v183) {\n        goto lab_0x406842;\n    } else {\n        // 0x4077af\n        v33 = 0;\n        v30 = v29;\n        if (((v182 ^ v181) & (v182 ^ v149)) < 0) {\n            goto lab_0x406842;\n        } else {\n            // 0x4077b7\n            *(int32_t *)(v16 + 24) = (int32_t)v182;\n            v184 = v148;\n            v188 = v152;\n            v187 = v183;\n            v185 = v138;\n            v186 = v140;\n            goto lab_0x4074f5;\n        }\n    }\n  lab_0x40711c:;\n    int64_t v189 = v145;\n    int32_t v190 = v151; // 0x407125\n    int64_t v191 = v143; // 0x407125\n    int64_t v192 = v146; // 0x407125\n    int64_t v193 = v189; // 0x407125\n    int64_t v194 = v139; // 0x407125\n    int64_t v195 = v141; // 0x407125\n    if (*(int64_t *)(v16 + 944) == 0) {\n        goto lab_0x407151;\n    } else {\n        int64_t v196 = (int64_t)*(int32_t *)(v16 + 760); // 0x407127\n        int64_t v197 = *(int64_t *)(v16 + 184); // 0x407134\n        int64_t v198 = v196 - v197; // 0x407134\n        int64_t v199 = v189 - v198; // 0x40713f\n        bool v200 = ((v198 ^ v196) & (v197 ^ v196)) < 0 | ((v199 ^ v189) & (v198 ^ v189)) < 0;\n        int64_t v201 = v200; // 0x407148\n        v190 = v151;\n        v191 = v143;\n        v192 = v201;\n        v193 = v199;\n        v194 = v139;\n        v195 = v141;\n        if (v200) {\n            // 0x407a23\n            v33 = 0;\n            v30 = v29;\n            if ((char)v143 != 0) {\n                // 0x407a2b\n                function_403400((int64_t)dcgettext(NULL, \"error: timezone %d caused time_t overflow\\n\", 5), v196 & 0xffffffff, 5, v201, v139, v141);\n                v33 = 0;\n                v30 = v29;\n            }\n            goto lab_0x406842;\n        } else {\n            goto lab_0x407151;\n        }\n    }\n  lab_0x407151:;\n    // 0x407151\n    int64_t v202; // 0x406030\n    int64_t v203; // 0x406030\n    int64_t v204; // 0x406030\n    int64_t v205; // 0x406030\n    int64_t v206; // 0x406030\n    int64_t v207; // 0x406030\n    int64_t v208; // 0x406030\n    int64_t v209; // 0x406030\n    int64_t v210; // 0x406030\n    int64_t v211; // 0x406030\n    int64_t v212; // 0x406030\n    int64_t v213; // 0x406030\n    int64_t v214; // 0x406030\n    int32_t v215; // 0x406030\n    int32_t v216; // 0x406030\n    if ((char)v191 != 0) {\n        int64_t v217 = function_403880(&v118, (int64_t *)&v75, &v79, v192, v194, v195); // 0x4078ac\n        function_403400((int64_t)dcgettext(NULL, \"'%s' = %ld epoch-seconds\\n\", 5), v217, v193, v192, v194, v195);\n        v213 = v192;\n        v209 = v124;\n        v204 = v194;\n        v207 = 0;\n        // 0x4078ef\n        v8 = 0;\n        int64_t v218 = (0x100000000 * v153 >> 32) + 0x3b9aca00 + -0x3b9aca00 * ((int64_t)(v153 < 0) % 2); // 0x407945\n        v213 = v218;\n        v209 = v124;\n        v204 = 0;\n        v207 = 0;\n        int64_t v219 = v1; // 0x40798d\n        int128_t v220 = v219; // 0x407995\n        int128_t v221 = 60 * v220; // 0x407995\n        v216 = v1;\n        v212 = v218;\n        v214 = v221;\n        v211 = v193;\n        v208 = v124;\n        v205 = 0;\n        v206 = 0;\n        v203 = v219;\n        v213 = v218;\n        v209 = v124;\n        v204 = 0;\n        v207 = 0;\n        if (v221 == 0x3c0000000000000000 * v220 >> 64) {\n            goto lab_0x40721b;\n        } else {\n            goto lab_0x407866;\n        }\n    } else {\n        // 0x407151\n        v202 = v16 + 24;\n        v215 = v190;\n        v210 = v193;\n        goto lab_0x407159;\n    }\n  lab_0x407c05:\n    // 0x407c05\n    __snprintf_chk((char *)v144, 100, 1, 100, \"                                 %4s %2s %2s %2s %2s %2s\", (char *)&g25, (char *)&g25, (char *)&g25, (char *)&g25, (char *)v142, (char *)v150);\n    int64_t v222 = 52; // 0x406773\n    if (v119 == 32) {\n        int64_t v223 = 51;\n        while (v223 != 0) {\n            int64_t v224 = v223 - 1; // 0x406780\n            if (*(char *)(v224 + v144) != 32) {\n                // break -> 0x406791\n                break;\n            }\n            v223 = v224;\n        }\n        // 0x406791\n        v222 = 0x100000000 * v223 >> 32;\n    }\n    // 0x4067cf\n    *(char *)(v16 + 624 + v222) = 0;\n    function_403400((int64_t)\"%s\\n\", v144, v222, 100, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v225 = dcgettext((char *)((int32_t)\"%s\\n\" ^ (int32_t)\"%s\\n\"), \"     possible reasons:\\n\", 5); // 0x4067b4\n    function_403400((int64_t)v225, (int64_t)\"     possible reasons:\\n\", 5, 100, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v226 = dcgettext(NULL, \"       numeric values overflow;\\n\", 5); // 0x406805\n    function_403400((int64_t)v226, (int64_t)\"       numeric values overflow;\\n\", 5, v120, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v227 = dcgettext(NULL, \"missing timezone\", 5); // 0x407e92\n    function_403400((int64_t)\"       %s\\n\", (int64_t)v227, 5, v120, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    v33 = 0;\n    v30 = v29;\n    goto lab_0x406842;\n  lab_0x4079a4:\n    if (v116 != 12) {\n        // 0x4079b2\n        function_403400((int64_t)dcgettext(NULL, \"warning: when adding relative days, it is recommended to specify noon\\n\", 5), (int64_t)\"warning: when adding relative days, it is recommended to specify noon\\n\", 5, v147, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n    }\n    goto lab_0x4074c0;\n  lab_0x4074f5:;\n    int32_t * v276 = (int32_t *)(v16 + 160); // 0x4074f5\n    int64_t v277 = (int64_t)*v276; // 0x4074f5\n    int64_t v272 = v184 + v277; // 0x4074fd\n    int64_t v232 = v187; // 0x40750f\n    int64_t v233 = v185; // 0x40750f\n    int64_t v234 = v186; // 0x40750f\n    int64_t v273; // 0x407527\n    int64_t v275; // 0x407598\n    int64_t v269; // 0x407c69\n    if (v272 >= 0x80000000) {\n        goto lab_0x407629;\n    } else {\n        // 0x407515\n        v232 = v187;\n        v233 = v185;\n        v234 = v186;\n        if (((v272 ^ v277) & (v272 ^ v184)) < 0) {\n            goto lab_0x407629;\n        } else {\n            int32_t * v278 = (int32_t *)(v16 + 156); // 0x40751f\n            int64_t v279 = (int64_t)*v278; // 0x40751f\n            int64_t v280 = *(int64_t *)(v16 + 856); // 0x407527\n            v273 = v280 + v279;\n            int64_t v281 = 0x100000000 * v273 >> 32; // 0x40752f\n            v232 = v187;\n            v233 = v185;\n            v234 = v186;\n            if (v273 != v281) {\n                goto lab_0x407629;\n            } else {\n                // 0x40753e\n                v232 = v187;\n                v233 = v185;\n                v234 = v186;\n                if (((v273 ^ v279) & (v273 ^ v280)) < 0) {\n                    goto lab_0x407629;\n                } else {\n                    int64_t v282 = v16 + 24;\n                    int32_t v283 = v272; // 0x407555\n                    *v276 = v283;\n                    int32_t v284 = v273; // 0x40755d\n                    *v278 = v284;\n                    *(int32_t *)(v16 + 164) = *(int32_t *)v282;\n                    int64_t * v285 = (int64_t *)(v16 + 144); // 0x407574\n                    *v285 = *(int64_t *)(v16 + 208);\n                    *(int32_t *)(v16 + 152) = *(int32_t *)(v16 + 216);\n                    *(int32_t *)(v16 + 176) = *(int32_t *)(v16 + 240);\n                    v275 = function_40c230(v29, v285, (int32_t)v281, v187);\n                    if (v275 == -1) {\n                        // 0x407ee6\n                        v33 = 0;\n                        v30 = v29;\n                        if (v89 != 0) {\n                            int64_t v286 = function_403880(&v118, (int64_t *)&v75, &v79, v187, v185, v186); // 0x407f0c\n                            function_403400((int64_t)dcgettext(NULL, \"error: adding relative date resulted in an invalid date: '%s'\\n\", 5), v286, 5, v187, v185, v186);\n                            v33 = 0;\n                            v30 = v29;\n                        }\n                        goto lab_0x406842;\n                    } else {\n                        unsigned char v287 = *(char *)(v16 + 953); // 0x4075aa\n                        if (v287 != 0) {\n                            int64_t v288 = v1; // 0x407c4d\n                            v269 = 0x100000000 * v288 >> 32;\n                            function_403400((int64_t)dcgettext(NULL, \"after date adjustment (%+ld years, %+ld months, %+ld days),\\n\", 5), (int64_t)v1, (int64_t)v80, v269, v185, v186);\n                            int64_t v289 = function_403880(&v118, (int64_t *)&v75, &v79, v269, v185, v186); // 0x407c9a\n                            function_403400((int64_t)dcgettext(NULL, \"    new date/time = '%s'\\n\", 5), v289, 5, v269, v185, v186);\n                            v151 = v188;\n                            v143 = v124;\n                            v146 = v269;\n                            v145 = v275;\n                            v139 = v185;\n                            v141 = v186;\n                            if (v288 != 0) {\n                                goto lab_0x40711c;\n                            } else {\n                                if (v80 != v284) {\n                                    goto lab_0x407d2a;\n                                } else {\n                                    // 0x407d0d\n                                    v151 = v188;\n                                    if (v80 != 0 || (int32_t)v122 == v283) {\n                                        goto lab_0x40711c;\n                                    } else {\n                                        goto lab_0x407d2a;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x4075ba\n                            v202 = v282;\n                            v215 = v188;\n                            v210 = v275;\n                            if (*(int64_t *)(v16 + 944) == 0) {\n                                goto lab_0x407159;\n                            } else {\n                                int64_t v290 = (int64_t)*(int32_t *)(v16 + 760); // 0x4075cb\n                                int64_t v291 = *(int64_t *)(v16 + 184); // 0x4075d3\n                                int64_t v292 = v290 - v291; // 0x4075d3\n                                int64_t v293 = v275 - v292; // 0x4075de\n                                v33 = 0;\n                                v30 = v29;\n                                v190 = v188;\n                                v191 = v287;\n                                v192 = 0;\n                                v193 = v293;\n                                v194 = v185;\n                                v195 = v186;\n                                if (((v292 ^ v290) & (v291 ^ v290)) >= 0 && ((v293 ^ v275) & (v292 ^ v275)) >= 0) {\n                                    goto lab_0x407151;\n                                } else {\n                                    goto lab_0x406842;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x407866:\n    // 0x407866\n    v33 = 0;\n    v30 = v29;\n    if ((char)v209 == 0) {\n        goto lab_0x406842;\n    } else {\n        // 0x40786f\n        v8 = (int64_t)\"error: adding relative time caused an overflow\\n\";\n        v130 = (int64_t)\"error: adding relative time caused an overflow\\n\";\n        v131 = v213;\n        v132 = v204;\n        v133 = v207;\n        goto lab_0x406ed5;\n    }\n  lab_0x407159:;\n    int64_t v294 = *(int64_t *)(v16 + 864); // 0x407159\n    int128_t v295 = v294; // 0x407161\n    int128_t v296 = 3600 * v295; // 0x407161\n    *(int64_t *)v202 = v294;\n    v33 = 0;\n    v30 = v29;\n    if (v296 == 0xe100000000000000000 * v295 >> 64) {\n        int64_t v297 = v296; // 0x407161\n        int64_t v298 = (int64_t)*(int32_t *)(v16 + 888); // 0x407173\n        v8 = v298;\n        int64_t v299 = v210 + v297; // 0x407200\n        v33 = 0;\n        v30 = v29;\n        if (((v299 ^ v210) & (v299 ^ v297)) < 0) {\n            goto lab_0x406842;\n        } else {\n            int64_t v300 = *(int64_t *)(v16 + 832) + v298; // 0x40718d\n            int64_t v301 = v300 + 0x3b9aca00 + (v300 >> 63 & -0x3b9aca00); // 0x4071c1\n            int64_t v302 = *(int64_t *)(v16 + 872); // 0x407209\n            int128_t v303 = v302; // 0x407211\n            int128_t v304 = 60 * v303; // 0x407211\n            v33 = 0;\n            v30 = v29;\n            v216 = v215;\n            v212 = v301;\n            v214 = v304;\n            v211 = v299;\n            v208 = v109;\n            v205 = v298;\n            v206 = v300 - v301 >> 63;\n            v203 = v302;\n            if (v304 == 0x3c0000000000000000 * v303 >> 64) {\n                goto lab_0x40721b;\n            } else {\n                goto lab_0x406842;\n            }\n        }\n    } else {\n        goto lab_0x406842;\n    }\n  lab_0x4074c0:;\n    int64_t v228 = (int64_t)*(int32_t *)(v16 + 164); // 0x4074c2\n    int64_t v229 = *v157; // 0x4074ca\n    int64_t v230 = v229 + v228; // 0x4074ca\n    int64_t v231 = 0x100000000 * v230 >> 32; // 0x4074d2\n    v232 = v231;\n    v233 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n    v234 = v156;\n    if (v230 != v231) {\n        goto lab_0x407629;\n    } else {\n        // 0x4074e1\n        v232 = v231;\n        v233 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n        v234 = v156;\n        if (((v230 ^ v228) & (v230 ^ v229)) < 0) {\n            goto lab_0x407629;\n        } else {\n            // 0x4074e9\n            *(int32_t *)(v16 + 24) = (int32_t)v230;\n            v184 = *v158;\n            v187 = v231;\n            v185 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n            v186 = v156;\n            goto lab_0x4074f5;\n        }\n    }\n  lab_0x407629:\n    // 0x407629\n    v33 = 0;\n    v30 = v29;\n    if (*(char *)(v16 + 953) != 0) {\n        // 0x407637\n        function_403400((int64_t)dcgettext(NULL, \"error: %s:%d\\n\", 5), (int64_t)\"parse-datetime.y\", 2167, v232, v233, v234);\n        v33 = 0;\n        v30 = v29;\n    }\n    goto lab_0x406842;\n  lab_0x40721b:;\n    int64_t v235 = v206;\n    int64_t v236 = v211 + v214; // 0x40721b\n    v213 = v212;\n    v209 = v208;\n    v204 = v205;\n    v207 = v235;\n    int64_t v237; // 0x406030\n    int64_t v238; // 0x406030\n    int64_t v239; // 0x406030\n    int64_t v240; // 0x406030\n    int64_t * v241; // 0x407240\n    unsigned char v242; // 0x407265\n    if (((v236 ^ v211) & (v236 ^ v214)) < 0) {\n        goto lab_0x407866;\n    } else {\n        int64_t v243 = *(int64_t *)(v16 + 880); // 0x407224\n        int64_t v244 = v243 + v236; // 0x40722c\n        v213 = v212;\n        v209 = v208;\n        v204 = v205;\n        v207 = v235;\n        if (((v244 ^ v236) & (v244 ^ v243)) < 0) {\n            goto lab_0x407866;\n        } else {\n            // 0x407235\n            v213 = v212;\n            v209 = v208;\n            v204 = v205;\n            v207 = v235;\n            // 0x407240\n            v241 = (int64_t *)(v16 + 40);\n            int64_t v245 = *v241; // 0x407240\n            *(int64_t *)v245 = v244;\n            *(int64_t *)(v245 + 8) = v212;\n            int64_t v246 = v212; // 0x40724f\n            int64_t v247 = v205; // 0x40724f\n            if ((char)v208 != 0) {\n                // 0x407251\n                v246 = v212;\n                v247 = v205;\n                if ((v243 | v203 | v8 | *(int64_t *)(v16 + 24)) != 0) {\n                    int64_t v248 = v205 & 0xffffffff; // 0x407f4f\n                    function_403400((int64_t)dcgettext(NULL, \"after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\\n\", 5), (int64_t)v216, v203, v243, v248, v235);\n                    function_403400((int64_t)dcgettext(NULL, \"    new time = %ld epoch-seconds\\n\", 5), v244, 5, v243, v248, v235);\n                    v246 = v243;\n                    v247 = v248;\n                    if (v80 != -1) {\n                        int64_t v249 = function_40c180(v29, (int64_t *)a1, &v154); // 0x407fa5\n                        v246 = v243;\n                        v247 = v248;\n                        if (false && v249 != 0) {\n                            // 0x407fc7\n                            function_403400((int64_t)dcgettext(NULL, \"warning: daylight saving time changed after time adjustment\\n\", 5), (int64_t)\"warning: daylight saving time changed after time adjustment\\n\", 5, v243, v248, v235);\n                            v246 = v243;\n                            v247 = v248;\n                        }\n                    }\n                }\n            }\n            // 0x407265\n            v242 = *(char *)(v16 + 953);\n            v33 = 1;\n            v30 = v29;\n            if (v242 == 0) {\n                goto lab_0x406842;\n            } else {\n                // 0x406b99\n                v238 = v247;\n                int64_t * v250 = (int64_t *)(v16 + 16); // 0x406b99\n                v8 = (int64_t)\"timezone: system default\\n\";\n                v237 = (int64_t)\"timezone: system default\\n\";\n                v239 = v246;\n                if (*v250 == 0) {\n                    goto lab_0x406bd3;\n                } else {\n                    int64_t v251 = *v250; // 0x406bab\n                    v8 = v251;\n                    int64_t v252 = (int64_t)\"UTC0\"; // 0x406030\n                    int64_t v253 = v251; // 0x406bbf\n                    unsigned char v254 = *(char *)v253; // 0x406bbf\n                    char v255 = *(char *)v252; // 0x406bbf\n                    v253 += v18;\n                    v8 = v253;\n                    int64_t v256 = 4; // 0x406bbf\n                    char v257 = v255; // 0x406bbf\n                    bool v258 = false; // 0x406bbf\n                    while (v254 == v255) {\n                        v252 += v18;\n                        v257 = v254;\n                        v258 = true;\n                        if (v256 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v254 = *(char *)v253;\n                        v255 = *(char *)v252;\n                        v253 += v18;\n                        v8 = v253;\n                        v256--;\n                        v257 = v255;\n                        v258 = false;\n                    }\n                    unsigned char v259 = v257;\n                    if ((v254 >= v259 && !v258) != v254 < v259) {\n                        char * v260 = dcgettext(NULL, \"timezone: TZ=\\\"%s\\\" environment value\\n\", 5); // 0x406dd8\n                        function_403400((int64_t)v260, *v250, 5, v256, v238, v235);\n                        v240 = v256;\n                        goto lab_0x406be4;\n                    } else {\n                        // 0x406bce\n                        v8 = (int64_t)\"timezone: Universal Time\\n\";\n                        v237 = (int64_t)\"timezone: Universal Time\\n\";\n                        v239 = v256;\n                        goto lab_0x406bd3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406bd3:\n    // 0x406bd3\n    function_403400((int64_t)dcgettext(NULL, (char *)v237, 5), v8, 5, v239, v238, v235);\n    v240 = v239;\n    goto lab_0x406be4;\n  lab_0x407d2a:\n    // 0x407d2a\n    function_403400((int64_t)dcgettext(NULL, \"warning: month/year adjustment resulted in shifted dates:\\n\", 5), (int64_t)\"warning: month/year adjustment resulted in shifted dates:\\n\", 5, v269, v185, v186);\n    int64_t v270 = function_403390(v188, &v154, 5, v269); // 0x407d51\n    int64_t v271 = v272 + 1; // 0x407d71\n    function_403400((int64_t)dcgettext(NULL, \"     adjusted Y M D: %s %02d %02d\\n\", 5), 0x100000000 * v270 >> 32, v271 & 0xffffffff, v273 & 0xffffffff, v185, v186);\n    int64_t v274 = function_403390(v108, &v154, (int32_t)v271, v120); // 0x407da7\n    function_403400((int64_t)dcgettext(NULL, \"   normalized Y M D: %s %02d %02d\\n\", 5), v274, v121 & 0xffffffff, v120, v185, v186);\n    v143 = v124;\n    v146 = v120;\n    v145 = v275;\n    v139 = v185;\n    v141 = v186;\n    goto lab_0x40711c;\n  lab_0x406be4:;\n    int64_t timep = *v241; // 0x406be4\n    int64_t v261 = *(int64_t *)timep; // 0x406bf5\n    int64_t v262 = *(int64_t *)(timep + 8); // 0x406bf9\n    function_403400((int64_t)dcgettext(NULL, \"final: %ld.%09d (epoch-seconds)\\n\", 5), v261, v262 & 0xffffffff, v240, v238, v235);\n    int64_t time2 = v16 + 336; // 0x406c12\n    v8 = time2;\n    if (gmtime_r((int32_t *)timep, (struct tm *)time2) != NULL) {\n        int64_t v263 = function_403880((int32_t *)time2, NULL, (int64_t *)(v16 + 400), v240, v238, v235); // 0x406c39\n        function_403400((int64_t)dcgettext(NULL, \"final: %s (UTC)\\n\", 5), v263, 5, v240, v238, v235);\n    }\n    int64_t v264 = v242; // 0x407265\n    int64_t v265 = v16 + 624; // 0x406c64\n    int64_t v266 = function_40c180(v29, (int64_t *)*v241, (int64_t *)v265); // 0x406c6f\n    v33 = v264;\n    v30 = v29;\n    if (v266 != 0) {\n        int64_t v267 = function_403290(*(int32_t *)(v16 + 664), (int64_t *)(v16 + 112)); // 0x406c89\n        int64_t v268 = function_403880((int32_t *)v265, NULL, (int64_t *)(v16 + 400), v240, v238, v235); // 0x406ca3\n        function_403400((int64_t)dcgettext(NULL, \"final: %s (UTC%s)\\n\", 5), v268, v267, v240, v238, v235);\n        v33 = v264;\n        v30 = v29;\n    }\n    goto lab_0x406842;\n}\n"
        },
        {
            "funcName": "function_408000",
            "funcStartAddr": "408000",
            "funcEndAddr": "408067",
            "decompiledFuncCode": "int64_t function_408000(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t env_val = (int64_t)getenv(\"TZ\"); // 0x40801e\n    int64_t v1 = function_40bea0(env_val, a2, a3); // 0x408029\n    int64_t result = 0; // 0x408031\n    if (v1 != 0) {\n        int64_t v2 = function_406030(a1, a2, a3, 0, v1, env_val); // 0x408047\n        function_40c160(v1);\n        result = v2 & 0xffffffff;\n    }\n    // 0x408056\n    return result;\n}\n"
        },
        {
            "funcName": "function_408070",
            "funcStartAddr": "408070",
            "funcEndAddr": "4080fb",
            "decompiledFuncCode": "int64_t function_408070(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int32_t v2 = v1;\n    int64_t result; // 0x408070\n    if (a3 == 1) {\n        // 0x4080d0\n        *(int32_t *)a1 = v2;\n        if (v2 > 68) {\n            // 0x4080c3\n            return 1;\n        }\n        // 0x4080de\n        result = 0;\n        if ((a4 & 8) == 0) {\n            // 0x4080e3\n            *(int32_t *)a1 = v2 + 100;\n            return 1;\n        }\n    } else {\n        if (a3 != 2) {\n            // 0x408098\n            int64_t t; // bp-16, 0x408070\n            time((int32_t *)&t);\n            struct tm * time_info = localtime((int32_t *)&t); // 0x4080af\n            int64_t v3 = (int64_t)time_info; // 0x4080af\n            result = v3;\n            if (time_info != NULL) {\n                // 0x4080b9\n                *(int32_t *)a1 = *(int32_t *)(v3 + 20);\n                result = 1;\n            }\n        } else {\n            // 0x40807c\n            result = 0;\n            if ((a4 & 2) != 0) {\n                // 0x408081\n                *(int32_t *)a1 = 100 * v2 - 1900 + *(int32_t *)(v1 + 4);\n                return 1;\n            }\n        }\n    }\n    // 0x4080c3\n    return result;\n}\n"
        },
        {
            "funcName": "function_408100",
            "funcStartAddr": "408100",
            "funcEndAddr": "4083a7",
            "decompiledFuncCode": "int64_t function_408100(int64_t * a1, int64_t a2, uint64_t a3) {\n    char * str = (char *)a2; // 0x40811a\n    int64_t len = strlen(str); // 0x40811a\n    int64_t v1 = len; // 0x408126\n    int64_t v2 = 0; // 0x408126\n    if ((a3 & 4) != 0) {\n        char * found_char_pos = strchr(str, 46); // 0x408134\n        int64_t v3 = (int64_t)found_char_pos; // 0x408134\n        v1 = len;\n        v2 = v3;\n        if (found_char_pos != NULL) {\n            int64_t v4 = v3 - a2; // 0x408141\n            v1 = v4;\n            v2 = v3;\n            if (len - v4 != 3) {\n                // 0x408152\n                return 0;\n            }\n        }\n    }\n    // 0x40816b\n    if (v1 >= 13 || v1 % 2 != 0) {\n        // 0x408152\n        return 0;\n    }\n    int64_t v5 = a3 & 0xffffffff; // 0x40810d\n    int64_t timep; // bp-200, 0x408100\n    int64_t v6 = &timep; // 0x408113\n    int64_t v7 = a2; // 0x408183\n    int64_t result = 0; // 0x408191\n    int64_t v8; // 0x408100\n    uint64_t v9; // 0x40819c\n    int64_t v10; // 0x4081bc\n    while ((int32_t)*(char *)v7 < 58) {\n        // 0x408193\n        v7++;\n        if (v1 + a2 == v7) {\n            // 0x40819c\n            v9 = v1 / 2;\n            v10 = v6 + 96;\n            v8 = 0;\n            goto lab_0x4081a8;\n        }\n        result = 0;\n    }\n    // 0x408152\n    return result;\n  lab_0x4081a8:;\n    int64_t v11 = 2 * v8 + a2;\n    int64_t v12 = (int64_t)*(char *)v11; // 0x4081a8\n    char v13 = *(char *)(v11 + 1); // 0x4081b3\n    *(int32_t *)(v10 + 4 * v8) = (int32_t)((int64_t)v13 + 0xffffffd0 + 2 * (v12 + 0xffffff10 + 4 * v12));\n    int64_t v14 = v8 + 1; // 0x4081c0\n    v8 = v14;\n    int32_t v15; // bp-104, 0x408100\n    int32_t v16; // bp-148, 0x408100\n    int32_t v17; // 0x408100\n    int32_t v18; // 0x408100\n    int32_t v19; // 0x408100\n    int32_t v20; // bp-88, 0x408100\n    int32_t v21; // 0x40834e\n    if (v9 != v14) {\n        goto lab_0x4081a8;\n    } else {\n        int64_t v22 = v9 - 4; // 0x4081c9\n        if (a3 % 2 == 0) {\n            int64_t v23 = function_408070((int64_t *)&v16, (int64_t *)&v15, v22, v5); // 0x40833c\n            result = 0;\n            if ((char)v23 == 0) {\n                return result;\n            } else {\n                int64_t v24 = v6 + 80 + 4 * v9; // 0x408349\n                v21 = *(int32_t *)v24;\n                v17 = *(int32_t *)(v24 + 4);\n                v18 = *(int32_t *)(v24 + 8);\n                v19 = *(int32_t *)(v24 + 12);\n                goto lab_0x408213;\n            }\n        } else {\n            int64_t v25 = function_408070((int64_t *)&v16, (int64_t *)&v20, v22, v5); // 0x408206\n            result = 0;\n            v21 = v15;\n            if ((char)v25 == 0) {\n                return result;\n            } else {\n                goto lab_0x408213;\n            }\n        }\n    }\n  lab_0x408213:;\n    int32_t v26 = 0; // 0x408216\n    if (v2 == 0) {\n        goto lab_0x408249;\n    } else {\n        int64_t v27 = (int64_t)*(char *)(v2 + 1) + 0xffffffd0; // 0x408221\n        result = 0;\n        if ((int32_t)v27 < 10) {\n            char v28 = *(char *)(v2 + 2); // 0x40822d\n            result = 0;\n            if (v28 == 57 || (int32_t)v28 < 57) {\n                // 0x40823e\n                v26 = 10 * (v27 & 0xffffffff) + 0xffffffd0 + (int64_t)v28;\n                goto lab_0x408249;\n            } else {\n                return result;\n            }\n        } else {\n            return result;\n        }\n    }\n  lab_0x408249:;\n    int32_t v29 = v21 - 1;\n    v15 = v26;\n    v20 = v29;\n    int64_t v30 = function_40bdb0(&v15); // 0x408279\n    timep = v30;\n    int64_t v31 = &v15; // 0x40828b\n    if (v30 == -1) {\n        struct tm * time_info = localtime((int32_t *)&timep); // 0x40837b\n        result = 0;\n        v31 = (int64_t)time_info;\n        if (time_info != NULL) {\n            goto lab_0x408291;\n        } else {\n            return result;\n        }\n    } else {\n        goto lab_0x408291;\n    }\n  lab_0x408291:;\n    int32_t v32 = *(int32_t *)(v31 + 20); // 0x408299\n    int32_t v33 = *(int32_t *)(v31 + 16); // 0x40829c\n    int32_t v34 = *(int32_t *)(v31 + 12); // 0x4082a5\n    int32_t v35 = *(int32_t *)v31; // 0x4082b2\n    int32_t v36 = *(int32_t *)(v31 + 8); // 0x4082b4\n    int32_t v37 = *(int32_t *)(v31 + 4); // 0x4082bd\n    if ((v33 ^ v29 | v32 ^ v16 | v34 ^ v17 | v35 ^ v26 || v36 ^ v18 || v37 ^ v19) == 0) {\n        // 0x408308\n        *a1 = timep;\n        return 1;\n    }\n    // 0x4082c8\n    result = 0;\n    if (v26 != 60) {\n        return result;\n    } else {\n        // 0x4082d1\n        int64_t v38; // bp-184, 0x408100\n        int64_t * v39 = __stpcpy_chk((char *)&v38, str, 16); // 0x4082de\n        *(int16_t *)((int64_t)v39 - 2) = 0x3935;\n        *(char *)v39 = 0;\n        int64_t v40; // bp-192, 0x408100\n        int64_t v41 = function_408100(&v40, (int64_t)&v38, v5); // 0x4082fb\n        result = v41;\n        if ((char)v41 != 0) {\n            // 0x408308\n            *a1 = timep;\n            return 1;\n        }\n        return result;\n    }\n}\n"
        },
        {
            "funcName": "function_4083b0",
            "funcStartAddr": "4083b0",
            "funcEndAddr": "408422",
            "decompiledFuncCode": "int64_t function_4083b0(void) {\n    char * env_val = getenv(\"_POSIX2_VERSION\"); // 0x4083bf\n    if (env_val == NULL || *env_val == 0) {\n        // 0x4083ce\n        return 0x31069;\n    }\n    // 0x4083e0\n    char * endptr; // bp-16, 0x4083b0\n    int32_t str_as_l = strtol(env_val, &endptr, 10); // 0x4083ed\n    if (*endptr != 0) {\n        // 0x4083ce\n        return 0x31069;\n    }\n    int64_t v1 = str_as_l; // 0x4083ed\n    int64_t v2 = v1 - 0x7fffffff; // 0x408404\n    return v2 == 0 | v2 < 0 != (0x7ffffffe - v1 & v1) < 0 ? v1 & 0xffffffff : 0x7fffffff;\n}\n"
        },
        {
            "funcName": "function_408430",
            "funcStartAddr": "408430",
            "funcEndAddr": "4084c9",
            "decompiledFuncCode": "int64_t function_408430(int64_t str) {\n    // 0x408430\n    if (str == 0) {\n        // 0x4084a9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g47);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40843e\n    int64_t result = (int64_t)found_char_pos; // 0x40843e\n    if (found_char_pos == NULL) {\n        // 0x408499\n        g62 = str;\n        g46 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x408448\n    if (v1 - str < 7) {\n        // 0x408499\n        g62 = str;\n        g46 = str;\n        return result;\n    }\n    // 0x408458\n    bool v2; // 0x408430\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x408430\n    int64_t v5 = result - 6; // 0x408430\n    int64_t v6 = 7; // 0x408466\n    unsigned char v7 = *(char *)v5; // 0x408466\n    char v8 = *(char *)v4; // 0x408466\n    char v9 = v8; // 0x408466\n    bool v10 = false; // 0x408466\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x408470\n    int64_t v13 = v1; // 0x408470\n    int64_t v14 = 3; // 0x408470\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x408499\n        g62 = str;\n        g46 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x408482\n    char v16 = *(char *)v12; // 0x408482\n    char v17 = v16; // 0x408482\n    bool v18 = false; // 0x408482\n    while (v15 == v16) {\n        // 0x408472\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40848c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40848e\n        v20 = result + 4;\n        g44 = v20;\n    }\n    // 0x408499\n    g62 = v20;\n    g46 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4084d0",
            "funcStartAddr": "4084d0",
            "funcEndAddr": "4085c2",
            "decompiledFuncCode": "int64_t function_4084d0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4084e4\n    int64_t result = (int64_t)v1; // 0x4084e4\n    if (result != a1) {\n        // 0x4084f1\n        return result;\n    }\n    int64_t v2 = function_40c4f0(); // 0x408500\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4085b6\n    if (v3 == 85) {\n        // 0x408510\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4085a8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g24 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x40853e\n        int64_t result3 = v4 != 96 ? (int64_t)&g20 : (int64_t)&g23; // 0x40854b\n        // 0x4084f1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4085a8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g24 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x40858d\n    int64_t result4 = v5 != 96 ? (int64_t)&g21 : (int64_t)&g22; // 0x40859a\n    // 0x4084f1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4085d0",
            "funcStartAddr": "4085d0",
            "funcEndAddr": "408627",
            "decompiledFuncCode": "int64_t function_4085d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4085d0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x408618\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408627",
            "funcStartAddr": "408627",
            "funcEndAddr": "4097f1",
            "decompiledFuncCode": "int64_t function_408627(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x408671\n    int64_t v3 = 0; // 0x408671\n    int64_t v4; // 0x408627\n    int64_t v5; // 0x408627\n    int64_t v6; // 0x408627\n    int64_t v7; // 0x408627\n    int64_t v8; // 0x408627\n    int64_t v9; // 0x408627\n    int64_t v10; // 0x408627\n    int64_t v11; // 0x408627\n    int64_t v12; // 0x408627\n    int64_t v13; // 0x408627\n    int64_t v14; // 0x408627\n    int64_t v15; // 0x408627\n    int64_t v16; // 0x408627\n    int64_t v17; // 0x408627\n    int64_t v18; // 0x408627\n    int64_t result; // 0x408627\n    int64_t v19; // 0x408627\n    int32_t wc; // bp+132, 0x408627\n    int64_t ps; // bp+136, 0x408627\n    char v20; // 0x408be0\n    int64_t v21; // 0x408be0\n    int64_t v22; // 0x408f88\n    int64_t v23; // 0x408627\n    int64_t v24; // 0x408fa7\n    int32_t v25; // 0x408627\n    while (true) {\n      lab_0x408678_2:\n        // 0x408678\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x408627\n        int64_t v27; // 0x4086ac\n        while (true) {\n          lab_0x408678:\n            // 0x408678\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x408683\n            if (v15 == -1) {\n                // 0x408685\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x408693\n            if (v28) {\n                // break (via goto) -> 0x408df8\n                goto lab_0x408df8;\n            }\n            // 0x40869c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g80 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x408c8b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4087d1;\n                    }\n                    // 0x4090ad\n                    v26 = v5 + 1;\n                    goto lab_0x408678;\n                }\n                case 7: {\n                    goto lab_0x4087d1;\n                }\n                case 8: {\n                    goto lab_0x4087d1;\n                }\n                case 9: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4087d1;\n                }\n                case 12: {\n                    goto lab_0x4087d1;\n                }\n                case 13: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40879d;\n                }\n                case 36: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4087d1;\n                }\n                case 38: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4087d1;\n                }\n                case 44: {\n                    goto lab_0x4087d1;\n                }\n                case 45: {\n                    goto lab_0x4087d1;\n                }\n                case 46: {\n                    goto lab_0x4087d1;\n                }\n                case 47: {\n                    goto lab_0x4087d1;\n                }\n                case 48: {\n                    goto lab_0x4087d1;\n                }\n                case 49: {\n                    goto lab_0x4087d1;\n                }\n                case 50: {\n                    goto lab_0x4087d1;\n                }\n                case 51: {\n                    goto lab_0x4087d1;\n                }\n                case 52: {\n                    goto lab_0x4087d1;\n                }\n                case 53: {\n                    goto lab_0x4087d1;\n                }\n                case 54: {\n                    goto lab_0x4087d1;\n                }\n                case 55: {\n                    goto lab_0x4087d1;\n                }\n                case 56: {\n                    goto lab_0x4087d1;\n                }\n                case 57: {\n                    goto lab_0x4087d1;\n                }\n                case 58: {\n                    goto lab_0x4087d1;\n                }\n                case 59: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4087d1;\n                }\n                case 66: {\n                    goto lab_0x4087d1;\n                }\n                case 67: {\n                    goto lab_0x4087d1;\n                }\n                case 68: {\n                    goto lab_0x4087d1;\n                }\n                case 69: {\n                    goto lab_0x4087d1;\n                }\n                case 70: {\n                    goto lab_0x4087d1;\n                }\n                case 71: {\n                    goto lab_0x4087d1;\n                }\n                case 72: {\n                    goto lab_0x4087d1;\n                }\n                case 73: {\n                    goto lab_0x4087d1;\n                }\n                case 74: {\n                    goto lab_0x4087d1;\n                }\n                case 75: {\n                    goto lab_0x4087d1;\n                }\n                case 76: {\n                    goto lab_0x4087d1;\n                }\n                case 77: {\n                    goto lab_0x4087d1;\n                }\n                case 78: {\n                    goto lab_0x4087d1;\n                }\n                case 79: {\n                    goto lab_0x4087d1;\n                }\n                case 80: {\n                    goto lab_0x4087d1;\n                }\n                case 81: {\n                    goto lab_0x4087d1;\n                }\n                case 82: {\n                    goto lab_0x4087d1;\n                }\n                case 83: {\n                    goto lab_0x4087d1;\n                }\n                case 84: {\n                    goto lab_0x4087d1;\n                }\n                case 85: {\n                    goto lab_0x4087d1;\n                }\n                case 86: {\n                    goto lab_0x4087d1;\n                }\n                case 87: {\n                    goto lab_0x4087d1;\n                }\n                case 88: {\n                    goto lab_0x4087d1;\n                }\n                case 89: {\n                    goto lab_0x4087d1;\n                }\n                case 90: {\n                    goto lab_0x4087d1;\n                }\n                case 91: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4087d1;\n                }\n                case 94: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4087d1;\n                }\n                case 96: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4087d1;\n                }\n                case 98: {\n                    goto lab_0x4087d1;\n                }\n                case 99: {\n                    goto lab_0x4087d1;\n                }\n                case 100: {\n                    goto lab_0x4087d1;\n                }\n                case 101: {\n                    goto lab_0x4087d1;\n                }\n                case 102: {\n                    goto lab_0x4087d1;\n                }\n                case 103: {\n                    goto lab_0x4087d1;\n                }\n                case 104: {\n                    goto lab_0x4087d1;\n                }\n                case 105: {\n                    goto lab_0x4087d1;\n                }\n                case 106: {\n                    goto lab_0x4087d1;\n                }\n                case 107: {\n                    goto lab_0x4087d1;\n                }\n                case 108: {\n                    goto lab_0x4087d1;\n                }\n                case 109: {\n                    goto lab_0x4087d1;\n                }\n                case 110: {\n                    goto lab_0x4087d1;\n                }\n                case 111: {\n                    goto lab_0x4087d1;\n                }\n                case 112: {\n                    goto lab_0x4087d1;\n                }\n                case 113: {\n                    goto lab_0x4087d1;\n                }\n                case 114: {\n                    goto lab_0x4087d1;\n                }\n                case 115: {\n                    goto lab_0x4087d1;\n                }\n                case 116: {\n                    goto lab_0x4087d1;\n                }\n                case 117: {\n                    goto lab_0x4087d1;\n                }\n                case 118: {\n                    goto lab_0x4087d1;\n                }\n                case 119: {\n                    goto lab_0x4087d1;\n                }\n                case 120: {\n                    goto lab_0x4087d1;\n                }\n                case 121: {\n                    goto lab_0x4087d1;\n                }\n                case 122: {\n                    goto lab_0x4087d1;\n                }\n                case 123: {\n                    goto lab_0x408775;\n                }\n                case 124: {\n                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x408775;\n                }\n                case 126: {\n                    goto lab_0x40879d;\n                }\n                default: {\n                    goto lab_0x408b75;\n                }\n            }\n        }\n      lab_0x408b75:\n        if (v23 != 1) {\n            // 0x408ee0\n            ps = 0;\n            int64_t len = v15; // 0x408ef0\n            if (v15 == -1) {\n                // 0x408ef2\n                len = strlen((char *)str);\n            }\n            // 0x408f1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x408f7f:\n                // 0x408f7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x408f84\n                int64_t v30 = v29 + str;\n                v24 = function_40b670(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4094fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4094fa_2;\n                    }\n                    case -2: {\n                        // 0x4095dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x409617\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40961a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x409627\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x409620\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4094fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4094fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x408f50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x408ffc\n                        char v34 = *(char *)v33; // 0x40900d\n                        unsigned char v35; // 0x408627\n                        if (v34 < 125) {\n                            // 0x409018\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40902f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x409000\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40900d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x409018\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40902f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x409000\n                            v33++;\n                        }\n                        goto lab_0x408f50;\n                    }\n                }\n            }\n            goto lab_0x4094fa_2;\n        } else {\n            // 0x408bc4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4087d1;\n        }\n    }\n  lab_0x408df8:\n    // 0x408df8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4096fa\n        if (v8 > result) {\n            // 0x409703\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x408a27\n        return result;\n    }\n    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4087d1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4087e0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4089ea_2;\n        }\n    }\n    int64_t v39 = result; // 0x4088e1\n    char v40 = v20; // 0x4088e1\n    int64_t v41 = v38; // 0x4088e1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4088e1\n    int64_t v43 = v36; // 0x4088e1\n    goto lab_0x40885d;\n  lab_0x4089ea_2:\n    // 0x408a27\n    return function_4085d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4094fa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4087d1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4090ce\n        int64_t v50 = v5 + 1; // 0x4091b1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4091b8\n        char v52 = v20; // 0x4091b8\n        int64_t v53 = result; // 0x4091b8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x409181\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x409185\n            int64_t v56 = v54 + 1; // 0x40918a\n            int64_t v57 = v51 + 1; // 0x4091b1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40917c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x409181\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x409185\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40885d;\n    }\n  lab_0x408f50:\n    // 0x408f50\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x408f6f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408f72\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4094fa\n        goto lab_0x4094fa_2;\n    }\n    goto lab_0x408f7f;\n  lab_0x40879d:\n    // 0x40879d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4089ea_2;\n    }\n    goto lab_0x4087d1;\n  lab_0x408775:;\n    bool v60 = v15 == 1; // 0x408780\n    if (v15 == -1) {\n        // 0x408782\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40878e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4087d1;\n    } else {\n        goto lab_0x40879d;\n    }\n  lab_0x40885d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x408862\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x408866\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x408678_2;\n}\n"
        },
        {
            "funcName": "function_409800",
            "funcStartAddr": "409800",
            "funcEndAddr": "40999e",
            "decompiledFuncCode": "int64_t function_409800(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x409802\n    int32_t * v3 = __errno_location(); // 0x40981c\n    int64_t v4 = (int64_t)g36; // 0x409821\n    int32_t v5 = *v3; // 0x40982b\n    int64_t v6 = v4; // 0x409841\n    if (v2 >= (int64_t)*(int32_t *)&g39) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x409999\n            function_40a860(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x409850\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x409857\n        int64_t v9; // 0x409800\n        if (g36 == &g37) {\n            int64_t v10 = function_40a670(0, v8); // 0x40997a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g37); // 0x40997f\n            *(int64_t *)&g36 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_40a670(v4, v8); // 0x40986b\n            *(int64_t *)&g36 = v12;\n            v9 = v12;\n        }\n        // 0x40987a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g39; // 0x40987a\n        int32_t v14 = v7; // 0x409881\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g39 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4098b1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4098bb\n    int64_t * v17 = (int64_t *)v15; // 0x4098be\n    uint64_t v18 = *v17; // 0x4098be\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4098c1\n    int64_t result = *v19; // 0x4098c1\n    int64_t v20; // 0x409800\n    uint64_t v21 = function_4085d0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4098e4\n    if (v18 > v21) {\n        // 0x40995b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4098f7\n    *v17 = v22;\n    if (result != (int64_t)&g63) {\n        // 0x409907\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_40a610(v22); // 0x409921\n    *v19 = result2;\n    int64_t v23; // 0x409800\n    function_4085d0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40995b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4099a0",
            "funcStartAddr": "4099a0",
            "funcEndAddr": "4099d4",
            "decompiledFuncCode": "int64_t function_4099a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4099a7\n    int64_t result = function_40a810(a1 == 0 ? (int64_t)&g64 : a1, 56); // 0x4099c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099e0",
            "funcStartAddr": "4099e0",
            "funcEndAddr": "4099ef",
            "decompiledFuncCode": "int64_t function_4099e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g64 : a1); // 0x4099ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099f0",
            "funcStartAddr": "4099f0",
            "funcEndAddr": "4099ff",
            "decompiledFuncCode": "int64_t function_4099f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g64 : a1; // 0x4099f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g64;\n}\n"
        },
        {
            "funcName": "function_409a00",
            "funcStartAddr": "409a00",
            "funcEndAddr": "409a33",
            "decompiledFuncCode": "int64_t function_409a00(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g64 + 8 : a1 + 8; // 0x409a19\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x409a1e\n    uint32_t v3 = *v2; // 0x409a1e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x409a22\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_409a40",
            "funcStartAddr": "409a40",
            "funcEndAddr": "409a53",
            "decompiledFuncCode": "int64_t function_409a40(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g64 + 4 : a1 + 4); // 0x409a4c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_409a60",
            "funcStartAddr": "409a60",
            "funcEndAddr": "409a8b",
            "decompiledFuncCode": "int64_t function_409a60(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g64 : a1; // 0x409a68\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x409a85\n        abort();\n        // UNREACHABLE\n    }\n    // 0x409a7c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g64;\n}\n"
        },
        {
            "funcName": "function_409a90",
            "funcStartAddr": "409a90",
            "funcEndAddr": "409b02",
            "decompiledFuncCode": "int64_t function_409a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g64 : a5; // 0x409ab2\n    int32_t * v2 = __errno_location(); // 0x409abb\n    uint32_t v3 = *(int32_t *)v1; // 0x409adb\n    int64_t result = function_4085d0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x409aea\n    return result;\n}\n"
        },
        {
            "funcName": "function_409b10",
            "funcStartAddr": "409b10",
            "funcEndAddr": "409bf1",
            "decompiledFuncCode": "int64_t function_409b10(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g64 : a4; // 0x409b32\n    int32_t * v2 = __errno_location(); // 0x409b38\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x409b57\n    int32_t * v4 = (int32_t *)v1; // 0x409b5a\n    int64_t v5 = function_4085d0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x409b75\n    int64_t v6 = v5 + 1; // 0x409b7a\n    int64_t result = function_40a610(v6); // 0x409b8f\n    function_4085d0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x409bd4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x409bdd\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c00",
            "funcStartAddr": "409c00",
            "funcEndAddr": "409c0a",
            "decompiledFuncCode": "int64_t function_409c00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409c00\n    return function_409b10(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_409c10",
            "funcStartAddr": "409c10",
            "funcEndAddr": "409ca5",
            "decompiledFuncCode": "int64_t function_409c10(void) {\n    uint32_t v1 = *(int32_t *)&g39; // 0x409c10\n    int64_t v2 = v1; // 0x409c10\n    int64_t v3 = v2; // 0x409c24\n    if (v1 >= 2) {\n        int64_t v4 = &g39;\n        int64_t v5 = v4 + 16; // 0x409c43\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g81;\n        while (v5 != (int64_t)g36 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x409c40\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g81;\n        }\n    }\n    int64_t v6 = v3; // 0x409c5d\n    if (g37 != 0x6183c0) {\n        // 0x409c5f\n        free((int64_t *)g37);\n        g37 = 256;\n        *(int64_t *)&g38 = (int64_t)&g63;\n        v6 = &g81;\n    }\n    int64_t result = v6; // 0x409c81\n    if (g36 != &g37) {\n        // 0x409c83\n        free(g36);\n        *(int64_t *)&g36 = (int64_t)&g37;\n        result = &g81;\n    }\n    // 0x409c96\n    *(int32_t *)&g39 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409cb0",
            "funcStartAddr": "409cb0",
            "funcEndAddr": "409cc1",
            "decompiledFuncCode": "int64_t function_409cb0(void) {\n    // 0x409cb0\n    int64_t v1; // 0x409cb0\n    return function_409800(v1, v1, -1, (int64_t *)&g64);\n}\n"
        },
        {
            "funcName": "function_409cd0",
            "funcStartAddr": "409cd0",
            "funcEndAddr": "409cda",
            "decompiledFuncCode": "int64_t function_409cd0(void) {\n    // 0x409cd0\n    int64_t v1; // 0x409cd0\n    return function_409800(v1, v1, v1, (int64_t *)&g64);\n}\n"
        },
        {
            "funcName": "function_409ce0",
            "funcStartAddr": "409ce0",
            "funcEndAddr": "409cf6",
            "decompiledFuncCode": "int64_t function_409ce0(int64_t a1) {\n    // 0x409ce0\n    return function_409800(0, a1, -1, (int64_t *)&g64);\n}\n"
        },
        {
            "funcName": "function_409d00",
            "funcStartAddr": "409d00",
            "funcEndAddr": "409d12",
            "decompiledFuncCode": "int64_t function_409d00(int64_t a1, int64_t a2) {\n    // 0x409d00\n    return function_409800(0, a1, a2, (int64_t *)&g64);\n}\n"
        },
        {
            "funcName": "function_409d20",
            "funcStartAddr": "409d20",
            "funcEndAddr": "409d88",
            "decompiledFuncCode": "int64_t function_409d20(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409d30\n    return function_409800((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409df4",
            "decompiledFuncCode": "int64_t function_409d90(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409da0\n    return function_409800((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_409e00",
            "funcStartAddr": "409e00",
            "funcEndAddr": "409e0c",
            "decompiledFuncCode": "int64_t function_409e00(int64_t a1, int64_t a2) {\n    // 0x409e00\n    return function_409d20(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_409e10",
            "funcStartAddr": "409e10",
            "funcEndAddr": "409e1f",
            "decompiledFuncCode": "int64_t function_409e10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409e10\n    return function_409d90(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e90",
            "decompiledFuncCode": "int64_t function_409e20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g64); // 0x409e2d\n    int128_t v2 = __asm_movdqa(g65); // 0x409e35\n    int128_t v3 = __asm_movdqa(g66); // 0x409e3d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x409e52\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x409e68\n    uint32_t v6 = *v5; // 0x409e68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x409e6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_409800(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_409e90",
            "funcStartAddr": "409e90",
            "funcEndAddr": "409e9d",
            "decompiledFuncCode": "int64_t function_409e90(int64_t a1, int64_t a2) {\n    // 0x409e90\n    return function_409e20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_409ea0",
            "funcStartAddr": "409ea0",
            "funcEndAddr": "409eb1",
            "decompiledFuncCode": "int64_t function_409ea0(int64_t a1) {\n    // 0x409ea0\n    return function_409e20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_409ec0",
            "funcStartAddr": "409ec0",
            "funcEndAddr": "409eca",
            "decompiledFuncCode": "int64_t function_409ec0(void) {\n    // 0x409ec0\n    int64_t v1; // 0x409ec0\n    return function_409e20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_409ed0",
            "funcStartAddr": "409ed0",
            "funcEndAddr": "409f3e",
            "decompiledFuncCode": "int64_t function_409ed0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409eea\n    return function_409800(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_409f40",
            "funcStartAddr": "409f40",
            "funcEndAddr": "409fac",
            "decompiledFuncCode": "int64_t function_409f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g64); // 0x409f47\n    int128_t v2 = __asm_movdqa(g65); // 0x409f4f\n    int128_t v3 = __asm_movdqa(g66); // 0x409f57\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x409f79\n    if (a2 == 0 || a3 == 0) {\n        // 0x409fa7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x409f8a\n    return function_409800(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_409fb0",
            "funcStartAddr": "409fb0",
            "funcEndAddr": "409fb9",
            "decompiledFuncCode": "int64_t function_409fb0(void) {\n    // 0x409fb0\n    int64_t v1; // 0x409fb0\n    return function_409f40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_409fc0",
            "funcStartAddr": "409fc0",
            "funcEndAddr": "409fd7",
            "decompiledFuncCode": "int64_t function_409fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409fc0\n    return function_409f40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_409fe0",
            "funcStartAddr": "409fe0",
            "funcEndAddr": "409ff3",
            "decompiledFuncCode": "int64_t function_409fe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x409fe0\n    return function_409f40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40a000",
            "funcStartAddr": "40a000",
            "funcEndAddr": "40a00a",
            "decompiledFuncCode": "int64_t function_40a000(void) {\n    // 0x40a000\n    int64_t v1; // 0x40a000\n    return function_409800(v1, v1, v1, &g35);\n}\n"
        },
        {
            "funcName": "function_40a010",
            "funcStartAddr": "40a010",
            "funcEndAddr": "40a022",
            "decompiledFuncCode": "int64_t function_40a010(int64_t a1, int64_t a2) {\n    // 0x40a010\n    return function_409800(0, a1, a2, &g35);\n}\n"
        },
        {
            "funcName": "function_40a030",
            "funcStartAddr": "40a030",
            "funcEndAddr": "40a041",
            "decompiledFuncCode": "int64_t function_40a030(int64_t a1, int64_t a2) {\n    // 0x40a030\n    return function_409800(a1, a2, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40a050",
            "funcStartAddr": "40a050",
            "funcEndAddr": "40a066",
            "decompiledFuncCode": "int64_t function_40a050(int64_t a1) {\n    // 0x40a050\n    return function_409800(0, a1, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40a070",
            "funcStartAddr": "40a070",
            "funcEndAddr": "40a44d",
            "decompiledFuncCode": "int64_t function_40a070(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x40a108\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40a08c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x40a0a6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40a0eb\n    if (a6 < 10) {\n        // 0x40a0fa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x40a1f2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_40a450",
            "funcStartAddr": "40a450",
            "funcEndAddr": "40a470",
            "decompiledFuncCode": "int64_t function_40a450(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a450\n    if (a5 == 0) {\n        // 0x40a46b\n        return function_40a070(a1, a2, a3, a4, a5, 0, (int64_t)&g81);\n    }\n    int64_t v1 = 0; // 0x40a457\n    v1++;\n    int64_t v2 = v1; // 0x40a469\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x40a460\n        v1++;\n        v2 = v1;\n    }\n    // 0x40a46b\n    return function_40a070(a1, a2, a3, a4, a5, v2, (int64_t)&g81);\n}\n"
        },
        {
            "funcName": "function_40a470",
            "funcStartAddr": "40a470",
            "funcEndAddr": "40a4d0",
            "decompiledFuncCode": "int64_t function_40a470(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x40a470\n    int64_t v3 = &v2; // 0x40a470\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x40a4a3\n    int64_t v6; // 0x40a48d\n    int64_t * v7; // 0x40a4ab\n    int64_t v8; // 0x40a4ab\n    int64_t v9; // 0x40a4b7\n    if (v5 < 48) {\n        // 0x40a480\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x40a4c3\n            break;\n        }\n    } else {\n        // 0x40a4ab\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x40a4c3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x40a4a1\n    while (v4 != 9) {\n        // 0x40a499\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x40a480\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x40a4c3\n                break;\n            }\n        } else {\n            // 0x40a4ab\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x40a4c3\n                break;\n            }\n        }\n        // 0x40a499\n        v10 = 10;\n    }\n    // 0x40a4c3\n    return function_40a070(a1, a2, a3, a4, v3, v10, (int64_t)&g81);\n}\n"
        },
        {
            "funcName": "function_40a4d0",
            "funcStartAddr": "40a4d0",
            "funcEndAddr": "40a58c",
            "decompiledFuncCode": "int64_t function_40a4d0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x40a4d0\n    int64_t v1; // bp-168, 0x40a4d0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x40a4d0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x40a4d0\n    int64_t v8; // 0x40a4d0\n    int64_t v9; // bp-56, 0x40a4d0\n    int64_t v10; // 0x40a535\n    int64_t v11; // 0x40a559\n    if ((int32_t)v6 < 48) {\n        // 0x40a520\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x40a570\n            break;\n        }\n    } else {\n        // 0x40a552\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x40a570\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40a54a\n    int64_t v13 = 10; // 0x40a54a\n    while (v5 != 9) {\n        // 0x40a54c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x40a520\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x40a570\n                break;\n            }\n        } else {\n            // 0x40a552\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x40a570\n                break;\n            }\n        }\n        // 0x40a542\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x40a570\n    int64_t v14; // bp-136, 0x40a4d0\n    int64_t result = function_40a070(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g81); // 0x40a57f\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a590",
            "funcStartAddr": "40a590",
            "funcEndAddr": "40a604",
            "decompiledFuncCode": "int64_t function_40a590(int64_t a1) {\n    // 0x40a590\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x40a5f3\n    return fputs_unlocked(v1, g45);\n}\n"
        },
        {
            "funcName": "function_40a610",
            "funcStartAddr": "40a610",
            "funcEndAddr": "40a62a",
            "decompiledFuncCode": "int64_t function_40a610(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x40a614\n    if (size != 0 != (mem == NULL)) {\n        // 0x40a623\n        return (int64_t)mem;\n    }\n    // 0x40a625\n    function_40a860(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a630",
            "funcStartAddr": "40a630",
            "funcEndAddr": "40a651",
            "decompiledFuncCode": "int64_t function_40a630(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x40a633\n    int64_t v2 = v1; // 0x40a633\n    if (v2 < 0) {\n        // 0x40a64b\n        function_40a860(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40a649\n        return function_40a610(v2);\n    }\n    // 0x40a64b\n    function_40a860(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a660",
            "funcStartAddr": "40a660",
            "funcEndAddr": "40a662",
            "decompiledFuncCode": "int64_t function_40a660(void) {\n    // 0x40a660\n    int64_t v1; // 0x40a660\n    return function_40a610(v1);\n}\n"
        },
        {
            "funcName": "function_40a670",
            "funcStartAddr": "40a670",
            "funcEndAddr": "40a6a6",
            "decompiledFuncCode": "int64_t function_40a670(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x40a698\n        free(v1);\n        return (int32_t)&g81 ^ (int32_t)&g81;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x40a681\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x40a690\n        return (int64_t)mem;\n    }\n    // 0x40a6a1\n    function_40a860(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a6b0",
            "funcStartAddr": "40a6b0",
            "funcEndAddr": "40a6d1",
            "decompiledFuncCode": "int64_t function_40a6b0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x40a6b3\n    int64_t v2 = v1; // 0x40a6b3\n    if (v2 < 0) {\n        // 0x40a6cb\n        function_40a860(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40a6c9\n        return function_40a670(a1, v2);\n    }\n    // 0x40a6cb\n    function_40a860(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a6e0",
            "funcStartAddr": "40a6e0",
            "funcEndAddr": "40a766",
            "decompiledFuncCode": "int64_t function_40a6e0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40a73b\n            function_40a860(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40a670(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x40a723\n    if (a2 == 0) {\n        // 0x40a748\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x40a728\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40a73b\n        function_40a860(a1);\n        // UNREACHABLE\n    }\n    // 0x40a70a\n    *(int64_t *)a2 = v2;\n    return function_40a670(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_40a770",
            "funcStartAddr": "40a770",
            "funcEndAddr": "40a7c0",
            "decompiledFuncCode": "int64_t function_40a770(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x40a770\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40a7ba\n            function_40a860(a1);\n            // UNREACHABLE\n        }\n        // 0x40a792\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40a670(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x40a7a5\n        *(int64_t *)a2 = 128;\n        return function_40a670(0, 128);\n    }\n    // 0x40a7b8\n    if (a2 < 0) {\n        // 0x40a7ba\n        function_40a860(a1);\n        // UNREACHABLE\n    }\n    // 0x40a792\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_40a670(a1, v1);\n}\n"
        },
        {
            "funcName": "function_40a7c0",
            "funcStartAddr": "40a7c0",
            "funcEndAddr": "40a7d7",
            "decompiledFuncCode": "int64_t function_40a7c0(int64_t a1, int64_t a2) {\n    // 0x40a7c0\n    return (int64_t)memset((int64_t *)function_40a610(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_40a7e0",
            "funcStartAddr": "40a7e0",
            "funcEndAddr": "40a80e",
            "decompiledFuncCode": "int64_t function_40a7e0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x40a7e7\n    if ((int64_t)v1 < 0) {\n        // 0x40a809\n        function_40a860(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x40a809\n        function_40a860(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40a7fa\n    if (mem != NULL) {\n        // 0x40a804\n        return (int64_t)mem;\n    }\n    // 0x40a809\n    function_40a860(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a810",
            "funcStartAddr": "40a810",
            "funcEndAddr": "40a838",
            "decompiledFuncCode": "int64_t function_40a810(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40a610(a2); // 0x40a81f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_40a840",
            "funcStartAddr": "40a840",
            "funcEndAddr": "40a853",
            "decompiledFuncCode": "int64_t function_40a840(int64_t str) {\n    // 0x40a840\n    return function_40a810(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_40a860",
            "funcStartAddr": "40a860",
            "funcEndAddr": "40a891",
            "decompiledFuncCode": "int64_t function_40a860(int64_t a1) {\n    // 0x40a860\n    error(g34, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a8a0",
            "funcStartAddr": "40a8a0",
            "funcEndAddr": "40a97f",
            "decompiledFuncCode": "int64_t function_40a8a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40a8ac\n    uint32_t v2 = *v1; // 0x40a8ac\n    int64_t v3 = a2 & 0xffffffff; // 0x40a8b1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40a8b4\n    uint64_t v5 = (int64_t)*v4; // 0x40a8b4\n    int64_t v6; // 0x40a922\n    if (v3 <= v5) {\n      lab_0x40a91c_2:\n        // 0x40a91c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40a8a2\n    int64_t v8 = v2; // 0x40a8a0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40a91c\n        goto lab_0x40a91c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40a8d8\n    int64_t v17; // 0x40a8e6\n    int64_t * v18; // 0x40a900\n    int64_t * v19; // 0x40a903\n    int64_t v20; // 0x40a90e\n    int64_t v21; // 0x40a8e6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40a8e3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40a900\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40a917\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40a91c\n            goto lab_0x40a91c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a91c\n            goto lab_0x40a91c_2;\n        }\n        // 0x40a8d2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40a95b\n    int64_t * v23 = (int64_t *)v22; // 0x40a960\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40a963\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40a960\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40a977\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40a8cd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a91c\n            goto lab_0x40a91c_2;\n        }\n        // 0x40a8d2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40a8e3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40a900\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40a917\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40a91c\n                goto lab_0x40a91c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40a91c\n                goto lab_0x40a91c_2;\n            }\n            // 0x40a8d2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40a940\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40a960\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40a977\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40a91c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a980",
            "funcStartAddr": "40a980",
            "funcEndAddr": "40af9c",
            "decompiledFuncCode": "int64_t function_40a980(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40a99f\n    int64_t v2 = *v1; // 0x40a99f\n    char * str2 = (char *)v2; // 0x40a9ac\n    char c = *str2; // 0x40a9ac\n    int64_t v3 = v2; // 0x40a9d8\n    int64_t v4 = 0; // 0x40a980\n    int32_t v5; // 0x40a980\n    int64_t v6; // 0x40a980\n    int64_t v7; // 0x40a980\n    int64_t v8; // 0x40a980\n    int64_t v9; // 0x40a980\n    int64_t v10; // 0x40a980\n    int64_t v11; // 0x40a980\n    int64_t v12; // 0x40a980\n    int64_t v13; // 0x40a980\n    int64_t str3; // 0x40a980\n    int64_t v14; // 0x40a980\n    int64_t v15; // 0x40a980\n    int64_t v16; // 0x40a980\n    int64_t v17; // 0x40a980\n    int32_t v18; // 0x40a980\n    int32_t v19; // 0x40a980\n    int32_t v20; // 0x40a980\n    int32_t v21; // 0x40a980\n    int32_t v22; // 0x40a980\n    int32_t v23; // 0x40a980\n    int32_t v24; // 0x40a980\n    int32_t v25; // 0x40a980\n    int32_t v26; // 0x40a980\n    int32_t v27; // 0x40a980\n    int32_t v28; // 0x40a980\n    int32_t v29; // 0x40a980\n    int64_t nmemb; // 0x40a980\n    int64_t v30; // 0x40a980\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40a9dc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40a9d8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40a9e8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40a9ee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40a9b8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40aa1c\n                int64_t v34; // 0x40a980\n                int64_t v35; // 0x40a980\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40aa25\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40aba0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40aa36\n                int64_t v37 = *(int64_t *)v36; // 0x40aa3a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40aa10\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40aa25\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40aba0;\n                        }\n                    }\n                    // 0x40aa36\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40aa86:\n                    // 0x40aa86\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40aae0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40ac50\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40aae0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40ac00\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40aaaa;\n                                } else {\n                                    // 0x40ac0c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40aaaa;\n                                    } else {\n                                        // 0x40ac1a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40aaaa;\n                                        } else {\n                                            goto lab_0x40aae0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40aaaa;\n                            }\n                        }\n                    }\n                }\n              lab_0x40aaf1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40acc6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40ae72\n                            flockfile(g47);\n                            int64_t v41 = *v1; // 0x40ae92\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40aedf\n                            int64_t v43 = (int64_t)g47;\n                            int64_t v44 = v43; // 0x40aef9\n                            int64_t v45; // 0x40aefb\n                            if (*(char *)v42 != 0) {\n                                // 0x40aefb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g47;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40aef3\n                            while (v17 + nmemb != v42) {\n                                // 0x40aef5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40aefb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g47;\n                                }\n                                // 0x40aee8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40af20\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g47);\n                            v40 = *v1;\n                        } else {\n                            // 0x40acd4\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40ae2f\n                        free((int64_t *)v17);\n                    }\n                    // 0x40ad29\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40ad40\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40abee\n                    return 63;\n                }\n                // 0x40ab10\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40ab94\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40aba0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40abb0\n                    uint32_t v50 = *v49; // 0x40abb0\n                    int64_t v51 = v50; // 0x40abb0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40abba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40abc3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40adef\n                                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40ad9a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40abee\n                            return 63;\n                        }\n                        // 0x40ac38\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40af4f\n                                    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40ae4d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40ae60\n                                // 0x40abee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40ad5e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40ad72\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40abdb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40abde\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40abe2\n                    int64_t result = v59; // 0x40abe8\n                    if (v58 != 0) {\n                        // 0x40abea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40abee\n                    return result;\n                }\n            } else {\n                // 0x40a9ee\n                v5 = v32;\n            }\n            // break -> 0x40ab15\n            break;\n        }\n    }\n    // 0x40ab15\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40ab2d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40ab37\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40abee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40ac79\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40ab66\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40ab76\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40aae0:\n    // 0x40aae0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40aae0\n    int64_t v63 = *(int64_t *)v62; // 0x40aae4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40aaf1\n        goto lab_0x40aaf1;\n    }\n    goto lab_0x40aa86;\n  lab_0x40aaaa:\n    // 0x40aaaa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40a980\n    int32_t v65; // 0x40a980\n    int32_t v66; // 0x40a980\n    if (v27 != 0) {\n        goto lab_0x40aae0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40ac60\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40aae0;\n            } else {\n                goto lab_0x40aad1;\n            }\n        } else {\n            // 0x40aac5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40adbc\n                int64_t v67 = (int64_t)mem; // 0x40adbc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40aae0;\n                } else {\n                    // 0x40adcf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40aad1;\n                }\n            } else {\n                goto lab_0x40aad1;\n            }\n        }\n    }\n  lab_0x40aad1:\n    // 0x40aad1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40aae0;\n}\n"
        },
        {
            "funcName": "function_40afa0",
            "funcStartAddr": "40afa0",
            "funcEndAddr": "40b566",
            "decompiledFuncCode": "int64_t function_40afa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40afc1\n    if (v3 < 1) {\n        // 0x40b17e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40afbd\n    int32_t v5 = *(int32_t *)a7; // 0x40afc9\n    uint64_t v6 = a1 & 0xffffffff; // 0x40afcb\n    int64_t v7 = v2; // 0x40afd0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40afd3\n    *v8 = 0;\n    int64_t v9; // 0x40afa0\n    int64_t v10; // 0x40afa0\n    int64_t v11; // 0x40afa0\n    int64_t v12; // 0x40afa0\n    int64_t str; // 0x40afa0\n    int64_t v13; // 0x40afa0\n    int64_t v14; // 0x40afa0\n    int64_t v15; // 0x40afa0\n    int64_t v16; // 0x40afa0\n    int64_t v17; // 0x40afa0\n    int32_t v18; // 0x40afa0\n    char v19; // 0x40afa0\n    if (v5 == 0) {\n        // 0x40b1b8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40afea;\n    } else {\n        // 0x40afe3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40b030\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40b033\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40b0f8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40b046\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40b056\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40b10c;\n                } else {\n                    goto lab_0x40b068;\n                }\n            }\n        } else {\n            goto lab_0x40afea;\n        }\n    }\n  lab_0x40afea:\n    // 0x40afea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40aff0\n    *v24 = 0;\n    int64_t v25; // 0x40afa0\n    int64_t v26; // 0x40afa0\n    int64_t v27; // 0x40afa0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40b0e0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b0ed;\n        }\n        case 43: {\n            // 0x40b3f0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b0ed;\n        }\n        default: {\n            // 0x40b00c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40b36f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40b488\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40b0ed;\n                } else {\n                    // 0x40b37d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40b01a;\n                }\n            } else {\n                goto lab_0x40b01a;\n            }\n        }\n    }\n  lab_0x40b0f8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40b0ff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40b068;\n    } else {\n        goto lab_0x40b10c;\n    }\n  lab_0x40b01a:\n    // 0x40b01a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40b0ed;\n  lab_0x40b0ed:\n    // 0x40b0ed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40b0f8;\n  lab_0x40b068:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40b068\n    int64_t v31 = v30; // 0x40b068\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40b06a\n    if ((int64_t)*v32 > v31) {\n        // 0x40b06f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40b072\n    if (*v33 > v30) {\n        // 0x40b077\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40b07a\n    int64_t v35 = v31; // 0x40b07e\n    int64_t v36 = v15; // 0x40b07e\n    int64_t v37; // 0x40afa0\n    int64_t v38; // 0x40afa0\n    int64_t v39; // 0x40afa0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40b1e8\n        int64_t v41 = v40; // 0x40b1e8\n        v2 = v41;\n        int64_t v42; // 0x40afa0\n        if (*v33 == v40) {\n            // 0x40b3d0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40b3d8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40b1f4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40b208\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40b211\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40b21a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40b231\n            int64_t v47 = v45 & 0xffffffff; // 0x40b235\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40b23e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40b244\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40b246;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40b220\n            int64_t v49 = v48 & 0xffffffff; // 0x40b220\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40b231\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40b23e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40b244\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40b246;\n                    }\n                }\n                // 0x40b220\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40b3e8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40b246;\n    } else {\n        goto lab_0x40b084;\n    }\n  lab_0x40b10c:\n    // 0x40b10c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40b10f\n    int64_t v51 = v12; // 0x40b10f\n    int64_t v52 = v14; // 0x40b10f\n    if (*(char *)v10 == 0) {\n        goto lab_0x40b068;\n    } else {\n        goto lab_0x40b115;\n    }\n  lab_0x40b084:;\n    int32_t v53 = v35; // 0x40b084\n    int64_t v54; // 0x40afa0\n    int64_t v55; // 0x40afa0\n    int64_t v56; // 0x40afa0\n    int64_t v57; // 0x40afa0\n    int64_t v58; // 0x40afa0\n    int64_t v59; // 0x40afa0\n    char * v60; // 0x40afa0\n    int64_t v61; // 0x40afa0\n    int64_t v62; // 0x40b099\n    int64_t v63; // 0x40afa0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40b1d3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40b1d6;\n    } else {\n        // 0x40b08c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40afa0\n        int64_t v66 = v65 ? -1 : 1; // 0x40b0a0\n        int64_t v67 = (int64_t)\"--\"; // 0x40afa0\n        int64_t v68 = v62; // 0x40afa0\n        int64_t v69 = 3; // 0x40b0a0\n        unsigned char v70 = *(char *)v68; // 0x40b0a0\n        char v71 = *(char *)v67; // 0x40b0a0\n        char v72 = v71; // 0x40b0a0\n        bool v73 = false; // 0x40b0a0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40b190\n            if (*(char *)v62 == 45) {\n                // 0x40b250\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40b250\n                if (c == 0) {\n                    goto lab_0x40b19a;\n                } else {\n                    // 0x40b25d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40b2e0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40b4c3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40b335;\n                        } else {\n                            // 0x40b26e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40b2e0;\n                            } else {\n                                // 0x40b273\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40b294;\n                                } else {\n                                    // 0x40b27a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40b2e0;\n                                    } else {\n                                        goto lab_0x40b294;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40b19a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40b0b0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40b0b3\n            int64_t v77 = v35 + 1; // 0x40b0b6\n            int32_t v78 = v77; // 0x40b0b9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40b420\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40b0c7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40b0d5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40b1d6;\n        }\n    }\n  lab_0x40b115:;\n    // 0x40b115\n    int64_t v79; // bp-104, 0x40afa0\n    int64_t v80 = &v79; // 0x40afaa\n    int64_t v81 = v50 + 1; // 0x40b115\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40b11c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40b121\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40b125\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40b129\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40b131\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40b136\n    int32_t c2 = v84; // 0x40b136\n    char * found_char_pos = strchr(str2, c2); // 0x40b136\n    int64_t v87 = *v82; // 0x40b13b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40b145\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40b150\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40b440\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40b40d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40b17e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40b136\n    char v91 = *(char *)(v90 + 1); // 0x40b16b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40b125\n        if (v91 != 58) {\n            // 0x40b17e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40b394\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40b498\n                *v8 = 0;\n            } else {\n                // 0x40b47c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40b3be\n            *v83 = 0;\n            // 0x40b17e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40b39e\n        if (v93 != 0) {\n            // 0x40b430\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40b3be\n            *v83 = 0;\n            // 0x40b17e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40b3b1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40b3be\n            *v83 = 0;\n            // 0x40b17e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40b4fa\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40b4aa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40b4b1\n        // 0x40b3be\n        *v83 = 0;\n        // 0x40b17e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40b309\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40b30b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40b530\n                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40b4e1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40b4e8\n            // 0x40b17e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40b316\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40b31a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40b335;\n  lab_0x40b246:\n    // 0x40b246\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40b084;\n  lab_0x40b335:;\n    int64_t v99 = function_40a980(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40b353\n    // 0x40b17e\n    return v99 & 0xffffffff;\n  lab_0x40b1d6:;\n    int32_t v100 = v55; // 0x40b1d6\n    if (v100 != (int32_t)v59) {\n        // 0x40b1da\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40b17e\n    return 0xffffffff;\n  lab_0x40b19a:\n    // 0x40b19a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40b1a1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40b17e\n    return v99 & 0xffffffff;\n  lab_0x40b2e0:\n    // 0x40b2e0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40b115;\n  lab_0x40b294:\n    // 0x40b294\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40a980(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g5); // 0x40b2ba\n    if ((int32_t)v101 != -1) {\n        // 0x40b17e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40b2cf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40b2e0;\n}\n"
        },
        {
            "funcName": "function_40b570",
            "funcStartAddr": "40b570",
            "funcEndAddr": "40b5c6",
            "decompiledFuncCode": "int64_t function_40b570(int64_t a1) {\n    // 0x40b570\n    *(int32_t *)&g67 = g42;\n    *(int32_t *)&g68 = g41;\n    int64_t v1; // 0x40b570\n    int64_t result = function_40afa0(v1, v1, v1, v1, v1, v1, &g67, a1 & 0xffffffff); // 0x40b596\n    g42 = *(int32_t *)&g67;\n    g74 = (char *)g70;\n    *(int32_t *)&g40 = g69;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b5d0",
            "funcStartAddr": "40b5d0",
            "funcEndAddr": "40b5e8",
            "decompiledFuncCode": "int64_t function_40b5d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b5d0\n    return function_40b570(1);\n}\n"
        },
        {
            "funcName": "function_40b5f0",
            "funcStartAddr": "40b5f0",
            "funcEndAddr": "40b603",
            "decompiledFuncCode": "int64_t function_40b5f0(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x40b5f0\n    return function_40b570(0);\n}\n"
        },
        {
            "funcName": "function_40b610",
            "funcStartAddr": "40b610",
            "funcEndAddr": "40b625",
            "decompiledFuncCode": "int64_t function_40b610(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b610\n    return function_40afa0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b630",
            "funcStartAddr": "40b630",
            "funcEndAddr": "40b646",
            "decompiledFuncCode": "int64_t function_40b630(void) {\n    // 0x40b630\n    return function_40b570(0);\n}\n"
        },
        {
            "funcName": "function_40b650",
            "funcStartAddr": "40b650",
            "funcEndAddr": "40b668",
            "decompiledFuncCode": "int64_t function_40b650(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b650\n    return function_40afa0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b670",
            "funcStartAddr": "40b670",
            "funcEndAddr": "40b6ea",
            "decompiledFuncCode": "int64_t function_40b670(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40b67b\n    int64_t v2 = (int64_t)&g25; // 0x40b67b\n    int32_t * pwc; // 0x40b670\n    int64_t v3; // 0x40b670\n    int64_t n; // 0x40b670\n    if (a2 == 0) {\n        goto lab_0x40b6c2;\n    } else {\n        // 0x40b67d\n        if (a3 == 0) {\n            // 0x40b6a8\n            return -2;\n        }\n        // 0x40b689\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40b6c2;\n        } else {\n            goto lab_0x40b694;\n        }\n    }\n  lab_0x40b6c2:\n    // 0x40b6c2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40b670\n    pwc = (int32_t *)&v4;\n    goto lab_0x40b694;\n  lab_0x40b694:;\n    char * wstr = (char *)v3; // 0x40b69a\n    int64_t ps; // 0x40b670\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40b69a\n    int64_t result = v5; // 0x40b69a\n    if (v5 < 0xfffffffe) {\n        // 0x40b6a8\n        return result;\n    }\n    int64_t result2 = result; // 0x40b6d9\n    if ((char)function_40c490(0, v3) == 0) {\n        // 0x40b6db\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40b6a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b6f0",
            "funcStartAddr": "40b6f0",
            "funcEndAddr": "40b807",
            "decompiledFuncCode": "int64_t function_40b6f0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x40b71e\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x40b73a\n    int32_t v3 = v1; // 0x40b743\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x40b754\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x40b764\n    int32_t v6 = v2 / 25; // 0x40b778\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x40b789\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_40b810",
            "funcStartAddr": "40b810",
            "funcEndAddr": "40b8a1",
            "decompiledFuncCode": "int64_t function_40b810(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x40b81e\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x40b823\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x40b829\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x40b82f\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x40b835\n        int64_t v6 = function_40b6f0(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x40b839\n        int64_t result = v6 + a6; // 0x40b842\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x40b847\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x40b86d\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x40b871\n        return result2;\n    }\n    // 0x40b880\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x40b847\n        return -0x8000000000000000;\n    }\n    // 0x40b88f\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_40b8b0",
            "funcStartAddr": "40b8b0",
            "funcEndAddr": "40b96f",
            "decompiledFuncCode": "int64_t function_40b8b0(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x40b8dd\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x40b91b\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x40b8dd\n        return result;\n    }\n    int64_t v2 = v1; // 0x40b921\n    while (v2 != 0) {\n        // 0x40b928\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x40b8dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b970",
            "funcStartAddr": "40b970",
            "funcEndAddr": "40bdaa",
            "decompiledFuncCode": "int64_t function_40b970(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x40b98b\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x40b993\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x40b9a4\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x40b9a7\n    int32_t v5 = v4 / 12; // 0x40b9c5\n    int32_t v6 = -12 * v5 + v4; // 0x40b9cf\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40b9da\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x40b9e1\n    int64_t v9 = 0; // 0x40b9e7\n    if (v8 % 4 == 0) {\n        // 0x40b9e9\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x40bc50\n            v9 = v8 < 0;\n        }\n    }\n    // 0x40ba25\n    int64_t v10; // 0x40b970\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g26); // 0x40ba57\n    int32_t v14 = v11 - 59; // 0x40ba70\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x40ba73\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x40ba87\n    int64_t v17 = function_40b6f0(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x40bab0\n    int64_t v18; // bp-280, 0x40b970\n    int64_t v19 = &v18; // 0x40bab5\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x40bb03\n    int64_t v22 = v19 + 80; // 0x40bb08\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x40bad3\n    int64_t v34 = v17; // 0x40bad3\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_40b8b0(*v20, v22, v21); // 0x40bb0d\n    int64_t v38 = *v23; // 0x40bb12\n    *v24 = v37;\n    int64_t v39 = function_40b810(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g81); // 0x40bb34\n    while (v38 != v39) {\n        // 0x40bb44\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x40bb4e\n            if (v40 < 0) {\n                goto lab_0x40bb77_3;\n            }\n            int32_t v41 = *v32; // 0x40bb5b\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x40bb77_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x40bb77_3;\n                }\n            }\n        }\n        // 0x40bad8\n        v33--;\n        if (v33 == 0) {\n            // 0x40bc37\n            return -1;\n        }\n        // 0x40bae1\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_40b8b0(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_40b810(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g81);\n    }\n    int32_t v42 = *v32; // 0x40bc80\n    int32_t v43 = *v30; // 0x40bc84\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x40bc8b\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x40bca4\n    int64_t v46 = v44; // 0x40bca4\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x40bcc0\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x40bcfb\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x40bcc5\n        int64_t v52 = 0x92c70; // 0x40bcc5\n        while (true) {\n            int64_t v53 = -v52; // 0x40bcf2\n            int64_t v54 = v53 & 0xffffffff; // 0x40bcf2\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x40bcf5\n            int64_t v56 = v55 + v51; // 0x40bcf8\n            *v49 = v56;\n            int64_t v57 = v51; // 0x40bd00\n            int32_t v58 = 2; // 0x40bd00\n            int64_t v59 = v54; // 0x40bd00\n            int32_t v60 = 2; // 0x40bd00\n            int64_t v61 = v54; // 0x40bd00\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x40bd1e:\n                // 0x40bd1e\n                function_40b8b0(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x40bd35\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x40bd4a\n                    break;\n                }\n                // 0x40bda0\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x40bce7\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x40b970\n            int64_t v66 = v59; // 0x40bd02\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x40bd02\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x40bd0b\n                int64_t v69 = v68 + v64; // 0x40bd14\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x40bd1e;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x40bcd0\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x40bb80;\n            }\n        }\n        // 0x40bd4a\n        *v24 = v50;\n        *v23 = function_40b810(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g81);\n        function_40b8b0(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x40bb80;\n  lab_0x40bb77_3:\n    // 0x40bb77\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x40bb80;\n  lab_0x40bb80:;\n    int64_t v71 = *(int64_t *)(v19 + 56); // 0x40bb88\n    int32_t v72 = *(int32_t *)v21; // 0x40bb90\n    int32_t v73 = *(int32_t *)(v19 + 64); // 0x40bb94\n    int64_t v74 = *(int64_t *)(v19 + 48); // 0x40bb9b\n    *(int64_t *)v74 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v71;\n    int64_t result = v45; // 0x40bba5\n    if (v72 != v73) {\n        int32_t v75 = *v25; // 0x40bba9\n        int64_t v76 = (int64_t)(v72 == 60 == v73 < 1) - (int64_t)v75 + (int64_t)v73; // 0x40bbc5\n        int64_t v77 = v76 + v45; // 0x40bbc8\n        *v23 = v77;\n        if (((v77 ^ v45) & (v77 ^ v76)) < 0) {\n            // 0x40bc37\n            return -1;\n        }\n        // 0x40bbd2\n        *(int64_t *)(v19 + 160) = v77;\n        if (*v20 == 0) {\n            // 0x40bc37\n            return -1;\n        }\n        // 0x40bbf3\n        result = *v23;\n    }\n    int128_t v78 = __asm_movdqa(*(int128_t *)v21); // 0x40bbf8\n    int128_t v79 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x40bbfe\n    int128_t v80 = __asm_movdqa(*(int128_t *)v29); // 0x40bc04\n    __asm_movups(*(int128_t *)v46, v78);\n    __asm_movups(*(int128_t *)(v46 + 16), v79);\n    __asm_movups(*(int128_t *)(v46 + 32), v80);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x40bc37\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bdb0",
            "funcStartAddr": "40bdb0",
            "funcEndAddr": "40bdcc",
            "decompiledFuncCode": "int64_t function_40bdb0(int32_t * a1) {\n    // 0x40bdb0\n    tzset();\n    return function_40b970((int64_t)a1, 0x4019d0, &g71);\n}\n"
        },
        {
            "funcName": "function_40bdd0",
            "funcStartAddr": "40bdd0",
            "funcEndAddr": "40be15",
            "decompiledFuncCode": "int64_t function_40bdd0(int64_t a1) {\n    // 0x40bdd0\n    int32_t v1; // 0x40bdd0\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x40be00\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x40bdda\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x40bde8\n    if (v1 == 0) {\n        // 0x40bdea\n        tzset();\n        result = 1;\n    }\n    // 0x40bdf4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40be20",
            "funcStartAddr": "40be20",
            "funcEndAddr": "40be49",
            "decompiledFuncCode": "int64_t function_40be20(int64_t a1) {\n    // 0x40be20\n    if (a1 == 0) {\n        // 0x40be40\n        int64_t result; // 0x40be20\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x40be30\n    int64_t v2 = *v1; // 0x40be30\n    free(v1);\n    while (v2 != 0) {\n        // 0x40be30\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x40be40\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_40be50",
            "funcStartAddr": "40be50",
            "funcEndAddr": "40be91",
            "decompiledFuncCode": "int64_t function_40be50(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40be5d\n    int64_t v2 = function_40bdd0(a1); // 0x40be6b\n    int32_t v3 = *v1; // 0x40be74\n    if ((char)v2 == 0) {\n        // 0x40be76\n        v3 = *v1;\n    }\n    // 0x40be79\n    function_40be20(a1);\n    *v1 = v3;\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40bea0",
            "funcStartAddr": "40bea0",
            "funcEndAddr": "40bf2f",
            "decompiledFuncCode": "int64_t function_40bea0(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x40bea0\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x40bf0d\n        int64_t result = (int64_t)mem; // 0x40bf0d\n        result2 = result;\n        if (mem != NULL) {\n            // 0x40bf1a\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x40beac\n        uint64_t v1 = (int64_t)len + 1; // 0x40beb6\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x40beca\n        int64_t v2 = (int64_t)mem2; // 0x40beca\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x40bed7\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x40bee3\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x40befb\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bf30",
            "funcStartAddr": "40bf30",
            "funcEndAddr": "40c0a5",
            "decompiledFuncCode": "int64_t function_40bf30(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x40bf3e\n    uint64_t v2 = *v1; // 0x40bf3e\n    if (v2 == 0) {\n        // 0x40bfe1\n        return 1;\n    }\n    int64_t v3; // 0x40bf30\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x40bf56\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x40bfe1\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x40bf64\n    if (*str2 == 0) {\n        // 0x40bfd8\n        *v1 = (int64_t)&g25;\n        // 0x40bfe1\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x40bf69\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x40bfd8\n        *v1 = str;\n        // 0x40bfe1\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x40bf87\n    int64_t v7; // 0x40bf30\n    int64_t v8; // 0x40bf30\n    int64_t v9; // 0x40bf30\n    int64_t v10; // 0x40bf8c\n    if (*str3 == 0) {\n        // 0x40bf8c\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x40c018\n            goto lab_0x40c018;\n        }\n        // 0x40bf99\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x40c048\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x40c056;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x40bfab\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x40bf30\n    int64_t v13; // 0x40bfb5\n    int64_t str4; // 0x40bfbe\n    int32_t strcmp_rc; // 0x40bfcb\n    while (*str5 == 0) {\n        // 0x40bfb5\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x40bf78\n            break;\n        }\n        // 0x40bfbe\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x40bfd8\n            *v1 = v12;\n            // 0x40bfe1\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40bf8c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40c018\n                goto lab_0x40c018;\n            }\n            // 0x40bf99\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40c048\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40c056;\n            }\n        }\n        // 0x40bfa3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x40bfd8\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x40bf87\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40bf8c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40c018\n                goto lab_0x40c018;\n            }\n            // 0x40bf99\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40c048\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40c056;\n            }\n        }\n        // 0x40bfa3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x40bfb5\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x40bf78\n                break;\n            }\n            // 0x40bfbe\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x40bfd8\n                *v1 = v12;\n                // 0x40bfe1\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x40bf8c\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x40c018\n                    goto lab_0x40c018;\n                }\n                // 0x40bf99\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x40c048\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x40c056;\n                }\n            }\n            // 0x40bfa3\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x40bfd8\n        *v1 = v11;\n    }\n    // 0x40bfe1\n    return 1;\n  lab_0x40c018:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x40c020\n    int64_t v15 = v6 - v10; // 0x40c027\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x40c035\n        *__errno_location() = 12;\n        // 0x40bfe1\n        return 0;\n    }\n    goto lab_0x40c056;\n  lab_0x40c056:\n    // 0x40c056\n    if (v7 + v8 < 119) {\n        // 0x40c05f\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x40bfd8\n        *v1 = v6;\n        // 0x40bfe1\n        return 1;\n    }\n    int64_t v17 = function_40bea0(v2, v2, v9); // 0x40c083\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x40bfe1\n        return 0;\n    }\n    // 0x40c091\n    *(char *)(v17 + 8) = 0;\n    // 0x40bfd8\n    *v1 = v17 + 9;\n    // 0x40bfe1\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40c0b0",
            "funcStartAddr": "40c0b0",
            "funcEndAddr": "40c15f",
            "decompiledFuncCode": "int64_t function_40c0b0(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x40c0bc\n    int64_t v1 = (int64_t)env_val; // 0x40c0bc\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x40c0b0\n    if (env_val == NULL) {\n        // 0x40c120\n        if (v2 == 0) {\n            // 0x40c0ed\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x40c0f8\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x40c0ed\n                return 1;\n            }\n        }\n    }\n    // 0x40c0d1\n    int64_t v4; // 0x40c0b0\n    int64_t result = function_40bea0(v1, v3, v4); // 0x40c0d4\n    if (result == 0) {\n        // 0x40c0ed\n        return 0;\n    }\n    // 0x40c0e1\n    if ((char)function_40bdd0(a1) != 0) {\n        // 0x40c0ed\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x40c138\n    if (result != 1) {\n        // 0x40c149\n        function_40be20(result);\n    }\n    // 0x40c151\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c160",
            "funcStartAddr": "40c160",
            "funcEndAddr": "40c171",
            "decompiledFuncCode": "int64_t function_40c160(int64_t a1) {\n    // 0x40c160\n    if (a1 == 1) {\n        // 0x40c170\n        int64_t result; // 0x40c160\n        return result;\n    }\n    // 0x40c166\n    return function_40be20(a1);\n}\n"
        },
        {
            "funcName": "function_40c180",
            "funcStartAddr": "40c180",
            "funcEndAddr": "40c225",
            "decompiledFuncCode": "int64_t function_40c180(int64_t a1, int64_t * timep, int64_t * time2) {\n    if (a1 == 0) {\n        // 0x40c210\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time2);\n    }\n    int64_t v1 = function_40c0b0(a1); // 0x40c198\n    if (v1 == 0) {\n        // 0x40c1ca\n        return 0;\n    }\n    // 0x40c1a5\n    if (localtime_r((int32_t *)timep, (struct tm *)time2) != NULL) {\n        int64_t result = (int64_t)time2;\n        if ((char)function_40bf30(a1, result) != 0) {\n            // 0x40c1c4\n            if (v1 == 1 || (char)function_40be50(v1) != 0) {\n                // 0x40c1ca\n                return result;\n            }\n            // 0x40c1ca\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x40c1e6\n        function_40be50(v1);\n    }\n    // 0x40c1ca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c230",
            "funcStartAddr": "40c230",
            "funcEndAddr": "40c34c",
            "decompiledFuncCode": "int64_t function_40c230(int64_t a1, int64_t * a2, int32_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int32_t v2; // 0x40c230\n    int32_t v3 = v2;\n    if (a1 == 0) {\n        // 0x40c328\n        return function_40c350(v1);\n    }\n    int64_t v4 = function_40c0b0(a1); // 0x40c247\n    if (v4 == 0) {\n        // 0x40c29e\n        return -1;\n    }\n    int64_t v5 = function_40bdb0((int32_t *)a2); // 0x40c25b\n    int64_t timep = v5; // bp-96, 0x40c260\n    if (v5 == -1) {\n        // 0x40c2b0\n        int32_t time2; // bp-88, 0x40c230\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time2) == NULL) {\n            goto lab_0x40c283;\n        } else {\n            int32_t v6 = *(int32_t *)(v1 + 32); // 0x40c2c4\n            if (v3 >= 0 == v6 > -1 == (v6 == 0 != (v3 == 0))) {\n                goto lab_0x40c283;\n            } else {\n                int32_t v7 = *(int32_t *)(v1 + 16); // 0x40c2e3\n                int32_t v8 = *(int32_t *)(v1 + 20); // 0x40c2e6\n                int32_t v9 = *(int32_t *)(v1 + 12); // 0x40c2f3\n                int32_t v10 = *(int32_t *)(v1 + 8); // 0x40c2fc\n                int32_t v11 = *(int32_t *)(v1 + 4); // 0x40c305\n                if ((v8 ^ v2 | v7 ^ v2 | v9 ^ v2 | v10 ^ v2 || v11 ^ v2 || time2 ^ (int32_t)(int64_t)&time2) == 0) {\n                    goto lab_0x40c26b;\n                } else {\n                    goto lab_0x40c283;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40c26b;\n    }\n  lab_0x40c26b:\n    // 0x40c26b\n    if ((char)function_40bf30(a1, v1) == 0) {\n        // 0x40c27a\n        timep = -1;\n    }\n    goto lab_0x40c283;\n  lab_0x40c283:\n    if (v4 != 1) {\n        // 0x40c289\n        if ((char)function_40be50(v4) == 0) {\n            // 0x40c29e\n            return -1;\n        }\n    }\n    // 0x40c29e\n    return timep;\n}\n"
        },
        {
            "funcName": "function_40c350",
            "funcStartAddr": "40c350",
            "funcEndAddr": "40c366",
            "decompiledFuncCode": "int64_t function_40c350(int64_t a1) {\n    // 0x40c350\n    *(int32_t *)(a1 + 32) = 0;\n    return function_40b970(a1, 0x401af0, &g72);\n}\n"
        },
        {
            "funcName": "function_40c370",
            "funcStartAddr": "40c370",
            "funcEndAddr": "40c42d",
            "decompiledFuncCode": "int64_t function_40c370(int64_t stream, int64_t a2, int64_t * a3) {\n    int32_t v1 = 2000; // bp-2048, 0x40c390\n    int64_t v2; // bp-2040, 0x40c370\n    int64_t v3; // 0x40c370\n    int64_t v4 = function_40e420(&v2, (int64_t *)&v1, a2, (int64_t)a3, v3, v3, 2000, (int64_t)&g81); // 0x40c39c\n    if (v4 == 0) {\n        // 0x40c41e\n        function_40e410(stream);\n        // 0x40c3dc\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x40c3a1\n    int64_t * data = (int64_t *)v4; // 0x40c3bc\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x40c3f0\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x40c3fa\n            free(data);\n        }\n        // 0x40c3dc\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x40c3cb\n        free(data);\n    }\n    // 0x40c3d3\n    if (nmemb > -1) {\n        // 0x40c3dc\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x40c413\n    *__errno_location() = 75;\n    // 0x40c41e\n    function_40e410(stream);\n    // 0x40c3dc\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c430",
            "funcStartAddr": "40c430",
            "funcEndAddr": "40c48d",
            "decompiledFuncCode": "int64_t function_40c430(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40c437\n    int64_t v2; // 0x40c430\n    int64_t result = function_40e2f0(a1, v2); // 0x40c448\n    if ((v2 & 32) != 0) {\n        // 0x40c470\n        if ((int32_t)result == 0) {\n            // 0x40c474\n            *__errno_location() = 0;\n        }\n        // 0x40c46a\n        return 0xffffffff;\n    }\n    // 0x40c451\n    if ((int32_t)result == 0) {\n        // 0x40c46a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40c458\n    if (v1 == 0) {\n        // 0x40c45a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40c46a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c490",
            "funcStartAddr": "40c490",
            "funcEndAddr": "40c4ee",
            "decompiledFuncCode": "int64_t function_40c490(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40c496\n    if (locale == NULL) {\n        // 0x40c4c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40c496\n    bool v2; // 0x40c490\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g8; // 0x40c490\n    int64_t v5 = v1; // 0x40c490\n    int64_t v6 = 2; // 0x40c4b5\n    unsigned char v7 = *(char *)v5; // 0x40c4b5\n    char v8 = *(char *)v4; // 0x40c4b5\n    char v9 = v8; // 0x40c4b5\n    bool v10 = false; // 0x40c4b5\n    while (v7 == v8) {\n        // 0x40c4a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40c4c1\n    int64_t v13 = v1; // 0x40c4c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40c4c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40c4c1\n    unsigned char v15 = *(char *)v13; // 0x40c4dd\n    char v16 = *(char *)v12; // 0x40c4dd\n    char v17 = v16; // 0x40c4dd\n    bool v18 = false; // 0x40c4dd\n    while (v15 == v16) {\n        // 0x40c4d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40c4f0",
            "funcStartAddr": "40c4f0",
            "funcEndAddr": "40ca52",
            "decompiledFuncCode": "int64_t function_40c4f0(void) {\n    char * v1 = nl_langinfo(14); // 0x40c506\n    char * v2 = g73; // 0x40c50b\n    char * v3; // 0x40c4f0\n    int64_t v4; // 0x40c4f0\n    int64_t v5; // 0x40c4f0\n    int64_t v6; // 0x40c4f0\n    int64_t v7; // 0x40c4f0\n    int32_t size; // 0x40c4f0\n    int32_t size2; // 0x40c4f0\n    int32_t len; // 0x40c5c2\n    int64_t v8; // 0x40c5c2\n    char * env_val; // 0x40c5ad\n    if (v2 == NULL) {\n        // 0x40c5a8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40c615;\n        } else {\n            // 0x40c5ba\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40c615;\n            } else {\n                // 0x40c5bf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40c5ad\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40ca45\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40c615;\n                    } else {\n                        // 0x40c9b9\n                        size2 = len + 14;\n                        goto lab_0x40c5db;\n                    }\n                } else {\n                    goto lab_0x40c5db;\n                }\n            }\n        }\n    } else {\n        // 0x40c4f0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40c52a;\n    }\n  lab_0x40c85c:;\n    // 0x40c85c\n    struct _IO_FILE * stream; // 0x40c69b\n    int32_t v10 = __uflow(stream); // 0x40c85f\n    int64_t v11; // 0x40c4f0\n    int64_t v12 = v11; // 0x40c869\n    int64_t v13; // 0x40c4f0\n    int64_t v14 = v13; // 0x40c869\n    int32_t v15 = v10; // 0x40c869\n    int64_t v16; // 0x40c4f0\n    int64_t v17 = v16; // 0x40c869\n    int64_t v18 = v11; // 0x40c869\n    int64_t v19 = v13; // 0x40c869\n    int64_t v20 = v16; // 0x40c869\n    if (v10 == -1) {\n        // break -> 0x40c86f\n        goto lab_0x40c86f;\n    }\n    goto lab_0x40c6e9;\n  lab_0x40c6de:;\n    // 0x40c6de\n    int64_t v90; // 0x40c4f0\n    int64_t * v32; // 0x40c6d0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40c4f0\n    v12 = v89;\n    int64_t v91; // 0x40c4f0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40c4f0\n    v17 = v92;\n    goto lab_0x40c6e9;\n  lab_0x40c6e9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40c4f0\n    int32_t v25; // bp-120, 0x40c4f0\n    int32_t v26; // bp-184, 0x40c4f0\n    int64_t v27; // 0x40c69b\n    int64_t v28; // 0x40c6b8\n    int64_t v29; // 0x40c6bd\n    int64_t * v30; // 0x40c6d4\n    switch (c) {\n        case 32: {\n            goto lab_0x40c6d0;\n        }\n        case 10: {\n            goto lab_0x40c6d0;\n        }\n        case 9: {\n            goto lab_0x40c6d0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40c8c1\n            int32_t v33; // 0x40c4f0\n            char v34; // 0x40c4f0\n            int32_t v35; // 0x40c8ce\n            if (v31 < *v30) {\n                // 0x40c8a0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40c8cb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40c8c1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40c8a0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40c8cb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40c8b0\n                v36 = v33;\n            }\n            // 0x40c99f\n            if (v36 == -1) {\n                // break -> 0x40c86f\n                break;\n            }\n            goto lab_0x40c6d0;\n        }\n        default: {\n            // 0x40c6ff\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40c86f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40c728\n            int64_t v39 = v37 + 4; // 0x40c72a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40c736\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40c738\n            while (v41 == 0) {\n                // 0x40c728\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40c756\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40c762\n            int64_t v45 = v43 + 4; // 0x40c764\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40c770\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40c772\n            while (v47 == 0) {\n                // 0x40c762\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40c75f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40c788\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40c798\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40c79c\n            int64_t v52 = v51 + v48; // 0x40c7a5\n            int64_t * mem; // 0x40c4f0\n            int64_t v53; // 0x40c4f0\n            int64_t v54; // 0x40c4f0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40c8db\n                int64_t v56 = v55 + 3; // 0x40c8e7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40c7c1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40c7d0\n            if (mem == NULL) {\n                // 0x40c9fc\n                free((int64_t *)v21);\n                function_40e2f0(v27, v53);\n                v24 = (int64_t)&g25;\n                goto lab_0x40c674;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40c7e8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40c7f2\n            uint32_t v62 = (int32_t)v59; // 0x40c7f5\n            int64_t v63; // 0x40c4f0\n            if (v62 >= 8) {\n                // 0x40c904\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40c91e\n                int64_t v66 = v61 - v65; // 0x40c922\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40c92d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40c93e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40c93e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40c93b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40c9cf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40c807\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40c80b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40c81b\n            int64_t v74 = v60 - 1; // 0x40c81f\n            uint32_t v75 = (int32_t)v73; // 0x40c824\n            int64_t v76; // 0x40c4f0\n            if (v75 >= 8) {\n                // 0x40c952\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40c95c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40c96c\n                int64_t v80 = v74 - v79; // 0x40c970\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40c97b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40c98b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40c989\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40c9e6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40c9ee\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40c836\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40c83a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40ca33\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40c84e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40c6de;\n            } else {\n                goto lab_0x40c85c;\n            }\n        }\n    }\n  lab_0x40c6d0:;\n    int64_t v93 = v23; // 0x40c4f0\n    int64_t v94 = v22; // 0x40c4f0\n    int64_t v95 = v21; // 0x40c4f0\n    goto lab_0x40c6d0_2;\n  lab_0x40c615:;\n    int64_t * mem3 = malloc(size); // 0x40c615\n    int64_t v97 = (int64_t)&g25; // 0x40c620\n    int64_t v98; // 0x40c4f0\n    int64_t path; // 0x40c4f0\n    if (mem3 == NULL) {\n        goto lab_0x40c5f2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40c615\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40c636;\n    }\n  lab_0x40c52a:;\n    int64_t str = v1 == NULL ? (int64_t)&g25 : (int64_t)v1; // 0x40c51d\n    char v100 = *v3; // 0x40c52a\n    int64_t v101; // 0x40c4f0\n    if (v100 == 0) {\n        // 0x40c584\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40c4f0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40c4f0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40c570\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40c577;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40c540\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40c54d\n        char v107 = *(char *)v106; // 0x40c552\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40c584\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40c55b\n    v104 = v103 + 1;\n  lab_0x40c577:\n    // 0x40c584\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40c5f2:;\n    char * v108 = (char *)v97;\n    g73 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40c52a;\n  lab_0x40c636:;\n    int64_t v109 = v98 + path; // 0x40c636\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40c662\n    v24 = (int64_t)&g25;\n    if (fd >= 0) {\n        // 0x40c691\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40c9c2\n            close(fd);\n            v24 = (int64_t)&g25;\n        } else {\n            // 0x40c6b5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40c6d0_2:;\n                uint64_t v96 = *v32; // 0x40c6d0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40c85c;\n                } else {\n                    goto lab_0x40c6de;\n                }\n            }\n          lab_0x40c86f:\n            // 0x40c86f\n            function_40e2f0(v27, v19);\n            v24 = (int64_t)&g25;\n            if (v18 != 0) {\n                // 0x40c88e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40c674;\n  lab_0x40c5db:;\n    int64_t * mem4 = malloc(size2); // 0x40c5db\n    v97 = (int64_t)&g25;\n    if (mem4 != NULL) {\n        // 0x40c681\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40c636;\n    } else {\n        goto lab_0x40c5f2;\n    }\n  lab_0x40c674:\n    // 0x40c674\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40c5f2;\n}\n"
        },
        {
            "funcName": "function_40ca60",
            "funcStartAddr": "40ca60",
            "funcEndAddr": "40caa1",
            "decompiledFuncCode": "int64_t function_40ca60(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40ca99\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x40ca73\n    int64_t v2 = a3; // 0x40ca78\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40ca80\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40ca88\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40ca80\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40ca99\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cab0",
            "funcStartAddr": "40cab0",
            "funcEndAddr": "40caf1",
            "decompiledFuncCode": "int64_t function_40cab0(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40cae9\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x40cac3\n    int64_t v2 = a3; // 0x40cac8\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40cad0\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40cad8\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40cad0\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40cae9\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cb00",
            "funcStartAddr": "40cb00",
            "funcEndAddr": "40e2c5",
            "decompiledFuncCode": "int64_t function_40cb00(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3;\n    int64_t v2 = a1;\n    int64_t v3 = a2; // bp-1224, 0x40cb24\n    char v4 = *(char *)&v1; // 0x40cb4c\n    v3 = a2;\n    int64_t result = 0; // 0x40cb54\n    int64_t v5 = v2; // 0x40cb54\n    char v6; // 0x40cb00\n    char v7; // 0x40cb00\n    char v8; // 0x40cb00\n    char v9; // 0x40cb00\n    char v10; // 0x40cb00\n    char v11; // 0x40cb00\n    char v12; // 0x40cb00\n    char v13; // 0x40cb00\n    char v14; // 0x40cb00\n    char v15; // 0x40cb00\n    int64_t v16; // 0x40cb00\n    int64_t v17; // 0x40cb00\n    int64_t v18; // 0x40cb00\n    int64_t v19; // 0x40cb00\n    int64_t v20; // 0x40cb00\n    int64_t v21; // 0x40cb00\n    int64_t v22; // 0x40cb00\n    int64_t v23; // 0x40cb00\n    int64_t v24; // 0x40cb00\n    int64_t v25; // 0x40cb00\n    int64_t v26; // 0x40cb00\n    int64_t v27; // 0x40cb00\n    int64_t v28; // 0x40cb00\n    int64_t v29; // 0x40cb00\n    char v30; // 0x40cb00\n    int64_t v31; // 0x40cb00\n    int64_t v32; // 0x40cb00\n    int64_t v33; // 0x40cb00\n    int64_t v34; // 0x40cb00\n    int64_t v35; // 0x40cb00\n    int64_t v36; // 0x40cb00\n    int64_t v37; // 0x40cb00\n    int64_t v38; // 0x40cb00\n    char * v39; // 0x40cb00\n    int64_t v40; // 0x40cb00\n    char * v41; // 0x40cb00\n    int64_t v42; // 0x40cb00\n    int64_t * str; // 0x40cb00\n    char * v43; // 0x40cb00\n    int64_t * v44; // 0x40cb00\n    int64_t format; // 0x40cb00\n    int16_t * v45; // 0x40cb00\n    int64_t * v46; // 0x40cb00\n    int32_t * v47; // 0x40cb00\n    int64_t v48; // 0x40cb15\n    int32_t * v49; // 0x40cb00\n    int64_t * v50; // 0x40cb00\n    int64_t * v51; // 0x40cb00\n    int64_t * v52; // 0x40cb00\n    int64_t * v53; // 0x40cb00\n    int64_t * v54; // 0x40cb00\n    int64_t * v55; // 0x40cb00\n    int32_t * v56; // 0x40cb00\n    int64_t v57; // 0x40cb00\n    char * v58; // 0x40cb00\n    int64_t * v59; // 0x40cb00\n    int32_t * v60; // 0x40cb00\n    int64_t * v61; // 0x40cb00\n    int64_t * v62; // 0x40cb00\n    int64_t * tm; // 0x40cb00\n    int64_t v63; // 0x40cb00\n    int32_t * v64; // 0x40cb00\n    int64_t * v65; // 0x40cb00\n    int64_t str2; // 0x40cb00\n    if (v4 != 0) {\n        // 0x40cb6a\n        v48 = &v3;\n        tm = (int64_t *)(v48 + 8);\n        v63 = v48 + 48;\n        v64 = (int32_t *)v63;\n        v65 = (int64_t *)(v48 + 1232);\n        str2 = v48 + 144;\n        int64_t v66 = v48 + 64;\n        v39 = (char *)v66;\n        v40 = v48 + 135;\n        v41 = (char *)v63;\n        v42 = v48 + 44;\n        str = (int64_t *)(v48 + 32);\n        int64_t v67 = v48 + 72;\n        v43 = (char *)v67;\n        v44 = (int64_t *)v63;\n        format = v48 + 112;\n        v45 = (int16_t *)format;\n        v46 = (int64_t *)(v48 + 16);\n        v47 = (int32_t *)(v48 + 1240);\n        v49 = (int32_t *)v66;\n        v50 = (int64_t *)(v48 - 8);\n        v51 = (int64_t *)(v48 - 16);\n        v52 = (int64_t *)(v48 + 24);\n        v53 = (int64_t *)v66;\n        int64_t v68 = v48 + 80;\n        v54 = (int64_t *)v68;\n        v55 = (int64_t *)v67;\n        v56 = (int32_t *)v67;\n        v57 = v48 + 145;\n        int64_t v69 = v48 + 88;\n        v58 = (char *)v69;\n        v59 = (int64_t *)v69;\n        v60 = (int32_t *)v68;\n        v61 = (int64_t *)(v48 + 104);\n        v62 = (int64_t *)(v48 + 96);\n        v30 = v4;\n        v33 = a3;\n        v19 = 0;\n        v22 = v2;\n        while (true) {\n          lab_0x40cb6a:\n            // 0x40cb6a\n            v23 = v22;\n            v20 = v19;\n            int64_t v70 = v33;\n            char v71 = v30;\n            char v72 = v7;\n            char v73 = v6;\n            if (v71 == 37) {\n                char v74 = v73; // 0x40cbf4\n                char v75 = v72; // 0x40cbf4\n                int64_t v76 = v70; // 0x40cbf4\n                int64_t v77 = 0; // 0x40cbf4\n                int64_t v78 = (int64_t)*(char *)(v48 + 43); // 0x40cbf4\n                int64_t v79 = 0; // 0x40cbf4\n                int64_t v80; // 0x40cb00\n                while (true) {\n                  lab_0x40cbf8_2:\n                    // 0x40cbf8\n                    v16 = v78;\n                    v10 = v74;\n                    v11 = v75;\n                    v34 = v76;\n                    v26 = v77;\n                    v17 = v79;\n                    while (true) {\n                      lab_0x40cbf8:;\n                        int64_t v81 = v26;\n                        char v82 = v11;\n                        char v83 = v10;\n                        int64_t v84 = v34 + 1; // 0x40cbf8\n                        char v85 = *(char *)v84; // 0x40cbfc\n                        v14 = v83;\n                        v15 = v82;\n                        v31 = 48;\n                        v36 = v84;\n                        v28 = v81;\n                        if (v85 == 48) {\n                            goto lab_0x40cc28;\n                        } else {\n                            // 0x40cc08\n                            v18 = v17;\n                            v27 = v81;\n                            v35 = v84;\n                            v80 = v85;\n                            v13 = v82;\n                            v12 = v83;\n                            while (v12 <= v13) {\n                                if (v80 != 35) {\n                                    // 0x40cc30\n                                    v14 = v12;\n                                    v15 = v13;\n                                    v31 = v80;\n                                    v36 = v35;\n                                    v28 = v27;\n                                    if ((char)v80 == 45) {\n                                        goto lab_0x40cc28;\n                                    } else {\n                                        int64_t v86 = v80 & 0xffffffff;\n                                        v38 = v86;\n                                        v37 = v35;\n                                        v32 = 0xffffffff;\n                                        v29 = v86;\n                                        if ((int32_t)v80 < 58) {\n                                            goto lab_0x40cc91;\n                                        } else {\n                                            goto lab_0x40cc48_2;\n                                        }\n                                    }\n                                }\n                                int64_t v87 = v35 + 1; // 0x40cc0e\n                                char v88 = *(char *)v87; // 0x40cc12\n                                int64_t v89 = v88; // 0x40cc12\n                                v14 = v88;\n                                v15 = 48;\n                                v31 = v89;\n                                v36 = v87;\n                                v28 = 1;\n                                if (v88 == 48) {\n                                    goto lab_0x40cc28;\n                                }\n                                v27 = 1;\n                                v35 = v87;\n                                v80 = v89;\n                                v13 = 48;\n                                v12 = v88;\n                            }\n                            char v90 = v80;\n                            v74 = v12;\n                            v75 = v13;\n                            v76 = v35;\n                            v77 = v27;\n                            v78 = 1;\n                            v79 = v18;\n                            if (v90 != 94) {\n                                // 0x40cc80\n                                v14 = v12;\n                                v15 = v13;\n                                v31 = v80;\n                                v36 = v35;\n                                v28 = v27;\n                                if (v90 != 95) {\n                                    // break (via goto) -> 0x40cc84\n                                    goto lab_0x40cc84;\n                                }\n                                goto lab_0x40cc28;\n                            } else {\n                                goto lab_0x40cbf8_2;\n                            }\n                        }\n                    }\n                }\n              lab_0x40cc84:;\n                int64_t v91 = v80 & 0xffffffff;\n                v38 = v91;\n                v37 = v35;\n                v32 = 0xffffffff;\n                v29 = v91;\n                if ((int32_t)v80 < 58) {\n                    goto lab_0x40cc91;\n                } else {\n                    goto lab_0x40cc48_2;\n                }\n            } else {\n                int64_t v92 = v3 - v20; // 0x40cb72\n                v1 = v92;\n                if (v92 < 2) {\n                    // break -> 0x40cbb3\n                    break;\n                }\n                int64_t v93 = 0; // 0x40cb7e\n                if (v23 != 0) {\n                    // 0x40cb80\n                    *(char *)v23 = v71;\n                    v93 = v23 + 1;\n                }\n                // 0x40cb87\n                v8 = v73;\n                v9 = v72;\n                v25 = v70;\n                v21 = v20 + 1;\n                v24 = v93;\n                goto lab_0x40cb8e;\n            }\n        }\n      lab_0x40cbb3_11:\n        // 0x40cbb3\n        return 0;\n    }\n    goto lab_0x40cb9b_2;\n  lab_0x40cc28:\n    // 0x40cc28\n    v10 = v14;\n    v11 = v15;\n    v34 = v36;\n    v26 = v28;\n    v17 = v31 & 0xffffffff;\n    goto lab_0x40cbf8;\n  lab_0x40ccde:;\n    // 0x40ccde\n    int64_t v94; // 0x40cc9b\n    v38 = v94;\n    int64_t v95; // 0x40cc93\n    v37 = v95;\n    v32 = 0x7fffffff;\n    v29 = v94;\n    int64_t v96; // 0x40cc9d\n    if ((int32_t)v96 >= 10) {\n        // break -> 0x40cc48\n        goto lab_0x40cc48_2;\n    }\n    // 0x40cce3\n    int64_t v97; // 0x40cb00\n    int64_t v98 = v97 + 2; // 0x40cce3\n    int64_t v99 = (int64_t)*(char *)v98; // 0x40cce3\n    int64_t v100 = v99 + 0xffffffd0 & 0xffffffff; // 0x40ccf2\n    v1 = v100;\n    int64_t v101 = v100; // 0x40ccf5\n    int64_t v102 = v99; // 0x40ccf5\n    int64_t v103 = v99 & 0xffffffff; // 0x40ccf5\n    int64_t v104 = v98; // 0x40ccf5\n    int64_t v105 = 0x7fffffff; // 0x40ccf5\n    goto lab_0x40ccba;\n  lab_0x40ccba:;\n    int64_t v106 = v105;\n    int64_t v107 = v104;\n    int64_t v108 = v107; // 0x40ccbd\n    int64_t v109 = v106; // 0x40ccbd\n    if ((int32_t)v101 >= 10) {\n        // 0x40ccbf\n        v38 = v103;\n        v37 = v107;\n        v32 = v106;\n        v29 = v102 & 0xffffffff;\n        goto lab_0x40cc48_2;\n    }\n    goto lab_0x40cc93;\n  lab_0x40cc91:\n    // 0x40cc91\n    v108 = v35;\n    v109 = 0;\n    while (true) {\n      lab_0x40cc93:;\n        int64_t v110 = v109;\n        v97 = v108;\n        v95 = v97 + 1;\n        int64_t v111 = (int64_t)*(char *)v95; // 0x40cc93\n        v94 = v111 & 0xffffffff;\n        v96 = v111 + 0xffffffd0;\n        int64_t v112 = v96 & 0xffffffff; // 0x40cc9d\n        v1 = v112;\n        int32_t v113 = v110; // 0x40cca0\n        if (v113 > 0xccccccc) {\n            goto lab_0x40ccde;\n        } else {\n            char v114 = *(char *)v97; // 0x40cca8\n            if (v113 != 0xccccccc || v114 < 56) {\n                // 0x40ccad\n                v101 = v112;\n                v102 = v111;\n                v103 = v94;\n                v104 = v95;\n                v105 = 10 * v110 + 0xffffffd0 + (int64_t)v114 & 0xffffffff;\n                goto lab_0x40ccba;\n            } else {\n                goto lab_0x40ccde;\n            }\n        }\n    }\n    goto lab_0x40cc48_2;\n  lab_0x40cc48_2:;\n    int64_t v115 = v32;\n    int64_t v116 = v37;\n    int64_t v117 = v38; // 0x40cb00\n    int64_t v118 = v116; // 0x40cb00\n    int64_t v119 = 0; // 0x40cb00\n    int64_t v120; // 0x40cb00\n    switch ((char)v120) {\n        case 69: {\n        }\n        case 79: {\n            int64_t v121 = v116 + 1; // 0x40ccc8\n            v117 = (int64_t)*(char *)v121;\n            v118 = v121;\n            v119 = v29;\n            // break -> 0x40cc5e\n            break;\n        }\n    }\n    int64_t v122 = v119;\n    int64_t v123 = v118;\n    int64_t v124 = v117;\n    g76 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v124; // 0x40cc61\n    int64_t v127 = v16; // 0x40cc61\n    int64_t v128 = 0; // 0x40cc61\n    int64_t v129 = 1; // 0x40cc61\n    int64_t v130 = v123; // 0x40cc61\n    int64_t v131 = v16; // 0x40cc61\n    int64_t v132 = v123; // 0x40cc61\n    int64_t v133 = 0; // 0x40cc61\n    int64_t v134; // 0x40cb00\n    int64_t v135; // 0x40cb00\n    int64_t v136; // 0x40cb00\n    int64_t v137; // 0x40cb00\n    int64_t v138; // 0x40cb00\n    int64_t v139; // 0x40cb00\n    int64_t v140; // 0x40cb00\n    int64_t v141; // 0x40cb00\n    int64_t v142; // 0x40cb00\n    int64_t v143; // 0x40cb00\n    int64_t v144; // 0x40cb00\n    int64_t v145; // 0x40cb00\n    int64_t v146; // 0x40cb00\n    int64_t v147; // 0x40cb00\n    int64_t v148; // 0x40cb00\n    int64_t v149; // 0x40cb00\n    int64_t v150; // 0x40cb00\n    int64_t v151; // 0x40cb00\n    int64_t v152; // 0x40cb00\n    int64_t v153; // 0x40cb00\n    int64_t v154; // 0x40cb00\n    int64_t v155; // 0x40cb00\n    int64_t v156; // 0x40cb00\n    int64_t v157; // 0x40cb00\n    int64_t v158; // 0x40cb00\n    int64_t v159; // 0x40cb00\n    int64_t v160; // 0x40cb00\n    int64_t v161; // 0x40cb00\n    int64_t v162; // 0x40cb00\n    int64_t v163; // 0x40cb00\n    int64_t v164; // 0x40cb00\n    int64_t v165; // 0x40cb00\n    int64_t v166; // 0x40cb00\n    int64_t v167; // 0x40cb00\n    int64_t v168; // 0x40cb00\n    int64_t v169; // 0x40cb00\n    int64_t v170; // 0x40cb00\n    int64_t v171; // 0x40cb00\n    int64_t v172; // 0x40cb00\n    int64_t v173; // 0x40cb00\n    int64_t v174; // 0x40cb00\n    int64_t v175; // 0x40cb00\n    int64_t v176; // 0x40cb00\n    int64_t v177; // 0x40cb00\n    int64_t v178; // 0x40cb00\n    int64_t v179; // 0x40cb00\n    int64_t v180; // 0x40cb00\n    int64_t v181; // 0x40cb00\n    int64_t v182; // 0x40cb00\n    int64_t v183; // 0x40cb00\n    int64_t v184; // 0x40cb00\n    int64_t v185; // 0x40cb00\n    int32_t v186; // 0x40cb00\n    switch (v125) {\n        case 0: {\n            // 0x40dbe3\n            v177 = v123 - 1;\n            goto lab_0x40dad7;\n        }\n        case 37: {\n            int64_t v187 = v3 - v20; // 0x40db7e\n            v1 = v187;\n            int32_t v188 = v115; // 0x40db81\n            int64_t v189 = 0x100000000 * v115 >> 32;\n            int64_t v190 = v188 >= 0 ? v189 : 0; // 0x40db86\n            int64_t v191 = v190 != 0 ? v190 : 1; // 0x40db8b\n            v134 = v187;\n            v162 = v190;\n            v176 = 1;\n            v160 = v123;\n            v161 = v123;\n            v142 = v16;\n            v152 = v191;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40d983;\n            } else {\n                // 0x40db98\n                if (v191 >= v187) {\n                    // break -> 0x40cbb3\n                    break;\n                }\n                // 0x40dba1\n                v155 = v191;\n                v156 = 0;\n                if (v23 != 0) {\n                    int64_t v192 = v124; // 0x40dbad\n                    int64_t v193 = v23; // 0x40dbad\n                    if (v188 >= 2) {\n                        int64_t v194 = v189 - 1; // 0x40dbb2\n                        v1 = v194;\n                        int64_t v195 = v194 + v23; // 0x40dbb6\n                        int64_t * v196 = (int64_t *)v23;\n                        int32_t v197 = v194;\n                        if (v18 == 48) {\n                            // 0x40e246\n                            memset(v196, 48, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        } else {\n                            // 0x40dbc4\n                            memset(v196, 32, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        }\n                    }\n                    // 0x40dbd7\n                    *(char *)v193 = (char)v192;\n                    v155 = v191;\n                    v156 = v193 + 1;\n                }\n                goto lab_0x40d526;\n            }\n        }\n        case 58: {\n            int64_t v198 = v123 + 1; // 0x40dc3f\n            char v199 = *(char *)v198; // 0x40dc3f\n            v1 = v198;\n            int64_t v200 = v198; // 0x40dc4f\n            char v201 = v199; // 0x40dc4f\n            int64_t v202 = 1; // 0x40dc4f\n            if (v199 == 58) {\n                int64_t v203 = 2; // 0x40dc77\n                int64_t v204 = v203 + v123; // 0x40dc7b\n                char v205 = *(char *)v204; // 0x40dc7b\n                v1 = v204;\n                v200 = v204;\n                v201 = v205;\n                v202 = v203;\n                int64_t v206 = v203; // 0x40dc86\n                while (v205 == 58) {\n                    // 0x40dc77\n                    v203 = v206 + 1;\n                    v204 = v203 + v123;\n                    v205 = *(char *)v204;\n                    v1 = v204;\n                    v200 = v204;\n                    v201 = v205;\n                    v202 = v203;\n                    v206 = v203;\n                }\n            }\n            // 0x40dc51\n            v130 = v123;\n            v131 = v16;\n            v132 = v200;\n            v133 = v202;\n            if (v201 != 122) {\n                goto lab_0x40d948;\n            } else {\n                goto lab_0x40da20;\n            }\n        }\n        case 65: {\n            goto lab_0x40cd10;\n        }\n        case 66: {\n            goto lab_0x40cd10;\n        }\n        case 67: {\n            // 0x40d873\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d2b2;\n            } else {\n                // 0x40d87d\n                *v41 = 0;\n                int32_t v207 = *(int32_t *)(*tm + 20); // 0x40d892\n                int32_t v208 = v207 / 100; // 0x40d8a3\n                int32_t v209 = v208 + 19; // 0x40d8a7\n                int32_t v210 = v207 + 1900; // 0x40d8bb\n                v171 = v123;\n                v168 = v115;\n                v182 = v209 - (int32_t)(-100 * v208 + v207 < 0 == v209 >= 0 == (v209 != 0));\n                v178 = 0;\n                v157 = v210 < 0 != ((v210 ^ v207) & (v207 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40d29f;\n            }\n        }\n        case 68: {\n            // 0x40d007\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d010\n                *v44 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x40d019;\n            }\n        }\n        case 70: {\n            // 0x40d109\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d112\n                *v44 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x40d019;\n            }\n        }\n        case 71: {\n            goto lab_0x40d120;\n        }\n        case 72: {\n            // 0x40d3b2\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d3bc\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 8);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 73: {\n            // 0x40d3cf\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d3d9\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)v42;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 77: {\n            // 0x40d3e8\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d3f2\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 4);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 78: {\n            // 0x40d405\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                uint32_t v211 = (int32_t)v115; // 0x40d40f\n                if (v211 != -1) {\n                    int64_t v212 = (int64_t)*v47;\n                    int64_t v213 = v212; // 0x40e0a1\n                    int64_t v214 = v115; // 0x40e0a1\n                    int64_t v215 = v212; // 0x40e0a1\n                    if (v211 <= 8) {\n                        int64_t v216 = v213;\n                        int64_t v217 = (v214 & 0xffffffff) + 1; // 0x40e0c5\n                        int64_t v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31); // 0x40e0d0\n                        v214 = v217;\n                        v215 = v218;\n                        while ((int32_t)v217 != 9) {\n                            // 0x40e0c0\n                            v216 = v218;\n                            v217 = (v214 & 0xffffffff) + 1;\n                            v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31);\n                            v214 = v217;\n                            v215 = v218;\n                        }\n                    }\n                    // 0x40e0d7\n                    v167 = v115;\n                    v181 = v215;\n                    v138 = v115 & 0xffffffff;\n                    v148 = v18;\n                } else {\n                    // 0x40d418\n                    v167 = 9;\n                    v181 = (int64_t)*v47;\n                    v138 = 9;\n                    v148 = v18;\n                }\n                goto lab_0x40d290;\n            }\n        }\n        case 80: {\n            goto lab_0x40d435;\n        }\n        case 82: {\n            // 0x40d3a4\n            *v44 = (int64_t)\"%H:%M\";\n            goto lab_0x40d019;\n        }\n        case 83: {\n            // 0x40d820\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d82a\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)*tm;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 84: {\n            // 0x40dc69\n            *v44 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x40d019;\n        }\n        case 85: {\n            // 0x40d83c\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                int64_t v219 = *tm; // 0x40d846\n                v186 = *(int32_t *)(v219 + 28) + 7 - *(int32_t *)(v219 + 24);\n                goto lab_0x40d85d;\n            }\n        }\n        case 86: {\n            goto lab_0x40d120;\n        }\n        case 87: {\n            // 0x40d8ce\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                int64_t v220 = *tm; // 0x40d8d4\n                int32_t v221 = *(int32_t *)(v220 + 24); // 0x40d8de\n                int32_t v222 = v221 + 6; // 0x40d8e2\n                *v64 = v221;\n                int32_t v223 = *(int32_t *)(v220 + 28); // 0x40d905\n                v186 = 1 - v221 + v223 + 7 * ((v222 + (int32_t)(-0x6db6db6d * (int64_t)v222 / 0x100000000) >> 2) - (v222 >> 31));\n                goto lab_0x40d85d;\n            }\n        }\n        case 88: {\n            goto lab_0x40ce50;\n        }\n        case 89: {\n            // 0x40d7cd\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            v130 = v123;\n            v131 = v16;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x40d2b2;\n                }\n                case 79: {\n                    goto lab_0x40d948;\n                }\n                default: {\n                    // 0x40d7e1\n                    *v41 = 0;\n                    int32_t v224 = *(int32_t *)(*tm + 20); // 0x40d7f1\n                    int32_t v225 = v224 + 1900; // 0x40d7f4\n                    v174 = v123;\n                    v164 = v115;\n                    v185 = v225;\n                    v180 = 0;\n                    v159 = v225 < 0 != ((v225 ^ v224) & (v224 ^ -0x80000000)) < 0;\n                    v136 = 4;\n                    v145 = v18;\n                    goto lab_0x40d810;\n                }\n            }\n        }\n        case 90: {\n            char v226 = v27; // 0x40d2d4\n            *v43 = v226;\n            *v39 = v226 != 0 ? 0 : (char)v16;\n            int32_t len = strlen((char *)*str); // 0x40d2ef\n            uint64_t v227 = (int64_t)len; // 0x40d2ef\n            int64_t v228 = 0x100000000 * v115 >> 32;\n            uint64_t v229 = (int32_t)v115 >= 0 ? v228 : 0; // 0x40d305\n            int64_t v230 = v229 <= v227 ? v227 : v229; // 0x40d30d\n            int64_t v231 = v3 - v20; // 0x40d311\n            v1 = v231;\n            *v44 = v230;\n            if (v231 <= v230) {\n                // break -> 0x40cbb3\n                break;\n            }\n            int64_t v232 = v230; // 0x40d325\n            int64_t v233 = 0; // 0x40d325\n            if (v23 != 0) {\n                char v234 = *v39; // 0x40d32a\n                char v235 = *v43; // 0x40d330\n                char v236 = v235; // 0x40d336\n                char v237 = v234; // 0x40d336\n                int64_t v238 = v23; // 0x40d336\n                if (v229 > v227) {\n                    int64_t v239 = v228 - v227; // 0x40d33b\n                    v1 = v239;\n                    int64_t v240 = v239 + v23; // 0x40d33e\n                    if (v18 == 48) {\n                        // 0x40e25e\n                        memset((int64_t *)v23, 48, (int32_t)v239);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    } else {\n                        // 0x40d34c\n                        *v43 = v235;\n                        *v39 = v234;\n                        memset((int64_t *)v23, 32, (int32_t)v1);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    }\n                }\n                int64_t v241 = v238;\n                v1 = v227;\n                int64_t v242 = *str; // 0x40d375\n                if (v236 != 0) {\n                    // 0x40e19c\n                    function_40ca60(v241, v242, v227);\n                } else {\n                    // 0x40d386\n                    if (v237 == 0) {\n                        // 0x40e192\n                        memcpy((int64_t *)v241, (int64_t *)v242, len);\n                    } else {\n                        // 0x40d38f\n                        function_40cab0(v241, v242, v227);\n                    }\n                }\n                // 0x40d394\n                v232 = *v44;\n                v233 = v241 + v227;\n            }\n            // 0x40d397\n            v8 = v12;\n            v9 = v13;\n            v25 = v123;\n            v21 = v232 + v20;\n            v24 = v233;\n            goto lab_0x40cb8e;\n        }\n        case 97: {\n            goto lab_0x40cd10;\n        }\n        case 98: {\n            goto lab_0x40d931;\n        }\n        case 99: {\n            goto lab_0x40ce50;\n        }\n        case 100: {\n            // 0x40db0d\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40db17\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 12);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 101: {\n            // 0x40db2a\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40db34\n                v183 = *tm + 12;\n                goto lab_0x40d461;\n            }\n        }\n        case 103: {\n            goto lab_0x40d120;\n        }\n        case 104: {\n            goto lab_0x40d931;\n        }\n        case 106: {\n            // 0x40db41\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40db4b\n                *v41 = 0;\n                int32_t v243 = *(int32_t *)(*tm + 28); // 0x40db5b\n                int32_t v244 = v243 + 1; // 0x40db5e\n                v171 = v123;\n                v168 = v115;\n                v182 = v244;\n                v178 = 0;\n                v157 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v139 = 3;\n                v149 = v18;\n                goto lab_0x40d29f;\n            }\n        }\n        case 107: {\n            // 0x40d44f\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d459\n                v183 = *tm + 8;\n                goto lab_0x40d461;\n            }\n        }\n        case 108: {\n            // 0x40d486\n            v183 = v42;\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                goto lab_0x40d461;\n            }\n        }\n        case 109: {\n            // 0x40d496\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d4a0\n                *v41 = 0;\n                int32_t v245 = *(int32_t *)(*tm + 16); // 0x40d4b0\n                int32_t v246 = v245 + 1; // 0x40d4b3\n                v171 = v123;\n                v168 = v115;\n                v182 = v246;\n                v178 = 0;\n                v157 = v246 < 0 != (v246 & (v245 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40d29f;\n            }\n        }\n        case 110: {\n            int32_t v247 = v115; // 0x40d4c4\n            int64_t v248 = 0x100000000 * v115 >> 32;\n            int64_t v249 = v247 >= 0 ? v248 : 0; // 0x40d4d5\n            int64_t v250 = v249 == 0 ? 1 : v249; // 0x40d4db\n            if (v3 - v20 <= v250) {\n                // break -> 0x40cbb3\n                break;\n            }\n            // 0x40d4ef\n            v155 = v250;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v251 = v23; // 0x40d4f7\n                if (v247 >= 2) {\n                    int64_t v252 = v248 - 1; // 0x40d4fc\n                    v1 = v252;\n                    int64_t v253 = v252 + v23; // 0x40d500\n                    int64_t * v254 = (int64_t *)v23;\n                    int32_t v255 = v252;\n                    if (v18 == 48) {\n                        // 0x40e1eb\n                        memset(v254, 48, v255);\n                        v251 = v253;\n                    } else {\n                        // 0x40d50e\n                        memset(v254, 32, v255);\n                        v251 = v253;\n                    }\n                }\n                // 0x40d51e\n                *(char *)v251 = 10;\n                v155 = v250;\n                v156 = v251 + 1;\n            }\n            goto lab_0x40d526;\n        }\n        case 112: {\n            // 0x40dc61\n            v129 = 0;\n            goto lab_0x40d435;\n        }\n        case 113: {\n            // 0x40d531\n            v172 = v123;\n            v169 = v115;\n            v140 = 1;\n            v150 = v18;\n            if ((int32_t)v122 == 79) {\n                goto lab_0x40d2b2;\n            } else {\n                // 0x40d549\n                *v41 = 0;\n                v173 = v123;\n                v163 = v115;\n                v184 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v179 = 0;\n                v158 = 0;\n                v141 = 1;\n                v151 = v18;\n                goto lab_0x40d560;\n            }\n        }\n        case 114: {\n            goto lab_0x40ce5d;\n        }\n        case 115: {\n            int64_t v256 = *tm; // 0x40ce7d\n            *v39 = (char)v16;\n            int128_t v257 = __asm_movdqu(*(int128_t *)(v256 + 32)); // 0x40ce9f\n            int128_t v258 = __asm_movdqu(*(int128_t *)v256); // 0x40cea4\n            int128_t v259 = __asm_movdqu(*(int128_t *)(v256 + 16)); // 0x40cea8\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v258);\n            *(int128_t *)(v48 + 160) = (int128_t)__asm_movaps(v259);\n            *(int128_t *)v63 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v48 + 176) = (int128_t)__asm_movaps(v257);\n            *(int64_t *)(v48 + 192) = *(int64_t *)(v256 + 48);\n            int64_t v260 = function_40c230(*v65, (int64_t *)str2, (int32_t)v1, v124); // 0x40ced6\n            int64_t v261 = v260;\n            int64_t v262 = v261 >> 63; // 0x40cf08\n            int64_t v263 = (v261 >> 63 & -10) + v261; // 0x40cf15\n            int64_t v264 = (v260 < 0 ? -v263 : v263) + 48; // 0x40cf28\n            v1 = v264 & 0xffffffff;\n            int64_t v265 = v40 - 1; // 0x40cf2b\n            *(char *)v265 = (char)v264;\n            int64_t v266 = v265; // 0x40cf36\n            while (v262 != 0) {\n                // 0x40cef0\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & -10) + v261;\n                v264 = (v260 < 0 ? -v263 : v263) + 48;\n                v1 = v264 & 0xffffffff;\n                v265 = v266 - 1;\n                *(char *)v265 = (char)v264;\n                v266 = v265;\n            }\n            int64_t v267 = (int64_t)*v39; // 0x40cedb\n            int32_t v268 = v115; // 0x40cf38\n            int64_t v269 = v268 >= 0 == (v268 != 0) ? v115 & 0xffffffff : 1; // 0x40cf40\n            v170 = v123;\n            v166 = v115;\n            v135 = v269;\n            v144 = v267;\n            v147 = v18;\n            v154 = v265;\n            v175 = v123;\n            v165 = v115;\n            v137 = v269;\n            v143 = v267;\n            v146 = v18;\n            v153 = v265;\n            if (v260 < 0) {\n                goto lab_0x40dca8;\n            } else {\n                goto lab_0x40cf4d;\n            }\n        }\n        case 116: {\n            int32_t v270 = v115; // 0x40d724\n            int64_t v271 = 0x100000000 * v115 >> 32;\n            int64_t v272 = v270 >= 0 ? v271 : 0; // 0x40d735\n            int64_t v273 = v272 == 0 ? 1 : v272; // 0x40d73b\n            if (v3 - v20 <= v273) {\n                // break -> 0x40cbb3\n                break;\n            }\n            // 0x40d74f\n            v155 = v273;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v274 = v23; // 0x40d75b\n                if (v270 >= 2) {\n                    int64_t v275 = v271 - 1; // 0x40d760\n                    v1 = v275;\n                    int64_t v276 = v275 + v23; // 0x40d764\n                    int64_t * v277 = (int64_t *)v23;\n                    int32_t v278 = v275;\n                    if (v18 == 48) {\n                        // 0x40e200\n                        memset(v277, 48, v278);\n                        v274 = v276;\n                    } else {\n                        // 0x40d772\n                        memset(v277, 32, v278);\n                        v274 = v276;\n                    }\n                }\n                // 0x40d782\n                *(char *)v274 = 9;\n                v155 = v273;\n                v156 = v274 + 1;\n            }\n            goto lab_0x40d526;\n        }\n        case 117: {\n            int32_t v279 = *(int32_t *)(*tm + 24); // 0x40d79f\n            int32_t v280 = v279 + 6; // 0x40d7a2\n            *v64 = v279;\n            v167 = v115;\n            v181 = v279 + 7 + -7 * ((v280 + (int32_t)(-0x6db6db6d * (int64_t)v280 / 0x100000000) >> 2) - (v280 >> 31));\n            v138 = 1;\n            v148 = v18;\n            goto lab_0x40d290;\n        }\n        case 119: {\n            // 0x40d918\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d948;\n            } else {\n                // 0x40d91e\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 24);\n                v138 = 1;\n                v148 = v18;\n                goto lab_0x40d290;\n            }\n        }\n        case 120: {\n            goto lab_0x40ce50;\n        }\n        case 121: {\n            // 0x40dbf0\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40d2b2;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x40dc0a\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x40dc22\n                v167 = v115;\n                v181 = v283;\n                v138 = 2;\n                v148 = v18;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x40dc31\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x40dc37\n                    v167 = v115;\n                    v181 = v285 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n                goto lab_0x40d290;\n            }\n        }\n        case 122: {\n            goto lab_0x40da20;\n        }\n        default: {\n            goto lab_0x40d948;\n        }\n    }\n  lab_0x40cb8e:\n    // 0x40cb8e\n    v5 = v24;\n    result = v21;\n    int64_t v286 = v25 + 1; // 0x40cb8e\n    char v287 = *(char *)v286; // 0x40cb8e\n    v6 = v8;\n    v7 = v9;\n    v30 = v287;\n    v33 = v286;\n    v19 = result;\n    v22 = v5;\n    if (v287 == 0) {\n        // 0x40cb9b\n        goto lab_0x40cb9b_2;\n    }\n    goto lab_0x40cb6a;\n  lab_0x40cd10:\n    // 0x40cd10\n    v130 = v123;\n    v131 = v16;\n    int64_t v288; // 0x40cb00\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40d948;\n    } else {\n        // 0x40cd19\n        v288 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff;\n        goto lab_0x40cd20;\n    }\n  lab_0x40d120:\n    // 0x40d120\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 69) {\n        goto lab_0x40d948;\n    } else {\n        int64_t v289 = *tm; // 0x40d12a\n        int32_t v290 = *(int32_t *)(v289 + 20); // 0x40d12f\n        uint32_t v291 = *(int32_t *)(v289 + 28); // 0x40d132\n        uint32_t v292 = *(int32_t *)(v289 + 24); // 0x40d136\n        *v64 = v290;\n        int32_t v293 = v290 - 100 + (v290 >> 31 & 400); // 0x40d14d\n        int32_t v294 = v291 - v292; // 0x40d154\n        int32_t v295 = v294 + 382; // 0x40d157\n        int32_t v296 = v291 - 379 - v294 + 7 * ((v295 + (int32_t)(-0x6db6db6d * (int64_t)v295 / 0x100000000) >> 2) - (v295 >> 31)); // 0x40d17e\n        int32_t v297; // 0x40cb00\n        int32_t v298; // 0x40d209\n        if (v296 < 0) {\n            // 0x40e017\n            v1 = 365;\n            int64_t v299 = 365; // 0x40e023\n            if ((v293 + 3) % 4 == 0) {\n                int32_t v300 = v293 - 1;\n                v1 = 366;\n                v299 = 366;\n                if (v300 % 100 - v300 == 1 - v293) {\n                    uint32_t v301 = v300 % 400;\n                    int64_t v302 = v301; // 0x40e04e\n                    int64_t v303 = v302 + 366 + (v302 ^ 0xffffffff) + (int64_t)(v301 == 0) & 0xffffffff; // 0x40e057\n                    v1 = v303;\n                    v299 = v303;\n                }\n            }\n            int64_t v304 = v299; // 0x40e05d\n            int64_t v305; // 0x40d132\n            int64_t v306 = v304 + v305; // 0x40e05d\n            int64_t v307; // 0x40d136\n            int64_t v308 = v306 - v307 + 382; // 0x40e071\n            v297 = (int32_t)(v306 - v308) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v308 >> 32) / 0x100000000 + v308) >> 2) - ((int32_t)v308 >> 31));\n        } else {\n            int64_t v309 = 365; // 0x40d195\n            if (v293 % 4 == 0) {\n                // 0x40d197\n                v309 = 366;\n                if (v293 % 100 == 0) {\n                    // 0x40d1bc\n                    v309 = v293 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v310 = (int64_t)v291 - v309; // 0x40d1e0\n            int64_t v311 = v310 - (int64_t)v292 + 382; // 0x40d1e7\n            v298 = (int32_t)(v310 - v311) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v311 >> 32) / 0x100000000 + v311) >> 2) - ((int32_t)v311 >> 31));\n            v297 = v298 >= 0 ? v298 : v296;\n        }\n        int64_t v312 = (v298 >> 31) + 1;\n        if (v125 == 71) {\n            uint32_t v313 = *v64; // 0x40e105\n            *v41 = 0;\n            int32_t v314 = -1900 - (int32_t)v312; // 0x40e119\n            int32_t v315 = v313 - v314; // 0x40e11c\n            v171 = v123;\n            v168 = v115;\n            v182 = v312 + 1900 + (int64_t)v313 & 0xffffffff;\n            v178 = 0;\n            v157 = v315 < 0 != ((v315 ^ v313) & (v313 ^ v314)) < 0;\n            v139 = 4;\n            v149 = v18;\n            goto lab_0x40d29f;\n        } else {\n            if (v125 != 103) {\n                int32_t v316 = v297;\n                int32_t v317 = v316 < 0 ? 2 : 1; // 0x40e0fa\n                v167 = v115;\n                v181 = v317 + (v316 + (int32_t)(-0x6db6db6d * (int64_t)v316 / 0x100000000) >> 2);\n                v138 = 2;\n                v148 = v18;\n            } else {\n                int32_t v318 = *v64; // 0x40d22f\n                int32_t v319 = v312; // 0x40d25a\n                int32_t v320 = (v318 % 100 + v319) % 100;\n                int64_t v321 = v320; // 0x40d270\n                v167 = v115;\n                v181 = v321;\n                v138 = 2;\n                v148 = v18;\n                if (v320 < 0) {\n                    int32_t v322 = -1900 - v319; // 0x40d280\n                    int32_t v323 = v318 - v322; // 0x40d285\n                    int64_t v324 = v323 < 0 == ((v323 ^ v318) & (v318 ^ v322)) < 0 ? v321 + 100 : -v321; // 0x40d288\n                    v167 = v115;\n                    v181 = v324 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n            }\n            goto lab_0x40d290;\n        }\n    }\n  lab_0x40d435:\n    // 0x40d435\n    v126 = 112;\n    v127 = (char)v27 != 0 ? 0 : v16;\n    v128 = ((char)v27 != 0 ? v27 : v129) & 0xffffffff;\n    goto lab_0x40ce5d;\n  lab_0x40ce50:\n    // 0x40ce50\n    v126 = v124;\n    v127 = v16;\n    v128 = 0;\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 79) {\n        goto lab_0x40d948;\n    } else {\n        goto lab_0x40ce5d;\n    }\n  lab_0x40d931:;\n    int64_t v660 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff; // 0x40d934\n    v288 = v660;\n    v130 = v123;\n    v131 = v660;\n    if ((int32_t)v122 == 0) {\n        goto lab_0x40cd20;\n    } else {\n        goto lab_0x40d948;\n    }\n  lab_0x40ce5d:;\n    int64_t v325 = v128;\n    int64_t v326 = v127;\n    int64_t v327 = v126;\n    *v45 = 0x2520;\n    int64_t v328 = v327; // 0x40ce6a\n    int64_t v329 = v123; // 0x40ce6a\n    int64_t v330 = v115; // 0x40ce6a\n    int64_t v331 = 0; // 0x40ce6a\n    int64_t v332 = v326; // 0x40ce6a\n    int64_t v333 = v18; // 0x40ce6a\n    int64_t v334 = v325; // 0x40ce6a\n    int64_t v335; // 0x40cb00\n    int64_t v336; // 0x40cb00\n    int64_t v337; // 0x40cb00\n    int64_t v338; // 0x40cb00\n    int64_t v339; // 0x40cb00\n    int64_t v340; // 0x40cb00\n    int64_t v341; // 0x40cb00\n    int64_t v342; // 0x40cb00\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40d2bf;\n    } else {\n        // 0x40ce70\n        v340 = *v46;\n        v342 = v327;\n        v341 = v115;\n        v338 = v123;\n        v339 = v122;\n        v335 = v326;\n        v336 = v18;\n        v337 = v325;\n        goto lab_0x40cd40;\n    }\n  lab_0x40da20:;\n    int64_t v343 = v132;\n    int64_t v344 = *tm; // 0x40da20\n    v8 = v12;\n    v9 = v13;\n    v25 = v343;\n    v21 = v20;\n    v24 = v23;\n    int64_t v345; // 0x40cb00\n    uint32_t v346; // 0x40da6e\n    uint32_t v347; // 0x40daa3\n    int32_t v348; // 0x40daa7\n    if (*(int32_t *)(v344 + 32) < 0) {\n        goto lab_0x40cb8e;\n    } else {\n        int64_t v349 = *(int64_t *)(v344 + 40); // 0x40da30\n        int32_t v350 = v349; // 0x40da3a\n        int64_t v351 = 1; // 0x40da3c\n        if (v350 >= 0) {\n            // 0x40da3e\n            v351 = 0;\n            if (v350 == 0) {\n                // 0x40da46\n                v351 = *(char *)*str == 45;\n            }\n        }\n        // 0x40da52\n        v345 = v351;\n        int64_t v352 = 0x100000000 * v349 >> 32; // 0x40da5e\n        int32_t v353 = v350 >> 31; // 0x40da62\n        *v49 = v353;\n        v346 = ((int32_t)(-0x6e5d4c3b * v352 / 0x100000000) + v350 >> 11) - v353;\n        *v64 = v346;\n        int32_t v354 = ((int32_t)(-0x77777777 * v352 / 0x100000000 + v349) >> 5) - *v49; // 0x40da80\n        v347 = -60 * ((v354 + (int32_t)(-0x77777777 * (int64_t)v354 / 0x100000000) >> 5) - (v354 >> 31)) + v354;\n        v348 = -60 * v354 + v350;\n        v177 = v343;\n        switch (v133) {\n            case 1: {\n                goto lab_0x40e176;\n            }\n            case 0: {\n                // 0x40e1a6\n                *v41 = 1;\n                v171 = v343;\n                v168 = v115;\n                v182 = v347 + 100 * v346;\n                v178 = 0;\n                v157 = v345;\n                v139 = 5;\n                v149 = v18;\n                goto lab_0x40d29f;\n            }\n            case 2: {\n                goto lab_0x40e152;\n            }\n            case 3: {\n                if (v348 != 0) {\n                    goto lab_0x40e152;\n                } else {\n                    if (v347 != 0) {\n                        goto lab_0x40e176;\n                    } else {\n                        // 0x40e1c7\n                        *v41 = 1;\n                        v171 = v343;\n                        v168 = v115;\n                        v182 = v346;\n                        v178 = v347;\n                        v157 = v345;\n                        v139 = 3;\n                        v149 = v18;\n                        goto lab_0x40d29f;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40dad7;\n            }\n        }\n    }\n  lab_0x40d948:;\n    int64_t v355 = v130 + 1; // 0x40d94c\n    v1 = v355 & 0xffffffff;\n    int64_t v356 = v130 - 1;\n    int64_t v357 = v356; // 0x40d95e\n    while (*(char *)v356 != 37) {\n        // 0x40d94f\n        v356 = v357 - 1;\n        v357 = v356;\n    }\n    int64_t v358 = 0x100000000 * (v355 - v356) >> 32; // 0x40d969\n    int64_t v359 = v3 - v20; // 0x40d96f\n    v1 = v359;\n    int64_t v360 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40d977\n    v134 = v359;\n    v162 = v360;\n    v176 = v358;\n    v160 = v130;\n    v161 = v356;\n    v142 = v131;\n    v152 = v358 >= v360 ? v358 : v360;\n    goto lab_0x40d983;\n  lab_0x40d983:\n    // 0x40d983\n    if (v134 <= v152) {\n        // break -> 0x40cbb3\n        goto lab_0x40cbb3_11;\n    }\n    int64_t v361 = v160;\n    int64_t v362 = v361; // 0x40d98f\n    int64_t v363 = 0; // 0x40d98f\n    if (v23 != 0) {\n        int64_t v364 = v142;\n        int64_t v365 = v161;\n        int64_t v366 = v176;\n        int64_t v367 = v366; // 0x40d998\n        int64_t v368 = v361; // 0x40d998\n        int64_t v369 = v365; // 0x40d998\n        int64_t v370 = v364; // 0x40d998\n        int64_t v371 = v23; // 0x40d998\n        if (v366 < v162) {\n            // 0x40d99a\n            *v54 = v366;\n            int64_t v372 = (0x100000000 * v115 >> 32) - v366; // 0x40d9a2\n            v1 = v372;\n            *v55 = v361;\n            int64_t v373 = v372 + v23; // 0x40d9aa\n            *v53 = v365;\n            *v41 = (char)v364;\n            int64_t * v374 = (int64_t *)v23;\n            int32_t v375 = v1;\n            if (v18 == 48) {\n                // 0x40df24\n                memset(v374, 48, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            } else {\n                // 0x40d9c2\n                memset(v374, 32, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            }\n        }\n        int64_t v376 = v371;\n        int64_t v377 = v369;\n        *v53 = v368;\n        v1 = v367;\n        *v44 = v367;\n        if ((char)v370 == 0) {\n            // 0x40dd6e\n            memcpy((int64_t *)v376, (int64_t *)v377, (int32_t)v1);\n        } else {\n            // 0x40da03\n            function_40cab0(v376, v377, v1);\n        }\n        // 0x40da12\n        v362 = *v53;\n        v363 = *v44 + v376;\n    }\n    // 0x40da15\n    v8 = v12;\n    v9 = v13;\n    v25 = v362;\n    v21 = v152 + v20;\n    v24 = v363;\n    goto lab_0x40cb8e;\n  lab_0x40dad7:;\n    int64_t v378 = v177;\n    int64_t v379 = v3 - v20; // 0x40dae0\n    v1 = v379;\n    v130 = v378;\n    v131 = v16;\n    if (*(char *)v378 != 37) {\n        goto lab_0x40d948;\n    } else {\n        int64_t v380 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40dae8\n        v134 = v379;\n        v162 = v380;\n        v176 = 1;\n        v160 = v378;\n        v161 = v378;\n        v142 = v16;\n        v152 = v380 != 0 ? v380 : 1;\n        goto lab_0x40d983;\n    }\n  lab_0x40d2b2:\n    // 0x40d2b2\n    *v45 = 0x2520;\n    v328 = v124;\n    v329 = v172;\n    v330 = v169;\n    v331 = v140;\n    v332 = v16;\n    v333 = v150;\n    v334 = 0;\n    goto lab_0x40d2bf;\n  lab_0x40d019:\n    // 0x40d019\n    *v50 = (int64_t)*v47;\n    *v51 = *v65;\n    int64_t v643 = *v44; // 0x40d042\n    v1 = v643;\n    uint64_t v644 = function_40cb00(0, -1, v643, *tm, v16, *v52); // 0x40d047\n    int64_t v645 = 0x100000000 * v115 >> 32;\n    uint64_t v646 = (int32_t)v115 >= 0 ? v645 : 0; // 0x40d060\n    int64_t v647 = v644 >= v646 ? v644 : v646; // 0x40d068\n    int64_t v648 = v3 - v20; // 0x40d06c\n    *v53 = v647;\n    if (v648 <= v647) {\n        // break -> 0x40cbb3\n        goto lab_0x40cbb3_11;\n    }\n    int64_t v649 = v647; // 0x40d080\n    int64_t v650 = 0; // 0x40d080\n    if (v23 != 0) {\n        int64_t v651 = v644; // 0x40d085\n        int64_t v652 = v648; // 0x40d085\n        int64_t v653 = v23; // 0x40d085\n        if (v644 < v646) {\n            // 0x40d087\n            *v54 = v644;\n            int64_t v654 = v645 - v644; // 0x40d08f\n            v1 = v654;\n            *v55 = v648;\n            int64_t v655 = v654 + v23; // 0x40d097\n            int64_t * v656 = (int64_t *)v23;\n            int32_t v657 = v1;\n            if (v18 == 48) {\n                // 0x40dff8\n                memset(v656, 48, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            } else {\n                // 0x40d0a5\n                memset(v656, 32, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            }\n        }\n        // 0x40d0bf\n        *v55 = v651;\n        *v50 = (int64_t)*v47;\n        *v51 = *v65;\n        int64_t v658 = *v44; // 0x40d0e6\n        v1 = v658;\n        function_40cb00((int32_t)v653, v652, v658, *tm, v16, *v52);\n        v649 = *v53;\n        v650 = *v55 + v653;\n    }\n    // 0x40d0fc\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v649 + v20;\n    v24 = v650;\n    goto lab_0x40cb8e;\n  lab_0x40cd20:\n    // 0x40cd20\n    *v45 = 0x2520;\n    v340 = *v46;\n    v342 = v124;\n    v341 = v115;\n    v338 = v123;\n    v339 = 0;\n    v335 = v288;\n    v336 = v18;\n    v337 = 0;\n    goto lab_0x40cd40;\n  lab_0x40d461:;\n    int64_t v659 = (int64_t)*(int32_t *)v183;\n    v167 = v115;\n    v181 = v659;\n    v138 = 2;\n    v148 = v18;\n    switch ((int32_t)v18) {\n        case 48: {\n            goto lab_0x40d290;\n        }\n        case 45: {\n            goto lab_0x40d290;\n        }\n        default: {\n            // 0x40d47b\n            v167 = v115;\n            v181 = v659;\n            v138 = 2;\n            v148 = 95;\n            goto lab_0x40d290;\n        }\n    }\n  lab_0x40d526:\n    // 0x40d526\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v155 + v20;\n    v24 = v156;\n    goto lab_0x40cb8e;\n  lab_0x40d2bf:\n    // 0x40d2bf\n    *(char *)(v48 + 114) = (char)v122;\n    v340 = v48 + 115;\n    v342 = v328;\n    v341 = v330;\n    v338 = v329;\n    v339 = v331 & 0xffffffff;\n    v335 = v332;\n    v336 = v333;\n    v337 = v334;\n    goto lab_0x40cd40;\n  lab_0x40dca8:;\n    int64_t v630 = v153;\n    int64_t v631 = v143;\n    int64_t v632 = v137;\n    int64_t v633 = v165;\n    int64_t v634 = v175;\n    *v41 = 45;\n    char v436 = 45; // 0x40dcb6\n    int64_t v437 = v634; // 0x40dcb6\n    int64_t v438 = v633; // 0x40dcb6\n    int64_t v439 = v632; // 0x40dcb6\n    int64_t v440 = v631; // 0x40dcb6\n    int64_t v441 = v146; // 0x40dcb6\n    int64_t v442 = v630; // 0x40dcb6\n    int32_t v429; // 0x40cb00\n    int64_t v433; // 0x40cb00\n    int64_t v434; // 0x40cb00\n    int64_t v435; // 0x40cb00\n    int64_t v432; // 0x40cb00\n    int64_t v431; // 0x40cb00\n    int64_t v430; // 0x40cb00\n    if ((int32_t)v146 != 45) {\n        goto lab_0x40d5f0;\n    } else {\n        // 0x40dca8\n        v429 = v633;\n        v430 = 45;\n        v431 = v634;\n        v432 = v633;\n        v433 = v632;\n        v434 = v631;\n        v435 = v630;\n        goto lab_0x40dcbc;\n    }\n  lab_0x40cf4d:;\n    int64_t v524 = v135;\n    int64_t v523 = v166;\n    int64_t v522 = v40 - v154; // 0x40cf59\n    char v505; // 0x40cb00\n    int64_t v510; // 0x40cb00\n    int64_t v511; // 0x40cb00\n    int64_t v512; // 0x40cb00\n    int64_t v509; // 0x40cb00\n    int64_t v506; // 0x40cb00\n    int64_t v508; // 0x40cb00\n    int64_t v507; // 0x40cb00\n    if ((int32_t)v147 == 45) {\n        goto lab_0x40cf74;\n    } else {\n        int32_t v635 = v524 - v522; // 0x40cf6b\n        if (v635 >= 0 == (v635 != 0)) {\n            int64_t v636; // 0x40cf5c\n            int32_t v637; // 0x40cf5f\n            if (v637 == 95) {\n                // 0x40de6e\n                *v41 = 0;\n                v505 = 0;\n                v506 = v636;\n                int64_t v638; // 0x40cb00\n                v507 = v638;\n                v508 = v523;\n                int64_t v639; // 0x40cf68\n                v509 = v639;\n                v510 = v524;\n                int64_t v640; // 0x40cb00\n                v511 = v640;\n                int64_t v641; // 0x40cb00\n                v512 = v641;\n                goto lab_0x40de73;\n            } else {\n                int64_t v642 = 0x100000000 * v524 >> 32; // 0x40e13b\n                v1 = v642;\n                if (v642 >= v636) {\n                    // break -> 0x40cbb3\n                    goto lab_0x40cbb3_11;\n                }\n                // 0x40e147\n                goto lab_0x40d6c5;\n            }\n        } else {\n            goto lab_0x40cf74;\n        }\n    }\n  lab_0x40d290:\n    // 0x40d290\n    *v41 = 0;\n    v171 = v123;\n    v168 = v167;\n    v182 = v181;\n    v178 = 0;\n    v157 = 0;\n    v139 = v138;\n    v149 = v148;\n    goto lab_0x40d29f;\n  lab_0x40d29f:;\n    int64_t v596 = v149;\n    int64_t v597 = v139;\n    int64_t v598 = v157;\n    int64_t v599 = v178;\n    int64_t v600 = v182;\n    int64_t v601 = v168;\n    int64_t v602 = v171;\n    v174 = v602;\n    v164 = v601;\n    v185 = v600;\n    v180 = v599;\n    v159 = v598;\n    v136 = v597;\n    v145 = v596;\n    int64_t v603; // 0x40cb00\n    int64_t v604; // 0x40cb00\n    int64_t v605; // 0x40cb00\n    int64_t v606; // 0x40cb00\n    int64_t v607; // 0x40cb00\n    int64_t v608; // 0x40cb00\n    int64_t v609; // 0x40cb00\n    if ((int32_t)v122 != 79) {\n        goto lab_0x40d810;\n    } else {\n        // 0x40d2a9\n        v172 = v602;\n        v169 = v601;\n        v140 = v597;\n        v150 = v596;\n        v607 = v602;\n        v606 = v601;\n        v609 = v600;\n        v608 = v599;\n        v605 = v598;\n        v603 = v597;\n        v604 = v596;\n        if ((char)v598 != 0) {\n            goto lab_0x40d819;\n        } else {\n            goto lab_0x40d2b2;\n        }\n    }\n  lab_0x40d85d:;\n    int32_t v610 = v186;\n    int64_t v611 = -0x6db6db6d * (int64_t)v610 / 0x100000000;\n    v1 = v611;\n    v167 = v115;\n    v181 = (v610 + (int32_t)v611 >> 2) - (v610 >> 31);\n    v138 = 2;\n    v148 = v18;\n    goto lab_0x40d290;\n  lab_0x40d810:\n    // 0x40d810\n    v173 = v174;\n    v163 = v164;\n    v184 = v185;\n    v179 = v180;\n    v158 = v159;\n    v141 = v136;\n    v151 = v145;\n    v607 = v174;\n    v606 = v164;\n    v609 = v185;\n    v608 = v180;\n    v605 = v159;\n    v603 = v136;\n    v604 = v145;\n    if ((char)v159 == 0) {\n        goto lab_0x40d560;\n    } else {\n        goto lab_0x40d819;\n    }\n  lab_0x40cd40:;\n    int64_t v381 = v337;\n    int64_t v382 = v336;\n    int64_t v383 = v341;\n    *(char *)v340 = (char)v342;\n    v1 = format;\n    *(char *)(v340 + 1) = 0;\n    *v44 = v338;\n    *v56 = (int32_t)v339;\n    *v39 = (char)v335;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x40cd6c\n    int64_t v384 = *v44; // 0x40cd71\n    v8 = v12;\n    v9 = v13;\n    v25 = v384;\n    v21 = v20;\n    v24 = v23;\n    int64_t v385; // 0x40cb00\n    int64_t v386; // 0x40cb00\n    int64_t v387; // 0x40cb00\n    int64_t v388; // 0x40cb00\n    int64_t v389; // 0x40cb00\n    int64_t v390; // 0x40cb00\n    int64_t v391; // 0x40cb00\n    int64_t v392; // 0x40cb00\n    int64_t v393; // 0x40cb00\n    int64_t v394; // 0x40cb00\n    int64_t v395; // 0x40cb00\n    int64_t v396; // 0x40cb00\n    if (copied_chars == 0) {\n        goto lab_0x40cb8e;\n    } else {\n        uint64_t v397 = (int64_t)copied_chars - 1; // 0x40cd7f\n        int64_t v398 = 0x100000000 * v383 >> 32;\n        uint64_t v399 = (int32_t)v383 >= 0 ? v398 : 0; // 0x40cd91\n        int64_t v400 = v397 >= v399 ? v397 : v399; // 0x40cd99\n        int64_t v401 = v3 - v20; // 0x40cd9d\n        v1 = v401;\n        if (v401 <= v400) {\n            // break -> 0x40cbb3\n            goto lab_0x40cbb3_11;\n        }\n        // 0x40cda9\n        v392 = v400;\n        v391 = v384;\n        v388 = v20;\n        v390 = 0;\n        if (v23 == 0) {\n            goto lab_0x40ce46;\n        } else {\n            char v402 = *v39; // 0x40cdb7\n            int64_t v403 = v397; // 0x40cdc0\n            int64_t v404 = v384; // 0x40cdc0\n            char v405 = v402; // 0x40cdc0\n            int64_t v406 = v23; // 0x40cdc0\n            if (v397 < v399 == *v56 == 0) {\n                // 0x40cdc7\n                *v55 = v397;\n                int64_t v407 = v398 - v397; // 0x40cdcf\n                v1 = v407;\n                *v53 = v384;\n                int64_t v408 = v407 + v23; // 0x40cdd7\n                *v41 = v402;\n                int64_t * v409 = (int64_t *)v23;\n                int32_t v410 = v1;\n                if ((int32_t)v382 == 48) {\n                    // 0x40dd96\n                    memset(v409, 48, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                } else {\n                    // 0x40cdea\n                    memset(v409, 32, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                }\n            }\n            int64_t v411 = v406;\n            *v53 = v404;\n            v1 = v403;\n            *v44 = v403;\n            v393 = v400;\n            v396 = v57;\n            v395 = v411;\n            v385 = v405;\n            v386 = v20;\n            if ((char)v381 != 0) {\n                // 0x40dd82\n                function_40ca60(v411, v57, v1);\n                v394 = v400;\n                v387 = v20;\n                v389 = v411;\n                goto lab_0x40ce43;\n            } else {\n                goto lab_0x40ce2b;\n            }\n        }\n    }\n  lab_0x40d560:;\n    int64_t v412 = v151;\n    int64_t v413 = v141;\n    int64_t v414 = v163;\n    int64_t v415 = v173;\n    *v39 = (char)v158;\n    int64_t v416 = v184; // 0x40d573\n    int64_t v417 = v40 - 1;\n    int64_t v418 = v417; // 0x40d580\n    if (v179 % 2 != 0) {\n        // 0x40d582\n        *(char *)v417 = 58;\n        v418 = v40 - 2;\n    }\n    int64_t v419 = v418;\n    uint32_t v420 = (int32_t)v179 >> 1; // 0x40d595\n    int64_t v421 = 0xcccccccd * v416 / 0x800000000; // 0x40d597\n    v1 = v421;\n    *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    while (v416 < 10 != (v420 == 0)) {\n        // 0x40d5ba\n        v416 = v1 & 0xffffffff;\n        int64_t v422 = v420; // 0x40d5bc\n        int64_t v423 = v419;\n        v417 = v423 - 1;\n        v418 = v417;\n        if (v422 % 2 != 0) {\n            // 0x40d582\n            *(char *)v417 = 58;\n            v418 = v423 - 2;\n        }\n        // 0x40d590\n        v419 = v418;\n        v420 = (int32_t)v422 >> 1;\n        v421 = 0xcccccccd * v416 / 0x800000000;\n        v1 = v421;\n        *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    }\n    int32_t v424 = v413; // 0x40d5c6\n    int32_t v425 = v414;\n    int32_t v426 = v424 - v425; // 0x40d5c6\n    int64_t v427 = v426 < 0 == ((v426 ^ v424) & (int32_t)(v413 ^ v414)) < 0 ? v413 : v414;\n    int64_t v428 = v427 & 0xffffffff; // 0x40d5c9\n    v175 = v415;\n    v165 = v414;\n    v137 = v428;\n    v143 = v16;\n    v146 = v412;\n    v153 = v419;\n    if (*v39 != 0) {\n        goto lab_0x40dca8;\n    } else {\n        // 0x40d5d6\n        v170 = v415;\n        v166 = v414;\n        v135 = v428;\n        v144 = v16;\n        v147 = v412;\n        v154 = v419;\n        if (*v41 == 0) {\n            goto lab_0x40cf4d;\n        } else {\n            // 0x40d5e1\n            v429 = v425;\n            v430 = 43;\n            v431 = v415;\n            v432 = v414;\n            v433 = v428;\n            v434 = v16;\n            v435 = v419;\n            if ((int32_t)v412 == 45) {\n                goto lab_0x40dcbc;\n            } else {\n                // 0x40d5eb\n                *v41 = 43;\n                v436 = 43;\n                v437 = v415;\n                v438 = v414;\n                v439 = v428;\n                v440 = v16;\n                v441 = v412;\n                v442 = v419;\n                goto lab_0x40d5f0;\n            }\n        }\n    }\n  lab_0x40d5f0:;\n    int64_t v443 = v442;\n    int64_t v444 = v441;\n    int64_t v445 = v440;\n    int64_t v446 = v439;\n    int64_t v447 = v438;\n    int64_t v448 = v437;\n    int64_t v449 = v40 - v443; // 0x40d600\n    int64_t v450 = (v449 ^ 0xffffffff) + v446; // 0x40d603\n    uint64_t v451 = v3 - v20; // 0x40d606\n    int64_t v452; // 0x40cb00\n    int64_t v453; // 0x40cb00\n    int64_t v454; // 0x40cb00\n    int64_t v455; // 0x40cb00\n    int64_t v456; // 0x40cb00\n    int64_t v457; // 0x40cb00\n    int64_t v458; // 0x40cb00\n    int64_t v459; // 0x40cb00\n    int64_t v460; // 0x40cb00\n    int64_t v461; // 0x40cb00\n    int64_t v462; // 0x40cb00\n    int64_t v463; // 0x40cb00\n    int64_t v464; // 0x40cb00\n    int64_t v465; // 0x40cb00\n    int64_t v466; // 0x40cb00\n    int64_t v467; // 0x40cb00\n    int64_t v468; // 0x40cb00\n    int64_t v469; // 0x40cb00\n    int64_t v470; // 0x40cb00\n    int64_t v471; // 0x40cb00\n    int64_t v472; // 0x40cb00\n    int64_t v473; // 0x40cb00\n    int64_t v474; // 0x40cb00\n    int64_t v475; // 0x40cb00\n    int64_t v476; // 0x40cb00\n    int64_t v477; // 0x40d64a\n    if ((int32_t)v450 < 1) {\n        int64_t v478 = 0x100000000 * v447 >> 32;\n        int64_t v479 = (int32_t)v447 >= 0 ? v478 : 0; // 0x40ddcd\n        int64_t v480 = v479 != 0 ? v479 : 1; // 0x40ddd3\n        if (v480 >= v451) {\n            // break -> 0x40cbb3\n            goto lab_0x40cbb3_11;\n        }\n        int64_t v481 = v449; // 0x40dde3\n        int64_t v482 = v480; // 0x40dde3\n        int64_t v483 = v479; // 0x40dde3\n        int64_t v484 = v446; // 0x40dde3\n        int64_t v485 = v445; // 0x40dde3\n        int64_t v486 = 0; // 0x40dde3\n        if (v23 != 0) {\n            int32_t v487 = v446; // 0x40dde5\n            int64_t v488 = v449; // 0x40dde8\n            int64_t v489 = v480; // 0x40dde8\n            int64_t v490 = v479; // 0x40dde8\n            int64_t v491 = v446; // 0x40dde8\n            int64_t v492 = v445; // 0x40dde8\n            int64_t v493 = v23; // 0x40dde8\n            if (v487 == 0 && v479 >= 2) {\n                // 0x40ddf0\n                *v61 = v449;\n                int64_t v494 = v478 - 1; // 0x40ddf8\n                v1 = v494;\n                *v62 = v480;\n                *v59 = v479;\n                *v53 = v494 + v23;\n                *v60 = v487;\n                *v43 = (char)v445;\n                if ((int32_t)v444 == 48) {\n                    // 0x40e215\n                    int64_t * v495; // 0x40cb00\n                    int32_t v496; // 0x40cb00\n                    memset(v495, 48, v496);\n                    int64_t v497 = *v53; // 0x40e222\n                    unsigned char v498 = *v43; // 0x40e227\n                    uint32_t v499 = *v60; // 0x40e22d\n                    int64_t v500 = *v59; // 0x40e232\n                    int64_t v501 = *v62; // 0x40e237\n                    int64_t v502 = *v61; // 0x40e23c\n                    v488 = v502;\n                    v489 = v501;\n                    v490 = v500;\n                    v491 = v499;\n                    v492 = v498;\n                    v493 = v497;\n                } else {\n                    // 0x40de23\n                    memset((int64_t *)v23, 32, (int32_t)v1);\n                    v488 = *v61;\n                    v489 = *v62;\n                    v490 = *v59;\n                    v491 = (int64_t)*v60;\n                    v492 = (int64_t)*v43;\n                    v493 = *v53;\n                }\n            }\n            // 0x40de4f\n            *(char *)v493 = *v41;\n            v481 = v488;\n            v482 = v489;\n            v483 = v490;\n            v484 = v491;\n            v485 = v492;\n            v486 = v493 + 1;\n        }\n        int64_t v503 = v482 + v20; // 0x40de60\n        v472 = v3 - v503;\n        v476 = v481;\n        v473 = v447;\n        v468 = v448;\n        v469 = v483;\n        v453 = v484;\n        v457 = v485;\n        v459 = v444;\n        v461 = v443;\n        v462 = v503;\n        v466 = v486;\n        goto lab_0x40cf86;\n    } else {\n        int32_t v504 = v444; // 0x40d612\n        v505 = v436;\n        v506 = v451;\n        v507 = v448;\n        v508 = v447;\n        v509 = v450;\n        v510 = v446;\n        v511 = v445;\n        v512 = v443;\n        if (v504 == 95) {\n            goto lab_0x40de73;\n        } else {\n            // 0x40d61c\n            if (0x100000000 * v446 >> 32 >= v451) {\n                // break -> 0x40cbb3\n                goto lab_0x40cbb3_11;\n            }\n            int64_t v513 = 0x100000000 * v447 >> 32;\n            int64_t v514 = (int32_t)v447 >= 0 ? v513 : 0; // 0x40d637\n            v1 = v514;\n            uint64_t v515 = v514 != 0 ? v514 : 1; // 0x40d63d\n            if (v515 >= v451) {\n                // break -> 0x40cbb3\n                goto lab_0x40cbb3_11;\n            }\n            // 0x40d64a\n            v477 = v515 + v20;\n            int64_t v516 = 0x100000000 * v450 >> 32; // 0x40d64d\n            v475 = v449;\n            v467 = v448;\n            v471 = v516;\n            v452 = v446;\n            v456 = v445;\n            v458 = v444;\n            v460 = v443;\n            v463 = v477;\n            v465 = 0;\n            if (v23 == 0) {\n                goto lab_0x40d710;\n            } else {\n                int32_t v517 = v446; // 0x40d65c\n                v474 = v449;\n                v470 = v516;\n                v454 = v446;\n                v455 = v445;\n                v464 = v23;\n                if (v517 == 0 && v514 >= 2) {\n                    // 0x40d667\n                    *v59 = v516;\n                    int64_t v518 = v513 - 1; // 0x40d66f\n                    v1 = v518;\n                    *v54 = v449;\n                    int64_t v519 = v518 + v23; // 0x40d678\n                    *v56 = v517;\n                    *v39 = (char)v445;\n                    int64_t * v520 = (int64_t *)v23;\n                    int32_t v521 = v1;\n                    if (v504 == 48) {\n                        // 0x40e27f\n                        memset(v520, 48, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    } else {\n                        // 0x40d690\n                        memset(v520, 32, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    }\n                }\n                // 0x40d6b5\n                *(char *)v464 = *v41;\n                goto lab_0x40d6c5;\n            }\n        }\n    }\n  lab_0x40cf74:\n    // 0x40cf74\n    v472 = v3 - v20;\n    v476 = v522;\n    v473 = v523;\n    v468 = v170;\n    v469 = (int32_t)v523 >= 0 ? 0x100000000 * v523 >> 32 : 0;\n    v453 = v524;\n    v457 = v144;\n    v459 = v147;\n    v461 = v154;\n    v462 = v20;\n    v466 = v23;\n    goto lab_0x40cf86;\n  lab_0x40e176:\n    // 0x40e176\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v347 + 100 * v346;\n    v178 = 4;\n    v157 = v345;\n    v139 = 6;\n    v149 = v18;\n    goto lab_0x40d29f;\n  lab_0x40e152:\n    // 0x40e152\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v348 + 0x2710 * v346 + 100 * v347;\n    v178 = 20;\n    v157 = v345;\n    v139 = 9;\n    v149 = v18;\n    goto lab_0x40d29f;\n  lab_0x40d819:\n    // 0x40d819\n    v173 = v607;\n    v163 = v606;\n    v184 = -v609 & 0xffffffff;\n    v179 = v608;\n    v158 = v605;\n    v141 = v603;\n    v151 = v604;\n    goto lab_0x40d560;\n  lab_0x40dcbc:;\n    int64_t v612 = 0x100000000 * v432 >> 32;\n    int64_t v613 = v429 >= 0 ? v612 : 0; // 0x40dcd2\n    uint64_t v614 = v613 != 0 ? v613 : 1; // 0x40dcd8\n    if (v3 - v20 <= v614) {\n        // break -> 0x40cbb3\n        goto lab_0x40cbb3_11;\n    }\n    int64_t v615 = v434;\n    int64_t v616 = v433;\n    int64_t v617 = v613; // 0x40dceb\n    int64_t v618 = v616; // 0x40dceb\n    int64_t v619 = v615; // 0x40dceb\n    int64_t v620 = 0; // 0x40dceb\n    if (v23 != 0) {\n        int64_t v621 = v430;\n        int32_t v622 = v616; // 0x40dced\n        int64_t v623 = v621; // 0x40dcf0\n        int64_t v624 = v613; // 0x40dcf0\n        int64_t v625 = v616; // 0x40dcf0\n        int64_t v626 = v615; // 0x40dcf0\n        int64_t v627 = v23; // 0x40dcf0\n        if (v622 == 0 && v613 >= 2) {\n            // 0x40dcf8\n            *v58 = (char)v621;\n            int64_t v628 = v612 - 1; // 0x40dd07\n            *v54 = v613;\n            v1 = v628;\n            *v56 = v622;\n            *v39 = (char)v615;\n            *v44 = v628;\n            memset((int64_t *)v23, 32, (int32_t)v628);\n            v624 = *v54;\n            v623 = (int64_t)*v58;\n            v625 = (int64_t)*v56;\n            v626 = (int64_t)*v39;\n            v627 = *v44 + v23;\n        }\n        // 0x40dd44\n        *(char *)v627 = (char)v623;\n        v617 = v624;\n        v618 = v625;\n        v619 = v626;\n        v620 = v627 + 1;\n    }\n    int64_t v629 = v614 + v20; // 0x40dd4f\n    v472 = v3 - v629;\n    v476 = v40 - v435;\n    v473 = v432;\n    v468 = v431;\n    v469 = v617;\n    v453 = v618;\n    v457 = v619;\n    v459 = 45;\n    v461 = v435;\n    v462 = v629;\n    v466 = v620;\n    goto lab_0x40cf86;\n  lab_0x40cf86:;\n    uint64_t v525 = v469;\n    uint64_t v526 = v476;\n    int64_t v527 = v526 >= v525 ? v526 : v525; // 0x40cf8c\n    if (v527 >= v472) {\n        // break -> 0x40cbb3\n        goto lab_0x40cbb3_11;\n    }\n    int64_t v528 = v466;\n    int64_t v529 = v462;\n    int64_t v530 = v468;\n    v392 = v527;\n    v391 = v530;\n    v388 = v529;\n    v390 = 0;\n    if (v528 == 0) {\n        goto lab_0x40ce46;\n    } else {\n        int64_t v531 = v457;\n        int64_t v532 = v526; // 0x40cfa5\n        int64_t v533 = v530; // 0x40cfa5\n        int64_t v534 = v531; // 0x40cfa5\n        int64_t v535 = v528; // 0x40cfa5\n        if (v526 < v525 == (int32_t)v453 == 0) {\n            // 0x40cfac\n            *v55 = v526;\n            int64_t v536 = (0x100000000 * v473 >> 32) - v526; // 0x40cfb4\n            v1 = v536;\n            *v53 = v530;\n            *v41 = (char)v531;\n            if ((int32_t)v459 == 48) {\n                // 0x40def7\n                int64_t * v537; // 0x40cb00\n                int32_t v538; // 0x40cb00\n                memset(v537, 48, v538);\n                unsigned char v539 = *v41; // 0x40df07\n                int64_t v540 = *v53; // 0x40df0d\n                int64_t v541 = *v55; // 0x40df12\n                v532 = v541;\n                v533 = v540;\n                v534 = v539;\n                int64_t v542; // 0x40cfbc\n                v535 = v542;\n            } else {\n                // 0x40cfcf\n                memset((int64_t *)v528, 32, (int32_t)v1);\n                v532 = *v55;\n                v533 = *v53;\n                v534 = (int64_t)*v41;\n                v535 = v528 + v536;\n            }\n        }\n        // 0x40cfef\n        *v53 = v533;\n        v1 = v532;\n        *v44 = v532;\n        v393 = v527;\n        v396 = v461;\n        v395 = v535;\n        v385 = v534;\n        v386 = v529;\n        goto lab_0x40ce2b;\n    }\n  lab_0x40ce46:\n    // 0x40ce46\n    v8 = v12;\n    v9 = v13;\n    v25 = v391;\n    v21 = v388 + v392;\n    v24 = v390;\n    goto lab_0x40cb8e;\n  lab_0x40de73:;\n    int64_t v543 = v509;\n    int64_t v544 = 0x100000000 * v543 >> 32; // 0x40de73\n    if (v544 >= v506) {\n        // break -> 0x40cbb3\n        goto lab_0x40cbb3_11;\n    }\n    int64_t v545 = v512;\n    int64_t v546 = v511;\n    int64_t v547 = v510;\n    int64_t v548 = v508;\n    int64_t v549 = v507;\n    char v550 = v505; // 0x40de82\n    int64_t v551 = v543 & 0xffffffff; // 0x40de82\n    int64_t v552 = v547; // 0x40de82\n    int64_t v553 = v546; // 0x40de82\n    int64_t v554 = 0; // 0x40de82\n    if (v23 != 0) {\n        // 0x40de84\n        v1 = v544;\n        *v60 = (int32_t)v543;\n        *v56 = (int32_t)v547;\n        *v39 = (char)v546;\n        memset((int64_t *)v23, 32, (int32_t)v544);\n        v550 = *v41;\n        v551 = (int64_t)*v60;\n        v552 = (int64_t)*v56;\n        v553 = (int64_t)*v39;\n        v554 = v544 + v23;\n    }\n    int64_t v555 = v554;\n    int64_t v556 = v553;\n    int64_t v557 = v552;\n    int64_t v558 = v551;\n    char v559 = v550; // 0x40ded0\n    int64_t v560 = v544 + v20; // 0x40deb8\n    int32_t v561 = v558; // 0x40debe\n    int32_t v562 = v561 - (int32_t)v548; // 0x40debe\n    int64_t v563 = v562 < 0 == ((v562 ^ v561) & (int32_t)(v558 ^ v548)) < 0 ? 0 : v548 - v558 & 0xffffffff; // 0x40dec6\n    int64_t v564 = v3 - v560; // 0x40decd\n    int64_t v565 = 0x100000000 * v563 >> 32;\n    if (v559 != 0) {\n        int64_t v566 = v563 != 0 ? v565 : 1; // 0x40df6b\n        if (v566 >= v564) {\n            // break -> 0x40cbb3\n            goto lab_0x40cbb3_11;\n        }\n        int64_t v567 = v566; // 0x40df7b\n        int64_t v568 = v565; // 0x40df7b\n        int64_t v569 = v557; // 0x40df7b\n        int64_t v570 = v556; // 0x40df7b\n        int64_t v571 = 0; // 0x40df7b\n        if (v555 != 0) {\n            int32_t v572 = v557; // 0x40df7d\n            char v573 = v559; // 0x40df80\n            int64_t v574 = v566; // 0x40df80\n            int64_t v575 = v565; // 0x40df80\n            int64_t v576 = v557; // 0x40df80\n            int64_t v577 = v556; // 0x40df80\n            int64_t v578 = v555; // 0x40df80\n            if (v572 == 0 && v565 >= 2) {\n                int64_t v579 = v565 - 1; // 0x40df88\n                *v59 = v566;\n                v1 = v579;\n                *v60 = v572;\n                *v43 = (char)v556;\n                *v53 = v565;\n                memset((int64_t *)v555, 32, (int32_t)v579);\n                v574 = *v59;\n                v575 = *v53;\n                v573 = *v41;\n                v576 = (int64_t)*v60;\n                v577 = (int64_t)*v43;\n                v578 = v579 + v555;\n            }\n            // 0x40dfc8\n            v568 = v575;\n            v567 = v574;\n            *(char *)v578 = v573;\n            v569 = v576;\n            v570 = v577;\n            v571 = v578 + 1;\n        }\n        int64_t v580 = v567 + v560; // 0x40dfd9\n        v472 = v3 - v580;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v568;\n        v453 = v569;\n        v457 = v570;\n        v459 = 95;\n        v461 = v545;\n        v462 = v580;\n        v466 = v571;\n    } else {\n        // 0x40dedb\n        v472 = v564;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v565;\n        v453 = v557;\n        v457 = v556;\n        v459 = 95;\n        v461 = v545;\n        v462 = v560;\n        v466 = v555;\n    }\n    goto lab_0x40cf86;\n  lab_0x40ce2b:;\n    int64_t v581 = v386;\n    int64_t v582 = v395;\n    int64_t v583 = v396;\n    int64_t v584 = v393;\n    if ((char)v385 == 0) {\n        // 0x40dc90\n        memcpy((int64_t *)v582, (int64_t *)v583, (int32_t)v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    } else {\n        // 0x40ce34\n        function_40cab0(v582, v583, v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    }\n    goto lab_0x40ce43;\n  lab_0x40d710:;\n    int64_t v585 = v463 + v471; // 0x40d714\n    v472 = v3 - v585;\n    v476 = v475;\n    v473 = 0;\n    v468 = v467;\n    v469 = 0;\n    v453 = v452;\n    v457 = v456;\n    v459 = v458;\n    v461 = v460;\n    v462 = v585;\n    v466 = v465;\n    goto lab_0x40cf86;\n  lab_0x40d6c5:;\n    int64_t v586 = v464 + 1;\n    int64_t v587 = v477;\n    int64_t v588 = v443;\n    int64_t v589 = v444;\n    int64_t v590 = v455;\n    int64_t v591 = v454;\n    int64_t v592 = v470;\n    int64_t v593 = v448;\n    int64_t v594 = v474;\n    v475 = v594;\n    v467 = v593;\n    v471 = v592;\n    v452 = v591;\n    v456 = v590;\n    v458 = v589;\n    v460 = v588;\n    v463 = v587;\n    v465 = 0;\n    if (v586 != 0) {\n        // 0x40d6ca\n        v1 = v592;\n        *v59 = v594;\n        *v60 = (int32_t)v591;\n        *v55 = v593;\n        *v39 = (char)v590;\n        *v44 = v592;\n        memset((int64_t *)v586, 48, (int32_t)v592);\n        int64_t v595 = *v44; // 0x40d6f3\n        v475 = *v59;\n        v467 = *v55;\n        v471 = v595;\n        v452 = (int64_t)*v60;\n        v456 = (int64_t)*v39;\n        v458 = v589;\n        v460 = v588;\n        v463 = v587;\n        v465 = v595 + v586;\n    }\n    goto lab_0x40d710;\n  lab_0x40ce43:\n    // 0x40ce43\n    v392 = v394;\n    v391 = *v53;\n    v388 = v387;\n    v390 = *v44 + v389;\n    goto lab_0x40ce46;\n  lab_0x40cb9b_2:\n    // 0x40cb9b\n    if (v3 != 0 && v5 != 0) {\n        // 0x40cba7\n        *(char *)v5 = 0;\n    }\n    // 0x40cbb3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e2d0",
            "funcStartAddr": "40e2d0",
            "funcEndAddr": "40e2ef",
            "decompiledFuncCode": "int64_t function_40e2d0(int64_t a1, int64_t a2, char * a3, int64_t a4, int32_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    char v1 = 0; // bp-9, 0x40e2d4\n    int64_t result = function_40cb00((int32_t)a1, a2, (int64_t)a3, a4, 0, (int64_t)&v1); // 0x40e2e5\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e2f0",
            "funcStartAddr": "40e2f0",
            "funcEndAddr": "40e36b",
            "decompiledFuncCode": "int64_t function_40e2f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40e2f7\n    if (fileno(stream) < 0) {\n        // 0x40e357\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40e30a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40e33b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40e357\n            return fclose(stream);\n        }\n    }\n    // 0x40e30c\n    if ((int32_t)function_40e370(a1, v1) == 0) {\n        // 0x40e357\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40e318\n    int32_t v3 = *v2; // 0x40e320\n    int64_t result = fclose(stream); // 0x40e32e\n    if (v3 != 0) {\n        // 0x40e360\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40e330\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e370",
            "funcStartAddr": "40e370",
            "funcEndAddr": "40e3b0",
            "decompiledFuncCode": "int64_t function_40e370(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40e38a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40e38a\n        return fflush(stream);\n    }\n    // 0x40e398\n    function_40e3b0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40e3b0",
            "funcStartAddr": "40e3b0",
            "funcEndAddr": "40e407",
            "decompiledFuncCode": "int64_t function_40e3b0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40e3b0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40e3ba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40e3eb\n    int64_t result = -1; // 0x40e3f4\n    if (v1 != -1) {\n        // 0x40e3f6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40e402\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e410",
            "funcStartAddr": "40e410",
            "funcEndAddr": "40e414",
            "decompiledFuncCode": "int64_t function_40e410(int64_t a1) {\n    // 0x40e410\n    int64_t result; // 0x40e410\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e420",
            "funcStartAddr": "40e420",
            "funcEndAddr": "40ff39",
            "decompiledFuncCode": "int64_t function_40e420(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x40e420\n    int64_t v1; // bp-1416, 0x40e420\n    int64_t v2; // bp-1656, 0x40e420\n    if ((int32_t)function_410160(a3, &v1, &v2) < 0) {\n        // 0x40ea90\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40e42b\n    int64_t v4; // bp-1384, 0x40e420\n    int64_t v5; // bp-1640, 0x40e420\n    int64_t v6; // 0x40e420\n    if ((int32_t)function_40ff40(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40f377\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40f393\n            free((int64_t *)v6);\n        }\n        // 0x40f398\n        *__errno_location() = 22;\n        // 0x40ea90\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40e48b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x40e493\n    uint64_t v9 = v8 + v6; // 0x40e497\n    int64_t v10; // 0x40e420\n    char * v11; // 0x40e420\n    int64_t v12; // 0x40e420\n    if (v9 < v8) {\n        // 0x40eb40\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40ea49;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x40eb40\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x40ea49;\n        } else {\n            uint64_t size = v9 + 6; // 0x40e4a7\n            if (size < 4000) {\n                // 0x40e5f0\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x40e420\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x40e4e4;\n            } else {\n                if (size == -1) {\n                    // 0x40eb40\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x40ea49;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x40e4c8\n                    if (mem == NULL) {\n                        // 0x40eb40\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x40ea49;\n                    } else {\n                        // 0x40e4dd\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x40e4e4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40ea10_2:;\n    // 0x40ea10\n    int64_t v14; // 0x40e420\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x40ea18\n    int64_t v17 = v16; // 0x40ea26\n    int64_t v18 = v16; // 0x40ea26\n    int64_t v19 = v15; // 0x40ea26\n    int64_t v20; // 0x40e420\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x40ec38;\n    } else {\n        goto lab_0x40ea31;\n    }\n  lab_0x40ea49:\n    // 0x40ea49\n    if (v6 != (int64_t)&v4) {\n        // 0x40ea60\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40ea7c\n        free((int64_t *)v6);\n    }\n    // 0x40ea81\n    *(int32_t *)v10 = 12;\n    // 0x40ea90\n    return 0;\n  lab_0x40e4e4:\n    // 0x40e4e4\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x40e51d\n    int64_t v23 = *v22; // 0x40e51d\n    int64_t v24 = 0; // 0x40e523\n    int64_t v25 = v20; // 0x40e523\n    int64_t v26 = v21; // 0x40e523\n    int64_t v27 = 0; // 0x40e523\n    int64_t v28; // 0x40e420\n    int64_t v29; // 0x40e420\n    int64_t v30; // 0x40e420\n    int64_t v31; // 0x40e420\n    int64_t v32; // 0x40e420\n    int64_t v33; // 0x40e420\n    int64_t v34; // 0x40e420\n    if (v23 == a3) {\n        goto lab_0x40eb33;\n    } else {\n        int64_t v35 = v23 - a3; // 0x40e529\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40e53b;\n    }\n  lab_0x40eb33:;\n    int64_t v36 = v24; // 0x40eb36\n    float80_t v37; // 0x40e420\n    float80_t v38 = v37; // 0x40eb36\n    float80_t v39; // 0x40e420\n    float80_t v40 = v39; // 0x40eb36\n    int64_t v41 = v25; // 0x40eb36\n    int64_t v42 = v26; // 0x40eb36\n    int64_t v43 = v27; // 0x40eb36\n    int64_t v44; // 0x40e420\n    int64_t v45 = v44; // 0x40eb36\n    goto lab_0x40e698;\n  lab_0x40e698:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x40e420\n    int64_t v51; // 0x40e420\n    int64_t v52; // 0x40e420\n    int64_t v53; // 0x40e420\n    int64_t v54; // 0x40e420\n    int64_t v55; // 0x40e420\n    int64_t v56; // 0x40e420\n    int64_t v57; // 0x40e420\n    int64_t dest_mem2; // 0x40e420\n    int64_t dest_mem3; // 0x40e420\n    int64_t v58; // 0x40e420\n    float80_t v59; // 0x40e420\n    float80_t v60; // 0x40e420\n    float80_t v61; // 0x40e420\n    float80_t v62; // 0x40e420\n    float80_t v63; // 0x40e420\n    uint64_t v64; // 0x40f7c6\n    char * v65; // 0x40e6ac\n    char v66; // 0x40e6ac\n    int64_t v67; // 0x40e6d4\n    uint32_t v68; // 0x40e6d8\n    int64_t v69; // 0x40eab5\n    char v70; // 0x40e420\n    if (v1 == v49) {\n        // 0x40f7c0\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40ff2a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40f822;\n            } else {\n                goto lab_0x40ea10_2;\n            }\n        } else {\n            // 0x40f7d0\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40f822;\n            } else {\n                if (v47 != 0) {\n                    // 0x40fded\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40ea10_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40fdf3\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40f7ee;\n                        } else {\n                            goto lab_0x40fdff;\n                        }\n                    }\n                } else {\n                    // 0x40f7de\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40f7ee;\n                    } else {\n                        goto lab_0x40fdff;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40e6ac\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x40e6b1\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40f280\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x40ea10_2;\n                } else {\n                    goto lab_0x40eb12;\n                }\n            } else {\n                // 0x40eac2\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x40eb12;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40f3b0\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x40ea10_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40f3b6\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x40eae0;\n                            } else {\n                                goto lab_0x40f3c2;\n                            }\n                        }\n                    } else {\n                        // 0x40ead0\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x40eae0;\n                        } else {\n                            goto lab_0x40f3c2;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x40e6c9\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g77 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x40f040\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40eb17;\n                }\n                case 19: {\n                    // 0x40f030\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40eb17;\n                }\n                case 20: {\n                    // 0x40f018\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40eb17;\n                }\n                case 21: {\n                    goto lab_0x40ec00;\n                }\n                case 22: {\n                    goto lab_0x40ec00;\n                }\n                default: {\n                    // 0x40e6ea\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x40eb90\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40ebad;\n                        } else {\n                            // 0x40eb97\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x40e720;\n                            } else {\n                                goto lab_0x40ebad;\n                            }\n                        }\n                    } else {\n                        goto lab_0x40e720;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e53b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x40e420\n    float80_t v77 = v76;\n    float80_t v78; // 0x40e420\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x40e420\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40e53e\n    int64_t v89 = v85; // 0x40e53e\n    int64_t v90 = v84; // 0x40e53e\n    float80_t v91 = v79; // 0x40e53e\n    float80_t v92 = v77; // 0x40e53e\n    int64_t v93 = v75; // 0x40e53e\n    int64_t v94 = v80; // 0x40e53e\n    int64_t v95 = v81; // 0x40e53e\n    int64_t v96 = v82; // 0x40e53e\n    int64_t v97 = v87; // 0x40e53e\n    int64_t v98; // 0x40e420\n    int64_t v99; // 0x40e420\n    int64_t v100; // 0x40e420\n    int64_t v101; // 0x40e420\n    int64_t v102; // 0x40e420\n    if (v82 >= v87) {\n        goto lab_0x40e689;\n    } else {\n        if (v82 != 0) {\n            // 0x40e620\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x40ea10_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x40e626\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40e63b;\n                } else {\n                    goto lab_0x40e62e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x40e564\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40e64e;\n                } else {\n                    goto lab_0x40e570;\n                }\n            } else {\n                goto lab_0x40e62e;\n            }\n        }\n    }\n  lab_0x40e689:\n    // 0x40e689\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x40e698;\n  lab_0x40f822:\n    // 0x40f822\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40f82a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40f83b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40f847\n    if (v12 != 0) {\n        // 0x40f853\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40f872\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40f88e\n        free((int64_t *)v6);\n    }\n    // 0x40f893\n    *a2 = v46;\n    // 0x40ea90\n    return result;\n  lab_0x40ec00:\n    // 0x40ec00\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x40eb17;\n  lab_0x40e62e:\n    // 0x40e62e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        goto lab_0x40e63b;\n    }\n  lab_0x40ec38:\n    // 0x40ec38\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x40ea31;\n  lab_0x40ea31:\n    if (v12 == 0) {\n        // 0x40eb40\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40ea49;\n    } else {\n        // 0x40ea41\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x40ea49;\n    }\n  lab_0x40eb12:\n    // 0x40eb12\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x40eb17;\n  lab_0x40e720:;\n    int64_t v273 = (int64_t)v11; // 0x40e720\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x40e727\n    int64_t v275 = v273 + 1; // 0x40e72b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x40e734\n    if (v274 % 2 != 0) {\n        // 0x40e736\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x40e727\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x40e747\n    if ((v277 & 2) != 0) {\n        // 0x40e749\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x40e753\n    if ((v277 & 4) != 0) {\n        // 0x40e755\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40e75f\n    if ((v277 & 8) != 0) {\n        // 0x40e761\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40e76b\n    if ((v277 & 16) != 0) {\n        // 0x40e76d\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x40e777\n    if ((v277 & 64) != 0) {\n        // 0x40e779\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x40e783\n    if ((v277 & 32) != 0) {\n        // 0x40e785\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40e78d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x40e791\n    int64_t v293 = v290; // 0x40e798\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x40e7a7\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40e7ca\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40e7ce\n    int64_t v298 = v295; // 0x40e7d5\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x40e7e4\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40e6da\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x40e810\n    int64_t v272; // 0x40e420\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x40e819\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x40ec18;\n        } else {\n            if (v301 == 12) {\n                // 0x40f3d8\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x40e840;\n            } else {\n                // 0x40e830\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x40ec10\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x40ec18;\n                } else {\n                    goto lab_0x40e840;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40e840;\n    }\n  lab_0x40eb17:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x40eb17\n    int64_t v111 = v55 + 88; // 0x40eb1b\n    int64_t v112 = *(int64_t *)v111; // 0x40eb1f\n    int64_t v113 = v49 + 1; // 0x40eb22\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x40e529\n        int64_t v115 = v114 + v105; // 0x40e52f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x40eb58\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x40ea10_2;\n            } else {\n                goto lab_0x40e689;\n            }\n        } else {\n            goto lab_0x40e53b;\n        }\n    } else {\n        goto lab_0x40eb33;\n    }\n  lab_0x40e63b:;\n    int64_t v116 = v80 == v20; // 0x40e642\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x40e570;\n    } else {\n        goto lab_0x40e64e;\n    }\n  lab_0x40e64e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x40e420\n    if (v102 != 0) {\n        goto lab_0x40e570;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40e66a\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x40ec25;\n        } else {\n            // 0x40e678\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x40e689;\n        }\n    }\n  lab_0x40e570:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x40e587\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x40ea10_2;\n    } else {\n        // 0x40e5ad\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x40e5d5\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x40e689;\n    }\n  lab_0x40f7ee:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40fdb4\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x40ea10_2;\n        } else {\n            // 0x40fdc5\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40fdda\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40f822;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40f811\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x40ec25;\n        } else {\n            // 0x40f81f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40f822;\n        }\n    }\n  lab_0x40fdff:\n    // 0x40fdff\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        goto lab_0x40f7ee;\n    }\n  lab_0x40ebad:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40ebad\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x40ebb1\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x40ebb5\n    int64_t v123 = 0; // 0x40ebbc\n    int64_t v124 = v122; // 0x40ebbc\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x40ebc2\n        int64_t v126 = v120; // 0x40ebca\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40fb51\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40fb69\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40fb7b\n            int64_t v131 = v128; // 0x40fb84\n            int64_t v132 = v130; // 0x40fb84\n            int64_t v133; // 0x40e420\n            int64_t v134; // 0x40fb96\n            if (v130 < v129) {\n                // 0x40fb86\n                if (v121 == v128) {\n                    // break -> 0x40e9a0\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40e98b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x40e9a0\n                        goto lab_0x40e9a0;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40fb48\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40fb51\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40fb86\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x40e9a0\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40e98b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x40e9a0\n                            goto lab_0x40e9a0;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40fb48\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x40ebd4\n            if (*(int32_t *)v135 != 5) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x40ebe0\n            int64_t v137 = v136; // 0x40ebe0\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40ebed\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x40e9a0:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x40e9a0\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x40e9a4\n    int64_t v142; // 0x40e420\n    int64_t v143; // 0x40e420\n    int64_t v144; // 0x40e420\n    if (v140 == v141) {\n        goto lab_0x40f050;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x40e9b1\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40fbb4\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40fbbd\n            if (v141 == v146) {\n                goto lab_0x40f06e;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40fbe3\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40fbea\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40fc03\n                int64_t v152 = v151; // 0x40fc0c\n                int64_t v153 = v149; // 0x40fc0c\n                int64_t v154; // 0x40e420\n                int64_t v155; // 0x40fc17\n                if (v151 < v150) {\n                    // 0x40fc0e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x40ea10_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40fc2a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x40ea10_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40fbd0\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40fbd9\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40fc0e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x40ea10_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40fc2a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x40ea10_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40fbd0\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40e9dc;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x40e9c3\n            if (*(int32_t *)v156 != 5) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x40e9d0\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x40f050;\n            } else {\n                goto lab_0x40e9dc;\n            }\n        }\n    }\n  lab_0x40e840:\n    // 0x40e840\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40e84d\n    int64_t v160 = 0; // 0x40e855\n    if (v159 != -1) {\n        // 0x40e85b\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40f14c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40e87e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40e88c\n        if (*(int32_t *)v162 != 5) {\n            // 0x40f14c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40e89f\n        int64_t v164; // bp-8, 0x40e420\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x40e420\n    uint64_t v165; // 0x40e8b6\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40f2e8\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x40e914\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x40ea10_2;\n    } else {\n        // 0x40e8c0\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x40e914\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x40eff0\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x40ea10_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x40eff6\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x40e8e2;\n                } else {\n                    goto lab_0x40f002;\n                }\n            }\n        } else {\n            // 0x40e8d2\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x40e8e2;\n            } else {\n                goto lab_0x40f002;\n            }\n        }\n    }\n  lab_0x40eae0:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40f309\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x40ea10_2;\n        } else {\n            // 0x40f321\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f332\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x40eb12;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x40eb01\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x40ec25;\n        } else {\n            // 0x40eb0f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x40eb12;\n        }\n    }\n  lab_0x40f3c2:\n    // 0x40f3c2\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        goto lab_0x40eae0;\n    }\n  lab_0x40f050:\n    // 0x40f050\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40f06e;\n  lab_0x40ec18:\n    // 0x40ec18\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x40e840;\n  lab_0x40ec25:\n    // 0x40ec25\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x40ec38;\n  lab_0x40f06e:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x40f074\n    v14 = v48;\n    int64_t v170; // 0x40e420\n    int64_t v171; // 0x40e420\n    int64_t * v172; // 0x40e420\n    int64_t v173; // 0x40e420\n    int64_t v174; // bp-760, 0x40e420\n    uint64_t size5; // 0x40f078\n    if (v169 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        // 0x40f089\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x40f0e9;\n        } else {\n            // 0x40f095\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x40ea10_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40f0bd\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x40ea10_2;\n                } else {\n                    goto lab_0x40f0e9;\n                }\n            }\n        }\n    }\n  lab_0x40e9dc:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40f06e;\n    } else {\n        // 0x40e9e5\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40f06e;\n        } else {\n            goto lab_0x40ea10_2;\n        }\n    }\n  lab_0x40e8e2:\n    // 0x40e8e2\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40f2a9\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40f2c4\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f2d2\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x40e914\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x40e903\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x40e914\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x40ea10_2;\n  lab_0x40f002:\n    // 0x40f002\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        goto lab_0x40e8e2;\n    }\n  lab_0x40f0e9:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x40e420\n    int64_t v181; // 0x40e420\n    int64_t v182; // 0x40e420\n    int64_t v183; // 0x40e420\n    int64_t v184; // 0x40e420\n    int64_t v185; // 0x40e420\n    int64_t v186; // 0x40e420\n    int64_t v187; // 0x40e420\n    int64_t v188; // 0x40e420\n    int64_t v189; // 0x40e420\n    int64_t v190; // 0x40e420\n    int64_t v191; // 0x40e420\n    int64_t v192; // 0x40e420\n    int64_t v193; // 0x40e420\n    float80_t v194; // 0x40e420\n    float80_t v195; // 0x40e420\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40fc62\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40fc70\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40fd9d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40f5a9;\n    } else {\n        // 0x40f0f1\n        int64_t v198; // 0x40e420\n        float80_t v199; // 0x40e420\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40f8b1\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40f8be\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40f71a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40f11f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x40f128\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40f14c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40fc96\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40fc96\n                            v181 = v187 + 3;\n                            goto lab_0x40fe11;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40fe11;\n                            } else {\n                                goto lab_0x40fcd2;\n                            }\n                        }\n                    } else {\n                        // 0x40f9a3\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40f597;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40f9b1\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40fefa\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40f9f8\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40fa0b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40fa0e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40fa1c\n                                int64_t v209 = v187 + 1; // 0x40fa39\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40fa4e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40fa5b\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40f5a9;\n                        }\n                    }\n                } else {\n                    // 0x40f748\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40f748\n                        v180 = v187 + 1;\n                        goto lab_0x40fcf7;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40fcf7;\n                        } else {\n                            goto lab_0x40f768;\n                        }\n                    }\n                }\n            } else {\n                // 0x40f580\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40f597;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40facc\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40fadd\n                    char v215 = *v213; // 0x40fae4\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40fb20\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40fb2d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40faf5\n                        v182 = v218;\n                        int64_t v219; // 0x40fae7\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40f5a9;\n                }\n            }\n        } else {\n            float80_t v220; // 0x40e420\n            if (v220 != 0.0L) {\n                // 0x40f14c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40f79b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40f7aa\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40fa83\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40f5a9;\n        }\n    }\n  lab_0x40f5a9:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40f5ac\n    int64_t v229 = v228; // 0x40f5b2\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40f5b4\n        int64_t v232 = v231 + v224; // 0x40f5b7\n        int64_t v233 = v232 - v225; // 0x40f5be\n        if ((v230 & 2) != 0) {\n            // 0x40fa63\n            v229 = v233;\n            int64_t v234 = v224; // 0x40fa66\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40fa70\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40fa70\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40f8d5\n                int64_t v238 = v224; // 0x40f8db\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40f8e9\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40f8e0\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40f8f5\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40f908\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40f5e1\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40f601\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40f5f8\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40f60a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40f618\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40f14c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40f648\n    int64_t dest_mem5 = v48; // 0x40f655\n    int64_t v250 = v248; // 0x40f655\n    int64_t v251 = v47; // 0x40f655\n    int64_t v252; // 0x40e420\n    if (v47 - v46 > v248) {\n        goto lab_0x40f6d0;\n    } else {\n        if (v249 < v46) {\n            // 0x40f8a2\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x40ea10_2;\n            } else {\n                goto lab_0x40f6d0;\n            }\n        } else {\n            // 0x40f660\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40f6d0;\n            } else {\n                if (v47 != 0) {\n                    // 0x40fc38\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40ea10_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40fc3e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40f67e;\n                        } else {\n                            goto lab_0x40fc4a;\n                        }\n                    }\n                } else {\n                    // 0x40f66e\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40f67e;\n                    } else {\n                        goto lab_0x40fc4a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f6d0:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40f6e1\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40f6fd\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x40eb17;\n  lab_0x40f597:\n    // 0x40f597\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40f5a9;\n  lab_0x40fcf7:;\n    char * v257 = nl_langinfo(0x10000); // 0x40fd2a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40fd3b\n    char v259 = *v257; // 0x40fd42\n    int64_t v260 = v176 & 0xffffffff; // 0x40fd45\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40fd53\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40fd80\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40fd8d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40f768;\n  lab_0x40f768:\n    // 0x40f768\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40f5a9;\n  lab_0x40f67e:\n    // 0x40f67e\n    if (v48 == 0 || v48 == v20) {\n        // 0x40f91b\n        int64_t size7; // 0x40e420\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40f932\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x40ea10_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40f93e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f969\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40f6d0;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40f6ad\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x40ea10_2;\n        } else {\n            // 0x40f6bb\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40f6d0;\n        }\n    }\n  lab_0x40fc4a:\n    // 0x40fc4a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x40ea10_2;\n    } else {\n        goto lab_0x40f67e;\n    }\n  lab_0x40fe11:;\n    int64_t v265 = v187 + 4; // 0x40fe11\n    char v266 = *nl_langinfo(0x10000); // 0x40fe5c\n    int64_t v267 = v176 & 0xffffffff; // 0x40fe5f\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40fe66\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40fe8d\n        int64_t v270 = v265 + 1; // 0x40fe95\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40fcd2;\n  lab_0x40fcd2:\n    // 0x40fcd2\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40f5a9;\n}\n"
        },
        {
            "funcName": "function_40ff40",
            "funcStartAddr": "40ff40",
            "funcEndAddr": "410159",
            "decompiledFuncCode": "int64_t function_40ff40(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x40ffa3\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40ff58\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40ff69\n    g78 = v5;\n    int64_t v6; // 0x40ff40\n    int64_t v7; // 0x40ff40\n    int64_t v8; // 0x40ff40\n    int64_t v9; // 0x40ff40\n    int64_t v10; // 0x40ff40\n    int64_t v11; // 0x40ff40\n    int64_t v12; // 0x40ff40\n    uint32_t v13; // 0x410060\n    int64_t * v14; // 0x410090\n    int64_t v15; // 0x410098\n    uint32_t v16; // 0x4100e0\n    uint32_t v17; // 0x4100b0\n    int64_t * v18; // 0x410040\n    int64_t v19; // 0x410040\n    int64_t * v20; // 0x410050\n    int64_t v21; // 0x410050\n    int64_t * v22; // 0x410028\n    int64_t v23; // 0x410028\n    int64_t * v24; // 0x410010\n    int64_t v25; // 0x410010\n    int64_t * v26; // 0x410130\n    uint32_t v27; // 0x40fff0\n    int64_t v28; // 0x410130\n    int64_t * v29; // 0x410120\n    int64_t v30; // 0x410120\n    uint32_t v31; // 0x40ffd0\n    int64_t * v32; // 0x410148\n    int64_t v33; // 0x410148\n    int64_t v34; // 0x4100f3\n    uint32_t v35; // 0x40ffb0\n    int64_t v36; // 0x4100c7\n    uint32_t v37; // 0x40ff78\n    int32_t * v38; // 0x410060\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x40fff0\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x40fff7\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x410040\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x410003\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x40ff96\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x40ffd0\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x40ffd7\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x410050\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x40ffe3\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x40ff96\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x40ffb0\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x40ffb7\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x410028\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x40ffc3\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x40ff96\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x40ff78\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x40ff83\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x410010\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40ff8f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x40ff96\n            break;\n        }\n        case 11: {\n            // 0x410060\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x41006f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x410130\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x41007c\n            *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x40ff96\n            break;\n        }\n        case 12: {\n            // 0x410090\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x40ff96\n            break;\n        }\n        case 15: {\n            // 0x4100e0\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x4100e7\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x410120\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x4100f3\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x40ff96\n            break;\n        }\n        case 16: {\n            // 0x4100b0\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x4100bb\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x410148\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x4100c7\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x40ff96\n            break;\n        }\n        default: {\n            // 0x40ffa3\n            return 0xffffffff;\n        }\n    }\n    // 0x40ff96\n    v3++;\n    int64_t v39 = v4 + 32; // 0x40ffa1\n    while (v3 < v2) {\n        // 0x40ff60\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g78 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x40fff0\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x40fff7\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x410040\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x410003\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x40ff96\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x40ffd0\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x40ffd7\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x410050\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x40ffe3\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x40ff96\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x40ffb0\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x40ffb7\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x410028\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x40ffc3\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x40ff96\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x40ff78\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x40ff83\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x410010\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40ff8f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x40ff96\n                break;\n            }\n            case 11: {\n                // 0x410060\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x41006f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x410130\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x41007c\n                *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x40ff96\n                break;\n            }\n            case 12: {\n                // 0x410090\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x40ff96\n                break;\n            }\n            case 15: {\n                // 0x4100e0\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x4100e7\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x410120\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x4100f3\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x40ff96\n                break;\n            }\n            case 16: {\n                // 0x4100b0\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x4100bb\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x410148\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x4100c7\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x40ff96\n                break;\n            }\n            default: {\n                // 0x40ffa3\n                return 0xffffffff;\n            }\n        }\n        // 0x40ff96\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x40ffa3\n    return 0;\n}\n"
        },
        {
            "funcName": "function_410160",
            "funcStartAddr": "410160",
            "funcEndAddr": "410e69",
            "decompiledFuncCode": "int64_t function_410160(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x410162\n    int64_t v4 = v1 + 16; // 0x410166\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x410199\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x4101ae\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x4101db\n    int32_t v8 = 0; // 0x4101e0\n    int64_t v9 = 0; // 0x4101e0\n    int64_t v10 = v3; // 0x4101e0\n    int64_t v11 = a1; // 0x4101e0\n    int64_t v12 = 0; // 0x4101e0\n    char v13; // 0x410160\n    int64_t v14; // 0x410160\n    int64_t v15; // 0x410160\n    int64_t v16; // 0x410160\n    int64_t v17; // 0x410160\n    int64_t v18; // 0x410160\n    int64_t v19; // 0x410160\n    int64_t v20; // 0x410160\n    int64_t v21; // 0x410160\n    int64_t v22; // 0x410160\n    int64_t v23; // 0x410160\n    int64_t v24; // 0x410160\n    int64_t v25; // 0x410160\n    int64_t v26; // 0x410160\n    int64_t v27; // 0x410160\n    int64_t v28; // 0x410160\n    int64_t v29; // 0x410160\n    int64_t v30; // 0x410160\n    int32_t v31; // 0x410160\n    int64_t v32; // 0x410160\n    int64_t v33; // 0x4101d0\n    int64_t v34; // 0x410220\n    int64_t * v35; // 0x410243\n    int64_t v36; // 0x4102a6\n    if (v7 != 0) {\n        // 0x4101d0\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x410160\n        int64_t v38 = 7; // 0x410160\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x410160\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x4101d0:\n            // 0x4101d0\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x410213\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x410228\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x410264\n                int64_t v43 = v42; // 0x410264\n                int64_t v44 = v43; // 0x41026d\n                int64_t v45 = v33; // 0x41026d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x410600\n                    char v47 = *(char *)v46; // 0x410604\n                    int64_t v48 = v46; // 0x41060d\n                    while (v47 < 58) {\n                        // 0x410600\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x41060f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x410ca5\n                        char v52 = *(char *)v51; // 0x410ca5\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x410ca9\n                        int64_t v54 = v33; // 0x410cbd\n                        int64_t v55 = v51; // 0x410cbd\n                        char v56 = v52; // 0x410cbd\n                        int64_t v57 = v53; // 0x410cbd\n                        bool v58 = v52 < 58; // 0x410cbd\n                        bool v59 = v52 < 58; // 0x410cbd\n                        char v60 = v52; // 0x410cbd\n                        int64_t v61 = v51; // 0x410cbd\n                        int64_t v62; // 0x410cd2\n                        int64_t v63; // 0x410ca5\n                        char v64; // 0x410ca5\n                        int64_t v65; // 0x410ca9\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x410928_9;\n                            }\n                            // 0x410ca3\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x410cbf\n                                if (v64 >= 58) {\n                                    goto lab_0x410928_9;\n                                }\n                                // 0x410ca3\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x410c78\n                        while (v58) {\n                            // 0x410c7e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x410928_9;\n                                }\n                                // 0x410ca3\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x410cbf\n                                    if (v64 >= 58) {\n                                        goto lab_0x410928_9;\n                                    }\n                                    // 0x410ca3\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x410c74\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x410d7d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x410928_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x410d8e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x410160\n                v36 = v45;\n                char v70; // 0x410160\n                while (true) {\n                    // 0x4102a6\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x4102c0\n                                *v41 = *v41 | 2;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                            case 43: {\n                                // 0x4102d0\n                                *v41 = *v41 | 4;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                            case 32: {\n                                // 0x4102e0\n                                *v41 = *v41 | 8;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                            case 35: {\n                                // 0x4102f0\n                                *v41 = *v41 | 16;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                            case 48: {\n                                // 0x410300\n                                *v41 = *v41 | 32;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x410308\n                                    break;\n                                }\n                                // 0x410296\n                                *v41 = *v41 | 64;\n                                // break -> 0x4102a0\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x4102af\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x4102a0\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x410160\n                int64_t * v72; // 0x410231\n                int64_t * v73; // 0x41023a\n                if (v70 == 42) {\n                    // 0x41037d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x41039d\n                    int64_t v75 = v74; // 0x41039d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x4103a1\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x4103a7\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x41077d\n                        char v80 = *(char *)v79; // 0x410781\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x41077d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x41078d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x410791\n                        int64_t v82 = v36; // 0x410791\n                        int64_t v83 = 0; // 0x410791\n                        if (v80 != 36) {\n                            goto lab_0x4103ad;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x4107c2\n                            int64_t v89 = v85; // 0x4107c2\n                            int64_t v90 = v87; // 0x4107c2\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x4107c7\n                            int64_t v95 = v92 + 1; // 0x4107ca\n                            char v96 = *(char *)v95; // 0x4107ca\n                            int64_t v97 = v96; // 0x4107ca\n                            while (v94 < v91) {\n                                // 0x4107e1\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x410928_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x41079b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x4107a4\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x4107e1\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x410928_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x41079b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x410e1b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x410928_9;\n                            }\n                            // 0x410e29\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x4103bc;\n                        }\n                    } else {\n                        goto lab_0x4103ad;\n                    }\n                } else {\n                    // 0x41030d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x410160\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x410a2b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x410a30\n                        int64_t v102 = v71; // 0x410a39\n                        char * v103 = v100; // 0x410a39\n                        int64_t v104 = v36; // 0x410a39\n                        int64_t v105 = v71; // 0x410a39\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x410a43\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x410a43\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x410a43\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x410a52\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x410a75\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x410318;\n                }\n            } else {\n                goto lab_0x4101d8;\n            }\n        }\n    }\n  lab_0x4101e2:\n    // 0x4101e2\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x410204\n    return 0;\n  lab_0x410928_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x410933\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x410945\n    if (v3 != v115) {\n        // 0x410950\n        free((int64_t *)v115);\n    }\n    // 0x410955\n    *__errno_location() = 22;\n    // 0x410204\n    return 0xffffffff;\n  lab_0x410b00_5:;\n    // 0x410b00\n    int64_t v116; // 0x410160\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x410b05\n    int64_t v119; // 0x410160\n    if (v4 == v117) {\n        goto lab_0x410b19_3;\n    } else {\n        // 0x410b07\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x410b19_3;\n    }\n  lab_0x410b19_3:;\n    int64_t v120 = *v5; // 0x410b19\n    int32_t * v121; // 0x410b29\n    if (v3 == v120) {\n        // 0x410b29\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x410b24\n    free((int64_t *)v120);\n    // 0x410b29\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x4101d8:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x4101db\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x4101e2\n        goto lab_0x4101e2;\n    }\n    goto lab_0x4101d0;\n  lab_0x4103ad:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x4103ad\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x410753\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x410928_9;\n        }\n        // 0x41076b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x4103bc;\n  lab_0x410318:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x41031b\n    int64_t v147 = v339; // 0x41031b\n    int64_t v145 = v338; // 0x41031b\n    int64_t v143 = v337; // 0x41031b\n    int64_t v186; // 0x410160\n    int64_t v190; // 0x410160\n    int64_t v189; // 0x410160\n    int64_t v188; // 0x410160\n    int64_t v187; // 0x410160\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x410420;\n    } else {\n        goto lab_0x410321;\n    }\n  lab_0x4103bc:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x4103bc\n    int64_t v132 = v128; // 0x4103c3\n    int64_t v133 = v16; // 0x4103c3\n    int64_t v134 = v131; // 0x4103c3\n    int64_t v135; // 0x410160\n    int64_t v136; // 0x410160\n    int64_t v137; // 0x410160\n    int64_t v138; // 0x41066f\n    if (v16 > v127) {\n        goto lab_0x4103cc;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x410665\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x410b00_5;\n        }\n        int64_t size = 32 * v138; // 0x41068e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x410bec\n            if (mem == NULL) {\n                goto lab_0x410b19_3;\n            }\n            // 0x410c0e\n            v135 = (int64_t)mem;\n            goto lab_0x410c19;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x4106af\n            int64_t v140 = *v6; // 0x4106b4\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x410b00_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x4106af\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x410c19;\n            } else {\n                goto lab_0x4106ed;\n            }\n        }\n    }\n  lab_0x410321:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x410328\n    int64_t v151 = v146; // 0x410328\n    int64_t v152 = v144; // 0x410328\n    uint64_t v153; // 0x410160\n    int64_t v154; // 0x410160\n    int64_t v155; // 0x410367\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x41036b\n        int64_t v158; // 0x410160\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x4104d0\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x410363\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x4104d8\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x410360\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x410363\n                    break;\n                }\n            }\n        } else {\n            // 0x410370\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x410363\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x4104d8\n    int64_t v162 = v161 % 256; // 0x4104e4\n    g79 = v162;\n    int64_t v163 = 17; // 0x4104e7\n    int64_t v164 = v154; // 0x4104e7\n    int64_t v165 = v154; // 0x4104e7\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x410551;\n        }\n        case 28: {\n            goto lab_0x4108a2;\n        }\n        case 30: {\n            // 0x4108ce\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x4104f9;\n        }\n        case 32: {\n            goto lab_0x4108a2;\n        }\n        case 33: {\n            goto lab_0x4108a2;\n        }\n        case 34: {\n            goto lab_0x4108a2;\n        }\n        case 46: {\n            // 0x4108bf\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x4104f9;\n        }\n        case 51: {\n            goto lab_0x4108dd;\n        }\n        case 60: {\n            goto lab_0x4108a2;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x4107f9\n            int32_t v167 = v166 - 7; // 0x4107f9\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x4107ff\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x4104f9;\n        }\n        case 63: {\n            goto lab_0x410850;\n        }\n        case 64: {\n            goto lab_0x4108a2;\n        }\n        case 65: {\n            goto lab_0x4108a2;\n        }\n        case 66: {\n            goto lab_0x4108a2;\n        }\n        case 68: {\n            goto lab_0x410850;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x41080f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x410815\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x41081d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x41082b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x41083f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x4104f9;\n        }\n        case 74: {\n            goto lab_0x4108dd;\n        }\n        case 75: {\n            goto lab_0x4104f9;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x4104f0\n            int32_t v172 = v171 - 7; // 0x4104f0\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x4104f6\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x4104f9;\n        }\n        case 80: {\n            goto lab_0x4108dd;\n        }\n        case 83: {\n            goto lab_0x4108dd;\n        }\n        default: {\n            goto lab_0x410928_9;\n        }\n    }\n  lab_0x4103cc:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x4103e3\n        int64_t v178 = v176; // 0x410160\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x4103d8\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x4103d8\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x4103f1\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x4103fd\n    int32_t v182 = *v181; // 0x4103fd\n    if (v182 != 0) {\n        // 0x410a7e\n        if (v182 != 5) {\n            goto lab_0x410928_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x410a87\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x410318;\n    } else {\n        // 0x410407\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x41040d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x410321;\n        } else {\n            goto lab_0x410420;\n        }\n    }\n  lab_0x410420:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x410420\n    char v197 = *v196; // 0x410420\n    int64_t * v198; // 0x410248\n    *v198 = v192;\n    int64_t v199; // 0x410160\n    int64_t v200; // 0x410160\n    int64_t v201; // 0x410160\n    int64_t v202; // 0x410160\n    int64_t v203; // 0x410160\n    int64_t * v204; // 0x410251\n    int64_t * v205; // 0x41025a\n    int64_t v206; // 0x410439\n    if (v197 != 42) {\n        char v207 = *v196; // 0x410620\n        int64_t v208 = v193; // 0x410629\n        char * v209; // 0x410160\n        int64_t v210; // 0x410160\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x410630\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x410634\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x410630\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x41063e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x410620\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x410651\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x410321;\n    } else {\n        // 0x41042f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x41044f\n        int64_t v219 = v218; // 0x41044f\n        int64_t v220 = v219 + 0xffffffd0; // 0x410453\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x410459\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x410d04\n            char v224 = *(char *)v223; // 0x410d08\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x410d04\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x410d14\n            v201 = v223;\n            int64_t v225 = v219; // 0x410d18\n            int64_t v226 = v206; // 0x410d18\n            int64_t v227 = 0; // 0x410d18\n            if (v224 != 36) {\n                goto lab_0x41045f;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x410d49\n                int64_t v233 = v229; // 0x410d49\n                int64_t v234 = v231; // 0x410d49\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x410d4e\n                int64_t v239 = v236 + 1; // 0x410d55\n                char v240 = *(char *)v239; // 0x410d59\n                int64_t v241 = v240; // 0x410d59\n                while (v238 < v235) {\n                    // 0x410d67\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x410928_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x410d22\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x410d2b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x410d67\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x410928_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x410d22\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x410e37\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x410928_9;\n                }\n                // 0x410e45\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x41046e;\n            }\n        } else {\n            goto lab_0x41045f;\n        }\n    }\n  lab_0x410551:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x410556\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x41055e\n    *a2 = v245;\n    int64_t v246; // 0x410160\n    int64_t v247; // 0x410160\n    int64_t dest_mem; // 0x410160\n    int64_t v248; // 0x410160\n    int64_t v249; // 0x410e53\n    if (v246 > v245) {\n        // 0x41056a\n        goto lab_0x4101d8;\n    } else {\n        if (v246 < 0) {\n            // 0x410e53\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x410b00_5;\n        }\n        int64_t v250 = 2 * v246; // 0x410586\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x410e53\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x410b00_5;\n        }\n        int64_t v251 = *v5; // 0x410597\n        int64_t size2 = 176 * v246; // 0x4105a9\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x4106f9\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x410c5c\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x410b29\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x410b07\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x410b19_3;\n            }\n            goto lab_0x410714;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x4105bb\n            if (mem4 == NULL) {\n                // 0x410e53\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x410b00_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x4105bb\n            int64_t v254 = *v5; // 0x4105dd\n            int64_t v255 = *a2; // 0x4105e1\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x410714;\n            } else {\n                goto lab_0x4105ef;\n            }\n        }\n    }\n  lab_0x4108a2:\n    // 0x4108a2\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x4108b7\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x4104f9;\n  lab_0x4108dd:;\n    uint32_t v335 = (int32_t)v153; // 0x4108e5\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x4108eb\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4108f3\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x410901\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x41090e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4104f9;\n  lab_0x410850:;\n    uint32_t v336 = (int32_t)v153; // 0x410858\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x41085e\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x410866\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x410874\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x410881\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4104f9;\n  lab_0x4104f9:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x410160\n    int64_t v260; // 0x410160\n    int64_t * v261; // 0x41025f\n    if (v259 == -1) {\n        // 0x410a04\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x410928_9;\n        }\n        // 0x410a1c\n        v260 = v148;\n    } else {\n        // 0x410503\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x410508\n    int64_t v264 = v258; // 0x41050f\n    int64_t v265 = v162; // 0x41050f\n    int64_t v266 = v263; // 0x41050f\n    int64_t v267; // 0x410160\n    int64_t v268; // 0x410160\n    int64_t v269; // 0x410160\n    int64_t v270; // 0x410160\n    int64_t v271; // 0x410160\n    if (v142 > v262) {\n        goto lab_0x410515;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x410978\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x410982\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x410b00_5;\n        }\n        int64_t size3 = 32 * v273; // 0x4109a1\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x4109b4\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x410a99\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x410b19_3;\n            }\n            goto lab_0x410ab6;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x4109c1\n            if (mem6 == NULL) {\n                // 0x410e53\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x410b00_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x4109c1\n            int64_t v276 = v274 & 0xffffffff; // 0x4109c6\n            int64_t v277 = *v6; // 0x4109f1\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x410ab6;\n            } else {\n                goto lab_0x4109fb;\n            }\n        }\n    }\n  lab_0x410515:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x41052b\n        int64_t v282 = v279; // 0x410160\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x410520\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x410520\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x410539\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x410545\n    int32_t v286 = *v285; // 0x410545\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x41096a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x410928_9;\n        }\n    } else {\n        // 0x41054f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x410551;\n  lab_0x410c19:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x410c19\n    int64_t * v290; // 0x410160\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x4106ed;\n  lab_0x4106ed:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x4103cc;\n  lab_0x41045f:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x41045f\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x410cda\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x410928_9;\n        }\n        // 0x410cf2\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x41046e;\n  lab_0x41046e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x41046e\n    int64_t v300 = v296; // 0x410475\n    int64_t v301 = v191; // 0x410475\n    int64_t v302 = v299; // 0x410475\n    int64_t v303; // 0x410160\n    int64_t v304; // 0x410160\n    int64_t v305; // 0x410160\n    int64_t v306; // 0x410b52\n    if (v191 > v295) {\n        goto lab_0x41047e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x410b48\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x410b00_5;\n        }\n        int64_t size4 = 32 * v306; // 0x410b6d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x410d9e\n            if (mem7 == NULL) {\n                goto lab_0x410b19_3;\n            }\n            // 0x410dc0\n            v304 = (int64_t)mem7;\n            goto lab_0x410dcb;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x410b8e\n            int64_t v308 = *v6; // 0x410b93\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x410b00_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x410b8e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x410dcb;\n            } else {\n                goto lab_0x410bcc;\n            }\n        }\n    }\n  lab_0x410714:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x410160\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x4105ef;\n  lab_0x4105ef:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x4101d8;\n  lab_0x410ab6:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x410acc\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x4109fb;\n  lab_0x4109fb:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x410515;\n  lab_0x41047e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x410493\n        int64_t v324 = v322; // 0x410160\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x410488\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x410488\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x4104a1\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x4104ae\n    int32_t v328 = *v327; // 0x4104ae\n    if (v328 != 0) {\n        // 0x410bd5\n        if (v328 != 5) {\n            goto lab_0x410928_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x410bde\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x4104b8\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x4104c1\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x410321;\n  lab_0x410dcb:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x410dcb\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x410bcc;\n  lab_0x410bcc:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x41047e;\n}\n"
        },
        {
            "funcName": "function_410e70",
            "funcStartAddr": "410e70",
            "funcEndAddr": "410ecd",
            "decompiledFuncCode": "int64_t function_410e70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x410e70\n    return function_4018e8();\n}\n"
        },
        {
            "funcName": "function_410ed0",
            "funcStartAddr": "410ed0",
            "funcEndAddr": "410ed1",
            "decompiledFuncCode": "int64_t function_410ed0(void) {\n    // 0x410ed0\n    int64_t result; // 0x410ed0\n    return result;\n}\n"
        },
        {
            "funcName": "function_410ee0",
            "funcStartAddr": "410ee0",
            "funcEndAddr": "410ef8",
            "decompiledFuncCode": "int64_t function_410ee0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x410ee0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g31);\n}\n"
        },
        {
            "funcName": "function_410ef8",
            "funcStartAddr": "410ef8",
            "funcEndAddr": "410f18",
            "decompiledFuncCode": "int64_t function_410ef8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g27; // 0x410f02\n    while (*(int64_t *)v1 != -1) {\n        // 0x410f03\n        v1 -= 8;\n    }\n    // 0x410f14\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_touch.elf"
}