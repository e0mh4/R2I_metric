{
    "funcInfo": [
        {
            "funcName": "function_401ba0",
            "funcStartAddr": "401ba0",
            "funcEndAddr": "401ba5",
            "decompiledFuncCode": "int64_t function_401ba0(void) {\n    // 0x401ba0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ba5",
            "funcStartAddr": "401ba5",
            "funcEndAddr": "401baa",
            "decompiledFuncCode": "int64_t function_401ba5(void) {\n    // 0x401ba5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401baa",
            "funcStartAddr": "401baa",
            "funcEndAddr": "401baf",
            "decompiledFuncCode": "int64_t function_401baa(void) {\n    // 0x401baa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401baf",
            "funcStartAddr": "401baf",
            "funcEndAddr": "401bb4",
            "decompiledFuncCode": "int64_t function_401baf(void) {\n    // 0x401baf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb4",
            "funcStartAddr": "401bb4",
            "funcEndAddr": "401bb9",
            "decompiledFuncCode": "int64_t function_401bb4(void) {\n    // 0x401bb4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb9",
            "funcStartAddr": "401bb9",
            "funcEndAddr": "401bbe",
            "decompiledFuncCode": "int64_t function_401bb9(void) {\n    // 0x401bb9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bbe",
            "funcStartAddr": "401bbe",
            "funcEndAddr": "401bc3",
            "decompiledFuncCode": "int64_t function_401bbe(void) {\n    // 0x401bbe\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bc3",
            "funcStartAddr": "401bc3",
            "funcEndAddr": "401bc8",
            "decompiledFuncCode": "int64_t function_401bc3(void) {\n    // 0x401bc3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bd0",
            "funcStartAddr": "401bd0",
            "funcEndAddr": "401d85",
            "decompiledFuncCode": "int64_t function_401bd0(int64_t a1, int64_t a2) {\n    // 0x401bd0\n    function_4041a0(a2);\n    setlocale(LC_ALL, (char *)&g24);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g35 = 3;\n    int64_t v1; // 0x401bd0\n    function_416460(0x403a90, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    function_403bd0(a1 & 0xffffffff, a2, \"expr\", \"GNU coreutils\", \"8.29\", 0x402220);\n    uint32_t v2 = (int32_t)a1; // 0x401c56\n    char * format; // 0x401d63\n    if (v2 < 2) {\n        // 0x401d57\n        format = dcgettext(NULL, \"missing operand\", 5);\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n        function_402220(2);\n        // UNREACHABLE\n    }\n    int64_t str = a2 + 8;\n    int64_t v3 = str; // 0x401c73\n    if (strcmp((char *)*(int64_t *)str, \"--\") == 0) {\n        if (v2 == 2) {\n            // 0x401d57\n            format = dcgettext(NULL, \"missing operand\", 5);\n            error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n            function_402220(2);\n            // UNREACHABLE\n        }\n        // 0x401c79\n        v3 = a2 + 16;\n    }\n    // 0x401c82\n    g50 = v3;\n    int64_t v4 = function_4039c0(1); // 0x401c92\n    int64_t v5 = *(int64_t *)g50; // 0x401ca1\n    if (v5 != 0) {\n        // 0x401d23\n        function_405a90(0, 8, v5);\n        error(2, (int32_t)\"syntax error: unexpected argument %s\" ^ (int32_t)\"syntax error: unexpected argument %s\", dcgettext(NULL, \"syntax error: unexpected argument %s\", 5));\n        // 0x401d57\n        format = dcgettext(NULL, \"missing operand\", 5);\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n        function_402220(2);\n        // UNREACHABLE\n    }\n    int32_t v6 = *(int32_t *)v4; // 0x401ca9\n    if (v6 != 0) {\n        if (v6 != 1) {\n            // 0x401d80\n            abort();\n            // UNREACHABLE\n        }\n        // 0x401cb8\n        puts((char *)*(int64_t *)(v4 + 8));\n        // 0x401cc1\n        return function_402090(v4) % 256;\n    }\n    // 0x401cd3\n    int64_t v7; // bp-56, 0x401bd0\n    int64_t v8 = function_403b30(*(int64_t *)(v4 + 8), &v7); // 0x401ce1\n    fputs_unlocked((char *)v8, g45);\n    int64_t v9 = (int64_t)g45; // 0x401cf1\n    int64_t * v10 = (int64_t *)(v9 + 40); // 0x401cf8\n    uint64_t v11 = *v10; // 0x401cf8\n    if (v11 >= *(int64_t *)(v9 + 48)) {\n        // 0x401d17\n        __overflow(g45, 10);\n    } else {\n        // 0x401d02\n        *v10 = v11 + 1;\n        *(char *)v11 = 10;\n    }\n    // 0x401cc1\n    return function_402090(v4) % 256;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401d90",
            "funcEndAddr": "401dbb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401d90\n    int64_t v1; // 0x401d90\n    __libc_start_main(0x401bd0, (int32_t)a4, (char **)&v1, (void (*)())0x4163f0, (void (*)())0x416450, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dbb",
            "funcStartAddr": "401dbb",
            "funcEndAddr": "401dda",
            "decompiledFuncCode": "int64_t function_401dbb(void) {\n    // 0x401dbb\n    return &g44;\n}\n"
        },
        {
            "funcName": "function_401dda",
            "funcStartAddr": "401dda",
            "funcEndAddr": "401e11",
            "decompiledFuncCode": "int64_t function_401dda(void) {\n    // 0x401dda\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401e11",
            "funcStartAddr": "401e11",
            "funcEndAddr": "401e68",
            "decompiledFuncCode": "int64_t function_401e11(void) {\n    // 0x401e11\n    if (g48 != 0) {\n        // 0x401e67\n        int64_t result; // 0x401e11\n        return result;\n    }\n    int64_t v1 = g49; // 0x401e44\n    int64_t result2; // 0x401e56\n    if (g49 >= ((int64_t)&g32 - (int64_t)&g31 >> 3) - 1) {\n        // 0x401e56\n        result2 = function_401dbb();\n        g48 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g32 - (int64_t)&g31 >> 3) - 1) {\n        // 0x401e46\n        v1++;\n    }\n    // 0x401e3a\n    g49 = v1;\n    // 0x401e56\n    result2 = function_401dbb();\n    g48 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401e68",
            "funcStartAddr": "401e68",
            "funcEndAddr": "401e6d",
            "decompiledFuncCode": "int64_t function_401e68(void) {\n    // 0x401e68\n    return function_401dda();\n}\n"
        },
        {
            "funcName": "function_401e70",
            "funcStartAddr": "401e70",
            "funcEndAddr": "401ea1",
            "decompiledFuncCode": "int64_t function_401e70(int64_t a1, uint64_t a2, uint64_t a3) {\n    if (a2 == -0x8000000000000000 == a3 == -1) {\n        // 0x401e8d\n        *(int64_t *)a1 = 0;\n        return -0x8000000000000000;\n    }\n    // 0x401e98\n    *(int64_t *)a1 = a2 % a3;\n    return a2 / a3;\n}\n"
        },
        {
            "funcName": "function_401eb0",
            "funcStartAddr": "401eb0",
            "funcEndAddr": "401edf",
            "decompiledFuncCode": "int64_t function_401eb0(int64_t * str2) {\n    int64_t str = *(int64_t *)g50; // 0x401ebd\n    int64_t result = 0; // 0x401ec3\n    if (str != 0) {\n        int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x401ec5\n        int64_t v1 = strcmp_rc == 0; // 0x401ecc\n        g50 += 8 * v1;\n        result = (int64_t)(strcmp_rc & -256) | v1;\n    }\n    // 0x401edd\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "401fd0",
            "decompiledFuncCode": "int64_t function_401ee0(int64_t a1) {\n    // 0x401ee0\n    error(3, ERANGE, \"%c\", (char)a1);\n    int64_t v1 = *(int64_t *)34; // 0x401f00\n    int64_t v2 = v1 - 0x6325; // 0x401f09\n    if ((0x6324 - v1 & v1) >= 0) {\n        // 0x401f1a\n        *(int64_t *)3 = v2;\n        return 0;\n    }\n    // 0x401f1e\n    function_401ee0(45);\n    int64_t v3 = *(int64_t *)34; // 0x401f30\n    uint64_t v4 = *(int64_t *)v2; // 0x401f33\n    int64_t v5 = v4 + v3; // 0x401f36\n    int64_t v6 = -v4; // 0x401f3a\n    int64_t result = v4 / 0x8000000000000000; // 0x401f40\n    if ((char)(v6 < 0 == ((v5 ^ v3) & (v3 ^ v6)) < 0 == (v4 != 0)) == (char)result) {\n        // 0x401f48\n        *(int64_t *)45 = v5;\n        return result;\n    }\n    // 0x401f4c\n    function_401ee0(43);\n    uint64_t result2 = *(int64_t *)34; // 0x401f60\n    uint64_t v7 = *(int64_t *)v5; // 0x401f63\n    uint64_t v8 = v7 * result2; // 0x401f69\n    if (result2 == 0 || v7 == 0) {\n        // 0x401f8d\n        *(int64_t *)43 = v8;\n        return result2;\n    }\n    int64_t v9 = v7 / 0x8000000000000000; // 0x401f7e\n    int64_t v10 = v8 / 0x8000000000000000; // 0x401f82\n    int64_t result3 = v9 ^ result2 / 0x8000000000000000;\n    if ((char)result3 == (char)v10) {\n        // 0x401f8d\n        *(int64_t *)43 = v8;\n        return result3;\n    }\n    // 0x401f91\n    function_401ee0(42);\n    uint64_t v11 = *(int64_t *)v10; // 0x401fa0\n    uint64_t v12 = *(int64_t *)v9; // 0x401fa3\n    if (v11 == -0x8000000000000000 == v12 == -1) {\n        // 0x401fc4\n        return function_401ee0(47);\n    }\n    uint64_t result4 = v11 / v12;\n    *(int64_t *)42 = result4;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_401fd0",
            "funcStartAddr": "401fd0",
            "funcEndAddr": "402020",
            "decompiledFuncCode": "int64_t function_401fd0(int64_t a1) {\n    // 0x401fd0\n    if (*(int64_t *)g50 != 0) {\n        // 0x401fdd\n        return g50;\n    }\n    // 0x401fde\n    function_405a90(0, 8, *(int64_t *)(g50 - 8));\n    error(2, (int32_t)\"syntax error: missing argument after %s\" ^ (int32_t)\"syntax error: missing argument after %s\", dcgettext(NULL, \"syntax error: missing argument after %s\", 5));\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_402020",
            "funcStartAddr": "402020",
            "funcEndAddr": "40204a",
            "decompiledFuncCode": "int64_t function_402020(int64_t a1) {\n    if ((int32_t)a1 != 1) {\n        // 0x402029\n        free((int64_t *)a1);\n        return &g67;\n    }\n    // 0x402038\n    free((int64_t *)*(int64_t *)(a1 + 8));\n    free((int64_t *)a1);\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_402050",
            "funcStartAddr": "402050",
            "funcEndAddr": "402082",
            "decompiledFuncCode": "int64_t function_402050(int64_t a1) {\n    int64_t result = function_406620(16); // 0x40205e\n    *(int32_t *)result = 1;\n    *(int64_t *)(result + 8) = function_406850(a1);\n    return result;\n}\n"
        },
        {
            "funcName": "function_402090",
            "funcStartAddr": "402090",
            "funcEndAddr": "4020ec",
            "decompiledFuncCode": "int64_t function_402090(int64_t a1) {\n    int32_t v1 = a1;\n    if (v1 == 0) {\n        // 0x402096\n        return a1 & 0xffffff00 | (int64_t)(*(int64_t *)(a1 + 8) == 0);\n    }\n    if (v1 != 1) {\n        // 0x4020e6\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v2 = *(int64_t *)(a1 + 8); // 0x4020a5\n    char v3 = *(char *)v2; // 0x4020ae\n    if (v3 == 0) {\n        // 0x4020da\n        return 1;\n    }\n    int64_t v4 = v2 + (int64_t)(v3 == 45); // 0x4020bd\n    int64_t v5 = v4; // 0x4020c3\n    char v6 = *(char *)v4; // 0x4020c3\n    int64_t result = 0; // 0x4020d6\n    while (v6 == 48) {\n        // 0x4020c8\n        v5++;\n        v6 = *(char *)v5;\n        result = 1;\n        if (v6 == 0) {\n            // break -> 0x4020da\n            break;\n        }\n        result = 0;\n    }\n    // 0x4020da\n    return result;\n}\n"
        },
        {
            "funcName": "function_4020f0",
            "funcStartAddr": "4020f0",
            "funcEndAddr": "4021c2",
            "decompiledFuncCode": "int64_t function_4020f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4020f0\n    __assert_fail(\"iter->cur.wc == 0\", \"./lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021d0",
            "funcStartAddr": "4021d0",
            "funcEndAddr": "402212",
            "decompiledFuncCode": "int64_t function_4021d0(int64_t a1) {\n    int32_t v1 = a1;\n    if (v1 != 0) {\n        // 0x402208\n        if (v1 == 1) {\n            // 0x4021fc\n            return 1;\n        }\n        // 0x40220d\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x4021de\n    int64_t v3; // bp-40, 0x4021d0\n    int64_t v4 = function_403b30(*v2, &v3); // 0x4021e5\n    int64_t result = function_406850(v4); // 0x4021ed\n    *(int32_t *)a1 = 1;\n    *v2 = result;\n    // 0x4021fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_402220",
            "funcStartAddr": "402220",
            "funcEndAddr": "402630",
            "decompiledFuncCode": "int64_t function_402220(int64_t a1) {\n    int32_t status = a1; // 0x402236\n    if (status != 0) {\n        // 0x40223a\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40225f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402266\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s EXPRESSION\\n  or:  %s OPTION\\n\", 5));\n    int64_t v1 = (int64_t)g45; // 0x402287\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40228e\n    uint64_t v3 = *v2; // 0x40228e\n    if (v3 >= *(int64_t *)(v1 + 48)) {\n        // 0x402621\n        __overflow(g45, 10);\n    } else {\n        // 0x40229c\n        *v2 = v3 + 1;\n        *(char *)v3 = 10;\n    }\n    // 0x4022a7\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\nPrint the value of EXPRESSION to standard output.  A blank line below\\nseparates increasing precedence groups.  EXPRESSION may be:\\n\\n  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2\\n\\n  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherwise 0\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\n  ARG1 < ARG2       ARG1 is less than ARG2\\n  ARG1 <= ARG2      ARG1 is less than or equal to ARG2\\n  ARG1 = ARG2       ARG1 is equal to ARG2\\n  ARG1 != ARG2      ARG1 is unequal to ARG2\\n  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2\\n  ARG1 > ARG2       ARG1 is greater than ARG2\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\n  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2\\n  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\n  ARG1 * ARG2       arithmetic product of ARG1 and ARG2\\n  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2\\n  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\n  STRING : REGEXP   anchored pattern match of REGEXP in STRING\\n\\n  match STRING REGEXP        same as STRING : REGEXP\\n  substr STRING POS LENGTH   substring of STRING, POS counted from 1\\n  index STRING CHARS         index in STRING where any CHARS is found, or 0\\n  length STRING              length of STRING\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"  + TOKEN                    interpret TOKEN as a string, even if it is a\\n                               keyword like 'match' or an operator like '/'\\n\\n  ( EXPRESSION )             value of EXPRESSION\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\nBeware that many operators need to be escaped or quoted for shells.\\nComparisons are arithmetic if both ARGs are numbers, else lexicographical.\\nPattern matches return the string matched between \\\\( and \\\\) or null; if\\n\\\\( and \\\\) are not used, they return the number of characters matched or 0.\\n\", 5), g45);\n    fputs_unlocked(dcgettext(NULL, \"\\nExit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null\\nor 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.\\n\", 5), g45);\n    int64_t v4 = &g1; // bp-136, 0x402405\n    bool v5; // 0x402220\n    int64_t v6 = v5 ? -1 : 1;\n    int64_t v7 = &v4;\n    int64_t v8 = v7 + 16; // 0x402488\n    int64_t v9 = *(int64_t *)v8; // 0x40248c\n    int64_t v10 = 5; // 0x402492\n    while (v9 != 0) {\n        int64_t v11 = (int64_t)\"expr\";\n        int64_t v12 = v9;\n        unsigned char v13 = *(char *)v11; // 0x40249e\n        char v14 = *(char *)v12; // 0x40249e\n        char v15 = v14; // 0x40249e\n        bool v16 = false; // 0x40249e\n        while (v13 == v14) {\n            // 0x402494\n            v10--;\n            int64_t v17 = v12 + v6; // 0x40249e\n            int64_t v18 = v11 + v6; // 0x40249e\n            v15 = v13;\n            v16 = true;\n            if (v10 == 0) {\n                // break -> \n                break;\n            }\n            v11 = v18;\n            v12 = v17;\n            v13 = *(char *)v11;\n            v14 = *(char *)v12;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v19 = v15;\n        if ((v13 >= v19 && !v16) == v13 < v19) {\n            // break -> 0x4024aa\n            break;\n        }\n        v7 = v8;\n        v8 = v7 + 16;\n        v9 = *(int64_t *)v8;\n        v10 = 5;\n    }\n    // 0x4024aa\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v7 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4025e7;\n        } else {\n            // 0x4025d1\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402578\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402508;\n            } else {\n                goto lab_0x4025e7;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402508;\n        } else {\n            // 0x4024f2\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402578\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402508;\n            } else {\n                goto lab_0x402508;\n            }\n        }\n    }\n  lab_0x4025e7:\n    // 0x4025e7\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402548\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40225f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402508:\n    // 0x402508\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402548\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40225f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402630",
            "funcStartAddr": "402630",
            "funcEndAddr": "402a10",
            "decompiledFuncCode": "int64_t function_402630(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t str = *(int64_t *)(a2 + 8); // 0x402650\n    int64_t v1 = 0; // bp-456, 0x40265c\n    int64_t v2 = 0; // bp-424, 0x40267e\n    g64 = 710;\n    int32_t len = strlen((char *)str); // 0x4026a4\n    int64_t v3 = function_415280(str, (int64_t)len, &v2); // 0x4026b4\n    int32_t v4; // 0x402630\n    int64_t v5; // 0x402630\n    int64_t v6; // 0x402630\n    int64_t v7; // 0x402630\n    int64_t result3; // 0x402630\n    int32_t v8; // bp-324, 0x402630\n    int64_t v9; // 0x402630\n    int64_t ps; // bp-356, 0x402630\n    char v10; // 0x402630\n    char v11; // 0x402630\n    char v12; // 0x402630\n    char * str3; // 0x402630\n    int64_t v13; // 0x402630\n    int64_t v14; // 0x402630\n    int64_t v15; // 0x4026e3\n    if (v3 != 0) {\n        // 0x402980\n        error(2, 0, \"%s\", (char *)v3);\n        goto lab_0x402996;\n    } else {\n        int64_t * v16 = (int64_t *)(a1 + 8); // 0x4026c2\n        int64_t str2 = *v16; // 0x4026c2\n        int32_t len2 = strlen((char *)str2); // 0x4026ce\n        v15 = function_415be0(&v2, str2, (int64_t)len2, 0, &v1);\n        int64_t v17; // 0x402630\n        if (v15 < 0) {\n            // 0x402798\n            v7 = v15;\n            if (v15 != -1) {\n                goto lab_0x4029af;\n            } else {\n                if (v17 == 0) {\n                    int64_t v18 = function_406620(16); // 0x4027c5\n                    *(int32_t *)v18 = 0;\n                    *(int64_t *)(v18 + 8) = 0;\n                    result3 = v18;\n                } else {\n                    // 0x4027aa\n                    result3 = function_402050((int64_t)&g24);\n                }\n                goto lab_0x402724;\n            }\n        } else {\n            if (v17 == 0) {\n                // 0x402750\n                if (__ctype_get_mb_cur_max() != 1) {\n                    while (true) {\n                      lab_0x402877:\n                        // 0x402877\n                        v14 = v13;\n                        v6 = v5;\n                        char v19 = v11;\n                        str3 = (char *)v14;\n                        v12 = v19;\n                        if (v19 == 0) {\n                            unsigned char v20 = *str3; // 0x402805\n                            int32_t v21 = *(int32_t *)((int64_t)(4 * v20 / 32) + (int64_t)&g16); // 0x402810\n                            if ((1 << (int32_t)(v20 % 32) & v21) == 0) {\n                                int32_t v22 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40291d\n                                v12 = 1;\n                                if (v22 == 0) {\n                                    // break -> 0x402996\n                                    break;\n                                }\n                                goto lab_0x40287e;\n                            } else {\n                                int32_t v23 = v20; // 0x402835\n                                v8 = v23;\n                                v4 = v23;\n                                v10 = 0;\n                                v9 = 1;\n                                goto lab_0x402841;\n                            }\n                        } else {\n                            goto lab_0x40287e;\n                        }\n                    }\n                } else {\n                    goto lab_0x40275f_2;\n                }\n            } else {\n                // 0x4026fe\n                *(char *)(*(int64_t *)8 + *v16) = 0;\n                result3 = function_402050(*v16 + *(int64_t *)8);\n                goto lab_0x402724;\n            }\n        }\n    }\n  lab_0x40275f_2:;\n    int64_t result = function_406620(16); // 0x402764\n    *(int32_t *)result = 0;\n    *(int64_t *)(result + 8) = v15;\n    int64_t result2 = result; // 0x40277b\n    if (v1 == 0) {\n        // 0x40272b\n        function_415af0(&v2);\n        return result;\n    }\n    goto lab_0x40277d;\n  lab_0x40287e:;\n    char v24 = v12;\n    int64_t v25 = function_405de0(v14, (int64_t)__ctype_get_mb_cur_max()); // 0x40288e\n    int64_t v26 = function_407dd0(&v8, v14, v25); // 0x4028a7\n    char v27 = v24; // 0x402630\n    int64_t len3 = 1; // 0x402630\n    switch (v26) {\n        case -1: {\n            goto lab_0x402855;\n        }\n        case -2: {\n            // 0x402950\n            v27 = v24;\n            len3 = strlen(str3);\n            goto lab_0x402855;\n        }\n        default: {\n            int64_t v28 = v26; // 0x4028c4\n            if (v26 == 0) {\n                char v29 = *str3; // 0x4028d4\n                if (v29 != 0) {\n                    // 0x4029e9\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                int32_t v30 = v8; // 0x4028dd\n                v28 = 1;\n                if (v30 != 0) {\n                    // 0x4029e9\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            int64_t v31 = v28;\n            int32_t v32 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4028f9\n            char v33 = v32 == 0 ? v24 : 0;\n            int32_t v34 = v8;\n            v4 = v34;\n            v10 = v33;\n            v9 = v31;\n            goto lab_0x402841;\n        }\n    }\n  lab_0x402855:;\n    // 0x402855\n    int64_t v35; // 0x4027e0\n    if (v14 - v35 >= v15) {\n        goto lab_0x40275f_2;\n    }\n    int64_t v36 = len3;\n    char v37 = v27;\n    v11 = v37;\n    v5 = v6 + 1;\n    v13 = v36 + v14;\n    goto lab_0x402877;\n  lab_0x402841:;\n    int64_t v38 = v9;\n    char v39 = v10;\n    int32_t v40 = v4; // 0x402841\n    v27 = v39;\n    len3 = v38;\n    if (v40 == 0) {\n        goto lab_0x40275f_2;\n    }\n    goto lab_0x402855;\n  lab_0x402996:\n    // 0x402996\n    __assert_fail(\"mbsinit (&iter->state)\", \"./lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    v7 = str;\n    goto lab_0x4029af;\n  lab_0x4029af:;\n    char * format = dcgettext(NULL, \"error in regular expression matcher\", 5); // 0x4029bb\n    int32_t err_num = 75; // 0x4029cc\n    if (v7 == -2) {\n        // 0x4029ce\n        err_num = *__errno_location();\n    }\n    // 0x4029d5\n    error(3, err_num, format);\n    // 0x4029e9\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    return &g67;\n  lab_0x402724:\n    // 0x402724\n    result2 = result3;\n    if (v1 == 0) {\n        // 0x40272b\n        function_415af0(&v2);\n        return result3;\n    }\n    goto lab_0x40277d;\n  lab_0x40277d:\n    // 0x40277d\n    free(NULL);\n    free(NULL);\n    // 0x40272b\n    function_415af0(&v2);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402a10",
            "funcStartAddr": "402a10",
            "funcEndAddr": "403470",
            "decompiledFuncCode": "int64_t function_402a10(uint64_t a1) {\n    // 0x402a10\n    int32_t v1; // 0x402a10\n    int64_t v2; // 0x402a10\n    int64_t result2; // 0x402a10\n    int64_t result3; // 0x402a10\n    int64_t reject; // 0x402a10\n    int64_t v3; // 0x402a10\n    int64_t v4; // 0x402a10\n    int64_t v5; // 0x402a10\n    int64_t v6; // 0x402a10\n    int64_t v7; // 0x402a10\n    uint64_t v8; // 0x402a10\n    int64_t v9; // 0x402a10\n    int64_t v10; // 0x402a10\n    int64_t v11; // 0x402a10\n    int64_t v12; // 0x402a10\n    int64_t v13; // 0x402a10\n    int64_t v14; // 0x402a10\n    char * str7; // 0x402a10\n    int64_t v15; // 0x402a10\n    int64_t v16; // 0x402a10\n    int64_t ps; // bp-116, 0x402a10\n    char v17; // 0x402a10\n    char v18; // 0x402a10\n    char v19; // 0x402a10\n    int64_t v20; // 0x402a10\n    int64_t v21; // 0x402a10\n    int64_t v22; // 0x402a10\n    int64_t v23; // 0x402a10\n    int64_t v24; // 0x402a10\n    int32_t v25; // bp-84, 0x402a10\n    int32_t v26; // 0x402a10\n    int64_t v27; // 0x402a87\n    int64_t v28; // 0x402a92\n    int64_t v29; // 0x402a9d\n    int64_t v30; // 0x402b78\n    if ((char)function_401eb0(&g3) != 0) {\n        // 0x402d98\n        function_401fd0((int64_t)&g3);\n        goto lab_0x402d9d;\n    } else {\n        uint64_t v31 = a1 % 256; // 0x402a3a\n        if ((char)function_401eb0((int64_t *)\"length\") != 0) {\n            int64_t v32 = function_402a10(v31); // 0x402d43\n        }\n        // 0x402a4b\n        if ((char)function_401eb0((int64_t *)\"match\") != 0) {\n            int64_t v33 = function_402a10(v31); // 0x402e5b\n            int64_t v34 = function_402a10(v31); // 0x402e66\n            v11 = v34;\n            result2 = v33;\n            if ((char)a1 != 0) {\n                // 0x402e72\n                int64_t v35; // 0x402a10\n                int64_t v36 = function_402630(v33, v34, v35, v35); // 0x402e78\n                function_402020(v33);\n                v11 = v34;\n                result2 = v36;\n            }\n            goto lab_0x402e16;\n        } else {\n            int64_t v37 = function_401eb0((int64_t *)\"index\"); // 0x402a62\n            if ((char)v37 != 0) {\n                int64_t v38 = function_402a10(v31); // 0x402dc3\n                int64_t v39 = function_402a10(v31); // 0x402dce\n                int64_t v40 = *(int64_t *)(v39 + 8); // 0x402de6\n                v13 = 0;\n                v10 = v39;\n                v6 = v38;\n                v12 = v39;\n                reject = v40;\n                v7 = v38;\n                if (*(char *)v40 != 0) {\n                    goto lab_0x402f18;\n                } else {\n                    goto lab_0x402df7_2;\n                }\n            } else {\n                // 0x402a72\n                if ((char)function_401eb0((int64_t *)\"substr\") == 0) {\n                    int64_t v41 = v37 & 0xffffffff; // 0x402a67\n                    function_401fd0((int64_t)\"substr\");\n                    if ((char)function_401eb0(&g4) == 0) {\n                        // 0x403090\n                        if ((char)function_401eb0(&g23) == 0) {\n                            goto lab_0x402d9d;\n                        } else {\n                            // 0x4030a2\n                            error(2, (int32_t)\"syntax error: unexpected ')'\" ^ (int32_t)\"syntax error: unexpected ')'\", dcgettext(NULL, \"syntax error: unexpected ')'\", 5));\n                            v14 = a1 & 0xffffffff;\n                            v3 = v41;\n                            goto lab_0x4030c8;\n                        }\n                    } else {\n                        int64_t result = function_4039c0(v31); // 0x402eaa\n                        v9 = g50;\n                        if (*(int64_t *)g50 == 0) {\n                            goto lab_0x403410;\n                        } else {\n                            // 0x402ec3\n                            if ((char)function_401eb0(&g23) != 0) {\n                                // 0x402d7e\n                                return result;\n                            }\n                            // 0x402ed5\n                            function_405a90(0, 8, *(int64_t *)g50);\n                            error(2, (int32_t)\"syntax error: expecting ')' instead of %s\" ^ (int32_t)\"syntax error: expecting ')' instead of %s\", dcgettext(NULL, \"syntax error: expecting ')' instead of %s\", 5));\n                            reject = result;\n                            v7 = v41;\n                            goto lab_0x402f18;\n                        }\n                    }\n                } else {\n                    // 0x402a84\n                    v27 = function_402a10(v31);\n                    v28 = function_402a10(v31);\n                    v29 = function_402a10(v31);\n                    if ((char)v29 == 0) {\n                        // 0x402e28\n                        result3 = function_402050((int64_t)&g24);\n                        goto lab_0x402e35;\n                    } else {\n                        int64_t v42 = *(int64_t *)(v28 + 8); // 0x402acd\n                        int64_t v43 = *(int64_t *)(v29 + 8); // 0x402ae7\n                        int64_t str = *(int64_t *)(v27 + 8); // 0x402aec\n                        int64_t len = strlen((char *)str); // 0x402b06\n                        if (__ctype_get_mb_cur_max() >= 2) {\n                            // branch -> 0x402b29\n                        }\n                        // 0x402b29\n                        v8 = v42 < 0 ? -1 : v42;\n                        if (len < v8) {\n                            // 0x403310\n                            v20 = function_406850((int64_t)&g24);\n                            goto lab_0x40331f;\n                        } else {\n                            // 0x402b32\n                            if ((char)(v42 < 0 ? v37 : (int64_t)(v42 == 0)) != 0) {\n                                int64_t v44 = function_406850((int64_t)&g24); // 0x403315\n                            } else {\n                                struct _TYPEDEF___mbstate_t * v45 = v43 >= 0 ? (struct _TYPEDEF___mbstate_t *)v43 : (struct _TYPEDEF___mbstate_t *)-1; // 0x402b01\n                                uint64_t v46 = (int64_t)v45; // 0x402b3b\n                                if (v45 == (struct _TYPEDEF___mbstate_t *)-2 || v46 < 0xfffffffffffffffe) {\n                                    uint64_t v47 = len - v8 + 1; // 0x402b56\n                                    int64_t v48 = v47 > v46 ? v46 : v47; // 0x402b5d\n                                    if (__ctype_get_mb_cur_max() == 1) {\n                                        int64_t v49 = function_406620(v48 + 1); // 0x4033a3\n                                        v24 = (int64_t)mempcpy((int64_t *)v49, (int64_t *)(v8 - 1 + str), (int32_t)v48);\n                                        v21 = v49;\n                                      lab_0x4033c1_2:\n                                        // 0x4033c1\n                                        *(char *)v24 = 0;\n                                        v20 = v21;\n                                        goto lab_0x40331f;\n                                    } else {\n                                        // 0x402b70\n                                        v30 = function_406620(len + 1);\n                                        ps = 0;\n                                        v22 = v30;\n                                        v15 = str;\n                                        v18 = 0;\n                                        v2 = 1;\n                                        v4 = v48;\n                                        while (true) {\n                                          lab_0x402c71:\n                                            // 0x402c71\n                                            v5 = v4;\n                                            v16 = v15;\n                                            v23 = v22;\n                                            str7 = (char *)v16;\n                                            v19 = v18;\n                                            if (v18 == 0) {\n                                                unsigned char v50 = *str7; // 0x402bc0\n                                                int32_t v51 = *(int32_t *)((int64_t)(4 * v50 / 32) + (int64_t)&g16); // 0x402bcb\n                                                if ((1 << (int32_t)(v50 % 32) & v51) == 0) {\n                                                    int32_t v52 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4032f0\n                                                    v19 = 1;\n                                                    if (v52 == 0) {\n                                                        // break -> 0x4033f7\n                                                        break;\n                                                    }\n                                                    goto lab_0x402c7f;\n                                                } else {\n                                                    int32_t v53 = v50; // 0x402bf3\n                                                    v25 = v53;\n                                                    v1 = v53;\n                                                    v17 = 0;\n                                                    v26 = 1;\n                                                    goto lab_0x402c02;\n                                                }\n                                            } else {\n                                                goto lab_0x402c7f;\n                                            }\n                                        }\n                                        // 0x4033f7\n                                        __assert_fail(\"mbsinit (&iter->state)\", \"./lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                                        v9 = &g67;\n                                        goto lab_0x403410;\n                                    }\n                                } else {\n                                    // 0x403310\n                                    v20 = function_406850((int64_t)&g24);\n                                    goto lab_0x40331f;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402fc8:;\n    // 0x402fc8\n    char * v54; // 0x402a10\n    int64_t v55; // 0x402a10\n    char * v56 = (char *)(v55 + (int64_t)v54); // 0x402fd5\n    int64_t v57; // 0x402a10\n    int64_t v58 = v57; // 0x402fda\n    struct _TYPEDEF___mbstate_t * v59; // 0x402a10\n    struct _TYPEDEF___mbstate_t * v60 = v59; // 0x402fda\n    char * v61 = v56; // 0x402fda\n    int64_t v62; // 0x402a10\n    int64_t v63 = v62; // 0x402fda\n    int64_t v64; // 0x402a10\n    int64_t v65 = v64; // 0x402fda\n    int64_t v66; // 0x402a10\n    int64_t v67 = v66; // 0x402fda\n    int64_t v68; // 0x402a10\n    int64_t v69 = v68; // 0x402fda\n    int64_t v70 = v57; // 0x402fda\n    struct _TYPEDEF___mbstate_t * v71 = v59; // 0x402fda\n    char * v72 = v56; // 0x402fda\n    char v73; // 0x402a10\n    char v74 = v73; // 0x402fda\n    int64_t v75 = v62; // 0x402fda\n    int64_t v76 = v64; // 0x402fda\n    int64_t v77 = v66; // 0x402fda\n    int64_t v78 = v68; // 0x402fda\n    if (v73 == 0) {\n        goto lab_0x402f62;\n    } else {\n        goto lab_0x402fdc;\n    }\n  lab_0x402df7_2:;\n    int64_t v79 = function_406620(16); // 0x402dfc\n    *(int32_t *)v79 = 0;\n    *(int64_t *)(v79 + 8) = v13;\n    function_402020(v6);\n    v11 = v10;\n    result2 = v79;\n    goto lab_0x402e16;\n  lab_0x40316b:;\n    // 0x40316b\n    char v114; // 0x402a10\n    char v141 = v114;\n    int32_t v142 = __ctype_get_mb_cur_max(); // 0x40316b\n    int64_t str5; // 0x402a10\n    int32_t * v109; // 0x402a10\n    int64_t v143 = function_407dd0(v109, str5, function_405de0(str5, (int64_t)v142)); // 0x40318d\n    char v144 = v141; // 0x402a10\n    int32_t len3 = 1; // 0x402a10\n    int32_t v119; // 0x402a10\n    int32_t v81; // bp-148, 0x402a10\n    int32_t v121; // 0x402a10\n    char * str4; // 0x402a10\n    int64_t ps3; // bp-180, 0x402a10\n    char v120; // 0x402a10\n    switch (v143) {\n        case -1: {\n            goto lab_0x40320e;\n        }\n        case -2: {\n            // 0x403260\n            v144 = v141;\n            len3 = strlen(str4);\n            goto lab_0x40320e;\n        }\n        default: {\n            int32_t v145 = v143; // 0x4031aa\n            if (v143 == 0) {\n                // 0x4031ac\n                if (*str4 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                // 0x4031c3\n                v145 = 1;\n                if (v81 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            int32_t v146 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x4031dd\n            v119 = v81;\n            v120 = v146 == 0 ? v141 : 0;\n            v121 = v145;\n            goto lab_0x403131;\n        }\n    }\n  lab_0x40320e:;\n    int32_t n = len3;\n    char v147 = v144;\n    int64_t v148 = n; // 0x40320e\n    char v149 = v147; // 0x403218\n    int64_t v150 = v148; // 0x403218\n    int64_t v100; // 0x402a10\n    int64_t v102; // 0x402a10\n    int64_t v103; // 0x402a10\n    int64_t v107; // 0x402a10\n    char * str6; // 0x402a10\n    if (v107 == v148) {\n        // 0x40321e\n        v13 = v103;\n        v10 = v102;\n        v6 = v100;\n        v149 = v147;\n        v150 = v148;\n        if (memcmp((int64_t *)str5, (int64_t *)str6, n) == 0) {\n            goto lab_0x402df7_2;\n        }\n    }\n    goto lab_0x40315a;\n  lab_0x403131:;\n    int32_t v161 = v119; // 0x403131\n    int64_t v110; // 0x402a10\n    v57 = v110;\n    struct _TYPEDEF___mbstate_t * v139; // 0x402a10\n    v59 = v139;\n    char v140; // 0x402a10\n    v73 = v140;\n    v62 = v103;\n    v64 = v102;\n    v54 = str6;\n    int64_t v112; // 0x402a10\n    v66 = v112;\n    v68 = v100;\n    v55 = v107;\n    if (v161 == 0) {\n        goto lab_0x402fc8;\n    }\n    int32_t v162 = v121;\n    char v163 = v120;\n    v144 = v163;\n    len3 = v162;\n    int32_t v99; // bp-212, 0x402a10\n    char v105; // 0x402a10\n    if (v105 == 0) {\n        goto lab_0x40320e;\n    } else {\n        // 0x40314b\n        v13 = v103;\n        v10 = v102;\n        v6 = v100;\n        if (v99 == v161) {\n            goto lab_0x402df7_2;\n        }\n        // 0x403155\n        v149 = v163;\n        v150 = v162;\n        goto lab_0x40315a;\n    }\n  lab_0x40315a:;\n    int64_t v111 = v150 + str5; // 0x40315f\n    char v113 = v149; // 0x40315f\n    goto lab_0x403164;\n  lab_0x402c7f:;\n    char v151 = v19;\n    int64_t v152 = function_405de0(v16, (int64_t)__ctype_get_mb_cur_max()); // 0x402c97\n    int64_t v153 = function_407dd0(&v25, v16, v152); // 0x402cbb\n    char v154; // 0x402a10\n    int32_t len4; // 0x402a10\n    switch (v153) {\n        case -1: {\n            goto lab_0x402c11;\n        }\n        case -2: {\n            // 0x4033cd\n            v154 = v151;\n            len4 = strlen(str7);\n            goto lab_0x402c11;\n        }\n        default: {\n            int32_t v155 = v153; // 0x402cdf\n            if (v153 == 0) {\n                // 0x402ce1\n                if (*str7 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                // 0x402cfe\n                v155 = 1;\n                if (v25 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            int32_t v156 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402d1d\n            v1 = v25;\n            v17 = v156 == 0 ? v151 : 0;\n            v26 = v155;\n            goto lab_0x402c02;\n        }\n    }\n  lab_0x402c11:\n    // 0x402c11\n    v24 = v23;\n    v21 = v30;\n    if (v5 == 0) {\n        goto lab_0x4033c1_2;\n    }\n    int32_t v157 = len4;\n    int64_t v158 = v23; // 0x402c2d\n    int64_t v159 = v5; // 0x402c2d\n    if (v8 <= v2) {\n        // 0x402c2f\n        v158 = (int64_t)mempcpy((int64_t *)v23, (int64_t *)v16, v157);\n        v159 = v5 - 1;\n    }\n    // 0x402c5a\n    v22 = v158;\n    v15 = v16 + (int64_t)v157;\n    v18 = v154;\n    v2++;\n    v4 = v159;\n    goto lab_0x402c71;\n  lab_0x402c02:\n    // 0x402c02\n    v154 = v17;\n    len4 = v26;\n    v24 = v23;\n    v21 = v30;\n    if (v1 == 0) {\n        goto lab_0x4033c1_2;\n    }\n    goto lab_0x402c11;\n  lab_0x402d9d:;\n    int64_t v160 = *(int64_t *)g50; // 0x402da4\n    g50 += 8;\n    // 0x402d7e\n    return function_402050(v160);\n  lab_0x402e16:\n    // 0x402e16\n    function_402020(v11);\n    // 0x402d7e\n    return result2;\n  lab_0x402f18:;\n    int64_t v80 = *(int64_t *)(v7 + 8); // 0x402f18\n    char * str2 = (char *)v80;\n    int64_t ps4; // bp-244, 0x402a10\n    if (__ctype_get_mb_cur_max() < 2) {\n        int64_t ini_seg_bytes = strcspn(str2, (char *)reject); // 0x4032a6\n        v13 = *(char *)(v80 + ini_seg_bytes) == 0 ? 0 : ini_seg_bytes + 1;\n        v10 = v12;\n        v6 = v7;\n        goto lab_0x402df7_2;\n    } else {\n        // 0x402f2b\n        ps4 = 0;\n        v58 = &v81;\n        v60 = (struct _TYPEDEF___mbstate_t *)&ps4;\n        v61 = str2;\n        v63 = 0;\n        v65 = v12;\n        v67 = reject;\n        v69 = v7;\n        goto lab_0x402f62;\n    }\n  lab_0x402f62:;\n    int64_t v82 = v69;\n    int64_t v83 = v67;\n    int64_t v84 = v65;\n    int64_t v85 = v63;\n    char * v86 = v61;\n    struct _TYPEDEF___mbstate_t * ps2 = v60;\n    int64_t v87 = v58;\n    unsigned char v88 = *v86; // 0x402f67\n    int32_t v89 = *(int32_t *)((int64_t)(4 * v88 / 32) + (int64_t)&g16); // 0x402f74\n    char * v90; // 0x402a10\n    int64_t v91; // 0x402a10\n    int64_t v92; // 0x402a10\n    int64_t v93; // 0x402a10\n    int64_t v94; // 0x402a10\n    char v95; // 0x402a10\n    struct _TYPEDEF___mbstate_t * v96; // 0x402a10\n    int64_t v97; // 0x402a10\n    if ((1 << (int32_t)(v88 % 32) & v89) == 0) {\n        int32_t v98 = mbsinit(ps2); // 0x403285\n        v70 = v87;\n        v71 = ps2;\n        v72 = v86;\n        v74 = 1;\n        v75 = v85;\n        v76 = v84;\n        v77 = v83;\n        v78 = v82;\n        if (v98 == 0) {\n            // 0x4033f7\n            __assert_fail(\"mbsinit (&iter->state)\", \"./lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n            v9 = &g67;\n            goto lab_0x403410;\n        } else {\n            goto lab_0x402fdc;\n        }\n    } else {\n        // 0x402f85\n        v99 = v88;\n        v13 = 0;\n        v10 = v84;\n        v6 = v82;\n        if (v88 == 0) {\n            goto lab_0x402df7_2;\n        } else {\n            // 0x402fa9\n            v97 = v87;\n            v96 = ps2;\n            v95 = 0;\n            v94 = v85 + 1;\n            v93 = v84;\n            v90 = v86;\n            v91 = v83;\n            v92 = v82;\n            goto lab_0x402fad;\n        }\n    }\n  lab_0x403410:\n    // 0x403410\n    function_405a90(0, 8, *(int64_t *)(v9 - 8));\n    error(2, (int32_t)\"syntax error: expecting ')' after %s\" ^ (int32_t)\"syntax error: expecting ')' after %s\", dcgettext(NULL, \"syntax error: expecting ')' after %s\", 5));\n    // 0x40344d\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    return &g67;\n  lab_0x402e35:\n    // 0x402e35\n    function_402020(v27);\n    function_402020(v28);\n    function_402020(v29);\n    // 0x402d7e\n    return result3;\n  lab_0x4030c8:\n    // 0x4030c8\n    v100 = v3;\n    int64_t v101; // 0x402a10\n    v102 = v101;\n    v103 = v14;\n    char v104; // 0x402a10\n    v105 = v104;\n    int64_t v106; // 0x402a10\n    v107 = v106;\n    char * v108; // 0x402a10\n    str6 = v108;\n    ps3 = 0;\n    v109 = (int32_t *)v110;\n    v111 = v112;\n    v113 = 0;\n    while (true) {\n      lab_0x403164:\n        // 0x403164\n        str5 = v111;\n        str4 = (char *)str5;\n        v114 = v113;\n        if (v113 == 0) {\n            unsigned char v115 = *str4; // 0x4030f5\n            int32_t v116 = *(int32_t *)((int64_t)(4 * v115 / 32) + (int64_t)&g16); // 0x403100\n            if ((1 << (int32_t)(v115 % 32) & v116) == 0) {\n                int32_t v117 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x403243\n                v114 = 1;\n                if (v117 == 0) {\n                    // break -> 0x4033f7\n                    break;\n                }\n                goto lab_0x40316b;\n            } else {\n                int32_t v118 = v115; // 0x403125\n                v81 = v118;\n                v119 = v118;\n                v120 = 0;\n                v121 = 1;\n                goto lab_0x403131;\n            }\n        } else {\n            goto lab_0x40316b;\n        }\n    }\n    // 0x4033f7\n    __assert_fail(\"mbsinit (&iter->state)\", \"./lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    v9 = &g67;\n    goto lab_0x403410;\n  lab_0x40331f:;\n    int64_t v122 = function_402050(v20); // 0x403327\n    free((int64_t *)v20);\n    result3 = v122;\n    goto lab_0x402e35;\n  lab_0x402fdc:;\n    int64_t v123 = v78;\n    int64_t v124 = v77;\n    int64_t v125 = v76;\n    int64_t v126 = v75;\n    char v127 = v74;\n    char * str3 = v72;\n    struct _TYPEDEF___mbstate_t * v128 = v71;\n    int64_t v129 = v70;\n    int64_t v130 = (int64_t)str3; // 0x402fe1\n    int64_t v131 = function_405de0(v130, (int64_t)__ctype_get_mb_cur_max()); // 0x402fec\n    int64_t v132 = function_407dd0(&v99, v130, v131); // 0x403001\n    char v133; // 0x402a10\n    int64_t len2; // 0x402a10\n    char v134; // 0x402a10\n    switch (v132) {\n        case -1: {\n            // 0x4032c0\n            v97 = v129;\n            v96 = v128;\n            v95 = v127;\n            v94 = v126 + 1;\n            v93 = v125;\n            v90 = str3;\n            v91 = v124;\n            v92 = v123;\n            goto lab_0x402fad;\n        }\n        case -2: {\n            // 0x403340\n            v134 = v127;\n            len2 = strlen(str3);\n            v133 = 0;\n            goto lab_0x403072;\n        }\n        default: {\n            int64_t v135 = v132; // 0x403022\n            if (v132 == 0) {\n                // 0x403024\n                if (*str3 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                // 0x40303d\n                v135 = 1;\n                if (v99 != 0) {\n                    // 0x40344d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"./lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            int32_t v136 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x403053\n            v13 = 0;\n            v10 = v125;\n            v6 = v123;\n            v134 = v136 == 0 ? v127 : 0;\n            len2 = v135;\n            v133 = 1;\n            if (v99 == 0) {\n                goto lab_0x402df7_2;\n            } else {\n                goto lab_0x403072;\n            }\n        }\n    }\n  lab_0x402fad:;\n    int64_t v137 = function_403d90(v91, *v90); // 0x402fb5\n    v13 = v94;\n    v10 = v93;\n    v6 = v92;\n    v57 = v97;\n    v59 = v96;\n    v73 = v95;\n    v62 = v94;\n    v64 = v93;\n    v54 = v90;\n    v66 = v91;\n    v68 = v92;\n    v55 = 1;\n    if (v137 != 0) {\n        goto lab_0x402df7_2;\n    } else {\n        goto lab_0x402fc8;\n    }\n  lab_0x403072:;\n    int64_t v138 = v126 + 1; // 0x403072\n    v97 = v129;\n    v96 = v128;\n    v95 = v134;\n    v94 = v138;\n    v93 = v125;\n    v90 = str3;\n    v91 = v124;\n    v92 = v123;\n    v110 = v129;\n    v139 = v128;\n    v108 = str3;\n    v140 = v134;\n    v106 = len2;\n    v104 = v133;\n    v14 = v138;\n    v101 = v125;\n    v112 = v124;\n    v3 = v123;\n    if (len2 != 1) {\n        goto lab_0x4030c8;\n    } else {\n        goto lab_0x402fad;\n    }\n}\n"
        },
        {
            "funcName": "function_403470",
            "funcStartAddr": "403470",
            "funcEndAddr": "4034dc",
            "decompiledFuncCode": "int64_t function_403470(uint64_t a1) {\n    uint64_t v1 = a1 % 256; // 0x40347a\n    int64_t result = function_402a10(v1); // 0x403481\n    if ((char)function_401eb0(&g6) == 0) {\n        // 0x4034d0\n        return result;\n    }\n    int64_t v2 = function_402a10(v1); // 0x4034a8\n    int64_t v3 = result; // 0x4034b3\n    int64_t v4; // 0x403470\n    if ((char)a1 != 0) {\n        // 0x4034b5\n        v3 = function_402630(result, v2, v4, v4);\n        function_402020(result);\n    }\n    int64_t result2 = v3;\n    function_402020(v2);\n    int64_t v5 = function_401eb0(&g6); // 0x40349d\n    while ((char)v5 != 0) {\n        int64_t v6 = result2;\n        v2 = function_402a10(v1);\n        v3 = v6;\n        if ((char)a1 != 0) {\n            // 0x4034b5\n            v3 = function_402630(v6, v2, v4, v4);\n            function_402020(v6);\n        }\n        // 0x403490\n        result2 = v3;\n        function_402020(v2);\n        v5 = function_401eb0(&g6);\n    }\n    // 0x4034d0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4034e0",
            "funcStartAddr": "4034e0",
            "funcEndAddr": "403610",
            "decompiledFuncCode": "int64_t function_4034e0(uint64_t a1) {\n    uint64_t v1 = a1 % 256; // 0x4034e9\n    int64_t result = function_403470(v1); // 0x4034f2\n    while (true) {\n        int64_t v2 = function_401eb0(&g7); // 0x403581\n        int32_t v3 = 0; // 0x403588\n        if ((char)v2 == 0) {\n            int64_t v4 = function_401eb0(&g17); // 0x40350a\n            v3 = 2;\n            if ((char)v4 == 0) {\n                int64_t v5 = function_401eb0(&g8); // 0x4035a5\n                v3 = 2;\n                if ((char)v5 == 0) {\n                    // break -> 0x4035b8\n                    break;\n                }\n            }\n        }\n        int64_t v6 = function_403470(v1); // 0x40351a\n        if ((char)a1 != 0) {\n            if ((char)v6 == 0) {\n                // 0x4035c4\n                error(2, (int32_t)\"non-integer argument\" ^ (int32_t)\"non-integer argument\", dcgettext(NULL, \"non-integer argument\", 5));\n                goto lab_0x4035e6;\n            }\n            // 0x403547\n            if (v3 != 0) {\n                // 0x40354b\n                if (*(int64_t *)(v6 + 8) == 0) {\n                  lab_0x4035e6:\n                    // 0x4035e6\n                    error(2, (int32_t)\"division by zero\" ^ (int32_t)\"division by zero\", dcgettext(NULL, \"division by zero\", 5));\n                    return &g67;\n                }\n            }\n        }\n        // 0x403574\n        function_402020(v6);\n    }\n    // 0x4035b8\n    return result;\n}\n"
        },
        {
            "funcName": "function_403610",
            "funcStartAddr": "403610",
            "funcEndAddr": "4036e0",
            "decompiledFuncCode": "int64_t function_403610(uint64_t a1) {\n    uint64_t v1 = a1 % 256; // 0x40361a\n    int64_t result = function_4034e0(v1); // 0x403621\n    while (true) {\n        // 0x403692\n        if ((char)function_401eb0(&g3) == 0) {\n            // 0x403630\n            if ((char)function_401eb0(&g14) == 0) {\n                // break -> 0x4036a8\n                break;\n            }\n        }\n        int64_t v2 = function_4034e0(v1); // 0x403646\n        if ((char)a1 != 0 == (char)v2 == 0) {\n            // 0x4036b4\n            error(2, (int32_t)\"non-integer argument\" ^ (int32_t)\"non-integer argument\", dcgettext(NULL, \"non-integer argument\", 5));\n            return &g67;\n        }\n        // 0x40368a\n        function_402020(v2);\n    }\n    // 0x4036a8\n    return result;\n}\n"
        },
        {
            "funcName": "function_4036e0",
            "funcStartAddr": "4036e0",
            "funcEndAddr": "403909",
            "decompiledFuncCode": "int64_t function_4036e0(uint64_t a1) {\n    uint64_t v1 = a1 % 256; // 0x4036e9\n    int64_t v2 = function_403610(v1); // 0x403700\n    char * str2; // 0x4036e0\n    int64_t v3; // 0x4036e0\n    bool v4; // 0x4036e0\n    char v5; // 0x4036e0\n    int64_t v6; // 0x4036e0\n    int64_t v7; // 0x4036e0\n    char * v8; // 0x4036e0\n    int64_t v9; // 0x403726\n    char * str; // 0x403786\n    while (true) {\n      lab_0x40375a:\n        // 0x40375a\n        v6 = v2;\n        int64_t v10 = function_401eb0(&g9); // 0x40375f\n        v3 = 0;\n        if ((char)v10 == 0) {\n            // 0x403708\n            v3 = 1;\n            if ((char)function_401eb0((int64_t *)\"<=\") == 0) {\n                int64_t v11 = function_401eb0(&g10); // 0x403845\n                v3 = 2;\n                if ((char)v11 == 0) {\n                    // 0x4038a0\n                    v3 = 2;\n                    if ((char)function_401eb0((int64_t *)\"==\") == 0) {\n                        // 0x4038ae\n                        v3 = 3;\n                        if ((char)function_401eb0((int64_t *)\"!=\") == 0) {\n                            // 0x4038c6\n                            v3 = 4;\n                            if ((char)function_401eb0((int64_t *)\">=\") == 0) {\n                                int64_t v12 = function_401eb0(&g11); // 0x4038e3\n                                v3 = 5;\n                                if ((char)v12 == 0) {\n                                    // break -> 0x4038f7\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // 0x403720\n        v9 = function_403610(v1);\n        v4 = false;\n        if ((char)a1 != 0) {\n            int64_t v13 = *(int64_t *)(v6 + 8); // 0x403780\n            str = (char *)v13;\n            int64_t v14 = v13 + (int64_t)(*str == 45); // 0x40378d\n            char v15 = *(char *)v14; // 0x403793\n            int64_t v16 = v14; // 0x403793\n            while ((int32_t)v15 < 58) {\n                // 0x403798\n                v16++;\n                v15 = *(char *)v16;\n                if (v15 == 0) {\n                    int64_t v17 = *(int64_t *)(v9 + 8); // 0x403860\n                    v8 = (char *)v17;\n                    int64_t v18 = v17 + (int64_t)(*v8 == 45); // 0x40386c\n                    v5 = *(char *)v18;\n                    v7 = v18;\n                    goto lab_0x403878;\n                }\n            }\n            // 0x4037af\n            str2 = (char *)*(int64_t *)(v9 + 8);\n            goto lab_0x4037b3;\n        } else {\n            goto lab_0x403733;\n        }\n    }\n  lab_0x403733:\n    // 0x403733\n    function_402020(v6);\n    function_402020(v9);\n    v2 = function_406620(16);\n    *(int32_t *)v2 = 0;\n    *(int64_t *)(v2 + 8) = (int64_t)v4;\n    goto lab_0x40375a;\n  lab_0x4037b3:\n    // 0x4037b3\n    *__errno_location() = 0;\n    int64_t strcoll_rc = strcoll(str, str2); // 0x4037cb\n    goto lab_0x4037d0;\n  lab_0x4037d0:;\n    int64_t v19 = strcoll_rc;\n    g65 = v3;\n    switch (v3) {\n        case 1: {\n            // 0x403810\n            v4 = (int32_t)v19 < 1;\n            // break -> 0x403733\n            break;\n        }\n        case 2: {\n            // 0x403800\n            v4 = (int32_t)v19 == 0;\n            // break -> 0x403733\n            break;\n        }\n        case 3: {\n            // 0x4037f0\n            v4 = (int32_t)v19 != 0;\n            // break -> 0x403733\n            break;\n        }\n        case 4: {\n            // 0x4037e0\n            v4 = v19 > -1;\n            // break -> 0x403733\n            break;\n        }\n        case 5: {\n            int32_t v20 = v19; // 0x403823\n            v4 = v20 >= 0 == (v20 != 0);\n            // break -> 0x403733\n            break;\n        }\n        default: {\n            // 0x403830\n            v4 = v19 < 0;\n            // break -> 0x403733\n            break;\n        }\n    }\n    goto lab_0x403733;\n  lab_0x403878:\n    // 0x403878\n    str2 = v8;\n    if ((int32_t)v5 < 58) {\n        int64_t v21 = v7 + 1; // 0x403884\n        char v22 = *(char *)v21; // 0x403888\n        v5 = v22;\n        v7 = v21;\n        if (v22 != 0) {\n            goto lab_0x403878;\n        } else {\n            // 0x40388f\n            strcoll_rc = function_405e20();\n            goto lab_0x4037d0;\n        }\n    } else {\n        goto lab_0x4037b3;\n    }\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "4039bd",
            "decompiledFuncCode": "int64_t function_403910(uint64_t a1) {\n    int64_t v1 = function_4036e0(a1 % 256); // 0x40391b\n    int64_t v2 = function_401eb0(&g12); // 0x403928\n    int64_t result = v1; // 0x40392f\n    if ((char)v2 == 0) {\n      lab_0x40399f:\n        // 0x40399f\n        return result;\n    }\n    int64_t v3 = v1; // 0x40397b\n    int64_t result2; // 0x403910\n    int64_t v4; // 0x403910\n    int64_t v5; // 0x403946\n    int64_t v6; // 0x403996\n    while (true) {\n        // 0x403931\n        result2 = v3;\n        v4 = 0;\n        if ((char)a1 != 0) {\n            // 0x403938\n            v4 = function_402090(result2) % 256 ^ 1;\n        }\n        // 0x403946\n        v5 = function_4036e0(v4);\n        if ((char)function_402090(result2) == 0) {\n            // 0x40395a\n            if ((char)function_402090(v5) == 0) {\n                // break -> 0x4039b0\n                break;\n            }\n        }\n        // 0x403966\n        function_402020(result2);\n        function_402020(v5);\n        v3 = function_406620(16);\n        *(int32_t *)v3 = 0;\n        *(int64_t *)(v3 + 8) = 0;\n        v6 = function_401eb0(&g12);\n        result = v3;\n        if ((char)v6 == 0) {\n            return result;\n        }\n    }\n    // 0x4039b0\n    function_402020(v5);\n    int64_t v7 = function_401eb0(&g12); // 0x403928\n    while ((char)v7 != 0) {\n        // 0x403931\n        v3 = result2;\n        while (true) {\n            // 0x403931\n            result2 = v3;\n            v4 = 0;\n            if ((char)a1 != 0) {\n                // 0x403938\n                v4 = function_402090(result2) % 256 ^ 1;\n            }\n            // 0x403946\n            v5 = function_4036e0(v4);\n            if ((char)function_402090(result2) == 0) {\n                // 0x40395a\n                if ((char)function_402090(v5) == 0) {\n                    // break -> 0x4039b0\n                    break;\n                }\n            }\n            // 0x403966\n            function_402020(result2);\n            function_402020(v5);\n            v3 = function_406620(16);\n            *(int32_t *)v3 = 0;\n            *(int64_t *)(v3 + 8) = 0;\n            v6 = function_401eb0(&g12);\n            result = v3;\n            if ((char)v6 == 0) {\n                return result;\n            }\n        }\n        // 0x4039b0\n        function_402020(v5);\n        v7 = function_401eb0(&g12);\n    }\n    // 0x40399f\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4039c0",
            "funcStartAddr": "4039c0",
            "funcEndAddr": "403a6d",
            "decompiledFuncCode": "int64_t function_4039c0(uint64_t a1) {\n    int64_t v1 = function_403910(a1 % 256); // 0x4039cb\n    int64_t v2 = function_401eb0(&g13); // 0x4039dd\n    int64_t result = v1; // 0x4039e4\n    if ((char)v2 == 0) {\n      lab_0x403a54:\n        // 0x403a54\n        return result;\n    }\n    int64_t v3 = v1;\n    while (true) {\n        int64_t v4 = v3;\n        int64_t v5 = 0; // 0x4039eb\n        if ((char)a1 != 0) {\n            // 0x4039ed\n            v5 = function_402090(v4) % 256;\n        }\n        int64_t v6 = function_403910(v5); // 0x4039f8\n        int64_t v7; // 0x4039c0\n        while ((char)function_402090(v4) != 0) {\n            // 0x403a0c\n            function_402020(v4);\n            int64_t v8 = function_402090(v6); // 0x403a1a\n            v7 = v6;\n            if ((char)v8 == 0) {\n                goto lab_0x4039d8;\n            }\n            // 0x403a23\n            function_402020(v6);\n            int64_t v9 = function_406620(16); // 0x403a30\n            *(int32_t *)v9 = 0;\n            *(int64_t *)(v9 + 8) = 0;\n            int64_t v10 = function_401eb0(&g13); // 0x403a4b\n            result = v9;\n            if ((char)v10 == 0) {\n                return result;\n            }\n            v4 = v9;\n            v5 = 0;\n            if ((char)a1 != 0) {\n                // 0x4039ed\n                v5 = function_402090(v4) % 256;\n            }\n            // 0x4039f8\n            v6 = function_403910(v5);\n        }\n        // 0x403a60\n        function_402020(v6);\n        v7 = v4;\n      lab_0x4039d8:\n        // 0x4039d8\n        v3 = v7;\n        int64_t v11 = function_401eb0(&g13); // 0x4039dd\n        result = v3;\n        if ((char)v11 == 0) {\n            // break -> 0x403a54\n            break;\n        }\n    }\n    // 0x403a54\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403a78",
            "decompiledFuncCode": "int64_t function_403a70(int64_t a1) {\n    // 0x403a70\n    g52 = a1;\n    int64_t result; // 0x403a70\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403a88",
            "decompiledFuncCode": "int64_t function_403a80(int64_t a1) {\n    // 0x403a80\n    g51 = a1;\n    int64_t result; // 0x403a80\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a90",
            "funcStartAddr": "403a90",
            "funcEndAddr": "403b2e",
            "decompiledFuncCode": "int64_t function_403a90(void) {\n    // 0x403a90\n    int32_t * err_num; // 0x403aa6\n    if ((int32_t)function_415ca0((int64_t)g45) == 0) {\n        goto lab_0x403abc;\n    } else {\n        // 0x403aa6\n        err_num = __errno_location();\n        if (g51 == 0) {\n            goto lab_0x403ad3;\n        } else {\n            // 0x403ab7\n            if (*err_num != 32) {\n                goto lab_0x403ad3;\n            } else {\n                goto lab_0x403abc;\n            }\n        }\n    }\n  lab_0x403abc:;\n    int64_t result = function_415ca0((int64_t)g47); // 0x403ac3\n    if ((int32_t)result == 0) {\n        // 0x403acc\n        return result;\n    }\n    // 0x403b0e\n    _exit(g35);\n    // UNREACHABLE\n  lab_0x403ad3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x403adf\n    if (g52 == 0) {\n        // 0x403b19\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403af3\n        error(0, *err_num, \"%s: %s\", (char *)function_405c10((int64_t)g52), v1);\n    }\n    // 0x403b0e\n    _exit(g35);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403b30",
            "funcStartAddr": "403b30",
            "funcEndAddr": "403bcc",
            "decompiledFuncCode": "int64_t function_403b30(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403b30\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403b55\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x403b86\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x403ba8\n    int64_t v4 = v2 - 1; // 0x403bb8\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x403bc0\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403cd2",
            "decompiledFuncCode": "int64_t function_403bd0(int64_t a1, int64_t a2, char * a3, char * a4, char * a5, int64_t a6) {\n    // 0x403bd0\n    int64_t v1; // 0x403bd0\n    if ((char)v1 != 0) {\n        // 0x403be3\n        int128_t v2; // 0x403bd0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g42; // 0x403c1a\n    g42 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x403c2f\n        g42 = v3;\n        *(int32_t *)0x61d2bc = 0;\n        int64_t result; // 0x403bd0\n        return result;\n    }\n    int64_t result2 = function_407d50(a1, a2, &g3, &g15, 0, a6); // 0x403c69\n    int32_t v4 = result2; // 0x403c6e\n    switch (v4) {\n        default: {\n            // 0x403c78\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x403c9a\n                function_406480((int64_t)g45, (int64_t)a3, (int64_t)a4, (int64_t)a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x403c2f\n            g42 = v3;\n            *(int32_t *)0x61d2bc = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_403ce0",
            "funcStartAddr": "403ce0",
            "funcEndAddr": "403d01",
            "decompiledFuncCode": "int64_t function_403ce0(int64_t a1) {\n    int32_t wc = a1; // 0x403ce3\n    int32_t result = wcwidth(wc); // 0x403ce3\n    if (result < 0) {\n        // 0x403cf0\n        return iswcntrl(wc) == 0;\n    }\n    // 0x403cec\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d10",
            "funcStartAddr": "403d10",
            "funcEndAddr": "403d66",
            "decompiledFuncCode": "int64_t function_403d10(int64_t a1, int64_t a2) {\n    // 0x403d10\n    *(int64_t *)a1 = a2;\n    char v1 = *(char *)(a2 + 16); // 0x403d2f\n    *(int64_t *)(a1 + 8) = *(int64_t *)(a2 + 8);\n    *(char *)(a1 + 16) = v1;\n    int64_t result = 0; // 0x403d3c\n    if (v1 != 0) {\n        uint32_t v2 = *(int32_t *)(a2 + 20); // 0x403d3e\n        *(int32_t *)(a1 + 20) = v2;\n        result = v2;\n    }\n    // 0x403d44\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d87",
            "decompiledFuncCode": "int64_t function_403d70(uint64_t a1) {\n    uint32_t v1 = *(int32_t *)((a1 / 8 & 28) + (int64_t)&g16); // 0x403d7a\n    return (v1 >> (int32_t)a1 % 32) % 2;\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403fd0",
            "decompiledFuncCode": "int64_t function_403d90(int64_t str, unsigned char c) {\n    // 0x403d90\n    if (c < 48 | (uint32_t)__ctype_get_mb_cur_max() < 2) {\n        // 0x403dac\n        return (int64_t)strchr((char *)str, (int32_t)c);\n    }\n    int64_t ps = 0; // bp-84, 0x403dc9\n    char v1 = 0; // 0x403dd7\n    int64_t v2 = str; // 0x403dd7\n    char * v3; // 0x403d90\n    int64_t v4; // 0x403d90\n    int32_t v5; // bp-52, 0x403d90\n    int64_t str2; // 0x403d90\n    char v6; // 0x403d90\n    char v7; // 0x403d90\n    while (true) {\n      lab_0x403e46:\n        // 0x403e46\n        str2 = v2;\n        v7 = v1;\n        if (v1 == 0) {\n            char * v8 = (char *)str2;\n            unsigned char v9 = *v8; // 0x403de5\n            int32_t v10 = *(int32_t *)((int64_t)(4 * v9 / 32) + (int64_t)&g16); // 0x403df0\n            if ((1 << (int32_t)(v9 % 32) & v10) == 0) {\n                int32_t v11 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403f05\n                v7 = 1;\n                if (v11 == 0) {\n                    // break -> 0x403f84\n                    break;\n                }\n                goto lab_0x403e4c;\n            } else {\n                // 0x403e02\n                v5 = v9;\n                v3 = v8;\n                v6 = 0;\n                v4 = 1;\n                if (v9 == 0) {\n                    // 0x403f46\n                    return 0;\n                }\n                goto lab_0x403e2c;\n            }\n        } else {\n            goto lab_0x403e4c;\n        }\n    }\n    // 0x403f84\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x403f9d\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    // 0x403fb6\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g67;\n  lab_0x403e4c:;\n    char v12 = v7;\n    int64_t v13 = function_405de0(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x403e5c\n    int64_t v14 = function_407dd0(&v5, str2, v13); // 0x403e71\n    int64_t result; // 0x403d90\n    int64_t v15; // 0x403d90\n    int64_t len; // 0x403d90\n    char v16; // 0x403d90\n    switch (v14) {\n        case -1: {\n            // 0x403f20\n            v1 = v12;\n            v15 = 1;\n            result = str2;\n            if (*(char *)str2 == c) {\n                // 0x403f46\n                return result;\n            }\n            goto lab_0x403e38;\n        }\n        case -2: {\n            // 0x403f50\n            v16 = v12;\n            len = strlen((char *)str2);\n            goto lab_0x403ee4;\n        }\n        default: {\n            int64_t v17 = v14; // 0x403e92\n            if (v14 == 0) {\n                // 0x403e94\n                if (*(char *)str2 != 0) {\n                    // 0x403f9d\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    // 0x403fb6\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                // 0x403eab\n                v17 = 1;\n                if (v5 != 0) {\n                    // 0x403fb6\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            // 0x403eb7\n            v16 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0 ? v12 : 0;\n            len = v17;\n            if (v5 == 0) {\n                // 0x403f46\n                return 0;\n            }\n            goto lab_0x403ee4;\n        }\n    }\n  lab_0x403e2c:\n    // 0x403e2c\n    v1 = v6;\n    v15 = v4;\n    result = str2;\n    if (*v3 == c) {\n        // 0x403f46\n        return result;\n    }\n    goto lab_0x403e38;\n  lab_0x403ee4:;\n    int64_t v18 = len;\n    char v19 = v16;\n    v1 = v19;\n    v15 = v18;\n    if (v18 != 1) {\n        goto lab_0x403e38;\n    } else {\n        // 0x403ee4\n        v3 = (char *)str2;\n        v6 = v19;\n        v4 = v18;\n        goto lab_0x403e2c;\n    }\n  lab_0x403e38:\n    // 0x403e38\n    v2 = v15 + str2;\n    goto lab_0x403e46;\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "4041a0",
            "decompiledFuncCode": "int64_t function_403fd0(int64_t str) {\n    // 0x403fd0\n    if ((uint32_t)__ctype_get_mb_cur_max() < 2) {\n        // 0x403fef\n        return strlen((char *)str);\n    }\n    int64_t ps = 0; // bp-84, 0x40400b\n    char v1 = 0; // 0x404019\n    int64_t v2 = str; // 0x404019\n    int64_t v3 = 0; // 0x404019\n    int32_t v4; // 0x403fd0\n    int64_t v5; // 0x403fd0\n    int32_t v6; // bp-52, 0x403fd0\n    int64_t v7; // 0x403fd0\n    int64_t str2; // 0x403fd0\n    char v8; // 0x403fd0\n    char v9; // 0x403fd0\n    while (true) {\n      lab_0x404071:\n        // 0x404071\n        v5 = v3;\n        str2 = v2;\n        v9 = v1;\n        if (v1 == 0) {\n            unsigned char v10 = *(char *)str2; // 0x404025\n            int32_t v11 = *(int32_t *)((int64_t)(4 * v10 / 32) + (int64_t)&g16); // 0x404030\n            if ((1 << (int32_t)(v10 % 32) & v11) == 0) {\n                int32_t v12 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404105\n                v9 = 1;\n                if (v12 == 0) {\n                    // break -> 0x404151\n                    break;\n                }\n                goto lab_0x404077;\n            } else {\n                int32_t v13 = v10; // 0x404052\n                v6 = v13;\n                v4 = v13;\n                v8 = 0;\n                v7 = 1;\n                goto lab_0x404056;\n            }\n        } else {\n            goto lab_0x404077;\n        }\n    }\n    // 0x404151\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x40416a\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    // 0x404183\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g67;\n  lab_0x404077:;\n    char v14 = v9;\n    int64_t v15 = function_405de0(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x404087\n    int64_t v16 = function_407dd0(&v6, str2, v15); // 0x40409c\n    v1 = v14;\n    int64_t len = 1; // 0x403fd0\n    switch (v16) {\n        case -1: {\n            goto lab_0x40405e;\n        }\n        case -2: {\n            // 0x404138\n            v1 = v14;\n            len = strlen((char *)str2);\n            goto lab_0x40405e;\n        }\n        default: {\n            int64_t v17 = v16; // 0x4040b9\n            if (v16 == 0) {\n                // 0x4040bb\n                if (*(char *)str2 != 0) {\n                    // 0x40416a\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    // 0x404183\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n                // 0x4040d2\n                v17 = 1;\n                if (v6 != 0) {\n                    // 0x404183\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g67;\n                }\n            }\n            int32_t v18 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4040e8\n            v4 = v6;\n            v8 = v18 == 0 ? v14 : 0;\n            v7 = v17;\n            goto lab_0x404056;\n        }\n    }\n  lab_0x40405e:\n    // 0x40405e\n    v2 = len + str2;\n    v3 = v5 + 1;\n    goto lab_0x404071;\n  lab_0x404056:;\n    int64_t result = v5; // 0x40405c\n    v1 = v8;\n    len = v7;\n    if (v4 == 0) {\n        // 0x403fef\n        return result;\n    }\n    goto lab_0x40405e;\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "404239",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t str) {\n    // 0x4041a0\n    if (str == 0) {\n        // 0x404219\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g47);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4041ae\n    int64_t result = (int64_t)found_char_pos; // 0x4041ae\n    if (found_char_pos == NULL) {\n        // 0x404209\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4041b8\n    if (v1 - str < 7) {\n        // 0x404209\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    // 0x4041c8\n    bool v2; // 0x4041a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4041a0\n    int64_t v5 = result - 6; // 0x4041a0\n    int64_t v6 = 7; // 0x4041d6\n    unsigned char v7 = *(char *)v5; // 0x4041d6\n    char v8 = *(char *)v4; // 0x4041d6\n    char v9 = v8; // 0x4041d6\n    bool v10 = false; // 0x4041d6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4041e0\n    int64_t v13 = v1; // 0x4041e0\n    int64_t v14 = 3; // 0x4041e0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x404209\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4041f2\n    char v16 = *(char *)v12; // 0x4041f2\n    char v17 = v16; // 0x4041f2\n    bool v18 = false; // 0x4041f2\n    while (v15 == v16) {\n        // 0x4041e2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4041fc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4041fe\n        v20 = result + 4;\n        g44 = v20;\n    }\n    // 0x404209\n    g53 = v20;\n    g46 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "404332",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x404254\n    int64_t result = (int64_t)v1; // 0x404254\n    if (result != a1) {\n        // 0x404261\n        return result;\n    }\n    int64_t v2 = function_415d60(); // 0x404270\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x404326\n    if (v3 == 85) {\n        // 0x404280\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x404318\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g5 : (int64_t)&g18;\n            return result2;\n        }\n        char v4 = *v1; // 0x4042ae\n        int64_t result3 = v4 != 96 ? (int64_t)&g19 : (int64_t)&g22; // 0x4042bb\n        // 0x404261\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x404318\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g5 : (int64_t)&g18;\n        return result2;\n    }\n    char v5 = *v1; // 0x4042fd\n    int64_t result4 = v5 != 96 ? (int64_t)&g20 : (int64_t)&g21; // 0x40430a\n    // 0x404261\n    return result4;\n}\n"
        },
        {
            "funcName": "function_404340",
            "funcStartAddr": "404340",
            "funcEndAddr": "404397",
            "decompiledFuncCode": "int64_t function_404340(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x404340\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x404388\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404397",
            "funcStartAddr": "404397",
            "funcEndAddr": "405561",
            "decompiledFuncCode": "int64_t function_404397(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4043e1\n    int64_t v3 = 0; // 0x4043e1\n    int64_t v4; // 0x404397\n    int64_t v5; // 0x404397\n    int64_t v6; // 0x404397\n    int64_t v7; // 0x404397\n    int64_t v8; // 0x404397\n    int64_t v9; // 0x404397\n    int64_t v10; // 0x404397\n    int64_t v11; // 0x404397\n    int64_t v12; // 0x404397\n    int64_t v13; // 0x404397\n    int64_t v14; // 0x404397\n    int64_t v15; // 0x404397\n    int64_t v16; // 0x404397\n    int64_t v17; // 0x404397\n    int64_t v18; // 0x404397\n    int64_t result; // 0x404397\n    int64_t v19; // 0x404397\n    int32_t wc; // bp+132, 0x404397\n    int64_t ps; // bp+136, 0x404397\n    char v20; // 0x404950\n    int64_t v21; // 0x404950\n    int64_t v22; // 0x404cf8\n    int64_t v23; // 0x404397\n    int64_t v24; // 0x404d17\n    int32_t v25; // 0x404397\n    while (true) {\n      lab_0x4043e8_2:\n        // 0x4043e8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x404397\n        int64_t v27; // 0x40441c\n        while (true) {\n          lab_0x4043e8:\n            // 0x4043e8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4043f3\n            if (v15 == -1) {\n                // 0x4043f5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x404403\n            if (v28) {\n                // break (via goto) -> 0x404b68\n                goto lab_0x404b68;\n            }\n            // 0x40440c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g75 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4049fb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404541;\n                    }\n                    // 0x404e1d\n                    v26 = v5 + 1;\n                    goto lab_0x4043e8;\n                }\n                case 7: {\n                    goto lab_0x404541;\n                }\n                case 8: {\n                    goto lab_0x404541;\n                }\n                case 9: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x404541;\n                }\n                case 12: {\n                    goto lab_0x404541;\n                }\n                case 13: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40450d;\n                }\n                case 36: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x404541;\n                }\n                case 38: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x404541;\n                }\n                case 44: {\n                    goto lab_0x404541;\n                }\n                case 45: {\n                    goto lab_0x404541;\n                }\n                case 46: {\n                    goto lab_0x404541;\n                }\n                case 47: {\n                    goto lab_0x404541;\n                }\n                case 48: {\n                    goto lab_0x404541;\n                }\n                case 49: {\n                    goto lab_0x404541;\n                }\n                case 50: {\n                    goto lab_0x404541;\n                }\n                case 51: {\n                    goto lab_0x404541;\n                }\n                case 52: {\n                    goto lab_0x404541;\n                }\n                case 53: {\n                    goto lab_0x404541;\n                }\n                case 54: {\n                    goto lab_0x404541;\n                }\n                case 55: {\n                    goto lab_0x404541;\n                }\n                case 56: {\n                    goto lab_0x404541;\n                }\n                case 57: {\n                    goto lab_0x404541;\n                }\n                case 58: {\n                    goto lab_0x404541;\n                }\n                case 59: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x404541;\n                }\n                case 66: {\n                    goto lab_0x404541;\n                }\n                case 67: {\n                    goto lab_0x404541;\n                }\n                case 68: {\n                    goto lab_0x404541;\n                }\n                case 69: {\n                    goto lab_0x404541;\n                }\n                case 70: {\n                    goto lab_0x404541;\n                }\n                case 71: {\n                    goto lab_0x404541;\n                }\n                case 72: {\n                    goto lab_0x404541;\n                }\n                case 73: {\n                    goto lab_0x404541;\n                }\n                case 74: {\n                    goto lab_0x404541;\n                }\n                case 75: {\n                    goto lab_0x404541;\n                }\n                case 76: {\n                    goto lab_0x404541;\n                }\n                case 77: {\n                    goto lab_0x404541;\n                }\n                case 78: {\n                    goto lab_0x404541;\n                }\n                case 79: {\n                    goto lab_0x404541;\n                }\n                case 80: {\n                    goto lab_0x404541;\n                }\n                case 81: {\n                    goto lab_0x404541;\n                }\n                case 82: {\n                    goto lab_0x404541;\n                }\n                case 83: {\n                    goto lab_0x404541;\n                }\n                case 84: {\n                    goto lab_0x404541;\n                }\n                case 85: {\n                    goto lab_0x404541;\n                }\n                case 86: {\n                    goto lab_0x404541;\n                }\n                case 87: {\n                    goto lab_0x404541;\n                }\n                case 88: {\n                    goto lab_0x404541;\n                }\n                case 89: {\n                    goto lab_0x404541;\n                }\n                case 90: {\n                    goto lab_0x404541;\n                }\n                case 91: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x404541;\n                }\n                case 94: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x404541;\n                }\n                case 96: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x404541;\n                }\n                case 98: {\n                    goto lab_0x404541;\n                }\n                case 99: {\n                    goto lab_0x404541;\n                }\n                case 100: {\n                    goto lab_0x404541;\n                }\n                case 101: {\n                    goto lab_0x404541;\n                }\n                case 102: {\n                    goto lab_0x404541;\n                }\n                case 103: {\n                    goto lab_0x404541;\n                }\n                case 104: {\n                    goto lab_0x404541;\n                }\n                case 105: {\n                    goto lab_0x404541;\n                }\n                case 106: {\n                    goto lab_0x404541;\n                }\n                case 107: {\n                    goto lab_0x404541;\n                }\n                case 108: {\n                    goto lab_0x404541;\n                }\n                case 109: {\n                    goto lab_0x404541;\n                }\n                case 110: {\n                    goto lab_0x404541;\n                }\n                case 111: {\n                    goto lab_0x404541;\n                }\n                case 112: {\n                    goto lab_0x404541;\n                }\n                case 113: {\n                    goto lab_0x404541;\n                }\n                case 114: {\n                    goto lab_0x404541;\n                }\n                case 115: {\n                    goto lab_0x404541;\n                }\n                case 116: {\n                    goto lab_0x404541;\n                }\n                case 117: {\n                    goto lab_0x404541;\n                }\n                case 118: {\n                    goto lab_0x404541;\n                }\n                case 119: {\n                    goto lab_0x404541;\n                }\n                case 120: {\n                    goto lab_0x404541;\n                }\n                case 121: {\n                    goto lab_0x404541;\n                }\n                case 122: {\n                    goto lab_0x404541;\n                }\n                case 123: {\n                    goto lab_0x4044e5;\n                }\n                case 124: {\n                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4044e5;\n                }\n                case 126: {\n                    goto lab_0x40450d;\n                }\n                default: {\n                    goto lab_0x4048e5;\n                }\n            }\n        }\n      lab_0x4048e5:\n        if (v23 != 1) {\n            // 0x404c50\n            ps = 0;\n            int64_t len = v15; // 0x404c60\n            if (v15 == -1) {\n                // 0x404c62\n                len = strlen((char *)str);\n            }\n            // 0x404c8e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x404cef:\n                // 0x404cef\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404cf4\n                int64_t v30 = v29 + str;\n                v24 = function_407dd0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40526a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40526a_2;\n                    }\n                    case -2: {\n                        // 0x40534d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x405387\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40538a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x405397\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x405390\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40526a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40526a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404cc0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x404d6c\n                        char v34 = *(char *)v33; // 0x404d7d\n                        unsigned char v35; // 0x404397\n                        if (v34 < 125) {\n                            // 0x404d88\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x404d9f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404d70\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x404d7d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404d88\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x404d9f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404d70\n                            v33++;\n                        }\n                        goto lab_0x404cc0;\n                    }\n                }\n            }\n            goto lab_0x40526a_2;\n        } else {\n            // 0x404934\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404541;\n        }\n    }\n  lab_0x404b68:\n    // 0x404b68\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40546a\n        if (v8 > result) {\n            // 0x405473\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404797\n        return result;\n    }\n    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404541:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x404550\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40475a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404651\n    char v40 = v20; // 0x404651\n    int64_t v41 = v38; // 0x404651\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404651\n    int64_t v43 = v36; // 0x404651\n    goto lab_0x4045cd;\n  lab_0x40475a_2:\n    // 0x404797\n    return function_404340(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40526a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x404541;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x404e3e\n        int64_t v50 = v5 + 1; // 0x404f21\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404f28\n        char v52 = v20; // 0x404f28\n        int64_t v53 = result; // 0x404f28\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404ef1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404ef5\n            int64_t v56 = v54 + 1; // 0x404efa\n            int64_t v57 = v51 + 1; // 0x404f21\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404eec\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404ef1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404ef5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4045cd;\n    }\n  lab_0x404cc0:\n    // 0x404cc0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x404cdf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404ce2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40526a\n        goto lab_0x40526a_2;\n    }\n    goto lab_0x404cef;\n  lab_0x40450d:\n    // 0x40450d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40475a_2;\n    }\n    goto lab_0x404541;\n  lab_0x4044e5:;\n    bool v60 = v15 == 1; // 0x4044f0\n    if (v15 == -1) {\n        // 0x4044f2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4044fe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x404541;\n    } else {\n        goto lab_0x40450d;\n    }\n  lab_0x4045cd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4045d2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4045d6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4043e8_2;\n}\n"
        },
        {
            "funcName": "function_405570",
            "funcStartAddr": "405570",
            "funcEndAddr": "40570e",
            "decompiledFuncCode": "int64_t function_405570(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405572\n    int32_t * v3 = __errno_location(); // 0x40558c\n    int64_t v4 = (int64_t)g37; // 0x405591\n    int32_t v5 = *v3; // 0x40559b\n    int64_t v6 = v4; // 0x4055b1\n    if (v2 >= (int64_t)*(int32_t *)&g40) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x405709\n            function_406870(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4055c0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4055c7\n        int64_t v9; // 0x405570\n        if (g37 == &g38) {\n            int64_t v10 = function_406680(0, v8); // 0x4056ea\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g38); // 0x4056ef\n            *(int64_t *)&g37 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406680(v4, v8); // 0x4055db\n            *(int64_t *)&g37 = v12;\n            v9 = v12;\n        }\n        // 0x4055ea\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g40; // 0x4055ea\n        int32_t v14 = v7; // 0x4055f1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g40 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x405621\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40562b\n    int64_t * v17 = (int64_t *)v15; // 0x40562e\n    uint64_t v18 = *v17; // 0x40562e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x405631\n    int64_t result = *v19; // 0x405631\n    int64_t v20; // 0x405570\n    uint64_t v21 = function_404340(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x405654\n    if (v18 > v21) {\n        // 0x4056cb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x405667\n    *v17 = v22;\n    if (result != (int64_t)&g54) {\n        // 0x405677\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406620(v22); // 0x405691\n    *v19 = result2;\n    int64_t v23; // 0x405570\n    function_404340(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4056cb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "405744",
            "decompiledFuncCode": "int64_t function_405710(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405717\n    int64_t result = function_406820(a1 == 0 ? (int64_t)&g55 : a1, 56); // 0x405736\n    return result;\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "40575f",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g55 : a1); // 0x40575c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "40576f",
            "decompiledFuncCode": "int64_t function_405760(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 : a1; // 0x405768\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g55;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "4057a3",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 + 8 : a1 + 8; // 0x405789\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40578e\n    uint32_t v3 = *v2; // 0x40578e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405792\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057c3",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g55 + 4 : a1 + 4); // 0x4057bc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "4057fb",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 : a1; // 0x4057d8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4057f5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4057ec\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g55;\n}\n"
        },
        {
            "funcName": "function_405800",
            "funcStartAddr": "405800",
            "funcEndAddr": "405872",
            "decompiledFuncCode": "int64_t function_405800(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g55 : a5; // 0x405822\n    int32_t * v2 = __errno_location(); // 0x40582b\n    uint32_t v3 = *(int32_t *)v1; // 0x40584b\n    int64_t result = function_404340(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40585a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "405961",
            "decompiledFuncCode": "int64_t function_405880(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g55 : a4; // 0x4058a2\n    int32_t * v2 = __errno_location(); // 0x4058a8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4058c7\n    int32_t * v4 = (int32_t *)v1; // 0x4058ca\n    int64_t v5 = function_404340(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4058e5\n    int64_t v6 = v5 + 1; // 0x4058ea\n    int64_t result = function_406620(v6); // 0x4058ff\n    function_404340(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405944\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40594d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "40597a",
            "decompiledFuncCode": "int64_t function_405970(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405970\n    return function_405880(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405980",
            "funcStartAddr": "405980",
            "funcEndAddr": "405a15",
            "decompiledFuncCode": "int64_t function_405980(void) {\n    uint32_t v1 = *(int32_t *)&g40; // 0x405980\n    int64_t v2 = v1; // 0x405980\n    int64_t v3 = v2; // 0x405994\n    if (v1 >= 2) {\n        int64_t v4 = &g40;\n        int64_t v5 = v4 + 16; // 0x4059b3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g67;\n        while (v5 != (int64_t)g37 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4059b0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g67;\n        }\n    }\n    int64_t v6 = v3; // 0x4059cd\n    if (g38 != 0x61d320) {\n        // 0x4059cf\n        free((int64_t *)g38);\n        g38 = 256;\n        *(int64_t *)&g39 = (int64_t)&g54;\n        v6 = &g67;\n    }\n    int64_t result = v6; // 0x4059f1\n    if (g37 != &g38) {\n        // 0x4059f3\n        free(g37);\n        *(int64_t *)&g37 = (int64_t)&g38;\n        result = &g67;\n    }\n    // 0x405a06\n    *(int32_t *)&g40 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a20",
            "funcStartAddr": "405a20",
            "funcEndAddr": "405a31",
            "decompiledFuncCode": "int64_t function_405a20(void) {\n    // 0x405a20\n    int64_t v1; // 0x405a20\n    return function_405570(v1, v1, -1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405a4a",
            "decompiledFuncCode": "int64_t function_405a40(void) {\n    // 0x405a40\n    int64_t v1; // 0x405a40\n    return function_405570(v1, v1, v1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_405a50",
            "funcStartAddr": "405a50",
            "funcEndAddr": "405a66",
            "decompiledFuncCode": "int64_t function_405a50(int64_t a1) {\n    // 0x405a50\n    return function_405570(0, a1, -1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405a82",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1, int64_t a2) {\n    // 0x405a70\n    return function_405570(0, a1, a2, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_405a90",
            "funcStartAddr": "405a90",
            "funcEndAddr": "405af8",
            "decompiledFuncCode": "int64_t function_405a90(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405aa0\n    return function_405570((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405b00",
            "funcStartAddr": "405b00",
            "funcEndAddr": "405b64",
            "decompiledFuncCode": "int64_t function_405b00(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405b10\n    return function_405570((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405b7c",
            "decompiledFuncCode": "int64_t function_405b70(int64_t a1, int64_t a2) {\n    // 0x405b70\n    return function_405a90(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405b80",
            "funcStartAddr": "405b80",
            "funcEndAddr": "405b8f",
            "decompiledFuncCode": "int64_t function_405b80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405b80\n    return function_405b00(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405b90",
            "funcStartAddr": "405b90",
            "funcEndAddr": "405c00",
            "decompiledFuncCode": "int64_t function_405b90(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g55); // 0x405b9d\n    int128_t v2 = __asm_movdqa(g56); // 0x405ba5\n    int128_t v3 = __asm_movdqa(g57); // 0x405bad\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x405bc2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405bd8\n    uint32_t v6 = *v5; // 0x405bd8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x405bdd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405570(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "405c0d",
            "decompiledFuncCode": "int64_t function_405c00(int64_t a1, int64_t a2) {\n    // 0x405c00\n    return function_405b90(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405c10",
            "funcStartAddr": "405c10",
            "funcEndAddr": "405c21",
            "decompiledFuncCode": "int64_t function_405c10(int64_t a1) {\n    // 0x405c10\n    return function_405b90(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405c30",
            "funcStartAddr": "405c30",
            "funcEndAddr": "405c3a",
            "decompiledFuncCode": "int64_t function_405c30(void) {\n    // 0x405c30\n    int64_t v1; // 0x405c30\n    return function_405b90(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405cae",
            "decompiledFuncCode": "int64_t function_405c40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405c5a\n    return function_405570(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405d1c",
            "decompiledFuncCode": "int64_t function_405cb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g55); // 0x405cb7\n    int128_t v2 = __asm_movdqa(g56); // 0x405cbf\n    int128_t v3 = __asm_movdqa(g57); // 0x405cc7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405ce9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405d17\n        abort();\n        // UNREACHABLE\n    }\n    // 0x405cfa\n    return function_405570(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405d20",
            "funcStartAddr": "405d20",
            "funcEndAddr": "405d29",
            "decompiledFuncCode": "int64_t function_405d20(void) {\n    // 0x405d20\n    int64_t v1; // 0x405d20\n    return function_405cb0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405d30",
            "funcStartAddr": "405d30",
            "funcEndAddr": "405d47",
            "decompiledFuncCode": "int64_t function_405d30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405d30\n    return function_405cb0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405d50",
            "funcStartAddr": "405d50",
            "funcEndAddr": "405d63",
            "decompiledFuncCode": "int64_t function_405d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405d50\n    return function_405cb0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "405d7a",
            "decompiledFuncCode": "int64_t function_405d70(void) {\n    // 0x405d70\n    int64_t v1; // 0x405d70\n    return function_405570(v1, v1, v1, &g36);\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "405d92",
            "decompiledFuncCode": "int64_t function_405d80(int64_t a1, int64_t a2) {\n    // 0x405d80\n    return function_405570(0, a1, a2, &g36);\n}\n"
        },
        {
            "funcName": "function_405da0",
            "funcStartAddr": "405da0",
            "funcEndAddr": "405db1",
            "decompiledFuncCode": "int64_t function_405da0(void) {\n    // 0x405da0\n    int64_t v1; // 0x405da0\n    return function_405570(v1, v1, -1, &g36);\n}\n"
        },
        {
            "funcName": "function_405dc0",
            "funcStartAddr": "405dc0",
            "funcEndAddr": "405dd6",
            "decompiledFuncCode": "int64_t function_405dc0(int64_t a1) {\n    // 0x405dc0\n    return function_405570(0, a1, -1, &g36);\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405e11",
            "decompiledFuncCode": "int64_t function_405de0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_407e50(a1, 0, a2); // 0x405df1\n    return v1 != 0 ? 1 - a1 + v1 : a2;\n}\n"
        },
        {
            "funcName": "function_405e20",
            "funcStartAddr": "405e20",
            "funcEndAddr": "406071",
            "decompiledFuncCode": "int64_t function_405e20(void) {\n    // 0x405e20\n    int64_t v1; // 0x405e20\n    uint64_t v2 = v1;\n    char v3 = v2;\n    char v4 = v1;\n    int64_t v5 = v1 % 256; // 0x405e23\n    int64_t v6; // 0x405e20\n    int64_t v7; // 0x405e20\n    int64_t v8; // 0x405e20\n    int64_t v9; // 0x405e20\n    int64_t v10; // 0x405e20\n    int64_t v11; // 0x405e20\n    int64_t v12; // 0x405e20\n    int64_t v13; // 0x405e20\n    int64_t v14; // 0x405e20\n    int64_t v15; // 0x405e20\n    int64_t v16; // 0x405e20\n    int64_t v17; // 0x405e20\n    int64_t v18; // 0x405e20\n    int64_t v19; // 0x405e20\n    if (v3 == 45) {\n        int64_t v20; // 0x405e20\n        int64_t v21 = v20 + 1; // 0x405ed0\n        unsigned char v22 = *(char *)v21; // 0x405ed4\n        v20 = v21;\n        while (v22 == 48) {\n            // 0x405ed0\n            v21 = v20 + 1;\n            v22 = *(char *)v21;\n            v20 = v21;\n        }\n        int64_t v23 = (int64_t)v22 + 0xffffffd0; // 0x405edf\n        if (v4 != 45) {\n            // 0x405ee8\n            if ((int32_t)v23 < 10) {\n                // 0x405f28\n                return 0xffffffff;\n            }\n            // 0x405ef8\n            if (v4 != 48) {\n                // 0x405f01\n                return (int32_t)v5 < 58 ? 0xffffffff : 0;\n            }\n            int64_t v24; // 0x405e20\n            int64_t v25 = v24 + 1; // 0x406000\n            unsigned char v26 = *(char *)v25; // 0x406004\n            v24 = v25;\n            while (v26 == 48) {\n                // 0x406000\n                v25 = v24 + 1;\n                v26 = *(char *)v25;\n                v24 = v25;\n            }\n            // 0x405f01\n            return (int32_t)(int64_t)v26 < 58 ? 0xffffffff : 0;\n        }\n        int64_t v27; // 0x405e20\n        int64_t v28 = v27 + 1; // 0x405f50\n        unsigned char v29 = *(char *)v28; // 0x405f54\n        v27 = v28;\n        while (v29 == 48) {\n            // 0x405f50\n            v28 = v27 + 1;\n            v29 = *(char *)v28;\n            v27 = v28;\n        }\n        int64_t v30 = v29; // 0x405f54\n        v8 = v28;\n        v9 = v21;\n        v19 = v30;\n        v13 = v23;\n        if (v22 != v29) {\n            goto lab_0x405f82;\n        } else {\n            // 0x405f60\n            v11 = v28;\n            v18 = v30;\n            if ((int32_t)v23 < 10) {\n                int64_t v31 = v21 + 1; // 0x405f6a\n                int64_t v32 = v28 + 1; // 0x405f6e\n                unsigned char v33 = *(char *)v31; // 0x405f72\n                int64_t v34 = v33;\n                while (v33 == *(char *)v32) {\n                    // 0x405f60\n                    v11 = v32;\n                    v18 = v34;\n                    if ((int32_t)(v34 + 0xffffffd0) >= 10) {\n                        goto lab_0x406058;\n                    }\n                    v31++;\n                    v32++;\n                    v33 = *(char *)v31;\n                    v34 = v33;\n                }\n            } else {\n                goto lab_0x406058;\n            }\n        }\n    } else {\n        int64_t v35 = v2 % 256; // 0x405e20\n        if (v4 == 45) {\n            int64_t v36; // 0x405e20\n            int64_t v37 = v36 + 1; // 0x405f10\n            unsigned char v38 = *(char *)v37; // 0x405f14\n            v36 = v37;\n            while (v38 == 48) {\n                // 0x405f10\n                v37 = v36 + 1;\n                v38 = *(char *)v37;\n                v36 = v37;\n            }\n            // 0x405f1b\n            if ((int32_t)v38 < 58) {\n                // 0x405f28\n                return 1;\n            }\n            // 0x405f37\n            if (v3 != 48) {\n                // 0x405f3c\n                return (int32_t)v35 < 58;\n            }\n            int64_t v39; // 0x405e20\n            int64_t v40 = v39 + 1; // 0x405f30\n            unsigned char v41 = *(char *)v40; // 0x405f34\n            v39 = v40;\n            while (v41 == 48) {\n                // 0x405f30\n                v40 = v39 + 1;\n                v41 = *(char *)v40;\n                v39 = v40;\n            }\n            // 0x405f3c\n            return (int32_t)(int64_t)v41 < 58;\n        }\n        int64_t v42 = v35; // 0x405e43\n        int64_t v43; // 0x405e20\n        if (v3 == 48) {\n            int64_t v44; // 0x405e20\n            int64_t v45 = v44 + 1; // 0x405ff0\n            unsigned char v46 = *(char *)v45; // 0x405ff4\n            v44 = v45;\n            while (v46 == 48) {\n                // 0x405ff0\n                v45 = v44 + 1;\n                v46 = *(char *)v45;\n                v44 = v45;\n            }\n            // 0x405e40\n            v43 = v45;\n            v42 = v46;\n        }\n        int64_t v47 = v5; // 0x405e4c\n        int64_t v48; // 0x405e20\n        if (v4 == 48) {\n            int64_t v49; // 0x405e20\n            int64_t v50 = v49 + 1; // 0x405fe0\n            unsigned char v51 = *(char *)v50; // 0x405fe4\n            v49 = v50;\n            while (v51 == 48) {\n                // 0x405fe0\n                v50 = v49 + 1;\n                v51 = *(char *)v50;\n                v49 = v50;\n            }\n            // 0x405e49\n            v48 = v50;\n            v47 = v51;\n        }\n        int64_t v52 = v42 + 0xffffffd0; // 0x405e55\n        v6 = v48;\n        v7 = v43;\n        v15 = v42;\n        v17 = v47;\n        v12 = v52;\n        if ((char)v47 != (char)v42) {\n            goto lab_0x405e80;\n        } else {\n            // 0x405e60\n            v10 = v48;\n            v14 = v42;\n            v16 = v47;\n            if ((int32_t)v52 < 10) {\n                int64_t v53 = v43 + 1; // 0x405e6a\n                int64_t v54 = v48 + 1; // 0x405e6e\n                unsigned char v55 = *(char *)v53; // 0x405e72\n                int64_t v56 = v55;\n                unsigned char v57 = *(char *)v54; // 0x405e75\n                int64_t v58 = v56 + 0xffffffd0; // 0x405e78\n                while (v55 == v57) {\n                    // 0x405e60\n                    v10 = v54;\n                    v14 = v56;\n                    v16 = v56;\n                    if ((int32_t)v58 >= 10) {\n                        goto lab_0x406040;\n                    }\n                    v53++;\n                    v54++;\n                    v55 = *(char *)v53;\n                    v56 = v55;\n                    v57 = *(char *)v54;\n                    v58 = v56 + 0xffffffd0;\n                }\n                // 0x405e80\n                v6 = v54;\n                v7 = v53;\n                v15 = v56;\n                v17 = v57;\n                v12 = v58;\n                goto lab_0x405e80;\n            } else {\n                goto lab_0x406040;\n            }\n        }\n    }\n  lab_0x406058:;\n    int64_t v59 = v11; // 0x40605d\n    int64_t v60 = v18; // 0x40605d\n    goto lab_0x406060;\n  lab_0x406040:;\n    int64_t v73 = v10; // 0x406040\n    int64_t v74 = v14 - v16 & 0xffffffff; // 0x406040\n    int64_t v75 = v16; // 0x406040\n    goto lab_0x406042;\n  lab_0x405f82:\n    // 0x405f82\n    v59 = v8;\n    v60 = v19;\n    int64_t v61; // 0x405e20\n    if ((int32_t)v13 < 10) {\n        int64_t v76 = 1;\n        unsigned char v77 = *(char *)(v76 + v9); // 0x405fa0\n        while (v77 == 57 || (int32_t)v77 < 57) {\n            // 0x405fa0\n            int64_t v78; // 0x405e20\n            v76 = v78 + 1;\n            v77 = *(char *)(v76 + v9);\n            v78 = v76;\n        }\n        // 0x405fb2\n        v61 = v8;\n        if ((int32_t)v19 >= 58) {\n            // 0x406029\n            return v76 != 0 ? 0xffffffff : 0;\n        }\n        goto lab_0x405fba;\n    } else {\n        goto lab_0x406060;\n    }\n  lab_0x405e80:;\n    int64_t v79 = v15 - v17 & 0xffffffff; // 0x405e80\n    v73 = v6;\n    v74 = v79;\n    v75 = v17;\n    int64_t v69; // 0x405e20\n    int64_t v71; // 0x405e20\n    int64_t v72; // 0x405e20\n    if ((int32_t)v12 < 10) {\n        int64_t v80 = 1;\n        int64_t v81 = v80; // 0x405ea0\n        while ((int32_t)*(char *)(v80 + v7) < 58) {\n            // 0x405e90\n            v80 = v81 + 1;\n            v81 = v80;\n        }\n        // 0x405ea2\n        v69 = v6;\n        v72 = v79;\n        v71 = v80;\n        if ((int32_t)v17 >= 58) {\n            // 0x406020\n            return v80 != 0;\n        }\n        goto lab_0x405eae;\n    } else {\n        goto lab_0x406042;\n    }\n  lab_0x406060:\n    // 0x406060\n    v61 = v59;\n    if ((int32_t)v60 >= 58) {\n        // 0x405f28\n        return 0;\n    }\n    goto lab_0x405fba;\n  lab_0x406042:\n    // 0x406042\n    v69 = v73;\n    v72 = v74;\n    v71 = 0;\n    if ((int32_t)v75 >= 58) {\n        // 0x405f28\n        return 0;\n    }\n    goto lab_0x405eae;\n  lab_0x405fba:;\n    int64_t v62 = 1;\n    unsigned char v63 = *(char *)(v62 + v61); // 0x405fc0\n    int64_t v64 = v62; // 0x405fcf\n    while (v63 == 57 || (int32_t)v63 < 57) {\n        // 0x405fc0\n        v62 = v64 + 1;\n        v63 = *(char *)(v62 + v61);\n        v64 = v62;\n    }\n    // 0x405fd1\n    int64_t v65; // 0x405e20\n    if (v65 != v62) {\n        // 0x405fd6\n        return v65 < v62 ? 1 : 0xffffffff;\n    }\n    // 0x406010\n    int64_t v66; // 0x405e20\n    return v65 == 0 ? 0 : v66 & 0xffffffff;\n  lab_0x405eae:;\n    int64_t v67 = 1;\n    unsigned char v68 = *(char *)(v67 + v69); // 0x405eb0\n    int64_t v70 = v67; // 0x405ebf\n    while (v68 == 57 || (int32_t)v68 < 57) {\n        // 0x405eb0\n        v67 = v70 + 1;\n        v68 = *(char *)(v67 + v69);\n        v70 = v67;\n    }\n    // 0x405ec1\n    if (v71 == v67) {\n        // 0x406010\n        return v71 == 0 ? 0 : v72 & 0xffffffff;\n    }\n    // 0x405eca\n    return v71 < v67 ? 0xffffffff : 1;\n}\n"
        },
        {
            "funcName": "function_406080",
            "funcStartAddr": "406080",
            "funcEndAddr": "40645d",
            "decompiledFuncCode": "int64_t function_406080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x406118\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40609c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4060b6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4060fb\n    if (a6 < 10) {\n        // 0x40610a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x406202\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_406460",
            "funcStartAddr": "406460",
            "funcEndAddr": "406480",
            "decompiledFuncCode": "int64_t function_406460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406460\n    if (a5 == 0) {\n        // 0x40647b\n        return function_406080(a1, a2, a3, a4, a5, 0, (int64_t)&g67);\n    }\n    int64_t v1 = 0; // 0x406467\n    v1++;\n    int64_t v2 = v1; // 0x406479\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406470\n        v1++;\n        v2 = v1;\n    }\n    // 0x40647b\n    return function_406080(a1, a2, a3, a4, a5, v2, (int64_t)&g67);\n}\n"
        },
        {
            "funcName": "function_406480",
            "funcStartAddr": "406480",
            "funcEndAddr": "4064e0",
            "decompiledFuncCode": "int64_t function_406480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x406480\n    int64_t v4 = &v3; // 0x406480\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x4064b3\n    int64_t v7; // 0x40649d\n    int64_t * v8; // 0x4064bb\n    int64_t v9; // 0x4064bb\n    int64_t v10; // 0x4064c7\n    if (v6 < 48) {\n        // 0x406490\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x4064d3\n            break;\n        }\n    } else {\n        // 0x4064bb\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x4064d3\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x4064b1\n    while (v5 != 9) {\n        // 0x4064a9\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x406490\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x4064d3\n                break;\n            }\n        } else {\n            // 0x4064bb\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x4064d3\n                break;\n            }\n        }\n        // 0x4064a9\n        v11 = 10;\n    }\n    // 0x4064d3\n    return function_406080(a1, a2, a3, a4, v4, v11, (int64_t)&g67);\n}\n"
        },
        {
            "funcName": "function_4064e0",
            "funcStartAddr": "4064e0",
            "funcEndAddr": "40659c",
            "decompiledFuncCode": "int64_t function_4064e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4064e0\n    int64_t v1; // bp-168, 0x4064e0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4064e0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4064e0\n    int64_t v8; // 0x4064e0\n    int64_t v9; // bp-56, 0x4064e0\n    int64_t v10; // 0x406545\n    int64_t v11; // 0x406569\n    if ((int32_t)v6 < 48) {\n        // 0x406530\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406580\n            break;\n        }\n    } else {\n        // 0x406562\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406580\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40655a\n    int64_t v13 = 10; // 0x40655a\n    while (v5 != 9) {\n        // 0x40655c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x406530\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406580\n                break;\n            }\n        } else {\n            // 0x406562\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406580\n                break;\n            }\n        }\n        // 0x406552\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406580\n    int64_t v14; // bp-136, 0x4064e0\n    int64_t result = function_406080(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g67); // 0x40658f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4065a0",
            "funcStartAddr": "4065a0",
            "funcEndAddr": "406614",
            "decompiledFuncCode": "int64_t function_4065a0(int64_t a1) {\n    // 0x4065a0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406603\n    return fputs_unlocked(v1, g45);\n}\n"
        },
        {
            "funcName": "function_406620",
            "funcStartAddr": "406620",
            "funcEndAddr": "40663a",
            "decompiledFuncCode": "int64_t function_406620(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406624\n    if (size != 0 != (mem == NULL)) {\n        // 0x406633\n        return (int64_t)mem;\n    }\n    // 0x406635\n    function_406870(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406640",
            "funcStartAddr": "406640",
            "funcEndAddr": "406661",
            "decompiledFuncCode": "int64_t function_406640(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x406643\n    int64_t v2 = v1; // 0x406643\n    if (v2 < 0) {\n        // 0x40665b\n        function_406870(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406659\n        return function_406620(v2);\n    }\n    // 0x40665b\n    function_406870(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406670",
            "funcStartAddr": "406670",
            "funcEndAddr": "406672",
            "decompiledFuncCode": "int64_t function_406670(void) {\n    // 0x406670\n    int64_t v1; // 0x406670\n    return function_406620(v1);\n}\n"
        },
        {
            "funcName": "function_406680",
            "funcStartAddr": "406680",
            "funcEndAddr": "4066b6",
            "decompiledFuncCode": "int64_t function_406680(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4066a8\n        free(v1);\n        return (int32_t)&g67 ^ (int32_t)&g67;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406691\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4066a0\n        return (int64_t)mem;\n    }\n    // 0x4066b1\n    function_406870(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4066c0",
            "funcStartAddr": "4066c0",
            "funcEndAddr": "4066e1",
            "decompiledFuncCode": "int64_t function_4066c0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4066c3\n    int64_t v2 = v1; // 0x4066c3\n    if (v2 < 0) {\n        // 0x4066db\n        function_406870(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4066d9\n        return function_406680(a1, v2);\n    }\n    // 0x4066db\n    function_406870(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "406776",
            "decompiledFuncCode": "int64_t function_4066f0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40674b\n            function_406870(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406680(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406733\n    if (a2 == 0) {\n        // 0x406758\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406738\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40674b\n        function_406870(a1);\n        // UNREACHABLE\n    }\n    // 0x40671a\n    *(int64_t *)a2 = v2;\n    return function_406680(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "4067d0",
            "decompiledFuncCode": "int64_t function_406780(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406780\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4067ca\n            function_406870(a1);\n            // UNREACHABLE\n        }\n        // 0x4067a2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406680(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4067b5\n        *(int64_t *)a2 = 128;\n        return function_406680(0, 128);\n    }\n    // 0x4067c8\n    if (a2 < 0) {\n        // 0x4067ca\n        function_406870(a1);\n        // UNREACHABLE\n    }\n    // 0x4067a2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406680(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "4067e7",
            "decompiledFuncCode": "int64_t function_4067d0(int64_t a1, int64_t a2) {\n    // 0x4067d0\n    return (int64_t)memset((int64_t *)function_406620(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4067f0",
            "funcStartAddr": "4067f0",
            "funcEndAddr": "40681e",
            "decompiledFuncCode": "int64_t function_4067f0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4067f7\n    if ((int64_t)v1 < 0) {\n        // 0x406819\n        function_406870(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406819\n        function_406870(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40680a\n    if (mem != NULL) {\n        // 0x406814\n        return (int64_t)mem;\n    }\n    // 0x406819\n    function_406870(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406820",
            "funcStartAddr": "406820",
            "funcEndAddr": "406848",
            "decompiledFuncCode": "int64_t function_406820(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406620(a2); // 0x40682f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406850",
            "funcStartAddr": "406850",
            "funcEndAddr": "406863",
            "decompiledFuncCode": "int64_t function_406850(int64_t str) {\n    // 0x406850\n    return function_406820(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406870",
            "funcStartAddr": "406870",
            "funcEndAddr": "4068a1",
            "decompiledFuncCode": "int64_t function_406870(int64_t a1) {\n    // 0x406870\n    error(g35, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4068b0",
            "funcStartAddr": "4068b0",
            "funcEndAddr": "4070df",
            "decompiledFuncCode": "int64_t function_4068b0(int64_t a1, int32_t a2, int64_t a3, char * a4, int32_t a5) {\n    uint32_t v1 = (int32_t)a3; // 0x4068c2\n    if (v1 >= 37) {\n        // 0x40707c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    int64_t str = a5;\n    int64_t v2; // bp-64, 0x4068b0\n    int64_t v3 = a2 == 0 ? (int64_t)&v2 : (int64_t)a2; // 0x4068d8\n    int32_t * v4 = __errno_location(); // 0x4068e2\n    *v4 = 0;\n    char * v5 = (char *)a1;\n    int32_t v6 = __strtol_internal(v5, (char **)v3, v1, 0); // 0x4068fa\n    int64_t * v7 = (int64_t *)v3; // 0x4068ff\n    int64_t v8 = *v7; // 0x4068ff\n    int64_t v9; // 0x4068b0\n    int64_t v10; // 0x4068b0\n    int64_t v11; // 0x4068b0\n    char v12; // 0x4068b0\n    int64_t v13; // 0x4068b0\n    int64_t v14; // 0x4068b0\n    int64_t v15; // 0x4068b0\n    if (v8 == a1) {\n        // 0x406958\n        if (a5 == 0) {\n            // 0x40692e\n            return 4;\n        }\n        char c = *v5; // 0x406961\n        if (c == 0) {\n            // 0x40692e\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40697f\n        v14 = 1;\n        v10 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x40692e\n            return 4;\n        }\n        goto lab_0x40698d;\n    } else {\n        int32_t v16 = *v4; // 0x40690a\n        int64_t v17 = 0; // 0x406910\n        if (v16 != 0) {\n            // 0x406940\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x40692e\n                return 4;\n            }\n        }\n        int64_t v18 = v6; // 0x4068fa\n        v13 = v18;\n        v9 = v17;\n        if (a5 == 0) {\n            goto lab_0x406927;\n        } else {\n            char c2 = *(char *)v8; // 0x40691a\n            v13 = v18;\n            v9 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x406a27\n                v14 = v18;\n                v10 = v17;\n                v12 = c2;\n                v15 = v18;\n                v11 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40698d;\n                } else {\n                    goto lab_0x406a35;\n                }\n            } else {\n                goto lab_0x406927;\n            }\n        }\n    }\n  lab_0x40698d:;\n    int64_t v19 = v10;\n    int64_t v20 = v14;\n    unsigned char v21 = v12 - 69;\n    int64_t v22 = 1024; // 0x406994\n    int64_t v23 = 1; // 0x406994\n    int64_t v24; // 0x4068b0\n    int64_t v25; // 0x4068b0\n    int64_t v26; // 0x4068b0\n    int64_t v27; // 0x4068b0\n    int64_t v28; // 0x4068b0\n    int64_t v29; // 0x4068b0\n    int64_t v30; // 0x4068b0\n    int64_t v31; // 0x4068b0\n    int64_t v32; // 0x4068b0\n    int64_t v33; // 0x4068b0\n    int64_t v34; // 0x4068b0\n    int64_t v35; // 0x4068b0\n    int64_t v36; // 0x4068b0\n    int64_t v37; // 0x4068b0\n    int64_t v38; // 0x4068b0\n    int64_t v39; // 0x4068b0\n    int64_t v40; // 0x4068b0\n    int64_t v41; // 0x4068b0\n    int64_t v42; // 0x4068b0\n    if (v21 < 48) {\n        // 0x4069c0\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4069a0;\n        } else {\n            // 0x4069d4\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4069a0;\n            } else {\n                // 0x4069e6\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x4069a0;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v8 + 2); // 0x406fc2\n                        v22 = 1024;\n                        v23 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x4069a0;\n                    }\n                    default: {\n                        // 0x4069fb\n                        g69 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v15 = v20;\n                        v11 = v19;\n                        v25 = v20;\n                        v32 = 1;\n                        v24 = v19;\n                        v26 = 1024;\n                        v33 = 1;\n                        v37 = -0x20000000000000;\n                        v38 = 1;\n                        v27 = 1024;\n                        v34 = 1;\n                        v40 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v42 = -0x20000000000000;\n                        v29 = 1024;\n                        v36 = 1;\n                        v41 = -0x20000000000000;\n                        v30 = 1024;\n                        v31 = 1;\n                        v39 = -0x20000000000000;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x406c88;\n                            }\n                            case 70: {\n                                goto lab_0x406a35;\n                            }\n                            case 71: {\n                                goto lab_0x406cf0;\n                            }\n                            case 72: {\n                                goto lab_0x406a35;\n                            }\n                            case 73: {\n                                goto lab_0x406a35;\n                            }\n                            case 74: {\n                                goto lab_0x406a35;\n                            }\n                            case 75: {\n                                goto lab_0x406ad5;\n                            }\n                            case 76: {\n                                goto lab_0x406a35;\n                            }\n                            case 77: {\n                                goto lab_0x406b18;\n                            }\n                            case 78: {\n                                goto lab_0x406a35;\n                            }\n                            case 79: {\n                                goto lab_0x406a35;\n                            }\n                            case 80: {\n                                goto lab_0x406bb8;\n                            }\n                            case 81: {\n                                goto lab_0x406a35;\n                            }\n                            case 82: {\n                                goto lab_0x406a35;\n                            }\n                            case 83: {\n                                goto lab_0x406a35;\n                            }\n                            case 84: {\n                                goto lab_0x406c20;\n                            }\n                            case 85: {\n                                goto lab_0x406a35;\n                            }\n                            case 86: {\n                                goto lab_0x406a35;\n                            }\n                            case 87: {\n                                goto lab_0x406a35;\n                            }\n                            case 88: {\n                                goto lab_0x406a35;\n                            }\n                            case 89: {\n                                goto lab_0x406d58;\n                            }\n                            case 90: {\n                                goto lab_0x406dc0;\n                            }\n                            case 91: {\n                                goto lab_0x406a35;\n                            }\n                            case 92: {\n                                goto lab_0x406a35;\n                            }\n                            case 93: {\n                                goto lab_0x406a35;\n                            }\n                            case 94: {\n                                goto lab_0x406a35;\n                            }\n                            case 95: {\n                                goto lab_0x406a35;\n                            }\n                            case 96: {\n                                goto lab_0x406a35;\n                            }\n                            case 97: {\n                                goto lab_0x406a35;\n                            }\n                            case 98: {\n                                goto lab_0x406b85;\n                            }\n                            case 99: {\n                                goto lab_0x406a78;\n                            }\n                            case 100: {\n                                goto lab_0x406a35;\n                            }\n                            case 101: {\n                                goto lab_0x406a35;\n                            }\n                            case 102: {\n                                goto lab_0x406a35;\n                            }\n                            case 103: {\n                                goto lab_0x406cf0;\n                            }\n                            case 104: {\n                                goto lab_0x406a35;\n                            }\n                            case 105: {\n                                goto lab_0x406a35;\n                            }\n                            case 106: {\n                                goto lab_0x406a35;\n                            }\n                            case 107: {\n                                goto lab_0x406ad5;\n                            }\n                            case 108: {\n                                goto lab_0x406a35;\n                            }\n                            case 109: {\n                                goto lab_0x406b18;\n                            }\n                            case 110: {\n                                goto lab_0x406a35;\n                            }\n                            case 111: {\n                                goto lab_0x406a35;\n                            }\n                            case 112: {\n                                goto lab_0x406a35;\n                            }\n                            case 113: {\n                                goto lab_0x406a35;\n                            }\n                            case 114: {\n                                goto lab_0x406a35;\n                            }\n                            case 115: {\n                                goto lab_0x406a35;\n                            }\n                            case 116: {\n                                goto lab_0x406c20;\n                            }\n                            default: {\n                                goto lab_0x4069a0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4069a0;\n    }\n  lab_0x406927:\n    // 0x406927\n    *(int64_t *)a4 = v13;\n    // 0x40692e\n    return v9 & 0xffffffff;\n  lab_0x4069a0:\n    // 0x4069a0\n    g68 = v12 - 66;\n    v15 = v20;\n    v11 = v19;\n    v25 = v20;\n    v32 = v23;\n    v24 = v19;\n    v38 = v23;\n    switch (v12) {\n        case 66: {\n            // 0x406a71\n            v25 = 1024 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x406a78;\n        }\n        case 69: {\n            // 0x406c70\n            v29 = v22;\n            v36 = v23;\n            v41 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406c88;\n        }\n        case 71: {\n            goto lab_0x406cf0;\n        }\n        case 75: {\n            goto lab_0x406ad5;\n        }\n        case 77: {\n            goto lab_0x406b00;\n        }\n        case 80: {\n            // 0x406ba0\n            v27 = v22;\n            v34 = v23;\n            v40 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406bb8;\n        }\n        case 84: {\n            goto lab_0x406c08;\n        }\n        case 89: {\n            // 0x406d40\n            goto lab_0x406d58;\n        }\n        case 90: {\n            // 0x406da8\n            v30 = v22;\n            v31 = v23;\n            v39 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406dc0;\n        }\n        case 98: {\n            goto lab_0x406b85;\n        }\n        case 99: {\n            goto lab_0x406a78;\n        }\n        case 103: {\n            goto lab_0x406cf0;\n        }\n        case 107: {\n            goto lab_0x406ad5;\n        }\n        case 109: {\n            goto lab_0x406b00;\n        }\n        case 116: {\n            goto lab_0x406c08;\n        }\n        case 119: {\n            // 0x406ab9\n            v25 = 2 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x406a78;\n        }\n        default: {\n            goto lab_0x406a35;\n        }\n    }\n    // 0x406cd8\n    goto lab_0x406cf0;\n    // 0x406ac0\n    goto lab_0x406ad5;\n  lab_0x406b00:\n    // 0x406b00\n    v26 = v22;\n    v33 = v23;\n    v37 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x406b18;\n  lab_0x406c08:\n    // 0x406c08\n    v28 = v22;\n    v35 = v23;\n    v42 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x406c20;\n  lab_0x406b85:\n    // 0x406b85\n    v25 = 512 * v20;\n    v32 = v38;\n    v24 = v19;\n    goto lab_0x406a78;\n  lab_0x406a78:;\n    int64_t v63 = v24;\n    int64_t v64 = v32 + v8; // 0x406a78\n    *v7 = v64;\n    v13 = v25;\n    v9 = (*(char *)v64 != 0 ? v63 | 2 : v63) & 0xffffffff;\n    goto lab_0x406927;\n  lab_0x406a35:\n    // 0x406a35\n    *(int64_t *)a4 = v15;\n    // 0x40692e\n    return (v11 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x406c88:;\n    uint64_t v65 = v29;\n    int64_t v66 = v20;\n    int64_t v67 = -0x8000000000000000; // 0x406cc1\n    int64_t v68 = 1; // 0x406cc1\n    if (v66 >= v41) {\n        // 0x406ca0\n        v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n        v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : 0;\n    }\n    int32_t v69 = 5; // 0x406cb5\n    int32_t v70 = v69; // 0x406cb8\n    int64_t v71 = v68; // 0x406cb8\n    int64_t v59 = v67; // 0x406cb8\n    int64_t v61 = v36; // 0x406cb8\n    int64_t v62 = v68; // 0x406cb8\n    while (v69 != 0) {\n        // 0x406cbe\n        v66 = v67;\n        v67 = -0x8000000000000000;\n        v68 = 1;\n        if (v66 >= v41) {\n            // 0x406ca0\n            v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n            v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : v71;\n        }\n        // 0x406cb5\n        v69 = v70 - 1;\n        v70 = v69;\n        v71 = v68;\n        v59 = v67;\n        v61 = v36;\n        v62 = v68;\n    }\n    goto lab_0x406ef0;\n  lab_0x406cf0:\n    // 0x406cf0\n    while (true) {\n        // 0x406d26\n        int32_t v44; // 0x4068b0\n        int32_t v45 = v44;\n        int64_t v46; // 0x4068b0\n        int64_t v47 = v46;\n        int64_t v48 = -0x8000000000000000; // 0x406d29\n        int64_t v49 = 1; // 0x406d29\n        int64_t v50; // 0x4068b0\n        uint64_t v51; // 0x4068b0\n        if (v47 >= v51) {\n            int64_t v52 = v50;\n            uint64_t v53; // 0x4068b0\n            int64_t v54 = v47 > 0x7fffffffffffffff / v53 ? 0x7fffffffffffffff : v47 * v53;\n            int64_t v55 = v47 > 0x7fffffffffffffff / v53 ? 1 : v52;\n            v48 = v54;\n            v49 = v55;\n        }\n        int64_t v56 = v49;\n        int64_t v57 = v48;\n        int32_t v58 = v45 - 1; // 0x406d1d\n        v46 = v57;\n        v44 = v58;\n        v50 = v56;\n        v59 = v57;\n        int64_t v60; // 0x4068b0\n        v61 = v60;\n        v62 = v56;\n        if (v58 == 0) {\n            // break -> 0x406ef0\n            break;\n        }\n    }\n    goto lab_0x406ef0;\n  lab_0x406ad5:;\n    int64_t v76 = 1;\n    v25 = -0x8000000000000000;\n    v32 = v76;\n    v24 = 1;\n    int64_t v73; // 0x4068b0\n    int64_t v74; // 0x4068b0\n    int64_t v75; // 0x4068b0\n    int64_t v72; // 0x4068b0\n    if (v20 < -0x20000000000000) {\n        goto lab_0x406a78;\n    } else {\n        int64_t v77 = 1024;\n        v73 = 0x7fffffffffffffff / v77;\n        v75 = v77;\n        v74 = v20;\n        v72 = v76;\n        goto lab_0x406aec;\n    }\n  lab_0x406b18:\n    // 0x406b18\n    v25 = -0x8000000000000000;\n    v32 = v33;\n    v24 = 1;\n    if (v20 < v37) {\n        goto lab_0x406a78;\n    } else {\n        int64_t v78 = 0x7fffffffffffffff / v26;\n        v25 = 0x7fffffffffffffff;\n        v32 = v33;\n        v24 = 1;\n        if (v20 > v78) {\n            goto lab_0x406a78;\n        } else {\n            int64_t v79 = v26 * v20; // 0x406b38\n            v25 = -0x8000000000000000;\n            v32 = v33;\n            v24 = 1;\n            v73 = v78;\n            v75 = v26;\n            v74 = v79;\n            v72 = v33;\n            if (v79 < v37) {\n                goto lab_0x406a78;\n            } else {\n                goto lab_0x406aec;\n            }\n        }\n    }\n  lab_0x406bb8:;\n    uint64_t v80 = v27;\n    int64_t v81 = v20;\n    int64_t v82 = -0x8000000000000000; // 0x406bf1\n    int64_t v83 = 1; // 0x406bf1\n    if (v40 <= v81) {\n        // 0x406bd0\n        v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n        v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : 0;\n    }\n    int32_t v84 = 4; // 0x406be5\n    int32_t v85 = v84; // 0x406be8\n    int64_t v86 = v83; // 0x406be8\n    v59 = v82;\n    v61 = v34;\n    v62 = v83;\n    while (v84 != 0) {\n        // 0x406bee\n        v81 = v82;\n        v82 = -0x8000000000000000;\n        v83 = 1;\n        if (v40 <= v81) {\n            // 0x406bd0\n            v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n            v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : v86;\n        }\n        // 0x406be5\n        v84 = v85 - 1;\n        v85 = v84;\n        v86 = v83;\n        v59 = v82;\n        v61 = v34;\n        v62 = v83;\n    }\n    goto lab_0x406ef0;\n  lab_0x406c20:;\n    uint64_t v87 = v28;\n    int64_t v88 = v20;\n    int64_t v89 = -0x8000000000000000; // 0x406c59\n    int64_t v90 = 1; // 0x406c59\n    if (v42 <= v88) {\n        // 0x406c38\n        v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n        v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : 0;\n    }\n    int32_t v91 = 3; // 0x406c4d\n    int32_t v92 = v91; // 0x406c50\n    int64_t v93 = v90; // 0x406c50\n    v59 = v89;\n    v61 = v35;\n    v62 = v90;\n    while (v91 != 0) {\n        // 0x406c56\n        v88 = v89;\n        v89 = -0x8000000000000000;\n        v90 = 1;\n        if (v42 <= v88) {\n            // 0x406c38\n            v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n            v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : v93;\n        }\n        // 0x406c4d\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v59 = v89;\n        v61 = v35;\n        v62 = v90;\n    }\n    goto lab_0x406ef0;\n  lab_0x406d58:\n    // 0x406d58\n    while (true) {\n        // 0x406d8e\n        int32_t v94; // 0x4068b0\n        int32_t v95 = v94;\n        int64_t v96; // 0x4068b0\n        int64_t v97 = v96;\n        int64_t v98 = -0x8000000000000000; // 0x406d91\n        int64_t v99 = 1; // 0x406d91\n        int64_t v100; // 0x4068b0\n        uint64_t v101; // 0x4068b0\n        if (v101 <= v97) {\n            int64_t v102 = v100;\n            uint64_t v103; // 0x4068b0\n            int64_t v104 = v97 > 0x7fffffffffffffff / v103 ? 0x7fffffffffffffff : v97 * v103;\n            int64_t v105 = v97 > 0x7fffffffffffffff / v103 ? 1 : v102;\n            v98 = v104;\n            v99 = v105;\n        }\n        int64_t v106 = v99;\n        int64_t v107 = v98;\n        int32_t v108 = v95 - 1; // 0x406d85\n        v96 = v107;\n        v94 = v108;\n        v100 = v106;\n        v59 = v107;\n        int64_t v109; // 0x4068b0\n        v61 = v109;\n        v62 = v106;\n        if (v108 == 0) {\n            // break -> 0x406ef0\n            break;\n        }\n    }\n    goto lab_0x406ef0;\n  lab_0x406dc0:;\n    uint64_t v110 = v30;\n    int64_t v111 = v20;\n    int64_t v112 = -0x8000000000000000; // 0x406df9\n    int64_t v113 = 1; // 0x406df9\n    if (v39 <= v111) {\n        // 0x406dd8\n        v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n        v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : 0;\n    }\n    int32_t v114 = 6; // 0x406ded\n    int32_t v115 = v114; // 0x406df0\n    int64_t v116 = v113; // 0x406df0\n    v59 = v112;\n    v61 = v31;\n    v62 = v113;\n    while (v114 != 0) {\n        // 0x406df6\n        v111 = v112;\n        v112 = -0x8000000000000000;\n        v113 = 1;\n        if (v39 <= v111) {\n            // 0x406dd8\n            v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n            v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : v116;\n        }\n        // 0x406ded\n        v114 = v115 - 1;\n        v115 = v114;\n        v116 = v113;\n        v59 = v112;\n        v61 = v31;\n        v62 = v113;\n    }\n    goto lab_0x406ef0;\n  lab_0x406ef0:\n    // 0x406ef0\n    v25 = v59;\n    v32 = v61;\n    v24 = (v62 | v19) & 0xffffffff;\n    goto lab_0x406a78;\n  lab_0x406aec:\n    // 0x406aec\n    v25 = 0x7fffffffffffffff;\n    v32 = v72;\n    v24 = 1;\n    if (v73 >= v74) {\n        // 0x406af5\n        v25 = v74 * v75;\n        v32 = v72;\n        v24 = v19;\n    }\n    goto lab_0x406a78;\n}\n"
        },
        {
            "funcName": "function_4070e0",
            "funcStartAddr": "4070e0",
            "funcEndAddr": "4076fc",
            "decompiledFuncCode": "int64_t function_4070e0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4070ff\n    int64_t v2 = *v1; // 0x4070ff\n    char * str2 = (char *)v2; // 0x40710c\n    char c = *str2; // 0x40710c\n    int64_t v3 = v2; // 0x407138\n    int64_t v4 = 0; // 0x4070e0\n    int32_t v5; // 0x4070e0\n    int64_t v6; // 0x4070e0\n    int64_t v7; // 0x4070e0\n    int64_t v8; // 0x4070e0\n    int64_t v9; // 0x4070e0\n    int64_t v10; // 0x4070e0\n    int64_t v11; // 0x4070e0\n    int64_t v12; // 0x4070e0\n    int64_t v13; // 0x4070e0\n    int64_t str3; // 0x4070e0\n    int64_t v14; // 0x4070e0\n    int64_t v15; // 0x4070e0\n    int64_t v16; // 0x4070e0\n    int64_t v17; // 0x4070e0\n    int32_t v18; // 0x4070e0\n    int32_t v19; // 0x4070e0\n    int32_t v20; // 0x4070e0\n    int32_t v21; // 0x4070e0\n    int32_t v22; // 0x4070e0\n    int32_t v23; // 0x4070e0\n    int32_t v24; // 0x4070e0\n    int32_t v25; // 0x4070e0\n    int32_t v26; // 0x4070e0\n    int32_t v27; // 0x4070e0\n    int32_t v28; // 0x4070e0\n    int32_t v29; // 0x4070e0\n    int64_t nmemb; // 0x4070e0\n    int64_t v30; // 0x4070e0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40713c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407138\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407148\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40714e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407118\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40717c\n                int64_t v34; // 0x4070e0\n                int64_t v35; // 0x4070e0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407185\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x407300;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x407196\n                int64_t v37 = *(int64_t *)v36; // 0x40719a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407170\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407185\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x407300;\n                        }\n                    }\n                    // 0x407196\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4071e6:\n                    // 0x4071e6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407240;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4073b0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407240;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x407360\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40720a;\n                                } else {\n                                    // 0x40736c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40720a;\n                                    } else {\n                                        // 0x40737a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40720a;\n                                        } else {\n                                            goto lab_0x407240;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40720a;\n                            }\n                        }\n                    }\n                }\n              lab_0x407251:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x407426\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4075d2\n                            flockfile(g47);\n                            int64_t v41 = *v1; // 0x4075f2\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40763f\n                            int64_t v43 = (int64_t)g47;\n                            int64_t v44 = v43; // 0x407659\n                            int64_t v45; // 0x40765b\n                            if (*(char *)v42 != 0) {\n                                // 0x40765b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g47;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x407653\n                            while (v17 + nmemb != v42) {\n                                // 0x407655\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40765b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g47;\n                                }\n                                // 0x407648\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x407680\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g47);\n                            v40 = *v1;\n                        } else {\n                            // 0x407434\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40758f\n                        free((int64_t *)v17);\n                    }\n                    // 0x407489\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4074a0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40734e\n                    return 63;\n                }\n                // 0x407270\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4072f4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x407300:;\n                    int32_t * v49 = (int32_t *)a7; // 0x407310\n                    uint32_t v50 = *v49; // 0x407310\n                    int64_t v51 = v50; // 0x407310\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40731a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x407323\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40754f\n                                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4074fa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40734e\n                            return 63;\n                        }\n                        // 0x407398\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4076af\n                                    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4075ad\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4075c0\n                                // 0x40734e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4074be\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4074d2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40733b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40733e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407342\n                    int64_t result = v59; // 0x407348\n                    if (v58 != 0) {\n                        // 0x40734a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40734e\n                    return result;\n                }\n            } else {\n                // 0x40714e\n                v5 = v32;\n            }\n            // break -> 0x407275\n            break;\n        }\n    }\n    // 0x407275\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40728d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x407297\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40734e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4073d9\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4072c6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4072d6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407240:\n    // 0x407240\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407240\n    int64_t v63 = *(int64_t *)v62; // 0x407244\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407251\n        goto lab_0x407251;\n    }\n    goto lab_0x4071e6;\n  lab_0x40720a:\n    // 0x40720a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4070e0\n    int32_t v65; // 0x4070e0\n    int32_t v66; // 0x4070e0\n    if (v27 != 0) {\n        goto lab_0x407240;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4073c0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407240;\n            } else {\n                goto lab_0x407231;\n            }\n        } else {\n            // 0x407225\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40751c\n                int64_t v67 = (int64_t)mem; // 0x40751c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407240;\n                } else {\n                    // 0x40752f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407231;\n                }\n            } else {\n                goto lab_0x407231;\n            }\n        }\n    }\n  lab_0x407231:\n    // 0x407231\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407240;\n}\n"
        },
        {
            "funcName": "function_407700",
            "funcStartAddr": "407700",
            "funcEndAddr": "407cc6",
            "decompiledFuncCode": "int64_t function_407700(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407721\n    if (v3 < 1) {\n        // 0x4078de\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40771d\n    int32_t v5 = *(int32_t *)a7; // 0x407729\n    uint64_t v6 = a1 & 0xffffffff; // 0x40772b\n    int64_t v7 = v2; // 0x407730\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x407733\n    *v8 = 0;\n    int64_t v9; // 0x407700\n    int64_t v10; // 0x407700\n    int64_t v11; // 0x407700\n    int64_t v12; // 0x407700\n    int64_t str; // 0x407700\n    int64_t v13; // 0x407700\n    int64_t v14; // 0x407700\n    int64_t v15; // 0x407700\n    int64_t v16; // 0x407700\n    int64_t v17; // 0x407700\n    int32_t v18; // 0x407700\n    char v19; // 0x407700\n    if (v5 == 0) {\n        // 0x407918\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40774a;\n    } else {\n        // 0x407743\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x407790\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x407793\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x407858;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4077a6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4077b6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40786c;\n                } else {\n                    goto lab_0x4077c8;\n                }\n            }\n        } else {\n            goto lab_0x40774a;\n        }\n    }\n  lab_0x40774a:\n    // 0x40774a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x407750\n    *v24 = 0;\n    int64_t v25; // 0x407700\n    int64_t v26; // 0x407700\n    int64_t v27; // 0x407700\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x407840\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40784d;\n        }\n        case 43: {\n            // 0x407b50\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40784d;\n        }\n        default: {\n            // 0x40776c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x407acf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407be8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40784d;\n                } else {\n                    // 0x407add\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40777a;\n                }\n            } else {\n                goto lab_0x40777a;\n            }\n        }\n    }\n  lab_0x407858:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40785f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4077c8;\n    } else {\n        goto lab_0x40786c;\n    }\n  lab_0x40777a:\n    // 0x40777a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40784d;\n  lab_0x40784d:\n    // 0x40784d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x407858;\n  lab_0x4077c8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4077c8\n    int64_t v31 = v30; // 0x4077c8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4077ca\n    if ((int64_t)*v32 > v31) {\n        // 0x4077cf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4077d2\n    if (*v33 > v30) {\n        // 0x4077d7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4077da\n    int64_t v35 = v31; // 0x4077de\n    int64_t v36 = v15; // 0x4077de\n    int64_t v37; // 0x407700\n    int64_t v38; // 0x407700\n    int64_t v39; // 0x407700\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x407948\n        int64_t v41 = v40; // 0x407948\n        v2 = v41;\n        int64_t v42; // 0x407700\n        if (*v33 == v40) {\n            // 0x407b30\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407b38\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x407954\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x407968\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x407971\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40797a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407991\n            int64_t v47 = v45 & 0xffffffff; // 0x407995\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40799e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4079a4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4079a6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x407980\n            int64_t v49 = v48 & 0xffffffff; // 0x407980\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407991\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40799e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4079a4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4079a6;\n                    }\n                }\n                // 0x407980\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x407b48\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4079a6;\n    } else {\n        goto lab_0x4077e4;\n    }\n  lab_0x40786c:\n    // 0x40786c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40786f\n    int64_t v51 = v12; // 0x40786f\n    int64_t v52 = v14; // 0x40786f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4077c8;\n    } else {\n        goto lab_0x407875;\n    }\n  lab_0x4077e4:;\n    int32_t v53 = v35; // 0x4077e4\n    int64_t v54; // 0x407700\n    int64_t v55; // 0x407700\n    int64_t v56; // 0x407700\n    int64_t v57; // 0x407700\n    int64_t v58; // 0x407700\n    int64_t v59; // 0x407700\n    char * v60; // 0x407700\n    int64_t v61; // 0x407700\n    int64_t v62; // 0x4077f9\n    int64_t v63; // 0x407700\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407933\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407936;\n    } else {\n        // 0x4077ec\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407700\n        int64_t v66 = v65 ? -1 : 1; // 0x407800\n        int64_t v67 = (int64_t)\"--\"; // 0x407700\n        int64_t v68 = v62; // 0x407700\n        int64_t v69 = 3; // 0x407800\n        unsigned char v70 = *(char *)v68; // 0x407800\n        char v71 = *(char *)v67; // 0x407800\n        char v72 = v71; // 0x407800\n        bool v73 = false; // 0x407800\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4078f0\n            if (*(char *)v62 == 45) {\n                // 0x4079b0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4079b0\n                if (c == 0) {\n                    goto lab_0x4078fa;\n                } else {\n                    // 0x4079bd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x407a40;\n                    } else {\n                        if (c == 45) {\n                            // 0x407c23\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x407a95;\n                        } else {\n                            // 0x4079ce\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x407a40;\n                            } else {\n                                // 0x4079d3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4079f4;\n                                } else {\n                                    // 0x4079da\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x407a40;\n                                    } else {\n                                        goto lab_0x4079f4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4078fa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407810\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407813\n            int64_t v77 = v35 + 1; // 0x407816\n            int32_t v78 = v77; // 0x407819\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x407b80\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407827\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407835\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407936;\n        }\n    }\n  lab_0x407875:;\n    // 0x407875\n    int64_t v79; // bp-104, 0x407700\n    int64_t v80 = &v79; // 0x40770a\n    int64_t v81 = v50 + 1; // 0x407875\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40787c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x407881\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x407885\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x407889\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407891\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407896\n    int32_t c2 = v84; // 0x407896\n    char * found_char_pos = strchr(str2, c2); // 0x407896\n    int64_t v87 = *v82; // 0x40789b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4078a5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4078b0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x407ba0\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x407b6d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4078de\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407896\n    char v91 = *(char *)(v90 + 1); // 0x4078cb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x407885\n        if (v91 != 58) {\n            // 0x4078de\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x407af4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x407bf8\n                *v8 = 0;\n            } else {\n                // 0x407bdc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x407b1e\n            *v83 = 0;\n            // 0x4078de\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x407afe\n        if (v93 != 0) {\n            // 0x407b90\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x407b1e\n            *v83 = 0;\n            // 0x4078de\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407b11\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x407b1e\n            *v83 = 0;\n            // 0x4078de\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x407c5a\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x407c0a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407c11\n        // 0x407b1e\n        *v83 = 0;\n        // 0x4078de\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x407a69\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x407a6b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x407c90\n                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x407c41\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x407c48\n            // 0x4078de\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x407a76\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x407a7a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x407a95;\n  lab_0x4079a6:\n    // 0x4079a6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4077e4;\n  lab_0x407a95:;\n    int64_t v99 = function_4070e0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x407ab3\n    // 0x4078de\n    return v99 & 0xffffffff;\n  lab_0x407936:;\n    int32_t v100 = v55; // 0x407936\n    if (v100 != (int32_t)v59) {\n        // 0x40793a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4078de\n    return 0xffffffff;\n  lab_0x4078fa:\n    // 0x4078fa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407901\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4078de\n    return v99 & 0xffffffff;\n  lab_0x407a40:\n    // 0x407a40\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x407875;\n  lab_0x4079f4:\n    // 0x4079f4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4070e0(v6, a2, str, a4, a5, v57, v1, v11, &g14); // 0x407a1a\n    if ((int32_t)v101 != -1) {\n        // 0x4078de\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x407a2f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x407a40;\n}\n"
        },
        {
            "funcName": "function_407cd0",
            "funcStartAddr": "407cd0",
            "funcEndAddr": "407d26",
            "decompiledFuncCode": "int64_t function_407cd0(int64_t a1) {\n    // 0x407cd0\n    *(int32_t *)&g58 = g43;\n    *(int32_t *)&g59 = g42;\n    int64_t v1; // 0x407cd0\n    int64_t result = function_407700(v1, v1, v1, v1, v1, v1, &g58, a1 & 0xffffffff); // 0x407cf6\n    g43 = *(int32_t *)&g58;\n    g63 = g61;\n    *(int32_t *)&g41 = g60;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407d30",
            "funcStartAddr": "407d30",
            "funcEndAddr": "407d48",
            "decompiledFuncCode": "int64_t function_407d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407d30\n    return function_407cd0(1);\n}\n"
        },
        {
            "funcName": "function_407d50",
            "funcStartAddr": "407d50",
            "funcEndAddr": "407d63",
            "decompiledFuncCode": "int64_t function_407d50(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x407d50\n    return function_407cd0(0);\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "407d85",
            "decompiledFuncCode": "int64_t function_407d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407d70\n    return function_407700(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407d90",
            "funcStartAddr": "407d90",
            "funcEndAddr": "407da6",
            "decompiledFuncCode": "int64_t function_407d90(void) {\n    // 0x407d90\n    return function_407cd0(0);\n}\n"
        },
        {
            "funcName": "function_407db0",
            "funcStartAddr": "407db0",
            "funcEndAddr": "407dc8",
            "decompiledFuncCode": "int64_t function_407db0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407db0\n    return function_407700(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407dd0",
            "funcStartAddr": "407dd0",
            "funcEndAddr": "407e4a",
            "decompiledFuncCode": "int64_t function_407dd0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x407ddb\n    int64_t v2 = (int64_t)&g24; // 0x407ddb\n    int32_t * pwc; // 0x407dd0\n    int64_t v3; // 0x407dd0\n    int64_t n; // 0x407dd0\n    if (a2 == 0) {\n        goto lab_0x407e22;\n    } else {\n        // 0x407ddd\n        if (a3 == 0) {\n            // 0x407e08\n            return -2;\n        }\n        // 0x407de9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407e22;\n        } else {\n            goto lab_0x407df4;\n        }\n    }\n  lab_0x407e22:\n    // 0x407e22\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407dd0\n    pwc = (int32_t *)&v4;\n    goto lab_0x407df4;\n  lab_0x407df4:;\n    char * wstr = (char *)v3; // 0x407dfa\n    int64_t ps; // 0x407dd0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x407dfa\n    int64_t result = v5; // 0x407dfa\n    if (v5 < 0xfffffffe) {\n        // 0x407e08\n        return result;\n    }\n    int64_t result2 = result; // 0x407e39\n    if ((char)function_415d00(0, v3) == 0) {\n        // 0x407e3b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407e08\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407e50",
            "funcStartAddr": "407e50",
            "funcEndAddr": "407f54",
            "decompiledFuncCode": "int64_t function_407e50(int64_t result, int32_t a2, int64_t a3) {\n    // 0x407e50\n    if (a3 == 0) {\n        // 0x407e89\n        return 0;\n    }\n    int64_t v1 = result; // 0x407e5c\n    int64_t v2 = a3; // 0x407e5c\n    int64_t result2; // 0x407e50\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x407e5e\n        int64_t v4 = result; // 0x407e61\n        if ((char)result == v3) {\n            // 0x407e89\n            return result;\n        }\n        int64_t v5 = a3; // 0x407e61\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x407e70\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x407e90;\n            }\n            // 0x407e76\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x407e89\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x407e89\n        return result2;\n    }\n  lab_0x407e90:;\n    int64_t result3 = v1; // 0x407ebd\n    int64_t v6 = v2; // 0x407ebd\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x407e9f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x407eac\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x407eb6\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x407ed6\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x407f05\n            int64_t v13 = v1 + 8; // 0x407f09\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x407ef3\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x407f1c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x407f13\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x407e89\n                return 0;\n            }\n        }\n    }\n  lab_0x407f1c:;\n    char v15 = a2; // 0x407f1c\n    if (*(char *)result3 == v15) {\n        // 0x407e89\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x407f30\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x407e89\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x407e89\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407f60",
            "funcStartAddr": "407f60",
            "funcEndAddr": "407fa3",
            "decompiledFuncCode": "int64_t function_407f60(int64_t a1, int64_t a2, int64_t a3) {\n    bool v1 = a1 == 0 | a2 == 0;\n    if (v1) {\n        // 0x407f7a\n        return 0;\n    }\n    // 0x407f70\n    int64_t v2; // 0x407f60\n    int64_t result = v2 & -256 | (int64_t)v1; // 0x407f6c\n    int64_t v3 = *(int64_t *)(a1 + 8); // 0x407f70\n    if (v3 != *(int64_t *)(a2 + 8)) {\n        // 0x407f7a\n        return result;\n    }\n    int64_t v4 = v3; // 0x407f92\n    v4--;\n    int64_t result2 = 1; // 0x407f96\n    while (v4 >= 0) {\n        int64_t v5 = 8 * v4; // 0x407f88\n        int64_t v6 = *(int64_t *)(*(int64_t *)(a1 + 16) + v5); // 0x407f8c\n        result2 = result;\n        if (v6 != *(int64_t *)(*(int64_t *)(a2 + 16) + v5)) {\n            // break -> 0x407f7a\n            break;\n        }\n        v4--;\n        result2 = 1;\n    }\n    // 0x407f7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407fb0",
            "funcStartAddr": "407fb0",
            "funcEndAddr": "40801b",
            "decompiledFuncCode": "int64_t function_407fb0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a1; // 0x407fbd\n    int64_t result; // 0x407fb0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = *(int64_t *)(v2 + 8); // 0x407fc3\n        v1 = v3;\n        if (v3 == 0) {\n            int64_t v4 = *(int64_t *)(v2 + 16); // 0x407fcc\n            v1 = v4;\n            if (v4 == 0) {\n                // 0x407fd5\n                result = v4;\n                if ((int32_t)v4 != 0) {\n                    // break -> 0x408016\n                    break;\n                }\n                int64_t v5 = *(int64_t *)v2; // 0x407fe8\n                result = v4;\n                if (v5 == 0) {\n                    // break -> 0x408016\n                    break;\n                }\n                int64_t v6 = v2;\n                int64_t v7 = v5;\n                int64_t v8 = *(int64_t *)(v7 + 16); // 0x407ff0\n                v1 = v8;\n                while (v8 == 0 || v8 == v6) {\n                    // 0x408009\n                    result = v8;\n                    if ((int32_t)v8 != 0) {\n                        return result;\n                    }\n                    int64_t v9 = *(int64_t *)v7; // 0x407fe8\n                    result = v8;\n                    if (v9 == 0) {\n                        return result;\n                    }\n                    v6 = v7;\n                    v7 = v9;\n                    v8 = *(int64_t *)(v7 + 16);\n                    v1 = v8;\n                }\n            }\n        }\n    }\n  lab_0x408016_2:\n    // 0x408016\n    return result;\n}\n"
        },
        {
            "funcName": "function_408020",
            "funcStartAddr": "408020",
            "funcEndAddr": "40814f",
            "decompiledFuncCode": "int64_t function_408020(int64_t * a1, int64_t a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x408020\n    uint64_t v3 = *v2; // 0x408020\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x4080b0\n        *(char *)(v1 + 8) = 2;\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40802e\n    char v5 = *(char *)(v4 + v3); // 0x408039\n    *(char *)a1 = v5;\n    if (*(int32_t *)(a2 + 144) >= 2) {\n        // 0x408042\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x408048\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                // 0x408087\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n        }\n    }\n    switch (v5) {\n        case 92: {\n            if (a3 % 2 == 0) {\n                // 0x408087\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            int64_t v6 = v3 + 1;\n            if (v6 >= *(int64_t *)(a2 + 88)) {\n                // 0x408087\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            // 0x408100\n            *v2 = v6;\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = *(char *)(v4 + v6);\n            return 1;\n        }\n        case 91: {\n            uint64_t v7 = v3 + 1;\n            if (v7 >= *(int64_t *)(a2 + 88)) {\n                // 0x4080de\n                *(char *)(v1 + 8) = 1;\n                *(char *)a1 = 91;\n                return 1;\n            }\n            char v8 = *(char *)(v4 + v7); // 0x4080ca\n            *(char *)a1 = v8;\n            switch (v8) {\n                case 58: {\n                    if ((a3 & 4) != 0) {\n                        // 0x408145\n                        *(char *)(v1 + 8) = 30;\n                        return 2;\n                    }\n                    // 0x4080de\n                    *(char *)(v1 + 8) = 1;\n                    *(char *)a1 = 91;\n                    return 1;\n                }\n                case 61: {\n                    // 0x408130\n                    *(char *)(v1 + 8) = 28;\n                    return 2;\n                }\n                case 46: {\n                    // 0x408120\n                    *(char *)(v1 + 8) = 26;\n                    return 2;\n                }\n            }\n            // 0x4080de\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = 91;\n            return 1;\n        }\n        case 93: {\n            // 0x4080f0\n            *(char *)(v1 + 8) = 21;\n            return 1;\n        }\n    }\n    if (v5 == 94) {\n        // 0x40806b\n        *(char *)(v1 + 8) = 25;\n        return 1;\n    }\n    if (v5 == 45) {\n        // 0x40809d\n        *(char *)(v1 + 8) = 22;\n        return 1;\n    }\n    // 0x408087\n    *(char *)(v1 + 8) = 1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408150",
            "funcStartAddr": "408150",
            "funcEndAddr": "40816d",
            "decompiledFuncCode": "int64_t function_408150(int64_t a1, int64_t a2) {\n    // 0x408150\n    if (*(char *)(a2 + 48) != 17 || *(int64_t *)(a2 + 40) != a1) {\n        // 0x408156\n        return 0;\n    }\n    char * v1 = (char *)(a2 + 50); // 0x408166\n    *v1 = *v1 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408170",
            "funcStartAddr": "408170",
            "funcEndAddr": "40837f",
            "decompiledFuncCode": "int64_t function_408170(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x408185\n    uint64_t v2 = 0x100000000 * a2 >> 32; // 0x408195\n    int64_t v3 = *(int64_t *)(v1 + 48) + 24 * a4; // 0x40819d\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x4081a1\n    int64_t v5 = *v4; // 0x4081a1\n    if (v5 < 1) {\n        // 0x40834d\n        return (int32_t)v2 >> 1;\n    }\n    int64_t v6 = 1 << a3 % 64;\n    int32_t v7 = v2;\n    int64_t v8 = v5; // 0x4081ee\n    int64_t v9 = 0; // 0x4081ee\n    int64_t v10; // 0x4081f9\n    int64_t v11; // 0x408170\n    int64_t v12; // 0x408170\n    int64_t v13; // 0x408170\n    int64_t v14; // 0x408170\n    while (true) {\n      lab_0x408203_2:\n        // 0x408203\n        v13 = v9;\n        v10 = v8;\n        int64_t v15 = *(int64_t *)(*(int64_t *)(v3 + 16) + 8 * v13); // 0x408207\n        int64_t v16 = 16 * v15 + *(int64_t *)v1; // 0x408212\n        char v17 = *(char *)(v16 + 8); // 0x408215\n        if (v17 == 8) {\n            if (v7 % 2 != 0) {\n                // 0x408250\n                if (*(int64_t *)v16 == a3) {\n                    // 0x408230\n                    return 0xffffffff;\n                }\n            }\n            goto lab_0x4081f5;\n        } else {\n            if (v17 != 9) {\n                if (a5 == -1 || v17 != 4) {\n                    goto lab_0x4081f5;\n                } else {\n                    // 0x40827a\n                    v14 = 24 * v15 + 16;\n                    v11 = *(int64_t *)(a1 + 216) + 40 * a5;\n                    while (true) {\n                      lab_0x4082b0:\n                        // 0x4082b0\n                        v12 = v11;\n                        if (*(int64_t *)v12 != v15) {\n                            goto lab_0x408320;\n                        } else {\n                            if (a3 > 63) {\n                                goto lab_0x4082c9;\n                            } else {\n                                // 0x4082bc\n                                if ((v6 & (int64_t)*(int16_t *)(v12 + 34)) == 0) {\n                                    goto lab_0x408320;\n                                } else {\n                                    goto lab_0x4082c9;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x40832c:;\n                    int64_t v18 = v13 + 1; // 0x40833f\n                    uint64_t v19 = *v4; // 0x408343\n                    v8 = v19;\n                    v9 = v18;\n                    if (v19 <= v18) {\n                        // break -> 0x40834d\n                        break;\n                    }\n                    goto lab_0x408203_2;\n                }\n            } else {\n                if ((v7 & 2) != 0) {\n                    // 0x40822b\n                    if (*(int64_t *)v16 == a3) {\n                        // 0x408230\n                        return 0;\n                    }\n                }\n                goto lab_0x4081f5;\n            }\n        }\n    }\n  lab_0x40834d:\n    // 0x40834d\n    return v7 >> 1;\n  lab_0x408320:\n    // 0x408320\n    v11 = v12 + 40;\n    if (*(char *)(v12 + 32) == 0) {\n        // break -> 0x40832c\n        goto lab_0x40832c;\n    }\n    goto lab_0x4082b0;\n  lab_0x4082c9:;\n    int64_t v20 = *(int64_t *)*(int64_t *)(v14 + *(int64_t *)(v1 + 40)); // 0x4082d2\n    if (v20 == a4) {\n        // 0x408368\n        return -((v2 % 2)) & 0xffffffff;\n    }\n    int32_t v21 = function_408170(a1, v2 & 0xffffffff, a3, v20, a5); // 0x4082f3\n    if (v21 == -1) {\n        // 0x408230\n        return 0xffffffff;\n    }\n    // 0x4082fc\n    if ((v7 & 2) != 0 == v21 == 0) {\n        // 0x408230\n        return 0;\n    }\n    if (a3 <= 63) {\n        int16_t * v22 = (int16_t *)(v12 + 34); // 0x408317\n        *v22 = *v22 & -1 - (int16_t)v6;\n    }\n    goto lab_0x408320;\n  lab_0x4081f5:;\n    int64_t v23 = v13 + 1; // 0x4081f5\n    v8 = v10;\n    v9 = v23;\n    if (v10 <= v23) {\n        // break -> 0x40834d\n        goto lab_0x40834d;\n    }\n    goto lab_0x408203;\n  lab_0x408203:\n    // 0x408203\n    goto lab_0x408203_2;\n}\n"
        },
        {
            "funcName": "function_408380",
            "funcStartAddr": "408380",
            "funcEndAddr": "4083e6",
            "decompiledFuncCode": "int64_t function_408380(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = *(int64_t *)(a1 + 216) + 40 * a2; // 0x40838b\n    int64_t v2 = *(int64_t *)(v1 + 16); // 0x40838f\n    if (v2 > a5) {\n        // 0x4083b6\n        return 0xffffffff;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 24); // 0x408398\n    if (v3 < a5) {\n        // 0x4083b6\n        return 1;\n    }\n    if (v3 == a5) {\n        // 0x4083c3\n        return function_408170(a1, (int64_t)(v2 == a5) | 2, a3, a4, a6);\n    }\n    // 0x4083af\n    if (v2 == a5) {\n        // 0x4083c3\n        return function_408170(a1, 1, a3, a4, a6);\n    }\n    // 0x4083b6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4083f0",
            "funcStartAddr": "4083f0",
            "funcEndAddr": "40848c",
            "decompiledFuncCode": "int64_t function_4083f0(int64_t a1, uint64_t a2) {\n    // 0x4083f0\n    if (*(int32_t *)(a1 + 144) >= 2) {\n        if (a2 >= 0x2000000000000000) {\n            // 0x408480\n            return 12;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 16); // 0x408414\n        int32_t v2 = a2;\n        int64_t * mem = realloc((int64_t *)*v1, 4 * v2); // 0x408420\n        if (mem == NULL) {\n            // 0x408480\n            return 12;\n        }\n        int64_t * v3 = (int64_t *)(a1 + 24); // 0x40842a\n        int64_t v4 = *v3; // 0x40842a\n        *v1 = (int64_t)mem;\n        if (v4 != 0) {\n            int64_t * mem2 = realloc((int64_t *)v4, 8 * v2); // 0x40843f\n            if (mem2 == NULL) {\n                // 0x408480\n                return 12;\n            }\n            // 0x408449\n            *v3 = (int64_t)mem2;\n        }\n    }\n    // 0x40844d\n    if (*(char *)(a1 + 139) == 0) {\n        // 0x408456\n        *(int64_t *)(a1 + 64) = a2;\n        return 0;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x408468\n    int64_t * mem3 = realloc((int64_t *)*v5, (int32_t)a2); // 0x40846f\n    if (mem3 == NULL) {\n        // 0x408480\n        return 12;\n    }\n    // 0x408479\n    *v5 = (int64_t)mem3;\n    // 0x408456\n    *(int64_t *)(a1 + 64) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408490",
            "funcStartAddr": "408490",
            "funcEndAddr": "4084f4",
            "decompiledFuncCode": "int64_t function_408490(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40849c\n    int64_t v2 = *v1; // 0x40849c\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x4084a0\n    int64_t v4 = *v3; // 0x4084a0\n    int64_t v5 = v4; // 0x4084a7\n    int64_t v6 = v2; // 0x4084a7\n    if (v2 == a1) {\n        int64_t v7 = a1 + 1; // 0x4084c8\n        *(int64_t *)a1 = 2 * v7;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)v7); // 0x4084da\n        if (mem == NULL) {\n            // 0x4084ba\n            return 0;\n        }\n        // 0x4084e4\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    // 0x4084a9\n    *v1 = v6 + 1;\n    *(int64_t *)(8 * v6 + v5) = a2;\n    // 0x4084ba\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408500",
            "funcStartAddr": "408500",
            "funcEndAddr": "40862c",
            "decompiledFuncCode": "int64_t function_408500(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x408538\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408514\n    int64_t v2 = *v1; // 0x408514\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x408518\n    int64_t v4 = *v3; // 0x408518\n    if (v2 == 0) {\n        // 0x408521\n        *(int64_t *)v4 = a2;\n        *v1 = *v1 + 1;\n        // 0x40852e\n        return 1;\n    }\n    int64_t v5 = v4; // 0x408573\n    int64_t v6 = v2; // 0x408573\n    if (v2 == a1) {\n        // 0x408600\n        *(int64_t *)a1 = 2 * a1;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)a1); // 0x40860e\n        if (mem == NULL) {\n            // 0x40852e\n            return 0;\n        }\n        // 0x408618\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    int64_t v7 = 8 * v6; // 0x408579\n    int64_t v8; // 0x408500\n    if (*(int64_t *)v5 > a2) {\n        // 0x408586\n        v8 = v7;\n        if (v6 >= 1) {\n            int64_t v9 = v7 + v5;\n            int64_t v10 = v9 - 8; // 0x408590\n            *(int64_t *)v9 = *(int64_t *)v10;\n            v8 = 0;\n            while (v10 != v5) {\n                // 0x408590\n                v9 = v10;\n                v10 = v9 - 8;\n                *(int64_t *)v9 = *(int64_t *)v10;\n                v8 = 0;\n            }\n        }\n    } else {\n        int64_t v11 = v5 - 8; // 0x4085c0\n        int64_t v12 = *(int64_t *)(v7 + v11); // 0x4085c0\n        v8 = v7;\n        if (v12 > a2) {\n            *(int64_t *)(v7 + v5) = v12;\n            int64_t v13 = v7 - 8; // 0x4085d4\n            uint64_t v14 = *(int64_t *)(v13 + v11); // 0x4085d8\n            v8 = v13;\n            int64_t v15 = v13; // 0x4085e0\n            while (v14 > a2) {\n                // 0x4085d0\n                *(int64_t *)(v15 + v5) = v14;\n                v13 = v15 - 8;\n                v14 = *(int64_t *)(v13 + v11);\n                v8 = v13;\n                v15 = v13;\n            }\n        }\n    }\n    // 0x4085a3\n    *(int64_t *)(v8 + v5) = a2;\n    *v1 = *v1 + 1;\n    // 0x40852e\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408630",
            "funcStartAddr": "408630",
            "funcEndAddr": "40872b",
            "decompiledFuncCode": "int64_t function_408630(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2 + 32; // 0x40863e\n    int64_t * v2 = (int64_t *)(a2 + 16); // 0x40864b\n    int64_t v3 = *v2; // 0x40864b\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)v1 = v3;\n    int64_t size = 8 * v3; // 0x40865e\n    int64_t * mem = malloc((int32_t)size); // 0x408666\n    *(int64_t *)(a2 + 48) = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x4086ae\n        return 12;\n    }\n    if (v3 >= 0 == (v3 != 0)) {\n        int64_t v4 = 0; // 0x408680\n        int64_t v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4); // 0x40868e\n        int64_t v6 = size; // 0x4086a0\n        int64_t v7; // 0x4086a5\n        if ((*(char *)(size + 8 + 16 * v5) & 8) == 0) {\n            // 0x4086a2\n            v7 = function_408490(v1, v5);\n            v6 = v1;\n            if ((char)v7 == 0) {\n                // 0x4086ae\n                return 12;\n            }\n        }\n        // 0x408680\n        v4++;\n        int64_t v8 = v6; // 0x408688\n        while (*v2 > v4) {\n            // 0x40868a\n            v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4);\n            v6 = v8;\n            if ((*(char *)(v8 + 8 + 16 * v5) & 8) == 0) {\n                // 0x4086a2\n                v7 = function_408490(v1, v5);\n                v6 = v1;\n                if ((char)v7 == 0) {\n                    // 0x4086ae\n                    return 12;\n                }\n            }\n            // 0x408680\n            v4++;\n            v8 = v6;\n        }\n    }\n    int64_t v9 = 24 * (*(int64_t *)(a1 + 136) & a3) + *(int64_t *)(a1 + 64); // 0x4086d8\n    int64_t * v10 = (int64_t *)v9; // 0x4086dc\n    uint64_t v11 = *v10; // 0x4086dc\n    int64_t * v12 = (int64_t *)(v9 + 16); // 0x4086df\n    int64_t v13 = *v12; // 0x4086df\n    int64_t v14 = v11 + 1; // 0x4086e3\n    int64_t * v15 = (int64_t *)(v9 + 8); // 0x4086e7\n    int64_t v16 = v13; // 0x4086eb\n    int64_t v17 = v11; // 0x4086eb\n    int64_t v18 = v14; // 0x4086eb\n    if (*v15 <= v11) {\n        int64_t * mem2 = realloc((int64_t *)v13, 16 * (int32_t)v14); // 0x408710\n        if (mem2 == NULL) {\n            // 0x4086ae\n            return 12;\n        }\n        // 0x40871a\n        v16 = (int64_t)mem2;\n        v17 = *v10;\n        *v12 = v16;\n        *v15 = 2 * v14;\n        v18 = v17 + 1;\n    }\n    // 0x4086ed\n    *v10 = v18;\n    *(int64_t *)(8 * v17 + v16) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408730",
            "funcStartAddr": "408730",
            "funcEndAddr": "408756",
            "decompiledFuncCode": "int64_t function_408730(uint64_t a1, int64_t a2) {\n    uint64_t wc = a1 % 256; // 0x408735\n    int32_t v1 = btowc((int32_t)wc); // 0x40873f\n    int64_t v2 = v1; // 0x40873f\n    int64_t result = v2; // 0x408747\n    if (v1 == -1) {\n        // 0x408749\n        result = (a2 == 0 ? wc : v2) & 0xffffffff;\n    }\n    // 0x40874f\n    return result;\n}\n"
        },
        {
            "funcName": "function_408760",
            "funcStartAddr": "408760",
            "funcEndAddr": "4087e0",
            "decompiledFuncCode": "int64_t function_408760(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 88); // 0x408762\n    int64_t v2 = *(int64_t *)(a1 + 64); // 0x408767\n    int64_t v3 = v2 - v1; // 0x408767\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0 ? v2 : v1; // 0x40876f\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x408774\n    uint64_t v6 = *v5; // 0x408774\n    if (v4 <= v6) {\n        // 0x4087d0\n        *(int64_t *)(a1 + 56) = v6;\n        int64_t result; // 0x408760\n        return result;\n    }\n    int32_t ** v7 = __ctype_toupper_loc(); // 0x40877d\n    int64_t v8 = v6; // 0x408782\n    int64_t v9 = *(int64_t *)(a1 + 120); // 0x40878c\n    int64_t v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40)); // 0x408797\n    int64_t v11 = v10; // 0x40879d\n    if (v9 != 0) {\n        // 0x4087c8\n        v11 = (int64_t)*(char *)(v9 + v10);\n    }\n    int32_t v12 = *(int32_t *)(4 * v11 + (int64_t)*v7); // 0x4087a6\n    *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n    v8++;\n    while (v4 != v8) {\n        // 0x408788\n        v9 = *(int64_t *)(a1 + 120);\n        v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40));\n        v11 = v10;\n        if (v9 != 0) {\n            // 0x4087c8\n            v11 = (int64_t)*(char *)(v9 + v10);\n        }\n        // 0x40879f\n        v12 = *(int32_t *)(4 * v11 + (int64_t)*v7);\n        *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n        v8++;\n    }\n    // 0x4087b5\n    *v5 = v4;\n    *(int64_t *)(a1 + 56) = v4;\n    return (int64_t)v7;\n}\n"
        },
        {
            "funcName": "function_4087e0",
            "funcStartAddr": "4087e0",
            "funcEndAddr": "408986",
            "decompiledFuncCode": "int64_t function_4087e0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x4087ef\n    int64_t v2 = *v1; // 0x4087ef\n    int64_t * v3 = (int64_t *)(a1 + 48); // 0x4087f3\n    int64_t v4 = *v3; // 0x4087f3\n    int64_t * v5 = (int64_t *)(a1 + 64); // 0x4087f7\n    int64_t v6 = *v5; // 0x4087f7\n    int64_t v7 = v6 - v2; // 0x4087f7\n    uint64_t v8 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v2)) < 0 ? v6 : v2; // 0x4087fb\n    int64_t result; // 0x4087e0\n    if (v8 <= v4) {\n        // 0x408898\n        *v3 = v4;\n        *(int64_t *)(a1 + 56) = v4;\n        return result;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 120); // 0x408810\n    int64_t * v10 = (int64_t *)(a1 + 32);\n    int64_t * v11 = (int64_t *)(a1 + 40);\n    int32_t * v12 = (int32_t *)(a1 + 144);\n    int64_t v13; // bp-104, 0x4087e0\n    int64_t v14 = &v13;\n    int64_t v15 = v4; // 0x4087e0\n    int64_t v16; // 0x4087e0\n    int64_t v17; // 0x4087e0\n    int64_t v18; // 0x4087e0\n    int32_t v19; // bp-108, 0x4087e0\n    int64_t v20; // 0x408817\n    int64_t result2; // 0x408958\n    while (true) {\n      lab_0x408810:\n        // 0x408810\n        v17 = v15;\n        int64_t v21 = *v9; // 0x408810\n        v20 = *v10;\n        int64_t v22 = v8 - v17; // 0x40881b\n        int64_t v23; // 0x4087e0\n        if (v21 != 0) {\n            // 0x4088f0\n            v23 = v14;\n            if (*v12 >= 1) {\n                // 0x4088fe\n                v23 = v14;\n                int64_t v24 = 0; // 0x408908\n                int64_t v25 = v21; // 0x408908\n                if (v22 >= 0 == (v22 != 0)) {\n                    int64_t v26 = v24 + v17;\n                    unsigned char v27 = *(char *)(v26 + v25 + *v11); // 0x40892e\n                    char v28 = *(char *)(v25 + (int64_t)v27); // 0x408931\n                    *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                    *(char *)(v24 + v14) = v28;\n                    int64_t v29 = v24 + 1; // 0x408942\n                    v23 = v14;\n                    while (!((v22 == v29 | (v29 & 0xffffffff) >= (int64_t)*v12))) {\n                        // 0x40891d\n                        v25 = *v9;\n                        v26 = v29 + v17;\n                        v27 = *(char *)(v26 + v25 + *v11);\n                        v28 = *(char *)(v25 + (int64_t)v27);\n                        *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                        *(char *)(v29 + v14) = v28;\n                        v29++;\n                        v23 = v14;\n                    }\n                }\n            }\n        } else {\n            // 0x408827\n            v23 = v21 + v17 + *v11;\n        }\n        int64_t v30 = function_407dd0(&v19, v23, v22); // 0x408839\n        if (v30 < 0xffffffffffffffff) {\n            // 0x408848\n            v16 = v30;\n            v18 = v19;\n            if (v30 == -2) {\n                // 0x408958\n                result2 = *v1;\n                if (*v5 < result2) {\n                    // break -> 0x408966\n                    break;\n                }\n                goto lab_0x4088b0;\n            } else {\n                goto lab_0x408856;\n            }\n        } else {\n            goto lab_0x4088b0;\n        }\n    }\n    // 0x408966\n    *v10 = v20;\n    // 0x408898\n    *v3 = v17;\n    *(int64_t *)(a1 + 56) = v17;\n    return result2;\n  lab_0x4088b0:;\n    int64_t v31 = *v9; // 0x4088b3\n    unsigned char v32 = *(char *)(v17 + (int64_t)&v19 + *v11); // 0x4088be\n    int64_t v33 = v32; // 0x4088be\n    v19 = v32;\n    int64_t v34 = v33; // 0x4088c8\n    if (v31 != 0) {\n        unsigned char v35 = *(char *)(v31 + v33); // 0x40896f\n        v19 = v35;\n        v34 = v35;\n    }\n    // 0x4088ce\n    *v10 = v20;\n    v16 = 1;\n    v18 = v34;\n    goto lab_0x408856;\n  lab_0x408856:;\n    int64_t v36 = v16;\n    int64_t v37 = *(int64_t *)(a1 + 16); // 0x408856\n    int64_t v38 = v17 + 1; // 0x40885a\n    int64_t v39 = v37 + 4 * v17;\n    *(int32_t *)v39 = (int32_t)v18;\n    int64_t v40 = v36 + v17; // 0x408869\n    int64_t v41; // 0x4087e0\n    if (v38 < v40) {\n        int64_t v42 = v39 + 4; // 0x40887a\n        *(int32_t *)v42 = -1;\n        v42 += 4;\n        while (v37 + 4 * v40 != v42) {\n            // 0x408880\n            *(int32_t *)v42 = -1;\n            v42 += 4;\n        }\n        // 0x40888f\n        v15 = v40;\n        result = v36;\n        v41 = v40;\n        if (v40 >= v8) {\n            // 0x408898\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    } else {\n        // 0x4088e0\n        v15 = v38;\n        result = v36;\n        v41 = v38;\n        if (v38 >= v8) {\n            // 0x408898\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    }\n    // 0x408810\n    goto lab_0x408810;\n}\n"
        },
        {
            "funcName": "function_408990",
            "funcStartAddr": "408990",
            "funcEndAddr": "408f8d",
            "decompiledFuncCode": "int64_t function_408990(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x4089a1\n    int64_t v2 = *v1; // 0x4089a1\n    int64_t * v3 = (int64_t *)(a1 + 64); // 0x4089a5\n    int64_t v4 = *v3; // 0x4089a5\n    int64_t v5 = v4 - v2; // 0x4089a5\n    int64_t v6 = v5 == 0 | v5 < 0 != ((v5 ^ v4) & (v4 ^ v2)) < 0 ? v4 : v2; // 0x4089a9\n    int64_t * v7 = (int64_t *)(a1 + 48); // 0x4089b5\n    int64_t v8 = *v7; // 0x4089b5\n    int64_t * v9; // 0x408990\n    int64_t * v10; // 0x408990\n    int64_t v11; // 0x408990\n    int64_t v12; // 0x408990\n    int64_t v13; // 0x408990\n    int64_t v14; // 0x408990\n    int64_t v15; // 0x408990\n    int64_t v16; // 0x408990\n    int64_t v17; // 0x408990\n    int64_t v18; // 0x408990\n    int64_t v19; // 0x408990\n    int64_t v20; // 0x408990\n    int64_t wstr; // bp-120, 0x408990\n    struct _TYPEDEF___mbstate_t * v21; // bp-132, 0x408990\n    int32_t * v22; // 0x408990\n    int64_t v23; // 0x408990\n    int64_t * v24; // 0x408b50\n    int64_t * v25; // 0x408990\n    int64_t * v26; // 0x408990\n    int64_t * v27; // 0x408990\n    int64_t v28; // 0x408b5a\n    int64_t v29; // 0x408b87\n    if (*(char *)(a1 + 138) != 0) {\n        goto lab_0x4089c6;\n    } else {\n        int64_t * v30 = (int64_t *)(a1 + 120);\n        if (*v30 == 0) {\n            // 0x408b30\n            if (*(char *)(a1 + 140) != 0) {\n                goto lab_0x4089c6;\n            } else {\n                // 0x408b3d\n                v16 = v8;\n                if (v8 < v6) {\n                    while (true) {\n                      lab_0x408b50:\n                        // 0x408b50\n                        v14 = v13;\n                        v28 = v14 + v19 + *v24;\n                        unsigned char v31 = *(char *)v28; // 0x408b5d\n                        if (v31 <= -1) {\n                            goto lab_0x408b79;\n                        } else {\n                            // 0x408b68\n                            struct _TYPEDEF___mbstate_t * ps; // 0x408b4a\n                            if (mbsinit(ps) != 0) {\n                                int32_t v32 = *(int32_t *)(4 * (int64_t)v31 + (int64_t)*__ctype_toupper_loc()); // 0x408c84\n                                *(char *)(*v25 + v14) = (char)v32;\n                                unsigned char v33 = *(char *)(*v25 + v14); // 0x408c94\n                                *(int32_t *)(*v26 + 4 * v14) = (int32_t)v33;\n                                int64_t v34; // 0x408990\n                                v20 = v34;\n                                v15 = v14 + 1;\n                                goto lab_0x408c3a;\n                            } else {\n                                goto lab_0x408b79;\n                            }\n                        }\n                    }\n                  lab_0x408d70:\n                    // 0x408d70\n                    v10 = v30;\n                    v9 = v27;\n                    v22 = (int32_t *)&v21;\n                    v23 = v29;\n                    v17 = v6;\n                    v18 = &wstr;\n                    v11 = v14;\n                    v12 = v14;\n                    goto lab_0x4089f0;\n                } else {\n                    goto lab_0x408c43;\n                }\n            }\n        } else {\n            goto lab_0x4089c6;\n        }\n    }\n  lab_0x408c43:\n    // 0x408c43\n    *v7 = v16;\n    *(int64_t *)(a1 + 56) = v16;\n    // 0x408b1a\n    return 0;\n  lab_0x4089ca:;\n    // 0x4089ca\n    int64_t v35; // 0x408990\n    int64_t v36 = v35;\n    int64_t v37; // 0x408990\n    int64_t v38 = v37;\n    int64_t v39; // 0x408990\n    int64_t v40 = v39;\n    int64_t v41 = v38; // 0x4089cd\n    int64_t v42 = v36; // 0x4089cd\n    int64_t v43; // 0x408990\n    if (v40 > v36) {\n        // 0x4089d3\n        v10 = (int64_t *)(a1 + 120);\n        v9 = (int64_t *)(a1 + 32);\n        v22 = (int32_t *)&v21;\n        v23 = v40 - v36;\n        v17 = v40;\n        v18 = v43;\n        v11 = v38;\n        v12 = v36;\n        goto lab_0x4089f0;\n    } else {\n        goto lab_0x408b10;\n    }\n  lab_0x408b79:\n    // 0x408b79\n    v29 = v6 - v14;\n    int32_t ps2 = (int32_t)*v27; // bp-128, 0x408b8a\n    uint64_t v44 = function_407dd0((int32_t *)&v21, v28, v29); // 0x408ba1\n    if (v44 < 0xfffffffffffffffe) {\n        int32_t wc = (int64_t)v21; // 0x408bb7\n        int32_t wc2 = towupper(wc); // 0x408bbd\n        int64_t v45; // 0x408bf7\n        if (wc2 == wc) {\n            int64_t v46 = *v25; // 0x408c58\n            int64_t v47 = *v24; // 0x408c5c\n            int64_t v48 = v46 + v14; // 0x408c66\n            memcpy((int64_t *)v48, (int64_t *)(v47 + v14 + v48), (int32_t)v44);\n        } else {\n            int32_t v49 = wcrtomb((char *)&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x408bdd\n            if (v44 != (int64_t)v49) {\n                // break -> 0x408d70\n                goto lab_0x408d70;\n            }\n            // 0x408beb\n            v45 = *v25 + v14;\n            memcpy((int64_t *)v45, &wstr, (int32_t)v44);\n        }\n        int64_t v50 = v45;\n        int64_t v51 = *v26; // 0x408bff\n        int64_t v52 = v14 + 1; // 0x408c0b\n        int64_t v53 = v51 + 4 * v14;\n        *(int32_t *)v53 = wc2;\n        int64_t v54 = v44 + v14; // 0x408c13\n        v20 = v50;\n        v15 = v52;\n        if (v52 < v54) {\n            int64_t v55 = v53 + 4; // 0x408c24\n            *(int32_t *)v55 = -1;\n            v55 += 4;\n            v20 = v50;\n            v15 = v54;\n            while (v51 + 4 * v54 != v55) {\n                // 0x408c28\n                *(int32_t *)v55 = -1;\n                v55 += 4;\n                v20 = v50;\n                v15 = v54;\n            }\n        }\n    } else {\n        int64_t v56; // 0x408990\n        if (v44 != -2) {\n            unsigned char v57 = *(char *)(v14 + v56 + *v24); // 0x408cef\n            *(char *)(*v25 + v14) = v57;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v57;\n            *v27 = (int64_t)ps2;\n            v20 = v56;\n            v15 = v14 + 1;\n        } else {\n            // 0x408cae\n            if (*v3 < *v1) {\n                // 0x408f27\n                *v27 = (int64_t)ps2;\n                v16 = v14;\n                goto lab_0x408c43;\n            }\n            unsigned char v58 = *(char *)(v14 + v56 + *v24); // 0x408cca\n            *(char *)(*v25 + v14) = v58;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v58;\n            v20 = v56;\n            v15 = v14 + 1;\n        }\n    }\n    goto lab_0x408c3a;\n  lab_0x408c3a:\n    // 0x408c3a\n    v19 = v20;\n    v13 = v15;\n    v16 = v15;\n    if (v6 <= v15) {\n        goto lab_0x408c43;\n    }\n    goto lab_0x408b50;\n  lab_0x4089c6:\n    // 0x4089c6\n    v39 = v6;\n    v43 = a1;\n    v37 = *(int64_t *)(a1 + 56);\n    v35 = v8;\n    goto lab_0x4089ca;\n  lab_0x408b10:\n    // 0x408b10\n    *v7 = v42;\n    *(int64_t *)(a1 + 56) = v41;\n    // 0x408b1a\n    return 0;\n  lab_0x4089f0:;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v17;\n    int64_t v62 = v23;\n    int64_t * v63 = v9;\n    int64_t * v64 = v10;\n    int64_t v65 = *v64; // 0x4089f4\n    ps2 = (int32_t)*v63;\n    int64_t v66; // 0x408990\n    if (v65 != 0) {\n        int32_t v67 = *(int32_t *)(a1 + 144); // 0x408d0f\n        if (v62 < 1 || v67 < 1) {\n            // 0x408d0f\n            v66 = &wstr;\n        } else {\n            int64_t v68 = &wstr;\n            int64_t v69 = 2 * (*(int64_t *)(a1 + 40) + v60); // 0x408d3c\n            int64_t v70 = 0;\n            char v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69)); // 0x408d50\n            *(char *)(v70 + v68) = v71;\n            v66 = v68;\n            while (v70 != (int64_t)(v67 - 1)) {\n                int64_t v72 = v70 + 1; // 0x408d41\n                v66 = v68;\n                if (v62 == v72) {\n                    // break -> 0x408a15\n                    break;\n                }\n                v70 = v72;\n                v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69));\n                *(char *)(v70 + v68) = v71;\n                v66 = v68;\n            }\n        }\n    } else {\n        // 0x408a06\n        v66 = v60 + v18 + *(int64_t *)(a1 + 40);\n    }\n    int64_t v73 = v66;\n    uint64_t v74 = function_407dd0(v22, v73, v62); // 0x408a28\n    int64_t v75; // 0x408990\n    int32_t wc4; // 0x408a43\n    if (v74 < 0xfffffffffffffffe) {\n        int32_t wc3 = (int64_t)v21; // 0x408a3e\n        wc4 = towupper(wc3);\n        if (wc4 == wc3) {\n            goto lab_0x408d78;\n        } else {\n            int32_t v76 = wcrtomb((char *)&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x408a71\n            int64_t v77 = v76; // 0x408a71\n            if (v74 != v77) {\n                if (v76 == -1) {\n                    goto lab_0x408d78;\n                } else {\n                    int64_t v78 = v59 + v77; // 0x408e4b\n                    uint64_t v79 = *v3; // 0x408e56\n                    if (v78 > v79) {\n                        goto lab_0x408aff;\n                    } else {\n                        int64_t * v80 = (int64_t *)(a1 + 24); // 0x408e63\n                        int64_t v81 = *v80; // 0x408e63\n                        int64_t v82 = v81; // 0x408e68\n                        if (v81 == 0) {\n                            int64_t * mem = malloc(8 * (int32_t)v79); // 0x408f47\n                            int64_t v83 = (int64_t)mem; // 0x408f47\n                            *v80 = v83;\n                            v82 = v83;\n                            if (mem == NULL) {\n                                // 0x408b1a\n                                return 12;\n                            }\n                        }\n                        char * v84 = (char *)(a1 + 140); // 0x408e6e\n                        if (*v84 == 0) {\n                            int64_t v85 = v82; // 0x408e7d\n                            if (v59 != 0) {\n                                int64_t v86 = 0;\n                                *(int64_t *)(8 * v86 + v85) = v86;\n                                int64_t v87 = v86 + 1; // 0x408e87\n                                while (v59 != v87) {\n                                    // 0x408e83\n                                    v86 = v87;\n                                    *(int64_t *)(8 * v86 + v85) = v86;\n                                    v87 = v86 + 1;\n                                }\n                            }\n                            // 0x408e90\n                            *v84 = 1;\n                        }\n                        // 0x408e98\n                        memcpy((int64_t *)(*(int64_t *)(a1 + 8) + v59), &wstr, v76);\n                        int64_t v88 = v74 - 1; // 0x408eb8\n                        int64_t v89 = *(int64_t *)(a1 + 16) + 4 * v59; // 0x408ebc\n                        *(int32_t *)v89 = wc4;\n                        int64_t v90 = *v80 + 8 * v59; // 0x408ec7\n                        *(int64_t *)v90 = v60;\n                        if (v76 >= 2) {\n                            uint64_t v91 = 1;\n                            int64_t v92 = v91 >= v74 ? v88 : v91; // 0x408edf\n                            *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                            *(int32_t *)(4 * v91 + v89) = -1;\n                            int64_t v93 = v91 + 1; // 0x408ef1\n                            while (v93 != v77) {\n                                // 0x408ed9\n                                v91 = v93;\n                                v92 = v91 >= v74 ? v88 : v91;\n                                *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                                *(int32_t *)(4 * v91 + v89) = -1;\n                                v93 = v91 + 1;\n                            }\n                        }\n                        int64_t v94 = v77 - v74; // 0x408efe\n                        int64_t v95 = *v1 + v94; // 0x408f01\n                        *v1 = v95;\n                        if (v60 < *(int64_t *)(a1 + 96)) {\n                            int64_t * v96 = (int64_t *)(a1 + 104); // 0x408f0e\n                            *v96 = *v96 + v94;\n                        }\n                        int64_t v97 = *v3; // 0x408f12\n                        int64_t v98 = v97 - v95; // 0x408f12\n                        int64_t v99 = v98 == 0 | v98 < 0 != ((v98 ^ v97) & (v97 ^ v95)) < 0 ? v97 : v95; // 0x408f1a\n                        v39 = v99;\n                        v43 = v88;\n                        v37 = v74 + v60;\n                        v35 = v78;\n                        goto lab_0x4089ca;\n                    }\n                }\n            } else {\n                int64_t v100 = *(int64_t *)(a1 + 8) + v59; // 0x408a99\n                memcpy((int64_t *)v100, &wstr, (int32_t)v74);\n                v75 = v100;\n                goto lab_0x408aa5;\n            }\n        }\n    } else {\n        if (v74 != -2) {\n            goto lab_0x408dad;\n        } else {\n            // 0x408d9f\n            if (*v3 < *v1) {\n                goto lab_0x408aff;\n            } else {\n                goto lab_0x408dad;\n            }\n        }\n    }\n  lab_0x408d78:;\n    int64_t v101 = *(int64_t *)(a1 + 8) + v59; // 0x408d88\n    memcpy((int64_t *)v101, (int64_t *)v73, (int32_t)v74);\n    v75 = v101;\n    goto lab_0x408aa5;\n  lab_0x408dad:;\n    int64_t v114 = (int64_t)&v21; // 0x408a23\n    int64_t v115 = *v64; // 0x408db0\n    int64_t v116 = (int64_t)*(char *)(v60 + v114 + *(int64_t *)(a1 + 40)); // 0x408dbb\n    int64_t v117 = v116; // 0x408dc1\n    if (v115 != 0) {\n        // 0x408f84\n        v117 = (int64_t)*(char *)(v115 + v116);\n    }\n    // 0x408dc7\n    *(char *)(*(int64_t *)(a1 + 8) + v59) = (char)v117;\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x408f77\n        *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v59) = v60;\n    }\n    int64_t v118 = *(int64_t *)(a1 + 16); // 0x408de0\n    int64_t v119 = v60 + 1; // 0x408de4\n    int64_t v120 = v59 + 1; // 0x408de8\n    *(int32_t *)(v118 + 4 * v59) = (int32_t)v117;\n    v39 = v61;\n    v43 = v114;\n    v37 = v119;\n    v35 = v120;\n    if (v74 == -1) {\n        // 0x408df9\n        *v63 = (int64_t)ps2;\n        v39 = v61;\n        v43 = v114;\n        v37 = v119;\n        v35 = v120;\n    }\n    goto lab_0x4089ca;\n  lab_0x408aa5:;\n    int64_t v102 = v75;\n    int64_t v103; // 0x408990\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x408e10\n        v103 = v60;\n        if (v74 != 0) {\n            int64_t v104 = v74 + v60; // 0x408e23\n            int64_t v105 = v59 - v60; // 0x408e28\n            int64_t v106 = v60;\n            *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n            int64_t v107 = v106 + 1; // 0x408e33\n            v103 = v104;\n            while (v104 != v107) {\n                // 0x408e2f\n                v106 = v107;\n                *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n                v107 = v106 + 1;\n                v103 = v104;\n            }\n        }\n    } else {\n        // 0x408ab3\n        v103 = v74 + v60;\n    }\n    int64_t v108 = v103;\n    int64_t v109 = *(int64_t *)(a1 + 16); // 0x408aba\n    int64_t v110 = v59 + 1; // 0x408abe\n    int64_t v111 = v74 + v59; // 0x408ac2\n    int64_t v112 = v109 + 4 * v59;\n    *(int32_t *)v112 = wc4;\n    v39 = v61;\n    v43 = v102;\n    v37 = v108;\n    v35 = v110;\n    if (v110 < v111) {\n        int64_t v113 = v112 + 4; // 0x408ae4\n        while (true) {\n            // 0x408ae8\n            *(int32_t *)v113 = -1;\n            v113 += 4;\n            v39 = v61;\n            v43 = v102;\n            v37 = v108;\n            v35 = v111;\n            if (v109 + 4 * v111 == v113) {\n                goto lab_0x4089ca;\n            }\n        }\n    }\n    goto lab_0x4089ca;\n  lab_0x408aff:\n    // 0x408aff\n    *v63 = (int64_t)ps2;\n    v41 = v60;\n    v42 = v59;\n    goto lab_0x408b10;\n}\n"
        },
        {
            "funcName": "function_408f90",
            "funcStartAddr": "408f90",
            "funcEndAddr": "4090de",
            "decompiledFuncCode": "int64_t function_408f90(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 64); // 0x408fa0\n    uint64_t v2 = *v1; // 0x408fa0\n    if (v2 >= 0xfffffffffffffff) {\n        // 0x40903b\n        return 12;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 88); // 0x408fad\n    int64_t v4 = *v3; // 0x408fad\n    int64_t v5 = 2 * v2; // 0x408fb1\n    int64_t v6 = 0x100000000 * a2 >> 32; // 0x408fb4\n    int64_t v7 = v5 - v4; // 0x408fba\n    int64_t v8 = v7 < 0 == ((v7 ^ v5) & (v4 ^ v5)) < 0 == (v7 != 0) ? v4 : v5; // 0x408fbd\n    int64_t v9 = v8 - v6; // 0x408fc1\n    int64_t v10 = function_4083f0(a1, v9 < 0 == ((v9 ^ v8) & (v8 ^ v6)) < 0 ? v8 : v6); // 0x408fc8\n    int64_t result = v10 & 0xffffffff; // 0x408fcd\n    if ((int32_t)v10 != 0) {\n        // 0x40903b\n        return result;\n    }\n    int64_t * v11 = (int64_t *)(a1 + 184); // 0x408fd3\n    int64_t v12 = *v11; // 0x408fd3\n    if (v12 != 0) {\n        int64_t * mem = realloc((int64_t *)v12, 8 * (int32_t)*v1 + 8); // 0x408feb\n        if (mem == NULL) {\n            // 0x40903b\n            return 12;\n        }\n        // 0x408ff9\n        *v11 = (int64_t)mem;\n    }\n    int32_t v13 = *(int32_t *)(a1 + 144); // 0x409007\n    if (*(char *)(a1 + 136) != 0) {\n        if (v13 >= 2) {\n            // 0x40901b\n            return function_408990(a1);\n        }\n        // 0x4090b8\n        function_408760(a1);\n        return result;\n    }\n    if (v13 > 1) {\n        // 0x4090a0\n        function_4087e0(a1);\n        return result;\n    }\n    int64_t * v14 = (int64_t *)(a1 + 120); // 0x40904d\n    int64_t v15 = *v14; // 0x40904d\n    if (v15 == 0) {\n        // 0x40903b\n        return result;\n    }\n    int64_t v16 = *v3; // 0x409056\n    int64_t * v17 = (int64_t *)(a1 + 48); // 0x40905a\n    uint64_t v18 = *v17; // 0x40905a\n    int64_t v19 = *v1; // 0x40905e\n    int64_t v20 = v19 - v16; // 0x40905e\n    uint64_t v21 = v20 == 0 | v20 < 0 != ((v20 ^ v19) & (v19 ^ v16)) < 0 ? v19 : v16; // 0x409062\n    if (v21 <= v18) {\n        // 0x40906c\n        *(int64_t *)(a1 + 56) = v18;\n        // 0x40903b\n        return result;\n    }\n    int64_t * v22 = (int64_t *)(a1 + 40); // 0x40907a\n    unsigned char v23 = *(char *)(v18 + v12 + *v22); // 0x40907e\n    int64_t * v24 = (int64_t *)(a1 + 8); // 0x409085\n    *(char *)(*v24 + v18) = *(char *)(v15 + (int64_t)v23);\n    int64_t v25 = v18 + 1; // 0x40908c\n    int64_t v26 = v25; // 0x409093\n    if (v21 != v25) {\n        unsigned char v27 = *(char *)(v26 + v12 + *v22); // 0x40907e\n        *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n        v26++;\n        while (v21 != v26) {\n            // 0x409070\n            v27 = *(char *)(v26 + v12 + *v22);\n            *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n            v26++;\n        }\n    }\n    // 0x409095\n    *v17 = v21;\n    *(int64_t *)(a1 + 56) = v21;\n    // 0x40903b\n    return result;\n}\n"
        },
        {
            "funcName": "function_4090e0",
            "funcStartAddr": "4090e0",
            "funcEndAddr": "409166",
            "decompiledFuncCode": "int64_t function_4090e0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x4090e7\n    int64_t * v2 = (int64_t *)(a1 + 192); // 0x4090ee\n    int64_t v3 = *v2; // 0x4090ee\n    if (v1 > a2) {\n        goto lab_0x409120;\n    } else {\n        // 0x4090fa\n        if (v1 < *(int64_t *)(a1 + 88)) {\n            int64_t result = function_408f90(a1, a2 + 1 & 0xffffffff); // 0x409106\n            if ((int32_t)result != 0) {\n                // 0x409116\n                return result;\n            }\n            goto lab_0x40910f;\n        } else {\n            goto lab_0x409120;\n        }\n    }\n  lab_0x409120:;\n    uint64_t v4 = *(int64_t *)(a1 + 48); // 0x409120\n    if (v4 <= a2) {\n        // 0x409129\n        if (v4 < *(int64_t *)(a1 + 88)) {\n            int64_t result2 = function_408f90(a1, a2 + 1 & 0xffffffff); // 0x409135\n            if ((int32_t)result2 != 0) {\n                // 0x409116\n                return result2;\n            }\n        }\n    }\n    goto lab_0x40910f;\n  lab_0x40910f:\n    // 0x40910f\n    if (v3 < a2) {\n        int64_t v5 = *(int64_t *)(a1 + 184); // 0x409140\n        memset((int64_t *)(8 * v3 + 8 + v5), 0, 8 * (int32_t)(a2 - v3));\n        *v2 = a2;\n    }\n    // 0x409116\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "40918e",
            "decompiledFuncCode": "int64_t function_409170(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x409177\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_409190",
            "funcStartAddr": "409190",
            "funcEndAddr": "4091b8",
            "decompiledFuncCode": "int64_t function_409190(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 + 8) & 0x400ff; // 0x409193\n    switch (result) {\n        case 6: {\n            // 0x4091a8\n            return function_409170(a1);\n        }\n        case 3: {\n            // 0x4091b0\n            free((int64_t *)a1);\n            return &g67;\n        }\n    }\n    // 0x4091a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4091c0",
            "funcStartAddr": "4091c0",
            "funcEndAddr": "4091d4",
            "decompiledFuncCode": "int64_t function_4091c0(int64_t a1, int64_t a2) {\n    // 0x4091c0\n    function_409190(a2 + 40);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4091e0",
            "funcStartAddr": "4091e0",
            "funcEndAddr": "4093ae",
            "decompiledFuncCode": "int64_t function_4091e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4091e0\n    int128_t v1; // 0x4091e0\n    int128_t v2 = v1;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x4091f4\n    uint64_t v4 = *v3; // 0x4091f4\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x4091f8\n    uint64_t v6 = *v5; // 0x4091f8\n    int64_t v7; // 0x4091e0\n    int64_t v8; // 0x4091e0\n    int64_t v9; // 0x4091e0\n    if (v4 >= v6) {\n        uint64_t v10 = 2 * v6; // 0x4092ba\n        if (v10 >= 0xaaaaaaaaaaaaaab) {\n            // 0x409298\n            return -1;\n        }\n        int32_t v11 = v6;\n        int64_t * mem = realloc((int64_t *)v4, 32 * v11); // 0x4092d7\n        if (mem == NULL) {\n            // 0x409298\n            return -1;\n        }\n        // 0x4092e5\n        *(int64_t *)a1 = (int64_t)mem;\n        int64_t * v12 = (int64_t *)(a1 + 24); // 0x4092eb\n        int32_t v13 = 16 * v11; // 0x4092fd\n        int64_t * mem2 = realloc((int64_t *)*v12, v13); // 0x4092fd\n        int64_t * v14 = (int64_t *)(a1 + 32); // 0x409302\n        int64_t * mem3 = realloc((int64_t *)*v14, v13); // 0x40930c\n        int64_t * v15 = (int64_t *)(a1 + 40); // 0x409311\n        int32_t v16 = 48 * v11; // 0x40931c\n        int64_t * mem4 = realloc((int64_t *)*v15, v16); // 0x40931c\n        int64_t * v17 = (int64_t *)(a1 + 48); // 0x409321\n        int64_t * mem5 = realloc((int64_t *)*v17, v16); // 0x40932b\n        if (mem2 == NULL | mem3 == NULL || mem4 == NULL || mem5 == NULL) {\n            // 0x409370\n            free(mem2);\n            free(mem3);\n            free(mem4);\n            free(mem5);\n            // 0x409298\n            return -1;\n        }\n        int64_t v18 = (int64_t)mem2; // 0x4092fd\n        int64_t v19 = (int64_t)mem4; // 0x40931c\n        *v12 = v18;\n        *v14 = (int64_t)mem3;\n        *v15 = v19;\n        *v17 = (int64_t)mem5;\n        *v5 = v10;\n        v9 = *v3;\n        v7 = v18;\n        v8 = v19;\n    } else {\n        // 0x409205\n        v9 = v4;\n        v7 = *(int64_t *)(a1 + 24);\n        v8 = *(int64_t *)(a1 + 40);\n    }\n    int64_t v20 = 17 * v9; // 0x40921c\n    char v21 = a3; // 0x40921f\n    int64_t v22 = v20 + 8; // 0x409222\n    *(int64_t *)v22 = a3;\n    *(int64_t *)v20 = a2;\n    *(int32_t *)v22 = (int32_t)a3 & -0x3ff01;\n    bool v23 = v21 == 6; // 0x409232\n    if (v21 == 5) {\n        int32_t v24 = *(int32_t *)(a1 + 180); // 0x409234\n        int32_t v25 = v24 - 1; // 0x409234\n        v23 = v25 < 0 == (v24 & -v24) < 0 == (v25 != 0);\n    }\n    char * v26 = (char *)(v20 + 10); // 0x40923e\n    int128_t v27 = __asm_pxor(v2, v2); // 0x409245\n    *v26 = 16 * (char)v23 | *v26 & -17;\n    *(int64_t *)(v7 + 8 * v9) = -1;\n    int64_t v28 = 24 * *v3 + v8; // 0x409261\n    __asm_movups(*(int128_t *)v28, v27);\n    *(int64_t *)(v28 + 16) = 0;\n    int64_t v29 = *(int64_t *)(a1 + 48) + 24 * *v3; // 0x40927d\n    __asm_movups(*(int128_t *)v29, v27);\n    *(int64_t *)(v29 + 16) = 0;\n    int64_t result = *v3; // 0x40928c\n    *v3 = result + 1;\n    // 0x409298\n    return result;\n}\n"
        },
        {
            "funcName": "function_4093b0",
            "funcStartAddr": "4093b0",
            "funcEndAddr": "40944f",
            "decompiledFuncCode": "int64_t function_4093b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 16 * a2; // 0x4093b7\n    int64_t v2 = v1 + a1;\n    int64_t result = function_4091e0(a1, *(int64_t *)v2, *(int64_t *)(v2 + 8)); // 0x4093d6\n    if (result != -1) {\n        int64_t v3 = a3 & 0xffffffff; // 0x4093bb\n        int64_t v4 = 16 * result + v3; // 0x4093f5\n        int32_t v5 = 256 * (int32_t)a3; // 0x4093f8\n        int32_t * v6 = (int32_t *)(v4 + 8); // 0x409403\n        int32_t v7 = *v6 & -0x3ff01; // 0x409406\n        *v6 = v7 | v5 & 0x3ff00;\n        uint32_t v8 = (*(int32_t *)((v1 | 8) + v3) | v5) & 0x3ff00 | v7; // 0x40942a\n        *v6 = v8;\n        *(char *)(v4 + 10) = (char)(v8 / 0x10000) | 4;\n        *(int64_t *)(*(int64_t *)(a1 + 32) + 8 * result) = a2;\n    }\n    // 0x409444\n    return result;\n}\n"
        },
        {
            "funcName": "function_409450",
            "funcStartAddr": "409450",
            "funcEndAddr": "4096d4",
            "decompiledFuncCode": "int64_t function_409450(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t * v1 = (int64_t *)(a1 + 40);\n    int64_t * v2 = (int64_t *)(a1 + 24);\n    int64_t v3 = a1; // 0x40946a\n    int64_t v4 = a2; // 0x40946a\n    int64_t v5 = a3; // 0x40946a\n    int64_t v6 = a5 & 0xffffffff;\n    int32_t v7 = v6;\n    int64_t v8; // 0x409450\n    int64_t v9; // 0x409450\n    int64_t v10; // 0x409450\n    int64_t v11; // 0x409450\n    int64_t result; // 0x409450\n    int64_t v12; // 0x409450\n    int64_t v13; // 0x409450\n    int64_t v14; // 0x409450\n    int64_t v15; // 0x409450\n    int64_t v16; // 0x409604\n    int64_t v17; // 0x409608\n    int64_t v18; // 0x409608\n    int64_t v19; // 0x40961f\n    int64_t v20; // 0x409491\n    int64_t v21; // 0x409495\n    int64_t v22; // 0x409499\n    int64_t v23; // 0x409635\n    int64_t v24; // 0x4096a8\n    int64_t v25; // 0x4094af\n    int64_t v26; // 0x4094b3\n    int64_t v27; // 0x4094cb\n    int64_t v28; // 0x4094cf\n    int64_t v29; // 0x4094d6\n    int64_t v30; // 0x4094da\n    int64_t v31; // 0x409659\n    int64_t v32; // 0x409450\n    int64_t v33; // 0x409693\n    int64_t v34; // 0x409508\n    int64_t v35; // 0x40950b\n    int64_t v36; // 0x409475\n    int64_t v37; // 0x409483\n    while (true) {\n        // 0x40946f\n        v8 = v5;\n        v10 = v4;\n        v13 = v3;\n        v36 = *v1;\n        v37 = v13 + 8 + 16 * v10;\n        if (*(char *)v37 == 4) {\n            // 0x4095f0\n            v16 = 24 * v8;\n            v17 = 8 * v10;\n            v18 = *(int64_t *)(*v2 + v17);\n            *(int64_t *)(v36 + 8 + v16) = 0;\n            v19 = function_4093b0(a1, v18, v6);\n            if (v19 == -1) {\n                return 12;\n            }\n            // 0x409635\n            v23 = *v2;\n            *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n            v15 = v18;\n            v12 = v16;\n            v9 = v19;\n            goto lab_0x40956a;\n        } else {\n            // 0x40948d\n            v20 = 24 * v10;\n            v21 = v36 + v20;\n            v22 = *(int64_t *)(v21 + 8);\n            if (v22 == 0) {\n                // 0x4096a8\n                v24 = *v2;\n                *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                result = 0;\n                return result;\n            }\n            // 0x4094a6\n            v25 = 24 * v8;\n            v26 = v36 + v25;\n            v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n            *(int64_t *)(v26 + 8) = 0;\n            if (v22 == 1) {\n                // break -> 0x4095a0\n                break;\n            }\n            // 0x4094cb\n            v27 = *(int64_t *)(a1 + 16);\n            v28 = v27 - 1;\n            v29 = 16 * v28;\n            v30 = v29 + v13;\n            if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                // 0x4094f0\n                v32 = 16 * v27 - 32 - v29;\n                v14 = v28;\n                v11 = v30;\n                if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                    // 0x409528\n                    if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                        // 0x409539\n                        if ((char)function_408500(v26, v14) == 0) {\n                            return 12;\n                        } else {\n                            goto lab_0x409542;\n                        }\n                    }\n                }\n                // 0x409508\n                v34 = v32 + v11;\n                v35 = v14 - 1;\n                while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                    // 0x409522\n                    v14 = v35;\n                    v11 = v34;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x409528\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x409539\n                            if ((char)function_408500(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x409542;\n                            }\n                        }\n                    }\n                    // 0x409508\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                }\n            }\n            // 0x409650\n            v31 = function_4093b0(a1, v4, v6);\n            if (v31 == -1) {\n                return 12;\n            }\n            // 0x40966b\n            if ((char)function_408500(*v1 + v25, v31) == 0) {\n                return 12;\n            }\n            // 0x409682\n            v33 = function_409450(a1, v4, v31, a4, v6);\n            result = v33;\n            if ((int32_t)v33 != 0) {\n                // 0x40958a\n                return result;\n            }\n            goto lab_0x409542;\n        }\n    }\n    if (v10 == a4 == (v10 != v8)) {\n        // 0x4096bb\n        result = 0;\n        if ((char)function_408500(v26, v4) != 0) {\n            return result;\n        } else {\n            return 12;\n        }\n    }\n    int64_t v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7); // 0x4095c1\n    v5 = function_4093b0(a1, v4, v38);\n    while (v5 != -1) {\n        // 0x4095d5\n        v3 = *v1 + v25;\n        if ((char)function_408500(v3, v5) == 0) {\n            // break -> 0x409585\n            break;\n        }\n        v6 = v38;\n        v7 = v6;\n        while (true) {\n            // 0x40946f\n            v8 = v5;\n            v10 = v4;\n            v13 = v3;\n            v36 = *v1;\n            v37 = v13 + 8 + 16 * v10;\n            if (*(char *)v37 == 4) {\n                // 0x4095f0\n                v16 = 24 * v8;\n                v17 = 8 * v10;\n                v18 = *(int64_t *)(*v2 + v17);\n                *(int64_t *)(v36 + 8 + v16) = 0;\n                v19 = function_4093b0(a1, v18, v6);\n                if (v19 == -1) {\n                    return 12;\n                }\n                // 0x409635\n                v23 = *v2;\n                *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n                v15 = v18;\n                v12 = v16;\n                v9 = v19;\n                goto lab_0x40956a;\n            } else {\n                // 0x40948d\n                v20 = 24 * v10;\n                v21 = v36 + v20;\n                v22 = *(int64_t *)(v21 + 8);\n                if (v22 == 0) {\n                    // 0x4096a8\n                    v24 = *v2;\n                    *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                    result = 0;\n                    return result;\n                }\n                // 0x4094a6\n                v25 = 24 * v8;\n                v26 = v36 + v25;\n                v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n                *(int64_t *)(v26 + 8) = 0;\n                if (v22 == 1) {\n                    // break -> 0x4095a0\n                    break;\n                }\n                // 0x4094cb\n                v27 = *(int64_t *)(a1 + 16);\n                v28 = v27 - 1;\n                v29 = 16 * v28;\n                v30 = v29 + v13;\n                if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                    // 0x4094f0\n                    v32 = 16 * v27 - 32 - v29;\n                    v14 = v28;\n                    v11 = v30;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x409528\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x409539\n                            if ((char)function_408500(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x409542;\n                            }\n                        }\n                    }\n                    // 0x409508\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                    while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                        // 0x409522\n                        v14 = v35;\n                        v11 = v34;\n                        if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                            // 0x409528\n                            if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                                // 0x409539\n                                if ((char)function_408500(v26, v14) == 0) {\n                                    return 12;\n                                } else {\n                                    goto lab_0x409542;\n                                }\n                            }\n                        }\n                        // 0x409508\n                        v34 = v32 + v11;\n                        v35 = v14 - 1;\n                    }\n                }\n                // 0x409650\n                v31 = function_4093b0(a1, v4, v6);\n                if (v31 == -1) {\n                    return 12;\n                }\n                // 0x40966b\n                if ((char)function_408500(*v1 + v25, v31) == 0) {\n                    return 12;\n                }\n                // 0x409682\n                v33 = function_409450(a1, v4, v31, a4, v6);\n                result = v33;\n                if ((int32_t)v33 != 0) {\n                    // 0x40958a\n                    return result;\n                }\n                goto lab_0x409542;\n            }\n        }\n        if (v10 == a4 == (v10 != v8)) {\n            // 0x4096bb\n            result = 0;\n            if ((char)function_408500(v26, v4) != 0) {\n                return result;\n            } else {\n                return 12;\n            }\n        }\n        // 0x4095b0\n        v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7);\n        v5 = function_4093b0(a1, v4, v38);\n    }\n  lab_0x409585_5:\n    // 0x40958a\n    return 12;\n  lab_0x40956a:;\n    int64_t v39 = *v1 + v12; // 0x409571\n    if ((char)function_408500(v39, v9) == 0) {\n        return 12;\n    }\n    goto lab_0x40946f;\n  lab_0x409542:;\n    int64_t v40 = *(int64_t *)(*(int64_t *)(v20 + 16 + *v1) + 8); // 0x409551\n    int64_t v41 = function_4093b0(a1, v40, v6); // 0x40955c\n    v15 = v40;\n    v12 = v25;\n    v9 = v41;\n    if (v41 == -1) {\n        // break (via goto) -> 0x409585\n        goto lab_0x409585_5;\n    }\n    goto lab_0x40956a;\n}\n"
        },
        {
            "funcName": "function_4096e0",
            "funcStartAddr": "4096e0",
            "funcEndAddr": "409739",
            "decompiledFuncCode": "int64_t function_4096e0(int64_t a1) {\n    // 0x4096e0\n    free((int64_t *)*(int64_t *)(a1 + 48));\n    free((int64_t *)*(int64_t *)(a1 + 72));\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x4096f6\n    int64_t v2 = *v1; // 0x4096f6\n    if (v2 != a1 + 8) {\n        // 0x409703\n        free((int64_t *)*(int64_t *)(v2 + 16));\n        free((int64_t *)*v1);\n    }\n    // 0x409715\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free((int64_t *)*(int64_t *)(a1 + 96));\n    free((int64_t *)*(int64_t *)(a1 + 88));\n    free((int64_t *)a1);\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409772",
            "decompiledFuncCode": "int64_t function_409740(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    free((int64_t *)*(int64_t *)(v1 + 16));\n    free((int64_t *)*(int64_t *)(v1 + 24));\n    if (*(char *)(v1 + 139) == 0) {\n        // 0x40975f\n        return &g67;\n    }\n    // 0x409768\n    free((int64_t *)*(int64_t *)(v1 + 8));\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "409838",
            "decompiledFuncCode": "int64_t function_409780(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 232); // 0x40978b\n    if (*v2 < 1) {\n        // 0x409819\n        *v2 = 0;\n        *(int64_t *)(v1 + 200) = 0;\n        int64_t result; // 0x409780\n        return result;\n    }\n    int64_t v3 = 0; // 0x409807\n    int64_t v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3); // 0x4097a7\n    int64_t * v5 = (int64_t *)(v4 + 32); // 0x4097ab\n    int64_t * v6 = (int64_t *)(v4 + 40);\n    int64_t v7 = 0; // 0x4097b1\n    int64_t v8; // 0x4097bd\n    int64_t v9; // 0x4097c1\n    if (*v5 >= 1) {\n        v8 = *(int64_t *)(*v6 + 8 * v7);\n        v9 = v7 + 1;\n        free((int64_t *)*(int64_t *)(v8 + 32));\n        free((int64_t *)v8);\n        v7 = v9;\n        while (*v5 > v9) {\n            // 0x4097b8\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n        }\n    }\n    // 0x4097dd\n    free((int64_t *)*v6);\n    int64_t * v10 = (int64_t *)(v4 + 16); // 0x4097e7\n    int64_t v11 = *v10; // 0x4097e7\n    if (v11 != 0) {\n        // 0x4097f1\n        free((int64_t *)*(int64_t *)(v11 + 16));\n        free((int64_t *)*v10);\n    }\n    // 0x409804\n    v3++;\n    free((int64_t *)v4);\n    while (*v2 > v3) {\n        // 0x4097a0\n        v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3);\n        v5 = (int64_t *)(v4 + 32);\n        v6 = (int64_t *)(v4 + 40);\n        v7 = 0;\n        if (*v5 >= 1) {\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n            while (*v5 > v9) {\n                // 0x4097b8\n                v8 = *(int64_t *)(*v6 + 8 * v7);\n                v9 = v7 + 1;\n                free((int64_t *)*(int64_t *)(v8 + 32));\n                free((int64_t *)v8);\n                v7 = v9;\n            }\n        }\n        // 0x4097dd\n        free((int64_t *)*v6);\n        v10 = (int64_t *)(v4 + 16);\n        v11 = *v10;\n        if (v11 != 0) {\n            // 0x4097f1\n            free((int64_t *)*(int64_t *)(v11 + 16));\n            free((int64_t *)*v10);\n        }\n        // 0x409804\n        v3++;\n        free((int64_t *)v4);\n    }\n    // 0x409819\n    *v2 = 0;\n    *(int64_t *)(v1 + 200) = 0;\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_409840",
            "funcStartAddr": "409840",
            "funcEndAddr": "409ac0",
            "decompiledFuncCode": "int64_t function_409840(int64_t a1, int64_t a2) {\n    unsigned char v1 = *(char *)(a2 + 48); // 0x409844\n    int64_t v2 = v1; // 0x409844\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x409848\n    g66 = v2;\n    int64_t v4 = v3; // 0x409853\n    switch (v1) {\n        case 2: {\n            // 0x409918\n            if (*(int64_t *)(a2 + 32) == 0) {\n                // 0x40987a\n                return 0;\n            }\n            // 0x409923\n            __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 1449, \"link_nfa_nodes\");\n            v4 = 1449;\n        }\n        case 4: {\n            // 0x409940\n            *(int64_t *)(8 * v4 + 0x312d203e) = *(int64_t *)0x203e207466656c38;\n            // 0x40987a\n            return 0;\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 12: {\n            int64_t v5 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x4099b5\n            int64_t * v6 = (int64_t *)v5; // 0x4099b9\n            *v6 = 1;\n            int64_t * v7 = (int64_t *)(v5 + 8); // 0x4099c0\n            *v7 = 1;\n            int64_t * mem = malloc(8); // 0x4099c8\n            *(int64_t *)(v5 + 16) = (int64_t)mem;\n            if (mem != NULL) {\n                // 0x4099d6\n                *mem = *(int64_t *)(*(int64_t *)(a2 + 32) + 56);\n                return 0;\n            }\n            // 0x409a30\n            *v7 = 0;\n            *v6 = 0;\n            // 0x40987a\n            return 12;\n        }\n        case 10: {\n        }\n        case 11: {\n            char * v8 = (char *)(a1 + 176); // 0x409880\n            *v8 = *v8 | 1;\n            int64_t v9 = *(int64_t *)(a2 + 8); // 0x409887\n            int64_t v10 = a2 + 32;\n            int64_t v11 = *(int64_t *)(*(int64_t *)(v9 == 0 ? v10 : v9 + 24) + 56);\n            if (v11 < 0) {\n                // 0x409aa6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g67;\n            }\n            int64_t v12 = *(int64_t *)(a2 + 16); // 0x40989c\n            int64_t v13 = *(int64_t *)(*(int64_t *)(v12 == 0 ? v10 : v12 + 24) + 56);\n            if (v13 < 0) {\n                // 0x409a8d\n                __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n                // 0x409aa6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g67;\n            }\n            int64_t v14 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x4098d0\n            *(int64_t *)v14 = 2;\n            int64_t * mem2 = malloc(16); // 0x4098db\n            int64_t v15 = (int64_t)mem2; // 0x4098db\n            *(int64_t *)(v14 + 16) = v15;\n            if (mem2 == NULL) {\n                // 0x40987a\n                return 12;\n            }\n            int64_t * v16 = (int64_t *)(v14 + 8);\n            if (v11 == v13) {\n                // 0x4099e0\n                *v16 = 1;\n                *mem2 = v11;\n                // 0x40987a\n                return 0;\n            }\n            // 0x4098f6\n            *v16 = 2;\n            if (v11 < v13) {\n                // 0x409904\n                *mem2 = v11;\n                *(int64_t *)(v15 + 8) = v13;\n            } else {\n                // 0x409a18\n                *mem2 = v13;\n                *(int64_t *)(v15 + 8) = v11;\n            }\n            // 0x40987a\n            return 0;\n        }\n        case 16: {\n            // 0x40987a\n            return 0;\n        }\n        default: {\n            if ((v2 & 8) == 0) {\n                int64_t v17 = *(int64_t *)(*(int64_t *)(a2 + 32) + 56); // 0x40986c\n                *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v3) = v17;\n                // 0x40987a\n                return 0;\n            }\n            // 0x409a74\n            __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 1484, \"link_nfa_nodes\");\n            // 0x409a8d\n            __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n            // 0x409aa6\n            __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n            return &g67;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_409ac0",
            "funcStartAddr": "409ac0",
            "funcEndAddr": "409b0e",
            "decompiledFuncCode": "int64_t function_409ac0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 48); // 0x409ac0\n    uint64_t v2 = a2 + 1; // 0x409ac4\n    if (v2 >= v1) {\n        // 0x409b02\n        return 1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 16) + 4 * v2;\n    if (*(int32_t *)v3 != -1) {\n        // 0x409b02\n        return 1;\n    }\n    int64_t v4 = 2;\n    while (v4 != v1 - a2) {\n        int64_t v5 = v4 + 1; // 0x409af0\n        if (*(int32_t *)(v3 - 8 + 4 * v5) != -1) {\n            // break -> 0x409b02\n            break;\n        }\n        v4 = v5;\n    }\n    // 0x409b02\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409b10",
            "funcStartAddr": "409b10",
            "funcEndAddr": "409b75",
            "decompiledFuncCode": "int64_t function_409b10(int64_t a1, int64_t a2, uint64_t a3) {\n    if (a1 < 1) {\n        // 0x409b55\n        return 0;\n    }\n    int64_t v1 = a1 - 1; // 0x409b1a\n    int64_t v2 = 0; // 0x409b23\n    if (v1 != 0) {\n        int64_t v3 = 0;\n        int64_t v4 = (v3 + v1) / 2; // 0x409b29\n        int64_t v5 = v4; // 0x409b30\n        int64_t v6 = v4; // 0x409b30\n        int64_t v7 = v1; // 0x409b30\n        int64_t v8; // 0x409b10\n        int64_t v9; // 0x409b3c\n        if (*(int64_t *)(8 * v4 + a2) >= a3) {\n            v2 = v3;\n            if (v3 >= v5) {\n                // break (via goto) -> 0x409b4d\n                goto lab_0x409b4d;\n            }\n            // 0x409b38\n            v9 = (v5 + v3) / 2;\n            v6 = v9;\n            v7 = v5;\n            while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                // 0x409b48\n                v8 = v9;\n                v2 = v3;\n                if (v3 >= v8) {\n                    // break (via goto) -> 0x409b4d\n                    goto lab_0x409b4d;\n                }\n                // 0x409b38\n                v9 = (v8 + v3) / 2;\n                v6 = v9;\n                v7 = v8;\n            }\n        }\n        int64_t v10 = v7;\n        int64_t v11 = v6 + 1; // 0x409b60\n        v2 = v11;\n        while (v11 < v10) {\n            // 0x409b25\n            v3 = v11;\n            v4 = (v3 + v10) / 2;\n            v5 = v4;\n            v6 = v4;\n            v7 = v10;\n            if (*(int64_t *)(8 * v4 + a2) >= a3) {\n                v2 = v3;\n                if (v3 >= v5) {\n                    // break (via goto) -> 0x409b4d\n                    goto lab_0x409b4d;\n                }\n                // 0x409b38\n                v9 = (v5 + v3) / 2;\n                v6 = v9;\n                v7 = v5;\n                while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                    // 0x409b48\n                    v8 = v9;\n                    v2 = v3;\n                    if (v3 >= v8) {\n                        // break (via goto) -> 0x409b4d\n                        goto lab_0x409b4d;\n                    }\n                    // 0x409b38\n                    v9 = (v8 + v3) / 2;\n                    v6 = v9;\n                    v7 = v8;\n                }\n            }\n            // 0x409b60\n            v10 = v7;\n            v11 = v6 + 1;\n            v2 = v11;\n        }\n    }\n  lab_0x409b4d:\n    // 0x409b4d\n    if (*(int64_t *)(8 * v2 + a2) == a3) {\n        // 0x409b70\n        return v2 + 1;\n    }\n    // 0x409b55\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409b80",
            "funcStartAddr": "409b80",
            "funcEndAddr": "409c79",
            "decompiledFuncCode": "int64_t function_409b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a2 + 16; // 0x409b87\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x409ba1\n    int64_t v3 = *v2; // 0x409ba1\n    if (function_409b10(v3, v1, a3) != 0) {\n      lab_0x409c68:\n        // 0x409c55\n        return 0;\n    }\n    int32_t v4 = a5;\n    int64_t * v5 = (int64_t *)(a1 + 40);\n    int64_t v6 = a3;\n    int64_t v7 = 16 * v6 + v3; // 0x409bc0\n    int64_t result; // 0x409b80\n    if ((int32_t)*(char *)(v7 + 8) == v4) {\n        // 0x409bcd\n        if (*(int64_t *)v7 == a4) {\n            if (v4 != 9) {\n                return 0;\n            } else {\n                // 0x409c3e\n                result = 12;\n                if ((char)function_408500(a2, v6) != 0) {\n                    return 0;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n    // 0x409bd2\n    result = 12;\n    while ((char)function_408500(a2, v6) != 0) {\n        int64_t v8 = 24 * v6; // 0x409bea\n        int64_t v9 = *v5 + v8; // 0x409bee\n        int64_t v10 = *(int64_t *)(v9 + 8); // 0x409bf1\n        if (v10 == 0) {\n            // 0x409c55\n            return 0;\n        }\n        int64_t v11 = *(int64_t *)(v9 + 16); // 0x409bfa\n        int64_t v12 = v11; // 0x409c02\n        if (v10 == 2) {\n            int64_t v13 = function_409b80(a1, a2, *(int64_t *)(v11 + 8), a4, a5 & 0xffffffff); // 0x409c20\n            result = v13;\n            if ((int32_t)v13 != 0) {\n                // break -> 0x409c55\n                break;\n            }\n            // 0x409c29\n            v12 = *(int64_t *)(v8 + 16 + *v5);\n        }\n        int64_t v14 = *(int64_t *)v12; // 0x409c04\n        int64_t v15 = *v2; // 0x409ba1\n        if (function_409b10(v15, v1, v14) != 0) {\n            // 0x409c55\n            return 0;\n        }\n        v6 = v14;\n        v7 = 16 * v6 + v15;\n        if ((int32_t)*(char *)(v7 + 8) == v4) {\n            // 0x409bcd\n            if (*(int64_t *)v7 == a4) {\n                if (v4 != 9) {\n                    return 0;\n                } else {\n                    // 0x409c3e\n                    result = 12;\n                    if ((char)function_408500(a2, v6) != 0) {\n                        return 0;\n                    } else {\n                        return result;\n                    }\n                }\n            }\n        }\n        // 0x409bd2\n        result = 12;\n    }\n  lab_0x409c55:\n    // 0x409c55\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c80",
            "funcStartAddr": "409c80",
            "funcEndAddr": "409ca3",
            "decompiledFuncCode": "int64_t function_409c80(uint64_t a1, int64_t result2, uint64_t a3) {\n    // 0x409c80\n    if (a3 >= a1) {\n        // 0x409ca2\n        int64_t result; // 0x409c80\n        return result;\n    }\n    int64_t v1 = a3; // 0x409c83\n    int64_t v2 = 8 * v1 + result2;\n    *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n    v1++;\n    while (v1 != a1) {\n        // 0x409c90\n        v2 = 8 * v1 + result2;\n        *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n        v1++;\n    }\n    // 0x409ca2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409cb0",
            "funcStartAddr": "409cb0",
            "funcEndAddr": "409d3b",
            "decompiledFuncCode": "int64_t function_409cb0(int64_t a1, int64_t a2) {\n    // 0x409cb0\n    int64_t * v1; // 0x409cc0\n    int64_t v2; // 0x409cc0\n    switch (*(char *)(a2 + 48)) {\n        case 4: {\n            int64_t v3 = *(int64_t *)(a1 + 224); // 0x409d10\n            if (v3 == 0) {\n                // 0x409cbc\n                return 0;\n            }\n            int64_t v4 = a2 + 40; // 0x409d1c\n            int64_t v5 = *(int64_t *)(8 * (int64_t)*(int32_t *)v4 + v3); // 0x409d20\n            *(int64_t *)v4 = v5;\n            int64_t * v6 = (int64_t *)(a1 + 160); // 0x409d31\n            *v6 = *v6 | (int64_t)(1 << (int32_t)v5 % 32);\n            return 0;\n        }\n        case 17: {\n            // 0x409cc0\n            v1 = (int64_t *)(a2 + 8);\n            v2 = *v1;\n            if (v2 == 0 || *(char *)(v2 + 48) != 17) {\n                // 0x409cbc\n                return 0;\n            }\n            // break -> 0x409ccf\n            break;\n        }\n        default: {\n            // 0x409cbc\n            return 0;\n        }\n    }\n    uint64_t v7 = *(int64_t *)(v2 + 40); // 0x409ccf\n    int64_t v8 = *(int64_t *)(v2 + 8); // 0x409cd3\n    *v1 = v8;\n    if (v8 != 0) {\n        // 0x409ce0\n        *(int64_t *)v8 = a2;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 224); // 0x409ce3\n    int64_t v10 = *(int64_t *)(8 * *(int64_t *)(a2 + 40) + v9); // 0x409cee\n    *(int64_t *)(v9 + 8 * v7) = v10;\n    if (v7 > 63) {\n        // 0x409cbc\n        return 0;\n    }\n    uint64_t v11 = v7 % 64; // 0x409d03\n    int64_t v12 = -2; // 0x409d03\n    if (v11 != 0) {\n        v12 = 0xfffffffffffffffe >> 64 - v11 | -2 << v11;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 160); // 0x409d06\n    *v13 = *v13 & v12;\n    // 0x409cbc\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409d40",
            "funcStartAddr": "409d40",
            "funcEndAddr": "409d97",
            "decompiledFuncCode": "int64_t function_409d40(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a2 + 8); // 0x409d44\n    switch (*(char *)(a2 + 48)) {\n        case 11: {\n            // 0x409d78\n            *(int64_t *)(v1 + 32) = a2;\n            return 0;\n        }\n        case 16: {\n            int64_t v2 = *(int64_t *)(a2 + 16); // 0x409d80\n            *(int64_t *)(v1 + 32) = *(int64_t *)(v2 + 24);\n            *(int64_t *)(v2 + 32) = *(int64_t *)(a2 + 32);\n            return 0;\n        }\n    }\n    if (v1 != 0) {\n        // 0x409d55\n        *(int64_t *)(v1 + 32) = *(int64_t *)(a2 + 32);\n    }\n    int64_t v3 = *(int64_t *)(a2 + 16); // 0x409d5d\n    if (v3 != 0) {\n        // 0x409d66\n        *(int64_t *)(v3 + 32) = *(int64_t *)(a2 + 32);\n    }\n    // 0x409d6e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409da0",
            "funcStartAddr": "409da0",
            "funcEndAddr": "409fee",
            "decompiledFuncCode": "int64_t function_409da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5, int64_t a6, uint64_t a7) {\n    int64_t v1 = *(int64_t *)(a1 + 200); // 0x409db7\n    int64_t v2 = -1; // 0x409dd1\n    int64_t v3 = -1; // 0x409dd1\n    if (v1 > 0) {\n        int64_t v4 = *(int64_t *)(a1 + 216); // 0x409dd7\n        int64_t v5 = v4 + 8;\n        int64_t v6 = 0;\n        uint64_t v7 = v6 + v1; // 0x409dd3\n        int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x409de8\n        int64_t v9 = v8; // 0x409df4\n        int64_t v10 = v1; // 0x409df4\n        int64_t v11 = v8; // 0x409df4\n        int64_t v12; // 0x409da0\n        int64_t v13; // 0x409da0\n        uint64_t v14; // 0x409e00\n        int64_t v15; // 0x409e0e\n        if (*(int64_t *)(40 * v8 + v5) >= a5) {\n            v13 = v6;\n            if (v6 >= v9) {\n                // break (via goto) -> 0x409e2b\n                goto lab_0x409e2b;\n            }\n            // 0x409e00\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v9;\n            v11 = v15;\n            while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                // 0x409e26\n                v12 = v15;\n                v13 = v6;\n                if (v6 >= v12) {\n                    // break (via goto) -> 0x409e2b\n                    goto lab_0x409e2b;\n                }\n                // 0x409e00\n                v14 = v12 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v12;\n                v11 = v15;\n            }\n        }\n        int64_t v16 = v10;\n        int64_t v17 = v11 + 1; // 0x409f98\n        v13 = v17;\n        while (v17 < v16) {\n            // 0x409dd3\n            v6 = v17;\n            v7 = v6 + v16;\n            v8 = (v7 / 0x8000000000000000 + v7) / 2;\n            v9 = v8;\n            v10 = v16;\n            v11 = v8;\n            if (*(int64_t *)(40 * v8 + v5) >= a5) {\n                v13 = v6;\n                if (v6 >= v9) {\n                    // break (via goto) -> 0x409e2b\n                    goto lab_0x409e2b;\n                }\n                // 0x409e00\n                v14 = v9 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v9;\n                v11 = v15;\n                while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                    // 0x409e26\n                    v12 = v15;\n                    v13 = v6;\n                    if (v6 >= v12) {\n                        // break (via goto) -> 0x409e2b\n                        goto lab_0x409e2b;\n                    }\n                    // 0x409e00\n                    v14 = v12 + v6;\n                    v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                    v10 = v12;\n                    v11 = v15;\n                }\n            }\n            // 0x409f98\n            v16 = v10;\n            v17 = v11 + 1;\n            v13 = v17;\n        }\n      lab_0x409e2b:;\n        int64_t v18 = v13;\n        int64_t v19 = -1; // 0x409e2e\n        if (v1 > v18) {\n            // 0x409e34\n            v19 = *(int64_t *)(40 * v18 + 8 + v4) != a5 ? -1 : v18;\n        }\n        int64_t v20 = 0;\n        uint64_t v21 = v1 + v20; // 0x409e5c\n        int64_t v22 = (v21 / 0x8000000000000000 + v21) / 2; // 0x409e72\n        int64_t v23 = v22; // 0x409e7e\n        int64_t v24 = v1; // 0x409e7e\n        int64_t v25 = v22; // 0x409e7e\n        int64_t v26; // 0x409da0\n        int64_t v27; // 0x409da0\n        uint64_t v28; // 0x409e88\n        int64_t v29; // 0x409e97\n        if (*(int64_t *)(40 * v22 + v5) >= a7) {\n            v27 = v20;\n            if (v20 >= v23) {\n                // break (via goto) -> 0x409eb4\n                goto lab_0x409eb4;\n            }\n            // 0x409e88\n            v28 = v23 + v20;\n            v29 = (v28 / 0x8000000000000000 + v28) / 2;\n            v24 = v23;\n            v25 = v29;\n            while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                // 0x409eaf\n                v26 = v29;\n                v27 = v20;\n                if (v20 >= v26) {\n                    // break (via goto) -> 0x409eb4\n                    goto lab_0x409eb4;\n                }\n                // 0x409e88\n                v28 = v26 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v26;\n                v25 = v29;\n            }\n        }\n        int64_t v30 = v24;\n        int64_t v31 = v25 + 1; // 0x409fb0\n        v27 = v31;\n        while (v31 < v30) {\n            // 0x409e5c\n            v20 = v31;\n            v21 = v30 + v20;\n            v22 = (v21 / 0x8000000000000000 + v21) / 2;\n            v23 = v22;\n            v24 = v30;\n            v25 = v22;\n            if (*(int64_t *)(40 * v22 + v5) >= a7) {\n                v27 = v20;\n                if (v20 >= v23) {\n                    // break (via goto) -> 0x409eb4\n                    goto lab_0x409eb4;\n                }\n                // 0x409e88\n                v28 = v23 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v23;\n                v25 = v29;\n                while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                    // 0x409eaf\n                    v26 = v29;\n                    v27 = v20;\n                    if (v20 >= v26) {\n                        // break (via goto) -> 0x409eb4\n                        goto lab_0x409eb4;\n                    }\n                    // 0x409e88\n                    v28 = v26 + v20;\n                    v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                    v24 = v26;\n                    v25 = v29;\n                }\n            }\n            // 0x409fb0\n            v30 = v24;\n            v31 = v25 + 1;\n            v27 = v31;\n        }\n      lab_0x409eb4:;\n        int64_t v32 = v27;\n        v2 = v19;\n        v3 = -1;\n        if (v1 > v32) {\n            // 0x409ebd\n            v2 = v19;\n            v3 = *(int64_t *)(40 * v32 + 8 + v4) != a7 ? -1 : v32;\n        }\n    }\n    // 0x409edc\n    if (a2 < 1) {\n        // 0x409f7e\n        return 0;\n    }\n    int64_t * v33 = (int64_t *)(a1 + 216); // 0x409f14\n    int64_t * v34 = (int64_t *)*(int64_t *)(a1 + 152); // 0x409f45\n    int64_t v35 = 0; // 0x409fc5\n    int64_t v36 = 8 * v35; // 0x409f28\n    int64_t v37 = *(int64_t *)(v36 + a3); // 0x409f28\n    int64_t v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34); // 0x409f48\n    int64_t v39 = function_408380(a1, v37, v38, a4, a5, v2); // 0x409f4e\n    uint64_t v40 = *(int64_t *)(v38 + v36); // 0x409f6c\n    int64_t result = 1; // 0x409f77\n    while ((int32_t)v39 == (int32_t)function_408380(a1, v40, v38, a6, a7, v3)) {\n        // 0x409fc0\n        v35++;\n        result = 0;\n        if (v35 >= v40) {\n            // break -> 0x409f7e\n            break;\n        }\n        v36 = 8 * v35;\n        v37 = *(int64_t *)(v36 + v38);\n        v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34);\n        v39 = function_408380(a1, v37, v38, a4, a5, v2);\n        v40 = *(int64_t *)(v38 + v36);\n        result = 1;\n    }\n    // 0x409f7e\n    return result;\n}\n"
        },
        {
            "funcName": "function_409ff0",
            "funcStartAddr": "409ff0",
            "funcEndAddr": "40a041",
            "decompiledFuncCode": "int64_t function_409ff0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409ff0\n    int64_t result; // 0x409ff0\n    if ((int32_t)result != 0) {\n        // 0x40a03c\n        return result;\n    }\n    int64_t v1 = a1; // 0x40a00e\n    while (true) {\n        int64_t v2 = *(int64_t *)(v1 + 8); // 0x40a010\n        int64_t v3 = v2; // 0x40a019\n        int64_t v4 = 0; // 0x40a019\n        int64_t v5 = v1; // 0x40a019\n        if (v2 == 0) {\n            int64_t v6 = v5;\n            int64_t v7 = *(int64_t *)(v6 + 16); // 0x40a023\n            v3 = v7;\n            while (v7 != v4 != v7 != 0) {\n                int64_t v8 = *(int64_t *)v6; // 0x40a031\n                v4 = v6;\n                if (v8 == 0) {\n                    return result;\n                }\n                v6 = v8;\n                v7 = *(int64_t *)(v6 + 16);\n                v3 = v7;\n            }\n        }\n        // 0x40a000\n        v1 = v3;\n    }\n}\n"
        },
        {
            "funcName": "function_40a050",
            "funcStartAddr": "40a050",
            "funcEndAddr": "40a213",
            "decompiledFuncCode": "int64_t function_40a050(int64_t * a1, int128_t * a2) {\n    // 0x40a050\n    if (a2 == NULL) {\n        // 0x40a154\n        return 0;\n    }\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40a059\n    int64_t v3 = *v2; // 0x40a059\n    if (v3 == 0) {\n        // 0x40a154\n        return 0;\n    }\n    int64_t v4 = (int64_t)a1;\n    int64_t * v5 = (int64_t *)(v4 + 8); // 0x40a06d\n    int64_t v6 = *v5; // 0x40a06d\n    int64_t v7 = v6 + 2 * v3;\n    int64_t v8; // 0x40a050\n    int64_t * v9; // 0x40a050\n    int64_t v10; // 0x40a050\n    int64_t v11; // 0x40a050\n    int64_t v12; // 0x40a050\n    if (v7 > v4) {\n        int64_t v13 = v3 + v4; // 0x40a1b0\n        int64_t * v14 = (int64_t *)(v4 + 16);\n        int64_t * mem = realloc((int64_t *)*v14, 16 * (int32_t)v13); // 0x40a1c2\n        if (mem == NULL) {\n            // 0x40a154\n            return 12;\n        }\n        int64_t v15 = *v5; // 0x40a1cc\n        *v14 = (int64_t)mem;\n        *a1 = 2 * v13;\n        int64_t v16 = *v2; // 0x40a1d7\n        v9 = v14;\n        v11 = v16;\n        if (v15 != 0) {\n            // 0x40a1cc\n            v8 = 2 * v16 + v15;\n            v10 = v16;\n            v12 = v15;\n            goto lab_0x40a08d;\n        } else {\n            goto lab_0x40a1e5;\n        }\n    } else {\n        // 0x40a084\n        v8 = v7;\n        v10 = v3;\n        v12 = v6;\n        if (v6 == 0) {\n            // 0x40a084\n            v9 = (int64_t *)(v4 + 16);\n            v11 = v3;\n            goto lab_0x40a1e5;\n        } else {\n            goto lab_0x40a08d;\n        }\n    }\n  lab_0x40a1e5:;\n    int64_t v17 = *v9; // 0x40a1e5\n    int64_t v18 = *(int64_t *)(v1 + 16); // 0x40a1e9\n    *v5 = v11;\n    memcpy((int64_t *)v17, (int64_t *)v18, 8 * (int32_t)*v2);\n    // 0x40a154\n    return 0;\n  lab_0x40a08d:;\n    int64_t v19 = v10 - 1; // 0x40a091\n    int64_t v20 = -v10; // 0x40a09c\n    int64_t v21 = v19; // 0x40a0a3\n    int64_t v22 = v8; // 0x40a0a3\n    if (v20 < 0) {\n        int64_t v23 = v12; // 0x40a050\n        int64_t v24 = v20;\n        int64_t v25 = v8; // 0x40a050\n        int64_t v26 = v19;\n        while (true) {\n            int64_t v27 = v23 - 1;\n            int64_t v28 = v24; // 0x40a0d6\n            v21 = v26;\n            v22 = v25;\n            if (v27 < 0) {\n                // break (via goto) -> 0x40a0e0\n                goto lab_0x40a0e0_2;\n            }\n            int64_t v29 = v25;\n            int64_t v30 = v26;\n            int64_t v31 = *(int64_t *)(v4 + 16); // 0x40a0af\n            uint64_t v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30); // 0x40a0b3\n            uint64_t v33 = *(int64_t *)(v31 + 8 * v27); // 0x40a0b7\n            int64_t v34; // 0x40a050\n            int64_t v35; // 0x40a050\n            while (v33 != v32) {\n                // 0x40a0c1\n                v34 = v30;\n                v35 = v28;\n                if (v33 >= v32) {\n                    goto lab_0x40a0a0;\n                }\n                int64_t v36 = v30 - 1; // 0x40a0c7\n                int64_t v37 = v29 - 1; // 0x40a0cb\n                *(int64_t *)(v31 + 8 * v37) = v32;\n                v28 = -v30;\n                v21 = v36;\n                v22 = v37;\n                if (v28 >= 0) {\n                    // break (via goto) -> 0x40a0e0\n                    goto lab_0x40a0e0_2;\n                }\n                v21 = v26;\n                v22 = v25;\n                if (v27 < 0) {\n                    // break (via goto) -> 0x40a0e0\n                    goto lab_0x40a0e0_2;\n                }\n                // 0x40a0aa\n                v29 = v37;\n                v30 = v36;\n                v31 = *(int64_t *)(v4 + 16);\n                v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30);\n                v33 = *(int64_t *)(v31 + 8 * v27);\n            }\n            // 0x40a180\n            v34 = v30 - 1;\n            v35 = -v30;\n          lab_0x40a0a0:\n            // 0x40a0a0\n            v24 = v35;\n            v26 = v34;\n            v23 = v27;\n            v25 = v29;\n            v21 = v26;\n            v22 = v29;\n            if (v24 >= 0) {\n                // break -> 0x40a0e0\n                break;\n            }\n        }\n    }\n  lab_0x40a0e0_2:;\n    int64_t v38 = v22; // 0x40a0e3\n    if (v21 >= 0) {\n        int64_t v39 = v21 + 1; // 0x40a0e5\n        int64_t v40 = *(int64_t *)(v4 + 16); // 0x40a0e9\n        int64_t v41 = *(int64_t *)(v1 + 16); // 0x40a0ed\n        int64_t v42 = v22 - v39; // 0x40a0f2\n        memcpy((int64_t *)(v40 + 8 * v42), (int64_t *)v41, 8 * (int32_t)v39);\n        v38 = v42;\n    }\n    int64_t v43 = *v5; // 0x40a106\n    int64_t v44 = v43 - 1; // 0x40a10f\n    int64_t v45 = 2 * *v2 + v44; // 0x40a10f\n    int64_t v46 = v45 - v38 + 1; // 0x40a11a\n    if (v46 == 0) {\n      lab_0x40a154:\n        // 0x40a154\n        return 0;\n    }\n    int64_t v47 = *(int64_t *)(v4 + 16); // 0x40a127\n    *v5 = v46 + v43;\n    int64_t v48 = v44; // 0x40a12f\n    int64_t v49 = v46; // 0x40a12f\n    int64_t v50 = v45; // 0x40a12f\n    while (true) {\n        int64_t v51 = v50;\n        int64_t v52 = v49;\n        uint64_t v53 = *(int64_t *)(8 * v51 + v47); // 0x40a130\n        uint64_t v54 = *(int64_t *)(8 * v48 + v47); // 0x40a134\n        int64_t v55 = 8 * (v52 + v48) + v47; // 0x40a13c\n        while (v53 > v54) {\n            // 0x40a145\n            *(int64_t *)v55 = v53;\n            int64_t v56 = v52 - 1; // 0x40a14c\n            if (v56 == 0) {\n                return 0;\n            }\n            v51--;\n            v52 = v56;\n            v53 = *(int64_t *)(8 * v51 + v47);\n            v54 = *(int64_t *)(8 * v48 + v47);\n            v55 = 8 * (v52 + v48) + v47;\n        }\n        // 0x40a160\n        *(int64_t *)v55 = v54;\n        int64_t v57 = v48 - 1; // 0x40a163\n        v48 = v57;\n        v49 = v52;\n        v50 = v51;\n        if (v57 < 0) {\n            // 0x40a169\n            memcpy((int64_t *)v47, (int64_t *)(v47 + 8 * v38), 8 * (int32_t)v52);\n            return 0;\n        }\n    }\n    // 0x40a154\n    int64_t v58; // 0x40a050\n    int64_t result = v58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a220",
            "funcStartAddr": "40a220",
            "funcEndAddr": "40a474",
            "decompiledFuncCode": "int64_t function_40a220(int128_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 24 * a3; // 0x40a234\n    int64_t * v2 = (int64_t *)(a2 + 40); // 0x40a23c\n    int64_t v3 = *v2 + v1; // 0x40a244\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x40a24b\n    int64_t v5 = *v4 + 1; // 0x40a258\n    int128_t v6 = v5; // bp-120, 0x40a25c\n    int64_t * mem = malloc(8 * (int32_t)v5); // 0x40a265\n    if (mem == NULL) {\n        // 0x40a34a\n        return 12;\n    }\n    int64_t v7 = (int64_t)mem; // 0x40a265\n    int64_t * v8 = (int64_t *)(a2 + 48); // 0x40a278\n    int64_t v9 = v1 + 8;\n    *(int64_t *)(*v8 + v9) = -1;\n    int64_t v10 = a2 + 8 + 16 * a3;\n    uint32_t v11 = *(int32_t *)v10; // 0x40a293\n    int64_t v12 = v10; // 0x40a29e\n    if ((v11 & 0x3ff00) != 0) {\n        // 0x40a3c0\n        if (*v4 == 0) {\n            goto lab_0x40a410;\n        } else {\n            int64_t v13 = *(int64_t *)*(int64_t *)(v3 + 16); // 0x40a3cb\n            v12 = v10;\n            if ((*(char *)(a2 + 10 + 16 * v13) & 4) == 0) {\n                int64_t result = function_409450(a2, a3, a3, a3, (int64_t)(v11 / 256 % 1024)); // 0x40a3f4\n                if ((int32_t)result != 0) {\n                    // 0x40a34a\n                    return result;\n                }\n                // 0x40a401\n                v12 = 17 * a3 + 8;\n            }\n            goto lab_0x40a2a4;\n        }\n    } else {\n        goto lab_0x40a2a4;\n    }\n  lab_0x40a2a4:;\n    // 0x40a2a4\n    int64_t v14; // 0x40a220\n    int64_t v15; // 0x40a220\n    if ((*(char *)v12 & 8) == 0) {\n        goto lab_0x40a410;\n    } else {\n        int64_t v16 = *v2; // 0x40a2ae\n        int64_t v17 = v16 + v1; // 0x40a2b2\n        if (*(int64_t *)(v17 + 8) < 1) {\n            goto lab_0x40a410;\n        } else {\n            int64_t v18 = 0;\n            int64_t v19 = *(int64_t *)(*(int64_t *)(v17 + 16) + 8 * v18); // 0x40a317\n            int64_t v20 = *v8; // 0x40a31b\n            int64_t v21 = 24 * v19; // 0x40a323\n            int64_t v22 = v20 + v21; // 0x40a327\n            int64_t v23 = *(int64_t *)(v22 + 8); // 0x40a32a\n            int64_t v24 = 0; // 0x40a332\n            int64_t v25 = v18; // 0x40a332\n            int64_t v26 = v19; // 0x40a332\n            int64_t v27 = v21; // 0x40a332\n            int64_t v28 = v22; // 0x40a332\n            int64_t v29 = v23; // 0x40a332\n            int64_t v30; // 0x40a220\n            int64_t v31; // 0x40a378\n            int64_t v32; // 0x40a382\n            int64_t v33; // 0x40a317\n            int64_t v34; // 0x40a323\n            int64_t v35; // 0x40a327\n            int64_t v36; // 0x40a32a\n            if (v23 == -1) {\n                // 0x40a378\n                v31 = v16 + v1;\n                v32 = v18;\n                v32++;\n                v30 = 1;\n                if (*(int64_t *)(v31 + 8) <= v32) {\n                    // break (via goto) -> 0x40a38c\n                    goto lab_0x40a38c;\n                }\n                // 0x40a313\n                v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                v34 = 24 * v33;\n                v35 = v34 + v20;\n                v36 = *(int64_t *)(v35 + 8);\n                v24 = 1;\n                v25 = v32;\n                v26 = v33;\n                v27 = v34;\n                v28 = v35;\n                v29 = v36;\n                while (v36 == -1) {\n                    // 0x40a378\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40a38c\n                        goto lab_0x40a38c;\n                    }\n                    // 0x40a313\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                }\n            }\n            int64_t v37 = v29;\n            int64_t result2; // 0x40a220\n            int64_t v38; // 0x40a220\n            int128_t v39; // bp-88, 0x40a220\n            int64_t v40; // 0x40a341\n            if (v37 != 0) {\n                // 0x40a2d0\n                v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                v38 = *(int64_t *)(v28 + 16);\n            } else {\n                // 0x40a339\n                v40 = function_40a220(&v39, a2, v26, v37);\n                int64_t v41; // 0x40a220\n                v38 = v41;\n                result2 = v40;\n                if ((int32_t)v40 != 0) {\n                    // 0x40a34a\n                    return result2;\n                }\n            }\n            int64_t v42 = function_40a050((int64_t *)&v6, &v39); // 0x40a2ec\n            result2 = v42;\n            while ((int32_t)v42 == 0) {\n                int64_t v43 = v38;\n                int64_t v44 = v24; // 0x40a2ff\n                if (*(int64_t *)(v27 + 8 + *v8) == 0) {\n                    // 0x40a360\n                    free((int64_t *)v43);\n                    v44 = 1;\n                }\n                int64_t v45 = *v2; // 0x40a301\n                int64_t v46 = v25 + 1; // 0x40a305\n                int64_t v47 = v45 + v1; // 0x40a309\n                int64_t v48 = v45; // 0x40a311\n                if (*(int64_t *)(v47 + 8) <= v46) {\n                    // break -> 0x40a38c\n                    break;\n                }\n                v18 = v46;\n                int64_t v49 = v43;\n                v19 = *(int64_t *)(*(int64_t *)(v47 + 16) + 8 * v18);\n                v20 = *v8;\n                v21 = 24 * v19;\n                v22 = v20 + v21;\n                v23 = *(int64_t *)(v22 + 8);\n                v24 = v44;\n                v25 = v18;\n                v26 = v19;\n                v27 = v21;\n                v28 = v22;\n                v29 = v23;\n                if (v23 == -1) {\n                    // 0x40a378\n                    v31 = v48 + v1;\n                    v32 = v18;\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40a38c\n                        goto lab_0x40a38c;\n                    }\n                    // 0x40a313\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                    while (v36 == -1) {\n                        // 0x40a378\n                        v32++;\n                        v30 = 1;\n                        if (*(int64_t *)(v31 + 8) <= v32) {\n                            // break (via goto) -> 0x40a38c\n                            goto lab_0x40a38c;\n                        }\n                        // 0x40a313\n                        v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                        v34 = 24 * v33;\n                        v35 = v34 + v20;\n                        v36 = *(int64_t *)(v35 + 8);\n                        v24 = 1;\n                        v25 = v32;\n                        v26 = v33;\n                        v27 = v34;\n                        v28 = v35;\n                        v29 = v36;\n                    }\n                }\n                // 0x40a334\n                v37 = v29;\n                if (v37 != 0) {\n                    // 0x40a2d0\n                    v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                    v38 = *(int64_t *)(v28 + 16);\n                } else {\n                    // 0x40a339\n                    v40 = function_40a220(&v39, a2, v26, v37);\n                    v38 = v49;\n                    result2 = v40;\n                    if ((int32_t)v40 != 0) {\n                        // 0x40a34a\n                        return result2;\n                    }\n                }\n                // 0x40a2e2\n                v42 = function_40a050((int64_t *)&v6, &v39);\n                result2 = v42;\n            }\n            // 0x40a34a\n            return result2;\n          lab_0x40a38c:\n            // 0x40a38c\n            if ((char)function_408500((int64_t)&v6, a3) == 0) {\n                // 0x40a34a\n                return 12;\n            }\n            int64_t v50 = *v8; // 0x40a3a1\n            v15 = v50;\n            if ((char)a4 == 1 || (char)v30 == 0) {\n                goto lab_0x40a425;\n            } else {\n                // 0x40a3b5\n                *(int64_t *)(v50 + v9) = 0;\n                v14 = 0x100000000 * v7 >> 32;\n                goto lab_0x40a439;\n            }\n        }\n    }\n  lab_0x40a410:\n    // 0x40a410\n    if ((char)function_408500((int64_t)&v6, a3) == 0) {\n        // 0x40a34a\n        return 12;\n    }\n    // 0x40a421\n    v15 = *v8;\n    goto lab_0x40a425;\n  lab_0x40a425:;\n    int128_t v51 = __asm_movdqa(0); // 0x40a425\n    int64_t v52 = v15 + v1;\n    __asm_movups(*(int128_t *)v52, v51);\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    *(int64_t *)(v52 + 16) = v53;\n    v14 = v53;\n    goto lab_0x40a439;\n  lab_0x40a439:;\n    int128_t v54 = __asm_movdqa(0); // 0x40a442\n    *(int64_t *)((int64_t)a1 + 16) = v14;\n    *a1 = (int128_t)__asm_movaps(v54);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a480",
            "funcStartAddr": "40a480",
            "funcEndAddr": "40a5bf",
            "decompiledFuncCode": "int64_t function_40a480(int64_t a1, int64_t * a2, int64_t a3, uint32_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40a497\n    int64_t v3 = *v2; // 0x40a497\n    int64_t size = 8 * v3; // 0x40a4a4\n    int128_t v4 = v3; // bp-72, 0x40a4ac\n    int64_t * mem = malloc((int32_t)size); // 0x40a4b1\n    if (mem == NULL) {\n        // 0x40a5ad\n        return 12;\n    }\n    int64_t * v5 = (int64_t *)(v1 + 16);\n    if (v3 < 1) {\n      lab_0x40a54d:\n        // 0x40a54d\n        free((int64_t *)*v5);\n        int128_t v6 = __asm_movdqa(0); // 0x40a55b\n        *v5 = (int64_t)mem;\n        *(int128_t *)a2 = (int128_t)__asm_movaps(v6);\n        return 0;\n    }\n    int64_t v7 = &v4;\n    int64_t v8 = size; // 0x40a480\n    int64_t v9 = 0; // 0x40a543\n    int64_t v10; // 0x40a480\n    int64_t v11; // 0x40a480\n    int64_t v12; // 0x40a4e0\n    while (true) {\n      lab_0x40a4d0:;\n        int64_t v13 = *(int64_t *)(*v5 + 8 * v9); // 0x40a4d4\n        v12 = *(int64_t *)(a1 + 48) + 24 * v13;\n        uint64_t v14 = *(int64_t *)(v12 + 8); // 0x40a4e4\n        if (v14 >= 1) {\n            int64_t v15 = 0;\n            int64_t v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16)); // 0x40a509\n            int64_t v17 = 16 * v16 + v8; // 0x40a514\n            int64_t v18; // 0x40a53a\n            if ((int32_t)*(char *)(v17 + 8) == a4) {\n                // 0x40a521\n                if (*(int64_t *)v17 == a3) {\n                    if (v16 == -1) {\n                        goto lab_0x40a580;\n                    } else {\n                        // 0x40a52c\n                        v18 = function_409b80(a1, v7, v13, a3, (int64_t)a4);\n                        v11 = a1;\n                        v10 = v18;\n                        if ((int32_t)v18 != 0) {\n                            goto lab_0x40a58e_2;\n                        } else {\n                            goto lab_0x40a543;\n                        }\n                    }\n                }\n            }\n            int64_t v19 = v15 + 1; // 0x40a500\n            while (v14 != v19) {\n                // 0x40a509\n                v15 = v19;\n                v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16));\n                v17 = 16 * v16 + v8;\n                if ((int32_t)*(char *)(v17 + 8) == a4) {\n                    // 0x40a521\n                    if (*(int64_t *)v17 == a3) {\n                        if (v16 == -1) {\n                            goto lab_0x40a580;\n                        } else {\n                            // 0x40a52c\n                            v18 = function_409b80(a1, v7, v13, a3, (int64_t)a4);\n                            v11 = a1;\n                            v10 = v18;\n                            if ((int32_t)v18 != 0) {\n                                goto lab_0x40a58e_2;\n                            } else {\n                                goto lab_0x40a543;\n                            }\n                        }\n                    }\n                }\n                // 0x40a500\n                v19 = v15 + 1;\n            }\n        }\n        goto lab_0x40a580;\n    }\n  lab_0x40a58e_2:\n    // 0x40a58e\n    free(mem);\n    return v10 & 0xffffffff;\n  lab_0x40a580:;\n    int64_t v20 = function_40a050((int64_t *)&v4, (int128_t *)v12); // 0x40a585\n    v11 = v7;\n    v10 = v20;\n    if ((int32_t)v20 != 0) {\n        // break -> 0x40a58e\n        goto lab_0x40a58e_2;\n    }\n    goto lab_0x40a543;\n  lab_0x40a543:\n    // 0x40a543\n    v9++;\n    v8 = v11;\n    if (*v2 <= v9) {\n        goto lab_0x40a54d;\n    }\n    goto lab_0x40a4d0;\n}\n"
        },
        {
            "funcName": "function_40a5c0",
            "funcStartAddr": "40a5c0",
            "funcEndAddr": "40a772",
            "decompiledFuncCode": "int64_t function_40a5c0(int128_t * a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40a5c0\n    int64_t v2 = *v1; // 0x40a5c0\n    if (v2 == 0) {\n        // 0x40a688\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a3 + 8); // 0x40a5cf\n    int64_t v4 = *v3; // 0x40a5cf\n    if (v4 == 0) {\n        // 0x40a688\n        return 0;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v4 + v2; // 0x40a5de\n    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40a5f3\n    int64_t v8 = *v7; // 0x40a5f3\n    int64_t * v9 = (int64_t *)(v5 + 16); // 0x40a5fa\n    int64_t v10 = *v9; // 0x40a5fa\n    int64_t v11 = v8; // 0x40a605\n    int64_t v12 = v10; // 0x40a605\n    int64_t v13 = v4; // 0x40a605\n    int64_t v14 = v2; // 0x40a605\n    if (v8 + v6 > v5) {\n        int64_t v15 = v6 + v5; // 0x40a73a\n        int64_t * mem = realloc((int64_t *)v10, 8 * (int32_t)v15); // 0x40a745\n        if (mem == NULL) {\n            // 0x40a688\n            return 12;\n        }\n        // 0x40a752\n        v12 = (int64_t)mem;\n        v11 = *v7;\n        v14 = *v1;\n        *v9 = v12;\n        *(int64_t *)a1 = v15;\n        v13 = *v3;\n    }\n    int64_t v16 = *(int64_t *)(a2 + 16); // 0x40a60b\n    int64_t v17 = *(int64_t *)(a3 + 16); // 0x40a60f\n    int64_t v18 = v13 - 1; // 0x40a618\n    int64_t v19 = v18; // 0x40a62c\n    int64_t v20 = v11 - 1; // 0x40a62c\n    int64_t v21 = *(int64_t *)(v17 + 8 * v18); // 0x40a62c\n    int64_t v22 = v13 + v11 + v14; // 0x40a62c\n    int64_t v23 = v14 - 1; // 0x40a62c\n    int64_t v24; // 0x40a5c0\n    int64_t v25; // 0x40a5c0\n    int64_t v26; // 0x40a5c0\n    int64_t v27; // 0x40a5c0\n    int64_t v28; // 0x40a5c0\n    int64_t v29; // 0x40a5c0\n    int64_t v30; // 0x40a5c0\n    int64_t v31; // 0x40a5c0\n    int64_t v32; // 0x40a5c0\n    int64_t v33; // 0x40a5c0\n    int64_t v34; // 0x40a5c0\n    int64_t v35; // 0x40a5c0\n    int64_t v36; // 0x40a5c0\n    int64_t v37; // 0x40a5c0\n    while (true) {\n      lab_0x40a630:;\n        int64_t v38 = v21;\n        int64_t v39 = *(int64_t *)(8 * v23 + v16);\n        v26 = v24;\n        v27 = v25;\n        v32 = v19;\n        v34 = v20;\n        v21 = v38;\n        v36 = v22;\n        v30 = v39;\n        v28 = v23;\n        v33 = v19;\n        v35 = v20;\n        v37 = v22;\n        v31 = v38;\n        v29 = v23;\n        if (v39 == v38) {\n            goto lab_0x40a646;\n        } else {\n            goto lab_0x40a635;\n        }\n    }\n  lab_0x40a6a0_4:;\n    int64_t v40 = *v7; // 0x40a6a0\n    int64_t v41 = *v1 + v40 + *v3; // 0x40a6ab\n    int64_t v42 = v40 - 1; // 0x40a6b0\n    int64_t v43; // 0x40a5c0\n    int64_t v44 = v41 - v43; // 0x40a6b8\n    *v7 = v44 + v40;\n    int64_t v45; // 0x40a5c0\n    int64_t v46; // 0x40a5c0\n    if (v42 < 0 || v44 < 1) {\n        // 0x40a720\n        v46 = 8 * v44;\n        v45 = v12;\n    } else {\n        int64_t v47 = v42; // 0x40a5c0\n        int64_t v48 = v44; // 0x40a5c0\n        int64_t v49 = v41 - 1; // 0x40a5c0\n        while (true) {\n            int64_t v50 = v47;\n            int64_t v51 = v49;\n            int64_t v52 = v48;\n            uint64_t v53 = *(int64_t *)(8 * v51 + v12); // 0x40a6d0\n            uint64_t v54 = *(int64_t *)(8 * v50 + v12); // 0x40a6d4\n            int64_t v55 = 8 * (v52 + v50) + v12; // 0x40a6dc\n            while (v53 > v54) {\n                // 0x40a6e5\n                *(int64_t *)v55 = v53;\n                int64_t v56 = v52 - 1; // 0x40a6ec\n                if (v56 == 0) {\n                    // break (via goto) -> 0x40a6f2\n                    goto lab_0x40a6f2;\n                }\n                v51--;\n                v52 = v56;\n                v53 = *(int64_t *)(8 * v51 + v12);\n                v54 = *(int64_t *)(8 * v50 + v12);\n                v55 = 8 * (v52 + v50) + v12;\n            }\n            // 0x40a700\n            *(int64_t *)v55 = v54;\n            v47 = v50 - 1;\n            v48 = v52;\n            v49 = v51;\n            if (v50 == 0) {\n                // 0x40a70d\n                v46 = 8 * v52;\n                v45 = *v9;\n                goto lab_0x40a724;\n            }\n        }\n      lab_0x40a6f2:\n        // 0x40a6f2\n        v46 = 0;\n        v45 = *v9;\n    }\n    goto lab_0x40a724;\n  lab_0x40a668:;\n    // 0x40a668\n    int64_t v58; // 0x40a5c0\n    int64_t v59 = v58 - 1; // 0x40a668\n    uint64_t v60; // 0x40a5c0\n    *(int64_t *)(8 * v59 + v12) = v60;\n    int64_t v61; // 0x40a5c0\n    int64_t v62 = v61; // 0x40a66c\n    int64_t v63 = v59; // 0x40a66c\n    goto lab_0x40a670;\n  lab_0x40a646:\n    // 0x40a646\n    v60 = v31;\n    v58 = v37;\n    int64_t v72 = v35; // 0x40a649\n    v61 = v35;\n    if (v35 >= 0) {\n        int64_t v73 = v72;\n        uint64_t v74 = *(int64_t *)(8 * v73 + v12); // 0x40a65a\n        while (v74 > v60) {\n            // 0x40a650\n            v72 = v73 - 1;\n            v61 = -1;\n            if (v73 == 0) {\n                goto lab_0x40a668;\n            }\n            v73 = v72;\n            v74 = *(int64_t *)(8 * v73 + v12);\n        }\n        // 0x40a663\n        v61 = v73;\n        v62 = v73;\n        v63 = v58;\n        if (v74 == v60) {\n            goto lab_0x40a670;\n        } else {\n            goto lab_0x40a668;\n        }\n    } else {\n        goto lab_0x40a668;\n    }\n  lab_0x40a635:;\n    int64_t v75 = v28;\n    v22 = v36;\n    v20 = v34;\n    v19 = v32;\n    int64_t v76 = v27;\n    int64_t v77 = v26;\n    int64_t v70; // 0x40a5c0\n    int64_t v69; // 0x40a5c0\n    int64_t v66; // 0x40a5c0\n    int64_t v67; // 0x40a5c0\n    int64_t v68; // 0x40a5c0\n    if (v77 < v76) {\n        int64_t v78 = v19 - 1; // 0x40a637\n        v66 = v78;\n        v67 = v20;\n        v68 = v22;\n        v69 = v30;\n        v70 = v75;\n        if (v78 < 0) {\n            // break -> 0x40a6a0\n            goto lab_0x40a6a0_4;\n        }\n        goto lab_0x40a63d;\n    } else {\n        // 0x40a690\n        v23 = v75 - 1;\n        v24 = v77;\n        v25 = v76;\n        v43 = v22;\n        if (v23 < 0) {\n            // break -> 0x40a6a0\n            goto lab_0x40a6a0_4;\n        }\n        goto lab_0x40a630;\n    }\n  lab_0x40a670:;\n    int64_t v64 = v29 - 1; // 0x40a670\n    v43 = v63;\n    if (v64 < 0) {\n        // break -> 0x40a6a0\n        goto lab_0x40a6a0_4;\n    }\n    int64_t v65 = v33 - 1; // 0x40a676\n    v43 = v63;\n    if (v65 < 0) {\n        // break -> 0x40a6a0\n        goto lab_0x40a6a0_4;\n    }\n    // 0x40a67c\n    v66 = v65;\n    v67 = v62;\n    v68 = v63;\n    v69 = *(int64_t *)(8 * v64 + v16);\n    v70 = v64;\n    goto lab_0x40a63d;\n  lab_0x40a63d:;\n    int64_t v71 = *(int64_t *)(8 * v66 + v17); // 0x40a63d\n    v26 = v69;\n    v27 = v71;\n    v32 = v66;\n    v34 = v67;\n    v21 = v71;\n    v36 = v68;\n    v30 = v69;\n    v28 = v70;\n    v33 = v66;\n    v35 = v67;\n    v37 = v68;\n    v31 = v69;\n    v29 = v70;\n    if (v69 != v71) {\n        goto lab_0x40a635;\n    } else {\n        goto lab_0x40a646;\n    }\n  lab_0x40a724:;\n    int64_t v57 = v45;\n    memcpy((int64_t *)v57, (int64_t *)(v57 + 8 * v43), (int32_t)v46);\n    // 0x40a688\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a780",
            "funcStartAddr": "40a780",
            "funcEndAddr": "40a857",
            "decompiledFuncCode": "int64_t function_40a780(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    int64_t v1 = a5;\n    int32_t v2 = a2;\n    int64_t v3; // 0x40a780\n    int64_t v4; // 0x40a780\n    int32_t v5; // 0x40a780\n    int64_t v6; // 0x40a780\n    if (v2 == 15) {\n        int64_t * mem = malloc(968); // 0x40a818\n        if (mem == NULL) {\n            // 0x40a7f9\n            return 0;\n        }\n        int64_t v7 = (int64_t)mem; // 0x40a818\n        *(int64_t *)a1 = v7;\n        *mem = 968;\n        v5 = 1;\n        v6 = 0;\n        v4 = 8;\n        v3 = v7;\n    } else {\n        int64_t v8 = 0x100000000 * a2;\n        int64_t v9 = v8 >> 26; // 0x40a799\n        v5 = v2 + 1;\n        v6 = v9;\n        v4 = v9 | 8;\n        v3 = v8 >> 32;\n    }\n    int64_t v10 = a3;\n    int64_t v11 = a4;\n    *(int32_t *)a2 = v5;\n    int64_t result = v3 + v4; // 0x40a7a6\n    int64_t v12 = v3 + v6;\n    *(int64_t *)(v12 + 8) = 0;\n    *(int64_t *)(v12 + 16) = v10;\n    *(int64_t *)(v12 + 24) = v11;\n    __asm_movups(*(int128_t *)(v12 + 48), __asm_movdqu(*(int128_t *)&v1));\n    char * v13 = (char *)(v12 + 58); // 0x40a7cb\n    *v13 = *v13 & -13;\n    *(int64_t *)(v12 + 32) = 0;\n    *(int64_t *)(v12 + 40) = 0;\n    *(int64_t *)(v12 + 64) = -1;\n    if (a3 != 0) {\n        // 0x40a7ee\n        *(int64_t *)v10 = result;\n    }\n    // 0x40a7f1\n    if (a4 != 0) {\n        // 0x40a7f6\n        *(int64_t *)v11 = result;\n    }\n    // 0x40a7f9\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a860",
            "funcStartAddr": "40a860",
            "funcEndAddr": "40a909",
            "decompiledFuncCode": "int64_t function_40a860(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 112; // 0x40a864\n    int64_t v2 = a2 + 128; // 0x40a86a\n    int64_t v3 = function_40a780(v1, v2, 0, 0, a1 + 40); // 0x40a89d\n    int64_t v4 = v3; // bp-48, 0x40a8a2\n    if (v3 == 0) {\n        // 0x40a8ed\n        return 0;\n    }\n    *(int64_t *)v3 = a1;\n    int64_t v5 = *&v4; // 0x40a8ad\n    char * v6 = (char *)(v5 + 50); // 0x40a8b0\n    *v6 = *v6 | 4;\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x40a8b4\n    int64_t v8; // 0x40a860\n    int64_t v9; // 0x40a860\n    int64_t result; // 0x40a860\n    int64_t v10; // 0x40a860\n    int64_t v11; // 0x40a860\n    int64_t v12; // 0x40a860\n    int64_t v13; // 0x40a860\n    int64_t v14; // 0x40a860\n    int64_t v15; // 0x40a8d9\n    int64_t v16; // 0x40a8dc\n    int64_t v17; // 0x40a8cb\n    int64_t v18; // 0x40a8cb\n    if (v7 != 0) {\n        // 0x40a888\n        v13 = v7;\n        v10 = v5;\n        v9 = v5 + 8;\n    } else {\n        // 0x40a8cb\n        v18 = *(int64_t *)(a1 + 16);\n        v11 = v5;\n        v12 = v5;\n        v8 = v18;\n        if (v18 != 0 != v18 != 0) {\n            v14 = a1;\n            v15 = *(int64_t *)v14;\n            if (v15 == 0) {\n                // 0x40a8e8\n                result = v4;\n                return result;\n            }\n            // 0x40a8c8\n            v16 = *(int64_t *)v11;\n            v17 = *(int64_t *)(v15 + 16);\n            v11 = v16;\n            v12 = v16;\n            v8 = v17;\n            while (v17 != 0 != v17 != v14) {\n                // 0x40a8d9\n                v14 = v15;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40a8e8\n                    result = v4;\n                    return result;\n                }\n                // 0x40a8c8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n            }\n        }\n        // 0x40a900\n        v13 = v8;\n        v10 = v12;\n        v9 = v12 + 16;\n    }\n    int64_t v19 = v13;\n    int64_t v20 = function_40a780(v1, v2, 0, 0, v19 + 40); // 0x40a89d\n    int64_t * v21 = (int64_t *)v9; // 0x40a8a2\n    *v21 = v20;\n    result = 0;\n    while (v20 != 0) {\n        int64_t v22 = v19;\n        *(int64_t *)v20 = v10;\n        v5 = *v21;\n        v6 = (char *)(v5 + 50);\n        *v6 = *v6 | 4;\n        v7 = *(int64_t *)(v22 + 8);\n        if (v7 != 0) {\n            // 0x40a888\n            v13 = v7;\n            v10 = v5;\n            v9 = v5 + 8;\n        } else {\n            // 0x40a8cb\n            v18 = *(int64_t *)(v22 + 16);\n            v11 = v5;\n            int64_t v23 = v22; // 0x40a8d2\n            v12 = v5;\n            v8 = v18;\n            if (v18 != 0 != v18 != 0) {\n                v14 = v23;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40a8e8\n                    result = v4;\n                    return result;\n                }\n                // 0x40a8c8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n                while (v17 != 0 != v17 != v14) {\n                    // 0x40a8d9\n                    v14 = v15;\n                    v15 = *(int64_t *)v14;\n                    if (v15 == 0) {\n                        // 0x40a8e8\n                        result = v4;\n                        return result;\n                    }\n                    // 0x40a8c8\n                    v16 = *(int64_t *)v11;\n                    v17 = *(int64_t *)(v15 + 16);\n                    v11 = v16;\n                    v12 = v16;\n                    v8 = v17;\n                }\n            }\n            // 0x40a900\n            v13 = v8;\n            v10 = v12;\n            v9 = v12 + 16;\n        }\n        // 0x40a88f\n        v19 = v13;\n        v20 = function_40a780(v1, v2, 0, 0, v19 + 40);\n        v21 = (int64_t *)v9;\n        *v21 = v20;\n        result = 0;\n    }\n  lab_0x40a8ed:\n    // 0x40a8ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40ab2a",
            "decompiledFuncCode": "int64_t function_40a910(int32_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = *(int64_t *)(a3 + 8); // 0x40a924\n    int64_t v1; // 0x40a910\n    int64_t v2; // 0x40a910\n    int64_t v3; // 0x40a910\n    int64_t v4; // 0x40a910\n    int64_t v5; // 0x40a910\n    int64_t v6; // bp-72, 0x40a910\n    int64_t v7; // 0x40a910\n    int64_t v8; // 0x40a95f\n    int64_t v9; // 0x40a966\n    int64_t v10; // 0x40a910\n    int64_t v11; // 0x40a989\n    int64_t v12; // 0x40a9a3\n    if ((*(char *)(a2 + 56) & 16) == 0) {\n        int64_t v13 = a2 + 128; // 0x40aab8\n        int64_t v14 = a2 + 112; // 0x40aabf\n        int64_t v15 = &v6;\n        int64_t v16 = function_40a780(v14, v13, 0, 0, v15); // 0x40aae2\n        int64_t v17 = function_40a780(v14, v13, 0, 0, v15); // 0x40aafc\n        v10 = v15;\n        v8 = v13;\n        v11 = v16;\n        v9 = v14;\n        v12 = v17;\n        v1 = v15;\n        v7 = v13;\n        v5 = v16;\n        v2 = v17;\n        v3 = v14;\n        v4 = v17;\n        if (result != 0) {\n            goto lab_0x40a9ab;\n        } else {\n            goto lab_0x40a9c9;\n        }\n    } else {\n        if (result == 0) {\n            int64_t v18 = a2 + 128; // 0x40aa60\n            int64_t v19 = a2 + 112; // 0x40aa67\n            int64_t v20 = &v6;\n            int64_t v21 = function_40a780(v19, v18, 0, 0, v20); // 0x40aa8a\n            int64_t v22 = function_40a780(v19, v18, 0, 0, v20); // 0x40aaa4\n            v1 = v20;\n            v7 = v18;\n            v5 = v21;\n            v2 = v22;\n            v3 = v19;\n            v4 = v22;\n            goto lab_0x40a9c9;\n        } else {\n            uint64_t v23 = *(int64_t *)(a3 + 40); // 0x40a940\n            if (v23 > 63 || (*(int64_t *)(a2 + 160) & 1 << v23 % 64) == 0) {\n                // 0x40aa47\n                return result;\n            }\n            // 0x40a95f\n            v8 = a2 + 128;\n            v9 = a2 + 112;\n            v10 = &v6;\n            v11 = function_40a780(v9, v8, 0, 0, v10);\n            v12 = function_40a780(v9, v8, 0, 0, v10);\n            goto lab_0x40a9ab;\n        }\n    }\n  lab_0x40a9ab:;\n    int64_t v24 = function_40a780(v9, v8, (int32_t)result, (int32_t)v12, v10); // 0x40a9c1\n    v1 = v10;\n    v7 = v8;\n    v5 = v11;\n    v2 = v24;\n    v3 = v9;\n    v4 = v12;\n    goto lab_0x40a9c9;\n  lab_0x40a9c9:;\n    int64_t v25 = function_40a780(v3, v7, (int32_t)v5, (int32_t)v2, v1); // 0x40a9e4\n    int64_t result2; // 0x40a910\n    if (v4 == 0 || v5 == 0 || v2 == 0 || v25 == 0) {\n        // 0x40ab18\n        *a1 = 12;\n        result2 = 0;\n    } else {\n        int64_t v26 = *(int64_t *)(a3 + 40); // 0x40aa15\n        *(int64_t *)(v4 + 40) = v26;\n        *(int64_t *)(v5 + 40) = v26;\n        char * v27 = (char *)(v4 + 50); // 0x40aa28\n        char v28 = *(char *)(a3 + 50) & 8;\n        *v27 = *v27 & -9 | v28;\n        char * v29 = (char *)(v5 + 50); // 0x40aa3b\n        *v29 = *v29 & -9 | v28;\n        result2 = v25;\n    }\n    // 0x40aa47\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ab30",
            "funcStartAddr": "40ab30",
            "funcEndAddr": "40abab",
            "decompiledFuncCode": "int64_t function_40ab30(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40ab3c\n    int64_t v2 = *v1; // 0x40ab3c\n    int32_t result = 0; // bp-28, 0x40ab40\n    int64_t v3; // 0x40ab30\n    if (v2 != 0) {\n        // 0x40ab4d\n        if (*(char *)(v2 + 48) == 17) {\n            int64_t v4 = function_40a910(&result, a1, v2, v3); // 0x40ab78\n            *v1 = v4;\n            if (v4 != 0) {\n                // 0x40ab86\n                *(int64_t *)v4 = a2;\n            }\n        }\n    }\n    int64_t * v5 = (int64_t *)(a2 + 16); // 0x40ab53\n    int64_t v6 = *v5; // 0x40ab53\n    if (v6 == 0 || *(char *)(v6 + 48) != 17) {\n        // 0x40ab62\n        return result;\n    }\n    int64_t v7 = function_40a910(&result, a1, v6, v3); // 0x40ab98\n    *v5 = v7;\n    if (v7 != 0) {\n        // 0x40aba6\n        *(int64_t *)v7 = a2;\n    }\n    // 0x40ab62\n    return result;\n}\n"
        },
        {
            "funcName": "function_40abb0",
            "funcStartAddr": "40abb0",
            "funcEndAddr": "40ac2f",
            "decompiledFuncCode": "int64_t function_40abb0(int64_t a1, int64_t a2) {\n    // 0x40abb0\n    int128_t v1; // 0x40abb0\n    int128_t v2 = v1;\n    int64_t v3 = a1;\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40abb0\n    *(int64_t *)(a1 + 8) = v4;\n    if (v4 < 1) {\n        int128_t v5 = __asm_pxor(v2, v2); // 0x40ac00\n        *(int64_t *)(v3 + 16) = 0;\n        __asm_movups(*(int128_t *)&v3, v5);\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)v3; // 0x40abcf\n    *v6 = v4;\n    int32_t size = 8 * (int32_t)v4; // 0x40abd5\n    int64_t * mem = malloc(size); // 0x40abd5\n    *(int64_t *)(v3 + 16) = (int64_t)mem;\n    int64_t result; // 0x40abb0\n    if (mem == NULL) {\n        // 0x40ac18\n        *(int64_t *)(v3 + 8) = 0;\n        *v6 = 0;\n        result = 12;\n    } else {\n        // 0x40abe3\n        memcpy(mem, (int64_t *)*(int64_t *)(a2 + 16), size);\n        result = 0;\n    }\n    // 0x40abf5\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ac30",
            "funcStartAddr": "40ac30",
            "funcEndAddr": "40adb2",
            "decompiledFuncCode": "int64_t function_40ac30(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40ac30\n    int128_t v1; // 0x40ac30\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    if (a2 != 0) {\n        int64_t * v4 = (int64_t *)(a2 + 8); // 0x40ac47\n        int64_t v5 = *v4; // 0x40ac47\n        if (a3 != 0 && v5 >= 1) {\n            int64_t * v6 = (int64_t *)(a3 + 8); // 0x40ac5d\n            uint64_t v7 = *v6; // 0x40ac5d\n            if (v7 < 1) {\n                // 0x40ad33\n                return function_40abb0(v3, a2);\n            }\n            int64_t v8 = v7 + v5; // 0x40ac6d\n            *a1 = v8;\n            int64_t * mem = malloc(8 * (int32_t)v8); // 0x40ac7f\n            int64_t v9 = (int64_t)mem; // 0x40ac7f\n            *(int64_t *)(v3 + 16) = v9;\n            if (mem == NULL) {\n                // 0x40ad1a\n                return 12;\n            }\n            int64_t v10 = *(int64_t *)(a2 + 16); // 0x40ac94\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v9;\n            int64_t v14 = *(int64_t *)(a3 + 16); // 0x40acd8\n            int64_t v15 = *(int64_t *)v10; // 0x40acdc\n            int64_t v16 = *(int64_t *)(v14 + 8 * v11); // 0x40ace3\n            int64_t v17; // 0x40ac30\n            int64_t v18; // 0x40ac30\n            if (v15 > v16) {\n                // 0x40acec\n                *(int64_t *)v13 = v16;\n                v17 = v11 + 1;\n                v18 = v12;\n            } else {\n                // 0x40aca8\n                *(int64_t *)v13 = v15;\n                v17 = v11 + (int64_t)(v15 == v16);\n                v18 = v12 + 1;\n            }\n            int64_t v19 = 1; // 0x40acdf\n            int64_t v20 = v18;\n            int64_t v21 = v17;\n            uint64_t v22 = *v4; // 0x40acba\n            int64_t v23; // 0x40ac30\n            while (v22 > v20) {\n                int64_t v24 = v13 + 8; // 0x40acbe\n                int64_t v25 = 8 * v20 + v10; // 0x40accb\n                if (v7 <= v21) {\n                    int64_t v26 = v22 - v20; // 0x40ad90\n                    memcpy((int64_t *)v24, (int64_t *)v25, 8 * (int32_t)v26);\n                    v23 = v26 + v19;\n                    goto lab_0x40ad59;\n                }\n                v11 = v21;\n                v12 = v20;\n                v13 = v24;\n                v14 = *(int64_t *)(a3 + 16);\n                v15 = *(int64_t *)v25;\n                v16 = *(int64_t *)(v14 + 8 * v11);\n                if (v15 > v16) {\n                    // 0x40acec\n                    *(int64_t *)v13 = v16;\n                    v17 = v11 + 1;\n                    v18 = v12;\n                } else {\n                    // 0x40aca8\n                    *(int64_t *)v13 = v15;\n                    v17 = v11 + (int64_t)(v15 == v16);\n                    v18 = v12 + 1;\n                }\n                // 0x40acba\n                v19++;\n                v20 = v18;\n                v21 = v17;\n                v22 = *v4;\n            }\n            int64_t v27 = *v6; // 0x40ad50\n            v23 = v19;\n            if (v27 > v21) {\n                int64_t v28 = v27 - v21; // 0x40ad7b\n                memcpy((int64_t *)(8 * v19 + v9), (int64_t *)(8 * v21 + v14), 8 * (int32_t)v28);\n                v23 = v28 + v19;\n            }\n          lab_0x40ad59:\n            // 0x40ad59\n            *(int64_t *)(v3 + 8) = v23;\n            return 0;\n        }\n        // 0x40acf8\n        if (v5 >= 0 == (v5 != 0)) {\n            // 0x40ad33\n            return function_40abb0(v3, a2);\n        }\n    }\n    if (a3 != 0) {\n        int64_t v29 = *(int64_t *)(a3 + 8); // 0x40ad02\n        if (v29 >= 0 == (v29 != 0)) {\n            // 0x40ad33\n            return function_40abb0(v3, a3);\n        }\n    }\n    // 0x40ad09\n    *(int64_t *)(v3 + 16) = 0;\n    *(int128_t *)a1 = (int128_t)__asm_movaps(__asm_pxor(v2, v2));\n    // 0x40ad1a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40adc0",
            "funcStartAddr": "40adc0",
            "funcEndAddr": "40b0c0",
            "decompiledFuncCode": "int64_t function_40adc0(int128_t * a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40adce\n    uint64_t v3 = *v2; // 0x40adce\n    if (v3 == 0) {\n        // 0x40b098\n        *(int32_t *)a1 = 0;\n        // 0x40ae67\n        return 0;\n    }\n    uint64_t v4 = (int64_t)a4;\n    int64_t v5 = v3 + (v4 & 0xffffffff); // 0x40adde\n    int64_t v6 = v5; // 0x40ade2\n    if (v3 >= 1) {\n        int64_t v7 = *(int64_t *)(v1 + 16); // 0x40ade4\n        int64_t v8 = v7; // 0x40adec\n        int64_t v9 = v5; // 0x40adec\n        v9 += *(int64_t *)v8;\n        v8 += 8;\n        v6 = v9;\n        while (v7 + 8 * v3 != v8) {\n            // 0x40adf0\n            v9 += *(int64_t *)v8;\n            v8 += 8;\n            v6 = v9;\n        }\n    }\n    int64_t v10 = *(int64_t *)(a2 + 136) & v6; // 0x40ae11\n    int64_t v11 = 24 * v10 + *(int64_t *)(a2 + 64); // 0x40ae1c\n    uint64_t v12 = *(int64_t *)v11; // 0x40ae20\n    if (v12 >= 1) {\n        int64_t v13 = 0; // 0x40ae32\n        int64_t v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16)); // 0x40ae41\n        int64_t result; // 0x40adc0\n        if (*(int64_t *)v14 == v6) {\n            // 0x40ae4a\n            if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                // 0x40ae57\n                result = v14;\n                if ((char)function_407f60(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                    // 0x40ae67\n                    return result;\n                }\n            }\n        }\n        // 0x40ae38\n        v13++;\n        while (v13 != v12) {\n            // 0x40ae41\n            v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16));\n            if (*(int64_t *)v14 == v6) {\n                // 0x40ae4a\n                if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                    // 0x40ae57\n                    result = v14;\n                    if ((char)function_407f60(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                        // 0x40ae67\n                        return result;\n                    }\n                }\n            }\n            // 0x40ae38\n            v13++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40ae8a\n    if (mem == NULL) {\n        // 0x40b018\n        *(int32_t *)a1 = 12;\n        // 0x40ae67\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40ae8a\n    int64_t v15 = result2 + 8; // 0x40ae9b\n    if ((int32_t)function_40abb0(v15, v1) != 0) {\n        // 0x40b0b3\n        free(mem);\n        // 0x40b018\n        *(int32_t *)a1 = 12;\n        // 0x40ae67\n        return 0;\n    }\n    char * v16 = (char *)(result2 + 104); // 0x40aeb6\n    *v16 = *v16 & -16 | (char)a4 % 16;\n    int64_t * v17 = (int64_t *)(result2 + 80); // 0x40aed6\n    *v17 = v15;\n    int64_t v18; // 0x40adc0\n    int64_t v19; // 0x40adc0\n    int64_t v20; // 0x40adc0\n    int64_t v21; // 0x40adc0\n    int64_t v22; // 0x40adc0\n    int64_t v23; // 0x40adc0\n    int64_t v24; // 0x40adc0\n    int64_t v25; // 0x40adc0\n    int64_t v26; // 0x40aee0\n    int64_t v27; // 0x40adc0\n    int64_t * v28; // 0x40adc0\n    uint64_t v29; // 0x40af1a\n    if (*v2 >= 1) {\n        // 0x40aee0\n        v26 = result2 + 24;\n        v27 = result2 + 16;\n        v28 = (int64_t *)v27;\n        v23 = v1;\n        v18 = 0;\n        v21 = 0;\n        while (true) {\n          lab_0x40af00:\n            // 0x40af00\n            v22 = v21;\n            int64_t v30 = v18;\n            int64_t v31 = 16 * *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v22) + v23; // 0x40af0c\n            int64_t v32 = v31 + 8; // 0x40af10\n            uint32_t v33 = *(int32_t *)v32; // 0x40af10\n            unsigned char v34 = *(char *)v32; // 0x40af13\n            v25 = 1;\n            v20 = v30;\n            if (v34 == 1 == (v33 & 0x3ff00) == 0) {\n                goto lab_0x40afde;\n            } else {\n                char v35 = 2 * *(char *)(v31 + 10) & 32 | *v16;\n                *v16 = v35;\n                if (v34 == 2) {\n                    // 0x40b030\n                    *v16 = v35 | 16;\n                } else {\n                    if (v34 == 4) {\n                        // 0x40af64\n                        *v16 = v35 | 64;\n                    }\n                }\n                int64_t v36 = v34; // 0x40af13\n                v25 = v36;\n                v20 = v30;\n                if ((v33 & 0x3ff00) == 0) {\n                    goto lab_0x40afde;\n                } else {\n                    int64_t v37 = v36; // 0x40af79\n                    int64_t v38 = v30; // 0x40af79\n                    if (v15 == *v17) {\n                        int64_t * mem2 = malloc(24); // 0x40b065\n                        int64_t v39 = (int64_t)mem2; // 0x40b065\n                        *v17 = v39;\n                        if (mem2 == NULL) {\n                            // 0x40b0a6\n                            function_4096e0(result2);\n                            goto lab_0x40b018;\n                        }\n                        // 0x40b074\n                        if ((int32_t)function_40abb0(v39, v1) != 0) {\n                          lab_0x40b018:\n                            // 0x40b018\n                            *(int32_t *)a1 = 12;\n                            // 0x40ae67\n                            return 0;\n                        }\n                        // 0x40b083\n                        *v16 = *v16 | -128;\n                        v37 = v1;\n                        v38 = 0;\n                    }\n                    // 0x40af7f\n                    v29 = (int64_t)(v33 / 256 & 0xff03ff);\n                    v19 = v38;\n                    v24 = v37;\n                    if (v29 % 2 == 0) {\n                        if (v4 % 2 == 0 || (v29 & 2) == 0) {\n                            goto lab_0x40af93;\n                        } else {\n                            goto lab_0x40afb0;\n                        }\n                    } else {\n                        if (v4 % 2 == 0) {\n                            goto lab_0x40afb0;\n                        } else {\n                            if ((v29 & 2) != 0) {\n                                goto lab_0x40afb0;\n                            } else {\n                                goto lab_0x40af93;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40aff4:\n    // 0x40aff4\n    if ((int32_t)function_408630(a2, result2, v6) == 0) {\n        // 0x40ae67\n        return result2;\n    }\n    // 0x40b00a\n    function_4096e0(result2);\n    // 0x40b018\n    *(int32_t *)a1 = 12;\n    // 0x40ae67\n    return 0;\n  lab_0x40afde:;\n    int64_t v40 = v22 + 1; // 0x40afde\n    v23 = v25;\n    v18 = v20;\n    v21 = v40;\n    if (v40 >= *v2) {\n        // break -> 0x40aff4\n        goto lab_0x40aff4;\n    }\n    goto lab_0x40af00;\n  lab_0x40af93:\n    if ((v4 & 2) == 0 == ((v29 & 16) != 0)) {\n        goto lab_0x40afb0;\n    } else {\n        // 0x40af9e\n        v25 = v24;\n        v20 = v19;\n        if ((v4 & 4) != 0 || (v29 & 64) == 0) {\n            goto lab_0x40afde;\n        } else {\n            goto lab_0x40afb0;\n        }\n    }\n  lab_0x40afb0:;\n    int64_t v41 = v22 - v19; // 0x40afb3\n    int64_t v42 = v24; // 0x40afb6\n    if (v41 >= 0) {\n        int64_t v43 = *v28; // 0x40afb8\n        v42 = v24;\n        if (v41 < v43) {\n            // 0x40afc2\n            *v28 = v43 - 1;\n            function_409c80(v27, v26, v41);\n            v42 = v26;\n        }\n    }\n    // 0x40afda\n    v25 = v42;\n    v20 = v19 + 1;\n    goto lab_0x40afde;\n}\n"
        },
        {
            "funcName": "function_40b0c0",
            "funcStartAddr": "40b0c0",
            "funcEndAddr": "40b2a8",
            "decompiledFuncCode": "int64_t function_40b0c0(int32_t * a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40b0ce\n    int64_t v3 = *v2; // 0x40b0ce\n    if (v3 == 0) {\n        // 0x40b294\n        *a1 = 0;\n        // 0x40b23f\n        return 0;\n    }\n    int64_t v4 = v3; // 0x40b0db\n    if (v3 >= 1) {\n        int64_t v5 = *(int64_t *)(v1 + 16); // 0x40b0dd\n        int64_t v6 = v5; // 0x40b0e5\n        int64_t v7 = v3; // 0x40b0e5\n        v7 += *(int64_t *)v6;\n        v6 += 8;\n        v4 = v7;\n        while (v5 + 8 * v3 != v6) {\n            // 0x40b0e8\n            v7 += *(int64_t *)v6;\n            v6 += 8;\n            v4 = v7;\n        }\n    }\n    int64_t v8 = *(int64_t *)(a2 + 136) & v4; // 0x40b104\n    int64_t v9 = 24 * v8 + *(int64_t *)(a2 + 64); // 0x40b10f\n    uint64_t v10 = *(int64_t *)v9; // 0x40b113\n    if (v10 >= 1) {\n        int64_t v11 = 0; // 0x40b122\n        int64_t v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16)); // 0x40b128\n        int64_t result; // 0x40b0c0\n        int64_t v13; // 0x40b138\n        if (*(int64_t *)v12 == v4) {\n            // 0x40b131\n            v13 = function_407f60(v12 + 8, v1, 3 * v8);\n            result = v12;\n            if ((char)v13 != 0) {\n                // 0x40b23f\n                return result;\n            }\n        }\n        // 0x40b145\n        v11++;\n        while (v10 != v11) {\n            // 0x40b128\n            v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16));\n            if (*(int64_t *)v12 == v4) {\n                // 0x40b131\n                v13 = function_407f60(v12 + 8, v1, 3 * v8);\n                result = v12;\n                if ((char)v13 != 0) {\n                    // 0x40b23f\n                    return result;\n                }\n            }\n            // 0x40b145\n            v11++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40b158\n    if (mem == NULL) {\n        // 0x40b288\n        *a1 = 12;\n        // 0x40b23f\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40b158\n    int64_t v14 = result2 + 8; // 0x40b169\n    if ((int32_t)function_40abb0(v14, v1) != 0) {\n        // 0x40b280\n        free(mem);\n        // 0x40b288\n        *a1 = 12;\n        // 0x40b23f\n        return 0;\n    }\n    uint64_t v15 = *v2; // 0x40b180\n    *(int64_t *)(result2 + 80) = v14;\n    char v16; // 0x40b0c0\n    int64_t v17; // 0x40b0c0\n    int64_t v18; // 0x40b0c0\n    int64_t v19; // 0x40b199\n    char * v20; // 0x40b0c0\n    if (v15 >= 1) {\n        int64_t v21 = *(int64_t *)(v1 + 16); // 0x40b191\n        v19 = v21 + 8 * v15;\n        v20 = (char *)(result2 + 104);\n        v17 = v21;\n        while (true) {\n          lab_0x40b1e4_2:\n            // 0x40b1e4\n            v18 = v17;\n            int64_t v22 = 16 * *(int64_t *)v18 + v21; // 0x40b1eb\n            int64_t v23 = v22 + 8; // 0x40b1ee\n            char v24 = *(char *)v23; // 0x40b1ee\n            if (v24 != 1) {\n                char v25 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                *v20 = v25;\n                if (v24 == 2) {\n                    // 0x40b258\n                    *v20 = v25 | 16;\n                    goto lab_0x40b1db;\n                } else {\n                    if (v24 != 4) {\n                        // 0x40b268\n                        v16 = v25;\n                        if (v24 == 12) {\n                            goto lab_0x40b220;\n                        } else {\n                            // 0x40b26d\n                            v16 = v25;\n                            if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                                goto lab_0x40b1db;\n                            } else {\n                                goto lab_0x40b220;\n                            }\n                        }\n                    } else {\n                        // 0x40b1d5\n                        *v20 = v25 | 64;\n                        goto lab_0x40b1db;\n                    }\n                }\n            } else {\n                // 0x40b1f7\n                if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                    goto lab_0x40b1db;\n                } else {\n                    char v26 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                    *v20 = v26;\n                    v16 = v26;\n                    goto lab_0x40b220;\n                }\n            }\n        }\n    }\n  lab_0x40b22d_2:\n    // 0x40b22d\n    if ((int32_t)function_408630(a2, result2, v4) == 0) {\n        // 0x40b23f\n        return result2;\n    }\n    // 0x40b29e\n    function_4096e0(result2);\n    // 0x40b288\n    *a1 = 12;\n    // 0x40b23f\n    return 0;\n  lab_0x40b1db:;\n    int64_t v27 = v18 + 8; // 0x40b1db\n    if (v19 == v27) {\n        // break -> 0x40b22d\n        goto lab_0x40b22d_2;\n    }\n    // 0x40b1e4\n    v17 = v27;\n    goto lab_0x40b1e4_2;\n  lab_0x40b220:;\n    int64_t v28 = v18 + 8; // 0x40b220\n    *v20 = v16 | -128;\n    if (v19 == v28) {\n        // break -> 0x40b22d\n        goto lab_0x40b22d_2;\n    }\n    // 0x40b1e4\n    v17 = v28;\n    goto lab_0x40b1e4_2;\n}\n"
        },
        {
            "funcName": "function_40b2b0",
            "funcStartAddr": "40b2b0",
            "funcEndAddr": "40b358",
            "decompiledFuncCode": "int64_t function_40b2b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b2b0\n    if (a4 < 1) {\n        // 0x40b348\n        return 0;\n    }\n    int64_t v1 = 0; // 0x40b2b0\n    int64_t result; // 0x40b2b0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = 8 * v2; // 0x40b329\n        int64_t * v4 = (int64_t *)(v3 + a2); // 0x40b329\n        int64_t v5 = *v4; // 0x40b329\n        int64_t v6 = *(int64_t *)(v3 + a3); // 0x40b32e\n        if (v5 != 0) {\n            if (v6 != 0) {\n                // 0x40b2dd\n                int64_t v7; // bp-72, 0x40b2b0\n                int64_t v8 = function_40ac30(&v7, v5 + 8, v6 + 8, a4); // 0x40b2ea\n                int32_t v9 = v8; // 0x40b2ef\n                int32_t v10 = v9; // bp-76, 0x40b2ef\n                result = v8;\n                if (v9 != 0) {\n                    // break -> 0x40b348\n                    break;\n                }\n                // 0x40b2f7\n                int64_t v11; // 0x40b2b0\n                *v4 = function_40b0c0(&v10, a1, &v7, a4, v11, v11);\n                free((int64_t *)v11);\n                uint32_t v12 = v10; // 0x40b318\n                if (v12 != 0) {\n                    // 0x40b348\n                    result = v12;\n                    return result;\n                }\n            }\n            int64_t v13 = v2 + 1; // 0x40b320\n            v1 = v13;\n            result = 0;\n            if (v13 == a4) {\n                // break -> 0x40b348\n                break;\n            }\n        } else {\n            // 0x40b338\n            *v4 = v6;\n            int64_t v14 = v2 + 1; // 0x40b33d\n            v1 = v14;\n            result = 0;\n            if (v14 == a4) {\n                // break -> 0x40b348\n                break;\n            }\n        }\n    }\n  lab_0x40b348_2:\n    // 0x40b348\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b360",
            "funcStartAddr": "40b360",
            "funcEndAddr": "40b6e2",
            "decompiledFuncCode": "int64_t function_40b360(int64_t a1, int128_t * a2, uint64_t a3, int64_t a4, int32_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 200); // 0x40b371\n    if (v1 <= 0) {\n        // 0x40b662\n        return 0;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(a1 + 216); // 0x40b384\n    int64_t v4 = *v3; // 0x40b384\n    int64_t v5 = v4 + 8; // 0x40b39c\n    int64_t v6 = 0;\n    uint64_t v7 = v6 + v1; // 0x40b380\n    int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x40b395\n    int64_t v9 = v8; // 0x40b3a1\n    int64_t v10 = v8; // 0x40b3a1\n    int64_t v11 = v1; // 0x40b3a1\n    int64_t v12; // 0x40b360\n    int64_t v13; // 0x40b360\n    uint64_t v14; // 0x40b3b0\n    int64_t v15; // 0x40b3be\n    if (*(int64_t *)(40 * v8 + v5) >= a3) {\n        v12 = v6;\n        if (v9 <= v6) {\n            // break (via goto) -> 0x40b3db\n            goto lab_0x40b3db;\n        }\n        // 0x40b3b0\n        v14 = v9 + v6;\n        v15 = (v14 / 0x8000000000000000 + v14) / 2;\n        v10 = v15;\n        v11 = v9;\n        while (*(int64_t *)(40 * v15 + v5) >= a3) {\n            // 0x40b3d6\n            v13 = v15;\n            v12 = v6;\n            if (v13 <= v6) {\n                // break (via goto) -> 0x40b3db\n                goto lab_0x40b3db;\n            }\n            // 0x40b3b0\n            v14 = v13 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v13;\n        }\n    }\n    int64_t v16 = v10 + 1; // 0x40b650\n    v12 = v16;\n    while (v16 < v11) {\n        // 0x40b380\n        v6 = v16;\n        v7 = v6 + v11;\n        v8 = (v7 / 0x8000000000000000 + v7) / 2;\n        v9 = v8;\n        v10 = v8;\n        if (*(int64_t *)(40 * v8 + v5) >= a3) {\n            v12 = v6;\n            if (v9 <= v6) {\n                // break (via goto) -> 0x40b3db\n                goto lab_0x40b3db;\n            }\n            // 0x40b3b0\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v9;\n            while (*(int64_t *)(40 * v15 + v5) >= a3) {\n                // 0x40b3d6\n                v13 = v15;\n                v12 = v6;\n                if (v13 <= v6) {\n                    // break (via goto) -> 0x40b3db\n                    goto lab_0x40b3db;\n                }\n                // 0x40b3b0\n                v14 = v13 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v15;\n                v11 = v13;\n            }\n        }\n        // 0x40b650\n        v16 = v10 + 1;\n        v12 = v16;\n    }\n  lab_0x40b3db:\n    // 0x40b3db\n    if (v1 <= v12) {\n        // 0x40b662\n        return 0;\n    }\n    int64_t v17 = 40 * v12; // 0x40b3ef\n    if (v12 == -1 | *(int64_t *)(v17 + 8 + v4) != a3) {\n        // 0x40b662\n        return 0;\n    }\n    int64_t v18 = v2 + 16; // 0x40b416\n    int64_t v19 = *(int64_t *)(a1 + 152); // 0x40b425\n    int64_t * v20 = (int64_t *)(a1 + 184);\n    int64_t v21; // bp-88, 0x40b360\n    int64_t v22 = &v21;\n    int64_t v23 = v4; // 0x40b42f\n    int64_t * v24; // 0x40b360\n    int64_t v25; // 0x40b360\n    int64_t v26; // 0x40b360\n    int64_t result; // 0x40b360\n    int64_t v27; // 0x40b360\n    int64_t v28; // 0x40b360\n    int64_t v29; // 0x40b360\n    int64_t v30; // 0x40b360\n    int32_t v31; // bp-92, 0x40b360\n    int64_t v32; // 0x40b538\n    int64_t v33; // 0x40b453\n    int64_t v34; // 0x40b457\n    int64_t v35; // 0x40b467\n    while (true) {\n        // 0x40b433\n        int64_t v36; // 0x40b360\n        v29 = v36;\n        v25 = v23 + v17;\n        int64_t v37; // 0x40b562\n        while (true) {\n          lab_0x40b518:\n            // 0x40b518\n            v26 = v25;\n            v30 = v29;\n            int64_t v38 = *(int64_t *)v26; // 0x40b518\n            int64_t v39 = *(int64_t *)(v2 + 8); // 0x40b51b\n            v28 = v30;\n            if (function_409b10(v39, v18, v38) == 0) {\n                goto lab_0x40b509;\n            } else {\n                // 0x40b534\n                v32 = *(int64_t *)(v26 + 24) + a3;\n                int64_t v40 = v32 - *(int64_t *)(v26 + 16); // 0x40b53e\n                if (v40 != a3) {\n                    // 0x40b448\n                    v33 = *(int64_t *)(*(int64_t *)(v19 + 24) + 8 * v38);\n                    v34 = 8 * v40;\n                    int64_t * v41 = (int64_t *)(*v20 + v34);\n                    v35 = *v41;\n                    if (v35 == 0) {\n                        // 0x40b600\n                        v21 = 1;\n                        int64_t * mem = malloc(8); // 0x40b61c\n                        if (mem == NULL) {\n                            // 0x40b6a2\n                            result = 12;\n                            return result;\n                        }\n                        // 0x40b62b\n                        v31 = 0;\n                        *mem = v33;\n                        v24 = v41;\n                        v27 = (int64_t)mem;\n                        goto lab_0x40b4ce;\n                    } else {\n                        // 0x40b478\n                        v28 = v30;\n                        if (function_409b10(*(int64_t *)(v35 + 16), v35 + 24, v33) != 0) {\n                            goto lab_0x40b509;\n                        } else {\n                            // 0x40b48d\n                            v31 = function_40abb0(v22, v35 + 8);\n                            int64_t v42 = function_408500(v22, v33); // 0x40b4a9\n                            if (v31 != 0) {\n                                goto lab_0x40b690_2;\n                            }\n                            if ((char)v42 != 1) {\n                                goto lab_0x40b690_2;\n                            }\n                            // 0x40b4c2\n                            v24 = (int64_t *)(*v20 + v34);\n                            v27 = v30;\n                            goto lab_0x40b4ce;\n                        }\n                    }\n                } else {\n                    int64_t v43 = *(int64_t *)(v19 + 40); // 0x40b54b\n                    v37 = *(int64_t *)*(int64_t *)(24 * v38 + 16 + v43);\n                    v28 = v30;\n                    if (function_409b10(v39, v18, v37) == 0) {\n                        // break -> 0x40b572\n                        break;\n                    }\n                    goto lab_0x40b509;\n                }\n            }\n        }\n        // 0x40b572\n        v21 = 1;\n        int64_t * mem2 = malloc(8); // 0x40b589\n        int32_t v44; // 0x40b360\n        if (mem2 == NULL) {\n            // 0x40b6c6\n            v21 = 0;\n            v44 = 12;\n        } else {\n            // 0x40b59c\n            *mem2 = v37;\n            v44 = 0;\n        }\n        // 0x40b5a1\n        v31 = v44;\n        int64_t v45 = function_40a480(v19, &v21, a4, a5); // 0x40b5b6\n        int64_t v46 = function_40a050((int64_t *)a2, (int128_t *)&v21); // 0x40b5c6\n        free(mem2);\n        uint32_t v47 = v31; // 0x40b5d8\n        if ((v47 || (int32_t)(v46 || v45)) != 0) {\n            // 0x40b6b6\n            result = v47;\n            if (v47 != 0) {\n                return result;\n            } else {\n                // 0x40b6ba\n                result = ((int32_t)v45 != 0 ? v45 : v46) & 0xffffffff;\n                return result;\n            }\n        }\n        // 0x40b5ea\n        v36 = (int64_t)mem2;\n        v23 = *v3;\n    }\n  lab_0x40b662:\n    // 0x40b662\n    return result;\n  lab_0x40b690_2:\n    // 0x40b690\n    free((int64_t *)v30);\n    result = v31;\n    if (v31 != 0) {\n        return result;\n    } else {\n        // 0x40b6a2\n        result = 12;\n        return result;\n    }\n  lab_0x40b509:\n    // 0x40b509\n    v29 = v28;\n    v25 = v26 + 40;\n    result = 0;\n    if (*(char *)(v26 + 32) == 0) {\n        return result;\n    }\n    goto lab_0x40b518;\n  lab_0x40b4ce:;\n    int64_t v48 = v27;\n    *v24 = function_40b0c0(&v31, v19, &v21, v33, v32, v35);\n    free((int64_t *)v48);\n    v28 = v48;\n    if (*(int64_t *)(*v20 + v34) == 0) {\n        uint32_t v49 = v31; // 0x40b678\n        v28 = v48;\n        if (v49 != 0) {\n            // 0x40b662\n            result = v49;\n            goto lab_0x40b662;\n        }\n    }\n    goto lab_0x40b509;\n}\n"
        },
        {
            "funcName": "function_40b6f0",
            "funcStartAddr": "40b6f0",
            "funcEndAddr": "40b831",
            "decompiledFuncCode": "int64_t function_40b6f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x40b702\n    if (a2 < 1) {\n      lab_0x40b7d2:\n        // 0x40b7d2\n        return 0;\n    }\n    int64_t * v2 = (int64_t *)(a1 + 232);\n    int64_t * v3 = (int64_t *)(a1 + 248);\n    int64_t * v4 = (int64_t *)(a1 + 240);\n    int64_t v5 = 0; // 0x40b720\n    int64_t v6; // 0x40b6f0\n    int64_t v7; // 0x40b730\n    int64_t v8; // 0x40b73b\n    uint64_t v9; // 0x40b745\n    while (true) {\n        // 0x40b72d\n        v6 = v5;\n        v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n        v8 = 16 * v7 + *(int64_t *)v1;\n        if (*(char *)(v8 + 8) == 8) {\n            // 0x40b745\n            v9 = *(int64_t *)v8;\n            if (v9 <= 63) {\n                // 0x40b74e\n                if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                    // break -> 0x40b75c\n                    break;\n                }\n            }\n        }\n        // 0x40b720\n        v5 = v6 + 1;\n        if (v5 >= a2) {\n            return 0;\n        }\n    }\n    int64_t v10 = *v2; // 0x40b75c\n    int64_t v11 = *v3; // 0x40b763\n    int64_t v12 = v10; // 0x40b771\n    int64_t v13 = v11; // 0x40b771\n    int64_t * mem; // 0x40b800\n    if (v10 == *v4) {\n        // 0x40b7e8\n        mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n        if (mem == NULL) {\n            // break -> 0x40b7d2\n            break;\n        }\n        // 0x40b812\n        v13 = (int64_t)mem;\n        *v3 = v13;\n        v12 = *v2;\n        *v4 = 2 * v10;\n    }\n    int64_t * mem2 = calloc(1, 48); // 0x40b78c\n    int64_t v14 = (int64_t)mem2; // 0x40b78c\n    *(int64_t *)(v13 + 8 * v12) = v14;\n    int64_t result = 12; // 0x40b7a2\n    while (mem2 != NULL) {\n        // 0x40b7a4\n        *mem2 = a4;\n        int64_t v15 = v6 + 1; // 0x40b7b0\n        *(int64_t *)(v14 + 8) = v7;\n        *v2 = v12 + 1;\n        result = 0;\n        if (v15 >= 48) {\n            // break -> 0x40b7d2\n            break;\n        }\n        v5 = v15;\n        while (true) {\n            // 0x40b72d\n            v6 = v5;\n            v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n            v8 = 16 * v7 + *(int64_t *)v1;\n            if (*(char *)(v8 + 8) == 8) {\n                // 0x40b745\n                v9 = *(int64_t *)v8;\n                if (v9 <= 63) {\n                    // 0x40b74e\n                    if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                        // break -> 0x40b75c\n                        break;\n                    }\n                }\n            }\n            // 0x40b720\n            v5 = v6 + 1;\n            if (v5 >= 48) {\n                return 0;\n            }\n        }\n        // 0x40b75c\n        v10 = *v2;\n        v11 = *v3;\n        v12 = v10;\n        v13 = v11;\n        if (v10 == *v4) {\n            // 0x40b7e8\n            mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n            result = 12;\n            if (mem == NULL) {\n                // break -> 0x40b7d2\n                break;\n            }\n            // 0x40b812\n            v13 = (int64_t)mem;\n            *v3 = v13;\n            v12 = *v2;\n            *v4 = 2 * v10;\n        }\n        // 0x40b773\n        mem2 = calloc(1, 48);\n        v14 = (int64_t)mem2;\n        *(int64_t *)(v13 + 8 * v12) = v14;\n        result = 12;\n    }\n    // 0x40b7d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b840",
            "funcStartAddr": "40b840",
            "funcEndAddr": "40b92e",
            "decompiledFuncCode": "int64_t function_40b840(int64_t a1, int64_t a2, int32_t a3) {\n    if (a2 < 0) {\n        // 0x40b8f0\n        return (int64_t)*(int32_t *)(a1 + 112);\n    }\n    // 0x40b852\n    if (*(int64_t *)(a1 + 88) == a2) {\n        // 0x40b896\n        return a3 & 2 ^ 10;\n    }\n    // 0x40b85c\n    if (*(int32_t *)(a1 + 144) < 2) {\n        unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a2); // 0x40b8ab\n        int64_t v2 = *(int64_t *)(*(int64_t *)(a1 + 128) + (int64_t)(8 * v1 / 64)); // 0x40b8b6\n        if ((1 << (int64_t)(v1 % 64) & v2) != 0) {\n            // 0x40b896\n            return 1;\n        }\n        // 0x40b8ca\n        if (v1 != 10) {\n            // 0x40b896\n            return 0;\n        }\n        // 0x40b8d1\n        return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n    }\n    int64_t v3 = a2;\n    int32_t wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16)); // 0x40b87a\n    while (wc == -1) {\n        // 0x40b870\n        if (v3 == 0) {\n            // 0x40b8f0\n            return (int64_t)*(int32_t *)(a1 + 112);\n        }\n        v3--;\n        wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16));\n    }\n    // 0x40b882\n    if (*(char *)(a1 + 142) != 0) {\n        // 0x40b910\n        if (wc != 95 != (iswalnum(wc) == 0)) {\n            // 0x40b896\n            return 1;\n        }\n    }\n    // 0x40b88f\n    if (wc != 10) {\n        // 0x40b896\n        return 0;\n    }\n    // 0x40b8d1\n    return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n}\n"
        },
        {
            "funcName": "function_40b930",
            "funcStartAddr": "40b930",
            "funcEndAddr": "40ba5b",
            "decompiledFuncCode": "int64_t function_40b930(int64_t a1, int64_t a2, int64_t a3) {\n    unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a3); // 0x40b934\n    int64_t v2 = a2 + 8;\n    unsigned char v3 = *(char *)v2; // 0x40b938\n    if (v3 == 3) {\n        uint64_t v4 = (int64_t)v1; // 0x40b934\n        if ((*(int64_t *)((v4 / 8 & 24) + a2) & 1 << v4 % 64) == 0) {\n            // 0x40b9df\n            return 0;\n        }\n    } else {\n        if (v3 < 4) {\n            // 0x40b9e8\n            if (v1 == (char)a2 != (v3 == 1)) {\n                // 0x40b9df\n                return 0;\n            }\n        } else {\n            if (v3 != 5) {\n                // 0x40b94e\n                if (v1 < 0 || v3 != 7) {\n                    // 0x40b9df\n                    return 0;\n                }\n            }\n            if (v1 == 10) {\n                // 0x40ba40\n                if ((*(char *)(*(int64_t *)(a1 + 152) + 216) & 64) == 0) {\n                    // 0x40b9df\n                    return 0;\n                }\n            } else {\n                if (v1 == 0) {\n                    // 0x40b970\n                    if (*(char *)(*(int64_t *)(a1 + 152) + 216) <= -1) {\n                        // 0x40b9df\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uint32_t v5 = *(int32_t *)v2; // 0x40b983\n    if ((v5 & 0x3ff00) == 0) {\n        // 0x40b9df\n        return 1;\n    }\n    int64_t v6 = v5; // 0x40b983\n    uint64_t v7 = function_40b840(a1, a3, *(int32_t *)(a1 + 160)); // 0x40b99f\n    if ((v6 & 1024) != 0) {\n        // 0x40ba30\n        if ((v6 & 2048) == 0 != v7 % 2 != 0) {\n            // 0x40b9df\n            return 0;\n        }\n    } else {\n        if ((v6 & 2048) != 0) {\n            // 0x40b9b7\n            if (v7 % 2 != 0) {\n                // 0x40b9df\n                return 0;\n            }\n        }\n    }\n    int64_t result = 0; // 0x40b9c2\n    if ((v6 & 0x2000) != 0 != ((v7 & 2) == 0)) {\n        // 0x40b9cb\n        result = (char)(v5 / 256) <= -1 ? v7 / 8 % 2 : 1;\n    }\n    // 0x40b9df\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba60",
            "funcStartAddr": "40ba60",
            "funcEndAddr": "40bb28",
            "decompiledFuncCode": "int64_t function_40ba60(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_40b840(v1, a4, *(int32_t *)(v1 + 160)); // 0x40ba76\n    if (a2 < 1) {\n        // 0x40bafc\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 152); // 0x40ba84\n    int64_t v4 = 0; // 0x40baa6\n    int64_t result; // 0x40ba60\n    uint32_t v5; // 0x40babe\n    uint32_t v6; // 0x40bac1\n    int64_t v7; // 0x40bab0\n    while (true) {\n      lab_0x40bab0:\n        // 0x40bab0\n        v7 = *(int64_t *)(8 * v4 + v3);\n        int64_t v8 = *(int64_t *)v3 + 8 + 16 * v7; // 0x40babe\n        if (*(char *)v8 != 2) {\n            goto lab_0x40bb18;\n        } else {\n            // 0x40bad1\n            v5 = *(int32_t *)v8;\n            result = v7;\n            if ((v5 & 0x3ff00) == 0) {\n                // break -> 0x40bafc\n                break;\n            }\n            // 0x40bad6\n            v6 = v5 / 256;\n            int64_t v9 = v6; // 0x40bac1\n            if ((v9 & 4) == 0) {\n                if (v2 % 2 == 0 || (v9 & 8) == 0) {\n                    goto lab_0x40bae5;\n                } else {\n                    goto lab_0x40bb18;\n                }\n            } else {\n                if (v2 % 2 == 0) {\n                    goto lab_0x40bb18;\n                } else {\n                    if ((v9 & 8) != 0) {\n                        goto lab_0x40bb18;\n                    } else {\n                        goto lab_0x40bae5;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40bafc_2:\n    // 0x40bafc\n    return result;\n  lab_0x40bb18:\n    // 0x40bb18\n    v4++;\n    result = 0;\n    if (v4 == a2) {\n        return result;\n    }\n    goto lab_0x40bab0;\n  lab_0x40bae5:\n    if ((v2 & 2) == 0 != (v5 & 0x2000) != 0) {\n        // 0x40baf0\n        result = v7;\n        if ((v2 & 8) == 0 != (char)v6 < 0) {\n            // break -> 0x40bafc\n            goto lab_0x40bafc_2;\n        }\n    }\n    goto lab_0x40bb18;\n}\n"
        },
        {
            "funcName": "function_40bb30",
            "funcStartAddr": "40bb30",
            "funcEndAddr": "40c317",
            "decompiledFuncCode": "int64_t function_40bb30(int64_t * a1, int64_t a2, int32_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40bb4a\n    int64_t v3 = *v2; // 0x40bb4a\n    int64_t v4 = a2 - v3; // 0x40bb54\n    int64_t * v5; // 0x40bb30\n    char * v6; // 0x40bb30\n    int64_t * v7; // 0x40bb30\n    int32_t * v8; // 0x40bb30\n    int64_t * v9; // 0x40bb30\n    int64_t * v10; // 0x40bb30\n    int64_t v11; // 0x40bb30\n    if (v3 > a2) {\n        int32_t * v12 = (int32_t *)(v1 + 144);\n        if (*v12 >= 2) {\n            // 0x40bb5f\n            *(int64_t *)(v1 + 32) = 0;\n        }\n        int64_t * v13 = (int64_t *)(v1 + 48);\n        *v13 = 0;\n        *v2 = 0;\n        int64_t * v14 = (int64_t *)(v1 + 88);\n        *v14 = *(int64_t *)(v1 + 80);\n        int64_t * v15 = (int64_t *)(v1 + 56);\n        *v15 = 0;\n        int64_t * v16 = (int64_t *)(v1 + 104);\n        *v16 = *(int64_t *)(v1 + 96);\n        char * v17 = (char *)(v1 + 140);\n        *v17 = 0;\n        *(int32_t *)(v1 + 112) = 2 * a3 & 2 ^ 6;\n        v4 = a2;\n        if (*(char *)(v1 + 139) == 0) {\n            // 0x40bc80\n            *(int64_t *)(v1 + 8) = v1;\n            v7 = v13;\n            v6 = v17;\n            v5 = v15;\n            v11 = a2;\n            v10 = v16;\n            v9 = v14;\n            v8 = v12;\n            if (a2 != 0) {\n                goto lab_0x40bbc3;\n            } else {\n                goto lab_0x40bc90;\n            }\n        } else {\n            goto lab_0x40bbba;\n        }\n    } else {\n        goto lab_0x40bbba;\n    }\n  lab_0x40c1b8:\n    // 0x40c1b8\n    *v7 = 0;\n    int64_t v18; // 0x40bfb7\n    int64_t v19 = v18; // 0x40c1c2\n    int64_t v20; // 0x40bfba\n    int64_t v21 = v20; // 0x40c1c2\n    int64_t v22 = 0; // 0x40c1c2\n    int64_t v23 = v1; // 0x40c1c2\n    goto lab_0x40c05f;\n  lab_0x40bdb1:;\n    // 0x40bdb1\n    int64_t v41; // 0x40bb30\n    int64_t v38; // 0x40bb30\n    int64_t v42 = v41 + v38; // 0x40bdb1\n    int64_t v43; // 0x40bb30\n    int64_t v44; // 0x40bb30\n    int64_t v39; // 0x40bb30\n    int64_t v45; // 0x40bb30\n    int64_t v46; // 0x40bb30\n    int32_t v47; // bp-64, 0x40bb30\n    if (v42 < a2) {\n        int64_t * v48 = (int64_t *)(v1 + 32); // 0x40bde4\n        int64_t v49 = &v47;\n        int64_t v50 = *(int64_t *)(v1 + 80) - v42; // 0x40bded\n        int64_t v51 = function_407dd0(&v47, v42 + v39, v50); // 0x40be00\n        int64_t v52 = v51; // 0x40be16\n        int64_t v53 = v47; // 0x40be16\n        int64_t v54; // 0x40bb30\n        if (v51 >= 0xfffffffffffffffe) {\n            // 0x40c245\n            v54 = 0;\n            if (v50 != 0 && v51 != 0) {\n                // 0x40c24f\n                v54 = (int64_t)*(char *)(v42 + v49);\n            }\n            // 0x40c257\n            v52 = 1;\n            v53 = v54;\n        }\n        int64_t v55 = v52 + v42; // 0x40be1c\n        int64_t v56 = v49; // 0x40be22\n        while (v55 < a2) {\n            int64_t v57 = v55;\n            v50 = *(int64_t *)(v1 + 80) - v57;\n            v51 = function_407dd0(&v47, v57 + v56, v50);\n            v52 = v51;\n            v53 = v47;\n            if (v51 >= 0xfffffffffffffffe) {\n                // 0x40c245\n                v54 = 0;\n                if (v50 != 0 && v51 != 0) {\n                    // 0x40c24f\n                    v54 = (int64_t)*(char *)(v57 + v49);\n                }\n                // 0x40c257\n                v52 = 1;\n                v53 = v54;\n            }\n            // 0x40be1c\n            v55 = v52 + v57;\n            v56 = v49;\n        }\n        int64_t v58 = v55 - a2; // 0x40be24\n        *v7 = v58;\n        v46 = v53;\n        v45 = v49;\n        v43 = v58;\n        v44 = v58;\n        if ((int32_t)v53 == -1) {\n            goto lab_0x40c1d1;\n        } else {\n            goto lab_0x40be37;\n        }\n    } else {\n        int64_t v59 = v42 - a2; // 0x40c1c7\n        *v7 = v59;\n        v44 = v59;\n        goto lab_0x40c1d1;\n    }\n  lab_0x40bbba:\n    // 0x40bbba\n    if (v4 == 0) {\n        // 0x40bbba\n        v10 = (int64_t *)(v1 + 104);\n        v9 = (int64_t *)(v1 + 88);\n        v8 = (int32_t *)(v1 + 144);\n        goto lab_0x40bc90;\n    } else {\n        // 0x40bbba\n        v7 = (int64_t *)(v1 + 48);\n        v6 = (char *)(v1 + 140);\n        v5 = (int64_t *)(v1 + 56);\n        v11 = v4;\n        goto lab_0x40bbc3;\n    }\n  lab_0x40bbc3:;\n    int64_t v60 = v11;\n    int64_t * v24 = v5;\n    int64_t v61 = *v24; // 0x40bbc3\n    char v62 = *v6; // 0x40bbc7\n    int64_t v63 = *v7; // 0x40bbce\n    char * v64; // 0x40bb30\n    int64_t v30; // 0x40bb30\n    int64_t v65; // 0x40bb30\n    int64_t v31; // 0x40bb30\n    int64_t v66; // 0x40bb30\n    int64_t v33; // 0x40bb30\n    int64_t v67; // 0x40bb30\n    char v68; // 0x40bb30\n    int32_t v32; // 0x40bb30\n    int64_t v40; // 0x40c0d9\n    int64_t * v69; // 0x40be78\n    int64_t v70; // 0x40be78\n    int64_t v71; // 0x40bea5\n    uint64_t v72; // 0x40bea8\n    if (v61 > v60) {\n        if (v62 != 0) {\n            // 0x40be78\n            v69 = (int64_t *)(v1 + 24);\n            v70 = *v69;\n            int64_t v73 = 0; // 0x40be81\n            uint64_t v74 = v73 + v63; // 0x40be97\n            v71 = (v74 / 0x8000000000000000 + v74) / 2;\n            v72 = *(int64_t *)(8 * v71 + v70);\n            int64_t v75 = v71; // 0x40beb3\n            int64_t v76 = v73; // 0x40beb3\n            if (v72 <= v60) {\n                if (v72 >= v60) {\n                    // 0x40c1a0\n                    goto lab_0x40bef5;\n                }\n                // 0x40be8e\n                v75 = v63;\n                v76 = v71 + 1;\n            }\n            // 0x40be92\n            v73 = v76;\n            int64_t v77 = v75;\n            while (v73 < v77) {\n                int64_t v78 = v77;\n                v74 = v73 + v78;\n                v71 = (v74 / 0x8000000000000000 + v74) / 2;\n                v72 = *(int64_t *)(8 * v71 + v70);\n                v75 = v71;\n                v76 = v73;\n                if (v72 <= v60) {\n                    if (v72 >= v60) {\n                        // 0x40c1a0\n                        goto lab_0x40bef5;\n                    }\n                    // 0x40be8e\n                    v75 = v78;\n                    v76 = v71 + 1;\n                }\n                // 0x40be92\n                v73 = v76;\n                v77 = v75;\n            }\n            // 0x40bee8\n            goto lab_0x40bef5;\n        } else {\n            // 0x40bbe3\n            *(int32_t *)(v1 + 112) = (int32_t)function_40b840(v1, v60 - 1, a3);\n            if (*(int32_t *)(v1 + 144) > 1) {\n                int64_t v79 = *(int64_t *)(v1 + 16); // 0x40bca0\n                int64_t v80; // 0x40bbed\n                memmove((int64_t *)v79, (int64_t *)(v79 + 4 * v60), 4 * (int32_t)v80);\n            }\n            int64_t v81 = v63 - v60;\n            char * v82 = (char *)(v1 + 139); // 0x40bc05\n            char v83 = *v82; // 0x40bc05\n            char v84 = v83; // 0x40bc0e\n            int64_t v85 = v1; // 0x40bc0e\n            int64_t v86 = v81; // 0x40bc0e\n            if (v83 != 0) {\n                // 0x40bec0\n                v85 = *(int64_t *)(v1 + 8);\n                memmove((int64_t *)v85, (int64_t *)(v85 + v60), (int32_t)v81);\n                v84 = *v82;\n                v86 = *v7 - v60;\n            }\n            // 0x40bc14\n            *v24 = *v24 - v60;\n            *v7 = v86;\n            v68 = v84;\n            v66 = v85;\n            goto lab_0x40bc1c;\n        }\n    } else {\n        if (v62 != 0) {\n            // 0x40c21d\n            *v6 = 0;\n            int64_t v87 = v60 - a2;\n            *(int64_t *)(v1 + 88) = *(int64_t *)(v1 + 80) + v87;\n            *(int64_t *)(v1 + 104) = *(int64_t *)(v1 + 96) + v87;\n        }\n        int32_t v88 = *(int32_t *)(v1 + 144); // 0x40bd88\n        int64_t v89 = *v2; // 0x40bd8f\n        *v7 = 0;\n        if (v88 < 2) {\n            int64_t v90 = (int64_t)*(char *)(v60 - 1 + v1 + v89); // 0x40bcde\n            int64_t v91 = *(int64_t *)(v1 + 120); // 0x40bce4\n            *v24 = 0;\n            int64_t v92 = v90; // 0x40bcf3\n            if (v91 != 0) {\n                // 0x40bcf5\n                v92 = (int64_t)*(char *)(v91 + v90);\n            }\n            int64_t v93 = *(int64_t *)((v92 / 8 & 24) + *(int64_t *)(v1 + 128)); // 0x40bd07\n            int32_t v94 = 1; // 0x40bd15\n            if ((v93 & 1 << v92 % 64) == 0) {\n                // 0x40bd17\n                v94 = 0;\n                if (v92 == 10) {\n                    // 0x40bd1e\n                    v94 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n                }\n            }\n            int64_t * v95 = (int64_t *)(v1 + 88); // 0x40bd30\n            int64_t * v96 = (int64_t *)(v1 + 104); // 0x40bd34\n            *(int32_t *)(v1 + 112) = v94;\n            int64_t v97 = *v95 - v60; // 0x40bd3b\n            int64_t v98 = *v96 - v60; // 0x40bd3e\n            char * v99 = (char *)(v1 + 139);\n            v30 = v97;\n            v31 = v98;\n            v32 = v88;\n            v33 = v1;\n            if (*v99 == 0) {\n                goto lab_0x40bc34;\n            } else {\n                // 0x40bd4e\n                *v2 = a2;\n                *v95 = v97;\n                *v96 = v98;\n                v64 = v99;\n                v65 = v97;\n                v67 = v1;\n                goto lab_0x40bd60;\n            }\n        } else {\n            // 0x40bda4\n            v38 = v61;\n            v39 = v1;\n            v41 = v89;\n            if (*(char *)(v1 + 137) != 0) {\n                int64_t v100 = v89 + v1; // 0x40c081\n                uint64_t v101 = v60 - (int64_t)v88 + v100; // 0x40c085\n                int64_t v102 = v60 - 1 + v100; // 0x40c088\n                uint64_t v103 = v101 > v1 ? v101 : v1; // 0x40c090\n                v38 = v61;\n                v39 = v1;\n                v41 = v89;\n                if (v103 > v102) {\n                    goto lab_0x40bdb1;\n                } else {\n                    int64_t v104 = v102;\n                    while ((*(char *)v104 & -64) == -128) {\n                        int64_t v105 = v104 - 1; // 0x40c0a0\n                        v38 = v61;\n                        v39 = v1;\n                        v41 = v89;\n                        if (v103 > v105) {\n                            goto lab_0x40bdb1;\n                        }\n                        v104 = v105;\n                    }\n                    int64_t v106 = *(int64_t *)(v1 + 120); // 0x40c0be\n                    int64_t v107 = *(int64_t *)(v1 + 88) + v100 - v104; // 0x40c0c8\n                    int64_t v108 = v104; // 0x40c0ce\n                    if (v106 != 0) {\n                        int64_t v109 = v107 - 6; // 0x40c2e2\n                        int32_t v110 = v109 == 0 | v109 < 0 != (5 - v107 & v107) < 0 ? (int32_t)v107 - 1 : 5; // 0x40c2ef\n                        if (v110 >= 0) {\n                            int64_t v111 = v110; // 0x40c305\n                            char v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104)); // 0x40c2fc\n                            int64_t v113; // bp-120, 0x40bb30\n                            *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                            v111--;\n                            while ((int32_t)v111 >= 0) {\n                                // 0x40c2f7\n                                v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104));\n                                *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                                v111--;\n                            }\n                        }\n                        // 0x40c30d\n                        int64_t v114; // bp-70, 0x40bb30\n                        v108 = &v114;\n                    }\n                    // 0x40c0d4\n                    int32_t v115; // bp-76, 0x40bb30\n                    v40 = &v115;\n                    v47 = 0;\n                    uint64_t v116 = function_407dd0(&v115, v108, v107); // 0x40c0ef\n                    uint64_t v117 = v100 + v60 - v104; // 0x40c0fe\n                    if (v116 >= v117 == v116 < 0xfffffffffffffffe) {\n                        int64_t v118 = v116 - v117; // 0x40c1e8\n                        *(int64_t *)(v1 + 32) = 0;\n                        *v7 = v118;\n                        v46 = v115;\n                        v45 = v40;\n                        v43 = v118;\n                        if (v115 != -1) {\n                            goto lab_0x40be37;\n                        } else {\n                            goto lab_0x40c110;\n                        }\n                    } else {\n                        goto lab_0x40c110;\n                    }\n                }\n            } else {\n                goto lab_0x40bdb1;\n            }\n        }\n    }\n  lab_0x40bc90:;\n    int64_t v34 = *v9; // 0x40bc9e\n    int64_t v35 = *v10; // 0x40bc9e\n    int32_t v36 = *v8; // 0x40bc9e\n    int64_t v37 = v1; // 0x40bc9e\n    goto lab_0x40bc38;\n  lab_0x40bc38:\n    // 0x40bc38\n    *v2 = a2;\n    *(int64_t *)(v1 + 88) = v34;\n    *(int64_t *)(v1 + 104) = v35;\n    if (v36 >= 2) {\n        // 0x40bc4d\n        if (*(char *)(v1 + 136) != 0) {\n            int64_t result = function_408990(v1); // 0x40bcc8\n            if ((int32_t)result != 0) {\n                // 0x40bc68\n                return result;\n            }\n        } else {\n            // 0x40bc59\n            function_4087e0(v1);\n        }\n        // 0x40bc5e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40bc68\n        return 0;\n    }\n    // 0x40bc38\n    v64 = (char *)(v1 + 139);\n    v65 = v34;\n    v67 = v37;\n    goto lab_0x40bd60;\n  lab_0x40bd60:;\n    int64_t v119 = v65;\n    if (*v64 == 0) {\n        // 0x40bd6d\n        *(int64_t *)(v1 + 48) = v119;\n        // 0x40bc5e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40bc68\n        return 0;\n    }\n    // 0x40c130\n    if (*(char *)(v1 + 136) != 0) {\n        // 0x40c210\n        function_408760(v1);\n        // 0x40bc5e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40bc68\n        return 0;\n    }\n    int64_t * v120 = (int64_t *)(v1 + 120); // 0x40c13d\n    int64_t v121 = *v120; // 0x40c13d\n    if (v121 == 0) {\n        // 0x40bc5e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40bc68\n        return 0;\n    }\n    int64_t v122 = *(int64_t *)(v1 + 64); // 0x40c14a\n    int64_t v123 = v122 - v119; // 0x40c14a\n    int64_t * v124 = (int64_t *)(v1 + 48); // 0x40c14e\n    int64_t v125 = *v124; // 0x40c14e\n    int64_t v126 = v123 == 0 | v123 < 0 != ((v123 ^ v122) & (v122 ^ v119)) < 0 ? v122 : v119; // 0x40c152\n    int64_t v127 = v125; // 0x40c15a\n    if (v126 > v125) {\n        unsigned char v128 = *(char *)(v67 + a2 + v125); // 0x40c176\n        int64_t * v129 = (int64_t *)(v1 + 8); // 0x40c17f\n        *(char *)(*v129 + v125) = *(char *)(v121 + (int64_t)v128);\n        int64_t v130 = v125 + 1; // 0x40c187\n        v127 = v126;\n        if (v126 != v130) {\n            unsigned char v131 = *(char *)(v130 + v67 + *v2); // 0x40c176\n            *(char *)(*v129 + v130) = *(char *)(*v120 + (int64_t)v131);\n            int64_t v132 = v130 + 1; // 0x40c187\n            int64_t v133 = v132; // 0x40c18e\n            v127 = v126;\n            while (v126 != v132) {\n                // 0x40c168\n                v131 = *(char *)(v133 + v67 + *v2);\n                *(char *)(*v129 + v133) = *(char *)(*v120 + (int64_t)v131);\n                v132 = v133 + 1;\n                v133 = v132;\n                v127 = v126;\n            }\n        }\n    }\n    // 0x40c190\n    *v124 = v127;\n    *(int64_t *)(v1 + 56) = v127;\n    // 0x40bc5e\n    *(int64_t *)(v1 + 72) = 0;\n    // 0x40bc68\n    return 0;\n  lab_0x40bef5:;\n    int64_t v134 = v71 + (int64_t)(v72 < v60);\n    int64_t v135 = v71 + (int64_t)(v72 >= v60);\n    *(int32_t *)(v1 + 112) = (int32_t)function_40b840(v1, v135, a3);\n    int64_t v25; // 0x40bb30\n    int64_t v26; // 0x40bb30\n    int64_t v28; // 0x40bb30\n    char v27; // 0x40bb30\n    if (v63 > v60 == v60 == v134) {\n        int64_t v136 = 8 * v60;\n        if (*(int64_t *)(v70 + v136) != v60) {\n            goto lab_0x40bfa8;\n        } else {\n            int64_t v137 = *(int64_t *)(v1 + 16); // 0x40bf20\n            memmove((int64_t *)v137, (int64_t *)(v137 + 4 * v60), 4 * (int32_t)(v63 - v60));\n            int64_t v138 = *(int64_t *)(v1 + 8); // 0x40bf3b\n            int64_t v139 = *v7; // 0x40bf3f\n            memmove((int64_t *)v138, (int64_t *)(v138 + v60), (int32_t)(v139 - v60));\n            *v24 = *v24 - v60;\n            uint64_t v140 = *v7 - v60; // 0x40bf57\n            *v7 = v140;\n            if (v140 >= 1) {\n                for (int64_t i = 0; i < *v7; i++) {\n                    int64_t v141 = 8 * i + *v69;\n                    *(int64_t *)v141 = *(int64_t *)(v141 + v136) - v60;\n                }\n            }\n            // 0x40bf85\n            v25 = *(int64_t *)(v1 + 88) - v60;\n            v26 = *(int64_t *)(v1 + 104) - v60;\n            v27 = *(char *)(v1 + 139);\n            v28 = v138;\n            goto lab_0x40bc30;\n        }\n    } else {\n        goto lab_0x40bfa8;\n    }\n  lab_0x40bc1c:\n    // 0x40bc1c\n    v25 = *(int64_t *)(v1 + 88) - v60;\n    v26 = *(int64_t *)(v1 + 104) - v60;\n    v27 = v68;\n    v28 = v66;\n    goto lab_0x40bc30;\n  lab_0x40bc34:;\n    int64_t * v142 = (int64_t *)(v1 + 8); // 0x40bc34\n    *v142 = *v142 + v60;\n    v34 = v30;\n    v35 = v31;\n    v36 = v32;\n    v37 = v33;\n    goto lab_0x40bc38;\n  lab_0x40bfa8:\n    // 0x40bfa8\n    *v6 = 0;\n    v18 = *(int64_t *)(v1 + 80) - a2;\n    v20 = *(int64_t *)(v1 + 96) - a2;\n    int64_t * v143 = (int64_t *)(v1 + 88); // 0x40bfc1\n    *v143 = v18 + v60;\n    int64_t * v144 = (int64_t *)(v1 + 104); // 0x40bfc9\n    *v144 = v20 + v60;\n    int64_t v145 = v134; // 0x40bfd0\n    if (v134 >= 0 == (v134 != 0)) {\n        int64_t v146 = v134; // 0x40bfd8\n        v145 = v146;\n        while (*(int64_t *)(v70 - 8 + 8 * v146) == v60) {\n            // 0x40bfd8\n            v146--;\n            if (v146 == 0) {\n                // break -> 0x40bfe5\n                break;\n            }\n            v145 = v146;\n        }\n    }\n    // 0x40bfe5\n    int64_t v147; // 0x40bb30\n    if (v145 < v63) {\n        int64_t v148 = v145; // 0x40bff2\n        v147 = v148;\n        while (*(int32_t *)(4 * v148 + *(int64_t *)(v1 + 16)) == -1) {\n            // 0x40bff8\n            v148++;\n            if (v148 == v63) {\n                goto lab_0x40c1b8;\n            }\n            v147 = v148;\n        }\n        goto lab_0x40c00c;\n    } else {\n        // 0x40c1ac\n        v147 = v145;\n        if (v145 != v63) {\n            goto lab_0x40c00c;\n        } else {\n            goto lab_0x40c1b8;\n        }\n    }\n  lab_0x40bc30:;\n    int32_t v29 = *(int32_t *)(v1 + 144);\n    v30 = v25;\n    v31 = v26;\n    v32 = v29;\n    v33 = v28;\n    v34 = v25;\n    v35 = v26;\n    v36 = v29;\n    v37 = v28;\n    if (v27 != 0) {\n        goto lab_0x40bc38;\n    } else {\n        goto lab_0x40bc34;\n    }\n  lab_0x40c110:\n    // 0x40c110\n    v38 = *v24;\n    v39 = v40;\n    v41 = *v2;\n    goto lab_0x40bdb1;\n  lab_0x40c1d1:\n    // 0x40c1d1\n    *(int32_t *)(v1 + 112) = (int32_t)function_40b840(v1, v63 - 1, a3);\n    int64_t v149 = v1; // 0x40c1e3\n    int64_t v150 = v44; // 0x40c1e3\n    goto lab_0x40be5c;\n  lab_0x40be37:;\n    int64_t v164 = v46; // 0x40be3e\n    int64_t v163 = v45; // 0x40be3e\n    int32_t v161; // 0x40bb30\n    int64_t v162; // 0x40bb30\n    if (*(char *)(v1 + 142) != 0) {\n        int64_t v165 = v46 & 0xffffffff; // 0x40c2b4\n        int32_t wc = v46; // 0x40c2b6\n        v164 = v165;\n        v163 = v165;\n        v161 = 1;\n        v162 = v165;\n        if (wc != 95 == iswalnum(wc) == 0) {\n            goto lab_0x40be44;\n        } else {\n            goto lab_0x40be59;\n        }\n    } else {\n        goto lab_0x40be44;\n    }\n  lab_0x40c00c:;\n    uint64_t v166 = *(int64_t *)(8 * v147 + v70) - v60; // 0x40c011\n    *v7 = v166;\n    v19 = v18;\n    v21 = v20;\n    v22 = 0;\n    v23 = v1;\n    if (v166 != 0) {\n        if (v166 >= 1) {\n            int64_t v167 = *(int64_t *)(v1 + 16); // 0x40c01f\n            int64_t v168 = v167; // 0x40c027\n            *(int32_t *)v168 = -1;\n            v168 += 4;\n            while (v167 + 4 * v166 != v168) {\n                // 0x40c030\n                *(int32_t *)v168 = -1;\n                v168 += 4;\n            }\n        }\n        int64_t v169 = *(int64_t *)(v1 + 8); // 0x40c03f\n        memset((int64_t *)v169, 255, (int32_t)v166);\n        v19 = *v143 - v60;\n        v21 = *v144 - v60;\n        v22 = *v7;\n        v23 = v169;\n    }\n    goto lab_0x40c05f;\n  lab_0x40be5c:;\n    // 0x40be5c\n    char * v151; // 0x40bb30\n    int64_t v152; // 0x40bb30\n    int64_t v153; // 0x40bb30\n    int64_t v154; // 0x40bb30\n    int64_t v155; // 0x40bb30\n    char v156; // 0x40bb30\n    if (v150 != 0) {\n        if (v150 >= 1) {\n            int64_t v157 = *(int64_t *)(v1 + 16); // 0x40c26c\n            int64_t v158 = v157; // 0x40c274\n            *(int32_t *)v158 = -1;\n            v158 += 4;\n            while (v157 + 4 * v150 != v158) {\n                // 0x40c278\n                *(int32_t *)v158 = -1;\n                v158 += 4;\n            }\n        }\n        char * v159 = (char *)(v1 + 139);\n        v156 = 0;\n        v155 = v149;\n        v153 = v150;\n        if (*v159 == 0) {\n            goto lab_0x40be6c;\n        } else {\n            int64_t v160 = *(int64_t *)(v1 + 8); // 0x40c296\n            memset((int64_t *)v160, 255, (int32_t)v150);\n            v151 = v159;\n            v154 = v160;\n            v152 = *v7;\n            goto lab_0x40be65;\n        }\n    } else {\n        // 0x40be5c\n        v151 = (char *)(v1 + 139);\n        v154 = v149;\n        v152 = v150;\n        goto lab_0x40be65;\n    }\n  lab_0x40be44:\n    // 0x40be44\n    v161 = 0;\n    v162 = v163;\n    if ((int32_t)v164 == 10) {\n        // 0x40be4b\n        v161 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n        v162 = v163;\n    }\n    goto lab_0x40be59;\n  lab_0x40c05f:\n    // 0x40c05f\n    *v24 = v22;\n    v25 = v19;\n    v26 = v21;\n    v27 = *(char *)(v1 + 139);\n    v28 = v23;\n    goto lab_0x40bc30;\n  lab_0x40be59:\n    // 0x40be59\n    *(int32_t *)(v1 + 112) = v161;\n    v149 = v162;\n    v150 = v43;\n    goto lab_0x40be5c;\n  lab_0x40be6c:\n    // 0x40be6c\n    *v24 = v153;\n    v68 = v156;\n    v66 = v155;\n    goto lab_0x40bc1c;\n  lab_0x40be65:\n    // 0x40be65\n    v156 = *v151;\n    v155 = v154;\n    v153 = v152;\n    goto lab_0x40be6c;\n}\n"
        },
        {
            "funcName": "function_40c320",
            "funcStartAddr": "40c320",
            "funcEndAddr": "40c545",
            "decompiledFuncCode": "int64_t function_40c320(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40c320\n    int128_t v1; // 0x40c320\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40c322\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40c339\n    int128_t v5 = __asm_movaps(v3); // bp-88, 0x40c33d\n    int64_t v6 = *v4 + 24 * a2; // 0x40c342\n    int64_t v7 = 0; // bp-72, 0x40c34b\n    int64_t * v8 = (int64_t *)(v6 + 8); // 0x40c354\n    int64_t v9 = *v8; // 0x40c354\n    if (v9 < 1) {\n        // 0x40c501\n        free(NULL);\n        return (int32_t)&g67 ^ (int32_t)&g67;\n    }\n    int64_t v10 = v6 + 16; // 0x40c3c5\n    int64_t * v11 = (int64_t *)v10;\n    int64_t v12 = a3 + 8;\n    int64_t * v13 = (int64_t *)v12;\n    int64_t v14 = a3 + 16;\n    int64_t v15 = 0; // 0x40c3b8\n    int64_t v16 = a1; // 0x40c320\n    int64_t v17 = v9;\n    int64_t v18; // 0x40c320\n    int64_t v19; // 0x40c320\n    int64_t v20; // 0x40c320\n    int64_t v21; // 0x40c3f3\n    int64_t v22; // 0x40c3fd\n    while (true) {\n      lab_0x40c3c5:\n        // 0x40c3c5\n        v19 = v17;\n        int64_t v23 = v16;\n        int64_t v24 = *(int64_t *)(*v11 + 8 * v15); // 0x40c3c9\n        v16 = v23;\n        v18 = v19;\n        if (v24 == a2) {\n            goto lab_0x40c3b8;\n        } else {\n            // 0x40c3d2\n            v16 = v23;\n            v18 = v19;\n            if ((*(char *)(v23 + 8 + 16 * v24) & 8) == 0) {\n                goto lab_0x40c3b8;\n            } else {\n                // 0x40c3e3\n                v21 = 24 * v24;\n                int64_t v25 = *(int64_t *)(a1 + 40) + v21; // 0x40c3fa\n                v22 = *(int64_t *)(v25 + 16);\n                int64_t v26 = *(int64_t *)v22; // 0x40c406\n                int64_t v27 = function_409b10(v19, v10, v26); // 0x40c411\n                if (*(int64_t *)(v25 + 8) > 1) {\n                    // 0x40c370\n                    v20 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40c450;\n                    } else {\n                        int64_t v28 = *v13; // 0x40c379\n                        int64_t v29 = function_409b10(v28, v14, v26); // 0x40c384\n                        v20 = v28;\n                        if (v29 == 0) {\n                            goto lab_0x40c450;\n                        } else {\n                            goto lab_0x40c392;\n                        }\n                    }\n                } else {\n                    // 0x40c42b\n                    v16 = v19;\n                    v18 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40c3b8;\n                    } else {\n                        int64_t v30 = *v13; // 0x40c430\n                        int64_t v31 = function_409b10(v30, v14, v26); // 0x40c43b\n                        v16 = v30;\n                        v18 = v19;\n                        if (v31 != 0) {\n                            goto lab_0x40c392;\n                        } else {\n                            goto lab_0x40c3b8;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40c490:\n    if (v17 < 1) {\n        // 0x40c501\n        free((int64_t *)v7);\n        return (int32_t)&g67 ^ (int32_t)&g67;\n    }\n    int64_t v32 = 0; // 0x40c320\n    int64_t v33 = *(int64_t *)(*v11 + 8 * v32); // 0x40c4ac\n    int64_t v34; // 0x40c320\n    int64_t v35; // 0x40c4bd\n    int64_t v36; // 0x40c4d0\n    if (function_409b10(v34, (int64_t)&v7, v33) == 0) {\n        // 0x40c4bd\n        v35 = *v13;\n        v36 = function_409b10(v35, v14, v33) - 1;\n        if (v36 > -1 == v36 < v35) {\n            // 0x40c4de\n            *v13 = v35 - 1;\n            function_409c80(v12, v14, v36);\n        }\n    }\n    int64_t v37 = v32 + 1; // 0x40c4f2\n    v32 = v37;\n    while (*v8 > v37) {\n        // 0x40c4a0\n        v33 = *(int64_t *)(*v11 + 8 * v32);\n        if (function_409b10(v34, (int64_t)&v7, v33) == 0) {\n            // 0x40c4bd\n            v35 = *v13;\n            v36 = function_409b10(v35, v14, v33) - 1;\n            if (v36 > -1 == v36 < v35) {\n                // 0x40c4de\n                *v13 = v35 - 1;\n                function_409c80(v12, v14, v36);\n            }\n        }\n        // 0x40c4f2\n        v37 = v32 + 1;\n        v32 = v37;\n    }\n    // 0x40c501\n    free((int64_t *)v7);\n    return (int32_t)&g67 ^ (int32_t)&g67;\n  lab_0x40c3b8:\n    // 0x40c3b8\n    v17 = v18;\n    v15++;\n    if (v17 <= v15) {\n        // break -> 0x40c490\n        goto lab_0x40c490;\n    }\n    goto lab_0x40c3c5;\n  lab_0x40c450:;\n    int64_t v38 = *(int64_t *)(v22 + 8); // 0x40c450\n    v16 = v20;\n    v18 = v19;\n    if (v38 < 1) {\n        goto lab_0x40c3b8;\n    } else {\n        int64_t v39 = function_409b10(v19, v10, v38); // 0x40c466\n        v16 = v19;\n        v18 = v19;\n        if (v39 != 0) {\n            goto lab_0x40c3b8;\n        } else {\n            int64_t v40 = *v13; // 0x40c474\n            int64_t v41 = function_409b10(v40, v14, v38); // 0x40c47c\n            v16 = v40;\n            v18 = v19;\n            if (v41 == 0) {\n                goto lab_0x40c3b8;\n            } else {\n                goto lab_0x40c392;\n            }\n        }\n    }\n  lab_0x40c392:;\n    int64_t v42 = function_40a5c0(&v5, a4, *v4 + v21); // 0x40c3a4\n    if ((int32_t)v42 != 0) {\n        // 0x40c520\n        free((int64_t *)v7);\n        return v42 & 0xffffffff;\n    }\n    // 0x40c3b1\n    v16 = &v5;\n    v18 = *v8;\n    goto lab_0x40c3b8;\n}\n"
        },
        {
            "funcName": "function_40c550",
            "funcStartAddr": "40c550",
            "funcEndAddr": "40d05d",
            "decompiledFuncCode": "int64_t function_40c550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40c550\n    int128_t v1; // 0x40c550\n    int128_t v2 = v1;\n    int64_t * mem = malloc(0x3800); // 0x40c56e\n    if (mem == NULL) {\n        // 0x40c912\n        return 0;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40c58b\n    int128_t v4 = __asm_movaps(v3); // bp-152, 0x40c58f\n    int64_t v5 = __asm_movaps(v3); // 0x40c59f\n    int64_t * v6 = (int64_t *)(a2 + 88); // 0x40c5a9\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(a2 + 96); // 0x40c5b1\n    *v7 = 0;\n    int64_t v8; // 0x40c550\n    int64_t v9; // 0x40c550\n    int64_t v10; // 0x40c550\n    int64_t v11; // 0x40c550\n    int64_t v12; // 0x40c550\n    int64_t v13; // 0x40c550\n    int64_t v14; // 0x40c550\n    int64_t v15; // 0x40c550\n    int64_t v16; // 0x40c550\n    int64_t v17; // 0x40c550\n    int64_t v18; // 0x40c550\n    int64_t v19; // 0x40c550\n    int64_t v20; // 0x40c550\n    int64_t v21; // 0x40c550\n    int64_t v22; // 0x40c550\n    int128_t v23; // 0x40c550\n    int128_t v24; // 0x40c550\n    int128_t v25; // 0x40c550\n    int128_t v26; // 0x40c550\n    int64_t v27; // 0x40c550\n    int64_t v28; // 0x40c550\n    int128_t v29; // bp-88, 0x40c550\n    int64_t v30; // 0x40c56e\n    int64_t v31; // 0x40c594\n    int64_t v32; // 0x40c550\n    int64_t v33; // 0x40c550\n    int64_t v34; // 0x40cf92\n    int64_t v35; // 0x40c7f7\n    int128_t * v36; // 0x40c550\n    int64_t v37; // 0x40c5d2\n    int64_t v38; // 0x40c5eb\n    uint32_t v39; // 0x40c5ee\n    char v40; // 0x40c5f2\n    int64_t * mem2; // 0x40c659\n    int32_t size2; // 0x40c698\n    int64_t * mem3; // 0x40c69d\n    int64_t v41; // 0x40c69d\n    int64_t v42; // 0x40c6ca\n    int64_t v43; // 0x40c6da\n    int128_t v44; // 0x40c550\n    int128_t v45; // 0x40c550\n    int128_t v46; // 0x40c550\n    int128_t v47; // 0x40c550\n    int128_t v48; // 0x40c550\n    if (*(int64_t *)(a2 + 16) < 1) {\n        // 0x40cf32\n        free(mem);\n        goto lab_0x40cf3c;\n    } else {\n        // 0x40c5bf\n        v30 = (int64_t)mem;\n        v31 = v30 + 0x1800;\n        v32 = &v4;\n        v33 = &v29;\n        v36 = (int128_t *)(v32 + 16);\n        v23 = v5;\n        v28 = 0;\n        v44 = v3;\n        v14 = a1;\n        v18 = a2;\n        v10 = 0;\n        while (true) {\n          lab_0x40c5cd:\n            // 0x40c5cd\n            v11 = v10;\n            v19 = v18;\n            v15 = v14;\n            int128_t v49 = v44;\n            int128_t v50 = v23;\n            v37 = 8 * v28;\n            int64_t v51 = *(int64_t *)(*(int64_t *)(v19 + 24) + v37); // 0x40c5e3\n            v38 = 16 * v51 + *(int64_t *)v15;\n            int64_t v52 = v38 + 8; // 0x40c5ee\n            v39 = *(int32_t *)v52;\n            v40 = *(char *)v52;\n            v24 = v50;\n            v45 = v49;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            switch (v40) {\n                case 1: {\n                    unsigned char v53 = *(char *)v38; // 0x40c928\n                    unsigned char v54 = v53 % 64;\n                    int64_t * v55 = (int64_t *)((int64_t)(v53 / 8 & 24) + v32); // 0x40c943\n                    *v55 = (v54 == 0 ? 1 : 1 << (int64_t)v54) | *v55;\n                    v25 = v50;\n                    v47 = v49;\n                    goto lab_0x40c947;\n                }\n                case 3: {\n                    int64_t v56 = 0;\n                    int64_t * v57 = (int64_t *)(v56 + v32); // 0x40cdb2\n                    *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                    v25 = v50;\n                    v47 = v49;\n                    int64_t v58 = v56 + 8; // 0x40cdc6\n                    while (v56 != 24) {\n                        // 0x40cdb2\n                        v56 = v58;\n                        v57 = (int64_t *)(v56 + v32);\n                        *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                        v25 = v50;\n                        v47 = v49;\n                        v58 = v56 + 8;\n                    }\n                    goto lab_0x40c947;\n                }\n                case 5: {\n                    // 0x40cc60\n                    if (*(int32_t *)(v15 + 180) < 2) {\n                        int128_t v59 = __asm_pcmpeqd(v49, v49); // 0x40ccf0\n                        v4 = __asm_movaps(v59);\n                        v26 = __asm_movaps(v59);\n                        v48 = v59;\n                    } else {\n                        int64_t v60 = 0;\n                        int64_t * v61 = (int64_t *)(v60 + v32); // 0x40cc79\n                        *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                        int64_t v62 = v60 + 8; // 0x40cc8d\n                        v26 = v50;\n                        v48 = v49;\n                        while (v60 != 24) {\n                            // 0x40cc79\n                            v60 = v62;\n                            v61 = (int64_t *)(v60 + v32);\n                            *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                            v62 = v60 + 8;\n                            v26 = v50;\n                            v48 = v49;\n                        }\n                    }\n                    goto lab_0x40cc8f;\n                }\n                case 7: {\n                    int128_t v63 = __asm_pcmpeqd(v49, v49); // 0x40cd90\n                    v4 = __asm_movaps(v63);\n                    v26 = v50;\n                    v48 = v63;\n                    goto lab_0x40cc8f;\n                }\n                default: {\n                    goto lab_0x40c622;\n                }\n            }\n        }\n      lab_0x40c633:\n        if (v13 < 1) {\n            // 0x40d045\n            free(mem);\n            if (v13 != 0) {\n                // 0x40c912\n                return 0;\n            }\n            goto lab_0x40cf3c;\n        } else {\n            int64_t v64 = v13 + 1; // 0x40c648\n            int128_t v65 = v64; // bp-120, 0x40c64d\n            int64_t size = 8 * v64; // 0x40c652\n            mem2 = malloc((int32_t)size);\n            if (mem2 == NULL) {\n                goto lab_0x40ce07;\n            } else {\n                // 0x40c672\n                v4 = 0;\n                if (v13 > 0xaaaaaaaaaaaa855) {\n                    goto lab_0x40ce07;\n                } else {\n                    // 0x40c68d\n                    size2 = 24 * (int32_t)v13;\n                    mem3 = malloc(size2);\n                    if (mem3 == NULL) {\n                        goto lab_0x40ce07;\n                    } else {\n                        // 0x40c6b0\n                        v41 = (int64_t)mem3;\n                        int64_t v66 = size - 8; // 0x40c6b5\n                        int128_t v67 = __asm_pxor(v46, v46); // 0x40c6b9\n                        v42 = v66 + v41;\n                        v43 = v42 + v66;\n                        v29 = __asm_movaps(v67);\n                        __asm_movaps(v67);\n                        int64_t * v68 = (int64_t *)(v17 + 48);\n                        int64_t v69 = 0; // 0x40c6f6\n                        int64_t v70 = v30 + 8; // 0x40c6f6\n                        int64_t v71 = v30; // 0x40c6f6\n                        int64_t v72 = 0; // 0x40c6f6\n                        while (true) {\n                            int64_t v73 = v70;\n                            int64_t v74 = v69;\n                            int64_t * v75 = (int64_t *)v73; // 0x40c70a\n                            uint64_t v76 = *v75; // 0x40c70a\n                            if (v76 >= 1) {\n                                int64_t v77 = v76; // 0x40c754\n                                for (int64_t i = 0; i < v77; i++) {\n                                    int64_t v78 = *(int64_t *)(v73 + 8); // 0x40c718\n                                    int64_t v79 = *(int64_t *)(v17 + 24); // 0x40c720\n                                    int64_t v80 = *(int64_t *)(v79 + 8 * *(int64_t *)(v78 + 8 * i)); // 0x40c725\n                                    int64_t v81 = v77; // 0x40c72d\n                                    if (v80 != -1) {\n                                        int64_t v82 = function_40a050((int64_t *)&v65, (int128_t *)(*v68 + 24 * v80)); // 0x40c73f\n                                        int32_t v83 = v82; // 0x40c744\n                                        v4 = v83;\n                                        if (v83 != 0) {\n                                            // 0x40cdf5\n                                            free(mem3);\n                                            goto lab_0x40ce07;\n                                        }\n                                        // 0x40c72f\n                                        v81 = *v75;\n                                    }\n                                    // 0x40c750\n                                    v77 = v81;\n                                }\n                            }\n                            int64_t v84 = function_40adc0(&v4, v17, (int64_t *)&v65, 0); // 0x40c767\n                            int64_t v85 = 8 * v72; // 0x40c771\n                            int64_t * v86 = (int64_t *)(v85 + v41); // 0x40c771\n                            *v86 = v84;\n                            if (v84 == 0) {\n                                // 0x40cec8\n                                if ((int32_t)v4 != 0) {\n                                    // break -> 0x40cdf5\n                                    break;\n                                }\n                            }\n                            // 0x40c77e\n                            int64_t v87; // 0x40c550\n                            if (*(char *)(v84 + 104) < 0) {\n                                int64_t v88 = function_40adc0(&v4, v17, (int64_t *)&v65, 1); // 0x40ce50\n                                *(int64_t *)(v85 + v42) = v88;\n                                if (v88 == 0) {\n                                    // 0x40cde0\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40cdf5\n                                        break;\n                                    }\n                                }\n                                int64_t v89 = v74; // 0x40ce70\n                                if (v88 != *v86) {\n                                    int32_t v90 = *(int32_t *)(v17 + 180); // 0x40ce7c\n                                    v89 = v90 < 2 == (1 - v90 & v90) < 0 ? 1 : 0x100000000000000 * v74 >> 56;\n                                }\n                                int64_t v91 = v89;\n                                int64_t v92 = function_40adc0(&v4, v17, (int64_t *)&v65, 2); // 0x40ce9d\n                                *(int64_t *)(v85 + v43) = v92;\n                                v87 = v91;\n                                if (v92 == 0) {\n                                    // 0x40ceb4\n                                    v87 = v91;\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40cdf5\n                                        break;\n                                    }\n                                }\n                            } else {\n                                // 0x40c788\n                                *(int64_t *)(v85 + v42) = v84;\n                                *(int64_t *)(v85 + v43) = v84;\n                                v87 = v74;\n                            }\n                            // 0x40c79a\n                            v27 = v87;\n                            int64_t v93 = 0;\n                            int64_t * v94 = (int64_t *)(v93 + v33); // 0x40c7a4\n                            *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                            int64_t v95 = v93 + 8; // 0x40c7bc\n                            while (v93 != 24) {\n                                // 0x40c7a4\n                                v93 = v95;\n                                v94 = (int64_t *)(v93 + v33);\n                                *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                                v95 = v93 + 8;\n                            }\n                            // 0x40c7be\n                            v72++;\n                            v69 = v27;\n                            v70 = v73 + 24;\n                            v71 += 32;\n                            if (v72 == v13) {\n                                if ((char)v27 != 0) {\n                                    int64_t * mem4 = calloc(8, 512); // 0x40cf92\n                                    v34 = (int64_t)mem4;\n                                    *v7 = v34;\n                                    if (mem4 == NULL) {\n                                        // 0x40cdf5\n                                        free(mem3);\n                                        goto lab_0x40ce07;\n                                    } else {\n                                        // 0x40cfac\n                                        v22 = v33;\n                                        v21 = v34;\n                                        v9 = v30 + 0x1820;\n                                        goto lab_0x40cfd2;\n                                    }\n                                } else {\n                                    int64_t * mem5 = calloc(8, 256); // 0x40c7f7\n                                    v35 = (int64_t)mem5;\n                                    *v6 = v35;\n                                    if (mem5 == NULL) {\n                                        // 0x40cdf5\n                                        free(mem3);\n                                        goto lab_0x40ce07;\n                                    } else {\n                                        // 0x40c811\n                                        v8 = 0;\n                                        goto lab_0x40c82f;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40cdf5\n                        free(mem3);\n                        goto lab_0x40ce07;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40cc23:;\n    int64_t v96 = v30 + 16; // 0x40cc28\n    int64_t v97; // 0x40c550\n    int64_t v98 = v97 + v96; // 0x40cc30\n    int64_t v99 = v96; // 0x40cc34\n    goto lab_0x40cc38;\n  lab_0x40ca6d:;\n    // 0x40ca6d\n    int64_t v145; // 0x40c550\n    int64_t v146; // 0x40ca86\n    while (true) {\n        // 0x40ca76\n        int64_t v147; // 0x40c550\n        int64_t v148 = v147;\n        int64_t v149; // 0x40c550\n        int64_t v150 = v149;\n        int64_t v151 = 8 * v150; // 0x40ca76\n        int64_t v152 = *(int64_t *)(v151 + v32); // 0x40ca76\n        int64_t v153 = *(int64_t *)(v151 + v145); // 0x40ca7a\n        int64_t v154 = v153 & v152; // 0x40ca7a\n        int64_t v155; // 0x40c550\n        *(int64_t *)(v151 + v155) = v154;\n        int64_t v156 = v150 + 1; // 0x40ca82\n        v146 = v154 | v148;\n        v149 = v156;\n        v147 = v146;\n        if (v156 == 4) {\n            // break -> 0x40ca8f\n            break;\n        }\n    }\n    int64_t v157 = 0; // 0x40ca92\n    int64_t v158 = 0; // 0x40ca92\n    int64_t v159 = 0; // 0x40ca92\n    int64_t v160; // 0x40c550\n    int64_t v161; // 0x40c550\n    int64_t v162; // 0x40c550\n    if (v146 != 0) {\n        int64_t v163 = v159;\n        int64_t v164 = v158;\n        int64_t v165 = v157;\n        int64_t v166 = 8 * v165; // 0x40caa2\n        int64_t * v167 = (int64_t *)(v166 + v32); // 0x40caa2\n        int64_t v168 = *v167; // 0x40caa2\n        int64_t v169 = *(int64_t *)(v166 + v145); // 0x40caa6\n        int64_t v170 = v169 & -1 - v168; // 0x40cab0\n        int64_t v171 = v168 & -1 - v169; // 0x40cab6\n        *(int64_t *)(v166 + v33) = v170;\n        int64_t v172 = v170 | v163; // 0x40cabd\n        *v167 = v171;\n        int64_t v173 = v165 + 1; // 0x40cac4\n        int64_t v174 = v171 | v164; // 0x40cac8\n        v157 = v173;\n        v158 = v174;\n        v159 = v172;\n        while (v173 != 4) {\n            // 0x40caa2\n            v163 = v159;\n            v164 = v158;\n            v165 = v157;\n            v166 = 8 * v165;\n            v167 = (int64_t *)(v166 + v32);\n            v168 = *v167;\n            v169 = *(int64_t *)(v166 + v145);\n            v170 = v169 & -1 - v168;\n            v171 = v168 & -1 - v169;\n            *(int64_t *)(v166 + v33) = v170;\n            v172 = v170 | v163;\n            *v167 = v171;\n            v173 = v165 + 1;\n            v174 = v171 | v164;\n            v157 = v173;\n            v158 = v174;\n            v159 = v172;\n        }\n        // 0x40cad1\n        int64_t v175; // 0x40c550\n        int64_t v176 = 24 * v175 + v30; // 0x40cadb\n        int64_t v177 = v176; // 0x40cae2\n        int64_t v178; // 0x40c550\n        int64_t v179 = v178; // 0x40cae2\n        if (v172 != 0) {\n            int128_t v180 = v29; // 0x40cae4\n            int128_t v181 = __asm_movdqa(v180); // 0x40cae4\n            int64_t v182 = 32 * v178 + v31; // 0x40caf9\n            int128_t v183 = *(int128_t *)v182; // 0x40cafe\n            __asm_movups(v183, v181);\n            int128_t v184; // 0x40c550\n            int128_t v185 = __asm_movdqa(v184); // 0x40cb01\n            int128_t v186 = *(int128_t *)(v182 + 16); // 0x40cb0a\n            __asm_movups(v186, v185);\n            int128_t v187 = __asm_movdqa(0); // 0x40cb0e\n            int64_t v188 = 24 * v178;\n            int128_t v189 = *(int128_t *)v145; // 0x40cb20\n            __asm_movups(v189, v187);\n            int128_t v190; // 0x40c550\n            int128_t v191 = __asm_movdqa(v190); // 0x40cb25\n            int128_t v192 = *(int128_t *)(v145 + 16); // 0x40cb2e\n            __asm_movups(v192, v191);\n            if ((int32_t)function_40abb0(v188 + v30, v176) != 0) {\n                goto lab_0x40cc23;\n            }\n            // 0x40cb41\n            v177 = 0x100000000 * v176 >> 32;\n            v179 = v178 + 1;\n        }\n        int64_t v193 = v179;\n        int64_t v194 = v177;\n        int64_t * v195; // 0x40c550\n        int64_t v196 = *v195; // 0x40cb54\n        int64_t v197 = *(int64_t *)(v196 + v37); // 0x40cb58\n        if ((char)function_408500(v194, v197) == 0) {\n            // 0x40cb4a\n            goto lab_0x40cc23;\n        }\n        // 0x40cb6c\n        int64_t v198; // 0x40c550\n        v162 = v198;\n        v160 = v193;\n        v161 = v175;\n        if (v174 == 0) {\n            // break -> 0x40cb85\n            goto lab_0x40cb85_2;\n        }\n    }\n    goto lab_0x40ca4e;\n  lab_0x40ca4e:;\n    // 0x40ca4e\n    int64_t v199; // 0x40c550\n    int64_t v200 = v199;\n    int64_t v201; // 0x40c550\n    int64_t v202 = v201 + 1; // 0x40ca4e\n    v199 = v200;\n    int64_t v203; // 0x40c550\n    v203 += 32;\n    v201 = v202;\n    v162 = 0x100000000000000 * v19 >> 56;\n    v160 = v200;\n    v161 = v202;\n    if (v202 >= v200) {\n        // break -> 0x40cb85\n        goto lab_0x40cb85_2;\n    }\n    goto lab_0x40ca5f;\n  lab_0x40c622:\n    // 0x40c622\n    v13 = v12;\n    v17 = v16;\n    v46 = v45;\n    int64_t v206 = v28 + 1; // 0x40c622\n    v23 = v24;\n    v28 = v206;\n    v44 = v46;\n    v14 = v17;\n    v18 = v20;\n    v10 = v13;\n    if (v206 >= *(int64_t *)(v20 + 16)) {\n        // break -> 0x40c633\n        goto lab_0x40c633;\n    }\n    goto lab_0x40c5cd;\n  lab_0x40c947:;\n    uint32_t v207 = v39 / 256; // 0x40c5f7\n    uint32_t v208 = v207 & 0xff03ff;\n    int128_t v209 = v47;\n    int128_t v210 = v25;\n    int128_t v211 = v209; // 0x40c94a\n    int64_t v212; // 0x40c5fa\n    int128_t v213; // 0x40c550\n    if ((int16_t)v208 == 0) {\n        goto lab_0x40ca00;\n    } else {\n        // 0x40c950\n        v212 = v208;\n        v213 = v209;\n        if ((v212 & 32) != 0) {\n            int128_t v214 = v4; // 0x40ccc0\n            int128_t v215 = __asm_pxor(v209, v209); // 0x40ccc5\n            v4 = __asm_movaps(v215);\n            *v36 = (int128_t)__asm_movaps(v215);\n            v24 = v210;\n            v45 = v215;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            if ((v214 & 1024) == 0) {\n                goto lab_0x40c622;\n            } else {\n                // 0x40ccd9\n                v4 = 1024;\n                v213 = v215;\n                goto lab_0x40c958;\n            }\n        } else {\n            goto lab_0x40c958;\n        }\n    }\n  lab_0x40cc8f:;\n    int128_t v216 = v48;\n    int128_t v217 = v26;\n    int64_t v218 = *(int64_t *)(v15 + 216); // 0x40cc8f\n    if ((v218 & 64) == 0) {\n        // 0x40cc9b\n        v4 = (int64_t)v4 & -1025;\n    }\n    // 0x40cca4\n    v25 = v217;\n    v47 = v216;\n    if ((char)v218 <= 255) {\n        // 0x40ccb0\n        v4 = (int64_t)v4 & -2;\n        v25 = v217;\n        v47 = v216;\n    }\n    goto lab_0x40c947;\n  lab_0x40ca00:;\n    int128_t v219 = v211;\n    v162 = v19;\n    v160 = v11;\n    v161 = 0;\n    if (v11 >= 1) {\n        // 0x40ca11\n        v199 = v11;\n        v203 = v31;\n        v201 = 0;\n        while (true) {\n          lab_0x40ca5f:\n            // 0x40ca5f\n            if (v40 == 1) {\n                unsigned char v204 = *(char *)v38; // 0x40ca30\n                int64_t v205 = *(int64_t *)(32 * v201 + v31 + (int64_t)(v204 / 8 & 24)); // 0x40ca43\n                if ((1 << (int64_t)(v204 % 64) & v205) != 0) {\n                    goto lab_0x40ca6d;\n                } else {\n                    goto lab_0x40ca4e;\n                }\n            } else {\n                goto lab_0x40ca6d;\n            }\n        }\n    }\n  lab_0x40cb85_2:;\n    int64_t v220 = v160;\n    int64_t v221 = v162;\n    v24 = v210;\n    v45 = v219;\n    v16 = v15;\n    v20 = v221;\n    v12 = v220;\n    int64_t v222; // 0x40c550\n    int64_t v223; // 0x40c550\n    int64_t v224; // 0x40c550\n    int64_t result; // 0x40c550\n    int128_t v225; // 0x40c550\n    if (v220 != v161) {\n        goto lab_0x40c622;\n    } else {\n        int128_t v226 = __asm_movdqa(v4); // 0x40cb8e\n        int64_t v227 = 32 * v220 + v31; // 0x40cba5\n        __asm_movups(*(int128_t *)v227, v226);\n        __asm_movups(*(int128_t *)(v227 + 16), __asm_movdqa(v210));\n        v97 = 24 * v220;\n        int64_t v228 = v97 + v30; // 0x40cbcd\n        int64_t * v229 = (int64_t *)v228;\n        *v229 = 1;\n        int64_t * v230 = (int64_t *)(v228 + 8);\n        *v230 = 1;\n        int64_t * mem6 = malloc(8); // 0x40cbe6\n        *(int64_t *)(v228 + 16) = (int64_t)mem6;\n        if (mem6 == NULL) {\n            // 0x40c8eb\n            *v230 = 0;\n            *v229 = 0;\n            if (v220 != 0) {\n                goto lab_0x40cc23;\n            } else {\n                // 0x40c904\n                free(mem);\n                result = 0;\n                goto lab_0x40c912;\n            }\n        }\n        // 0x40cc02\n        *mem6 = *(int64_t *)(*(int64_t *)(v221 + 24) + v37);\n        v225 = v219;\n        v223 = 0x100000000000000 * v15 >> 56;\n        v224 = v221;\n        v222 = v220 + 1;\n        goto lab_0x40cc09;\n    }\n  lab_0x40c958:;\n    int128_t v231 = v213;\n    v225 = v231;\n    v223 = v15;\n    v224 = v19;\n    v222 = v11;\n    if ((char)v207 <= -1) {\n        goto lab_0x40cc09;\n    } else {\n        if ((v212 & 4) == 0) {\n            goto lab_0x40c9b0;\n        } else {\n            if (v40 == 1) {\n                // 0x40cd70\n                v225 = v231;\n                v223 = v15;\n                v224 = v19;\n                v222 = v11;\n                if ((*(char *)(v38 + 10) & 64) == 0) {\n                    goto lab_0x40cc09;\n                } else {\n                    // 0x40cd7b\n                    if (*(int32_t *)(v15 + 180) > 1) {\n                        goto lab_0x40c97b;\n                    } else {\n                        goto lab_0x40cd40;\n                    }\n                }\n            } else {\n                // 0x40c96d\n                if (*(int32_t *)(v15 + 180) < 2) {\n                    goto lab_0x40cd40;\n                } else {\n                    goto lab_0x40c97b;\n                }\n            }\n        }\n    }\n  lab_0x40cc09:;\n    int128_t v232 = v225;\n    int128_t v233 = __asm_pxor(v232, v232); // 0x40cc09\n    v4 = __asm_movaps(v233);\n    *v36 = (int128_t)__asm_movaps(v233);\n    v24 = v210;\n    v45 = v233;\n    v16 = v223;\n    v20 = v224;\n    v12 = v222;\n    goto lab_0x40c622;\n  lab_0x40c9b0:\n    // 0x40c9b0\n    v211 = v231;\n    if ((v212 & 8) == 0) {\n        goto lab_0x40ca00;\n    } else {\n        if (v40 == 1) {\n            // 0x40cdd0\n            v225 = v231;\n            v223 = v15;\n            v224 = v19;\n            v222 = v11;\n            if ((*(char *)(v38 + 10) & 64) == 0) {\n                goto lab_0x40c9bd;\n            } else {\n                goto lab_0x40cc09;\n            }\n        } else {\n            goto lab_0x40c9bd;\n        }\n    }\n  lab_0x40c9bd:\n    // 0x40c9bd\n    if (*(int32_t *)(v15 + 180) < 2) {\n        int64_t v234 = 0; // 0x40cd1f\n        int64_t v235 = 8 * v234; // 0x40cd0c\n        int64_t * v236 = (int64_t *)(v235 + v32); // 0x40cd17\n        int64_t v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235); // 0x40cd17\n        *v236 = v237;\n        v234++;\n        int64_t v238 = v237; // 0x40cd23\n        int64_t v239 = v238; // 0x40cd2a\n        while (v234 != 4) {\n            // 0x40cd0c\n            v235 = 8 * v234;\n            v236 = (int64_t *)(v235 + v32);\n            v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235);\n            *v236 = v237;\n            v234++;\n            v238 = v237 | v239;\n            v239 = v238;\n        }\n        // 0x40cd2c\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v238 == 0) {\n            goto lab_0x40c622;\n        } else {\n            goto lab_0x40ca00;\n        }\n    } else {\n        int64_t v240 = 0; // 0x40c9d1\n        int64_t v241 = 8 * v240; // 0x40c9d3\n        int64_t v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120)); // 0x40c9db\n        int64_t * v243 = (int64_t *)(v241 + v32); // 0x40c9e2\n        int64_t v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241)); // 0x40c9e2\n        *v243 = v244;\n        v240++;\n        int64_t v245 = v244; // 0x40c9ee\n        int64_t v246 = v245; // 0x40c9f5\n        while (v240 != 4) {\n            // 0x40c9d3\n            v241 = 8 * v240;\n            v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120));\n            v243 = (int64_t *)(v241 + v32);\n            v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241));\n            *v243 = v244;\n            v240++;\n            v245 = v244 | v246;\n            v246 = v245;\n        }\n        // 0x40c9f7\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v245 == 0) {\n            goto lab_0x40c622;\n        } else {\n            goto lab_0x40ca00;\n        }\n    }\n  lab_0x40cd40:;\n    int64_t v247 = 0; // 0x40cd42\n    int64_t v248 = 8 * v247; // 0x40cd44\n    int64_t * v249 = (int64_t *)(v248 + v32); // 0x40cd44\n    int64_t v250 = *(int64_t *)(v15 + 184 + v248) & *v249; // 0x40cd48\n    *v249 = v250;\n    int64_t v251 = v247 + 1; // 0x40cd54\n    int64_t v252 = v250; // 0x40cd58\n    v247 = v251;\n    int64_t v253 = v252; // 0x40cd5f\n    while (v251 != 4) {\n        // 0x40cd44\n        v248 = 8 * v247;\n        v249 = (int64_t *)(v248 + v32);\n        v250 = *(int64_t *)(v15 + 184 + v248) & *v249;\n        *v249 = v250;\n        v251 = v247 + 1;\n        v252 = v250 | v253;\n        v247 = v251;\n        v253 = v252;\n    }\n    // 0x40cd61\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v252 != 0) {\n        goto lab_0x40c9b0;\n    } else {\n        goto lab_0x40c622;\n    }\n  lab_0x40c97b:;\n    int64_t v254 = 0; // 0x40c981\n    int64_t v255 = 8 * v254; // 0x40c983\n    int64_t v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120)); // 0x40c983\n    int64_t * v257 = (int64_t *)(v255 + v32); // 0x40c992\n    int64_t v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257; // 0x40c992\n    *v257 = v258;\n    int64_t v259 = v254 + 1; // 0x40c99a\n    int64_t v260 = v258; // 0x40c99e\n    v254 = v259;\n    int64_t v261 = v260; // 0x40c9a5\n    while (v259 != 4) {\n        // 0x40c983\n        v255 = 8 * v254;\n        v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120));\n        v257 = (int64_t *)(v255 + v32);\n        v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257;\n        *v257 = v258;\n        v259 = v254 + 1;\n        v260 = v258 | v261;\n        v254 = v259;\n        v261 = v260;\n    }\n    // 0x40c9a7\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v260 == 0) {\n        goto lab_0x40c622;\n    } else {\n        goto lab_0x40c9b0;\n    }\n  lab_0x40cf3c:;\n    int64_t * mem7 = calloc(8, 256); // 0x40cf46\n    int64_t v262 = (int64_t)mem7; // 0x40cf46\n    *v6 = v262;\n    // 0x40c912\n    return v262 & -256 | (int64_t)(mem7 != NULL);\n  lab_0x40ce07:\n    // 0x40ce07\n    free(mem2);\n    int64_t v263 = v30 + 16; // 0x40ce14\n    int64_t v264 = v263 + 24; // 0x40ce23\n    free((int64_t *)*(int64_t *)v263);\n    int64_t v265 = v264; // 0x40ce2f\n    while (v264 != 24 * v13 + v263) {\n        // 0x40ce20\n        v264 = v265 + 24;\n        free((int64_t *)*(int64_t *)v265);\n        v265 = v264;\n    }\n    // 0x40ce31\n    free(mem);\n    result = 0;\n  lab_0x40c912:\n    // 0x40c912\n    return result;\n  lab_0x40cc38:;\n    int64_t v100 = v99 + 24; // 0x40cc3b\n    free((int64_t *)*(int64_t *)v99);\n    v99 = v100;\n    if (v98 != v100) {\n        goto lab_0x40cc38;\n    } else {\n        // 0x40cc49\n        free(mem);\n        result = 0;\n        goto lab_0x40c912;\n    }\n  lab_0x40cfd2:;\n    int64_t v101 = v9;\n    int64_t v102 = v21;\n    int64_t v103 = *(int64_t *)v22; // 0x40cfd2\n    int64_t v104; // 0x40c550\n    int64_t v105; // 0x40c550\n    int64_t v106; // 0x40c550\n    int64_t * v107; // 0x40c550\n    if (v103 == 0) {\n        goto lab_0x40cff2;\n    } else {\n        // 0x40cfe2\n        v107 = (int64_t *)(v101 - 32);\n        v105 = v103;\n        v106 = 1;\n        v104 = v102;\n        goto lab_0x40cfe2_2;\n    }\n  lab_0x40c82f:;\n    int64_t v108 = v8;\n    int64_t v109 = *(int64_t *)(v108 + v33); // 0x40c832\n    int64_t v110; // 0x40c550\n    int64_t v111; // 0x40c550\n    int64_t v112; // 0x40c550\n    int64_t * v113; // 0x40c550\n    int64_t v114; // 0x40c550\n    int64_t * v115; // 0x40c550\n    if (v109 == 0) {\n        goto lab_0x40c864;\n    } else {\n        // 0x40c850\n        v113 = (int64_t *)(v108 + v31);\n        v114 = v30 + 0x1820 + v108;\n        v115 = (int64_t *)(v17 + 184 + v108);\n        v110 = v109;\n        v111 = 1;\n        v112 = 64 * v108 + v35;\n        goto lab_0x40c850_2;\n    }\n  lab_0x40cff2:;\n    int64_t v116 = v22 + 8; // 0x40cff2\n    int64_t v117 = v34; // 0x40d004\n    v22 = v116;\n    v21 = v102 + 512;\n    v9 = v101 + 8;\n    int64_t v118; // bp-56, 0x40c550\n    if (v116 != (int64_t)&v118) {\n        goto lab_0x40cfd2;\n    } else {\n        goto lab_0x40c86e;\n    }\n  lab_0x40c864:\n    // 0x40c864\n    v8 = v108 + 8;\n    v117 = v35;\n    if (v108 != 24) {\n        goto lab_0x40c82f;\n    } else {\n        goto lab_0x40c86e;\n    }\n  lab_0x40c86e:;\n    int64_t v119; // 0x40c550\n    char v120; // 0x40c550\n    if ((v120 & 4) == 0) {\n        goto lab_0x40c89d;\n    } else {\n        // 0x40c87f\n        v119 = 0;\n        goto lab_0x40c87f_2;\n    }\n  lab_0x40cfe2_2:;\n    int64_t v121 = v104;\n    int64_t v122 = v106;\n    uint64_t v123 = v105;\n    int64_t v124; // 0x40c550\n    int64_t v125; // 0x40c550\n    int64_t v126; // 0x40c550\n    if (v123 % 2 != 0) {\n        // 0x40d00b\n        v126 = 0;\n        v125 = v101;\n        v124 = 0;\n        if ((*v107 & v122) != 0) {\n            goto lab_0x40d02c;\n        } else {\n            goto lab_0x40d016;\n        }\n    } else {\n        goto lab_0x40cfe6;\n    }\n  lab_0x40c850_2:;\n    int64_t v127 = v112;\n    int64_t v128 = v111;\n    uint64_t v129 = v110;\n    int64_t v130; // 0x40c550\n    int64_t v131; // 0x40c550\n    int64_t v132; // 0x40c550\n    if (v129 % 2 != 0) {\n        // 0x40cee0\n        v131 = v114;\n        v130 = 0;\n        v132 = 0;\n        if ((*v113 & v128) != 0) {\n            goto lab_0x40cf0f;\n        } else {\n            goto lab_0x40cef8;\n        }\n    } else {\n        goto lab_0x40c858;\n    }\n  lab_0x40c89d:\n    // 0x40c89d\n    free(mem3);\n    free(mem2);\n    int64_t v133 = v30 + 16; // 0x40c8be\n    int64_t v134 = v133; // 0x40c8c5\n    goto lab_0x40c8c8;\n  lab_0x40cfe6:\n    // 0x40cfe6\n    v105 = v123 / 2;\n    v106 = 2 * v122;\n    v104 = v121 + 8;\n    if (v123 >= 2) {\n        goto lab_0x40cfe2_2;\n    } else {\n        goto lab_0x40cff2;\n    }\n  lab_0x40c858:\n    // 0x40c858\n    v110 = v129 / 2;\n    v111 = 2 * v128;\n    v112 = v127 + 8;\n    if (v129 >= 2) {\n        goto lab_0x40c850_2;\n    } else {\n        goto lab_0x40c864;\n    }\n  lab_0x40c8c8:;\n    int64_t v135 = v134 + 24; // 0x40c8cc\n    free((int64_t *)*(int64_t *)v134);\n    v134 = v135;\n    if (v133 + (int64_t)size2 != v135) {\n        goto lab_0x40c8c8;\n    } else {\n        // 0x40c8da\n        free(mem);\n        result = 1;\n        goto lab_0x40c912;\n    }\n  lab_0x40c87f_2:;\n    int64_t v136 = v119;\n    if ((*(char *)(v30 + 0x1801 + 32 * v136) & 4) != 0) {\n        int64_t v137 = *(int64_t *)(8 * v136 + v43); // 0x40cf6e\n        *(int64_t *)(v117 + 80) = v137;\n        if ((char)v27 == 0) {\n            goto lab_0x40c89d;\n        } else {\n            // 0x40cf7c\n            *(int64_t *)(v117 + 2128) = v137;\n            goto lab_0x40c89d;\n        }\n    } else {\n        int64_t v138 = v136 + 1; // 0x40c894\n        v119 = v138;\n        if (v138 != v13) {\n            goto lab_0x40c87f_2;\n        } else {\n            goto lab_0x40c89d;\n        }\n    }\n  lab_0x40d02c:;\n    int64_t v139 = 8 * v124; // 0x40d02c\n    *(int64_t *)v121 = *(int64_t *)(v139 + v41);\n    *(int64_t *)(v121 + 2048) = *(int64_t *)(v139 + v42);\n    goto lab_0x40cfe6;\n  lab_0x40d016:;\n    int64_t v140 = v125;\n    int64_t v141 = v126 + 1; // 0x40d019\n    v126 = v141;\n    v125 = v140 + 32;\n    v124 = v141;\n    if ((*(int64_t *)v140 & v122) == 0) {\n        goto lab_0x40d016;\n    } else {\n        goto lab_0x40d02c;\n    }\n  lab_0x40cf0f:;\n    int64_t v142 = v132;\n    if ((*v115 & v128) == 0) {\n        // 0x40cf25\n        *(int64_t *)v127 = *(int64_t *)(v142 + v41);\n        goto lab_0x40c858;\n    } else {\n        // 0x40cf19\n        *(int64_t *)v127 = *(int64_t *)(v142 + v42);\n        goto lab_0x40c858;\n    }\n  lab_0x40cef8:;\n    int64_t v143 = v131;\n    int64_t v144 = v130 + 1; // 0x40cefb\n    v131 = v143 + 32;\n    v130 = v144;\n    if ((*(int64_t *)v143 & v128) == 0) {\n        goto lab_0x40cef8;\n    } else {\n        // 0x40cf0b\n        v132 = 8 * v144;\n        goto lab_0x40cf0f;\n    }\n}\n"
        },
        {
            "funcName": "function_40d060",
            "funcStartAddr": "40d060",
            "funcEndAddr": "40d0e7",
            "decompiledFuncCode": "int64_t function_40d060(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 48; // 0x40d060\n    char * v2 = (char *)v1; // 0x40d060\n    if (*v2 == 16) {\n        int64_t v3 = *(int64_t *)(a2 + 8); // 0x40d066\n        *(int64_t *)(a2 + 24) = *(int64_t *)(v3 + 24);\n        *(int64_t *)(a2 + 56) = *(int64_t *)(v3 + 56);\n        return 0;\n    }\n    // 0x40d080\n    *(int64_t *)(a2 + 24) = a2;\n    int64_t v4 = a2 + 40; // 0x40d094\n    int64_t v5 = function_4091e0(a1, *(int64_t *)v4, *(int64_t *)v1); // 0x40d098\n    *(int64_t *)(a2 + 56) = v5;\n    if (v5 == -1) {\n        // 0x40d0d6\n        return 12;\n    }\n    // 0x40d0aa\n    if (*v2 == 12) {\n        int32_t * v6 = (int32_t *)(a1 + 8 + 16 * v5); // 0x40d0c8\n        *v6 = *v6 & -0x3ff01 | 256 * *(int32_t *)v4 & 0x3ff00;\n    }\n    // 0x40d0d6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d0f0",
            "funcStartAddr": "40d0f0",
            "funcEndAddr": "40d26c",
            "decompiledFuncCode": "int64_t function_40d0f0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 != 0) {\n        int64_t v2 = 0; // 0x40d10b\n        if (*v1 != 0) {\n            int64_t v3 = v2 + 1; // 0x40d11f\n            int64_t v4 = a1 + 16 * v2; // 0x40d127\n            function_409190(v4);\n            v2 = v3;\n            int64_t v5 = v4; // 0x40d134\n            while (*v1 > v3) {\n                // 0x40d11c\n                v3 = v2 + 1;\n                v4 = v5 + 16 * v2;\n                function_409190(v4);\n                v2 = v3;\n                v5 = v4;\n            }\n        }\n    }\n    // 0x40d136\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    int64_t * v6; // 0x40d0f0\n    int64_t * v7; // 0x40d0f0\n    int64_t * v8; // 0x40d0f0\n    if (*v1 == 0) {\n        // 0x40d136\n        v7 = (int64_t *)(a1 + 56);\n        v6 = (int64_t *)(a1 + 48);\n        v8 = (int64_t *)(a1 + 40);\n    } else {\n        int64_t * v9 = (int64_t *)(a1 + 48);\n        int64_t * v10 = (int64_t *)(a1 + 56);\n        int64_t * v11 = (int64_t *)(a1 + 40);\n        int64_t v12 = 0;\n        int64_t v13 = *v9; // 0x40d150\n        if (v13 != 0) {\n            // 0x40d15a\n            free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n        }\n        int64_t v14 = *v10; // 0x40d168\n        if (v14 != 0) {\n            // 0x40d172\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n        }\n        int64_t v15 = *v11; // 0x40d180\n        if (v15 != 0) {\n            // 0x40d18a\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n        }\n        int64_t v16 = v12 + 1; // 0x40d198\n        v7 = v10;\n        v6 = v9;\n        v8 = v11;\n        while (*v1 > v16) {\n            // 0x40d150\n            v12 = v16;\n            v13 = *v9;\n            if (v13 != 0) {\n                // 0x40d15a\n                free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n            }\n            // 0x40d168\n            v14 = *v10;\n            if (v14 != 0) {\n                // 0x40d172\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n            }\n            // 0x40d180\n            v15 = *v11;\n            if (v15 != 0) {\n                // 0x40d18a\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n            }\n            // 0x40d198\n            v16 = v12 + 1;\n            v7 = v10;\n            v6 = v9;\n            v8 = v11;\n        }\n    }\n    // 0x40d1a3\n    free((int64_t *)*v8);\n    free((int64_t *)*v6);\n    int64_t * v17 = (int64_t *)*v7; // 0x40d1bf\n    free(v17);\n    free(v17);\n    int64_t * v18 = (int64_t *)(a1 + 64); // 0x40d1cd\n    int64_t v19 = *v18; // 0x40d1cd\n    int64_t * v20 = NULL; // 0x40d1d5\n    if (v19 != 0) {\n        int64_t v21 = 0; // 0x40d213\n        int64_t v22 = 24 * v21 + v19; // 0x40d1e7\n        int64_t * v23 = (int64_t *)v22; // 0x40d1eb\n        int64_t * v24 = (int64_t *)(v22 + 16);\n        int64_t v25 = 0; // 0x40d1f0\n        int64_t v26; // 0x40d200\n        if (*v23 >= 1) {\n            v26 = v25 + 1;\n            function_4096e0(*(int64_t *)(*v24 + 8 * v25));\n            v25 = v26;\n            while (v26 < *v23) {\n                // 0x40d1f8\n                v26 = v25 + 1;\n                function_4096e0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n            }\n        }\n        // 0x40d20f\n        v21++;\n        free((int64_t *)*v24);\n        int64_t v27 = *v18;\n        while (*(int64_t *)(a1 + 136) >= v21) {\n            // 0x40d1e0\n            v22 = 24 * v21 + v27;\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 16);\n            v25 = 0;\n            if (*v23 >= 1) {\n                v26 = v25 + 1;\n                function_4096e0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n                while (v26 < *v23) {\n                    // 0x40d1f8\n                    v26 = v25 + 1;\n                    function_4096e0(*(int64_t *)(*v24 + 8 * v25));\n                    v25 = v26;\n                }\n            }\n            // 0x40d20f\n            v21++;\n            free((int64_t *)*v24);\n            v27 = *v18;\n        }\n        // 0x40d235\n        v20 = (int64_t *)v27;\n    }\n    // 0x40d235\n    free(v20);\n    int64_t v28 = *(int64_t *)(a1 + 120); // 0x40d23a\n    if (v28 != (int64_t)&g26) {\n        // 0x40d248\n        free((int64_t *)v28);\n    }\n    // 0x40d24d\n    free((int64_t *)*(int64_t *)(a1 + 224));\n    free((int64_t *)a1);\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_40d270",
            "funcStartAddr": "40d270",
            "funcEndAddr": "40d2be",
            "decompiledFuncCode": "int64_t function_40d270(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 < 1) {\n        // 0x40d2b0\n        free((int64_t *)*v1);\n        return &g67;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = v2 + 1; // 0x40d289\n    int64_t v4 = 48 * v2; // 0x40d28d\n    free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n    uint64_t v5 = *(int64_t *)(v4 + 16 + *v1); // 0x40d2a0\n    free((int64_t *)v5);\n    while (v3 < v5) {\n        // 0x40d280\n        v2 = v3;\n        v3 = v2 + 1;\n        v4 = 48 * v2;\n        free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n        v5 = *(int64_t *)(v4 + 16 + *v1);\n        free((int64_t *)v5);\n    }\n    // 0x40d2b0\n    free((int64_t *)*v1);\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_40d2c0",
            "funcStartAddr": "40d2c0",
            "funcEndAddr": "40d350",
            "decompiledFuncCode": "int64_t function_40d2c0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int128_t * a6) {\n    int64_t v1 = a1 - 1; // 0x40d2c7\n    *(int64_t *)a1 = v1;\n    if (v1 < 0) {\n        // 0x40d332\n        __assert_fail(\"num >= 0\", \"lib/regexec.c\", 1359, \"pop_fail_stack\");\n        return &g67;\n    }\n    int64_t v2 = 48 * v1; // 0x40d2de\n    int64_t v3 = v2 + a2; // 0x40d2e8\n    *a3 = *(int64_t *)v3;\n    int64_t v4 = *(int64_t *)(v3 + 16); // 0x40d2f1\n    memcpy((int64_t *)a5, (int64_t *)v4, 16 * (int32_t)a4);\n    int64_t * v5 = (int64_t *)((int64_t)a6 + 16); // 0x40d2fd\n    free((int64_t *)*v5);\n    int64_t v6 = v4 + v2;\n    free((int64_t *)*(int64_t *)(v6 + 16));\n    *a6 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)(v6 + 24)));\n    *v5 = *(int64_t *)(v6 + 40);\n    return *(int64_t *)(v6 + 8);\n}\n"
        },
        {
            "funcName": "function_40d350",
            "funcStartAddr": "40d350",
            "funcEndAddr": "40d39c",
            "decompiledFuncCode": "int64_t function_40d350(int64_t a1, int64_t str) {\n    // 0x40d350\n    int64_t v1; // 0x40d350\n    uint64_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x40d35f\n    if (len != 1) {\n        // 0x40d390\n        return 3;\n    }\n    int64_t * v3 = (int64_t *)((v2 / 8 & 24) + a1); // 0x40d37a\n    *v3 = *v3 | (int64_t)len << v2 % 64;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d3a0",
            "funcStartAddr": "40d3a0",
            "funcEndAddr": "40db66",
            "decompiledFuncCode": "int64_t function_40d3a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = a4; // 0x40d3c1\n    int64_t v3 = a6; // 0x40d3c1\n    int64_t v4; // 0x40d3a0\n    int64_t v5; // 0x40d3a0\n    int64_t v6; // 0x40d3a0\n    int64_t v7; // 0x40d3a0\n    int64_t v8; // 0x40d3a0\n    bool v9; // 0x40d3a0\n    if ((a7 & 0x400000) == 0) {\n        goto lab_0x40d3e5;\n    } else {\n        int64_t v10 = v9 ? -1 : 1;\n        int64_t v11 = (int64_t)\"upper\"; // 0x40d3a0\n        int64_t v12 = a6; // 0x40d3a0\n        unsigned char v13 = *(char *)v12; // 0x40d3d0\n        char v14 = *(char *)v11; // 0x40d3d0\n        v2 = 5;\n        char v15 = v14; // 0x40d3d0\n        bool v16 = false; // 0x40d3d0\n        while (v13 == v14) {\n            // 0x40d3c3\n            v11 += v10;\n            v12 += v10;\n            v15 = v13;\n            v16 = true;\n            if (v2 == 0) {\n                // break -> \n                break;\n            }\n            v13 = *(char *)v12;\n            v14 = *(char *)v11;\n            v2--;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v17 = v15;\n        v3 = (int64_t)\"alpha\";\n        int64_t v18 = (int64_t)\"lower\"; // 0x40d3d9\n        int64_t v19 = a6; // 0x40d3d9\n        if ((v13 >= v17 && !v16) != v13 < v17) {\n            unsigned char v20 = *(char *)v19; // 0x40d4e3\n            char v21 = *(char *)v18; // 0x40d4e3\n            int64_t v22 = 5; // 0x40d4e3\n            char v23 = v21; // 0x40d4e3\n            bool v24 = false; // 0x40d4e3\n            while (v20 == v21) {\n                // 0x40d4d6\n                v18 += v10;\n                v19 += v10;\n                v23 = v20;\n                v24 = true;\n                if (v22 == 0) {\n                    // break -> \n                    break;\n                }\n                v20 = *(char *)v19;\n                v21 = *(char *)v18;\n                v22--;\n                v23 = v21;\n                v24 = false;\n            }\n            unsigned char v25 = v23;\n            int64_t v26 = !((v20 < v25 | v24)) == v20 < v25 ? (int64_t)\"alpha\" : a6; // 0x40d4f5\n            v6 = a3;\n            v8 = v22;\n            v4 = v26;\n            v7 = v22;\n            v5 = v26;\n            if (v22 != v1) {\n                goto lab_0x40d3f5;\n            } else {\n                goto lab_0x40d505;\n            }\n        } else {\n            goto lab_0x40d3e5;\n        }\n    }\n  lab_0x40d3e5:\n    // 0x40d3e5\n    v6 = a3;\n    v8 = v2;\n    v4 = v3;\n    v7 = v1;\n    v5 = v3;\n    if (v2 == v1) {\n        goto lab_0x40d505;\n    } else {\n        goto lab_0x40d3f5;\n    }\n  lab_0x40d505:;\n    int64_t v27 = 2 * v7 | 1; // 0x40d505\n    int64_t * v28 = (int64_t *)a3; // 0x40d51e\n    int64_t * mem = realloc(v28, 8 * (int32_t)v27); // 0x40d51e\n    if (mem == NULL) {\n        // 0x40d486\n        return 12;\n    }\n    int64_t v29 = (int64_t)mem; // 0x40d51e\n    *v28 = v29;\n    *a5 = v27;\n    v6 = v29;\n    v8 = v7;\n    v4 = v5;\n    goto lab_0x40d3f5;\n  lab_0x40d3f5:\n    // 0x40d3f5\n    *(int64_t *)a4 = v8 + 1;\n    char * name = (char *)v4; // 0x40d404\n    *(int64_t *)(8 * v8 + v6) = (int64_t)wctype(name);\n    int64_t v30 = v9 ? -1 : 1;\n    int64_t v31 = (int64_t)\"alnum\"; // 0x40d3a0\n    int64_t v32 = v4; // 0x40d3a0\n    int64_t v33 = 6; // 0x40d3a0\n    unsigned char v34 = *(char *)v32; // 0x40d41a\n    char v35 = *(char *)v31; // 0x40d41a\n    char v36 = v35; // 0x40d41a\n    bool v37 = false; // 0x40d41a\n    while (v34 == v35) {\n        int64_t v38 = v33 - 1; // 0x40d41a\n        v31 += v30;\n        v32 += v30;\n        v33 = v38;\n        v36 = v34;\n        v37 = true;\n        if (v38 == 0) {\n            // break -> \n            break;\n        }\n        v34 = *(char *)v32;\n        v35 = *(char *)v31;\n        v36 = v35;\n        v37 = false;\n    }\n    unsigned char v39 = v36;\n    int64_t v40 = (int64_t)\"cntrl\"; // 0x40d423\n    int64_t v41 = v4; // 0x40d423\n    int64_t v42 = 6; // 0x40d423\n    if ((v34 >= v39 && !v37) == v34 < v39) {\n        int64_t v43 = (int64_t)*__ctype_b_loc(); // 0x40d4a4\n        if (a1 != 0) {\n            int64_t v44 = 0;\n            unsigned char v45; // 0x40d6ce\n            unsigned char v46; // 0x40d3a0\n            int64_t * v47; // 0x40d6e3\n            if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                // 0x40d6ce\n                v45 = *(char *)(v44 + a1);\n                v46 = v45 % 64;\n                v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n            }\n            int64_t v48 = v44 + 1; // 0x40d6f1\n            while (v44 != 255) {\n                // 0x40d6c8\n                v44 = v48;\n                if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                    // 0x40d6ce\n                    v45 = *(char *)(v44 + a1);\n                    v46 = v45 % 64;\n                    v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                    *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n                }\n                // 0x40d6e7\n                v48 = v44 + 1;\n            }\n        } else {\n            int64_t v49 = 0;\n            int64_t * v50; // 0x40d4c3\n            if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                // 0x40d4b6\n                v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                *v50 = *v50 | 1 << v49 % 64;\n            }\n            int64_t v51 = v49 + 1; // 0x40d4d2\n            while (v49 != 255) {\n                // 0x40d4b0\n                v49 = v51;\n                if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                    // 0x40d4b6\n                    v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                    *v50 = *v50 | 1 << v49 % 64;\n                }\n                // 0x40d4c7\n                v51 = v49 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v52 = *(char *)v41; // 0x40d432\n    char v53 = *(char *)v40; // 0x40d432\n    char v54 = v53; // 0x40d432\n    bool v55 = false; // 0x40d432\n    while (v52 == v53) {\n        int64_t v56 = v42 - 1; // 0x40d432\n        v40 += v30;\n        v41 += v30;\n        v42 = v56;\n        v54 = v52;\n        v55 = true;\n        if (v56 == 0) {\n            // break -> \n            break;\n        }\n        v52 = *(char *)v41;\n        v53 = *(char *)v40;\n        v54 = v53;\n        v55 = false;\n    }\n    unsigned char v57 = v54;\n    int64_t v58 = (int64_t)\"lower\"; // 0x40d43b\n    int64_t v59 = v4; // 0x40d43b\n    int64_t v60 = 6; // 0x40d43b\n    if ((v52 >= v57 && !v55) == v52 < v57) {\n        int64_t v61 = (int64_t)*__ctype_b_loc(); // 0x40d44d\n        if (a1 != 0) {\n            int64_t v62 = 0;\n            unsigned char v63; // 0x40d706\n            unsigned char v64; // 0x40d3a0\n            int64_t * v65; // 0x40d71b\n            if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                // 0x40d706\n                v63 = *(char *)(v62 + a1);\n                v64 = v63 % 64;\n                v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n            }\n            int64_t v66 = v62 + 1; // 0x40d729\n            while (v62 != 255) {\n                // 0x40d700\n                v62 = v66;\n                if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                    // 0x40d706\n                    v63 = *(char *)(v62 + a1);\n                    v64 = v63 % 64;\n                    v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                    *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n                }\n                // 0x40d71f\n                v66 = v62 + 1;\n            }\n        } else {\n            int64_t v67 = 0;\n            int64_t * v68; // 0x40d473\n            if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                // 0x40d466\n                v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                *v68 = *v68 | 1 << v67 % 64;\n            }\n            int64_t v69 = v67 + 1; // 0x40d482\n            while (v67 != 255) {\n                // 0x40d460\n                v67 = v69;\n                if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                    // 0x40d466\n                    v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                    *v68 = *v68 | 1 << v67 % 64;\n                }\n                // 0x40d477\n                v69 = v67 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v70 = *(char *)v59; // 0x40d551\n    char v71 = *(char *)v58; // 0x40d551\n    char v72 = v71; // 0x40d551\n    bool v73 = false; // 0x40d551\n    while (v70 == v71) {\n        int64_t v74 = v60 - 1; // 0x40d551\n        v58 += v30;\n        v59 += v30;\n        v60 = v74;\n        v72 = v70;\n        v73 = true;\n        if (v74 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v59;\n        v71 = *(char *)v58;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v75 = v72;\n    int64_t v76 = (int64_t)\"space\"; // 0x40d55a\n    int64_t v77 = v4; // 0x40d55a\n    int64_t v78 = 6; // 0x40d55a\n    if ((v70 >= v75 && !v73) == v70 < v75) {\n        int64_t v79 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v80 = 0;\n            unsigned char v81; // 0x40d73f\n            unsigned char v82; // 0x40d3a0\n            int64_t * v83; // 0x40d754\n            if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                // 0x40d73f\n                v81 = *(char *)(v80 + a1);\n                v82 = v81 % 64;\n                v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n            }\n            int64_t v84 = v80 + 1; // 0x40d762\n            while (v80 != 255) {\n                // 0x40d738\n                v80 = v84;\n                if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                    // 0x40d73f\n                    v81 = *(char *)(v80 + a1);\n                    v82 = v81 % 64;\n                    v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                    *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n                }\n                // 0x40d758\n                v84 = v80 + 1;\n            }\n        } else {\n            int64_t v85 = 0;\n            int64_t * v86; // 0x40d5ec\n            if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                // 0x40d5df\n                v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                *v86 = *v86 | 1 << v85 % 64;\n            }\n            int64_t v87 = v85 + 1; // 0x40d5fb\n            while (v85 != 255) {\n                // 0x40d5d8\n                v85 = v87;\n                if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                    // 0x40d5df\n                    v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                    *v86 = *v86 | 1 << v85 % 64;\n                }\n                // 0x40d5f0\n                v87 = v85 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v88 = *(char *)v77; // 0x40d569\n    char v89 = *(char *)v76; // 0x40d569\n    char v90 = v89; // 0x40d569\n    bool v91 = false; // 0x40d569\n    while (v88 == v89) {\n        // 0x40d55c\n        v78--;\n        v76 += v30;\n        v77 += v30;\n        v90 = v88;\n        v91 = true;\n        if (v78 == 0) {\n            // break -> \n            break;\n        }\n        v88 = *(char *)v77;\n        v89 = *(char *)v76;\n        v90 = v89;\n        v91 = false;\n    }\n    unsigned char v92 = v90;\n    int64_t v93 = (int64_t)\"alpha\"; // 0x40d572\n    int64_t v94 = v4; // 0x40d572\n    int64_t v95 = 6; // 0x40d572\n    if ((v88 >= v92 && !v91) == v88 < v92) {\n        int64_t v96 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v97 = 0;\n            unsigned char v98; // 0x40d8c7\n            unsigned char v99; // 0x40d3a0\n            int64_t * v100; // 0x40d8dc\n            if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                // 0x40d8c7\n                v98 = *(char *)(v97 + a1);\n                v99 = v98 % 64;\n                v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n            }\n            int64_t v101 = v97 + 1; // 0x40d8ea\n            while (v97 != 255) {\n                // 0x40d8c0\n                v97 = v101;\n                if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                    // 0x40d8c7\n                    v98 = *(char *)(v97 + a1);\n                    v99 = v98 % 64;\n                    v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                    *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n                }\n                // 0x40d8e0\n                v101 = v97 + 1;\n            }\n        } else {\n            int64_t v102 = 0;\n            int64_t * v103; // 0x40d5a4\n            if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                // 0x40d597\n                v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                *v103 = *v103 | 1 << v102 % 64;\n            }\n            int64_t v104 = v102 + 1; // 0x40d5b3\n            while (v102 != 255) {\n                // 0x40d590\n                v102 = v104;\n                if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                    // 0x40d597\n                    v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                    *v103 = *v103 | 1 << v102 % 64;\n                }\n                // 0x40d5a8\n                v104 = v102 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v105 = *(char *)v94; // 0x40d60f\n    char v106 = *(char *)v93; // 0x40d60f\n    char v107 = v106; // 0x40d60f\n    bool v108 = false; // 0x40d60f\n    while (v105 == v106) {\n        int64_t v109 = v95 - 1; // 0x40d60f\n        v93 += v30;\n        v94 += v30;\n        v95 = v109;\n        v107 = v105;\n        v108 = true;\n        if (v109 == 0) {\n            // break -> \n            break;\n        }\n        v105 = *(char *)v94;\n        v106 = *(char *)v93;\n        v107 = v106;\n        v108 = false;\n    }\n    unsigned char v110 = v107;\n    int64_t v111 = (int64_t)\"digit\"; // 0x40d618\n    int64_t v112 = v4; // 0x40d618\n    int64_t v113 = 6; // 0x40d618\n    if ((v105 >= v110 && !v108) == v105 < v110) {\n        int64_t v114 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v115 = 0;\n            unsigned char v116; // 0x40d894\n            unsigned char v117; // 0x40d3a0\n            int64_t * v118; // 0x40d8a9\n            if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                // 0x40d894\n                v116 = *(char *)(v115 + a1);\n                v117 = v116 % 64;\n                v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n            }\n            int64_t v119 = v115 + 1; // 0x40d8b7\n            while (v115 != 255) {\n                // 0x40d88d\n                v115 = v119;\n                if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                    // 0x40d894\n                    v116 = *(char *)(v115 + a1);\n                    v117 = v116 % 64;\n                    v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                    *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n                }\n                // 0x40d8ad\n                v119 = v115 + 1;\n            }\n        } else {\n            int64_t v120 = 0;\n            int64_t * v121; // 0x40d6ac\n            if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                // 0x40d69f\n                v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                *v121 = *v121 | 1 << v120 % 64;\n            }\n            int64_t v122 = v120 + 1; // 0x40d6bb\n            while (v120 != 255) {\n                // 0x40d698\n                v120 = v122;\n                if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                    // 0x40d69f\n                    v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                    *v121 = *v121 | 1 << v120 % 64;\n                }\n                // 0x40d6b0\n                v122 = v120 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v123 = *(char *)v112; // 0x40d627\n    char v124 = *(char *)v111; // 0x40d627\n    char v125 = v124; // 0x40d627\n    bool v126 = false; // 0x40d627\n    while (v123 == v124) {\n        // 0x40d61a\n        v113--;\n        v111 += v30;\n        v112 += v30;\n        v125 = v123;\n        v126 = true;\n        if (v113 == 0) {\n            // break -> \n            break;\n        }\n        v123 = *(char *)v112;\n        v124 = *(char *)v111;\n        v125 = v124;\n        v126 = false;\n    }\n    unsigned char v127 = v125;\n    int64_t v128 = (int64_t)\"print\"; // 0x40d630\n    int64_t v129 = v4; // 0x40d630\n    int64_t v130 = 6; // 0x40d630\n    if ((v123 >= v127 && !v126) == v123 < v127) {\n        int64_t v131 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v132 = 0;\n            unsigned char v133; // 0x40d8fa\n            unsigned char v134; // 0x40d3a0\n            int64_t * v135; // 0x40d90f\n            if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                // 0x40d8fa\n                v133 = *(char *)(v132 + a1);\n                v134 = v133 % 64;\n                v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n            }\n            int64_t v136 = v132 + 1; // 0x40d91d\n            while (v132 != 255) {\n                // 0x40d8f3\n                v132 = v136;\n                if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                    // 0x40d8fa\n                    v133 = *(char *)(v132 + a1);\n                    v134 = v133 % 64;\n                    v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                    *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n                }\n                // 0x40d913\n                v136 = v132 + 1;\n            }\n        } else {\n            int64_t v137 = 0;\n            int64_t * v138; // 0x40d664\n            if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                // 0x40d657\n                v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                *v138 = *v138 | 1 << v137 % 64;\n            }\n            int64_t v139 = v137 + 1; // 0x40d673\n            while (v137 != 255) {\n                // 0x40d650\n                v137 = v139;\n                if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                    // 0x40d657\n                    v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                    *v138 = *v138 | 1 << v137 % 64;\n                }\n                // 0x40d668\n                v139 = v137 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v140 = *(char *)v129; // 0x40d776\n    char v141 = *(char *)v128; // 0x40d776\n    char v142 = v141; // 0x40d776\n    bool v143 = false; // 0x40d776\n    while (v140 == v141) {\n        int64_t v144 = v130 - 1; // 0x40d776\n        v128 += v30;\n        v129 += v30;\n        v130 = v144;\n        v142 = v140;\n        v143 = true;\n        if (v144 == 0) {\n            // break -> \n            break;\n        }\n        v140 = *(char *)v129;\n        v141 = *(char *)v128;\n        v142 = v141;\n        v143 = false;\n    }\n    unsigned char v145 = v142;\n    int64_t v146 = (int64_t)\"upper\"; // 0x40d77f\n    int64_t v147 = v4; // 0x40d77f\n    int64_t v148 = 6; // 0x40d77f\n    if ((v140 >= v145 && !v143) == v140 < v145) {\n        int64_t v149 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v150 = 0;\n            unsigned char v151; // 0x40dad1\n            unsigned char v152; // 0x40d3a0\n            int64_t * v153; // 0x40dae6\n            if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                // 0x40dad1\n                v151 = *(char *)(v150 + a1);\n                v152 = v151 % 64;\n                v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n            }\n            int64_t v154 = v150 + 1; // 0x40daf4\n            while (v150 != 255) {\n                // 0x40daca\n                v150 = v154;\n                if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                    // 0x40dad1\n                    v151 = *(char *)(v150 + a1);\n                    v152 = v151 % 64;\n                    v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                    *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n                }\n                // 0x40daea\n                v154 = v150 + 1;\n            }\n        } else {\n            int64_t v155 = 0;\n            int64_t * v156; // 0x40d7b4\n            if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                // 0x40d7a7\n                v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                *v156 = *v156 | 1 << v155 % 64;\n            }\n            int64_t v157 = v155 + 1; // 0x40d7c3\n            while (v155 != 255) {\n                // 0x40d7a0\n                v155 = v157;\n                if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                    // 0x40d7a7\n                    v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                    *v156 = *v156 | 1 << v155 % 64;\n                }\n                // 0x40d7b8\n                v157 = v155 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v158 = *(char *)v147; // 0x40d7d7\n    char v159 = *(char *)v146; // 0x40d7d7\n    char v160 = v159; // 0x40d7d7\n    bool v161 = false; // 0x40d7d7\n    while (v158 == v159) {\n        int64_t v162 = v148 - 1; // 0x40d7d7\n        v146 += v30;\n        v147 += v30;\n        v148 = v162;\n        v160 = v158;\n        v161 = true;\n        if (v162 == 0) {\n            // break -> \n            break;\n        }\n        v158 = *(char *)v147;\n        v159 = *(char *)v146;\n        v160 = v159;\n        v161 = false;\n    }\n    unsigned char v163 = v160;\n    int64_t v164 = (int64_t)\"blank\"; // 0x40d7e0\n    int64_t v165 = v4; // 0x40d7e0\n    int64_t v166 = 6; // 0x40d7e0\n    if ((v158 >= v163 && !v161) == v158 < v163) {\n        int64_t v167 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v168 = 0;\n            unsigned char v169; // 0x40db3b\n            unsigned char v170; // 0x40d3a0\n            int64_t * v171; // 0x40db50\n            if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                // 0x40db3b\n                v169 = *(char *)(v168 + a1);\n                v170 = v169 % 64;\n                v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n            }\n            int64_t v172 = v168 + 1; // 0x40db5f\n            while (v168 != 255) {\n                // 0x40db34\n                v168 = v172;\n                if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                    // 0x40db3b\n                    v169 = *(char *)(v168 + a1);\n                    v170 = v169 % 64;\n                    v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                    *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n                }\n                // 0x40db54\n                v172 = v168 + 1;\n            }\n        } else {\n            int64_t v173 = 0;\n            int64_t * v174; // 0x40d80e\n            if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                // 0x40d801\n                v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                *v174 = *v174 | 1 << v173 % 64;\n            }\n            int64_t v175 = v173 + 1; // 0x40d81d\n            while (v173 != 255) {\n                // 0x40d7fa\n                v173 = v175;\n                if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                    // 0x40d801\n                    v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                    *v174 = *v174 | 1 << v173 % 64;\n                }\n                // 0x40d812\n                v175 = v173 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v176 = *(char *)v165; // 0x40d83b\n    char v177 = *(char *)v164; // 0x40d83b\n    char v178 = v177; // 0x40d83b\n    bool v179 = false; // 0x40d83b\n    while (v176 == v177) {\n        int64_t v180 = v166 - 1; // 0x40d83b\n        v164 += v30;\n        v165 += v30;\n        v166 = v180;\n        v178 = v176;\n        v179 = true;\n        if (v180 == 0) {\n            // break -> \n            break;\n        }\n        v176 = *(char *)v165;\n        v177 = *(char *)v164;\n        v178 = v177;\n        v179 = false;\n    }\n    unsigned char v181 = v178;\n    int64_t v182 = (int64_t)\"graph\"; // 0x40d844\n    int64_t v183 = v4; // 0x40d844\n    int64_t v184 = 6; // 0x40d844\n    if ((v176 >= v181 && !v179) == v176 < v181) {\n        int64_t v185 = (int64_t)*__ctype_b_loc(); // 0x40d856\n        if (a1 != 0) {\n            int64_t v186 = 0;\n            unsigned char v187; // 0x40db08\n            unsigned char v188; // 0x40d3a0\n            int64_t * v189; // 0x40db1d\n            if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                // 0x40db08\n                v187 = *(char *)(v186 + a1);\n                v188 = v187 % 64;\n                v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n            }\n            int64_t v190 = v186 + 1; // 0x40db2b\n            while (v186 != 255) {\n                // 0x40db02\n                v186 = v190;\n                if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                    // 0x40db08\n                    v187 = *(char *)(v186 + a1);\n                    v188 = v187 % 64;\n                    v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                    *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n                }\n                // 0x40db21\n                v190 = v186 + 1;\n            }\n        } else {\n            int64_t v191 = 0;\n            int64_t * v192; // 0x40d875\n            if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                // 0x40d868\n                v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                *v192 = *v192 | 1 << v191 % 64;\n            }\n            int64_t v193 = v191 + 1; // 0x40d884\n            while (v191 != 255) {\n                // 0x40d862\n                v191 = v193;\n                if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                    // 0x40d868\n                    v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                    *v192 = *v192 | 1 << v191 % 64;\n                }\n                // 0x40d879\n                v193 = v191 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    unsigned char v194 = *(char *)v183; // 0x40d931\n    char v195 = *(char *)v182; // 0x40d931\n    char v196 = v195; // 0x40d931\n    bool v197 = false; // 0x40d931\n    while (v194 == v195) {\n        int64_t v198 = v184 - 1; // 0x40d931\n        v182 += v30;\n        v183 += v30;\n        v184 = v198;\n        v196 = v194;\n        v197 = true;\n        if (v198 == 0) {\n            // break -> \n            break;\n        }\n        v194 = *(char *)v183;\n        v195 = *(char *)v182;\n        v196 = v195;\n        v197 = false;\n    }\n    unsigned char v199 = v196;\n    if ((v194 >= v199 && !v197) == v194 < v199) {\n        int64_t v200 = (int64_t)*__ctype_b_loc(); // 0x40d948\n        if (a1 != 0) {\n            int64_t v201 = 0;\n            unsigned char v202; // 0x40d988\n            unsigned char v203; // 0x40d3a0\n            int64_t * v204; // 0x40d99d\n            if (*(int16_t *)(2 * v201 + v200) < 0) {\n                // 0x40d988\n                v202 = *(char *)(v201 + a1);\n                v203 = v202 % 64;\n                v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n            }\n            int64_t v205 = v201 + 1; // 0x40d9ab\n            while (v201 != 255) {\n                // 0x40d981\n                v201 = v205;\n                if (*(int16_t *)(2 * v201 + v200) < 0) {\n                    // 0x40d988\n                    v202 = *(char *)(v201 + a1);\n                    v203 = v202 % 64;\n                    v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                    *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n                }\n                // 0x40d9a1\n                v205 = v201 + 1;\n            }\n        } else {\n            int64_t v206 = 0;\n            int64_t * v207; // 0x40d964\n            if (*(int16_t *)(2 * v206 + v200) < 0) {\n                // 0x40d957\n                v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                *v207 = *v207 | 1 << v206 % 64;\n            }\n            int64_t v208 = v206 + 1; // 0x40d973\n            while (v206 != 255) {\n                // 0x40d950\n                v206 = v208;\n                if (*(int16_t *)(2 * v206 + v200) < 0) {\n                    // 0x40d957\n                    v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                    *v207 = *v207 | 1 << v206 % 64;\n                }\n                // 0x40d968\n                v208 = v206 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    // 0x40d9b2\n    if (strcmp(name, \"punct\") == 0) {\n        int64_t v209 = (int64_t)*__ctype_b_loc(); // 0x40d9cf\n        if (a1 != 0) {\n            int64_t v210 = 0;\n            unsigned char v211; // 0x40da0d\n            unsigned char v212; // 0x40d3a0\n            int64_t * v213; // 0x40da22\n            if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                // 0x40da0d\n                v211 = *(char *)(v210 + a1);\n                v212 = v211 % 64;\n                v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n            }\n            int64_t v214 = v210 + 1; // 0x40da30\n            while (v210 != 255) {\n                // 0x40da07\n                v210 = v214;\n                if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                    // 0x40da0d\n                    v211 = *(char *)(v210 + a1);\n                    v212 = v211 % 64;\n                    v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                    *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n                }\n                // 0x40da26\n                v214 = v210 + 1;\n            }\n        } else {\n            int64_t v215 = 0;\n            int64_t * v216; // 0x40d9ea\n            if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                // 0x40d9dd\n                v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                *v216 = *v216 | 1 << v215 % 64;\n            }\n            int64_t v217 = v215 + 1; // 0x40d9f9\n            while (v215 != 255) {\n                // 0x40d9d7\n                v215 = v217;\n                if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                    // 0x40d9dd\n                    v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                    *v216 = *v216 | 1 << v215 % 64;\n                }\n                // 0x40d9ee\n                v217 = v215 + 1;\n            }\n        }\n        // 0x40d486\n        return 0;\n    }\n    // 0x40da37\n    if (strcmp(name, \"xdigit\") != 0) {\n        // 0x40d486\n        return 4;\n    }\n    int64_t v218 = (int64_t)*__ctype_b_loc() + 1;\n    if (a1 == 0) {\n        int64_t v219 = 0;\n        int64_t * v220; // 0x40da70\n        if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n            // 0x40da63\n            v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n            *v220 = *v220 | 1 << v219 % 64;\n        }\n        int64_t v221 = v219 + 1; // 0x40da7f\n        while (v219 != 255) {\n            // 0x40da5c\n            v219 = v221;\n            if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n                // 0x40da63\n                v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n                *v220 = *v220 | 1 << v219 % 64;\n            }\n            // 0x40da74\n            v221 = v219 + 1;\n        }\n        // 0x40d486\n        return 0;\n    }\n    int64_t v222 = 0;\n    unsigned char v223; // 0x40da94\n    unsigned char v224; // 0x40d3a0\n    int64_t * v225; // 0x40daa9\n    if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n        // 0x40da94\n        v223 = *(char *)(v222 + a1);\n        v224 = v223 % 64;\n        v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n        *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n    }\n    int64_t v226 = v222 + 1; // 0x40dab7\n    while (v222 != 255) {\n        // 0x40da8d\n        v222 = v226;\n        if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n            // 0x40da94\n            v223 = *(char *)(v222 + a1);\n            v224 = v223 % 64;\n            v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n            *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n        }\n        // 0x40daad\n        v226 = v222 + 1;\n    }\n    // 0x40d486\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40db70",
            "funcStartAddr": "40db70",
            "funcEndAddr": "40dda5",
            "decompiledFuncCode": "int64_t function_40db70(int64_t a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-96, 0x40db9d\n    int64_t * mem = calloc(32, 1); // 0x40dba6\n    if (mem == NULL) {\n        // 0x40dd40\n        *(int32_t *)a6 = 12;\n        // 0x40dd19\n        return 0;\n    }\n    int64_t * mem2 = calloc(80, 1); // 0x40dbc1\n    if (mem2 == NULL) {\n        // 0x40dd60\n        free(mem);\n        *(int32_t *)a6 = 12;\n        // 0x40dd19\n        return 0;\n    }\n    int64_t v2 = (int64_t)mem; // 0x40dba6\n    int64_t v3 = (int64_t)mem2; // 0x40dbc1\n    char * v4 = (char *)(v3 + 32); // 0x40dbd6\n    unsigned char v5 = (char)a5; // 0x40dbda\n    *v4 = *v4 & -2 | v5 % 2;\n    int64_t v6 = function_40d3a0(a2, v2, v3 + 24, v3 + 72, &v1, (int64_t)a3, 0); // 0x40dc03\n    int32_t v7 = v6; // 0x40dc0a\n    if (v7 != 0) {\n        // 0x40dd80\n        free(mem);\n        function_409170(v3);\n        *(int32_t *)a6 = v7;\n        // 0x40dd19\n        return 0;\n    }\n    // 0x40dc12\n    int64_t v8; // 0x40db70\n    char v9 = *(char *)&v8; // 0x40dc12\n    int64_t v10 = v9; // 0x40dc12\n    v8 = v10;\n    v8 = v10;\n    int64_t v11 = (int64_t)a4; // 0x40dc1e\n    if (v9 != 0) {\n        int64_t v12 = v8;\n        v11++;\n        char v13 = *(char *)v11; // 0x40dc4d\n        v8 = v13;\n        int64_t * v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2); // 0x40dc52\n        *v14 = *v14 | 1 << v12 % 64;\n        while (v13 != 0) {\n            v12 = v8;\n            v11++;\n            v13 = *(char *)v11;\n            v8 = v13;\n            v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2);\n            *v14 = *v14 | 1 << v12 % 64;\n        }\n    }\n    if (v5 != 0) {\n        int64_t v15 = v2;\n        int64_t * v16 = (int64_t *)v15; // 0x40dc66\n        *v16 = -1 - *v16;\n        int64_t v17 = v15 + 8; // 0x40dc70\n        while (v2 + 24 != v15) {\n            // 0x40dc66\n            v15 = v17;\n            v16 = (int64_t *)v15;\n            *v16 = -1 - *v16;\n            v17 = v15 + 8;\n        }\n    }\n    int32_t * v18 = (int32_t *)(a1 + 180); // 0x40dc72\n    if (*v18 >= 2) {\n        int64_t v19 = *(int64_t *)(a1 + 120); // 0x40dc7b\n        v8 = v19;\n        *mem = *mem & *(int64_t *)v19;\n        int64_t v20 = 0; // 0x40dc89\n        v20 += 8;\n        int64_t * v21 = (int64_t *)(v20 + v2); // 0x40dc85\n        *v21 = *v21 & *(int64_t *)(v20 + v19);\n        while (v20 != 24) {\n            // 0x40dc81\n            v20 += 8;\n            v21 = (int64_t *)(v20 + v2);\n            *v21 = *v21 & *(int64_t *)(v20 + v8);\n        }\n    }\n    int64_t v22 = a1 + 112; // 0x40dc93\n    int64_t v23 = a1 + 128; // 0x40dc97\n    v8 = 0;\n    int64_t v24; // bp-88, 0x40db70\n    int64_t v25 = &v24; // 0x40dca2\n    v24 = v2;\n    int64_t result = function_40a780(v22, v23, 0, 0, v25); // 0x40dcb7\n    if (result != 0) {\n        // 0x40dcc4\n        if (*v18 < 2) {\n            // 0x40dd50\n            function_409170(v3);\n            // 0x40dd19\n            return result;\n        }\n        char * v26 = (char *)(a1 + 176); // 0x40dcd1\n        *v26 = *v26 | 2;\n        v24 = v3;\n        int64_t v27 = function_40a780(v22, v23, 0, 0, v25); // 0x40dcf1\n        if (v27 != 0) {\n            // 0x40dcfb\n            int64_t v28; // bp-72, 0x40db70\n            int64_t result2 = function_40a780(v22, v23, (int32_t)result, (int32_t)v27, (int64_t)&v28); // 0x40dd11\n            // 0x40dd19\n            return result2;\n        }\n    }\n    // 0x40dd30\n    free(mem);\n    function_409170(v3);\n    // 0x40dd40\n    *(int32_t *)a6 = 12;\n    // 0x40dd19\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40ddb0",
            "funcStartAddr": "40ddb0",
            "funcEndAddr": "40e288",
            "decompiledFuncCode": "int64_t function_40ddb0(int64_t result, int64_t result2, int64_t a3, int64_t a4) {\n    int64_t v1 = a4;\n    int32_t * v2 = (int32_t *)(result + 180); // 0x40ddc7\n    int32_t v3 = 0; // 0x40ddd2\n    if (*v2 == 1) {\n        // 0x40ddd4\n        v3 = (int32_t)(*(int64_t *)(result + 24) / 0x400000) % 2;\n    }\n    // 0x40dde3\n    if (result2 < 1) {\n        // 0x40dfa3\n        return result;\n    }\n    char * v4 = (char *)(result + 26);\n    int64_t * v5 = (int64_t *)(result + 16);\n    char wstr; // bp-312, 0x40ddb0\n    int64_t v6 = &wstr;\n    char ps; // bp-320, 0x40ddb0\n    int64_t v7 = &ps;\n    int64_t v8 = a3; // 0x40de01\n    int64_t v9 = 0; // 0x40de01\n    int64_t v10 = result; // 0x40de01\n    int64_t v11; // 0x40ddb0\n    int64_t v12; // 0x40ddb0\n    int64_t v13; // 0x40ddb0\n    int64_t v14; // 0x40ddb0\n    int64_t v15; // 0x40ddb0\n    int64_t v16; // 0x40ddb0\n    unsigned char v17; // 0x40de64\n    int64_t v18; // 0x40dfb9\n    while (true) {\n      lab_0x40de41_2:\n        // 0x40de41\n        v13 = v10;\n        v11 = v9;\n        int64_t v19 = *(int64_t *)(8 * v11 + v8); // 0x40de49\n        v1 = v13;\n        int64_t v20 = 16 * v19; // 0x40de57\n        v16 = v20 + v13;\n        v17 = *(char *)(v16 + 8);\n        if (v17 != 1) {\n            int64_t v21 = v17; // 0x40de64\n            char * v22 = NULL; // 0x40ddb0\n            int64_t v23 = v13; // 0x40ddb0\n            switch (v17) {\n                case 3: {\n                    int64_t v24 = (int64_t)v22; // 0x40e108\n                    int64_t v25 = *(int64_t *)(*(int64_t *)(v23 + v20) + v24); // 0x40e10d\n                    int64_t v26 = 0; // 0x40e119\n                    int64_t v27 = 8 * v24;\n                    int64_t v28 = v23;\n                    int64_t v29 = v28; // 0x40e124\n                    char * v30; // 0x40ddb0\n                    char * v31; // 0x40ddb0\n                    int64_t v32; // 0x40e134\n                    int32_t v33; // 0x40e14b\n                    if ((1 << v26 % 64 & v25) != 0) {\n                        // 0x40e126\n                        v31 = (char *)(v27 + a4);\n                        *v31 = 1;\n                        v29 = v28;\n                        if (v3 != 0) {\n                            // 0x40e134\n                            v32 = v27 + 128;\n                            v30 = v31;\n                            if ((int32_t)v32 < 384) {\n                                // 0x40e143\n                                v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                v30 = (char *)((int64_t)v33 + a4);\n                            }\n                            // 0x40e152\n                            *v30 = 1;\n                            v29 = v32 & 0xffffffff;\n                        }\n                    }\n                    int64_t v34 = v29;\n                    int64_t v35 = v27 + 1; // 0x40e159\n                    v26 = v26 + 1 & 0xffffffff;\n                    while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                        // 0x40e120\n                        v27 = v35;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40e126\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40e134\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40e143\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40e152\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40e155\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                    }\n                    // 0x40e163\n                    v14 = v21;\n                    v15 = v16;\n                    v12 = v34;\n                    while (v22 != (char *)24) {\n                        // 0x40e178\n                        v1 = v34;\n                        v22 = (char *)(v24 + 8);\n                        v24 = (int64_t)v22;\n                        v25 = *(int64_t *)(*(int64_t *)(v34 + v20) + v24);\n                        v26 = 0;\n                        v27 = 8 * v24;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40e126\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40e134\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40e143\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40e152\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40e155\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                        while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                            // 0x40e120\n                            v27 = v35;\n                            v28 = v34;\n                            v29 = v28;\n                            if ((1 << v26 % 64 & v25) != 0) {\n                                // 0x40e126\n                                v31 = (char *)(v27 + a4);\n                                *v31 = 1;\n                                v29 = v28;\n                                if (v3 != 0) {\n                                    // 0x40e134\n                                    v32 = v27 + 128;\n                                    v30 = v31;\n                                    if ((int32_t)v32 < 384) {\n                                        // 0x40e143\n                                        v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                        v30 = (char *)((int64_t)v33 + a4);\n                                    }\n                                    // 0x40e152\n                                    *v30 = 1;\n                                    v29 = v32 & 0xffffffff;\n                                }\n                            }\n                            // 0x40e155\n                            v34 = v29;\n                            v35 = v27 + 1;\n                            v26 = v26 + 1 & 0xffffffff;\n                        }\n                        // 0x40e163\n                        v14 = v21;\n                        v15 = v16;\n                        v12 = v34;\n                    }\n                    goto lab_0x40de2f;\n                }\n                case 6: {\n                    // 0x40dfb5\n                    v18 = *(int64_t *)v16;\n                    if (*v2 < 2) {\n                        goto lab_0x40dfe6;\n                    } else {\n                        // 0x40dfc5\n                        if (*(int64_t *)(v18 + 72) != 0) {\n                            goto lab_0x40e0ac;\n                        } else {\n                            // 0x40dfd0\n                            if (*(char *)(v18 + 32) % 2 != 0) {\n                                goto lab_0x40e0ac;\n                            } else {\n                                // 0x40dfdb\n                                if (*(int64_t *)(v18 + 64) != 0) {\n                                    goto lab_0x40e0ac;\n                                } else {\n                                    goto lab_0x40dfe6;\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    int64_t v36 = v21 & 253; // 0x40de1a\n                    if (v36 == 5) {\n                        // break -> 0x40e184\n                        break;\n                    }\n                    // 0x40de26\n                    v14 = v36;\n                    v15 = v16;\n                    v12 = v13;\n                    if (v17 == 2) {\n                        int128_t v37 = __asm_movdqa(g28); // 0x40e200\n                        __asm_movups(*(int128_t *)&v1, v37);\n                        __asm_movups(*(int128_t *)(a4 + 16), v37);\n                        __asm_movups(*(int128_t *)(a4 + 32), v37);\n                        __asm_movups(*(int128_t *)(a4 + 48), v37);\n                        __asm_movups(*(int128_t *)(a4 + 64), v37);\n                        __asm_movups(*(int128_t *)(a4 + 80), v37);\n                        __asm_movups(*(int128_t *)(a4 + 96), v37);\n                        __asm_movups(*(int128_t *)(a4 + 112), v37);\n                        __asm_movups(*(int128_t *)(a4 + 128), v37);\n                        __asm_movups(*(int128_t *)(a4 + 144), v37);\n                        __asm_movups(*(int128_t *)(a4 + 160), v37);\n                        __asm_movups(*(int128_t *)(a4 + 176), v37);\n                        __asm_movups(*(int128_t *)(a4 + 192), v37);\n                        __asm_movups(*(int128_t *)(a4 + 208), v37);\n                        __asm_movups(*(int128_t *)(a4 + 224), v37);\n                        __asm_movups(*(int128_t *)(a4 + 240), v37);\n                        goto lab_0x40e26f;\n                    }\n                    goto lab_0x40de2f;\n                }\n            }\n        } else {\n            char * v38 = (char *)v16; // 0x40de6f\n            int64_t v39 = (int64_t)*v38; // 0x40de6f\n            *(char *)(v39 + a4) = 1;\n            if (v3 != 0) {\n                int32_t v40 = *(int32_t *)(4 * v39 + (int64_t)*__ctype_tolower_loc()); // 0x40de8e\n                *(char *)((int64_t)v40 + a4) = 1;\n            }\n            // 0x40de97\n            v14 = v39;\n            v15 = v16;\n            v12 = v13;\n            if ((*v4 & 64) == 0) {\n                goto lab_0x40de2f;\n            } else {\n                // 0x40dea2\n                v14 = v39;\n                v15 = v16;\n                v12 = v13;\n                if (*v2 < 2) {\n                    goto lab_0x40de2f;\n                } else {\n                    // 0x40deaf\n                    v1 = v20;\n                    wstr = *v38;\n                    int64_t v41 = v19 + 1; // 0x40dec2\n                    int64_t v42 = 1; // 0x40deca\n                    if (*v5 > v41) {\n                        // 0x40ded0\n                        v42 = 1;\n                        if ((*(int32_t *)(v16 + 24) & 0x2000ff) == 0x200001) {\n                            int64_t v43 = v41; // 0x40df1e\n                            int64_t v44; // bp-311, 0x40ddb0\n                            int64_t v45 = &v44; // 0x40ddb0\n                            int64_t v46 = v45 + 1; // 0x40df1a\n                            v43++;\n                            *(char *)v45 = *(char *)(v16 + 16);\n                            while (*v5 > v43) {\n                                int64_t v47 = 16 * v43 + v13; // 0x40df03\n                                v45 = v46;\n                                if ((*(int32_t *)(v47 + 8) & 0x2000ff) != 0x200001) {\n                                    // break -> 0x40df2f\n                                    break;\n                                }\n                                v46 = v45 + 1;\n                                v43++;\n                                *(char *)v45 = *(char *)v47;\n                            }\n                            // 0x40df2f\n                            v42 = v46 - v6;\n                        }\n                    }\n                    // 0x40df3a\n                    ps = 0;\n                    int32_t wc; // bp-324, 0x40ddb0\n                    int64_t v48 = function_407dd0(&wc, v6, v42); // 0x40df55\n                    v14 = v42;\n                    v15 = v6;\n                    v12 = &wc;\n                    if (v48 != v42) {\n                        goto lab_0x40de2f;\n                    } else {\n                        uint32_t wc2 = towlower(wc); // 0x40df67\n                        int64_t v49 = wc2; // 0x40df76\n                        int32_t v50 = wcrtomb(&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40df78\n                        v14 = v7;\n                        v15 = v49;\n                        v12 = v6;\n                        if (v50 == -1) {\n                            goto lab_0x40de2f;\n                        } else {\n                            int64_t v51 = v11 + 1; // 0x40df8c\n                            *(char *)((int64_t)wstr + a4) = 1;\n                            v8 = v7;\n                            v9 = v51;\n                            v10 = v6;\n                            if (v51 >= v49) {\n                                // 0x40dfa3\n                                return result2;\n                            }\n                            goto lab_0x40de41_2;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v17 != 2) {\n        // 0x40dfa3\n    }\n  lab_0x40de2f:;\n    int64_t v52 = v11 + 1; // 0x40de34\n    v8 = v14;\n    v9 = v52;\n    v10 = v12;\n    if (v52 >= v15) {\n        // 0x40dfa3\n        return result2;\n    }\n    goto lab_0x40de41_2;\n  lab_0x40dfe6:;\n    int64_t * v53 = (int64_t *)(v18 + 40); // 0x40dfe9\n    int64_t v54 = *v53; // 0x40dfe9\n    v14 = 6;\n    v15 = v16;\n    v12 = v13;\n    if (v54 >= 0 == (v54 != 0)) {\n        int64_t * v55 = (int64_t *)v18; // 0x40e00f\n        int64_t v56 = 0; // 0x40dff8\n        ps = 0;\n        int64_t v57 = 4 * v56; // 0x40e01d\n        uint32_t wc3 = *(int32_t *)(*v55 + v57); // 0x40e025\n        int32_t v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40e029\n        int64_t v59 = v7; // 0x40e032\n        int32_t v60; // 0x40e055\n        int64_t v61; // 0x40e034\n        if (v58 != -1) {\n            // 0x40e034\n            v61 = wstr;\n            *(char *)(v61 + a4) = 1;\n            v59 = v61;\n            if (v3 != 0) {\n                // 0x40e048\n                v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                *(char *)((int64_t)v60 + a4) = 1;\n                v59 = v61;\n            }\n        }\n        int64_t v62 = wc3; // 0x40e025\n        int64_t v63 = v59;\n        int64_t v64 = v63; // 0x40e067\n        int64_t v65 = v62; // 0x40e067\n        uint32_t wc4; // 0x40e07d\n        int64_t v66; // 0x40e08c\n        int32_t v67; // 0x40e08e\n        if ((*v4 & 64) != 0) {\n            // 0x40e069\n            v64 = v63;\n            v65 = v62;\n            if (*v2 >= 2) {\n                // 0x40e076\n                wc4 = towlower(*(int32_t *)(*v55 + v57));\n                v66 = wc4;\n                v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                v64 = v7;\n                v65 = v66;\n                if (v67 != -1) {\n                    // 0x40e09d\n                    *(char *)((int64_t)wstr + a4) = 1;\n                    v64 = v7;\n                    v65 = v66;\n                }\n            }\n        }\n        // 0x40dff8\n        v56++;\n        v14 = v64;\n        v15 = v65;\n        v12 = v6;\n        while (v56 < *v53) {\n            // 0x40e006\n            ps = 0;\n            v57 = 4 * v56;\n            wc3 = *(int32_t *)(*v55 + v57);\n            v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps);\n            v59 = v7;\n            if (v58 != -1) {\n                // 0x40e034\n                v61 = wstr;\n                *(char *)(v61 + a4) = 1;\n                v59 = v61;\n                if (v3 != 0) {\n                    // 0x40e048\n                    v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                    *(char *)((int64_t)v60 + a4) = 1;\n                    v59 = v61;\n                }\n            }\n            // 0x40e05e\n            v62 = wc3;\n            v63 = v59;\n            v64 = v63;\n            v65 = v62;\n            if ((*v4 & 64) != 0) {\n                // 0x40e069\n                v64 = v63;\n                v65 = v62;\n                if (*v2 >= 2) {\n                    // 0x40e076\n                    wc4 = towlower(*(int32_t *)(*v55 + v57));\n                    v66 = wc4;\n                    v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                    v64 = v7;\n                    v65 = v66;\n                    if (v67 != -1) {\n                        // 0x40e09d\n                        *(char *)((int64_t)wstr + a4) = 1;\n                        v64 = v7;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x40dff8\n            v56++;\n            v14 = v64;\n            v15 = v65;\n            v12 = v6;\n        }\n    }\n    goto lab_0x40de2f;\n    // 0x40de41\n    goto lab_0x40de41_2;\n  lab_0x40e0ac:\n    // 0x40e0ac\n    ps = 0;\n    wstr = 0;\n    if (function_407dd0(NULL, v7, 1) == -2) {\n        // 0x40e0dd\n        *(char *)((int64_t)ps + a4) = 1;\n    }\n    char v68 = ps + 1; // 0x40e0e7\n    ps = v68;\n    v14 = 1;\n    v15 = v7;\n    v12 = 0;\n    while (v68 != 0) {\n        // 0x40e0b8\n        wstr = 0;\n        if (function_407dd0(NULL, v7, 1) == -2) {\n            // 0x40e0dd\n            *(char *)((int64_t)ps + a4) = 1;\n        }\n        // 0x40e0e7\n        v68 = ps + 1;\n        ps = v68;\n        v14 = 1;\n        v15 = v7;\n        v12 = 0;\n    }\n    goto lab_0x40de2f;\n  lab_0x40e26f:;\n    char * v69 = (char *)(result + 56); // 0x40e274\n    *v69 = *v69 | 1;\n    // 0x40dfa3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e290",
            "funcStartAddr": "40e290",
            "funcEndAddr": "40e514",
            "decompiledFuncCode": "int64_t function_40e290(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = 16 * a3 + a1; // 0x40e298\n    char v2 = *(char *)(v1 + 8); // 0x40e2a2\n    if (v2 == 7) {\n        int64_t v3 = *(int64_t *)(a4 + 8); // 0x40e3b8\n        int64_t v4 = v3 + a5; // 0x40e3bc\n        unsigned char v5 = *(char *)v4; // 0x40e3bc\n        if (v5 < 194) {\n            // 0x40e2e0\n            return 0;\n        }\n        uint64_t v6 = *(int64_t *)(a4 + 88); // 0x40e3ca\n        uint64_t v7 = a5 + 1;\n        if (v7 >= v6) {\n            // 0x40e2e0\n            return 0;\n        }\n        int64_t v8 = v3 + v7;\n        unsigned char v9 = *(char *)v8; // 0x40e3db\n        if (v5 < 224) {\n            // 0x40e4b3\n            if (v9 == -65 || (v9 ^ -128) < 63) {\n                // 0x40e2e0\n                return 2;\n            }\n            // 0x40e2e0\n            return 0;\n        }\n        int64_t v10; // 0x40e290\n        if (v5 < 240) {\n            // 0x40e3f3\n            v10 = 3;\n            if (v5 == -32 == v9 < 160) {\n                // 0x40e2e0\n                return 0;\n            }\n        } else {\n            if (v5 < 248) {\n                // 0x40e495\n                v10 = 4;\n                if (v5 == -16 == v9 < 144) {\n                    // 0x40e2e0\n                    return 0;\n                }\n            } else {\n                if (v5 < 252) {\n                    // 0x40e4cf\n                    v10 = 5;\n                    if (v5 == -8 == v9 < 136) {\n                        // 0x40e2e0\n                        return 0;\n                    }\n                } else {\n                    if (v5 >= 254) {\n                        // 0x40e2e0\n                        return 0;\n                    }\n                    // 0x40e4f6\n                    v10 = 6;\n                    if (v5 == -4 == v9 < 132) {\n                        // 0x40e2e0\n                        return 0;\n                    }\n                }\n            }\n        }\n        // 0x40e40c\n        if (v6 < v10 + a5) {\n            // 0x40e2e0\n            return 0;\n        }\n        // 0x40e419\n        if (v9 != -65 && (v9 ^ -128) >= 63) {\n            // 0x40e2e0\n            return 0;\n        }\n        int64_t v11 = v8; // 0x40e43e\n        v11++;\n        while (v10 + v4 != v11) {\n            char v12 = *(char *)v11;\n            if (v12 != -65 && (v12 ^ -128) >= 63) {\n                // 0x40e2e0\n                return 0;\n            }\n            v11++;\n        }\n        // 0x40e2e0\n        return v10 & 0xffffffff;\n    }\n    // 0x40e2b1\n    if (*(int32_t *)(a4 + 144) == 1) {\n        // 0x40e2e0\n        return 0;\n    }\n    int64_t v13 = function_409ac0(a4, a5); // 0x40e2c6\n    int64_t v14 = v13 & 0xffffffff; // 0x40e2cb\n    if (v2 == 5) {\n        if ((int32_t)v13 < 2) {\n            // 0x40e2e0\n            return 0;\n        }\n        if ((a5 & 64) == 0) {\n            // 0x40e2fc\n            if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 10) {\n                // 0x40e2e0\n                return 0;\n            }\n        }\n        // 0x40e307\n        if ((char)a5 > -1) {\n            // 0x40e2e0\n            return v14 & 0xffffffff;\n        }\n        // 0x40e30b\n        if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 0) {\n            // 0x40e2e0\n            return 0;\n        }\n        // 0x40e2e0\n        return v14 & 0xffffffff;\n    }\n    if (v2 == 6 != (int32_t)v13 > 1) {\n        // 0x40e2e0\n        return 0;\n    }\n    int64_t v15 = *(int64_t *)v1; // 0x40e320\n    int64_t * v16 = (int64_t *)(v15 + 64); // 0x40e323\n    int64_t v17 = *v16; // 0x40e323\n    int64_t v18 = *(int64_t *)(v15 + 40); // 0x40e327\n    if (v17 != 0) {\n        goto lab_0x40e33d;\n    } else {\n        // 0x40e330\n        if ((*(int64_t *)(v15 + 72) || v18) == 0) {\n            goto lab_0x40e47d;\n        } else {\n            goto lab_0x40e33d;\n        }\n    }\n  lab_0x40e3a2_2:\n    // 0x40e3a2\n    if (*(char *)(v15 + 32) % 2 == 0) {\n        // 0x40e2e0\n        return v14 & 0xffffffff;\n    }\n    // 0x40e2e0\n    return 0;\n  lab_0x40e33d:;\n    uint32_t wc = *(int32_t *)(*(int64_t *)(a4 + 16) + 4 * a5); // 0x40e341\n    if (v18 < 1) {\n        goto lab_0x40e36f;\n    } else {\n        int64_t v19 = *(int64_t *)v15; // 0x40e34a\n        if (*(int32_t *)v19 == wc) {\n            goto lab_0x40e3a2_2;\n        } else {\n            int64_t v20 = 1; // 0x40e366\n            while (v18 != v20) {\n                // 0x40e360\n                if (*(int32_t *)(4 * v20 + v19) == wc) {\n                    goto lab_0x40e3a2_2;\n                }\n                v20++;\n            }\n            goto lab_0x40e36f;\n        }\n    }\n  lab_0x40e36f:;\n    int64_t * v21 = (int64_t *)(v15 + 72); // 0x40e36f\n    int64_t v22 = v17; // 0x40e376\n    if (*v21 < 1) {\n        goto lab_0x40e44c;\n    } else {\n        int64_t v23 = 0; // 0x40e380\n        int64_t v24 = *(int64_t *)(v15 + 24); // 0x40e38e\n        while (iswctype(wc, (int32_t)*(int64_t *)(v24 + 8 * v23)) == 0) {\n            // 0x40e380\n            v23++;\n            if (v23 >= *v21) {\n                // 0x40e448\n                v22 = *v16;\n                goto lab_0x40e44c;\n            }\n            v24 = *(int64_t *)(v15 + 24);\n        }\n        goto lab_0x40e3a2_2;\n    }\n  lab_0x40e47d:\n    // 0x40e47d\n    if (*(char *)(v15 + 32) % 2 != 0) {\n        // 0x40e2e0\n        return v14 & 0xffffffff;\n    }\n    // 0x40e2e0\n    return 0;\n  lab_0x40e44c:\n    // 0x40e44c\n    if (v22 >= 1) {\n        int64_t v25 = 0; // 0x40e457\n        int64_t v26 = 4 * v25; // 0x40e460\n        if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n            // 0x40e466\n            if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                goto lab_0x40e3a2_2;\n            }\n        }\n        // 0x40e474\n        v25++;\n        while (v25 != v22) {\n            // 0x40e460\n            v26 = 4 * v25;\n            if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n                // 0x40e466\n                if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                    goto lab_0x40e3a2_2;\n                }\n            }\n            // 0x40e474\n            v25++;\n        }\n    }\n    goto lab_0x40e47d;\n}\n"
        },
        {
            "funcName": "function_40e520",
            "funcStartAddr": "40e520",
            "funcEndAddr": "40ec3f",
            "decompiledFuncCode": "int64_t function_40e520(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    // 0x40e520\n    int128_t v1; // 0x40e520\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 152); // 0x40e541\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x40e548\n    int64_t v5 = *v4; // 0x40e548\n    int64_t v6 = *(int64_t *)(*(int64_t *)v3 + 16 * a3); // 0x40e559\n    int32_t * v7 = (int32_t *)(a1 + 224); // 0x40e56b\n    int32_t result = 0; // bp-128, 0x40e572\n    int64_t v8 = (int64_t)*v7 + a6; // 0x40e57a\n    int64_t * v9; // 0x40e520\n    int64_t v10; // 0x40e520\n    if (v8 < v5) {\n        // 0x40e520\n        v9 = (int64_t *)(a2 + 16);\n        v10 = a2;\n    } else {\n        int64_t v11 = v8 + 1; // 0x40eb70\n        if (0x7fffffffffffffff - v5 < v11) {\n            // 0x40e9e6\n            return 12;\n        }\n        uint64_t v12 = v11 + v5; // 0x40eb90\n        if (v12 >= 0x2000000000000000) {\n            // 0x40e9e6\n            return 12;\n        }\n        int64_t * v13 = (int64_t *)(a2 + 16);\n        int64_t * mem = realloc((int64_t *)*v13, 8 * (int32_t)v12); // 0x40ebaa\n        if (mem == NULL) {\n            // 0x40e9e6\n            return 12;\n        }\n        int64_t v14 = (int64_t)mem; // 0x40ebaa\n        *v13 = v14;\n        *v4 = v12;\n        memset((int64_t *)(8 * v5 + v14), 0, 8 * (int32_t)v11);\n        v9 = v13;\n        v10 = 0;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 184); // 0x40e586\n    int64_t v16 = *v15; // 0x40e586\n    int32_t * v17 = (int32_t *)(a1 + 160); // 0x40e593\n    int32_t v18 = *v17; // 0x40e593\n    int64_t v19 = *v9; // 0x40e59e\n    int64_t * v20 = (int64_t *)(a1 + 72); // 0x40e5a7\n    int64_t v21 = *v20; // 0x40e5a7\n    *v15 = v19;\n    int128_t v22; // bp-120, 0x40e520\n    int32_t v23; // 0x40e520\n    int64_t v24; // 0x40e5df\n    if (v10 == 0) {\n        // 0x40eae0\n        *v20 = a4;\n        v23 = function_40b840(a1, a4 - 1, v18);\n        goto lab_0x40eaf4;\n    } else {\n        // 0x40e5c2\n        *v20 = v10;\n        v23 = function_40b840(a1, v10 - 1, v18);\n        if (v10 == a4) {\n            goto lab_0x40eaf4;\n        } else {\n            // 0x40e5df\n            v24 = *(int64_t *)(v19 + 8 * v10);\n            if (v24 == 0) {\n                goto lab_0x40e5f3;\n            } else {\n                // 0x40e5e8\n                if ((*(char *)(v24 + 104) & 64) != 0) {\n                    int64_t v25 = function_40abb0((int64_t)&v22, v24 + 8); // 0x40ea0f\n                } else {\n                    goto lab_0x40e5f3;\n                }\n            }\n        }\n    }\n  lab_0x40e9c0_2:\n    // 0x40e9c0\n    free(NULL);\n    result = 12;\n    int64_t v26; // 0x40e520\n    int64_t v27 = v26; // 0x40e9cd\n    goto lab_0x40e9d5_2;\n  lab_0x40e830_2:\n    // 0x40e830\n    free(NULL);\n    int32_t v52; // bp-124, 0x40e520\n    int32_t v53 = v52; // 0x40e842\n    result = v53;\n    int128_t v54; // 0x40e692\n    int128_t v45 = v54; // 0x40e84c\n    v27 = v26;\n    if (v53 != 0) {\n        goto lab_0x40e9d5_2;\n    } else {\n        goto lab_0x40e8bc;\n    }\n  lab_0x40e92d_2:\n    // 0x40e92d\n    free((int64_t *)v26);\n    int64_t v55 = *(int64_t *)(*v15 + 8 * a6); // 0x40e947\n    int64_t result2; // 0x40e520\n    int64_t v33; // 0x40e520\n    if (v55 == 0) {\n        // 0x40ec08\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = 1;\n    } else {\n        // 0x40e954\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = function_409b10(*(int64_t *)(v55 + 16), v55 + 24, a5) == 0;\n    }\n    // 0x40e9e6\n    return result2;\n  lab_0x40e6e0:;\n    // 0x40e6e0\n    int64_t v56; // 0x40e520\n    int64_t v57 = v56;\n    int64_t v58; // 0x40e520\n    if ((char)function_40b930(a1, v57, v58) == 0) {\n        goto lab_0x40e71f;\n    } else {\n        goto lab_0x40e6fd;\n    }\n  lab_0x40e71f:;\n    // 0x40e71f\n    int64_t v59; // 0x40e520\n    int64_t v60 = v59 + 1; // 0x40e71f\n    int64_t * v61; // 0x40e696\n    uint64_t v62 = *v61; // 0x40e723\n    int64_t v63 = v60; // 0x40e727\n    if (v60 >= v62) {\n        // break -> 0x40ea9d\n        goto lab_0x40ea9d;\n    }\n    goto lab_0x40e72d;\n  lab_0x40e6fd:;\n    // 0x40e6fd\n    int64_t * v77; // 0x40e520\n    int64_t v92 = *v77; // 0x40e6fd\n    int64_t v68; // 0x40e735\n    int64_t v93 = *(int64_t *)(v92 + 8 * v68); // 0x40e70e\n    int64_t v94; // 0x40e520\n    if ((char)function_408500(v94, v93) == 0) {\n        goto lab_0x40e9c0_2;\n    }\n    goto lab_0x40e71f;\n  lab_0x40e692:;\n    // 0x40e692\n    int128_t v40; // 0x40e520\n    v54 = __asm_pxor(v40, v40);\n    v52 = 0;\n    int128_t v83 = __asm_movaps(v54); // bp-88, 0x40e6ab\n    int64_t v39; // 0x40e520\n    if (*(int64_t *)(v39 + 40) >= 1) {\n        // 0x40e6c5\n        int64_t v88; // 0x40e69b\n        int64_t v73 = v88 + 216; // 0x40e6c7\n        int64_t * v65 = (int64_t *)(v39 + 48); // 0x40e72d\n        int64_t * v67 = (int64_t *)v88; // 0x40e731\n        int32_t v95; // 0x40e652\n        v58 = v95;\n        v77 = (int64_t *)(v88 + 24);\n        v63 = 0;\n        while (true) {\n          lab_0x40e72d:\n            // 0x40e72d\n            v59 = v63;\n            int64_t v64 = *v65; // 0x40e72d\n            int64_t v66 = *v67; // 0x40e731\n            v68 = *(int64_t *)(v64 + 8 * v59);\n            int64_t v69 = 16 * v68; // 0x40e73c\n            int64_t v70 = v69 + v66; // 0x40e740\n            char v71 = *(char *)(v70 + 10); // 0x40e744\n            v56 = v70;\n            if ((v71 & 16) == 0) {\n                goto lab_0x40e6e0;\n            } else {\n                int64_t v72 = function_40e290(v66, v73, v68, a1, v58); // 0x40e759\n                int32_t v74 = v72; // 0x40e761\n                if (v74 < 2) {\n                    if (v74 != 0) {\n                        goto lab_0x40e6fd;\n                    } else {\n                        int64_t v75 = *v67; // 0x40e998\n                        v56 = v75 + v69;\n                        goto lab_0x40e6e0;\n                    }\n                } else {\n                    int64_t v76 = *v77; // 0x40e775\n                    int64_t v78 = *v15; // 0x40e782\n                    int64_t v79 = *(int64_t *)(v76 + 8 * v68); // 0x40e78a\n                    int64_t v80 = 8 * ((0x100000000 * v72 >> 32) + v58); // 0x40e78e\n                    int64_t v81 = *(int64_t *)(v78 + v80); // 0x40e796\n                    if (v81 != 0) {\n                        int64_t v82 = function_40a050((int64_t *)&v83, (int128_t *)(v81 + 8)); // 0x40e7bc\n                        int32_t v84 = v82; // 0x40e7c6\n                        v52 = v84;\n                        if (v84 != 0) {\n                            goto lab_0x40e830_2;\n                        }\n                    }\n                    // 0x40e7ce\n                    int64_t v85; // 0x40e520\n                    if ((char)function_408500(v85, v79) == 0) {\n                        goto lab_0x40e9c0_2;\n                    }\n                    int64_t v86 = *v15; // 0x40e7f6\n                    int64_t v87 = function_40b0c0(&v52, v88, (int64_t *)&v83, v58, v58, a6); // 0x40e7fe\n                    *(int64_t *)(v86 + v80) = v87;\n                    int64_t v89 = *v15; // 0x40e807\n                    int64_t v90 = *(int64_t *)(v89 + v80); // 0x40e80f\n                    int32_t v91 = v52; // 0x40e81a\n                    if (v90 == 0 && v91 != 0) {\n                        goto lab_0x40e830_2;\n                    }\n                    goto lab_0x40e6fd;\n                }\n            }\n        }\n    }\n  lab_0x40ea9d:\n    // 0x40ea9d\n    free(NULL);\n    result = 0;\n    v45 = v54;\n    goto lab_0x40e8bc;\n  lab_0x40e8bc:;\n    // 0x40e8bc\n    int64_t v42; // 0x40e520\n    int64_t v96 = function_40b840(a1, (int64_t)((int32_t)v42 - 1), *v17); // 0x40e8cb\n    int64_t v97 = function_40adc0((int128_t *)&result, v3, (int64_t *)&v22, (int32_t)v96); // 0x40e8e4\n    int64_t v98; // 0x40e520\n    int64_t v41; // 0x40e520\n    int64_t v99; // 0x40e520\n    int64_t v43; // 0x40e642\n    if (v97 == 0) {\n        // 0x40eab0\n        v27 = v26;\n        if (result != 0) {\n            // break -> 0x40e9d5\n            goto lab_0x40e9d5_2;\n        }\n        int64_t v100 = *v15; // 0x40eabc\n        *(int64_t *)(v100 + v43) = 0;\n        v99 = v41 + 1;\n        v98 = v100;\n    } else {\n        int64_t v101 = *v15; // 0x40e8f5\n        *(int64_t *)(v101 + v43) = v97;\n        v99 = 0;\n        v98 = v101;\n    }\n    // 0x40e90f\n    v33 = v42;\n    if (v42 >= a6) {\n        goto lab_0x40e92d_2;\n    }\n    int64_t v34 = v99; // 0x40e927\n    int128_t v35 = v45; // 0x40e927\n    int64_t v36 = v98; // 0x40e927\n    int64_t v37 = v42; // 0x40e927\n    int64_t v38 = v97; // 0x40e927\n    v33 = v42;\n    if (v99 > (int64_t)*v7) {\n        goto lab_0x40e92d_2;\n    }\n    goto lab_0x40e63e;\n  lab_0x40eaf4:\n    // 0x40eaf4\n    v22 = 1;\n    int64_t * mem2 = malloc(8); // 0x40eb11\n    if (mem2 == NULL) {\n        // 0x40e9e6\n        return 12;\n    }\n    int64_t v102 = (int64_t)mem2; // 0x40eb11\n    *mem2 = a3;\n    int32_t v103 = 0x100000000 * a7 >> 32;\n    result = 0;\n    int32_t v104 = function_40a480(v3, (int64_t *)&v22, v6, v103); // 0x40eb56\n    result = v104;\n    v27 = v102;\n    if (v104 == 0) {\n        goto lab_0x40ea32;\n    } else {\n        goto lab_0x40e9d5_2;\n    }\n  lab_0x40ea32:;\n    int32_t v105 = function_40b360(a1, &v22, a4, v6, v103); // 0x40ea4d\n    result = v105;\n    v27 = v102;\n    int64_t v51 = a4; // 0x40ea53\n    int64_t v50 = v102; // 0x40ea53\n    int32_t v49 = v23; // 0x40ea53\n    if (v105 != 0) {\n        goto lab_0x40e9d5_2;\n    } else {\n        goto lab_0x40ea55;\n    }\n  lab_0x40e9d5_2:\n    // 0x40e9d5\n    free((int64_t *)v27);\n    // 0x40e9e6\n    return result;\n  lab_0x40e5f3:;\n    int128_t v28 = __asm_pxor(v2, v2); // 0x40e5ff\n    v22 = __asm_movaps(v28);\n    int64_t v29 = 0; // 0x40e603\n    int128_t v30 = v28; // 0x40e603\n    int64_t v31 = v10; // 0x40e603\n    int64_t v32 = v24; // 0x40e603\n    goto lab_0x40e60b;\n  lab_0x40ea55:;\n    int64_t v48 = function_40adc0((int128_t *)&result, v3, (int64_t *)&v22, v49); // 0x40ea65\n    v27 = v50;\n    if (v48 != 0 || result == 0) {\n        // 0x40ea76\n        *(int64_t *)(*v15 + 8 * v51) = v48;\n        v29 = v50;\n        v31 = v51;\n        v32 = v48;\n        goto lab_0x40e60b;\n    } else {\n        goto lab_0x40e9d5_2;\n    }\n  lab_0x40e60b:\n    // 0x40e60b\n    v26 = v29;\n    v33 = v31;\n    if (v31 < a6) {\n        // 0x40e616\n        v33 = v31;\n        if (*v7 < 0) {\n            goto lab_0x40e92d_2;\n        } else {\n            // 0x40e626\n            v34 = 0;\n            v35 = v30;\n            v36 = *v15;\n            v37 = v31;\n            v38 = v32;\n            while (true) {\n              lab_0x40e63e:\n                // 0x40e63e\n                v39 = v38;\n                v40 = v35;\n                v41 = v34;\n                v42 = v37 + 1;\n                v43 = 8 * v42;\n                int64_t v44 = *(int64_t *)(v43 + v36); // 0x40e642\n                if (v44 == 0) {\n                    // 0x40e9a8\n                    v45 = v40;\n                    if (v39 != 0) {\n                        goto lab_0x40e692;\n                    } else {\n                        goto lab_0x40e8bc;\n                    }\n                } else {\n                    int64_t v46 = function_40a050((int64_t *)&v22, (int128_t *)(v44 + 8)); // 0x40e678\n                    int32_t v47 = v46; // 0x40e67d\n                    result = v47;\n                    v27 = v26;\n                    if (v47 != 0) {\n                        // break -> 0x40e9d5\n                        break;\n                    }\n                    // 0x40e689\n                    v45 = v40;\n                    if (v39 == 0) {\n                        goto lab_0x40e8bc;\n                    } else {\n                        goto lab_0x40e692;\n                    }\n                }\n            }\n            goto lab_0x40e9d5_2;\n        }\n    } else {\n        goto lab_0x40e92d_2;\n    }\n}\n"
        },
        {
            "funcName": "function_40ec40",
            "funcStartAddr": "40ec40",
            "funcEndAddr": "40f503",
            "decompiledFuncCode": "int64_t function_40ec40(int64_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40ec40\n    int128_t v1; // 0x40ec40\n    int128_t v2 = v1;\n    int64_t v3 = 0; // bp-88, 0x40ec64\n    int64_t v4 = 0; // 0x40ec86\n    if ((char)a5 != 0) {\n        int64_t * mem = malloc(96); // 0x40ec95\n        v4 = &v3;\n        if (mem == NULL) {\n            // 0x40efa9\n            return 12;\n        }\n    }\n    int128_t v5 = __asm_pxor(v2, v2); // 0x40ecb5\n    int64_t v6 = 0; // bp-104, 0x40ecb9\n    int128_t v7 = __asm_movaps(v5); // bp-120, 0x40ecc1\n    uint64_t v8 = 16 * a3; // 0x40ecd3\n    int32_t size = v8; // 0x40ecd7\n    int64_t result; // 0x40ec40\n    int64_t v9; // 0x40ec40\n    char v10; // 0x40ec40\n    if (v8 < 4031) {\n        // 0x40ecea\n        v10 = 0;\n        int64_t v11; // bp-216, 0x40ec40\n        v9 = (int64_t)&v11 + -1 - v8 & -16;\n    } else {\n        int64_t * mem2 = malloc(size); // 0x40f427\n        v10 = 1;\n        v9 = (int64_t)mem2;\n        if (mem2 == NULL) {\n            // 0x40f443\n            result = 12;\n            if (v4 != 0) {\n                // 0x40f453\n                function_40d270(v4);\n                result = 12;\n            }\n          lab_0x40efa9:\n            // 0x40efa9\n            return result;\n        }\n    }\n    int64_t * v12 = (int64_t *)v9; // 0x40ed19\n    int64_t * v13 = (int64_t *)a4; // 0x40ed19\n    memcpy(v12, v13, size);\n    int64_t v14 = a4; // bp-128, 0x40ed2a\n    int64_t * v15 = (int64_t *)(a4 + 8); // 0x40ee19\n    int64_t v16 = *v15; // 0x40ee19\n    if (v16 < a4) {\n      lab_0x40ef80_2:\n        // 0x40ef80\n        free((int64_t *)v6);\n        if (v10 != 0) {\n            // 0x40f45d\n            free(v12);\n            if (v4 == 0) {\n                // 0x40efa9\n                return 0;\n            }\n        } else {\n            // 0x40ef96\n            if (v4 == 0) {\n                // 0x40efa9\n                return 0;\n            }\n        }\n        // 0x40efa2\n        function_40d270(v4);\n        // 0x40efa9\n        return 0;\n    }\n    int64_t v17 = (int64_t)a2;\n    int64_t v18 = v4 + 16;\n    int64_t v19 = &v7;\n    int64_t * v20 = (int64_t *)(v17 + 184);\n    int64_t * v21 = (int64_t *)v4;\n    int64_t * v22 = (int64_t *)(v4 + 8);\n    int64_t * v23 = (int64_t *)v18;\n    int64_t v24 = v16; // 0x40ee19\n    int64_t v25 = *(int64_t *)(a1 + 144); // 0x40ec40\n    int64_t v26 = a4; // 0x40ee15\n    int64_t v27; // 0x40ec40\n    int64_t v28; // 0x40ec40\n    int64_t v29; // 0x40ec40\n    int64_t v30; // 0x40ec40\n    int64_t v31; // 0x40ec40\n    int64_t v32; // 0x40ec40\n    int64_t v33; // 0x40ec40\n    int64_t v34; // 0x40ec40\n    int64_t v35; // 0x40ec40\n    int64_t v36; // 0x40ee33\n    int64_t v37; // 0x40efd8\n    while (true) {\n        // 0x40ee26\n        int64_t v38; // 0x40ec40\n        v34 = v38;\n        v28 = v24;\n        v31 = v26;\n        v29 = v25;\n        while (true) {\n          lab_0x40ee26:\n            // 0x40ee26\n            v30 = v29;\n            v32 = v31;\n            int64_t v39 = v28;\n            v35 = v34;\n            v36 = 16 * v30;\n            int64_t v40 = v36 + a1; // 0x40ee3a\n            char v41 = *(char *)(v40 + 8); // 0x40ee3d\n            if (v41 != 8) {\n                // 0x40ed40\n                v27 = v39;\n                if (v41 == 9) {\n                    int64_t v42 = *(int64_t *)v40 + 1; // 0x40efc3\n                    v27 = v39;\n                    if (v42 < a3) {\n                        int64_t v43 = 16 * v42; // 0x40efd4\n                        v37 = v43 + a4;\n                        if (*(int64_t *)v37 < v32) {\n                            // 0x40f350\n                            *(int64_t *)(v37 + 8) = v32;\n                            memcpy(v12, v13, size);\n                            v27 = *v15;\n                            goto lab_0x40ed49;\n                        } else {\n                            // 0x40efe6\n                            if ((*(char *)(v40 + 10) & 8) == 0) {\n                                goto lab_0x40effe;\n                            } else {\n                                // 0x40efec\n                                if (*(int64_t *)(v43 + v9) != -1) {\n                                    // 0x40f390\n                                    memcpy(v13, v12, size);\n                                    int64_t v44 = *v15; // 0x40f3ad\n                                    v27 = v44;\n                                    goto lab_0x40ed49;\n                                } else {\n                                    goto lab_0x40effe;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40ed49;\n                    }\n                } else {\n                    goto lab_0x40ed49;\n                }\n            } else {\n                int64_t v45 = *(int64_t *)v40 + 1; // 0x40ee4d\n                v27 = v39;\n                if (v45 < a3) {\n                    int64_t v46 = 16 * v45 + a4; // 0x40ee62\n                    *(int64_t *)(v46 + 8) = -1;\n                    *(int64_t *)v46 = v32;\n                    v27 = *v15;\n                }\n                goto lab_0x40ed49;\n            }\n        }\n      lab_0x40ee15_2:\n        // 0x40ee15\n        v26 = v14;\n        v24 = *v15;\n        v38 = v33;\n        if (v24 < v26) {\n            goto lab_0x40ef80_2;\n        }\n    }\n  lab_0x40f310_3:\n    // 0x40f310\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40f480\n        free(v12);\n        goto lab_0x40f326;\n    } else {\n        goto lab_0x40f326;\n    }\n  lab_0x40f21a_3:\n    // 0x40f21a\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40f4f2\n        free(v12);\n        // 0x40f230\n        function_40d270(v4);\n        result = 0;\n        return result;\n    } else {\n        // 0x40f230\n        function_40d270(v4);\n        result = 0;\n        return result;\n    }\n  lab_0x40ed49:;\n    int64_t v47 = v30; // 0x40ed4c\n    int64_t v48 = v36; // 0x40ed4c\n    if (v32 == v27) {\n        // 0x40ed4e\n        v47 = v30;\n        v48 = v36;\n        if (*(int64_t *)(v17 + 176) == v30) {\n            if (v4 == 0) {\n                // 0x40f4c9\n                free((int64_t *)v6);\n                result = 0;\n                if (v10 == 0) {\n                    return result;\n                } else {\n                    // 0x40f4df\n                    free(v12);\n                    result = (int32_t)&g67 ^ (int32_t)&g67;\n                    return result;\n                }\n            }\n            int64_t v49 = a4; // 0x40f1f0\n            int64_t v50 = 0; // 0x40f1f0\n            if (a3 == 0) {\n                goto lab_0x40f21a_3;\n            }\n            int64_t v51; // 0x40ec40\n            while (true) {\n                // 0x40f200\n                v51 = v50;\n                int64_t v52 = v49;\n                if (*(int64_t *)v52 >= 0) {\n                    // 0x40f206\n                    if (*(int64_t *)(v52 + 8) == -1) {\n                        // break -> 0x40f248\n                        break;\n                    }\n                }\n                // 0x40f20d\n                v50 = v51 + 1;\n                v49 = v52 + 16;\n                if (v50 == a3) {\n                    goto lab_0x40f21a_3;\n                }\n            }\n            if (v51 == a3) {\n                goto lab_0x40f21a_3;\n            }\n            int64_t v53 = function_40d2c0(v4, v18, &v14, a3, a4, &v7); // 0x40f26e\n            v47 = v53;\n            v48 = 16 * v53;\n        }\n    }\n    int64_t v54 = v48;\n    int64_t v55 = v47;\n    int64_t v56 = *(int64_t *)(v17 + 152); // 0x40ed5c\n    int64_t * v57 = (int64_t *)v56; // 0x40ed64\n    int64_t v58 = *v57; // 0x40ed64\n    int64_t v59 = v58 + v54; // 0x40ed67\n    char v60 = *(char *)(v59 + 8); // 0x40ed6b\n    int64_t v61; // 0x40ec40\n    int64_t v62; // 0x40ec40\n    int64_t v63; // 0x40ec40\n    int64_t v64; // 0x40ec40\n    int64_t v65; // 0x40ec40\n    int64_t v66; // 0x40ec40\n    int64_t v67; // 0x40ec40\n    int64_t v68; // 0x40ec40\n    int64_t v69; // 0x40ec40\n    int64_t v70; // 0x40ec40\n    int64_t v71; // 0x40ec40\n    int64_t v72; // 0x40ec40\n    int64_t v73; // 0x40f10e\n    int64_t v74; // 0x40eef0\n    if ((v60 & 8) != 0) {\n        int64_t v75 = *(int64_t *)(8 * v14 + *v20); // 0x40ee93\n        if ((char)function_408500(v19, v55) == 0) {\n            // break (via goto) -> 0x40f310\n            goto lab_0x40f310_3;\n        }\n        int64_t v76 = *(int64_t *)(v56 + 40) + 24 * v55; // 0x40eea6\n        int64_t v77 = *(int64_t *)(v76 + 8); // 0x40eebe\n        v71 = v35;\n        if (v77 < 1) {\n            goto lab_0x40ef3a;\n        } else {\n            // 0x40eec7\n            v61 = -1;\n            int64_t v78 = 0;\n            v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n            int64_t v79 = v61; // 0x40ef05\n            int64_t v80; // 0x40f115\n            int64_t v81; // 0x40ec40\n            int64_t * mem3; // 0x40f3e2\n            int64_t v82; // 0x40f3e2\n            int64_t v83; // 0x40f0f0\n            if (function_409b10(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                // 0x40ef07\n                v79 = v74;\n                if (v61 != -1) {\n                    // 0x40f0d8\n                    v83 = function_409b10(v35, (int64_t)&v6, v61);\n                    v69 = v35;\n                    v63 = v83 != 0 ? v74 : v61;\n                    if (v4 == 0 || v83 != 0) {\n                        goto lab_0x40ee0c;\n                    } else {\n                        // 0x40f10e\n                        v73 = *v21;\n                        v80 = v73 + 1;\n                        *v21 = v80;\n                        v81 = *v23;\n                        v62 = v81;\n                        if (v80 == *v22) {\n                            // 0x40f3c8\n                            mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                            if (mem3 == NULL) {\n                                goto lab_0x40f180;\n                            } else {\n                                // 0x40f3f0\n                                v82 = (int64_t)mem3;\n                                *v22 = 2 * *v22;\n                                *v23 = v82;\n                                v62 = v82;\n                                goto lab_0x40f12a;\n                            }\n                        } else {\n                            goto lab_0x40f12a;\n                        }\n                    }\n                }\n            }\n            int64_t v84 = v79;\n            int64_t v85 = v78 + 1; // 0x40ef14\n            while (v77 != v85) {\n                // 0x40eef0\n                v61 = v84;\n                v78 = v85;\n                v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n                v79 = v61;\n                if (function_409b10(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                    // 0x40ef07\n                    v79 = v74;\n                    if (v61 != -1) {\n                        // 0x40f0d8\n                        v83 = function_409b10(v35, (int64_t)&v6, v61);\n                        v69 = v35;\n                        v63 = v83 != 0 ? v74 : v61;\n                        if (v4 == 0 || v83 != 0) {\n                            goto lab_0x40ee0c;\n                        } else {\n                            // 0x40f10e\n                            v73 = *v21;\n                            v80 = v73 + 1;\n                            *v21 = v80;\n                            v81 = *v23;\n                            v62 = v81;\n                            if (v80 == *v22) {\n                                // 0x40f3c8\n                                mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                                if (mem3 == NULL) {\n                                    goto lab_0x40f180;\n                                } else {\n                                    // 0x40f3f0\n                                    v82 = (int64_t)mem3;\n                                    *v22 = 2 * *v22;\n                                    *v23 = v82;\n                                    v62 = v82;\n                                    goto lab_0x40f12a;\n                                }\n                            } else {\n                                goto lab_0x40f12a;\n                            }\n                        }\n                    }\n                }\n                // 0x40ef14\n                v84 = v79;\n                v85 = v78 + 1;\n            }\n            // 0x40ef1d\n            v33 = v35;\n            v25 = v84;\n            v70 = v35;\n            v64 = v84;\n            if (v84 >= 0) {\n                // break -> 0x40ee15\n                goto lab_0x40ee15_2;\n            }\n            goto lab_0x40ef30;\n        }\n    } else {\n        // 0x40ed77\n        if ((*(char *)(v59 + 10) & 16) != 0) {\n            int64_t v86 = 0x100000000 * function_40e290(v58, v56 + 216, v55, v17, v14);\n            v67 = v86 >> 32;\n            if (v86 != 0) {\n                goto lab_0x40f1c9;\n            } else {\n                // 0x40f039\n                v65 = v14;\n                v68 = *v57 + v54;\n                goto lab_0x40ed8d;\n            }\n        } else {\n            if (v60 == 4) {\n                int64_t v87 = a4 + 16 + 16 * *(int64_t *)v59; // 0x40f05b\n                int64_t v88 = *(int64_t *)(v87 + 8); // 0x40f05e\n                int64_t v89 = *(int64_t *)v87; // 0x40f062\n                int64_t n = v88 - v89; // 0x40f068\n                if (v4 == 0) {\n                    // 0x40f1c0\n                    v67 = n;\n                    if (n == 0) {\n                        goto lab_0x40f288;\n                    } else {\n                        goto lab_0x40f1c9;\n                    }\n                } else {\n                    // 0x40f079\n                    v72 = v35;\n                    if (v88 == -1 || v89 == -1) {\n                        goto lab_0x40ef48;\n                    } else {\n                        if (n == 0) {\n                            goto lab_0x40f288;\n                        } else {\n                            int64_t v90 = *(int64_t *)(v17 + 8); // 0x40f096\n                            int32_t memcmp_rc = memcmp((int64_t *)(v90 + v89), (int64_t *)(v14 + v90), (int32_t)n); // 0x40f0b0\n                            v72 = v35;\n                            v66 = n;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40ef48;\n                            } else {\n                                goto lab_0x40f0c4;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40ed89\n                v65 = v14;\n                v68 = v59;\n                goto lab_0x40ed8d;\n            }\n        }\n    }\n  lab_0x40ef3a:\n    // 0x40ef3a\n    v72 = v71;\n    if (v4 == 0) {\n        // 0x40f491\n        free((int64_t *)v6);\n        result = 1;\n        if (v10 == 0) {\n            return result;\n        } else {\n            // 0x40f4ac\n            free(v12);\n            result = 1;\n            return result;\n        }\n    }\n    goto lab_0x40ef48;\n  lab_0x40effe:\n    // 0x40effe\n    *(int64_t *)(v37 + 8) = v32;\n    v27 = *v15;\n    goto lab_0x40ed49;\n  lab_0x40ef48:;\n    int64_t v91 = function_40d2c0(v4, v18, &v14, a3, a4, &v7); // 0x40ef65\n    int64_t v92 = *v15; // 0x40ef71\n    v34 = v72;\n    v28 = v92;\n    v31 = v14;\n    v29 = v91;\n    if (v92 < v14) {\n        goto lab_0x40ef80_2;\n    }\n    goto lab_0x40ee26;\n  lab_0x40ef30:\n    // 0x40ef30\n    v71 = v70;\n    if (v64 == -2) {\n        // break (via goto) -> 0x40f310\n        goto lab_0x40f310_3;\n    }\n    goto lab_0x40ef3a;\n  lab_0x40f1c9:\n    // 0x40f1c9\n    v66 = v67;\n    goto lab_0x40f0c4;\n  lab_0x40f0c4:;\n    int64_t v93 = v14 + v66; // 0x40f0d0\n    goto lab_0x40edba;\n  lab_0x40ed8d:\n    // 0x40ed8d\n    if ((char)function_40b930(v17, v68, v65) == 0) {\n        goto lab_0x40ef3a;\n    } else {\n        // 0x40edae\n        v93 = v65 + 1;\n        goto lab_0x40edba;\n    }\n  lab_0x40edba:;\n    int64_t v94 = v93;\n    int64_t v95 = *(int64_t *)(*(int64_t *)(v56 + 24) + 8 * v55);\n    v14 = v94;\n    v69 = 0;\n    v63 = v95;\n    if (v4 == 0) {\n        goto lab_0x40ee0c;\n    } else {\n        // 0x40edc8\n        v72 = v35;\n        if (v94 > *(int64_t *)(v17 + 168)) {\n            goto lab_0x40ef48;\n        } else {\n            int64_t v96 = *(int64_t *)(*v20 + 8 * v94); // 0x40edde\n            v72 = v35;\n            if (v96 == 0) {\n                goto lab_0x40ef48;\n            } else {\n                int64_t v97 = function_409b10(*(int64_t *)(v96 + 16), v96 + 24, v95); // 0x40edf6\n                v69 = 0;\n                v63 = v95;\n                v72 = v35;\n                if (v97 == 0) {\n                    goto lab_0x40ef48;\n                } else {\n                    goto lab_0x40ee0c;\n                }\n            }\n        }\n    }\n  lab_0x40f288:\n    // 0x40f288\n    if ((char)function_408500(v19, v55) == 0) {\n        // break (via goto) -> 0x40f310\n        goto lab_0x40f310_3;\n    }\n    int64_t v98 = v14; // 0x40f2a7\n    int64_t v99 = *(int64_t *)(24 * v55 + 16 + *(int64_t *)(v56 + 40)); // 0x40f2b6\n    int64_t v100 = *(int64_t *)v99; // 0x40f2ba\n    int64_t v101 = *(int64_t *)(*v20 + 8 * v98); // 0x40f2c5\n    int64_t v102 = function_409b10(*(int64_t *)(v101 + 16), v101 + 24, v100); // 0x40f2d4\n    v69 = v35;\n    v63 = v100;\n    if (v102 != 0) {\n        goto lab_0x40ee0c;\n    } else {\n        // 0x40f2e2\n        v65 = v98;\n        v68 = *v57 + v54;\n        goto lab_0x40ed8d;\n    }\n  lab_0x40ee0c:\n    // 0x40ee0c\n    v33 = v69;\n    v25 = v63;\n    v70 = v69;\n    v64 = v63;\n    if (v63 >= 0) {\n        // break -> 0x40ee15\n        goto lab_0x40ee15_2;\n    }\n    goto lab_0x40ef30;\n  lab_0x40f326:\n    // 0x40f326\n    if (v4 != 0) {\n      lab_0x40f196:\n        // 0x40f196\n        function_40d270(v4);\n        return 12;\n    }\n    // 0x40efa9\n    return 12;\n  lab_0x40f12a:;\n    int64_t v103 = v62 + 48 * v73; // 0x40f132\n    *(int64_t *)(v103 + 8) = v74;\n    *(int64_t *)v103 = v14;\n    int64_t * mem4 = malloc(size); // 0x40f146\n    *(int64_t *)(v103 + 16) = (int64_t)mem4;\n    if (mem4 == NULL) {\n        goto lab_0x40f180;\n    } else {\n        // 0x40f154\n        memcpy(mem4, v13, size);\n        v69 = v35;\n        v63 = v61;\n        if ((int32_t)function_40abb0(v103 + 24, v19) == 0) {\n            goto lab_0x40ee0c;\n        } else {\n            goto lab_0x40f180;\n        }\n    }\n  lab_0x40f180:\n    // 0x40f180\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40f480\n        free(v12);\n        goto lab_0x40f326;\n    } else {\n        goto lab_0x40f196;\n    }\n}\n"
        },
        {
            "funcName": "function_40f510",
            "funcStartAddr": "40f510",
            "funcEndAddr": "40f6a6",
            "decompiledFuncCode": "int64_t function_40f510(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a3 + 16; // 0x40f524\n    int64_t * v2 = (int64_t *)(a3 + 8); // 0x40f537\n    int64_t result = function_40e520(a1, v1, a3, *v2, a4, a5, 8); // 0x40f540\n    if ((int32_t)result != 0) {\n        // 0x40f54b\n        return result;\n    }\n    int64_t v3 = *v2; // 0x40f560\n    int64_t * v4 = (int64_t *)(a1 + 200); // 0x40f564\n    uint64_t v5 = *v4; // 0x40f564\n    int64_t * v6 = (int64_t *)(a1 + 208); // 0x40f56b\n    uint64_t v7 = *v6; // 0x40f56b\n    int64_t * v8 = (int64_t *)(a1 + 216); // 0x40f576\n    int64_t v9 = *v8; // 0x40f576\n    int64_t v10 = v5; // 0x40f583\n    int64_t v11 = v9; // 0x40f583\n    if (v5 >= v7) {\n        int64_t * mem = realloc((int64_t *)v9, 80 * (int32_t)v7); // 0x40f62d\n        if (mem == NULL) {\n            // 0x40f690\n            free((int64_t *)*v8);\n            // 0x40f54b\n            return 12;\n        }\n        int64_t v12 = (int64_t)mem; // 0x40f62d\n        *v8 = v12;\n        memset((int64_t *)(40 * *v4 + v12), 0, 40 * (int32_t)*v6);\n        *v6 = 2 * *v6;\n        v10 = *v4;\n        v11 = *v8;\n    }\n    int64_t v13 = 40 * v10; // 0x40f58d\n    int64_t v14; // 0x40f510\n    if (v10 < 1) {\n        // 0x40f589\n        v14 = v11 + v13;\n    } else {\n        int64_t v15 = v13 + v11;\n        v14 = v15;\n        if (*(int64_t *)(v15 - 32) == a5) {\n            // 0x40f610\n            *(char *)(v15 - 8) = 1;\n            v14 = v15;\n        }\n    }\n    // 0x40f5a1\n    *(int64_t *)v14 = a4;\n    *(int64_t *)(v14 + 8) = a5;\n    *(int16_t *)(v14 + 34) = (int16_t)(v3 == v1);\n    *(int64_t *)(v14 + 16) = v1;\n    *(int64_t *)(v14 + 24) = v3;\n    *v4 = v10 + 1;\n    *(char *)(v14 + 32) = 0;\n    int32_t * v16 = (int32_t *)(a1 + 224); // 0x40f5d3\n    if (v3 - v1 > (int64_t)*v16) {\n        // 0x40f5e2\n        *v16 = (int32_t)v3 - (int32_t)v1;\n    }\n    // 0x40f5ec\n    return function_4090e0(a1, 0);\n}\n"
        },
        {
            "funcName": "function_40f6b0",
            "funcStartAddr": "40f6b0",
            "funcEndAddr": "40ff22",
            "decompiledFuncCode": "int64_t function_40f6b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40f6b0\n    if (a2 >= 0 != a2 != 0) {\n        // 0x40fb3b\n        return 0;\n    }\n    // 0x40f749\n    int64_t v1; // bp-232, 0x40f6b0\n    int64_t v2 = &v1; // 0x40f6bd\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x40f74e\n    int64_t * v4 = (int64_t *)(v2 + 56); // 0x40f75a\n    int32_t * v5 = (int32_t *)(a1 + 160);\n    int64_t * v6 = (int64_t *)(a1 + 200);\n    int64_t * v7 = (int64_t *)(a1 + 216);\n    int64_t * v8 = (int64_t *)(a1 + 232);\n    int64_t * v9 = (int64_t *)(v2 + 104);\n    int64_t * v10 = (int64_t *)(v2 + 96);\n    int64_t * v11 = (int64_t *)(a1 + 8);\n    int64_t * v12 = (int64_t *)(v2 + 24);\n    int64_t * v13 = (int64_t *)(v2 + 16);\n    int64_t * v14 = (int64_t *)(v2 + 32);\n    int64_t * v15 = (int64_t *)(v2 + 64);\n    int64_t * v16 = (int64_t *)(v2 + 112);\n    int64_t v17 = v2 + 40;\n    int64_t * v18 = (int64_t *)v17;\n    int64_t * v19 = (int64_t *)(v2 + 120);\n    int64_t * v20 = (int64_t *)(v2 + 48);\n    int64_t * v21 = (int64_t *)(a1 + 184);\n    int64_t v22 = v2 + 140;\n    int32_t * v23 = (int32_t *)v22;\n    int64_t * v24 = (int64_t *)(v2 + 88);\n    int32_t * v25 = (int32_t *)v17;\n    int64_t * v26 = (int64_t *)(v2 + 144);\n    int128_t * v27 = (int128_t *)v22;\n    int64_t * v28 = (int64_t *)(v2 + 160);\n    int64_t v29 = *v3; // 0x40f735\n    int64_t v30 = *(int64_t *)(a1 + 72); // 0x40f6b0\n    int64_t v31; // 0x40f6b0\n    int64_t v32; // 0x40f756\n    int64_t v33; // 0x40f765\n    uint32_t v34; // 0x40f772\n    int64_t v35; // 0x40f772\n    uint64_t v36; // 0x40f78d\n    while (true) {\n      lab_0x40f749:\n        // 0x40f749\n        v31 = v30;\n        v32 = *(int64_t *)(*(int64_t *)*(int64_t *)(v2 + 72) + 8 * v29);\n        v33 = 16 * v32;\n        int64_t v37 = (v33 | 8) + *(int64_t *)*v4; // 0x40f76c\n        v30 = v31;\n        if (*(char *)v37 != 4) {\n            goto lab_0x40f730_3;\n        } else {\n            // 0x40f772\n            v34 = *(int32_t *)v37;\n            if ((v34 & 0x3ff00) == 0) {\n                goto lab_0x40f7c0;\n            } else {\n                // 0x40f77d\n                v35 = v34;\n                v36 = function_40b840(a1, v31, *v5);\n                if ((v35 & 1024) != 0) {\n                    // 0x40f700\n                    v30 = v31;\n                    if (v36 % 2 == 0) {\n                        goto lab_0x40f730_3;\n                    } else {\n                        // 0x40f704\n                        v30 = v31;\n                        if ((v35 & 2048) != 0) {\n                            goto lab_0x40f730_3;\n                        } else {\n                            goto lab_0x40f709;\n                        }\n                    }\n                } else {\n                    // 0x40f7a4\n                    v30 = v31;\n                    if ((v35 & 2048) == 0 || v36 % 2 == 0) {\n                        goto lab_0x40f709;\n                    } else {\n                        goto lab_0x40f730_3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40fb3b_7:;\n    // 0x40fb3b\n    int64_t result; // 0x40f6b0\n    return result;\n  lab_0x40f888:;\n    int64_t v38 = *(int64_t *)(a1 + 152); // 0x40f888\n    int64_t v39 = *(int64_t *)v38; // 0x40f897\n    *v9 = v38;\n    *v10 = *(int64_t *)(v39 + v33);\n    int64_t v40; // 0x40f6b0\n    int64_t v41; // 0x40f6b0\n    int64_t v42; // 0x40f6b0\n    int64_t v43; // 0x40f6b0\n    int64_t v44; // 0x40f6b0\n    int64_t v45; // 0x40f6b0\n    int64_t v46; // 0x40f6b0\n    int64_t v47; // 0x40f6b0\n    int64_t v48; // 0x40f6b0\n    int64_t v49; // 0x40f6b0\n    int64_t v50; // 0x40f6b0\n    int64_t v51; // 0x40f6b0\n    int64_t v52; // 0x40f6b0\n    int64_t v53; // 0x40f6b0\n    int64_t v54; // 0x40f7c0\n    int64_t v55; // 0x40f8dc\n    int64_t * v56; // 0x40f8e0\n    int64_t * v57; // 0x40fb50\n    int64_t * v58; // 0x40fb55\n    int64_t v59; // 0x40f910\n    if (*v8 < 1) {\n        // 0x40f85f\n        *v23 = 0;\n        v30 = v31;\n        goto lab_0x40f730_3;\n    } else {\n        // 0x40f8aa\n        *v12 = v31;\n        *v13 = 0;\n        *v14 = *v11;\n        *v15 = v32;\n        *v16 = v54;\n        v40 = *v13;\n        v51 = v39;\n        while (true) {\n          lab_0x40f8cb:\n            // 0x40f8cb\n            v55 = *(int64_t *)(*(int64_t *)(a1 + 248) + 8 * v40);\n            v56 = (int64_t *)(v55 + 8);\n            if (*v10 == *(int64_t *)(16 * *v56 + v51)) {\n                // 0x40fb50\n                v57 = (int64_t *)(v55 + 32);\n                v58 = (int64_t *)v55;\n                int64_t v60 = *v58; // 0x40fb55\n                int64_t v61 = *v12; // 0x40fb58\n                v41 = v61;\n                v42 = v60;\n                if (*v57 < 1) {\n                    goto lab_0x40fd03;\n                } else {\n                    int64_t v62 = v61;\n                    v49 = 0;\n                    int64_t v63 = v60;\n                    int64_t v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49); // 0x40fb90\n                    int64_t v65 = *(int64_t *)(v64 + 8); // 0x40fb94\n                    int64_t v66 = v65 - v63; // 0x40fb9b\n                    int64_t v67 = v66 + v62; // 0x40fb9e\n                    int64_t v68 = v64; // 0x40fba5\n                    int64_t v69; // 0x40f6b0\n                    int64_t v70; // 0x40f6b0\n                    int32_t memcmp_rc; // 0x40fbc8\n                    int64_t v71; // 0x40fca4\n                    int64_t v72; // 0x40fcb1\n                    int64_t n; // 0x40fcb5\n                    int64_t v73; // 0x40fcba\n                    int64_t v74; // 0x40fcbf\n                    int64_t v75; // 0x40fcc4\n                    if (v66 >= 1) {\n                        // 0x40fba7\n                        v69 = *v14;\n                        v75 = v63;\n                        n = v66;\n                        v74 = v62;\n                        v73 = v64;\n                        v72 = v69;\n                        if (*(int64_t *)(a1 + 48) < v67) {\n                            // 0x40fc80\n                            *v18 = v66;\n                            *v14 = v64;\n                            v50 = v63;\n                            v48 = v62;\n                            v43 = v69;\n                            if (*(int64_t *)(a1 + 88) < v67) {\n                                goto lab_0x40fe90_2;\n                            }\n                            // 0x40fc94\n                            *v19 = v62;\n                            *v20 = v63;\n                            v71 = function_4090e0(a1, v67);\n                            result = v71;\n                            if ((int32_t)v71 != 0) {\n                                // break (via goto) -> 0x40fb3b\n                                goto lab_0x40fb3b_7;\n                            }\n                            // 0x40fcb1\n                            v72 = *v11;\n                            n = *v18;\n                            v73 = *v14;\n                            v74 = *v19;\n                            v75 = *v20;\n                        }\n                        // 0x40fbb1\n                        v70 = v72;\n                        *v20 = v73;\n                        *v18 = v75;\n                        *v14 = v74;\n                        memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                        v68 = *v20;\n                        v50 = *v18;\n                        v48 = *v14;\n                        v43 = v70;\n                        if (memcmp_rc != 0) {\n                            goto lab_0x40fe90_2;\n                        }\n                    }\n                    int64_t v76 = function_40f510(a1, v55, v68, *v15, *v12); // 0x40fbf7\n                    int64_t v77 = *v11; // 0x40fbfc\n                    result = v76;\n                    if ((int32_t)v76 >= 2) {\n                        // break (via goto) -> 0x40fb3b\n                        goto lab_0x40fb3b_7;\n                    }\n                    int64_t v78 = v49 + 1; // 0x40fb78\n                    while (v78 < *v57) {\n                        // 0x40fb8c\n                        v62 = v67;\n                        v49 = v78;\n                        v63 = v65;\n                        v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49);\n                        v65 = *(int64_t *)(v64 + 8);\n                        v66 = v65 - v63;\n                        v67 = v66 + v62;\n                        v68 = v64;\n                        if (v66 >= 1) {\n                            // 0x40fba7\n                            v69 = v77;\n                            v75 = v63;\n                            n = v66;\n                            v74 = v62;\n                            v73 = v64;\n                            v72 = v69;\n                            if (*(int64_t *)(a1 + 48) < v67) {\n                                // 0x40fc80\n                                *v18 = v66;\n                                *v14 = v64;\n                                v50 = v63;\n                                v48 = v62;\n                                v43 = v69;\n                                if (*(int64_t *)(a1 + 88) < v67) {\n                                    goto lab_0x40fe90_2;\n                                }\n                                // 0x40fc94\n                                *v19 = v62;\n                                *v20 = v63;\n                                v71 = function_4090e0(a1, v67);\n                                result = v71;\n                                if ((int32_t)v71 != 0) {\n                                    // break (via goto) -> 0x40fb3b\n                                    goto lab_0x40fb3b_7;\n                                }\n                                // 0x40fcb1\n                                v72 = *v11;\n                                n = *v18;\n                                v73 = *v14;\n                                v74 = *v19;\n                                v75 = *v20;\n                            }\n                            // 0x40fbb1\n                            v70 = v72;\n                            *v20 = v73;\n                            *v18 = v75;\n                            *v14 = v74;\n                            memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                            v68 = *v20;\n                            v50 = *v18;\n                            v48 = *v14;\n                            v43 = v70;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40fe90_2;\n                            }\n                        }\n                        // 0x40fbe4\n                        v76 = function_40f510(a1, v55, v68, *v15, *v12);\n                        v77 = *v11;\n                        result = v76;\n                        if ((int32_t)v76 >= 2) {\n                            // break (via goto) -> 0x40fb3b\n                            goto lab_0x40fb3b_7;\n                        }\n                        // 0x40fb78\n                        v78 = v49 + 1;\n                    }\n                    // 0x40fcf7\n                    *v14 = v77;\n                    v44 = v65;\n                    v47 = v67;\n                    goto lab_0x40fcfc;\n                }\n            } else {\n                goto lab_0x40f8f2_2;\n            }\n        }\n      lab_0x40f910:\n        // 0x40f910\n        v59 = *v12;\n        int64_t v79 = *v15; // 0x40f915\n        *v23 = 0;\n        int64_t v80 = *v16; // 0x40f925\n        v30 = v59;\n        if (v80 < *v6) {\n            int64_t v81 = *v4; // 0x40f93f\n            *v15 = 8 * v79;\n            *v10 = 24 * v79;\n            int64_t * v82 = (int64_t *)(v81 + 48);\n            int64_t * v83 = (int64_t *)(v81 + 24);\n            int64_t * v84 = (int64_t *)(v81 + 40);\n            v45 = v80;\n            while (true) {\n              lab_0x40fa99_2:\n                // 0x40fa99\n                v46 = v45;\n                int64_t v85 = *v7 + 40 * v46; // 0x40faa4\n                if (v79 != *(int64_t *)v85) {\n                    goto lab_0x40fa88;\n                } else {\n                    // 0x40faad\n                    if (v59 != *(int64_t *)(v85 + 8)) {\n                        goto lab_0x40fa88;\n                    } else {\n                        int64_t v86 = *(int64_t *)(v85 + 24); // 0x40fab3\n                        int64_t v87 = *(int64_t *)(v85 + 16); // 0x40fab7\n                        int64_t v88 = v86 - v87; // 0x40fac3\n                        *v14 = v88;\n                        int64_t v89; // 0x40f6b0\n                        if (v88 == 0) {\n                            // 0x40f968\n                            v89 = *(int64_t *)(*v84 + 16 + *v10);\n                        } else {\n                            // 0x40fad1\n                            v89 = *v15 + *v83;\n                        }\n                        // 0x40f987\n                        *v12 = 24 * *(int64_t *)v89 + *v82;\n                        int64_t v90 = v86 + v59 - v87; // 0x40f993\n                        int64_t v91 = function_40b840(a1, v90 - 1, *v5); // 0x40f99a\n                        int64_t v92 = 8 * v90; // 0x40f9a4\n                        *v13 = 0;\n                        int64_t v93 = *v21; // 0x40f9b7\n                        int64_t v94 = v93 + v92; // 0x40f9be\n                        int64_t v95 = *(int64_t *)(v93 + *v24); // 0x40f9c2\n                        int64_t v96 = *(int64_t *)v94; // 0x40f9c6\n                        if (v95 != 0) {\n                            // 0x40f9ce\n                            *v13 = *(int64_t *)(v95 + 16);\n                        }\n                        if (v96 == 0) {\n                            // 0x40faf8\n                            *v18 = v94;\n                            int64_t v97 = function_40adc0(v27, v81, (int64_t *)*v12, (int32_t)v91); // 0x40fb0d\n                            int64_t v98 = *v21; // 0x40fb17\n                            *(int64_t *)*v18 = v97;\n                            v52 = v98;\n                            v53 = v98;\n                            if (*(int64_t *)(v98 + v92) != 0) {\n                                goto lab_0x40fa62;\n                            } else {\n                                goto lab_0x40fb2c;\n                            }\n                        } else {\n                            // 0x40f9e0\n                            *v25 = (int32_t)v91;\n                            *v20 = v92;\n                            int64_t v99 = function_40ac30(v26, *(int64_t *)(v96 + 80), *v12, v91 & 0xffffffff); // 0x40f9fa\n                            int32_t v100 = v99; // 0x40fa08\n                            *v23 = v100;\n                            if (v100 != 0) {\n                                // 0x40fcd0\n                                free((int64_t *)*v28);\n                                result = (int64_t)*v23;\n                                goto lab_0x40fb3b_7;\n                            }\n                            // 0x40fa17\n                            *v18 = *v21 + *v20;\n                            *(int64_t *)*v18 = function_40adc0(v27, v81, v26, *v25);\n                            free((int64_t *)*v28);\n                            int64_t v101 = *v21; // 0x40fa50\n                            v52 = v101;\n                            v53 = v101;\n                            if (*(int64_t *)(v101 + v92) == 0) {\n                                goto lab_0x40fb2c;\n                            } else {\n                                goto lab_0x40fa62;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        goto lab_0x40f730_3;\n    }\n  lab_0x40fe90_2:;\n    int64_t v102 = v48;\n    int64_t v103 = v50;\n    *v14 = v43;\n    if (*v57 > v49) {\n        goto lab_0x40f8f2_2;\n    } else {\n        // 0x40fea5\n        v44 = v103;\n        v47 = v102;\n        v41 = v102;\n        v42 = v103;\n        if (v49 == 0) {\n            goto lab_0x40fd03;\n        } else {\n            goto lab_0x40fcfc;\n        }\n    }\n  lab_0x40fe44:;\n    // 0x40fe44\n    int64_t v104; // 0x40f6b0\n    int64_t v105 = v104 + 1; // 0x40fe44\n    int64_t v106 = v105; // 0x40fe4d\n    if (*v12 < v105) {\n        // break -> 0x40f8f2\n        goto lab_0x40f8f2_2;\n    }\n    goto lab_0x40fd20;\n  lab_0x40fa88:;\n    int64_t v130 = v46 + 1; // 0x40fa88\n    v30 = v59;\n    int64_t v131 = v130; // 0x40fa93\n    if (v130 >= *v6) {\n        // break -> 0x40f730\n        goto lab_0x40f730_3;\n    }\n    // 0x40fa99\n    v45 = v131;\n    goto lab_0x40fa99_2;\n  lab_0x40fa62:\n    // 0x40fa62\n    if (*v14 != 0) {\n        goto lab_0x40fa88;\n    } else {\n        // 0x40fa6a\n        if (*(int64_t *)(*(int64_t *)(*v24 + v52) + 16) > *v13) {\n            int64_t v132 = *v12; // 0x40fc10\n            int64_t v133 = v132 + 16; // 0x40fc1b\n            int64_t v134 = v132 + 8; // 0x40fc1f\n            *v13 = v133;\n            int64_t v135 = function_40b6f0(a1, v134, v133, v59); // 0x40fc2e\n            int32_t v136 = v135; // 0x40fc33\n            *v23 = v136;\n            result = v135;\n            if (v136 != 0) {\n                // break (via goto) -> 0x40fb3b\n                goto lab_0x40fb3b_7;\n            }\n            int64_t v137 = function_40f6b0(a1, v134, *v13); // 0x40fc50\n            int32_t v138 = v137; // 0x40fc55\n            *v23 = v138;\n            result = v137;\n            if (v138 != 0) {\n                // break (via goto) -> 0x40fb3b\n                goto lab_0x40fb3b_7;\n            }\n            int64_t v139 = v46 + 1; // 0x40fc64\n            v30 = v59;\n            v131 = v139;\n            if (v139 >= *v6) {\n                // break -> 0x40f730\n                goto lab_0x40f730_3;\n            }\n            // 0x40fa99\n            v45 = v131;\n            goto lab_0x40fa99_2;\n        } else {\n            goto lab_0x40fa88;\n        }\n    }\n  lab_0x40fb2c:;\n    uint32_t v140 = *v23; // 0x40fb2c\n    v52 = v53;\n    if (v140 != 0) {\n        // 0x40fb3b\n        result = v140;\n        goto lab_0x40fb3b_7;\n    }\n    goto lab_0x40fa62;\n  lab_0x40f8f2_2:;\n    int64_t v141 = *v13 + 1; // 0x40f8f2\n    *v13 = v141;\n    if (v141 >= *v8) {\n        // break -> 0x40f910\n        goto lab_0x40f910;\n    }\n    // 0x40f906\n    v40 = v141;\n    v51 = *(int64_t *)*v9;\n    goto lab_0x40f8cb;\n  lab_0x40fd03:;\n    int64_t v142 = v42;\n    int64_t v122; // 0x40fd95\n    int64_t v128; // 0x40fe6c\n    int64_t v127; // 0x40fe71\n    int64_t * v143; // 0x40f6b0\n    int64_t * v144; // 0x40f6b0\n    if (*v12 >= v142) {\n        int64_t * v126 = (int64_t *)(v55 + 16);\n        v143 = (int64_t *)(v55 + 24);\n        v144 = (int64_t *)(v55 + 40);\n        v106 = v142;\n        int64_t v145 = v41; // 0x40fd16\n        while (true) {\n          lab_0x40fd20:\n            // 0x40fd20\n            v104 = v106;\n            if (v104 - *v58 >= 1) {\n                // 0x40fd2b\n                int64_t * v107; // 0x40f6b0\n                int64_t v108 = *v107; // 0x40fd2b\n                int64_t v109; // 0x40f6b0\n                int64_t v110; // 0x40f6b0\n                if (v108 > v110) {\n                    int64_t v111 = *v14;\n                    v109 = v111;\n                } else {\n                    // 0x40fec0\n                    int64_t * v112; // 0x40f6b0\n                    uint64_t v113 = *v112; // 0x40fec0\n                    if (v113 <= v110) {\n                        // break -> 0x40f8f2\n                        break;\n                    }\n                    int64_t v114 = function_408f90(a1, v110 + 1 & 0xffffffff); // 0x40fed1\n                    result = v114;\n                    if ((int32_t)v114 != 0) {\n                        // break (via goto) -> 0x40fb3b\n                        goto lab_0x40fb3b_7;\n                    }\n                    int64_t v115 = *v11; // 0x40fede\n                    *v14 = v115;\n                    v109 = v115;\n                }\n                int64_t v116 = v109; // 0x40fd35\n                char v117 = *(char *)(v104 - 1 + v116); // 0x40fd3e\n                char v118 = *(char *)(v116 + v110); // 0x40fd44\n                if (v118 != v117) {\n                    // break -> 0x40f8f2\n                    break;\n                }\n            }\n            int64_t v119 = *(int64_t *)(*v21 + 8 * v104); // 0x40fd58\n            if (v119 != 0) {\n                uint64_t v120 = *(int64_t *)(v119 + 16); // 0x40fd65\n                if (v120 >= 1) {\n                    int64_t v121 = 0;\n                    v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                    int64_t v123 = 16 * v122 + *(int64_t *)*v9; // 0x40fda0\n                    int64_t v124; // 0x40fdb8\n                    int64_t v125; // 0x40fdbc\n                    int64_t * mem; // 0x40fe6c\n                    if (*(char *)(v123 + 8) == 9) {\n                        // 0x40fda9\n                        if (*v10 == *(int64_t *)v123) {\n                            if (v122 == -1) {\n                                goto lab_0x40fe44;\n                            } else {\n                                // 0x40fdb8\n                                v124 = *v126;\n                                v127 = *v58;\n                                v128 = v124;\n                                if (v124 == 0) {\n                                    // 0x40fe58\n                                    *v18 = v125;\n                                    mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                    v128 = (int64_t)mem;\n                                    v127 = *v18;\n                                    *v126 = v128;\n                                    result = 12;\n                                    if (mem != NULL) {\n                                        goto lab_0x40fdc8;\n                                    } else {\n                                        goto lab_0x40fb3b_7;\n                                    }\n                                } else {\n                                    goto lab_0x40fdc8;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v129 = v121 + 1; // 0x40fd88\n                    while (v120 != v129) {\n                        // 0x40fd95\n                        v121 = v129;\n                        v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                        v123 = 16 * v122 + *(int64_t *)*v9;\n                        if (*(char *)(v123 + 8) == 9) {\n                            // 0x40fda9\n                            if (*v10 == *(int64_t *)v123) {\n                                if (v122 == -1) {\n                                    goto lab_0x40fe44;\n                                } else {\n                                    // 0x40fdb8\n                                    v124 = *v126;\n                                    v125 = *v58;\n                                    v127 = v125;\n                                    v128 = v124;\n                                    if (v124 == 0) {\n                                        // 0x40fe58\n                                        *v18 = v125;\n                                        mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                        v128 = (int64_t)mem;\n                                        v127 = *v18;\n                                        *v126 = v128;\n                                        result = 12;\n                                        if (mem != NULL) {\n                                            goto lab_0x40fdc8;\n                                        } else {\n                                            goto lab_0x40fb3b_7;\n                                        }\n                                    } else {\n                                        goto lab_0x40fdc8;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40fd88\n                        v129 = v121 + 1;\n                    }\n                }\n            }\n            goto lab_0x40fe44;\n        }\n    }\n    goto lab_0x40f8f2_2;\n  lab_0x40fcfc:\n    // 0x40fcfc\n    v41 = v47;\n    v42 = v44 + 1;\n    goto lab_0x40fd03;\n  lab_0x40f730_3:\n    // 0x40f730\n    v29 = *v3 + 1;\n    *v3 = v29;\n    if (v29 >= *(int64_t *)*(int64_t *)(v2 + 80)) {\n        // break -> 0x40fb3b\n        goto lab_0x40fb3b_7;\n    }\n    goto lab_0x40f749;\n  lab_0x40f7c0:\n    // 0x40f7c0\n    v54 = *v6;\n    if (v54 > 0) {\n        int64_t v146 = *v7; // 0x40f7d5\n        int64_t v147 = v146 + 8; // 0x40f7ed\n        int64_t v148 = 0;\n        uint64_t v149 = v148 + v54; // 0x40f7d1\n        int64_t v150 = (v149 / 0x8000000000000000 + v149) / 2; // 0x40f7e6\n        int64_t v151 = v150; // 0x40f7f2\n        int64_t v152 = v54; // 0x40f7f2\n        int64_t v153 = v150; // 0x40f7f2\n        int64_t v154; // 0x40f6b0\n        int64_t v155; // 0x40f6b0\n        uint64_t v156; // 0x40f800\n        int64_t v157; // 0x40f80e\n        if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n            v155 = v151;\n            v154 = v148;\n            if (v155 <= v148) {\n                // break (via goto) -> 0x40f827\n                goto lab_0x40f827;\n            }\n            // 0x40f800\n            v156 = v155 + v148;\n            v157 = (v156 / 0x8000000000000000 + v156) / 2;\n            v152 = v155;\n            v153 = v157;\n            while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                // 0x40f822\n                v155 = v157;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40f827\n                    goto lab_0x40f827;\n                }\n                // 0x40f800\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n            }\n        }\n        int64_t v158 = v152;\n        int64_t v159 = v153 + 1; // 0x40f878\n        v154 = v159;\n        while (v159 < v158) {\n            // 0x40f7d1\n            v148 = v159;\n            v149 = v148 + v158;\n            v150 = (v149 / 0x8000000000000000 + v149) / 2;\n            v151 = v150;\n            v152 = v158;\n            v153 = v150;\n            if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n                v155 = v151;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40f827\n                    goto lab_0x40f827;\n                }\n                // 0x40f800\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n                while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                    // 0x40f822\n                    v155 = v157;\n                    v154 = v148;\n                    if (v155 <= v148) {\n                        // break (via goto) -> 0x40f827\n                        goto lab_0x40f827;\n                    }\n                    // 0x40f800\n                    v156 = v155 + v148;\n                    v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                    v152 = v155;\n                    v153 = v157;\n                }\n            }\n            // 0x40f878\n            v158 = v152;\n            v159 = v153 + 1;\n            v154 = v159;\n        }\n      lab_0x40f827:;\n        int64_t v160 = v154;\n        if (v54 > v160) {\n            int64_t v161 = v146 + 40 * v160; // 0x40f837\n            int64_t v162 = v161; // 0x40f83f\n            if (v160 != -1 == *(int64_t *)(v161 + 8) == v31) {\n                int64_t v163 = v162;\n                while (v32 != *(int64_t *)v163) {\n                    // 0x40f850\n                    v162 = v163 + 40;\n                    if (*(char *)(v163 + 32) == 0) {\n                        goto lab_0x40f888;\n                    }\n                    v163 = v162;\n                }\n                // 0x40f85f\n                *v23 = 0;\n                v30 = v31;\n                goto lab_0x40f730_3;\n            } else {\n                goto lab_0x40f888;\n            }\n        } else {\n            goto lab_0x40f888;\n        }\n    } else {\n        goto lab_0x40f888;\n    }\n  lab_0x40f709:\n    // 0x40f709\n    v30 = v31;\n    if ((v35 & 0x2000) != 0 == (v36 & 2) == 0) {\n        goto lab_0x40f730_3;\n    } else {\n        if ((char)(v34 / 256) > -1) {\n            goto lab_0x40f7c0;\n        } else {\n            // 0x40f71e\n            v30 = v31;\n            if ((v36 & 8) != 0) {\n                goto lab_0x40f7c0;\n            } else {\n                goto lab_0x40f730_3;\n            }\n        }\n    }\n  lab_0x40fdc8:\n    // 0x40fdc8\n    *(int64_t *)(v2 - 16) = 9;\n    int64_t v164 = function_40e520(a1, v128, *v56, v127, v122, v104, (int64_t)&g67); // 0x40fddb\n    int32_t v165 = v164; // 0x40fde2\n    if (v165 == 1) {\n        goto lab_0x40fe44;\n    } else {\n        // 0x40fde7\n        result = v164;\n        if (v165 != 0) {\n            goto lab_0x40fb3b_7;\n        } else {\n            int64_t v166 = *v143; // 0x40fdef\n            if (*v57 == v166) {\n                int64_t v167 = 2 * v166 | 1; // 0x40feec\n                *v18 = v167;\n                int64_t * mem2 = realloc((int64_t *)*v144, 8 * (int32_t)v167); // 0x40ff02\n                result = 12;\n                if (mem2 == NULL) {\n                    goto lab_0x40fb3b_7;\n                } else {\n                    // 0x40ff10\n                    *v144 = (int64_t)mem2;\n                    *v143 = *v18;\n                    goto lab_0x40fdfd;\n                }\n            } else {\n                goto lab_0x40fdfd;\n            }\n        }\n    }\n  lab_0x40fdfd:;\n    int64_t * mem3 = calloc(1, 40); // 0x40fe07\n    result = 12;\n    if (mem3 == NULL) {\n        goto lab_0x40fb3b_7;\n    } else {\n        int64_t v168 = (int64_t)mem3; // 0x40fe07\n        int64_t v169 = *v57; // 0x40fe11\n        *(int64_t *)(*v144 + 8 * v169) = v168;\n        *mem3 = v122;\n        *(int64_t *)(v168 + 8) = v104;\n        *v57 = v169 + 1;\n        function_40f510(a1, v55, v168, *v15, *v12);\n        goto lab_0x40fe44;\n    }\n}\n"
        },
        {
            "funcName": "function_40ff30",
            "funcStartAddr": "40ff30",
            "funcEndAddr": "4100e7",
            "decompiledFuncCode": "int64_t function_40ff30(int32_t * a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 72); // 0x40ff44\n    int64_t v3 = *v2; // 0x40ff44\n    int64_t * v4 = (int64_t *)(v1 + 184); // 0x40ff48\n    int64_t v5 = *(int64_t *)(v1 + 152); // 0x40ff4f\n    int64_t v6 = 8 * v3; // 0x40ff56\n    int64_t * v7 = (int64_t *)(v1 + 192); // 0x40ff61\n    int64_t * v8 = (int64_t *)(*v4 + v6);\n    int64_t result; // 0x40ff30\n    if (*v7 < v3) {\n        // 0x40ff6a\n        *v8 = a3;\n        *v7 = v3;\n        result = a3;\n    } else {\n        int64_t v9 = *v8; // 0x40ffa0\n        if (v9 == 0) {\n            // 0x410078\n            *v8 = a3;\n            result = a3;\n        } else {\n            int64_t v10 = *(int64_t *)(v9 + 80); // 0x40ffac\n            int64_t v11; // bp-88, 0x40ff30\n            if (a3 == 0) {\n                // 0x410030\n                v11 = __asm_movaps(__asm_movdqu(*(int128_t *)v10));\n                int64_t v12 = function_40b840(v1, v3 - 1, *(int32_t *)(v1 + 160)); // 0x410050\n                int64_t v13 = function_40adc0((int128_t *)a1, v5, &v11, (int32_t)v12); // 0x410062\n                *v8 = v13;\n                result = v13;\n            } else {\n                int64_t v14 = *(int64_t *)(a3 + 80); // 0x40ffb5\n                int64_t v15; // 0x40ff30\n                int32_t v16 = function_40ac30(&v11, v14, v10, v15); // 0x40ffc9\n                *a1 = v16;\n                if (v16 != 0) {\n                    // 0x40ff85\n                    return 0;\n                }\n                int64_t v17 = function_40b840(v1, *v2 - 1, *(int32_t *)(v1 + 160)); // 0x40ffe6\n                int64_t v18 = function_40adc0((int128_t *)a1, v5, &v11, (int32_t)v17); // 0x410007\n                *(int64_t *)(*v4 + v6) = v18;\n                result = v18;\n                if (v14 != 0) {\n                    // 0x410020\n                    free((int64_t *)v15);\n                    result = v18;\n                }\n            }\n        }\n    }\n    // 0x40ff77\n    if (*(int64_t *)(v5 + 152) == 0) {\n        // 0x40ff85\n        return result;\n    }\n    // 0x410088\n    if (result == 0) {\n        // 0x40ff85\n        return 0;\n    }\n    int64_t v19 = result + 16; // 0x41008d\n    int64_t v20 = result + 24; // 0x410091\n    int32_t v21 = function_40b6f0(v1, v19, v20, v3); // 0x4100a6\n    *a1 = v21;\n    if (v21 != 0) {\n        // 0x40ff85\n        return 0;\n    }\n    // 0x4100ae\n    if ((*(char *)(result + 104) & 64) == 0) {\n        // 0x40ff85\n        return result;\n    }\n    int32_t v22 = function_40f6b0(v1, v19, v20); // 0x4100c6\n    *a1 = v22;\n    int64_t result2 = 0; // 0x4100cc\n    if (v22 == 0) {\n        // 0x4100ce\n        result2 = *(int64_t *)(*v4 + v6);\n    }\n    // 0x40ff85\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4100f0",
            "funcStartAddr": "4100f0",
            "funcEndAddr": "410414",
            "decompiledFuncCode": "int64_t function_4100f0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 24); // 0x410109\n    uint64_t v2 = *v1; // 0x410109\n    int64_t * mem = malloc(8); // 0x410123\n    if (mem == NULL) {\n        // 0x410400\n        return 12;\n    }\n    // 0x410136\n    int64_t v3; // bp-152, 0x4100f0\n    int64_t v4 = &v3; // 0x410105\n    int64_t v5 = (int64_t)mem; // 0x410123\n    *mem = *(int64_t *)(a2 + 16);\n    int64_t v6 = v5; // 0x41014e\n    int64_t v7; // 0x4100f0\n    int64_t v8; // 0x4100f0\n    int64_t v9; // 0x4100f0\n    int64_t v10; // 0x4100f0\n    int64_t * v11; // 0x4100f0\n    int64_t * v12; // 0x4100f0\n    int64_t v13; // 0x4100f0\n    int64_t v14; // 0x4101ae\n    int64_t * v15; // 0x4101c9\n    int64_t * v16; // 0x4100f0\n    int64_t v17; // 0x41029e\n    if ((int32_t)v5 == 0) {\n        // 0x410154\n        v6 = 0;\n        if (v2 >= 1) {\n            // 0x41016e\n            v11 = (int64_t *)(v4 + 16);\n            int32_t * v18 = (int32_t *)(v4 + 28);\n            int32_t * v19 = (int32_t *)(a1 + 224);\n            int64_t * v20 = (int64_t *)(a1 + 152);\n            v12 = (int64_t *)(v4 + 8);\n            int64_t * v21 = (int64_t *)(v4 + 40);\n            int64_t * v22 = (int64_t *)(v4 + 48);\n            int64_t * v23 = (int64_t *)(v4 + 32);\n            v13 = a2 + 40;\n            int64_t v24 = v2; // 0x4100f0\n            while (true) {\n                int64_t v25 = 8 * v24; // 0x410171\n                *v11 = v25;\n                if (*(int64_t *)(v25 + a2) == 0) {\n                    uint32_t v26 = *v18 + 1; // 0x4103c0\n                    *v18 = v26;\n                    if ((int64_t)*v19 < (int64_t)v26) {\n                        // break -> 0x4103d6\n                        break;\n                    }\n                } else {\n                    // 0x410189\n                    *v18 = 0;\n                    if (*v19 < 0) {\n                        // break -> 0x4103d6\n                        break;\n                    }\n                }\n                int64_t v27 = *(int64_t *)(a1 + 184); // 0x4101a2\n                v14 = v24 - 1;\n                *(int64_t *)(v4 + 72) = 0;\n                int64_t v28 = *(int64_t *)(v27 - 8 + *v11); // 0x4101bb\n                v9 = v27;\n                if (v28 != 0) {\n                    // 0x4101c9\n                    v15 = (int64_t *)(v28 + 40);\n                    int64_t v29 = *v20; // 0x4101ce\n                    v9 = v27;\n                    if (*v15 >= 1) {\n                        // 0x4101db\n                        *v12 = 0;\n                        int64_t * v30 = (int64_t *)v29; // 0x41029a\n                        v16 = (int64_t *)(v29 + 24);\n                        v7 = 0;\n                        while (true) {\n                          lab_0x410291:\n                            // 0x410291\n                            v17 = *(int64_t *)(8 * v7 + *(int64_t *)(v28 + 48));\n                            int64_t v31 = 16 * v17; // 0x4102a5\n                            int64_t v32 = v31 + *v30; // 0x4102a9\n                            v10 = v32;\n                            if ((*(char *)(v32 + 10) & 16) == 0) {\n                                goto lab_0x4101f0;\n                            } else {\n                                int64_t v33 = *v20; // 0x4102b6\n                                *v21 = v31;\n                                int64_t v34 = v33 + 216; // 0x4102d2\n                                *v22 = v33;\n                                *v23 = *v1;\n                                int64_t v35 = function_40e290(*(int64_t *)v33, v34, v17, a1, v14); // 0x4102e3\n                                int64_t v36 = *v21; // 0x4102e8\n                                int32_t v37 = v35; // 0x4102ed\n                                int64_t v38 = v35 & 0xffffffff; // 0x4102ef\n                                if (v37 < 1) {\n                                    // 0x410350\n                                    v8 = v38;\n                                    if (v37 != 0) {\n                                        goto lab_0x410231;\n                                    } else {\n                                        // 0x410356\n                                        v10 = *v30 + v36;\n                                        goto lab_0x4101f0;\n                                    }\n                                } else {\n                                    int64_t v39 = (0x100000000 * v35 >> 32) + v14; // 0x4102f6\n                                    v8 = v38;\n                                    if (*v23 < v39) {\n                                        goto lab_0x410231;\n                                    } else {\n                                        int64_t v40 = *(int64_t *)(8 * v39 + v34); // 0x41030c\n                                        if (v40 == 0) {\n                                            // 0x410356\n                                            v10 = *v30 + v36;\n                                            goto lab_0x4101f0;\n                                        } else {\n                                            // 0x410315\n                                            *v23 = v36;\n                                            int64_t v41 = *(int64_t *)(*(int64_t *)(*v22 + 24) + 8 * v17); // 0x410326\n                                            v8 = v38;\n                                            if (function_409b10(*(int64_t *)(v40 + 16), v40 + 24, v41) != 0) {\n                                                goto lab_0x410231;\n                                            } else {\n                                                // 0x410338\n                                                v10 = *v30 + *v23;\n                                                goto lab_0x4101f0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x410368:\n                // 0x410368\n                v6 = v9;\n                if ((int32_t)v9 != 0) {\n                    goto lab_0x410395_3;\n                }\n                // 0x41037f\n                v24 = v14;\n                v6 = 0;\n                if (v14 == 0) {\n                    goto lab_0x410395_3;\n                }\n            }\n            // 0x4103d6\n            memset((int64_t *)a2, 0, (int32_t)*v11);\n            free((int64_t *)*(int64_t *)(v4 + 80));\n            return (int32_t)&g67 ^ (int32_t)&g67;\n        }\n    }\n  lab_0x410395_3:;\n    int32_t * v42 = (int32_t *)(v4 + 8); // 0x41039a\n    *v42 = (int32_t)v6;\n    free((int64_t *)*(int64_t *)(v4 + 80));\n    return (int64_t)*v42;\n  lab_0x4101f0:;\n    int64_t v43 = v10;\n    if ((char)function_40b930(a1, v43, v14) == 0) {\n        goto lab_0x41027c;\n    } else {\n        int64_t v44 = *(int64_t *)(*v11 + v43); // 0x410207\n        if (v44 == 0) {\n            goto lab_0x41027c;\n        } else {\n            int64_t v45 = *(int64_t *)(*v16 + 8 * v17); // 0x41021d\n            v8 = 1;\n            if (function_409b10(*(int64_t *)(v44 + 16), v44 + 24, v45) == 0) {\n                goto lab_0x41027c;\n            } else {\n                goto lab_0x410231;\n            }\n        }\n    }\n  lab_0x41027c:;\n    int64_t v46 = *v12 + 1; // 0x41027c\n    *v12 = v46;\n    v7 = v46;\n    v9 = v46;\n    if (v46 >= *v15) {\n        // break -> 0x410368\n        goto lab_0x410368;\n    }\n    goto lab_0x410291;\n  lab_0x410231:\n    // 0x410231\n    if (*(int64_t *)v13 == 0) {\n        goto lab_0x410267;\n    } else {\n        int64_t v47 = *(int64_t *)(*v16 + 8 * v17); // 0x410252\n        *(int64_t *)(v4 - 16) = v14;\n        int64_t v48 = *(int64_t *)(v4 + 56); // 0x410257\n        int64_t v49 = function_409da0(a1, v13, v48, v47, (0x100000000 * v8 >> 32) + v14, v17, (int64_t)&g67); // 0x41025c\n        if ((char)v49 != 0) {\n            goto lab_0x41027c;\n        } else {\n            goto lab_0x410267;\n        }\n    }\n  lab_0x410267:\n    // 0x410267\n    v6 = 12;\n    if ((char)function_408500(v4 + 64, v17) == 0) {\n        goto lab_0x410395_3;\n    }\n    goto lab_0x41027c;\n}\n"
        },
        {
            "funcName": "function_410420",
            "funcStartAddr": "410420",
            "funcEndAddr": "4123a9",
            "decompiledFuncCode": "int64_t function_410420(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, uint64_t a7, int64_t a8, int64_t a9) {\n    // 0x410420\n    int64_t v1; // 0x410420\n    int64_t v2 = v1;\n    int64_t v3; // bp-312, 0x410420\n    __asm_rep_stosq_memset((char *)&v3, 0, 32);\n    int64_t v4 = *(int64_t *)(a1 + 32); // 0x41046c\n    char * v5 = (char *)v4; // 0x410478\n    char * v6 = v5; // 0x410480\n    if (v4 != 0) {\n        unsigned char v7 = *(char *)(a1 + 56); // 0x410482\n        v6 = NULL;\n        if (a4 != a5 && (v7 & 8) != 0) {\n            // 0x410498\n            v6 = v7 % 2 == 0 ? v5 : NULL;\n        }\n    }\n    int64_t * v8 = (int64_t *)(a1 + 48); // 0x4104b5\n    uint64_t v9 = *v8; // 0x4104b5\n    int64_t v10 = 0; // 0x4104c1\n    int64_t v11 = a7; // 0x4104c1\n    if (v9 < a7) {\n        // 0x4104c3\n        v10 = -1 - v9 + a7;\n        v11 = v9 + 1;\n    }\n    int64_t v12 = *(int64_t *)(a1 + 16); // 0x4104ed\n    if (v12 == 0) {\n        // 0x410e90\n        return 1;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x4104fd\n    int64_t v14 = *v13; // 0x4104fd\n    if (v14 == 0) {\n        // 0x410e90\n        return 1;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 80); // 0x41050a\n    int64_t v16 = *v15; // 0x41050a\n    if (v16 == 0) {\n        // 0x410e90\n        return 1;\n    }\n    int64_t * v17 = (int64_t *)(a1 + 88); // 0x410517\n    int64_t v18 = *v17; // 0x410517\n    if (v18 == 0) {\n        // 0x410e90\n        return 1;\n    }\n    int64_t * v19 = (int64_t *)(a1 + 96); // 0x410524\n    if (*v19 == 0) {\n        // 0x410e90\n        return 1;\n    }\n    int64_t v20 = a4; // 0x410534\n    int64_t v21 = a5; // 0x410534\n    if (*(int64_t *)(v14 + 16) != 0) {\n        goto lab_0x410568;\n    } else {\n        // 0x410536\n        v20 = a4;\n        v21 = a5;\n        if (*(int64_t *)(v16 + 16) != 0) {\n            goto lab_0x410568;\n        } else {\n            // 0x41053d\n            if (*(int64_t *)(v18 + 16) == 0) {\n                goto lab_0x41054a;\n            } else {\n                // 0x410544\n                if (*(char *)(a1 + 56) < 0) {\n                    goto lab_0x410568;\n                } else {\n                    goto lab_0x41054a;\n                }\n            }\n        }\n    }\n  lab_0x410e70_9:;\n    // 0x410e70\n    int64_t v22; // 0x410420\n    free((int64_t *)v22);\n    int64_t * v23; // 0x410420\n    int64_t v24; // 0x410420\n    int64_t v25; // 0x410420\n    if (*v23 != 0) {\n        // 0x411688\n        function_409780(&v3);\n        free((int64_t *)v24);\n        free((int64_t *)v25);\n    }\n    // 0x410e88\n    function_409740(&v3);\n    // 0x410e90\n    int64_t v26; // 0x410420\n    return v26 & 0xffffffff;\n  lab_0x4113d8_3:;\n    // 0x4113d8\n    int32_t v27; // 0x410420\n    int32_t v28 = v27; // bp-392, 0x4113d8\n    int32_t v29; // 0x410420\n    int32_t v30 = v29; // 0x4113e2\n    int64_t v31; // 0x410420\n    int64_t v32 = v31; // 0x4113e2\n    int64_t v33 = 0; // 0x4113e2\n    int64_t v34; // 0x410420\n    int64_t v35 = v34; // 0x4113e2\n    int64_t v36; // 0x410420\n    int64_t v37 = v36; // 0x4113e2\n    int64_t v38; // 0x410420\n    int64_t v39 = v38; // 0x4113e2\n    int64_t * v40; // 0x410420\n    v23 = v40;\n    v26 = 12;\n    int64_t v41; // 0x410420\n    v25 = v41;\n    int64_t v42; // 0x410420\n    v24 = v42;\n    v22 = 0;\n    int64_t v43; // 0x410420\n    if (v43 == 0) {\n        goto lab_0x410e70_9;\n    } else {\n        goto lab_0x410bc8;\n    }\n  lab_0x410c6f:;\n    // 0x410c6f\n    int64_t v44; // 0x410420\n    int64_t v45 = v44;\n    int64_t v46; // 0x410420\n    int64_t v47 = v46;\n    int64_t v48; // 0x410420\n    int64_t v49 = v48;\n    int32_t v50; // 0x410420\n    int32_t v51 = v50;\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v52; // 0x410420\n    int64_t v53 = v52; // 0x410420\n    int128_t v54; // 0x410420\n    int128_t v55 = v54; // 0x410420\n    int64_t v56; // 0x410420\n    int64_t v57 = v56; // 0x410420\n    int32_t v58; // 0x410420\n    int64_t v59; // 0x410420\n    int64_t v60; // 0x410420\n    int64_t v61; // 0x410420\n    int64_t v62; // 0x410420\n    int64_t v63; // 0x410420\n    int64_t v64; // 0x410420\n    int64_t v65; // 0x410420\n    int64_t v66; // 0x410420\n    int64_t v67; // bp-376, 0x410420\n    int64_t v68; // 0x410420\n    int64_t * mem; // 0x4114ef\n    int64_t v69; // 0x410420\n    int64_t * mem2; // 0x411516\n    int64_t v70; // 0x411516\n    int128_t v71; // 0x41153e\n    int64_t v72; // 0x41061d\n    char * v73; // 0x410420\n    char * v74; // 0x410420\n    int64_t v75; // 0x410420\n    int128_t v76; // 0x410420\n    switch (v45) {\n        case -1: {\n            goto lab_0x4112d0;\n        }\n        case -2: {\n            goto lab_0x410e70_9;\n        }\n        default: {\n            // 0x410c83\n            int64_t v77; // 0x410420\n            if (v11 < 2 | (*v73 & 16) != 0) {\n                // 0x410e40\n                v65 = v45;\n                v64 = v43;\n                if (*v40 == 0) {\n                    goto lab_0x410e53_2;\n                }\n                int64_t v78 = *(int64_t *)(8 * v45 + v43); // 0x41149e\n                int64_t v79 = function_40ba60(&v3, *(int64_t *)(v78 + 16), v78 + 24, v45); // 0x4114aa\n                v77 = v79;\n            } else {\n                int64_t v80 = *(int64_t *)(8 * v45 + v43); // 0x410cb7\n                int64_t v81 = function_40ba60(&v3, *(int64_t *)(v80 + 16), v80 + 24, v45); // 0x410cc3\n                v77 = v81;\n                if (*v74 % 2 == 0) {\n                    // 0x410ce5\n                    v65 = v45;\n                    v64 = v43;\n                    v77 = v81;\n                    if (*v40 == 0) {\n                        goto lab_0x410e53_2;\n                    }\n                }\n            }\n            // 0x4114bf\n            if (v45 >= 0x1fffffffffffffff) {\n                // break -> 0x410e70\n                break;\n            }\n            int64_t v82 = v45 + 1; // 0x4114df\n            int32_t size = 8 * (int32_t)v82; // 0x4114ef\n            mem = malloc(size);\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if (mem == NULL) {\n                // break -> 0x410e70\n                break;\n            }\n            int64_t v83 = v77;\n            v69 = (int64_t)mem;\n            if (*v40 == 0) {\n                int128_t v84 = __asm_pxor(v54, v54); // 0x411250\n                v67 = v69;\n                __asm_movaps(v84);\n                int64_t v85 = function_4100f0(v72, v75); // 0x411297\n                free(NULL);\n                int32_t v86 = v85;\n                v58 = v86;\n                v68 = 0;\n                v66 = v83;\n                v76 = v84;\n                v63 = v85;\n                if (v86 != 0) {\n                    goto lab_0x411a82;\n                } else {\n                    // 0x4112b5\n                    v60 = v45;\n                    if (*mem != 0) {\n                        goto lab_0x411628;\n                    }\n                    // 0x4112bf\n                    free(mem);\n                    v53 = v83;\n                    v55 = v84;\n                    v57 = v69;\n                    goto lab_0x4112d0;\n                }\n            } else {\n                // 0x411513\n                mem2 = malloc(size);\n                v70 = (int64_t)mem2;\n                int64_t v87 = v45; // 0x411526\n                if (mem2 == NULL) {\n                    // 0x411ac4\n                    free(mem);\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    goto lab_0x410e70_9;\n                }\n                v61 = v83;\n                v62 = v82;\n                int128_t v88 = v54;\n                memset(mem2, 0, 8 * (int32_t)v62);\n                v71 = __asm_pxor(v88, v88);\n                __asm_movaps(v71);\n                v67 = v69;\n                int64_t v89 = function_4100f0(v72, v75); // 0x411581\n                free(NULL);\n                int32_t v90 = v89;\n                v58 = v90;\n                v68 = v70;\n                v66 = v61;\n                v76 = v71;\n                v63 = v89;\n                while (v90 == 0) {\n                    // 0x4115a3\n                    v59 = v87;\n                    if (*mem != 0) {\n                        goto lab_0x4115fd_2;\n                    }\n                    // 0x4115a9\n                    if (*mem2 != 0) {\n                        goto lab_0x4115fd_2;\n                    }\n                    int64_t v91 = v59; // 0x4115c8\n                    if (v59 == 0) {\n                        goto lab_0x4116b0_2;\n                    }\n                    int64_t v92; // 0x410420\n                    int64_t v93; // 0x410420\n                    int64_t v94; // 0x4115ce\n                    while (true) {\n                        // 0x4115ce\n                        v92 = v91;\n                        v93 = v92 - 1;\n                        v94 = *(int64_t *)(8 * v93 + v43);\n                        if (v94 != 0) {\n                            // 0x4115d7\n                            if ((*(char *)(v94 + 104) & 16) != 0) {\n                                // break -> 0x4115dd\n                                break;\n                            }\n                        }\n                        // 0x4115c0\n                        v91 = v93;\n                        if (v93 == 0) {\n                            goto lab_0x4116b0_2;\n                        }\n                    }\n                    int64_t v95 = function_40ba60(&v3, *(int64_t *)(v94 + 16), v94 + 24, v93); // 0x4115f0\n                    v87 = v93;\n                    v61 = v95;\n                    v62 = v92;\n                    v88 = v71;\n                    memset(mem2, 0, 8 * (int32_t)v62);\n                    v71 = __asm_pxor(v88, v88);\n                    __asm_movaps(v71);\n                    v67 = v69;\n                    v89 = function_4100f0(v72, v75);\n                    free(NULL);\n                    v90 = v89;\n                    v58 = v90;\n                    v68 = v70;\n                    v66 = v61;\n                    v76 = v71;\n                    v63 = v89;\n                }\n                goto lab_0x411a82;\n            }\n        }\n    }\n  lab_0x4110ee:;\n    // 0x4110ee\n    int64_t v96; // 0x410420\n    int64_t v97 = v96 + 1; // 0x4110ee\n    int64_t v98; // 0x410420\n    int64_t v99 = v98; // 0x4110f6\n    int64_t v100; // 0x410420\n    int64_t v101 = v100; // 0x4110f6\n    int64_t v102; // 0x410420\n    int64_t v103 = v102; // 0x4110f6\n    int64_t v104; // 0x410420\n    int64_t v105 = v104; // 0x4110f6\n    int64_t v106; // 0x410420\n    int64_t v107 = v106; // 0x4110f6\n    int64_t v108 = v97; // 0x4110f6\n    int64_t v109 = v98; // 0x4110f6\n    int64_t v110 = v100; // 0x4110f6\n    int64_t v111 = v102; // 0x4110f6\n    int64_t v112 = v106; // 0x4110f6\n    int64_t v113 = v104; // 0x4110f6\n    int64_t v114 = v106; // 0x4110f6\n    int64_t v115 = v36; // 0x4110f6\n    int64_t v116; // 0x410420\n    int64_t v117 = v116; // 0x4110f6\n    int64_t * v118; // 0x410f80\n    if (v97 >= *v118) {\n        // break -> 0x411443\n        goto lab_0x411443;\n    }\n    goto lab_0x4110fc;\n  lab_0x410fe0:;\n    // 0x410fe0\n    int64_t v119; // 0x410420\n    int64_t v121; // 0x411104\n    int64_t v135 = function_40e290(v36, a1 + 216, v121, v72, v119); // 0x410fee\n    int64_t v120; // 0x410420\n    v98 = v120;\n    v100 = v72;\n    v102 = v121;\n    v104 = v36;\n    int64_t v136; // 0x410420\n    v106 = v136;\n    v116 = v121;\n    int64_t v137; // 0x410420\n    int64_t v138; // 0x410420\n    int64_t v139; // 0x410420\n    int64_t v140; // 0x410420\n    int32_t v141; // bp-388, 0x410420\n    int64_t v142; // 0x41104e\n    int64_t * v143; // 0x410592\n    int32_t v127; // 0x410420\n    int64_t v144; // 0x410420\n    if ((int32_t)v135 == 0) {\n        goto lab_0x4110ee;\n    } else {\n        int64_t v145 = (0x100000000 * v135 >> 32) + v136; // 0x410ffe\n        int32_t v146 = function_4090e0(v72, v145);\n        v141 = v146;\n        v27 = v146;\n        v31 = v120;\n        v34 = v119;\n        v38 = v121;\n        if (v146 != 0) {\n            goto lab_0x4113d8_3;\n        }\n        int64_t v147 = 8 * v145; // 0x411046\n        v142 = v147 + v43;\n        int64_t v148 = *v8 + 24 * *(int64_t *)(*v143 + 8 * v121); // 0x41105e\n        int64_t * v149 = (int64_t *)v142; // 0x411062\n        int64_t v150 = *v149; // 0x411062\n        if (v150 == 0) {\n            // 0x411180\n            v67 = __asm_movaps(__asm_movdqu(*(int128_t *)v148));\n            int64_t v151 = *(int64_t *)(v148 + 16); // 0x411193\n            int64_t v152 = function_40b840(v72, v145 - 1, v127); // 0x4111a6\n            int64_t v153 = v152 & 0xffffffff; // 0x4111be\n            int64_t v154 = function_40adc0((int128_t *)&v141, a1, &v67, (int32_t)v152); // 0x4111c0\n            *v149 = v154;\n            v98 = v151;\n            v100 = v153;\n            v102 = v43;\n            v104 = v144;\n            v106 = v136;\n            v116 = v147;\n            v140 = v151;\n            v138 = v153;\n            v139 = v144;\n            v137 = v147;\n            if (v154 != 0) {\n                goto lab_0x4110ee;\n            } else {\n                goto lab_0x4111e0;\n            }\n        } else {\n            int64_t v155 = function_40ac30(&v67, *(int64_t *)(v150 + 80), v148, v72); // 0x41107a\n            int32_t v156 = v155;\n            v141 = v156;\n            v27 = v156;\n            v31 = v120;\n            v34 = v142;\n            v38 = v147;\n            if (v156 != 0) {\n                goto lab_0x4113d8_3;\n            }\n            int64_t v157 = function_40b840(v72, v145 - 1, v127); // 0x41109c\n            int64_t v158 = v157 & 0xffffffff; // 0x4110b4\n            int64_t v159 = function_40adc0((int128_t *)&v141, a1, &v67, (int32_t)v157); // 0x4110be\n            *v149 = v159;\n            free((int64_t *)v120);\n            v98 = v120;\n            v100 = v158;\n            v102 = v43;\n            v104 = v120;\n            v106 = v136;\n            v116 = v142;\n            v140 = v120;\n            v138 = v158;\n            v139 = v120;\n            v137 = v142;\n            if (*v149 == 0) {\n                goto lab_0x4111e0;\n            } else {\n                goto lab_0x4110ee;\n            }\n        }\n    }\n  lab_0x410fc1:;\n    // 0x410fc1\n    int64_t v132; // 0x410420\n    int64_t v160 = v132;\n    v98 = v120;\n    int64_t v129; // 0x411154\n    v100 = v129;\n    v102 = v160;\n    v104 = v72;\n    v106 = v119;\n    v116 = v121;\n    uint64_t v125; // 0x411118\n    uint64_t v126; // 0x41113e\n    int64_t v128; // 0x41114f\n    if ((v125 & 0x2000) != 0 == (v126 & 2) == 0) {\n        goto lab_0x4110ee;\n    } else {\n        uint32_t v161 = (int32_t)v128 & 128; // 0x410fce\n        if (v161 == 0) {\n            goto lab_0x410fe0;\n        } else {\n            // 0x410fd6\n            v98 = v120;\n            v100 = v161;\n            v102 = v160;\n            v104 = v72;\n            v106 = v119;\n            v116 = v121;\n            if ((v126 & 8) == 0) {\n                goto lab_0x4110ee;\n            } else {\n                goto lab_0x410fe0;\n            }\n        }\n    }\n  lab_0x4111e0:\n    // 0x4111e0\n    v98 = v140;\n    v100 = v138;\n    v102 = v43;\n    v104 = v139;\n    v106 = v136;\n    v116 = v137;\n    v27 = v141;\n    v31 = v140;\n    v34 = v142;\n    v38 = v137;\n    if (v141 != 0) {\n        goto lab_0x4113d8_3;\n    }\n    goto lab_0x4110ee;\n  lab_0x410e53_2:;\n    int64_t v162 = v64;\n    v23 = v40;\n    int64_t v163; // 0x4109a5\n    v26 = v163;\n    v25 = v41;\n    v24 = v42;\n    v22 = v162;\n    int64_t v164; // 0x410420\n    int64_t v165; // 0x410420\n    int64_t v166; // 0x410420\n    int64_t v167; // 0x410420\n    int64_t v168; // 0x411817\n    if (v11 != 0) {\n        // 0x4117f8\n        v165 = v65;\n        v167 = a8 + 16;\n        v168 = 16 * v11 + a8;\n        v164 = v167;\n        if (v11 < 2) {\n            // 0x411b04\n            *(int64_t *)a8 = 0;\n            *(int64_t *)(a8 + 8) = v165;\n            v166 = 0;\n            goto lab_0x4118d2;\n        } else {\n            goto lab_0x411830;\n        }\n    } else {\n        goto lab_0x410e70_9;\n    }\n  lab_0x411628:\n    // 0x411628\n    free((int64_t *)v43);\n    v65 = v60;\n    v64 = v69;\n    goto lab_0x410e53_2;\n  lab_0x4115fd_2:;\n    int64_t v169 = function_40b2b0(a1, v69, v70, v62); // 0x41160b\n    free(mem2);\n    int32_t v170 = v169;\n    v60 = v59;\n    v58 = v170;\n    v68 = 0;\n    v66 = v61;\n    v76 = v71;\n    v63 = v169;\n    if (v170 != 0) {\n        goto lab_0x411a82;\n    } else {\n        goto lab_0x411628;\n    }\n  lab_0x4116b0_2:\n    // 0x4116b0\n    free(mem);\n    free(mem2);\n    function_409780(&v3);\n    int32_t v171 = v51; // 0x4116d0\n    int64_t v172 = v61; // 0x4116d0\n    int128_t v173 = v71; // 0x4116d0\n    int64_t v174; // bp-384, 0x410420\n    int64_t v175 = v174; // 0x4116d0\n    int64_t v176 = v49; // 0x4116d0\n    int64_t v177 = v47; // 0x4116d0\n    int64_t v178 = v69; // 0x4116d0\n    goto lab_0x4112e0;\n  lab_0x410b94:;\n    // 0x410b94\n    int64_t v300; // 0x410420\n    int64_t v533 = v300;\n    int64_t v299; // 0x410420\n    int64_t v534 = v299;\n    int64_t v298; // 0x410420\n    int64_t v535 = v298;\n    int64_t v295; // 0x410420\n    int64_t v536 = v295;\n    int64_t v293; // 0x410420\n    int64_t v537 = v293;\n    int64_t v296; // 0x410420\n    int32_t v538 = (int32_t)v296 + 1; // 0x410b98\n    int64_t v328; // 0x410420\n    int64_t v539 = (int64_t)*(char *)(v296 + v328); // 0x410ba8\n    int64_t v284; // 0x410420\n    int64_t * v540 = (int64_t *)(v284 + 88); // 0x410bac\n    int64_t v541 = *v540; // 0x410bac\n    int64_t v297; // 0x410420\n    int64_t v542 = v297; // 0x410bb3\n    int64_t v543 = v541; // 0x410bb3\n    int64_t v544; // 0x410420\n    int64_t v294; // 0x410420\n    int64_t v545; // 0x410420\n    int64_t v546; // 0x410420\n    int64_t v349; // 0x410420\n    if (v541 == 0) {\n        int64_t v547 = v294;\n        int64_t v548 = *(int64_t *)(v284 + 96); // 0x4111f8\n        while (v548 == 0) {\n            // 0x4113f0\n            if ((char)function_40c550(a1, v284, v536, v547, v535) == 0) {\n                // 0x411408\n                v28 = 12;\n                v30 = v538;\n                v32 = v537;\n                v33 = 0;\n                v35 = v535;\n                v37 = v534;\n                v39 = v533;\n                v23 = v40;\n                v26 = 12;\n                v25 = v41;\n                v24 = v42;\n                v22 = 0;\n                if (v43 != 0) {\n                    goto lab_0x410bc8;\n                } else {\n                    goto lab_0x410e70_9;\n                }\n            }\n            int64_t v549 = *v540; // 0x410bac\n            v542 = a1;\n            v543 = v549;\n            if (v549 != 0) {\n                goto lab_0x410bb9;\n            }\n            v548 = *(int64_t *)(v284 + 96);\n        }\n        int64_t v550 = v548 + 8 * v539;\n        int64_t v551 = function_40b840(v72, (int64_t)v538 - 1, v127) % 2 == 0 ? v550 : v550 + 2048;\n        v546 = v349;\n        v544 = v551;\n        v545 = v72;\n    } else {\n      lab_0x410bb9:\n        // 0x410bb9\n        v546 = v536;\n        v544 = v543 + 8 * v539;\n        v545 = v542;\n    }\n    int64_t v552 = *(int64_t *)v544;\n    v30 = v538;\n    v32 = v537;\n    v33 = v552;\n    v35 = v535;\n    v37 = v534;\n    v39 = v533;\n    int32_t v553 = v538; // 0x410bc6\n    int64_t v554 = v537; // 0x410bc6\n    int64_t v555 = v546; // 0x410bc6\n    int64_t v556 = v552; // 0x410bc6\n    int64_t v557 = v545; // 0x410bc6\n    int64_t v558 = v535; // 0x410bc6\n    int64_t v559 = v534; // 0x410bc6\n    int64_t v560 = v533; // 0x410bc6\n    if (v43 == 0) {\n        goto lab_0x410bde;\n    } else {\n        goto lab_0x410bc8;\n    }\n  lab_0x410f80:;\n    // 0x410f80\n    int64_t v302; // 0x410420\n    int64_t v561 = v302;\n    int64_t v301; // 0x410420\n    int64_t v562 = v301;\n    v118 = (int64_t *)(v284 + 16);\n    int64_t v279; // 0x410420\n    v109 = v279;\n    int64_t v286; // 0x410b59\n    v110 = v286;\n    int64_t v280; // 0x410420\n    v111 = v280;\n    v112 = v562;\n    v113 = v561;\n    int64_t v282; // 0x410420\n    v114 = v282;\n    int64_t v283; // 0x410420\n    v115 = v283;\n    int64_t v285; // 0x410420\n    v117 = v285;\n    if (*v118 >= 1) {\n        int64_t * v122 = (int64_t *)(v284 + 24); // 0x4110fc\n        v136 = v29;\n        v99 = v279;\n        v101 = v286;\n        v103 = v280;\n        v105 = v561;\n        v107 = v562;\n        v108 = 0;\n        while (true) {\n          lab_0x4110fc:\n            // 0x4110fc\n            v96 = v108;\n            v119 = v107;\n            v36 = v105;\n            v120 = v99;\n            v121 = *(int64_t *)(*v122 + 8 * v96);\n            int64_t v123 = 16 * v121 + v36; // 0x41110f\n            v98 = v120;\n            v100 = v101;\n            v102 = v103;\n            v104 = v36;\n            v106 = v119;\n            v116 = v121;\n            if ((*(char *)(v123 + 10) & 16) == 0) {\n                goto lab_0x4110ee;\n            } else {\n                uint32_t v124 = *(int32_t *)(v123 + 8); // 0x411118\n                if ((v124 & 0x3ff00) == 0) {\n                    goto lab_0x410fe0;\n                } else {\n                    // 0x411127\n                    v125 = (int64_t)v124;\n                    v126 = function_40b840(v72, v119, v127);\n                    v128 = v125 / 256;\n                    v129 = v128 & 0xff03ff;\n                    if ((v125 & 1024) != 0) {\n                        // 0x410fb0\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v128;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v126 % 2 == 0) {\n                            goto lab_0x4110ee;\n                        } else {\n                            uint32_t v130 = (int32_t)v128 & 8; // 0x410fb8\n                            int64_t v131 = v130; // 0x410fb8\n                            v132 = v131;\n                            v98 = v120;\n                            v100 = v129;\n                            v102 = v131;\n                            v104 = v72;\n                            v106 = v119;\n                            v116 = v121;\n                            if (v130 != 0) {\n                                goto lab_0x4110ee;\n                            } else {\n                                goto lab_0x410fc1;\n                            }\n                        }\n                    } else {\n                        uint32_t v133 = (int32_t)v128 & 8; // 0x411162\n                        int64_t v134 = v133; // 0x411162\n                        v132 = v134;\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v134;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v133 == 0 || v126 % 2 == 0) {\n                            goto lab_0x410fc1;\n                        } else {\n                            goto lab_0x4110ee;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x411443:\n    // 0x411443\n    v28 = 0;\n    v293 = v109;\n    v294 = v110;\n    v295 = v111;\n    v296 = v112;\n    v297 = v113;\n    v298 = v114;\n    v299 = v115;\n    v300 = v117;\n    goto lab_0x410b94;\n  lab_0x410bde:;\n    int64_t v563 = v560;\n    int64_t v564 = v559;\n    int64_t v565 = v558;\n    int64_t v566 = v554;\n    int32_t v567 = v553;\n    int32_t v568 = v567; // 0x410be1\n    int64_t v569 = v555; // 0x410be1\n    int64_t v570 = v556; // 0x410be1\n    int64_t v571 = v557; // 0x410be1\n    int64_t v267; // 0x410420\n    int64_t v265; // 0x410420\n    int64_t v266; // 0x410420\n    int32_t v263; // 0x410420\n    int64_t v264; // 0x410420\n    int64_t v262; // 0x410420\n    int64_t v278; // 0x410420\n    int64_t v261; // 0x410420\n    int64_t v277; // 0x410420\n    int64_t v276; // 0x410420\n    int32_t v260; // 0x410420\n    int32_t v274; // 0x410420\n    int64_t v350; // 0x410420\n    char v351; // 0x410420\n    if (v556 == 0) {\n        // 0x410be7\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 != 0) {\n            // break (via goto) -> 0x410e70\n            goto lab_0x410e70_9;\n        }\n        // 0x410bfe\n        v260 = v274;\n        v261 = v277;\n        v262 = v278;\n        v263 = v567;\n        v264 = v566;\n        v265 = v565;\n        v266 = v564;\n        v267 = v563;\n        if (v43 == 0) {\n            // break -> 0x410c5d\n            goto lab_0x410c5d_6;\n        }\n        int32_t v572 = v567; // 0x410c16\n        v260 = v274;\n        v261 = v277;\n        v262 = v278;\n        v263 = v567;\n        v264 = v566;\n        v265 = v565;\n        v266 = v564;\n        v267 = v563;\n        if ((v351 & (char)v276) != 0) {\n            // break -> 0x410c5d\n            goto lab_0x410c5d_6;\n        }\n        int32_t v573 = v572;\n        v260 = v274;\n        v261 = v277;\n        v262 = v278;\n        v263 = v573;\n        v264 = v566;\n        v265 = v565;\n        v266 = v564;\n        v267 = v563;\n        if (v573 > -1) {\n            // break (via goto) -> 0x410c5d\n            goto lab_0x410c5d_6;\n        }\n        int64_t v574 = (int64_t)v573 + 1;\n        int64_t v575; // 0x410c43\n        while (*(int64_t *)(8 * v574 + v43) == 0) {\n            // 0x410c43\n            v575 = v574 + 1;\n            v260 = v274;\n            v261 = v277;\n            v262 = v278;\n            v263 = 0;\n            v264 = v566;\n            v265 = v565;\n            v266 = v564;\n            v267 = v563;\n            if (v575 > 0) {\n                // break (via goto) -> 0x410c5d\n                goto lab_0x410c5d_6;\n            }\n            v574 = v575;\n        }\n        int64_t v576 = function_40ff30(&v28, &v3, 0); // 0x410ec5\n        uint32_t v577 = v28; // 0x410eca\n        int32_t v578 = v574;\n        while (v577 == 0) {\n            // 0x410ed5\n            v572 = v578;\n            if (v576 != 0) {\n                // 0x410af0\n                v568 = v578;\n                v569 = v577;\n                v570 = v576;\n                v571 = v350;\n                goto lab_0x410af0_2;\n            }\n            v573 = v572;\n            v260 = v274;\n            v261 = v277;\n            v262 = v278;\n            v263 = v573;\n            v264 = v566;\n            v265 = v565;\n            v266 = v564;\n            v267 = v563;\n            if (v573 > -1) {\n                // break (via goto) -> 0x410c5d\n                goto lab_0x410c5d_6;\n            }\n            // 0x410c30\n            v574 = (int64_t)v573 + 1;\n            while (*(int64_t *)(8 * v574 + v43) == 0) {\n                // 0x410c43\n                v575 = v574 + 1;\n                v260 = v274;\n                v261 = v277;\n                v262 = v278;\n                v263 = 0;\n                v264 = v566;\n                v265 = v565;\n                v266 = v564;\n                v267 = v563;\n                if (v575 > 0) {\n                    // break (via goto) -> 0x410c5d\n                    goto lab_0x410c5d_6;\n                }\n                v574 = v575;\n            }\n            // 0x410eb0\n            v576 = function_40ff30(&v28, &v3, 0);\n            v577 = v28;\n            v578 = v574;\n        }\n        // 0x410ef0\n        v568 = v578;\n        v569 = v577;\n        v570 = v576;\n        v571 = v350;\n        v260 = v274;\n        v261 = v277;\n        v262 = v278;\n        v263 = v578;\n        v264 = v566;\n        v265 = v565;\n        v266 = v564;\n        v267 = v563;\n        if (v576 == 0) {\n            // break -> 0x410c5d\n            goto lab_0x410c5d_6;\n        }\n    }\n    goto lab_0x410af0_2;\n  lab_0x410bc8:;\n    int64_t v628 = function_40ff30(&v28, &v3, v33); // 0x410bd6\n    v553 = v30;\n    v554 = v32;\n    v555 = v33;\n    v556 = v628;\n    v557 = v350;\n    v558 = v35;\n    v559 = v37;\n    v560 = v39;\n    goto lab_0x410bde;\n  lab_0x410af0_2:;\n    int64_t v579 = v571;\n    int64_t v580 = v570;\n    int64_t v581 = v569;\n    int32_t v582 = v568;\n    int64_t v583 = v582; // 0x410af3\n    char v584 = *(char *)(v580 + 104); // 0x410b15\n    int64_t v585 = v276; // 0x410b1b\n    int64_t v586 = v277; // 0x410b1b\n    int64_t v587 = v278; // 0x410b1b\n    int64_t v588 = v581; // 0x410b1b\n    int64_t v589 = v579; // 0x410b1b\n    int64_t v590; // 0x410420\n    int64_t v591; // 0x410420\n    if ((v584 & 16) == 0) {\n        goto lab_0x410b48;\n    } else {\n        // 0x410b1d\n        v591 = v581;\n        v590 = v579;\n        if (v584 < 0) {\n            int64_t v592 = v580 + 24; // 0x410f14\n            int64_t v593 = function_40ba60(&v3, *(int64_t *)(v580 + 16), v592, v583); // 0x410f1e\n            v591 = v592;\n            v590 = v72;\n            v585 = v276;\n            v586 = v277;\n            v587 = v278;\n            v588 = v592;\n            v589 = v72;\n            if (v593 == 0) {\n                goto lab_0x410b48;\n            } else {\n                goto lab_0x410b25;\n            }\n        } else {\n            goto lab_0x410b25;\n        }\n    }\n  lab_0x410b48:;\n    // 0x410b48\n    char v275; // 0x410420\n    char v594 = v275 & (char)(v284 == v580); // 0x410afe\n    int32_t v595 = v594 == 0 ? (int64_t)v274 : v286;\n    int64_t v245 = v563; // 0x410b53\n    int64_t v246 = v580; // 0x410b53\n    int64_t v247 = v564; // 0x410b53\n    int64_t v248 = v565; // 0x410b53\n    int64_t v249 = v589; // 0x410b53\n    int64_t v250 = v583; // 0x410b53\n    int64_t v251 = v588; // 0x410b53\n    int64_t v252 = v566; // 0x410b53\n    int64_t v254 = v587; // 0x410b53\n    int64_t v255 = v586; // 0x410b53\n    int64_t v256 = v585; // 0x410b53\n    char v257 = v594; // 0x410b53\n    int32_t v258 = v582; // 0x410b53\n    int32_t v259 = v595; // 0x410b53\n    v260 = v595;\n    v261 = v586;\n    v262 = v587;\n    v263 = v582;\n    v264 = v566;\n    v265 = v565;\n    v266 = v564;\n    v267 = v563;\n    if (v583 >= a6) {\n        // break -> 0x410c5d\n        goto lab_0x410c5d_6;\n    }\n    goto lab_0x410b59;\n  lab_0x410b25:\n    // 0x410b25\n    v585 = 1;\n    v586 = v583;\n    v587 = 0;\n    v588 = v591;\n    v589 = v590;\n    v50 = v582;\n    v52 = v566;\n    v48 = v565;\n    v46 = v564;\n    v44 = v583;\n    v56 = v563;\n    int32_t v311; // 0x410420\n    if (v311 == 0) {\n        goto lab_0x410c6f;\n    }\n    goto lab_0x410b48;\n  lab_0x410920:\n    // 0x410920\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v355; // 0x410420\n    int64_t v181; // 0x41080c\n    if (v181 > v355) {\n        // break -> 0x410e70\n        goto lab_0x410e70_9;\n    }\n    char v596 = 0;\n    int64_t v597 = v355;\n    int64_t v598 = 0; // 0x41096f\n    if (v597 < a3) {\n        // 0x410971\n        v598 = (int64_t)*(char *)(v597 + a2);\n    }\n    int64_t v599 = v598;\n    int64_t v600 = v599; // 0x410979\n    int64_t v315; // 0x41058e\n    if (v315 != 0) {\n        // 0x41097b\n        v600 = (int64_t)*(char *)(v599 + v315);\n    }\n    int64_t v347; // 0x410420\n    while (*(char *)(v600 + v347) == 0) {\n        int64_t v601 = v597 - 1; // 0x410958\n        if (v601 < v181) {\n            // 0x411728\n            v174 = v601;\n            v23 = v40;\n            v26 = 1;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            goto lab_0x410e70_9;\n        }\n        v596 = 1;\n        v597 = v601;\n        v598 = 0;\n        if (v597 < a3) {\n            // 0x410971\n            v598 = (int64_t)*(char *)(v597 + a2);\n        }\n        // 0x410976\n        v599 = v598;\n        v600 = v599;\n        if (v315 != 0) {\n            // 0x41097b\n            v600 = (int64_t)*(char *)(v599 + v315);\n        }\n    }\n    // 0x410985\n    int32_t v358; // 0x410420\n    int32_t v237 = v358; // 0x410987\n    int64_t v357; // 0x410420\n    int64_t v238 = v357; // 0x410987\n    int128_t v356; // 0x410420\n    int128_t v239 = v356; // 0x410987\n    int64_t v240 = v355; // 0x410987\n    int64_t v241 = a3; // 0x410987\n    int64_t v242 = v181; // 0x410987\n    int64_t v352; // 0x410420\n    int64_t v243 = v352; // 0x410987\n    if (v596 != 0) {\n        // 0x410989\n        v174 = v597;\n        v237 = v358;\n        v238 = v357;\n        v239 = v356;\n        v240 = v597;\n        v241 = a3;\n        v242 = v181;\n        v243 = v352;\n    }\n    goto lab_0x410998;\n  lab_0x410998:;\n    int64_t v602 = v240;\n    v163 = function_40bb30(&v3, v602, v127);\n    v23 = v40;\n    v26 = v163;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if ((int32_t)v163 != 0) {\n        // break -> 0x410e70\n        goto lab_0x410e70_9;\n    }\n    int64_t v236 = v243;\n    int64_t v235 = v242;\n    int64_t v234 = v241;\n    v54 = v239;\n    int64_t v233 = v238;\n    int32_t v217 = v237;\n    int64_t v287; // 0x410420\n    int32_t v341; // 0x41082f\n    if (v287 == 0 || v341 == 1) {\n        goto lab_0x4109dc;\n    } else {\n        // 0x4109cb\n        v171 = v217;\n        v172 = v233;\n        v173 = v54;\n        v175 = v602;\n        v176 = v234;\n        v177 = v235;\n        v178 = v236;\n        int32_t * v603; // 0x410420\n        if (*v603 == -1) {\n            goto lab_0x4112e0;\n        } else {\n            goto lab_0x4109dc;\n        }\n    }\n  lab_0x41131c:;\n    // 0x41131c\n    int64_t v193; // 0x410420\n    int64_t v604 = v193;\n    uint64_t v605 = v604 - v1; // 0x411383\n    int64_t v606; // 0x4113a7\n    if (v287 <= v605) {\n        // 0x411395\n        v606 = function_40bb30(&v3, v604, v127);\n        v23 = v40;\n        v26 = v606;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if ((int32_t)v606 != 0) {\n            // break (via goto) -> 0x410e70\n            goto lab_0x410e70_9;\n        }\n    }\n    int64_t v607 = v347; // 0x411346\n    if (v604 < a3) {\n        // 0x411348\n        v607 = (int64_t)*(char *)(v605 + v328) + v347;\n    }\n    // 0x411357\n    int32_t v190; // 0x410420\n    v237 = v190;\n    int64_t v191; // 0x410420\n    v238 = v191;\n    int128_t v192; // 0x410420\n    v239 = v192;\n    v240 = v604;\n    int64_t v194; // 0x410420\n    v241 = v194;\n    int64_t v195; // 0x410420\n    v242 = v195;\n    v243 = v181;\n    int64_t v182; // 0x41081b\n    int64_t v180; // 0x410420\n    while (*(char *)v607 == 0) {\n        int64_t v608 = v604 + v180; // 0x411363\n        v174 = v608;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v608 < v181 || v608 > v182) {\n            // break (via goto) -> 0x410e70\n            goto lab_0x410e70_9;\n        }\n        v604 = v608;\n        v605 = v604 - v1;\n        if (v287 <= v605) {\n            // 0x411395\n            v606 = function_40bb30(&v3, v604, v127);\n            v23 = v40;\n            v26 = v606;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if ((int32_t)v606 != 0) {\n                // break (via goto) -> 0x410e70\n                goto lab_0x410e70_9;\n            }\n        }\n        // 0x411340\n        v607 = v347;\n        if (v604 < a3) {\n            // 0x411348\n            v607 = (int64_t)*(char *)(v605 + v328) + v347;\n        }\n        // 0x411357\n        v237 = v190;\n        v238 = v191;\n        v239 = v192;\n        v240 = v604;\n        v241 = v194;\n        v242 = v195;\n        v243 = v181;\n    }\n    goto lab_0x410998;\n  lab_0x410d7c:;\n    // 0x410d7c\n    int64_t v360; // 0x410420\n    int64_t v609 = v360;\n    int64_t v359; // 0x410420\n    int64_t v610 = v359;\n    v237 = v358;\n    v238 = v357;\n    v239 = v356;\n    v240 = v610;\n    v241 = v609;\n    int64_t v353; // 0x410420\n    v242 = v353;\n    v243 = v352;\n    char * v348; // 0x410420\n    if (v182 == v610) {\n        int64_t v611 = 0; // 0x410d93\n        if (v182 < a3) {\n            // 0x410d95\n            v611 = (int64_t)*v348;\n        }\n        int64_t v612 = v611;\n        int64_t v613 = v612; // 0x410da9\n        if (v315 != 0) {\n            // 0x410dab\n            v613 = (int64_t)*(char *)(v612 + v315);\n        }\n        // 0x410daf\n        v237 = v358;\n        v238 = v357;\n        v239 = v356;\n        v240 = v610;\n        v241 = v609;\n        v242 = v353;\n        v243 = v352;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (*(char *)(v613 + v347) == 0) {\n            // break -> 0x410e70\n            goto lab_0x410e70_9;\n        }\n    }\n    goto lab_0x410998;\n  lab_0x4109dc:;\n    int64_t v614 = *v13; // 0x410a03\n    v28 = 0;\n    int64_t v220 = v349; // 0x410a37\n    int64_t v222 = v72; // 0x410a37\n    int64_t v224 = v614; // 0x410a37\n    int64_t v225; // 0x410420\n    int64_t v223; // 0x410420\n    int64_t v221; // 0x410420\n    if (*(char *)(v614 + 104) >= 0) {\n        goto lab_0x410a80;\n    } else {\n        uint64_t v615 = function_40b840(v72, (int64_t)v217 - 1, v127); // 0x410a47\n        if (v615 % 2 != 0) {\n            // 0x4116d8\n            v221 = v349;\n            v223 = v72;\n            v225 = *v15;\n            goto lab_0x4116dc;\n        } else {\n            int32_t v616 = v615; // 0x410a54\n            v220 = v349;\n            v222 = v72;\n            v224 = v614;\n            if (v616 == 0) {\n                goto lab_0x410a80;\n            } else {\n                int64_t v617 = v615 & 6; // 0x410a5a\n                if (v617 == 6) {\n                    // 0x411a70\n                    v221 = 6;\n                    v223 = v72;\n                    v225 = *v19;\n                    goto lab_0x4116dc;\n                } else {\n                    if ((v615 & 2) != 0) {\n                        // 0x4117a0\n                        v221 = v617;\n                        v223 = v72;\n                        v225 = *v17;\n                        goto lab_0x4116dc;\n                    } else {\n                        // 0x410a6e\n                        v220 = v617;\n                        v222 = v72;\n                        v224 = v614;\n                        if ((v615 & 4) != 0) {\n                            int64_t v618 = *(int64_t *)(v614 + 80); // 0x4117b0\n                            int64_t v619 = function_40adc0((int128_t *)&v28, a1, (int64_t *)v618, v616); // 0x4117c1\n                            v221 = v618;\n                            v223 = v350;\n                            v225 = v619;\n                            goto lab_0x4116dc;\n                        } else {\n                            goto lab_0x410a80;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x410a80:;\n    int64_t v200 = v224;\n    int64_t v204 = v222;\n    int64_t v202 = v220;\n    int64_t v244; // 0x410420\n    char v199; // 0x410420\n    int64_t v203; // 0x410420\n    int64_t v201; // 0x410420\n    char v198; // 0x410420\n    if (v43 == 0) {\n        goto lab_0x410aa4;\n    } else {\n        // 0x410a8d\n        *(int64_t *)(8 * (int64_t)v217 + v43) = v200;\n        if (*v40 != 0) {\n            int64_t v620 = v200 + 16; // 0x411a28\n            int64_t v621 = v200 + 24; // 0x411a2c\n            int64_t v622 = function_40b6f0(v72, v620, v621, 0); // 0x411a3b\n            int32_t v623 = v622; // 0x411a40\n            v28 = v623;\n            v244 = v622;\n            if (v623 != 0) {\n                goto lab_0x411b2e;\n            } else {\n                char * v624 = (char *)(v200 + 104); // 0x411a4f\n                char v625 = *v624; // 0x411a4f\n                v198 = 0;\n                v199 = v625;\n                v201 = v621;\n                v203 = v72;\n                if ((v625 & 64) != 0) {\n                    int64_t v626 = function_40f6b0(v72, v620, v621); // 0x411aea\n                    int32_t v627 = v626; // 0x411aef\n                    v28 = v627;\n                    v244 = v626;\n                    if (v627 != 0) {\n                        goto lab_0x411b2e;\n                    } else {\n                        // 0x411afa\n                        v198 = 0;\n                        v199 = *v624;\n                        v201 = v621;\n                        v203 = v72;\n                        goto lab_0x410ab8;\n                    }\n                } else {\n                    goto lab_0x410ab8;\n                }\n            }\n        } else {\n            goto lab_0x410aa4;\n        }\n    }\n  lab_0x4112e0:;\n    int64_t v179 = v175 + v180; // 0x4112e8\n    v174 = v179;\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v179 < v181 || v179 > v182) {\n        // break -> 0x410e70\n        goto lab_0x410e70_9;\n    }\n    int32_t v183 = v171; // 0x411316\n    int64_t v184 = v172; // 0x411316\n    int128_t v185 = v173; // 0x411316\n    int64_t v186 = v179; // 0x411316\n    int64_t v187 = v176; // 0x411316\n    int64_t v188 = v177; // 0x411316\n    int64_t v189 = v178; // 0x411316\n    v190 = v171;\n    v191 = v172;\n    v192 = v173;\n    v193 = v179;\n    v194 = v176;\n    v195 = v177;\n    int32_t v196; // 0x410420\n    if (v196 < 9) {\n        goto lab_0x4108e8;\n    } else {\n        goto lab_0x41131c;\n    }\n  lab_0x410aa4:;\n    // 0x410aa4\n    char v197; // 0x4108c6\n    v198 = v197;\n    v199 = *(char *)(v200 + 104);\n    v201 = v202;\n    v203 = v204;\n    goto lab_0x410ab8;\n  lab_0x410ab8:;\n    int64_t v205 = v203;\n    int64_t v206 = v201;\n    char v207 = v198;\n    int64_t v208; // 0x410420\n    int64_t v209; // 0x410420\n    int64_t v210; // 0x410420\n    int64_t v211; // 0x410420\n    int64_t v212; // 0x410420\n    int64_t v213; // 0x410420\n    int64_t v214; // 0x410420\n    int64_t v215; // 0x410420\n    if ((v199 & 16) != 0) {\n        // 0x411748\n        if (*(char *)(v200 + 104) < 0) {\n            int64_t v216 = v217;\n            int64_t v218 = v200 + 24; // 0x4117d9\n            int64_t v219 = function_40ba60(&v3, *(int64_t *)(v200 + 16), v218, v216); // 0x4117e0\n            v208 = v216;\n            v215 = 0;\n            v214 = v218;\n            v212 = v72;\n            v210 = -1;\n            v209 = v216;\n            v213 = v218;\n            v211 = v72;\n            if (v219 == 0) {\n                goto lab_0x410ad0;\n            } else {\n                goto lab_0x411753;\n            }\n        } else {\n            // 0x411748\n            v209 = v217;\n            v213 = v206;\n            v211 = v205;\n            goto lab_0x411753;\n        }\n    } else {\n        // 0x410ab8\n        v208 = v217;\n        v215 = 0;\n        v214 = v206;\n        v212 = v205;\n        v210 = -1;\n        goto lab_0x410ad0;\n    }\n  lab_0x4116dc:\n    // 0x4116dc\n    v220 = v221;\n    v222 = v223;\n    v224 = v225;\n    int64_t v226; // 0x410420\n    int64_t v227; // 0x410420\n    int64_t v228; // 0x410420\n    int64_t v229; // 0x410420\n    int32_t v230; // 0x410420\n    int64_t v231; // 0x410420\n    int128_t v232; // 0x410420\n    if (v225 != 0) {\n        goto lab_0x410a80;\n    } else {\n        // 0x4116e5\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 == 12) {\n            // break -> 0x410e70\n            goto lab_0x410e70_9;\n        }\n        // 0x4116f9\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1073, \"check_matching\");\n        v230 = v217;\n        v231 = v233;\n        v232 = v54;\n        v229 = a1;\n        v227 = v234;\n        v228 = v235;\n        v226 = v236;\n      lab_0x411718_2:\n        // 0x411718\n        v174 = v229;\n        v237 = v230;\n        v238 = v231;\n        v239 = v232;\n        v240 = v229;\n        v241 = v227;\n        v242 = v228;\n        v243 = v226;\n        goto lab_0x410998;\n    }\n  lab_0x411b2e:\n    // 0x411b2e\n    v50 = v217;\n    v52 = v233;\n    v48 = v234;\n    v46 = v235;\n    v44 = 0x100000000 * v244 >> 32;\n    v56 = v236;\n    goto lab_0x410c6f;\n  lab_0x410ad0:\n    // 0x410ad0\n    v245 = v236;\n    v246 = v200;\n    v247 = v235;\n    v248 = v234;\n    v249 = v212;\n    v250 = v208;\n    v251 = v214;\n    v252 = v233;\n    int64_t v253; // 0x4108b7\n    v254 = v253;\n    v255 = v210;\n    v256 = v215;\n    v257 = v207;\n    v258 = v217;\n    v259 = v217;\n    v260 = v217;\n    v261 = v210;\n    v262 = v253;\n    v263 = v217;\n    v264 = v233;\n    v265 = v234;\n    v266 = v235;\n    v267 = v236;\n    int64_t v268; // 0x410420\n    int64_t v269; // bp-576, 0x410420\n    int32_t v270; // bp-688, 0x410420\n    int32_t result; // bp-692, 0x410420\n    int64_t v271; // 0x411bbe\n    int64_t v272; // 0x411c33\n    int64_t * v273; // 0x411c33\n    if (v208 < a6) {\n        while (true) {\n          lab_0x410b59:\n            // 0x410b59\n            v274 = v259;\n            v29 = v258;\n            v275 = v257;\n            v276 = v256;\n            v277 = v255;\n            v278 = v254;\n            v279 = v252;\n            v280 = v251;\n            int64_t v281 = v250;\n            v282 = v248;\n            v283 = v247;\n            v284 = v246;\n            v285 = v245;\n            v286 = v281 + 1;\n            if (v2 < a3 == v286 >= v2 || v287 < a3 == v286 >= v287) {\n                int32_t v288 = function_408f90(v72, v281 + 2 & 0xffffffff);\n                v28 = v288;\n                if (v288 != 0) {\n                    // 0x411468\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    if (v288 != 12) {\n                        // 0x411b5d\n                        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1128, \"check_matching\");\n                        v269 = v285;\n                        v271 = *(int64_t *)0x60000000000063d8;\n                        result = 0;\n                        if (v271 == 0) {\n                            int64_t v289 = function_40b0c0(&result, 0x1800000000004098, (int64_t *)\"check_matching\", 0x60000000000063d8, v282, v283); // 0x41207b\n                            *(int64_t *)0x656765722f628cac = v289;\n                            // 0x411bf9\n                            return result;\n                        }\n                        // 0x411c10\n                        v270 = 0;\n                        int64_t v290 = function_40b0c0(&v270, 0x1800000000004098, (int64_t *)\"check_matching\", 0x60000000000063d8, v282, v283); // 0x411c23\n                        uint32_t result2 = v270; // 0x411c2b\n                        if (result2 != 0) {\n                            // 0x411bf9\n                            return result2;\n                        }\n                        // 0x411c33\n                        v272 = v290 + 56;\n                        v273 = (int64_t *)v272;\n                        int64_t v291 = *v273; // 0x411c33\n                        if (v291 != 0) {\n                            goto lab_0x411cc0;\n                        } else {\n                            // 0x411c45\n                            *(int64_t *)(v290 + 64) = 0;\n                            *v273 = 0x676e69686374;\n                            int64_t * mem3 = malloc(0x4b431ba0); // 0x411c59\n                            *(int64_t *)(v290 + 72) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x411bf9\n                                return 12;\n                            }\n                            // 0x411c67\n                            v270 = 0;\n                            v268 = v291;\n                            goto lab_0x411c8a;\n                        }\n                    } else {\n                        goto lab_0x410e70_9;\n                    }\n                }\n                int64_t v292 = v29; // 0x410f64\n                v293 = v279;\n                v294 = v286;\n                v295 = v280;\n                v296 = v292;\n                v297 = v72;\n                v298 = v282;\n                v299 = v283;\n                v300 = v285;\n                v301 = v292;\n                v302 = v72;\n                if ((*(char *)(v284 + 104) & 32) == 0) {\n                    goto lab_0x410b94;\n                } else {\n                    goto lab_0x410f80;\n                }\n            } else {\n                // 0x410b89\n                v293 = v279;\n                v294 = v286;\n                v295 = v280;\n                v296 = v281;\n                v297 = v249;\n                v298 = v282;\n                v299 = v283;\n                v300 = v285;\n                v301 = v281;\n                v302 = v249;\n                if ((*(char *)(v284 + 104) & 32) != 0) {\n                    goto lab_0x410f80;\n                } else {\n                    goto lab_0x410b94;\n                }\n            }\n        }\n    }\n  lab_0x410c5d_6:;\n    int64_t v303 = v267;\n    int64_t v304 = v266;\n    int64_t v305 = v265;\n    int64_t v306 = v264;\n    int32_t v307 = v263;\n    int64_t v308 = v262;\n    int64_t v309 = v261;\n    v50 = v307;\n    v52 = v306;\n    v48 = v305;\n    v46 = v304;\n    v44 = v309;\n    v56 = v303;\n    if (v308 != 0) {\n        int64_t * v310 = (int64_t *)v308; // 0x410c6c\n        *v310 = *v310 + (int64_t)v260;\n        v50 = v307;\n        v52 = v306;\n        v48 = v305;\n        v46 = v304;\n        v44 = v309;\n        v56 = v303;\n    }\n    goto lab_0x410c6f;\n  lab_0x411753:\n    // 0x411753\n    v208 = v209;\n    v215 = 1;\n    v214 = v213;\n    v212 = v211;\n    v210 = v209;\n    v50 = v217;\n    v52 = v233;\n    v48 = v234;\n    v46 = v235;\n    v44 = v209;\n    v56 = v236;\n    if (v311 != 0) {\n        goto lab_0x410ad0;\n    } else {\n        goto lab_0x410c6f;\n    }\n  lab_0x4112d0:\n    // 0x4112d0\n    function_409780(&v3);\n    v171 = v51;\n    v172 = v53;\n    v173 = v55;\n    v175 = v174;\n    v176 = v49;\n    v177 = v47;\n    v178 = v57;\n    goto lab_0x4112e0;\n  lab_0x411a82:\n    // 0x411a82\n    free(mem);\n    free((int64_t *)v68);\n    v53 = v66;\n    v55 = v76;\n    v57 = v69;\n    if (v58 != 1) {\n        // 0x410e70\n        v23 = v40;\n        v26 = v63 & 0xffffffff;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        goto lab_0x410e70_9;\n    }\n    goto lab_0x4112d0;\n  lab_0x410568:;\n    int64_t v312 = v21;\n    int64_t v313 = v20;\n    int32_t v314 = 1; // 0x410579\n    if (v11 == 0) {\n        // 0x4108f0\n        v314 = *(int64_t *)(a1 + 152) != 0;\n    }\n    // 0x41057f\n    v315 = *(int64_t *)(a1 + 40);\n    v143 = (int64_t *)(a1 + 24);\n    int32_t * v316 = (int32_t *)(a1 + 180); // 0x410596\n    int64_t v317 = v12 + 1; // 0x4105ad\n    int64_t v318 = (int64_t)*v316; // 0x4105b6\n    int64_t v319 = v317 - v318; // 0x4105b9\n    int64_t v320 = v319 < 0 == ((v319 ^ v317) & (v317 ^ v318)) < 0 ? v317 : v318; // 0x4105c4\n    int64_t v321 = a3 + 1; // 0x4105c8\n    int64_t v322 = v320 - v321; // 0x4105dc\n    int64_t v323 = v322 < 0 == ((v322 ^ v320) & (v320 ^ v321)) < 0 == (v322 != 0) ? v321 : v320; // 0x4105e7\n    v3 = a2;\n    v72 = &v3;\n    int64_t v324 = function_4083f0(v72, v323); // 0x41064c\n    int64_t v325; // 0x410420\n    int64_t v326; // 0x410420\n    int64_t v327; // 0x410420\n    if ((int32_t)v324 != 0) {\n        // 0x41057f\n        v23 = (int64_t *)(a1 + 152);\n        v26 = v324;\n        goto lab_0x410e70_9;\n    } else {\n        // 0x41065d\n        v311 = v314;\n        if ((*v143 & 0x400000 || v315) != 0) {\n            goto lab_0x4106b3;\n        } else {\n            // 0x410693\n            v325 = a2;\n            v326 = a2;\n            v327 = a3;\n            if (*v316 < 2) {\n                goto lab_0x4106b5;\n            } else {\n                goto lab_0x4106b3;\n            }\n        }\n    }\n  lab_0x4106b3:\n    // 0x4106b3\n    v326 = v325;\n    v327 = 0;\n    goto lab_0x4106b5;\n  lab_0x41054a:\n    // 0x41054a\n    v20 = 0;\n    v21 = 0;\n    if (a4 != 0 == (a5 != 0)) {\n        // 0x410e90\n        return 1;\n    }\n    goto lab_0x410568;\n  lab_0x4106b5:\n    // 0x4106b5\n    v287 = v327;\n    v328 = v326;\n    v40 = (int64_t *)(a1 + 152);\n    int64_t v329 = *v40; // 0x4106f1\n    int64_t v330 = 2 * v329; // 0x41070b\n    int64_t v331; // 0x410420\n    int64_t v332; // 0x410420\n    if (v330 < 1) {\n        goto lab_0x41076c;\n    } else {\n        // 0x41071b\n        v23 = v40;\n        v26 = 12;\n        if (v330 > 0x666666666666666) {\n            goto lab_0x410e70_9;\n        } else {\n            int32_t v333 = v329;\n            int64_t * mem4 = malloc(80 * v333); // 0x410736\n            int64_t v334 = (int64_t)mem4; // 0x410736\n            int64_t * mem5 = malloc(16 * v333); // 0x41074d\n            int64_t v335 = (int64_t)mem5; // 0x41074d\n            v332 = v334;\n            v331 = v335;\n            v23 = v40;\n            v26 = 12;\n            v25 = v334;\n            v24 = v335;\n            if (mem4 == NULL || mem5 == NULL) {\n                goto lab_0x410e70_9;\n            } else {\n                goto lab_0x41076c;\n            }\n        }\n    }\n  lab_0x41076c:\n    // 0x41076c\n    v42 = v331;\n    v41 = v332;\n    int64_t v336; // 0x410420\n    if (v11 < 2) {\n        // 0x411660\n        v336 = 0;\n        if ((*(char *)(a1 + 176) & 2) != 0) {\n            goto lab_0x410796;\n        } else {\n            goto lab_0x4107d2;\n        }\n    } else {\n        goto lab_0x410796;\n    }\n  lab_0x410796:\n    // 0x410796\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    if (v2 < 0x1fffffffffffffff) {\n        // 0x4107b1\n        g74 = &v269;\n        int64_t * mem6 = malloc(8 * (int32_t)v2 + 8); // 0x4107b9\n        int64_t v337 = (int64_t)mem6; // 0x4107b9\n        v336 = v337;\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v337;\n        if (mem6 == NULL) {\n            goto lab_0x410e70_9;\n        } else {\n            goto lab_0x4107d2;\n        }\n    } else {\n        goto lab_0x410e70_9;\n    }\n  lab_0x4107d2:\n    // 0x4107d2\n    v43 = v336;\n    v174 = v313;\n    int64_t v338 = v313 - v312; // 0x4107f8\n    bool v339 = v338 == 0 | v338 < 0 != ((v338 ^ v313) & (v312 ^ v313)) < 0;\n    int32_t v340 = v339; // 0x4107fb\n    v341 = *v316;\n    int32_t v342 = 8; // 0x410841\n    if (v6 != NULL) {\n        int32_t v343 = 4; // 0x41084b\n        if (v341 != 1) {\n            // 0x41084d\n            v343 = 4 * (int32_t)((*v143 & 0x400000 | v315) == 0);\n        }\n        // 0x410870\n        v342 = 2 * v340 | (int32_t)(v315 != 0) | v343;\n    }\n    // 0x41088c\n    v181 = v339 ? v313 : v312;\n    v182 = v338 < 0 == ((v338 ^ v313) & (v312 ^ v313)) < 0 ? v313 : v312;\n    int64_t v344 = v313 - v182; // 0x41088c\n    int64_t v345 = v313 - v181; // 0x410894\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v344 < 0 == ((v344 ^ v313) & (v182 ^ v313)) < 0 != v344 != 0 && v345 < 0 == ((v345 ^ v313) & (v181 ^ v313)) < 0) {\n        int64_t v346 = 0x100000000 * a9 >> 32;\n        v196 = v342;\n        v253 = v339 ? (int64_t)&v174 : 0;\n        v197 = v253 != 0;\n        v347 = (int64_t)v6;\n        v348 = (char *)(v182 + a2);\n        v127 = v346;\n        v180 = (int32_t)!((v338 == 0 | v338 < 0 != ((v338 ^ v313) & (v312 ^ v313)) < 0)) + v340;\n        v349 = v346 & 0xffffffff;\n        v350 = &v28;\n        v144 = &v141;\n        v351 = (char)v311 ^ 1;\n        v73 = (char *)(a1 + 56);\n        v74 = (char *)(a1 + 176);\n        v75 = &v67;\n        v186 = v313;\n        v187 = a5;\n        v188 = a6;\n        v189 = v329;\n        while (true) {\n          lab_0x4108e8:\n            // 0x4108e8\n            v352 = v189;\n            v353 = v188;\n            int64_t v354 = v187;\n            v355 = v186;\n            v356 = v185;\n            v357 = v184;\n            v358 = v183;\n            v237 = v358;\n            v238 = v357;\n            v239 = v356;\n            v240 = v355;\n            v241 = v354;\n            v242 = v353;\n            v243 = v352;\n            v190 = v358;\n            v191 = v357;\n            v192 = v356;\n            v193 = v355;\n            v194 = v354;\n            v195 = v353;\n            switch (g74) {\n                case 0: {\n                    goto lab_0x410920;\n                }\n                case 1: {\n                    goto lab_0x410920;\n                }\n                case 2: {\n                    // 0x410dd8\n                    v359 = v355;\n                    v360 = v354;\n                    if (v182 > v355) {\n                        // 0x410ddf\n                        v237 = v358;\n                        v238 = v357;\n                        v239 = v356;\n                        v240 = v355;\n                        v241 = v354;\n                        v242 = v353;\n                        v243 = v352;\n                        int64_t v361 = v355; // 0x410df5\n                        if (*(char *)((int64_t)*(char *)(v355 + a2) + v347) != 0) {\n                            goto lab_0x410998;\n                        } else {\n                            int64_t v362 = v361 + 1;\n                            while (v182 != v362) {\n                                // 0x410e10\n                                v361 = v362;\n                                v230 = v358;\n                                v231 = v357;\n                                v232 = v356;\n                                v229 = v362;\n                                v227 = v354;\n                                v228 = v353;\n                                v226 = v352;\n                                if (*(char *)((int64_t)*(char *)(v362 + a2) + v347) != 0) {\n                                    goto lab_0x411718_2;\n                                }\n                                v362 = v361 + 1;\n                            }\n                            // 0x410e2a\n                            v174 = v182;\n                            v359 = v362;\n                            v360 = v354;\n                            goto lab_0x410d7c;\n                        }\n                    } else {\n                        goto lab_0x410d7c;\n                    }\n                }\n                case 3: {\n                    // 0x410d00\n                    v359 = v355;\n                    v360 = v354;\n                    if (v182 > v355) {\n                        unsigned char v363 = *(char *)(v315 + (int64_t)*(char *)(v355 + a2)); // 0x410d18\n                        v237 = v358;\n                        v238 = v357;\n                        v239 = v356;\n                        v240 = v355;\n                        v241 = v354;\n                        v242 = v353;\n                        v243 = v352;\n                        int64_t v364 = v355; // 0x410d29\n                        if (*(char *)((int64_t)v363 + v347) != 0) {\n                            goto lab_0x410998;\n                        } else {\n                            int64_t v365 = v364 + 1;\n                            while (v182 != v365) {\n                                unsigned char v366 = *(char *)(v315 + (int64_t)*(char *)(v365 + a2)); // 0x410d55\n                                v364 = v365;\n                                v230 = v358;\n                                v231 = v357;\n                                v232 = v356;\n                                v229 = v365;\n                                v227 = a2;\n                                v228 = v353;\n                                v226 = v352;\n                                if (*(char *)((int64_t)v366 + v347) != 0) {\n                                    goto lab_0x411718_2;\n                                }\n                                v365 = v364 + 1;\n                            }\n                            // 0x410d6f\n                            v174 = v182;\n                            v359 = v365;\n                            v360 = a2;\n                            goto lab_0x410d7c;\n                        }\n                    } else {\n                        goto lab_0x410d7c;\n                    }\n                }\n                case 4: {\n                    goto lab_0x410998;\n                }\n                default: {\n                    goto lab_0x41131c;\n                }\n            }\n        }\n    }\n    goto lab_0x410e70_9;\n  lab_0x411cc0:;\n    // 0x411cc0\n    int64_t v367; // bp-784, 0x410420\n    int64_t v368 = &v367; // 0x411b9b\n    int64_t v369 = v271 + 8; // 0x411ccd\n    int64_t result3 = function_40a5c0((int128_t *)\"check_matching\", v369, v272); // 0x411cd9\n    int32_t v370 = result3; // 0x411cde\n    result = v370;\n    int64_t v371 = v282; // 0x411ce4\n    int64_t v372 = v283; // 0x411ce4\n    int64_t v373 = 0; // 0x411ce4\n    if (v370 != 0) {\n        // 0x411bf9\n        return result3;\n    }\n    goto lab_0x412170;\n  lab_0x412170:;\n    int64_t v374 = v372;\n    int64_t v375 = v371;\n    int64_t v376 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48); // 0x412170\n    int64_t v377 = 40 * *(int64_t *)(v376 + 8 * v373); // 0x412181\n    int64_t v378 = -0x7fffffffffffbf67; // 0x412189\n    int64_t v379 = v375; // 0x412189\n    int64_t v380 = v374; // 0x412189\n    int64_t v381; // 0x410420\n    int64_t v382; // 0x410420\n    int64_t v383; // 0x410420\n    int64_t v384; // 0x410420\n    int64_t v385; // 0x410420\n    int64_t v386; // 0x410420\n    int64_t v387; // 0x41219c\n    int64_t v388; // 0x4121a8\n    if (*(int64_t *)(v377 - 0x7fffffffffffbf57) < 1128) {\n        // 0x41218f\n        v378 = -0x7fffffffffffbf67;\n        v379 = v375;\n        v380 = v374;\n        if (*(int64_t *)(v377 - 0x7fffffffffffbf5f) < 1128) {\n            goto lab_0x41222d;\n        } else {\n            // 0x412199\n            v387 = *(int64_t *)0x1800000000004098;\n            int64_t v389 = 16 * *(int64_t *)(v377 - 0x7fffffffffffbf67); // 0x4121a4\n            v388 = *(int64_t *)(v387 + v389);\n            v381 = v387;\n            v384 = v389;\n            v382 = 0;\n            v385 = 0x61666e5f6b6e696c;\n            v386 = -1;\n            v383 = -1;\n            if (*(int64_t *)(v377 - 0x7fffffffffffbf4f) == 1128) {\n                goto lab_0x412286;\n            } else {\n                goto lab_0x4121de;\n            }\n        }\n    } else {\n        goto lab_0x41222d;\n    }\n  lab_0x41222d:;\n    int64_t v390 = v380;\n    int64_t v391 = v379;\n    int64_t v392 = v373 + 1; // 0x41222d\n    v371 = v391;\n    v372 = v390;\n    v373 = v392;\n    int64_t v393; // 0x410420\n    int64_t v394; // 0x410420\n    if (v392 < *(int64_t *)((int64_t)\"lib/regexec.c\" + 40)) {\n        goto lab_0x412170;\n    } else {\n        // 0x41223b\n        result = 0;\n        int64_t v395 = function_40b0c0(&result, 0x1800000000004098, (int64_t *)\"check_matching\", v378, v391, v390); // 0x411d08\n        *(int64_t *)0x656765722f628cac = v395;\n        if (result != 0) {\n            // 0x411bf9\n            return result;\n        }\n        // 0x411d1d\n        v394 = 0x4098;\n        v393 = 0;\n        if ((*(char *)(*(int64_t *)0x60000000000063d8 + 104) & 64) == 0) {\n            // 0x411bf9\n            return 0;\n        }\n        goto lab_0x411d54;\n    }\n  lab_0x411c8a:;\n    int64_t v396 = *(int64_t *)(8 * v268 + 0x61666e5f6b6e696c); // 0x411c91\n    int64_t v397 = *(int64_t *)0x18000000000040d0; // 0x411c99\n    int32_t v398 = function_40a050(v273, (int128_t *)(v397 + 24 * v396)); // 0x411ca7\n    v270 = v398;\n    if (v398 != 0) {\n        // 0x411bf9\n        return 12;\n    }\n    int64_t v399 = v268 + 1; // 0x411c80\n    v268 = v399;\n    if (v399 > 0x676e69686373) {\n        goto lab_0x411cc0;\n    } else {\n        goto lab_0x411c8a;\n    }\n  lab_0x412286:;\n    int64_t v400 = v386;\n    int64_t v401 = v385; // 0x410420\n    int64_t v402 = v383; // 0x410420\n    goto lab_0x412286_2;\n  lab_0x4121de:;\n    int64_t v415 = v382;\n    int64_t v419 = v384;\n    int64_t v417 = v381;\n    int64_t v427 = *(int64_t *)(8 * v415 + 0x61666e5f6b6e696c); // 0x4121e2\n    int64_t v428 = 16 * v427 + v417; // 0x4121ed\n    int64_t v416; // 0x410420\n    int64_t v420; // 0x410420\n    int64_t result4; // 0x410420\n    int64_t v418; // 0x410420\n    if ((*(char *)(v428 + 8) || 1) == 9) {\n        // 0x4121fc\n        if (v388 != *(int64_t *)v428) {\n            goto lab_0x4121d0;\n        } else {\n            int64_t v429 = function_40c320(0x1800000000004098, v427, (int64_t)\"check_matching\", v369); // 0x41220c\n            result4 = v429;\n            if ((int32_t)v429 != 0) {\n                // 0x411bf9\n                return result4;\n            }\n            int64_t v430 = v415 + 1; // 0x412219\n            v378 = v369;\n            v379 = v388;\n            v380 = v374;\n            if (v430 < 0x676e69686374) {\n                // 0x412219\n                v416 = *(int64_t *)0x1800000000004098;\n                v418 = v369;\n                v420 = v430;\n                goto lab_0x4121da;\n            } else {\n                goto lab_0x41222d;\n            }\n        }\n    } else {\n        goto lab_0x4121d0;\n    }\n  lab_0x412286_2:;\n    int64_t v403 = v402;\n    int64_t v404 = v401;\n    int64_t v405 = *(int64_t *)v404; // 0x412286\n    int64_t v406 = 16 * v405 + v387; // 0x412290\n    char v407 = *(char *)(v406 + 8); // 0x412293\n    int64_t v408; // 0x410420\n    int64_t v409; // 0x410420\n    int64_t v410; // 0x410420\n    int64_t v411; // 0x412279\n    if (v407 != 8) {\n        // 0x412270\n        v411 = v403;\n        if (v407 != 9) {\n            goto lab_0x41227d;\n        } else {\n            // 0x412276\n            v411 = v388 == *(int64_t *)v406 ? v405 : v403;\n            goto lab_0x41227d;\n        }\n    } else {\n        int64_t v412 = v388 == *(int64_t *)v406 ? v405 : v400; // 0x4122a1\n        int64_t v413 = v404 + 8; // 0x4122a5\n        v385 = v413;\n        v386 = v412;\n        v383 = v403;\n        v409 = v413;\n        v410 = v412;\n        v408 = v403;\n        if (v413 != 0x6169a9d2b6b1850c) {\n            goto lab_0x412286;\n        } else {\n            goto lab_0x4122ae;\n        }\n    }\n  lab_0x4121d0:;\n    int64_t v414 = v415 + 1; // 0x4121d0\n    v416 = v417;\n    v418 = v419;\n    v420 = v414;\n    v378 = v419;\n    v379 = v388;\n    v380 = v374;\n    if (v414 > 0x676e69686373) {\n        goto lab_0x41222d;\n    } else {\n        goto lab_0x4121da;\n    }\n  lab_0x411d54:;\n    int64_t v421 = v393;\n    uint64_t v422 = v421 + v394; // 0x411d54\n    int64_t v423 = (v422 / 0x8000000000000000 + v422) / 2; // 0x411d6e\n    int64_t v424 = v423; // 0x411d7a\n    int64_t v425 = v394; // 0x411d7a\n    int64_t v426 = v423; // 0x411d7a\n    if (*(int64_t *)(40 * v423 - 0x7fffffffffffbf5f) < 1128) {\n        goto lab_0x4120b0;\n    } else {\n        goto lab_0x411dae;\n    }\n  lab_0x4121da:\n    // 0x4121da\n    v381 = v416;\n    v384 = v418;\n    v382 = v420;\n    goto lab_0x4121de;\n  lab_0x4120b0:;\n    int64_t v431 = v426 + 1; // 0x4120b0\n    v394 = v425;\n    v393 = v431;\n    int64_t v432 = v431; // 0x411d52\n    if (v431 < v425) {\n        goto lab_0x411d54;\n    } else {\n        goto lab_0x411db3;\n    }\n  lab_0x411dae:;\n    int64_t v433 = v424;\n    v432 = v421;\n    if (v421 < v433) {\n        uint64_t v434 = v433 + v421; // 0x411d88\n        int64_t v435 = (v434 / 0x8000000000000000 + v434) / 2; // 0x411d96\n        v424 = v435;\n        v425 = v433;\n        v426 = v435;\n        if (*(int64_t *)(40 * v435 - 0x7fffffffffffbf5f) < 1128) {\n            goto lab_0x4120b0;\n        } else {\n            goto lab_0x411dae;\n        }\n    } else {\n        goto lab_0x411db3;\n    }\n  lab_0x41227d:;\n    int64_t v436 = v404 + 8; // 0x41227d\n    v401 = v436;\n    v402 = v411;\n    v409 = 0x6169a9d2b6b1850c;\n    v410 = v400;\n    v408 = v411;\n    if (v436 == 0x6169a9d2b6b1850c) {\n        goto lab_0x4122ae;\n    } else {\n        goto lab_0x412286_2;\n    }\n  lab_0x4122ae:;\n    int64_t v437 = v408;\n    int64_t v438 = v410;\n    int64_t v439; // 0x410420\n    if (v438 >= 0) {\n        int64_t v440 = function_40c320(0x1800000000004098, v438, (int64_t)\"check_matching\", v369); // 0x41235b\n        result4 = v440;\n        if ((int32_t)v440 != 0) {\n            // 0x411bf9\n            return result4;\n        }\n        // 0x412368\n        v378 = v369;\n        v379 = v388;\n        v380 = v437;\n        v439 = v369;\n        if (v437 < 0) {\n            goto lab_0x41222d;\n        } else {\n            goto lab_0x4122cb;\n        }\n    } else {\n        // 0x4122bf\n        v378 = v409;\n        v379 = v388;\n        v380 = v437;\n        v439 = v409;\n        if (v437 < 0) {\n            goto lab_0x41222d;\n        } else {\n            goto lab_0x4122cb;\n        }\n    }\n  lab_0x411db3:\n    // 0x411db3\n    if (v432 >= 0x4098) {\n        // 0x411bf9\n        return 0;\n    }\n    // 0x411dbc\n    if (v432 == -1 || *(int64_t *)(40 * v432 - 0x7fffffffffffbf5f) != 1128) {\n        // 0x411bf9\n        return 0;\n    }\n    // 0x411dee\n    v270 = 0;\n    if (*(int64_t *)(v271 + 16) < 1) {\n        // 0x411bf9\n        return 0;\n    }\n    int64_t * v441 = (int64_t *)(v368 + 16); // 0x411e37\n    int64_t * v442 = (int64_t *)(v368 + 48);\n    int64_t v443 = v368 + 8;\n    int64_t * v444 = (int64_t *)v443;\n    int64_t * v445 = (int64_t *)(v368 + 72);\n    int64_t * v446 = (int64_t *)(v368 + 40);\n    int64_t * v447 = (int64_t *)(v368 + 32);\n    int64_t v448 = v368 + 96;\n    int64_t * v449 = (int64_t *)v448;\n    int64_t v450 = v368 + 128;\n    int64_t v451 = v368 + 112;\n    int64_t v452 = v368 + 144;\n    int64_t * v453 = (int64_t *)v452;\n    int64_t * v454 = (int64_t *)(v368 + 24);\n    int64_t v455 = v368 + 136;\n    int64_t * v456 = (int64_t *)v455;\n    goto lab_0x411e37_2;\n  lab_0x4122cb:;\n    int64_t v465 = v439; // 0x4122db\n    int64_t v466 = 0; // 0x4122db\n    goto lab_0x4122f2;\n  lab_0x4122f2:;\n    int64_t v524 = v466;\n    int64_t v525 = v465;\n    int64_t v526 = *(int64_t *)(8 * v524 + 0x61666e5f6b6e696c); // 0x4122f2\n    int64_t v527 = 24 * v526; // 0x412302\n    int64_t v528 = *(int64_t *)0x18000000000040d0 + v527; // 0x412306\n    int64_t v529 = v527; // 0x412319\n    int64_t v464; // 0x410420\n    int64_t v467; // 0x410420\n    int64_t v463; // 0x410420\n    if (function_409b10(*(int64_t *)(v528 + 8), v528 + 16, v437) != 0) {\n        goto lab_0x4122e0;\n    } else {\n        int64_t v530 = *(int64_t *)0x18000000000040c8 + v527; // 0x41231b\n        int64_t v531 = function_409b10(*(int64_t *)(v530 + 8), v530 + 16, v437); // 0x412328\n        v529 = v530;\n        if (v531 != 0) {\n            goto lab_0x4122e0;\n        } else {\n            int64_t v532 = function_40c320(0x1800000000004098, v526, (int64_t)\"check_matching\", v369); // 0x412340\n            result4 = v532;\n            v463 = v369;\n            v467 = v524;\n            v464 = v530;\n            if ((int32_t)v532 != 0) {\n                // 0x411bf9\n                return result4;\n            }\n            goto lab_0x4122e4;\n        }\n    }\n  lab_0x4122e0:\n    // 0x4122e0\n    v463 = v525;\n    v467 = v524 + 1;\n    v464 = v529;\n    goto lab_0x4122e4;\n  lab_0x411e37_2:;\n    int64_t v457 = 0;\n    int64_t v458 = *v441;\n    int64_t v459 = *(int64_t *)(*(int64_t *)(v458 + 24) + 8 * v457); // 0x411e40\n    char v460 = *(char *)(*(int64_t *)0x1800000000004098 + 8 + 16 * v459); // 0x411e4f\n    int64_t v461; // 0x410420\n    int64_t v462; // 0x410420\n    if (v459 != *(int64_t *)((int64_t)\"lib/regexec.c\" + 16)) {\n        // 0x411e20\n        v461 = v458;\n        v462 = v457;\n        if (v460 == 4) {\n            goto lab_0x411e68;\n        } else {\n            goto lab_0x411e24;\n        }\n    } else {\n        // 0x411e59\n        v461 = v458;\n        v462 = v457;\n        if (v460 != 4 | *v442 == *(int64_t *)((int64_t)\"lib/regexec.c\" + 24)) {\n            goto lab_0x411e24;\n        } else {\n            goto lab_0x411e68;\n        }\n    }\n  lab_0x4122e4:\n    // 0x4122e4\n    v378 = v463;\n    v379 = v388;\n    v380 = v464;\n    v465 = v463;\n    v466 = v467;\n    if (v467 > 0x676e69686373) {\n        goto lab_0x41222d;\n    } else {\n        goto lab_0x4122f2;\n    }\n  lab_0x411e68:\n    // 0x411e68\n    *v445 = v457;\n    int64_t v468 = *v442; // 0x411e7c\n    *v446 = 24 * v459;\n    *v447 = 8 * v459;\n    int64_t v469 = *(int64_t *)(*v444 + 216) + *(int64_t *)(v368 + 56); // 0x411ea3\n    int64_t v470 = *(int64_t *)(v368 + 64); // 0x411ea3\n    goto lab_0x412015;\n  lab_0x411e24:;\n    // 0x411e24\n    int64_t v478; // 0x410420\n    if (v462 + 1 < *(int64_t *)(v461 + 16)) {\n        goto lab_0x411e37_2;\n    } else {\n        // 0x412090\n        v478 = 0;\n        if (*v449 == 0) {\n            // 0x411bf9\n            return 0;\n        }\n        goto lab_0x41211c;\n    }\n  lab_0x412015:;\n    int64_t v471 = v470;\n    int64_t v472 = v469;\n    int64_t v473; // 0x410420\n    int64_t v474; // 0x41201e\n    if (v459 != *(int64_t *)v472) {\n        goto lab_0x412000;\n    } else {\n        // 0x41201a\n        v474 = *(int64_t *)(v472 + 24) - *(int64_t *)(v472 + 16);\n        if (v474 != 0) {\n            // 0x411eb0\n            v473 = *v447 + *(int64_t *)0x18000000000040b0;\n            goto lab_0x411ebd;\n        } else {\n            int64_t v475 = *(int64_t *)(*(int64_t *)0x18000000000040c0 + 16 + *v446); // 0x412035\n            v473 = v475;\n            goto lab_0x411ebd;\n        }\n    }\n  lab_0x412000:;\n    // 0x412000\n    int64_t v476; // 0x410420\n    if (*(char *)(v476 + 32) == 0) {\n        // 0x412140\n        v461 = *v441;\n        v462 = *v445;\n        goto lab_0x411e24;\n    } else {\n        // 0x412012\n        v469 = v476 + 40;\n        v470 = v471 + 1;\n        goto lab_0x412015;\n    }\n  lab_0x41211c:;\n    int32_t * v477 = (int32_t *)v443; // 0x412124\n    *v477 = (int32_t)v478;\n    free((int64_t *)*v453);\n    // 0x411bf9\n    return (int64_t)*v477;\n  lab_0x411ebd:;\n    int64_t v479 = v474 + v468; // 0x412022\n    int64_t v480 = *(int64_t *)v473;\n    v476 = v472;\n    int64_t result5; // 0x410420\n    if (v479 > *(int64_t *)((int64_t)\"lib/regexec.c\" + 24)) {\n        goto lab_0x412000;\n    } else {\n        int64_t v481 = *(int64_t *)(8 * v479 + 0x656765722f62696c); // 0x411eca\n        v476 = v472;\n        if (v481 == 0) {\n            goto lab_0x412000;\n        } else {\n            // 0x411ed7\n            v476 = v472;\n            if (function_409b10(*(int64_t *)(v481 + 16), v481 + 24, v480) == 0) {\n                goto lab_0x412000;\n            } else {\n                // 0x411ef0\n                *(int64_t *)(v368 - 16) = v479;\n                int64_t v482 = *v444; // 0x411f00\n                int64_t v483 = function_409da0(v482, (int64_t)\"lib/regexec.c\" + 40, (int64_t)\"lib/regexec.c\" + 48, v459, v468, v480, (int64_t)&g67); // 0x411f09\n                v476 = v472;\n                if ((char)v483 != 0) {\n                    goto lab_0x412000;\n                } else {\n                    // 0x411f18\n                    if (*v449 == 0) {\n                        int128_t v484 = __asm_movdqa(0x632e636578656765722f62696c); // 0x4120c0\n                        int128_t v485 = __asm_movdqa(*(int128_t *)((int64_t)\"lib/regexec.c\" + 16)); // 0x4120c5\n                        int128_t v486 = __asm_movdqa(*(int128_t *)((int64_t)\"lib/regexec.c\" + 32)); // 0x4120d7\n                        *(int128_t *)v448 = (int128_t)__asm_movaps(v484);\n                        *(int128_t *)v451 = (int128_t)__asm_movaps(v485);\n                        *(int128_t *)v450 = (int128_t)__asm_movaps(v486);\n                        *v453 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48);\n                        int64_t v487 = function_40abb0(v450, (int64_t)\"lib/regexec.c\" + 32); // 0x4120fb\n                        result5 = v487;\n                        if ((int32_t)v487 == 0) {\n                            goto lab_0x411f24;\n                        } else {\n                            goto lab_0x412110;\n                        }\n                    } else {\n                        goto lab_0x411f24;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x411f24:\n    // 0x411f24\n    *(int64_t *)v451 = v459;\n    *(int64_t *)(v368 + 120) = v468;\n    result5 = 12;\n    int64_t v488; // 0x410420\n    if ((char)function_408500(v450, v471) == 0) {\n        goto lab_0x412110;\n    } else {\n        int64_t v489 = function_4100f0(*v444, v448); // 0x411f5e\n        result5 = v489;\n        if ((int32_t)v489 != 0) {\n            goto lab_0x412110;\n        } else {\n            int64_t v490 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 8); // 0x411f6b\n            int64_t v491 = *v449; // 0x411f6f\n            v488 = v491;\n            if (v490 == 0) {\n                goto lab_0x411f92;\n            } else {\n                // 0x411f79\n                if ((int32_t)function_40b2b0(0x1800000000004098, v490, v491, v468 + 1) != 0) {\n                    goto lab_0x412110;\n                } else {\n                    // 0x411f8d\n                    v488 = *v449;\n                    goto lab_0x411f92;\n                }\n            }\n        }\n    }\n  lab_0x412110:\n    // 0x412110\n    v478 = result5;\n    if (*v449 == 0) {\n        // 0x411bf9\n        return result5;\n    }\n    goto lab_0x41211c;\n  lab_0x411f92:;\n    int64_t v492 = *v456; // 0x411f97\n    *(int64_t *)(*v454 + v488) = *(int64_t *)(*v454 + *v449);\n    int64_t v493 = function_409b10(v492, v452, v471) - 1; // 0x411fb9\n    if (v493 > -1 == v492 > v493) {\n        // 0x411fc7\n        *v456 = v492 - 1;\n        function_409c80(v455, v452, v493);\n        goto lab_0x411fe3;\n    } else {\n        goto lab_0x411fe3;\n    }\n  lab_0x411fe3:\n    // 0x411fe3\n    v476 = *(int64_t *)(*v444 + 216) + 40 * v471;\n    goto lab_0x412000;\n  lab_0x411830:\n    // 0x411830\n    *(int64_t *)(v164 + 8) = -1;\n    int64_t v494 = v164 + 16; // 0x411834\n    *(int64_t *)v164 = -1;\n    v164 = v494;\n    int64_t v495; // 0x410420\n    int64_t * v496; // 0x411851\n    if (v168 != v494) {\n        goto lab_0x411830;\n    } else {\n        // 0x411841\n        v496 = (int64_t *)a8;\n        *v496 = 0;\n        *(int64_t *)(a8 + 8) = v165;\n        v166 = 0;\n        if (v11 == 1 | (*v73 & 16) != 0) {\n            goto lab_0x4118d2;\n        } else {\n            // 0x411882\n            v495 = 0;\n            if (*v74 % 2 == 0) {\n                goto lab_0x4118a2;\n            } else {\n                int64_t v497 = *v40; // 0x411896\n                v495 = v497 >= 0 == (v497 != 0);\n                goto lab_0x4118a2;\n            }\n        }\n    }\n  lab_0x4118d2:;\n    int64_t v498 = a8; // 0x41190d\n    int64_t v499 = 0; // 0x41190d\n    int64_t v500 = v166; // 0x41190d\n    goto lab_0x411913;\n  lab_0x411913:;\n    int64_t v501 = v500;\n    int64_t v502 = v498;\n    int64_t * v503; // 0x410420\n    int64_t v504; // 0x410420\n    int64_t v505; // 0x410420\n    int64_t * v506; // 0x411919\n    int64_t v507; // 0x411919\n    int64_t v508; // 0x411b3b\n    if (v501 == -1) {\n        goto lab_0x411933;\n    } else {\n        // 0x411919\n        v506 = (int64_t *)(v502 + 8);\n        v507 = *v506;\n        char v509; // 0x410420\n        if (v509 != 0) {\n            // 0x411b36\n            v508 = v287;\n            if (v287 == v501) {\n                goto lab_0x411b3f;\n            } else {\n                // 0x411b3b\n                v508 = *(int64_t *)(8 * v501 + v1);\n                goto lab_0x411b3f;\n            }\n        } else {\n            // 0x411919\n            v503 = (int64_t *)v502;\n            v504 = v501;\n            v505 = v507;\n            goto lab_0x411926;\n        }\n    }\n  lab_0x411933:;\n    int64_t v510 = v499 + 1; // 0x411933\n    if (v510 != v11) {\n        int64_t v511 = v502 + 16; // 0x411937\n        v498 = v511;\n        v499 = v510;\n        v500 = *(int64_t *)v511;\n        goto lab_0x411913;\n    } else {\n        if (v10 < 1) {\n            goto lab_0x411998;\n        } else {\n            // 0x41194b\n            goto lab_0x411988;\n        }\n    }\n  lab_0x4118a2:;\n    int64_t v512 = function_40ec40(a1, &v3, v11, a8, v495); // 0x4118ba\n    v23 = v40;\n    v26 = v512;\n    v25 = v41;\n    v24 = v42;\n    v22 = v162;\n    if ((int32_t)v512 != 0) {\n        goto lab_0x410e70_9;\n    } else {\n        // 0x4118c7\n        v166 = *v496;\n        goto lab_0x4118d2;\n    }\n  lab_0x411998:;\n    int64_t v513 = *(int64_t *)(a1 + 224); // 0x4119a5\n    v23 = v40;\n    v26 = v163;\n    v25 = v41;\n    v24 = v42;\n    v22 = v162;\n    int64_t v514; // 0x410420\n    int64_t v515; // 0x4119bd\n    int64_t v516; // 0x410420\n    if (v513 == 0) {\n        goto lab_0x410e70_9;\n    } else {\n        // 0x4119b5\n        v515 = v11 - 1;\n        v23 = v40;\n        v26 = v163;\n        v25 = v41;\n        v24 = v42;\n        v22 = v162;\n        if (v515 != 0) {\n            // 0x4119c8\n            v516 = a8 + 24;\n            v514 = 0;\n            goto lab_0x4119c8_2;\n        } else {\n            goto lab_0x410e70_9;\n        }\n    }\n  lab_0x411b3f:;\n    int64_t v517 = v508;\n    int64_t * v518 = (int64_t *)v502;\n    *v518 = v517;\n    v503 = v518;\n    v504 = v517;\n    v505 = v287;\n    if (v287 == v507) {\n        goto lab_0x411926;\n    } else {\n        // 0x411b47\n        v503 = v518;\n        v504 = v517;\n        v505 = *(int64_t *)(8 * v507 + v1);\n        goto lab_0x411926;\n    }\n  lab_0x411926:\n    // 0x411926\n    *v503 = v504 + v174;\n    *v506 = v505 + v174;\n    goto lab_0x411933;\n  lab_0x411988:\n    // 0x411988\n    *(int64_t *)v168 = -1;\n    *(int64_t *)(v168 + 8) = -1;\n    if (16 * (v11 + v10) + a8 != v168 + 16) {\n        goto lab_0x411988;\n    } else {\n        goto lab_0x411998;\n    }\n  lab_0x4119c8_2:;\n    int64_t v519 = v514;\n    int64_t * v520 = (int64_t *)(8 * v519 + v513); // 0x4119c8\n    int64_t v521 = *v520; // 0x4119c8\n    if (v521 == v519) {\n        goto lab_0x411a17;\n    } else {\n        int64_t v522 = 16 * v519; // 0x4119f0\n        *(int64_t *)(v522 + v167) = *(int64_t *)(16 * v521 + v167);\n        *(int64_t *)(v522 + v516) = *(int64_t *)(16 * *v520 + v516);\n        goto lab_0x411a17;\n    }\n  lab_0x411a17:;\n    int64_t v523 = v519 + 1; // 0x411a17\n    v23 = v40;\n    v26 = v163;\n    v25 = v41;\n    v24 = v42;\n    v22 = v162;\n    v514 = v523;\n    if (v523 != v515) {\n        goto lab_0x4119c8_2;\n    } else {\n        goto lab_0x410e70_9;\n    }\n}\n"
        },
        {
            "funcName": "function_4123b0",
            "funcStartAddr": "4123b0",
            "funcEndAddr": "4125cd",
            "decompiledFuncCode": "int64_t function_4123b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    int32_t * v1 = (int32_t *)(a2 + 144); // 0x4123c6\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x4123cd\n    if (*v1 != 1) {\n        int64_t v3 = function_409ac0(a2, a2); // 0x4123d9\n        if ((int32_t)v3 > 1) {\n            // 0x412428\n            *(int32_t *)a1 = 1;\n            *(int32_t *)(a1 + 8) = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * a2);\n            *v2 = (0x100000000 * v3 >> 32) + a2;\n            return 0;\n        }\n    }\n    char * v4 = (char *)(a3 + 8); // 0x4123e3\n    char v5 = *v4; // 0x4123e3\n    int64_t v6 = a2 + (0x100000000 * a4 >> 32); // 0x4123e7\n    *v2 = v6;\n    int64_t v7; // 0x4123b0\n    int64_t v8; // 0x4123b0\n    char v9; // 0x4123b0\n    int64_t v10; // 0x4123b0\n    int64_t v11; // 0x4123b0\n    char v12; // 0x4123b0\n    int64_t v13; // 0x4123b0\n    int64_t v14; // 0x4123b0\n    int64_t v15; // 0x4123b0\n    int64_t v16; // 0x4123b0\n    int64_t * v17; // 0x412450\n    int64_t * v18; // 0x4123b0\n    int64_t * v19; // 0x4123b0\n    int64_t * v20; // 0x4123b0\n    switch (v5) {\n        case 30: {\n        }\n        case 28: {\n        }\n        case 26: {\n            // 0x412450\n            v17 = (int64_t *)(a2 + 104);\n            if (v6 >= *v17) {\n                // 0x412418\n                return 7;\n            }\n            // 0x41245a\n            v18 = (int64_t *)(a2 + 40);\n            v19 = (int64_t *)(a2 + 8);\n            v20 = (int64_t *)(a1 + 8);\n            v12 = v5;\n            v14 = a2;\n            v10 = 0;\n            v7 = v6;\n            while (true) {\n              lab_0x412482:\n                // 0x412482\n                v8 = v7;\n                v11 = v10;\n                v15 = v14;\n                if (v12 == 30) {\n                    // 0x412500\n                    if (*(char *)(a2 + 139) == 0) {\n                        goto lab_0x412489;\n                    } else {\n                        // 0x41250e\n                        if (*(char *)(a2 + 140) == 0) {\n                            int64_t v21 = v8 + 1; // 0x412578\n                            *v2 = v21;\n                            v13 = v21;\n                            v16 = v15;\n                            v9 = *(char *)(v8 + v15 + *v18);\n                            goto lab_0x41249a;\n                        } else {\n                            // 0x412518\n                            if (v8 == *(int64_t *)(a2 + 48)) {\n                                goto lab_0x41252d;\n                            } else {\n                                // 0x41251e\n                                if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v8) == -1) {\n                                    goto lab_0x412489;\n                                } else {\n                                    goto lab_0x41252d;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x412489;\n                }\n            }\n          lab_0x412418_3:\n            // 0x412418\n            return 0;\n        }\n    }\n    if ((char)a6 == 0 == v5 == 22) {\n        // 0x412590\n        int64_t v22; // bp-56, 0x4123b0\n        function_408020(&v22, a2, a5);\n        char v23; // 0x4123b0\n        if (v23 != 21) {\n            // 0x412418\n            return 11;\n        }\n    }\n    // 0x412409\n    *(int32_t *)a1 = 0;\n    int64_t v24; // 0x4123b0\n    *(char *)(a1 + 8) = *(char *)&v24;\n    // 0x412418\n    return 0;\n  lab_0x412489:;\n    int64_t v25 = v8 + 1; // 0x41248d\n    *v2 = v25;\n    v13 = v25;\n    v16 = v15;\n    v9 = *(char *)(*v19 + v8);\n    goto lab_0x41249a;\n  lab_0x41249a:;\n    uint64_t v26 = v13;\n    if (*v17 <= v26) {\n        // break -> 0x412418\n        goto lab_0x412418_3;\n    }\n    // 0x4124a0\n    if (*(char *)&v24 == v9) {\n        // 0x4124a5\n        if (*(char *)(*v19 + v26) == 93) {\n            // 0x4124af\n            *v2 = v26 + 1;\n            *(char *)(*v20 + (0x100000000 * v11 >> 32)) = 0;\n            unsigned char v27 = *v4; // 0x4124c0\n            v24 = v27;\n            switch (v27) {\n                case 28: {\n                    // 0x4125c0\n                    *(int32_t *)a1 = 2;\n                    goto lab_0x412418_3;\n                }\n                case 30: {\n                    // 0x4125b3\n                    *(int32_t *)a1 = 4;\n                    goto lab_0x412418_3;\n                }\n                default: {\n                    // 0x4124d6\n                    if (v27 != 26) {\n                        goto lab_0x412418_3;\n                    } else {\n                        // 0x4124e1\n                        *(int32_t *)a1 = 3;\n                        goto lab_0x412418_3;\n                    }\n                }\n            }\n        }\n    }\n    // 0x412468\n    *(char *)(*v20 + v11) = v9;\n    if (v11 == 31) {\n        // break -> 0x412418\n        goto lab_0x412418_3;\n    }\n    // 0x41247a\n    v12 = *v4;\n    v14 = v16;\n    v10 = v11 + 1;\n    v7 = *v2;\n    goto lab_0x412482;\n  lab_0x41252d:;\n    int64_t v28 = *(int64_t *)(a2 + 24); // 0x41252d\n    char v29 = *(char *)(*(int64_t *)(v28 + 8 * v8) + v15 + *v18); // 0x41253c\n    if (v29 <= -1) {\n        goto lab_0x412489;\n    } else {\n        int64_t v30 = 1; // 0x412557\n        int64_t v31 = v15; // 0x412557\n        if (*v1 != 1) {\n            // 0x412559\n            v30 = 0x100000000 * function_409ac0(a2, v8) >> 32;\n            v31 = v8;\n        }\n        int64_t v32 = v30 + v8; // 0x412566\n        *v2 = v32;\n        v13 = v32;\n        v16 = v31;\n        v9 = v29;\n        goto lab_0x41249a;\n    }\n}\n"
        },
        {
            "funcName": "function_4125d0",
            "funcStartAddr": "4125d0",
            "funcEndAddr": "412c73",
            "decompiledFuncCode": "int64_t function_4125d0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x4125de\n    uint64_t v3 = *v2; // 0x4125de\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x4126f8\n        *(char *)(v1 + 8) = 2;\n        // 0x4126fe\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x4125ef\n    char * v5 = (char *)(v1 + 10); // 0x4125f3\n    int32_t v6 = *(int32_t *)(a2 + 144); // 0x4125fb\n    int64_t v7 = v4 + v3;\n    unsigned char v8 = *(char *)v7; // 0x412604\n    char v9 = *v5 & -97;\n    *v5 = v9;\n    *(char *)a1 = v8;\n    char v10; // 0x4125d0\n    if (v6 < 2) {\n        if (v8 == 92) {\n            goto lab_0x4126d0;\n        } else {\n            // 0x412696\n            *(char *)(v1 + 8) = 1;\n            uint16_t v11 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)*__ctype_b_loc()); // 0x4126ab\n            v10 = 64 * ((char)(v11 / 8) % 2 | (char)(v8 == 95)) | v9;\n            goto lab_0x412675;\n        }\n    } else {\n        // 0x412619\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x41261f\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                int32_t * v12 = (int32_t *)(v1 + 8); // 0x412780\n                *v12 = *v12 & -0x200100 | 0x200001;\n                // 0x4126fe\n                return 1;\n            }\n        }\n        if (v8 == 92) {\n            goto lab_0x4126d0;\n        } else {\n            // 0x412638\n            *(char *)(v1 + 8) = 1;\n            int32_t wc = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3); // 0x412645\n            v10 = 64 * (char)(wc == 95 | iswalnum(wc) != 0) | *v5 & -65;\n            goto lab_0x412675;\n        }\n    }\n  lab_0x4126d0:;\n    uint64_t v13 = v3 + 1;\n    if (v13 >= *(int64_t *)(a2 + 88)) {\n        // 0x4126db\n        *(char *)(v1 + 8) = 36;\n        return 1;\n    }\n    // 0x412710\n    char v14; // 0x4125d0\n    int32_t v15; // 0x412bd7\n    if (*(char *)(a2 + 139) != 0) {\n        if (v6 < 2) {\n            goto lab_0x412bf2;\n        } else {\n            int64_t v16 = *(int64_t *)(a2 + 16) + 4 * v13;\n            v15 = *(int32_t *)v16;\n            if (v15 == -1) {\n                goto lab_0x412c5b;\n            } else {\n                // 0x412bdf\n                if (*(int64_t *)(a2 + 48) == v3 + 2) {\n                    goto lab_0x412bf2;\n                } else {\n                    // 0x412bea\n                    if (*(int32_t *)(v16 + 4) == -1) {\n                        goto lab_0x412c5b;\n                    } else {\n                        goto lab_0x412bf2;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x41271e\n        v14 = *(char *)(v4 + v13);\n        goto lab_0x41272b;\n    }\n  lab_0x412675:\n    // 0x412675\n    *v5 = v10;\n    g70 = v8 - 10;\n    switch (v8) {\n        case 10: {\n            // 0x412908\n            if ((a3 & 2048) == 0) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x41291a\n            *(char *)(v1 + 8) = 10;\n            // 0x4126fe\n            return 1;\n        }\n        case 36: {\n            if ((a3 & 8) != 0) {\n                // 0x412970\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4126fe\n                return 1;\n            }\n            int64_t v17 = v3 + 1; // 0x412936\n            if (v17 == *(int64_t *)(a2 + 88)) {\n                // 0x412970\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4126fe\n                return 1;\n            }\n            // 0x412940\n            *v2 = v17;\n            int64_t v18; // bp-72, 0x4125d0\n            function_4125d0(&v18, a2, a3);\n            *v2 = *v2 - 1;\n            char v19; // 0x4125d0\n            if (v19 < 11) {\n                // 0x412970\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4126fe\n                return 1;\n            }\n            // break -> 0x4126fe\n            break;\n        }\n        case 40: {\n            // 0x4127d8\n            if ((a3 & 0x2000) == 0) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x4127ea\n            *(char *)(v1 + 8) = 8;\n            // 0x4126fe\n            return 1;\n        }\n        case 41: {\n            // 0x4127f8\n            if ((a3 & 0x2000) == 0) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x41280a\n            *(char *)(v1 + 8) = 9;\n            // 0x4126fe\n            return 1;\n        }\n        case 42: {\n            // 0x412818\n            *(char *)(v1 + 8) = 11;\n            // 0x4126fe\n            return 1;\n        }\n        case 43: {\n            // 0x412830\n            if ((a3 & 1026) != 0) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x412842\n            *(char *)(v1 + 8) = 18;\n            // 0x4126fe\n            return 1;\n        }\n        case 46: {\n            // 0x412850\n            *(char *)(v1 + 8) = 5;\n            // 0x4126fe\n            return 1;\n        }\n        case 63: {\n            // 0x412860\n            if ((a3 & 1026) != 0) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x412872\n            *(char *)(v1 + 8) = 19;\n            // 0x4126fe\n            return 1;\n        }\n        case 91: {\n            // 0x412880\n            *(char *)(v1 + 8) = 20;\n            // 0x4126fe\n            return 1;\n        }\n        case 94: {\n            if ((a3 & 0x800008) == 0 == (v3 != 0)) {\n                // 0x412c2a\n                if ((a3 & 2048) == 0 | *(char *)(v7 - 1) != 10) {\n                    // 0x4126fe\n                    return 1;\n                }\n            }\n            // 0x4128a2\n            *(char *)(v1 + 8) = 12;\n            *(int32_t *)a1 = 16;\n            // 0x4126fe\n            return 1;\n        }\n        case 123: {\n            // 0x4128c0\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x4128d9\n            *(char *)(v1 + 8) = 23;\n            // 0x4126fe\n            return 1;\n        }\n        case 124: {\n            // 0x4128e8\n            if ((a3 & 0x8400) != 0x8000) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x41291a\n            *(char *)(v1 + 8) = 10;\n            // 0x4126fe\n            return 1;\n        }\n        case 125: {\n            // 0x412988\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x4126fe\n                return 1;\n            }\n            // 0x4129a1\n            *(char *)(v1 + 8) = 24;\n            // 0x4126fe\n            return 1;\n        }\n    }\n    // 0x4126fe\n    return 1;\n  lab_0x412bf2:;\n    int64_t v20 = *(int64_t *)(a2 + 40); // 0x412bfe\n    if (*(char *)(a2 + 140) == 0) {\n        // 0x412c48\n        v14 = *(char *)(v20 + a2 + v13);\n        goto lab_0x41272b;\n    } else {\n        int64_t v21 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v13); // 0x412c0b\n        char v22 = *(char *)(v20 + a2 + v21); // 0x412c0f\n        v14 = v22;\n        if (v22 > -1) {\n            goto lab_0x41272b;\n        } else {\n            // 0x41271e\n            v14 = *(char *)(v4 + v13);\n            goto lab_0x41272b;\n        }\n    }\n  lab_0x41272b:;\n    int64_t v23 = v14;\n    int32_t v24 = v14;\n    *(char *)a1 = v14;\n    *(char *)(v1 + 8) = 1;\n    int64_t v25; // 0x4125d0\n    int64_t v26; // 0x4125d0\n    int32_t wc2; // 0x4125d0\n    int32_t v27; // 0x4125d0\n    int32_t v28; // 0x4125d0\n    char v29; // 0x4125d0\n    if (v6 < 2) {\n        uint16_t v30 = *(int16_t *)(2 * v23 + (int64_t)*__ctype_b_loc()); // 0x4127ac\n        char v31 = *v5; // 0x4127c0\n        v29 = 64 * ((char)(v30 / 8) % 2 | (char)(v14 == 95)) | v31 & -65;\n        v28 = v24;\n        v26 = v23;\n        goto lab_0x412763;\n    } else {\n        // 0x412737\n        v27 = v24;\n        wc2 = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v13);\n        v25 = v23;\n        goto lab_0x41273e;\n    }\n  lab_0x412c5b:;\n    unsigned char v32 = *(char *)(v4 + v13); // 0x412c5b\n    *(char *)(v1 + 8) = 1;\n    *(char *)a1 = v32;\n    v27 = v32;\n    wc2 = v15;\n    v25 = v32;\n    goto lab_0x41273e;\n  lab_0x41273e:;\n    int32_t v33 = iswalnum(wc2); // 0x412740\n    v29 = 64 * (char)(wc2 == 95 | v33 != 0) | *v5 & -65;\n    v28 = v27;\n    v26 = v25;\n    goto lab_0x412763;\n  lab_0x412763:\n    // 0x412763\n    *v5 = v29;\n    uint64_t v34 = v26 + 0xffffffd9; // 0x412763\n    g71 = v34 % 256;\n    switch ((char)v34) {\n        case 0: {\n            // 0x412b9b\n            if ((a3 & 0x80000) == 0) {\n                // 0x412bad\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 128;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 1: {\n            // 0x412b84\n            if ((a3 & 0x2000) != 0) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x4127ea\n            *(char *)(v1 + 8) = 8;\n            // 0x4126fe\n            return 2;\n        }\n        case 2: {\n            // 0x412b6d\n            if ((a3 & 0x2000) != 0) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x41280a\n            *(char *)(v1 + 8) = 9;\n            // 0x4126fe\n            return 2;\n        }\n        case 4: {\n            // 0x412b52\n            if ((a3 & 1026) != 2) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x412842\n            *(char *)(v1 + 8) = 18;\n            // 0x4126fe\n            return 2;\n        }\n        case 10: {\n        }\n        case 11: {\n        }\n        case 12: {\n        }\n        case 13: {\n        }\n        case 14: {\n        }\n        case 15: {\n        }\n        case 16: {\n        }\n        case 17: {\n        }\n        case 18: {\n            // 0x412b2a\n            if ((a3 & 0x4000) == 0) {\n                // 0x412b3c\n                *(char *)(v1 + 8) = 4;\n                *a1 = (int64_t)(v28 - 49);\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 21: {\n            // 0x412b09\n            if ((a3 & 0x80000) == 0) {\n                // 0x412b1b\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 6;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 23: {\n            // 0x412ae8\n            if ((a3 & 0x80000) == 0) {\n                // 0x412afa\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 9;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 24: {\n            // 0x412acd\n            if ((a3 & 1026) != 2) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x412872\n            *(char *)(v1 + 8) = 19;\n            // 0x4126fe\n            return 2;\n        }\n        case 27: {\n            // 0x412aac\n            if ((a3 & 0x80000) == 0) {\n                // 0x412abe\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 512;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 44: {\n            // 0x412a91\n            if ((a3 & 0x80000) == 0) {\n                // 0x412aa3\n                *(char *)(v1 + 8) = 35;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 48: {\n            // 0x412a76\n            if ((a3 & 0x80000) == 0) {\n                // 0x412a88\n                *(char *)(v1 + 8) = 33;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 57: {\n            // 0x412a55\n            if ((a3 & 0x80000) == 0) {\n                // 0x412a67\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 64;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 59: {\n            // 0x412a34\n            if ((a3 & 0x80000) == 0) {\n                // 0x412a46\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 256;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 76: {\n            // 0x412a19\n            if ((a3 & 0x80000) == 0) {\n                // 0x412a2b\n                *(char *)(v1 + 8) = 34;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 80: {\n            // 0x4129fe\n            if ((a3 & 0x80000) == 0) {\n                // 0x412a10\n                *(char *)(v1 + 8) = 32;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 84: {\n            // 0x4129e0\n            if ((a3 & 0x1200) != 512) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x4128d9\n            *(char *)(v1 + 8) = 23;\n            // 0x4126fe\n            return 2;\n        }\n        case 85: {\n            // 0x4129c5\n            if ((a3 & 0x8400) == 0) {\n                // 0x4129d7\n                *(char *)(v1 + 8) = 10;\n            }\n            // 0x4126fe\n            return 2;\n        }\n        case 86: {\n            // 0x4129aa\n            if ((a3 & 0x1200) != 512) {\n                // 0x4126fe\n                return 2;\n            }\n            // 0x4129a1\n            *(char *)(v1 + 8) = 24;\n            // 0x4126fe\n            return 2;\n        }\n    }\n    // 0x4126fe\n    return 2;\n}\n"
        },
        {
            "funcName": "function_412c80",
            "funcStartAddr": "412c80",
            "funcEndAddr": "412d36",
            "decompiledFuncCode": "int64_t function_412c80(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 72);\n    int64_t result2 = -1;\n    *v1 = (0x100000000 * function_4125d0((int64_t *)a2, a1, a3) >> 32) + *v1;\n    char v2 = *(char *)(a2 + 8); // 0x412cb9\n    int64_t result = result2; // 0x412c80\n    switch (v2) {\n        case 2: {\n            // 0x412d17\n            return -2;\n        }\n        case 24: {\n            // 0x412d17\n            return result;\n        }\n    }\n    // 0x412cc6\n    int64_t v3; // 0x412c80\n    unsigned char v4 = (char)v3; // 0x412cae\n    while (v4 != 44) {\n        int64_t v5 = -2; // 0x412ccd\n        if (v2 == 1) {\n            // 0x412cd8\n            v5 = -2;\n            if (result2 != -2 && v4 <= 57) {\n                int64_t v6 = v4; // 0x412cae\n                if (result2 == -1) {\n                    // 0x412d28\n                    v5 = v6 - 48;\n                } else {\n                    int64_t v7 = 10 * result2 + v6; // 0x412cef\n                    int64_t v8 = v7 - 0x8030; // 0x412cf8\n                    v5 = v8 < 0 == (0x802f - v7 & v7) < 0 == (v8 != 0) ? 0x8000 : v7 - 48;\n                }\n            }\n        }\n        // 0x412ca0\n        result2 = v5;\n        *v1 = (0x100000000 * function_4125d0((int64_t *)a2, a1, a3) >> 32) + *v1;\n        v2 = *(char *)(a2 + 8);\n        result = result2;\n        switch (v2) {\n            case 2: {\n                // 0x412d17\n                return -2;\n            }\n            case 24: {\n                // 0x412d17\n                return result;\n            }\n        }\n        // 0x412cc6\n        int64_t v9; // 0x412c80\n        v4 = *(char *)&v9;\n    }\n    // 0x412d17\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412d40",
            "funcStartAddr": "412d40",
            "funcEndAddr": "414224",
            "decompiledFuncCode": "int64_t function_412d40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412d40\n    int128_t v1; // 0x412d40\n    int128_t v2 = v1;\n    int64_t v3 = a6;\n    int64_t v4 = a3;\n    int64_t v5; // bp-280, 0x412d40\n    int64_t v6 = &v5; // 0x412d4a\n    unsigned char v7 = *(char *)(a3 + 8); // 0x412d59\n    int64_t v8 = v7; // 0x412d59\n    int64_t v9 = v4; // 0x412d65\n    v4 = v8;\n    g72 = v8;\n    int32_t v10 = v7;\n    int64_t * v11; // 0x412d40\n    int32_t v12; // 0x412d40\n    int64_t v13; // 0x412d40\n    int64_t v14; // bp-88, 0x412d40\n    int64_t v15; // 0x412d40\n    int64_t v16; // 0x413a9b\n    char v17; // 0x413aa2\n    int64_t * mem2; // 0x413489\n    int64_t v18; // 0x413489\n    int64_t * v19; // 0x4134b0\n    char * v20; // 0x4134b7\n    switch (v7) {\n        case 1: {\n            int64_t v21 = a2 + 112; // 0x413607\n            int64_t v22 = a2 + 128; // 0x41360b\n            int64_t v23 = function_40a780(v21, v22, 0, 0, v9); // 0x413618\n            if (v23 == 0) {\n                // 0x4136d1\n                *(int32_t *)a6 = 12;\n                // 0x412eb8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x41362b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                int64_t * v24 = (int64_t *)(a1 + 72); // 0x413648\n                int64_t v25 = &v14;\n                int64_t v26 = 0x100000000 * v23 >> 32; // 0x4136b5\n                uint64_t v27 = *v24; // 0x413648\n                while (*(int64_t *)(a1 + 104) > v27) {\n                    // 0x413656\n                    if (v27 == *(int64_t *)(a1 + 48)) {\n                        // break -> 0x412de0\n                        break;\n                    }\n                    // 0x413660\n                    if (*(int32_t *)(*(int64_t *)(a1 + 16) + 4 * v27) != -1) {\n                        // break -> 0x412de0\n                        break;\n                    }\n                    // 0x41366e\n                    *v24 = (0x100000000 * function_4125d0((int64_t *)v9, a1, a4) >> 32) + *v24;\n                    int64_t v28 = function_40a780(v21, v22, 0, 0, v9); // 0x413691\n                    v26 = function_40a780(v21, v22, (int32_t)v26, (int32_t)v28, v25);\n                    if (v28 == 0 || v26 == 0) {\n                        // 0x4136d1\n                        *(int32_t *)a6 = 12;\n                        // 0x412eb8\n                        *(int64_t *)(v6 + 24) = 0;\n                        // 0x412e0a\n                        return *(int64_t *)(v6 + 24);\n                    }\n                    v27 = *v24;\n                }\n            }\n            goto lab_0x412de0;\n        }\n        case 4: {\n            int64_t v29 = 1 << v10 % 32; // 0x4136f1\n            if ((*(int64_t *)(a2 + 168) & v29) == 0) {\n                // 0x413d6c\n                *(int32_t *)a6 = 6;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v30 = (int64_t *)(a2 + 160); // 0x41370c\n            *v30 = *v30 | v29;\n            if (function_40a780(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x4136d1\n                *(int32_t *)a6 = 12;\n                // 0x412eb8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v31 = (int64_t *)(a2 + 152); // 0x41372d\n            *v31 = *v31 + 1;\n            char * v32 = (char *)(a2 + 176); // 0x413735\n            *v32 = *v32 | 2;\n            goto lab_0x412de0;\n        }\n        case 5: {\n            // 0x413741\n            if (function_40a780(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x4136d1\n                *(int32_t *)a6 = 12;\n                // 0x412eb8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x41376b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                char * v33 = (char *)(a2 + 176); // 0x413778\n                *v33 = *v33 | 2;\n            }\n            goto lab_0x412de0;\n        }\n        case 8: {\n            int64_t * v34 = (int64_t *)(a2 + 48); // 0x412e21\n            uint64_t v35 = *v34; // 0x412e21\n            v5 = a5;\n            *v34 = v35 + 1;\n            int64_t v36 = function_4125d0((int64_t *)v9, a1, a4 | 0x800000); // 0x412e46\n            int64_t * v37 = (int64_t *)(a1 + 72); // 0x412e4d\n            *v37 = (0x100000000 * v36 >> 32) + *v37;\n            char * v38 = (char *)(v9 + 8); // 0x412e53\n            int64_t v39 = 0; // 0x412e59\n            if (*v38 != 9) {\n                // 0x412e5f\n                v4 = v9;\n                int64_t v40 = function_414370(a1, a2, v9, a4, v5 + 1, a6); // 0x412e7b\n                if (*(int32_t *)&v3 != 0) {\n                    // 0x412eb8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x412e0a\n                    return *(int64_t *)(v6 + 24);\n                }\n                // 0x412e89\n                v39 = v40;\n                if (*v38 != 9) {\n                    if (v40 != 0) {\n                        // 0x412e9a\n                        function_407fb0(v40, 0x4091c0, 0);\n                    }\n                    // 0x412ea9\n                    *(int32_t *)a6 = 8;\n                  lab_0x412eb8:\n                    // 0x412eb8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x412e0a\n                    return *(int64_t *)(v6 + 24);\n                }\n            }\n            // 0x4138e2\n            if (v35 < 9) {\n                int32_t v41 = 1 << (int32_t)v35 % 32;\n                v4 = v41;\n                int64_t * v42 = (int64_t *)(a2 + 168); // 0x41393a\n                *v42 = *v42 | (int64_t)v41;\n            }\n            int64_t v43 = function_40a780(a2 + 112, a2 + 128, (int32_t)v39, 0, (int64_t)&v14); // 0x41390d\n            if (v43 == 0) {\n                // 0x4136d1\n                *(int32_t *)a6 = 12;\n                // 0x412eb8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x413920\n            *(int64_t *)(v43 + 40) = v35;\n            goto lab_0x412de0;\n        }\n        case 9: {\n            if ((a4 & 0x20000) == 0) {\n                // 0x4138c9\n                *(int32_t *)a6 = 16;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x412db0;\n        }\n        case 11: {\n            goto lab_0x412d91;\n        }\n        case 12: {\n            char * v44 = (char *)(a2 + 176); // 0x413796\n            unsigned char v45 = *v44; // 0x413796\n            if ((v45 & 16) != 0) {\n                // 0x4137f0\n            } else {\n                int64_t v46 = v45; // 0x413796\n                *v44 = v45 | 16;\n                v13 = 0;\n                v15 = 0;\n                if ((v46 & 8) != 0) {\n                    goto lab_0x413fe5;\n                } else {\n                    // 0x4137b7\n                    *(int64_t *)(a2 + 184) = 0x3ff000000000000;\n                    *(int64_t *)(a2 + 192) = 0x7fffffe87fffffe;\n                    v13 = 128;\n                    v15 = 2;\n                    if ((v46 & 4) == 0) {\n                        goto lab_0x413fe5;\n                    } else {\n                        // 0x4137e1\n                        __asm_movups(*(int128_t *)(a2 + 200), __asm_pxor(v2, v2));\n                        v12 = *(int32_t *)&v4;\n                        goto lab_0x4137f0_2;\n                    }\n                }\n            }\n        }\n        case 18: {\n            goto lab_0x412d91;\n        }\n        case 19: {\n            goto lab_0x412d91;\n        }\n        case 20: {\n            int64_t * mem = calloc(32, 1); // 0x413473\n            v5 = (int64_t)mem;\n            mem2 = calloc(80, 1);\n            if (mem == NULL || mem2 == NULL) {\n                // 0x413d56\n                free((int64_t *)v5);\n                free(mem2);\n                // 0x4136d1\n                *(int32_t *)a6 = 12;\n                // 0x412eb8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x4134a5\n            v18 = (int64_t)mem2;\n            v19 = (int64_t *)v9;\n            int64_t v47 = function_408020(v19, a1, a4); // 0x4134b0\n            v20 = (char *)(v9 + 8);\n            char v48 = *v20; // 0x4134b7\n            v17 = v48;\n            v16 = v47;\n            switch (v48) {\n                case 2: {\n                    // 0x413d2a\n                    *(int32_t *)a6 = 2;\n                    v11 = (int64_t *)(v6 + 48);\n                    goto lab_0x4139fb_3;\n                }\n                case 25: {\n                    char * v49 = (char *)(v18 + 32); // 0x413a6e\n                    *v49 = *v49 | 1;\n                    if ((a4 & 256) != 0) {\n                        int64_t * v50 = (int64_t *)v5; // 0x413a82\n                        *v50 = *v50 | 1024;\n                    }\n                    int64_t * v51 = (int64_t *)(a1 + 72); // 0x413a8c\n                    *v51 = *v51 + (0x100000000 * v47 >> 32);\n                    v16 = function_408020(v19, a1, a4);\n                    v17 = *v20;\n                    if (v17 == 2) {\n                        // 0x413d2a\n                        *(int32_t *)a6 = 2;\n                        v11 = (int64_t *)(v6 + 48);\n                        goto lab_0x4139fb_3;\n                    } else {\n                        goto lab_0x4134d2;\n                    }\n                }\n                default: {\n                    goto lab_0x4134d2;\n                }\n            }\n        }\n        case 23: {\n            if ((a4 & 0x1000000) != 0) {\n              lab_0x4130b5:\n                // 0x4130b5\n                *(int64_t *)(v6 + 24) = 0;\n                *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n                // 0x412e0a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x412d91;\n        }\n        case 24: {\n            goto lab_0x412db0;\n        }\n        case 32: {\n            goto lab_0x413574;\n        }\n        case 33: {\n            goto lab_0x413574;\n        }\n        case 34: {\n            goto lab_0x4135c0;\n        }\n        case 35: {\n            goto lab_0x4135c0;\n        }\n        case 36: {\n            // 0x4135e2\n            *(int32_t *)a6 = 5;\n            // 0x412e0a\n            return *(int64_t *)(v6 + 24);\n        }\n        default: {\n            goto lab_0x412eb8;\n        }\n    }\n  lab_0x4133cb:;\n    // 0x4133cb\n    int64_t * v52; // 0x412d40\n    if (*v52 == 0) {\n        goto lab_0x412eb8;\n    } else {\n        goto lab_0x41316b;\n    }\n  lab_0x41316b:\n    // 0x41316b\n    function_407fb0(*v52, 0x4091c0, 0);\n    *v52 = 0;\n    return *(int64_t *)(v6 + 24);\n  lab_0x413262:;\n    // 0x413262\n    int64_t v53; // 0x412d40\n    char * v54 = (char *)(v53 + 8);\n    char * v55 = v54; // 0x41326b\n    int128_t v56; // 0x412d40\n    int128_t v57 = v56; // 0x41326b\n    int64_t * v58; // 0x412de0\n    int64_t * v59; // 0x412d40\n    if ((*v58 & 0x200000) == 0) {\n        // 0x413d3a\n        if (*v54 != 2) {\n            // 0x4133c0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4133cb;\n        } else {\n            // 0x413d46\n            *(int32_t *)*v59 = 9;\n            goto lab_0x4133cb;\n        }\n    }\n    goto lab_0x413271;\n  lab_0x413384:;\n    // 0x413384\n    int64_t v83; // 0x412d40\n    int64_t v336 = v83; // 0x413386\n    int64_t v337 = v336 - 0x7fff; // 0x413386\n    int64_t v84; // 0x412d40\n    int64_t v316 = v84; // 0x413394\n    if (v337 < 0 == (0x7ffe - v336 & v336) < 0 == (v337 != 0)) {\n        // 0x413396\n        *(int32_t *)*v59 = 15;\n        goto lab_0x4133cb;\n    }\n    goto lab_0x413329;\n  lab_0x4132c9:;\n    int64_t v338 = *v58; // 0x4132c9\n    v4 = v338;\n    int128_t v80; // 0x413235\n    int128_t * v78; // 0x412d40\n    *v78 = (int128_t)__asm_movaps(v80);\n    int64_t v66; // 0x412d40\n    int64_t v339 = function_412c80(v66, v53, v338); // 0x4132d9\n    v5 = v339;\n    v56 = __asm_movdqa(*v78);\n    int64_t v81; // 0x412d40\n    if (v339 == -2) {\n        goto lab_0x413262;\n    } else {\n        int64_t v340 = v81;\n        if (v339 != -1 == v339 < v340) {\n            // 0x4133c0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4133cb;\n        }\n        // 0x413305\n        if (*(char *)(v53 + 8) != 24) {\n            // 0x4133c0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4133cb;\n        }\n        // 0x413311\n        v83 = v339;\n        v84 = v340;\n        if (v339 != -1) {\n            goto lab_0x413384;\n        } else {\n            int64_t v341 = v340 - 0x7fff; // 0x41331a\n            v316 = v340;\n            if (v341 < 0 == (0x7ffe - v340 & v340) < 0 == (v341 != 0)) {\n                // 0x413396\n                *(int32_t *)*v59 = 15;\n                goto lab_0x4133cb;\n            }\n            goto lab_0x413329;\n        }\n    }\n  lab_0x413271:;\n    // 0x413271\n    int64_t * v60; // 0x412ee6\n    int64_t v61; // 0x412ee6\n    *v60 = v61;\n    int128_t * v62; // 0x412eea\n    *v62 = (int128_t)__asm_movaps(v57);\n    *v55 = 1;\n    int64_t v63 = *v52; // 0x413285\n    int64_t v64 = v53; // 0x413285\n    int64_t v65 = v66; // 0x413285\n    goto lab_0x41305e;\n  lab_0x413290:\n    // 0x413290\n    if (*(int32_t *)*v59 != 0) {\n        // 0x412eb8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x41329f;\n  lab_0x413329:;\n    int64_t v315 = v316;\n    int64_t v317 = *v58; // 0x413329\n    v4 = v317;\n    int64_t v318 = function_4125d0((int64_t *)v53, v66, v317); // 0x413334\n    int64_t v319 = *v52; // 0x413339\n    *v60 = *v60 + (0x100000000 * v318 >> 32);\n    int64_t v127; // 0x412d40\n    int64_t v99; // 0x412d40\n    int64_t v132; // 0x412d40\n    int64_t v128; // 0x412d40\n    int64_t v101; // 0x412d40\n    int64_t v135; // 0x412d40\n    int64_t v102; // 0x412d40\n    int64_t v103; // 0x412d40\n    int64_t v136; // 0x412d40\n    int64_t v129; // 0x412d40\n    int64_t v134; // 0x412d40\n    int64_t v100; // 0x412d40\n    int64_t v133; // 0x412d40\n    int64_t * v89; // 0x412d40\n    int64_t * v110; // 0x412d40\n    int64_t * v118; // 0x412d40\n    int64_t v114; // 0x412d40\n    char * v108; // 0x412d40\n    if (v319 == 0) {\n        goto lab_0x413290;\n    } else {\n        int64_t v320 = v5; // 0x41334d\n        if ((v320 || v315) != 0) {\n            if (v315 < 1) {\n                // 0x414218\n                v4 = 0;\n                v132 = 0;\n                v133 = v315;\n                v134 = *v52;\n                v135 = v53;\n                v136 = v66;\n                goto lab_0x413442;\n            } else {\n                int64_t v321; // 0x412d40\n                int64_t v322; // 0x412d40\n                int64_t v323; // 0x412d40\n                int64_t v324; // 0x412d40\n                int64_t v325; // 0x412d40\n                if (v315 == 1) {\n                    int64_t v326 = *v52; // 0x4141e7\n                    v321 = v320;\n                    v322 = v53;\n                    v323 = v326;\n                    v324 = v66;\n                    v325 = v326;\n                } else {\n                    int64_t v327 = *v110; // 0x4130e3\n                    int64_t v328 = *v52; // 0x4130e8\n                    *v89 = v66;\n                    *v118 = v53;\n                    int64_t v329 = v327 + 112; // 0x4130ff\n                    int64_t v330 = v327 + 128; // 0x413103\n                    int64_t v331 = 2; // 0x41310d\n                    int64_t v332 = function_40a860(v328, *v110); // 0x41312a\n                    v4 = v328;\n                    *v108 = 16;\n                    int64_t v333 = function_40a780(v329, v330, (int32_t)v328, (int32_t)v332, v114); // 0x41314e\n                    if (v332 == 0 || v333 == 0) {\n                        // 0x413160\n                        *(int32_t *)*v59 = 12;\n                        goto lab_0x41316b;\n                    }\n                    // 0x413115\n                    v331++;\n                    int64_t v334 = v333; // 0x41311c\n                    int64_t v335 = v332; // 0x41311c\n                    while (v315 >= v331) {\n                        // 0x413122\n                        v332 = function_40a860(v335, *v110);\n                        v4 = v334;\n                        *v108 = 16;\n                        v333 = function_40a780(v329, v330, (int32_t)v334, (int32_t)v332, v114);\n                        if (v332 == 0 || v333 == 0) {\n                            // 0x413160\n                            *(int32_t *)*v59 = 12;\n                            goto lab_0x41316b;\n                        }\n                        // 0x413115\n                        v331++;\n                        v334 = v333;\n                        v335 = v332;\n                    }\n                    // 0x4133e0\n                    v321 = v5;\n                    v322 = *v118;\n                    v323 = v332;\n                    v324 = *v89;\n                    v325 = v333;\n                }\n                // 0x4133f3\n                v4 = v325;\n                v127 = v325;\n                v128 = v322;\n                v129 = v324;\n                v99 = v325;\n                v100 = v315;\n                v101 = v322;\n                v102 = v323;\n                v103 = v324;\n                if (v315 != v321) {\n                    goto lab_0x41341f;\n                } else {\n                    goto lab_0x413400;\n                }\n            }\n        } else {\n            // 0x41335a\n            v4 = 0;\n            function_407fb0(v319, 0x4091c0, 0);\n            if (*(int32_t *)*v59 != 0) {\n                goto lab_0x41316b;\n            }\n            goto lab_0x41329f;\n        }\n    }\n  lab_0x41305e:;\n    uint32_t v67 = *(int32_t *)*v59; // 0x413063\n    v4 = v67;\n    if (v63 == 0 == (v67 != 0)) {\n        goto lab_0x4133cb;\n    }\n    // 0x413072\n    *v52 = v63;\n    int64_t v68 = v63; // 0x413072\n    int64_t v69 = v64; // 0x413072\n    int64_t v70 = v65; // 0x413072\n    goto lab_0x413077;\n  lab_0x41329f:\n    // 0x41329f\n    *v52 = 0;\n    v68 = 0;\n    v69 = v53;\n    v70 = v66;\n    goto lab_0x413077;\n  lab_0x4131f8:;\n    // 0x4131f8\n    int64_t v96; // 0x412d40\n    int64_t v104 = v96;\n    function_407fb0(v104, 0x408150, (int32_t)*(int64_t *)(v104 + 40));\n    goto lab_0x413209;\n  lab_0x412f5a:;\n    // 0x412f5a\n    int64_t v94; // 0x412d40\n    int64_t v105 = v94;\n    int64_t v93; // 0x412d40\n    int64_t v106 = v93;\n    int64_t v92; // 0x412d40\n    int64_t v107 = v92;\n    char v90; // 0x412d40\n    *v108 = v90;\n    int64_t v109 = *v110; // 0x412f61\n    int64_t v111 = v109 + 112; // 0x412f73\n    int64_t v112 = v109 + 128; // 0x412f77\n    int64_t v113 = function_40a780(v111, v112, (int32_t)v107, 0, v114); // 0x412f84\n    v4 = v113;\n    if (v113 == 0) {\n        // 0x413160\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41316b;\n    }\n    // 0x412f95\n    int64_t v91; // 0x412d40\n    int64_t v115 = v91 + 2; // 0x412f95\n    int64_t v116 = v113; // 0x412f9d\n    int64_t v117 = v106; // 0x412f9d\n    if (v115 <= v5) {\n        // 0x412fa3\n        *v118 = v106;\n        int64_t v119 = v115; // 0x412fab\n        int64_t v120 = v107; // 0x412fab\n        v120 = function_40a860(v120, *v110);\n        v4 = v113;\n        *v108 = 16;\n        int64_t v121 = function_40a780(v111, v112, (int32_t)v113, (int32_t)v120, v114); // 0x412fda\n        if (v120 == 0 || v121 == 0) {\n            // 0x413160\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41316b;\n        }\n        // 0x412ff1\n        v4 = v121;\n        *v108 = 10;\n        int64_t v122 = function_40a780(v111, v112, (int32_t)v121, 0, v114); // 0x41300c\n        if (v122 == 0) {\n            // 0x413160\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41316b;\n        }\n        // 0x41301d\n        v119++;\n        int64_t v123 = v122; // 0x413025\n        while (v119 <= v5) {\n            // 0x412fae\n            v120 = function_40a860(v120, *v110);\n            v4 = v123;\n            *v108 = 16;\n            v121 = function_40a780(v111, v112, (int32_t)v123, (int32_t)v120, v114);\n            if (v120 == 0 || v121 == 0) {\n                // 0x413160\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41316b;\n            }\n            // 0x412ff1\n            v4 = v121;\n            *v108 = 10;\n            v122 = function_40a780(v111, v112, (int32_t)v121, 0, v114);\n            if (v122 == 0) {\n                // 0x413160\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41316b;\n            }\n            // 0x41301d\n            v119++;\n            v123 = v122;\n        }\n        // 0x413027\n        v4 = v122;\n        v116 = v122;\n        v117 = *v118;\n    }\n    int64_t v124 = v117;\n    int64_t v125 = v116; // 0x41303d\n    int64_t v126 = *v89; // 0x41302f\n    v127 = v125;\n    v128 = v124;\n    v129 = v105;\n    if (v126 == 0) {\n        goto lab_0x413400;\n    } else {\n        // 0x41303d\n        *v108 = 16;\n        v63 = function_40a780(v111, v112, (int32_t)v126, (int32_t)v125, v114);\n        v64 = v124;\n        v65 = v105;\n        goto lab_0x41305e;\n    }\n  lab_0x413077:;\n    unsigned char v71 = *(char *)(v69 + 8); // 0x413077\n    if ((*v58 & 0x1000000) != 0) {\n        if (v71 != 11 != v71 != 23) {\n            // 0x41309c\n            if (v68 == 0) {\n                goto lab_0x4130b5;\n            } else {\n                // 0x4130a6\n                function_407fb0(v68, 0x4091c0, 0);\n                goto lab_0x4130b5;\n            }\n        }\n    }\n    char v72 = v71; // 0x412e04\n    int64_t v73 = v70; // 0x412e04\n    int64_t v74 = v69; // 0x412e04\n    if (v71 >= 24) {\n        // break -> 0x412e0a\n        goto lab_0x412e0a_2;\n    }\n    goto lab_0x412ed0;\n  lab_0x413209:\n    // 0x413209\n    v90 = v5 == -1 ? 11 : 10;\n    int64_t v95; // 0x412d40\n    v91 = v95;\n    v92 = v104;\n    int64_t v97; // 0x412d40\n    v93 = v97;\n    int64_t v98; // 0x412d40\n    v94 = v98;\n    goto lab_0x412f5a;\n  lab_0x413400:\n    // 0x413400\n    *v52 = v127;\n    v68 = v127;\n    v69 = v128;\n    v70 = v129;\n    goto lab_0x413077;\n  lab_0x41341f:\n    // 0x41341f\n    *v89 = v99;\n    int64_t v130 = function_40a860(v102, *v110); // 0x41342c\n    int64_t v131 = *v89; // 0x413431\n    v4 = v131;\n    v132 = v131;\n    v133 = v100;\n    v134 = v130;\n    v135 = v101;\n    v136 = v103;\n    if (v130 == 0) {\n        // 0x413160\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41316b;\n    }\n    goto lab_0x413442;\n  lab_0x413442:\n    // 0x413442\n    *v89 = v132;\n    v95 = v133;\n    v96 = v134;\n    v97 = v135;\n    v98 = v136;\n    if (*(char *)(v134 + 48) != 17) {\n        goto lab_0x413209;\n    } else {\n        goto lab_0x4131f8;\n    }\n  lab_0x41403a:;\n    // 0x41403a\n    uint64_t v137; // 0x412d40\n    int64_t v138 = 1 << v137;\n    v4 = v138;\n    int64_t * v139; // 0x412d40\n    *v139 = *v139 | v138;\n    goto lab_0x414028;\n  lab_0x414028:;\n    int64_t v140 = v137 + 1; // 0x414030\n    if (v137 == 63) {\n        // break -> 0x414049\n        goto lab_0x414049;\n    }\n    goto lab_0x414032;\n  lab_0x4139fb_3:\n    // 0x4139fb\n    free((int64_t *)v5);\n    function_409170(v18);\n    if (*(int32_t *)*v11 != 0) {\n        // 0x412eb8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x413a1d\n    *(int64_t *)(v6 + 24) = 0;\n    goto lab_0x412de0;\n  lab_0x413e9e:;\n    // 0x413e9e\n    int64_t * v177; // 0x412d40\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x4140a6_3:\n    // 0x4140a6\n    *(int32_t *)*v177 = 11;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x413fa5_5:\n    // 0x413fa5\n    *(int32_t *)*v177 = 3;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x413564:;\n    // 0x413564\n    int64_t v188; // 0x413539\n    int64_t v254 = v188 & 0xffffffff; // 0x41353e\n    int64_t v234; // 0x412d40\n    int64_t v255; // 0x412d40\n    int64_t v235; // 0x412d40\n    int64_t * v152; // 0x413514\n    int32_t * v168; // 0x412d40\n    int64_t v178; // 0x412d40\n    int64_t * v179; // 0x412d40\n    int64_t * v180; // 0x412d40\n    int64_t * v181; // 0x412d40\n    int64_t * v182; // 0x412d40\n    int64_t v148; // 0x4134e3\n    int64_t * v149; // 0x4134fe\n    int64_t v151; // 0x413514\n    switch (g73) {\n        case 0: {\n            unsigned char v256 = *(char *)v151; // 0x4139a1\n            unsigned char v257 = v256 % 64;\n            int64_t v258 = v257 == 0 ? 1 : 1 << (int64_t)v257;\n            v4 = v258;\n            int64_t * v259 = (int64_t *)(v148 + (int64_t)(v256 / 8 & 24)); // 0x4139b8\n            *v259 = v258 | *v259;\n            v255 = v254;\n            goto lab_0x41395f;\n        }\n        case 1: {\n            int64_t v260 = *v181; // 0x41397d\n            v4 = v260;\n            int64_t v261 = *mem2; // 0x413981\n            int64_t v262 = v260; // 0x41398a\n            int64_t v263 = v261; // 0x41398a\n            if (v260 == *v182) {\n                int64_t v264 = 2 * v260 | 1; // 0x413da6\n                *v182 = v264;\n                int64_t * mem3 = realloc((int64_t *)v261, 4 * (int32_t)v264); // 0x413db8\n                if (mem3 == NULL) {\n                    goto lab_0x413e9e;\n                }\n                // 0x413dc6\n                v263 = (int64_t)mem3;\n                *mem2 = v263;\n                v262 = *v181;\n                v4 = v262;\n            }\n            // 0x413990\n            *v181 = v262 + 1;\n            *(int32_t *)(4 * v4 + v263) = *v168;\n            v255 = v254;\n            goto lab_0x41395f;\n        }\n        case 2: {\n            int32_t v265 = function_40d350(v148, *v152); // 0x413955\n            *(int32_t *)*v177 = v265;\n            v255 = v254;\n            v11 = v177;\n            if (v265 != 0) {\n                goto lab_0x4139fb_3;\n            }\n            goto lab_0x41395f;\n        }\n        case 3: {\n            int32_t v266 = function_40d350(v148, *v152); // 0x413a3d\n            *(int32_t *)*v177 = v266;\n            v255 = v254;\n            v11 = v177;\n            if (v266 != 0) {\n                goto lab_0x4139fb_3;\n            }\n            goto lab_0x41395f;\n        }\n        case 4: {\n            int64_t v267 = *(int64_t *)(a1 + 120); // 0x4139c3\n            *v179 = *v149;\n            int64_t v268 = function_40d3a0(v267, v148, v18 + 24, v178, v180, *v152, (int64_t)&g67); // 0x4139e3\n            int32_t v269 = v268; // 0x4139ed\n            *(int32_t *)*v177 = v269;\n            v3 = *v179;\n            v255 = v254;\n            v11 = v177;\n            if (v269 != 0) {\n                goto lab_0x4139fb_3;\n            }\n            goto lab_0x41395f;\n        }\n        default: {\n            // 0x4141a4\n            __assert_fail(\"0\", \"lib/regcomp.c\", 3315, \"parse_bracket_exp\");\n            v234 = &g67;\n            v235 = (int64_t)\"parse_bracket_exp\";\n            goto lab_0x4141bd_3;\n        }\n    }\n  lab_0x413ac5:\n    // 0x413ac5\n    *(int32_t *)*v177 = 7;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x41395f:;\n    int64_t v270 = v255;\n    int64_t v183 = v270; // 0x412d40\n    int64_t v184 = 0; // 0x412d40\n    int64_t * v156; // 0x412d40\n    int64_t * v163; // 0x412d40\n    switch (*v20) {\n        case 2: {\n            goto lab_0x413ac5;\n        }\n        case 21: {\n            // 0x413dd3\n            *v156 = *v156 + (0x100000000 * v270 >> 32);\n            if (*(char *)(v6 + 56) != 0) {\n                // 0x413de1\n                v4 = v5 + 32;\n                int64_t v271 = v5; // 0x413de8\n                int64_t * v272 = (int64_t *)v271; // 0x413dec\n                *v272 = -1 - *v272;\n                v271 += 8;\n                while (v4 != v271) {\n                    // 0x413dec\n                    v272 = (int64_t *)v271;\n                    *v272 = -1 - *v272;\n                    v271 += 8;\n                }\n            }\n            uint32_t v273 = *(int32_t *)(*v163 + 180); // 0x413dfd\n            v4 = v273;\n            if (v273 >= 2) {\n                int64_t v274 = 0;\n                int64_t * v275 = (int64_t *)(v274 + v5); // 0x413e1b\n                *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                int64_t v276 = v274 + 8; // 0x413e27\n                while (v274 != 24) {\n                    // 0x413e17\n                    v274 = v276;\n                    v275 = (int64_t *)(v274 + v5);\n                    *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                    v276 = v274 + 8;\n                }\n            }\n            // 0x413e29\n            if (*v181 != 0) {\n                goto lab_0x413eae;\n            } else {\n                // 0x413e30\n                if (*(int64_t *)(v18 + 48) != 0) {\n                    goto lab_0x413eae;\n                } else {\n                    // 0x413e37\n                    if (*(int64_t *)(v18 + 56) != 0) {\n                        goto lab_0x413eae;\n                    } else {\n                        // 0x413e3e\n                        if (*(int64_t *)(v18 + 64) != 0) {\n                            goto lab_0x413eae;\n                        } else {\n                            int64_t v277 = v4; // 0x413e45\n                            v4 = v277 + 0xffffffff & 0xffffffff;\n                            if ((int32_t)v277 < 2) {\n                                goto lab_0x413e58;\n                            } else {\n                                // 0x413e4a\n                                if (*(int64_t *)v178 != 0) {\n                                    goto lab_0x413eae;\n                                } else {\n                                    // 0x413e51\n                                    if (*(char *)(v18 + 32) % 2 != 0) {\n                                        goto lab_0x413eae;\n                                    } else {\n                                        goto lab_0x413e58;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        default: {\n            goto lab_0x4134fe;\n        }\n    }\n  lab_0x413c3f:;\n    // 0x413c3f\n    int64_t v203; // 0x412d40\n    int64_t v278 = (int64_t)*(char *)v203;\n    int64_t v220 = v278; // 0x413c41\n    int64_t v216; // 0x412d40\n    char v218; // 0x412d40\n    int64_t v217; // 0x412d40\n    int64_t v219; // 0x412d40\n    int64_t * v162; // 0x412d40\n    int32_t v197; // 0x413c06\n    if (v197 == 0) {\n        goto lab_0x414099;\n    } else {\n        // 0x413c47\n        v218 = 0;\n        v219 = v278;\n        if (v197 != 3) {\n            goto lab_0x413c5a;\n        } else {\n            int64_t v279 = *v162; // 0x413c4e\n            v3 = v279;\n            v216 = v279;\n            v217 = v278;\n            goto lab_0x413c56;\n        }\n    }\n  lab_0x414099:;\n    // 0x414099\n    int64_t v161; // 0x412d40\n    v218 = *(char *)v161;\n    v219 = v220;\n    goto lab_0x413c5a;\n  lab_0x413c56:\n    // 0x413c56\n    v218 = *(char *)v216;\n    v219 = v217;\n    goto lab_0x413c5a;\n  lab_0x413c5a:;\n    int64_t v280 = v219;\n    unsigned char v281 = v218;\n    int64_t v282; // 0x412d40\n    int64_t v283; // 0x412d40\n    int32_t v284; // 0x412d40\n    char * v165; // 0x412d40\n    int32_t v195; // 0x413bdd\n    if (v195 == 0) {\n        goto lab_0x414064;\n    } else {\n        // 0x413c63\n        v283 = v281;\n        v284 = v197;\n        v282 = (int64_t)*v168;\n        if (*v165 != 0) {\n            goto lab_0x414064;\n        } else {\n            goto lab_0x413c73;\n        }\n    }\n  lab_0x414064:;\n    // 0x414064\n    int32_t * v170; // 0x412d40\n    *v170 = (int32_t)v281;\n    int64_t * v171; // 0x412d40\n    *v171 = v4;\n    int64_t v285 = function_408730(v280, v4); // 0x414070\n    v4 = *v171;\n    v283 = (int64_t)*v170;\n    int32_t * v160; // 0x412d40\n    v284 = *v160;\n    v282 = v285 & 0xffffffff;\n    goto lab_0x413c73;\n  lab_0x413c73:;\n    int64_t v286 = v282;\n    int32_t v287 = v284;\n    int64_t v288 = v283;\n    int64_t v289; // 0x412d40\n    int64_t v290; // 0x412d40\n    if (v287 == 0) {\n        goto lab_0x413fb5;\n    } else {\n        int64_t v291 = (int64_t)*(int32_t *)v161; // 0x413c7b\n        v3 = v291;\n        v289 = v291;\n        v290 = v286;\n        if (v287 == 3) {\n            goto lab_0x413fb5;\n        } else {\n            goto lab_0x413c8c;\n        }\n    }\n  lab_0x413fb5:\n    // 0x413fb5\n    *v170 = (int32_t)v286;\n    *v171 = v4;\n    int64_t v292 = function_408730(v288, v4); // 0x413fc4\n    v4 = *v171;\n    int64_t v293 = v292 & 0xffffffff; // 0x413fd3\n    v3 = v293;\n    v289 = v293;\n    v290 = (int64_t)*v170;\n    goto lab_0x413c8c;\n  lab_0x413c8c:;\n    int32_t v294 = v290;\n    if (v294 == -1) {\n        goto lab_0x413fa5_5;\n    }\n    uint32_t v295 = (int32_t)v289; // 0x413c96\n    if (v295 == -1) {\n        goto lab_0x413fa5_5;\n    }\n    // 0x413ca0\n    if (v294 > v295 == ((*v149 & 0x10000) != 0)) {\n        goto lab_0x4140a6_3;\n    }\n    int64_t v296 = v4; // 0x413cb4\n    int32_t v297 = v294; // 0x413cb7\n    int64_t * v172; // 0x412d40\n    int32_t * v173; // 0x412d40\n    int32_t * v174; // 0x412d40\n    int64_t * v175; // 0x412d40\n    int64_t * v176; // 0x412d40\n    if (v296 != 0) {\n        int64_t v298 = *(int64_t *)(v296 + 64); // 0x413cb9\n        int64_t v299 = *(int64_t *)(v296 + 8); // 0x413cbd\n        int32_t v300 = v294; // 0x413cc6\n        int64_t v301 = v298; // 0x413cc6\n        int64_t v302 = v299; // 0x413cc6\n        if (v298 == *v172) {\n            // 0x414122\n            *v173 = v295;\n            *v174 = v294;\n            *v171 = v4;\n            int64_t v303 = 2 * v298 | 1; // 0x41413c\n            int64_t v304 = 4 * v303; // 0x414140\n            *v172 = v303;\n            *v175 = v304;\n            *v176 = (int64_t)realloc((int64_t *)v299, (int32_t)v304);\n            int64_t * mem4 = realloc((int64_t *)*(int64_t *)(*v171 + 16), (int32_t)*v175); // 0x414170\n            int64_t v305 = *v176; // 0x414175\n            if (v305 == 0) {\n                // 0x4141bd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4141bd_3;\n            }\n            int64_t v306 = *v171; // 0x414182\n            v4 = v306;\n            v300 = *v174;\n            v3 = (int64_t)*v173;\n            if (mem4 == NULL) {\n                // 0x4141bd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4141bd_3;\n            }\n            // 0x414193\n            *(int64_t *)(v306 + 16) = (int64_t)mem4;\n            v301 = *(int64_t *)(v4 + 64);\n            *(int64_t *)(v4 + 8) = v305;\n            v302 = v305;\n        }\n        int64_t v307 = 4 * v301; // 0x413ccc\n        *(int32_t *)(v302 + v307) = v300;\n        *(int64_t *)(v4 + 64) = v301 + 1;\n        *(int32_t *)(*(int64_t *)(v4 + 16) + v307) = (int32_t)v3;\n        v297 = v300;\n    }\n    int64_t v308 = 0;\n    uint32_t v309 = (int32_t)v308; // 0x413cf2\n    int64_t v310; // 0x413d02\n    int64_t * v311; // 0x413d09\n    if (v297 <= v309) {\n        // 0x413cf7\n        if ((int32_t)v3 >= v309) {\n            // 0x413cfc\n            v310 = v308 >> 6;\n            v4 = v310;\n            v311 = (int64_t *)(8 * v310 + v148);\n            *v311 = *v311 | 1 << v308 % 64;\n        }\n    }\n    int64_t v312 = v308 + 1; // 0x413d18\n    while (v308 != 255) {\n        // 0x413cf0\n        v308 = v312;\n        v309 = (int32_t)v308;\n        if (v297 <= v309) {\n            // 0x413cf7\n            if ((int32_t)v3 >= v309) {\n                // 0x413cfc\n                v310 = v308 >> 6;\n                v4 = v310;\n                v311 = (int64_t *)(8 * v310 + v148);\n                *v311 = *v311 | 1 << v308 % 64;\n            }\n        }\n        // 0x413d0e\n        v312 = v308 + 1;\n    }\n    // 0x413d1a\n    *(int32_t *)*v177 = 0;\n    int64_t v194; // 0x413bd8\n    v255 = v194 & 0xffffffff;\n    goto lab_0x41395f;\n  lab_0x412d91:\n    if ((a4 & 32) != 0) {\n        // 0x4130b5\n        *(int64_t *)(v6 + 24) = 0;\n        *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    if ((a4 & 16) != 0) {\n        // 0x413ad5\n        v5 = a5;\n        int64_t v313 = function_4125d0((int64_t *)v9, a1, a4); // 0x413ae5\n        int64_t * v314 = (int64_t *)(a1 + 72); // 0x413af7\n        *v314 = (0x100000000 * v313 >> 32) + *v314;\n        function_412d40(a1, a2, v9, a4, v5, a6);\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x412db0;\n  lab_0x412db0:\n    // 0x412db0\n    *(char *)(v9 + 8) = 1;\n    if (function_40a780(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n        // 0x4136d1\n        *(int32_t *)a6 = 12;\n        // 0x412eb8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x412de0;\n  lab_0x413574:;\n    int64_t v223 = &g2; // 0x413590\n    int64_t v222 = (int64_t)\"alnum\"; // 0x413590\n    bool v224 = v7 == 33; // 0x413590\n    goto lab_0x413594;\n  lab_0x4135c0:\n    // 0x4135c0\n    v223 = (int64_t)&g24;\n    v222 = (int64_t)\"space\";\n    v224 = v7 == 35;\n    goto lab_0x413594;\n  lab_0x412de0:\n    // 0x412de0\n    v58 = (int64_t *)(v6 + 8);\n    int64_t v144 = function_4125d0((int64_t *)v9, a1, *v58); // 0x412deb\n    unsigned char v145 = *(char *)(v9 + 8); // 0x412df0\n    int64_t * v146 = (int64_t *)(a1 + 72); // 0x412df8\n    *v146 = *v146 + (0x100000000 * v144 >> 32);\n    if (v145 >= 24) {\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x412ed0\n    v52 = (int64_t *)(v6 + 24);\n    int64_t v147 = v6 + 32;\n    v89 = (int64_t *)v147;\n    v78 = (int128_t *)v147;\n    v59 = (int64_t *)(v6 + 48);\n    v110 = (int64_t *)(v6 + 16);\n    v118 = (int64_t *)(v6 + 56);\n    v114 = v6 + 192;\n    v108 = (char *)(v6 + 200);\n    v72 = v145;\n    v73 = a1;\n    v74 = v9;\n    while (true) {\n      lab_0x412ed0:;\n        unsigned char v75 = v72;\n        if ((1 << (int64_t)(v75 % 64) & 0x8c0800) == 0) {\n            // break -> 0x412e0a\n            break;\n        }\n        // 0x412ee6\n        v53 = v74;\n        v66 = v73;\n        v60 = (int64_t *)(v66 + 72);\n        v61 = *v60;\n        v62 = (int128_t *)v53;\n        int128_t v76 = __asm_movdqa(*v62); // 0x412eea\n        if (v75 == 23) {\n            int64_t v77 = *v58; // 0x413220\n            v4 = v77;\n            *v78 = (int128_t)__asm_movaps(v76);\n            int64_t v79 = function_412c80(v66, v53, v77); // 0x413230\n            v80 = __asm_movdqa(*v78);\n            v5 = v79;\n            v56 = v80;\n            switch (v79) {\n                case -1: {\n                    // 0x4132b0\n                    if (*(char *)(v53 + 8) != 1) {\n                        // 0x4133c0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4133cb;\n                    }\n                    // 0x4132bc\n                    v81 = 0;\n                    if (*(char *)v53 != 44) {\n                        // 0x4133c0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4133cb;\n                    }\n                    goto lab_0x4132c9;\n                }\n                case -2: {\n                    goto lab_0x413262;\n                }\n                default: {\n                    char * v82 = (char *)(v53 + 8);\n                    v56 = v80;\n                    v83 = v79;\n                    v84 = v79;\n                    switch (*v82) {\n                        case 24: {\n                            goto lab_0x413384;\n                        }\n                        case 1: {\n                            // 0x4133a3\n                            v81 = v79;\n                            if (*(char *)v53 == 44) {\n                                goto lab_0x4132c9;\n                            } else {\n                                // 0x4133ae\n                                v55 = v82;\n                                v57 = v80;\n                                if ((*v58 & 0x200000) == 0) {\n                                    // 0x4133c0\n                                    *(int32_t *)*v59 = 10;\n                                    goto lab_0x4133cb;\n                                }\n                                goto lab_0x413271;\n                            }\n                        }\n                        default: {\n                            goto lab_0x413262;\n                        }\n                    }\n                }\n            }\n        } else {\n            int64_t v85 = *v58;\n            v4 = v85;\n            int64_t v86 = function_4125d0((int64_t *)v53, v66, v85);\n            *v60 = (0x100000000 * v86 >> 32) + *v60;\n            int64_t v87 = *v52;\n            if (v75 == 19) {\n                if (v87 == 0) {\n                    goto lab_0x413290;\n                } else {\n                    int64_t v88 = v75 == 18; // 0x412ed9\n                    v5 = 1;\n                    *v89 = 0;\n                    v90 = 10;\n                    v91 = v88;\n                    v92 = v87;\n                    v93 = v53;\n                    v94 = v66;\n                    v95 = v88;\n                    v96 = v87;\n                    v97 = v53;\n                    v98 = v66;\n                    if (*(char *)(v87 + 48) == 17) {\n                        goto lab_0x4131f8;\n                    } else {\n                        goto lab_0x412f5a;\n                    }\n                }\n            } else {\n                if (v87 == 0) {\n                    goto lab_0x413290;\n                } else {\n                    if (v75 == 18) {\n                        // 0x41340a\n                        v5 = -1;\n                        v4 = v87;\n                        v99 = v87;\n                        v100 = 1;\n                        v101 = v53;\n                        v102 = v87;\n                        v103 = v66;\n                        goto lab_0x41341f;\n                    } else {\n                        // 0x412f33\n                        v5 = -1;\n                        if (*(char *)(v87 + 48) == 17) {\n                            // 0x4131e0\n                            *v89 = 0;\n                            v95 = 0;\n                            v96 = *v52;\n                            v97 = v53;\n                            v98 = v66;\n                            goto lab_0x4131f8;\n                        } else {\n                            // 0x412f42\n                            *v89 = 0;\n                            v90 = 11;\n                            v91 = 0;\n                            v92 = v87;\n                            v93 = v53;\n                            v94 = v66;\n                            goto lab_0x412f5a;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // 0x412e0a\n    return *(int64_t *)(v6 + 24);\n  lab_0x4134d2:\n    // 0x4134d2\n    if (v17 == 21) {\n        // 0x413aba\n        *v20 = 1;\n    }\n    // 0x4134da\n    v148 = v5;\n    v149 = (int64_t *)(v6 + 8);\n    int64_t v150 = v6 + 112; // 0x41350f\n    v151 = v6 + 120;\n    v152 = (int64_t *)v151;\n    int64_t v153; // bp-120, 0x412d40\n    int64_t v154 = &v153;\n    int32_t * v155 = (int32_t *)v150; // 0x413519\n    v156 = (int64_t *)(a1 + 72);\n    int64_t v157 = v6 + 144;\n    int64_t v158 = v6 + 192;\n    int64_t v159 = v6 + 128;\n    v160 = (int32_t *)v159;\n    v161 = v6 + 136;\n    v162 = (int64_t *)v161;\n    v163 = (int64_t *)(v6 + 16);\n    int64_t v164 = v6 + 64;\n    v165 = (char *)v164;\n    bool v166; // 0x412d40\n    int64_t v167 = v166 ? -1 : 1;\n    v168 = (int32_t *)v151;\n    int64_t v169 = v6 + 72;\n    v170 = (int32_t *)v169;\n    v171 = (int64_t *)v164;\n    v172 = (int64_t *)(v6 + 32);\n    v173 = (int32_t *)(v6 + 92);\n    v174 = (int32_t *)(v6 + 88);\n    v175 = (int64_t *)(v6 + 80);\n    v176 = (int64_t *)v169;\n    v177 = (int64_t *)(v6 + 48);\n    v178 = v18 + 72;\n    v179 = (int64_t *)(v6 - 16);\n    v180 = (int64_t *)(v6 + 104);\n    v181 = (int64_t *)(v18 + 40);\n    v182 = (int64_t *)(v6 + 24);\n    v183 = v16 & 0xffffffff;\n    v184 = 1;\n    int32_t v185; // 0x412d40\n    while (true) {\n      lab_0x4134fe:\n        // 0x4134fe\n        v3 = v184;\n        int64_t v186 = *v149; // 0x4134fe\n        v3 = v184;\n        *v152 = v154;\n        *v155 = 3;\n        int32_t v187 = function_4123b0(v150, a1, v9, v183, v186, (int32_t)v184);\n        v185 = v187;\n        if (v187 != 0) {\n            // break -> 0x413b14\n            break;\n        }\n        // 0x41352e\n        g73 = v6 - 8;\n        v188 = function_408020(v19, a1, *v149);\n        if ((*v155 - 2 & -3) == 0) {\n            goto lab_0x413564;\n        } else {\n            unsigned char v189 = *v20; // 0x41354c\n            v4 = v189;\n            switch (v189) {\n                case 2: {\n                    goto lab_0x413ac5;\n                }\n                case 22: {\n                    int64_t v190 = 0x100000000 * v188;\n                    *v156 = *v156 + (v190 >> 32);\n                    int64_t v191 = *v149; // 0x413b5b\n                    int64_t v192 = function_408020((int64_t *)v157, a1, v191); // 0x413b6b\n                    unsigned char v193 = *(char *)(v6 + 152); // 0x413b70\n                    v4 = v193;\n                    switch (v193) {\n                        case 2: {\n                            goto lab_0x413ac5;\n                        }\n                        case 21: {\n                            // 0x413d85\n                            *v156 = *v156 + (-v190 >> 32);\n                            *v20 = 1;\n                            goto lab_0x413564;\n                        }\n                        default: {\n                            // 0x413b8a\n                            *v160 = 3;\n                            *v162 = v158;\n                            if ((int32_t)function_4123b0(v159, a1, v157, v192 & 0xffffffff, v191, 1) != 0) {\n                                // break -> 0x413b14\n                                break;\n                            }\n                            // 0x413bcd\n                            v194 = function_408020(v19, a1, *v149);\n                            v195 = *v155;\n                            int32_t v196 = *(int32_t *)(*v163 + 180); // 0x413bee\n                            v4 = v196 < 2 == (1 - v196 & v196) < 0 ? v18 : 0;\n                            if ((v195 - 2 & -3) == 0) {\n                                goto lab_0x4140a6_3;\n                            }\n                            // 0x413c06\n                            v197 = *v160;\n                            if ((v197 - 2 & -3) == 0) {\n                                goto lab_0x4140a6_3;\n                            }\n                            // 0x413c19\n                            *v165 = (char)(v195 == 3);\n                            if (v195 == 3) {\n                                int64_t v198 = *v152; // 0x4140ed\n                                int64_t v199 = -1; // 0x4140fe\n                                int64_t v200 = v198; // 0x4140fe\n                                int64_t v201; // 0x412d40\n                                while (v199 != 0) {\n                                    int64_t v202 = v200;\n                                    v199--;\n                                    v200 = v202 + v167;\n                                    v201 = v199;\n                                    if (*(char *)v202 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                }\n                                if (-v201 >= 4) {\n                                    goto lab_0x413fa5_5;\n                                }\n                                // 0x414110\n                                v203 = v198;\n                                if (v197 == 3) {\n                                    // 0x413f81\n                                    int64_t v204; // 0x412d40\n                                    while (v204 != 0) {\n                                        int64_t v205; // 0x412d40\n                                        int64_t v206 = v205;\n                                        char v207 = *(char *)v206; // 0x413f8f\n                                        int64_t v208; // 0x412d40\n                                        int64_t v209 = v208 - 1; // 0x413f8f\n                                        v204 = v209;\n                                        v205 = v206 + v167;\n                                        int64_t v210 = v209; // 0x413f8f\n                                        if (v207 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v208 = v204;\n                                        v210 = 0;\n                                    }\n                                    v203 = v198;\n                                }\n                                goto lab_0x413c3f;\n                            } else {\n                                if (v197 == 3) {\n                                    int64_t v211 = *v162; // 0x4140b6\n                                    v3 = v211;\n                                    int64_t v212 = v211; // 0x4140c7\n                                    int64_t v213 = -1; // 0x4140c7\n                                    int64_t v214 = 0; // 0x4140c7\n                                    while (v213 != 0) {\n                                        int64_t v215 = v212;\n                                        v213--;\n                                        v212 = v215 + v167;\n                                        v214 = v213;\n                                        if (*(char *)v215 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v214 = 0;\n                                    }\n                                    if (-v214 >= 4) {\n                                        goto lab_0x413fa5_5;\n                                    }\n                                    // 0x4140dd\n                                    v203 = v151;\n                                    v216 = v211;\n                                    v217 = 0;\n                                    if (v195 != 0) {\n                                        goto lab_0x413c56;\n                                    } else {\n                                        goto lab_0x413c3f;\n                                    }\n                                } else {\n                                    // 0x413c31\n                                    v203 = v151;\n                                    if (v195 != 0) {\n                                        // 0x41408d\n                                        v218 = 0;\n                                        v219 = 0;\n                                        v220 = 0;\n                                        if (v197 != 0) {\n                                            goto lab_0x413c5a;\n                                        } else {\n                                            goto lab_0x414099;\n                                        }\n                                    } else {\n                                        goto lab_0x413c3f;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x413564;\n                }\n            }\n        }\n    }\n    // 0x413b14\n    *(int32_t *)*v177 = v185;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x413594:;\n    int64_t v221 = *(int64_t *)(a1 + 120);\n    v4 = v222;\n    v3 = a6;\n    if (!(((int32_t)a6 == 0 | function_40db70(a2, v221, (char *)v222, (int64_t *)v223, (int64_t)v224, a6) != 0))) {\n        // 0x412eb8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x412de0;\n  lab_0x413a49:;\n    // 0x413a49\n    int64_t v225; // 0x4137f5\n    int64_t v226; // 0x4137f9\n    if (function_40a780(v225, v226, 0, 0, v9) == 0) {\n        // 0x4136d1\n        *(int32_t *)a6 = 12;\n        // 0x412eb8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x412e0a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x41389f;\n  lab_0x413fe5:;\n    int16_t * v250 = *__ctype_b_loc(); // 0x413ff9\n    v3 = (v13 | 256) - 64 * v15;\n    int64_t v251 = v13; // 0x41400f\n    int64_t v252 = 8 * v15 + a2; // 0x41400f\n    int64_t v141 = 2 * v13 + (int64_t)v250; // 0x41400f\n    while (true) {\n        int64_t v143 = v251;\n        v139 = (int64_t *)(v252 + 184);\n        v140 = 0;\n        while (true) {\n          lab_0x414032:\n            // 0x414032\n            v137 = v140;\n            if ((*(char *)(2 * v137 + v141) & 8) == 0) {\n                int64_t v142 = v137 + v143; // 0x414020\n                v4 = v142 & 0xffffffff;\n                if ((int32_t)v142 == 95) {\n                    goto lab_0x41403a;\n                } else {\n                    goto lab_0x414028;\n                }\n            } else {\n                goto lab_0x41403a;\n            }\n        }\n      lab_0x414049:;\n        int64_t v253 = v143 + 64; // 0x414049\n        v12 = v10;\n        v251 = v253 & 0xffffffff;\n        v252 += 8;\n        v141 += 128;\n        if ((int32_t)v3 == (int32_t)v253) {\n            // break -> 0x4137f0\n            break;\n        }\n    }\n    goto lab_0x4137f0_2;\n  lab_0x41389f:;\n    int64_t v227 = function_4125d0((int64_t *)v9, a1, a4); // 0x4138aa\n    int64_t * v228 = (int64_t *)(a1 + 72); // 0x4138b1\n    *v228 = (0x100000000 * v227 >> 32) + *v228;\n    // 0x412e0a\n    return *(int64_t *)(v6 + 24);\n  lab_0x4137f0_2:;\n    int32_t v229 = v12;\n    v225 = a2 + 112;\n    v226 = a2 + 128;\n    if ((v229 - 256 & -257) != 0) {\n        goto lab_0x413a49;\n    } else {\n        int32_t * v230 = (int32_t *)v9;\n        int64_t v231; // 0x412d40\n        if (v229 == 256) {\n            // 0x413b2a\n            *v230 = 6;\n            v4 = 0;\n            v231 = function_40a780(v225, v226, 0, 0, v9);\n        } else {\n            // 0x41381f\n            *v230 = 5;\n            v4 = 0;\n            v231 = function_40a780(v225, v226, 0, 0, v9);\n        }\n        // 0x413844\n        *v230 = 10;\n        int64_t v232 = function_40a780(v225, v226, 0, 0, v9); // 0x413851\n        int64_t v233 = function_40a780(v225, v226, (int32_t)v231, (int32_t)v232, (int64_t)&v14); // 0x413875\n        if (v233 == 0 || v231 == 0 || v232 == 0) {\n            // 0x4136d1\n            *(int32_t *)a6 = 12;\n            // 0x412eb8\n            *(int64_t *)(v6 + 24) = 0;\n            // 0x412e0a\n            return *(int64_t *)(v6 + 24);\n        }\n        goto lab_0x41389f;\n    }\n  lab_0x4141bd_3:\n    // 0x4141bd\n    *v182 = v234;\n    free((int64_t *)v235);\n    free((int64_t *)*v182);\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x4139fb_3;\n  lab_0x413eae:;\n    int64_t v236 = *v163; // 0x413eae\n    char * v237 = (char *)(v236 + 176); // 0x413eba\n    *v237 = *v237 | 2;\n    int64_t v238 = v236 + 112; // 0x413ec1\n    int64_t v239 = v236 + 128; // 0x413ec5\n    char * v240 = (char *)(v6 + 168); // 0x413ed2\n    *v240 = 6;\n    int64_t * v241 = (int64_t *)(v6 + 160); // 0x413eda\n    *v241 = v18;\n    int64_t v242 = function_40a780(v238, v239, 0, 0, v154); // 0x413ee2\n    *v182 = v242;\n    int64_t v243 = v5 + 32; // 0x413ef3\n    v4 = v243;\n    int64_t v244 = v5; // 0x413efd\n    if (v242 == 0) {\n        goto lab_0x413e9e;\n    } else {\n        while (*(int64_t *)v244 == 0) {\n            int64_t v245 = v244 + 8; // 0x413f05\n            v244 = v245;\n            if (v243 == v245) {\n                // 0x413f0e\n                free((int64_t *)v5);\n                goto lab_0x412de0;\n            }\n        }\n        // 0x413f1c\n        *v240 = 3;\n        *v241 = v5;\n        int64_t v246 = function_40a780(v238, v239, 0, 0, v154); // 0x413f3d\n        if (v246 == 0) {\n            goto lab_0x413e9e;\n        } else {\n            // 0x413f4b\n            *(char *)(v6 + 200) = 10;\n            int64_t v247 = function_40a780(v238, v239, (int32_t)v246, (int32_t)*v182, v158); // 0x413f69\n            *v182 = v247;\n            if (v247 != 0) {\n                goto lab_0x412de0;\n            } else {\n                goto lab_0x413e9e;\n            }\n        }\n    }\n  lab_0x413e58:\n    // 0x413e58\n    function_409170(v18);\n    *(char *)(v6 + 168) = 3;\n    *(int64_t *)(v6 + 160) = v5;\n    int64_t v248 = *v163; // 0x413e7b\n    int64_t v249 = function_40a780(v248 + 112, v248 + 128, 0, 0, v154); // 0x413e8b\n    *v182 = v249;\n    if (v249 != 0) {\n        goto lab_0x412de0;\n    } else {\n        goto lab_0x413e9e;\n    }\n}\n"
        },
        {
            "funcName": "function_414230",
            "funcStartAddr": "414230",
            "funcEndAddr": "41436e",
            "decompiledFuncCode": "int64_t function_414230(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = function_412d40(a1, a2, a3, a4, a5, a6); // 0x41425a\n    int64_t v1; // 0x414230\n    if ((int32_t)v1 != 0 == result == 0) {\n        // 0x414305\n        return 0;\n    }\n    char * v2 = (char *)(a3 + 8); // 0x414278\n    char v3 = *v2; // 0x414278\n    if ((v3 & -9) == 2) {\n        // 0x414305\n        return result;\n    }\n    // 0x414286\n    int64_t v4; // bp-72, 0x414230\n    int64_t v5 = &v4;\n    int64_t v6 = result;\n    int64_t result2 = v6; // 0x414288\n    if (a5 != 0 == v3 == 9) {\n        return result2;\n    }\n    int64_t v7 = function_412d40(a1, a2, a3, a4, a5, a6); // 0x4142a3\n    int32_t v8 = v7;\n    if (v7 == 0 == (v8 != 0)) {\n        // 0x41432c\n        result2 = 0;\n        if (v6 == 0) {\n            return result2;\n        } else {\n            // 0x414331\n            function_407fb0(v6, 0x4091c0, 0);\n            result2 = 0;\n            return result2;\n        }\n    }\n    int64_t v9; // 0x4142e5\n    char v10; // 0x4142f7\n    while (v6 != 0 && v7 != 0) {\n        // 0x4142c0\n        v9 = function_40a780(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n        if (v9 == 0) {\n            // 0x414345\n            function_407fb0(v7, 0x4091c0, 0);\n            function_407fb0(v6, 0x4091c0, 0);\n            *(int32_t *)a6 = 12;\n            result2 = 0;\n            return result2;\n        }\n        // 0x4142f4\n        v10 = *v2;\n        result2 = v9;\n        if ((v10 & -9) == 2) {\n            return result2;\n        }\n        v6 = v9;\n        result2 = v6;\n        if (a5 != 0 == v10 == 9) {\n            return result2;\n        }\n        // 0x41428f\n        v7 = function_412d40(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41432c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x414331\n                function_407fb0(v6, 0x4091c0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n    }\n    int64_t v11 = v6 == 0 ? v7 : v6; // 0x414323\n    char v12 = *v2; // 0x414278\n    result2 = v11;\n    while ((v12 & -9) != 2) {\n        // 0x414286\n        v6 = v11;\n        result2 = v6;\n        if (a5 != 0 == v12 == 9) {\n            return result2;\n        }\n        // 0x41428f\n        v7 = function_412d40(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41432c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x414331\n                function_407fb0(v6, 0x4091c0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n        while (v6 != 0 && v7 != 0) {\n            // 0x4142c0\n            v9 = function_40a780(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n            if (v9 == 0) {\n                // 0x414345\n                function_407fb0(v7, 0x4091c0, 0);\n                function_407fb0(v6, 0x4091c0, 0);\n                *(int32_t *)a6 = 12;\n                result2 = 0;\n                return result2;\n            }\n            // 0x4142f4\n            v10 = *v2;\n            result2 = v9;\n            if ((v10 & -9) == 2) {\n                return result2;\n            }\n            v6 = v9;\n            result2 = v6;\n            if (a5 != 0 == v10 == 9) {\n                return result2;\n            }\n            // 0x41428f\n            v7 = function_412d40(a1, a2, a3, a4, a5, a6);\n            v8 = v7;\n            if (v7 == 0 == (v8 != 0)) {\n                // 0x41432c\n                result2 = 0;\n                if (v6 == 0) {\n                    return result2;\n                } else {\n                    // 0x414331\n                    function_407fb0(v6, 0x4091c0, 0);\n                    result2 = 0;\n                    return result2;\n                }\n            }\n        }\n        // 0x414320\n        v11 = v6 == 0 ? v7 : v6;\n        v12 = *v2;\n        result2 = v11;\n    }\n  lab_0x414305_2:\n    // 0x414305\n    return result2;\n}\n"
        },
        {
            "funcName": "function_414370",
            "funcStartAddr": "414370",
            "funcEndAddr": "4144c1",
            "decompiledFuncCode": "int64_t function_414370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a2 + 168); // 0x414392\n    int64_t v2 = function_414230(a1, a2, a3, a4, a5, a6); // 0x4143a2\n    int64_t v3; // 0x414370\n    if ((int32_t)v3 != 0 && v2 == 0) {\n        // 0x4143c1\n        return 0;\n    }\n    char * v4 = (char *)(a3 + 8); // 0x414459\n    int64_t * v5 = (int64_t *)(a1 + 72);\n    int64_t v6 = a2 + 112;\n    int64_t v7; // bp-72, 0x414370\n    int64_t v8 = &v7;\n    int64_t v9 = v2;\n    int64_t result = v9; // 0x41445d\n    while (*v4 == 10) {\n        // 0x414463\n        *v5 = (0x100000000 * function_4125d0((int64_t *)a3, a1, a4 | 0x800000) >> 32) + *v5;\n        char v10 = *v4; // 0x41447f\n        int64_t v11 = 0; // 0x41448b\n        if ((v10 & -9) != 2 && a5 != 0 != (v10 == 9)) {\n            // 0x4143e7\n            v11 = function_414230(a1, a2, a3, a4, a5, a6);\n            int64_t v12; // 0x414370\n            if (v11 == 0 == (*(int32_t *)&v12 != 0)) {\n                // 0x4144a4\n                result = 0;\n                if (v9 == 0) {\n                    return result;\n                } else {\n                    // 0x4144ad\n                    function_407fb0(v9, 0x4091c0, 0);\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        int64_t v13 = function_40a780(v6, a2 + 128, (int32_t)v9, (int32_t)v11, v8); // 0x41444c\n        if (v13 == 0) {\n            // 0x414498\n            *(int32_t *)a6 = 12;\n            result = 0;\n            return result;\n        }\n        v9 = v13;\n        result = v9;\n    }\n  lab_0x4143c1:\n    // 0x4143c1\n    return result;\n}\n"
        },
        {
            "funcName": "function_4144d0",
            "funcStartAddr": "4144d0",
            "funcEndAddr": "41527a",
            "decompiledFuncCode": "int64_t function_4144d0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4144d0\n    int128_t v1; // 0x4144d0\n    int128_t v2 = v1;\n    int64_t v3; // 0x4144d0\n    int64_t v4 = v3;\n    char * v5 = (char *)(a1 + 56); // 0x4144ed\n    *v5 = *v5 & -112;\n    int64_t v6 = a1 + 8;\n    int64_t * v7 = (int64_t *)v6; // 0x4144f1\n    int32_t result = 0; // bp-268, 0x4144f9\n    *(int64_t *)(a1 + 24) = a4;\n    int64_t * v8 = (int64_t *)(a1 + 16); // 0x414508\n    *v8 = 0;\n    int64_t * v9 = (int64_t *)(a1 + 48); // 0x414510\n    *v9 = 0;\n    int64_t v10 = v6; // 0x414518\n    int64_t v11 = a1; // 0x414518\n    if (*v7 < 232) {\n        int64_t * v12 = (int64_t *)a1; // 0x415058\n        int64_t * mem = realloc(v12, 232); // 0x415058\n        if (mem == NULL) {\n            // 0x414e1b\n            return 12;\n        }\n        // 0x415069\n        v11 = (int64_t)mem;\n        *v7 = 232;\n        *v12 = v11;\n        v10 = v11 + 8;\n    }\n    // 0x41451e\n    *v8 = 232;\n    int64_t v13 = v10 & -8; // 0x41452f\n    int64_t * v14 = (int64_t *)v11; // 0x414533\n    *v14 = 0;\n    *(int64_t *)(v11 + 224) = 0;\n    __asm_rep_stosq_memset((char *)v13, 0, (v11 + 232 - v13) / 8 % 0x20000000);\n    *(int32_t *)(v11 + 128) = 15;\n    int64_t v15; // 0x4144d0\n    int64_t v16; // 0x4144d0\n    uint64_t v17; // 0x4144d0\n    int64_t v18; // 0x4144d0\n    int64_t v19; // 0x4144d0\n    int64_t v20; // 0x414571\n    int64_t * v21; // 0x4145bd\n    int32_t * v22; // 0x4145cb\n    char * v23; // 0x414628\n    if (a3 < 0x555555555555555) {\n        // 0x414571\n        v20 = a3 + 1;\n        *(int64_t *)v10 = v20;\n        *v14 = (int64_t)malloc(16 * (int32_t)v20);\n        int64_t size = 1; // 0x414591\n        int64_t v24 = 0; // 0x414591\n        if (a3 != 0) {\n            int64_t v25 = 2; // 0x4145a0\n            int64_t v26 = v25; // 0x4145a6\n            while (v25 <= a3) {\n                // 0x4145a0\n                v25 = 2 * v26;\n                v26 = v25;\n            }\n            // 0x4145a8\n            size = v25;\n            v24 = v25 - 1;\n        }\n        int64_t * mem2 = calloc(24, (int32_t)size); // 0x4145b1\n        *(int64_t *)(v11 + 136) = v24;\n        v21 = (int64_t *)(v11 + 64);\n        *v21 = (int64_t)mem2;\n        int32_t v27 = __ctype_get_mb_cur_max(); // 0x4145c1\n        v22 = (int32_t *)(v11 + 180);\n        *v22 = v27;\n        char * v28 = nl_langinfo(14); // 0x4145d1\n        if ((*v28 & -33) == 85) {\n            int64_t v29 = (int64_t)v28; // 0x4145d1\n            if ((*(char *)(v29 + 1) & -33) == 84) {\n                // 0x4145ed\n                if ((*(char *)(v29 + 2) & -33) == 70) {\n                    int64_t v30 = v29 + 3; // 0x4145fb\n                    bool v31; // 0x4144d0\n                    int64_t v32 = v31 ? -1 : 1; // 0x414611\n                    int64_t v33 = (int64_t)&g25; // 0x4144d0\n                    int64_t v34 = v30 + (int64_t)(*(char *)v30 == 45); // 0x4144d0\n                    int64_t v35 = 2; // 0x414611\n                    unsigned char v36 = *(char *)v34; // 0x414611\n                    char v37 = *(char *)v33; // 0x414611\n                    char v38 = v37; // 0x414611\n                    bool v39 = false; // 0x414611\n                    while (v36 == v37) {\n                        v35--;\n                        v33 += v32;\n                        v34 += v32;\n                        v38 = v36;\n                        v39 = true;\n                        if (v35 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v36 = *(char *)v34;\n                        v37 = *(char *)v33;\n                        v38 = v37;\n                        v39 = false;\n                    }\n                    unsigned char v40 = v38;\n                    if ((v36 >= v40 && !v39) == v36 < v40) {\n                        char * v41 = (char *)(v11 + 176); // 0x41461c\n                        *v41 = *v41 | 4;\n                    }\n                }\n            }\n        }\n        // 0x414628\n        v23 = (char *)(v11 + 176);\n        char v42 = *v23; // 0x414628\n        *v23 = v42 & -9;\n        if (*v22 < 2) {\n            goto lab_0x414653;\n        } else {\n            if ((v42 & 4) == 0) {\n                int64_t * mem3 = calloc(32, 1); // 0x414eca\n                int64_t * v43 = (int64_t *)(v11 + 120); // 0x414ecf\n                *v43 = (int64_t)mem3;\n                int64_t v44 = 0; // 0x414ed6\n                if (mem3 == NULL) {\n                    // 0x414eb0\n                    result = 12;\n                    goto lab_0x414e8e;\n                } else {\n                    while (true) {\n                        int64_t v45 = v44;\n                        v16 = 0;\n                        v18 = 8 * v45;\n                        while (true) {\n                          lab_0x414f06_2:\n                            // 0x414f06\n                            v19 = v18;\n                            v17 = v16;\n                            int32_t wc = v19; // 0x414f06\n                            int32_t v46 = btowc(wc); // 0x414f0f\n                            int64_t v47 = v19 & 0xffffff80; // 0x414f1d\n                            if (v46 == -1) {\n                                if (v47 != 0) {\n                                    goto lab_0x414efb;\n                                } else {\n                                    // 0x414ef4\n                                    *v23 = *v23 | 8;\n                                    goto lab_0x414efb;\n                                }\n                            } else {\n                                int64_t * v48 = (int64_t *)(*v43 + v45); // 0x414f35\n                                *v48 = *v48 | 1 << v17 % 64;\n                                if (v47 != 0) {\n                                    goto lab_0x414efb;\n                                } else {\n                                    if (v46 != wc) {\n                                        // 0x414ef4\n                                        *v23 = *v23 | 8;\n                                        goto lab_0x414efb;\n                                    } else {\n                                        int64_t v49 = v17 + 1; // 0x414f40\n                                        v15 = v49;\n                                        if ((int32_t)v49 == 64) {\n                                            // break -> 0x414f50\n                                            break;\n                                        }\n                                        goto lab_0x414f06;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x414f50:\n                        // 0x414f50\n                        v44 = v45 + 8;\n                        if (v45 == 24) {\n                            // break -> 0x414653\n                            break;\n                        }\n                    }\n                    goto lab_0x414653;\n                }\n            } else {\n                // 0x41464b\n                *(int64_t *)(v11 + 120) = (int64_t)&g26;\n                goto lab_0x414653;\n            }\n        }\n    } else {\n        // 0x414eb0\n        result = 12;\n        goto lab_0x414e8e;\n    }\n  lab_0x414efb:;\n    int64_t v50 = v17 + 1; // 0x414efb\n    v15 = v50;\n    if ((int32_t)v50 == 64) {\n        // break -> 0x414f50\n        goto lab_0x414f50;\n    }\n    goto lab_0x414f06;\n  lab_0x414f06:\n    // 0x414f06\n    v16 = v15 & 0xffffffff;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x414f06_2;\n  lab_0x415110_2:\n    // 0x415110\n    result = 0;\n    int64_t v51; // 0x4144d0\n    int64_t v52 = v51; // 0x415118\n    int64_t v53 = v51; // 0x415118\n    goto lab_0x414819;\n  lab_0x414a00:;\n    // 0x414a00\n    int64_t * v83; // 0x4144d0\n    int64_t v91 = *v83; // 0x414a00\n    int64_t v92 = function_407fb0(v91, 0x40ab30, (int32_t)a1); // 0x414a0c\n    int64_t v93 = v92; // 0x414a13\n    int64_t v94 = v91; // 0x414a13\n    int64_t v95; // 0x4144d0\n    int64_t v73; // 0x4144d0\n    int64_t v96; // bp-232, 0x4144d0\n    int64_t v68; // bp-248, 0x4144d0\n    int64_t * v80; // 0x414957\n    int64_t * v97; // 0x4144d0\n    if ((int32_t)v92 != 0) {\n        goto lab_0x414c28_2;\n    } else {\n        int64_t v98 = *v83; // 0x414a19\n        int64_t v99 = function_407fb0(v98, 0x40d060, (int32_t)v73); // 0x414a25\n        v93 = v99;\n        v94 = v98;\n        if ((int32_t)v99 != 0) {\n            goto lab_0x414c28_2;\n        } else {\n            // 0x414a32\n            function_409ff0(*v83, 0x409d40, v73);\n            int64_t v100 = *v83; // 0x414a43\n            int64_t v101 = function_409ff0(v100, 0x409840, v73); // 0x414a4f\n            v93 = v101;\n            v94 = v100;\n            if ((int32_t)v101 != 0) {\n                goto lab_0x414c28_2;\n            } else {\n                // 0x414a68\n                v97 = (int64_t *)(v73 + 16);\n                int64_t v102 = 0; // 0x4144d0\n                int64_t v103 = 0; // 0x4144d0\n                int64_t v104; // 0x4144d0\n                while (true) {\n                    int64_t v105 = *v97; // 0x414a68\n                    int64_t v106 = v105; // 0x414a6c\n                    int64_t v107 = v102; // 0x414a6c\n                    int64_t v108 = v103; // 0x414a6c\n                    int64_t v109 = v103; // 0x414a6c\n                    int64_t v110 = v102; // 0x414a6c\n                    v104 = v103;\n                    int64_t v111; // 0x4144d0\n                    if (v105 == v103) {\n                      lab_0x414a8c:\n                        // 0x414a8c\n                        v111 = v109;\n                        if ((char)v110 == 0) {\n                            // break -> 0x414b20\n                            break;\n                        }\n                      lab_0x414a95:\n                        // 0x414a95\n                        v106 = v111;\n                        v107 = 0;\n                        v108 = 0;\n                    }\n                    int64_t v112 = v107;\n                    int64_t v113 = v106; // 0x414a86\n                    int64_t v114 = v108;\n                    int64_t v115; // 0x414a82\n                    while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                        // 0x414a82\n                        v115 = v114 + 1;\n                        v109 = v113;\n                        v110 = v112;\n                        v104 = v115;\n                        if (v113 == v115) {\n                            goto lab_0x414a8c;\n                        }\n                        v114 = v115;\n                    }\n                    int64_t v116 = function_40a220((int128_t *)&v68, v73, v114, 1); // 0x414ab3\n                    if ((int32_t)v116 != 0) {\n                        // 0x414c28\n                        v93 = v116;\n                        v94 = &v68;\n                        goto lab_0x414c28_2;\n                    }\n                    int64_t v117 = v114 + 1; // 0x414ac9\n                    v102 = v112;\n                    v103 = v117;\n                    while (*(int64_t *)((0x1800000000 * v114 >> 32) + 8 + *v80) == 0) {\n                        // 0x414ad5\n                        free((int64_t *)v96);\n                        int64_t v118 = *v97; // 0x414ae5\n                        v111 = v118;\n                        if (v118 == v117) {\n                            goto lab_0x414a95;\n                        }\n                        v112 = 1;\n                        v113 = v118;\n                        v114 = v117;\n                        while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                            // 0x414a82\n                            v115 = v114 + 1;\n                            v109 = v113;\n                            v110 = v112;\n                            v104 = v115;\n                            if (v113 == v115) {\n                                goto lab_0x414a8c;\n                            }\n                            v114 = v115;\n                        }\n                        // 0x414aa0\n                        v116 = function_40a220((int128_t *)&v68, v73, v114, 1);\n                        if ((int32_t)v116 != 0) {\n                            // 0x414c28\n                            v93 = v116;\n                            v94 = &v68;\n                            goto lab_0x414c28_2;\n                        }\n                        // 0x414ac0\n                        v117 = v114 + 1;\n                        v102 = v112;\n                        v103 = v117;\n                    }\n                }\n                // 0x414b20\n                v95 = v104;\n                if ((*v5 & 16) != 0) {\n                    goto lab_0x414c38;\n                } else {\n                    // 0x414b2a\n                    if (*v9 == 0) {\n                        goto lab_0x414c38;\n                    } else {\n                        // 0x414b35\n                        if (*(char *)(v73 + 176) % 2 == 0) {\n                            goto lab_0x414c38;\n                        } else {\n                            goto lab_0x414b43;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x414c28_2:\n    // 0x414c28\n    result = v93;\n    int64_t v67 = v94; // 0x414c30\n    goto lab_0x414e38;\n  lab_0x414cc8:;\n    // 0x414cc8\n    int64_t v140; // 0x4144d0\n    int64_t v141 = v140 + 1; // 0x414cc8\n    uint64_t v78; // 0x4144d0\n    if (v78 <= v141) {\n        // break -> 0x414d70\n        goto lab_0x414d70;\n    }\n    int64_t v142 = v141; // 0x4144d0\n    goto lab_0x414cd5_2;\n  lab_0x414653:;\n    // 0x414653\n    int64_t v129; // bp-208, 0x4144d0\n    int64_t v124; // bp-216, 0x4144d0\n    int64_t * v158; // 0x414674\n    int64_t v128; // 0x414674\n    if (*v14 == 0) {\n        // 0x414eb0\n        result = 12;\n        goto lab_0x414e8e;\n    } else {\n        // 0x41465d\n        if (*v21 == 0) {\n            // 0x414eb0\n            result = 12;\n            goto lab_0x414e8e;\n        } else {\n            // 0x414668\n            v158 = (int64_t *)(a1 + 40);\n            v128 = *v158;\n            result = 0;\n            __asm_rep_stosq_memset((char *)&v129, 0, 18);\n            v124 = a2;\n            if (a3 != 0) {\n                int64_t v159 = &v124; // 0x414af5\n                int64_t v160 = function_4083f0(v159, v20); // 0x414afa\n                v93 = v160;\n                v94 = v159;\n                if ((int32_t)v160 != 0) {\n                    goto lab_0x414c28_2;\n                } else {\n                    // 0x414b07\n                    goto lab_0x414712;\n                }\n            } else {\n                goto lab_0x414712;\n            }\n        }\n    }\n  lab_0x414e8e:\n    // 0x414e8e\n    function_40d0f0(v11);\n    *(int64_t *)a1 = 0;\n    *v7 = 0;\n    // 0x414e1b\n    return result;\n  lab_0x414712:;\n    int64_t v125 = a4 & 0x400000; // 0x414697\n    int32_t v126 = *v22;\n    int64_t v127 = (v128 | v125) == 0 ? a2 : v129;\n    v129 = v127;\n    if (v125 == 0) {\n        if (v126 > 1) {\n            int64_t v130 = &v124;\n            function_4087e0(v130);\n            result = 0;\n            v52 = v130;\n            v53 = v130;\n        } else {\n            if ((v128 || v125) != 0) {\n                int64_t v131 = a3 - v4; // 0x4147a6\n                int64_t v132 = v131 == 0 | v131 < 0 != ((v131 ^ a3) & (v4 ^ a3)) < 0 ? a3 : v4; // 0x4147b6\n                if (v132 > v3) {\n                    unsigned char v133 = *(char *)(2 * v3 + v124); // 0x4147ed\n                    *(char *)(v127 + v3) = *(char *)(v128 + (int64_t)v133);\n                    int64_t v134 = v3 + 1; // 0x4147f8\n                    int64_t v135 = v134; // 0x4147ff\n                    if (v132 != v134) {\n                        unsigned char v136 = *(char *)(v135 + v3 + v124); // 0x4147ed\n                        *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                        int64_t v137 = v135 + 1; // 0x4147f8\n                        v135 = v137;\n                        while (v132 != v137) {\n                            // 0x4147d0\n                            v136 = *(char *)(v135 + v3 + v124);\n                            *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                            v137 = v135 + 1;\n                            v135 = v137;\n                        }\n                    }\n                }\n            }\n            // 0x414801\n            result = 0;\n            v52 = &v124;\n            v53 = v126;\n        }\n        goto lab_0x414819;\n    } else {\n        // 0x414728\n        v51 = &v124;\n        if (v126 < 2) {\n            // 0x415038\n            function_408760(v51);\n            result = 0;\n            v52 = v51;\n            v53 = v51;\n            goto lab_0x414819;\n        } else {\n            int64_t v138 = function_408990(v51); // 0x414736\n            v93 = v138;\n            v94 = v51;\n            // 0x414731\n            while ((int32_t)v138 == 0) {\n                if (v3 >= a3) {\n                    goto lab_0x415110_2;\n                }\n                // 0x414751\n                if (v4 > v3 + (int64_t)*v22) {\n                    goto lab_0x415110_2;\n                }\n                int64_t v139 = function_4083f0(v51, 2 * v4); // 0x414779\n                v93 = v139;\n                v94 = v51;\n                if ((int32_t)v139 != 0) {\n                    // break -> 0x414c28\n                    break;\n                }\n                v138 = function_408990(v51);\n                v93 = v138;\n                v94 = v51;\n            }\n            goto lab_0x414c28_2;\n        }\n    }\n  lab_0x414e38:;\n    int64_t * v119 = (int64_t *)(v67 + 112); // 0x414e38\n    int64_t v120 = *v119; // 0x414e38\n    if (v120 != 0) {\n        int64_t * v121 = (int64_t *)v120; // 0x414e48\n        int64_t v122 = *v121; // 0x414e48\n        free(v121);\n        while (v122 != 0) {\n            // 0x414e48\n            v121 = (int64_t *)v122;\n            v122 = *v121;\n            free(v121);\n        }\n    }\n    // 0x414e58\n    *v119 = 0;\n    int64_t * v123 = (int64_t *)(v67 + 32); // 0x414e60\n    *(int32_t *)(v67 + 128) = 15;\n    *(int64_t *)(v67 + 104) = 0;\n    free((int64_t *)*v123);\n    *v123 = 0;\n    function_409740(&v124);\n    goto lab_0x414e8e;\n  lab_0x414819:;\n    int64_t v54 = v53;\n    int64_t v55 = v52;\n    *v9 = 0;\n    *(int64_t *)(v54 + 216) = a4;\n    int32_t v56; // bp-264, 0x4144d0\n    function_4125d0((int64_t *)&v56, v55, a4 | 0x800000);\n    int64_t v57 = &v56; // 0x414851\n    int64_t v58 = function_414370(v55, a1, v57, a4, 0, (int64_t)&result); // 0x414868\n    int64_t v59; // 0x4144d0\n    int64_t v60; // 0x4144d0\n    int64_t v61; // 0x4144d0\n    int64_t v62; // 0x4144d0\n    int64_t v63; // 0x4150b9\n    int64_t v64; // 0x4150c7\n    int64_t v65; // 0x4144d0\n    int64_t v66; // 0x4150e2\n    if (result != 0) {\n        if (v58 == 0) {\n            // 0x415232\n            *(int64_t *)(v11 + 104) = 0;\n            v67 = v55;\n            goto lab_0x414e38;\n        } else {\n            // 0x4150b9\n            v63 = v54 + 112;\n            v64 = v54 + 128;\n            v65 = &v68;\n            v66 = function_40a780(v63, v64, 0, 0, v65);\n            goto lab_0x4148b7;\n        }\n    } else {\n        int64_t v69 = v54 + 112; // 0x414879\n        int64_t v70 = v54 + 128; // 0x414887\n        int64_t v71 = &v68;\n        int64_t v72 = function_40a780(v69, v70, 0, 0, v71); // 0x4148a2\n        v65 = v71;\n        v64 = v70;\n        v66 = v72;\n        v63 = v69;\n        v62 = 2;\n        v61 = v72;\n        v60 = v69;\n        v59 = v72;\n        if (v58 == 0) {\n            goto lab_0x4148d6;\n        } else {\n            goto lab_0x4148b7;\n        }\n    }\n  lab_0x4148d6:\n    // 0x4148d6\n    v73 = v60;\n    int64_t * v74; // 0x4144d0\n    int64_t * v75; // 0x4148f2\n    int64_t * v76; // 0x41498d\n    int64_t * v77; // 0x4144d0\n    if (v61 == 0 || v59 == 0) {\n        // 0x4150f8\n        result = 12;\n        *(int64_t *)(v11 + 104) = 0;\n        v67 = v73;\n        goto lab_0x414e38;\n    } else {\n        // 0x4148ee\n        v78 = v62;\n        v75 = (int64_t *)(v11 + 104);\n        *v75 = v59;\n        int32_t v79 = (int32_t)*(int64_t *)(v73 + 8);\n        int32_t size2 = 8 * v79; // 0x41490f\n        int64_t * mem4 = malloc(size2); // 0x41490f\n        *(int64_t *)(v73 + 24) = (int64_t)mem4;\n        int64_t * mem5 = malloc(size2); // 0x414923\n        *(int64_t *)(v73 + 32) = (int64_t)mem5;\n        int32_t size3 = 24 * v79; // 0x414934\n        int64_t * mem6 = malloc(size3); // 0x414934\n        *(int64_t *)(v73 + 40) = (int64_t)mem6;\n        int64_t * mem7 = malloc(size3); // 0x414945\n        v80 = (int64_t *)(v73 + 48);\n        *v80 = (int64_t)mem7;\n        if (mem4 == NULL | mem5 == NULL || mem6 == NULL || mem7 == NULL) {\n            // 0x414e30\n            result = 12;\n            v67 = v73;\n            goto lab_0x414e38;\n        } else {\n            int64_t v81 = *v9; // 0x41497c\n            int64_t * mem8 = malloc(8 * (int32_t)v81); // 0x414988\n            int64_t v82 = (int64_t)mem8; // 0x414988\n            v76 = (int64_t *)(v73 + 224);\n            *v76 = v82;\n            if (mem8 == NULL) {\n                // 0x41497c\n                v83 = (int64_t *)(v73 + 104);\n                goto lab_0x414a00;\n            } else {\n                // 0x414999\n                if (v81 != 0) {\n                    int64_t v84 = 0;\n                    *(int64_t *)(8 * v84 + v82) = v84;\n                    int64_t v85 = v84 + 1; // 0x4149a4\n                    while (v85 != v81) {\n                        // 0x4149a0\n                        v84 = v85;\n                        *(int64_t *)(8 * v84 + v82) = v84;\n                        v85 = v84 + 1;\n                    }\n                }\n                // 0x4149ad\n                v77 = (int64_t *)(v73 + 104);\n                function_409ff0(*v77, 0x409cb0, v73);\n                int64_t v86 = *v9; // 0x4149be\n                int64_t v87 = *v76;\n                v74 = (int64_t *)v87;\n                if (v86 == 0) {\n                    goto lab_0x4149ef;\n                } else {\n                    // 0x4149cb\n                    v83 = v77;\n                    if (*v74 == 0) {\n                        int64_t v88 = 1; // 0x4149e6\n                        while (v88 != v86) {\n                            int64_t v89 = v88; // 0x4149e4\n                            v83 = v77;\n                            if (*(int64_t *)(8 * v88 + v87) != v88) {\n                                goto lab_0x414a00;\n                            }\n                            v88 = v89 + 1;\n                        }\n                        goto lab_0x4149ef;\n                    } else {\n                        goto lab_0x414a00;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4148b7:;\n    int64_t v90 = function_40a780(v63, v64, (int32_t)v58, (int32_t)v66, v65); // 0x4148cb\n    v62 = 16;\n    v61 = v66;\n    v60 = v63;\n    v59 = v90;\n    goto lab_0x4148d6;\n  lab_0x4149ef:\n    // 0x4149ef\n    free(v74);\n    *v76 = 0;\n    v83 = v77;\n    goto lab_0x414a00;\n  lab_0x414c38:\n    // 0x414c38\n    if (*(int64_t *)(v73 + 152) != 0) {\n        goto lab_0x414b43;\n    } else {\n        goto lab_0x414c46;\n    }\n  lab_0x414b43:;\n    int64_t size4 = 24 * v95; // 0x414b47\n    int64_t * mem9 = malloc((int32_t)size4); // 0x414b4b\n    int64_t v161 = (int64_t)mem9; // 0x414b4b\n    int64_t * v162 = (int64_t *)(v73 + 56); // 0x414b50\n    *v162 = v161;\n    if (mem9 == NULL) {\n        // 0x415210\n        result = 12;\n        v67 = size4;\n        goto lab_0x414e38;\n    } else {\n        if (v95 != 0) {\n            int128_t v163 = __asm_pxor(v2, v2); // 0x414b78\n            __asm_movups(*(int128_t *)mem9, v163);\n            *(int64_t *)(v161 + 16) = 0;\n            uint64_t v164 = *v97; // 0x414b8f\n            int64_t v165 = 1; // 0x414b96\n            int128_t v166 = v163; // 0x414b96\n            int64_t v167 = v164; // 0x414b96\n            if (v164 > 1) {\n                int128_t v168 = v166;\n                int128_t v169 = __asm_pxor(v168, v168); // 0x414b78\n                int64_t v170 = v165 + 1; // 0x414b7c\n                int64_t v171 = *v162 + 24 * v165; // 0x414b80\n                __asm_movups(*(int128_t *)v171, v169);\n                *(int64_t *)(v171 + 16) = 0;\n                uint64_t v172 = *v97; // 0x414b8f\n                v165 = v170;\n                v167 = v172;\n                while (v172 > v170) {\n                    // 0x414b70\n                    v168 = v169;\n                    v169 = __asm_pxor(v168, v168);\n                    v170 = v165 + 1;\n                    v171 = *v162 + 24 * v165;\n                    __asm_movups(*(int128_t *)v171, v169);\n                    *(int64_t *)(v171 + 16) = 0;\n                    v172 = *v97;\n                    v165 = v170;\n                    v167 = v172;\n                }\n            }\n            int64_t v173 = v167;\n            if (v173 != 0) {\n                int64_t v174 = *v80; // 0x414baa\n                int64_t v175 = 0;\n                int64_t v176 = 24 * v175; // 0x414bba\n                int64_t v177 = v176 + v174; // 0x414bc7\n                int64_t v178 = *(int64_t *)(v177 + 8); // 0x414bca\n                int64_t v179 = v173; // 0x414bd3\n                int64_t v180 = v174; // 0x414bd3\n                int64_t v181; // 0x4144d0\n                int64_t v182; // 0x414c0e\n                int64_t v183; // 0x414c17\n                int64_t v184; // 0x414be0\n                int64_t v185; // 0x414be9\n                if (v178 >= 0 == (v178 != 0)) {\n                    // 0x414bfd\n                    v181 = *(int64_t *)(v177 + 16);\n                    v185 = 0;\n                    v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                    v183 = function_408490(v182, v175);\n                    v93 = 12;\n                    v94 = v182;\n                    if ((char)v183 == 0) {\n                        goto lab_0x414c28_2;\n                    }\n                    // 0x414be0\n                    v184 = *v80;\n                    v185++;\n                    v181 = 0x100000000 * v181 >> 32;\n                    while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                        // 0x414bfd\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_408490(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x414c28_2;\n                        }\n                        // 0x414be0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                    }\n                    // 0x415090\n                    v179 = *v97;\n                    v180 = v184;\n                }\n                // 0x415090\n                v174 = v180;\n                int64_t v186 = v179; // 0x41509b\n                int64_t v187 = v175 + 1; // 0x415090\n                while (v186 > v187) {\n                    // 0x414bae\n                    v175 = v187;\n                    v176 = 24 * v175;\n                    v177 = v176 + v174;\n                    v178 = *(int64_t *)(v177 + 8);\n                    v179 = v186;\n                    v180 = v174;\n                    if (v178 >= 0 == (v178 != 0)) {\n                        // 0x414bfd\n                        v181 = *(int64_t *)(v177 + 16);\n                        v185 = 0;\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_408490(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x414c28_2;\n                        }\n                        // 0x414be0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                        while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                            // 0x414bfd\n                            v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                            v183 = function_408490(v182, v175);\n                            v93 = 12;\n                            v94 = v182;\n                            if ((char)v183 == 0) {\n                                goto lab_0x414c28_2;\n                            }\n                            // 0x414be0\n                            v184 = *v80;\n                            v185++;\n                            v181 = 0x100000000 * v181 >> 32;\n                        }\n                        // 0x415090\n                        v179 = *v97;\n                        v180 = v184;\n                    }\n                    // 0x415090\n                    v174 = v180;\n                    v186 = v179;\n                    v187 = v175 + 1;\n                }\n            }\n        }\n        goto lab_0x414c46;\n    }\n  lab_0x414c46:\n    // 0x414c46\n    result = 0;\n    unsigned char result2 = *v23 / 4 & (char)(v125 == 0); // 0x414c60\n    if (result2 != 0) {\n        // 0x414f80\n        if (*v158 == 0) {\n            // 0x414f8b\n            if (*(int64_t *)(v11 + 16) != 0) {\n                // 0x414f98\n                return result2;\n            }\n            int64_t v188 = *(int64_t *)(v11 + 152); // 0x415246\n            *v22 = 1;\n            *v23 = 2 * (char)(v188 >= 0 == (v188 != 0)) | *v23 & -7;\n        }\n    }\n    int64_t v155 = &v68; // 0x414c6c\n    int64_t v189 = *(int64_t *)(*(int64_t *)(*v75 + 24) + 56); // 0x414c73\n    *(int64_t *)(v11 + 144) = v189;\n    int64_t * v153 = (int64_t *)(v11 + 48); // 0x414c82\n    int64_t v190 = function_40abb0(v155, *v153 + 24 * v189); // 0x414c8a\n    int64_t v191 = v190 & 0xffffffff; // 0x414c8f\n    int32_t v192 = v190; // 0x414c92\n    v56 = v192;\n    int64_t v154 = v155; // 0x414c98\n    int64_t v156 = v191; // 0x414c98\n    if (v192 != 0) {\n        goto lab_0x414daf;\n    } else {\n        // 0x414c9e\n        if (*(int64_t *)(v11 + 152) >= 1) {\n            int64_t v152 = &v96;\n            v142 = 0;\n            while (true) {\n              lab_0x414cd5_2:\n                // 0x414cd5\n                v140 = v142;\n                int64_t v143 = *v14; // 0x414cda\n                int64_t v144 = *(int64_t *)(v96 + 8 * v140); // 0x414cdd\n                int64_t v145 = 16 * v144 + v143; // 0x414ce8\n                if (*(char *)(v145 + 8) == 4) {\n                    int64_t * v146 = (int64_t *)v145;\n                    int64_t v147 = 0;\n                    int64_t v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143; // 0x414d09\n                    int64_t v149; // 0x414d1a\n                    int64_t v150; // 0x414d30\n                    int64_t v151; // 0x414d4f\n                    if (*(char *)(v148 + 8) == 9) {\n                        // 0x414d12\n                        if (*(int64_t *)v148 == *v146) {\n                            // 0x414d1a\n                            v149 = *(int64_t *)(v11 + 40);\n                            v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                            if (function_409b10(v78, v152, v150) != 0) {\n                                goto lab_0x414cc8;\n                            } else {\n                                // 0x414d40\n                                v151 = function_40a050(&v68, (int128_t *)(*v153 + 24 * v150));\n                                if ((int32_t)v151 != 0) {\n                                    // 0x4151d0\n                                    v154 = v155;\n                                    v156 = v151 & 0xffffffff;\n                                    goto lab_0x414daf;\n                                } else {\n                                    // 0x414cd5\n                                    v142 = 1;\n                                    goto lab_0x414cd5_2;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v157 = v147 + 1; // 0x414cf8\n                    while (v78 != v157) {\n                        // 0x414d01\n                        v147 = v157;\n                        v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143;\n                        if (*(char *)(v148 + 8) == 9) {\n                            // 0x414d12\n                            if (*(int64_t *)v148 == *v146) {\n                                // 0x414d1a\n                                v149 = *(int64_t *)(v11 + 40);\n                                v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                                if (function_409b10(v78, v152, v150) != 0) {\n                                    goto lab_0x414cc8;\n                                } else {\n                                    // 0x414d40\n                                    v151 = function_40a050(&v68, (int128_t *)(*v153 + 24 * v150));\n                                    if ((int32_t)v151 != 0) {\n                                        // 0x4151d0\n                                        v154 = v155;\n                                        v156 = v151 & 0xffffffff;\n                                        goto lab_0x414daf;\n                                    } else {\n                                        // 0x414cd5\n                                        v142 = 1;\n                                        goto lab_0x414cd5_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x414cf8\n                        v157 = v147 + 1;\n                    }\n                }\n                goto lab_0x414cc8;\n            }\n        }\n      lab_0x414d70:;\n        int64_t v193 = function_40adc0((int128_t *)&v56, v11, &v68, 0); // 0x414d7d\n        *(int64_t *)(v11 + 72) = v193;\n        if (v193 == 0) {\n            goto lab_0x415028;\n        } else {\n            // 0x414d8f\n            if (*(char *)(v193 + 104) < 0) {\n                int64_t v194 = function_40adc0((int128_t *)&v56, v11, &v68, 1); // 0x414fd0\n                int64_t * v195 = (int64_t *)(v11 + 80); // 0x414fe0\n                *v195 = v194;\n                int64_t v196 = function_40adc0((int128_t *)&v56, v11, &v68, 2); // 0x414fe9\n                int64_t * v197 = (int64_t *)(v11 + 88); // 0x414ff9\n                *v197 = v196;\n                int64_t v198 = function_40adc0((int128_t *)&v56, v11, &v68, 6); // 0x415002\n                *(int64_t *)(v11 + 96) = v198;\n                if (*v195 == 0) {\n                    goto lab_0x415028;\n                } else {\n                    // 0x415012\n                    if (v198 != 0 == (*v197 != 0)) {\n                        goto lab_0x414da5;\n                    } else {\n                        goto lab_0x415028;\n                    }\n                }\n            } else {\n                // 0x414d99\n                *(int64_t *)(v11 + 96) = v193;\n                *(int64_t *)(v11 + 88) = v193;\n                *(int64_t *)(v11 + 80) = v193;\n                goto lab_0x414da5;\n            }\n        }\n    }\n  lab_0x414daf:\n    // 0x414daf\n    result = v156;\n    int64_t * v199 = (int64_t *)(v154 + 112); // 0x414db8\n    int64_t v200 = *v199; // 0x414db8\n    if (v200 != 0) {\n        int64_t * v201 = (int64_t *)v200; // 0x414dc8\n        int64_t v202 = *v201; // 0x414dc8\n        free(v201);\n        while (v202 != 0) {\n            // 0x414dc8\n            v201 = (int64_t *)v202;\n            v202 = *v201;\n            free(v201);\n        }\n    }\n    // 0x414dd8\n    *v199 = 0;\n    int64_t * v203 = (int64_t *)(v154 + 32); // 0x414de1\n    *(int32_t *)(v154 + 128) = 15;\n    *(int64_t *)(v154 + 104) = 0;\n    free((int64_t *)*v203);\n    *v203 = 0;\n    function_409740(&v124);\n    if (result == 0) {\n        // 0x414e1b\n        return result;\n    }\n    goto lab_0x414e8e;\n  lab_0x415028:\n    // 0x415028\n    v154 = v57;\n    v156 = v56;\n    goto lab_0x414daf;\n  lab_0x414da5:\n    // 0x414da5\n    free((int64_t *)v96);\n    v154 = v96;\n    v156 = v191;\n    goto lab_0x414daf;\n}\n"
        },
        {
            "funcName": "function_415280",
            "funcStartAddr": "415280",
            "funcEndAddr": "4152e7",
            "decompiledFuncCode": "int64_t function_415280(int64_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    char * v2 = (char *)(v1 + 56); // 0x4152a0\n    *v2 = *v2 & 111 | (char)(g64 / 0x200000) & 16 | -128;\n    int64_t v3; // 0x415280\n    int64_t v4 = function_4144d0(v1, a1, a2, g64, a1, v3); // 0x4152b5\n    if ((int32_t)v4 == 0) {\n        // 0x4152e0\n        return 0;\n    }\n    int64_t v5 = *(int64_t *)((0x100000000 * v4 >> 29) + (int64_t)&g27); // 0x4152c7\n    return (int64_t)dcgettext(NULL, (char *)(v5 + (int64_t)\"Success\"), 5);\n}\n"
        },
        {
            "funcName": "function_4152f0",
            "funcStartAddr": "4152f0",
            "funcEndAddr": "4152ff",
            "decompiledFuncCode": "int64_t function_4152f0(int64_t a1) {\n    int64_t result = g64; // 0x4152f0\n    g64 = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_415300",
            "funcStartAddr": "415300",
            "funcEndAddr": "4153c3",
            "decompiledFuncCode": "int64_t function_415300(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 32); // 0x415306\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(v1 + 248) = 0;\n    int64_t v2 = v1 + 8 & -8; // 0x41532a\n    __asm_rep_stosq_memset((char *)v2, 0, (v1 + 256 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)(a1 + 72); // 0x415343\n    int64_t v4 = *v3; // 0x415343\n    function_40ddb0(a1, v4 + 16, v4 + 24, v1);\n    int64_t v5 = *(int64_t *)(a1 + 80); // 0x415355\n    int64_t v6 = v5; // 0x41535f\n    if (*v3 != v5) {\n        // 0x415361\n        function_40ddb0(a1, v5 + 16, v5 + 24, v1);\n        v6 = *v3;\n    }\n    int64_t v7 = *(int64_t *)(a1 + 88); // 0x415379\n    int64_t v8 = v6; // 0x415381\n    if (v7 != v6) {\n        // 0x415383\n        function_40ddb0(a1, v7 + 16, v7 + 24, v1);\n        v8 = *v3;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 96); // 0x41539b\n    if (v9 != v8) {\n        // 0x4153a5\n        function_40ddb0(a1, v9 + 16, v9 + 24, v1);\n    }\n    char * v10 = (char *)(a1 + 56); // 0x4153b8\n    *v10 = *v10 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4153d0",
            "funcStartAddr": "4153d0",
            "funcEndAddr": "41595b",
            "decompiledFuncCode": "int64_t function_4153d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x4153d0\n    if (a4 < 0 || a4 > a3) {\n        // 0x4154ff\n        return -1;\n    }\n    int64_t v1 = a5 + a4; // 0x4153d5\n    int64_t v2 = a3; // 0x415411\n    if (v1 > a3) {\n        goto lab_0x41543c;\n    } else {\n        // 0x415417\n        v2 = a3;\n        if (a5 > -1 == v1 < a4) {\n            goto lab_0x41543c;\n        } else {\n            if (v1 < 0) {\n                goto lab_0x4156f8;\n            } else {\n                // 0x41542e\n                v2 = v1;\n                if (a5 >= 0 || v1 < a4) {\n                    goto lab_0x41543c;\n                } else {\n                    goto lab_0x4156f8;\n                }\n            }\n        }\n    }\n  lab_0x41543c:;\n    char * v3 = (char *)(a1 + 56); // 0x41543c\n    int64_t v4 = (int64_t)*v3; // 0x41543c\n    int64_t v5 = v4; // 0x415452\n    int64_t v6 = v2; // 0x415452\n    if (v2 > a4) {\n        // 0x415454\n        v5 = v4;\n        v6 = v2;\n        if ((v4 & 8) == 0 == (*(int64_t *)(a1 + 32) != 0)) {\n            // 0x415650\n            function_415300(a1);\n            v5 = (int64_t)*v3;\n            v6 = v2;\n        }\n    }\n    goto lab_0x415463;\n  lab_0x415463:;\n    int64_t size = 16; // 0x415465\n    int64_t v7 = 0; // 0x415465\n    int64_t v8 = 1; // 0x415465\n    int64_t v9; // 0x4153d0\n    if (a7 == 0 || (v5 & 16) != 0) {\n        goto lab_0x415491;\n    } else {\n        uint64_t v10 = *(int64_t *)(a1 + 48); // 0x415477\n        if ((v5 & 6) == 4) {\n            int64_t v11 = *(int64_t *)a7; // 0x415610\n            if (v11 > v10) {\n                // 0x415483\n                v9 = v10 + 1;\n                goto lab_0x41548a;\n            } else {\n                // 0x41561d\n                v9 = v11;\n                size = 16;\n                v7 = 0;\n                v8 = 1;\n                if (v11 >= 0 == (v11 != 0)) {\n                    goto lab_0x41548a;\n                } else {\n                    goto lab_0x415491;\n                }\n            }\n        } else {\n            // 0x415483\n            v9 = v10 + 1;\n            goto lab_0x41548a;\n        }\n    }\n  lab_0x415491:;\n    int64_t * mem = malloc((int32_t)size); // 0x4154a0\n    if (mem == NULL) {\n        // 0x4154ff\n        return -2;\n    }\n    uint64_t v12 = v8;\n    int64_t v13 = (int64_t)mem; // 0x4154a0\n    int64_t result = -1; // 0x4153d0\n    int64_t v14; // 0x4153d0\n    int64_t v15; // 0x4153d0\n    int64_t v16; // 0x4153d0\n    int64_t v17; // 0x4153d0\n    int64_t v18; // 0x4153d0\n    int64_t v19; // 0x4153d0\n    int64_t v20; // 0x4153d0\n    int64_t v21; // 0x4153d0\n    int64_t v22; // 0x4153d0\n    int64_t v23; // 0x4153d0\n    int64_t v24; // 0x4153d0\n    int64_t v25; // 0x4153d0\n    int64_t v26; // 0x4153d0\n    int64_t v27; // 0x4153d0\n    int64_t v28; // 0x4153d0\n    int64_t v29; // 0x4153d0\n    int64_t v30; // 0x4153d0\n    int64_t v31; // 0x4153d0\n    int64_t v32; // 0x4153d0\n    int64_t v33; // 0x4153d0\n    int64_t v34; // 0x4153d0\n    int64_t v35; // 0x4153d0\n    int64_t v36; // 0x4153d0\n    int64_t v37; // 0x4153d0\n    int64_t v38; // 0x4153d0\n    char * v39; // 0x415521\n    switch ((int32_t)v40) {\n        case 0: {\n            // 0x415518\n            v14 = v7;\n            v36 = a2;\n            v26 = a3;\n            v31 = v6;\n            v16 = v6;\n            v21 = a6;\n            if (v14 == 0) {\n                goto lab_0x4155e8;\n            } else {\n                // 0x415521\n                v39 = (char *)(a1 + 56);\n                int64_t v41 = v12 + 1; // 0x415526\n                unsigned char v42 = *v39 / 2 % 4;\n                switch (v42) {\n                    case 0: {\n                        int32_t size2 = 8 * (int32_t)v41; // 0x4156a0\n                        int64_t * mem2 = malloc(size2); // 0x4156a0\n                        int64_t v43 = (int64_t)mem2; // 0x4156a0\n                        *(int64_t *)(v14 + 8) = v43;\n                        v35 = v41;\n                        v25 = a3;\n                        int64_t v44; // 0x4153d0\n                        v30 = v44;\n                        v15 = v44;\n                        v20 = 0;\n                        if (mem2 == NULL) {\n                            goto lab_0x4155cd;\n                        } else {\n                            int64_t * mem3 = malloc(size2); // 0x4156c5\n                            *(int64_t *)(v14 + 16) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x4157ba\n                                free(mem2);\n                                v35 = v41;\n                                v25 = a3;\n                                v30 = v43;\n                                v15 = v44;\n                                v20 = 0;\n                                goto lab_0x4155cd;\n                            } else {\n                                // 0x4156e2\n                                *(int64_t *)v14 = v41;\n                                v34 = v41;\n                                v24 = a3;\n                                v29 = v43;\n                                v19 = 1;\n                                goto lab_0x415557;\n                            }\n                        }\n                    }\n                    case 1: {\n                        int64_t * v45 = (int64_t *)v14; // 0x41573e\n                        v34 = a2;\n                        v24 = a3;\n                        v29 = v6;\n                        v19 = 1;\n                        if (*v45 >= v41) {\n                            goto lab_0x415557;\n                        } else {\n                            int64_t v46 = 8 * v41; // 0x415748\n                            int64_t * v47 = (int64_t *)(v14 + 8); // 0x415750\n                            int32_t v48 = v46; // 0x415767\n                            int64_t * mem4 = realloc((int64_t *)*v47, v48); // 0x415767\n                            v35 = v46;\n                            v25 = 1;\n                            v30 = v41;\n                            v15 = v6;\n                            v20 = 0;\n                            if (mem4 == NULL) {\n                                goto lab_0x4155cd;\n                            } else {\n                                int64_t * v49 = (int64_t *)(v14 + 16); // 0x415779\n                                int64_t * mem5 = realloc((int64_t *)*v49, v48); // 0x415781\n                                if (mem5 == NULL) {\n                                    // 0x4157ca\n                                    free(mem4);\n                                    v35 = v46;\n                                    v25 = 1;\n                                    v30 = v41;\n                                    v15 = v6;\n                                    v20 = 0;\n                                    goto lab_0x4155cd;\n                                } else {\n                                    // 0x415796\n                                    *v47 = (int64_t)mem4;\n                                    *v49 = (int64_t)mem5;\n                                    *v45 = v41;\n                                    v34 = v46;\n                                    v24 = 1;\n                                    v29 = v41;\n                                    v19 = 1;\n                                    goto lab_0x415557;\n                                }\n                            }\n                        }\n                    }\n                    default: {\n                        // 0x41553e\n                        v38 = a2;\n                        v28 = a3;\n                        v33 = v6;\n                        v18 = v6;\n                        v23 = a6;\n                        if (v42 != 2) {\n                            goto lab_0x41580c;\n                        } else {\n                            // 0x415547\n                            v34 = a2;\n                            v24 = a3;\n                            v29 = v6;\n                            v19 = 2;\n                            v37 = a2;\n                            v27 = a3;\n                            v32 = v6;\n                            v17 = v6;\n                            v22 = a6;\n                            if (v12 > *(int64_t *)v14) {\n                                goto lab_0x4157f3;\n                            } else {\n                                goto lab_0x415557;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            goto lab_0x4154f7;\n        }\n        default: {\n            goto lab_0x4154f0;\n        }\n    }\n  lab_0x4156f8:\n    // 0x4156f8\n    v5 = (int64_t)*(char *)(a1 + 56);\n    v6 = 0;\n    goto lab_0x415463;\n  lab_0x4154f0:\n    // 0x4154f0\n    result = -2;\n  lab_0x4154f7:\n    // 0x4154f7\n    free(mem);\n    // 0x4154ff\n    return result;\n  lab_0x4155e8:;\n    int64_t v50 = *mem; // 0x4155ed\n    result = v50;\n    if ((char)a8 == 0) {\n        // 0x4154f7\n        free(mem);\n        // 0x4154ff\n        return result;\n    }\n    if (v50 == a4) {\n        // 0x4154f7\n        free(mem);\n        // 0x4154ff\n        return *(int64_t *)(v13 + 8) - v50;\n    }\n    // 0x4157da\n    __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 445, \"re_search_stub\");\n    v37 = v36;\n    v27 = v26;\n    v32 = v31;\n    v17 = v16;\n    v22 = v21;\n    goto lab_0x4157f3;\n  lab_0x41548a:\n    // 0x41548a\n    size = 16 * v9;\n    v7 = a7;\n    v8 = v9;\n    goto lab_0x415491;\n  lab_0x4157f3:\n    // 0x4157f3\n    __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 506, \"re_copy_regs\");\n    v38 = v37;\n    v28 = v27;\n    v33 = v32;\n    v18 = v17;\n    v23 = v22;\n    goto lab_0x41580c;\n  lab_0x41580c:\n    // 0x41580c\n    __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 504, \"re_copy_regs\");\n    if ((v18 || v28) <= -1) {\n        // 0x4154ff\n        return -2;\n    }\n    int64_t size3 = v18 + 504; // 0x41587c\n    if ((size3 & (v18 ^ -0x8000000000000000)) < 0) {\n        // 0x4154ff\n        return -2;\n    }\n    int64_t * v51 = NULL; // 0x415888\n    int64_t v52 = (int64_t)\"lib/regexec.c\"; // 0x415888\n    if (v18 != 0) {\n        int64_t * mem6 = malloc((int32_t)size3); // 0x4158f2\n        if (mem6 == NULL) {\n            // 0x4154ff\n            return -2;\n        }\n        int64_t v53 = (int64_t)mem6; // 0x4158f2\n        memcpy(mem6, (int64_t *)\"lib/regexec.c\", 504);\n        memcpy((int64_t *)(v53 + 504), (int64_t *)\"re_copy_regs\", (int32_t)v18);\n        v51 = mem6;\n        v52 = v53;\n    }\n    int64_t result2 = function_4153d0((int64_t)\"regs_allocated == REGS_FIXED\", v52, size3, v23, v38, v28, v33, a6 % 256); // 0x4158b3\n    free(v51);\n    // 0x4154ff\n    return result2;\n  lab_0x4155cd:\n    // 0x4155cd\n    *v39 = *v39 & -7 | 2 * (char)v20;\n    v36 = v35;\n    v26 = v25;\n    v31 = v30;\n    v16 = v15;\n    v21 = v20;\n    if (v20 == 0) {\n        goto lab_0x4154f0;\n    } else {\n        goto lab_0x4155e8;\n    }\n  lab_0x415557:;\n    int64_t v54 = v19;\n    int64_t v55 = v29;\n    int64_t v56 = v24;\n    int64_t v57 = v34;\n    int64_t v58 = 0; // 0x41555a\n    int64_t v59 = v6; // 0x41555a\n    if (v12 >= 1) {\n        int64_t v60 = *(int64_t *)(v14 + 8); // 0x415560\n        int64_t v61 = 0; // 0x415577\n        int64_t v62 = 2 * v61; // 0x415580\n        *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n        int64_t v63 = *(int64_t *)(v13 + 8 + v62); // 0x415589\n        *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n        v61 += 8;\n        v58 = v12;\n        v59 = v60;\n        while (v61 != 8 * v12) {\n            // 0x415580\n            v62 = 2 * v61;\n            *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n            v63 = *(int64_t *)(v13 + 8 + v62);\n            *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n            v61 += 8;\n            v58 = v12;\n            v59 = v60;\n        }\n    }\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    int64_t * v66 = (int64_t *)v14; // 0x41559b\n    v35 = v57;\n    v25 = v56;\n    v30 = v55;\n    v15 = v64;\n    v20 = v54;\n    if (*v66 > v65) {\n        int64_t v67 = v65 + 1; // 0x4155b8\n        int64_t v68 = 8 * v65; // 0x4155bc\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n        v35 = v57;\n        v25 = v56;\n        v30 = v55;\n        v15 = v64;\n        v20 = v54;\n        while (*v66 > v67) {\n            int64_t v69 = v67;\n            v67 = v69 + 1;\n            v68 = 8 * v69;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n            v35 = v57;\n            v25 = v56;\n            v30 = v55;\n            v15 = v64;\n            v20 = v54;\n        }\n    }\n    goto lab_0x4155cd;\n}\n"
        },
        {
            "funcName": "function_415960",
            "funcStartAddr": "415960",
            "funcEndAddr": "415a70",
            "decompiledFuncCode": "int64_t function_415960(int64_t a1, int64_t str, uint64_t a3) {\n    // 0x415960\n    *(int64_t *)a1 = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t * mem = malloc(256); // 0x4159a5\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x4159aa\n    *v1 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x415a60\n        return 12;\n    }\n    int64_t v2 = (a3 % 2 == 0 ? 0x10102c6 : 0x3b2fc) | 0x200000 * a3 & 0x400000; // 0x4159c7\n    int64_t v3 = (a3 & 4) != 0 ? v2 & 0x143b2be | 256 : v2;\n    *(int64_t *)(a1 + 40) = 0;\n    char * v4 = (char *)(a1 + 56); // 0x4159e2\n    *v4 = ((a3 & 4) != 0 ? -128 : 0) | 2 * (char)a3 & 16 | *v4 & 111;\n    int64_t v5; // 0x415960\n    int64_t v6 = function_4144d0(a1, str, (int64_t)strlen((char *)str), v3, v5, v5); // 0x415a07\n    int32_t v7 = v6; // 0x415a0e\n    int64_t v8 = 8; // 0x415a11\n    if (v7 != 16) {\n        // 0x415a13\n        v8 = v6 & 0xffffffff;\n        if (v7 == 0) {\n            // 0x415a17\n            function_415300(a1);\n            // 0x415a1f\n            return v8 & 0xffffffff;\n        }\n    }\n    // 0x415a4d\n    free((int64_t *)*v1);\n    *v1 = 0;\n    // 0x415a1f\n    return v8 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_415a70",
            "funcStartAddr": "415a70",
            "funcEndAddr": "415aed",
            "decompiledFuncCode": "int64_t function_415a70(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {\n    int64_t v1 = *(int64_t *)((0x100000000 * a1 >> 29) + (int64_t)&g27); // 0x415a91\n    char * str = dcgettext(NULL, (char *)(v1 + (int64_t)\"Success\"), 5); // 0x415aa2\n    int64_t result = (int64_t)strlen(str) + 1; // 0x415ab2\n    if (a4 == 0) {\n        // 0x415ace\n        return result;\n    }\n    int64_t v2 = result; // 0x415ac1\n    if (result > a4) {\n        // 0x415ae0\n        v2 = a4 - 1;\n        *(char *)(v2 + a3) = 0;\n    }\n    // 0x415ac3\n    memcpy((int64_t *)a3, (int64_t *)str, (int32_t)v2);\n    // 0x415ace\n    return result;\n}\n"
        },
        {
            "funcName": "function_415af0",
            "funcStartAddr": "415af0",
            "funcEndAddr": "415b34",
            "decompiledFuncCode": "int64_t function_415af0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    if (a1 != NULL) {\n        // 0x415afc\n        function_40d0f0(v1);\n    }\n    // 0x415b01\n    *a1 = 0;\n    int64_t * v2 = (int64_t *)(v1 + 32); // 0x415b08\n    *(int64_t *)(v1 + 8) = 0;\n    free((int64_t *)*v2);\n    *v2 = 0;\n    int64_t * v3 = (int64_t *)(v1 + 40); // 0x415b21\n    free((int64_t *)*v3);\n    *v3 = 0;\n    return &g67;\n}\n"
        },
        {
            "funcName": "function_415b40",
            "funcStartAddr": "415b40",
            "funcEndAddr": "415bd6",
            "decompiledFuncCode": "int64_t function_415b40(int64_t a1, int64_t str, int64_t a3, int64_t a4, int64_t a5) {\n    if ((a5 & 0xfffffff8) != 0) {\n        // 0x415bd0\n        return 2;\n    }\n    int64_t v1; // 0x415b40\n    int64_t v2; // 0x415b40\n    int64_t v3; // 0x415b40\n    int64_t v4; // 0x415b40\n    int64_t v5; // 0x415b40\n    int64_t v6; // 0x415b40\n    if ((a5 & 4) != 0) {\n        int64_t v7 = *(int64_t *)(a4 + 8); // 0x415bb3\n        v5 = 0;\n        v1 = a4;\n        v3 = v7;\n        v6 = 0;\n        v2 = a4;\n        v4 = v7;\n        if ((*(char *)(a1 + 56) & 16) != 0) {\n            goto lab_0x415b86;\n        } else {\n            goto lab_0x415bbd;\n        }\n    } else {\n        int64_t len = strlen((char *)str); // 0x415b6d\n        v5 = 0;\n        v1 = 0;\n        v3 = len;\n        v6 = 0;\n        v2 = 0;\n        v4 = len;\n        if ((*(char *)(a1 + 56) & 16) == 0) {\n            goto lab_0x415bbd;\n        } else {\n            goto lab_0x415b86;\n        }\n    }\n  lab_0x415b86:;\n    int64_t v8 = v3;\n    return (int32_t)function_410420(a1, str, v8, v1, v8, v8, v6, v5, a5 & 0xffffffff) != 0;\n  lab_0x415bbd:\n    // 0x415bbd\n    v5 = a4;\n    v1 = v2;\n    v3 = v4;\n    v6 = a3;\n    goto lab_0x415b86;\n}\n"
        },
        {
            "funcName": "function_415be0",
            "funcStartAddr": "415be0",
            "funcEndAddr": "415bf8",
            "decompiledFuncCode": "int64_t function_415be0(int64_t * a1, int64_t a2, int64_t a3, int32_t a4, int64_t * a5) {\n    // 0x415be0\n    return function_4153d0((int64_t)a1, a2, a3, (int64_t)a4, 0, a3, (int64_t)a5, 1);\n}\n"
        },
        {
            "funcName": "function_415c00",
            "funcStartAddr": "415c00",
            "funcEndAddr": "415c15",
            "decompiledFuncCode": "int64_t function_415c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x415c00\n    return function_4153d0(a1, a2, a3, a4, a5, a3, a6, 0);\n}\n"
        },
        {
            "funcName": "function_415c20",
            "funcStartAddr": "415c20",
            "funcEndAddr": "415c3a",
            "decompiledFuncCode": "int64_t function_415c20(int64_t a1, int64_t a2) {\n    // 0x415c20\n    int64_t result; // 0x415c20\n    return result;\n}\n"
        },
        {
            "funcName": "function_415c40",
            "funcStartAddr": "415c40",
            "funcEndAddr": "415c5c",
            "decompiledFuncCode": "int64_t function_415c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x415c40\n    int64_t result; // 0x415c40\n    return result;\n}\n"
        },
        {
            "funcName": "function_415c60",
            "funcStartAddr": "415c60",
            "funcEndAddr": "415c9c",
            "decompiledFuncCode": "int64_t function_415c60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 56);\n    char v2 = *v1 & -7;\n    if (a3 == 0) {\n        // 0x415c80\n        *v1 = v2;\n        *(int64_t *)a2 = 0;\n        *(int64_t *)(a2 + 16) = 0;\n        *(int64_t *)(a2 + 8) = 0;\n        int64_t result; // 0x415c60\n        return result;\n    }\n    unsigned char result2 = v2 | 2;\n    *v1 = result2;\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 8) = a4;\n    *(int64_t *)(a2 + 16) = a5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_415ca0",
            "funcStartAddr": "415ca0",
            "funcEndAddr": "415cfd",
            "decompiledFuncCode": "int64_t function_415ca0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x415ca7\n    int64_t v2; // 0x415ca0\n    int64_t result = function_4162d0(a1, v2); // 0x415cb8\n    if ((v2 & 32) != 0) {\n        // 0x415ce0\n        if ((int32_t)result == 0) {\n            // 0x415ce4\n            *__errno_location() = 0;\n        }\n        // 0x415cda\n        return 0xffffffff;\n    }\n    // 0x415cc1\n    if ((int32_t)result == 0) {\n        // 0x415cda\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x415cc8\n    if (v1 == 0) {\n        // 0x415cca\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x415cda\n    return result2;\n}\n"
        },
        {
            "funcName": "function_415d00",
            "funcStartAddr": "415d00",
            "funcEndAddr": "415d5e",
            "decompiledFuncCode": "int64_t function_415d00(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x415d06\n    if (locale == NULL) {\n        // 0x415d33\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x415d06\n    bool v2; // 0x415d00\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g29; // 0x415d00\n    int64_t v5 = v1; // 0x415d00\n    int64_t v6 = 2; // 0x415d25\n    unsigned char v7 = *(char *)v5; // 0x415d25\n    char v8 = *(char *)v4; // 0x415d25\n    char v9 = v8; // 0x415d25\n    bool v10 = false; // 0x415d25\n    while (v7 == v8) {\n        // 0x415d18\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x415d31\n    int64_t v13 = v1; // 0x415d31\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x415d33\n        return 0;\n    }\n    int64_t v14 = 6; // 0x415d31\n    unsigned char v15 = *(char *)v13; // 0x415d4d\n    char v16 = *(char *)v12; // 0x415d4d\n    char v17 = v16; // 0x415d4d\n    bool v18 = false; // 0x415d4d\n    while (v15 == v16) {\n        // 0x415d40\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_415d60",
            "funcStartAddr": "415d60",
            "funcEndAddr": "4162c2",
            "decompiledFuncCode": "int64_t function_415d60(void) {\n    char * v1 = nl_langinfo(14); // 0x415d76\n    char * v2 = g62; // 0x415d7b\n    char * v3; // 0x415d60\n    int64_t v4; // 0x415d60\n    int64_t v5; // 0x415d60\n    int64_t v6; // 0x415d60\n    int64_t v7; // 0x415d60\n    int32_t size; // 0x415d60\n    int32_t size2; // 0x415d60\n    int32_t len; // 0x415e32\n    int64_t v8; // 0x415e32\n    char * env_val; // 0x415e1d\n    if (v2 == NULL) {\n        // 0x415e18\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x415e85;\n        } else {\n            // 0x415e2a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x415e85;\n            } else {\n                // 0x415e2f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x415e1d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4162b5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x415e85;\n                    } else {\n                        // 0x416229\n                        size2 = len + 14;\n                        goto lab_0x415e4b;\n                    }\n                } else {\n                    goto lab_0x415e4b;\n                }\n            }\n        }\n    } else {\n        // 0x415d60\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x415d9a;\n    }\n  lab_0x4160cc:;\n    // 0x4160cc\n    struct _IO_FILE * stream; // 0x415f0b\n    int32_t v10 = __uflow(stream); // 0x4160cf\n    int64_t v11; // 0x415d60\n    int64_t v12 = v11; // 0x4160d9\n    int64_t v13; // 0x415d60\n    int64_t v14 = v13; // 0x4160d9\n    int32_t v15 = v10; // 0x4160d9\n    int64_t v16; // 0x415d60\n    int64_t v17 = v16; // 0x4160d9\n    int64_t v18 = v11; // 0x4160d9\n    int64_t v19 = v13; // 0x4160d9\n    int64_t v20 = v16; // 0x4160d9\n    if (v10 == -1) {\n        // break -> 0x4160df\n        goto lab_0x4160df;\n    }\n    goto lab_0x415f59;\n  lab_0x415f4e:;\n    // 0x415f4e\n    int64_t v90; // 0x415d60\n    int64_t * v32; // 0x415f40\n    *v32 = v90 + 1;\n    int64_t v89; // 0x415d60\n    v12 = v89;\n    int64_t v91; // 0x415d60\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x415d60\n    v17 = v92;\n    goto lab_0x415f59;\n  lab_0x415f59:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x415d60\n    int32_t v25; // bp-120, 0x415d60\n    int32_t v26; // bp-184, 0x415d60\n    int64_t v27; // 0x415f0b\n    int64_t v28; // 0x415f28\n    int64_t v29; // 0x415f2d\n    int64_t * v30; // 0x415f44\n    switch (c) {\n        case 32: {\n            goto lab_0x415f40;\n        }\n        case 10: {\n            goto lab_0x415f40;\n        }\n        case 9: {\n            goto lab_0x415f40;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x416131\n            int32_t v33; // 0x415d60\n            char v34; // 0x415d60\n            int32_t v35; // 0x41613e\n            if (v31 < *v30) {\n                // 0x416110\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x41613b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x416131\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x416110\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x41613b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x416120\n                v36 = v33;\n            }\n            // 0x41620f\n            if (v36 == -1) {\n                // break -> 0x4160df\n                break;\n            }\n            goto lab_0x415f40;\n        }\n        default: {\n            // 0x415f6f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4160df\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x415f98\n            int64_t v39 = v37 + 4; // 0x415f9a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x415fa6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x415fa8\n            while (v41 == 0) {\n                // 0x415f98\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x415fc6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x415fd2\n            int64_t v45 = v43 + 4; // 0x415fd4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x415fe0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x415fe2\n            while (v47 == 0) {\n                // 0x415fd2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x415fcf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x415ff8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x416008\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x41600c\n            int64_t v52 = v51 + v48; // 0x416015\n            int64_t * mem; // 0x415d60\n            int64_t v53; // 0x415d60\n            int64_t v54; // 0x415d60\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x41614b\n                int64_t v56 = v55 + 3; // 0x416157\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x416031\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x416040\n            if (mem == NULL) {\n                // 0x41626c\n                free((int64_t *)v21);\n                function_4162d0(v27, v53);\n                v24 = (int64_t)&g24;\n                goto lab_0x415ee4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x416058\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x416062\n            uint32_t v62 = (int32_t)v59; // 0x416065\n            int64_t v63; // 0x415d60\n            if (v62 >= 8) {\n                // 0x416174\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x41618e\n                int64_t v66 = v61 - v65; // 0x416192\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x41619d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4161ae\n                    int64_t v70 = v69 & 0xffffffff; // 0x4161ae\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4161ab\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x41623f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x416077\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x41607b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x41608b\n            int64_t v74 = v60 - 1; // 0x41608f\n            uint32_t v75 = (int32_t)v73; // 0x416094\n            int64_t v76; // 0x415d60\n            if (v75 >= 8) {\n                // 0x4161c2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4161cc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4161dc\n                int64_t v80 = v74 - v79; // 0x4161e0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4161eb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4161fb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4161f9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x416256\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41625e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4160a6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4160aa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4162a3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4160be\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x415f4e;\n            } else {\n                goto lab_0x4160cc;\n            }\n        }\n    }\n  lab_0x415f40:;\n    int64_t v93 = v23; // 0x415d60\n    int64_t v94 = v22; // 0x415d60\n    int64_t v95 = v21; // 0x415d60\n    goto lab_0x415f40_2;\n  lab_0x415e85:;\n    int64_t * mem3 = malloc(size); // 0x415e85\n    int64_t v97 = (int64_t)&g24; // 0x415e90\n    int64_t v98; // 0x415d60\n    int64_t path; // 0x415d60\n    if (mem3 == NULL) {\n        goto lab_0x415e62;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x415e85\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x415ea6;\n    }\n  lab_0x415d9a:;\n    int64_t str = v1 == NULL ? (int64_t)&g24 : (int64_t)v1; // 0x415d8d\n    char v100 = *v3; // 0x415d9a\n    int64_t v101; // 0x415d60\n    if (v100 == 0) {\n        // 0x415df4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x415d60\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x415d60\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x415de0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x415de7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x415db0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x415dbd\n        char v107 = *(char *)v106; // 0x415dc2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x415df4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x415dcb\n    v104 = v103 + 1;\n  lab_0x415de7:\n    // 0x415df4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x415e62:;\n    char * v108 = (char *)v97;\n    g62 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x415d9a;\n  lab_0x415ea6:;\n    int64_t v109 = v98 + path; // 0x415ea6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x415ed2\n    v24 = (int64_t)&g24;\n    if (fd >= 0) {\n        // 0x415f01\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x416232\n            close(fd);\n            v24 = (int64_t)&g24;\n        } else {\n            // 0x415f25\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x415f40_2:;\n                uint64_t v96 = *v32; // 0x415f40\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4160cc;\n                } else {\n                    goto lab_0x415f4e;\n                }\n            }\n          lab_0x4160df:\n            // 0x4160df\n            function_4162d0(v27, v19);\n            v24 = (int64_t)&g24;\n            if (v18 != 0) {\n                // 0x4160fe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x415ee4;\n  lab_0x415e4b:;\n    int64_t * mem4 = malloc(size2); // 0x415e4b\n    v97 = (int64_t)&g24;\n    if (mem4 != NULL) {\n        // 0x415ef1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x415ea6;\n    } else {\n        goto lab_0x415e62;\n    }\n  lab_0x415ee4:\n    // 0x415ee4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x415e62;\n}\n"
        },
        {
            "funcName": "function_4162d0",
            "funcStartAddr": "4162d0",
            "funcEndAddr": "41634b",
            "decompiledFuncCode": "int64_t function_4162d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4162d7\n    if (fileno(stream) < 0) {\n        // 0x416337\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4162ea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x41631b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x416337\n            return fclose(stream);\n        }\n    }\n    // 0x4162ec\n    if ((int32_t)function_416350(a1, v1) == 0) {\n        // 0x416337\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4162f8\n    int32_t v3 = *v2; // 0x416300\n    int64_t result = fclose(stream); // 0x41630e\n    if (v3 != 0) {\n        // 0x416340\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x416310\n    return result;\n}\n"
        },
        {
            "funcName": "function_416350",
            "funcStartAddr": "416350",
            "funcEndAddr": "416390",
            "decompiledFuncCode": "int64_t function_416350(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x41636a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x41636a\n        return fflush(stream);\n    }\n    // 0x416378\n    function_416390(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_416390",
            "funcStartAddr": "416390",
            "funcEndAddr": "4163e7",
            "decompiledFuncCode": "int64_t function_416390(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x416390\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x41639a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4163cb\n    int64_t result = -1; // 0x4163d4\n    if (v1 != -1) {\n        // 0x4163d6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4163e2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4163f0",
            "funcStartAddr": "4163f0",
            "funcEndAddr": "41644d",
            "decompiledFuncCode": "int64_t function_4163f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4163f0\n    return function_401720();\n}\n"
        },
        {
            "funcName": "function_416450",
            "funcStartAddr": "416450",
            "funcEndAddr": "416451",
            "decompiledFuncCode": "int64_t function_416450(void) {\n    // 0x416450\n    int64_t result; // 0x416450\n    return result;\n}\n"
        },
        {
            "funcName": "function_416460",
            "funcStartAddr": "416460",
            "funcEndAddr": "416478",
            "decompiledFuncCode": "int64_t function_416460(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x416460\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g34);\n}\n"
        },
        {
            "funcName": "function_416478",
            "funcStartAddr": "416478",
            "funcEndAddr": "416498",
            "decompiledFuncCode": "int64_t function_416478(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g30; // 0x416482\n    while (*(int64_t *)v1 != -1) {\n        // 0x416483\n        v1 -= 8;\n    }\n    // 0x416494\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_expr.elf"
}