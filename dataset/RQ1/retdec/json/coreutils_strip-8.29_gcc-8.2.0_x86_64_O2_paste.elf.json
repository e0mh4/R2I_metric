{
    "funcInfo": [
        {
            "funcName": "function_401720",
            "funcStartAddr": "401720",
            "funcEndAddr": "401725",
            "decompiledFuncCode": "int64_t function_401720(void) {\n    // 0x401720\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401725",
            "funcStartAddr": "401725",
            "funcEndAddr": "40172a",
            "decompiledFuncCode": "int64_t function_401725(void) {\n    // 0x401725\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40172a",
            "funcStartAddr": "40172a",
            "funcEndAddr": "40172f",
            "decompiledFuncCode": "int64_t function_40172a(void) {\n    // 0x40172a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40172f",
            "funcStartAddr": "40172f",
            "funcEndAddr": "401734",
            "decompiledFuncCode": "int64_t function_40172f(void) {\n    // 0x40172f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401734",
            "funcStartAddr": "401734",
            "funcEndAddr": "401739",
            "decompiledFuncCode": "int64_t function_401734(void) {\n    // 0x401734\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401739",
            "funcStartAddr": "401739",
            "funcEndAddr": "40173e",
            "decompiledFuncCode": "int64_t function_401739(void) {\n    // 0x401739\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401740",
            "funcStartAddr": "401740",
            "funcEndAddr": "401a08",
            "decompiledFuncCode": "int64_t function_401740(int64_t a1, int64_t a2) {\n    // 0x401740\n    function_402860(a2);\n    setlocale(LC_ALL, (char *)&g3);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401740\n    function_4062e0(0x402780, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    g38 = 0;\n    g37 = 0;\n    int64_t v2 = (int64_t)&g2; // 0x40179c\n    int64_t v3; // 0x401740\n    while (true) {\n        // 0x4017a3\n        v3 = v2;\n        while (true) {\n          lab_0x4017a3:;\n            uint32_t v4 = (int32_t)function_405b40(a1 & 0xffffffff, a2, \"d:sz\", &g4, 0, v1);\n            switch (v4) {\n                case -1: {\n                    goto lab_0x401865;\n                }\n                case 100: {\n                    goto lab_0x401850;\n                }\n                default: {\n                    if (v4 <= 100) {\n                        if (v4 == -131) {\n                            // 0x4017e7\n                            function_404900((int64_t)g29, \"paste\", \"GNU coreutils\", (int64_t)g18, \"David M. Ihnat\", \"David MacKenzie\");\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v4 == -130) {\n                            // 0x401840\n                            function_4023e0(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x4019fe;\n                    }\n                    if (v4 != 115) {\n                        if (v4 != 122) {\n                            // 0x4019fe\n                            function_4023e0(1);\n                            // UNREACHABLE\n                        }\n                        // 0x401829\n                        *(char *)&g17 = 0;\n                    } else {\n                        // 0x4017d3\n                        g37 = 1;\n                    }\n                    goto lab_0x4017a3;\n                }\n            }\n        }\n      lab_0x401850:;\n        char * v5 = g51; // 0x401850\n        v2 = *v5 == 0 ? (int64_t)\"\\\\0\" : (int64_t)v5;\n    }\n  lab_0x401865:;\n    int32_t v6 = *(int32_t *)0x60927c; // 0x401865\n    if (v6 == (int32_t)a1) {\n        // 0x401870\n        *(int64_t *)(8 * (int64_t)v6 + a2) = (int64_t)\"-\";\n    }\n    int64_t v7 = function_404c70(v3); // 0x401880\n    g36 = v7;\n    char v8 = *(char *)v3; // 0x4018a2\n    char v9 = v8; // 0x4018a7\n    int64_t v10 = a2; // 0x4018a7\n    int64_t v11 = v3; // 0x4018a7\n    int64_t v12 = v7; // 0x4018a7\n    int64_t v13 = v7; // 0x4018a7\n    int64_t v14 = v7; // 0x4018a7\n    int64_t v15 = a2; // 0x4018a7\n    int64_t v16; // 0x401740\n    int64_t v17; // 0x401740\n    int64_t v18; // 0x401740\n    int64_t v19; // 0x401740\n    int64_t v20; // 0x401740\n    int64_t v21; // 0x401740\n    int64_t v22; // 0x401740\n    int64_t v23; // 0x401740\n    int64_t v24; // 0x401740\n    int64_t v25; // 0x401740\n    int64_t v26; // 0x401740\n    int64_t v27; // 0x401740\n    int64_t v28; // 0x401740\n    int64_t v29; // 0x401740\n    int64_t v30; // 0x401740\n    int64_t v31; // 0x40189e\n    if (v8 != 0) {\n        while (true) {\n          lab_0x4018ad:;\n            int64_t v32 = v12;\n            int64_t v33 = v11;\n            int64_t v34 = v10;\n            char v35 = v9;\n            if (v35 != 92) {\n                // 0x401898\n                *(char *)v32 = v35;\n                v16 = v32;\n                v20 = v34;\n                v30 = v33 + 1;\n                goto lab_0x40189e;\n            } else {\n                char v36 = *(char *)(v33 + 1); // 0x4018b2\n                if (v36 == 102) {\n                    // 0x4019a6\n                    *(char *)v32 = 12;\n                    v17 = v32;\n                    v25 = v33;\n                    v22 = v34;\n                    goto lab_0x4018e1;\n                } else {\n                    int64_t v37 = v36; // 0x4018b2\n                    v18 = v32;\n                    v26 = v33;\n                    v28 = v37;\n                    v23 = v34;\n                    if (v36 > 102) {\n                        goto lab_0x40192d;\n                    } else {\n                        if (v36 == 48) {\n                            // 0x4019cd\n                            *(char *)v32 = 0;\n                            v17 = v32;\n                            v25 = v33;\n                            v22 = v34;\n                            goto lab_0x4018e1;\n                        } else {\n                            if (v36 > 48) {\n                                if (v36 == 92) {\n                                    // 0x4019ae\n                                    *(char *)v32 = 92;\n                                    v17 = v32;\n                                    v25 = v33;\n                                    v22 = v34;\n                                    goto lab_0x4018e1;\n                                } else {\n                                    // 0x4018d5\n                                    v19 = v32;\n                                    v27 = v33;\n                                    v29 = v37;\n                                    v24 = v34;\n                                    if (v36 != 98) {\n                                        goto lab_0x4019b6;\n                                    } else {\n                                        // 0x4018de\n                                        *(char *)v32 = 8;\n                                        v17 = v32;\n                                        v25 = v33;\n                                        v22 = v34;\n                                        goto lab_0x4018e1;\n                                    }\n                                }\n                            } else {\n                                // 0x4018e7\n                                v19 = v32;\n                                v27 = v33;\n                                v29 = v37;\n                                v24 = v34;\n                                if (v36 != 0) {\n                                    goto lab_0x4019b6;\n                                } else {\n                                    // 0x4018ef\n                                    g35 = v32;\n                                    int64_t v38 = function_404300(0, 6, v3); // 0x401900\n                                    char * format = dcgettext(NULL, \"delimiter list ends with an unescaped backslash: %s\", 5); // 0x401914\n                                    error(1, (int32_t)\"delimiter list ends with an unescaped backslash: %s\" ^ (int32_t)\"delimiter list ends with an unescaped backslash: %s\", format);\n                                    v18 = &g53;\n                                    v26 = v38;\n                                    v28 = (int64_t)format;\n                                    v23 = v38;\n                                    goto lab_0x40192d;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n      lab_0x4018a2:\n        // 0x4018a2\n        v13 = g36;\n        v14 = v31;\n        v15 = v21;\n    }\n    // 0x401955\n    g35 = v14;\n    free((int64_t *)v13);\n    if (g38 == 0 || (int32_t)function_404cd0((int64_t)g30, 8 * (int64_t)g27 + v15) != -1) {\n        // 0x401998\n        return g37 == 0 ? 113 : 33;\n    }\n    // 0x4019e6\n    error(1, *__errno_location(), \"-\");\n  lab_0x4019fe:\n    // 0x4019fe\n    function_4023e0(1);\n    // UNREACHABLE\n  lab_0x40189e:\n    // 0x40189e\n    v21 = v20;\n    v31 = v16 + 1;\n    char v39 = *(char *)v30; // 0x4018a2\n    v9 = v39;\n    v10 = v21;\n    v11 = v30;\n    v12 = v31;\n    if (v39 == 0) {\n        // break -> 0x4018a2\n        goto lab_0x4018a2;\n    }\n    goto lab_0x4018ad;\n  lab_0x4018e1:\n    // 0x4018e1\n    v16 = v17;\n    v20 = v22;\n    v30 = v25 + 2;\n    goto lab_0x40189e;\n  lab_0x40192d:;\n    int64_t v40 = v23;\n    int64_t v41 = v28;\n    int64_t v42 = v26;\n    int64_t v43 = v18;\n    char v44 = v41; // 0x40192d\n    if (v44 == 114) {\n        // 0x4019bd\n        *(char *)v43 = 13;\n        v17 = v43;\n        v25 = v42;\n        v22 = v40;\n        goto lab_0x4018e1;\n    } else {\n        if (v44 > 114) {\n            if (v44 == 116) {\n                // 0x4019c5\n                *(char *)v43 = 9;\n                v17 = v43;\n                v25 = v42;\n                v22 = v40;\n                goto lab_0x4018e1;\n            } else {\n                // 0x401941\n                v19 = v43;\n                v27 = v42;\n                v29 = v41;\n                v24 = v40;\n                if (v44 != 118) {\n                    goto lab_0x4019b6;\n                } else {\n                    // 0x401946\n                    *(char *)v43 = 11;\n                    v17 = v43;\n                    v25 = v42;\n                    v22 = v40;\n                    goto lab_0x4018e1;\n                }\n            }\n        } else {\n            // 0x40194b\n            v19 = v43;\n            v27 = v42;\n            v29 = v41;\n            v24 = v40;\n            if (v44 != 110) {\n                goto lab_0x4019b6;\n            } else {\n                // 0x401950\n                *(char *)v43 = 10;\n                v17 = v43;\n                v25 = v42;\n                v22 = v40;\n                goto lab_0x4018e1;\n            }\n        }\n    }\n  lab_0x4019b6:\n    // 0x4019b6\n    *(char *)v19 = (char)v29;\n    v17 = v19;\n    v25 = v27;\n    v22 = v24;\n    goto lab_0x4018e1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a10",
            "funcEndAddr": "401a3b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a10\n    int64_t v1; // 0x401a10\n    __libc_start_main(0x401740, (int32_t)a4, (char **)&v1, (void (*)())0x406270, (void (*)())0x4062d0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a3b",
            "funcStartAddr": "401a3b",
            "funcEndAddr": "401a5a",
            "decompiledFuncCode": "int64_t function_401a3b(void) {\n    // 0x401a3b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401a5a",
            "funcStartAddr": "401a5a",
            "funcEndAddr": "401a91",
            "decompiledFuncCode": "int64_t function_401a5a(void) {\n    // 0x401a5a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401a91",
            "funcStartAddr": "401a91",
            "funcEndAddr": "401ae8",
            "decompiledFuncCode": "int64_t function_401a91(void) {\n    // 0x401a91\n    if (g33 != 0) {\n        // 0x401ae7\n        int64_t result; // 0x401a91\n        return result;\n    }\n    int64_t v1 = g34; // 0x401ac4\n    int64_t result2; // 0x401ad6\n    if (g34 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401ad6\n        result2 = function_401a3b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401ac6\n        v1++;\n    }\n    // 0x401aba\n    g34 = v1;\n    // 0x401ad6\n    result2 = function_401a3b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ae8",
            "funcStartAddr": "401ae8",
            "funcEndAddr": "401aed",
            "decompiledFuncCode": "int64_t function_401ae8(void) {\n    // 0x401ae8\n    return function_401a5a();\n}\n"
        },
        {
            "funcName": "function_401af0",
            "funcStartAddr": "401af0",
            "funcEndAddr": "401e67",
            "decompiledFuncCode": "int64_t function_401af0(int64_t a1) {\n    char * format = dcgettext(NULL, \"write error\", 5); // 0x401afd\n    uint32_t err_num = *__errno_location(); // 0x401b12\n    error(1, err_num, format);\n    int32_t * err_num2 = __errno_location(); // 0x401b3d\n    bool v1; // 0x401af0\n    int64_t v2 = v1 ? -1 : 1; // 0x401b61\n    int64_t * v3 = (int64_t *)(int64_t)err_num; // 0x401b50\n    int64_t file_path = *v3; // 0x401b50\n    int64_t v4 = (int64_t)\"-\"; // 0x401af0\n    int64_t v5 = file_path; // 0x401af0\n    int64_t v6 = 2; // 0x401b61\n    unsigned char v7 = *(char *)v5; // 0x401b61\n    char v8 = *(char *)v4; // 0x401b61\n    char v9 = v8; // 0x401b61\n    bool v10 = false; // 0x401b61\n    while (v7 == v8) {\n        v6--;\n        v4 += v2;\n        v5 += v2;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t stream; // 0x401da8\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x401da8\n        if (file == NULL) {\n            goto lab_0x401cd2;\n        } else {\n            // 0x401db9\n            stream = (int64_t)file;\n            function_402830(stream, 2, (int64_t)format);\n            goto lab_0x401b86;\n        }\n    } else {\n        // 0x401b78\n        g38 = 1;\n        stream = (int64_t)g30;\n        goto lab_0x401b86;\n    }\n  lab_0x401cd2:\n    // 0x401cd2\n    error(0, *err_num2, \"%s\", (char *)function_404300(0, 3, *v3));\n    // 0x401c86\n    return 0;\n  lab_0x401b86:;\n    int64_t * v12 = (int64_t *)(stream + 8); // 0x401b86\n    uint64_t v13 = *v12; // 0x401b86\n    int64_t * v14 = (int64_t *)(stream + 16); // 0x401b8a\n    int64_t v15 = *v14; // 0x401b8a\n    int64_t v16; // 0x401af0\n    int64_t v17; // 0x401af0\n    int64_t v18; // 0x401af0\n    int64_t v19; // 0x401af0\n    int64_t v20; // 0x401af0\n    char v21; // 0x401af0\n    int64_t v22; // 0x401af0\n    int64_t v23; // 0x401af0\n    if (v13 >= v15) {\n        uint32_t v24 = __uflow((struct _IO_FILE *)stream); // 0x401c23\n        if (v24 != -1) {\n            // 0x401e5a\n            v20 = *v12;\n            v22 = *v14;\n            v16 = g36;\n            v18 = v24;\n            goto lab_0x401bdb;\n        } else {\n            // 0x401c3c\n            v21 = *(char *)&g17;\n            v23 = v15;\n            v19 = (int64_t)*err_num2;\n            v17 = g36;\n            goto lab_0x401c43;\n        }\n    } else {\n        int64_t v25 = v13 + 1; // 0x401b9e\n        *v12 = v25;\n        v20 = v25;\n        v22 = v15;\n        v16 = g36;\n        v18 = (int64_t)*(char *)v13;\n        goto lab_0x401bdb;\n    }\n  lab_0x401bdb:;\n    uint64_t v26 = v18;\n    int64_t v27 = v16;\n    int64_t v28 = v22;\n    uint64_t v29 = v20;\n    int64_t v30; // 0x401af0\n    int64_t v31; // 0x401af0\n    int64_t v32; // 0x401af0\n    int64_t v33; // 0x401af0\n    int64_t v34; // 0x401af0\n    int64_t v35; // 0x401d27\n    if (v28 > v29) {\n        // 0x401be4\n        *v12 = v29 + 1;\n        v31 = (int64_t)*(char *)v29;\n        goto lab_0x401bf0;\n    } else {\n        uint32_t v36 = __uflow((struct _IO_FILE *)stream); // 0x401d0b\n        v31 = v36;\n        if (v36 != -1) {\n            goto lab_0x401bf0;\n        } else {\n            int64_t v37 = (int64_t)g29; // 0x401d20\n            v35 = (int64_t)*err_num2;\n            int64_t * v38 = (int64_t *)(v37 + 40); // 0x401d2a\n            uint64_t v39 = *v38; // 0x401d2a\n            if (v39 >= *(int64_t *)(v37 + 48)) {\n                int64_t v40 = v26 % 256; // 0x401e30\n                int32_t v41 = __overflow(g29, (int32_t)v40); // 0x401e39\n                v34 = v40;\n                v33 = v37;\n                v32 = v35;\n                v30 = v27;\n                if (v41 >= 0) {\n                    goto lab_0x401d43;\n                } else {\n                    goto lab_0x401deb;\n                }\n            } else {\n                // 0x401d38\n                *v38 = v39 + 1;\n                *(char *)v39 = (char)v26;\n                v34 = v28;\n                goto lab_0x401d43;\n            }\n        }\n    }\n  lab_0x401c43:;\n    int64_t v42 = (int64_t)g29; // 0x401c43\n    int64_t * v43 = (int64_t *)(v42 + 40); // 0x401c4a\n    uint64_t v44 = *v43; // 0x401c4a\n    int64_t v45; // 0x401af0\n    if (v44 >= *(int64_t *)(v42 + 48)) {\n        int32_t v46 = __overflow(g29, (int32_t)v21); // 0x401e18\n        v45 = v21;\n        v33 = v42;\n        v32 = v19;\n        v30 = v17;\n        if (v46 >= 0) {\n            goto lab_0x401c62;\n        } else {\n            goto lab_0x401deb;\n        }\n    } else {\n        // 0x401c58\n        *v43 = v44 + 1;\n        *(char *)v44 = v21;\n        v45 = v23;\n        goto lab_0x401c62;\n    }\n  lab_0x401bf0:;\n    int64_t v47 = v31;\n    uint32_t v48 = (int32_t)v26; // 0x401bf7\n    int64_t v49; // 0x401af0\n    int64_t v50; // 0x401af0\n    int64_t v51; // 0x401af0\n    int64_t v52; // 0x401af0\n    int64_t v53; // 0x401af0\n    int64_t v54; // 0x401af0\n    if ((int32_t)*(char *)&g17 == v48) {\n        unsigned char v55 = *(char *)v27; // 0x401bb0\n        if (v55 != 0) {\n            int64_t v56 = (int64_t)g29; // 0x401ca0\n            int64_t * v57 = (int64_t *)(v56 + 40); // 0x401ca7\n            uint64_t v58 = *v57; // 0x401ca7\n            v53 = v55;\n            v54 = v56;\n            v52 = v47;\n            v50 = v27;\n            if (v58 >= *(int64_t *)(v56 + 48)) {\n                goto lab_0x401df0;\n            } else {\n                // 0x401cb5\n                *v57 = v58 + 1;\n                *(char *)v58 = v55;\n                goto lab_0x401bbd;\n            }\n        } else {\n            goto lab_0x401bbd;\n        }\n    } else {\n        int64_t v59 = (int64_t)g29; // 0x401bfc\n        int64_t * v60 = (int64_t *)(v59 + 40); // 0x401c03\n        uint64_t v61 = *v60; // 0x401c03\n        if (v61 >= *(int64_t *)(v59 + 48)) {\n            // 0x401dd0\n            v51 = v47;\n            v49 = v27;\n            v33 = v59;\n            v32 = v47;\n            v30 = v27;\n            if (__overflow(g29, v48 % 256) >= 0) {\n                goto lab_0x401bd0;\n            } else {\n                goto lab_0x401deb;\n            }\n        } else {\n            // 0x401c11\n            *v60 = v61 + 1;\n            *(char *)v61 = (char)v26;\n            v51 = v47;\n            v49 = v27;\n            goto lab_0x401bd0;\n        }\n    }\n  lab_0x401c62:;\n    char result = 1; // 0x401c65\n    int64_t v62 = v45; // 0x401c65\n    int64_t v63 = v19; // 0x401c65\n    if ((*(char *)stream & 32) != 0) {\n        goto lab_0x401d5e;\n    } else {\n        goto lab_0x401c6b;\n    }\n  lab_0x401deb:\n    // 0x401deb\n    v53 = function_401af0(v33);\n    v54 = v33;\n    v52 = v32;\n    v50 = v30;\n    goto lab_0x401df0;\n  lab_0x401d5e:;\n    uint32_t err_num3 = 0x1000000 * (int32_t)v63 >> 24; // 0x401d73\n    error(0, err_num3, \"%s\", (char *)function_404300(0, 3, *v3));\n    result = 0;\n    v62 = err_num3;\n    goto lab_0x401c6b;\n  lab_0x401c6b:\n    // 0x401c6b\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x401c73\n        clearerr_unlocked((struct _IO_FILE *)stream);\n        // 0x401c86\n        return result;\n    }\n    // 0x401cc8\n    if ((int32_t)function_404cd0(stream, v62) != -1) {\n        // 0x401c86\n        return result;\n    }\n    goto lab_0x401cd2;\n  lab_0x401df0:;\n    int32_t v64 = __overflow((struct _IO_FILE *)v54, (int32_t)v53 % 256); // 0x401df8\n    v33 = v54;\n    v32 = v52 & 0xffffffff;\n    v30 = v50;\n    if (v64 >= 0) {\n        goto lab_0x401bbd;\n    } else {\n        goto lab_0x401deb;\n    }\n  lab_0x401bbd:;\n    int64_t v65 = v27 + 1; // 0x401bbd\n    v51 = v47;\n    v49 = g35 == v65 ? g36 : v65;\n    goto lab_0x401bd0;\n  lab_0x401d43:;\n    unsigned char v66 = *(char *)&g17; // 0x401d43\n    v21 = v66;\n    v23 = v34;\n    v19 = v35;\n    v17 = v27;\n    if ((int32_t)v66 != (int32_t)v26) {\n        goto lab_0x401c43;\n    } else {\n        // 0x401d55\n        result = 1;\n        v62 = v34;\n        v63 = v35;\n        if ((*(char *)stream & 32) == 0) {\n            goto lab_0x401c6b;\n        } else {\n            goto lab_0x401d5e;\n        }\n    }\n  lab_0x401bd0:\n    // 0x401bd0\n    v20 = *v12;\n    v22 = *v14;\n    v16 = v49;\n    v18 = v51 & 0xffffffff;\n    goto lab_0x401bdb;\n}\n"
        },
        {
            "funcName": "function_401e70",
            "funcStartAddr": "401e70",
            "funcEndAddr": "4023db",
            "decompiledFuncCode": "int64_t function_401e70(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 + 2; // 0x401e7d\n    int64_t v2 = function_404a40(v1); // 0x401e8a\n    uint64_t v3 = a1 + 1; // 0x401e94\n    int64_t v4 = 8 * v3; // 0x401ea2\n    if (v4 < 0 || v3 >= 0x2000000000000000) {\n        // 0x4023d6\n        function_404c90(v1);\n        // UNREACHABLE\n    }\n    int64_t v5 = function_404a40(v4); // 0x401ebb\n    int64_t * v6; // 0x401e70\n    int64_t * v7; // 0x401e70\n    int64_t v8; // 0x401e70\n    int64_t v9; // 0x401e70\n    int64_t v10; // 0x401e70\n    int64_t v11; // 0x401e70\n    int64_t v12; // 0x401e70\n    int64_t v13; // 0x401e70\n    int64_t v14; // 0x401e70\n    int64_t v15; // 0x401e70\n    int64_t v16; // 0x401e70\n    int64_t v17; // 0x401e70\n    int64_t v18; // 0x401e70\n    int64_t v19; // 0x401e70\n    int64_t v20; // 0x401e70\n    int64_t v21; // 0x401e70\n    int64_t v22; // 0x401e70\n    int64_t v23; // 0x401e70\n    char v24; // 0x401e70\n    char v25; // 0x401e70\n    int32_t v26; // 0x401e70\n    int32_t v27; // 0x401e70\n    int32_t v28; // 0x401e70\n    int32_t v29; // 0x401e70\n    int64_t * v30; // 0x401e70\n    int64_t * data; // 0x401e70\n    int64_t v31; // 0x401e70\n    if (a1 == 0) {\n        // 0x401eb8\n        v7 = (int64_t *)v2;\n        v6 = (int64_t *)v5;\n        v27 = 1;\n    } else {\n        // 0x401f0c\n        bool v32; // 0x401e70\n        int64_t v33 = v32 ? -1 : 1; // 0x401f1b\n        int32_t v34 = 0;\n        int64_t v35 = 0;\n        int64_t v36 = a2;\n        int64_t * v37 = (int64_t *)v36;\n        int64_t file_path = *v37; // 0x401f0c\n        int64_t v38 = 2; // 0x401f1b\n        int64_t v39 = (int64_t)\"-\";\n        unsigned char v40 = *(char *)file_path; // 0x401f1b\n        char v41 = *(char *)v39; // 0x401f1b\n        int64_t v42 = file_path + v33; // 0x401f1b\n        char v43 = v41; // 0x401f1b\n        bool v44 = false; // 0x401f1b\n        int64_t v45; // 0x401e70\n        int64_t v46; // 0x401e70\n        while (v40 == v41) {\n            v38--;\n            v45 = v39 + v33;\n            v46 = v42;\n            v43 = v40;\n            v44 = true;\n            if (v38 == 0) {\n                // break -> \n                break;\n            }\n            v39 = v45;\n            v40 = *(char *)v46;\n            v41 = *(char *)v39;\n            v42 = v46 + v33;\n            v43 = v41;\n            v44 = false;\n        }\n        int64_t v47; // 0x401e70\n        int64_t v48; // 0x401e70\n        int32_t v49; // 0x401e70\n        int64_t v50; // 0x401efb\n        int64_t v51; // 0x401f03\n        while ((v40 >= v43 && !v44) == v40 < v43) {\n            // 0x401ee8\n            g38 = 1;\n            v50 = v36 + 8;\n            *(int64_t *)(8 * v35 + v5) = (int64_t)g30;\n            v51 = v35 + 1;\n            v49 = v34;\n            v48 = v42;\n            v47 = v50;\n            v13 = a1;\n            if (v51 == a1) {\n                // break (via goto) -> 0x401f79\n                goto lab_0x401f79;\n            }\n            v35 = v51;\n            v36 = v50;\n            v37 = (int64_t *)v36;\n            file_path = *v37;\n            v38 = 2;\n            v39 = (int64_t)\"-\";\n            v40 = *(char *)file_path;\n            v41 = *(char *)v39;\n            v42 = file_path + v33;\n            v43 = v41;\n            v44 = false;\n            while (v40 == v41) {\n                v38--;\n                v45 = v39 + v33;\n                v46 = v42;\n                v43 = v40;\n                v44 = true;\n                if (v38 == 0) {\n                    // break -> \n                    break;\n                }\n                v39 = v45;\n                v40 = *(char *)v46;\n                v41 = *(char *)v39;\n                v42 = v46 + v33;\n                v43 = v41;\n                v44 = false;\n            }\n        }\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x401f2e\n        int64_t v52 = (int64_t)file; // 0x401f2e\n        *(int64_t *)(8 * v35 + v5) = v52;\n        int64_t * v53 = v37; // 0x401f42\n        if (file == NULL) {\n            goto lab_0x4023a8;\n        }\n        int64_t v54 = v35 + 1; // 0x401f63\n        int64_t v55 = v36 + 8; // 0x401f67\n        int32_t v56 = fileno(file) == 0 ? 1 : v34; // 0x401f6b\n        function_402830(v52, 2, file_path);\n        v49 = v56;\n        v48 = 2;\n        v47 = v55;\n        v13 = v54;\n        while (v54 != a1) {\n            // 0x401f0c\n            v34 = v56;\n            v35 = v54;\n            v36 = v55;\n            v37 = (int64_t *)v36;\n            file_path = *v37;\n            v38 = 2;\n            v39 = (int64_t)\"-\";\n            v40 = *(char *)file_path;\n            v41 = *(char *)v39;\n            v42 = file_path + v33;\n            v43 = v41;\n            v44 = false;\n            while (v40 == v41) {\n                v38--;\n                v45 = v39 + v33;\n                v46 = v42;\n                v43 = v40;\n                v44 = true;\n                if (v38 == 0) {\n                    // break -> \n                    break;\n                }\n                v39 = v45;\n                v40 = *(char *)v46;\n                v41 = *(char *)v39;\n                v42 = v46 + v33;\n                v43 = v41;\n                v44 = false;\n            }\n            while ((v40 >= v43 && !v44) == v40 < v43) {\n                // 0x401ee8\n                g38 = 1;\n                v50 = v36 + 8;\n                *(int64_t *)(8 * v35 + v5) = (int64_t)g30;\n                v51 = v35 + 1;\n                v49 = v34;\n                v48 = v42;\n                v47 = v50;\n                v13 = a1;\n                if (v51 == a1) {\n                    // break (via goto) -> 0x401f79\n                    goto lab_0x401f79;\n                }\n                v35 = v51;\n                v36 = v50;\n                v37 = (int64_t *)v36;\n                file_path = *v37;\n                v38 = 2;\n                v39 = (int64_t)\"-\";\n                v40 = *(char *)file_path;\n                v41 = *(char *)v39;\n                v42 = file_path + v33;\n                v43 = v41;\n                v44 = false;\n                while (v40 == v41) {\n                    v38--;\n                    v45 = v39 + v33;\n                    v46 = v42;\n                    v43 = v40;\n                    v44 = true;\n                    if (v38 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v39 = v45;\n                    v40 = *(char *)v46;\n                    v41 = *(char *)v39;\n                    v42 = v46 + v33;\n                    v43 = v41;\n                    v44 = false;\n                }\n            }\n            // 0x401f26\n            file = fopen((char *)file_path, \"r\");\n            v52 = (int64_t)file;\n            *(int64_t *)(8 * v35 + v5) = v52;\n            v53 = v37;\n            if (file == NULL) {\n                goto lab_0x4023a8;\n            }\n            // 0x401f48\n            v54 = v35 + 1;\n            v55 = v36 + 8;\n            v56 = fileno(file) == 0 ? 1 : v34;\n            function_402830(v52, 2, file_path);\n            v49 = v56;\n            v48 = 2;\n            v47 = v55;\n            v13 = v54;\n        }\n      lab_0x401f79:;\n        int32_t v57 = 1; // 0x401f7e\n        if ((char)v49 != 0) {\n            // 0x401f84\n            v57 = v49;\n            if (g38 != 0) {\n                // 0x40237f\n                error(1, (int32_t)\"standard input is closed\" ^ (int32_t)\"standard input is closed\", dcgettext(NULL, \"standard input is closed\", 5));\n                v53 = (int64_t *)v47;\n              lab_0x4023a8:\n                // 0x4023a8\n                error(1, *__errno_location(), \"%s\", (char *)function_404300(0, 3, *v53));\n                // 0x4023d6\n                function_404c90(1);\n                // UNREACHABLE\n            }\n        }\n        // 0x401f94\n        v30 = (int64_t *)v5;\n        data = (int64_t *)v2;\n        v31 = a2 - 8;\n        v28 = v57;\n        v22 = v48;\n        v14 = v13;\n        while (true) {\n          lab_0x401f94:;\n            int64_t v58 = *v30; // 0x401fad\n            v29 = v28;\n            v24 = 0;\n            v19 = g36;\n            v17 = 1;\n            v23 = v22;\n            v8 = v58;\n            v9 = 0;\n            v11 = v5;\n            v15 = v14;\n            v26 = v28;\n            v25 = 0;\n            v20 = g36;\n            v18 = 1;\n            v21 = v22;\n            v10 = 0;\n            v12 = v5;\n            v16 = v14;\n            if (v58 == 0) {\n                goto lab_0x4020e7;\n            } else {\n                goto lab_0x401fc0;\n            }\n        }\n    }\n  lab_0x4021ab:\n    // 0x4021ab\n    free(v6);\n    free(v7);\n    return v27 % 256;\n  lab_0x4020e7:;\n    int64_t v59 = v16;\n    int64_t v60 = v12;\n    int64_t n = v10;\n    int64_t v61 = v21;\n    int64_t v62 = v18;\n    int64_t v63 = v20;\n    char v64 = v25;\n    int32_t v65 = v26;\n    int64_t v66; // 0x401e70\n    int64_t v67; // 0x401e70\n    int64_t v68; // 0x401e70\n    int64_t v69; // 0x401e70\n    int64_t v70; // 0x401e70\n    int64_t v71; // 0x401e70\n    int64_t v72; // 0x401e70\n    int64_t v73; // 0x401e70\n    int64_t v74; // 0x401e70\n    int64_t v75; // 0x401e70\n    int64_t v76; // 0x401e70\n    int64_t v77; // 0x401e70\n    int64_t v78; // 0x401e70\n    int64_t v79; // 0x401e70\n    char v80; // 0x401e70\n    int32_t v81; // 0x401e70\n    int32_t v82; // 0x401e70\n    int32_t v83; // 0x401e70\n    if (v13 == v62) {\n        // 0x40214e\n        v81 = v65;\n        v78 = v61;\n        v70 = v59;\n        if (v64 == 0) {\n            goto lab_0x4021a2;\n        } else {\n            // 0x402155\n            if (n == 0) {\n                goto lab_0x402183;\n            } else {\n                int32_t v84 = fwrite_unlocked(data, 1, (int32_t)n, g29); // 0x40216e\n                v82 = v65;\n                v75 = v63;\n                v73 = v13;\n                v77 = v2;\n                v66 = n;\n                v68 = v60;\n                v71 = v59;\n                if (n != (int64_t)v84) {\n                    goto lab_0x402071;\n                } else {\n                    // 0x40217c\n                    goto lab_0x402183;\n                }\n            }\n        }\n    } else {\n        char v85 = *(char *)v63; // 0x4020ec\n        int64_t v86 = n; // 0x4020f1\n        if (v85 != 0) {\n            // 0x4020f3\n            *(char *)(n + v2) = v85;\n            v86 = n + 1;\n        }\n        int64_t v87 = v63 + 1; // 0x402100\n        v83 = v65;\n        v80 = v64;\n        v76 = g35 == v87 ? g36 : v87;\n        v74 = v62;\n        v79 = v61;\n        v67 = v86;\n        v69 = v60;\n        v72 = v59;\n        goto lab_0x4020be;\n    }\n  lab_0x401fc0:;\n    int64_t v88 = v15;\n    int64_t v89 = v11;\n    int64_t n2 = v9;\n    int64_t v90 = v8;\n    int64_t v91 = v17;\n    int64_t v92 = v19;\n    int32_t v93 = v29;\n    int64_t * v94 = (int64_t *)(v90 + 8); // 0x401fc0\n    uint64_t v95 = *v94; // 0x401fc0\n    struct _IO_FILE * stream; // 0x401e70\n    int64_t v96; // 0x401e70\n    int64_t v97; // 0x401e70\n    int64_t v98; // 0x401e70\n    int64_t v99; // 0x401e70\n    int64_t v100; // 0x401e70\n    int64_t v101; // 0x401e70\n    char v102; // 0x401e70\n    int32_t v103; // 0x401e70\n    int32_t v104; // 0x401e70\n    int32_t * v105; // 0x40221a\n    if (*(int64_t *)(v90 + 16) > v95) {\n        // 0x401fce\n        *v94 = v95 + 1;\n        int64_t v106 = (int64_t)*(char *)v95; // 0x401fd6\n        v97 = v106;\n        v98 = v106;\n        v96 = 0;\n        if (n2 == 0) {\n            goto lab_0x40200a;\n        } else {\n            goto lab_0x401fdf;\n        }\n    } else {\n        struct _IO_FILE * v107 = (struct _IO_FILE *)v90;\n        uint32_t v108 = __uflow(v107); // 0x402211\n        v105 = __errno_location();\n        int64_t v109 = v108; // 0x40221f\n        v97 = v109;\n        if (n2 != 0 && v108 != -1) {\n            goto lab_0x401fdf;\n        } else {\n            // 0x402249\n            v98 = v109;\n            v96 = n2;\n            if (v108 != -1) {\n                goto lab_0x40200a;\n            } else {\n                // 0x402253\n                v102 = v24;\n                if ((*(char *)v90 & 32) != 0) {\n                    uint32_t err_num = *v105; // 0x40222e\n                    int64_t v110 = *(int64_t *)(8 * v91 + v31); // 0x402291\n                    int64_t v111 = err_num; // 0x40229b\n                    error(0, err_num, \"%s\", (char *)function_404300(0, 3, v110));\n                    int64_t v112 = 0x100000000 * v90 >> 32; // 0x4022b0\n                    v103 = 0;\n                    v100 = v111;\n                    v99 = v112;\n                    if (v112 != (int64_t)g30) {\n                        goto lab_0x402265;\n                    } else {\n                        // 0x402280\n                        stream = (struct _IO_FILE *)v112;\n                        v104 = 0;\n                        v101 = v111;\n                        goto lab_0x4022c6;\n                    }\n                } else {\n                    // 0x402259\n                    v103 = v93;\n                    v100 = v23;\n                    v99 = v90;\n                    stream = v107;\n                    v104 = v93;\n                    v101 = v23;\n                    if (v90 == (int64_t)g30) {\n                        goto lab_0x4022c6;\n                    } else {\n                        goto lab_0x402265;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4021a2:\n    // 0x4021a2\n    v28 = v81;\n    v22 = v78;\n    v14 = v70;\n    v7 = data;\n    v6 = v30;\n    v27 = v81;\n    if (v70 == 0) {\n        // break -> 0x4021ab\n        goto lab_0x4021ab;\n    }\n    goto lab_0x401f94;\n  lab_0x4020be:;\n    int64_t v113 = v72;\n    int64_t v114 = v79;\n    uint64_t v115 = v74;\n    int32_t v116 = v83;\n    v81 = v116;\n    v78 = v114;\n    v70 = v113;\n    if (v13 <= v115 || v113 == 0) {\n        goto lab_0x4021a2;\n    } else {\n        int64_t v117 = v69 + 8; // 0x4020ca\n        int64_t v118 = v115 + 1; // 0x4020ce\n        int64_t v119 = *(int64_t *)v117; // 0x4020da\n        v29 = v116;\n        v24 = v80;\n        v19 = v76;\n        v17 = v118;\n        v23 = v114;\n        v8 = v119;\n        v9 = v67;\n        v11 = v117;\n        v15 = v113;\n        v26 = v116;\n        v25 = v80;\n        v20 = v76;\n        v18 = v118;\n        v21 = v114;\n        v10 = v67;\n        v12 = v117;\n        v16 = v113;\n        if (v119 != 0) {\n            goto lab_0x401fc0;\n        } else {\n            goto lab_0x4020e7;\n        }\n    }\n  lab_0x40200a:;\n    int64_t v120 = v96;\n    int64_t v121 = v98;\n    int32_t v122 = v93; // 0x402017\n    int64_t v123 = v92; // 0x402017\n    int64_t v124 = v91; // 0x402017\n    int64_t v125 = v121; // 0x402017\n    int64_t v126 = v120; // 0x402017\n    int64_t v127 = v89; // 0x402017\n    int64_t v128 = v88; // 0x402017\n    int64_t v129; // 0x401e70\n    int64_t v130; // 0x401e70\n    int64_t v131; // 0x401e70\n    int64_t v132; // 0x401e70\n    int64_t v133; // 0x401e70\n    int64_t v134; // 0x401e70\n    int64_t v135; // 0x401e70\n    int64_t v136; // 0x401e70\n    int64_t v137; // 0x401e70\n    int64_t v138; // 0x401e70\n    int64_t v139; // 0x401e70\n    int64_t v140; // 0x401e70\n    int64_t v141; // 0x401e70\n    int32_t v142; // 0x401e70\n    int32_t v143; // 0x401e70\n    if ((int32_t)v121 != (int32_t)*(char *)&g17) {\n        goto lab_0x402053;\n    } else {\n        // 0x402305\n        v143 = v93;\n        v138 = v92;\n        v136 = v91;\n        v141 = v121;\n        v130 = v120;\n        v132 = v89;\n        v133 = v88;\n        v142 = v93;\n        v139 = v92;\n        v137 = v13;\n        v140 = v121;\n        v135 = v121;\n        v129 = v120;\n        v131 = v89;\n        v134 = v88;\n        if (v13 == v91) {\n            goto lab_0x402124;\n        } else {\n            goto lab_0x402095;\n        }\n    }\n  lab_0x401fdf:;\n    int32_t v144 = fwrite_unlocked(data, 1, (int32_t)n2, g29); // 0x401ff8\n    v82 = v93;\n    v75 = v92;\n    v73 = v91;\n    v77 = v2;\n    v66 = n2;\n    v68 = v89;\n    v71 = v88;\n    if (n2 != (int64_t)v144) {\n        goto lab_0x402071;\n    } else {\n        // 0x402007\n        v98 = 0x1000000 * (int32_t)v97 >> 24;\n        v96 = 0;\n        goto lab_0x40200a;\n    }\n  lab_0x402183:;\n    int64_t v145 = (int64_t)g29;\n    unsigned char v146 = *(char *)&g17; // 0x402183\n    int64_t * v147 = (int64_t *)(v145 + 40); // 0x40218a\n    uint64_t v148 = *v147; // 0x40218a\n    if (v148 >= *(int64_t *)(v145 + 48)) {\n        int32_t v149 = __overflow(g29, (int32_t)v146); // 0x402336\n        v82 = v65;\n        v75 = v63;\n        v73 = v13;\n        v77 = v145;\n        v66 = n;\n        v68 = v60;\n        v71 = v59;\n        v81 = v65;\n        v78 = v146;\n        v70 = v59;\n        if (v149 >= 0) {\n            goto lab_0x4021a2;\n        } else {\n            goto lab_0x402071;\n        }\n    } else {\n        int64_t v150 = v148 + 1; // 0x402198\n        *v147 = v150;\n        *(char *)v148 = v146;\n        v81 = v65;\n        v78 = v150;\n        v70 = v59;\n        goto lab_0x4021a2;\n    }\n  lab_0x402053:;\n    int64_t v151 = v128;\n    int64_t v152 = v127;\n    int64_t v153 = v126;\n    int64_t v154 = v125;\n    int64_t v155 = v124;\n    int64_t v156 = v123;\n    int32_t v157 = v122;\n    int64_t v158 = (int64_t)g29; // 0x402053\n    int64_t * v159 = (int64_t *)(v158 + 40); // 0x40205a\n    uint64_t v160 = *v159; // 0x40205a\n    if (v160 < *(int64_t *)(v158 + 48)) {\n        // 0x402020\n        *v159 = v160 + 1;\n        *(char *)v160 = (char)v154;\n        goto lab_0x40202b;\n    } else {\n        // 0x402064\n        v82 = v157;\n        v75 = v156;\n        v73 = v155;\n        v77 = v158;\n        v66 = v153;\n        v68 = v152;\n        v71 = v151;\n        if (__overflow(g29, (int32_t)v154 % 256) >= 0) {\n            goto lab_0x40202b;\n        } else {\n            goto lab_0x402071;\n        }\n    }\n  lab_0x402071:\n    // 0x402071\n    function_401af0(v77);\n    int32_t v161 = v82; // 0x402076\n    int64_t v162 = v75; // 0x402076\n    int64_t v163 = v73; // 0x402076\n    int64_t v164 = v77; // 0x402076\n    int64_t v165 = v66; // 0x402076\n    int64_t v166 = v68; // 0x402076\n    int64_t v167 = v71; // 0x402076\n    goto lab_0x402080;\n  lab_0x402124:;\n    int64_t v212 = v134;\n    int64_t v211 = v131;\n    int64_t v210 = v129;\n    uint64_t v213 = v135;\n    int64_t v209 = v137;\n    int64_t v208 = v139;\n    int32_t v207 = v142;\n    int64_t v214 = (int64_t)g29; // 0x402124\n    int64_t * v215 = (int64_t *)(v214 + 40); // 0x40212b\n    uint64_t v216 = *v215; // 0x40212b\n    if (v216 >= *(int64_t *)(v214 + 48)) {\n        // 0x402313\n        v82 = v207;\n        v75 = v208;\n        v73 = v209;\n        v77 = v214;\n        v66 = v210;\n        v68 = v211;\n        v71 = v212;\n        if (__overflow(g29, (int32_t)(v213 % 256)) >= 0) {\n            goto lab_0x402144;\n        } else {\n            goto lab_0x402071;\n        }\n    } else {\n        // 0x402139\n        *v215 = v216 + 1;\n        *(char *)v216 = (char)v213;\n        goto lab_0x402144;\n    }\n  lab_0x402095:;\n    int64_t v199 = v133;\n    int64_t v198 = v132;\n    int64_t v197 = v130;\n    int64_t v217 = v141;\n    int64_t v195 = v136;\n    int64_t v193 = v138;\n    int32_t v194 = v143;\n    unsigned char v218 = *(char *)v193; // 0x402095\n    int64_t v196 = v217; // 0x40209a\n    if (v218 != 0) {\n        int64_t v219 = (int64_t)g29; // 0x4021e5\n        int64_t * v220 = (int64_t *)(v219 + 40); // 0x4021ec\n        uint64_t v221 = *v220; // 0x4021ec\n        if (v221 >= *(int64_t *)(v219 + 48)) {\n            int32_t v222 = __overflow(g29, (int32_t)v218); // 0x402353\n            v82 = v194;\n            v75 = v193;\n            v73 = v195;\n            v77 = v219;\n            v66 = v197;\n            v68 = v198;\n            v71 = v199;\n            v196 = v218;\n            if (v222 >= 0) {\n                goto lab_0x4020a0;\n            } else {\n                goto lab_0x402071;\n            }\n        } else {\n            // 0x4021fa\n            *v220 = v221 + 1;\n            *(char *)v221 = v218;\n            v196 = v217;\n            goto lab_0x4020a0;\n        }\n    } else {\n        goto lab_0x4020a0;\n    }\n  lab_0x402080:;\n    int64_t v168 = v167;\n    int64_t v169 = v166;\n    int64_t v170 = v165;\n    int64_t v171 = v163;\n    int64_t v172 = v162;\n    int32_t v173 = v161;\n    uint32_t v174 = __uflow((struct _IO_FILE *)v164); // 0x402080\n    int64_t v175 = v174; // 0x402085\n    int32_t v176 = v173; // 0x40208a\n    int64_t v177 = v172; // 0x40208a\n    int64_t v178 = v171; // 0x40208a\n    int64_t v179 = v175; // 0x40208a\n    int64_t v180 = v170; // 0x40208a\n    int64_t v181 = v169; // 0x40208a\n    int64_t v182 = v168; // 0x40208a\n    if (v174 != -1) {\n        goto lab_0x402044;\n    } else {\n        // 0x40208c\n        v143 = v173;\n        v138 = v172;\n        v136 = v171;\n        v141 = v175;\n        v130 = v170;\n        v132 = v169;\n        v133 = v168;\n        if (v13 == v171) {\n            unsigned char v183 = *(char *)&g17; // 0x4021d8\n            v142 = v173;\n            v139 = v172;\n            int64_t v184; // 0x401e70\n            v137 = v184;\n            v140 = v175;\n            v135 = v183;\n            v129 = v170;\n            v131 = v169;\n            v134 = v168;\n            goto lab_0x402124;\n        } else {\n            goto lab_0x402095;\n        }\n    }\n  lab_0x40202b:;\n    int64_t v185 = *(int64_t *)v152; // 0x40202b\n    int64_t * v186 = (int64_t *)(v185 + 8); // 0x40202f\n    uint64_t v187 = *v186; // 0x40202f\n    v161 = v157;\n    v162 = v156;\n    v163 = v155;\n    v164 = v185;\n    v165 = v153;\n    v166 = v152;\n    v167 = v151;\n    if (v187 >= *(int64_t *)(v185 + 16)) {\n        goto lab_0x402080;\n    } else {\n        // 0x402039\n        *v186 = v187 + 1;\n        v176 = v157;\n        v177 = v156;\n        v178 = v155;\n        v179 = (int64_t)*(char *)v187;\n        v180 = v153;\n        v181 = v152;\n        v182 = v151;\n        goto lab_0x402044;\n    }\n  lab_0x402265:;\n    int64_t v188 = function_404cd0(v99, v100); // 0x402265\n    int32_t v189 = v103; // 0x40226d\n    int64_t v190 = v100; // 0x40226d\n    if ((int32_t)v188 == -1) {\n        int64_t v191 = function_404300(0, 3, *(int64_t *)(8 * v91 + v31)); // 0x4022de\n        uint32_t err_num2 = *v105; // 0x4022f2\n        error(0, err_num2, \"%s\", (char *)v191);\n        v189 = 0;\n        v190 = err_num2;\n    }\n    goto lab_0x40226f;\n  lab_0x4022c6:\n    // 0x4022c6\n    clearerr_unlocked(stream);\n    v189 = v104;\n    v190 = v101;\n    goto lab_0x40226f;\n  lab_0x402044:;\n    int64_t v200 = v182;\n    int64_t v201 = v181;\n    int64_t v202 = v180;\n    int64_t v203 = v179;\n    int64_t v204 = v178;\n    int64_t v205 = v177;\n    int32_t v206 = v176;\n    v122 = v206;\n    v123 = v205;\n    v124 = v204;\n    v125 = v203;\n    v126 = v202;\n    v127 = v201;\n    v128 = v200;\n    if ((int32_t)*(char *)&g17 == (int32_t)v203) {\n        // 0x402118\n        v143 = v206;\n        v138 = v205;\n        v136 = v204;\n        v141 = v203;\n        v130 = v202;\n        v132 = v201;\n        v133 = v200;\n        v142 = v206;\n        v139 = v205;\n        v137 = v204;\n        v140 = v203;\n        v135 = v203;\n        v129 = v202;\n        v131 = v201;\n        v134 = v200;\n        if (v13 != v204) {\n            goto lab_0x402095;\n        } else {\n            goto lab_0x402124;\n        }\n    } else {\n        goto lab_0x402053;\n    }\n  lab_0x402144:\n    // 0x402144\n    v83 = v207;\n    v80 = 1;\n    v76 = v208;\n    v74 = v209;\n    v79 = v140;\n    v67 = v210;\n    v69 = v211;\n    v72 = v212;\n    goto lab_0x4020be;\n  lab_0x40226f:\n    // 0x40226f\n    *(int64_t *)v89 = 0;\n    v26 = v189;\n    v25 = v102;\n    v20 = v92;\n    v18 = v91;\n    v21 = v190;\n    v10 = n2;\n    v12 = v89;\n    v16 = v88 - 1;\n    goto lab_0x4020e7;\n  lab_0x4020a0:;\n    int64_t v192 = v193 + 1; // 0x4020a0\n    v83 = v194;\n    v80 = 1;\n    v76 = g35 == v192 ? g36 : v192;\n    v74 = v195;\n    v79 = v196;\n    v67 = v197;\n    v69 = v198;\n    v72 = v199;\n    goto lab_0x4020be;\n}\n"
        },
        {
            "funcName": "function_4023e0",
            "funcStartAddr": "4023e0",
            "funcEndAddr": "40275d",
            "decompiledFuncCode": "int64_t function_4023e0(int32_t status) {\n    // 0x4023e0\n    if (status != 0) {\n        // 0x4023fa\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40241f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402426\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Write lines consisting of the sequentially corresponding lines from\\neach FILE, separated by TABs, to standard output.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -d, --delimiters=LIST   reuse characters from LIST instead of TABs\\n  -s, --serial            paste one file at a time instead of in parallel\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402539\n    bool v2; // 0x4023e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4025c0\n    int64_t v6 = *(int64_t *)v5; // 0x4025c4\n    int64_t v7 = 6; // 0x4025ca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"paste\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4025d6\n        char v11 = *(char *)v9; // 0x4025d6\n        char v12 = v11; // 0x4025d6\n        bool v13 = false; // 0x4025d6\n        while (v10 == v11) {\n            // 0x4025cc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4025d6\n            int64_t v15 = v8 + v3; // 0x4025d6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4025e2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4025e2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4026f4;\n        } else {\n            // 0x4026de\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402733\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402644;\n            } else {\n                goto lab_0x4026f4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402644;\n        } else {\n            // 0x40262a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402733\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402644;\n            } else {\n                goto lab_0x402644;\n            }\n        }\n    }\n  lab_0x4026f4:\n    // 0x4026f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402684\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40241f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402644:\n    // 0x402644\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402684\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40241f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402760",
            "funcStartAddr": "402760",
            "funcEndAddr": "402768",
            "decompiledFuncCode": "int64_t function_402760(int64_t a1) {\n    // 0x402760\n    g40 = a1;\n    int64_t result; // 0x402760\n    return result;\n}\n"
        },
        {
            "funcName": "function_402770",
            "funcStartAddr": "402770",
            "funcEndAddr": "402778",
            "decompiledFuncCode": "int64_t function_402770(int64_t a1) {\n    // 0x402770\n    g39 = a1;\n    int64_t result; // 0x402770\n    return result;\n}\n"
        },
        {
            "funcName": "function_402780",
            "funcStartAddr": "402780",
            "funcEndAddr": "40281e",
            "decompiledFuncCode": "int64_t function_402780(void) {\n    // 0x402780\n    int32_t * err_num; // 0x402796\n    if ((int32_t)function_405c40((int64_t)g29) == 0) {\n        goto lab_0x4027ac;\n    } else {\n        // 0x402796\n        err_num = __errno_location();\n        if (g39 == 0) {\n            goto lab_0x4027c3;\n        } else {\n            // 0x4027a7\n            if (*err_num != 32) {\n                goto lab_0x4027c3;\n            } else {\n                goto lab_0x4027ac;\n            }\n        }\n    }\n  lab_0x4027ac:;\n    int64_t result = function_405c40((int64_t)g32); // 0x4027b3\n    if ((int32_t)result == 0) {\n        // 0x4027bc\n        return result;\n    }\n    // 0x4027fe\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x4027c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4027cf\n    if (g40 == 0) {\n        // 0x402809\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4027e3\n        error(0, *err_num, \"%s: %s\", (char *)function_4042d0((int64_t)g40), v1);\n    }\n    // 0x4027fe\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402820",
            "funcStartAddr": "402820",
            "funcEndAddr": "402825",
            "decompiledFuncCode": "int64_t function_402820(void) {\n    // 0x402820\n    int64_t fd; // 0x402820\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402830",
            "funcStartAddr": "402830",
            "funcEndAddr": "402851",
            "decompiledFuncCode": "int64_t function_402830(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402830\n    if (stream == 0) {\n        // 0x402850\n        int64_t result; // 0x402830\n        return result;\n    }\n    // 0x402835\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402860",
            "funcStartAddr": "402860",
            "funcEndAddr": "4028f9",
            "decompiledFuncCode": "int64_t function_402860(int64_t str) {\n    // 0x402860\n    if (str == 0) {\n        // 0x4028d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40286e\n    int64_t result = (int64_t)found_char_pos; // 0x40286e\n    if (found_char_pos == NULL) {\n        // 0x4028c9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402878\n    if (v1 - str < 7) {\n        // 0x4028c9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x402888\n    bool v2; // 0x402860\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402860\n    int64_t v5 = result - 6; // 0x402860\n    int64_t v6 = 7; // 0x402896\n    unsigned char v7 = *(char *)v5; // 0x402896\n    char v8 = *(char *)v4; // 0x402896\n    char v9 = v8; // 0x402896\n    bool v10 = false; // 0x402896\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4028a0\n    int64_t v13 = v1; // 0x4028a0\n    int64_t v14 = 3; // 0x4028a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4028c9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4028b2\n    char v16 = *(char *)v12; // 0x4028b2\n    char v17 = v16; // 0x4028b2\n    bool v18 = false; // 0x4028b2\n    while (v15 == v16) {\n        // 0x4028a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4028bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4028be\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x4028c9\n    g41 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402900",
            "funcStartAddr": "402900",
            "funcEndAddr": "4029f2",
            "decompiledFuncCode": "int64_t function_402900(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402914\n    int64_t result = (int64_t)v1; // 0x402914\n    if (result != a1) {\n        // 0x402921\n        return result;\n    }\n    int64_t v2 = function_405d00(); // 0x402930\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4029e6\n    if (v3 == 85) {\n        // 0x402940\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4029d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x40296e\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40297b\n        // 0x402921\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4029d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x4029bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x4029ca\n    // 0x402921\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a57",
            "decompiledFuncCode": "int64_t function_402a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402a00\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402a48\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a57",
            "funcStartAddr": "402a57",
            "funcEndAddr": "403c21",
            "decompiledFuncCode": "int64_t function_402a57(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402aa1\n    int64_t v3 = 0; // 0x402aa1\n    int64_t v4; // 0x402a57\n    int64_t v5; // 0x402a57\n    int64_t v6; // 0x402a57\n    int64_t v7; // 0x402a57\n    int64_t v8; // 0x402a57\n    int64_t v9; // 0x402a57\n    int64_t v10; // 0x402a57\n    int64_t v11; // 0x402a57\n    int64_t v12; // 0x402a57\n    int64_t v13; // 0x402a57\n    int64_t v14; // 0x402a57\n    int64_t v15; // 0x402a57\n    int64_t v16; // 0x402a57\n    int64_t v17; // 0x402a57\n    int64_t v18; // 0x402a57\n    int64_t result; // 0x402a57\n    int64_t v19; // 0x402a57\n    int32_t wc; // bp+132, 0x402a57\n    int64_t ps; // bp+136, 0x402a57\n    char v20; // 0x403010\n    int64_t v21; // 0x403010\n    int64_t v22; // 0x4033b8\n    int64_t v23; // 0x402a57\n    int64_t v24; // 0x4033d7\n    int32_t v25; // 0x402a57\n    while (true) {\n      lab_0x402aa8_2:\n        // 0x402aa8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402a57\n        int64_t v27; // 0x402adc\n        while (true) {\n          lab_0x402aa8:\n            // 0x402aa8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402ab3\n            if (v15 == -1) {\n                // 0x402ab5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402ac3\n            if (v28) {\n                // break (via goto) -> 0x403228\n                goto lab_0x403228;\n            }\n            // 0x402acc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g52 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4030bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402c01;\n                    }\n                    // 0x4034dd\n                    v26 = v5 + 1;\n                    goto lab_0x402aa8;\n                }\n                case 7: {\n                    goto lab_0x402c01;\n                }\n                case 8: {\n                    goto lab_0x402c01;\n                }\n                case 9: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402c01;\n                }\n                case 12: {\n                    goto lab_0x402c01;\n                }\n                case 13: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402bcd;\n                }\n                case 36: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402c01;\n                }\n                case 38: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402c01;\n                }\n                case 44: {\n                    goto lab_0x402c01;\n                }\n                case 45: {\n                    goto lab_0x402c01;\n                }\n                case 46: {\n                    goto lab_0x402c01;\n                }\n                case 47: {\n                    goto lab_0x402c01;\n                }\n                case 48: {\n                    goto lab_0x402c01;\n                }\n                case 49: {\n                    goto lab_0x402c01;\n                }\n                case 50: {\n                    goto lab_0x402c01;\n                }\n                case 51: {\n                    goto lab_0x402c01;\n                }\n                case 52: {\n                    goto lab_0x402c01;\n                }\n                case 53: {\n                    goto lab_0x402c01;\n                }\n                case 54: {\n                    goto lab_0x402c01;\n                }\n                case 55: {\n                    goto lab_0x402c01;\n                }\n                case 56: {\n                    goto lab_0x402c01;\n                }\n                case 57: {\n                    goto lab_0x402c01;\n                }\n                case 58: {\n                    goto lab_0x402c01;\n                }\n                case 59: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402c01;\n                }\n                case 66: {\n                    goto lab_0x402c01;\n                }\n                case 67: {\n                    goto lab_0x402c01;\n                }\n                case 68: {\n                    goto lab_0x402c01;\n                }\n                case 69: {\n                    goto lab_0x402c01;\n                }\n                case 70: {\n                    goto lab_0x402c01;\n                }\n                case 71: {\n                    goto lab_0x402c01;\n                }\n                case 72: {\n                    goto lab_0x402c01;\n                }\n                case 73: {\n                    goto lab_0x402c01;\n                }\n                case 74: {\n                    goto lab_0x402c01;\n                }\n                case 75: {\n                    goto lab_0x402c01;\n                }\n                case 76: {\n                    goto lab_0x402c01;\n                }\n                case 77: {\n                    goto lab_0x402c01;\n                }\n                case 78: {\n                    goto lab_0x402c01;\n                }\n                case 79: {\n                    goto lab_0x402c01;\n                }\n                case 80: {\n                    goto lab_0x402c01;\n                }\n                case 81: {\n                    goto lab_0x402c01;\n                }\n                case 82: {\n                    goto lab_0x402c01;\n                }\n                case 83: {\n                    goto lab_0x402c01;\n                }\n                case 84: {\n                    goto lab_0x402c01;\n                }\n                case 85: {\n                    goto lab_0x402c01;\n                }\n                case 86: {\n                    goto lab_0x402c01;\n                }\n                case 87: {\n                    goto lab_0x402c01;\n                }\n                case 88: {\n                    goto lab_0x402c01;\n                }\n                case 89: {\n                    goto lab_0x402c01;\n                }\n                case 90: {\n                    goto lab_0x402c01;\n                }\n                case 91: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402c01;\n                }\n                case 94: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402c01;\n                }\n                case 96: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402c01;\n                }\n                case 98: {\n                    goto lab_0x402c01;\n                }\n                case 99: {\n                    goto lab_0x402c01;\n                }\n                case 100: {\n                    goto lab_0x402c01;\n                }\n                case 101: {\n                    goto lab_0x402c01;\n                }\n                case 102: {\n                    goto lab_0x402c01;\n                }\n                case 103: {\n                    goto lab_0x402c01;\n                }\n                case 104: {\n                    goto lab_0x402c01;\n                }\n                case 105: {\n                    goto lab_0x402c01;\n                }\n                case 106: {\n                    goto lab_0x402c01;\n                }\n                case 107: {\n                    goto lab_0x402c01;\n                }\n                case 108: {\n                    goto lab_0x402c01;\n                }\n                case 109: {\n                    goto lab_0x402c01;\n                }\n                case 110: {\n                    goto lab_0x402c01;\n                }\n                case 111: {\n                    goto lab_0x402c01;\n                }\n                case 112: {\n                    goto lab_0x402c01;\n                }\n                case 113: {\n                    goto lab_0x402c01;\n                }\n                case 114: {\n                    goto lab_0x402c01;\n                }\n                case 115: {\n                    goto lab_0x402c01;\n                }\n                case 116: {\n                    goto lab_0x402c01;\n                }\n                case 117: {\n                    goto lab_0x402c01;\n                }\n                case 118: {\n                    goto lab_0x402c01;\n                }\n                case 119: {\n                    goto lab_0x402c01;\n                }\n                case 120: {\n                    goto lab_0x402c01;\n                }\n                case 121: {\n                    goto lab_0x402c01;\n                }\n                case 122: {\n                    goto lab_0x402c01;\n                }\n                case 123: {\n                    goto lab_0x402ba5;\n                }\n                case 124: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402ba5;\n                }\n                case 126: {\n                    goto lab_0x402bcd;\n                }\n                default: {\n                    goto lab_0x402fa5;\n                }\n            }\n        }\n      lab_0x402fa5:\n        if (v23 != 1) {\n            // 0x403310\n            ps = 0;\n            int64_t len = v15; // 0x403320\n            if (v15 == -1) {\n                // 0x403322\n                len = strlen((char *)str);\n            }\n            // 0x40334e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4033af:\n                // 0x4033af\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4033b4\n                int64_t v30 = v29 + str;\n                v24 = function_405bc0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40392a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40392a_2;\n                    }\n                    case -2: {\n                        // 0x403a0d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403a47\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403a4a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403a57\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403a50\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40392a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40392a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403380;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40342c\n                        char v34 = *(char *)v33; // 0x40343d\n                        unsigned char v35; // 0x402a57\n                        if (v34 < 125) {\n                            // 0x403448\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40345f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403430\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40343d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403448\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40345f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403430\n                            v33++;\n                        }\n                        goto lab_0x403380;\n                    }\n                }\n            }\n            goto lab_0x40392a_2;\n        } else {\n            // 0x402ff4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402c01;\n        }\n    }\n  lab_0x403228:\n    // 0x403228\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403b2a\n        if (v8 > result) {\n            // 0x403b33\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402e57\n        return result;\n    }\n    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402c01:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402c10\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402e1a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402d11\n    char v40 = v20; // 0x402d11\n    int64_t v41 = v38; // 0x402d11\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402d11\n    int64_t v43 = v36; // 0x402d11\n    goto lab_0x402c8d;\n  lab_0x402e1a_2:\n    // 0x402e57\n    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40392a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402c01;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4034fe\n        int64_t v50 = v5 + 1; // 0x4035e1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4035e8\n        char v52 = v20; // 0x4035e8\n        int64_t v53 = result; // 0x4035e8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4035b1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4035b5\n            int64_t v56 = v54 + 1; // 0x4035ba\n            int64_t v57 = v51 + 1; // 0x4035e1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4035ac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4035b1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4035b5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402c8d;\n    }\n  lab_0x403380:\n    // 0x403380\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40339f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4033a2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40392a\n        goto lab_0x40392a_2;\n    }\n    goto lab_0x4033af;\n  lab_0x402bcd:\n    // 0x402bcd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402e1a_2;\n    }\n    goto lab_0x402c01;\n  lab_0x402ba5:;\n    bool v60 = v15 == 1; // 0x402bb0\n    if (v15 == -1) {\n        // 0x402bb2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402bbe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402c01;\n    } else {\n        goto lab_0x402bcd;\n    }\n  lab_0x402c8d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402c92\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402c96\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402aa8_2;\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403dce",
            "decompiledFuncCode": "int64_t function_403c30(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403c32\n    int32_t * v3 = __errno_location(); // 0x403c4c\n    int64_t v4 = (int64_t)g21; // 0x403c51\n    int32_t v5 = *v3; // 0x403c5b\n    int64_t v6 = v4; // 0x403c71\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403dc9\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403c80\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403c87\n        int64_t v9; // 0x403c30\n        if (g21 == &g22) {\n            int64_t v10 = function_404aa0(0, v8); // 0x403daa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x403daf\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404aa0(v4, v8); // 0x403c9b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x403caa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x403caa\n        int32_t v14 = v7; // 0x403cb1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403ce1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403ceb\n    int64_t * v17 = (int64_t *)v15; // 0x403cee\n    uint64_t v18 = *v17; // 0x403cee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403cf1\n    int64_t result = *v19; // 0x403cf1\n    int64_t v20; // 0x403c30\n    uint64_t v21 = function_402a00(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403d14\n    if (v18 > v21) {\n        // 0x403d8b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403d27\n    *v17 = v22;\n    if (result != (int64_t)&g42) {\n        // 0x403d37\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404a40(v22); // 0x403d51\n    *v19 = result2;\n    int64_t v23; // 0x403c30\n    function_402a00(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403d8b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403dd0",
            "funcStartAddr": "403dd0",
            "funcEndAddr": "403e04",
            "decompiledFuncCode": "int64_t function_403dd0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403dd7\n    int64_t result = function_404c40(a1 == 0 ? (int64_t)&g43 : a1, 56); // 0x403df6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403e1f",
            "decompiledFuncCode": "int64_t function_403e10(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g43 : a1); // 0x403e1c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e2f",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x403e28\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e63",
            "decompiledFuncCode": "int64_t function_403e30(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 + 8 : a1 + 8; // 0x403e49\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403e4e\n    uint32_t v3 = *v2; // 0x403e4e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403e52\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403e70",
            "funcStartAddr": "403e70",
            "funcEndAddr": "403e83",
            "decompiledFuncCode": "int64_t function_403e70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g43 + 4 : a1 + 4); // 0x403e7c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403ebb",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x403e98\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403eb5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403eac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403f32",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g43 : a5; // 0x403ee2\n    int32_t * v2 = __errno_location(); // 0x403eeb\n    uint32_t v3 = *(int32_t *)v1; // 0x403f0b\n    int64_t result = function_402a00(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403f1a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f40",
            "funcStartAddr": "403f40",
            "funcEndAddr": "404021",
            "decompiledFuncCode": "int64_t function_403f40(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g43 : a4; // 0x403f62\n    int32_t * v2 = __errno_location(); // 0x403f68\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403f87\n    int32_t * v4 = (int32_t *)v1; // 0x403f8a\n    int64_t v5 = function_402a00(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403fa5\n    int64_t v6 = v5 + 1; // 0x403faa\n    int64_t result = function_404a40(v6); // 0x403fbf\n    function_402a00(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404004\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40400d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "40403a",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404030\n    return function_403f40(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "4040d5",
            "decompiledFuncCode": "int64_t function_404040(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x404040\n    int64_t v2 = v1; // 0x404040\n    int64_t v3 = v2; // 0x404054\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404073\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g53;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404070\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g53;\n        }\n    }\n    int64_t v6 = v3; // 0x40408d\n    if (g22 != 0x609300) {\n        // 0x40408f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g42;\n        v6 = &g53;\n    }\n    int64_t result = v6; // 0x4040b1\n    if (g21 != &g22) {\n        // 0x4040b3\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g53;\n    }\n    // 0x4040c6\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "4040f1",
            "decompiledFuncCode": "int64_t function_4040e0(void) {\n    // 0x4040e0\n    int64_t v1; // 0x4040e0\n    return function_403c30(v1, v1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "40410a",
            "decompiledFuncCode": "int64_t function_404100(void) {\n    // 0x404100\n    int64_t v1; // 0x404100\n    return function_403c30(v1, v1, v1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "404126",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1) {\n    // 0x404110\n    return function_403c30(0, a1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404130",
            "funcStartAddr": "404130",
            "funcEndAddr": "404142",
            "decompiledFuncCode": "int64_t function_404130(int64_t a1, int64_t a2) {\n    // 0x404130\n    return function_403c30(0, a1, a2, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "4041b8",
            "decompiledFuncCode": "int64_t function_404150(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404160\n    return function_403c30((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "404224",
            "decompiledFuncCode": "int64_t function_4041c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4041d0\n    return function_403c30((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "40423c",
            "decompiledFuncCode": "int64_t function_404230(int64_t a1, int64_t a2) {\n    // 0x404230\n    return function_404150(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40424f",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404240\n    return function_4041c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "4042c0",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x40425d\n    int128_t v2 = __asm_movdqa(g44); // 0x404265\n    int128_t v3 = __asm_movdqa(g45); // 0x40426d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404282\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404298\n    uint32_t v6 = *v5; // 0x404298\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40429d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403c30(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042cd",
            "decompiledFuncCode": "int64_t function_4042c0(int64_t a1, int64_t a2) {\n    // 0x4042c0\n    return function_404250(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042e1",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1) {\n    // 0x4042d0\n    return function_404250(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "4042fa",
            "decompiledFuncCode": "int64_t function_4042f0(void) {\n    // 0x4042f0\n    int64_t v1; // 0x4042f0\n    return function_404250(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40436e",
            "decompiledFuncCode": "int64_t function_404300(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40431a\n    return function_403c30((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "4043dc",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x404377\n    int128_t v2 = __asm_movdqa(g44); // 0x40437f\n    int128_t v3 = __asm_movdqa(g45); // 0x404387\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4043a9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4043d7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4043ba\n    return function_403c30(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "4043e9",
            "decompiledFuncCode": "int64_t function_4043e0(void) {\n    // 0x4043e0\n    int64_t v1; // 0x4043e0\n    return function_404370(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404407",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4043f0\n    return function_404370(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404423",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404410\n    return function_404370(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40443a",
            "decompiledFuncCode": "int64_t function_404430(void) {\n    // 0x404430\n    int64_t v1; // 0x404430\n    return function_403c30(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404452",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, int64_t a2) {\n    // 0x404440\n    return function_403c30(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "404471",
            "decompiledFuncCode": "int64_t function_404460(void) {\n    // 0x404460\n    int64_t v1; // 0x404460\n    return function_403c30(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "404496",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1) {\n    // 0x404480\n    return function_403c30(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "40487d",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404538\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4044bc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4044d6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40451b\n    if (a6 < 10) {\n        // 0x40452a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404622\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "4048a0",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404880\n    if (a5 == 0) {\n        // 0x40489b\n        return function_4044a0(a1, a2, a3, a4, a5, 0, (int64_t)&g53);\n    }\n    int64_t v1 = 0; // 0x404887\n    v1++;\n    int64_t v2 = v1; // 0x404899\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404890\n        v1++;\n        v2 = v1;\n    }\n    // 0x40489b\n    return function_4044a0(a1, a2, a3, a4, a5, v2, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404900",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4048a0\n    int64_t v3 = &v2; // 0x4048a0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4048d3\n    int64_t v6; // 0x4048bd\n    int64_t * v7; // 0x4048db\n    int64_t v8; // 0x4048db\n    int64_t v9; // 0x4048e7\n    if (v5 < 48) {\n        // 0x4048b0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4048f3\n            break;\n        }\n    } else {\n        // 0x4048db\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4048f3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4048d1\n    while (v4 != 9) {\n        // 0x4048c9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4048b0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4048f3\n                break;\n            }\n        } else {\n            // 0x4048db\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4048f3\n                break;\n            }\n        }\n        // 0x4048c9\n        v10 = 10;\n    }\n    // 0x4048f3\n    return function_4044a0(a1, a2, a3, a4, v3, v10, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "4049bc",
            "decompiledFuncCode": "int64_t function_404900(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404900\n    int64_t v1; // bp-168, 0x404900\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404900\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404900\n    int64_t v8; // 0x404900\n    int64_t v9; // bp-56, 0x404900\n    int64_t v10; // 0x404965\n    int64_t v11; // 0x404989\n    if ((int32_t)v6 < 48) {\n        // 0x404950\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4049a0\n            break;\n        }\n    } else {\n        // 0x404982\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4049a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40497a\n    int64_t v13 = 10; // 0x40497a\n    while (v5 != 9) {\n        // 0x40497c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404950\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4049a0\n                break;\n            }\n        } else {\n            // 0x404982\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4049a0\n                break;\n            }\n        }\n        // 0x404972\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4049a0\n    int64_t v14; // bp-136, 0x404900\n    int64_t result = function_4044a0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g53); // 0x4049af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "404a34",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1) {\n    // 0x4049c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404a23\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a5a",
            "decompiledFuncCode": "int64_t function_404a40(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404a44\n    if (size != 0 != (mem == NULL)) {\n        // 0x404a53\n        return (int64_t)mem;\n    }\n    // 0x404a55\n    function_404c90(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404a81",
            "decompiledFuncCode": "int64_t function_404a60(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404a63\n    int64_t v2 = v1; // 0x404a63\n    if (v2 < 0) {\n        // 0x404a7b\n        function_404c90(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a79\n        return function_404a40(v2);\n    }\n    // 0x404a7b\n    function_404c90(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404a92",
            "decompiledFuncCode": "int64_t function_404a90(void) {\n    // 0x404a90\n    int64_t v1; // 0x404a90\n    return function_404a40(v1);\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404ad6",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404ac8\n        free(v1);\n        return (int32_t)&g53 ^ (int32_t)&g53;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404ab1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404ac0\n        return (int64_t)mem;\n    }\n    // 0x404ad1\n    function_404c90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b01",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404ae3\n    int64_t v2 = v1; // 0x404ae3\n    if (v2 < 0) {\n        // 0x404afb\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404af9\n        return function_404aa0(a1, v2);\n    }\n    // 0x404afb\n    function_404c90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b96",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404b6b\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404aa0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404b53\n    if (a2 == 0) {\n        // 0x404b78\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404b58\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404b6b\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    // 0x404b3a\n    *(int64_t *)a2 = v2;\n    return function_404aa0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404bf0",
            "decompiledFuncCode": "int64_t function_404ba0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404ba0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404bea\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        // 0x404bc2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404aa0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404bd5\n        *(int64_t *)a2 = 128;\n        return function_404aa0(0, 128);\n    }\n    // 0x404be8\n    if (a2 < 0) {\n        // 0x404bea\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    // 0x404bc2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404aa0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c07",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1, int64_t a2) {\n    // 0x404bf0\n    return (int64_t)memset((int64_t *)function_404a40(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404c3e",
            "decompiledFuncCode": "int64_t function_404c10(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404c17\n    if ((int64_t)v1 < 0) {\n        // 0x404c39\n        function_404c90(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404c39\n        function_404c90(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404c2a\n    if (mem != NULL) {\n        // 0x404c34\n        return (int64_t)mem;\n    }\n    // 0x404c39\n    function_404c90(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c68",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404a40(a2); // 0x404c4f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404c83",
            "decompiledFuncCode": "int64_t function_404c70(int64_t str) {\n    // 0x404c70\n    return function_404c40(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404cc1",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1) {\n    // 0x404c90\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404d4b",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404cd7\n    if (fileno(stream) < 0) {\n        // 0x404d37\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x404cea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x404d1b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x404d37\n            return fclose(stream);\n        }\n    }\n    // 0x404cec\n    if ((int32_t)function_404d50(a1, v1) == 0) {\n        // 0x404d37\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x404cf8\n    int32_t v3 = *v2; // 0x404d00\n    int64_t result = fclose(stream); // 0x404d0e\n    if (v3 != 0) {\n        // 0x404d40\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x404d10\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d90",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x404d6a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x404d6a\n        return fflush(stream);\n    }\n    // 0x404d78\n    function_404d90(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404de7",
            "decompiledFuncCode": "int64_t function_404d90(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404d90\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x404d9a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x404dcb\n    int64_t result = -1; // 0x404dd4\n    if (v1 != -1) {\n        // 0x404dd6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x404de2\n    return result;\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404ecf",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404dfc\n    uint32_t v2 = *v1; // 0x404dfc\n    int64_t v3 = a2 & 0xffffffff; // 0x404e01\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404e04\n    uint64_t v5 = (int64_t)*v4; // 0x404e04\n    int64_t v6; // 0x404e72\n    if (v3 <= v5) {\n      lab_0x404e6c_2:\n        // 0x404e6c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404df2\n    int64_t v8 = v2; // 0x404df0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x404e6c\n        goto lab_0x404e6c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404e28\n    int64_t v17; // 0x404e36\n    int64_t * v18; // 0x404e50\n    int64_t * v19; // 0x404e53\n    int64_t v20; // 0x404e5e\n    int64_t v21; // 0x404e36\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404e33\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404e50\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404e67\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x404e6c\n            goto lab_0x404e6c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404e6c\n            goto lab_0x404e6c_2;\n        }\n        // 0x404e22\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x404eab\n    int64_t * v23 = (int64_t *)v22; // 0x404eb0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404eb3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404eb0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404ec7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x404e1d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404e6c\n            goto lab_0x404e6c_2;\n        }\n        // 0x404e22\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404e33\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404e50\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404e67\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x404e6c\n                goto lab_0x404e6c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x404e6c\n                goto lab_0x404e6c_2;\n            }\n            // 0x404e22\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404e90\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404eb0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404ec7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x404e6c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "4054ec",
            "decompiledFuncCode": "int64_t function_404ed0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404eef\n    int64_t v2 = *v1; // 0x404eef\n    char * str2 = (char *)v2; // 0x404efc\n    char c = *str2; // 0x404efc\n    int64_t v3 = v2; // 0x404f28\n    int64_t v4 = 0; // 0x404ed0\n    int32_t v5; // 0x404ed0\n    int64_t v6; // 0x404ed0\n    int64_t v7; // 0x404ed0\n    int64_t v8; // 0x404ed0\n    int64_t v9; // 0x404ed0\n    int64_t v10; // 0x404ed0\n    int64_t v11; // 0x404ed0\n    int64_t v12; // 0x404ed0\n    int64_t v13; // 0x404ed0\n    int64_t str3; // 0x404ed0\n    int64_t v14; // 0x404ed0\n    int64_t v15; // 0x404ed0\n    int64_t v16; // 0x404ed0\n    int64_t v17; // 0x404ed0\n    int32_t v18; // 0x404ed0\n    int32_t v19; // 0x404ed0\n    int32_t v20; // 0x404ed0\n    int32_t v21; // 0x404ed0\n    int32_t v22; // 0x404ed0\n    int32_t v23; // 0x404ed0\n    int32_t v24; // 0x404ed0\n    int32_t v25; // 0x404ed0\n    int32_t v26; // 0x404ed0\n    int32_t v27; // 0x404ed0\n    int32_t v28; // 0x404ed0\n    int32_t v29; // 0x404ed0\n    int64_t nmemb; // 0x404ed0\n    int64_t v30; // 0x404ed0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404f2c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404f28\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404f38\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404f3e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404f08\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404f6c\n                int64_t v34; // 0x404ed0\n                int64_t v35; // 0x404ed0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404f75\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4050f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404f86\n                int64_t v37 = *(int64_t *)v36; // 0x404f8a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404f60\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404f75\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4050f0;\n                        }\n                    }\n                    // 0x404f86\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404fd6:\n                    // 0x404fd6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405030;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4051a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405030;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405150\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404ffa;\n                                } else {\n                                    // 0x40515c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404ffa;\n                                    } else {\n                                        // 0x40516a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404ffa;\n                                        } else {\n                                            goto lab_0x405030;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404ffa;\n                            }\n                        }\n                    }\n                }\n              lab_0x405041:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405216\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4053c2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x4053e2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40542f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x405449\n                            int64_t v45; // 0x40544b\n                            if (*(char *)v42 != 0) {\n                                // 0x40544b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405443\n                            while (v17 + nmemb != v42) {\n                                // 0x405445\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40544b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x405438\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405470\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x405224\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40537f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405279\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405290\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40513e\n                    return 63;\n                }\n                // 0x405060\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4050e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4050f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405100\n                    uint32_t v50 = *v49; // 0x405100\n                    int64_t v51 = v50; // 0x405100\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40510a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405113\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40533f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4052ea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40513e\n                            return 63;\n                        }\n                        // 0x405188\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40549f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40539d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4053b0\n                                // 0x40513e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4052ae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4052c2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40512b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40512e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405132\n                    int64_t result = v59; // 0x405138\n                    if (v58 != 0) {\n                        // 0x40513a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40513e\n                    return result;\n                }\n            } else {\n                // 0x404f3e\n                v5 = v32;\n            }\n            // break -> 0x405065\n            break;\n        }\n    }\n    // 0x405065\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40507d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405087\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40513e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4051c9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4050b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4050c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405030:\n    // 0x405030\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405030\n    int64_t v63 = *(int64_t *)v62; // 0x405034\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405041\n        goto lab_0x405041;\n    }\n    goto lab_0x404fd6;\n  lab_0x404ffa:\n    // 0x404ffa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404ed0\n    int32_t v65; // 0x404ed0\n    int32_t v66; // 0x404ed0\n    if (v27 != 0) {\n        goto lab_0x405030;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4051b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405030;\n            } else {\n                goto lab_0x405021;\n            }\n        } else {\n            // 0x405015\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40530c\n                int64_t v67 = (int64_t)mem; // 0x40530c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405030;\n                } else {\n                    // 0x40531f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405021;\n                }\n            } else {\n                goto lab_0x405021;\n            }\n        }\n    }\n  lab_0x405021:\n    // 0x405021\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405030;\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405ab6",
            "decompiledFuncCode": "int64_t function_4054f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405511\n    if (v3 < 1) {\n        // 0x4056ce\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40550d\n    int32_t v5 = *(int32_t *)a7; // 0x405519\n    uint64_t v6 = a1 & 0xffffffff; // 0x40551b\n    int64_t v7 = v2; // 0x405520\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405523\n    *v8 = 0;\n    int64_t v9; // 0x4054f0\n    int64_t v10; // 0x4054f0\n    int64_t v11; // 0x4054f0\n    int64_t v12; // 0x4054f0\n    int64_t str; // 0x4054f0\n    int64_t v13; // 0x4054f0\n    int64_t v14; // 0x4054f0\n    int64_t v15; // 0x4054f0\n    int64_t v16; // 0x4054f0\n    int64_t v17; // 0x4054f0\n    int32_t v18; // 0x4054f0\n    char v19; // 0x4054f0\n    if (v5 == 0) {\n        // 0x405708\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40553a;\n    } else {\n        // 0x405533\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405580\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405583\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405648;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405596\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4055a6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40565c;\n                } else {\n                    goto lab_0x4055b8;\n                }\n            }\n        } else {\n            goto lab_0x40553a;\n        }\n    }\n  lab_0x40553a:\n    // 0x40553a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405540\n    *v24 = 0;\n    int64_t v25; // 0x4054f0\n    int64_t v26; // 0x4054f0\n    int64_t v27; // 0x4054f0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405630\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40563d;\n        }\n        case 43: {\n            // 0x405940\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40563d;\n        }\n        default: {\n            // 0x40555c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4058bf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4059d8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40563d;\n                } else {\n                    // 0x4058cd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40556a;\n                }\n            } else {\n                goto lab_0x40556a;\n            }\n        }\n    }\n  lab_0x405648:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40564f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4055b8;\n    } else {\n        goto lab_0x40565c;\n    }\n  lab_0x40556a:\n    // 0x40556a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40563d;\n  lab_0x40563d:\n    // 0x40563d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405648;\n  lab_0x4055b8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4055b8\n    int64_t v31 = v30; // 0x4055b8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4055ba\n    if ((int64_t)*v32 > v31) {\n        // 0x4055bf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4055c2\n    if (*v33 > v30) {\n        // 0x4055c7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4055ca\n    int64_t v35 = v31; // 0x4055ce\n    int64_t v36 = v15; // 0x4055ce\n    int64_t v37; // 0x4054f0\n    int64_t v38; // 0x4054f0\n    int64_t v39; // 0x4054f0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405738\n        int64_t v41 = v40; // 0x405738\n        v2 = v41;\n        int64_t v42; // 0x4054f0\n        if (*v33 == v40) {\n            // 0x405920\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405928\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405744\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405748\n                function_404df0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405758\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405761\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40576a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405781\n            int64_t v47 = v45 & 0xffffffff; // 0x405785\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40578e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405794\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405796;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405770\n            int64_t v49 = v48 & 0xffffffff; // 0x405770\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405781\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40578e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405794\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405796;\n                    }\n                }\n                // 0x405770\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405938\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405796;\n    } else {\n        goto lab_0x4055d4;\n    }\n  lab_0x40565c:\n    // 0x40565c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40565f\n    int64_t v51 = v12; // 0x40565f\n    int64_t v52 = v14; // 0x40565f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4055b8;\n    } else {\n        goto lab_0x405665;\n    }\n  lab_0x4055d4:;\n    int32_t v53 = v35; // 0x4055d4\n    int64_t v54; // 0x4054f0\n    int64_t v55; // 0x4054f0\n    int64_t v56; // 0x4054f0\n    int64_t v57; // 0x4054f0\n    int64_t v58; // 0x4054f0\n    int64_t v59; // 0x4054f0\n    char * v60; // 0x4054f0\n    int64_t v61; // 0x4054f0\n    int64_t v62; // 0x4055e9\n    int64_t v63; // 0x4054f0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405723\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405726;\n    } else {\n        // 0x4055dc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4054f0\n        int64_t v66 = v65 ? -1 : 1; // 0x4055f0\n        int64_t v67 = (int64_t)\"--\"; // 0x4054f0\n        int64_t v68 = v62; // 0x4054f0\n        int64_t v69 = 3; // 0x4055f0\n        unsigned char v70 = *(char *)v68; // 0x4055f0\n        char v71 = *(char *)v67; // 0x4055f0\n        char v72 = v71; // 0x4055f0\n        bool v73 = false; // 0x4055f0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4056e0\n            if (*(char *)v62 == 45) {\n                // 0x4057a0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4057a0\n                if (c == 0) {\n                    goto lab_0x4056ea;\n                } else {\n                    // 0x4057ad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405830;\n                    } else {\n                        if (c == 45) {\n                            // 0x405a13\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405885;\n                        } else {\n                            // 0x4057be\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405830;\n                            } else {\n                                // 0x4057c3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4057e4;\n                                } else {\n                                    // 0x4057ca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405830;\n                                    } else {\n                                        goto lab_0x4057e4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4056ea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405600\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405603\n            int64_t v77 = v35 + 1; // 0x405606\n            int32_t v78 = v77; // 0x405609\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405970\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405617\n                    function_404df0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405625\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405726;\n        }\n    }\n  lab_0x405665:;\n    // 0x405665\n    int64_t v79; // bp-104, 0x4054f0\n    int64_t v80 = &v79; // 0x4054fa\n    int64_t v81 = v50 + 1; // 0x405665\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40566c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405671\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405675\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405679\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405681\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405686\n    int32_t c2 = v84; // 0x405686\n    char * found_char_pos = strchr(str2, c2); // 0x405686\n    int64_t v87 = *v82; // 0x40568b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405695\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4056a0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405990\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40595d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4056ce\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405686\n    char v91 = *(char *)(v90 + 1); // 0x4056bb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405675\n        if (v91 != 58) {\n            // 0x4056ce\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4058e4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4059e8\n                *v8 = 0;\n            } else {\n                // 0x4059cc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40590e\n            *v83 = 0;\n            // 0x4056ce\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4058ee\n        if (v93 != 0) {\n            // 0x405980\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40590e\n            *v83 = 0;\n            // 0x4056ce\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405901\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40590e\n            *v83 = 0;\n            // 0x4056ce\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405a4a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4059fa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405a01\n        // 0x40590e\n        *v83 = 0;\n        // 0x4056ce\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405859\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40585b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405a80\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405a31\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405a38\n            // 0x4056ce\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405866\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40586a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405885;\n  lab_0x405796:\n    // 0x405796\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4055d4;\n  lab_0x405885:;\n    int64_t v99 = function_404ed0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4058a3\n    // 0x4056ce\n    return v99 & 0xffffffff;\n  lab_0x405726:;\n    int32_t v100 = v55; // 0x405726\n    if (v100 != (int32_t)v59) {\n        // 0x40572a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4056ce\n    return 0xffffffff;\n  lab_0x4056ea:\n    // 0x4056ea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4056f1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4056ce\n    return v99 & 0xffffffff;\n  lab_0x405830:\n    // 0x405830\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405665;\n  lab_0x4057e4:\n    // 0x4057e4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404ed0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40580a\n    if ((int32_t)v101 != -1) {\n        // 0x4056ce\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40581f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405830;\n}\n"
        },
        {
            "funcName": "function_405ac0",
            "funcStartAddr": "405ac0",
            "funcEndAddr": "405b16",
            "decompiledFuncCode": "int64_t function_405ac0(int64_t a1) {\n    // 0x405ac0\n    *(int32_t *)&g46 = g27;\n    *(int32_t *)&g47 = g26;\n    int64_t v1; // 0x405ac0\n    int64_t result = function_4054f0(v1, v1, v1, v1, v1, v1, &g46, a1 & 0xffffffff); // 0x405ae6\n    g27 = *(int32_t *)&g46;\n    g51 = (char *)g49;\n    *(int32_t *)&g25 = g48;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b20",
            "funcStartAddr": "405b20",
            "funcEndAddr": "405b38",
            "decompiledFuncCode": "int64_t function_405b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405b20\n    return function_405ac0(1);\n}\n"
        },
        {
            "funcName": "function_405b40",
            "funcStartAddr": "405b40",
            "funcEndAddr": "405b53",
            "decompiledFuncCode": "int64_t function_405b40(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x405b40\n    return function_405ac0(0);\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405b75",
            "decompiledFuncCode": "int64_t function_405b60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405b60\n    return function_4054f0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405b80",
            "funcStartAddr": "405b80",
            "funcEndAddr": "405b96",
            "decompiledFuncCode": "int64_t function_405b80(void) {\n    // 0x405b80\n    return function_405ac0(0);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bb8",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ba0\n    return function_4054f0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "405c3a",
            "decompiledFuncCode": "int64_t function_405bc0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405bcb\n    int64_t v2 = (int64_t)&g3; // 0x405bcb\n    int32_t * pwc; // 0x405bc0\n    int64_t v3; // 0x405bc0\n    int64_t n; // 0x405bc0\n    if (a2 == 0) {\n        goto lab_0x405c12;\n    } else {\n        // 0x405bcd\n        if (a3 == 0) {\n            // 0x405bf8\n            return -2;\n        }\n        // 0x405bd9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405c12;\n        } else {\n            goto lab_0x405be4;\n        }\n    }\n  lab_0x405c12:\n    // 0x405c12\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405bc0\n    pwc = (int32_t *)&v4;\n    goto lab_0x405be4;\n  lab_0x405be4:;\n    char * wstr = (char *)v3; // 0x405bea\n    int64_t ps; // 0x405bc0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405bea\n    int64_t result = v5; // 0x405bea\n    if (v5 < 0xfffffffe) {\n        // 0x405bf8\n        return result;\n    }\n    int64_t result2 = result; // 0x405c29\n    if ((char)function_405ca0(0, v3) == 0) {\n        // 0x405c2b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405bf8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405c9d",
            "decompiledFuncCode": "int64_t function_405c40(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405c47\n    int64_t v2; // 0x405c40\n    int64_t result = function_404cd0(a1, v2); // 0x405c58\n    if ((v2 & 32) != 0) {\n        // 0x405c80\n        if ((int32_t)result == 0) {\n            // 0x405c84\n            *__errno_location() = 0;\n        }\n        // 0x405c7a\n        return 0xffffffff;\n    }\n    // 0x405c61\n    if ((int32_t)result == 0) {\n        // 0x405c7a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405c68\n    if (v1 == 0) {\n        // 0x405c6a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405c7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405ca0",
            "funcStartAddr": "405ca0",
            "funcEndAddr": "405cfe",
            "decompiledFuncCode": "int64_t function_405ca0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405ca6\n    if (locale == NULL) {\n        // 0x405cd3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405ca6\n    bool v2; // 0x405ca0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x405ca0\n    int64_t v5 = v1; // 0x405ca0\n    int64_t v6 = 2; // 0x405cc5\n    unsigned char v7 = *(char *)v5; // 0x405cc5\n    char v8 = *(char *)v4; // 0x405cc5\n    char v9 = v8; // 0x405cc5\n    bool v10 = false; // 0x405cc5\n    while (v7 == v8) {\n        // 0x405cb8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405cd1\n    int64_t v13 = v1; // 0x405cd1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405cd3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405cd1\n    unsigned char v15 = *(char *)v13; // 0x405ced\n    char v16 = *(char *)v12; // 0x405ced\n    char v17 = v16; // 0x405ced\n    bool v18 = false; // 0x405ced\n    while (v15 == v16) {\n        // 0x405ce0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405d00",
            "funcStartAddr": "405d00",
            "funcEndAddr": "406262",
            "decompiledFuncCode": "int64_t function_405d00(void) {\n    char * v1 = nl_langinfo(14); // 0x405d16\n    char * v2 = g50; // 0x405d1b\n    char * v3; // 0x405d00\n    int64_t v4; // 0x405d00\n    int64_t v5; // 0x405d00\n    int64_t v6; // 0x405d00\n    int64_t v7; // 0x405d00\n    int32_t size; // 0x405d00\n    int32_t size2; // 0x405d00\n    int32_t len; // 0x405dd2\n    int64_t v8; // 0x405dd2\n    char * env_val; // 0x405dbd\n    if (v2 == NULL) {\n        // 0x405db8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405e25;\n        } else {\n            // 0x405dca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405e25;\n            } else {\n                // 0x405dcf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405dbd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406255\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405e25;\n                    } else {\n                        // 0x4061c9\n                        size2 = len + 14;\n                        goto lab_0x405deb;\n                    }\n                } else {\n                    goto lab_0x405deb;\n                }\n            }\n        }\n    } else {\n        // 0x405d00\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405d3a;\n    }\n  lab_0x40606c:;\n    // 0x40606c\n    struct _IO_FILE * stream; // 0x405eab\n    int32_t v10 = __uflow(stream); // 0x40606f\n    int64_t v11; // 0x405d00\n    int64_t v12 = v11; // 0x406079\n    int64_t v13; // 0x405d00\n    int64_t v14 = v13; // 0x406079\n    int32_t v15 = v10; // 0x406079\n    int64_t v16; // 0x405d00\n    int64_t v17 = v16; // 0x406079\n    int64_t v18 = v11; // 0x406079\n    int64_t v19 = v13; // 0x406079\n    int64_t v20 = v16; // 0x406079\n    if (v10 == -1) {\n        // break -> 0x40607f\n        goto lab_0x40607f;\n    }\n    goto lab_0x405ef9;\n  lab_0x405eee:;\n    // 0x405eee\n    int64_t v90; // 0x405d00\n    int64_t * v32; // 0x405ee0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405d00\n    v12 = v89;\n    int64_t v91; // 0x405d00\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405d00\n    v17 = v92;\n    goto lab_0x405ef9;\n  lab_0x405ef9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405d00\n    int32_t v25; // bp-120, 0x405d00\n    int32_t v26; // bp-184, 0x405d00\n    int64_t v27; // 0x405eab\n    int64_t v28; // 0x405ec8\n    int64_t v29; // 0x405ecd\n    int64_t * v30; // 0x405ee4\n    switch (c) {\n        case 32: {\n            goto lab_0x405ee0;\n        }\n        case 10: {\n            goto lab_0x405ee0;\n        }\n        case 9: {\n            goto lab_0x405ee0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4060d1\n            int32_t v33; // 0x405d00\n            char v34; // 0x405d00\n            int32_t v35; // 0x4060de\n            if (v31 < *v30) {\n                // 0x4060b0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4060db\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4060d1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4060b0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4060db\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4060c0\n                v36 = v33;\n            }\n            // 0x4061af\n            if (v36 == -1) {\n                // break -> 0x40607f\n                break;\n            }\n            goto lab_0x405ee0;\n        }\n        default: {\n            // 0x405f0f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40607f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405f38\n            int64_t v39 = v37 + 4; // 0x405f3a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405f46\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405f48\n            while (v41 == 0) {\n                // 0x405f38\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405f66\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405f72\n            int64_t v45 = v43 + 4; // 0x405f74\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405f80\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405f82\n            while (v47 == 0) {\n                // 0x405f72\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405f6f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405f98\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405fa8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405fac\n            int64_t v52 = v51 + v48; // 0x405fb5\n            int64_t * mem; // 0x405d00\n            int64_t v53; // 0x405d00\n            int64_t v54; // 0x405d00\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4060eb\n                int64_t v56 = v55 + 3; // 0x4060f7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405fd1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405fe0\n            if (mem == NULL) {\n                // 0x40620c\n                free((int64_t *)v21);\n                function_404cd0(v27, v53);\n                v24 = (int64_t)&g3;\n                goto lab_0x405e84;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405ff8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406002\n            uint32_t v62 = (int32_t)v59; // 0x406005\n            int64_t v63; // 0x405d00\n            if (v62 >= 8) {\n                // 0x406114\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40612e\n                int64_t v66 = v61 - v65; // 0x406132\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40613d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40614e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40614e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40614b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4061df\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406017\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40601b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40602b\n            int64_t v74 = v60 - 1; // 0x40602f\n            uint32_t v75 = (int32_t)v73; // 0x406034\n            int64_t v76; // 0x405d00\n            if (v75 >= 8) {\n                // 0x406162\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40616c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40617c\n                int64_t v80 = v74 - v79; // 0x406180\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40618b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40619b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406199\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4061f6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4061fe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406046\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40604a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406243\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40605e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405eee;\n            } else {\n                goto lab_0x40606c;\n            }\n        }\n    }\n  lab_0x405ee0:;\n    int64_t v93 = v23; // 0x405d00\n    int64_t v94 = v22; // 0x405d00\n    int64_t v95 = v21; // 0x405d00\n    goto lab_0x405ee0_2;\n  lab_0x405e25:;\n    int64_t * mem3 = malloc(size); // 0x405e25\n    int64_t v97 = (int64_t)&g3; // 0x405e30\n    int64_t v98; // 0x405d00\n    int64_t path; // 0x405d00\n    if (mem3 == NULL) {\n        goto lab_0x405e02;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405e25\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405e46;\n    }\n  lab_0x405d3a:;\n    int64_t str = v1 == NULL ? (int64_t)&g3 : (int64_t)v1; // 0x405d2d\n    char v100 = *v3; // 0x405d3a\n    int64_t v101; // 0x405d00\n    if (v100 == 0) {\n        // 0x405d94\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405d00\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405d00\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405d80\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405d87;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405d50\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405d5d\n        char v107 = *(char *)v106; // 0x405d62\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405d94\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405d6b\n    v104 = v103 + 1;\n  lab_0x405d87:\n    // 0x405d94\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405e02:;\n    char * v108 = (char *)v97;\n    g50 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405d3a;\n  lab_0x405e46:;\n    int64_t v109 = v98 + path; // 0x405e46\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405e72\n    v24 = (int64_t)&g3;\n    if (fd >= 0) {\n        // 0x405ea1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4061d2\n            close(fd);\n            v24 = (int64_t)&g3;\n        } else {\n            // 0x405ec5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405ee0_2:;\n                uint64_t v96 = *v32; // 0x405ee0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40606c;\n                } else {\n                    goto lab_0x405eee;\n                }\n            }\n          lab_0x40607f:\n            // 0x40607f\n            function_404cd0(v27, v19);\n            v24 = (int64_t)&g3;\n            if (v18 != 0) {\n                // 0x40609e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405e84;\n  lab_0x405deb:;\n    int64_t * mem4 = malloc(size2); // 0x405deb\n    v97 = (int64_t)&g3;\n    if (mem4 != NULL) {\n        // 0x405e91\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405e46;\n    } else {\n        goto lab_0x405e02;\n    }\n  lab_0x405e84:\n    // 0x405e84\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405e02;\n}\n"
        },
        {
            "funcName": "function_406270",
            "funcStartAddr": "406270",
            "funcEndAddr": "4062cd",
            "decompiledFuncCode": "int64_t function_406270(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406270\n    return function_401380();\n}\n"
        },
        {
            "funcName": "function_4062d0",
            "funcStartAddr": "4062d0",
            "funcEndAddr": "4062d1",
            "decompiledFuncCode": "int64_t function_4062d0(void) {\n    // 0x4062d0\n    int64_t result; // 0x4062d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4062e0",
            "funcStartAddr": "4062e0",
            "funcEndAddr": "4062f8",
            "decompiledFuncCode": "int64_t function_4062e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4062e0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_4062f8",
            "funcStartAddr": "4062f8",
            "funcEndAddr": "406318",
            "decompiledFuncCode": "int64_t function_4062f8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406302\n    while (*(int64_t *)v1 != -1) {\n        // 0x406303\n        v1 -= 8;\n    }\n    // 0x406314\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_paste.elf"
}