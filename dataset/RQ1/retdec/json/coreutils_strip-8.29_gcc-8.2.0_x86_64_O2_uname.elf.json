{
    "funcInfo": [
        {
            "funcName": "function_4015e0",
            "funcStartAddr": "4015e0",
            "funcEndAddr": "4015e5",
            "decompiledFuncCode": "int64_t function_4015e0(void) {\n    // 0x4015e0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015e5",
            "funcStartAddr": "4015e5",
            "funcEndAddr": "4015ea",
            "decompiledFuncCode": "int64_t function_4015e5(void) {\n    // 0x4015e5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015ea",
            "funcStartAddr": "4015ea",
            "funcEndAddr": "4015ef",
            "decompiledFuncCode": "int64_t function_4015ea(void) {\n    // 0x4015ea\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015ef",
            "funcStartAddr": "4015ef",
            "funcEndAddr": "4015f4",
            "decompiledFuncCode": "int64_t function_4015ef(void) {\n    // 0x4015ef\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015f4",
            "funcStartAddr": "4015f4",
            "funcEndAddr": "4015f9",
            "decompiledFuncCode": "int64_t function_4015f4(void) {\n    // 0x4015f4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015f9",
            "funcStartAddr": "4015f9",
            "funcEndAddr": "4015fe",
            "decompiledFuncCode": "int64_t function_4015f9(void) {\n    // 0x4015f9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401600",
            "funcStartAddr": "401600",
            "funcEndAddr": "4019a0",
            "decompiledFuncCode": "int64_t function_401600(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401602\n    function_401ec0(a2);\n    setlocale(LC_ALL, (char *)&g2);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_405940(0x401e20, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2 = 0; // 0x401652\n    int32_t v3; // 0x401600\n    int64_t v4; // 0x401600\n    int64_t v5; // 0x401600\n    int64_t v6; // 0x401600\n    int64_t name; // bp-424, 0x401600\n    int32_t v7; // 0x4017f3\n    if (g18 == 2) {\n        int64_t v8 = function_405080(v1, a2, (char *)&g2, (char (**)[4])&g3, 0, a6); // 0x40179d\n        int32_t v9 = v8;\n        if (v9 == -1) {\n            // 0x4017f3\n            v7 = *(int32_t *)0x60925c;\n            if (v7 != (int32_t)a1) {\n                goto lab_0x401967;\n            } else {\n                int32_t v10 = uname((struct utsname *)&name); // 0x401809\n                v6 = 16;\n                if (v10 == -1) {\n                    goto lab_0x40184a;\n                } else {\n                    goto lab_0x401920;\n                }\n            }\n        } else {\n            // 0x4017a7\n            v3 = v9;\n            if (v9 == -131) {\n                int64_t v11 = g18 != 1 ? (int64_t)\"arch\" : (int64_t)\"uname\"; // 0x4017c6\n                function_403f60((int64_t)g30, v11, \"GNU coreutils\", (int64_t)g19, \"David MacKenzie\", (int32_t)\"Karel Zak\");\n                exit(0);\n                // UNREACHABLE\n            }\n            goto lab_0x401768;\n        }\n    } else {\n        int64_t v12; // 0x401600\n        while (true) {\n          lab_0x401660_2:\n            // 0x401660\n            v12 = v2;\n            int32_t v13 = function_405080(v1, a2, \"asnrvmpio\", &g4, 0, a6);\n            switch (v13) {\n                case -1: {\n                    goto lab_0x40181d;\n                }\n                case 110: {\n                    // 0x401660\n                    v2 = v12 & 0xfffffffd | 2;\n                    goto lab_0x401660_2;\n                }\n                default: {\n                    int64_t v14; // 0x401600\n                    if (v13 > 110) {\n                        if (v13 == 114) {\n                            // 0x401782\n                            v14 = v12 & 0xfffffffb | 4;\n                        } else {\n                            if (v13 > 114) {\n                                if (v13 != 115) {\n                                    if (v13 != 118) {\n                                        // 0x401996\n                                        return function_401ad0(1);\n                                    }\n                                    // 0x401759\n                                    v14 = v12 & 0xfffffff7 | 8;\n                                } else {\n                                    // 0x4016d5\n                                    v14 = v12 & 0xfffffffe | 1;\n                                }\n                            } else {\n                                if (v13 != 111) {\n                                    if (v13 != 112) {\n                                        // 0x401996\n                                        return function_401ad0(1);\n                                    }\n                                    // 0x4016c9\n                                    v14 = v12 & 0xffffffdf | 32;\n                                } else {\n                                    // 0x40169c\n                                    v14 = v12 | 128;\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x4016a8\n                        v14 = 0xffffffff;\n                        if (v13 != 97) {\n                            if (v13 <= 97) {\n                                // 0x4016f8\n                                v3 = v13;\n                                if (v13 == -131) {\n                                    int64_t v15 = g18 != 1 ? (int64_t)\"arch\" : (int64_t)\"uname\"; // 0x401717\n                                    function_403f60((int64_t)g30, v15, \"GNU coreutils\", (int64_t)g19, \"David MacKenzie\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401768;\n                            }\n                            if (v13 != 105) {\n                                if (v13 != 109) {\n                                    // 0x401996\n                                    return function_401ad0(1);\n                                }\n                                // 0x4016e9\n                                v14 = v12 & 0xffffffef | 16;\n                            } else {\n                                // 0x4016b8\n                                v14 = v12 & 0xffffffbf | 64;\n                            }\n                        }\n                    }\n                    // 0x401660\n                    v2 = v14;\n                    goto lab_0x401660_2;\n                }\n            }\n        }\n      lab_0x40181d:\n        // 0x40181d\n        v7 = g28;\n        if (g28 != (int32_t)a1) {\n            goto lab_0x401967;\n        } else {\n            // 0x40182d\n            v4 = v12;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x401874;\n            } else {\n                int32_t v16 = uname((struct utsname *)&name); // 0x40183c\n                v5 = 1;\n                if (v16 != -1) {\n                    goto lab_0x401900;\n                } else {\n                    goto lab_0x40184a;\n                }\n            }\n        }\n    }\n  lab_0x401967:\n    // 0x401967\n    function_403ae0(*(int64_t *)(8 * (int64_t)v7 + a2));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x401996\n    return function_401ad0(1);\n  lab_0x401768:\n    // 0x401768\n    if (v3 != -130) {\n        // 0x401996\n        return function_401ad0(1);\n    }\n    // 0x401773\n    function_401ad0(0);\n    // UNREACHABLE\n  lab_0x401874:;\n    int64_t v17 = v4;\n    int64_t v18 = v17; // 0x401877\n    int64_t v19; // 0x401600\n    if (v17 % 32 != 0) {\n        // 0x4018e7\n        if (uname((struct utsname *)&name) == -1) {\n            goto lab_0x40184a;\n        } else {\n            // 0x4018fb\n            v5 = v17;\n            v19 = v17;\n            if (v17 % 2 == 0) {\n                goto lab_0x401908;\n            } else {\n                goto lab_0x401900;\n            }\n        }\n    } else {\n        goto lab_0x401879;\n    }\n  lab_0x40184a:;\n    char * format = dcgettext(NULL, \"cannot get system name\", 5); // 0x401856\n    error(1, *__errno_location(), format);\n    v4 = (int64_t)format;\n    goto lab_0x401874;\n  lab_0x401920:;\n    // 0x401920\n    int64_t v20; // bp-164, 0x401600\n    function_401a80((char *)&v20);\n    v18 = v6;\n    goto lab_0x401879;\n  lab_0x401879:;\n    int64_t v21 = v18;\n    if ((v21 & 32) != 0 && (int32_t)v21 != -1) {\n        // 0x40188a\n        function_401a80(\"unknown\");\n    }\n    if ((v21 & 64) != 0 && (int32_t)v21 != -1) {\n        // 0x40189e\n        function_401a80(\"unknown\");\n    }\n    if ((char)v21 <= -1) {\n        // 0x4018db\n        function_401a80(\"GNU/Linux\");\n    }\n    int64_t v22 = (int64_t)g30; // 0x4018ad\n    int64_t * v23 = (int64_t *)(v22 + 40); // 0x4018b4\n    uint64_t v24 = *v23; // 0x4018b4\n    if (v24 >= *(int64_t *)(v22 + 48)) {\n        // 0x401958\n        __overflow(g30, 10);\n    } else {\n        // 0x4018c2\n        *v23 = v24 + 1;\n        *(char *)v24 = 10;\n    }\n    // 0x4018cd\n    return 0;\n  lab_0x401900:\n    // 0x401900\n    function_401a80((char *)&name);\n    v19 = v5;\n    goto lab_0x401908;\n  lab_0x401908:\n    // 0x401908\n    if ((v19 & 2) != 0) {\n        // 0x401931\n        int64_t v25; // bp-359, 0x401600\n        function_401a80((char *)&v25);\n    }\n    if ((v19 & 4) != 0) {\n        // 0x40194a\n        int64_t v26; // bp-294, 0x401600\n        function_401a80((char *)&v26);\n    }\n    if ((v19 & 8) != 0) {\n        // 0x40193c\n        int64_t v27; // bp-229, 0x401600\n        function_401a80((char *)&v27);\n    }\n    // 0x401917\n    v18 = v19;\n    v6 = v19;\n    if ((v19 & 16) == 0) {\n        goto lab_0x401879;\n    } else {\n        goto lab_0x401920;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4019a0",
            "funcEndAddr": "4019cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4019a0\n    int64_t v1; // 0x4019a0\n    __libc_start_main(0x401600, (int32_t)a4, (char **)&v1, (void (*)())0x4058d0, (void (*)())0x405930, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019cb",
            "funcStartAddr": "4019cb",
            "funcEndAddr": "4019ea",
            "decompiledFuncCode": "int64_t function_4019cb(void) {\n    // 0x4019cb\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_4019ea",
            "funcStartAddr": "4019ea",
            "funcEndAddr": "401a21",
            "decompiledFuncCode": "int64_t function_4019ea(void) {\n    // 0x4019ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401a21",
            "funcStartAddr": "401a21",
            "funcEndAddr": "401a78",
            "decompiledFuncCode": "int64_t function_401a21(void) {\n    // 0x401a21\n    if (g33 != 0) {\n        // 0x401a77\n        int64_t result; // 0x401a21\n        return result;\n    }\n    int64_t v1 = g34; // 0x401a54\n    int64_t result2; // 0x401a66\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401a66\n        result2 = function_4019cb();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401a56\n        v1++;\n    }\n    // 0x401a4a\n    g34 = v1;\n    // 0x401a66\n    result2 = function_4019cb();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401a78",
            "funcStartAddr": "401a78",
            "funcEndAddr": "401a7d",
            "decompiledFuncCode": "int64_t function_401a78(void) {\n    // 0x401a78\n    return function_4019ea();\n}\n"
        },
        {
            "funcName": "function_401a80",
            "funcStartAddr": "401a80",
            "funcEndAddr": "401acc",
            "decompiledFuncCode": "int64_t function_401a80(char * a1) {\n    // 0x401a80\n    if (g35 == 0) {\n        // 0x401aa9\n        g35 = 1;\n        return fputs_unlocked(a1, g30);\n    }\n    int64_t v1 = (int64_t)g30; // 0x401a8d\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x401a94\n    uint64_t v3 = *v2; // 0x401a94\n    if (v3 >= *(int64_t *)(v1 + 48)) {\n        // 0x401ac0\n        __overflow(g30, 32);\n    } else {\n        // 0x401a9e\n        *v2 = v3 + 1;\n        *(char *)v3 = 32;\n    }\n    // 0x401aa9\n    g35 = 1;\n    return fputs_unlocked(a1, g30);\n}\n"
        },
        {
            "funcName": "function_401ad0",
            "funcStartAddr": "401ad0",
            "funcEndAddr": "401e00",
            "decompiledFuncCode": "int64_t function_401ad0(int32_t status) {\n    if (status != 0) {\n        // 0x401aeb\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401b10\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401b18\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]...\\n\", 5));\n    struct _IO_FILE * v1 = g30; // 0x401b4e\n    int64_t v2 = (int64_t)\"Print machine architecture.\\n\\n\"; // 0x401b4e\n    if (g18 == 1) {\n        // 0x401d2e\n        fputs_unlocked(dcgettext(NULL, \"Print certain system information.  With no OPTION, same as -s.\\n\\n  -a, --all                print all information, in the following order,\\n                             except omit -p and -i if unknown:\\n  -s, --kernel-name        print the kernel name\\n  -n, --nodename           print the network node hostname\\n  -r, --kernel-release     print the kernel release\\n\", 5), g30);\n        v1 = g30;\n        v2 = (int64_t)\"  -v, --kernel-version     print the kernel version\\n  -m, --machine            print the machine hardware name\\n  -p, --processor          print the processor type (non-portable)\\n  -i, --hardware-platform  print the hardware platform (non-portable)\\n  -o, --operating-system   print the operating system\\n\";\n    }\n    // 0x401b54\n    fputs_unlocked(dcgettext(NULL, (char *)v2, 5), v1);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    char * v3 = (char *)&g1; // bp-136, 0x401bc9\n    int64_t v4 = (int64_t)&v3; // 0x401c46\n    int64_t str = (int64_t)&g1; // 0x401c46\n    int64_t v5 = v4; // 0x401c66\n    while (strcmp(g18 != 1 ? \"arch\" : \"uname\", (char *)str) != 0) {\n        // 0x401c50\n        v4 += 16;\n        str = *(int64_t *)v4;\n        v5 = v4;\n        if (str == 0) {\n            // break -> 0x401c68\n            break;\n        }\n        v5 = v4;\n    }\n    // 0x401c68\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v5 + 8) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401da0;\n        } else {\n            // 0x401d8a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401dd8\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401cca;\n            } else {\n                goto lab_0x401da0;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401cca;\n        } else {\n            // 0x401cb0\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401dd8\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401cca;\n            } else {\n                goto lab_0x401cca;\n            }\n        }\n    }\n  lab_0x401da0:\n    // 0x401da0\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401d03\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b10\n    exit(status);\n    // UNREACHABLE\n  lab_0x401cca:\n    // 0x401cca\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401d03\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b10\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e00",
            "funcStartAddr": "401e00",
            "funcEndAddr": "401e08",
            "decompiledFuncCode": "int64_t function_401e00(int64_t a1) {\n    // 0x401e00\n    g37 = a1;\n    int64_t result; // 0x401e00\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e10",
            "funcStartAddr": "401e10",
            "funcEndAddr": "401e18",
            "decompiledFuncCode": "int64_t function_401e10(int64_t a1) {\n    // 0x401e10\n    g36 = a1;\n    int64_t result; // 0x401e10\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e20",
            "funcStartAddr": "401e20",
            "funcEndAddr": "401ebe",
            "decompiledFuncCode": "int64_t function_401e20(void) {\n    // 0x401e20\n    int32_t * err_num; // 0x401e36\n    if ((int32_t)function_405180((int64_t)g30) == 0) {\n        goto lab_0x401e4c;\n    } else {\n        // 0x401e36\n        err_num = __errno_location();\n        if (g36 == 0) {\n            goto lab_0x401e63;\n        } else {\n            // 0x401e47\n            if (*err_num != 32) {\n                goto lab_0x401e63;\n            } else {\n                goto lab_0x401e4c;\n            }\n        }\n    }\n  lab_0x401e4c:;\n    int64_t result = function_405180((int64_t)g32); // 0x401e53\n    if ((int32_t)result == 0) {\n        // 0x401e5c\n        return result;\n    }\n    // 0x401e9e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x401e63:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401e6f\n    if (g37 == 0) {\n        // 0x401ea9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401e83\n        error(0, *err_num, \"%s: %s\", (char *)function_403930((int64_t)g37), v1);\n    }\n    // 0x401e9e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ec0",
            "funcStartAddr": "401ec0",
            "funcEndAddr": "401f59",
            "decompiledFuncCode": "int64_t function_401ec0(int64_t str) {\n    // 0x401ec0\n    if (str == 0) {\n        // 0x401f39\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401ece\n    int64_t result = (int64_t)found_char_pos; // 0x401ece\n    if (found_char_pos == NULL) {\n        // 0x401f29\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401ed8\n    if (v1 - str < 7) {\n        // 0x401f29\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x401ee8\n    bool v2; // 0x401ec0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401ec0\n    int64_t v5 = result - 6; // 0x401ec0\n    int64_t v6 = 7; // 0x401ef6\n    unsigned char v7 = *(char *)v5; // 0x401ef6\n    char v8 = *(char *)v4; // 0x401ef6\n    char v9 = v8; // 0x401ef6\n    bool v10 = false; // 0x401ef6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401f00\n    int64_t v13 = v1; // 0x401f00\n    int64_t v14 = 3; // 0x401f00\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401f29\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401f12\n    char v16 = *(char *)v12; // 0x401f12\n    char v17 = v16; // 0x401f12\n    bool v18 = false; // 0x401f12\n    while (v15 == v16) {\n        // 0x401f02\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401f1c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401f1e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x401f29\n    g38 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f60",
            "funcStartAddr": "401f60",
            "funcEndAddr": "402052",
            "decompiledFuncCode": "int64_t function_401f60(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401f74\n    int64_t result = (int64_t)v1; // 0x401f74\n    if (result != a1) {\n        // 0x401f81\n        return result;\n    }\n    int64_t v2 = function_405240(); // 0x401f90\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402046\n    if (v3 == 85) {\n        // 0x401fa0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402038\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x401fce\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x401fdb\n        // 0x401f81\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402038\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40201d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40202a\n    // 0x401f81\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402060",
            "funcStartAddr": "402060",
            "funcEndAddr": "4020b7",
            "decompiledFuncCode": "int64_t function_402060(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402060\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4020a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020b7",
            "funcStartAddr": "4020b7",
            "funcEndAddr": "403281",
            "decompiledFuncCode": "int64_t function_4020b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402101\n    int64_t v3 = 0; // 0x402101\n    int64_t v4; // 0x4020b7\n    int64_t v5; // 0x4020b7\n    int64_t v6; // 0x4020b7\n    int64_t v7; // 0x4020b7\n    int64_t v8; // 0x4020b7\n    int64_t v9; // 0x4020b7\n    int64_t v10; // 0x4020b7\n    int64_t v11; // 0x4020b7\n    int64_t v12; // 0x4020b7\n    int64_t v13; // 0x4020b7\n    int64_t v14; // 0x4020b7\n    int64_t v15; // 0x4020b7\n    int64_t v16; // 0x4020b7\n    int64_t v17; // 0x4020b7\n    int64_t v18; // 0x4020b7\n    int64_t result; // 0x4020b7\n    int64_t v19; // 0x4020b7\n    int32_t wc; // bp+132, 0x4020b7\n    int64_t ps; // bp+136, 0x4020b7\n    char v20; // 0x402670\n    int64_t v21; // 0x402670\n    int64_t v22; // 0x402a18\n    int64_t v23; // 0x4020b7\n    int64_t v24; // 0x402a37\n    int32_t v25; // 0x4020b7\n    while (true) {\n      lab_0x402108_2:\n        // 0x402108\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4020b7\n        int64_t v27; // 0x40213c\n        while (true) {\n          lab_0x402108:\n            // 0x402108\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402113\n            if (v15 == -1) {\n                // 0x402115\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402123\n            if (v28) {\n                // break (via goto) -> 0x402888\n                goto lab_0x402888;\n            }\n            // 0x40212c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40271b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402261;\n                    }\n                    // 0x402b3d\n                    v26 = v5 + 1;\n                    goto lab_0x402108;\n                }\n                case 7: {\n                    goto lab_0x402261;\n                }\n                case 8: {\n                    goto lab_0x402261;\n                }\n                case 9: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402261;\n                }\n                case 12: {\n                    goto lab_0x402261;\n                }\n                case 13: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40222d;\n                }\n                case 36: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402261;\n                }\n                case 38: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402261;\n                }\n                case 44: {\n                    goto lab_0x402261;\n                }\n                case 45: {\n                    goto lab_0x402261;\n                }\n                case 46: {\n                    goto lab_0x402261;\n                }\n                case 47: {\n                    goto lab_0x402261;\n                }\n                case 48: {\n                    goto lab_0x402261;\n                }\n                case 49: {\n                    goto lab_0x402261;\n                }\n                case 50: {\n                    goto lab_0x402261;\n                }\n                case 51: {\n                    goto lab_0x402261;\n                }\n                case 52: {\n                    goto lab_0x402261;\n                }\n                case 53: {\n                    goto lab_0x402261;\n                }\n                case 54: {\n                    goto lab_0x402261;\n                }\n                case 55: {\n                    goto lab_0x402261;\n                }\n                case 56: {\n                    goto lab_0x402261;\n                }\n                case 57: {\n                    goto lab_0x402261;\n                }\n                case 58: {\n                    goto lab_0x402261;\n                }\n                case 59: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402261;\n                }\n                case 66: {\n                    goto lab_0x402261;\n                }\n                case 67: {\n                    goto lab_0x402261;\n                }\n                case 68: {\n                    goto lab_0x402261;\n                }\n                case 69: {\n                    goto lab_0x402261;\n                }\n                case 70: {\n                    goto lab_0x402261;\n                }\n                case 71: {\n                    goto lab_0x402261;\n                }\n                case 72: {\n                    goto lab_0x402261;\n                }\n                case 73: {\n                    goto lab_0x402261;\n                }\n                case 74: {\n                    goto lab_0x402261;\n                }\n                case 75: {\n                    goto lab_0x402261;\n                }\n                case 76: {\n                    goto lab_0x402261;\n                }\n                case 77: {\n                    goto lab_0x402261;\n                }\n                case 78: {\n                    goto lab_0x402261;\n                }\n                case 79: {\n                    goto lab_0x402261;\n                }\n                case 80: {\n                    goto lab_0x402261;\n                }\n                case 81: {\n                    goto lab_0x402261;\n                }\n                case 82: {\n                    goto lab_0x402261;\n                }\n                case 83: {\n                    goto lab_0x402261;\n                }\n                case 84: {\n                    goto lab_0x402261;\n                }\n                case 85: {\n                    goto lab_0x402261;\n                }\n                case 86: {\n                    goto lab_0x402261;\n                }\n                case 87: {\n                    goto lab_0x402261;\n                }\n                case 88: {\n                    goto lab_0x402261;\n                }\n                case 89: {\n                    goto lab_0x402261;\n                }\n                case 90: {\n                    goto lab_0x402261;\n                }\n                case 91: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402261;\n                }\n                case 94: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402261;\n                }\n                case 96: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402261;\n                }\n                case 98: {\n                    goto lab_0x402261;\n                }\n                case 99: {\n                    goto lab_0x402261;\n                }\n                case 100: {\n                    goto lab_0x402261;\n                }\n                case 101: {\n                    goto lab_0x402261;\n                }\n                case 102: {\n                    goto lab_0x402261;\n                }\n                case 103: {\n                    goto lab_0x402261;\n                }\n                case 104: {\n                    goto lab_0x402261;\n                }\n                case 105: {\n                    goto lab_0x402261;\n                }\n                case 106: {\n                    goto lab_0x402261;\n                }\n                case 107: {\n                    goto lab_0x402261;\n                }\n                case 108: {\n                    goto lab_0x402261;\n                }\n                case 109: {\n                    goto lab_0x402261;\n                }\n                case 110: {\n                    goto lab_0x402261;\n                }\n                case 111: {\n                    goto lab_0x402261;\n                }\n                case 112: {\n                    goto lab_0x402261;\n                }\n                case 113: {\n                    goto lab_0x402261;\n                }\n                case 114: {\n                    goto lab_0x402261;\n                }\n                case 115: {\n                    goto lab_0x402261;\n                }\n                case 116: {\n                    goto lab_0x402261;\n                }\n                case 117: {\n                    goto lab_0x402261;\n                }\n                case 118: {\n                    goto lab_0x402261;\n                }\n                case 119: {\n                    goto lab_0x402261;\n                }\n                case 120: {\n                    goto lab_0x402261;\n                }\n                case 121: {\n                    goto lab_0x402261;\n                }\n                case 122: {\n                    goto lab_0x402261;\n                }\n                case 123: {\n                    goto lab_0x402205;\n                }\n                case 124: {\n                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402205;\n                }\n                case 126: {\n                    goto lab_0x40222d;\n                }\n                default: {\n                    goto lab_0x402605;\n                }\n            }\n        }\n      lab_0x402605:\n        if (v23 != 1) {\n            // 0x402970\n            ps = 0;\n            int64_t len = v15; // 0x402980\n            if (v15 == -1) {\n                // 0x402982\n                len = strlen((char *)str);\n            }\n            // 0x4029ae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402a0f:\n                // 0x402a0f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402a14\n                int64_t v30 = v29 + str;\n                v24 = function_405100(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x402f8a_2;\n                    }\n                    case -1: {\n                        goto lab_0x402f8a_2;\n                    }\n                    case -2: {\n                        // 0x40306d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4030a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4030aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4030b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4030b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x402f8a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x402f8a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4029e0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402a8c\n                        char v34 = *(char *)v33; // 0x402a9d\n                        unsigned char v35; // 0x4020b7\n                        if (v34 < 125) {\n                            // 0x402aa8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402abf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402a90\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402a9d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402aa8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402abf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402a90\n                            v33++;\n                        }\n                        goto lab_0x4029e0;\n                    }\n                }\n            }\n            goto lab_0x402f8a_2;\n        } else {\n            // 0x402654\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402261;\n        }\n    }\n  lab_0x402888:\n    // 0x402888\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40318a\n        if (v8 > result) {\n            // 0x403193\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4024b7\n        return result;\n    }\n    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402261:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402270\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40247a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402371\n    char v40 = v20; // 0x402371\n    int64_t v41 = v38; // 0x402371\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402371\n    int64_t v43 = v36; // 0x402371\n    goto lab_0x4022ed;\n  lab_0x40247a_2:\n    // 0x4024b7\n    return function_402060(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402f8a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402261;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402b5e\n        int64_t v50 = v5 + 1; // 0x402c41\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402c48\n        char v52 = v20; // 0x402c48\n        int64_t v53 = result; // 0x402c48\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402c11\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402c15\n            int64_t v56 = v54 + 1; // 0x402c1a\n            int64_t v57 = v51 + 1; // 0x402c41\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402c0c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402c11\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402c15\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4022ed;\n    }\n  lab_0x4029e0:\n    // 0x4029e0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4029ff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402a02\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x402f8a\n        goto lab_0x402f8a_2;\n    }\n    goto lab_0x402a0f;\n  lab_0x40222d:\n    // 0x40222d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40247a_2;\n    }\n    goto lab_0x402261;\n  lab_0x402205:;\n    bool v60 = v15 == 1; // 0x402210\n    if (v15 == -1) {\n        // 0x402212\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40221e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402261;\n    } else {\n        goto lab_0x40222d;\n    }\n  lab_0x4022ed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4022f2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4022f6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402108_2;\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "40342e",
            "decompiledFuncCode": "int64_t function_403290(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403292\n    int32_t * v3 = __errno_location(); // 0x4032ac\n    int64_t v4 = (int64_t)g22; // 0x4032b1\n    int32_t v5 = *v3; // 0x4032bb\n    int64_t v6 = v4; // 0x4032d1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403429\n            function_4042f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4032e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4032e7\n        int64_t v9; // 0x403290\n        if (g22 == &g23) {\n            int64_t v10 = function_404100(0, v8); // 0x40340a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x40340f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404100(v4, v8); // 0x4032fb\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40330a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40330a\n        int32_t v14 = v7; // 0x403311\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403341\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40334b\n    int64_t * v17 = (int64_t *)v15; // 0x40334e\n    uint64_t v18 = *v17; // 0x40334e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403351\n    int64_t result = *v19; // 0x403351\n    int64_t v20; // 0x403290\n    uint64_t v21 = function_402060(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403374\n    if (v18 > v21) {\n        // 0x4033eb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403387\n    *v17 = v22;\n    if (result != (int64_t)&g39) {\n        // 0x403397\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4040a0(v22); // 0x4033b1\n    *v19 = result2;\n    int64_t v23; // 0x403290\n    function_402060(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4033eb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "403464",
            "decompiledFuncCode": "int64_t function_403430(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403437\n    int64_t result = function_4042a0(a1 == 0 ? (int64_t)&g40 : a1, 56); // 0x403456\n    return result;\n}\n"
        },
        {
            "funcName": "function_403470",
            "funcStartAddr": "403470",
            "funcEndAddr": "40347f",
            "decompiledFuncCode": "int64_t function_403470(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g40 : a1); // 0x40347c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403480",
            "funcStartAddr": "403480",
            "funcEndAddr": "40348f",
            "decompiledFuncCode": "int64_t function_403480(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x403488\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403490",
            "funcStartAddr": "403490",
            "funcEndAddr": "4034c3",
            "decompiledFuncCode": "int64_t function_403490(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 + 8 : a1 + 8; // 0x4034a9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4034ae\n    uint32_t v3 = *v2; // 0x4034ae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4034b2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4034d0",
            "funcStartAddr": "4034d0",
            "funcEndAddr": "4034e3",
            "decompiledFuncCode": "int64_t function_4034d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g40 + 4 : a1 + 4); // 0x4034dc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "40351b",
            "decompiledFuncCode": "int64_t function_4034f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x4034f8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403515\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40350c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403520",
            "funcStartAddr": "403520",
            "funcEndAddr": "403592",
            "decompiledFuncCode": "int64_t function_403520(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g40 : a5; // 0x403542\n    int32_t * v2 = __errno_location(); // 0x40354b\n    uint32_t v3 = *(int32_t *)v1; // 0x40356b\n    int64_t result = function_402060(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40357a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4035a0",
            "funcStartAddr": "4035a0",
            "funcEndAddr": "403681",
            "decompiledFuncCode": "int64_t function_4035a0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g40 : a4; // 0x4035c2\n    int32_t * v2 = __errno_location(); // 0x4035c8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4035e7\n    int32_t * v4 = (int32_t *)v1; // 0x4035ea\n    int64_t v5 = function_402060(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403605\n    int64_t v6 = v5 + 1; // 0x40360a\n    int64_t result = function_4040a0(v6); // 0x40361f\n    function_402060(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403664\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40366d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403690",
            "funcStartAddr": "403690",
            "funcEndAddr": "40369a",
            "decompiledFuncCode": "int64_t function_403690(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403690\n    return function_4035a0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4036a0",
            "funcStartAddr": "4036a0",
            "funcEndAddr": "403735",
            "decompiledFuncCode": "int64_t function_4036a0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x4036a0\n    int64_t v2 = v1; // 0x4036a0\n    int64_t v3 = v2; // 0x4036b4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x4036d3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4036d0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x4036ed\n    if (g23 != 0x6092c0) {\n        // 0x4036ef\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g39;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x403711\n    if (g22 != &g23) {\n        // 0x403713\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g50;\n    }\n    // 0x403726\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403740",
            "funcStartAddr": "403740",
            "funcEndAddr": "403751",
            "decompiledFuncCode": "int64_t function_403740(void) {\n    // 0x403740\n    int64_t v1; // 0x403740\n    return function_403290(v1, v1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "40376a",
            "decompiledFuncCode": "int64_t function_403760(void) {\n    // 0x403760\n    int64_t v1; // 0x403760\n    return function_403290(v1, v1, v1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "403786",
            "decompiledFuncCode": "int64_t function_403770(int64_t a1) {\n    // 0x403770\n    return function_403290(0, a1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403790",
            "funcStartAddr": "403790",
            "funcEndAddr": "4037a2",
            "decompiledFuncCode": "int64_t function_403790(int64_t a1, int64_t a2) {\n    // 0x403790\n    return function_403290(0, a1, a2, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4037b0",
            "funcStartAddr": "4037b0",
            "funcEndAddr": "403818",
            "decompiledFuncCode": "int64_t function_4037b0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4037c0\n    return function_403290((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403820",
            "funcStartAddr": "403820",
            "funcEndAddr": "403884",
            "decompiledFuncCode": "int64_t function_403820(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403830\n    return function_403290((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403890",
            "funcStartAddr": "403890",
            "funcEndAddr": "40389c",
            "decompiledFuncCode": "int64_t function_403890(int64_t a1, int64_t a2) {\n    // 0x403890\n    return function_4037b0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4038a0",
            "funcStartAddr": "4038a0",
            "funcEndAddr": "4038af",
            "decompiledFuncCode": "int64_t function_4038a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4038a0\n    return function_403820(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "403920",
            "decompiledFuncCode": "int64_t function_4038b0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x4038bd\n    int128_t v2 = __asm_movdqa(g41); // 0x4038c5\n    int128_t v3 = __asm_movdqa(g42); // 0x4038cd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4038e2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4038f8\n    uint32_t v6 = *v5; // 0x4038f8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4038fd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403290(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403920",
            "funcStartAddr": "403920",
            "funcEndAddr": "40392d",
            "decompiledFuncCode": "int64_t function_403920(int64_t a1, int64_t a2) {\n    // 0x403920\n    return function_4038b0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403941",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1) {\n    // 0x403930\n    return function_4038b0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403950",
            "funcStartAddr": "403950",
            "funcEndAddr": "40395a",
            "decompiledFuncCode": "int64_t function_403950(void) {\n    // 0x403950\n    int64_t v1; // 0x403950\n    return function_4038b0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "4039ce",
            "decompiledFuncCode": "int64_t function_403960(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40397a\n    return function_403290(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "403a3c",
            "decompiledFuncCode": "int64_t function_4039d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x4039d7\n    int128_t v2 = __asm_movdqa(g41); // 0x4039df\n    int128_t v3 = __asm_movdqa(g42); // 0x4039e7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403a09\n    if (a2 == 0 || a3 == 0) {\n        // 0x403a37\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403a1a\n    return function_403290(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403a49",
            "decompiledFuncCode": "int64_t function_403a40(void) {\n    // 0x403a40\n    int64_t v1; // 0x403a40\n    return function_4039d0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403a67",
            "decompiledFuncCode": "int64_t function_403a50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403a50\n    return function_4039d0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403a83",
            "decompiledFuncCode": "int64_t function_403a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403a70\n    return function_4039d0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403a90",
            "funcStartAddr": "403a90",
            "funcEndAddr": "403a9a",
            "decompiledFuncCode": "int64_t function_403a90(void) {\n    // 0x403a90\n    int64_t v1; // 0x403a90\n    return function_403290(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_403aa0",
            "funcStartAddr": "403aa0",
            "funcEndAddr": "403ab2",
            "decompiledFuncCode": "int64_t function_403aa0(int64_t a1, int64_t a2) {\n    // 0x403aa0\n    return function_403290(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403ad1",
            "decompiledFuncCode": "int64_t function_403ac0(void) {\n    // 0x403ac0\n    int64_t v1; // 0x403ac0\n    return function_403290(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403ae0",
            "funcStartAddr": "403ae0",
            "funcEndAddr": "403af6",
            "decompiledFuncCode": "int64_t function_403ae0(int64_t a1) {\n    // 0x403ae0\n    return function_403290(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403edd",
            "decompiledFuncCode": "int64_t function_403b00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403b98\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403b1c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403b36\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403b7b\n    if (a6 < 10) {\n        // 0x403b8a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403c82\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403ee0",
            "funcStartAddr": "403ee0",
            "funcEndAddr": "403f00",
            "decompiledFuncCode": "int64_t function_403ee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403ee0\n    if (a5 == 0) {\n        // 0x403efb\n        return function_403b00(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x403ee7\n    v1++;\n    int64_t v2 = v1; // 0x403ef9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403ef0\n        v1++;\n        v2 = v1;\n    }\n    // 0x403efb\n    return function_403b00(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403f00",
            "funcStartAddr": "403f00",
            "funcEndAddr": "403f60",
            "decompiledFuncCode": "int64_t function_403f00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403f00\n    int64_t v3 = &v2; // 0x403f00\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x403f33\n    int64_t v6; // 0x403f1d\n    int64_t * v7; // 0x403f3b\n    int64_t v8; // 0x403f3b\n    int64_t v9; // 0x403f47\n    if (v5 < 48) {\n        // 0x403f10\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x403f53\n            break;\n        }\n    } else {\n        // 0x403f3b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x403f53\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x403f31\n    while (v4 != 9) {\n        // 0x403f29\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403f10\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x403f53\n                break;\n            }\n        } else {\n            // 0x403f3b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x403f53\n                break;\n            }\n        }\n        // 0x403f29\n        v10 = 10;\n    }\n    // 0x403f53\n    return function_403b00(a1, a2, a3, a4, v3, v10, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "40401c",
            "decompiledFuncCode": "int64_t function_403f60(int64_t a1, int64_t a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x403f60\n    int64_t v1; // bp-168, 0x403f60\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403f60\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403f60\n    int64_t v8; // 0x403f60\n    int64_t v9; // bp-56, 0x403f60\n    int64_t v10; // 0x403fc5\n    int64_t v11; // 0x403fe9\n    if ((int32_t)v6 < 48) {\n        // 0x403fb0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404000\n            break;\n        }\n    } else {\n        // 0x403fe2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404000\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403fda\n    int64_t v13 = 10; // 0x403fda\n    while (v5 != 9) {\n        // 0x403fdc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403fb0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404000\n                break;\n            }\n        } else {\n            // 0x403fe2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404000\n                break;\n            }\n        }\n        // 0x403fd2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404000\n    int64_t v14; // bp-136, 0x403f60\n    int64_t result = function_403b00(a1, a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x40400f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404020",
            "funcStartAddr": "404020",
            "funcEndAddr": "404094",
            "decompiledFuncCode": "int64_t function_404020(int64_t a1) {\n    // 0x404020\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404083\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040ba",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4040a4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4040b3\n        return (int64_t)mem;\n    }\n    // 0x4040b5\n    function_4042f0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040e1",
            "decompiledFuncCode": "int64_t function_4040c0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4040c3\n    int64_t v2 = v1; // 0x4040c3\n    if (v2 < 0) {\n        // 0x4040db\n        function_4042f0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4040d9\n        return function_4040a0(v2);\n    }\n    // 0x4040db\n    function_4042f0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "4040f2",
            "decompiledFuncCode": "int64_t function_4040f0(void) {\n    // 0x4040f0\n    int64_t v1; // 0x4040f0\n    return function_4040a0(v1);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "404136",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404128\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404111\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404120\n        return (int64_t)mem;\n    }\n    // 0x404131\n    function_4042f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404140",
            "funcStartAddr": "404140",
            "funcEndAddr": "404161",
            "decompiledFuncCode": "int64_t function_404140(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404143\n    int64_t v2 = v1; // 0x404143\n    if (v2 < 0) {\n        // 0x40415b\n        function_4042f0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404159\n        return function_404100(a1, v2);\n    }\n    // 0x40415b\n    function_4042f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "4041f6",
            "decompiledFuncCode": "int64_t function_404170(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4041cb\n            function_4042f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404100(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4041b3\n    if (a2 == 0) {\n        // 0x4041d8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4041b8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4041cb\n        function_4042f0(a1);\n        // UNREACHABLE\n    }\n    // 0x40419a\n    *(int64_t *)a2 = v2;\n    return function_404100(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404200",
            "funcStartAddr": "404200",
            "funcEndAddr": "404250",
            "decompiledFuncCode": "int64_t function_404200(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404200\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40424a\n            function_4042f0(a1);\n            // UNREACHABLE\n        }\n        // 0x404222\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404100(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404235\n        *(int64_t *)a2 = 128;\n        return function_404100(0, 128);\n    }\n    // 0x404248\n    if (a2 < 0) {\n        // 0x40424a\n        function_4042f0(a1);\n        // UNREACHABLE\n    }\n    // 0x404222\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404100(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "404267",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2) {\n    // 0x404250\n    return (int64_t)memset((int64_t *)function_4040a0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404270",
            "funcStartAddr": "404270",
            "funcEndAddr": "40429e",
            "decompiledFuncCode": "int64_t function_404270(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404277\n    if ((int64_t)v1 < 0) {\n        // 0x404299\n        function_4042f0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404299\n        function_4042f0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40428a\n    if (mem != NULL) {\n        // 0x404294\n        return (int64_t)mem;\n    }\n    // 0x404299\n    function_4042f0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4042a0",
            "funcStartAddr": "4042a0",
            "funcEndAddr": "4042c8",
            "decompiledFuncCode": "int64_t function_4042a0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4040a0(a2); // 0x4042af\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042e3",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t str) {\n    // 0x4042d0\n    return function_4042a0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "404321",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1) {\n    // 0x4042f0\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "40440f",
            "decompiledFuncCode": "int64_t function_404330(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40433c\n    uint32_t v2 = *v1; // 0x40433c\n    int64_t v3 = a2 & 0xffffffff; // 0x404341\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404344\n    uint64_t v5 = (int64_t)*v4; // 0x404344\n    int64_t v6; // 0x4043b2\n    if (v3 <= v5) {\n      lab_0x4043ac_2:\n        // 0x4043ac\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404332\n    int64_t v8 = v2; // 0x404330\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4043ac\n        goto lab_0x4043ac_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404368\n    int64_t v17; // 0x404376\n    int64_t * v18; // 0x404390\n    int64_t * v19; // 0x404393\n    int64_t v20; // 0x40439e\n    int64_t v21; // 0x404376\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404373\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404390\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4043a7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4043ac\n            goto lab_0x4043ac_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4043ac\n            goto lab_0x4043ac_2;\n        }\n        // 0x404362\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4043eb\n    int64_t * v23 = (int64_t *)v22; // 0x4043f0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4043f3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4043f0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404407\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40435d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4043ac\n            goto lab_0x4043ac_2;\n        }\n        // 0x404362\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404373\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404390\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4043a7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4043ac\n                goto lab_0x4043ac_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4043ac\n                goto lab_0x4043ac_2;\n            }\n            // 0x404362\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4043d0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4043f0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404407\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4043ac\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404a2c",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40442f\n    int64_t v2 = *v1; // 0x40442f\n    char * str2 = (char *)v2; // 0x40443c\n    char c = *str2; // 0x40443c\n    int64_t v3 = v2; // 0x404468\n    int64_t v4 = 0; // 0x404410\n    int32_t v5; // 0x404410\n    int64_t v6; // 0x404410\n    int64_t v7; // 0x404410\n    int64_t v8; // 0x404410\n    int64_t v9; // 0x404410\n    int64_t v10; // 0x404410\n    int64_t v11; // 0x404410\n    int64_t v12; // 0x404410\n    int64_t v13; // 0x404410\n    int64_t str3; // 0x404410\n    int64_t v14; // 0x404410\n    int64_t v15; // 0x404410\n    int64_t v16; // 0x404410\n    int64_t v17; // 0x404410\n    int32_t v18; // 0x404410\n    int32_t v19; // 0x404410\n    int32_t v20; // 0x404410\n    int32_t v21; // 0x404410\n    int32_t v22; // 0x404410\n    int32_t v23; // 0x404410\n    int32_t v24; // 0x404410\n    int32_t v25; // 0x404410\n    int32_t v26; // 0x404410\n    int32_t v27; // 0x404410\n    int32_t v28; // 0x404410\n    int32_t v29; // 0x404410\n    int64_t nmemb; // 0x404410\n    int64_t v30; // 0x404410\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40446c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404468\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404478\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40447e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404448\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4044ac\n                int64_t v34; // 0x404410\n                int64_t v35; // 0x404410\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4044b5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404630;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4044c6\n                int64_t v37 = *(int64_t *)v36; // 0x4044ca\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4044a0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4044b5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404630;\n                        }\n                    }\n                    // 0x4044c6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404516:\n                    // 0x404516\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404570;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4046e0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404570;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404690\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40453a;\n                                } else {\n                                    // 0x40469c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40453a;\n                                    } else {\n                                        // 0x4046aa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40453a;\n                                        } else {\n                                            goto lab_0x404570;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40453a;\n                            }\n                        }\n                    }\n                }\n              lab_0x404581:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404756\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404902\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x404922\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40496f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x404989\n                            int64_t v45; // 0x40498b\n                            if (*(char *)v42 != 0) {\n                                // 0x40498b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404983\n                            while (v17 + nmemb != v42) {\n                                // 0x404985\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40498b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x404978\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4049b0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404764\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4048bf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4047b9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4047d0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40467e\n                    return 63;\n                }\n                // 0x4045a0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404624\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404630:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404640\n                    uint32_t v50 = *v49; // 0x404640\n                    int64_t v51 = v50; // 0x404640\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40464a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404653\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40487f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40482a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40467e\n                            return 63;\n                        }\n                        // 0x4046c8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4049df\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4048dd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4048f0\n                                // 0x40467e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4047ee\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404802\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40466b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40466e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404672\n                    int64_t result = v59; // 0x404678\n                    if (v58 != 0) {\n                        // 0x40467a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40467e\n                    return result;\n                }\n            } else {\n                // 0x40447e\n                v5 = v32;\n            }\n            // break -> 0x4045a5\n            break;\n        }\n    }\n    // 0x4045a5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4045bd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4045c7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40467e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404709\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4045f6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404606\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404570:\n    // 0x404570\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404570\n    int64_t v63 = *(int64_t *)v62; // 0x404574\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404581\n        goto lab_0x404581;\n    }\n    goto lab_0x404516;\n  lab_0x40453a:\n    // 0x40453a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404410\n    int32_t v65; // 0x404410\n    int32_t v66; // 0x404410\n    if (v27 != 0) {\n        goto lab_0x404570;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4046f0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404570;\n            } else {\n                goto lab_0x404561;\n            }\n        } else {\n            // 0x404555\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40484c\n                int64_t v67 = (int64_t)mem; // 0x40484c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404570;\n                } else {\n                    // 0x40485f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404561;\n                }\n            } else {\n                goto lab_0x404561;\n            }\n        }\n    }\n  lab_0x404561:\n    // 0x404561\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404570;\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404ff6",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404a51\n    if (v3 < 1) {\n        // 0x404c0e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404a4d\n    int32_t v5 = *(int32_t *)a7; // 0x404a59\n    uint64_t v6 = a1 & 0xffffffff; // 0x404a5b\n    int64_t v7 = v2; // 0x404a60\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404a63\n    *v8 = 0;\n    int64_t v9; // 0x404a30\n    int64_t v10; // 0x404a30\n    int64_t v11; // 0x404a30\n    int64_t v12; // 0x404a30\n    int64_t str; // 0x404a30\n    int64_t v13; // 0x404a30\n    int64_t v14; // 0x404a30\n    int64_t v15; // 0x404a30\n    int64_t v16; // 0x404a30\n    int64_t v17; // 0x404a30\n    int32_t v18; // 0x404a30\n    char v19; // 0x404a30\n    if (v5 == 0) {\n        // 0x404c48\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404a7a;\n    } else {\n        // 0x404a73\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404ac0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404ac3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404b88;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404ad6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404ae6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404b9c;\n                } else {\n                    goto lab_0x404af8;\n                }\n            }\n        } else {\n            goto lab_0x404a7a;\n        }\n    }\n  lab_0x404a7a:\n    // 0x404a7a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404a80\n    *v24 = 0;\n    int64_t v25; // 0x404a30\n    int64_t v26; // 0x404a30\n    int64_t v27; // 0x404a30\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404b70\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404b7d;\n        }\n        case 43: {\n            // 0x404e80\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404b7d;\n        }\n        default: {\n            // 0x404a9c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404dff\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x404f18\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404b7d;\n                } else {\n                    // 0x404e0d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404aaa;\n                }\n            } else {\n                goto lab_0x404aaa;\n            }\n        }\n    }\n  lab_0x404b88:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404b8f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404af8;\n    } else {\n        goto lab_0x404b9c;\n    }\n  lab_0x404aaa:\n    // 0x404aaa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404b7d;\n  lab_0x404b7d:\n    // 0x404b7d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404b88;\n  lab_0x404af8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404af8\n    int64_t v31 = v30; // 0x404af8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404afa\n    if ((int64_t)*v32 > v31) {\n        // 0x404aff\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404b02\n    if (*v33 > v30) {\n        // 0x404b07\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404b0a\n    int64_t v35 = v31; // 0x404b0e\n    int64_t v36 = v15; // 0x404b0e\n    int64_t v37; // 0x404a30\n    int64_t v38; // 0x404a30\n    int64_t v39; // 0x404a30\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404c78\n        int64_t v41 = v40; // 0x404c78\n        v2 = v41;\n        int64_t v42; // 0x404a30\n        if (*v33 == v40) {\n            // 0x404e60\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404e68\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404c84\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404c98\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404ca1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404caa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404cc1\n            int64_t v47 = v45 & 0xffffffff; // 0x404cc5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404cce\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404cd4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404cd6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404cb0\n            int64_t v49 = v48 & 0xffffffff; // 0x404cb0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404cc1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404cce\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404cd4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404cd6;\n                    }\n                }\n                // 0x404cb0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x404e78\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404cd6;\n    } else {\n        goto lab_0x404b14;\n    }\n  lab_0x404b9c:\n    // 0x404b9c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404b9f\n    int64_t v51 = v12; // 0x404b9f\n    int64_t v52 = v14; // 0x404b9f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404af8;\n    } else {\n        goto lab_0x404ba5;\n    }\n  lab_0x404b14:;\n    int32_t v53 = v35; // 0x404b14\n    int64_t v54; // 0x404a30\n    int64_t v55; // 0x404a30\n    int64_t v56; // 0x404a30\n    int64_t v57; // 0x404a30\n    int64_t v58; // 0x404a30\n    int64_t v59; // 0x404a30\n    char * v60; // 0x404a30\n    int64_t v61; // 0x404a30\n    int64_t v62; // 0x404b29\n    int64_t v63; // 0x404a30\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404c63\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404c66;\n    } else {\n        // 0x404b1c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404a30\n        int64_t v66 = v65 ? -1 : 1; // 0x404b30\n        int64_t v67 = (int64_t)\"--\"; // 0x404a30\n        int64_t v68 = v62; // 0x404a30\n        int64_t v69 = 3; // 0x404b30\n        unsigned char v70 = *(char *)v68; // 0x404b30\n        char v71 = *(char *)v67; // 0x404b30\n        char v72 = v71; // 0x404b30\n        bool v73 = false; // 0x404b30\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404c20\n            if (*(char *)v62 == 45) {\n                // 0x404ce0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404ce0\n                if (c == 0) {\n                    goto lab_0x404c2a;\n                } else {\n                    // 0x404ced\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404d70;\n                    } else {\n                        if (c == 45) {\n                            // 0x404f53\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404dc5;\n                        } else {\n                            // 0x404cfe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404d70;\n                            } else {\n                                // 0x404d03\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404d24;\n                                } else {\n                                    // 0x404d0a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404d70;\n                                    } else {\n                                        goto lab_0x404d24;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404c2a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404b40\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404b43\n            int64_t v77 = v35 + 1; // 0x404b46\n            int32_t v78 = v77; // 0x404b49\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x404eb0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404b57\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404b65\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404c66;\n        }\n    }\n  lab_0x404ba5:;\n    // 0x404ba5\n    int64_t v79; // bp-104, 0x404a30\n    int64_t v80 = &v79; // 0x404a3a\n    int64_t v81 = v50 + 1; // 0x404ba5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404bac\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404bb1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404bb5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404bb9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404bc1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404bc6\n    int32_t c2 = v84; // 0x404bc6\n    char * found_char_pos = strchr(str2, c2); // 0x404bc6\n    int64_t v87 = *v82; // 0x404bcb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404bd5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404be0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x404ed0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x404e9d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404c0e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404bc6\n    char v91 = *(char *)(v90 + 1); // 0x404bfb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404bb5\n        if (v91 != 58) {\n            // 0x404c0e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404e24\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x404f28\n                *v8 = 0;\n            } else {\n                // 0x404f0c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404e4e\n            *v83 = 0;\n            // 0x404c0e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404e2e\n        if (v93 != 0) {\n            // 0x404ec0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404e4e\n            *v83 = 0;\n            // 0x404c0e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404e41\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404e4e\n            *v83 = 0;\n            // 0x404c0e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x404f8a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x404f3a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x404f41\n        // 0x404e4e\n        *v83 = 0;\n        // 0x404c0e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404d99\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404d9b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x404fc0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x404f71\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x404f78\n            // 0x404c0e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404da6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404daa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404dc5;\n  lab_0x404cd6:\n    // 0x404cd6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404b14;\n  lab_0x404dc5:;\n    int64_t v99 = function_404410(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404de3\n    // 0x404c0e\n    return v99 & 0xffffffff;\n  lab_0x404c66:;\n    int32_t v100 = v55; // 0x404c66\n    if (v100 != (int32_t)v59) {\n        // 0x404c6a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404c0e\n    return 0xffffffff;\n  lab_0x404c2a:\n    // 0x404c2a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404c31\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404c0e\n    return v99 & 0xffffffff;\n  lab_0x404d70:\n    // 0x404d70\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404ba5;\n  lab_0x404d24:\n    // 0x404d24\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404410(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x404d4a\n    if ((int32_t)v101 != -1) {\n        // 0x404c0e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404d5f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404d70;\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405056",
            "decompiledFuncCode": "int64_t function_405000(int64_t a1) {\n    // 0x405000\n    *(int32_t *)&g43 = g28;\n    *(int32_t *)&g44 = g27;\n    int64_t v1; // 0x405000\n    int64_t result = function_404a30(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x405026\n    g28 = *(int32_t *)&g43;\n    g48 = g46;\n    *(int32_t *)&g26 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "405078",
            "decompiledFuncCode": "int64_t function_405060(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405060\n    return function_405000(1);\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "405093",
            "decompiledFuncCode": "int64_t function_405080(int64_t a1, int64_t a2, char * a3, char (**a4)[4], int32_t a5, int64_t a6) {\n    // 0x405080\n    return function_405000(0);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050b5",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4050a0\n    return function_404a30(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050d6",
            "decompiledFuncCode": "int64_t function_4050c0(void) {\n    // 0x4050c0\n    return function_405000(0);\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "4050f8",
            "decompiledFuncCode": "int64_t function_4050e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4050e0\n    return function_404a30(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405100",
            "funcStartAddr": "405100",
            "funcEndAddr": "40517a",
            "decompiledFuncCode": "int64_t function_405100(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40510b\n    int64_t v2 = (int64_t)&g2; // 0x40510b\n    int32_t * pwc; // 0x405100\n    int64_t v3; // 0x405100\n    int64_t n; // 0x405100\n    if (a2 == 0) {\n        goto lab_0x405152;\n    } else {\n        // 0x40510d\n        if (a3 == 0) {\n            // 0x405138\n            return -2;\n        }\n        // 0x405119\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405152;\n        } else {\n            goto lab_0x405124;\n        }\n    }\n  lab_0x405152:\n    // 0x405152\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405100\n    pwc = (int32_t *)&v4;\n    goto lab_0x405124;\n  lab_0x405124:;\n    char * wstr = (char *)v3; // 0x40512a\n    int64_t ps; // 0x405100\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40512a\n    int64_t result = v5; // 0x40512a\n    if (v5 < 0xfffffffe) {\n        // 0x405138\n        return result;\n    }\n    int64_t result2 = result; // 0x405169\n    if ((char)function_4051e0(0, v3) == 0) {\n        // 0x40516b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405138\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051dd",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405187\n    int64_t v2; // 0x405180\n    int64_t result = function_4057b0(a1, v2); // 0x405198\n    if ((v2 & 32) != 0) {\n        // 0x4051c0\n        if ((int32_t)result == 0) {\n            // 0x4051c4\n            *__errno_location() = 0;\n        }\n        // 0x4051ba\n        return 0xffffffff;\n    }\n    // 0x4051a1\n    if ((int32_t)result == 0) {\n        // 0x4051ba\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4051a8\n    if (v1 == 0) {\n        // 0x4051aa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4051ba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "40523e",
            "decompiledFuncCode": "int64_t function_4051e0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4051e6\n    if (locale == NULL) {\n        // 0x405213\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4051e6\n    bool v2; // 0x4051e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x4051e0\n    int64_t v5 = v1; // 0x4051e0\n    int64_t v6 = 2; // 0x405205\n    unsigned char v7 = *(char *)v5; // 0x405205\n    char v8 = *(char *)v4; // 0x405205\n    char v9 = v8; // 0x405205\n    bool v10 = false; // 0x405205\n    while (v7 == v8) {\n        // 0x4051f8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405211\n    int64_t v13 = v1; // 0x405211\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405213\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405211\n    unsigned char v15 = *(char *)v13; // 0x40522d\n    char v16 = *(char *)v12; // 0x40522d\n    char v17 = v16; // 0x40522d\n    bool v18 = false; // 0x40522d\n    while (v15 == v16) {\n        // 0x405220\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "4057a2",
            "decompiledFuncCode": "int64_t function_405240(void) {\n    char * v1 = nl_langinfo(14); // 0x405256\n    char * v2 = g47; // 0x40525b\n    char * v3; // 0x405240\n    int64_t v4; // 0x405240\n    int64_t v5; // 0x405240\n    int64_t v6; // 0x405240\n    int64_t v7; // 0x405240\n    int32_t size; // 0x405240\n    int32_t size2; // 0x405240\n    int32_t len; // 0x405312\n    int64_t v8; // 0x405312\n    char * env_val; // 0x4052fd\n    if (v2 == NULL) {\n        // 0x4052f8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405365;\n        } else {\n            // 0x40530a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405365;\n            } else {\n                // 0x40530f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4052fd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405795\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405365;\n                    } else {\n                        // 0x405709\n                        size2 = len + 14;\n                        goto lab_0x40532b;\n                    }\n                } else {\n                    goto lab_0x40532b;\n                }\n            }\n        }\n    } else {\n        // 0x405240\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40527a;\n    }\n  lab_0x4055ac:;\n    // 0x4055ac\n    struct _IO_FILE * stream; // 0x4053eb\n    int32_t v10 = __uflow(stream); // 0x4055af\n    int64_t v11; // 0x405240\n    int64_t v12 = v11; // 0x4055b9\n    int64_t v13; // 0x405240\n    int64_t v14 = v13; // 0x4055b9\n    int32_t v15 = v10; // 0x4055b9\n    int64_t v16; // 0x405240\n    int64_t v17 = v16; // 0x4055b9\n    int64_t v18 = v11; // 0x4055b9\n    int64_t v19 = v13; // 0x4055b9\n    int64_t v20 = v16; // 0x4055b9\n    if (v10 == -1) {\n        // break -> 0x4055bf\n        goto lab_0x4055bf;\n    }\n    goto lab_0x405439;\n  lab_0x40542e:;\n    // 0x40542e\n    int64_t v90; // 0x405240\n    int64_t * v32; // 0x405420\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405240\n    v12 = v89;\n    int64_t v91; // 0x405240\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405240\n    v17 = v92;\n    goto lab_0x405439;\n  lab_0x405439:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405240\n    int32_t v25; // bp-120, 0x405240\n    int32_t v26; // bp-184, 0x405240\n    int64_t v27; // 0x4053eb\n    int64_t v28; // 0x405408\n    int64_t v29; // 0x40540d\n    int64_t * v30; // 0x405424\n    switch (c) {\n        case 32: {\n            goto lab_0x405420;\n        }\n        case 10: {\n            goto lab_0x405420;\n        }\n        case 9: {\n            goto lab_0x405420;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405611\n            int32_t v33; // 0x405240\n            char v34; // 0x405240\n            int32_t v35; // 0x40561e\n            if (v31 < *v30) {\n                // 0x4055f0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40561b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405611\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4055f0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40561b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405600\n                v36 = v33;\n            }\n            // 0x4056ef\n            if (v36 == -1) {\n                // break -> 0x4055bf\n                break;\n            }\n            goto lab_0x405420;\n        }\n        default: {\n            // 0x40544f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4055bf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405478\n            int64_t v39 = v37 + 4; // 0x40547a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405486\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405488\n            while (v41 == 0) {\n                // 0x405478\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4054a6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4054b2\n            int64_t v45 = v43 + 4; // 0x4054b4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4054c0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4054c2\n            while (v47 == 0) {\n                // 0x4054b2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4054af\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4054d8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4054e8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4054ec\n            int64_t v52 = v51 + v48; // 0x4054f5\n            int64_t * mem; // 0x405240\n            int64_t v53; // 0x405240\n            int64_t v54; // 0x405240\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40562b\n                int64_t v56 = v55 + 3; // 0x405637\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405511\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405520\n            if (mem == NULL) {\n                // 0x40574c\n                free((int64_t *)v21);\n                function_4057b0(v27, v53);\n                v24 = (int64_t)&g2;\n                goto lab_0x4053c4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405538\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405542\n            uint32_t v62 = (int32_t)v59; // 0x405545\n            int64_t v63; // 0x405240\n            if (v62 >= 8) {\n                // 0x405654\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40566e\n                int64_t v66 = v61 - v65; // 0x405672\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40567d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40568e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40568e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40568b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40571f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405557\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40555b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40556b\n            int64_t v74 = v60 - 1; // 0x40556f\n            uint32_t v75 = (int32_t)v73; // 0x405574\n            int64_t v76; // 0x405240\n            if (v75 >= 8) {\n                // 0x4056a2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4056ac\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4056bc\n                int64_t v80 = v74 - v79; // 0x4056c0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4056cb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4056db\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4056d9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405736\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40573e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405586\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40558a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405783\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40559e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40542e;\n            } else {\n                goto lab_0x4055ac;\n            }\n        }\n    }\n  lab_0x405420:;\n    int64_t v93 = v23; // 0x405240\n    int64_t v94 = v22; // 0x405240\n    int64_t v95 = v21; // 0x405240\n    goto lab_0x405420_2;\n  lab_0x405365:;\n    int64_t * mem3 = malloc(size); // 0x405365\n    int64_t v97 = (int64_t)&g2; // 0x405370\n    int64_t v98; // 0x405240\n    int64_t path; // 0x405240\n    if (mem3 == NULL) {\n        goto lab_0x405342;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405365\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405386;\n    }\n  lab_0x40527a:;\n    int64_t str = v1 == NULL ? (int64_t)&g2 : (int64_t)v1; // 0x40526d\n    char v100 = *v3; // 0x40527a\n    int64_t v101; // 0x405240\n    if (v100 == 0) {\n        // 0x4052d4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405240\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405240\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4052c0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4052c7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405290\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40529d\n        char v107 = *(char *)v106; // 0x4052a2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4052d4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4052ab\n    v104 = v103 + 1;\n  lab_0x4052c7:\n    // 0x4052d4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405342:;\n    char * v108 = (char *)v97;\n    g47 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40527a;\n  lab_0x405386:;\n    int64_t v109 = v98 + path; // 0x405386\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4053b2\n    v24 = (int64_t)&g2;\n    if (fd >= 0) {\n        // 0x4053e1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405712\n            close(fd);\n            v24 = (int64_t)&g2;\n        } else {\n            // 0x405405\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405420_2:;\n                uint64_t v96 = *v32; // 0x405420\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4055ac;\n                } else {\n                    goto lab_0x40542e;\n                }\n            }\n          lab_0x4055bf:\n            // 0x4055bf\n            function_4057b0(v27, v19);\n            v24 = (int64_t)&g2;\n            if (v18 != 0) {\n                // 0x4055de\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4053c4;\n  lab_0x40532b:;\n    int64_t * mem4 = malloc(size2); // 0x40532b\n    v97 = (int64_t)&g2;\n    if (mem4 != NULL) {\n        // 0x4053d1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405386;\n    } else {\n        goto lab_0x405342;\n    }\n  lab_0x4053c4:\n    // 0x4053c4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405342;\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "40582b",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4057b7\n    if (fileno(stream) < 0) {\n        // 0x405817\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4057ca\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4057fb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405817\n            return fclose(stream);\n        }\n    }\n    // 0x4057cc\n    if ((int32_t)function_405830(a1, v1) == 0) {\n        // 0x405817\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4057d8\n    int32_t v3 = *v2; // 0x4057e0\n    int64_t result = fclose(stream); // 0x4057ee\n    if (v3 != 0) {\n        // 0x405820\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4057f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405870",
            "decompiledFuncCode": "int64_t function_405830(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40584a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40584a\n        return fflush(stream);\n    }\n    // 0x405858\n    function_405870(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "4058c7",
            "decompiledFuncCode": "int64_t function_405870(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405870\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40587a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4058ab\n    int64_t result = -1; // 0x4058b4\n    if (v1 != -1) {\n        // 0x4058b6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4058c2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "40592d",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4058d0\n    return function_401270();\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "405931",
            "decompiledFuncCode": "int64_t function_405930(void) {\n    // 0x405930\n    int64_t result; // 0x405930\n    return result;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405958",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405940\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_405958",
            "funcStartAddr": "405958",
            "funcEndAddr": "405978",
            "decompiledFuncCode": "int64_t function_405958(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x405962\n    while (*(int64_t *)v1 != -1) {\n        // 0x405963\n        v1 -= 8;\n    }\n    // 0x405974\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_uname.elf"
}