{
    "funcInfo": [
        {
            "funcName": "function_4016d0",
            "funcStartAddr": "4016d0",
            "funcEndAddr": "4016d5",
            "decompiledFuncCode": "int64_t function_4016d0(void) {\n    // 0x4016d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016d5",
            "funcStartAddr": "4016d5",
            "funcEndAddr": "4016da",
            "decompiledFuncCode": "int64_t function_4016d5(void) {\n    // 0x4016d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016da",
            "funcStartAddr": "4016da",
            "funcEndAddr": "4016df",
            "decompiledFuncCode": "int64_t function_4016da(void) {\n    // 0x4016da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016df",
            "funcStartAddr": "4016df",
            "funcEndAddr": "4016e4",
            "decompiledFuncCode": "int64_t function_4016df(void) {\n    // 0x4016df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e4",
            "funcStartAddr": "4016e4",
            "funcEndAddr": "4016e9",
            "decompiledFuncCode": "int64_t function_4016e4(void) {\n    // 0x4016e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e9",
            "funcStartAddr": "4016e9",
            "funcEndAddr": "4016ee",
            "decompiledFuncCode": "int64_t function_4016e9(void) {\n    // 0x4016e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016f0",
            "funcStartAddr": "4016f0",
            "funcEndAddr": "402056",
            "decompiledFuncCode": "int64_t function_4016f0(int64_t a1, int64_t a2) {\n    // 0x4016f0\n    int64_t v1; // 0x4016f0\n    int64_t v2 = v1;\n    function_4025c0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_4068b0(0x402520, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int64_t v3; // 0x4016f0\n    int64_t v4; // 0x4016f0\n    while (true) {\n        // 0x401745\n        v3 = 0;\n        v4 = 0;\n        while (true) {\n          lab_0x401745_2:;\n            // 0x401745\n            int64_t v5; // 0x4016f0\n            int64_t v6 = function_405ff0(a1 & 0xffffffff, a2, \"cor:s:\", &g2, 0, v5); // 0x401758\n            uint32_t v7 = (int32_t)v6;\n            switch (v7) {\n                case -1: {\n                    goto lab_0x4019b2;\n                }\n                case 99: {\n                    // 0x401918\n                    g35 = 1;\n                    goto lab_0x401745_2;\n                }\n                default: {\n                    if (v7 <= 99) {\n                        if (v7 == -131) {\n                            // 0x40189f\n                            function_404660((int64_t)g28, \"truncate\", \"GNU coreutils\", (int64_t)g17, \"Padraig Brady\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v7 == -130) {\n                            // 0x4018d5\n                            function_402140(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x401889;\n                    }\n                    if (v7 == 114) {\n                        // 0x401900\n                        *(int64_t *)&g33 = (int64_t)g48;\n                    } else {\n                        if (v7 == 115) {\n                            // break -> 0x401787\n                            break;\n                        }\n                        if (v7 != 111) {\n                            // 0x401889\n                            function_402140(1);\n                            // UNREACHABLE\n                        }\n                        // 0x401928\n                        g34 = 1;\n                    }\n                    goto lab_0x401745_2;\n                }\n            }\n        }\n    }\n  lab_0x4019b2:;\n    int32_t v8 = *(int32_t *)0x60a25c; // 0x4019b2\n    int64_t v9 = v8; // 0x4019b2\n    int64_t v10 = 8 * v9 + a2; // 0x4019c0\n    int32_t v11 = (int32_t)a1 - v8; // 0x4019c4\n    int64_t v12; // 0x4016f0\n    int64_t v13; // 0x4016f0\n    int64_t v14; // 0x4016f0\n    int64_t v15; // 0x4016f0\n    int64_t v16; // 0x4016f0\n    int64_t v17; // bp-200, 0x4016f0\n    int64_t v18; // 0x4016f0\n    int32_t v19; // 0x4016f0\n    char v20; // 0x4016f0\n    int32_t v21; // 0x4016f0\n    if (g33 == NULL) {\n        // 0x401e6e\n        v16 = v9;\n        if (v3 == 0) {\n            goto lab_0x401ffa;\n        } else {\n            // 0x401e77\n            v18 = -1;\n            v13 = v12;\n            if (v11 < 1) {\n                goto lab_0x401bb0;\n            } else {\n                goto lab_0x401abd;\n            }\n        }\n    } else {\n        if (v3 != 0 && (int32_t)v4 == 0) {\n            // 0x4019d9\n            function_4041c0(1, \"--reference\", v8);\n            function_4041c0(0, \"--size\", v8);\n            // 0x401a3f\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify a relative %s with %s\", 5));\n          lab_0x401889:\n            // 0x401889\n            function_402140(1);\n            // UNREACHABLE\n        }\n        // 0x401a06\n        if (v3 == 0 == g34 == 1) {\n            // 0x401a14\n            function_4041c0(1, \"--size\", v8);\n            function_4041c0(0, \"--io-blocks\", v8);\n            // 0x401a3f\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"%s was specified but %s was not\", 5));\n            // 0x401889\n            function_402140(1);\n            // UNREACHABLE\n        }\n        // 0x401a5f\n        if (v11 < 1) {\n            goto lab_0x401bb0;\n        } else {\n            // 0x401a68\n            if (__xstat(1, g33, (struct stat *)&v17) != 0) {\n                // 0x401fbd\n                function_403f90(4, (int64_t)g33);\n                char * format = dcgettext(NULL, \"cannot stat %s\", 5); // 0x401fd9\n                error(1, *__errno_location(), format);\n                v16 = (int64_t)format;\n                goto lab_0x401ffa;\n            } else {\n                if ((v21 & 0xd000) != 0x8000) {\n                    int32_t fd = open(g33, O_RDONLY); // 0x401eda\n                    int64_t v22 = fd; // 0x401edf\n                    int32_t * v23 = __errno_location(); // 0x401ee2\n                    v14 = v22;\n                    if (fd < 0) {\n                        goto lab_0x401f27;\n                    } else {\n                        char v24 = lseek(fd, 0, SEEK_END); // 0x401f01\n                        int32_t v25 = *v23; // 0x401f06\n                        close(fd);\n                        v15 = v24;\n                        if (v24 >= 0) {\n                            goto lab_0x401aa4;\n                        } else {\n                            // 0x401f20\n                            *v23 = v25;\n                            v20 = v24;\n                            v19 = v25;\n                            v14 = v22;\n                            goto lab_0x401f27;\n                        }\n                    }\n                } else {\n                    // 0x401a96\n                    v14 = v11;\n                    if (v1 < 0) {\n                        goto lab_0x401f27;\n                    } else {\n                        goto lab_0x401aa4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401bb0:\n    // 0x401bb0\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing file operand\", 5));\n    function_402140(1);\n    // UNREACHABLE\n  lab_0x401ffa:;\n    int32_t v26 = v16; // 0x402004\n    function_4041c0(1, \"--reference\", v26);\n    function_4041c0(0, \"--size\", v26);\n    // 0x401a3f\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify either %s or %s\", 5));\n    // 0x401889\n    function_402140(1);\n    // UNREACHABLE\n  lab_0x401abd:;\n    int64_t v27 = v18; // 0x401adc\n    char v28 = 0; // 0x401adc\n    int64_t v29 = v13; // 0x401adc\n    int32_t v30 = g35 == 0 ? 2113 : 2049; // 0x401adc\n    int64_t v31 = v4; // 0x401adc\n    int64_t v32 = v10; // 0x401adc\n    goto lab_0x401ae0;\n  lab_0x401ae0:;\n    int64_t v33 = v31;\n    int32_t oflag = v30;\n    int64_t v34 = v29;\n    int64_t v35 = v27;\n    char v36 = v28; // 0x4016f0\n    int64_t v37 = v32; // 0x4016f0\n    int32_t v38; // 0x4016f0\n    int64_t v39; // 0x4016f0\n    int64_t v40; // 0x4016f0\n    char result; // 0x4016f0\n    int64_t path; // 0x401ae4\n    int64_t v41; // 0x401ae0\n    uint32_t fd2; // 0x401b00\n    int64_t v42; // 0x401b05\n    while (true) {\n        // 0x401ae0\n        result = v36;\n        path = *(int64_t *)v37;\n        if (path == 0) {\n            // break (via goto) -> 0x401de6\n            goto lab_0x401de6;\n        }\n        // 0x401af2\n        v41 = v37 + 8;\n        fd2 = open((char *)path, oflag);\n        int32_t v43; // 0x4016f0\n        uint64_t v44; // 0x401cd6\n        int32_t v45; // 0x401b3e\n        if (fd2 != -1) {\n            // 0x401b11\n            v42 = fd2;\n            if (g34 != 0) {\n                // 0x401ca2\n                if (__fxstat(1, fd2, (struct stat *)&v17) != 0) {\n                    // 0x401b4b\n                    function_403f90(4, path);\n                    goto lab_0x401b65;\n                } else {\n                    // 0x401cbb\n                    v44 = v2 < 0x2000000000000001 ? v2 : 512;\n                    if (v34 < (int64_t)(-0x8000000000000000 / (int128_t)v44)) {\n                        goto lab_0x401d13;\n                    } else {\n                        if (0x7fffffffffffffff / v44 < v34) {\n                            goto lab_0x401d13;\n                        } else {\n                            // 0x401cef\n                            v38 = v33;\n                            v39 = v34 * v44;\n                            goto lab_0x401c2b;\n                        }\n                    }\n                }\n            } else {\n                // 0x401b1e\n                v43 = v33;\n                v38 = v43;\n                v39 = v34;\n                if (v35 >= 0 || v43 == 0) {\n                    goto lab_0x401c2b;\n                } else {\n                    // 0x401b32\n                    v45 = __fxstat(1, fd2, (struct stat *)&v17);\n                    v40 = v34;\n                    if (v45 == 0) {\n                        goto lab_0x401e02;\n                    } else {\n                        // 0x401b4b\n                        function_403f90(4, path);\n                        goto lab_0x401b65;\n                    }\n                }\n            }\n        }\n        int32_t * err_num = __errno_location(); // 0x401bcf\n        while (g35 != 0) {\n            int64_t v46 = v41; // 0x401be3\n            if (*err_num != 2) {\n                // break -> 0x401be9\n                break;\n            }\n            path = *(int64_t *)v46;\n            if (path == 0) {\n                // break (via goto) -> 0x401de6\n                goto lab_0x401de6;\n            }\n            // 0x401af2\n            v41 = v46 + 8;\n            fd2 = open((char *)path, oflag);\n            if (fd2 != -1) {\n                // 0x401b11\n                v42 = fd2;\n                if (g34 != 0) {\n                    // 0x401ca2\n                    if (__fxstat(1, fd2, (struct stat *)&v17) != 0) {\n                        // 0x401b4b\n                        function_403f90(4, path);\n                        goto lab_0x401b65;\n                    } else {\n                        // 0x401cbb\n                        v44 = v2 < 0x2000000000000001 ? v2 : 512;\n                        if (v34 < (int64_t)(-0x8000000000000000 / (int128_t)v44)) {\n                            goto lab_0x401d13;\n                        } else {\n                            if (0x7fffffffffffffff / v44 < v34) {\n                                goto lab_0x401d13;\n                            } else {\n                                // 0x401cef\n                                v38 = v33;\n                                v39 = v34 * v44;\n                                goto lab_0x401c2b;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401b1e\n                    v43 = v33;\n                    v38 = v43;\n                    v39 = v34;\n                    if (v35 >= 0 || v43 == 0) {\n                        goto lab_0x401c2b;\n                    } else {\n                        // 0x401b32\n                        v45 = __fxstat(1, fd2, (struct stat *)&v17);\n                        v40 = v34;\n                        if (v45 == 0) {\n                            goto lab_0x401e02;\n                        } else {\n                            // 0x401b4b\n                            function_403f90(4, path);\n                            goto lab_0x401b65;\n                        }\n                    }\n                }\n            }\n            // 0x401bcf\n            err_num = __errno_location();\n        }\n        // 0x401be9\n        function_403f90(4, path);\n        error(0, *err_num, dcgettext(NULL, \"cannot open %s for writing\", 5));\n        v36 = 1;\n        v37 = v41;\n    }\n  lab_0x401de6:\n    // 0x401de6\n    return result;\n  lab_0x401f27:;\n    int64_t v47 = function_403f90(4, (int64_t)g33); // 0x401f33\n    char * format2 = dcgettext(NULL, \"cannot get the size of %s\", 5); // 0x401f47\n    error(1, *__errno_location(), format2);\n    int128_t v48; // 0x4016f0\n    int64_t v49 = v48; // 0x401f63\n    char v50 = v20; // 0x401f63\n    int64_t v51 = v48; // 0x401f63\n    int32_t v52 = v19; // 0x401f63\n    int64_t v53 = &g52; // 0x401f63\n    int64_t v54 = (int64_t)format2; // 0x401f63\n    int64_t v55 = v47; // 0x401f63\n    int64_t v56 = v10; // 0x401f63\n    int64_t v57 = v12; // 0x401f63\n    int64_t v58 = v14; // 0x401f63\n    goto lab_0x401f68;\n  lab_0x401aa4:\n    // 0x401aa4\n    v18 = v3 == 0 ? -1 : v15;\n    v13 = v3 == 0 ? v15 : v12;\n    goto lab_0x401abd;\n  lab_0x401f68:;\n    int64_t v59 = v57;\n    int64_t v60 = v56;\n    int64_t v61 = v55;\n    int64_t v62 = v54;\n    int32_t v63 = v52;\n    int64_t v64 = v51;\n    char v65 = v50;\n    int64_t v66 = v49;\n    uint64_t v67 = v53 - 1 + v58; // 0x401f68\n    int64_t v68 = v67 - v67 % v58; // 0x401f72\n    int64_t v69 = v66; // 0x401f79\n    char v70 = v65; // 0x401f79\n    int64_t v71 = v64; // 0x401f79\n    int32_t v72 = v63; // 0x401f79\n    int64_t v73 = v62; // 0x401f79\n    int64_t v74 = v61; // 0x401f79\n    int64_t v75 = v60; // 0x401f79\n    int64_t v76 = v59; // 0x401f79\n    int64_t length = v68; // 0x401f79\n    int64_t v77; // 0x4016f0\n    int64_t v78; // 0x4016f0\n    int64_t v79; // 0x4016f0\n    int64_t v80; // 0x4016f0\n    int64_t v81; // 0x4016f0\n    int64_t v82; // 0x4016f0\n    int64_t v83; // 0x4016f0\n    int32_t v84; // 0x4016f0\n    char v85; // 0x4016f0\n    if (v68 >= 0) {\n        goto lab_0x401c3f;\n    } else {\n        // 0x401f7f\n        function_403f90(4, v61);\n        v82 = v66;\n        v85 = v65;\n        v83 = v64;\n        v84 = v63;\n        v80 = v62;\n        v79 = v61;\n        v81 = (int64_t)\"overflow rounding up size of file %s\";\n        v77 = v60;\n        v78 = v59;\n        goto lab_0x401e36;\n    }\n  lab_0x401c3f:;\n    int64_t fd3 = v76;\n    int64_t v86 = v75;\n    int64_t v87 = v74;\n    int64_t v88 = v73;\n    int32_t v89 = v72;\n    int64_t v90 = v71;\n    char v91 = v70;\n    int64_t v92 = v69;\n    int32_t v93 = ftruncate((int32_t)fd3, (int32_t)length); // 0x401c4b\n    int64_t v94 = v92; // 0x401c53\n    char v95 = v91; // 0x401c53\n    int64_t v96 = v90; // 0x401c53\n    int32_t v97 = v89; // 0x401c53\n    int64_t v98 = v88; // 0x401c53\n    int64_t v99 = v87; // 0x401c53\n    int64_t v100 = v86; // 0x401c53\n    int64_t fd4 = fd3; // 0x401c53\n    char v101 = 0; // 0x401c53\n    if (v93 == -1) {\n        // 0x401c59\n        function_403f90(4, v87);\n        error(0, *__errno_location(), dcgettext(NULL, \"failed to truncate %s at %ld bytes\", 5));\n        v94 = v92;\n        v95 = v91;\n        v96 = v90;\n        v97 = v89;\n        v98 = v88;\n        v99 = v87;\n        v100 = v86;\n        fd4 = fd3;\n        v101 = 1;\n    }\n    goto lab_0x401b88;\n  lab_0x401b88:;\n    int64_t v102 = v100;\n    int64_t v103 = v98;\n    int32_t v104 = v97;\n    int64_t v105 = v96;\n    int64_t v106 = v94;\n    if (close((int32_t)fd4) != 0) {\n        // 0x401d55\n        function_403f90(4, v99);\n        error(0, *__errno_location(), dcgettext(NULL, \"failed to close %s\", 5));\n        v27 = v106;\n        v28 = 1;\n        v29 = v105;\n        v30 = v104;\n        v31 = v103;\n        v32 = v102;\n    } else {\n        // 0x401b98\n        v27 = v106;\n        v28 = v101 | v95;\n        v29 = v105;\n        v30 = v104;\n        v31 = v103;\n        v32 = v102;\n    }\n    goto lab_0x401ae0;\n  lab_0x401e36:\n    // 0x401e36\n    error(0, 0, dcgettext(NULL, (char *)v81, 5));\n    v94 = v82;\n    v95 = v85;\n    v96 = v83;\n    v97 = v84;\n    v98 = v80;\n    v99 = v79;\n    v100 = v77;\n    fd4 = v78;\n    v101 = 1;\n    goto lab_0x401b88;\n  lab_0x401c2b:;\n    int64_t v107 = v39;\n    int64_t v108 = v107; // 0x401c2d\n    int64_t v109; // 0x4016f0\n    int64_t v110; // 0x4016f0\n    if (v38 != 0) {\n        // 0x401d99\n        v110 = v35;\n        v109 = v107;\n        v40 = v107;\n        if (v35 == -1) {\n            goto lab_0x401e02;\n        } else {\n            goto lab_0x401da4;\n        }\n    } else {\n        goto lab_0x401c33;\n    }\n  lab_0x401b65:\n    // 0x401b65\n    error(0, *__errno_location(), dcgettext(NULL, (char *)(int64_t)\"cannot fstat %s\", 5));\n    v94 = v35;\n    v95 = result;\n    v96 = v34;\n    v97 = oflag;\n    v98 = v33;\n    v99 = path;\n    v100 = v41;\n    fd4 = v42;\n    v101 = 1;\n    goto lab_0x401b88;\n  lab_0x401d13:\n    // 0x401d13\n    function_403f90(4, path);\n    error(0, (int32_t)\"overflow in %ld * %ld byte blocks for file %s\" ^ (int32_t)\"overflow in %ld * %ld byte blocks for file %s\", dcgettext(NULL, \"overflow in %ld * %ld byte blocks for file %s\", 5));\n    v94 = v35;\n    v95 = result;\n    v96 = v34;\n    v97 = oflag;\n    v98 = v33;\n    v99 = path;\n    v100 = v41;\n    fd4 = v42;\n    v101 = 1;\n    goto lab_0x401b88;\n  lab_0x401c33:;\n    int64_t v111 = v108;\n    v69 = v35;\n    v70 = result;\n    v71 = v34;\n    v72 = oflag;\n    v73 = v33;\n    v74 = path;\n    v75 = v41;\n    v76 = v42;\n    length = v111 > 0 ? v111 : 0;\n    goto lab_0x401c3f;\n  lab_0x401e02:\n    // 0x401e02\n    if ((v21 & 0xd000) != 0x8000) {\n        int32_t v112 = lseek(fd2, 0, SEEK_END); // 0x401e98\n        v110 = v112;\n        int64_t v113; // 0x4016f0\n        v109 = v113;\n        if (v112 >= 0) {\n            goto lab_0x401da4;\n        } else {\n            // 0x401ea6\n            function_403f90(4, path);\n            goto lab_0x401b65;\n        }\n    } else {\n        // 0x401e12\n        v109 = v40;\n        if (v1 >= 0) {\n            goto lab_0x401da4;\n        } else {\n            // 0x401e1c\n            function_403f90(4, path);\n            v82 = v35;\n            v85 = result;\n            v83 = v34;\n            v84 = oflag;\n            v80 = v33;\n            v79 = path;\n            v81 = (int64_t)\"%s has unusable, apparently negative size\";\n            v77 = v41;\n            v78 = v42;\n            goto lab_0x401e36;\n        }\n    }\n  lab_0x401da4:;\n    uint64_t v114 = v109;\n    uint64_t v115 = v110;\n    v49 = v35;\n    v50 = result;\n    v51 = v34;\n    v52 = oflag;\n    v53 = v115;\n    v54 = v33;\n    v55 = path;\n    v56 = v41;\n    v57 = v42;\n    v58 = v114;\n    switch ((int32_t)v33) {\n        case 2: {\n            // 0x401e56\n            v108 = v114 < v115 ? v115 : v114;\n            goto lab_0x401c33;\n        }\n        case 3: {\n            // 0x401e62\n            v69 = v35;\n            v70 = result;\n            v71 = v34;\n            v72 = oflag;\n            v73 = v33;\n            v74 = path;\n            v75 = v41;\n            v76 = v42;\n            length = v114 > v115 ? v115 : v114;\n            goto lab_0x401c3f;\n        }\n        case 4: {\n            // 0x401ec5\n            v108 = v115 - v115 % v114;\n            goto lab_0x401c33;\n        }\n        case 5: {\n            goto lab_0x401f68;\n        }\n        default: {\n            if (0x7fffffffffffffff - v115 < v114) {\n                // 0x401f9e\n                function_403f90(4, path);\n                v82 = v35;\n                v85 = result;\n                v83 = v34;\n                v84 = oflag;\n                v80 = v33;\n                v79 = path;\n                v81 = (int64_t)\"overflow extending size of file %s\";\n                v77 = v41;\n                v78 = v42;\n                goto lab_0x401e36;\n            } else {\n                // 0x401dde\n                v108 = v114 + v115;\n                goto lab_0x401c33;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402060",
            "funcEndAddr": "40208b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402060\n    int64_t v1; // 0x402060\n    __libc_start_main(0x4016f0, (int32_t)a4, (char **)&v1, (void (*)())0x406840, (void (*)())0x4068a0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40208b",
            "funcStartAddr": "40208b",
            "funcEndAddr": "4020aa",
            "decompiledFuncCode": "int64_t function_40208b(void) {\n    // 0x40208b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_4020aa",
            "funcStartAddr": "4020aa",
            "funcEndAddr": "4020e1",
            "decompiledFuncCode": "int64_t function_4020aa(void) {\n    // 0x4020aa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4020e1",
            "funcStartAddr": "4020e1",
            "funcEndAddr": "402138",
            "decompiledFuncCode": "int64_t function_4020e1(void) {\n    // 0x4020e1\n    if (g31 != 0) {\n        // 0x402137\n        int64_t result; // 0x4020e1\n        return result;\n    }\n    int64_t v1 = g32; // 0x402114\n    int64_t result2; // 0x402126\n    if (g32 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402126\n        result2 = function_40208b();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402116\n        v1++;\n    }\n    // 0x40210a\n    g32 = v1;\n    // 0x402126\n    result2 = function_40208b();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402138",
            "funcStartAddr": "402138",
            "funcEndAddr": "40213d",
            "decompiledFuncCode": "int64_t function_402138(void) {\n    // 0x402138\n    return function_4020aa();\n}\n"
        },
        {
            "funcName": "function_402140",
            "funcStartAddr": "402140",
            "funcEndAddr": "4024fd",
            "decompiledFuncCode": "int64_t function_402140(int64_t a1) {\n    int32_t status = a1; // 0x402156\n    if (status != 0) {\n        // 0x40215a\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40217f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402186\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s OPTION... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Shrink or extend the size of each FILE to the specified size\\n\\nA FILE argument that does not exist is created.\\n\\nIf a FILE is larger than the specified size, the extra data is lost.\\nIf a FILE is shorter, it is extended and the extended part (hole)\\nreads as zero bytes.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --no-create        do not create any files\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -o, --io-blocks        treat SIZE as number of IO blocks instead of bytes\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -r, --reference=RFILE  base size on RFILE\\n  -s, --size=SIZE        set or adjust the file size by SIZE bytes\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nSIZE may also be prefixed by one of the following modifying characters:\\n'+' extend by, '-' reduce by, '<' at most, '>' at least,\\n'/' round down to multiple of, '%' round up to multiple of.\\n\", 5), g28);\n    int64_t v1 = &g1; // bp-136, 0x4022df\n    bool v2; // 0x402140\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402360\n    int64_t v6 = *(int64_t *)v5; // 0x402364\n    int64_t v7 = 9; // 0x40236a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"truncate\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402376\n        char v11 = *(char *)v9; // 0x402376\n        char v12 = v11; // 0x402376\n        bool v13 = false; // 0x402376\n        while (v10 == v11) {\n            // 0x40236c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402376\n            int64_t v15 = v8 + v3; // 0x402376\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402382\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 9;\n    }\n    // 0x402382\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402494;\n        } else {\n            // 0x40247e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4024d3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4023e4;\n            } else {\n                goto lab_0x402494;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4023e4;\n        } else {\n            // 0x4023ca\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4024d3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4023e4;\n            } else {\n                goto lab_0x4023e4;\n            }\n        }\n    }\n  lab_0x402494:\n    // 0x402494\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402424\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40217f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4023e4:\n    // 0x4023e4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402424\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40217f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402500",
            "funcStartAddr": "402500",
            "funcEndAddr": "402508",
            "decompiledFuncCode": "int64_t function_402500(int64_t a1) {\n    // 0x402500\n    g37 = a1;\n    int64_t result; // 0x402500\n    return result;\n}\n"
        },
        {
            "funcName": "function_402510",
            "funcStartAddr": "402510",
            "funcEndAddr": "402518",
            "decompiledFuncCode": "int64_t function_402510(int64_t a1) {\n    // 0x402510\n    g36 = a1;\n    int64_t result; // 0x402510\n    return result;\n}\n"
        },
        {
            "funcName": "function_402520",
            "funcStartAddr": "402520",
            "funcEndAddr": "4025be",
            "decompiledFuncCode": "int64_t function_402520(void) {\n    // 0x402520\n    int32_t * err_num; // 0x402536\n    if ((int32_t)function_4060f0((int64_t)g28) == 0) {\n        goto lab_0x40254c;\n    } else {\n        // 0x402536\n        err_num = __errno_location();\n        if (g36 == 0) {\n            goto lab_0x402563;\n        } else {\n            // 0x402547\n            if (*err_num != 32) {\n                goto lab_0x402563;\n            } else {\n                goto lab_0x40254c;\n            }\n        }\n    }\n  lab_0x40254c:;\n    int64_t result = function_4060f0((int64_t)g30); // 0x402553\n    if ((int32_t)result == 0) {\n        // 0x40255c\n        return result;\n    }\n    // 0x40259e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x402563:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40256f\n    if (g37 == 0) {\n        // 0x4025a9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402583\n        error(0, *err_num, \"%s: %s\", (char *)function_404030((int64_t)g37), v1);\n    }\n    // 0x40259e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4025c0",
            "funcStartAddr": "4025c0",
            "funcEndAddr": "402659",
            "decompiledFuncCode": "int64_t function_4025c0(int64_t str) {\n    // 0x4025c0\n    if (str == 0) {\n        // 0x402639\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4025ce\n    int64_t result = (int64_t)found_char_pos; // 0x4025ce\n    if (found_char_pos == NULL) {\n        // 0x402629\n        g38 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4025d8\n    if (v1 - str < 7) {\n        // 0x402629\n        g38 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x4025e8\n    bool v2; // 0x4025c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4025c0\n    int64_t v5 = result - 6; // 0x4025c0\n    int64_t v6 = 7; // 0x4025f6\n    unsigned char v7 = *(char *)v5; // 0x4025f6\n    char v8 = *(char *)v4; // 0x4025f6\n    char v9 = v8; // 0x4025f6\n    bool v10 = false; // 0x4025f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402600\n    int64_t v13 = v1; // 0x402600\n    int64_t v14 = 3; // 0x402600\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402629\n        g38 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402612\n    char v16 = *(char *)v12; // 0x402612\n    char v17 = v16; // 0x402612\n    bool v18 = false; // 0x402612\n    while (v15 == v16) {\n        // 0x402602\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40261c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40261e\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x402629\n    g38 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402660",
            "funcStartAddr": "402660",
            "funcEndAddr": "402752",
            "decompiledFuncCode": "int64_t function_402660(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402674\n    int64_t result = (int64_t)v1; // 0x402674\n    if (result != a1) {\n        // 0x402681\n        return result;\n    }\n    int64_t v2 = function_4061b0(); // 0x402690\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402746\n    if (v3 == 85) {\n        // 0x4026a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402738\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x4026ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x4026db\n        // 0x402681\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402738\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x40271d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40272a\n    // 0x402681\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402760",
            "funcStartAddr": "402760",
            "funcEndAddr": "4027b7",
            "decompiledFuncCode": "int64_t function_402760(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402760\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4027a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4027b7",
            "funcStartAddr": "4027b7",
            "funcEndAddr": "403981",
            "decompiledFuncCode": "int64_t function_4027b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402801\n    int64_t v3 = 0; // 0x402801\n    int64_t v4; // 0x4027b7\n    int64_t v5; // 0x4027b7\n    int64_t v6; // 0x4027b7\n    int64_t v7; // 0x4027b7\n    int64_t v8; // 0x4027b7\n    int64_t v9; // 0x4027b7\n    int64_t v10; // 0x4027b7\n    int64_t v11; // 0x4027b7\n    int64_t v12; // 0x4027b7\n    int64_t v13; // 0x4027b7\n    int64_t v14; // 0x4027b7\n    int64_t v15; // 0x4027b7\n    int64_t v16; // 0x4027b7\n    int64_t v17; // 0x4027b7\n    int64_t v18; // 0x4027b7\n    int64_t result; // 0x4027b7\n    int64_t v19; // 0x4027b7\n    int32_t wc; // bp+132, 0x4027b7\n    int64_t ps; // bp+136, 0x4027b7\n    char v20; // 0x402d70\n    int64_t v21; // 0x402d70\n    int64_t v22; // 0x403118\n    int64_t v23; // 0x4027b7\n    int64_t v24; // 0x403137\n    int32_t v25; // 0x4027b7\n    while (true) {\n      lab_0x402808_2:\n        // 0x402808\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4027b7\n        int64_t v27; // 0x40283c\n        while (true) {\n          lab_0x402808:\n            // 0x402808\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402813\n            if (v15 == -1) {\n                // 0x402815\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402823\n            if (v28) {\n                // break (via goto) -> 0x402f88\n                goto lab_0x402f88;\n            }\n            // 0x40282c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g51 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402e1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402961;\n                    }\n                    // 0x40323d\n                    v26 = v5 + 1;\n                    goto lab_0x402808;\n                }\n                case 7: {\n                    goto lab_0x402961;\n                }\n                case 8: {\n                    goto lab_0x402961;\n                }\n                case 9: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402961;\n                }\n                case 12: {\n                    goto lab_0x402961;\n                }\n                case 13: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40292d;\n                }\n                case 36: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402961;\n                }\n                case 38: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402961;\n                }\n                case 44: {\n                    goto lab_0x402961;\n                }\n                case 45: {\n                    goto lab_0x402961;\n                }\n                case 46: {\n                    goto lab_0x402961;\n                }\n                case 47: {\n                    goto lab_0x402961;\n                }\n                case 48: {\n                    goto lab_0x402961;\n                }\n                case 49: {\n                    goto lab_0x402961;\n                }\n                case 50: {\n                    goto lab_0x402961;\n                }\n                case 51: {\n                    goto lab_0x402961;\n                }\n                case 52: {\n                    goto lab_0x402961;\n                }\n                case 53: {\n                    goto lab_0x402961;\n                }\n                case 54: {\n                    goto lab_0x402961;\n                }\n                case 55: {\n                    goto lab_0x402961;\n                }\n                case 56: {\n                    goto lab_0x402961;\n                }\n                case 57: {\n                    goto lab_0x402961;\n                }\n                case 58: {\n                    goto lab_0x402961;\n                }\n                case 59: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402961;\n                }\n                case 66: {\n                    goto lab_0x402961;\n                }\n                case 67: {\n                    goto lab_0x402961;\n                }\n                case 68: {\n                    goto lab_0x402961;\n                }\n                case 69: {\n                    goto lab_0x402961;\n                }\n                case 70: {\n                    goto lab_0x402961;\n                }\n                case 71: {\n                    goto lab_0x402961;\n                }\n                case 72: {\n                    goto lab_0x402961;\n                }\n                case 73: {\n                    goto lab_0x402961;\n                }\n                case 74: {\n                    goto lab_0x402961;\n                }\n                case 75: {\n                    goto lab_0x402961;\n                }\n                case 76: {\n                    goto lab_0x402961;\n                }\n                case 77: {\n                    goto lab_0x402961;\n                }\n                case 78: {\n                    goto lab_0x402961;\n                }\n                case 79: {\n                    goto lab_0x402961;\n                }\n                case 80: {\n                    goto lab_0x402961;\n                }\n                case 81: {\n                    goto lab_0x402961;\n                }\n                case 82: {\n                    goto lab_0x402961;\n                }\n                case 83: {\n                    goto lab_0x402961;\n                }\n                case 84: {\n                    goto lab_0x402961;\n                }\n                case 85: {\n                    goto lab_0x402961;\n                }\n                case 86: {\n                    goto lab_0x402961;\n                }\n                case 87: {\n                    goto lab_0x402961;\n                }\n                case 88: {\n                    goto lab_0x402961;\n                }\n                case 89: {\n                    goto lab_0x402961;\n                }\n                case 90: {\n                    goto lab_0x402961;\n                }\n                case 91: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402961;\n                }\n                case 94: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402961;\n                }\n                case 96: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402961;\n                }\n                case 98: {\n                    goto lab_0x402961;\n                }\n                case 99: {\n                    goto lab_0x402961;\n                }\n                case 100: {\n                    goto lab_0x402961;\n                }\n                case 101: {\n                    goto lab_0x402961;\n                }\n                case 102: {\n                    goto lab_0x402961;\n                }\n                case 103: {\n                    goto lab_0x402961;\n                }\n                case 104: {\n                    goto lab_0x402961;\n                }\n                case 105: {\n                    goto lab_0x402961;\n                }\n                case 106: {\n                    goto lab_0x402961;\n                }\n                case 107: {\n                    goto lab_0x402961;\n                }\n                case 108: {\n                    goto lab_0x402961;\n                }\n                case 109: {\n                    goto lab_0x402961;\n                }\n                case 110: {\n                    goto lab_0x402961;\n                }\n                case 111: {\n                    goto lab_0x402961;\n                }\n                case 112: {\n                    goto lab_0x402961;\n                }\n                case 113: {\n                    goto lab_0x402961;\n                }\n                case 114: {\n                    goto lab_0x402961;\n                }\n                case 115: {\n                    goto lab_0x402961;\n                }\n                case 116: {\n                    goto lab_0x402961;\n                }\n                case 117: {\n                    goto lab_0x402961;\n                }\n                case 118: {\n                    goto lab_0x402961;\n                }\n                case 119: {\n                    goto lab_0x402961;\n                }\n                case 120: {\n                    goto lab_0x402961;\n                }\n                case 121: {\n                    goto lab_0x402961;\n                }\n                case 122: {\n                    goto lab_0x402961;\n                }\n                case 123: {\n                    goto lab_0x402905;\n                }\n                case 124: {\n                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402905;\n                }\n                case 126: {\n                    goto lab_0x40292d;\n                }\n                default: {\n                    goto lab_0x402d05;\n                }\n            }\n        }\n      lab_0x402d05:\n        if (v23 != 1) {\n            // 0x403070\n            ps = 0;\n            int64_t len = v15; // 0x403080\n            if (v15 == -1) {\n                // 0x403082\n                len = strlen((char *)str);\n            }\n            // 0x4030ae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40310f:\n                // 0x40310f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403114\n                int64_t v30 = v29 + str;\n                v24 = function_406070(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40368a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40368a_2;\n                    }\n                    case -2: {\n                        // 0x40376d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4037a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4037aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4037b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4037b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40368a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40368a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4030e0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40318c\n                        char v34 = *(char *)v33; // 0x40319d\n                        unsigned char v35; // 0x4027b7\n                        if (v34 < 125) {\n                            // 0x4031a8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4031bf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403190\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40319d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4031a8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4031bf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403190\n                            v33++;\n                        }\n                        goto lab_0x4030e0;\n                    }\n                }\n            }\n            goto lab_0x40368a_2;\n        } else {\n            // 0x402d54\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402961;\n        }\n    }\n  lab_0x402f88:\n    // 0x402f88\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40388a\n        if (v8 > result) {\n            // 0x403893\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402bb7\n        return result;\n    }\n    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402961:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402970\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402b7a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402a71\n    char v40 = v20; // 0x402a71\n    int64_t v41 = v38; // 0x402a71\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402a71\n    int64_t v43 = v36; // 0x402a71\n    goto lab_0x4029ed;\n  lab_0x402b7a_2:\n    // 0x402bb7\n    return function_402760(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40368a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402961;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40325e\n        int64_t v50 = v5 + 1; // 0x403341\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403348\n        char v52 = v20; // 0x403348\n        int64_t v53 = result; // 0x403348\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403311\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403315\n            int64_t v56 = v54 + 1; // 0x40331a\n            int64_t v57 = v51 + 1; // 0x403341\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40330c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403311\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403315\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4029ed;\n    }\n  lab_0x4030e0:\n    // 0x4030e0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4030ff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403102\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40368a\n        goto lab_0x40368a_2;\n    }\n    goto lab_0x40310f;\n  lab_0x40292d:\n    // 0x40292d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402b7a_2;\n    }\n    goto lab_0x402961;\n  lab_0x402905:;\n    bool v60 = v15 == 1; // 0x402910\n    if (v15 == -1) {\n        // 0x402912\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40291e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402961;\n    } else {\n        goto lab_0x40292d;\n    }\n  lab_0x4029ed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4029f2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4029f6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402808_2;\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "403b2e",
            "decompiledFuncCode": "int64_t function_403990(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403992\n    int32_t * v3 = __errno_location(); // 0x4039ac\n    int64_t v4 = (int64_t)g20; // 0x4039b1\n    int32_t v5 = *v3; // 0x4039bb\n    int64_t v6 = v4; // 0x4039d1\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403b29\n            function_4049f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4039e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4039e7\n        int64_t v9; // 0x403990\n        if (g20 == &g21) {\n            int64_t v10 = function_404800(0, v8); // 0x403b0a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x403b0f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404800(v4, v8); // 0x4039fb\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x403a0a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x403a0a\n        int32_t v14 = v7; // 0x403a11\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403a41\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403a4b\n    int64_t * v17 = (int64_t *)v15; // 0x403a4e\n    uint64_t v18 = *v17; // 0x403a4e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403a51\n    int64_t result = *v19; // 0x403a51\n    int64_t v20; // 0x403990\n    uint64_t v21 = function_402760(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403a74\n    if (v18 > v21) {\n        // 0x403aeb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403a87\n    *v17 = v22;\n    if (result != (int64_t)&g39) {\n        // 0x403a97\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4047a0(v22); // 0x403ab1\n    *v19 = result2;\n    int64_t v23; // 0x403990\n    function_402760(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403aeb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403b30",
            "funcStartAddr": "403b30",
            "funcEndAddr": "403b64",
            "decompiledFuncCode": "int64_t function_403b30(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403b37\n    int64_t result = function_4049a0(a1 == 0 ? (int64_t)&g40 : a1, 56); // 0x403b56\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b70",
            "funcStartAddr": "403b70",
            "funcEndAddr": "403b7f",
            "decompiledFuncCode": "int64_t function_403b70(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g40 : a1); // 0x403b7c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b80",
            "funcStartAddr": "403b80",
            "funcEndAddr": "403b8f",
            "decompiledFuncCode": "int64_t function_403b80(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x403b88\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403b90",
            "funcStartAddr": "403b90",
            "funcEndAddr": "403bc3",
            "decompiledFuncCode": "int64_t function_403b90(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 + 8 : a1 + 8; // 0x403ba9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403bae\n    uint32_t v3 = *v2; // 0x403bae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403bb2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403be3",
            "decompiledFuncCode": "int64_t function_403bd0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g40 + 4 : a1 + 4); // 0x403bdc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403bf0",
            "funcStartAddr": "403bf0",
            "funcEndAddr": "403c1b",
            "decompiledFuncCode": "int64_t function_403bf0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x403bf8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403c15\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403c0c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403c92",
            "decompiledFuncCode": "int64_t function_403c20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g40 : a5; // 0x403c42\n    int32_t * v2 = __errno_location(); // 0x403c4b\n    uint32_t v3 = *(int32_t *)v1; // 0x403c6b\n    int64_t result = function_402760(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403c7a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ca0",
            "funcStartAddr": "403ca0",
            "funcEndAddr": "403d81",
            "decompiledFuncCode": "int64_t function_403ca0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g40 : a4; // 0x403cc2\n    int32_t * v2 = __errno_location(); // 0x403cc8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403ce7\n    int32_t * v4 = (int32_t *)v1; // 0x403cea\n    int64_t v5 = function_402760(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403d05\n    int64_t v6 = v5 + 1; // 0x403d0a\n    int64_t result = function_4047a0(v6); // 0x403d1f\n    function_402760(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403d64\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403d6d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403d9a",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403d90\n    return function_403ca0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403e35",
            "decompiledFuncCode": "int64_t function_403da0(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403da0\n    int64_t v2 = v1; // 0x403da0\n    int64_t v3 = v2; // 0x403db4\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x403dd3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g52;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403dd0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g52;\n        }\n    }\n    int64_t v6 = v3; // 0x403ded\n    if (g21 != 0x60a2c0) {\n        // 0x403def\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g39;\n        v6 = &g52;\n    }\n    int64_t result = v6; // 0x403e11\n    if (g20 != &g21) {\n        // 0x403e13\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g52;\n    }\n    // 0x403e26\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "403e51",
            "decompiledFuncCode": "int64_t function_403e40(void) {\n    // 0x403e40\n    int64_t v1; // 0x403e40\n    return function_403990(v1, v1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403e60",
            "funcStartAddr": "403e60",
            "funcEndAddr": "403e6a",
            "decompiledFuncCode": "int64_t function_403e60(void) {\n    // 0x403e60\n    int64_t v1; // 0x403e60\n    return function_403990(v1, v1, v1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403e70",
            "funcStartAddr": "403e70",
            "funcEndAddr": "403e86",
            "decompiledFuncCode": "int64_t function_403e70(int64_t a1) {\n    // 0x403e70\n    return function_403990(0, a1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403ea2",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1, int64_t a2) {\n    // 0x403e90\n    return function_403990(0, a1, a2, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403f18",
            "decompiledFuncCode": "int64_t function_403eb0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403ec0\n    return function_403990((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "403f84",
            "decompiledFuncCode": "int64_t function_403f20(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403f30\n    return function_403990((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "403f9c",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1, int64_t a2) {\n    // 0x403f90\n    return function_403eb0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "403faf",
            "decompiledFuncCode": "int64_t function_403fa0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403fa0\n    return function_403f20(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403fb0",
            "funcStartAddr": "403fb0",
            "funcEndAddr": "404020",
            "decompiledFuncCode": "int64_t function_403fb0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x403fbd\n    int128_t v2 = __asm_movdqa(g41); // 0x403fc5\n    int128_t v3 = __asm_movdqa(g42); // 0x403fcd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403fe2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403ff8\n    uint32_t v6 = *v5; // 0x403ff8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403ffd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403990(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404020",
            "funcStartAddr": "404020",
            "funcEndAddr": "40402d",
            "decompiledFuncCode": "int64_t function_404020(int64_t a1, int64_t a2) {\n    // 0x404020\n    return function_403fb0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "404041",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1) {\n    // 0x404030\n    return function_403fb0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "40405a",
            "decompiledFuncCode": "int64_t function_404050(void) {\n    // 0x404050\n    int64_t v1; // 0x404050\n    return function_403fb0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "4040ce",
            "decompiledFuncCode": "int64_t function_404060(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40407a\n    return function_403990(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4040d0",
            "funcStartAddr": "4040d0",
            "funcEndAddr": "40413c",
            "decompiledFuncCode": "int64_t function_4040d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x4040d7\n    int128_t v2 = __asm_movdqa(g41); // 0x4040df\n    int128_t v3 = __asm_movdqa(g42); // 0x4040e7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404109\n    if (a2 == 0 || a3 == 0) {\n        // 0x404137\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40411a\n    return function_403990(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404140",
            "funcStartAddr": "404140",
            "funcEndAddr": "404149",
            "decompiledFuncCode": "int64_t function_404140(void) {\n    // 0x404140\n    int64_t v1; // 0x404140\n    return function_4040d0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "404167",
            "decompiledFuncCode": "int64_t function_404150(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404150\n    return function_4040d0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "404183",
            "decompiledFuncCode": "int64_t function_404170(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404170\n    return function_4040d0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404190",
            "funcStartAddr": "404190",
            "funcEndAddr": "40419a",
            "decompiledFuncCode": "int64_t function_404190(void) {\n    // 0x404190\n    int64_t v1; // 0x404190\n    return function_403990(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041b2",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, int64_t a2) {\n    // 0x4041a0\n    return function_403990(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041d1",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, char * a2, int32_t a3) {\n    // 0x4041c0\n    return function_403990(a1, (int64_t)a2, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "4041f6",
            "decompiledFuncCode": "int64_t function_4041e0(int64_t a1) {\n    // 0x4041e0\n    return function_403990(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404200",
            "funcStartAddr": "404200",
            "funcEndAddr": "4045dd",
            "decompiledFuncCode": "int64_t function_404200(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404298\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40421c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404236\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40427b\n    if (a6 < 10) {\n        // 0x40428a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404382\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404600",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4045e0\n    if (a5 == 0) {\n        // 0x4045fb\n        return function_404200(a1, a2, a3, a4, a5, 0, (int64_t)&g52);\n    }\n    int64_t v1 = 0; // 0x4045e7\n    v1++;\n    int64_t v2 = v1; // 0x4045f9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4045f0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4045fb\n    return function_404200(a1, a2, a3, a4, a5, v2, (int64_t)&g52);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "404660",
            "decompiledFuncCode": "int64_t function_404600(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404600\n    int64_t v3 = &v2; // 0x404600\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404633\n    int64_t v6; // 0x40461d\n    int64_t * v7; // 0x40463b\n    int64_t v8; // 0x40463b\n    int64_t v9; // 0x404647\n    if (v5 < 48) {\n        // 0x404610\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404653\n            break;\n        }\n    } else {\n        // 0x40463b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404653\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404631\n    while (v4 != 9) {\n        // 0x404629\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404610\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404653\n                break;\n            }\n        } else {\n            // 0x40463b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404653\n                break;\n            }\n        }\n        // 0x404629\n        v10 = 10;\n    }\n    // 0x404653\n    return function_404200(a1, a2, a3, a4, v3, v10, (int64_t)&g52);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "40471c",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404660\n    int64_t v1; // bp-168, 0x404660\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404660\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404660\n    int64_t v8; // 0x404660\n    int64_t v9; // bp-56, 0x404660\n    int64_t v10; // 0x4046c5\n    int64_t v11; // 0x4046e9\n    if ((int32_t)v6 < 48) {\n        // 0x4046b0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404700\n            break;\n        }\n    } else {\n        // 0x4046e2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404700\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4046da\n    int64_t v13 = 10; // 0x4046da\n    while (v5 != 9) {\n        // 0x4046dc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4046b0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404700\n                break;\n            }\n        } else {\n            // 0x4046e2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404700\n                break;\n            }\n        }\n        // 0x4046d2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404700\n    int64_t v14; // bp-136, 0x404660\n    int64_t result = function_404200(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g52); // 0x40470f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404794",
            "decompiledFuncCode": "int64_t function_404720(int64_t a1) {\n    // 0x404720\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404783\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "4047ba",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4047a4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4047b3\n        return (int64_t)mem;\n    }\n    // 0x4047b5\n    function_4049f0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4047c0",
            "funcStartAddr": "4047c0",
            "funcEndAddr": "4047e1",
            "decompiledFuncCode": "int64_t function_4047c0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4047c3\n    int64_t v2 = v1; // 0x4047c3\n    if (v2 < 0) {\n        // 0x4047db\n        function_4049f0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4047d9\n        return function_4047a0(v2);\n    }\n    // 0x4047db\n    function_4049f0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "4047f2",
            "decompiledFuncCode": "int64_t function_4047f0(void) {\n    // 0x4047f0\n    int64_t v1; // 0x4047f0\n    return function_4047a0(v1);\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "404836",
            "decompiledFuncCode": "int64_t function_404800(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404828\n        free(v1);\n        return (int32_t)&g52 ^ (int32_t)&g52;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404811\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404820\n        return (int64_t)mem;\n    }\n    // 0x404831\n    function_4049f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404840",
            "funcStartAddr": "404840",
            "funcEndAddr": "404861",
            "decompiledFuncCode": "int64_t function_404840(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404843\n    int64_t v2 = v1; // 0x404843\n    if (v2 < 0) {\n        // 0x40485b\n        function_4049f0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404859\n        return function_404800(a1, v2);\n    }\n    // 0x40485b\n    function_4049f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "4048f6",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4048cb\n            function_4049f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404800(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4048b3\n    if (a2 == 0) {\n        // 0x4048d8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4048b8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4048cb\n        function_4049f0(a1);\n        // UNREACHABLE\n    }\n    // 0x40489a\n    *(int64_t *)a2 = v2;\n    return function_404800(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "404950",
            "decompiledFuncCode": "int64_t function_404900(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404900\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40494a\n            function_4049f0(a1);\n            // UNREACHABLE\n        }\n        // 0x404922\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404800(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404935\n        *(int64_t *)a2 = 128;\n        return function_404800(0, 128);\n    }\n    // 0x404948\n    if (a2 < 0) {\n        // 0x40494a\n        function_4049f0(a1);\n        // UNREACHABLE\n    }\n    // 0x404922\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404800(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "404967",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1, int64_t a2) {\n    // 0x404950\n    return (int64_t)memset((int64_t *)function_4047a0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404970",
            "funcStartAddr": "404970",
            "funcEndAddr": "40499e",
            "decompiledFuncCode": "int64_t function_404970(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404977\n    if ((int64_t)v1 < 0) {\n        // 0x404999\n        function_4049f0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404999\n        function_4049f0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40498a\n    if (mem != NULL) {\n        // 0x404994\n        return (int64_t)mem;\n    }\n    // 0x404999\n    function_4049f0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "4049c8",
            "decompiledFuncCode": "int64_t function_4049a0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4047a0(a2); // 0x4049af\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049e3",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t str) {\n    // 0x4049d0\n    return function_4049a0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "404a21",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t a1) {\n    // 0x4049f0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404b14",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x404a30\n    int64_t result2; // bp-64, 0x404a30\n    int32_t v1 = function_404b50(a1, 0, a2 & 0xffffffff, &result2, a5); // 0x404a5c\n    int32_t * v2; // 0x404a30\n    int32_t * v3; // 0x404a30\n    if (v1 != 0) {\n        int32_t * v4 = __errno_location(); // 0x404ada\n        v2 = v4;\n        if (v1 == 1) {\n            goto lab_0x404a80;\n        } else {\n            // 0x404ae7\n            v3 = v4;\n            if (v1 == 3) {\n                // 0x404aec\n                *v4 = 0;\n                v3 = v4;\n            }\n            goto lab_0x404a87;\n        }\n    } else {\n        int64_t result = result2; // 0x404a60\n        if (result >= a3 && result <= a4) {\n            // 0x404ac0\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x404a6f\n        v2 = v5;\n        if (result < 0x40000000) {\n            int64_t v6 = result + 0x40000001; // 0x404af8\n            *v5 = v6 == 0 | v6 < 0 != ((v6 ^ result) & (result ^ -0x8000000000000000)) < 0 ? 75 : 34;\n            v3 = v5;\n            goto lab_0x404a87;\n        } else {\n            goto lab_0x404a80;\n        }\n    }\n  lab_0x404a80:\n    // 0x404a80\n    *v2 = 75;\n    v3 = v2;\n    goto lab_0x404a87;\n  lab_0x404a87:;\n    int64_t v7 = function_4041e0(a1); // 0x404a8a\n    int32_t v8 = *v3; // 0x404a8f\n    int32_t status = a7 == 0 ? 1 : a7; // 0x404aaf\n    error(status, v8 == 22 ? 0 : v8, \"%s: %s\", (char *)a6, (char *)v7);\n    // 0x404ac0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404b20",
            "funcStartAddr": "404b20",
            "funcEndAddr": "404b41",
            "decompiledFuncCode": "int64_t function_404b20(int64_t a1, int64_t a2, int64_t a3, char * a4, int64_t a5, int32_t a6) {\n    // 0x404b20\n    int64_t result; // 0x404b20\n    return result;\n}\n"
        },
        {
            "funcName": "function_404b50",
            "funcStartAddr": "404b50",
            "funcEndAddr": "40537f",
            "decompiledFuncCode": "int64_t function_404b50(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str) {\n    uint32_t v1 = (int32_t)a3; // 0x404b62\n    if (v1 >= 37) {\n        // 0x40531c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    // 0x404b6b\n    int64_t v2; // bp-64, 0x404b50\n    int64_t v3 = a2 == 0 ? (int64_t)&v2 : (int64_t)a2; // 0x404b78\n    int32_t * v4 = __errno_location(); // 0x404b82\n    *v4 = 0;\n    char * v5 = (char *)a1;\n    int32_t v6 = __strtol_internal(v5, (char **)v3, v1, 0); // 0x404b9a\n    int64_t * v7 = (int64_t *)v3; // 0x404b9f\n    int64_t v8 = *v7; // 0x404b9f\n    int64_t v9; // 0x404b50\n    int64_t v10; // 0x404b50\n    int64_t v11; // 0x404b50\n    char v12; // 0x404b50\n    int64_t v13; // 0x404b50\n    int64_t v14; // 0x404b50\n    int64_t v15; // 0x404b50\n    if (v8 == a1) {\n        // 0x404bf8\n        if (str == 0) {\n            // 0x404bce\n            return 4;\n        }\n        char c = *v5; // 0x404c01\n        if (c == 0) {\n            // 0x404bce\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x404c1f\n        v14 = 1;\n        v10 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x404bce\n            return 4;\n        }\n        goto lab_0x404c2d;\n    } else {\n        int32_t v16 = *v4; // 0x404baa\n        int64_t v17 = 0; // 0x404bb0\n        if (v16 != 0) {\n            // 0x404be0\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x404bce\n                return 4;\n            }\n        }\n        int64_t v18 = v6; // 0x404b9a\n        v13 = v18;\n        v9 = v17;\n        if (str == 0) {\n            goto lab_0x404bc7;\n        } else {\n            char c2 = *(char *)v8; // 0x404bba\n            v13 = v18;\n            v9 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x404cc7\n                v14 = v18;\n                v10 = v17;\n                v12 = c2;\n                v15 = v18;\n                v11 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x404c2d;\n                } else {\n                    goto lab_0x404cd5;\n                }\n            } else {\n                goto lab_0x404bc7;\n            }\n        }\n    }\n  lab_0x404c2d:;\n    int64_t v19 = v10;\n    int64_t v20 = v14;\n    unsigned char v21 = v12 - 69;\n    int64_t v22 = 1024; // 0x404c34\n    int64_t v23 = 1; // 0x404c34\n    int64_t v24; // 0x404b50\n    int64_t v25; // 0x404b50\n    int64_t v26; // 0x404b50\n    int64_t v27; // 0x404b50\n    int64_t v28; // 0x404b50\n    int64_t v29; // 0x404b50\n    int64_t v30; // 0x404b50\n    int64_t v31; // 0x404b50\n    int64_t v32; // 0x404b50\n    int64_t v33; // 0x404b50\n    int64_t v34; // 0x404b50\n    int64_t v35; // 0x404b50\n    int64_t v36; // 0x404b50\n    int64_t v37; // 0x404b50\n    int64_t v38; // 0x404b50\n    int64_t v39; // 0x404b50\n    int64_t v40; // 0x404b50\n    int64_t v41; // 0x404b50\n    int64_t v42; // 0x404b50\n    if (v21 < 48) {\n        // 0x404c60\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x404c40;\n        } else {\n            // 0x404c74\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x404c40;\n            } else {\n                // 0x404c86\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x404c40;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v8 + 2); // 0x405262\n                        v22 = 1024;\n                        v23 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x404c40;\n                    }\n                    default: {\n                        // 0x404c9b\n                        g50 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v15 = v20;\n                        v11 = v19;\n                        v25 = v20;\n                        v32 = 1;\n                        v24 = v19;\n                        v26 = 1024;\n                        v33 = 1;\n                        v37 = -0x20000000000000;\n                        v38 = 1;\n                        v27 = 1024;\n                        v34 = 1;\n                        v40 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v42 = -0x20000000000000;\n                        v29 = 1024;\n                        v36 = 1;\n                        v41 = -0x20000000000000;\n                        v30 = 1024;\n                        v31 = 1;\n                        v39 = -0x20000000000000;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x404f28;\n                            }\n                            case 70: {\n                                goto lab_0x404cd5;\n                            }\n                            case 71: {\n                                goto lab_0x404f90;\n                            }\n                            case 72: {\n                                goto lab_0x404cd5;\n                            }\n                            case 73: {\n                                goto lab_0x404cd5;\n                            }\n                            case 74: {\n                                goto lab_0x404cd5;\n                            }\n                            case 75: {\n                                goto lab_0x404d75;\n                            }\n                            case 76: {\n                                goto lab_0x404cd5;\n                            }\n                            case 77: {\n                                goto lab_0x404db8;\n                            }\n                            case 78: {\n                                goto lab_0x404cd5;\n                            }\n                            case 79: {\n                                goto lab_0x404cd5;\n                            }\n                            case 80: {\n                                goto lab_0x404e58;\n                            }\n                            case 81: {\n                                goto lab_0x404cd5;\n                            }\n                            case 82: {\n                                goto lab_0x404cd5;\n                            }\n                            case 83: {\n                                goto lab_0x404cd5;\n                            }\n                            case 84: {\n                                goto lab_0x404ec0;\n                            }\n                            case 85: {\n                                goto lab_0x404cd5;\n                            }\n                            case 86: {\n                                goto lab_0x404cd5;\n                            }\n                            case 87: {\n                                goto lab_0x404cd5;\n                            }\n                            case 88: {\n                                goto lab_0x404cd5;\n                            }\n                            case 89: {\n                                goto lab_0x404ff8;\n                            }\n                            case 90: {\n                                goto lab_0x405060;\n                            }\n                            case 91: {\n                                goto lab_0x404cd5;\n                            }\n                            case 92: {\n                                goto lab_0x404cd5;\n                            }\n                            case 93: {\n                                goto lab_0x404cd5;\n                            }\n                            case 94: {\n                                goto lab_0x404cd5;\n                            }\n                            case 95: {\n                                goto lab_0x404cd5;\n                            }\n                            case 96: {\n                                goto lab_0x404cd5;\n                            }\n                            case 97: {\n                                goto lab_0x404cd5;\n                            }\n                            case 98: {\n                                goto lab_0x404e25;\n                            }\n                            case 99: {\n                                goto lab_0x404d18;\n                            }\n                            case 100: {\n                                goto lab_0x404cd5;\n                            }\n                            case 101: {\n                                goto lab_0x404cd5;\n                            }\n                            case 102: {\n                                goto lab_0x404cd5;\n                            }\n                            case 103: {\n                                goto lab_0x404f90;\n                            }\n                            case 104: {\n                                goto lab_0x404cd5;\n                            }\n                            case 105: {\n                                goto lab_0x404cd5;\n                            }\n                            case 106: {\n                                goto lab_0x404cd5;\n                            }\n                            case 107: {\n                                goto lab_0x404d75;\n                            }\n                            case 108: {\n                                goto lab_0x404cd5;\n                            }\n                            case 109: {\n                                goto lab_0x404db8;\n                            }\n                            case 110: {\n                                goto lab_0x404cd5;\n                            }\n                            case 111: {\n                                goto lab_0x404cd5;\n                            }\n                            case 112: {\n                                goto lab_0x404cd5;\n                            }\n                            case 113: {\n                                goto lab_0x404cd5;\n                            }\n                            case 114: {\n                                goto lab_0x404cd5;\n                            }\n                            case 115: {\n                                goto lab_0x404cd5;\n                            }\n                            case 116: {\n                                goto lab_0x404ec0;\n                            }\n                            default: {\n                                goto lab_0x404c40;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x404c40;\n    }\n  lab_0x404bc7:\n    // 0x404bc7\n    *a4 = v13;\n    // 0x404bce\n    return v9 & 0xffffffff;\n  lab_0x404c40:\n    // 0x404c40\n    g49 = v12 - 66;\n    v15 = v20;\n    v11 = v19;\n    v25 = v20;\n    v32 = v23;\n    v24 = v19;\n    v38 = v23;\n    switch (v12) {\n        case 66: {\n            // 0x404d11\n            v25 = 1024 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x404d18;\n        }\n        case 69: {\n            // 0x404f10\n            v29 = v22;\n            v36 = v23;\n            v41 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x404f28;\n        }\n        case 71: {\n            goto lab_0x404f90;\n        }\n        case 75: {\n            goto lab_0x404d75;\n        }\n        case 77: {\n            goto lab_0x404da0;\n        }\n        case 80: {\n            // 0x404e40\n            v27 = v22;\n            v34 = v23;\n            v40 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x404e58;\n        }\n        case 84: {\n            goto lab_0x404ea8;\n        }\n        case 89: {\n            // 0x404fe0\n            goto lab_0x404ff8;\n        }\n        case 90: {\n            // 0x405048\n            v30 = v22;\n            v31 = v23;\n            v39 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x405060;\n        }\n        case 98: {\n            goto lab_0x404e25;\n        }\n        case 99: {\n            goto lab_0x404d18;\n        }\n        case 103: {\n            goto lab_0x404f90;\n        }\n        case 107: {\n            goto lab_0x404d75;\n        }\n        case 109: {\n            goto lab_0x404da0;\n        }\n        case 116: {\n            goto lab_0x404ea8;\n        }\n        case 119: {\n            // 0x404d59\n            v25 = 2 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x404d18;\n        }\n        default: {\n            goto lab_0x404cd5;\n        }\n    }\n    // 0x404f78\n    goto lab_0x404f90;\n    // 0x404d60\n    goto lab_0x404d75;\n  lab_0x404da0:\n    // 0x404da0\n    v26 = v22;\n    v33 = v23;\n    v37 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x404db8;\n  lab_0x404ea8:\n    // 0x404ea8\n    v28 = v22;\n    v35 = v23;\n    v42 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x404ec0;\n  lab_0x404e25:\n    // 0x404e25\n    v25 = 512 * v20;\n    v32 = v38;\n    v24 = v19;\n    goto lab_0x404d18;\n  lab_0x404d18:;\n    int64_t v63 = v24;\n    int64_t v64 = v32 + v8; // 0x404d18\n    *v7 = v64;\n    v13 = v25;\n    v9 = (*(char *)v64 != 0 ? v63 | 2 : v63) & 0xffffffff;\n    goto lab_0x404bc7;\n  lab_0x404cd5:\n    // 0x404cd5\n    *a4 = v15;\n    // 0x404bce\n    return (v11 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x404f28:;\n    uint64_t v65 = v29;\n    int64_t v66 = v20;\n    int64_t v67 = -0x8000000000000000; // 0x404f61\n    int64_t v68 = 1; // 0x404f61\n    if (v66 >= v41) {\n        // 0x404f40\n        v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n        v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : 0;\n    }\n    int32_t v69 = 5; // 0x404f55\n    int32_t v70 = v69; // 0x404f58\n    int64_t v71 = v68; // 0x404f58\n    int64_t v59 = v67; // 0x404f58\n    int64_t v61 = v36; // 0x404f58\n    int64_t v62 = v68; // 0x404f58\n    while (v69 != 0) {\n        // 0x404f5e\n        v66 = v67;\n        v67 = -0x8000000000000000;\n        v68 = 1;\n        if (v66 >= v41) {\n            // 0x404f40\n            v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n            v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : v71;\n        }\n        // 0x404f55\n        v69 = v70 - 1;\n        v70 = v69;\n        v71 = v68;\n        v59 = v67;\n        v61 = v36;\n        v62 = v68;\n    }\n    goto lab_0x405190;\n  lab_0x404f90:\n    // 0x404f90\n    while (true) {\n        // 0x404fc6\n        int32_t v44; // 0x404b50\n        int32_t v45 = v44;\n        int64_t v46; // 0x404b50\n        int64_t v47 = v46;\n        int64_t v48 = -0x8000000000000000; // 0x404fc9\n        int64_t v49 = 1; // 0x404fc9\n        int64_t v50; // 0x404b50\n        uint64_t v51; // 0x404b50\n        if (v47 >= v51) {\n            int64_t v52 = v50;\n            uint64_t v53; // 0x404b50\n            int64_t v54 = v47 > 0x7fffffffffffffff / v53 ? 0x7fffffffffffffff : v47 * v53;\n            int64_t v55 = v47 > 0x7fffffffffffffff / v53 ? 1 : v52;\n            v48 = v54;\n            v49 = v55;\n        }\n        int64_t v56 = v49;\n        int64_t v57 = v48;\n        int32_t v58 = v45 - 1; // 0x404fbd\n        v46 = v57;\n        v44 = v58;\n        v50 = v56;\n        v59 = v57;\n        int64_t v60; // 0x404b50\n        v61 = v60;\n        v62 = v56;\n        if (v58 == 0) {\n            // break -> 0x405190\n            break;\n        }\n    }\n    goto lab_0x405190;\n  lab_0x404d75:;\n    int64_t v76 = 1;\n    v25 = -0x8000000000000000;\n    v32 = v76;\n    v24 = 1;\n    int64_t v73; // 0x404b50\n    int64_t v74; // 0x404b50\n    int64_t v75; // 0x404b50\n    int64_t v72; // 0x404b50\n    if (v20 < -0x20000000000000) {\n        goto lab_0x404d18;\n    } else {\n        int64_t v77 = 1024;\n        v73 = 0x7fffffffffffffff / v77;\n        v75 = v77;\n        v74 = v20;\n        v72 = v76;\n        goto lab_0x404d8c;\n    }\n  lab_0x404db8:\n    // 0x404db8\n    v25 = -0x8000000000000000;\n    v32 = v33;\n    v24 = 1;\n    if (v20 < v37) {\n        goto lab_0x404d18;\n    } else {\n        int64_t v78 = 0x7fffffffffffffff / v26;\n        v25 = 0x7fffffffffffffff;\n        v32 = v33;\n        v24 = 1;\n        if (v20 > v78) {\n            goto lab_0x404d18;\n        } else {\n            int64_t v79 = v26 * v20; // 0x404dd8\n            v25 = -0x8000000000000000;\n            v32 = v33;\n            v24 = 1;\n            v73 = v78;\n            v75 = v26;\n            v74 = v79;\n            v72 = v33;\n            if (v79 < v37) {\n                goto lab_0x404d18;\n            } else {\n                goto lab_0x404d8c;\n            }\n        }\n    }\n  lab_0x404e58:;\n    uint64_t v80 = v27;\n    int64_t v81 = v20;\n    int64_t v82 = -0x8000000000000000; // 0x404e91\n    int64_t v83 = 1; // 0x404e91\n    if (v40 <= v81) {\n        // 0x404e70\n        v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n        v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : 0;\n    }\n    int32_t v84 = 4; // 0x404e85\n    int32_t v85 = v84; // 0x404e88\n    int64_t v86 = v83; // 0x404e88\n    v59 = v82;\n    v61 = v34;\n    v62 = v83;\n    while (v84 != 0) {\n        // 0x404e8e\n        v81 = v82;\n        v82 = -0x8000000000000000;\n        v83 = 1;\n        if (v40 <= v81) {\n            // 0x404e70\n            v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n            v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : v86;\n        }\n        // 0x404e85\n        v84 = v85 - 1;\n        v85 = v84;\n        v86 = v83;\n        v59 = v82;\n        v61 = v34;\n        v62 = v83;\n    }\n    goto lab_0x405190;\n  lab_0x404ec0:;\n    uint64_t v87 = v28;\n    int64_t v88 = v20;\n    int64_t v89 = -0x8000000000000000; // 0x404ef9\n    int64_t v90 = 1; // 0x404ef9\n    if (v42 <= v88) {\n        // 0x404ed8\n        v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n        v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : 0;\n    }\n    int32_t v91 = 3; // 0x404eed\n    int32_t v92 = v91; // 0x404ef0\n    int64_t v93 = v90; // 0x404ef0\n    v59 = v89;\n    v61 = v35;\n    v62 = v90;\n    while (v91 != 0) {\n        // 0x404ef6\n        v88 = v89;\n        v89 = -0x8000000000000000;\n        v90 = 1;\n        if (v42 <= v88) {\n            // 0x404ed8\n            v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n            v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : v93;\n        }\n        // 0x404eed\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v59 = v89;\n        v61 = v35;\n        v62 = v90;\n    }\n    goto lab_0x405190;\n  lab_0x404ff8:\n    // 0x404ff8\n    while (true) {\n        // 0x40502e\n        int32_t v94; // 0x404b50\n        int32_t v95 = v94;\n        int64_t v96; // 0x404b50\n        int64_t v97 = v96;\n        int64_t v98 = -0x8000000000000000; // 0x405031\n        int64_t v99 = 1; // 0x405031\n        int64_t v100; // 0x404b50\n        uint64_t v101; // 0x404b50\n        if (v101 <= v97) {\n            int64_t v102 = v100;\n            uint64_t v103; // 0x404b50\n            int64_t v104 = v97 > 0x7fffffffffffffff / v103 ? 0x7fffffffffffffff : v97 * v103;\n            int64_t v105 = v97 > 0x7fffffffffffffff / v103 ? 1 : v102;\n            v98 = v104;\n            v99 = v105;\n        }\n        int64_t v106 = v99;\n        int64_t v107 = v98;\n        int32_t v108 = v95 - 1; // 0x405025\n        v96 = v107;\n        v94 = v108;\n        v100 = v106;\n        v59 = v107;\n        int64_t v109; // 0x404b50\n        v61 = v109;\n        v62 = v106;\n        if (v108 == 0) {\n            // break -> 0x405190\n            break;\n        }\n    }\n    goto lab_0x405190;\n  lab_0x405060:;\n    uint64_t v110 = v30;\n    int64_t v111 = v20;\n    int64_t v112 = -0x8000000000000000; // 0x405099\n    int64_t v113 = 1; // 0x405099\n    if (v39 <= v111) {\n        // 0x405078\n        v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n        v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : 0;\n    }\n    int32_t v114 = 6; // 0x40508d\n    int32_t v115 = v114; // 0x405090\n    int64_t v116 = v113; // 0x405090\n    v59 = v112;\n    v61 = v31;\n    v62 = v113;\n    while (v114 != 0) {\n        // 0x405096\n        v111 = v112;\n        v112 = -0x8000000000000000;\n        v113 = 1;\n        if (v39 <= v111) {\n            // 0x405078\n            v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n            v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : v116;\n        }\n        // 0x40508d\n        v114 = v115 - 1;\n        v115 = v114;\n        v116 = v113;\n        v59 = v112;\n        v61 = v31;\n        v62 = v113;\n    }\n    goto lab_0x405190;\n  lab_0x405190:\n    // 0x405190\n    v25 = v59;\n    v32 = v61;\n    v24 = (v62 | v19) & 0xffffffff;\n    goto lab_0x404d18;\n  lab_0x404d8c:\n    // 0x404d8c\n    v25 = 0x7fffffffffffffff;\n    v32 = v72;\n    v24 = 1;\n    if (v73 >= v74) {\n        // 0x404d95\n        v25 = v74 * v75;\n        v32 = v72;\n        v24 = v19;\n    }\n    goto lab_0x404d18;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "40599c",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40539f\n    int64_t v2 = *v1; // 0x40539f\n    char * str2 = (char *)v2; // 0x4053ac\n    char c = *str2; // 0x4053ac\n    int64_t v3 = v2; // 0x4053d8\n    int64_t v4 = 0; // 0x405380\n    int32_t v5; // 0x405380\n    int64_t v6; // 0x405380\n    int64_t v7; // 0x405380\n    int64_t v8; // 0x405380\n    int64_t v9; // 0x405380\n    int64_t v10; // 0x405380\n    int64_t v11; // 0x405380\n    int64_t v12; // 0x405380\n    int64_t v13; // 0x405380\n    int64_t str3; // 0x405380\n    int64_t v14; // 0x405380\n    int64_t v15; // 0x405380\n    int64_t v16; // 0x405380\n    int64_t v17; // 0x405380\n    int32_t v18; // 0x405380\n    int32_t v19; // 0x405380\n    int32_t v20; // 0x405380\n    int32_t v21; // 0x405380\n    int32_t v22; // 0x405380\n    int32_t v23; // 0x405380\n    int32_t v24; // 0x405380\n    int32_t v25; // 0x405380\n    int32_t v26; // 0x405380\n    int32_t v27; // 0x405380\n    int32_t v28; // 0x405380\n    int32_t v29; // 0x405380\n    int64_t nmemb; // 0x405380\n    int64_t v30; // 0x405380\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4053dc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4053d8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4053e8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4053ee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4053b8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40541c\n                int64_t v34; // 0x405380\n                int64_t v35; // 0x405380\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405425\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4055a0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405436\n                int64_t v37 = *(int64_t *)v36; // 0x40543a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405410\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405425\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4055a0;\n                        }\n                    }\n                    // 0x405436\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405486:\n                    // 0x405486\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4054e0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405650\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4054e0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405600\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4054aa;\n                                } else {\n                                    // 0x40560c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4054aa;\n                                    } else {\n                                        // 0x40561a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4054aa;\n                                        } else {\n                                            goto lab_0x4054e0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4054aa;\n                            }\n                        }\n                    }\n                }\n              lab_0x4054f1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4056c6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405872\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x405892\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4058df\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x4058f9\n                            int64_t v45; // 0x4058fb\n                            if (*(char *)v42 != 0) {\n                                // 0x4058fb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4058f3\n                            while (v17 + nmemb != v42) {\n                                // 0x4058f5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4058fb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x4058e8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405920\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x4056d4\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40582f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405729\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405740\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4055ee\n                    return 63;\n                }\n                // 0x405510\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405594\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4055a0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4055b0\n                    uint32_t v50 = *v49; // 0x4055b0\n                    int64_t v51 = v50; // 0x4055b0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4055ba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4055c3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4057ef\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40579a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4055ee\n                            return 63;\n                        }\n                        // 0x405638\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40594f\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40584d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405860\n                                // 0x4055ee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40575e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405772\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4055db\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4055de\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4055e2\n                    int64_t result = v59; // 0x4055e8\n                    if (v58 != 0) {\n                        // 0x4055ea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4055ee\n                    return result;\n                }\n            } else {\n                // 0x4053ee\n                v5 = v32;\n            }\n            // break -> 0x405515\n            break;\n        }\n    }\n    // 0x405515\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40552d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405537\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4055ee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405679\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405566\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405576\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4054e0:\n    // 0x4054e0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4054e0\n    int64_t v63 = *(int64_t *)v62; // 0x4054e4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4054f1\n        goto lab_0x4054f1;\n    }\n    goto lab_0x405486;\n  lab_0x4054aa:\n    // 0x4054aa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405380\n    int32_t v65; // 0x405380\n    int32_t v66; // 0x405380\n    if (v27 != 0) {\n        goto lab_0x4054e0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405660\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4054e0;\n            } else {\n                goto lab_0x4054d1;\n            }\n        } else {\n            // 0x4054c5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4057bc\n                int64_t v67 = (int64_t)mem; // 0x4057bc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4054e0;\n                } else {\n                    // 0x4057cf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4054d1;\n                }\n            } else {\n                goto lab_0x4054d1;\n            }\n        }\n    }\n  lab_0x4054d1:\n    // 0x4054d1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4054e0;\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405f66",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4059c1\n    if (v3 < 1) {\n        // 0x405b7e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4059bd\n    int32_t v5 = *(int32_t *)a7; // 0x4059c9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4059cb\n    int64_t v7 = v2; // 0x4059d0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4059d3\n    *v8 = 0;\n    int64_t v9; // 0x4059a0\n    int64_t v10; // 0x4059a0\n    int64_t v11; // 0x4059a0\n    int64_t v12; // 0x4059a0\n    int64_t str; // 0x4059a0\n    int64_t v13; // 0x4059a0\n    int64_t v14; // 0x4059a0\n    int64_t v15; // 0x4059a0\n    int64_t v16; // 0x4059a0\n    int64_t v17; // 0x4059a0\n    int32_t v18; // 0x4059a0\n    char v19; // 0x4059a0\n    if (v5 == 0) {\n        // 0x405bb8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4059ea;\n    } else {\n        // 0x4059e3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405a30\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405a33\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405af8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405a46\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405a56\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405b0c;\n                } else {\n                    goto lab_0x405a68;\n                }\n            }\n        } else {\n            goto lab_0x4059ea;\n        }\n    }\n  lab_0x4059ea:\n    // 0x4059ea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4059f0\n    *v24 = 0;\n    int64_t v25; // 0x4059a0\n    int64_t v26; // 0x4059a0\n    int64_t v27; // 0x4059a0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405ae0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405aed;\n        }\n        case 43: {\n            // 0x405df0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405aed;\n        }\n        default: {\n            // 0x405a0c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405d6f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405e88\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405aed;\n                } else {\n                    // 0x405d7d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405a1a;\n                }\n            } else {\n                goto lab_0x405a1a;\n            }\n        }\n    }\n  lab_0x405af8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405aff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405a68;\n    } else {\n        goto lab_0x405b0c;\n    }\n  lab_0x405a1a:\n    // 0x405a1a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405aed;\n  lab_0x405aed:\n    // 0x405aed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405af8;\n  lab_0x405a68:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405a68\n    int64_t v31 = v30; // 0x405a68\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405a6a\n    if ((int64_t)*v32 > v31) {\n        // 0x405a6f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405a72\n    if (*v33 > v30) {\n        // 0x405a77\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405a7a\n    int64_t v35 = v31; // 0x405a7e\n    int64_t v36 = v15; // 0x405a7e\n    int64_t v37; // 0x4059a0\n    int64_t v38; // 0x4059a0\n    int64_t v39; // 0x4059a0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405be8\n        int64_t v41 = v40; // 0x405be8\n        v2 = v41;\n        int64_t v42; // 0x4059a0\n        if (*v33 == v40) {\n            // 0x405dd0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405dd8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405bf4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405c08\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405c11\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405c1a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405c31\n            int64_t v47 = v45 & 0xffffffff; // 0x405c35\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405c3e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405c44\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405c46;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405c20\n            int64_t v49 = v48 & 0xffffffff; // 0x405c20\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405c31\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405c3e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405c44\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405c46;\n                    }\n                }\n                // 0x405c20\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405de8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405c46;\n    } else {\n        goto lab_0x405a84;\n    }\n  lab_0x405b0c:\n    // 0x405b0c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405b0f\n    int64_t v51 = v12; // 0x405b0f\n    int64_t v52 = v14; // 0x405b0f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405a68;\n    } else {\n        goto lab_0x405b15;\n    }\n  lab_0x405a84:;\n    int32_t v53 = v35; // 0x405a84\n    int64_t v54; // 0x4059a0\n    int64_t v55; // 0x4059a0\n    int64_t v56; // 0x4059a0\n    int64_t v57; // 0x4059a0\n    int64_t v58; // 0x4059a0\n    int64_t v59; // 0x4059a0\n    char * v60; // 0x4059a0\n    int64_t v61; // 0x4059a0\n    int64_t v62; // 0x405a99\n    int64_t v63; // 0x4059a0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405bd3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405bd6;\n    } else {\n        // 0x405a8c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4059a0\n        int64_t v66 = v65 ? -1 : 1; // 0x405aa0\n        int64_t v67 = (int64_t)\"--\"; // 0x4059a0\n        int64_t v68 = v62; // 0x4059a0\n        int64_t v69 = 3; // 0x405aa0\n        unsigned char v70 = *(char *)v68; // 0x405aa0\n        char v71 = *(char *)v67; // 0x405aa0\n        char v72 = v71; // 0x405aa0\n        bool v73 = false; // 0x405aa0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405b90\n            if (*(char *)v62 == 45) {\n                // 0x405c50\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405c50\n                if (c == 0) {\n                    goto lab_0x405b9a;\n                } else {\n                    // 0x405c5d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405ce0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405ec3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405d35;\n                        } else {\n                            // 0x405c6e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405ce0;\n                            } else {\n                                // 0x405c73\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405c94;\n                                } else {\n                                    // 0x405c7a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405ce0;\n                                    } else {\n                                        goto lab_0x405c94;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405b9a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405ab0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405ab3\n            int64_t v77 = v35 + 1; // 0x405ab6\n            int32_t v78 = v77; // 0x405ab9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405e20\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405ac7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405ad5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405bd6;\n        }\n    }\n  lab_0x405b15:;\n    // 0x405b15\n    int64_t v79; // bp-104, 0x4059a0\n    int64_t v80 = &v79; // 0x4059aa\n    int64_t v81 = v50 + 1; // 0x405b15\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405b1c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405b21\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405b25\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405b29\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405b31\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405b36\n    int32_t c2 = v84; // 0x405b36\n    char * found_char_pos = strchr(str2, c2); // 0x405b36\n    int64_t v87 = *v82; // 0x405b3b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405b45\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405b50\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405e40\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405e0d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405b7e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405b36\n    char v91 = *(char *)(v90 + 1); // 0x405b6b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405b25\n        if (v91 != 58) {\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405d94\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405e98\n                *v8 = 0;\n            } else {\n                // 0x405e7c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405d9e\n        if (v93 != 0) {\n            // 0x405e30\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405db1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405efa\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405eaa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405eb1\n        // 0x405dbe\n        *v83 = 0;\n        // 0x405b7e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405d09\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405d0b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405f30\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405ee1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405ee8\n            // 0x405b7e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405d16\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405d1a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405d35;\n  lab_0x405c46:\n    // 0x405c46\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405a84;\n  lab_0x405d35:;\n    int64_t v99 = function_405380(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405d53\n    // 0x405b7e\n    return v99 & 0xffffffff;\n  lab_0x405bd6:;\n    int32_t v100 = v55; // 0x405bd6\n    if (v100 != (int32_t)v59) {\n        // 0x405bda\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405b7e\n    return 0xffffffff;\n  lab_0x405b9a:\n    // 0x405b9a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405ba1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405b7e\n    return v99 & 0xffffffff;\n  lab_0x405ce0:\n    // 0x405ce0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405b15;\n  lab_0x405c94:\n    // 0x405c94\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405380(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x405cba\n    if ((int32_t)v101 != -1) {\n        // 0x405b7e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405ccf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405ce0;\n}\n"
        },
        {
            "funcName": "function_405f70",
            "funcStartAddr": "405f70",
            "funcEndAddr": "405fc6",
            "decompiledFuncCode": "int64_t function_405f70(int64_t a1) {\n    // 0x405f70\n    *(int32_t *)&g43 = g26;\n    *(int32_t *)&g44 = g25;\n    int64_t v1; // 0x405f70\n    int64_t result = function_4059a0(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x405f96\n    g26 = *(int32_t *)&g43;\n    g48 = (char *)g46;\n    *(int32_t *)&g24 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fe8",
            "decompiledFuncCode": "int64_t function_405fd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405fd0\n    return function_405f70(1);\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "406003",
            "decompiledFuncCode": "int64_t function_405ff0(int64_t a1, int64_t a2, char * a3, char (**a4)[10], int32_t a5, int64_t a6) {\n    // 0x405ff0\n    return function_405f70(0);\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "406025",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406010\n    return function_4059a0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406046",
            "decompiledFuncCode": "int64_t function_406030(void) {\n    // 0x406030\n    return function_405f70(0);\n}\n"
        },
        {
            "funcName": "function_406050",
            "funcStartAddr": "406050",
            "funcEndAddr": "406068",
            "decompiledFuncCode": "int64_t function_406050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406050\n    return function_4059a0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "4060ea",
            "decompiledFuncCode": "int64_t function_406070(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40607b\n    int64_t v2 = (int64_t)&g10; // 0x40607b\n    int32_t * pwc; // 0x406070\n    int64_t v3; // 0x406070\n    int64_t n; // 0x406070\n    if (a2 == 0) {\n        goto lab_0x4060c2;\n    } else {\n        // 0x40607d\n        if (a3 == 0) {\n            // 0x4060a8\n            return -2;\n        }\n        // 0x406089\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4060c2;\n        } else {\n            goto lab_0x406094;\n        }\n    }\n  lab_0x4060c2:\n    // 0x4060c2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406070\n    pwc = (int32_t *)&v4;\n    goto lab_0x406094;\n  lab_0x406094:;\n    char * wstr = (char *)v3; // 0x40609a\n    int64_t ps; // 0x406070\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40609a\n    int64_t result = v5; // 0x40609a\n    if (v5 < 0xfffffffe) {\n        // 0x4060a8\n        return result;\n    }\n    int64_t result2 = result; // 0x4060d9\n    if ((char)function_406150(0, v3) == 0) {\n        // 0x4060db\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4060a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4060f0",
            "funcStartAddr": "4060f0",
            "funcEndAddr": "40614d",
            "decompiledFuncCode": "int64_t function_4060f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4060f7\n    int64_t v2; // 0x4060f0\n    int64_t result = function_406720(a1, v2); // 0x406108\n    if ((v2 & 32) != 0) {\n        // 0x406130\n        if ((int32_t)result == 0) {\n            // 0x406134\n            *__errno_location() = 0;\n        }\n        // 0x40612a\n        return 0xffffffff;\n    }\n    // 0x406111\n    if ((int32_t)result == 0) {\n        // 0x40612a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406118\n    if (v1 == 0) {\n        // 0x40611a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40612a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406150",
            "funcStartAddr": "406150",
            "funcEndAddr": "4061ae",
            "decompiledFuncCode": "int64_t function_406150(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406156\n    if (locale == NULL) {\n        // 0x406183\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406156\n    bool v2; // 0x406150\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x406150\n    int64_t v5 = v1; // 0x406150\n    int64_t v6 = 2; // 0x406175\n    unsigned char v7 = *(char *)v5; // 0x406175\n    char v8 = *(char *)v4; // 0x406175\n    char v9 = v8; // 0x406175\n    bool v10 = false; // 0x406175\n    while (v7 == v8) {\n        // 0x406168\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406181\n    int64_t v13 = v1; // 0x406181\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406183\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406181\n    unsigned char v15 = *(char *)v13; // 0x40619d\n    char v16 = *(char *)v12; // 0x40619d\n    char v17 = v16; // 0x40619d\n    bool v18 = false; // 0x40619d\n    while (v15 == v16) {\n        // 0x406190\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4061b0",
            "funcStartAddr": "4061b0",
            "funcEndAddr": "406712",
            "decompiledFuncCode": "int64_t function_4061b0(void) {\n    char * v1 = nl_langinfo(14); // 0x4061c6\n    char * v2 = g47; // 0x4061cb\n    char * v3; // 0x4061b0\n    int64_t v4; // 0x4061b0\n    int64_t v5; // 0x4061b0\n    int64_t v6; // 0x4061b0\n    int64_t v7; // 0x4061b0\n    int32_t size; // 0x4061b0\n    int32_t size2; // 0x4061b0\n    int32_t len; // 0x406282\n    int64_t v8; // 0x406282\n    char * env_val; // 0x40626d\n    if (v2 == NULL) {\n        // 0x406268\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4062d5;\n        } else {\n            // 0x40627a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4062d5;\n            } else {\n                // 0x40627f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40626d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406705\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4062d5;\n                    } else {\n                        // 0x406679\n                        size2 = len + 14;\n                        goto lab_0x40629b;\n                    }\n                } else {\n                    goto lab_0x40629b;\n                }\n            }\n        }\n    } else {\n        // 0x4061b0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4061ea;\n    }\n  lab_0x40651c:;\n    // 0x40651c\n    struct _IO_FILE * stream; // 0x40635b\n    int32_t v10 = __uflow(stream); // 0x40651f\n    int64_t v11; // 0x4061b0\n    int64_t v12 = v11; // 0x406529\n    int64_t v13; // 0x4061b0\n    int64_t v14 = v13; // 0x406529\n    int32_t v15 = v10; // 0x406529\n    int64_t v16; // 0x4061b0\n    int64_t v17 = v16; // 0x406529\n    int64_t v18 = v11; // 0x406529\n    int64_t v19 = v13; // 0x406529\n    int64_t v20 = v16; // 0x406529\n    if (v10 == -1) {\n        // break -> 0x40652f\n        goto lab_0x40652f;\n    }\n    goto lab_0x4063a9;\n  lab_0x40639e:;\n    // 0x40639e\n    int64_t v90; // 0x4061b0\n    int64_t * v32; // 0x406390\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4061b0\n    v12 = v89;\n    int64_t v91; // 0x4061b0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4061b0\n    v17 = v92;\n    goto lab_0x4063a9;\n  lab_0x4063a9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4061b0\n    int32_t v25; // bp-120, 0x4061b0\n    int32_t v26; // bp-184, 0x4061b0\n    int64_t v27; // 0x40635b\n    int64_t v28; // 0x406378\n    int64_t v29; // 0x40637d\n    int64_t * v30; // 0x406394\n    switch (c) {\n        case 32: {\n            goto lab_0x406390;\n        }\n        case 10: {\n            goto lab_0x406390;\n        }\n        case 9: {\n            goto lab_0x406390;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406581\n            int32_t v33; // 0x4061b0\n            char v34; // 0x4061b0\n            int32_t v35; // 0x40658e\n            if (v31 < *v30) {\n                // 0x406560\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40658b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406581\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406560\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40658b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406570\n                v36 = v33;\n            }\n            // 0x40665f\n            if (v36 == -1) {\n                // break -> 0x40652f\n                break;\n            }\n            goto lab_0x406390;\n        }\n        default: {\n            // 0x4063bf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40652f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4063e8\n            int64_t v39 = v37 + 4; // 0x4063ea\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4063f6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4063f8\n            while (v41 == 0) {\n                // 0x4063e8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406416\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406422\n            int64_t v45 = v43 + 4; // 0x406424\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406430\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406432\n            while (v47 == 0) {\n                // 0x406422\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40641f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406448\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406458\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40645c\n            int64_t v52 = v51 + v48; // 0x406465\n            int64_t * mem; // 0x4061b0\n            int64_t v53; // 0x4061b0\n            int64_t v54; // 0x4061b0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40659b\n                int64_t v56 = v55 + 3; // 0x4065a7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406481\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406490\n            if (mem == NULL) {\n                // 0x4066bc\n                free((int64_t *)v21);\n                function_406720(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x406334;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4064a8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4064b2\n            uint32_t v62 = (int32_t)v59; // 0x4064b5\n            int64_t v63; // 0x4061b0\n            if (v62 >= 8) {\n                // 0x4065c4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4065de\n                int64_t v66 = v61 - v65; // 0x4065e2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4065ed\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4065fe\n                    int64_t v70 = v69 & 0xffffffff; // 0x4065fe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4065fb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40668f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4064c7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4064cb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4064db\n            int64_t v74 = v60 - 1; // 0x4064df\n            uint32_t v75 = (int32_t)v73; // 0x4064e4\n            int64_t v76; // 0x4061b0\n            if (v75 >= 8) {\n                // 0x406612\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40661c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40662c\n                int64_t v80 = v74 - v79; // 0x406630\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40663b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40664b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406649\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4066a6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4066ae\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4064f6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4064fa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4066f3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40650e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40639e;\n            } else {\n                goto lab_0x40651c;\n            }\n        }\n    }\n  lab_0x406390:;\n    int64_t v93 = v23; // 0x4061b0\n    int64_t v94 = v22; // 0x4061b0\n    int64_t v95 = v21; // 0x4061b0\n    goto lab_0x406390_2;\n  lab_0x4062d5:;\n    int64_t * mem3 = malloc(size); // 0x4062d5\n    int64_t v97 = (int64_t)&g10; // 0x4062e0\n    int64_t v98; // 0x4061b0\n    int64_t path; // 0x4061b0\n    if (mem3 == NULL) {\n        goto lab_0x4062b2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4062d5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4062f6;\n    }\n  lab_0x4061ea:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x4061dd\n    char v100 = *v3; // 0x4061ea\n    int64_t v101; // 0x4061b0\n    if (v100 == 0) {\n        // 0x406244\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4061b0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4061b0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406230\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406237;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406200\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40620d\n        char v107 = *(char *)v106; // 0x406212\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406244\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40621b\n    v104 = v103 + 1;\n  lab_0x406237:\n    // 0x406244\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4062b2:;\n    char * v108 = (char *)v97;\n    g47 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4061ea;\n  lab_0x4062f6:;\n    int64_t v109 = v98 + path; // 0x4062f6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406322\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x406351\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406682\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x406375\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406390_2:;\n                uint64_t v96 = *v32; // 0x406390\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40651c;\n                } else {\n                    goto lab_0x40639e;\n                }\n            }\n          lab_0x40652f:\n            // 0x40652f\n            function_406720(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x40654e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406334;\n  lab_0x40629b:;\n    int64_t * mem4 = malloc(size2); // 0x40629b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x406341\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4062f6;\n    } else {\n        goto lab_0x4062b2;\n    }\n  lab_0x406334:\n    // 0x406334\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4062b2;\n}\n"
        },
        {
            "funcName": "function_406720",
            "funcStartAddr": "406720",
            "funcEndAddr": "40679b",
            "decompiledFuncCode": "int64_t function_406720(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406727\n    if (fileno(stream) < 0) {\n        // 0x406787\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40673a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40676b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406787\n            return fclose(stream);\n        }\n    }\n    // 0x40673c\n    if ((int32_t)function_4067a0(a1, v1) == 0) {\n        // 0x406787\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406748\n    int32_t v3 = *v2; // 0x406750\n    int64_t result = fclose(stream); // 0x40675e\n    if (v3 != 0) {\n        // 0x406790\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406760\n    return result;\n}\n"
        },
        {
            "funcName": "function_4067a0",
            "funcStartAddr": "4067a0",
            "funcEndAddr": "4067e0",
            "decompiledFuncCode": "int64_t function_4067a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4067ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4067ba\n        return fflush(stream);\n    }\n    // 0x4067c8\n    function_4067e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4067e0",
            "funcStartAddr": "4067e0",
            "funcEndAddr": "406837",
            "decompiledFuncCode": "int64_t function_4067e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4067e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4067ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40681b\n    int64_t result = -1; // 0x406824\n    if (v1 != -1) {\n        // 0x406826\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406832\n    return result;\n}\n"
        },
        {
            "funcName": "function_406840",
            "funcStartAddr": "406840",
            "funcEndAddr": "40689d",
            "decompiledFuncCode": "int64_t function_406840(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406840\n    return function_401338();\n}\n"
        },
        {
            "funcName": "function_4068a0",
            "funcStartAddr": "4068a0",
            "funcEndAddr": "4068a1",
            "decompiledFuncCode": "int64_t function_4068a0(void) {\n    // 0x4068a0\n    int64_t result; // 0x4068a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068b0",
            "funcStartAddr": "4068b0",
            "funcEndAddr": "4068c8",
            "decompiledFuncCode": "int64_t function_4068b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4068b0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_4068c8",
            "funcStartAddr": "4068c8",
            "funcEndAddr": "4068e8",
            "decompiledFuncCode": "int64_t function_4068c8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x4068d2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4068d3\n        v1 -= 8;\n    }\n    // 0x4068e4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_truncate.elf"
}