{
    "funcInfo": [
        {
            "funcName": "function_4015e0",
            "funcStartAddr": "4015e0",
            "funcEndAddr": "4015e5",
            "decompiledFuncCode": "int64_t function_4015e0(void) {\n    // 0x4015e0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015e5",
            "funcStartAddr": "4015e5",
            "funcEndAddr": "4015ea",
            "decompiledFuncCode": "int64_t function_4015e5(void) {\n    // 0x4015e5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015ea",
            "funcStartAddr": "4015ea",
            "funcEndAddr": "4015ef",
            "decompiledFuncCode": "int64_t function_4015ea(void) {\n    // 0x4015ea\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015ef",
            "funcStartAddr": "4015ef",
            "funcEndAddr": "4015f4",
            "decompiledFuncCode": "int64_t function_4015ef(void) {\n    // 0x4015ef\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015f4",
            "funcStartAddr": "4015f4",
            "funcEndAddr": "4015f9",
            "decompiledFuncCode": "int64_t function_4015f4(void) {\n    // 0x4015f4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015f9",
            "funcStartAddr": "4015f9",
            "funcEndAddr": "4015fe",
            "decompiledFuncCode": "int64_t function_4015f9(void) {\n    // 0x4015f9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401600",
            "funcStartAddr": "401600",
            "funcEndAddr": "4017a5",
            "decompiledFuncCode": "int64_t function_401600(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x40160a\n    function_401de0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401600\n    function_405860(0x401bf0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    char v3 = 0; // 0x401645\n    while (true) {\n      lab_0x40164a:;\n        char v4 = v3;\n        int64_t v5 = function_404fa0(v1, a2, &g2, &g3, 0, v2); // 0x40165c\n        v3 = 1;\n        switch ((int32_t)v5) {\n            case -1: {\n                int64_t v6 = (int64_t)*(int32_t *)0x60923c; // 0x4016c8\n                if (v1 <= v6) {\n                    // 0x401781\n                    error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n                  lab_0x401683:\n                    // 0x401683\n                    function_401890(1);\n                    // UNREACHABLE\n                }\n                int64_t v7 = v4 == 0 ? 10 : 0; // 0x4016dd\n                int64_t data = *(int64_t *)((0x100000000 * v6 >> 29) + a2); // 0x40172c\n                int64_t n = function_401c90(data); // 0x401733\n                int64_t v8; // 0x401738\n                int64_t * v9; // 0x4016e6\n                uint64_t v10; // 0x4016e6\n                if (n == 0) {\n                    // 0x4016e6\n                    v8 = (int64_t)g30;\n                    v9 = (int64_t *)(v8 + 40);\n                    v10 = *v9;\n                    if (v10 >= *(int64_t *)(v8 + 48)) {\n                        // 0x401756\n                        __overflow(g30, 46);\n                    } else {\n                        // 0x4016f0\n                        *v9 = v10 + 1;\n                        *(char *)v10 = 46;\n                    }\n                } else {\n                    // 0x401744\n                    fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g30);\n                }\n                int64_t v11 = (int64_t)g30; // 0x4016fb\n                int64_t * v12 = (int64_t *)(v11 + 40); // 0x401702\n                uint64_t v13 = *v12; // 0x401702\n                if (*(int64_t *)(v11 + 48) > v13) {\n                    // 0x40170c\n                    *v12 = v13 + 1;\n                    *(char *)v13 = (char)v7;\n                } else {\n                    // 0x401770\n                    __overflow(g30, (int32_t)v7);\n                }\n                // 0x401717\n                g27 = &g28;\n                while (v1 > (int64_t)&g28) {\n                    // 0x40172a\n                    data = *(int64_t *)((0x100000000 * (int64_t)&g28 >> 29) + a2);\n                    n = function_401c90(data);\n                    if (n == 0) {\n                        // 0x4016e6\n                        v8 = (int64_t)g30;\n                        v9 = (int64_t *)(v8 + 40);\n                        v10 = *v9;\n                        if (v10 >= *(int64_t *)(v8 + 48)) {\n                            // 0x401756\n                            __overflow(g30, 46);\n                        } else {\n                            // 0x4016f0\n                            *v9 = v10 + 1;\n                            *(char *)v10 = 46;\n                        }\n                    } else {\n                        // 0x401744\n                        fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g30);\n                    }\n                    // 0x4016fb\n                    v11 = (int64_t)g30;\n                    v12 = (int64_t *)(v11 + 40);\n                    v13 = *v12;\n                    if (*(int64_t *)(v11 + 48) > v13) {\n                        // 0x40170c\n                        *v12 = v13 + 1;\n                        *(char *)v13 = (char)v7;\n                    } else {\n                        // 0x401770\n                        __overflow(g30, (int32_t)v7);\n                    }\n                    // 0x401717\n                    g27 = &g28;\n                }\n                // 0x401765\n                return 0;\n            }\n            case -130: {\n                // 0x40177a\n                function_401890(0);\n                // UNREACHABLE\n            }\n            case 122: {\n                goto lab_0x40164a;\n            }\n            case -131: {\n                // 0x401690\n                function_403e80((int64_t)g30, \"dirname\", \"GNU coreutils\", (int64_t)g18, \"David MacKenzie\", \"Jim Meyering\");\n                exit(0);\n                // UNREACHABLE\n            }\n            default: {\n                goto lab_0x401683;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4017b0",
            "funcEndAddr": "4017db",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4017b0\n    int64_t v1; // 0x4017b0\n    __libc_start_main(0x401600, (int32_t)a4, (char **)&v1, (void (*)())0x4057f0, (void (*)())0x405850, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017db",
            "funcStartAddr": "4017db",
            "funcEndAddr": "4017fa",
            "decompiledFuncCode": "int64_t function_4017db(void) {\n    // 0x4017db\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_4017fa",
            "funcStartAddr": "4017fa",
            "funcEndAddr": "401831",
            "decompiledFuncCode": "int64_t function_4017fa(void) {\n    // 0x4017fa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401831",
            "funcStartAddr": "401831",
            "funcEndAddr": "401888",
            "decompiledFuncCode": "int64_t function_401831(void) {\n    // 0x401831\n    if (g33 != 0) {\n        // 0x401887\n        int64_t result; // 0x401831\n        return result;\n    }\n    int64_t v1 = g34; // 0x401864\n    int64_t result2; // 0x401876\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401876\n        result2 = function_4017db();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401866\n        v1++;\n    }\n    // 0x40185a\n    g34 = v1;\n    // 0x401876\n    result2 = function_4017db();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401888",
            "funcStartAddr": "401888",
            "funcEndAddr": "40188d",
            "decompiledFuncCode": "int64_t function_401888(void) {\n    // 0x401888\n    return function_4017fa();\n}\n"
        },
        {
            "funcName": "function_401890",
            "funcStartAddr": "401890",
            "funcEndAddr": "401bcd",
            "decompiledFuncCode": "int64_t function_401890(int64_t a1) {\n    int32_t status = a1; // 0x4018a6\n    if (status != 0) {\n        // 0x4018aa\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4018cf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4018d6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION] NAME...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Output each NAME with its last non-slash component and trailing slashes\\nremoved; if NAME contains no /'s, output '.' (meaning the current directory).\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero     end each output line with NUL, not newline\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  %s /usr/bin/          -> \\\"/usr\\\"\\n  %s dir1/str dir2/str  -> \\\"dir1\\\" followed by \\\"dir2\\\"\\n  %s stdio.h            -> \\\".\\\"\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x4019b0\n    bool v2; // 0x401890\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401a30\n    int64_t v6 = *(int64_t *)v5; // 0x401a34\n    int64_t v7 = 8; // 0x401a3a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"dirname\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401a46\n        char v11 = *(char *)v9; // 0x401a46\n        char v12 = v11; // 0x401a46\n        bool v13 = false; // 0x401a46\n        while (v10 == v11) {\n            // 0x401a3c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401a46\n            int64_t v15 = v8 + v3; // 0x401a46\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401a52\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 8;\n    }\n    // 0x401a52\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401b64;\n        } else {\n            // 0x401b4e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401ba3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401ab4;\n            } else {\n                goto lab_0x401b64;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401ab4;\n        } else {\n            // 0x401a9a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401ba3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401ab4;\n            } else {\n                goto lab_0x401ab4;\n            }\n        }\n    }\n  lab_0x401b64:\n    // 0x401b64\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401af4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4018cf\n    exit(status);\n    // UNREACHABLE\n  lab_0x401ab4:\n    // 0x401ab4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401af4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4018cf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bd0",
            "funcStartAddr": "401bd0",
            "funcEndAddr": "401bd8",
            "decompiledFuncCode": "int64_t function_401bd0(int64_t a1) {\n    // 0x401bd0\n    g36 = a1;\n    int64_t result; // 0x401bd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401be0",
            "funcStartAddr": "401be0",
            "funcEndAddr": "401be8",
            "decompiledFuncCode": "int64_t function_401be0(int64_t a1) {\n    // 0x401be0\n    g35 = a1;\n    int64_t result; // 0x401be0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401bf0",
            "funcStartAddr": "401bf0",
            "funcEndAddr": "401c8e",
            "decompiledFuncCode": "int64_t function_401bf0(void) {\n    // 0x401bf0\n    int32_t * err_num; // 0x401c06\n    if ((int32_t)function_4050a0((int64_t)g30) == 0) {\n        goto lab_0x401c1c;\n    } else {\n        // 0x401c06\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x401c33;\n        } else {\n            // 0x401c17\n            if (*err_num != 32) {\n                goto lab_0x401c33;\n            } else {\n                goto lab_0x401c1c;\n            }\n        }\n    }\n  lab_0x401c1c:;\n    int64_t result = function_4050a0((int64_t)g32); // 0x401c23\n    if ((int32_t)result == 0) {\n        // 0x401c2c\n        return result;\n    }\n    // 0x401c6e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x401c33:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401c3f\n    if (g36 == 0) {\n        // 0x401c79\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401c53\n        error(0, *err_num, \"%s: %s\", (char *)function_403850((int64_t)g36), v1);\n    }\n    // 0x401c6e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c90",
            "funcStartAddr": "401c90",
            "funcEndAddr": "401ced",
            "decompiledFuncCode": "int64_t function_401c90(int64_t a1) {\n    // 0x401c90\n    int64_t v1; // 0x401c90\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x401c9e\n    int64_t v3 = function_401d50(a1, v1); // 0x401ca2\n    int64_t result = v3 - a1; // 0x401caa\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x401cd3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x401cc0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x401cd3\n            break;\n        }\n        result2--;\n    }\n    // 0x401cd3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401cf0",
            "funcStartAddr": "401cf0",
            "funcEndAddr": "401d4a",
            "decompiledFuncCode": "int64_t function_401cf0(int64_t a1) {\n    int64_t v1 = function_401c90(a1); // 0x401cf9\n    int64_t * mem = malloc((int32_t)(v1 + 1 + (int64_t)(v1 == 0))); // 0x401d0f\n    if (mem == NULL) {\n        // 0x401d36\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v1); // 0x401d25\n    int64_t v2 = v1; // 0x401d30\n    if (v1 == 0) {\n        // 0x401d40\n        *(char *)dest_mem = 46;\n        v2 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x401d25\n    *(char *)(v2 + result) = 0;\n    // 0x401d36\n    return result;\n}\n"
        },
        {
            "funcName": "function_401d50",
            "funcStartAddr": "401d50",
            "funcEndAddr": "401dab",
            "decompiledFuncCode": "int64_t function_401d50(int64_t a1, int64_t a2) {\n    // 0x401d50\n    int64_t v1; // 0x401d50\n    char v2 = v1;\n    int64_t v3 = a1; // 0x401d59\n    int64_t v4 = a1; // 0x401d59\n    char v5 = v2; // 0x401d59\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x401d64\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x401d60\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x401d6e\n    if (v5 == 0) {\n      lab_0x401daa:\n        // 0x401daa\n        return result;\n    }\n    int64_t v7 = v4; // 0x401d98\n    int64_t v8 = 0; // 0x401d98\n    int64_t v9; // 0x401d50\n    int64_t v10; // 0x401d9a\n    char v11; // 0x401d9e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x401d95\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x401d9a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x401d95\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x401d8a\n    char v14 = *(char *)v13; // 0x401d8e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x401d95\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x401d9a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x401d95\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x401d80\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x401daa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401db0",
            "funcStartAddr": "401db0",
            "funcEndAddr": "401ddb",
            "decompiledFuncCode": "int64_t function_401db0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x401db4\n    int64_t result = len; // 0x401db4\n    if (len < 2) {\n        // 0x401dca\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x401dc8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x401dd0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x401dca\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x401dca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401de0",
            "funcStartAddr": "401de0",
            "funcEndAddr": "401e79",
            "decompiledFuncCode": "int64_t function_401de0(int64_t str) {\n    // 0x401de0\n    if (str == 0) {\n        // 0x401e59\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401dee\n    int64_t result = (int64_t)found_char_pos; // 0x401dee\n    if (found_char_pos == NULL) {\n        // 0x401e49\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401df8\n    if (v1 - str < 7) {\n        // 0x401e49\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x401e08\n    bool v2; // 0x401de0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401de0\n    int64_t v5 = result - 6; // 0x401de0\n    int64_t v6 = 7; // 0x401e16\n    unsigned char v7 = *(char *)v5; // 0x401e16\n    char v8 = *(char *)v4; // 0x401e16\n    char v9 = v8; // 0x401e16\n    bool v10 = false; // 0x401e16\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401e20\n    int64_t v13 = v1; // 0x401e20\n    int64_t v14 = 3; // 0x401e20\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401e49\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401e32\n    char v16 = *(char *)v12; // 0x401e32\n    char v17 = v16; // 0x401e32\n    bool v18 = false; // 0x401e32\n    while (v15 == v16) {\n        // 0x401e22\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401e3c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401e3e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x401e49\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e80",
            "funcStartAddr": "401e80",
            "funcEndAddr": "401f72",
            "decompiledFuncCode": "int64_t function_401e80(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401e94\n    int64_t result = (int64_t)v1; // 0x401e94\n    if (result != a1) {\n        // 0x401ea1\n        return result;\n    }\n    int64_t v2 = function_405160(); // 0x401eb0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x401f66\n    if (v3 == 85) {\n        // 0x401ec0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x401f58\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x401eee\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x401efb\n        // 0x401ea1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x401f58\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x401f3d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x401f4a\n    // 0x401ea1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_401f80",
            "funcStartAddr": "401f80",
            "funcEndAddr": "401fd7",
            "decompiledFuncCode": "int64_t function_401f80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x401f80\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x401fc8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fd7",
            "funcStartAddr": "401fd7",
            "funcEndAddr": "4031a1",
            "decompiledFuncCode": "int64_t function_401fd7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402021\n    int64_t v3 = 0; // 0x402021\n    int64_t v4; // 0x401fd7\n    int64_t v5; // 0x401fd7\n    int64_t v6; // 0x401fd7\n    int64_t v7; // 0x401fd7\n    int64_t v8; // 0x401fd7\n    int64_t v9; // 0x401fd7\n    int64_t v10; // 0x401fd7\n    int64_t v11; // 0x401fd7\n    int64_t v12; // 0x401fd7\n    int64_t v13; // 0x401fd7\n    int64_t v14; // 0x401fd7\n    int64_t v15; // 0x401fd7\n    int64_t v16; // 0x401fd7\n    int64_t v17; // 0x401fd7\n    int64_t v18; // 0x401fd7\n    int64_t result; // 0x401fd7\n    int64_t v19; // 0x401fd7\n    int32_t wc; // bp+132, 0x401fd7\n    int64_t ps; // bp+136, 0x401fd7\n    char v20; // 0x402590\n    int64_t v21; // 0x402590\n    int64_t v22; // 0x402938\n    int64_t v23; // 0x401fd7\n    int64_t v24; // 0x402957\n    int32_t v25; // 0x401fd7\n    while (true) {\n      lab_0x402028_2:\n        // 0x402028\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x401fd7\n        int64_t v27; // 0x40205c\n        while (true) {\n          lab_0x402028:\n            // 0x402028\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402033\n            if (v15 == -1) {\n                // 0x402035\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402043\n            if (v28) {\n                // break (via goto) -> 0x4027a8\n                goto lab_0x4027a8;\n            }\n            // 0x40204c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40263b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402181;\n                    }\n                    // 0x402a5d\n                    v26 = v5 + 1;\n                    goto lab_0x402028;\n                }\n                case 7: {\n                    goto lab_0x402181;\n                }\n                case 8: {\n                    goto lab_0x402181;\n                }\n                case 9: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402181;\n                }\n                case 12: {\n                    goto lab_0x402181;\n                }\n                case 13: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40214d;\n                }\n                case 36: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402181;\n                }\n                case 38: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402181;\n                }\n                case 44: {\n                    goto lab_0x402181;\n                }\n                case 45: {\n                    goto lab_0x402181;\n                }\n                case 46: {\n                    goto lab_0x402181;\n                }\n                case 47: {\n                    goto lab_0x402181;\n                }\n                case 48: {\n                    goto lab_0x402181;\n                }\n                case 49: {\n                    goto lab_0x402181;\n                }\n                case 50: {\n                    goto lab_0x402181;\n                }\n                case 51: {\n                    goto lab_0x402181;\n                }\n                case 52: {\n                    goto lab_0x402181;\n                }\n                case 53: {\n                    goto lab_0x402181;\n                }\n                case 54: {\n                    goto lab_0x402181;\n                }\n                case 55: {\n                    goto lab_0x402181;\n                }\n                case 56: {\n                    goto lab_0x402181;\n                }\n                case 57: {\n                    goto lab_0x402181;\n                }\n                case 58: {\n                    goto lab_0x402181;\n                }\n                case 59: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402181;\n                }\n                case 66: {\n                    goto lab_0x402181;\n                }\n                case 67: {\n                    goto lab_0x402181;\n                }\n                case 68: {\n                    goto lab_0x402181;\n                }\n                case 69: {\n                    goto lab_0x402181;\n                }\n                case 70: {\n                    goto lab_0x402181;\n                }\n                case 71: {\n                    goto lab_0x402181;\n                }\n                case 72: {\n                    goto lab_0x402181;\n                }\n                case 73: {\n                    goto lab_0x402181;\n                }\n                case 74: {\n                    goto lab_0x402181;\n                }\n                case 75: {\n                    goto lab_0x402181;\n                }\n                case 76: {\n                    goto lab_0x402181;\n                }\n                case 77: {\n                    goto lab_0x402181;\n                }\n                case 78: {\n                    goto lab_0x402181;\n                }\n                case 79: {\n                    goto lab_0x402181;\n                }\n                case 80: {\n                    goto lab_0x402181;\n                }\n                case 81: {\n                    goto lab_0x402181;\n                }\n                case 82: {\n                    goto lab_0x402181;\n                }\n                case 83: {\n                    goto lab_0x402181;\n                }\n                case 84: {\n                    goto lab_0x402181;\n                }\n                case 85: {\n                    goto lab_0x402181;\n                }\n                case 86: {\n                    goto lab_0x402181;\n                }\n                case 87: {\n                    goto lab_0x402181;\n                }\n                case 88: {\n                    goto lab_0x402181;\n                }\n                case 89: {\n                    goto lab_0x402181;\n                }\n                case 90: {\n                    goto lab_0x402181;\n                }\n                case 91: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402181;\n                }\n                case 94: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402181;\n                }\n                case 96: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402181;\n                }\n                case 98: {\n                    goto lab_0x402181;\n                }\n                case 99: {\n                    goto lab_0x402181;\n                }\n                case 100: {\n                    goto lab_0x402181;\n                }\n                case 101: {\n                    goto lab_0x402181;\n                }\n                case 102: {\n                    goto lab_0x402181;\n                }\n                case 103: {\n                    goto lab_0x402181;\n                }\n                case 104: {\n                    goto lab_0x402181;\n                }\n                case 105: {\n                    goto lab_0x402181;\n                }\n                case 106: {\n                    goto lab_0x402181;\n                }\n                case 107: {\n                    goto lab_0x402181;\n                }\n                case 108: {\n                    goto lab_0x402181;\n                }\n                case 109: {\n                    goto lab_0x402181;\n                }\n                case 110: {\n                    goto lab_0x402181;\n                }\n                case 111: {\n                    goto lab_0x402181;\n                }\n                case 112: {\n                    goto lab_0x402181;\n                }\n                case 113: {\n                    goto lab_0x402181;\n                }\n                case 114: {\n                    goto lab_0x402181;\n                }\n                case 115: {\n                    goto lab_0x402181;\n                }\n                case 116: {\n                    goto lab_0x402181;\n                }\n                case 117: {\n                    goto lab_0x402181;\n                }\n                case 118: {\n                    goto lab_0x402181;\n                }\n                case 119: {\n                    goto lab_0x402181;\n                }\n                case 120: {\n                    goto lab_0x402181;\n                }\n                case 121: {\n                    goto lab_0x402181;\n                }\n                case 122: {\n                    goto lab_0x402181;\n                }\n                case 123: {\n                    goto lab_0x402125;\n                }\n                case 124: {\n                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402125;\n                }\n                case 126: {\n                    goto lab_0x40214d;\n                }\n                default: {\n                    goto lab_0x402525;\n                }\n            }\n        }\n      lab_0x402525:\n        if (v23 != 1) {\n            // 0x402890\n            ps = 0;\n            int64_t len = v15; // 0x4028a0\n            if (v15 == -1) {\n                // 0x4028a2\n                len = strlen((char *)str);\n            }\n            // 0x4028ce\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40292f:\n                // 0x40292f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402934\n                int64_t v30 = v29 + str;\n                v24 = function_405020(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x402eaa_2;\n                    }\n                    case -1: {\n                        goto lab_0x402eaa_2;\n                    }\n                    case -2: {\n                        // 0x402f8d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x402fc7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x402fca\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x402fd7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x402fd0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x402eaa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x402eaa_2;\n                    }\n                    case 1: {\n                        goto lab_0x402900;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4029ac\n                        char v34 = *(char *)v33; // 0x4029bd\n                        unsigned char v35; // 0x401fd7\n                        if (v34 < 125) {\n                            // 0x4029c8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4029df\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4029b0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4029bd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4029c8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4029df\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4029b0\n                            v33++;\n                        }\n                        goto lab_0x402900;\n                    }\n                }\n            }\n            goto lab_0x402eaa_2;\n        } else {\n            // 0x402574\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402181;\n        }\n    }\n  lab_0x4027a8:\n    // 0x4027a8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4030aa\n        if (v8 > result) {\n            // 0x4030b3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4023d7\n        return result;\n    }\n    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402181:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402190\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40239a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402291\n    char v40 = v20; // 0x402291\n    int64_t v41 = v38; // 0x402291\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402291\n    int64_t v43 = v36; // 0x402291\n    goto lab_0x40220d;\n  lab_0x40239a_2:\n    // 0x4023d7\n    return function_401f80(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402eaa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402181;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402a7e\n        int64_t v50 = v5 + 1; // 0x402b61\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402b68\n        char v52 = v20; // 0x402b68\n        int64_t v53 = result; // 0x402b68\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402b31\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402b35\n            int64_t v56 = v54 + 1; // 0x402b3a\n            int64_t v57 = v51 + 1; // 0x402b61\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402b2c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402b31\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402b35\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40220d;\n    }\n  lab_0x402900:\n    // 0x402900\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40291f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402922\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x402eaa\n        goto lab_0x402eaa_2;\n    }\n    goto lab_0x40292f;\n  lab_0x40214d:\n    // 0x40214d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40239a_2;\n    }\n    goto lab_0x402181;\n  lab_0x402125:;\n    bool v60 = v15 == 1; // 0x402130\n    if (v15 == -1) {\n        // 0x402132\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40213e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402181;\n    } else {\n        goto lab_0x40214d;\n    }\n  lab_0x40220d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402212\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402216\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402028_2;\n}\n"
        },
        {
            "funcName": "function_4031b0",
            "funcStartAddr": "4031b0",
            "funcEndAddr": "40334e",
            "decompiledFuncCode": "int64_t function_4031b0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4031b2\n    int32_t * v3 = __errno_location(); // 0x4031cc\n    int64_t v4 = (int64_t)g21; // 0x4031d1\n    int32_t v5 = *v3; // 0x4031db\n    int64_t v6 = v4; // 0x4031f1\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403349\n            function_404210(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403200\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403207\n        int64_t v9; // 0x4031b0\n        if (g21 == &g22) {\n            int64_t v10 = function_404020(0, v8); // 0x40332a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x40332f\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404020(v4, v8); // 0x40321b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x40322a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x40322a\n        int32_t v14 = v7; // 0x403231\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403261\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40326b\n    int64_t * v17 = (int64_t *)v15; // 0x40326e\n    uint64_t v18 = *v17; // 0x40326e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403271\n    int64_t result = *v19; // 0x403271\n    int64_t v20; // 0x4031b0\n    uint64_t v21 = function_401f80(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403294\n    if (v18 > v21) {\n        // 0x40330b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4032a7\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x4032b7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_403fc0(v22); // 0x4032d1\n    *v19 = result2;\n    int64_t v23; // 0x4031b0\n    function_401f80(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40330b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403350",
            "funcStartAddr": "403350",
            "funcEndAddr": "403384",
            "decompiledFuncCode": "int64_t function_403350(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403357\n    int64_t result = function_4041c0(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x403376\n    return result;\n}\n"
        },
        {
            "funcName": "function_403390",
            "funcStartAddr": "403390",
            "funcEndAddr": "40339f",
            "decompiledFuncCode": "int64_t function_403390(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x40339c\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033a0",
            "funcStartAddr": "4033a0",
            "funcEndAddr": "4033af",
            "decompiledFuncCode": "int64_t function_4033a0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x4033a8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_4033b0",
            "funcStartAddr": "4033b0",
            "funcEndAddr": "4033e3",
            "decompiledFuncCode": "int64_t function_4033b0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x4033c9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4033ce\n    uint32_t v3 = *v2; // 0x4033ce\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4033d2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4033f0",
            "funcStartAddr": "4033f0",
            "funcEndAddr": "403403",
            "decompiledFuncCode": "int64_t function_4033f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x4033fc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "40343b",
            "decompiledFuncCode": "int64_t function_403410(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403418\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403435\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40342c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403440",
            "funcStartAddr": "403440",
            "funcEndAddr": "4034b2",
            "decompiledFuncCode": "int64_t function_403440(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x403462\n    int32_t * v2 = __errno_location(); // 0x40346b\n    uint32_t v3 = *(int32_t *)v1; // 0x40348b\n    int64_t result = function_401f80(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40349a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034c0",
            "funcStartAddr": "4034c0",
            "funcEndAddr": "4035a1",
            "decompiledFuncCode": "int64_t function_4034c0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x4034e2\n    int32_t * v2 = __errno_location(); // 0x4034e8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403507\n    int32_t * v4 = (int32_t *)v1; // 0x40350a\n    int64_t v5 = function_401f80(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403525\n    int64_t v6 = v5 + 1; // 0x40352a\n    int64_t result = function_403fc0(v6); // 0x40353f\n    function_401f80(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403584\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40358d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4035b0",
            "funcStartAddr": "4035b0",
            "funcEndAddr": "4035ba",
            "decompiledFuncCode": "int64_t function_4035b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4035b0\n    return function_4034c0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "403655",
            "decompiledFuncCode": "int64_t function_4035c0(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x4035c0\n    int64_t v2 = v1; // 0x4035c0\n    int64_t v3 = v2; // 0x4035d4\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x4035f3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4035f0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x40360d\n    if (g22 != 0x6092a0) {\n        // 0x40360f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g38;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x403631\n    if (g21 != &g22) {\n        // 0x403633\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g49;\n    }\n    // 0x403646\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403660",
            "funcStartAddr": "403660",
            "funcEndAddr": "403671",
            "decompiledFuncCode": "int64_t function_403660(void) {\n    // 0x403660\n    int64_t v1; // 0x403660\n    return function_4031b0(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "40368a",
            "decompiledFuncCode": "int64_t function_403680(void) {\n    // 0x403680\n    int64_t v1; // 0x403680\n    return function_4031b0(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403690",
            "funcStartAddr": "403690",
            "funcEndAddr": "4036a6",
            "decompiledFuncCode": "int64_t function_403690(int64_t a1) {\n    // 0x403690\n    return function_4031b0(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "4036c2",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1, int64_t a2) {\n    // 0x4036b0\n    return function_4031b0(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "403738",
            "decompiledFuncCode": "int64_t function_4036d0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4036e0\n    return function_4031b0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403740",
            "funcStartAddr": "403740",
            "funcEndAddr": "4037a4",
            "decompiledFuncCode": "int64_t function_403740(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403750\n    return function_4031b0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4037b0",
            "funcStartAddr": "4037b0",
            "funcEndAddr": "4037bc",
            "decompiledFuncCode": "int64_t function_4037b0(int64_t a1, int64_t a2) {\n    // 0x4037b0\n    return function_4036d0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4037c0",
            "funcStartAddr": "4037c0",
            "funcEndAddr": "4037cf",
            "decompiledFuncCode": "int64_t function_4037c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4037c0\n    return function_403740(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4037d0",
            "funcStartAddr": "4037d0",
            "funcEndAddr": "403840",
            "decompiledFuncCode": "int64_t function_4037d0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x4037dd\n    int128_t v2 = __asm_movdqa(g40); // 0x4037e5\n    int128_t v3 = __asm_movdqa(g41); // 0x4037ed\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403802\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403818\n    uint32_t v6 = *v5; // 0x403818\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40381d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4031b0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403840",
            "funcStartAddr": "403840",
            "funcEndAddr": "40384d",
            "decompiledFuncCode": "int64_t function_403840(int64_t a1, int64_t a2) {\n    // 0x403840\n    return function_4037d0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403850",
            "funcStartAddr": "403850",
            "funcEndAddr": "403861",
            "decompiledFuncCode": "int64_t function_403850(int64_t a1) {\n    // 0x403850\n    return function_4037d0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "40387a",
            "decompiledFuncCode": "int64_t function_403870(void) {\n    // 0x403870\n    int64_t v1; // 0x403870\n    return function_4037d0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "4038ee",
            "decompiledFuncCode": "int64_t function_403880(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40389a\n    return function_4031b0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "40395c",
            "decompiledFuncCode": "int64_t function_4038f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x4038f7\n    int128_t v2 = __asm_movdqa(g40); // 0x4038ff\n    int128_t v3 = __asm_movdqa(g41); // 0x403907\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403929\n    if (a2 == 0 || a3 == 0) {\n        // 0x403957\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40393a\n    return function_4031b0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "403969",
            "decompiledFuncCode": "int64_t function_403960(void) {\n    // 0x403960\n    int64_t v1; // 0x403960\n    return function_4038f0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "403987",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403970\n    return function_4038f0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "4039a3",
            "decompiledFuncCode": "int64_t function_403990(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403990\n    return function_4038f0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4039b0",
            "funcStartAddr": "4039b0",
            "funcEndAddr": "4039ba",
            "decompiledFuncCode": "int64_t function_4039b0(void) {\n    // 0x4039b0\n    int64_t v1; // 0x4039b0\n    return function_4031b0(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_4039c0",
            "funcStartAddr": "4039c0",
            "funcEndAddr": "4039d2",
            "decompiledFuncCode": "int64_t function_4039c0(int64_t a1, int64_t a2) {\n    // 0x4039c0\n    return function_4031b0(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_4039e0",
            "funcStartAddr": "4039e0",
            "funcEndAddr": "4039f1",
            "decompiledFuncCode": "int64_t function_4039e0(void) {\n    // 0x4039e0\n    int64_t v1; // 0x4039e0\n    return function_4031b0(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a16",
            "decompiledFuncCode": "int64_t function_403a00(int64_t a1) {\n    // 0x403a00\n    return function_4031b0(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403dfd",
            "decompiledFuncCode": "int64_t function_403a20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403ab8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403a3c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403a56\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403a9b\n    if (a6 < 10) {\n        // 0x403aaa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403ba2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403e20",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403e00\n    if (a5 == 0) {\n        // 0x403e1b\n        return function_403a20(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x403e07\n    v1++;\n    int64_t v2 = v1; // 0x403e19\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403e10\n        v1++;\n        v2 = v1;\n    }\n    // 0x403e1b\n    return function_403a20(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e80",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403e20\n    int64_t v3 = &v2; // 0x403e20\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x403e53\n    int64_t v6; // 0x403e3d\n    int64_t * v7; // 0x403e5b\n    int64_t v8; // 0x403e5b\n    int64_t v9; // 0x403e67\n    if (v5 < 48) {\n        // 0x403e30\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x403e73\n            break;\n        }\n    } else {\n        // 0x403e5b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x403e73\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x403e51\n    while (v4 != 9) {\n        // 0x403e49\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403e30\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x403e73\n                break;\n            }\n        } else {\n            // 0x403e5b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x403e73\n                break;\n            }\n        }\n        // 0x403e49\n        v10 = 10;\n    }\n    // 0x403e73\n    return function_403a20(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403f3c",
            "decompiledFuncCode": "int64_t function_403e80(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x403e80\n    int64_t v1; // bp-168, 0x403e80\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403e80\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403e80\n    int64_t v8; // 0x403e80\n    int64_t v9; // bp-56, 0x403e80\n    int64_t v10; // 0x403ee5\n    int64_t v11; // 0x403f09\n    if ((int32_t)v6 < 48) {\n        // 0x403ed0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403f20\n            break;\n        }\n    } else {\n        // 0x403f02\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403f20\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403efa\n    int64_t v13 = 10; // 0x403efa\n    while (v5 != 9) {\n        // 0x403efc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403ed0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403f20\n                break;\n            }\n        } else {\n            // 0x403f02\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403f20\n                break;\n            }\n        }\n        // 0x403ef2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403f20\n    int64_t v14; // bp-136, 0x403e80\n    int64_t result = function_403a20(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x403f2f\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f40",
            "funcStartAddr": "403f40",
            "funcEndAddr": "403fb4",
            "decompiledFuncCode": "int64_t function_403f40(int64_t a1) {\n    // 0x403f40\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x403fa3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "403fda",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x403fc4\n    if (size != 0 != (mem == NULL)) {\n        // 0x403fd3\n        return (int64_t)mem;\n    }\n    // 0x403fd5\n    function_404210(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "404001",
            "decompiledFuncCode": "int64_t function_403fe0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x403fe3\n    int64_t v2 = v1; // 0x403fe3\n    if (v2 < 0) {\n        // 0x403ffb\n        function_404210(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403ff9\n        return function_403fc0(v2);\n    }\n    // 0x403ffb\n    function_404210(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404010",
            "funcStartAddr": "404010",
            "funcEndAddr": "404012",
            "decompiledFuncCode": "int64_t function_404010(void) {\n    // 0x404010\n    int64_t v1; // 0x404010\n    return function_403fc0(v1);\n}\n"
        },
        {
            "funcName": "function_404020",
            "funcStartAddr": "404020",
            "funcEndAddr": "404056",
            "decompiledFuncCode": "int64_t function_404020(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404048\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404031\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404040\n        return (int64_t)mem;\n    }\n    // 0x404051\n    function_404210(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "404081",
            "decompiledFuncCode": "int64_t function_404060(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404063\n    int64_t v2 = v1; // 0x404063\n    if (v2 < 0) {\n        // 0x40407b\n        function_404210(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404079\n        return function_404020(a1, v2);\n    }\n    // 0x40407b\n    function_404210(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "404116",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4040eb\n            function_404210(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404020(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4040d3\n    if (a2 == 0) {\n        // 0x4040f8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4040d8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4040eb\n        function_404210(a1);\n        // UNREACHABLE\n    }\n    // 0x4040ba\n    *(int64_t *)a2 = v2;\n    return function_404020(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404170",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404120\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40416a\n            function_404210(a1);\n            // UNREACHABLE\n        }\n        // 0x404142\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404020(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404155\n        *(int64_t *)a2 = 128;\n        return function_404020(0, 128);\n    }\n    // 0x404168\n    if (a2 < 0) {\n        // 0x40416a\n        function_404210(a1);\n        // UNREACHABLE\n    }\n    // 0x404142\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404020(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "404187",
            "decompiledFuncCode": "int64_t function_404170(int64_t a1, int64_t a2) {\n    // 0x404170\n    return (int64_t)memset((int64_t *)function_403fc0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404190",
            "funcStartAddr": "404190",
            "funcEndAddr": "4041be",
            "decompiledFuncCode": "int64_t function_404190(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404197\n    if ((int64_t)v1 < 0) {\n        // 0x4041b9\n        function_404210(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4041b9\n        function_404210(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4041aa\n    if (mem != NULL) {\n        // 0x4041b4\n        return (int64_t)mem;\n    }\n    // 0x4041b9\n    function_404210(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041e8",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_403fc0(a2); // 0x4041cf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4041f0",
            "funcStartAddr": "4041f0",
            "funcEndAddr": "404203",
            "decompiledFuncCode": "int64_t function_4041f0(int64_t str) {\n    // 0x4041f0\n    return function_4041c0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "404241",
            "decompiledFuncCode": "int64_t function_404210(int64_t a1) {\n    // 0x404210\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40432f",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40425c\n    uint32_t v2 = *v1; // 0x40425c\n    int64_t v3 = a2 & 0xffffffff; // 0x404261\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404264\n    uint64_t v5 = (int64_t)*v4; // 0x404264\n    int64_t v6; // 0x4042d2\n    if (v3 <= v5) {\n      lab_0x4042cc_2:\n        // 0x4042cc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404252\n    int64_t v8 = v2; // 0x404250\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4042cc\n        goto lab_0x4042cc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404288\n    int64_t v17; // 0x404296\n    int64_t * v18; // 0x4042b0\n    int64_t * v19; // 0x4042b3\n    int64_t v20; // 0x4042be\n    int64_t v21; // 0x404296\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404293\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4042b0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4042c7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4042cc\n            goto lab_0x4042cc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4042cc\n            goto lab_0x4042cc_2;\n        }\n        // 0x404282\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40430b\n    int64_t * v23 = (int64_t *)v22; // 0x404310\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404313\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404310\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404327\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40427d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4042cc\n            goto lab_0x4042cc_2;\n        }\n        // 0x404282\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404293\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4042b0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4042c7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4042cc\n                goto lab_0x4042cc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4042cc\n                goto lab_0x4042cc_2;\n            }\n            // 0x404282\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4042f0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404310\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404327\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4042cc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "40494c",
            "decompiledFuncCode": "int64_t function_404330(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40434f\n    int64_t v2 = *v1; // 0x40434f\n    char * str2 = (char *)v2; // 0x40435c\n    char c = *str2; // 0x40435c\n    int64_t v3 = v2; // 0x404388\n    int64_t v4 = 0; // 0x404330\n    int32_t v5; // 0x404330\n    int64_t v6; // 0x404330\n    int64_t v7; // 0x404330\n    int64_t v8; // 0x404330\n    int64_t v9; // 0x404330\n    int64_t v10; // 0x404330\n    int64_t v11; // 0x404330\n    int64_t v12; // 0x404330\n    int64_t v13; // 0x404330\n    int64_t str3; // 0x404330\n    int64_t v14; // 0x404330\n    int64_t v15; // 0x404330\n    int64_t v16; // 0x404330\n    int64_t v17; // 0x404330\n    int32_t v18; // 0x404330\n    int32_t v19; // 0x404330\n    int32_t v20; // 0x404330\n    int32_t v21; // 0x404330\n    int32_t v22; // 0x404330\n    int32_t v23; // 0x404330\n    int32_t v24; // 0x404330\n    int32_t v25; // 0x404330\n    int32_t v26; // 0x404330\n    int32_t v27; // 0x404330\n    int32_t v28; // 0x404330\n    int32_t v29; // 0x404330\n    int64_t nmemb; // 0x404330\n    int64_t v30; // 0x404330\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40438c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404388\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404398\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40439e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404368\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4043cc\n                int64_t v34; // 0x404330\n                int64_t v35; // 0x404330\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4043d5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404550;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4043e6\n                int64_t v37 = *(int64_t *)v36; // 0x4043ea\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4043c0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4043d5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404550;\n                        }\n                    }\n                    // 0x4043e6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404436:\n                    // 0x404436\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404490;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404600\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404490;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4045b0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40445a;\n                                } else {\n                                    // 0x4045bc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40445a;\n                                    } else {\n                                        // 0x4045ca\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40445a;\n                                        } else {\n                                            goto lab_0x404490;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40445a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4044a1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404676\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404822\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x404842\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40488f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x4048a9\n                            int64_t v45; // 0x4048ab\n                            if (*(char *)v42 != 0) {\n                                // 0x4048ab\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4048a3\n                            while (v17 + nmemb != v42) {\n                                // 0x4048a5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4048ab\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x404898\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4048d0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404684\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4047df\n                        free((int64_t *)v17);\n                    }\n                    // 0x4046d9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4046f0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40459e\n                    return 63;\n                }\n                // 0x4044c0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404544\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404550:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404560\n                    uint32_t v50 = *v49; // 0x404560\n                    int64_t v51 = v50; // 0x404560\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40456a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404573\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40479f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40474a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40459e\n                            return 63;\n                        }\n                        // 0x4045e8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4048ff\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4047fd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404810\n                                // 0x40459e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40470e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404722\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40458b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40458e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404592\n                    int64_t result = v59; // 0x404598\n                    if (v58 != 0) {\n                        // 0x40459a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40459e\n                    return result;\n                }\n            } else {\n                // 0x40439e\n                v5 = v32;\n            }\n            // break -> 0x4044c5\n            break;\n        }\n    }\n    // 0x4044c5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4044dd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4044e7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40459e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404629\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404516\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404526\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404490:\n    // 0x404490\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404490\n    int64_t v63 = *(int64_t *)v62; // 0x404494\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4044a1\n        goto lab_0x4044a1;\n    }\n    goto lab_0x404436;\n  lab_0x40445a:\n    // 0x40445a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404330\n    int32_t v65; // 0x404330\n    int32_t v66; // 0x404330\n    if (v27 != 0) {\n        goto lab_0x404490;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404610\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404490;\n            } else {\n                goto lab_0x404481;\n            }\n        } else {\n            // 0x404475\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40476c\n                int64_t v67 = (int64_t)mem; // 0x40476c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404490;\n                } else {\n                    // 0x40477f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404481;\n                }\n            } else {\n                goto lab_0x404481;\n            }\n        }\n    }\n  lab_0x404481:\n    // 0x404481\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404490;\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "404f16",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404971\n    if (v3 < 1) {\n        // 0x404b2e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40496d\n    int32_t v5 = *(int32_t *)a7; // 0x404979\n    uint64_t v6 = a1 & 0xffffffff; // 0x40497b\n    int64_t v7 = v2; // 0x404980\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404983\n    *v8 = 0;\n    int64_t v9; // 0x404950\n    int64_t v10; // 0x404950\n    int64_t v11; // 0x404950\n    int64_t v12; // 0x404950\n    int64_t str; // 0x404950\n    int64_t v13; // 0x404950\n    int64_t v14; // 0x404950\n    int64_t v15; // 0x404950\n    int64_t v16; // 0x404950\n    int64_t v17; // 0x404950\n    int32_t v18; // 0x404950\n    char v19; // 0x404950\n    if (v5 == 0) {\n        // 0x404b68\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40499a;\n    } else {\n        // 0x404993\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4049e0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4049e3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404aa8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4049f6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404a06\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404abc;\n                } else {\n                    goto lab_0x404a18;\n                }\n            }\n        } else {\n            goto lab_0x40499a;\n        }\n    }\n  lab_0x40499a:\n    // 0x40499a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4049a0\n    *v24 = 0;\n    int64_t v25; // 0x404950\n    int64_t v26; // 0x404950\n    int64_t v27; // 0x404950\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404a90\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404a9d;\n        }\n        case 43: {\n            // 0x404da0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404a9d;\n        }\n        default: {\n            // 0x4049bc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404d1f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x404e38\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404a9d;\n                } else {\n                    // 0x404d2d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4049ca;\n                }\n            } else {\n                goto lab_0x4049ca;\n            }\n        }\n    }\n  lab_0x404aa8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404aaf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404a18;\n    } else {\n        goto lab_0x404abc;\n    }\n  lab_0x4049ca:\n    // 0x4049ca\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404a9d;\n  lab_0x404a9d:\n    // 0x404a9d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404aa8;\n  lab_0x404a18:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404a18\n    int64_t v31 = v30; // 0x404a18\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404a1a\n    if ((int64_t)*v32 > v31) {\n        // 0x404a1f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404a22\n    if (*v33 > v30) {\n        // 0x404a27\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404a2a\n    int64_t v35 = v31; // 0x404a2e\n    int64_t v36 = v15; // 0x404a2e\n    int64_t v37; // 0x404950\n    int64_t v38; // 0x404950\n    int64_t v39; // 0x404950\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404b98\n        int64_t v41 = v40; // 0x404b98\n        v2 = v41;\n        int64_t v42; // 0x404950\n        if (*v33 == v40) {\n            // 0x404d80\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404d88\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404ba4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404ba8\n                function_404250(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404bb8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404bc1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404bca\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404be1\n            int64_t v47 = v45 & 0xffffffff; // 0x404be5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404bee\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404bf4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404bf6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404bd0\n            int64_t v49 = v48 & 0xffffffff; // 0x404bd0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404be1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404bee\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404bf4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404bf6;\n                    }\n                }\n                // 0x404bd0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x404d98\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404bf6;\n    } else {\n        goto lab_0x404a34;\n    }\n  lab_0x404abc:\n    // 0x404abc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404abf\n    int64_t v51 = v12; // 0x404abf\n    int64_t v52 = v14; // 0x404abf\n    if (*(char *)v10 == 0) {\n        goto lab_0x404a18;\n    } else {\n        goto lab_0x404ac5;\n    }\n  lab_0x404a34:;\n    int32_t v53 = v35; // 0x404a34\n    int64_t v54; // 0x404950\n    int64_t v55; // 0x404950\n    int64_t v56; // 0x404950\n    int64_t v57; // 0x404950\n    int64_t v58; // 0x404950\n    int64_t v59; // 0x404950\n    char * v60; // 0x404950\n    int64_t v61; // 0x404950\n    int64_t v62; // 0x404a49\n    int64_t v63; // 0x404950\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404b83\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404b86;\n    } else {\n        // 0x404a3c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404950\n        int64_t v66 = v65 ? -1 : 1; // 0x404a50\n        int64_t v67 = (int64_t)\"--\"; // 0x404950\n        int64_t v68 = v62; // 0x404950\n        int64_t v69 = 3; // 0x404a50\n        unsigned char v70 = *(char *)v68; // 0x404a50\n        char v71 = *(char *)v67; // 0x404a50\n        char v72 = v71; // 0x404a50\n        bool v73 = false; // 0x404a50\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404b40\n            if (*(char *)v62 == 45) {\n                // 0x404c00\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404c00\n                if (c == 0) {\n                    goto lab_0x404b4a;\n                } else {\n                    // 0x404c0d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404c90;\n                    } else {\n                        if (c == 45) {\n                            // 0x404e73\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404ce5;\n                        } else {\n                            // 0x404c1e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404c90;\n                            } else {\n                                // 0x404c23\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404c44;\n                                } else {\n                                    // 0x404c2a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404c90;\n                                    } else {\n                                        goto lab_0x404c44;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404b4a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404a60\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404a63\n            int64_t v77 = v35 + 1; // 0x404a66\n            int32_t v78 = v77; // 0x404a69\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x404dd0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404a77\n                    function_404250(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404a85\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404b86;\n        }\n    }\n  lab_0x404ac5:;\n    // 0x404ac5\n    int64_t v79; // bp-104, 0x404950\n    int64_t v80 = &v79; // 0x40495a\n    int64_t v81 = v50 + 1; // 0x404ac5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404acc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404ad1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404ad5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404ad9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404ae1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404ae6\n    int32_t c2 = v84; // 0x404ae6\n    char * found_char_pos = strchr(str2, c2); // 0x404ae6\n    int64_t v87 = *v82; // 0x404aeb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404af5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404b00\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x404df0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x404dbd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404b2e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404ae6\n    char v91 = *(char *)(v90 + 1); // 0x404b1b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404ad5\n        if (v91 != 58) {\n            // 0x404b2e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404d44\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x404e48\n                *v8 = 0;\n            } else {\n                // 0x404e2c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404d6e\n            *v83 = 0;\n            // 0x404b2e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404d4e\n        if (v93 != 0) {\n            // 0x404de0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404d6e\n            *v83 = 0;\n            // 0x404b2e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404d61\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404d6e\n            *v83 = 0;\n            // 0x404b2e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x404eaa\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x404e5a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x404e61\n        // 0x404d6e\n        *v83 = 0;\n        // 0x404b2e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404cb9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404cbb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x404ee0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x404e91\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x404e98\n            // 0x404b2e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404cc6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404cca\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404ce5;\n  lab_0x404bf6:\n    // 0x404bf6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404a34;\n  lab_0x404ce5:;\n    int64_t v99 = function_404330(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404d03\n    // 0x404b2e\n    return v99 & 0xffffffff;\n  lab_0x404b86:;\n    int32_t v100 = v55; // 0x404b86\n    if (v100 != (int32_t)v59) {\n        // 0x404b8a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404b2e\n    return 0xffffffff;\n  lab_0x404b4a:\n    // 0x404b4a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404b51\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404b2e\n    return v99 & 0xffffffff;\n  lab_0x404c90:\n    // 0x404c90\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404ac5;\n  lab_0x404c44:\n    // 0x404c44\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404330(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x404c6a\n    if ((int32_t)v101 != -1) {\n        // 0x404b2e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404c7f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404c90;\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "404f76",
            "decompiledFuncCode": "int64_t function_404f20(int64_t a1) {\n    // 0x404f20\n    *(int32_t *)&g42 = g27;\n    *(int32_t *)&g43 = g26;\n    int64_t v1; // 0x404f20\n    int64_t result = function_404950(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x404f46\n    g27 = *(int32_t *)&g42;\n    g47 = g45;\n    *(int32_t *)&g25 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404f98",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404f80\n    return function_404f20(1);\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "404fb3",
            "decompiledFuncCode": "int64_t function_404fa0(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x404fa0\n    return function_404f20(0);\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "404fd5",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404fc0\n    return function_404950(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404ff6",
            "decompiledFuncCode": "int64_t function_404fe0(void) {\n    // 0x404fe0\n    return function_404f20(0);\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405018",
            "decompiledFuncCode": "int64_t function_405000(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405000\n    return function_404950(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405020",
            "funcStartAddr": "405020",
            "funcEndAddr": "40509a",
            "decompiledFuncCode": "int64_t function_405020(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40502b\n    int64_t v2 = (int64_t)&g11; // 0x40502b\n    int32_t * pwc; // 0x405020\n    int64_t v3; // 0x405020\n    int64_t n; // 0x405020\n    if (a2 == 0) {\n        goto lab_0x405072;\n    } else {\n        // 0x40502d\n        if (a3 == 0) {\n            // 0x405058\n            return -2;\n        }\n        // 0x405039\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405072;\n        } else {\n            goto lab_0x405044;\n        }\n    }\n  lab_0x405072:\n    // 0x405072\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405020\n    pwc = (int32_t *)&v4;\n    goto lab_0x405044;\n  lab_0x405044:;\n    char * wstr = (char *)v3; // 0x40504a\n    int64_t ps; // 0x405020\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40504a\n    int64_t result = v5; // 0x40504a\n    if (v5 < 0xfffffffe) {\n        // 0x405058\n        return result;\n    }\n    int64_t result2 = result; // 0x405089\n    if ((char)function_405100(0, v3) == 0) {\n        // 0x40508b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405058\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050fd",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4050a7\n    int64_t v2; // 0x4050a0\n    int64_t result = function_4056d0(a1, v2); // 0x4050b8\n    if ((v2 & 32) != 0) {\n        // 0x4050e0\n        if ((int32_t)result == 0) {\n            // 0x4050e4\n            *__errno_location() = 0;\n        }\n        // 0x4050da\n        return 0xffffffff;\n    }\n    // 0x4050c1\n    if ((int32_t)result == 0) {\n        // 0x4050da\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4050c8\n    if (v1 == 0) {\n        // 0x4050ca\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4050da\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405100",
            "funcStartAddr": "405100",
            "funcEndAddr": "40515e",
            "decompiledFuncCode": "int64_t function_405100(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405106\n    if (locale == NULL) {\n        // 0x405133\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405106\n    bool v2; // 0x405100\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x405100\n    int64_t v5 = v1; // 0x405100\n    int64_t v6 = 2; // 0x405125\n    unsigned char v7 = *(char *)v5; // 0x405125\n    char v8 = *(char *)v4; // 0x405125\n    char v9 = v8; // 0x405125\n    bool v10 = false; // 0x405125\n    while (v7 == v8) {\n        // 0x405118\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405131\n    int64_t v13 = v1; // 0x405131\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405133\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405131\n    unsigned char v15 = *(char *)v13; // 0x40514d\n    char v16 = *(char *)v12; // 0x40514d\n    char v17 = v16; // 0x40514d\n    bool v18 = false; // 0x40514d\n    while (v15 == v16) {\n        // 0x405140\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "4056c2",
            "decompiledFuncCode": "int64_t function_405160(void) {\n    char * v1 = nl_langinfo(14); // 0x405176\n    char * v2 = g46; // 0x40517b\n    char * v3; // 0x405160\n    int64_t v4; // 0x405160\n    int64_t v5; // 0x405160\n    int64_t v6; // 0x405160\n    int64_t v7; // 0x405160\n    int32_t size; // 0x405160\n    int32_t size2; // 0x405160\n    int32_t len; // 0x405232\n    int64_t v8; // 0x405232\n    char * env_val; // 0x40521d\n    if (v2 == NULL) {\n        // 0x405218\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405285;\n        } else {\n            // 0x40522a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405285;\n            } else {\n                // 0x40522f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40521d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4056b5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405285;\n                    } else {\n                        // 0x405629\n                        size2 = len + 14;\n                        goto lab_0x40524b;\n                    }\n                } else {\n                    goto lab_0x40524b;\n                }\n            }\n        }\n    } else {\n        // 0x405160\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40519a;\n    }\n  lab_0x4054cc:;\n    // 0x4054cc\n    struct _IO_FILE * stream; // 0x40530b\n    int32_t v10 = __uflow(stream); // 0x4054cf\n    int64_t v11; // 0x405160\n    int64_t v12 = v11; // 0x4054d9\n    int64_t v13; // 0x405160\n    int64_t v14 = v13; // 0x4054d9\n    int32_t v15 = v10; // 0x4054d9\n    int64_t v16; // 0x405160\n    int64_t v17 = v16; // 0x4054d9\n    int64_t v18 = v11; // 0x4054d9\n    int64_t v19 = v13; // 0x4054d9\n    int64_t v20 = v16; // 0x4054d9\n    if (v10 == -1) {\n        // break -> 0x4054df\n        goto lab_0x4054df;\n    }\n    goto lab_0x405359;\n  lab_0x40534e:;\n    // 0x40534e\n    int64_t v90; // 0x405160\n    int64_t * v32; // 0x405340\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405160\n    v12 = v89;\n    int64_t v91; // 0x405160\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405160\n    v17 = v92;\n    goto lab_0x405359;\n  lab_0x405359:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405160\n    int32_t v25; // bp-120, 0x405160\n    int32_t v26; // bp-184, 0x405160\n    int64_t v27; // 0x40530b\n    int64_t v28; // 0x405328\n    int64_t v29; // 0x40532d\n    int64_t * v30; // 0x405344\n    switch (c) {\n        case 32: {\n            goto lab_0x405340;\n        }\n        case 10: {\n            goto lab_0x405340;\n        }\n        case 9: {\n            goto lab_0x405340;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405531\n            int32_t v33; // 0x405160\n            char v34; // 0x405160\n            int32_t v35; // 0x40553e\n            if (v31 < *v30) {\n                // 0x405510\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40553b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405531\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405510\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40553b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405520\n                v36 = v33;\n            }\n            // 0x40560f\n            if (v36 == -1) {\n                // break -> 0x4054df\n                break;\n            }\n            goto lab_0x405340;\n        }\n        default: {\n            // 0x40536f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4054df\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405398\n            int64_t v39 = v37 + 4; // 0x40539a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4053a6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4053a8\n            while (v41 == 0) {\n                // 0x405398\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4053c6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4053d2\n            int64_t v45 = v43 + 4; // 0x4053d4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4053e0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4053e2\n            while (v47 == 0) {\n                // 0x4053d2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4053cf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4053f8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405408\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40540c\n            int64_t v52 = v51 + v48; // 0x405415\n            int64_t * mem; // 0x405160\n            int64_t v53; // 0x405160\n            int64_t v54; // 0x405160\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40554b\n                int64_t v56 = v55 + 3; // 0x405557\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405431\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405440\n            if (mem == NULL) {\n                // 0x40566c\n                free((int64_t *)v21);\n                function_4056d0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x4052e4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405458\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405462\n            uint32_t v62 = (int32_t)v59; // 0x405465\n            int64_t v63; // 0x405160\n            if (v62 >= 8) {\n                // 0x405574\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40558e\n                int64_t v66 = v61 - v65; // 0x405592\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40559d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4055ae\n                    int64_t v70 = v69 & 0xffffffff; // 0x4055ae\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4055ab\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40563f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405477\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40547b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40548b\n            int64_t v74 = v60 - 1; // 0x40548f\n            uint32_t v75 = (int32_t)v73; // 0x405494\n            int64_t v76; // 0x405160\n            if (v75 >= 8) {\n                // 0x4055c2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4055cc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4055dc\n                int64_t v80 = v74 - v79; // 0x4055e0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4055eb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4055fb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4055f9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405656\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40565e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4054a6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4054aa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4056a3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4054be\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40534e;\n            } else {\n                goto lab_0x4054cc;\n            }\n        }\n    }\n  lab_0x405340:;\n    int64_t v93 = v23; // 0x405160\n    int64_t v94 = v22; // 0x405160\n    int64_t v95 = v21; // 0x405160\n    goto lab_0x405340_2;\n  lab_0x405285:;\n    int64_t * mem3 = malloc(size); // 0x405285\n    int64_t v97 = (int64_t)&g11; // 0x405290\n    int64_t v98; // 0x405160\n    int64_t path; // 0x405160\n    if (mem3 == NULL) {\n        goto lab_0x405262;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405285\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4052a6;\n    }\n  lab_0x40519a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40518d\n    char v100 = *v3; // 0x40519a\n    int64_t v101; // 0x405160\n    if (v100 == 0) {\n        // 0x4051f4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405160\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405160\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4051e0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4051e7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4051b0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4051bd\n        char v107 = *(char *)v106; // 0x4051c2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4051f4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4051cb\n    v104 = v103 + 1;\n  lab_0x4051e7:\n    // 0x4051f4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405262:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40519a;\n  lab_0x4052a6:;\n    int64_t v109 = v98 + path; // 0x4052a6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4052d2\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x405301\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405632\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x405325\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405340_2:;\n                uint64_t v96 = *v32; // 0x405340\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4054cc;\n                } else {\n                    goto lab_0x40534e;\n                }\n            }\n          lab_0x4054df:\n            // 0x4054df\n            function_4056d0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x4054fe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4052e4;\n  lab_0x40524b:;\n    int64_t * mem4 = malloc(size2); // 0x40524b\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x4052f1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4052a6;\n    } else {\n        goto lab_0x405262;\n    }\n  lab_0x4052e4:\n    // 0x4052e4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405262;\n}\n"
        },
        {
            "funcName": "function_4056d0",
            "funcStartAddr": "4056d0",
            "funcEndAddr": "40574b",
            "decompiledFuncCode": "int64_t function_4056d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4056d7\n    if (fileno(stream) < 0) {\n        // 0x405737\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4056ea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40571b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405737\n            return fclose(stream);\n        }\n    }\n    // 0x4056ec\n    if ((int32_t)function_405750(a1, v1) == 0) {\n        // 0x405737\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4056f8\n    int32_t v3 = *v2; // 0x405700\n    int64_t result = fclose(stream); // 0x40570e\n    if (v3 != 0) {\n        // 0x405740\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405710\n    return result;\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "405790",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40576a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40576a\n        return fflush(stream);\n    }\n    // 0x405778\n    function_405790(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057e7",
            "decompiledFuncCode": "int64_t function_405790(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405790\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40579a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4057cb\n    int64_t result = -1; // 0x4057d4\n    if (v1 != -1) {\n        // 0x4057d6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4057e2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "40584d",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4057f0\n    return function_401278();\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "405851",
            "decompiledFuncCode": "int64_t function_405850(void) {\n    // 0x405850\n    int64_t result; // 0x405850\n    return result;\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "405878",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405860\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_405878",
            "funcStartAddr": "405878",
            "funcEndAddr": "405898",
            "decompiledFuncCode": "int64_t function_405878(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x405882\n    while (*(int64_t *)v1 != -1) {\n        // 0x405883\n        v1 -= 8;\n    }\n    // 0x405894\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dirname.elf"
}