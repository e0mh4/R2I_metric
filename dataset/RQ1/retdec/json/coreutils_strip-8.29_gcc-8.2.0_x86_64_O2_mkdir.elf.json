{
    "funcInfo": [
        {
            "funcName": "function_401be0",
            "funcStartAddr": "401be0",
            "funcEndAddr": "401be5",
            "decompiledFuncCode": "int64_t function_401be0(void) {\n    // 0x401be0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be5",
            "funcStartAddr": "401be5",
            "funcEndAddr": "401bea",
            "decompiledFuncCode": "int64_t function_401be5(void) {\n    // 0x401be5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bea",
            "funcStartAddr": "401bea",
            "funcEndAddr": "401bef",
            "decompiledFuncCode": "int64_t function_401bea(void) {\n    // 0x401bea\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bef",
            "funcStartAddr": "401bef",
            "funcEndAddr": "401bf4",
            "decompiledFuncCode": "int64_t function_401bef(void) {\n    // 0x401bef\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bf4",
            "funcStartAddr": "401bf4",
            "funcEndAddr": "401bf9",
            "decompiledFuncCode": "int64_t function_401bf4(void) {\n    // 0x401bf4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bf9",
            "funcStartAddr": "401bf9",
            "funcEndAddr": "401bfe",
            "decompiledFuncCode": "int64_t function_401bf9(void) {\n    // 0x401bf9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bfe",
            "funcStartAddr": "401bfe",
            "funcEndAddr": "401c03",
            "decompiledFuncCode": "int64_t function_401bfe(void) {\n    // 0x401bfe\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c10",
            "funcStartAddr": "401c10",
            "funcEndAddr": "401e90",
            "decompiledFuncCode": "int64_t function_401c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-72, 0x401c27\n    function_402e70(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_409f00(0x402570, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2; // 0x401c10\n    while (true) {\n        // 0x401c7d\n        v2 = 0;\n        while (true) {\n          lab_0x401c7d_2:;\n            uint32_t v3 = (int32_t)function_4065a0(a1 & 0xffffffff, a2, \"pm:vZ\", &g2, 0, a6);\n            switch (v3) {\n                case -1: {\n                    goto lab_0x401d84;\n                }\n                case 90: {\n                    // 0x401d30\n                    if (g47 != 0) {\n                        // 0x401d3e\n                        error(0, (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\" ^ (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", dcgettext(NULL, \"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", 5));\n                    }\n                    goto lab_0x401c7d_2;\n                }\n                default: {\n                    if (v3 <= 90) {\n                        if (v3 == -131) {\n                            // 0x401cd7\n                            function_405480((int64_t)g29, \"mkdir\", \"GNU coreutils\", (int64_t)g18, \"David MacKenzie\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v3 == -130) {\n                            // 0x401d27\n                            function_402100(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x401d15;\n                    }\n                    if (v3 == 112) {\n                        // 0x401d68\n                        v1 = 0x402060;\n                    } else {\n                        if (v3 != 118) {\n                            // break -> 0x401d10\n                            break;\n                        }\n                        // 0x401cb6\n                        dcgettext(NULL, \"created directory %s\", 5);\n                    }\n                    goto lab_0x401c7d_2;\n                }\n            }\n        }\n    }\n  lab_0x401d84:;\n    int32_t v4 = a1; // 0x401d84\n    if (*(int32_t *)0x60e2bc == v4) {\n        // 0x401e3c\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n      lab_0x401d15:\n        // 0x401d15\n        function_402100(1);\n        // UNREACHABLE\n    }\n    // 0x401d90\n    int32_t v5; // 0x401c10\n    int32_t v6; // 0x401e13\n    if (v1 == 0) {\n        if (v2 == 0) {\n            // 0x401e13\n            v6 = g27;\n            return function_404ed0(v4 - v6, 8 * (int64_t)v6 + a2, 0x401f70, &v1);\n        }\n        int32_t cmask = umask(0); // 0x401dc6\n        umask(cmask);\n        v5 = cmask;\n    } else {\n        int32_t cmask2 = umask(0); // 0x401d99\n        umask(cmask2);\n        v5 = cmask2;\n        if (v2 == 0) {\n            // 0x401e13\n            v6 = g27;\n            return function_404ed0(v4 - v6, 8 * (int64_t)v6 + a2, 0x401f70, &v1);\n        }\n    }\n    int64_t v7 = function_402920(v2); // 0x401ddd\n    if (v7 == 0) {\n        // 0x401e60\n        function_404a90(v2);\n        error(1, (int32_t)\"invalid mode %s\" ^ (int32_t)\"invalid mode %s\", dcgettext(NULL, \"invalid mode %s\", 5));\n        return &g48;\n    }\n    // 0x401dea\n    int64_t v8; // bp-56, 0x401c10\n    function_402cf0(511, 1, (int64_t)v5, v7, &v8);\n    free((int64_t *)v7);\n    // 0x401e13\n    v6 = g27;\n    return function_404ed0(v4 - v6, 8 * (int64_t)v6 + a2, 0x401f70, &v1);\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401e90",
            "funcEndAddr": "401ebb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401e90\n    int64_t v1; // 0x401e90\n    __libc_start_main(0x401c10, (int32_t)a4, (char **)&v1, (void (*)())0x409e90, (void (*)())0x409ef0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ebb",
            "funcStartAddr": "401ebb",
            "funcEndAddr": "401eda",
            "decompiledFuncCode": "int64_t function_401ebb(void) {\n    // 0x401ebb\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401eda",
            "funcStartAddr": "401eda",
            "funcEndAddr": "401f11",
            "decompiledFuncCode": "int64_t function_401eda(void) {\n    // 0x401eda\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401f11",
            "funcStartAddr": "401f11",
            "funcEndAddr": "401f68",
            "decompiledFuncCode": "int64_t function_401f11(void) {\n    // 0x401f11\n    if (g32 != 0) {\n        // 0x401f67\n        int64_t result; // 0x401f11\n        return result;\n    }\n    int64_t v1 = g33; // 0x401f44\n    int64_t result2; // 0x401f56\n    if (g33 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401f56\n        result2 = function_401ebb();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401f46\n        v1++;\n    }\n    // 0x401f3a\n    g33 = v1;\n    // 0x401f56\n    result2 = function_401ebb();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401f68",
            "funcStartAddr": "401f68",
            "funcEndAddr": "401f6d",
            "decompiledFuncCode": "int64_t function_401f68(void) {\n    // 0x401f68\n    return function_401eda();\n}\n"
        },
        {
            "funcName": "function_401f70",
            "funcStartAddr": "401f70",
            "funcEndAddr": "402003",
            "decompiledFuncCode": "int64_t function_401f70(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)(a3 + 20); // 0x401f79\n    if (a3 == 0 == (*v1 != 0)) {\n        // 0x401fd8\n        *__errno_location() = 95;\n    }\n    uint32_t v2 = *(int32_t *)(a3 + 16); // 0x401f87\n    int32_t v3 = *(int32_t *)(a3 + 12); // 0x401f97\n    uint64_t v4 = function_402610(a1, a2, a3, a3, v3, 0x402040, (int64_t)v2, -1, -1, 1) & 0xffffffff ^ 1; // 0x401fa7\n    if ((char)v4 != 0) {\n        // 0x401fc8\n        return v4 % 256;\n    }\n    // 0x401fb1\n    if (!((a3 == 0 | *v1 == 0))) {\n        // 0x401fbd\n        *__errno_location() = 95;\n    }\n    // 0x401fc8\n    return v4 % 256;\n}\n"
        },
        {
            "funcName": "function_402010",
            "funcStartAddr": "402010",
            "funcEndAddr": "402037",
            "decompiledFuncCode": "int64_t function_402010(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404840(4, a1); // 0x40201c\n    int64_t v2; // 0x402010\n    return function_402460((int64_t)g29, *(int64_t *)(a2 + 24), v1, v2, v2, v2);\n}\n"
        },
        {
            "funcName": "function_402040",
            "funcStartAddr": "402040",
            "funcEndAddr": "402051",
            "decompiledFuncCode": "int64_t function_402040(int64_t a1, int64_t a2) {\n    // 0x402040\n    if (*(int64_t *)(a2 + 24) == 0) {\n        // 0x402050\n        int64_t result; // 0x402040\n        return result;\n    }\n    // 0x402047\n    return function_402010(a1, a2);\n}\n"
        },
        {
            "funcName": "function_402060",
            "funcStartAddr": "402060",
            "funcEndAddr": "4020f9",
            "decompiledFuncCode": "int64_t function_402060(int64_t a1, int64_t path, int64_t a3) {\n    // 0x402060\n    if (*(char *)(a3 + 20) != 0) {\n        // 0x402077\n        *__errno_location() = 95;\n    }\n    int32_t * cmask = (int32_t *)(a3 + 8); // 0x402082\n    int32_t v1 = *cmask; // 0x402082\n    int32_t result; // 0x402060\n    if ((v1 & 192) != 0) {\n        // 0x4020c8\n        umask(v1 & -193);\n        int32_t v2 = mkdir((char *)path, 511); // 0x4020d9\n        int32_t * v3 = __errno_location(); // 0x4020e0\n        umask(*cmask);\n        result = v2;\n    } else {\n        // 0x40208b\n        result = mkdir((char *)path, 511);\n    }\n    // 0x40209a\n    if (result != 0) {\n        // 0x4020b9\n        return result;\n    }\n    // 0x40209e\n    if (*(int64_t *)(a3 + 24) != 0) {\n        // 0x4020ae\n        function_402010(a1, a3);\n    }\n    // 0x4020b9\n    return (int64_t)(*cmask / 256 % 2);\n}\n"
        },
        {
            "funcName": "function_402100",
            "funcStartAddr": "402100",
            "funcEndAddr": "40245d",
            "decompiledFuncCode": "int64_t function_402100(int64_t a1) {\n    int32_t status = a1; // 0x402116\n    if (status != 0) {\n        // 0x40211a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40213f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402146\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... DIRECTORY...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Create the DIRECTORY(ies), if they do not already exist.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\\n  -p, --parents     no error if existing, make parent directories as needed\\n  -v, --verbose     print a message for each created directory\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -Z                   set SELinux security context of each created directory\\n                         to the default type\\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\\n                         or SMACK security context to CTX\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402236\n    bool v2; // 0x402100\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4022c0\n    int64_t v6 = *(int64_t *)v5; // 0x4022c4\n    int64_t v7 = 6; // 0x4022ca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"mkdir\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4022d6\n        char v11 = *(char *)v9; // 0x4022d6\n        char v12 = v11; // 0x4022d6\n        bool v13 = false; // 0x4022d6\n        while (v10 == v11) {\n            // 0x4022cc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4022d6\n            int64_t v15 = v8 + v3; // 0x4022d6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4022e2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4022e2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4023f4;\n        } else {\n            // 0x4023de\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402433\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402344;\n            } else {\n                goto lab_0x4023f4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402344;\n        } else {\n            // 0x40232a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402433\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402344;\n            } else {\n                goto lab_0x402344;\n            }\n        }\n    }\n  lab_0x4023f4:\n    // 0x4023f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402384\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402344:\n    // 0x402344\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402384\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402460",
            "funcStartAddr": "402460",
            "funcEndAddr": "40254f",
            "decompiledFuncCode": "int64_t function_402460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x402460\n    int64_t v1; // 0x402460\n    if ((char)v1 != 0) {\n        // 0x402487\n        int128_t v2; // 0x402460\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4024c8\n    fputs_unlocked(g36, stream);\n    fwrite_unlocked((int64_t *)\": \", 1, 2, stream);\n    int64_t v3 = 16; // bp-224, 0x4024f7\n    function_4066a0(a1, a2, &v3);\n    int64_t * v4 = (int64_t *)(a1 + 40); // 0x40251b\n    uint64_t v5 = *v4; // 0x40251b\n    int64_t result; // 0x402460\n    if (v5 >= *(int64_t *)(a1 + 48)) {\n        // 0x402540\n        result = __overflow(stream, 10);\n    } else {\n        // 0x402525\n        *v4 = v5 + 1;\n        *(char *)v5 = 10;\n        result = v5;\n    }\n    // 0x402530\n    return result;\n}\n"
        },
        {
            "funcName": "function_402550",
            "funcStartAddr": "402550",
            "funcEndAddr": "402558",
            "decompiledFuncCode": "int64_t function_402550(int64_t a1) {\n    // 0x402550\n    g35 = a1;\n    int64_t result; // 0x402550\n    return result;\n}\n"
        },
        {
            "funcName": "function_402560",
            "funcStartAddr": "402560",
            "funcEndAddr": "402568",
            "decompiledFuncCode": "int64_t function_402560(int64_t a1) {\n    // 0x402560\n    g34 = a1;\n    int64_t result; // 0x402560\n    return result;\n}\n"
        },
        {
            "funcName": "function_402570",
            "funcStartAddr": "402570",
            "funcEndAddr": "40260e",
            "decompiledFuncCode": "int64_t function_402570(void) {\n    // 0x402570\n    int32_t * err_num; // 0x402586\n    if ((int32_t)function_406760((int64_t)g29) == 0) {\n        goto lab_0x40259c;\n    } else {\n        // 0x402586\n        err_num = __errno_location();\n        if (g34 == 0) {\n            goto lab_0x4025b3;\n        } else {\n            // 0x402597\n            if (*err_num != 32) {\n                goto lab_0x4025b3;\n            } else {\n                goto lab_0x40259c;\n            }\n        }\n    }\n  lab_0x40259c:;\n    int64_t result = function_406760((int64_t)g31); // 0x4025a3\n    if ((int32_t)result == 0) {\n        // 0x4025ac\n        return result;\n    }\n    // 0x4025ee\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x4025b3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4025bf\n    if (g35 == 0) {\n        // 0x4025f9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4025d3\n        error(0, *err_num, \"%s: %s\", (char *)function_4048e0((int64_t)g35), v1);\n    }\n    // 0x4025ee\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402610",
            "funcStartAddr": "402610",
            "funcEndAddr": "402918",
            "decompiledFuncCode": "int64_t function_402610(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint32_t mode, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    // 0x402610\n    int64_t err_num; // 0x402610\n    int64_t path; // 0x402610\n    int64_t v1; // 0x402610\n    if ((int32_t)a2 == 4 == ((char)v1 != 47)) {\n        uint32_t v2 = *(int32_t *)(a2 + 4); // 0x402760\n        err_num = v2;\n        if (v2 != 0) {\n            goto lab_0x402710;\n        } else {\n            // 0x402769\n            path = a1;\n            if (a3 != 0) {\n                goto lab_0x402658;\n            } else {\n                goto lab_0x402679;\n            }\n        }\n    } else {\n        // 0x40264f\n        path = a1;\n        if (a3 == 0) {\n            goto lab_0x402679;\n        } else {\n            goto lab_0x402658;\n        }\n    }\n  lab_0x402710:\n    // 0x402710\n    function_404a90(a1);\n    error(0, (int32_t)err_num, dcgettext(NULL, \"cannot create directory %s\", 5));\n    // 0x402740\n    return (int32_t)&g48 ^ (int32_t)&g48;\n  lab_0x402679:;\n    int64_t v3 = 0x100000000 * a9 >> 32;\n    int64_t v4 = 0x100000000 * a8 >> 32;\n    int64_t v5 = 0x100000000 * a7 >> 32;\n    uint64_t v6 = (int64_t)mode; // 0x40261e\n    int64_t v7; // 0x402610\n    int64_t v8; // 0x402610\n    int32_t v9; // 0x402610\n    int32_t mode2; // 0x402610\n    if ((int32_t)(v3 & v4) == -1) {\n        if ((v5 & 3072 || v6 & 512) != 0) {\n            // 0x4027c0\n            mode2 = mode & -19;\n            goto lab_0x4026b5;\n        } else {\n            uint32_t v10 = mkdir((char *)path, mode); // 0x402782\n            if (v10 != 0) {\n                goto lab_0x4026cc;\n            } else {\n                // 0x402792\n                v9 = mode;\n                v8 = 3;\n                v7 = v10;\n                if ((v6 % 512 & v5) == 0) {\n                    // 0x402740\n                    return 1;\n                }\n                goto lab_0x4027fd;\n            }\n        }\n    } else {\n        // 0x4026ab\n        mode2 = mode & -64;\n        goto lab_0x4026b5;\n    }\n  lab_0x402658:;\n    int64_t v11 = function_406de0(a1, a2, a3, a4); // 0x402665\n    if (v11 < 0) {\n        // 0x4027d0\n        if (v11 != -1) {\n            // 0x402740\n            return 1;\n        }\n        // 0x4027df\n        err_num = (int64_t)*__errno_location();\n        goto lab_0x402710;\n    } else {\n        // 0x402676\n        path = v11 + a1;\n        goto lab_0x402679;\n    }\n  lab_0x4026b5:;\n    int32_t v12 = mkdir((char *)path, mode2); // 0x4026bc\n    v9 = mode2;\n    v8 = 3;\n    v7 = 0;\n    if (v12 == 0) {\n        goto lab_0x4027fd;\n    } else {\n        goto lab_0x4026cc;\n    }\n  lab_0x4026cc:;\n    uint32_t v13 = *__errno_location(); // 0x4026d6\n    int64_t v14 = v13; // 0x4026d6\n    v9 = -1;\n    v8 = 2;\n    v7 = v14;\n    int32_t v15; // bp-200, 0x402610\n    if ((char)a10 == 0) {\n        goto lab_0x4027fd;\n    } else {\n        // 0x4026df\n        if (v13 == 0) {\n            // 0x402740\n            return 1;\n        }\n        // 0x4026e8\n        err_num = v14;\n        if (a3 != 0 && v13 != 2) {\n            int32_t v16 = __xstat(1, (char *)path, (struct stat *)&v15); // 0x402700\n            err_num = v14;\n            if (v16 == 0) {\n                // 0x4028f0\n                err_num = v14;\n                int32_t v17; // 0x402610\n                if ((v17 & 0xf000) == 0x4000) {\n                    // 0x402740\n                    return 1;\n                }\n            }\n        }\n        goto lab_0x402710;\n    }\n  lab_0x4027fd:;\n    int64_t v18 = function_404ae0(a2, path, v8, (int64_t *)&v15); // 0x402808\n    int32_t v19 = v18; // 0x402810\n    if (v19 < -1) {\n        // 0x402740\n        return 1;\n    }\n    int64_t v20 = v19 == 0 ? (int64_t)&g3 : path; // 0x40281c\n    if ((int32_t)function_406f70((int64_t)v15, v20, v9, (int32_t)v4, (int32_t)v3, v6, v5 & 0xffffffff) == 0) {\n        // 0x402740\n        return 1;\n    }\n    int32_t v21 = v7; // 0x402855\n    if (v21 == 0) {\n        goto lab_0x40287b;\n    } else {\n        // 0x40285a\n        err_num = v7;\n        if (a3 == 0 || v21 == 2) {\n            goto lab_0x402710;\n        } else {\n            int32_t v22 = *__errno_location(); // 0x402872\n            err_num = v7;\n            if (v22 == 20) {\n                goto lab_0x402710;\n            } else {\n                goto lab_0x40287b;\n            }\n        }\n    }\n  lab_0x40287b:;\n    int32_t * err_num2 = __errno_location(); // 0x40287b\n    function_404a90(a1);\n    char * v23 = (int32_t)(v3 & v4) != -1 ? \"cannot change owner and permissions of %s\" : \"cannot change permissions of %s\"; // 0x4028a8\n    error(0, *err_num2, dcgettext(NULL, v23, 5));\n    // 0x402740\n    return (int32_t)&g48 ^ (int32_t)&g48;\n}\n"
        },
        {
            "funcName": "function_402920",
            "funcStartAddr": "402920",
            "funcEndAddr": "402c81",
            "decompiledFuncCode": "int64_t function_402920(int64_t a1) {\n    // 0x402920\n    int64_t v1; // 0x402920\n    char v2 = v1;\n    int64_t v3 = 0x100000000000000 * v1 >> 56; // 0x40292c\n    int64_t v4 = a1; // 0x402934\n    if ((v2 & -8) == 48) {\n        int64_t v5 = 0xffffffd0 + v3; // 0x4029f6\n        uint32_t v6 = (int32_t)v5;\n        while (v6 < 0x1000) {\n            // 0x4029e8\n            v4++;\n            char v7 = *(char *)v4; // 0x4029e8\n            if ((v7 & -8) != 48) {\n                // 0x402bf0\n                if (v7 == 0) {\n                    int64_t v8 = v4 - a1; // 0x402bfa\n                    int32_t v9 = v8 < 5 == (4 - v8 & v8) < 0 ? 4095 : v6 & 3072 | 1023; // 0x402c19\n                    int64_t result = function_4055c0(32); // 0x402c1c\n                    *(int16_t *)result = 317;\n                    *(int32_t *)(result + 4) = 4095;\n                    *(int32_t *)(result + 8) = v6;\n                    *(int32_t *)(result + 12) = v9;\n                    *(char *)(result + 17) = 0;\n                    return result;\n                }\n                return 0;\n            }\n            v5 = (int64_t)v7 + 0xffffffd0 + 8 * (v5 & 0xffffffff);\n            v6 = (int32_t)v5;\n        }\n      lab_0x4029d5:\n        // 0x4029d5\n        return 0;\n    }\n    int64_t v10 = 1; // 0x402941\n    int64_t v11 = a1; // 0x402941\n    int64_t v12; // 0x402920\n    if (v2 == 0) {\n        // 0x402c48\n        v12 = 16;\n    } else {\n        int64_t v13 = v3;\n        v11++;\n        unsigned char v14 = *(char *)v11; // 0x402966\n        v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        while (v14 != 0) {\n            // 0x402950\n            v13 = v14;\n            v11++;\n            v14 = *(char *)v11;\n            v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        }\n        int64_t v15 = 16 * v10; // 0x40297d\n        if (v15 < 0) {\n            // 0x402c7c\n            function_405810(v15);\n            // UNREACHABLE\n        }\n        // 0x40298a\n        v12 = v15;\n        if (v10 >= 0x1000000000000000) {\n            // 0x402c7c\n            function_405810(v15);\n            // UNREACHABLE\n        }\n    }\n    int64_t v16 = function_4055c0(v12); // 0x402993\n    int64_t v17; // 0x402920\n    int64_t v18; // 0x402920\n    int64_t v19; // 0x402920\n    int64_t v20; // 0x402920\n    int64_t v21; // 0x402920\n    int64_t v22; // 0x402920\n    int64_t v23; // 0x402920\n    int64_t v24; // 0x402920\n    int64_t v25; // 0x402920\n    int64_t v26; // 0x402920\n    int64_t v27; // 0x402920\n    int64_t v28; // 0x402920\n    int64_t v29; // 0x402920\n    int64_t v30; // 0x402920\n    int64_t v31; // 0x402920\n    int64_t v32; // 0x402920\n    int64_t v33; // 0x402a83\n    int64_t v34; // 0x402a83\n    char v35; // 0x402920\n    while (true) {\n        int64_t v36 = 0;\n        v32 = 0;\n        v18 = 0;\n        v26 = a1;\n        unsigned char v37; // 0x40299d\n        while (true) {\n          lab_0x40299d:\n            // 0x40299d\n            v27 = v26;\n            v37 = *(char *)v27;\n            if (v37 == 97) {\n                // 0x402bb0\n                v32 = 4095;\n                v19 = 4095;\n                goto lab_0x402bb5;\n            } else {\n                if (v37 <= 97) {\n                    // break -> 0x402a10\n                    break;\n                }\n                int64_t v38 = v18; // 0x402be0\n                switch (v37) {\n                    case 111: {\n                        int64_t v39 = v38 & 0xfffffdf8 | 519; // 0x402be0\n                        v32 = v39;\n                        v19 = v39;\n                        goto lab_0x402bb5;\n                    }\n                    case 117: {\n                        int64_t v40 = v38 & 0xfffff63f | 2496; // 0x402bd0\n                        v32 = v40;\n                        v19 = v40;\n                        goto lab_0x402bb5;\n                    }\n                    case 103: {\n                        int64_t v41 = v38 & 0xfffffbc7 | 1080; // 0x402bc0\n                        v32 = v41;\n                        v19 = v41;\n                        goto lab_0x402bb5;\n                    }\n                    default: {\n                        goto lab_0x4029cb_3;\n                    }\n                }\n            }\n        }\n        switch (v37) {\n            default: {\n                if (v37 != 43) {\n                    // break -> 0x4029cb\n                    break;\n                }\n            }\n            case 45: {\n            }\n            case 61: {\n                // 0x402a22\n                v29 = v27;\n                v24 = v37;\n                v20 = 16 * v36 + v16;\n                v22 = v36;\n                // break -> 0x402a83\n                break;\n            }\n        }\n        while (true) {\n          lab_0x402a83:\n            // 0x402a83\n            v21 = v20;\n            v25 = v24;\n            int64_t v42 = v29;\n            v33 = v42 + 1;\n            char v43 = *(char *)v33; // 0x402a83\n            if (v43 == 103) {\n                // 0x402ba0\n                v17 = v42 + 2;\n                v30 = 56;\n                goto lab_0x402a3e;\n            } else {\n                // 0x402a94\n                v34 = v43;\n                if (v43 > 103) {\n                    int64_t v44 = v42 + 2;\n                    v17 = v44;\n                    v30 = 7;\n                    if (v43 != 111) {\n                        // 0x402a30\n                        v17 = v44;\n                        v30 = 448;\n                        if (v43 != 117) {\n                            goto lab_0x402b20;\n                        } else {\n                            goto lab_0x402a3e;\n                        }\n                    } else {\n                        goto lab_0x402a3e;\n                    }\n                } else {\n                    int64_t v45 = v34; // 0x402ab6\n                    int64_t v46 = v33; // 0x402ab6\n                    if ((v43 & -8) == 48) {\n                        int64_t v47 = 0xffffffd0 + v45; // 0x402aba\n                        uint32_t v48 = (int32_t)v47;\n                        if (v48 >= 0x1000) {\n                            // break (via goto) -> 0x4029cb\n                            goto lab_0x4029cb_3;\n                        }\n                        int64_t v49 = v46 + 1; // 0x402abe\n                        char v50 = *(char *)v49; // 0x402ace\n                        int64_t v51 = v50; // 0x402ace\n                        int64_t v52 = v47 & 0xffffffff; // 0x402ad9\n                        v46 = v49;\n                        while ((v50 & -8) == 48) {\n                            // 0x402aba\n                            v47 = v51 + 0xffffffd0 + 8 * v52;\n                            v48 = (int32_t)v47;\n                            if (v48 >= 0x1000) {\n                                // break (via goto) -> 0x4029cb\n                                goto lab_0x4029cb_3;\n                            }\n                            // 0x402ace\n                            v49 = v46 + 1;\n                            v50 = *(char *)v49;\n                            v51 = v50;\n                            v52 = v47 & 0xffffffff;\n                            v46 = v49;\n                        }\n                        // 0x402adb\n                        if ((int32_t)v32 != 0) {\n                            // break (via goto) -> 0x4029cb\n                            goto lab_0x4029cb_3;\n                        }\n                        if (v50 != 0 == (v50 != 44)) {\n                            // break (via goto) -> 0x4029cb\n                            goto lab_0x4029cb_3;\n                        }\n                        // 0x402af0\n                        *(char *)v21 = (char)v25;\n                        v32 = 4095;\n                        *(int32_t *)(v21 + 8) = v48;\n                        *(char *)(v21 + 1) = 1;\n                        *(int32_t *)(v21 + 4) = 4095;\n                        v31 = 4095;\n                        v28 = v49;\n                        v23 = v51 & 0xffffffff;\n                        goto lab_0x402a5f;\n                    } else {\n                        goto lab_0x402b20;\n                    }\n                }\n            }\n        }\n      lab_0x402c52:\n        // 0x402c52\n        if (v35 != 44) {\n            if (v35 != 0) {\n                goto lab_0x4029cb_3;\n            } else {\n                // 0x402c6d\n                int64_t v53; // 0x402920\n                *(char *)(v16 + 1 + 16 * v53) = 0;\n                return 0;\n            }\n        }\n    }\n  lab_0x4029cb_3:\n    // 0x4029cb\n    free((int64_t *)v16);\n    // 0x4029d5\n    return (int32_t)&g48 ^ (int32_t)&g48;\n  lab_0x402b48:;\n    // 0x402b48\n    int64_t v54; // 0x402920\n    int64_t v55 = v54 + 1; // 0x402b48\n    int64_t v56 = (int64_t)*(char *)v55; // 0x402b4c\n    int64_t v57 = v56 + 0xffffffa8; // 0x402b50\n    int64_t v58; // 0x402920\n    int64_t v59 = v58; // 0x402b57\n    int64_t v60 = v56; // 0x402b57\n    int64_t v61; // 0x402920\n    int64_t v62 = v61; // 0x402b57\n    int64_t v63 = v57; // 0x402b57\n    int64_t v64 = v55; // 0x402b57\n    if ((char)v57 >= 33) {\n        // break -> 0x402b59\n        goto lab_0x402b59_2;\n    }\n    goto lab_0x402b30;\n  lab_0x402a3e:\n    // 0x402a3e\n    *(char *)(v21 + 1) = 3;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v30;\n    *(char *)v21 = (char)v25;\n    int64_t v72 = v30; // 0x402a53\n    int64_t v73 = v17; // 0x402a53\n    int64_t v74 = (int64_t)*(char *)v17; // 0x402a53\n    goto lab_0x402a56;\n  lab_0x402a56:;\n    int64_t v75 = v32;\n    v31 = v72 & 0xffffffff & ((int32_t)v75 != 0 ? v75 : 0xffffffff);\n    v28 = v73;\n    v23 = v74;\n    goto lab_0x402a5f;\n  lab_0x402b20:\n    // 0x402b20\n    v59 = 0;\n    v60 = v34;\n    v62 = 1;\n    v63 = v34 + 0xffffffa8;\n    v64 = v33;\n    int64_t v70; // 0x402920\n    int64_t v69; // 0x402920\n    int64_t v67; // 0x402920\n    int64_t v68; // 0x402920\n    while (true) {\n      lab_0x402b30:\n        // 0x402b30\n        v54 = v64;\n        int64_t v65 = v62;\n        int64_t v66 = v59;\n        g49 = v63 % 256;\n        v58 = v66;\n        v61 = 2;\n        v67 = v66;\n        v68 = v60;\n        v69 = v65;\n        v70 = v54;\n        uint64_t v71; // 0x402920\n        switch ((char)v71) {\n            case 0: {\n                goto lab_0x402b48;\n            }\n            case 26: {\n                // 0x402b98\n                v58 = v66 & 0xfffffedb | 292;\n                v61 = v65;\n                goto lab_0x402b48;\n            }\n            case 27: {\n                // 0x402b90\n                v58 = v66 | 3072;\n                v61 = v65;\n                goto lab_0x402b48;\n            }\n            case 28: {\n                // 0x402b88\n                v58 = v66 | 512;\n                v61 = v65;\n                goto lab_0x402b48;\n            }\n            case 31: {\n                // 0x402b80\n                v58 = v66 | 146;\n                v61 = v65;\n                goto lab_0x402b48;\n            }\n            case 32: {\n                // 0x402b78\n                v58 = v66 & 0xffffffb6 | 73;\n                v61 = v65;\n                goto lab_0x402b48;\n            }\n            default: {\n                goto lab_0x402b59_2;\n            }\n        }\n    }\n  lab_0x402b59_2:\n    // 0x402b59\n    *(char *)v21 = (char)v25;\n    *(char *)(v21 + 1) = (char)v69;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v67;\n    v72 = v67;\n    v73 = v70;\n    v74 = v68 & 0xffffffff;\n    goto lab_0x402a56;\n  lab_0x402a5f:\n    // 0x402a5f\n    *(int32_t *)(v21 + 12) = (int32_t)v31;\n    if ((v23 & 239) != 45) {\n        // 0x402a76\n        int64_t v76; // 0x402920\n        v35 = v76;\n        if (v35 != 43) {\n            // break -> 0x402c52\n            goto lab_0x402c52;\n        }\n    }\n    // 0x402a80\n    v29 = v28;\n    v24 = v23;\n    v20 = v21 + 16;\n    v22++;\n    goto lab_0x402a83;\n  lab_0x402bb5:\n    // 0x402bb5\n    v18 = v19;\n    v26 = v27 + 1;\n    goto lab_0x40299d;\n}\n"
        },
        {
            "funcName": "function_402c90",
            "funcStartAddr": "402c90",
            "funcEndAddr": "402ce4",
            "decompiledFuncCode": "int64_t function_402c90(int64_t a1) {\n    // 0x402c90\n    int64_t v1; // bp-152, 0x402c90\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x402ca3\n    int64_t result = 0; // 0x402cae\n    if (v2 == 0) {\n        // 0x402cb0\n        result = function_4055c0(32);\n        *(int16_t *)result = 317;\n        *(int32_t *)(result + 4) = 4095;\n        *(int32_t *)(result + 12) = 4095;\n        *(char *)(result + 17) = 0;\n    }\n    // 0x402cdb\n    return result;\n}\n"
        },
        {
            "funcName": "function_402cf0",
            "funcStartAddr": "402cf0",
            "funcEndAddr": "402e6d",
            "decompiledFuncCode": "int64_t function_402cf0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5) {\n    char v1 = *(char *)(a4 + 1); // 0x402cf0\n    int64_t v2 = a1 % 0x1000; // 0x402cf9\n    int64_t result = v2; // 0x402d07\n    int64_t v3 = 0; // 0x402d07\n    int64_t v4; // 0x402cf0\n    int64_t v5; // 0x402cf0\n    int64_t v6; // 0x402cf0\n    char v7; // 0x402cf0\n    char v8; // 0x402cf0\n    int64_t v9; // 0x402cf0\n    int64_t v10; // 0x402cf0\n    int64_t v11; // 0x402cf0\n    int64_t v12; // 0x402cf0\n    int64_t v13; // 0x402cf0\n    int64_t v14; // 0x402cf0\n    int64_t v15; // 0x402cf0\n    int64_t v16; // 0x402cf0\n    int64_t v17; // 0x402cf0\n    int64_t v18; // 0x402cf0\n    uint32_t v19; // 0x402dab\n    int64_t v20; // 0x402daf\n    if (v1 != 0) {\n        // 0x402d0d\n        v10 = v2;\n        v14 = a4;\n        v12 = 0;\n        v7 = v1;\n        while (true) {\n          lab_0x402dab_2:\n            // 0x402dab\n            v8 = v7;\n            v13 = v12;\n            v15 = v14;\n            v11 = v10;\n            v19 = *(int32_t *)(v15 + 4);\n            v20 = (int64_t)*(int32_t *)(v15 + 8);\n            if ((char)a2 == 0) {\n                // 0x402d20\n                v16 = 0;\n                v4 = 0xffffffff;\n                if (v8 == 2) {\n                    // 0x402e60\n                    v17 = 0;\n                    v9 = v20;\n                    v5 = 0xffffffff;\n                    v18 = 0;\n                    v6 = 0xffffffff;\n                    if ((v11 & 73) == 0) {\n                        goto lab_0x402d74;\n                    } else {\n                        goto lab_0x402ddc;\n                    }\n                } else {\n                    goto lab_0x402d2f;\n                }\n            } else {\n                int32_t v21 = *(int32_t *)(v15 + 12); // 0x402dbc\n                int64_t v22 = v21 | -3073; // 0x402dc3\n                int64_t v23 = v21 & 3072 ^ 3072; // 0x402dcc\n                v16 = v23;\n                v4 = v22;\n                v18 = v23;\n                v6 = v22;\n                if (v8 != 2) {\n                    goto lab_0x402d2f;\n                } else {\n                    goto lab_0x402ddc;\n                }\n            }\n        }\n    }\n  lab_0x402e28_2:\n    // 0x402e28\n    if (a5 != NULL) {\n        // 0x402e2d\n        *(int32_t *)a5 = (int32_t)v3;\n    }\n    // 0x402e30\n    return result;\n  lab_0x402d2f:;\n    int64_t v24 = v4;\n    int64_t v25 = v16;\n    v17 = v25;\n    v9 = v20;\n    v5 = v24;\n    if (v8 == 3) {\n        int64_t v26 = v11 & v20;\n        int64_t v27 = v26 & 292; // 0x402d3b\n        int64_t v28 = (v27 | (int64_t)(v27 == 0)) + (v27 ^ 511) & 292;\n        int64_t v29 = (v26 & 146) != 0 ? v28 | 146 : v28; // 0x402d5e\n        v17 = v25;\n        v9 = ((v26 & 73) != 0 ? v29 | 73 : v29) | v26;\n        v5 = v24;\n    }\n    goto lab_0x402d74;\n  lab_0x402ddc:;\n    int64_t v60 = (int64_t)*(char *)v15; // 0x402de0\n    int64_t v61 = v6 & (v20 | 73); // 0x402de4\n    int64_t v32 = v18; // 0x402dea\n    int64_t v33 = v61; // 0x402dea\n    int64_t v34 = v6; // 0x402dea\n    int64_t v35 = v60; // 0x402dea\n    int64_t v36 = v18; // 0x402dea\n    int64_t v37 = v61; // 0x402dea\n    int64_t v38 = v60; // 0x402dea\n    if (v19 == 0) {\n        goto lab_0x402d80;\n    } else {\n        goto lab_0x402df0;\n    }\n  lab_0x402d74:;\n    int64_t v30 = (int64_t)*(char *)v15; // 0x402d74\n    int64_t v31 = v9 & 0xffffffff & v5; // 0x402d78\n    v32 = v17;\n    v33 = v31;\n    v34 = v5;\n    v35 = v30;\n    v36 = v17;\n    v37 = v31;\n    v38 = v30;\n    if (v19 != 0) {\n        goto lab_0x402df0;\n    } else {\n        goto lab_0x402d80;\n    }\n  lab_0x402d80:;\n    int64_t v39 = v33 & (a3 & 0xffffffff ^ 0xffffffff);\n    int64_t v40 = v39; // 0x402cf0\n    int64_t v41 = v35; // 0x402cf0\n    int64_t v42 = v32; // 0x402cf0\n    int64_t v43 = v39; // 0x402cf0\n    int64_t v44 = v34; // 0x402cf0\n    int64_t v45 = v39; // 0x402cf0\n    int64_t v46; // 0x402cf0\n    switch ((char)v46) {\n        case 45: {\n            goto lab_0x402e40;\n        }\n        case 61: {\n            goto lab_0x402e0b;\n        }\n        default: {\n            goto lab_0x402d93;\n        }\n    }\n  lab_0x402df0:;\n    int64_t v47 = v19; // 0x402dab\n    int64_t v48 = v37 & v47;\n    char v49 = v38; // 0x402df3\n    v45 = v48;\n    if (v49 == 45) {\n        goto lab_0x402e40;\n    } else {\n        // 0x402df9\n        if (v49 != 61) {\n            goto lab_0x402d93;\n        } else {\n            int64_t v50 = v36 & 0xffffffff | v47 ^ 0xffffffff; // 0x402e02\n            v42 = v50;\n            v43 = v48;\n            v44 = v50 ^ 0xffffffff;\n            goto lab_0x402e0b;\n        }\n    }\n  lab_0x402e40:;\n    int64_t v51 = v11 & 0xffffffff & (v45 ^ 0xffffffff); // 0x402e49\n    int64_t v52 = (v45 | v13) & 0xffffffff; // 0x402e49\n    goto lab_0x402d9d;\n  lab_0x402e0b:;\n    char v57 = *(char *)(v15 + 17); // 0x402e0f\n    int64_t v58 = v44 % 0x1000 | v13 & 0xffffffff; // 0x402e1d\n    int64_t v59 = (v42 & v11 | v43) & 0xffffffff; // 0x402e20\n    int64_t v54 = v59; // 0x402e26\n    int64_t v55 = v58; // 0x402e26\n    char v56 = v57; // 0x402e26\n    result = v59;\n    v3 = v58;\n    if (v57 == 0) {\n        // break -> 0x402e28\n        goto lab_0x402e28_2;\n    }\n    goto lab_0x402dab;\n  lab_0x402d93:\n    // 0x402d93\n    v51 = v11;\n    v52 = v13;\n    if ((char)v41 == 43) {\n        // 0x402e50\n        v51 = (v40 | v11) & 0xffffffff;\n        v52 = (v40 | v13) & 0xffffffff;\n    }\n    goto lab_0x402d9d;\n  lab_0x402d9d:;\n    char v53 = *(char *)(v15 + 17); // 0x402da1\n    v54 = v51;\n    v55 = v52;\n    v56 = v53;\n    result = v51;\n    v3 = v52;\n    if (v53 == 0) {\n        // break -> 0x402e28\n        goto lab_0x402e28_2;\n    }\n    goto lab_0x402dab;\n  lab_0x402dab:\n    // 0x402dab\n    v10 = v54;\n    v14 = v15 + 16;\n    v12 = v55;\n    v7 = v56;\n    goto lab_0x402dab_2;\n}\n"
        },
        {
            "funcName": "function_402e70",
            "funcStartAddr": "402e70",
            "funcEndAddr": "402f09",
            "decompiledFuncCode": "int64_t function_402e70(int64_t str) {\n    // 0x402e70\n    if (str == 0) {\n        // 0x402ee9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402e7e\n    int64_t result = (int64_t)found_char_pos; // 0x402e7e\n    if (found_char_pos == NULL) {\n        // 0x402ed9\n        g36 = (char *)str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402e88\n    if (v1 - str < 7) {\n        // 0x402ed9\n        g36 = (char *)str;\n        g30 = str;\n        return result;\n    }\n    // 0x402e98\n    bool v2; // 0x402e70\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402e70\n    int64_t v5 = result - 6; // 0x402e70\n    int64_t v6 = 7; // 0x402ea6\n    unsigned char v7 = *(char *)v5; // 0x402ea6\n    char v8 = *(char *)v4; // 0x402ea6\n    char v9 = v8; // 0x402ea6\n    bool v10 = false; // 0x402ea6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402eb0\n    int64_t v13 = v1; // 0x402eb0\n    int64_t v14 = 3; // 0x402eb0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402ed9\n        g36 = (char *)str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402ec2\n    char v16 = *(char *)v12; // 0x402ec2\n    char v17 = v16; // 0x402ec2\n    bool v18 = false; // 0x402ec2\n    while (v15 == v16) {\n        // 0x402eb2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402ecc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402ece\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x402ed9\n    g36 = (char *)v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "403002",
            "decompiledFuncCode": "int64_t function_402f10(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402f24\n    int64_t result = (int64_t)v1; // 0x402f24\n    if (result != a1) {\n        // 0x402f31\n        return result;\n    }\n    int64_t v2 = function_406870(); // 0x402f40\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402ff6\n    if (v3 == 85) {\n        // 0x402f50\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402fe8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x402f7e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x402f8b\n        // 0x402f31\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402fe8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x402fcd\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x402fda\n    // 0x402f31\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403010",
            "funcStartAddr": "403010",
            "funcEndAddr": "403067",
            "decompiledFuncCode": "int64_t function_403010(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403010\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403058\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403067",
            "funcStartAddr": "403067",
            "funcEndAddr": "404231",
            "decompiledFuncCode": "int64_t function_403067(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4030b1\n    int64_t v3 = 0; // 0x4030b1\n    int64_t v4; // 0x403067\n    int64_t v5; // 0x403067\n    int64_t v6; // 0x403067\n    int64_t v7; // 0x403067\n    int64_t v8; // 0x403067\n    int64_t v9; // 0x403067\n    int64_t v10; // 0x403067\n    int64_t v11; // 0x403067\n    int64_t v12; // 0x403067\n    int64_t v13; // 0x403067\n    int64_t v14; // 0x403067\n    int64_t v15; // 0x403067\n    int64_t v16; // 0x403067\n    int64_t v17; // 0x403067\n    int64_t v18; // 0x403067\n    int64_t result; // 0x403067\n    int64_t v19; // 0x403067\n    int32_t wc; // bp+132, 0x403067\n    int64_t ps; // bp+136, 0x403067\n    char v20; // 0x403620\n    int64_t v21; // 0x403620\n    int64_t v22; // 0x4039c8\n    int64_t v23; // 0x403067\n    int64_t v24; // 0x4039e7\n    int32_t v25; // 0x403067\n    while (true) {\n      lab_0x4030b8_2:\n        // 0x4030b8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403067\n        int64_t v27; // 0x4030ec\n        while (true) {\n          lab_0x4030b8:\n            // 0x4030b8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4030c3\n            if (v15 == -1) {\n                // 0x4030c5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4030d3\n            if (v28) {\n                // break (via goto) -> 0x403838\n                goto lab_0x403838;\n            }\n            // 0x4030dc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g56 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4036cb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403211;\n                    }\n                    // 0x403aed\n                    v26 = v5 + 1;\n                    goto lab_0x4030b8;\n                }\n                case 7: {\n                    goto lab_0x403211;\n                }\n                case 8: {\n                    goto lab_0x403211;\n                }\n                case 9: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403211;\n                }\n                case 12: {\n                    goto lab_0x403211;\n                }\n                case 13: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4031dd;\n                }\n                case 36: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403211;\n                }\n                case 38: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403211;\n                }\n                case 44: {\n                    goto lab_0x403211;\n                }\n                case 45: {\n                    goto lab_0x403211;\n                }\n                case 46: {\n                    goto lab_0x403211;\n                }\n                case 47: {\n                    goto lab_0x403211;\n                }\n                case 48: {\n                    goto lab_0x403211;\n                }\n                case 49: {\n                    goto lab_0x403211;\n                }\n                case 50: {\n                    goto lab_0x403211;\n                }\n                case 51: {\n                    goto lab_0x403211;\n                }\n                case 52: {\n                    goto lab_0x403211;\n                }\n                case 53: {\n                    goto lab_0x403211;\n                }\n                case 54: {\n                    goto lab_0x403211;\n                }\n                case 55: {\n                    goto lab_0x403211;\n                }\n                case 56: {\n                    goto lab_0x403211;\n                }\n                case 57: {\n                    goto lab_0x403211;\n                }\n                case 58: {\n                    goto lab_0x403211;\n                }\n                case 59: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403211;\n                }\n                case 66: {\n                    goto lab_0x403211;\n                }\n                case 67: {\n                    goto lab_0x403211;\n                }\n                case 68: {\n                    goto lab_0x403211;\n                }\n                case 69: {\n                    goto lab_0x403211;\n                }\n                case 70: {\n                    goto lab_0x403211;\n                }\n                case 71: {\n                    goto lab_0x403211;\n                }\n                case 72: {\n                    goto lab_0x403211;\n                }\n                case 73: {\n                    goto lab_0x403211;\n                }\n                case 74: {\n                    goto lab_0x403211;\n                }\n                case 75: {\n                    goto lab_0x403211;\n                }\n                case 76: {\n                    goto lab_0x403211;\n                }\n                case 77: {\n                    goto lab_0x403211;\n                }\n                case 78: {\n                    goto lab_0x403211;\n                }\n                case 79: {\n                    goto lab_0x403211;\n                }\n                case 80: {\n                    goto lab_0x403211;\n                }\n                case 81: {\n                    goto lab_0x403211;\n                }\n                case 82: {\n                    goto lab_0x403211;\n                }\n                case 83: {\n                    goto lab_0x403211;\n                }\n                case 84: {\n                    goto lab_0x403211;\n                }\n                case 85: {\n                    goto lab_0x403211;\n                }\n                case 86: {\n                    goto lab_0x403211;\n                }\n                case 87: {\n                    goto lab_0x403211;\n                }\n                case 88: {\n                    goto lab_0x403211;\n                }\n                case 89: {\n                    goto lab_0x403211;\n                }\n                case 90: {\n                    goto lab_0x403211;\n                }\n                case 91: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403211;\n                }\n                case 94: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403211;\n                }\n                case 96: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403211;\n                }\n                case 98: {\n                    goto lab_0x403211;\n                }\n                case 99: {\n                    goto lab_0x403211;\n                }\n                case 100: {\n                    goto lab_0x403211;\n                }\n                case 101: {\n                    goto lab_0x403211;\n                }\n                case 102: {\n                    goto lab_0x403211;\n                }\n                case 103: {\n                    goto lab_0x403211;\n                }\n                case 104: {\n                    goto lab_0x403211;\n                }\n                case 105: {\n                    goto lab_0x403211;\n                }\n                case 106: {\n                    goto lab_0x403211;\n                }\n                case 107: {\n                    goto lab_0x403211;\n                }\n                case 108: {\n                    goto lab_0x403211;\n                }\n                case 109: {\n                    goto lab_0x403211;\n                }\n                case 110: {\n                    goto lab_0x403211;\n                }\n                case 111: {\n                    goto lab_0x403211;\n                }\n                case 112: {\n                    goto lab_0x403211;\n                }\n                case 113: {\n                    goto lab_0x403211;\n                }\n                case 114: {\n                    goto lab_0x403211;\n                }\n                case 115: {\n                    goto lab_0x403211;\n                }\n                case 116: {\n                    goto lab_0x403211;\n                }\n                case 117: {\n                    goto lab_0x403211;\n                }\n                case 118: {\n                    goto lab_0x403211;\n                }\n                case 119: {\n                    goto lab_0x403211;\n                }\n                case 120: {\n                    goto lab_0x403211;\n                }\n                case 121: {\n                    goto lab_0x403211;\n                }\n                case 122: {\n                    goto lab_0x403211;\n                }\n                case 123: {\n                    goto lab_0x4031b5;\n                }\n                case 124: {\n                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4031b5;\n                }\n                case 126: {\n                    goto lab_0x4031dd;\n                }\n                default: {\n                    goto lab_0x4035b5;\n                }\n            }\n        }\n      lab_0x4035b5:\n        if (v23 != 1) {\n            // 0x403920\n            ps = 0;\n            int64_t len = v15; // 0x403930\n            if (v15 == -1) {\n                // 0x403932\n                len = strlen((char *)str);\n            }\n            // 0x40395e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4039bf:\n                // 0x4039bf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4039c4\n                int64_t v30 = v29 + str;\n                v24 = function_406620(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403f3a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403f3a_2;\n                    }\n                    case -2: {\n                        // 0x40401d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404057\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40405a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404067\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404060\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403f3a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403f3a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403990;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403a3c\n                        char v34 = *(char *)v33; // 0x403a4d\n                        unsigned char v35; // 0x403067\n                        if (v34 < 125) {\n                            // 0x403a58\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403a6f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403a40\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403a4d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403a58\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403a6f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403a40\n                            v33++;\n                        }\n                        goto lab_0x403990;\n                    }\n                }\n            }\n            goto lab_0x403f3a_2;\n        } else {\n            // 0x403604\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403211;\n        }\n    }\n  lab_0x403838:\n    // 0x403838\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40413a\n        if (v8 > result) {\n            // 0x404143\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403467\n        return result;\n    }\n    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403211:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403220\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40342a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403321\n    char v40 = v20; // 0x403321\n    int64_t v41 = v38; // 0x403321\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403321\n    int64_t v43 = v36; // 0x403321\n    goto lab_0x40329d;\n  lab_0x40342a_2:\n    // 0x403467\n    return function_403010(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403f3a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403211;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403b0e\n        int64_t v50 = v5 + 1; // 0x403bf1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403bf8\n        char v52 = v20; // 0x403bf8\n        int64_t v53 = result; // 0x403bf8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403bc1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403bc5\n            int64_t v56 = v54 + 1; // 0x403bca\n            int64_t v57 = v51 + 1; // 0x403bf1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403bbc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403bc1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403bc5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40329d;\n    }\n  lab_0x403990:\n    // 0x403990\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4039af\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4039b2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403f3a\n        goto lab_0x403f3a_2;\n    }\n    goto lab_0x4039bf;\n  lab_0x4031dd:\n    // 0x4031dd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40342a_2;\n    }\n    goto lab_0x403211;\n  lab_0x4031b5:;\n    bool v60 = v15 == 1; // 0x4031c0\n    if (v15 == -1) {\n        // 0x4031c2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4031ce\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403211;\n    } else {\n        goto lab_0x4031dd;\n    }\n  lab_0x40329d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4032a2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4032a6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4030b8_2;\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "4043de",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404242\n    int32_t * v3 = __errno_location(); // 0x40425c\n    int64_t v4 = (int64_t)g21; // 0x404261\n    int32_t v5 = *v3; // 0x40426b\n    int64_t v6 = v4; // 0x404281\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4043d9\n            function_405810(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404290\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404297\n        int64_t v9; // 0x404240\n        if (g21 == &g22) {\n            int64_t v10 = function_405620(0, v8); // 0x4043ba\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x4043bf\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405620(v4, v8); // 0x4042ab\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x4042ba\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x4042ba\n        int32_t v14 = v7; // 0x4042c1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4042f1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4042fb\n    int64_t * v17 = (int64_t *)v15; // 0x4042fe\n    uint64_t v18 = *v17; // 0x4042fe\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404301\n    int64_t result = *v19; // 0x404301\n    int64_t v20; // 0x404240\n    uint64_t v21 = function_403010(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404324\n    if (v18 > v21) {\n        // 0x40439b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404337\n    *v17 = v22;\n    if (result != (int64_t)&g37) {\n        // 0x404347\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4055c0(v22); // 0x404361\n    *v19 = result2;\n    int64_t v23; // 0x404240\n    function_403010(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40439b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "404414",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4043e7\n    int64_t result = function_4057c0(a1 == 0 ? (int64_t)&g38 : a1, 56); // 0x404406\n    return result;\n}\n"
        },
        {
            "funcName": "function_404420",
            "funcStartAddr": "404420",
            "funcEndAddr": "40442f",
            "decompiledFuncCode": "int64_t function_404420(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g38 : a1); // 0x40442c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40443f",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x404438\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404473",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 + 8 : a1 + 8; // 0x404459\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40445e\n    uint32_t v3 = *v2; // 0x40445e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404462\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "404493",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g38 + 4 : a1 + 4); // 0x40448c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "4044cb",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x4044a8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4044c5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4044bc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "404542",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g38 : a5; // 0x4044f2\n    int32_t * v2 = __errno_location(); // 0x4044fb\n    uint32_t v3 = *(int32_t *)v1; // 0x40451b\n    int64_t result = function_403010(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40452a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "404631",
            "decompiledFuncCode": "int64_t function_404550(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g38 : a4; // 0x404572\n    int32_t * v2 = __errno_location(); // 0x404578\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404597\n    int32_t * v4 = (int32_t *)v1; // 0x40459a\n    int64_t v5 = function_403010(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4045b5\n    int64_t v6 = v5 + 1; // 0x4045ba\n    int64_t result = function_4055c0(v6); // 0x4045cf\n    function_403010(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404614\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40461d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "40464a",
            "decompiledFuncCode": "int64_t function_404640(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404640\n    return function_404550(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "4046e5",
            "decompiledFuncCode": "int64_t function_404650(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x404650\n    int64_t v2 = v1; // 0x404650\n    int64_t v3 = v2; // 0x404664\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404683\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g48;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404680\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g48;\n        }\n    }\n    int64_t v6 = v3; // 0x40469d\n    if (g22 != 0x60e320) {\n        // 0x40469f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g37;\n        v6 = &g48;\n    }\n    int64_t result = v6; // 0x4046c1\n    if (g21 != &g22) {\n        // 0x4046c3\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g48;\n    }\n    // 0x4046d6\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404701",
            "decompiledFuncCode": "int64_t function_4046f0(void) {\n    // 0x4046f0\n    int64_t v1; // 0x4046f0\n    return function_404240(v1, v1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "40471a",
            "decompiledFuncCode": "int64_t function_404710(void) {\n    // 0x404710\n    int64_t v1; // 0x404710\n    return function_404240(v1, v1, v1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404736",
            "decompiledFuncCode": "int64_t function_404720(int64_t a1) {\n    // 0x404720\n    return function_404240(0, a1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404752",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2) {\n    // 0x404740\n    return function_404240(0, a1, a2, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "4047c8",
            "decompiledFuncCode": "int64_t function_404760(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404770\n    return function_404240((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "404834",
            "decompiledFuncCode": "int64_t function_4047d0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4047e0\n    return function_404240((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404840",
            "funcStartAddr": "404840",
            "funcEndAddr": "40484c",
            "decompiledFuncCode": "int64_t function_404840(int64_t a1, int64_t a2) {\n    // 0x404840\n    return function_404760(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "40485f",
            "decompiledFuncCode": "int64_t function_404850(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404850\n    return function_4047d0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "4048d0",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x40486d\n    int128_t v2 = __asm_movdqa(g39); // 0x404875\n    int128_t v3 = __asm_movdqa(g40); // 0x40487d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404892\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4048a8\n    uint32_t v6 = *v5; // 0x4048a8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4048ad\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404240(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4048d0",
            "funcStartAddr": "4048d0",
            "funcEndAddr": "4048dd",
            "decompiledFuncCode": "int64_t function_4048d0(int64_t a1, int64_t a2) {\n    // 0x4048d0\n    return function_404860(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "4048f1",
            "decompiledFuncCode": "int64_t function_4048e0(int64_t a1) {\n    // 0x4048e0\n    return function_404860(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "40490a",
            "decompiledFuncCode": "int64_t function_404900(void) {\n    // 0x404900\n    int64_t v1; // 0x404900\n    return function_404860(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "40497e",
            "decompiledFuncCode": "int64_t function_404910(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40492a\n    return function_404240(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404980",
            "funcStartAddr": "404980",
            "funcEndAddr": "4049ec",
            "decompiledFuncCode": "int64_t function_404980(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x404987\n    int128_t v2 = __asm_movdqa(g39); // 0x40498f\n    int128_t v3 = __asm_movdqa(g40); // 0x404997\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4049b9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4049e7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4049ca\n    return function_404240(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "4049f9",
            "decompiledFuncCode": "int64_t function_4049f0(void) {\n    // 0x4049f0\n    int64_t v1; // 0x4049f0\n    return function_404980(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a17",
            "decompiledFuncCode": "int64_t function_404a00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404a00\n    return function_404980(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a33",
            "decompiledFuncCode": "int64_t function_404a20(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404a20\n    return function_404980(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a4a",
            "decompiledFuncCode": "int64_t function_404a40(void) {\n    // 0x404a40\n    int64_t v1; // 0x404a40\n    return function_404240(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_404a50",
            "funcStartAddr": "404a50",
            "funcEndAddr": "404a62",
            "decompiledFuncCode": "int64_t function_404a50(int64_t a1, int64_t a2) {\n    // 0x404a50\n    return function_404240(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404a81",
            "decompiledFuncCode": "int64_t function_404a70(void) {\n    // 0x404a70\n    int64_t v1; // 0x404a70\n    return function_404240(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404aa6",
            "decompiledFuncCode": "int64_t function_404a90(int64_t a1) {\n    // 0x404a90\n    return function_404240(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404ab0",
            "funcStartAddr": "404ab0",
            "funcEndAddr": "404ab7",
            "decompiledFuncCode": "int64_t function_404ab0(int64_t a1) {\n    // 0x404ab0\n    *(int32_t *)a1 = 0;\n    int64_t result; // 0x404ab0\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404ad4",
            "decompiledFuncCode": "int64_t function_404ac0(int64_t a1) {\n    if ((int32_t)a1 == 4) {\n        // 0x404ad0\n        return (int64_t)*(int32_t *)(a1 + 4);\n    }\n    // 0x404ac7\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404d30",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0xffffffff; // 0x404af4\n    if (a4 != NULL) {\n        int32_t v2 = __open_2((char *)a2, 0x20000 * (int32_t)a3 & 0x20000 | 0x10900); // 0x404b11\n        *(int32_t *)a4 = v2;\n        int64_t v3 = v2; // 0x404b18\n        int32_t v4 = *__errno_location(); // 0x404b20\n        *(int32_t *)((int64_t)a4 + 4) = v4;\n        if (v2 < 0) {\n            // 0x404bb0\n            v1 = v3;\n            if (v4 != 13) {\n                // 0x404ba3\n                return 0xffffffff;\n            }\n        } else {\n            // 0x404b2e\n            v1 = v3;\n            if ((a3 & 2) != 0) {\n                // 0x404ba3\n                return 0;\n            }\n        }\n    }\n    // 0x404b34\n    int64_t v5; // 0x404ae0\n    uint32_t v6 = *(int32_t *)&v5; // 0x404b34\n    if (v6 >= 6) {\n        // 0x404d10\n        __assert_fail(\"0\", \"lib/savewd.c\", 99, \"savewd_save\");\n        return &g48;\n    }\n    uint32_t v7 = v6 % 64;\n    int64_t v8 = v7 == 0 ? 1 : 1 << (int64_t)v7;\n    int64_t path = a2; // 0x404b4a\n    int32_t * v9; // 0x404ae0\n    int64_t v10; // 0x404ae0\n    int64_t v11; // 0x404ae0\n    if ((v8 & 54) != 0) {\n        goto lab_0x404b80;\n    } else {\n        if ((v8 & 8) != 0) {\n            int32_t * v12 = (int32_t *)(a1 + 4);\n            path = a2;\n            v9 = v12;\n            v10 = a2;\n            if (*v12 >= 0) {\n                goto lab_0x404b80;\n            } else {\n                goto lab_0x404c4b;\n            }\n        } else {\n            if (v6 != 0) {\n                // 0x404d10\n                __assert_fail(\"0\", \"lib/savewd.c\", 99, \"savewd_save\");\n                return &g48;\n            }\n            int32_t v13 = function_4067c0(&g3, 0, a3); // 0x404b6a\n            v11 = a2;\n            if (v13 < 0) {\n                goto lab_0x404ca8;\n            } else {\n                // 0x404b72\n                *(int32_t *)a1 = 1;\n                *(int32_t *)(a1 + 4) = v13;\n                path = a2;\n                goto lab_0x404b80;\n            }\n        }\n    }\n  lab_0x404b80:;\n    int32_t fd = v1;\n    int32_t fd2; // 0x404ae0\n    int64_t v14; // 0x404ae0\n    int64_t result; // 0x404ae0\n    bool v15; // 0x404ae0\n    if (fd < 0) {\n        uint32_t v16 = chdir((char *)path); // 0x404bcb\n        int64_t v17 = v16; // 0x404bd0\n        int64_t v18 = v17; // 0x404bd5\n        v14 = v17;\n        if (v16 != 0) {\n            // 0x404ba3\n            return v18 & 0xffffffff;\n        }\n        goto lab_0x404be1;\n    } else {\n        uint32_t v19 = fchdir(fd); // 0x404b88\n        v14 = 0;\n        if (v19 == 0) {\n            goto lab_0x404be1;\n        } else {\n            // 0x404b94\n            fd2 = fd;\n            v15 = a4 == NULL;\n            result = v19;\n            goto lab_0x404c00;\n        }\n    }\n  lab_0x404be1:;\n    uint32_t v20 = *(int32_t *)&v5; // 0x404be1\n    g52 = v20;\n    fd2 = fd;\n    v15 = a4 == NULL;\n    result = 0;\n    switch (v20) {\n        case 1: {\n            // 0x404bf0\n            *(int32_t *)a1 = 2;\n            fd2 = fd;\n            v15 = a4 == NULL;\n            result = 0;\n            goto lab_0x404c00;\n        }\n        case 2: {\n            goto lab_0x404c00;\n        }\n        case 3: {\n            // 0x404c80\n            fd2 = fd;\n            v15 = a4 == NULL;\n            result = 0;\n            if (*(int32_t *)(a1 + 4) == 0) {\n                goto lab_0x404c00;\n            } else {\n                // 0x404c8b\n                __assert_fail(\"wd->val.child == 0\", \"lib/savewd.c\", 155, \"savewd_chdir\");\n                v11 = v14;\n                goto lab_0x404ca8;\n            }\n        }\n        case 4: {\n            goto lab_0x404c00;\n        }\n        case 5: {\n            goto lab_0x404c00;\n        }\n        default: {\n            // 0x404ce3\n            __assert_fail(\"0\", \"lib/savewd.c\", 159, \"savewd_chdir\");\n            fd2 = fd;\n            v15 = true;\n            result = 0xfffffffe;\n            goto lab_0x404c00;\n        }\n    }\n  lab_0x404c4b:;\n    int64_t v21 = v10;\n    int32_t * v22 = v9;\n    int32_t v23 = fork(); // 0x404c4b\n    *v22 = v23;\n    path = v21;\n    if (v23 == 0) {\n        goto lab_0x404b80;\n    } else {\n        if (v23 >= 0) {\n            // 0x404c5b\n            fd2 = v1;\n            v15 = true;\n            result = 0xfffffffe;\n            goto lab_0x404c00;\n        } else {\n            // 0x404c61\n            *(int32_t *)a1 = 4;\n            *v22 = *__errno_location();\n            path = v21;\n            goto lab_0x404b80;\n        }\n    }\n  lab_0x404ca8:;\n    int64_t v24 = v11;\n    int32_t v25 = *__errno_location(); // 0x404cad\n    switch (v25) {\n        case 13: {\n            goto lab_0x404cd0;\n        }\n        case 116: {\n            goto lab_0x404cd0;\n        }\n        default: {\n            // 0x404cb9\n            *(int32_t *)a1 = 4;\n            *(int32_t *)(a1 + 4) = v25;\n            path = v24;\n            goto lab_0x404b80;\n        }\n    }\n  lab_0x404c00:\n    // 0x404c00\n    if (fd2 < 0 || !v15) {\n        // 0x404ba3\n        return result & 0xffffffff;\n    }\n    int32_t * v26 = __errno_location(); // 0x404c09\n    close(fd2);\n    return result;\n  lab_0x404cd0:\n    // 0x404cd0\n    *(int64_t *)a1 = -0xfffffffd;\n    v9 = (int32_t *)(a1 + 4);\n    v10 = v24;\n    goto lab_0x404c4b;\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404e56",
            "decompiledFuncCode": "int64_t function_404d30(int32_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    g50 = v1 & 0xffffffff;\n    switch ((int32_t)v1) {\n        case 0: {\n        }\n        case 1: {\n            // 0x404d5d\n            return 0;\n        }\n        case 2: {\n            int32_t * fd = (int32_t *)(v1 + 4);\n            int32_t result = fchdir(*fd); // 0x404dd3\n            if (result == 0) {\n                // 0x404ddc\n                *a1 = 1;\n                return result;\n            }\n            int32_t * v2 = __errno_location(); // 0x404dfb\n            int32_t v3 = *v2; // 0x404e03\n            close(*fd);\n            *a1 = 4;\n            *fd = v3;\n            // 0x404d7c\n            *v2 = v3;\n            return 0xffffffff;\n        }\n        case 3: {\n            int32_t * v4 = (int32_t *)(v1 + 4);\n            int32_t pid = *v4; // 0x404d50\n            if (pid == 0) {\n                // 0x404e4f\n                int64_t status; // 0x404d30\n                _exit((int32_t)status);\n                // UNREACHABLE\n            }\n            if (pid < 0) {\n                // 0x404d5d\n                return 0;\n            }\n            int32_t stat_loc; // bp-28, 0x404d30\n            while (waitpid(pid, &stat_loc, 0) < 0) {\n                // 0x404d90\n                if (*__errno_location() != 4) {\n                    // 0x404e1d\n                    __assert_fail(\"(*__errno_location ()) == 4\", \"lib/savewd.c\", 216, \"savewd_restore\");\n                    goto lab_0x404e36;\n                }\n            }\n            // 0x404db0\n            *v4 = -1;\n            uint32_t sig_num = stat_loc % 128; // 0x404dbd\n            if (sig_num != 0) {\n                // 0x404df0\n                raise(sig_num);\n            }\n            // 0x404dc2\n            return stat_loc / 256 % 256;\n        }\n        case 4: {\n            // 0x404d7c\n            *__errno_location() = *(int32_t *)(v1 + 4);\n            return 0xffffffff;\n        }\n    }\n  lab_0x404e36:\n    // 0x404e36\n    __assert_fail(\"0\", \"lib/savewd.c\", 226, \"savewd_restore\");\n    // 0x404e4f\n    _exit((int32_t)(int64_t)\"lib/savewd.c\");\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404ed0",
            "decompiledFuncCode": "int64_t function_404e60(int32_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t result = v1 & 0xffffffff; // 0x404e66\n    g51 = result;\n    switch ((int32_t)v1) {\n        case 0: {\n        }\n        case 4: {\n            // 0x404e80\n            *a1 = 5;\n            return result;\n        }\n        case 1: {\n        }\n        case 2: {\n            int64_t result2 = close(*(int32_t *)(v1 + 4));\n            *a1 = 5;\n            return result2;\n        }\n        case 3: {\n            uint32_t result3 = *(int32_t *)(v1 + 4); // 0x404e90\n            if (result3 < 0) {\n                // 0x404e80\n                *a1 = 5;\n                return result3;\n            }\n            // break -> 0x404e97\n            break;\n        }\n        default: {\n            // 0x404eb0\n            __assert_fail(\"0\", \"lib/savewd.c\", 251, \"savewd_finish\");\n            return &g48;\n        }\n    }\n    // 0x404e97\n    __assert_fail(\"wd->val.child < 0\", \"lib/savewd.c\", 247, \"savewd_finish\");\n    // 0x404eb0\n    __assert_fail(\"0\", \"lib/savewd.c\", 251, \"savewd_finish\");\n    return &g48;\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "405018",
            "decompiledFuncCode": "int64_t function_404ed0(uint32_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x404ed0\n    int32_t v1; // 0x404ed0\n    int32_t v2 = v1;\n    uint32_t v3 = a1 - 1; // 0x404ed2\n    int32_t v4 = 0; // bp-64, 0x404ef0\n    int64_t v5 = 0; // 0x404efe\n    int64_t v6 = 0; // 0x404efe\n    if (v3 >= 0) {\n        int64_t v7 = v3; // 0x404ed2\n        int64_t v8 = v7; // 0x404f0f\n        if (*(char *)*(int64_t *)((0x100000000 * v7 >> 29) + a2) == 47) {\n            int64_t v9 = 0x100000000 * (int64_t)a1 - 0x200000000 >> 32;\n            while ((int32_t)v9 >= 0) {\n                // 0x404f20\n                if (*(char *)*(int64_t *)(8 * v9 + a2) != 47) {\n                    // break -> 0x404f33\n                    break;\n                }\n                v9--;\n            }\n            // 0x404f33\n            v8 = v9 & 0xffffffff;\n        }\n        // 0x404f33\n        v5 = 0;\n        v6 = 0;\n        if ((int32_t)v8 >= 1) {\n            int64_t v10 = a2; // 0x404f51\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v12; // 0x404f9a\n            int64_t v14; // 0x404ed0\n            int64_t v15; // 0x404ed0\n            int32_t v16; // 0x404f66\n            int32_t v17; // 0x404f66\n            if (v2 >= 0 != v2 != 0 || v11 != 3) {\n                // 0x404f58\n                v15 = v11 != 3 ? v11 : (int64_t)v2;\n                v16 = v12;\n                v17 = v16 - (int32_t)v15;\n                v14 = v17 < 0 == ((v17 ^ v16) & (int32_t)(v15 ^ v12)) < 0 ? v12 : v15;\n                v13 = v14 & 0xffffffff;\n            }\n            int64_t v18 = v13;\n            v10 += 8;\n            int64_t v19 = v18; // 0x404f74\n            int64_t v20; // 0x404ed0\n            int64_t v21; // 0x404f7c\n            int32_t v22; // 0x404f81\n            int32_t v23; // 0x404f81\n            if (*(char *)*(int64_t *)v10 != 47) {\n                // 0x404f76\n                v21 = function_404d30(&v4);\n                v22 = v18;\n                v23 = v22 - (int32_t)v21;\n                v20 = v23 < 0 == ((v23 ^ v22) & (int32_t)(v21 ^ v18)) < 0 ? v18 : v21;\n                v19 = v20 & 0xffffffff;\n            }\n            int64_t v24 = v19;\n            v5 = v8;\n            v6 = v24;\n            while (v10 != a2 + 8 + (8 * v8 + 0x7fffffff8 & 0x7fffffff8)) {\n                // 0x404f93\n                v11 = v4;\n                v12 = v24;\n                v13 = v12;\n                if (v2 >= 0 != v2 != 0 || v11 != 3) {\n                    // 0x404f58\n                    v15 = v11 != 3 ? v11 : (int64_t)v2;\n                    v16 = v12;\n                    v17 = v16 - (int32_t)v15;\n                    v14 = v17 < 0 == ((v17 ^ v16) & (int32_t)(v15 ^ v12)) < 0 ? v12 : v15;\n                    v13 = v14 & 0xffffffff;\n                }\n                // 0x404f6d\n                v18 = v13;\n                v10 += 8;\n                v19 = v18;\n                if (*(char *)*(int64_t *)v10 != 47) {\n                    // 0x404f76\n                    v21 = function_404d30(&v4);\n                    v22 = v18;\n                    v23 = v22 - (int32_t)v21;\n                    v20 = v23 < 0 == ((v23 ^ v22) & (int32_t)(v21 ^ v18)) < 0 ? v18 : v21;\n                    v19 = v20 & 0xffffffff;\n                }\n                // 0x404f88\n                v24 = v19;\n                v5 = v8;\n                v6 = v24;\n            }\n        }\n    }\n    // 0x404fc0\n    function_404e60(&v4);\n    if (v5 >= (int64_t)a1) {\n        // 0x405006\n        return v6 & 0xffffffff;\n    }\n    int64_t v25 = 0x100000000 * v5;\n    int64_t v26 = (v25 >> 32) + (int64_t)(v3 - (int32_t)v5); // 0x404fdb\n    int64_t v27 = (v25 >> 29) + a2; // 0x404fe3\n    int64_t v28 = v6;\n    int32_t v29 = v28; // 0x404ff6\n    int32_t v30 = v29 - (int32_t)v26; // 0x404ff6\n    int64_t v31 = v30 < 0 == ((v30 ^ v29) & (int32_t)(v28 ^ v26)) < 0 ? v28 : v26;\n    int64_t v32 = v31 & 0xffffffff; // 0x404ff9\n    v27 += 8;\n    while (v27 != a2 + 8 + 8 * v26) {\n        // 0x404fe8\n        v28 = v32;\n        v29 = v28;\n        v30 = v29 - (int32_t)v26;\n        v31 = v30 < 0 == ((v30 ^ v29) & (int32_t)(v28 ^ v26)) < 0 ? v28 : v26;\n        v32 = v31 & 0xffffffff;\n        v27 += 8;\n    }\n    // 0x405006\n    return v32 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405020",
            "funcStartAddr": "405020",
            "funcEndAddr": "4053fd",
            "decompiledFuncCode": "int64_t function_405020(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4050b8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40503c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405056\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40509b\n    if (a6 < 10) {\n        // 0x4050aa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4051a2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "405420",
            "decompiledFuncCode": "int64_t function_405400(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405400\n    if (a5 == 0) {\n        // 0x40541b\n        return function_405020(a1, a2, a3, a4, a5, 0, (int64_t)&g48);\n    }\n    int64_t v1 = 0; // 0x405407\n    v1++;\n    int64_t v2 = v1; // 0x405419\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405410\n        v1++;\n        v2 = v1;\n    }\n    // 0x40541b\n    return function_405020(a1, a2, a3, a4, a5, v2, (int64_t)&g48);\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "405480",
            "decompiledFuncCode": "int64_t function_405420(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405420\n    int64_t v3 = &v2; // 0x405420\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405453\n    int64_t v6; // 0x40543d\n    int64_t * v7; // 0x40545b\n    int64_t v8; // 0x40545b\n    int64_t v9; // 0x405467\n    if (v5 < 48) {\n        // 0x405430\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405473\n            break;\n        }\n    } else {\n        // 0x40545b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405473\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405451\n    while (v4 != 9) {\n        // 0x405449\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405430\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405473\n                break;\n            }\n        } else {\n            // 0x40545b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405473\n                break;\n            }\n        }\n        // 0x405449\n        v10 = 10;\n    }\n    // 0x405473\n    return function_405020(a1, a2, a3, a4, v3, v10, (int64_t)&g48);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "40553c",
            "decompiledFuncCode": "int64_t function_405480(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x405480\n    int64_t v1; // bp-168, 0x405480\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405480\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405480\n    int64_t v8; // 0x405480\n    int64_t v9; // bp-56, 0x405480\n    int64_t v10; // 0x4054e5\n    int64_t v11; // 0x405509\n    if ((int32_t)v6 < 48) {\n        // 0x4054d0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405520\n            break;\n        }\n    } else {\n        // 0x405502\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405520\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4054fa\n    int64_t v13 = 10; // 0x4054fa\n    while (v5 != 9) {\n        // 0x4054fc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4054d0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405520\n                break;\n            }\n        } else {\n            // 0x405502\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405520\n                break;\n            }\n        }\n        // 0x4054f2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405520\n    int64_t v14; // bp-136, 0x405480\n    int64_t result = function_405020(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g48); // 0x40552f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "4055b4",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1) {\n    // 0x405540\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4055a3\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "4055da",
            "decompiledFuncCode": "int64_t function_4055c0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4055c4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4055d3\n        return (int64_t)mem;\n    }\n    // 0x4055d5\n    function_405810(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055e0",
            "funcStartAddr": "4055e0",
            "funcEndAddr": "405601",
            "decompiledFuncCode": "int64_t function_4055e0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4055e3\n    int64_t v2 = v1; // 0x4055e3\n    if (v2 < 0) {\n        // 0x4055fb\n        function_405810(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4055f9\n        return function_4055c0(v2);\n    }\n    // 0x4055fb\n    function_405810(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "405612",
            "decompiledFuncCode": "int64_t function_405610(void) {\n    // 0x405610\n    int64_t v1; // 0x405610\n    return function_4055c0(v1);\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "405656",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405648\n        free(v1);\n        return (int32_t)&g48 ^ (int32_t)&g48;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405631\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405640\n        return (int64_t)mem;\n    }\n    // 0x405651\n    function_405810(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405681",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405663\n    int64_t v2 = v1; // 0x405663\n    if (v2 < 0) {\n        // 0x40567b\n        function_405810(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405679\n        return function_405620(a1, v2);\n    }\n    // 0x40567b\n    function_405810(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "405716",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4056eb\n            function_405810(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405620(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4056d3\n    if (a2 == 0) {\n        // 0x4056f8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4056d8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4056eb\n        function_405810(a1);\n        // UNREACHABLE\n    }\n    // 0x4056ba\n    *(int64_t *)a2 = v2;\n    return function_405620(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405770",
            "decompiledFuncCode": "int64_t function_405720(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405720\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40576a\n            function_405810(a1);\n            // UNREACHABLE\n        }\n        // 0x405742\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405620(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405755\n        *(int64_t *)a2 = 128;\n        return function_405620(0, 128);\n    }\n    // 0x405768\n    if (a2 < 0) {\n        // 0x40576a\n        function_405810(a1);\n        // UNREACHABLE\n    }\n    // 0x405742\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405620(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "405787",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2) {\n    // 0x405770\n    return (int64_t)memset((int64_t *)function_4055c0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057be",
            "decompiledFuncCode": "int64_t function_405790(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405797\n    if ((int64_t)v1 < 0) {\n        // 0x4057b9\n        function_405810(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4057b9\n        function_405810(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4057aa\n    if (mem != NULL) {\n        // 0x4057b4\n        return (int64_t)mem;\n    }\n    // 0x4057b9\n    function_405810(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "4057e8",
            "decompiledFuncCode": "int64_t function_4057c0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4055c0(a2); // 0x4057cf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405803",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t str) {\n    // 0x4057f0\n    return function_4057c0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405841",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1) {\n    // 0x405810\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "40592f",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40585c\n    uint32_t v2 = *v1; // 0x40585c\n    int64_t v3 = a2 & 0xffffffff; // 0x405861\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405864\n    uint64_t v5 = (int64_t)*v4; // 0x405864\n    int64_t v6; // 0x4058d2\n    if (v3 <= v5) {\n      lab_0x4058cc_2:\n        // 0x4058cc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405852\n    int64_t v8 = v2; // 0x405850\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4058cc\n        goto lab_0x4058cc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405888\n    int64_t v17; // 0x405896\n    int64_t * v18; // 0x4058b0\n    int64_t * v19; // 0x4058b3\n    int64_t v20; // 0x4058be\n    int64_t v21; // 0x405896\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405893\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4058b0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4058c7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4058cc\n            goto lab_0x4058cc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4058cc\n            goto lab_0x4058cc_2;\n        }\n        // 0x405882\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40590b\n    int64_t * v23 = (int64_t *)v22; // 0x405910\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405913\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405910\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405927\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40587d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4058cc\n            goto lab_0x4058cc_2;\n        }\n        // 0x405882\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405893\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4058b0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4058c7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4058cc\n                goto lab_0x4058cc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4058cc\n                goto lab_0x4058cc_2;\n            }\n            // 0x405882\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4058f0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405910\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405927\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4058cc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "405f4c",
            "decompiledFuncCode": "int64_t function_405930(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40594f\n    int64_t v2 = *v1; // 0x40594f\n    char * str2 = (char *)v2; // 0x40595c\n    char c = *str2; // 0x40595c\n    int64_t v3 = v2; // 0x405988\n    int64_t v4 = 0; // 0x405930\n    int32_t v5; // 0x405930\n    int64_t v6; // 0x405930\n    int64_t v7; // 0x405930\n    int64_t v8; // 0x405930\n    int64_t v9; // 0x405930\n    int64_t v10; // 0x405930\n    int64_t v11; // 0x405930\n    int64_t v12; // 0x405930\n    int64_t v13; // 0x405930\n    int64_t str3; // 0x405930\n    int64_t v14; // 0x405930\n    int64_t v15; // 0x405930\n    int64_t v16; // 0x405930\n    int64_t v17; // 0x405930\n    int32_t v18; // 0x405930\n    int32_t v19; // 0x405930\n    int32_t v20; // 0x405930\n    int32_t v21; // 0x405930\n    int32_t v22; // 0x405930\n    int32_t v23; // 0x405930\n    int32_t v24; // 0x405930\n    int32_t v25; // 0x405930\n    int32_t v26; // 0x405930\n    int32_t v27; // 0x405930\n    int32_t v28; // 0x405930\n    int32_t v29; // 0x405930\n    int64_t nmemb; // 0x405930\n    int64_t v30; // 0x405930\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40598c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405988\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405998\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40599e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405968\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4059cc\n                int64_t v34; // 0x405930\n                int64_t v35; // 0x405930\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4059d5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405b50;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4059e6\n                int64_t v37 = *(int64_t *)v36; // 0x4059ea\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4059c0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4059d5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405b50;\n                        }\n                    }\n                    // 0x4059e6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405a36:\n                    // 0x405a36\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405a90;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405c00\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405a90;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405bb0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405a5a;\n                                } else {\n                                    // 0x405bbc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405a5a;\n                                    } else {\n                                        // 0x405bca\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405a5a;\n                                        } else {\n                                            goto lab_0x405a90;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405a5a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405aa1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405c76\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405e22\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x405e42\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405e8f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405ea9\n                            int64_t v45; // 0x405eab\n                            if (*(char *)v42 != 0) {\n                                // 0x405eab\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405ea3\n                            while (v17 + nmemb != v42) {\n                                // 0x405ea5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405eab\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405e98\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405ed0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405c84\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405ddf\n                        free((int64_t *)v17);\n                    }\n                    // 0x405cd9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405cf0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405b9e\n                    return 63;\n                }\n                // 0x405ac0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405b44\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405b50:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405b60\n                    uint32_t v50 = *v49; // 0x405b60\n                    int64_t v51 = v50; // 0x405b60\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405b6a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405b73\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405d9f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405d4a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405b9e\n                            return 63;\n                        }\n                        // 0x405be8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405eff\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405dfd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405e10\n                                // 0x405b9e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405d0e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405d22\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405b8b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405b8e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405b92\n                    int64_t result = v59; // 0x405b98\n                    if (v58 != 0) {\n                        // 0x405b9a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405b9e\n                    return result;\n                }\n            } else {\n                // 0x40599e\n                v5 = v32;\n            }\n            // break -> 0x405ac5\n            break;\n        }\n    }\n    // 0x405ac5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405add\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405ae7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405b9e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405c29\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405b16\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405b26\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405a90:\n    // 0x405a90\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405a90\n    int64_t v63 = *(int64_t *)v62; // 0x405a94\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405aa1\n        goto lab_0x405aa1;\n    }\n    goto lab_0x405a36;\n  lab_0x405a5a:\n    // 0x405a5a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405930\n    int32_t v65; // 0x405930\n    int32_t v66; // 0x405930\n    if (v27 != 0) {\n        goto lab_0x405a90;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405c10\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405a90;\n            } else {\n                goto lab_0x405a81;\n            }\n        } else {\n            // 0x405a75\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405d6c\n                int64_t v67 = (int64_t)mem; // 0x405d6c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405a90;\n                } else {\n                    // 0x405d7f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405a81;\n                }\n            } else {\n                goto lab_0x405a81;\n            }\n        }\n    }\n  lab_0x405a81:\n    // 0x405a81\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405a90;\n}\n"
        },
        {
            "funcName": "function_405f50",
            "funcStartAddr": "405f50",
            "funcEndAddr": "406516",
            "decompiledFuncCode": "int64_t function_405f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405f71\n    if (v3 < 1) {\n        // 0x40612e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405f6d\n    int32_t v5 = *(int32_t *)a7; // 0x405f79\n    uint64_t v6 = a1 & 0xffffffff; // 0x405f7b\n    int64_t v7 = v2; // 0x405f80\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405f83\n    *v8 = 0;\n    int64_t v9; // 0x405f50\n    int64_t v10; // 0x405f50\n    int64_t v11; // 0x405f50\n    int64_t v12; // 0x405f50\n    int64_t str; // 0x405f50\n    int64_t v13; // 0x405f50\n    int64_t v14; // 0x405f50\n    int64_t v15; // 0x405f50\n    int64_t v16; // 0x405f50\n    int64_t v17; // 0x405f50\n    int32_t v18; // 0x405f50\n    char v19; // 0x405f50\n    if (v5 == 0) {\n        // 0x406168\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405f9a;\n    } else {\n        // 0x405f93\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405fe0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405fe3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4060a8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405ff6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406006\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4060bc;\n                } else {\n                    goto lab_0x406018;\n                }\n            }\n        } else {\n            goto lab_0x405f9a;\n        }\n    }\n  lab_0x405f9a:\n    // 0x405f9a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405fa0\n    *v24 = 0;\n    int64_t v25; // 0x405f50\n    int64_t v26; // 0x405f50\n    int64_t v27; // 0x405f50\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406090\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40609d;\n        }\n        case 43: {\n            // 0x4063a0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40609d;\n        }\n        default: {\n            // 0x405fbc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40631f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406438\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40609d;\n                } else {\n                    // 0x40632d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405fca;\n                }\n            } else {\n                goto lab_0x405fca;\n            }\n        }\n    }\n  lab_0x4060a8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4060af\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406018;\n    } else {\n        goto lab_0x4060bc;\n    }\n  lab_0x405fca:\n    // 0x405fca\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40609d;\n  lab_0x40609d:\n    // 0x40609d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4060a8;\n  lab_0x406018:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406018\n    int64_t v31 = v30; // 0x406018\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40601a\n    if ((int64_t)*v32 > v31) {\n        // 0x40601f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406022\n    if (*v33 > v30) {\n        // 0x406027\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40602a\n    int64_t v35 = v31; // 0x40602e\n    int64_t v36 = v15; // 0x40602e\n    int64_t v37; // 0x405f50\n    int64_t v38; // 0x405f50\n    int64_t v39; // 0x405f50\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406198\n        int64_t v41 = v40; // 0x406198\n        v2 = v41;\n        int64_t v42; // 0x405f50\n        if (*v33 == v40) {\n            // 0x406380\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406388\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4061a4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4061b8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4061c1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4061ca\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4061e1\n            int64_t v47 = v45 & 0xffffffff; // 0x4061e5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4061ee\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4061f4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4061f6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4061d0\n            int64_t v49 = v48 & 0xffffffff; // 0x4061d0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4061e1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4061ee\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4061f4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4061f6;\n                    }\n                }\n                // 0x4061d0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406398\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4061f6;\n    } else {\n        goto lab_0x406034;\n    }\n  lab_0x4060bc:\n    // 0x4060bc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4060bf\n    int64_t v51 = v12; // 0x4060bf\n    int64_t v52 = v14; // 0x4060bf\n    if (*(char *)v10 == 0) {\n        goto lab_0x406018;\n    } else {\n        goto lab_0x4060c5;\n    }\n  lab_0x406034:;\n    int32_t v53 = v35; // 0x406034\n    int64_t v54; // 0x405f50\n    int64_t v55; // 0x405f50\n    int64_t v56; // 0x405f50\n    int64_t v57; // 0x405f50\n    int64_t v58; // 0x405f50\n    int64_t v59; // 0x405f50\n    char * v60; // 0x405f50\n    int64_t v61; // 0x405f50\n    int64_t v62; // 0x406049\n    int64_t v63; // 0x405f50\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406183\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406186;\n    } else {\n        // 0x40603c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405f50\n        int64_t v66 = v65 ? -1 : 1; // 0x406050\n        int64_t v67 = (int64_t)\"--\"; // 0x405f50\n        int64_t v68 = v62; // 0x405f50\n        int64_t v69 = 3; // 0x406050\n        unsigned char v70 = *(char *)v68; // 0x406050\n        char v71 = *(char *)v67; // 0x406050\n        char v72 = v71; // 0x406050\n        bool v73 = false; // 0x406050\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406140\n            if (*(char *)v62 == 45) {\n                // 0x406200\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406200\n                if (c == 0) {\n                    goto lab_0x40614a;\n                } else {\n                    // 0x40620d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406290;\n                    } else {\n                        if (c == 45) {\n                            // 0x406473\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4062e5;\n                        } else {\n                            // 0x40621e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406290;\n                            } else {\n                                // 0x406223\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406244;\n                                } else {\n                                    // 0x40622a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406290;\n                                    } else {\n                                        goto lab_0x406244;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40614a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406060\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406063\n            int64_t v77 = v35 + 1; // 0x406066\n            int32_t v78 = v77; // 0x406069\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4063d0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406077\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406085\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406186;\n        }\n    }\n  lab_0x4060c5:;\n    // 0x4060c5\n    int64_t v79; // bp-104, 0x405f50\n    int64_t v80 = &v79; // 0x405f5a\n    int64_t v81 = v50 + 1; // 0x4060c5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4060cc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4060d1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4060d5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4060d9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4060e1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4060e6\n    int32_t c2 = v84; // 0x4060e6\n    char * found_char_pos = strchr(str2, c2); // 0x4060e6\n    int64_t v87 = *v82; // 0x4060eb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4060f5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406100\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4063f0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4063bd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40612e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4060e6\n    char v91 = *(char *)(v90 + 1); // 0x40611b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4060d5\n        if (v91 != 58) {\n            // 0x40612e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406344\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406448\n                *v8 = 0;\n            } else {\n                // 0x40642c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40636e\n            *v83 = 0;\n            // 0x40612e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40634e\n        if (v93 != 0) {\n            // 0x4063e0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40636e\n            *v83 = 0;\n            // 0x40612e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406361\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40636e\n            *v83 = 0;\n            // 0x40612e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4064aa\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40645a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406461\n        // 0x40636e\n        *v83 = 0;\n        // 0x40612e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4062b9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4062bb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4064e0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406491\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406498\n            // 0x40612e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4062c6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4062ca\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4062e5;\n  lab_0x4061f6:\n    // 0x4061f6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406034;\n  lab_0x4062e5:;\n    int64_t v99 = function_405930(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406303\n    // 0x40612e\n    return v99 & 0xffffffff;\n  lab_0x406186:;\n    int32_t v100 = v55; // 0x406186\n    if (v100 != (int32_t)v59) {\n        // 0x40618a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40612e\n    return 0xffffffff;\n  lab_0x40614a:\n    // 0x40614a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406151\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40612e\n    return v99 & 0xffffffff;\n  lab_0x406290:\n    // 0x406290\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4060c5;\n  lab_0x406244:\n    // 0x406244\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405930(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40626a\n    if ((int32_t)v101 != -1) {\n        // 0x40612e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40627f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406290;\n}\n"
        },
        {
            "funcName": "function_406520",
            "funcStartAddr": "406520",
            "funcEndAddr": "406576",
            "decompiledFuncCode": "int64_t function_406520(int64_t a1) {\n    // 0x406520\n    *(int32_t *)&g41 = g27;\n    *(int32_t *)&g42 = g26;\n    int64_t v1; // 0x406520\n    int64_t result = function_405f50(v1, v1, v1, v1, v1, v1, &g41, a1 & 0xffffffff); // 0x406546\n    g27 = *(int32_t *)&g41;\n    g47 = g44;\n    *(int32_t *)&g25 = g43;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406580",
            "funcStartAddr": "406580",
            "funcEndAddr": "406598",
            "decompiledFuncCode": "int64_t function_406580(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406580\n    return function_406520(1);\n}\n"
        },
        {
            "funcName": "function_4065a0",
            "funcStartAddr": "4065a0",
            "funcEndAddr": "4065b3",
            "decompiledFuncCode": "int64_t function_4065a0(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x4065a0\n    return function_406520(0);\n}\n"
        },
        {
            "funcName": "function_4065c0",
            "funcStartAddr": "4065c0",
            "funcEndAddr": "4065d5",
            "decompiledFuncCode": "int64_t function_4065c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4065c0\n    return function_405f50(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4065e0",
            "funcStartAddr": "4065e0",
            "funcEndAddr": "4065f6",
            "decompiledFuncCode": "int64_t function_4065e0(void) {\n    // 0x4065e0\n    return function_406520(0);\n}\n"
        },
        {
            "funcName": "function_406600",
            "funcStartAddr": "406600",
            "funcEndAddr": "406618",
            "decompiledFuncCode": "int64_t function_406600(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406600\n    return function_405f50(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406620",
            "funcStartAddr": "406620",
            "funcEndAddr": "40669a",
            "decompiledFuncCode": "int64_t function_406620(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40662b\n    int64_t v2 = (int64_t)&g11; // 0x40662b\n    int32_t * pwc; // 0x406620\n    int64_t v3; // 0x406620\n    int64_t n; // 0x406620\n    if (a2 == 0) {\n        goto lab_0x406672;\n    } else {\n        // 0x40662d\n        if (a3 == 0) {\n            // 0x406658\n            return -2;\n        }\n        // 0x406639\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406672;\n        } else {\n            goto lab_0x406644;\n        }\n    }\n  lab_0x406672:\n    // 0x406672\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406620\n    pwc = (int32_t *)&v4;\n    goto lab_0x406644;\n  lab_0x406644:;\n    char * wstr = (char *)v3; // 0x40664a\n    int64_t ps; // 0x406620\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40664a\n    int64_t result = v5; // 0x40664a\n    if (v5 < 0xfffffffe) {\n        // 0x406658\n        return result;\n    }\n    int64_t result2 = result; // 0x406689\n    if ((char)function_406810(0, v3) == 0) {\n        // 0x40668b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406658\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4066a0",
            "funcStartAddr": "4066a0",
            "funcEndAddr": "40675d",
            "decompiledFuncCode": "int64_t function_4066a0(int64_t stream, int64_t a2, int64_t * a3) {\n    int32_t v1 = 2000; // bp-2048, 0x4066c0\n    int64_t v2; // bp-2040, 0x4066a0\n    int64_t v3; // 0x4066a0\n    int64_t v4 = function_4072f0(&v2, (int64_t *)&v1, a2, (int64_t)a3, v3, v3, 2000, (int64_t)&g48); // 0x4066cc\n    if (v4 == 0) {\n        // 0x40674e\n        function_4072e0(stream);\n        // 0x40670c\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x4066d1\n    int64_t * data = (int64_t *)v4; // 0x4066ec\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x406720\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x40672a\n            free(data);\n        }\n        // 0x40670c\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x4066fb\n        free(data);\n    }\n    // 0x406703\n    if (nmemb > -1) {\n        // 0x40670c\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x406743\n    *__errno_location() = 75;\n    // 0x40674e\n    function_4072e0(stream);\n    // 0x40670c\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406760",
            "funcStartAddr": "406760",
            "funcEndAddr": "4067bd",
            "decompiledFuncCode": "int64_t function_406760(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406767\n    int64_t v2; // 0x406760\n    int64_t result = function_4071c0(a1, v2); // 0x406778\n    if ((v2 & 32) != 0) {\n        // 0x4067a0\n        if ((int32_t)result == 0) {\n            // 0x4067a4\n            *__errno_location() = 0;\n        }\n        // 0x40679a\n        return 0xffffffff;\n    }\n    // 0x406781\n    if ((int32_t)result == 0) {\n        // 0x40679a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406788\n    if (v1 == 0) {\n        // 0x40678a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40679a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4067c0",
            "funcStartAddr": "4067c0",
            "funcEndAddr": "40680a",
            "decompiledFuncCode": "int64_t function_4067c0(int64_t * path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x4067d3\n    return function_407170((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_406810",
            "funcStartAddr": "406810",
            "funcEndAddr": "40686e",
            "decompiledFuncCode": "int64_t function_406810(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406816\n    if (locale == NULL) {\n        // 0x406843\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406816\n    bool v2; // 0x406810\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x406810\n    int64_t v5 = v1; // 0x406810\n    int64_t v6 = 2; // 0x406835\n    unsigned char v7 = *(char *)v5; // 0x406835\n    char v8 = *(char *)v4; // 0x406835\n    char v9 = v8; // 0x406835\n    bool v10 = false; // 0x406835\n    while (v7 == v8) {\n        // 0x406828\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406841\n    int64_t v13 = v1; // 0x406841\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406843\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406841\n    unsigned char v15 = *(char *)v13; // 0x40685d\n    char v16 = *(char *)v12; // 0x40685d\n    char v17 = v16; // 0x40685d\n    bool v18 = false; // 0x40685d\n    while (v15 == v16) {\n        // 0x406850\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406870",
            "funcStartAddr": "406870",
            "funcEndAddr": "406dd2",
            "decompiledFuncCode": "int64_t function_406870(void) {\n    char * v1 = nl_langinfo(14); // 0x406886\n    char * v2 = g45; // 0x40688b\n    char * v3; // 0x406870\n    int64_t v4; // 0x406870\n    int64_t v5; // 0x406870\n    int64_t v6; // 0x406870\n    int64_t v7; // 0x406870\n    int32_t size; // 0x406870\n    int32_t size2; // 0x406870\n    int32_t len; // 0x406942\n    int64_t v8; // 0x406942\n    char * env_val; // 0x40692d\n    if (v2 == NULL) {\n        // 0x406928\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406995;\n        } else {\n            // 0x40693a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406995;\n            } else {\n                // 0x40693f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40692d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406dc5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406995;\n                    } else {\n                        // 0x406d39\n                        size2 = len + 14;\n                        goto lab_0x40695b;\n                    }\n                } else {\n                    goto lab_0x40695b;\n                }\n            }\n        }\n    } else {\n        // 0x406870\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4068aa;\n    }\n  lab_0x406bdc:;\n    // 0x406bdc\n    struct _IO_FILE * stream; // 0x406a1b\n    int32_t v10 = __uflow(stream); // 0x406bdf\n    int64_t v11; // 0x406870\n    int64_t v12 = v11; // 0x406be9\n    int64_t v13; // 0x406870\n    int64_t v14 = v13; // 0x406be9\n    int32_t v15 = v10; // 0x406be9\n    int64_t v16; // 0x406870\n    int64_t v17 = v16; // 0x406be9\n    int64_t v18 = v11; // 0x406be9\n    int64_t v19 = v13; // 0x406be9\n    int64_t v20 = v16; // 0x406be9\n    if (v10 == -1) {\n        // break -> 0x406bef\n        goto lab_0x406bef;\n    }\n    goto lab_0x406a69;\n  lab_0x406a5e:;\n    // 0x406a5e\n    int64_t v90; // 0x406870\n    int64_t * v32; // 0x406a50\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406870\n    v12 = v89;\n    int64_t v91; // 0x406870\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406870\n    v17 = v92;\n    goto lab_0x406a69;\n  lab_0x406a69:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406870\n    int32_t v25; // bp-120, 0x406870\n    int32_t v26; // bp-184, 0x406870\n    int64_t v27; // 0x406a1b\n    int64_t v28; // 0x406a38\n    int64_t v29; // 0x406a3d\n    int64_t * v30; // 0x406a54\n    switch (c) {\n        case 32: {\n            goto lab_0x406a50;\n        }\n        case 10: {\n            goto lab_0x406a50;\n        }\n        case 9: {\n            goto lab_0x406a50;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406c41\n            int32_t v33; // 0x406870\n            char v34; // 0x406870\n            int32_t v35; // 0x406c4e\n            if (v31 < *v30) {\n                // 0x406c20\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406c4b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406c41\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406c20\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406c4b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406c30\n                v36 = v33;\n            }\n            // 0x406d1f\n            if (v36 == -1) {\n                // break -> 0x406bef\n                break;\n            }\n            goto lab_0x406a50;\n        }\n        default: {\n            // 0x406a7f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406bef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406aa8\n            int64_t v39 = v37 + 4; // 0x406aaa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406ab6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406ab8\n            while (v41 == 0) {\n                // 0x406aa8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406ad6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406ae2\n            int64_t v45 = v43 + 4; // 0x406ae4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406af0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406af2\n            while (v47 == 0) {\n                // 0x406ae2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406adf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406b08\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406b18\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406b1c\n            int64_t v52 = v51 + v48; // 0x406b25\n            int64_t * mem; // 0x406870\n            int64_t v53; // 0x406870\n            int64_t v54; // 0x406870\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406c5b\n                int64_t v56 = v55 + 3; // 0x406c67\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406b41\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406b50\n            if (mem == NULL) {\n                // 0x406d7c\n                free((int64_t *)v21);\n                function_4071c0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x4069f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406b68\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406b72\n            uint32_t v62 = (int32_t)v59; // 0x406b75\n            int64_t v63; // 0x406870\n            if (v62 >= 8) {\n                // 0x406c84\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406c9e\n                int64_t v66 = v61 - v65; // 0x406ca2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406cad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406cbe\n                    int64_t v70 = v69 & 0xffffffff; // 0x406cbe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406cbb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406d4f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406b87\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406b8b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406b9b\n            int64_t v74 = v60 - 1; // 0x406b9f\n            uint32_t v75 = (int32_t)v73; // 0x406ba4\n            int64_t v76; // 0x406870\n            if (v75 >= 8) {\n                // 0x406cd2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406cdc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406cec\n                int64_t v80 = v74 - v79; // 0x406cf0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406cfb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406d0b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406d09\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406d66\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406d6e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406bb6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406bba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406db3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406bce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x406a5e;\n            } else {\n                goto lab_0x406bdc;\n            }\n        }\n    }\n  lab_0x406a50:;\n    int64_t v93 = v23; // 0x406870\n    int64_t v94 = v22; // 0x406870\n    int64_t v95 = v21; // 0x406870\n    goto lab_0x406a50_2;\n  lab_0x406995:;\n    int64_t * mem3 = malloc(size); // 0x406995\n    int64_t v97 = (int64_t)&g11; // 0x4069a0\n    int64_t v98; // 0x406870\n    int64_t path; // 0x406870\n    if (mem3 == NULL) {\n        goto lab_0x406972;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406995\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4069b6;\n    }\n  lab_0x4068aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40689d\n    char v100 = *v3; // 0x4068aa\n    int64_t v101; // 0x406870\n    if (v100 == 0) {\n        // 0x406904\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406870\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406870\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4068f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4068f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4068c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4068cd\n        char v107 = *(char *)v106; // 0x4068d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406904\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4068db\n    v104 = v103 + 1;\n  lab_0x4068f7:\n    // 0x406904\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406972:;\n    char * v108 = (char *)v97;\n    g45 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4068aa;\n  lab_0x4069b6:;\n    int64_t v109 = v98 + path; // 0x4069b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4069e2\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x406a11\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406d42\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x406a35\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406a50_2:;\n                uint64_t v96 = *v32; // 0x406a50\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406bdc;\n                } else {\n                    goto lab_0x406a5e;\n                }\n            }\n          lab_0x406bef:\n            // 0x406bef\n            function_4071c0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x406c0e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4069f4;\n  lab_0x40695b:;\n    int64_t * mem4 = malloc(size2); // 0x40695b\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x406a01\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4069b6;\n    } else {\n        goto lab_0x406972;\n    }\n  lab_0x4069f4:\n    // 0x4069f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406972;\n}\n"
        },
        {
            "funcName": "function_406de0",
            "funcStartAddr": "406de0",
            "funcEndAddr": "406f68",
            "decompiledFuncCode": "int64_t function_406de0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    char v1 = *(char *)a1; // 0x406e14\n    char v2 = v1; // 0x406e1c\n    int64_t v3 = a1; // 0x406e1c\n    int64_t v4 = a1; // 0x406e1c\n    int64_t v5 = 0; // 0x406e1c\n    int32_t v6 = 0; // 0x406e1c\n    int64_t v7 = a1; // 0x406e1c\n    char v8; // 0x406de0\n    int64_t v9; // 0x406de0\n    int64_t v10; // 0x406de0\n    int64_t v11; // 0x406de0\n    char v12; // 0x406de0\n    int64_t v13; // 0x406de0\n    int32_t v14; // 0x406de0\n    int32_t v15; // 0x406de0\n    int32_t v16; // 0x406de0\n    char * v17; // 0x406de0\n    char * v18; // 0x406de0\n    int64_t v19; // 0x406e48\n    if (v1 != 0) {\n        while (true) {\n            int64_t v20 = v5;\n            v17 = (char *)v20;\n            char v21 = v2; // 0x406de0\n            char v22; // 0x406de0\n            while (true) {\n                // 0x406e22\n                v14 = v6;\n                v12 = v21;\n                v9 = v4;\n                v10 = v3;\n                char v23; // 0x406e22\n                while (true) {\n                  lab_0x406e22:\n                    // 0x406e22\n                    v3 = v10;\n                    v22 = v12;\n                    v6 = v14;\n                    v4 = v9 + 1;\n                    v18 = (char *)v4;\n                    v23 = *v18;\n                    if (v23 == 47) {\n                        // break (via goto) -> 0x406ee0\n                        goto lab_0x406ee0;\n                    }\n                    if (v20 == 0 || v22 == 47 != v23 != 0) {\n                        // break -> 0x406e10\n                        break;\n                    }\n                    // 0x406e45\n                    v19 = v20 - v3;\n                    if (v19 == 1) {\n                        // 0x406f30\n                        v8 = v23;\n                        v16 = v6;\n                        if (*(char *)v3 == 46) {\n                            goto lab_0x406ead;\n                        } else {\n                            // 0x406f3b\n                            *v17 = 0;\n                            goto lab_0x406e63;\n                        }\n                    } else {\n                        // 0x406e55\n                        *v17 = 0;\n                        if (v19 == 2) {\n                            // 0x406ef0\n                            if (*(char *)v3 != 46) {\n                                goto lab_0x406e63;\n                            } else {\n                                // 0x406efb\n                                v15 = 0;\n                                v13 = 0;\n                                v11 = 0;\n                                if (*(char *)(v3 + 1) != 46) {\n                                    goto lab_0x406e63;\n                                } else {\n                                    goto lab_0x406e86;\n                                }\n                            }\n                        } else {\n                            goto lab_0x406e63;\n                        }\n                    }\n                }\n                // 0x406e10\n                v21 = v23;\n                v7 = v3;\n                if (v23 == 0) {\n                    // break (via goto) -> 0x406ec8\n                    goto lab_0x406ec8_2;\n                }\n            }\n          lab_0x406ee0:\n            // 0x406ee0\n            v5 = v22 != 47 ? v4 : v20;\n            v2 = 47;\n        }\n    }\n  lab_0x406ec8_2:;\n    int64_t result = v7 - a1; // 0x406ecb\n  lab_0x406ece:\n    // 0x406ece\n    return result;\n  lab_0x406f48_2:;\n    int64_t v24; // 0x406de0\n    int64_t v25; // 0x406e90\n    if (v24 == 0) {\n        // 0x406f60\n        result = 0x100000000 * v25 >> 32;\n        return result;\n    } else {\n        int32_t * v26 = __errno_location(); // 0x406f4d\n        if (*v26 != 2) {\n            // 0x406f60\n            result = 0x100000000 * v25 >> 32;\n            return result;\n        } else {\n            // 0x406f57\n            *v26 = (int32_t)v24;\n            // 0x406f60\n            result = 0x100000000 * v25 >> 32;\n            return result;\n        }\n    }\n  lab_0x406ead:\n    // 0x406ead\n    v14 = v16;\n    v12 = v8;\n    v9 = v4;\n    v10 = v4;\n    v7 = v4;\n    if (v8 == 0) {\n        // break (via goto) -> 0x406ec8\n        goto lab_0x406ec8_2;\n    }\n    goto lab_0x406e22;\n  lab_0x406e63:\n    // 0x406e63\n    v15 = 1;\n    v13 = 1;\n    v11 = 0;\n    if ((int32_t)v19 < 0) {\n        uint32_t v27 = *__errno_location(); // 0x406f21\n        v15 = v6;\n        v13 = v6 % 2;\n        v11 = v27;\n    }\n    goto lab_0x406e86;\n  lab_0x406e86:\n    // 0x406e86\n    v24 = v11;\n    v25 = function_404ae0(a2, v3, v13, NULL);\n    int32_t v28 = v25; // 0x406e98\n    if (v28 == -1) {\n        goto lab_0x406f48_2;\n    }\n    // 0x406ea1\n    *v17 = 47;\n    if (v28 != 0) {\n        goto lab_0x406f48_2;\n    }\n    // 0x406ea1\n    v8 = *v18;\n    v16 = v15;\n    goto lab_0x406ead;\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "407169",
            "decompiledFuncCode": "int64_t function_406f70(int64_t a1, int64_t path, int32_t a3, int32_t owner, int32_t group, int64_t a6, int64_t a7) {\n    int32_t fd = a1; // 0x406f99\n    int32_t v1; // 0x406f70\n    int32_t * v2; // 0x406f70\n    int64_t v3; // 0x406f70\n    int32_t v4; // 0x406f70\n    int64_t v5; // bp-200, 0x406f70\n    int32_t v6; // 0x406f70\n    if (fd < 0) {\n        uint32_t v7 = __xstat(1, (char *)path, (struct stat *)&v5); // 0x40702d\n        if (v7 != 0) {\n            // 0x40703c\n            return (int64_t)v7 & 0xffffffff;\n        }\n        if ((v6 & 0xf000) != 0x4000) {\n            // 0x407156\n            *__errno_location() = 20;\n            // 0x40703c\n            return 0xffffffff;\n        }\n        goto lab_0x406fcd;\n    } else {\n        int32_t v8 = __fxstat(1, fd, (struct stat *)&v5); // 0x406fa8\n        v4 = v8;\n        if (v8 != 0) {\n            goto lab_0x4070f0;\n        } else {\n            if ((v6 & 0xf000) != 0x4000) {\n                int32_t * v9 = __errno_location(); // 0x407050\n                *v9 = 20;\n                v3 = 0xffffffff;\n                v2 = v9;\n                v1 = 20;\n                goto lab_0x407069;\n            } else {\n                goto lab_0x406fcd;\n            }\n        }\n    }\n  lab_0x406fcd:;\n    int64_t v10 = v6;\n    int64_t v11; // 0x406f70\n    if (owner == -1 || v6 == owner) {\n        // 0x407080\n        v11 = 0;\n        if (group != -1 == (v6 != group)) {\n            goto lab_0x406fe2;\n        } else {\n            goto lab_0x407093;\n        }\n    } else {\n        goto lab_0x406fe2;\n    }\n  lab_0x4070f0:;\n    int32_t * v12 = __errno_location(); // 0x4070f0\n    v3 = v4;\n    v2 = v12;\n    v1 = *v12;\n    goto lab_0x407069;\n  lab_0x406fe2:\n    if (fd >= 0) {\n        int32_t v15 = fchown(fd, owner, group); // 0x4070dd\n        v4 = v15;\n        if (v15 == 0) {\n            // 0x407012\n            v11 = (v10 & 73) == 0 ? 0 : v10 & 3072;\n            goto lab_0x407093;\n        } else {\n            goto lab_0x4070f0;\n        }\n    } else {\n        char * path2 = (char *)path;\n        int32_t v16; // 0x406f70\n        if (a3 == -1) {\n            // 0x407120\n            v16 = chown(path2, owner, group);\n        } else {\n            // 0x407003\n            v16 = lchown(path2, owner, group);\n        }\n        // 0x40700e\n        if (v16 != 0) {\n            // 0x40703c\n            return (int64_t)v16 & 0xffffffff;\n        }\n        // 0x407012\n        v11 = (v10 & 73) == 0 ? 0 : v10 & 3072;\n        goto lab_0x407093;\n    }\n  lab_0x407069:\n    // 0x407069\n    close(fd);\n    *v2 = v1;\n    // 0x40703c\n    return v3 & 0xffffffff;\n  lab_0x407093:;\n    uint64_t v13 = 0x100000000 * a7 >> 32;\n    if ((int32_t)((v11 | v10 ^ a6) & v13) == 0) {\n        // 0x407100\n        if (fd < 0) {\n            // 0x40703c\n            return 0;\n        }\n        // 0x40703c\n        return (int64_t)close(fd) & 0xffffffff;\n    }\n    int64_t mode = (v13 % 0x1000 ^ 4095) & v10 | a6 & 0xffffffff; // 0x4070b4\n    if (fd < 0) {\n        // 0x40703c\n        return (int64_t)chmod((char *)path, (int32_t)mode) & 0xffffffff;\n    }\n    int32_t v14 = fchmod(fd, (int32_t)mode); // 0x407133\n    v4 = v14;\n    if (v14 == 0) {\n        // 0x40703c\n        return (int64_t)close(fd) & 0xffffffff;\n    }\n    goto lab_0x4070f0;\n}\n"
        },
        {
            "funcName": "function_407170",
            "funcStartAddr": "407170",
            "funcEndAddr": "4071be",
            "decompiledFuncCode": "int64_t function_407170(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40717c\n    if (fd >= 3) {\n        // 0x407181\n        return a1 & 0xffffffff;\n    }\n    // 0x407190\n    int64_t v1; // 0x407170\n    int64_t v2 = function_408e10(a1, v1); // 0x407190\n    int32_t * v3 = __errno_location(); // 0x407198\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4071c0",
            "funcStartAddr": "4071c0",
            "funcEndAddr": "40723b",
            "decompiledFuncCode": "int64_t function_4071c0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4071c7\n    if (fileno(stream) < 0) {\n        // 0x407227\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4071da\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40720b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x407227\n            return fclose(stream);\n        }\n    }\n    // 0x4071dc\n    if ((int32_t)function_407240(a1, v1) == 0) {\n        // 0x407227\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4071e8\n    int32_t v3 = *v2; // 0x4071f0\n    int64_t result = fclose(stream); // 0x4071fe\n    if (v3 != 0) {\n        // 0x407230\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x407200\n    return result;\n}\n"
        },
        {
            "funcName": "function_407240",
            "funcStartAddr": "407240",
            "funcEndAddr": "407280",
            "decompiledFuncCode": "int64_t function_407240(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40725a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40725a\n        return fflush(stream);\n    }\n    // 0x407268\n    function_407280(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407280",
            "funcStartAddr": "407280",
            "funcEndAddr": "4072d7",
            "decompiledFuncCode": "int64_t function_407280(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407280\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40728a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4072bb\n    int64_t result = -1; // 0x4072c4\n    if (v1 != -1) {\n        // 0x4072c6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4072d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072e0",
            "funcStartAddr": "4072e0",
            "funcEndAddr": "4072e4",
            "decompiledFuncCode": "int64_t function_4072e0(int64_t a1) {\n    // 0x4072e0\n    int64_t result; // 0x4072e0\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072f0",
            "funcStartAddr": "4072f0",
            "funcEndAddr": "408e09",
            "decompiledFuncCode": "int64_t function_4072f0(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x4072f0\n    int64_t v1; // bp-1416, 0x4072f0\n    int64_t v2; // bp-1656, 0x4072f0\n    if ((int32_t)function_409180(a3, &v1, &v2) < 0) {\n        // 0x407960\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x4072fb\n    int64_t v4; // bp-1384, 0x4072f0\n    int64_t v5; // bp-1640, 0x4072f0\n    int64_t v6; // 0x4072f0\n    if ((int32_t)function_408f60(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x408247\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x408263\n            free((int64_t *)v6);\n        }\n        // 0x408268\n        *__errno_location() = 22;\n        // 0x407960\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40735b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x407363\n    uint64_t v9 = v8 + v6; // 0x407367\n    int64_t v10; // 0x4072f0\n    char * v11; // 0x4072f0\n    int64_t v12; // 0x4072f0\n    if (v9 < v8) {\n        // 0x407a10\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x407919;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x407a10\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x407919;\n        } else {\n            uint64_t size = v9 + 6; // 0x407377\n            if (size < 4000) {\n                // 0x4074c0\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x4072f0\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x4073b4;\n            } else {\n                if (size == -1) {\n                    // 0x407a10\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x407919;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x407398\n                    if (mem == NULL) {\n                        // 0x407a10\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x407919;\n                    } else {\n                        // 0x4073ad\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x4073b4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4078e0_2:;\n    // 0x4078e0\n    int64_t v14; // 0x4072f0\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x4078e8\n    int64_t v17 = v16; // 0x4078f6\n    int64_t v18 = v16; // 0x4078f6\n    int64_t v19 = v15; // 0x4078f6\n    int64_t v20; // 0x4072f0\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x407b08;\n    } else {\n        goto lab_0x407901;\n    }\n  lab_0x407919:\n    // 0x407919\n    if (v6 != (int64_t)&v4) {\n        // 0x407930\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40794c\n        free((int64_t *)v6);\n    }\n    // 0x407951\n    *(int32_t *)v10 = 12;\n    // 0x407960\n    return 0;\n  lab_0x4073b4:\n    // 0x4073b4\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x4073ed\n    int64_t v23 = *v22; // 0x4073ed\n    int64_t v24 = 0; // 0x4073f3\n    int64_t v25 = v20; // 0x4073f3\n    int64_t v26 = v21; // 0x4073f3\n    int64_t v27 = 0; // 0x4073f3\n    int64_t v28; // 0x4072f0\n    int64_t v29; // 0x4072f0\n    int64_t v30; // 0x4072f0\n    int64_t v31; // 0x4072f0\n    int64_t v32; // 0x4072f0\n    int64_t v33; // 0x4072f0\n    int64_t v34; // 0x4072f0\n    if (v23 == a3) {\n        goto lab_0x407a03;\n    } else {\n        int64_t v35 = v23 - a3; // 0x4073f9\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40740b;\n    }\n  lab_0x407a03:;\n    int64_t v36 = v24; // 0x407a06\n    float80_t v37; // 0x4072f0\n    float80_t v38 = v37; // 0x407a06\n    float80_t v39; // 0x4072f0\n    float80_t v40 = v39; // 0x407a06\n    int64_t v41 = v25; // 0x407a06\n    int64_t v42 = v26; // 0x407a06\n    int64_t v43 = v27; // 0x407a06\n    int64_t v44; // 0x4072f0\n    int64_t v45 = v44; // 0x407a06\n    goto lab_0x407568;\n  lab_0x407568:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x4072f0\n    int64_t v51; // 0x4072f0\n    int64_t v52; // 0x4072f0\n    int64_t v53; // 0x4072f0\n    int64_t v54; // 0x4072f0\n    int64_t v55; // 0x4072f0\n    int64_t v56; // 0x4072f0\n    int64_t v57; // 0x4072f0\n    int64_t dest_mem2; // 0x4072f0\n    int64_t dest_mem3; // 0x4072f0\n    int64_t v58; // 0x4072f0\n    float80_t v59; // 0x4072f0\n    float80_t v60; // 0x4072f0\n    float80_t v61; // 0x4072f0\n    float80_t v62; // 0x4072f0\n    float80_t v63; // 0x4072f0\n    uint64_t v64; // 0x408696\n    char * v65; // 0x40757c\n    char v66; // 0x40757c\n    int64_t v67; // 0x4075a4\n    uint32_t v68; // 0x4075a8\n    int64_t v69; // 0x407985\n    char v70; // 0x4072f0\n    if (v1 == v49) {\n        // 0x408690\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x408dfa\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x4086f2;\n            } else {\n                goto lab_0x4078e0_2;\n            }\n        } else {\n            // 0x4086a0\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x4086f2;\n            } else {\n                if (v47 != 0) {\n                    // 0x408cbd\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x4078e0_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x408cc3\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x4086be;\n                        } else {\n                            goto lab_0x408ccf;\n                        }\n                    }\n                } else {\n                    // 0x4086ae\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x4086be;\n                    } else {\n                        goto lab_0x408ccf;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40757c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x407581\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x408150\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x4078e0_2;\n                } else {\n                    goto lab_0x4079e2;\n                }\n            } else {\n                // 0x407992\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x4079e2;\n                } else {\n                    if (v47 != 0) {\n                        // 0x408280\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x4078e0_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x408286\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x4079b0;\n                            } else {\n                                goto lab_0x408292;\n                            }\n                        }\n                    } else {\n                        // 0x4079a0\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x4079b0;\n                        } else {\n                            goto lab_0x408292;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x407599\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g53 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x407f10\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4079e7;\n                }\n                case 19: {\n                    // 0x407f00\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4079e7;\n                }\n                case 20: {\n                    // 0x407ee8\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4079e7;\n                }\n                case 21: {\n                    goto lab_0x407ad0;\n                }\n                case 22: {\n                    goto lab_0x407ad0;\n                }\n                default: {\n                    // 0x4075ba\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x407a60\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x407a7d;\n                        } else {\n                            // 0x407a67\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x4075f0;\n                            } else {\n                                goto lab_0x407a7d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4075f0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40740b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x4072f0\n    float80_t v77 = v76;\n    float80_t v78; // 0x4072f0\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x4072f0\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40740e\n    int64_t v89 = v85; // 0x40740e\n    int64_t v90 = v84; // 0x40740e\n    float80_t v91 = v79; // 0x40740e\n    float80_t v92 = v77; // 0x40740e\n    int64_t v93 = v75; // 0x40740e\n    int64_t v94 = v80; // 0x40740e\n    int64_t v95 = v81; // 0x40740e\n    int64_t v96 = v82; // 0x40740e\n    int64_t v97 = v87; // 0x40740e\n    int64_t v98; // 0x4072f0\n    int64_t v99; // 0x4072f0\n    int64_t v100; // 0x4072f0\n    int64_t v101; // 0x4072f0\n    int64_t v102; // 0x4072f0\n    if (v82 >= v87) {\n        goto lab_0x407559;\n    } else {\n        if (v82 != 0) {\n            // 0x4074f0\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x4078e0_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x4074f6\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40750b;\n                } else {\n                    goto lab_0x4074fe;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x407434\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40751e;\n                } else {\n                    goto lab_0x407440;\n                }\n            } else {\n                goto lab_0x4074fe;\n            }\n        }\n    }\n  lab_0x407559:\n    // 0x407559\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x407568;\n  lab_0x4086f2:\n    // 0x4086f2\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x4086fa\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40870b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x408717\n    if (v12 != 0) {\n        // 0x408723\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x408742\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40875e\n        free((int64_t *)v6);\n    }\n    // 0x408763\n    *a2 = v46;\n    // 0x407960\n    return result;\n  lab_0x407ad0:\n    // 0x407ad0\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x4079e7;\n  lab_0x4074fe:\n    // 0x4074fe\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        goto lab_0x40750b;\n    }\n  lab_0x407b08:\n    // 0x407b08\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x407901;\n  lab_0x407901:\n    if (v12 == 0) {\n        // 0x407a10\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x407919;\n    } else {\n        // 0x407911\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x407919;\n    }\n  lab_0x4079e2:\n    // 0x4079e2\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x4079e7;\n  lab_0x4075f0:;\n    int64_t v273 = (int64_t)v11; // 0x4075f0\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x4075f7\n    int64_t v275 = v273 + 1; // 0x4075fb\n    *v11 = 37;\n    int64_t v276 = v275; // 0x407604\n    if (v274 % 2 != 0) {\n        // 0x407606\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x4075f7\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x407617\n    if ((v277 & 2) != 0) {\n        // 0x407619\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x407623\n    if ((v277 & 4) != 0) {\n        // 0x407625\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40762f\n    if ((v277 & 8) != 0) {\n        // 0x407631\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40763b\n    if ((v277 & 16) != 0) {\n        // 0x40763d\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x407647\n    if ((v277 & 64) != 0) {\n        // 0x407649\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x407653\n    if ((v277 & 32) != 0) {\n        // 0x407655\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40765d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x407661\n    int64_t v293 = v290; // 0x407668\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x407677\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40769a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40769e\n    int64_t v298 = v295; // 0x4076a5\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x4076b4\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x4075aa\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x4076e0\n    int64_t v272; // 0x4072f0\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x4076e9\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x407ae8;\n        } else {\n            if (v301 == 12) {\n                // 0x4082a8\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x407710;\n            } else {\n                // 0x407700\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x407ae0\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x407ae8;\n                } else {\n                    goto lab_0x407710;\n                }\n            }\n        }\n    } else {\n        goto lab_0x407710;\n    }\n  lab_0x4079e7:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x4079e7\n    int64_t v111 = v55 + 88; // 0x4079eb\n    int64_t v112 = *(int64_t *)v111; // 0x4079ef\n    int64_t v113 = v49 + 1; // 0x4079f2\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x4073f9\n        int64_t v115 = v114 + v105; // 0x4073ff\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x407a28\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x4078e0_2;\n            } else {\n                goto lab_0x407559;\n            }\n        } else {\n            goto lab_0x40740b;\n        }\n    } else {\n        goto lab_0x407a03;\n    }\n  lab_0x40750b:;\n    int64_t v116 = v80 == v20; // 0x407512\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x407440;\n    } else {\n        goto lab_0x40751e;\n    }\n  lab_0x40751e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x4072f0\n    if (v102 != 0) {\n        goto lab_0x407440;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40753a\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x407af5;\n        } else {\n            // 0x407548\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x407559;\n        }\n    }\n  lab_0x407440:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x407457\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x4078e0_2;\n    } else {\n        // 0x40747d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x4074a5\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x407559;\n    }\n  lab_0x4086be:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x408c84\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x4078e0_2;\n        } else {\n            // 0x408c95\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408caa\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x4086f2;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x4086e1\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x407af5;\n        } else {\n            // 0x4086ef\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x4086f2;\n        }\n    }\n  lab_0x408ccf:\n    // 0x408ccf\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        goto lab_0x4086be;\n    }\n  lab_0x407a7d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x407a7d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x407a81\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x407a85\n    int64_t v123 = 0; // 0x407a8c\n    int64_t v124 = v122; // 0x407a8c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x407a92\n        int64_t v126 = v120; // 0x407a9a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x408a21\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x408a39\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x408a4b\n            int64_t v131 = v128; // 0x408a54\n            int64_t v132 = v130; // 0x408a54\n            int64_t v133; // 0x4072f0\n            int64_t v134; // 0x408a66\n            if (v130 < v129) {\n                // 0x408a56\n                if (v121 == v128) {\n                    // break -> 0x407870\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40785b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x407870\n                        goto lab_0x407870;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x408a18\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x408a21\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x408a56\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x407870\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40785b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x407870\n                            goto lab_0x407870;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x408a18\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x407aa4\n            if (*(int32_t *)v135 != 5) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x407ab0\n            int64_t v137 = v136; // 0x407ab0\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x407abd\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x407870:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x407870\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x407874\n    int64_t v142; // 0x4072f0\n    int64_t v143; // 0x4072f0\n    int64_t v144; // 0x4072f0\n    if (v140 == v141) {\n        goto lab_0x407f20;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x407881\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x408a84\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x408a8d\n            if (v141 == v146) {\n                goto lab_0x407f3e;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x408ab3\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x408aba\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x408ad3\n                int64_t v152 = v151; // 0x408adc\n                int64_t v153 = v149; // 0x408adc\n                int64_t v154; // 0x4072f0\n                int64_t v155; // 0x408ae7\n                if (v151 < v150) {\n                    // 0x408ade\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x4078e0_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x408afa\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x4078e0_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x408aa0\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x408aa9\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x408ade\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x4078e0_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x408afa\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x4078e0_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x408aa0\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x4078ac;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x407893\n            if (*(int32_t *)v156 != 5) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x4078a0\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x407f20;\n            } else {\n                goto lab_0x4078ac;\n            }\n        }\n    }\n  lab_0x407710:\n    // 0x407710\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40771d\n    int64_t v160 = 0; // 0x407725\n    if (v159 != -1) {\n        // 0x40772b\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40801c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40774e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40775c\n        if (*(int32_t *)v162 != 5) {\n            // 0x40801c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40776f\n        int64_t v164; // bp-8, 0x4072f0\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x4072f0\n    uint64_t v165; // 0x407786\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x4081b8\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x4077e4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x4078e0_2;\n    } else {\n        // 0x407790\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x4077e4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x407ec0\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x4078e0_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x407ec6\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x4077b2;\n                } else {\n                    goto lab_0x407ed2;\n                }\n            }\n        } else {\n            // 0x4077a2\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x4077b2;\n            } else {\n                goto lab_0x407ed2;\n            }\n        }\n    }\n  lab_0x4079b0:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x4081d9\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x4078e0_2;\n        } else {\n            // 0x4081f1\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408202\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x4079e2;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x4079d1\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x407af5;\n        } else {\n            // 0x4079df\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x4079e2;\n        }\n    }\n  lab_0x408292:\n    // 0x408292\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        goto lab_0x4079b0;\n    }\n  lab_0x407f20:\n    // 0x407f20\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x407f3e;\n  lab_0x407ae8:\n    // 0x407ae8\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x407710;\n  lab_0x407af5:\n    // 0x407af5\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x407b08;\n  lab_0x407f3e:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x407f44\n    v14 = v48;\n    int64_t v170; // 0x4072f0\n    int64_t v171; // 0x4072f0\n    int64_t * v172; // 0x4072f0\n    int64_t v173; // 0x4072f0\n    int64_t v174; // bp-760, 0x4072f0\n    uint64_t size5; // 0x407f48\n    if (v169 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        // 0x407f59\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x407fb9;\n        } else {\n            // 0x407f65\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x4078e0_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x407f8d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x4078e0_2;\n                } else {\n                    goto lab_0x407fb9;\n                }\n            }\n        }\n    }\n  lab_0x4078ac:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x407f3e;\n    } else {\n        // 0x4078b5\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x407f3e;\n        } else {\n            goto lab_0x4078e0_2;\n        }\n    }\n  lab_0x4077b2:\n    // 0x4077b2\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x408179\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x408194\n            if (v48 == v20 && v46 != 0) {\n                // 0x4081a2\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x4077e4\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x4077d3\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x4077e4\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x4078e0_2;\n  lab_0x407ed2:\n    // 0x407ed2\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        goto lab_0x4077b2;\n    }\n  lab_0x407fb9:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x4072f0\n    int64_t v181; // 0x4072f0\n    int64_t v182; // 0x4072f0\n    int64_t v183; // 0x4072f0\n    int64_t v184; // 0x4072f0\n    int64_t v185; // 0x4072f0\n    int64_t v186; // 0x4072f0\n    int64_t v187; // 0x4072f0\n    int64_t v188; // 0x4072f0\n    int64_t v189; // 0x4072f0\n    int64_t v190; // 0x4072f0\n    int64_t v191; // 0x4072f0\n    int64_t v192; // 0x4072f0\n    int64_t v193; // 0x4072f0\n    float80_t v194; // 0x4072f0\n    float80_t v195; // 0x4072f0\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x408b32\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x408b40\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x408c6d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x408479;\n    } else {\n        // 0x407fc1\n        int64_t v198; // 0x4072f0\n        float80_t v199; // 0x4072f0\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x408781\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40878e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x4085ea\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x407fef\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x407ff8\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40801c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x408b66\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x408b66\n                            v181 = v187 + 3;\n                            goto lab_0x408ce1;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x408ce1;\n                            } else {\n                                goto lab_0x408ba2;\n                            }\n                        }\n                    } else {\n                        // 0x408873\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x408467;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x408881\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x408dca\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x4088c8\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x4088db\n                                int64_t v207 = v176 & 0xffffffff; // 0x4088de\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x4088ec\n                                int64_t v209 = v187 + 1; // 0x408909\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40891e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40892b\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x408479;\n                        }\n                    }\n                } else {\n                    // 0x408618\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x408618\n                        v180 = v187 + 1;\n                        goto lab_0x408bc7;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x408bc7;\n                        } else {\n                            goto lab_0x408638;\n                        }\n                    }\n                }\n            } else {\n                // 0x408450\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x408467;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40899c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x4089ad\n                    char v215 = *v213; // 0x4089b4\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x4089f0\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x4089fd\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x4089c5\n                        v182 = v218;\n                        int64_t v219; // 0x4089b7\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x408479;\n                }\n            }\n        } else {\n            float80_t v220; // 0x4072f0\n            if (v220 != 0.0L) {\n                // 0x40801c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40866b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40867a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x408953\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x408479;\n        }\n    }\n  lab_0x408479:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40847c\n    int64_t v229 = v228; // 0x408482\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x408484\n        int64_t v232 = v231 + v224; // 0x408487\n        int64_t v233 = v232 - v225; // 0x40848e\n        if ((v230 & 2) != 0) {\n            // 0x408933\n            v229 = v233;\n            int64_t v234 = v224; // 0x408936\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x408940\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x408940\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x4087a5\n                int64_t v238 = v224; // 0x4087ab\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x4087b9\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x4087b0\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x4087c5\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x4087d8\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x4084b1\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x4084d1\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x4084c8\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x4084da\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x4084e8\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40801c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x408518\n    int64_t dest_mem5 = v48; // 0x408525\n    int64_t v250 = v248; // 0x408525\n    int64_t v251 = v47; // 0x408525\n    int64_t v252; // 0x4072f0\n    if (v47 - v46 > v248) {\n        goto lab_0x4085a0;\n    } else {\n        if (v249 < v46) {\n            // 0x408772\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x4078e0_2;\n            } else {\n                goto lab_0x4085a0;\n            }\n        } else {\n            // 0x408530\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x4085a0;\n            } else {\n                if (v47 != 0) {\n                    // 0x408b08\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x4078e0_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x408b0e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40854e;\n                        } else {\n                            goto lab_0x408b1a;\n                        }\n                    }\n                } else {\n                    // 0x40853e\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40854e;\n                    } else {\n                        goto lab_0x408b1a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4085a0:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x4085b1\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x4085cd\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x4079e7;\n  lab_0x408467:\n    // 0x408467\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x408479;\n  lab_0x408bc7:;\n    char * v257 = nl_langinfo(0x10000); // 0x408bfa\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x408c0b\n    char v259 = *v257; // 0x408c12\n    int64_t v260 = v176 & 0xffffffff; // 0x408c15\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x408c23\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x408c50\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x408c5d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x408638;\n  lab_0x408638:\n    // 0x408638\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x408479;\n  lab_0x40854e:\n    // 0x40854e\n    if (v48 == 0 || v48 == v20) {\n        // 0x4087eb\n        int64_t size7; // 0x4072f0\n        int64_t * mem12 = malloc((int32_t)size7); // 0x408802\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x4078e0_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40880e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408839\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x4085a0;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40857d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x4078e0_2;\n        } else {\n            // 0x40858b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x4085a0;\n        }\n    }\n  lab_0x408b1a:\n    // 0x408b1a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x4078e0_2;\n    } else {\n        goto lab_0x40854e;\n    }\n  lab_0x408ce1:;\n    int64_t v265 = v187 + 4; // 0x408ce1\n    char v266 = *nl_langinfo(0x10000); // 0x408d2c\n    int64_t v267 = v176 & 0xffffffff; // 0x408d2f\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x408d36\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x408d5d\n        int64_t v270 = v265 + 1; // 0x408d65\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x408ba2;\n  lab_0x408ba2:\n    // 0x408ba2\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x408479;\n}\n"
        },
        {
            "funcName": "function_408e10",
            "funcStartAddr": "408e10",
            "funcEndAddr": "408e1e",
            "decompiledFuncCode": "int64_t function_408e10(int64_t a1, int64_t a2) {\n    // 0x408e10\n    int64_t v1; // 0x408e10\n    return function_408e20(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_408e20",
            "funcStartAddr": "408e20",
            "funcEndAddr": "408f55",
            "decompiledFuncCode": "int64_t function_408e20(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x408f00\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x408e5c\n    int64_t v2; // 0x408e20\n    if (g46 < 0) {\n        int64_t v3 = function_408e20(fd, 0, v1, a4); // 0x408ea4\n        int64_t v4 = v3 & 0xffffffff; // 0x408ea9\n        if ((int32_t)v3 < 0) {\n            // 0x408e90\n            return v4 & 0xffffffff;\n        }\n        // 0x408eaf\n        v2 = v4;\n        if (g46 != -1) {\n            // 0x408e90\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x408e77\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x408e86\n            g46 = 1;\n            // 0x408e90\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_408e20(fd & 0xffffffff, 0, v1, a4); // 0x408f37\n        int64_t v7 = v6 & 0xffffffff; // 0x408f3c\n        if ((int32_t)v6 < 0) {\n            // 0x408e90\n            return v7 & 0xffffffff;\n        }\n        // 0x408f46\n        g46 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x408ebf\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x408eca\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x408e90\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x408ee2\n    close(fd2);\n    // 0x408e90\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408f60",
            "funcStartAddr": "408f60",
            "funcEndAddr": "409179",
            "decompiledFuncCode": "int64_t function_408f60(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x408fc3\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x408f78\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x408f89\n    g54 = v5;\n    int64_t v6; // 0x408f60\n    int64_t v7; // 0x408f60\n    int64_t v8; // 0x408f60\n    int64_t v9; // 0x408f60\n    int64_t v10; // 0x408f60\n    int64_t v11; // 0x408f60\n    int64_t v12; // 0x408f60\n    uint32_t v13; // 0x409080\n    int64_t * v14; // 0x4090b0\n    int64_t v15; // 0x4090b8\n    uint32_t v16; // 0x409100\n    uint32_t v17; // 0x4090d0\n    int64_t * v18; // 0x409060\n    int64_t v19; // 0x409060\n    int64_t * v20; // 0x409070\n    int64_t v21; // 0x409070\n    int64_t * v22; // 0x409048\n    int64_t v23; // 0x409048\n    int64_t * v24; // 0x409030\n    int64_t v25; // 0x409030\n    int64_t * v26; // 0x409150\n    uint32_t v27; // 0x409010\n    int64_t v28; // 0x409150\n    int64_t * v29; // 0x409140\n    int64_t v30; // 0x409140\n    uint32_t v31; // 0x408ff0\n    int64_t * v32; // 0x409168\n    int64_t v33; // 0x409168\n    int64_t v34; // 0x409113\n    uint32_t v35; // 0x408fd0\n    int64_t v36; // 0x4090e7\n    uint32_t v37; // 0x408f98\n    int32_t * v38; // 0x409080\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x409010\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x409017\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x409060\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x409023\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x408fb6\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x408ff0\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x408ff7\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x409070\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x409003\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x408fb6\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x408fd0\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x408fd7\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x409048\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x408fe3\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x408fb6\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x408f98\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x408fa3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x409030\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x408faf\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x408fb6\n            break;\n        }\n        case 11: {\n            // 0x409080\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40908f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x409150\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40909c\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x408fb6\n            break;\n        }\n        case 12: {\n            // 0x4090b0\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x408fb6\n            break;\n        }\n        case 15: {\n            // 0x409100\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x409107\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x409140\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x409113\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x408fb6\n            break;\n        }\n        case 16: {\n            // 0x4090d0\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x4090db\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x409168\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x4090e7\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x408fb6\n            break;\n        }\n        default: {\n            // 0x408fc3\n            return 0xffffffff;\n        }\n    }\n    // 0x408fb6\n    v3++;\n    int64_t v39 = v4 + 32; // 0x408fc1\n    while (v3 < v2) {\n        // 0x408f80\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g54 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x409010\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x409017\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x409060\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x409023\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x408fb6\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x408ff0\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x408ff7\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x409070\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x409003\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x408fb6\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x408fd0\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x408fd7\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x409048\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x408fe3\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x408fb6\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x408f98\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x408fa3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x409030\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x408faf\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x408fb6\n                break;\n            }\n            case 11: {\n                // 0x409080\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40908f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x409150\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40909c\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x408fb6\n                break;\n            }\n            case 12: {\n                // 0x4090b0\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x408fb6\n                break;\n            }\n            case 15: {\n                // 0x409100\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x409107\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x409140\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x409113\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x408fb6\n                break;\n            }\n            case 16: {\n                // 0x4090d0\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x4090db\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x409168\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x4090e7\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x408fb6\n                break;\n            }\n            default: {\n                // 0x408fc3\n                return 0xffffffff;\n            }\n        }\n        // 0x408fb6\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x408fc3\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409180",
            "funcStartAddr": "409180",
            "funcEndAddr": "409e89",
            "decompiledFuncCode": "int64_t function_409180(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x409182\n    int64_t v4 = v1 + 16; // 0x409186\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x4091b9\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x4091ce\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x4091fb\n    int32_t v8 = 0; // 0x409200\n    int64_t v9 = 0; // 0x409200\n    int64_t v10 = v3; // 0x409200\n    int64_t v11 = a1; // 0x409200\n    int64_t v12 = 0; // 0x409200\n    char v13; // 0x409180\n    int64_t v14; // 0x409180\n    int64_t v15; // 0x409180\n    int64_t v16; // 0x409180\n    int64_t v17; // 0x409180\n    int64_t v18; // 0x409180\n    int64_t v19; // 0x409180\n    int64_t v20; // 0x409180\n    int64_t v21; // 0x409180\n    int64_t v22; // 0x409180\n    int64_t v23; // 0x409180\n    int64_t v24; // 0x409180\n    int64_t v25; // 0x409180\n    int64_t v26; // 0x409180\n    int64_t v27; // 0x409180\n    int64_t v28; // 0x409180\n    int64_t v29; // 0x409180\n    int64_t v30; // 0x409180\n    int32_t v31; // 0x409180\n    int64_t v32; // 0x409180\n    int64_t v33; // 0x4091f0\n    int64_t v34; // 0x409240\n    int64_t * v35; // 0x409263\n    int64_t v36; // 0x4092c6\n    if (v7 != 0) {\n        // 0x4091f0\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x409180\n        int64_t v38 = 7; // 0x409180\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x409180\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x4091f0:\n            // 0x4091f0\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x409233\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x409248\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x409284\n                int64_t v43 = v42; // 0x409284\n                int64_t v44 = v43; // 0x40928d\n                int64_t v45 = v33; // 0x40928d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x409620\n                    char v47 = *(char *)v46; // 0x409624\n                    int64_t v48 = v46; // 0x40962d\n                    while (v47 < 58) {\n                        // 0x409620\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40962f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x409cc5\n                        char v52 = *(char *)v51; // 0x409cc5\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x409cc9\n                        int64_t v54 = v33; // 0x409cdd\n                        int64_t v55 = v51; // 0x409cdd\n                        char v56 = v52; // 0x409cdd\n                        int64_t v57 = v53; // 0x409cdd\n                        bool v58 = v52 < 58; // 0x409cdd\n                        bool v59 = v52 < 58; // 0x409cdd\n                        char v60 = v52; // 0x409cdd\n                        int64_t v61 = v51; // 0x409cdd\n                        int64_t v62; // 0x409cf2\n                        int64_t v63; // 0x409cc5\n                        char v64; // 0x409cc5\n                        int64_t v65; // 0x409cc9\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x409948_9;\n                            }\n                            // 0x409cc3\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x409cdf\n                                if (v64 >= 58) {\n                                    goto lab_0x409948_9;\n                                }\n                                // 0x409cc3\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x409c98\n                        while (v58) {\n                            // 0x409c9e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x409948_9;\n                                }\n                                // 0x409cc3\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x409cdf\n                                    if (v64 >= 58) {\n                                        goto lab_0x409948_9;\n                                    }\n                                    // 0x409cc3\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x409c94\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x409d9d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x409948_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x409dae\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x409180\n                v36 = v45;\n                char v70; // 0x409180\n                while (true) {\n                    // 0x4092c6\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x4092e0\n                                *v41 = *v41 | 2;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                            case 43: {\n                                // 0x4092f0\n                                *v41 = *v41 | 4;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                            case 32: {\n                                // 0x409300\n                                *v41 = *v41 | 8;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                            case 35: {\n                                // 0x409310\n                                *v41 = *v41 | 16;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                            case 48: {\n                                // 0x409320\n                                *v41 = *v41 | 32;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x409328\n                                    break;\n                                }\n                                // 0x4092b6\n                                *v41 = *v41 | 64;\n                                // break -> 0x4092c0\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x4092cf\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x4092c0\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x409180\n                int64_t * v72; // 0x409251\n                int64_t * v73; // 0x40925a\n                if (v70 == 42) {\n                    // 0x40939d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x4093bd\n                    int64_t v75 = v74; // 0x4093bd\n                    int64_t v76 = v75 + 0xffffffd0; // 0x4093c1\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x4093c7\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40979d\n                        char v80 = *(char *)v79; // 0x4097a1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40979d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x4097ad\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x4097b1\n                        int64_t v82 = v36; // 0x4097b1\n                        int64_t v83 = 0; // 0x4097b1\n                        if (v80 != 36) {\n                            goto lab_0x4093cd;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x4097e2\n                            int64_t v89 = v85; // 0x4097e2\n                            int64_t v90 = v87; // 0x4097e2\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x4097e7\n                            int64_t v95 = v92 + 1; // 0x4097ea\n                            char v96 = *(char *)v95; // 0x4097ea\n                            int64_t v97 = v96; // 0x4097ea\n                            while (v94 < v91) {\n                                // 0x409801\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x409948_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x4097bb\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x4097c4\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x409801\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x409948_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x4097bb\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x409e3b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x409948_9;\n                            }\n                            // 0x409e49\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x4093dc;\n                        }\n                    } else {\n                        goto lab_0x4093cd;\n                    }\n                } else {\n                    // 0x40932d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x409180\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x409a4b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x409a50\n                        int64_t v102 = v71; // 0x409a59\n                        char * v103 = v100; // 0x409a59\n                        int64_t v104 = v36; // 0x409a59\n                        int64_t v105 = v71; // 0x409a59\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x409a63\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x409a63\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x409a63\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x409a72\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x409a95\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x409338;\n                }\n            } else {\n                goto lab_0x4091f8;\n            }\n        }\n    }\n  lab_0x409202:\n    // 0x409202\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x409224\n    return 0;\n  lab_0x409948_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x409953\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x409965\n    if (v3 != v115) {\n        // 0x409970\n        free((int64_t *)v115);\n    }\n    // 0x409975\n    *__errno_location() = 22;\n    // 0x409224\n    return 0xffffffff;\n  lab_0x409b20_5:;\n    // 0x409b20\n    int64_t v116; // 0x409180\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x409b25\n    int64_t v119; // 0x409180\n    if (v4 == v117) {\n        goto lab_0x409b39_3;\n    } else {\n        // 0x409b27\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x409b39_3;\n    }\n  lab_0x409b39_3:;\n    int64_t v120 = *v5; // 0x409b39\n    int32_t * v121; // 0x409b49\n    if (v3 == v120) {\n        // 0x409b49\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x409b44\n    free((int64_t *)v120);\n    // 0x409b49\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x4091f8:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x4091fb\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x409202\n        goto lab_0x409202;\n    }\n    goto lab_0x4091f0;\n  lab_0x4093cd:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x4093cd\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x409773\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x409948_9;\n        }\n        // 0x40978b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x4093dc;\n  lab_0x409338:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40933b\n    int64_t v147 = v339; // 0x40933b\n    int64_t v145 = v338; // 0x40933b\n    int64_t v143 = v337; // 0x40933b\n    int64_t v186; // 0x409180\n    int64_t v190; // 0x409180\n    int64_t v189; // 0x409180\n    int64_t v188; // 0x409180\n    int64_t v187; // 0x409180\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x409440;\n    } else {\n        goto lab_0x409341;\n    }\n  lab_0x4093dc:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x4093dc\n    int64_t v132 = v128; // 0x4093e3\n    int64_t v133 = v16; // 0x4093e3\n    int64_t v134 = v131; // 0x4093e3\n    int64_t v135; // 0x409180\n    int64_t v136; // 0x409180\n    int64_t v137; // 0x409180\n    int64_t v138; // 0x40968f\n    if (v16 > v127) {\n        goto lab_0x4093ec;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x409685\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x409b20_5;\n        }\n        int64_t size = 32 * v138; // 0x4096ae\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x409c0c\n            if (mem == NULL) {\n                goto lab_0x409b39_3;\n            }\n            // 0x409c2e\n            v135 = (int64_t)mem;\n            goto lab_0x409c39;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x4096cf\n            int64_t v140 = *v6; // 0x4096d4\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x409b20_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x4096cf\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x409c39;\n            } else {\n                goto lab_0x40970d;\n            }\n        }\n    }\n  lab_0x409341:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x409348\n    int64_t v151 = v146; // 0x409348\n    int64_t v152 = v144; // 0x409348\n    uint64_t v153; // 0x409180\n    int64_t v154; // 0x409180\n    int64_t v155; // 0x409387\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40938b\n        int64_t v158; // 0x409180\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x4094f0\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x409383\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x4094f8\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x409380\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x409383\n                    break;\n                }\n            }\n        } else {\n            // 0x409390\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x409383\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x4094f8\n    int64_t v162 = v161 % 256; // 0x409504\n    g55 = v162;\n    int64_t v163 = 17; // 0x409507\n    int64_t v164 = v154; // 0x409507\n    int64_t v165 = v154; // 0x409507\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x409571;\n        }\n        case 28: {\n            goto lab_0x4098c2;\n        }\n        case 30: {\n            // 0x4098ee\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x409519;\n        }\n        case 32: {\n            goto lab_0x4098c2;\n        }\n        case 33: {\n            goto lab_0x4098c2;\n        }\n        case 34: {\n            goto lab_0x4098c2;\n        }\n        case 46: {\n            // 0x4098df\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x409519;\n        }\n        case 51: {\n            goto lab_0x4098fd;\n        }\n        case 60: {\n            goto lab_0x4098c2;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x409819\n            int32_t v167 = v166 - 7; // 0x409819\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40981f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x409519;\n        }\n        case 63: {\n            goto lab_0x409870;\n        }\n        case 64: {\n            goto lab_0x4098c2;\n        }\n        case 65: {\n            goto lab_0x4098c2;\n        }\n        case 66: {\n            goto lab_0x4098c2;\n        }\n        case 68: {\n            goto lab_0x409870;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40982f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x409835\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40983d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40984b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40985f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x409519;\n        }\n        case 74: {\n            goto lab_0x4098fd;\n        }\n        case 75: {\n            goto lab_0x409519;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x409510\n            int32_t v172 = v171 - 7; // 0x409510\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x409516\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x409519;\n        }\n        case 80: {\n            goto lab_0x4098fd;\n        }\n        case 83: {\n            goto lab_0x4098fd;\n        }\n        default: {\n            goto lab_0x409948_9;\n        }\n    }\n  lab_0x4093ec:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x409403\n        int64_t v178 = v176; // 0x409180\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x4093f8\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x4093f8\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x409411\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40941d\n    int32_t v182 = *v181; // 0x40941d\n    if (v182 != 0) {\n        // 0x409a9e\n        if (v182 != 5) {\n            goto lab_0x409948_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x409aa7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x409338;\n    } else {\n        // 0x409427\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40942d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x409341;\n        } else {\n            goto lab_0x409440;\n        }\n    }\n  lab_0x409440:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x409440\n    char v197 = *v196; // 0x409440\n    int64_t * v198; // 0x409268\n    *v198 = v192;\n    int64_t v199; // 0x409180\n    int64_t v200; // 0x409180\n    int64_t v201; // 0x409180\n    int64_t v202; // 0x409180\n    int64_t v203; // 0x409180\n    int64_t * v204; // 0x409271\n    int64_t * v205; // 0x40927a\n    int64_t v206; // 0x409459\n    if (v197 != 42) {\n        char v207 = *v196; // 0x409640\n        int64_t v208 = v193; // 0x409649\n        char * v209; // 0x409180\n        int64_t v210; // 0x409180\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x409650\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x409654\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x409650\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40965e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x409640\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x409671\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x409341;\n    } else {\n        // 0x40944f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40946f\n        int64_t v219 = v218; // 0x40946f\n        int64_t v220 = v219 + 0xffffffd0; // 0x409473\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x409479\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x409d24\n            char v224 = *(char *)v223; // 0x409d28\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x409d24\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x409d34\n            v201 = v223;\n            int64_t v225 = v219; // 0x409d38\n            int64_t v226 = v206; // 0x409d38\n            int64_t v227 = 0; // 0x409d38\n            if (v224 != 36) {\n                goto lab_0x40947f;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x409d69\n                int64_t v233 = v229; // 0x409d69\n                int64_t v234 = v231; // 0x409d69\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x409d6e\n                int64_t v239 = v236 + 1; // 0x409d75\n                char v240 = *(char *)v239; // 0x409d79\n                int64_t v241 = v240; // 0x409d79\n                while (v238 < v235) {\n                    // 0x409d87\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x409948_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x409d42\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x409d4b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x409d87\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x409948_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x409d42\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x409e57\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x409948_9;\n                }\n                // 0x409e65\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40948e;\n            }\n        } else {\n            goto lab_0x40947f;\n        }\n    }\n  lab_0x409571:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x409576\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40957e\n    *a2 = v245;\n    int64_t v246; // 0x409180\n    int64_t v247; // 0x409180\n    int64_t dest_mem; // 0x409180\n    int64_t v248; // 0x409180\n    int64_t v249; // 0x409e73\n    if (v246 > v245) {\n        // 0x40958a\n        goto lab_0x4091f8;\n    } else {\n        if (v246 < 0) {\n            // 0x409e73\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409b20_5;\n        }\n        int64_t v250 = 2 * v246; // 0x4095a6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x409e73\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409b20_5;\n        }\n        int64_t v251 = *v5; // 0x4095b7\n        int64_t size2 = 176 * v246; // 0x4095c9\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x409719\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x409c7c\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x409b49\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x409b27\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x409b39_3;\n            }\n            goto lab_0x409734;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x4095db\n            if (mem4 == NULL) {\n                // 0x409e73\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409b20_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x4095db\n            int64_t v254 = *v5; // 0x4095fd\n            int64_t v255 = *a2; // 0x409601\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x409734;\n            } else {\n                goto lab_0x40960f;\n            }\n        }\n    }\n  lab_0x4098c2:\n    // 0x4098c2\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x4098d7\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x409519;\n  lab_0x4098fd:;\n    uint32_t v335 = (int32_t)v153; // 0x409905\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40990b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x409913\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x409921\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40992e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x409519;\n  lab_0x409870:;\n    uint32_t v336 = (int32_t)v153; // 0x409878\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40987e\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x409886\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x409894\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4098a1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x409519;\n  lab_0x409519:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x409180\n    int64_t v260; // 0x409180\n    int64_t * v261; // 0x40927f\n    if (v259 == -1) {\n        // 0x409a24\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x409948_9;\n        }\n        // 0x409a3c\n        v260 = v148;\n    } else {\n        // 0x409523\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x409528\n    int64_t v264 = v258; // 0x40952f\n    int64_t v265 = v162; // 0x40952f\n    int64_t v266 = v263; // 0x40952f\n    int64_t v267; // 0x409180\n    int64_t v268; // 0x409180\n    int64_t v269; // 0x409180\n    int64_t v270; // 0x409180\n    int64_t v271; // 0x409180\n    if (v142 > v262) {\n        goto lab_0x409535;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x409998\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x4099a2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x409b20_5;\n        }\n        int64_t size3 = 32 * v273; // 0x4099c1\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x4099d4\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x409ab9\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x409b39_3;\n            }\n            goto lab_0x409ad6;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x4099e1\n            if (mem6 == NULL) {\n                // 0x409e73\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409b20_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x4099e1\n            int64_t v276 = v274 & 0xffffffff; // 0x4099e6\n            int64_t v277 = *v6; // 0x409a11\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x409ad6;\n            } else {\n                goto lab_0x409a1b;\n            }\n        }\n    }\n  lab_0x409535:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40954b\n        int64_t v282 = v279; // 0x409180\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x409540\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x409540\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x409559\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x409565\n    int32_t v286 = *v285; // 0x409565\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40998a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x409948_9;\n        }\n    } else {\n        // 0x40956f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x409571;\n  lab_0x409c39:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x409c39\n    int64_t * v290; // 0x409180\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40970d;\n  lab_0x40970d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x4093ec;\n  lab_0x40947f:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40947f\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x409cfa\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x409948_9;\n        }\n        // 0x409d12\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40948e;\n  lab_0x40948e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40948e\n    int64_t v300 = v296; // 0x409495\n    int64_t v301 = v191; // 0x409495\n    int64_t v302 = v299; // 0x409495\n    int64_t v303; // 0x409180\n    int64_t v304; // 0x409180\n    int64_t v305; // 0x409180\n    int64_t v306; // 0x409b72\n    if (v191 > v295) {\n        goto lab_0x40949e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x409b68\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x409b20_5;\n        }\n        int64_t size4 = 32 * v306; // 0x409b8d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x409dbe\n            if (mem7 == NULL) {\n                goto lab_0x409b39_3;\n            }\n            // 0x409de0\n            v304 = (int64_t)mem7;\n            goto lab_0x409deb;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x409bae\n            int64_t v308 = *v6; // 0x409bb3\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x409b20_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x409bae\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x409deb;\n            } else {\n                goto lab_0x409bec;\n            }\n        }\n    }\n  lab_0x409734:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x409180\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40960f;\n  lab_0x40960f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x4091f8;\n  lab_0x409ad6:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x409aec\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x409a1b;\n  lab_0x409a1b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x409535;\n  lab_0x40949e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x4094b3\n        int64_t v324 = v322; // 0x409180\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x4094a8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x4094a8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x4094c1\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x4094ce\n    int32_t v328 = *v327; // 0x4094ce\n    if (v328 != 0) {\n        // 0x409bf5\n        if (v328 != 5) {\n            goto lab_0x409948_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x409bfe\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x4094d8\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x4094e1\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x409341;\n  lab_0x409deb:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x409deb\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x409bec;\n  lab_0x409bec:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40949e;\n}\n"
        },
        {
            "funcName": "function_409e90",
            "funcStartAddr": "409e90",
            "funcEndAddr": "409eed",
            "decompiledFuncCode": "int64_t function_409e90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409e90\n    return function_401750();\n}\n"
        },
        {
            "funcName": "function_409ef0",
            "funcStartAddr": "409ef0",
            "funcEndAddr": "409ef1",
            "decompiledFuncCode": "int64_t function_409ef0(void) {\n    // 0x409ef0\n    int64_t result; // 0x409ef0\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f00",
            "funcStartAddr": "409f00",
            "funcEndAddr": "409f18",
            "decompiledFuncCode": "int64_t function_409f00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409f00\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409f18",
            "funcStartAddr": "409f18",
            "funcEndAddr": "409f38",
            "decompiledFuncCode": "int64_t function_409f18(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x409f22\n    while (*(int64_t *)v1 != -1) {\n        // 0x409f23\n        v1 -= 8;\n    }\n    // 0x409f34\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mkdir.elf"
}