{
    "funcInfo": [
        {
            "funcName": "function_4016d0",
            "funcStartAddr": "4016d0",
            "funcEndAddr": "4016d5",
            "decompiledFuncCode": "int64_t function_4016d0(void) {\n    // 0x4016d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016d5",
            "funcStartAddr": "4016d5",
            "funcEndAddr": "4016da",
            "decompiledFuncCode": "int64_t function_4016d5(void) {\n    // 0x4016d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016da",
            "funcStartAddr": "4016da",
            "funcEndAddr": "4016df",
            "decompiledFuncCode": "int64_t function_4016da(void) {\n    // 0x4016da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016df",
            "funcStartAddr": "4016df",
            "funcEndAddr": "4016e4",
            "decompiledFuncCode": "int64_t function_4016df(void) {\n    // 0x4016df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e4",
            "funcStartAddr": "4016e4",
            "funcEndAddr": "4016e9",
            "decompiledFuncCode": "int64_t function_4016e4(void) {\n    // 0x4016e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e9",
            "funcStartAddr": "4016e9",
            "funcEndAddr": "4016ee",
            "decompiledFuncCode": "int64_t function_4016e9(void) {\n    // 0x4016e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016f0",
            "funcStartAddr": "4016f0",
            "funcEndAddr": "401a7f",
            "decompiledFuncCode": "int64_t function_4016f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * exec_argv[1]; // 0x4019a8\n    int64_t v1 = a1 & 0xffffffff; // 0x4016f8\n    function_401f80(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g18 = 125;\n    function_406150(0x401ee0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    uint32_t v2 = (int32_t)a1; // 0x40174b\n    int64_t v3 = 1; // 0x40174b\n    int64_t v4; // 0x4016f0\n    int64_t v5; // 0x4016f0\n    int64_t v6; // 0x4016f0\n    int64_t v7; // 0x4016f0\n    int64_t v8; // 0x4016f0\n    int64_t v9; // 0x4016f0\n    int64_t v10; // 0x4016f0\n    int64_t v11; // 0x4016f0\n    int64_t v12; // 0x4016f0\n    int64_t v13; // 0x4016f0\n    if (v2 >= 2) {\n        // 0x401754\n        v7 = 1;\n        v10 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\";\n        v4 = 0;\n        while (true) {\n          lab_0x401754:\n            // 0x401754\n            v5 = v4;\n            v8 = v7;\n            v13 = (0x100000000 * v8 >> 29) + a2;\n            int64_t v14 = *(int64_t *)v13; // 0x40175f\n            v12 = v10;\n            if (*(char *)v14 != 45) {\n                goto lab_0x4017a0;\n            } else {\n                int64_t v15 = v14 + 1; // 0x401769\n                unsigned char v16 = *(char *)v15; // 0x401769\n                int64_t v17 = v16; // 0x401769\n                char v18 = *(char *)(((v16 - 43 & -3) == 0 ? 2 : 1) + v14); // 0x401782\n                v12 = v17;\n                if (v18 == 57 || (int32_t)v18 < 57) {\n                    // 0x40178e\n                    v9 = v8 + 1 & 0xffffffff;\n                    v11 = v17;\n                    v6 = v15;\n                    goto lab_0x401795;\n                } else {\n                    goto lab_0x4017a0;\n                }\n            }\n        }\n      lab_0x401a14:\n        // 0x401a14\n        function_401b60(0);\n        // UNREACHABLE\n    }\n    goto lab_0x4018e5;\n  lab_0x4017f3_2:;\n    // 0x4017f3\n    int64_t v33; // 0x4016f0\n    v3 = v33;\n    int64_t v34; // 0x4016f0\n    int64_t v20; // 0x4016f0\n    int64_t v19; // 0x4016f0\n    int64_t v32; // 0x401a01\n    if (v34 == 0) {\n        goto lab_0x4018e5;\n    } else {\n        // 0x4017fc\n        int64_t v35; // bp-48, 0x4016f0\n        int64_t v36 = function_4043f0(v34, 0, 10, &v35, (int64_t *)&g10); // 0x401811\n        if ((int32_t)v36 < 2) {\n            int64_t v37 = v35; // 0x40181f\n            v32 = 0xffffffd9;\n            if (v37 > -40) {\n                int64_t v38 = v37 - 39; // 0x4019f8\n                v32 = v38 == 0 | v38 < 0 != (38 - v37 & v37) < 0 ? v37 : 39;\n                goto lab_0x401834;\n            } else {\n                goto lab_0x401834;\n            }\n        } else {\n            int64_t v39 = function_403ba0(v34); // 0x401a47\n            error(125, (int32_t)\"invalid adjustment %s\" ^ (int32_t)\"invalid adjustment %s\", dcgettext(NULL, \"invalid adjustment %s\", 5));\n            v19 = v39;\n            v20 = 10;\n            goto lab_0x40183c;\n        }\n    }\n  lab_0x4017a0:;\n    int64_t v40 = v13 - 8; // 0x4017a4\n    *(int64_t *)v40 = v12;\n    *(int32_t *)0x60925c = 0;\n    int64_t v41 = function_405890((int32_t)(a1 + 1 - v8), v40, \"+n:\", &g2, 0, a6); // 0x4017ca\n    uint32_t v42 = (int32_t)v41; // 0x4017d9\n    if (v42 == -130) {\n        // break -> 0x401a14\n        goto lab_0x401a14;\n    }\n    int64_t v29 = v41; // 0x4017e4\n    if (v42 <= 0xffffff7e) {\n        goto lab_0x401890;\n    }\n    int64_t v43 = (int32_t)v8 - 1 + g26; // 0x4017d5\n    v33 = v43;\n    v34 = v5;\n    if (v42 == -1) {\n        goto lab_0x4017f3_2;\n    }\n    if (v42 != 110) {\n        // 0x401a3a\n        function_401b60(125);\n        // UNREACHABLE\n    }\n    // 0x4018d9\n    v9 = v43;\n    v11 = v40;\n    v6 = g45;\n    goto lab_0x401795;\n  lab_0x401795:\n    // 0x401795\n    v7 = v9;\n    v10 = v11;\n    v4 = v6;\n    v33 = v9;\n    v34 = v6;\n    if (v9 >= v1) {\n        goto lab_0x4017f3_2;\n    }\n    goto lab_0x401754;\n  lab_0x4018e5:;\n    int32_t * err_num = __errno_location(); // 0x4018e5\n    v19 = v3;\n    v20 = 10;\n    int64_t v21; // 0x4016f0\n    int64_t v22; // 0x4016f0\n    int64_t v23; // 0x4016f0\n    int64_t v24; // 0x4016f0\n    if ((int32_t)v3 != v2) {\n        goto lab_0x40183c;\n    } else {\n        // 0x4018f5\n        *err_num = 0;\n        uint32_t v25 = getpriority(PRIO_PROCESS, 0); // 0x401901\n        if (v25 != -1 || *err_num == 0) {\n            // 0x4019e1\n            __printf_chk(1, \"%d\\n\", (int64_t)v25);\n            // 0x4019d4\n            return 0;\n        }\n        // 0x40191a\n        error(125, *err_num, dcgettext(NULL, \"cannot get niceness\", 5));\n        v22 = &g49;\n        v24 = v3;\n        v23 = v1;\n        v21 = (int64_t)err_num;\n        goto lab_0x40193e;\n    }\n  lab_0x40183c:;\n    int32_t * err_num2 = __errno_location(); // 0x40183c\n    int64_t v26 = (int64_t)err_num2; // 0x40183c\n    *err_num2 = 0;\n    int32_t v27 = getpriority(PRIO_PROCESS, 0); // 0x40184e\n    int64_t v28 = v27; // 0x40184e\n    v22 = v28;\n    v24 = v19;\n    v23 = v26;\n    v21 = v20;\n    if (v27 == -1) {\n        // 0x40185c\n        v22 = v28;\n        v24 = v19;\n        v23 = v26;\n        v21 = v20;\n        if (*err_num2 != 0) {\n            // 0x401866\n            error(125, *err_num2, dcgettext(NULL, \"cannot get niceness\", 5));\n            v29 = &g49;\n          lab_0x401890:\n            // 0x401890\n            if ((int32_t)v29 != -131) {\n              lab_0x401a3a:\n                // 0x401a3a\n                function_401b60(125);\n                // UNREACHABLE\n            }\n            // 0x40189b\n            function_404020((int64_t)g28, \"nice\", \"GNU coreutils\", (int64_t)g17, \"David MacKenzie\", 0);\n            exit(0);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x40193e;\n  lab_0x40193e:;\n    // 0x40193e\n    int32_t * err_num4; // 0x4016f0\n    if (setpriority(PRIO_PROCESS, 0, (int32_t)(v21 + v22)) == 0) {\n        // 0x40193e\n        err_num4 = (int32_t *)v23;\n    } else {\n        char * format = dcgettext(NULL, \"cannot set niceness\", 5); // 0x40195b\n        int32_t * v30 = (int32_t *)v23;\n        int32_t err_num3 = *v30; // 0x401960\n        int32_t status = 125; // 0x4016f0\n        switch (err_num3) {\n            case 13: {\n            }\n            case 1: {\n                // 0x401a0d\n                status = 0;\n                // break -> 0x40197a\n                break;\n            }\n        }\n        // 0x40197a\n        error(status, err_num3, format);\n        err_num4 = v30;\n        if ((*(char *)g30 & 32) != 0) {\n            // 0x4019d4\n            return 125;\n        }\n    }\n    int64_t v31 = (0x100000000 * v24 >> 29) + a2; // 0x40199a\n    int64_t * file = (int64_t *)v31; // 0x4019a1\n    exec_argv[0] = (char *)v31;\n    execvp((char *)*file, exec_argv);\n    error(0, *err_num4, \"%s\", (char *)function_403ba0(*file));\n    // 0x4019d4\n    return *err_num4 == 2 ? 127 : 126;\n  lab_0x401834:\n    // 0x401834\n    v19 = v3;\n    v20 = v32;\n    if ((int32_t)v3 == v2) {\n        // 0x401a1b\n        error(0, (int32_t)\"a command must be given with an adjustment\" ^ (int32_t)\"a command must be given with an adjustment\", dcgettext(NULL, \"a command must be given with an adjustment\", 5));\n        goto lab_0x401a3a;\n    } else {\n        goto lab_0x40183c;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a80",
            "funcEndAddr": "401aab",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a80\n    int64_t v1; // 0x401a80\n    __libc_start_main(0x4016f0, (int32_t)a4, (char **)&v1, (void (*)())0x4060e0, (void (*)())0x406140, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401aab",
            "funcStartAddr": "401aab",
            "funcEndAddr": "401aca",
            "decompiledFuncCode": "int64_t function_401aab(void) {\n    // 0x401aab\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_401aca",
            "funcStartAddr": "401aca",
            "funcEndAddr": "401b01",
            "decompiledFuncCode": "int64_t function_401aca(void) {\n    // 0x401aca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401b01",
            "funcStartAddr": "401b01",
            "funcEndAddr": "401b58",
            "decompiledFuncCode": "int64_t function_401b01(void) {\n    // 0x401b01\n    if (g31 != 0) {\n        // 0x401b57\n        int64_t result; // 0x401b01\n        return result;\n    }\n    int64_t v1 = g32; // 0x401b34\n    int64_t result2; // 0x401b46\n    if (g32 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401b46\n        result2 = function_401aab();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401b36\n        v1++;\n    }\n    // 0x401b2a\n    g32 = v1;\n    // 0x401b46\n    result2 = function_401aab();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401b58",
            "funcStartAddr": "401b58",
            "funcEndAddr": "401b5d",
            "decompiledFuncCode": "int64_t function_401b58(void) {\n    // 0x401b58\n    return function_401aca();\n}\n"
        },
        {
            "funcName": "function_401b60",
            "funcStartAddr": "401b60",
            "funcEndAddr": "401ebd",
            "decompiledFuncCode": "int64_t function_401b60(int32_t status) {\n    // 0x401b60\n    if (status != 0) {\n        // 0x401b7a\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401b9f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401ba6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION] [COMMAND [ARG]...]\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"Run COMMAND with an adjusted niceness, which affects process scheduling.\\nWith no COMMAND, print the current niceness.  Niceness values range from\\n%d (most favorable to the process) to %d (least favorable to the process).\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -n, --adjustment=N   add integer N to the niceness (default 10)\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x401c9f\n    bool v2; // 0x401b60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401d20\n    int64_t v6 = *(int64_t *)v5; // 0x401d24\n    int64_t v7 = 5; // 0x401d2a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"nice\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401d36\n        char v11 = *(char *)v9; // 0x401d36\n        char v12 = v11; // 0x401d36\n        bool v13 = false; // 0x401d36\n        while (v10 == v11) {\n            // 0x401d2c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401d36\n            int64_t v15 = v8 + v3; // 0x401d36\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401d42\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x401d42\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401e54;\n        } else {\n            // 0x401e3e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401da4;\n            } else {\n                goto lab_0x401e54;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401da4;\n        } else {\n            // 0x401d8a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401da4;\n            } else {\n                goto lab_0x401da4;\n            }\n        }\n    }\n  lab_0x401e54:\n    // 0x401e54\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401de4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b9f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401da4:\n    // 0x401da4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401de4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b9f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ec0",
            "funcStartAddr": "401ec0",
            "funcEndAddr": "401ec8",
            "decompiledFuncCode": "int64_t function_401ec0(int64_t a1) {\n    // 0x401ec0\n    g34 = a1;\n    int64_t result; // 0x401ec0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "401ed8",
            "decompiledFuncCode": "int64_t function_401ed0(int64_t a1) {\n    // 0x401ed0\n    g33 = a1;\n    int64_t result; // 0x401ed0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "401f7e",
            "decompiledFuncCode": "int64_t function_401ee0(void) {\n    // 0x401ee0\n    int32_t * err_num; // 0x401ef6\n    if ((int32_t)function_405990((int64_t)g28) == 0) {\n        goto lab_0x401f0c;\n    } else {\n        // 0x401ef6\n        err_num = __errno_location();\n        if (g33 == 0) {\n            goto lab_0x401f23;\n        } else {\n            // 0x401f07\n            if (*err_num != 32) {\n                goto lab_0x401f23;\n            } else {\n                goto lab_0x401f0c;\n            }\n        }\n    }\n  lab_0x401f0c:;\n    int64_t result = function_405990((int64_t)g30); // 0x401f13\n    if ((int32_t)result == 0) {\n        // 0x401f1c\n        return result;\n    }\n    // 0x401f5e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x401f23:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401f2f\n    if (g34 == 0) {\n        // 0x401f69\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401f43\n        error(0, *err_num, \"%s: %s\", (char *)function_4039f0((int64_t)g34), v1);\n    }\n    // 0x401f5e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f80",
            "funcStartAddr": "401f80",
            "funcEndAddr": "402019",
            "decompiledFuncCode": "int64_t function_401f80(int64_t str) {\n    // 0x401f80\n    if (str == 0) {\n        // 0x401ff9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401f8e\n    int64_t result = (int64_t)found_char_pos; // 0x401f8e\n    if (found_char_pos == NULL) {\n        // 0x401fe9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401f98\n    if (v1 - str < 7) {\n        // 0x401fe9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x401fa8\n    bool v2; // 0x401f80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401f80\n    int64_t v5 = result - 6; // 0x401f80\n    int64_t v6 = 7; // 0x401fb6\n    unsigned char v7 = *(char *)v5; // 0x401fb6\n    char v8 = *(char *)v4; // 0x401fb6\n    char v9 = v8; // 0x401fb6\n    bool v10 = false; // 0x401fb6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401fc0\n    int64_t v13 = v1; // 0x401fc0\n    int64_t v14 = 3; // 0x401fc0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401fe9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401fd2\n    char v16 = *(char *)v12; // 0x401fd2\n    char v17 = v16; // 0x401fd2\n    bool v18 = false; // 0x401fd2\n    while (v15 == v16) {\n        // 0x401fc2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401fdc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401fde\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x401fe9\n    g35 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402020",
            "funcStartAddr": "402020",
            "funcEndAddr": "402112",
            "decompiledFuncCode": "int64_t function_402020(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402034\n    int64_t result = (int64_t)v1; // 0x402034\n    if (result != a1) {\n        // 0x402041\n        return result;\n    }\n    int64_t v2 = function_405a50(); // 0x402050\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402106\n    if (v3 == 85) {\n        // 0x402060\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4020f8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40208e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40209b\n        // 0x402041\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4020f8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4020dd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4020ea\n    // 0x402041\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402120",
            "funcStartAddr": "402120",
            "funcEndAddr": "402177",
            "decompiledFuncCode": "int64_t function_402120(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402120\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402168\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402177",
            "funcStartAddr": "402177",
            "funcEndAddr": "403341",
            "decompiledFuncCode": "int64_t function_402177(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4021c1\n    int64_t v3 = 0; // 0x4021c1\n    int64_t v4; // 0x402177\n    int64_t v5; // 0x402177\n    int64_t v6; // 0x402177\n    int64_t v7; // 0x402177\n    int64_t v8; // 0x402177\n    int64_t v9; // 0x402177\n    int64_t v10; // 0x402177\n    int64_t v11; // 0x402177\n    int64_t v12; // 0x402177\n    int64_t v13; // 0x402177\n    int64_t v14; // 0x402177\n    int64_t v15; // 0x402177\n    int64_t v16; // 0x402177\n    int64_t v17; // 0x402177\n    int64_t v18; // 0x402177\n    int64_t result; // 0x402177\n    int64_t v19; // 0x402177\n    int32_t wc; // bp+132, 0x402177\n    int64_t ps; // bp+136, 0x402177\n    char v20; // 0x402730\n    int64_t v21; // 0x402730\n    int64_t v22; // 0x402ad8\n    int64_t v23; // 0x402177\n    int64_t v24; // 0x402af7\n    int32_t v25; // 0x402177\n    while (true) {\n      lab_0x4021c8_2:\n        // 0x4021c8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402177\n        int64_t v27; // 0x4021fc\n        while (true) {\n          lab_0x4021c8:\n            // 0x4021c8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4021d3\n            if (v15 == -1) {\n                // 0x4021d5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4021e3\n            if (v28) {\n                // break (via goto) -> 0x402948\n                goto lab_0x402948;\n            }\n            // 0x4021ec\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4027db\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402321;\n                    }\n                    // 0x402bfd\n                    v26 = v5 + 1;\n                    goto lab_0x4021c8;\n                }\n                case 7: {\n                    goto lab_0x402321;\n                }\n                case 8: {\n                    goto lab_0x402321;\n                }\n                case 9: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402321;\n                }\n                case 12: {\n                    goto lab_0x402321;\n                }\n                case 13: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4022ed;\n                }\n                case 36: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402321;\n                }\n                case 38: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402321;\n                }\n                case 44: {\n                    goto lab_0x402321;\n                }\n                case 45: {\n                    goto lab_0x402321;\n                }\n                case 46: {\n                    goto lab_0x402321;\n                }\n                case 47: {\n                    goto lab_0x402321;\n                }\n                case 48: {\n                    goto lab_0x402321;\n                }\n                case 49: {\n                    goto lab_0x402321;\n                }\n                case 50: {\n                    goto lab_0x402321;\n                }\n                case 51: {\n                    goto lab_0x402321;\n                }\n                case 52: {\n                    goto lab_0x402321;\n                }\n                case 53: {\n                    goto lab_0x402321;\n                }\n                case 54: {\n                    goto lab_0x402321;\n                }\n                case 55: {\n                    goto lab_0x402321;\n                }\n                case 56: {\n                    goto lab_0x402321;\n                }\n                case 57: {\n                    goto lab_0x402321;\n                }\n                case 58: {\n                    goto lab_0x402321;\n                }\n                case 59: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402321;\n                }\n                case 66: {\n                    goto lab_0x402321;\n                }\n                case 67: {\n                    goto lab_0x402321;\n                }\n                case 68: {\n                    goto lab_0x402321;\n                }\n                case 69: {\n                    goto lab_0x402321;\n                }\n                case 70: {\n                    goto lab_0x402321;\n                }\n                case 71: {\n                    goto lab_0x402321;\n                }\n                case 72: {\n                    goto lab_0x402321;\n                }\n                case 73: {\n                    goto lab_0x402321;\n                }\n                case 74: {\n                    goto lab_0x402321;\n                }\n                case 75: {\n                    goto lab_0x402321;\n                }\n                case 76: {\n                    goto lab_0x402321;\n                }\n                case 77: {\n                    goto lab_0x402321;\n                }\n                case 78: {\n                    goto lab_0x402321;\n                }\n                case 79: {\n                    goto lab_0x402321;\n                }\n                case 80: {\n                    goto lab_0x402321;\n                }\n                case 81: {\n                    goto lab_0x402321;\n                }\n                case 82: {\n                    goto lab_0x402321;\n                }\n                case 83: {\n                    goto lab_0x402321;\n                }\n                case 84: {\n                    goto lab_0x402321;\n                }\n                case 85: {\n                    goto lab_0x402321;\n                }\n                case 86: {\n                    goto lab_0x402321;\n                }\n                case 87: {\n                    goto lab_0x402321;\n                }\n                case 88: {\n                    goto lab_0x402321;\n                }\n                case 89: {\n                    goto lab_0x402321;\n                }\n                case 90: {\n                    goto lab_0x402321;\n                }\n                case 91: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402321;\n                }\n                case 94: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402321;\n                }\n                case 96: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402321;\n                }\n                case 98: {\n                    goto lab_0x402321;\n                }\n                case 99: {\n                    goto lab_0x402321;\n                }\n                case 100: {\n                    goto lab_0x402321;\n                }\n                case 101: {\n                    goto lab_0x402321;\n                }\n                case 102: {\n                    goto lab_0x402321;\n                }\n                case 103: {\n                    goto lab_0x402321;\n                }\n                case 104: {\n                    goto lab_0x402321;\n                }\n                case 105: {\n                    goto lab_0x402321;\n                }\n                case 106: {\n                    goto lab_0x402321;\n                }\n                case 107: {\n                    goto lab_0x402321;\n                }\n                case 108: {\n                    goto lab_0x402321;\n                }\n                case 109: {\n                    goto lab_0x402321;\n                }\n                case 110: {\n                    goto lab_0x402321;\n                }\n                case 111: {\n                    goto lab_0x402321;\n                }\n                case 112: {\n                    goto lab_0x402321;\n                }\n                case 113: {\n                    goto lab_0x402321;\n                }\n                case 114: {\n                    goto lab_0x402321;\n                }\n                case 115: {\n                    goto lab_0x402321;\n                }\n                case 116: {\n                    goto lab_0x402321;\n                }\n                case 117: {\n                    goto lab_0x402321;\n                }\n                case 118: {\n                    goto lab_0x402321;\n                }\n                case 119: {\n                    goto lab_0x402321;\n                }\n                case 120: {\n                    goto lab_0x402321;\n                }\n                case 121: {\n                    goto lab_0x402321;\n                }\n                case 122: {\n                    goto lab_0x402321;\n                }\n                case 123: {\n                    goto lab_0x4022c5;\n                }\n                case 124: {\n                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4022c5;\n                }\n                case 126: {\n                    goto lab_0x4022ed;\n                }\n                default: {\n                    goto lab_0x4026c5;\n                }\n            }\n        }\n      lab_0x4026c5:\n        if (v23 != 1) {\n            // 0x402a30\n            ps = 0;\n            int64_t len = v15; // 0x402a40\n            if (v15 == -1) {\n                // 0x402a42\n                len = strlen((char *)str);\n            }\n            // 0x402a6e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402acf:\n                // 0x402acf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402ad4\n                int64_t v30 = v29 + str;\n                v24 = function_405910(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40304a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40304a_2;\n                    }\n                    case -2: {\n                        // 0x40312d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403167\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40316a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403177\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403170\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40304a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40304a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402aa0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402b4c\n                        char v34 = *(char *)v33; // 0x402b5d\n                        unsigned char v35; // 0x402177\n                        if (v34 < 125) {\n                            // 0x402b68\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402b7f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402b50\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402b5d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402b68\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402b7f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402b50\n                            v33++;\n                        }\n                        goto lab_0x402aa0;\n                    }\n                }\n            }\n            goto lab_0x40304a_2;\n        } else {\n            // 0x402714\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402321;\n        }\n    }\n  lab_0x402948:\n    // 0x402948\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40324a\n        if (v8 > result) {\n            // 0x403253\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402577\n        return result;\n    }\n    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402321:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402330\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40253a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402431\n    char v40 = v20; // 0x402431\n    int64_t v41 = v38; // 0x402431\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402431\n    int64_t v43 = v36; // 0x402431\n    goto lab_0x4023ad;\n  lab_0x40253a_2:\n    // 0x402577\n    return function_402120(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40304a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402321;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402c1e\n        int64_t v50 = v5 + 1; // 0x402d01\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402d08\n        char v52 = v20; // 0x402d08\n        int64_t v53 = result; // 0x402d08\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402cd1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402cd5\n            int64_t v56 = v54 + 1; // 0x402cda\n            int64_t v57 = v51 + 1; // 0x402d01\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402ccc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402cd1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402cd5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4023ad;\n    }\n  lab_0x402aa0:\n    // 0x402aa0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402abf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402ac2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40304a\n        goto lab_0x40304a_2;\n    }\n    goto lab_0x402acf;\n  lab_0x4022ed:\n    // 0x4022ed\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40253a_2;\n    }\n    goto lab_0x402321;\n  lab_0x4022c5:;\n    bool v60 = v15 == 1; // 0x4022d0\n    if (v15 == -1) {\n        // 0x4022d2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4022de\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402321;\n    } else {\n        goto lab_0x4022ed;\n    }\n  lab_0x4023ad:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4023b2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4023b6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4021c8_2;\n}\n"
        },
        {
            "funcName": "function_403350",
            "funcStartAddr": "403350",
            "funcEndAddr": "4034ee",
            "decompiledFuncCode": "int64_t function_403350(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403352\n    int32_t * v3 = __errno_location(); // 0x40336c\n    int64_t v4 = (int64_t)g20; // 0x403371\n    int32_t v5 = *v3; // 0x40337b\n    int64_t v6 = v4; // 0x403391\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4034e9\n            function_4043b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4033a0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4033a7\n        int64_t v9; // 0x403350\n        if (g20 == &g21) {\n            int64_t v10 = function_4041c0(0, v8); // 0x4034ca\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x4034cf\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4041c0(v4, v8); // 0x4033bb\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x4033ca\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x4033ca\n        int32_t v14 = v7; // 0x4033d1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403401\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40340b\n    int64_t * v17 = (int64_t *)v15; // 0x40340e\n    uint64_t v18 = *v17; // 0x40340e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403411\n    int64_t result = *v19; // 0x403411\n    int64_t v20; // 0x403350\n    uint64_t v21 = function_402120(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403434\n    if (v18 > v21) {\n        // 0x4034ab\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403447\n    *v17 = v22;\n    if (result != (int64_t)&g36) {\n        // 0x403457\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404160(v22); // 0x403471\n    *v19 = result2;\n    int64_t v23; // 0x403350\n    function_402120(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4034ab\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "403524",
            "decompiledFuncCode": "int64_t function_4034f0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4034f7\n    int64_t result = function_404360(a1 == 0 ? (int64_t)&g37 : a1, 56); // 0x403516\n    return result;\n}\n"
        },
        {
            "funcName": "function_403530",
            "funcStartAddr": "403530",
            "funcEndAddr": "40353f",
            "decompiledFuncCode": "int64_t function_403530(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g37 : a1); // 0x40353c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403540",
            "funcStartAddr": "403540",
            "funcEndAddr": "40354f",
            "decompiledFuncCode": "int64_t function_403540(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403548\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403550",
            "funcStartAddr": "403550",
            "funcEndAddr": "403583",
            "decompiledFuncCode": "int64_t function_403550(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 + 8 : a1 + 8; // 0x403569\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40356e\n    uint32_t v3 = *v2; // 0x40356e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403572\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403590",
            "funcStartAddr": "403590",
            "funcEndAddr": "4035a3",
            "decompiledFuncCode": "int64_t function_403590(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g37 + 4 : a1 + 4); // 0x40359c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4035b0",
            "funcStartAddr": "4035b0",
            "funcEndAddr": "4035db",
            "decompiledFuncCode": "int64_t function_4035b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x4035b8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4035d5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4035cc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_4035e0",
            "funcStartAddr": "4035e0",
            "funcEndAddr": "403652",
            "decompiledFuncCode": "int64_t function_4035e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g37 : a5; // 0x403602\n    int32_t * v2 = __errno_location(); // 0x40360b\n    uint32_t v3 = *(int32_t *)v1; // 0x40362b\n    int64_t result = function_402120(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40363a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403660",
            "funcStartAddr": "403660",
            "funcEndAddr": "403741",
            "decompiledFuncCode": "int64_t function_403660(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g37 : a4; // 0x403682\n    int32_t * v2 = __errno_location(); // 0x403688\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4036a7\n    int32_t * v4 = (int32_t *)v1; // 0x4036aa\n    int64_t v5 = function_402120(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4036c5\n    int64_t v6 = v5 + 1; // 0x4036ca\n    int64_t result = function_404160(v6); // 0x4036df\n    function_402120(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403724\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40372d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403750",
            "funcStartAddr": "403750",
            "funcEndAddr": "40375a",
            "decompiledFuncCode": "int64_t function_403750(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403750\n    return function_403660(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "4037f5",
            "decompiledFuncCode": "int64_t function_403760(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403760\n    int64_t v2 = v1; // 0x403760\n    int64_t v3 = v2; // 0x403774\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x403793\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403790\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x4037ad\n    if (g21 != 0x6092c0) {\n        // 0x4037af\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g36;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x4037d1\n    if (g20 != &g21) {\n        // 0x4037d3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g49;\n    }\n    // 0x4037e6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403800",
            "funcStartAddr": "403800",
            "funcEndAddr": "403811",
            "decompiledFuncCode": "int64_t function_403800(void) {\n    // 0x403800\n    int64_t v1; // 0x403800\n    return function_403350(v1, v1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403820",
            "funcStartAddr": "403820",
            "funcEndAddr": "40382a",
            "decompiledFuncCode": "int64_t function_403820(void) {\n    // 0x403820\n    int64_t v1; // 0x403820\n    return function_403350(v1, v1, v1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403830",
            "funcStartAddr": "403830",
            "funcEndAddr": "403846",
            "decompiledFuncCode": "int64_t function_403830(int64_t a1) {\n    // 0x403830\n    return function_403350(0, a1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403850",
            "funcStartAddr": "403850",
            "funcEndAddr": "403862",
            "decompiledFuncCode": "int64_t function_403850(int64_t a1, int64_t a2) {\n    // 0x403850\n    return function_403350(0, a1, a2, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "4038d8",
            "decompiledFuncCode": "int64_t function_403870(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403880\n    return function_403350((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4038e0",
            "funcStartAddr": "4038e0",
            "funcEndAddr": "403944",
            "decompiledFuncCode": "int64_t function_4038e0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4038f0\n    return function_403350((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403950",
            "funcStartAddr": "403950",
            "funcEndAddr": "40395c",
            "decompiledFuncCode": "int64_t function_403950(int64_t a1, int64_t a2) {\n    // 0x403950\n    return function_403870(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "40396f",
            "decompiledFuncCode": "int64_t function_403960(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403960\n    return function_4038e0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "4039e0",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x40397d\n    int128_t v2 = __asm_movdqa(g38); // 0x403985\n    int128_t v3 = __asm_movdqa(g39); // 0x40398d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4039a2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4039b8\n    uint32_t v6 = *v5; // 0x4039b8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4039bd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403350(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4039e0",
            "funcStartAddr": "4039e0",
            "funcEndAddr": "4039ed",
            "decompiledFuncCode": "int64_t function_4039e0(int64_t a1, int64_t a2) {\n    // 0x4039e0\n    return function_403970(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "403a01",
            "decompiledFuncCode": "int64_t function_4039f0(int64_t a1) {\n    // 0x4039f0\n    return function_403970(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403a1a",
            "decompiledFuncCode": "int64_t function_403a10(void) {\n    // 0x403a10\n    int64_t v1; // 0x403a10\n    return function_403970(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403a8e",
            "decompiledFuncCode": "int64_t function_403a20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403a3a\n    return function_403350(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403a90",
            "funcStartAddr": "403a90",
            "funcEndAddr": "403afc",
            "decompiledFuncCode": "int64_t function_403a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x403a97\n    int128_t v2 = __asm_movdqa(g38); // 0x403a9f\n    int128_t v3 = __asm_movdqa(g39); // 0x403aa7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403ac9\n    if (a2 == 0 || a3 == 0) {\n        // 0x403af7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403ada\n    return function_403350(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b09",
            "decompiledFuncCode": "int64_t function_403b00(void) {\n    // 0x403b00\n    int64_t v1; // 0x403b00\n    return function_403a90(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403b27",
            "decompiledFuncCode": "int64_t function_403b10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403b10\n    return function_403a90(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403b30",
            "funcStartAddr": "403b30",
            "funcEndAddr": "403b43",
            "decompiledFuncCode": "int64_t function_403b30(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403b30\n    return function_403a90(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403b50",
            "funcStartAddr": "403b50",
            "funcEndAddr": "403b5a",
            "decompiledFuncCode": "int64_t function_403b50(void) {\n    // 0x403b50\n    int64_t v1; // 0x403b50\n    return function_403350(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_403b60",
            "funcStartAddr": "403b60",
            "funcEndAddr": "403b72",
            "decompiledFuncCode": "int64_t function_403b60(int64_t a1, int64_t a2) {\n    // 0x403b60\n    return function_403350(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_403b80",
            "funcStartAddr": "403b80",
            "funcEndAddr": "403b91",
            "decompiledFuncCode": "int64_t function_403b80(void) {\n    // 0x403b80\n    int64_t v1; // 0x403b80\n    return function_403350(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403ba0",
            "funcStartAddr": "403ba0",
            "funcEndAddr": "403bb6",
            "decompiledFuncCode": "int64_t function_403ba0(int64_t a1) {\n    // 0x403ba0\n    return function_403350(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403bc0",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403f9d",
            "decompiledFuncCode": "int64_t function_403bc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403c58\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403bdc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403bf6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403c3b\n    if (a6 < 10) {\n        // 0x403c4a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403d42\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "403fc0",
            "decompiledFuncCode": "int64_t function_403fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403fa0\n    if (a5 == 0) {\n        // 0x403fbb\n        return function_403bc0(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x403fa7\n    v1++;\n    int64_t v2 = v1; // 0x403fb9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403fb0\n        v1++;\n        v2 = v1;\n    }\n    // 0x403fbb\n    return function_403bc0(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "404020",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403fc0\n    int64_t v3 = &v2; // 0x403fc0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x403ff3\n    int64_t v6; // 0x403fdd\n    int64_t * v7; // 0x403ffb\n    int64_t v8; // 0x403ffb\n    int64_t v9; // 0x404007\n    if (v5 < 48) {\n        // 0x403fd0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404013\n            break;\n        }\n    } else {\n        // 0x403ffb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404013\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x403ff1\n    while (v4 != 9) {\n        // 0x403fe9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403fd0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404013\n                break;\n            }\n        } else {\n            // 0x403ffb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404013\n                break;\n            }\n        }\n        // 0x403fe9\n        v10 = 10;\n    }\n    // 0x404013\n    return function_403bc0(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404020",
            "funcStartAddr": "404020",
            "funcEndAddr": "4040dc",
            "decompiledFuncCode": "int64_t function_404020(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404020\n    int64_t v1; // bp-168, 0x404020\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404020\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404020\n    int64_t v8; // 0x404020\n    int64_t v9; // bp-56, 0x404020\n    int64_t v10; // 0x404085\n    int64_t v11; // 0x4040a9\n    if ((int32_t)v6 < 48) {\n        // 0x404070\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4040c0\n            break;\n        }\n    } else {\n        // 0x4040a2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4040c0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40409a\n    int64_t v13 = 10; // 0x40409a\n    while (v5 != 9) {\n        // 0x40409c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404070\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4040c0\n                break;\n            }\n        } else {\n            // 0x4040a2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4040c0\n                break;\n            }\n        }\n        // 0x404092\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4040c0\n    int64_t v14; // bp-136, 0x404020\n    int64_t result = function_403bc0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x4040cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "404154",
            "decompiledFuncCode": "int64_t function_4040e0(int64_t a1) {\n    // 0x4040e0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404143\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "40417a",
            "decompiledFuncCode": "int64_t function_404160(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404164\n    if (size != 0 != (mem == NULL)) {\n        // 0x404173\n        return (int64_t)mem;\n    }\n    // 0x404175\n    function_4043b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404180",
            "funcStartAddr": "404180",
            "funcEndAddr": "4041a1",
            "decompiledFuncCode": "int64_t function_404180(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404183\n    int64_t v2 = v1; // 0x404183\n    if (v2 < 0) {\n        // 0x40419b\n        function_4043b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404199\n        return function_404160(v2);\n    }\n    // 0x40419b\n    function_4043b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "4041b2",
            "decompiledFuncCode": "int64_t function_4041b0(void) {\n    // 0x4041b0\n    int64_t v1; // 0x4041b0\n    return function_404160(v1);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041f6",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4041e8\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4041d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4041e0\n        return (int64_t)mem;\n    }\n    // 0x4041f1\n    function_4043b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404200",
            "funcStartAddr": "404200",
            "funcEndAddr": "404221",
            "decompiledFuncCode": "int64_t function_404200(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404203\n    int64_t v2 = v1; // 0x404203\n    if (v2 < 0) {\n        // 0x40421b\n        function_4043b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404219\n        return function_4041c0(a1, v2);\n    }\n    // 0x40421b\n    function_4043b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "4042b6",
            "decompiledFuncCode": "int64_t function_404230(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40428b\n            function_4043b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4041c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404273\n    if (a2 == 0) {\n        // 0x404298\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404278\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40428b\n        function_4043b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40425a\n    *(int64_t *)a2 = v2;\n    return function_4041c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "404310",
            "decompiledFuncCode": "int64_t function_4042c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4042c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40430a\n            function_4043b0(a1);\n            // UNREACHABLE\n        }\n        // 0x4042e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4041c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4042f5\n        *(int64_t *)a2 = 128;\n        return function_4041c0(0, 128);\n    }\n    // 0x404308\n    if (a2 < 0) {\n        // 0x40430a\n        function_4043b0(a1);\n        // UNREACHABLE\n    }\n    // 0x4042e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4041c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "404327",
            "decompiledFuncCode": "int64_t function_404310(int64_t a1, int64_t a2) {\n    // 0x404310\n    return (int64_t)memset((int64_t *)function_404160(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "40435e",
            "decompiledFuncCode": "int64_t function_404330(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404337\n    if ((int64_t)v1 < 0) {\n        // 0x404359\n        function_4043b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404359\n        function_4043b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40434a\n    if (mem != NULL) {\n        // 0x404354\n        return (int64_t)mem;\n    }\n    // 0x404359\n    function_4043b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "404388",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404160(a2); // 0x40436f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404390",
            "funcStartAddr": "404390",
            "funcEndAddr": "4043a3",
            "decompiledFuncCode": "int64_t function_404390(int64_t str) {\n    // 0x404390\n    return function_404360(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4043b0",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "4043e1",
            "decompiledFuncCode": "int64_t function_4043b0(int64_t a1) {\n    // 0x4043b0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404c1f",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2) {\n    uint32_t base = (int32_t)a3; // 0x404402\n    if (base >= 37) {\n        // 0x404bbc\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtol\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    // 0x40440b\n    int64_t v1; // bp-64, 0x4043f0\n    int64_t endptr = a2 == 0 ? (int64_t)&v1 : (int64_t)a2; // 0x404418\n    int32_t * v2 = __errno_location(); // 0x404422\n    *v2 = 0;\n    char * str = (char *)a1;\n    int32_t str_as_l = strtol(str, (char **)endptr, base); // 0x404438\n    int64_t * v3 = (int64_t *)endptr; // 0x40443d\n    int64_t v4 = *v3; // 0x40443d\n    int64_t v5; // 0x4043f0\n    int64_t v6; // 0x4043f0\n    int64_t v7; // 0x4043f0\n    char v8; // 0x4043f0\n    int64_t v9; // 0x4043f0\n    int64_t v10; // 0x4043f0\n    int64_t v11; // 0x4043f0\n    if (v4 == a1) {\n        // 0x404498\n        if (str2 == NULL) {\n            // 0x40446c\n            return 4;\n        }\n        char c = *str; // 0x4044a1\n        if (c == 0) {\n            // 0x40446c\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x4044bf\n        v10 = 1;\n        v6 = 0;\n        v8 = c;\n        if (found_char_pos == NULL) {\n            // 0x40446c\n            return 4;\n        }\n        goto lab_0x4044cd;\n    } else {\n        int32_t v12 = *v2; // 0x404448\n        int64_t v13 = 0; // 0x40444e\n        if (v12 != 0) {\n            // 0x404480\n            v13 = 1;\n            if (v12 != 34) {\n                // 0x40446c\n                return 4;\n            }\n        }\n        int64_t v14 = str_as_l; // 0x404438\n        v9 = v14;\n        v5 = v13;\n        if (str2 == NULL) {\n            goto lab_0x404465;\n        } else {\n            char c2 = *(char *)v4; // 0x404458\n            v9 = v14;\n            v5 = v13;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x404567\n                v10 = v14;\n                v6 = v13;\n                v8 = c2;\n                v11 = v14;\n                v7 = v13;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4044cd;\n                } else {\n                    goto lab_0x404575;\n                }\n            } else {\n                goto lab_0x404465;\n            }\n        }\n    }\n  lab_0x4044cd:;\n    int64_t v15 = v6;\n    int64_t v16 = v10;\n    unsigned char v17 = v8 - 69;\n    int64_t v18 = 1024; // 0x4044d4\n    int64_t v19 = 1; // 0x4044d4\n    int64_t v20; // 0x4043f0\n    int64_t v21; // 0x4043f0\n    int64_t v22; // 0x4043f0\n    int64_t v23; // 0x4043f0\n    int64_t v24; // 0x4043f0\n    int64_t v25; // 0x4043f0\n    int64_t v26; // 0x4043f0\n    int64_t v27; // 0x4043f0\n    int64_t v28; // 0x4043f0\n    int64_t v29; // 0x4043f0\n    int64_t v30; // 0x4043f0\n    int64_t v31; // 0x4043f0\n    int64_t v32; // 0x4043f0\n    int64_t v33; // 0x4043f0\n    int64_t v34; // 0x4043f0\n    int64_t v35; // 0x4043f0\n    int64_t v36; // 0x4043f0\n    int64_t v37; // 0x4043f0\n    int64_t v38; // 0x4043f0\n    if (v17 < 48) {\n        // 0x404500\n        v18 = 1024;\n        v19 = 1;\n        if ((1 << (int64_t)((v8 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4044e0;\n        } else {\n            // 0x404514\n            v18 = 1024;\n            v19 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x4044e0;\n            } else {\n                // 0x404526\n                v18 = 1000;\n                v19 = 2;\n                switch (*(char *)(v4 + 1)) {\n                    case 68: {\n                        goto lab_0x4044e0;\n                    }\n                    case 105: {\n                        char v39 = *(char *)(v4 + 2); // 0x404b02\n                        v18 = 1024;\n                        v19 = (v39 == 66 ? 2 : 1) + (int64_t)(v39 == 66);\n                        goto lab_0x4044e0;\n                    }\n                    default: {\n                        // 0x40453b\n                        g47 = v17;\n                        v18 = 1000;\n                        v19 = 2;\n                        v11 = v16;\n                        v7 = v15;\n                        v21 = v16;\n                        v28 = 1;\n                        v20 = v15;\n                        v22 = 1024;\n                        v29 = 1;\n                        v33 = -0x20000000000000;\n                        v34 = 1;\n                        v23 = 1024;\n                        v30 = 1;\n                        v36 = -0x20000000000000;\n                        v24 = 1024;\n                        v31 = 1;\n                        v38 = -0x20000000000000;\n                        v25 = 1024;\n                        v32 = 1;\n                        v37 = -0x20000000000000;\n                        v26 = 1024;\n                        v27 = 1;\n                        v35 = -0x20000000000000;\n                        switch (v8) {\n                            case 69: {\n                                goto lab_0x4047c8;\n                            }\n                            case 70: {\n                                goto lab_0x404575;\n                            }\n                            case 71: {\n                                goto lab_0x404830;\n                            }\n                            case 72: {\n                                goto lab_0x404575;\n                            }\n                            case 73: {\n                                goto lab_0x404575;\n                            }\n                            case 74: {\n                                goto lab_0x404575;\n                            }\n                            case 75: {\n                                goto lab_0x404615;\n                            }\n                            case 76: {\n                                goto lab_0x404575;\n                            }\n                            case 77: {\n                                goto lab_0x404658;\n                            }\n                            case 78: {\n                                goto lab_0x404575;\n                            }\n                            case 79: {\n                                goto lab_0x404575;\n                            }\n                            case 80: {\n                                goto lab_0x4046f8;\n                            }\n                            case 81: {\n                                goto lab_0x404575;\n                            }\n                            case 82: {\n                                goto lab_0x404575;\n                            }\n                            case 83: {\n                                goto lab_0x404575;\n                            }\n                            case 84: {\n                                goto lab_0x404760;\n                            }\n                            case 85: {\n                                goto lab_0x404575;\n                            }\n                            case 86: {\n                                goto lab_0x404575;\n                            }\n                            case 87: {\n                                goto lab_0x404575;\n                            }\n                            case 88: {\n                                goto lab_0x404575;\n                            }\n                            case 89: {\n                                goto lab_0x404898;\n                            }\n                            case 90: {\n                                goto lab_0x404900;\n                            }\n                            case 91: {\n                                goto lab_0x404575;\n                            }\n                            case 92: {\n                                goto lab_0x404575;\n                            }\n                            case 93: {\n                                goto lab_0x404575;\n                            }\n                            case 94: {\n                                goto lab_0x404575;\n                            }\n                            case 95: {\n                                goto lab_0x404575;\n                            }\n                            case 96: {\n                                goto lab_0x404575;\n                            }\n                            case 97: {\n                                goto lab_0x404575;\n                            }\n                            case 98: {\n                                goto lab_0x4046c5;\n                            }\n                            case 99: {\n                                goto lab_0x4045b8;\n                            }\n                            case 100: {\n                                goto lab_0x404575;\n                            }\n                            case 101: {\n                                goto lab_0x404575;\n                            }\n                            case 102: {\n                                goto lab_0x404575;\n                            }\n                            case 103: {\n                                goto lab_0x404830;\n                            }\n                            case 104: {\n                                goto lab_0x404575;\n                            }\n                            case 105: {\n                                goto lab_0x404575;\n                            }\n                            case 106: {\n                                goto lab_0x404575;\n                            }\n                            case 107: {\n                                goto lab_0x404615;\n                            }\n                            case 108: {\n                                goto lab_0x404575;\n                            }\n                            case 109: {\n                                goto lab_0x404658;\n                            }\n                            case 110: {\n                                goto lab_0x404575;\n                            }\n                            case 111: {\n                                goto lab_0x404575;\n                            }\n                            case 112: {\n                                goto lab_0x404575;\n                            }\n                            case 113: {\n                                goto lab_0x404575;\n                            }\n                            case 114: {\n                                goto lab_0x404575;\n                            }\n                            case 115: {\n                                goto lab_0x404575;\n                            }\n                            case 116: {\n                                goto lab_0x404760;\n                            }\n                            default: {\n                                goto lab_0x4044e0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4044e0;\n    }\n  lab_0x404465:\n    // 0x404465\n    *a4 = v9;\n    // 0x40446c\n    return v5 & 0xffffffff;\n  lab_0x4044e0:\n    // 0x4044e0\n    g46 = v8 - 66;\n    v11 = v16;\n    v7 = v15;\n    v21 = v16;\n    v28 = v19;\n    v20 = v15;\n    v34 = v19;\n    switch (v8) {\n        case 66: {\n            // 0x4045b1\n            v21 = 1024 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x4045b8;\n        }\n        case 69: {\n            // 0x4047b0\n            v25 = v18;\n            v32 = v19;\n            v37 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x4047c8;\n        }\n        case 71: {\n            goto lab_0x404830;\n        }\n        case 75: {\n            goto lab_0x404615;\n        }\n        case 77: {\n            goto lab_0x404640;\n        }\n        case 80: {\n            // 0x4046e0\n            v23 = v18;\n            v30 = v19;\n            v36 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x4046f8;\n        }\n        case 84: {\n            goto lab_0x404748;\n        }\n        case 89: {\n            // 0x404880\n            goto lab_0x404898;\n        }\n        case 90: {\n            // 0x4048e8\n            v26 = v18;\n            v27 = v19;\n            v35 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x404900;\n        }\n        case 98: {\n            goto lab_0x4046c5;\n        }\n        case 99: {\n            goto lab_0x4045b8;\n        }\n        case 103: {\n            goto lab_0x404830;\n        }\n        case 107: {\n            goto lab_0x404615;\n        }\n        case 109: {\n            goto lab_0x404640;\n        }\n        case 116: {\n            goto lab_0x404748;\n        }\n        case 119: {\n            // 0x4045f9\n            v21 = 2 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x4045b8;\n        }\n        default: {\n            goto lab_0x404575;\n        }\n    }\n    // 0x404818\n    goto lab_0x404830;\n    // 0x404600\n    goto lab_0x404615;\n  lab_0x404640:\n    // 0x404640\n    v22 = v18;\n    v29 = v19;\n    v33 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x404658;\n  lab_0x404748:\n    // 0x404748\n    v24 = v18;\n    v31 = v19;\n    v38 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x404760;\n  lab_0x4046c5:\n    // 0x4046c5\n    v21 = 512 * v16;\n    v28 = v34;\n    v20 = v15;\n    goto lab_0x4045b8;\n  lab_0x4045b8:;\n    int64_t v59 = v20;\n    int64_t v60 = v28 + v4; // 0x4045b8\n    *v3 = v60;\n    v9 = v21;\n    v5 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x404465;\n  lab_0x404575:\n    // 0x404575\n    *a4 = v11;\n    // 0x40446c\n    return (v7 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4047c8:;\n    uint64_t v61 = v25;\n    int64_t v62 = v16;\n    int64_t v63 = -0x8000000000000000; // 0x404801\n    int64_t v64 = 1; // 0x404801\n    if (v62 >= v37) {\n        // 0x4047e0\n        v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n        v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : 0;\n    }\n    int32_t v65 = 5; // 0x4047f5\n    int32_t v66 = v65; // 0x4047f8\n    int64_t v67 = v64; // 0x4047f8\n    int64_t v55 = v63; // 0x4047f8\n    int64_t v57 = v32; // 0x4047f8\n    int64_t v58 = v64; // 0x4047f8\n    while (v65 != 0) {\n        // 0x4047fe\n        v62 = v63;\n        v63 = -0x8000000000000000;\n        v64 = 1;\n        if (v62 >= v37) {\n            // 0x4047e0\n            v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n            v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : v67;\n        }\n        // 0x4047f5\n        v65 = v66 - 1;\n        v66 = v65;\n        v67 = v64;\n        v55 = v63;\n        v57 = v32;\n        v58 = v64;\n    }\n    goto lab_0x404a30;\n  lab_0x404830:\n    // 0x404830\n    while (true) {\n        // 0x404866\n        int32_t v40; // 0x4043f0\n        int32_t v41 = v40;\n        int64_t v42; // 0x4043f0\n        int64_t v43 = v42;\n        int64_t v44 = -0x8000000000000000; // 0x404869\n        int64_t v45 = 1; // 0x404869\n        int64_t v46; // 0x4043f0\n        uint64_t v47; // 0x4043f0\n        if (v43 >= v47) {\n            int64_t v48 = v46;\n            uint64_t v49; // 0x4043f0\n            int64_t v50 = v43 > 0x7fffffffffffffff / v49 ? 0x7fffffffffffffff : v43 * v49;\n            int64_t v51 = v43 > 0x7fffffffffffffff / v49 ? 1 : v48;\n            v44 = v50;\n            v45 = v51;\n        }\n        int64_t v52 = v45;\n        int64_t v53 = v44;\n        int32_t v54 = v41 - 1; // 0x40485d\n        v42 = v53;\n        v40 = v54;\n        v46 = v52;\n        v55 = v53;\n        int64_t v56; // 0x4043f0\n        v57 = v56;\n        v58 = v52;\n        if (v54 == 0) {\n            // break -> 0x404a30\n            break;\n        }\n    }\n    goto lab_0x404a30;\n  lab_0x404615:;\n    int64_t v72 = 1;\n    v21 = -0x8000000000000000;\n    v28 = v72;\n    v20 = 1;\n    int64_t v69; // 0x4043f0\n    int64_t v70; // 0x4043f0\n    int64_t v71; // 0x4043f0\n    int64_t v68; // 0x4043f0\n    if (v16 < -0x20000000000000) {\n        goto lab_0x4045b8;\n    } else {\n        int64_t v73 = 1024;\n        v69 = 0x7fffffffffffffff / v73;\n        v71 = v73;\n        v70 = v16;\n        v68 = v72;\n        goto lab_0x40462c;\n    }\n  lab_0x404658:\n    // 0x404658\n    v21 = -0x8000000000000000;\n    v28 = v29;\n    v20 = 1;\n    if (v16 < v33) {\n        goto lab_0x4045b8;\n    } else {\n        int64_t v74 = 0x7fffffffffffffff / v22;\n        v21 = 0x7fffffffffffffff;\n        v28 = v29;\n        v20 = 1;\n        if (v16 > v74) {\n            goto lab_0x4045b8;\n        } else {\n            int64_t v75 = v22 * v16; // 0x404678\n            v21 = -0x8000000000000000;\n            v28 = v29;\n            v20 = 1;\n            v69 = v74;\n            v71 = v22;\n            v70 = v75;\n            v68 = v29;\n            if (v75 < v33) {\n                goto lab_0x4045b8;\n            } else {\n                goto lab_0x40462c;\n            }\n        }\n    }\n  lab_0x4046f8:;\n    uint64_t v76 = v23;\n    int64_t v77 = v16;\n    int64_t v78 = -0x8000000000000000; // 0x404731\n    int64_t v79 = 1; // 0x404731\n    if (v36 <= v77) {\n        // 0x404710\n        v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n        v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : 0;\n    }\n    int32_t v80 = 4; // 0x404725\n    int32_t v81 = v80; // 0x404728\n    int64_t v82 = v79; // 0x404728\n    v55 = v78;\n    v57 = v30;\n    v58 = v79;\n    while (v80 != 0) {\n        // 0x40472e\n        v77 = v78;\n        v78 = -0x8000000000000000;\n        v79 = 1;\n        if (v36 <= v77) {\n            // 0x404710\n            v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n            v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : v82;\n        }\n        // 0x404725\n        v80 = v81 - 1;\n        v81 = v80;\n        v82 = v79;\n        v55 = v78;\n        v57 = v30;\n        v58 = v79;\n    }\n    goto lab_0x404a30;\n  lab_0x404760:;\n    uint64_t v83 = v24;\n    int64_t v84 = v16;\n    int64_t v85 = -0x8000000000000000; // 0x404799\n    int64_t v86 = 1; // 0x404799\n    if (v38 <= v84) {\n        // 0x404778\n        v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n        v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : 0;\n    }\n    int32_t v87 = 3; // 0x40478d\n    int32_t v88 = v87; // 0x404790\n    int64_t v89 = v86; // 0x404790\n    v55 = v85;\n    v57 = v31;\n    v58 = v86;\n    while (v87 != 0) {\n        // 0x404796\n        v84 = v85;\n        v85 = -0x8000000000000000;\n        v86 = 1;\n        if (v38 <= v84) {\n            // 0x404778\n            v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n            v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : v89;\n        }\n        // 0x40478d\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v55 = v85;\n        v57 = v31;\n        v58 = v86;\n    }\n    goto lab_0x404a30;\n  lab_0x404898:\n    // 0x404898\n    while (true) {\n        // 0x4048ce\n        int32_t v90; // 0x4043f0\n        int32_t v91 = v90;\n        int64_t v92; // 0x4043f0\n        int64_t v93 = v92;\n        int64_t v94 = -0x8000000000000000; // 0x4048d1\n        int64_t v95 = 1; // 0x4048d1\n        int64_t v96; // 0x4043f0\n        uint64_t v97; // 0x4043f0\n        if (v97 <= v93) {\n            int64_t v98 = v96;\n            uint64_t v99; // 0x4043f0\n            int64_t v100 = v93 > 0x7fffffffffffffff / v99 ? 0x7fffffffffffffff : v93 * v99;\n            int64_t v101 = v93 > 0x7fffffffffffffff / v99 ? 1 : v98;\n            v94 = v100;\n            v95 = v101;\n        }\n        int64_t v102 = v95;\n        int64_t v103 = v94;\n        int32_t v104 = v91 - 1; // 0x4048c5\n        v92 = v103;\n        v90 = v104;\n        v96 = v102;\n        v55 = v103;\n        int64_t v105; // 0x4043f0\n        v57 = v105;\n        v58 = v102;\n        if (v104 == 0) {\n            // break -> 0x404a30\n            break;\n        }\n    }\n    goto lab_0x404a30;\n  lab_0x404900:;\n    uint64_t v106 = v26;\n    int64_t v107 = v16;\n    int64_t v108 = -0x8000000000000000; // 0x404939\n    int64_t v109 = 1; // 0x404939\n    if (v35 <= v107) {\n        // 0x404918\n        v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n        v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : 0;\n    }\n    int32_t v110 = 6; // 0x40492d\n    int32_t v111 = v110; // 0x404930\n    int64_t v112 = v109; // 0x404930\n    v55 = v108;\n    v57 = v27;\n    v58 = v109;\n    while (v110 != 0) {\n        // 0x404936\n        v107 = v108;\n        v108 = -0x8000000000000000;\n        v109 = 1;\n        if (v35 <= v107) {\n            // 0x404918\n            v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n            v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : v112;\n        }\n        // 0x40492d\n        v110 = v111 - 1;\n        v111 = v110;\n        v112 = v109;\n        v55 = v108;\n        v57 = v27;\n        v58 = v109;\n    }\n    goto lab_0x404a30;\n  lab_0x404a30:\n    // 0x404a30\n    v21 = v55;\n    v28 = v57;\n    v20 = (v58 | v15) & 0xffffffff;\n    goto lab_0x4045b8;\n  lab_0x40462c:\n    // 0x40462c\n    v21 = 0x7fffffffffffffff;\n    v28 = v68;\n    v20 = 1;\n    if (v69 >= v70) {\n        // 0x404635\n        v21 = v70 * v71;\n        v28 = v68;\n        v20 = v15;\n    }\n    goto lab_0x4045b8;\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "40523c",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404c3f\n    int64_t v2 = *v1; // 0x404c3f\n    char * str2 = (char *)v2; // 0x404c4c\n    char c = *str2; // 0x404c4c\n    int64_t v3 = v2; // 0x404c78\n    int64_t v4 = 0; // 0x404c20\n    int32_t v5; // 0x404c20\n    int64_t v6; // 0x404c20\n    int64_t v7; // 0x404c20\n    int64_t v8; // 0x404c20\n    int64_t v9; // 0x404c20\n    int64_t v10; // 0x404c20\n    int64_t v11; // 0x404c20\n    int64_t v12; // 0x404c20\n    int64_t v13; // 0x404c20\n    int64_t str3; // 0x404c20\n    int64_t v14; // 0x404c20\n    int64_t v15; // 0x404c20\n    int64_t v16; // 0x404c20\n    int64_t v17; // 0x404c20\n    int32_t v18; // 0x404c20\n    int32_t v19; // 0x404c20\n    int32_t v20; // 0x404c20\n    int32_t v21; // 0x404c20\n    int32_t v22; // 0x404c20\n    int32_t v23; // 0x404c20\n    int32_t v24; // 0x404c20\n    int32_t v25; // 0x404c20\n    int32_t v26; // 0x404c20\n    int32_t v27; // 0x404c20\n    int32_t v28; // 0x404c20\n    int32_t v29; // 0x404c20\n    int64_t nmemb; // 0x404c20\n    int64_t v30; // 0x404c20\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404c7c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404c78\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404c88\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404c8e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404c58\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404cbc\n                int64_t v34; // 0x404c20\n                int64_t v35; // 0x404c20\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404cc5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404e40;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404cd6\n                int64_t v37 = *(int64_t *)v36; // 0x404cda\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404cb0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404cc5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404e40;\n                        }\n                    }\n                    // 0x404cd6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404d26:\n                    // 0x404d26\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404d80;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404ef0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404d80;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404ea0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404d4a;\n                                } else {\n                                    // 0x404eac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404d4a;\n                                    } else {\n                                        // 0x404eba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404d4a;\n                                        } else {\n                                            goto lab_0x404d80;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404d4a;\n                            }\n                        }\n                    }\n                }\n              lab_0x404d91:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404f66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405112\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x405132\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40517f\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x405199\n                            int64_t v45; // 0x40519b\n                            if (*(char *)v42 != 0) {\n                                // 0x40519b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405193\n                            while (v17 + nmemb != v42) {\n                                // 0x405195\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40519b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x405188\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4051c0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x404f74\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4050cf\n                        free((int64_t *)v17);\n                    }\n                    // 0x404fc9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404fe0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404e8e\n                    return 63;\n                }\n                // 0x404db0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404e34\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404e40:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404e50\n                    uint32_t v50 = *v49; // 0x404e50\n                    int64_t v51 = v50; // 0x404e50\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404e5a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404e63\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40508f\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40503a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404e8e\n                            return 63;\n                        }\n                        // 0x404ed8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4051ef\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4050ed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405100\n                                // 0x404e8e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404ffe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405012\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404e7b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404e7e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404e82\n                    int64_t result = v59; // 0x404e88\n                    if (v58 != 0) {\n                        // 0x404e8a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404e8e\n                    return result;\n                }\n            } else {\n                // 0x404c8e\n                v5 = v32;\n            }\n            // break -> 0x404db5\n            break;\n        }\n    }\n    // 0x404db5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x404dcd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404dd7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404e8e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404f19\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404e06\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404e16\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404d80:\n    // 0x404d80\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404d80\n    int64_t v63 = *(int64_t *)v62; // 0x404d84\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404d91\n        goto lab_0x404d91;\n    }\n    goto lab_0x404d26;\n  lab_0x404d4a:\n    // 0x404d4a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404c20\n    int32_t v65; // 0x404c20\n    int32_t v66; // 0x404c20\n    if (v27 != 0) {\n        goto lab_0x404d80;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404f00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404d80;\n            } else {\n                goto lab_0x404d71;\n            }\n        } else {\n            // 0x404d65\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40505c\n                int64_t v67 = (int64_t)mem; // 0x40505c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404d80;\n                } else {\n                    // 0x40506f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404d71;\n                }\n            } else {\n                goto lab_0x404d71;\n            }\n        }\n    }\n  lab_0x404d71:\n    // 0x404d71\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404d80;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405806",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405261\n    if (v3 < 1) {\n        // 0x40541e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40525d\n    int32_t v5 = *(int32_t *)a7; // 0x405269\n    uint64_t v6 = a1 & 0xffffffff; // 0x40526b\n    int64_t v7 = v2; // 0x405270\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405273\n    *v8 = 0;\n    int64_t v9; // 0x405240\n    int64_t v10; // 0x405240\n    int64_t v11; // 0x405240\n    int64_t v12; // 0x405240\n    int64_t str; // 0x405240\n    int64_t v13; // 0x405240\n    int64_t v14; // 0x405240\n    int64_t v15; // 0x405240\n    int64_t v16; // 0x405240\n    int64_t v17; // 0x405240\n    int32_t v18; // 0x405240\n    char v19; // 0x405240\n    if (v5 == 0) {\n        // 0x405458\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40528a;\n    } else {\n        // 0x405283\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4052d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4052d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405398;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4052e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4052f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4053ac;\n                } else {\n                    goto lab_0x405308;\n                }\n            }\n        } else {\n            goto lab_0x40528a;\n        }\n    }\n  lab_0x40528a:\n    // 0x40528a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405290\n    *v24 = 0;\n    int64_t v25; // 0x405240\n    int64_t v26; // 0x405240\n    int64_t v27; // 0x405240\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405380\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40538d;\n        }\n        case 43: {\n            // 0x405690\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40538d;\n        }\n        default: {\n            // 0x4052ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40560f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405728\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40538d;\n                } else {\n                    // 0x40561d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4052ba;\n                }\n            } else {\n                goto lab_0x4052ba;\n            }\n        }\n    }\n  lab_0x405398:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40539f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405308;\n    } else {\n        goto lab_0x4053ac;\n    }\n  lab_0x4052ba:\n    // 0x4052ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40538d;\n  lab_0x40538d:\n    // 0x40538d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405398;\n  lab_0x405308:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405308\n    int64_t v31 = v30; // 0x405308\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40530a\n    if ((int64_t)*v32 > v31) {\n        // 0x40530f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405312\n    if (*v33 > v30) {\n        // 0x405317\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40531a\n    int64_t v35 = v31; // 0x40531e\n    int64_t v36 = v15; // 0x40531e\n    int64_t v37; // 0x405240\n    int64_t v38; // 0x405240\n    int64_t v39; // 0x405240\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405488\n        int64_t v41 = v40; // 0x405488\n        v2 = v41;\n        int64_t v42; // 0x405240\n        if (*v33 == v40) {\n            // 0x405670\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405678\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405494\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4054a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4054b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4054ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4054d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4054d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4054de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4054e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4054e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4054c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4054c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4054d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4054de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4054e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4054e6;\n                    }\n                }\n                // 0x4054c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405688\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4054e6;\n    } else {\n        goto lab_0x405324;\n    }\n  lab_0x4053ac:\n    // 0x4053ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4053af\n    int64_t v51 = v12; // 0x4053af\n    int64_t v52 = v14; // 0x4053af\n    if (*(char *)v10 == 0) {\n        goto lab_0x405308;\n    } else {\n        goto lab_0x4053b5;\n    }\n  lab_0x405324:;\n    int32_t v53 = v35; // 0x405324\n    int64_t v54; // 0x405240\n    int64_t v55; // 0x405240\n    int64_t v56; // 0x405240\n    int64_t v57; // 0x405240\n    int64_t v58; // 0x405240\n    int64_t v59; // 0x405240\n    char * v60; // 0x405240\n    int64_t v61; // 0x405240\n    int64_t v62; // 0x405339\n    int64_t v63; // 0x405240\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405473\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405476;\n    } else {\n        // 0x40532c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405240\n        int64_t v66 = v65 ? -1 : 1; // 0x405340\n        int64_t v67 = (int64_t)\"--\"; // 0x405240\n        int64_t v68 = v62; // 0x405240\n        int64_t v69 = 3; // 0x405340\n        unsigned char v70 = *(char *)v68; // 0x405340\n        char v71 = *(char *)v67; // 0x405340\n        char v72 = v71; // 0x405340\n        bool v73 = false; // 0x405340\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405430\n            if (*(char *)v62 == 45) {\n                // 0x4054f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4054f0\n                if (c == 0) {\n                    goto lab_0x40543a;\n                } else {\n                    // 0x4054fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405580;\n                    } else {\n                        if (c == 45) {\n                            // 0x405763\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4055d5;\n                        } else {\n                            // 0x40550e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405580;\n                            } else {\n                                // 0x405513\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405534;\n                                } else {\n                                    // 0x40551a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405580;\n                                    } else {\n                                        goto lab_0x405534;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40543a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405350\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405353\n            int64_t v77 = v35 + 1; // 0x405356\n            int32_t v78 = v77; // 0x405359\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4056c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405367\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405375\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405476;\n        }\n    }\n  lab_0x4053b5:;\n    // 0x4053b5\n    int64_t v79; // bp-104, 0x405240\n    int64_t v80 = &v79; // 0x40524a\n    int64_t v81 = v50 + 1; // 0x4053b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4053bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4053c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4053c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4053c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4053d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4053d6\n    int32_t c2 = v84; // 0x4053d6\n    char * found_char_pos = strchr(str2, c2); // 0x4053d6\n    int64_t v87 = *v82; // 0x4053db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4053e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4053f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4056e0\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4056ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40541e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4053d6\n    char v91 = *(char *)(v90 + 1); // 0x40540b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4053c5\n        if (v91 != 58) {\n            // 0x40541e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405634\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405738\n                *v8 = 0;\n            } else {\n                // 0x40571c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40565e\n            *v83 = 0;\n            // 0x40541e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40563e\n        if (v93 != 0) {\n            // 0x4056d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40565e\n            *v83 = 0;\n            // 0x40541e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405651\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40565e\n            *v83 = 0;\n            // 0x40541e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40579a\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40574a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405751\n        // 0x40565e\n        *v83 = 0;\n        // 0x40541e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4055a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4055ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4057d0\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405781\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405788\n            // 0x40541e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4055b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4055ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4055d5;\n  lab_0x4054e6:\n    // 0x4054e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405324;\n  lab_0x4055d5:;\n    int64_t v99 = function_404c20(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4055f3\n    // 0x40541e\n    return v99 & 0xffffffff;\n  lab_0x405476:;\n    int32_t v100 = v55; // 0x405476\n    if (v100 != (int32_t)v59) {\n        // 0x40547a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40541e\n    return 0xffffffff;\n  lab_0x40543a:\n    // 0x40543a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405441\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40541e\n    return v99 & 0xffffffff;\n  lab_0x405580:\n    // 0x405580\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4053b5;\n  lab_0x405534:\n    // 0x405534\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404c20(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40555a\n    if ((int32_t)v101 != -1) {\n        // 0x40541e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40556f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405580;\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405866",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1) {\n    // 0x405810\n    *(int32_t *)&g40 = g26;\n    *(int32_t *)&g41 = g25;\n    int64_t v1; // 0x405810\n    int64_t result = function_405240(v1, v1, v1, v1, v1, v1, &g40, a1 & 0xffffffff); // 0x405836\n    g26 = *(int32_t *)&g40;\n    g45 = g43;\n    *(int32_t *)&g24 = g42;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "405888",
            "decompiledFuncCode": "int64_t function_405870(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405870\n    return function_405810(1);\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "4058a3",
            "decompiledFuncCode": "int64_t function_405890(int32_t a1, int64_t a2, char * a3, char (**a4)[11], int32_t a5, int64_t a6) {\n    // 0x405890\n    return function_405810(0);\n}\n"
        },
        {
            "funcName": "function_4058b0",
            "funcStartAddr": "4058b0",
            "funcEndAddr": "4058c5",
            "decompiledFuncCode": "int64_t function_4058b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4058b0\n    return function_405240(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058e6",
            "decompiledFuncCode": "int64_t function_4058d0(void) {\n    // 0x4058d0\n    return function_405810(0);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405908",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4058f0\n    return function_405240(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "40598a",
            "decompiledFuncCode": "int64_t function_405910(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40591b\n    int64_t v2 = (int64_t)&g10; // 0x40591b\n    int32_t * pwc; // 0x405910\n    int64_t v3; // 0x405910\n    int64_t n; // 0x405910\n    if (a2 == 0) {\n        goto lab_0x405962;\n    } else {\n        // 0x40591d\n        if (a3 == 0) {\n            // 0x405948\n            return -2;\n        }\n        // 0x405929\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405962;\n        } else {\n            goto lab_0x405934;\n        }\n    }\n  lab_0x405962:\n    // 0x405962\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405910\n    pwc = (int32_t *)&v4;\n    goto lab_0x405934;\n  lab_0x405934:;\n    char * wstr = (char *)v3; // 0x40593a\n    int64_t ps; // 0x405910\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40593a\n    int64_t result = v5; // 0x40593a\n    if (v5 < 0xfffffffe) {\n        // 0x405948\n        return result;\n    }\n    int64_t result2 = result; // 0x405979\n    if ((char)function_4059f0(0, v3) == 0) {\n        // 0x40597b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405948\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059ed",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405997\n    int64_t v2; // 0x405990\n    int64_t result = function_405fc0(a1, v2); // 0x4059a8\n    if ((v2 & 32) != 0) {\n        // 0x4059d0\n        if ((int32_t)result == 0) {\n            // 0x4059d4\n            *__errno_location() = 0;\n        }\n        // 0x4059ca\n        return 0xffffffff;\n    }\n    // 0x4059b1\n    if ((int32_t)result == 0) {\n        // 0x4059ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4059b8\n    if (v1 == 0) {\n        // 0x4059ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4059ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4059f0",
            "funcStartAddr": "4059f0",
            "funcEndAddr": "405a4e",
            "decompiledFuncCode": "int64_t function_4059f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4059f6\n    if (locale == NULL) {\n        // 0x405a23\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4059f6\n    bool v2; // 0x4059f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4059f0\n    int64_t v5 = v1; // 0x4059f0\n    int64_t v6 = 2; // 0x405a15\n    unsigned char v7 = *(char *)v5; // 0x405a15\n    char v8 = *(char *)v4; // 0x405a15\n    char v9 = v8; // 0x405a15\n    bool v10 = false; // 0x405a15\n    while (v7 == v8) {\n        // 0x405a08\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405a21\n    int64_t v13 = v1; // 0x405a21\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405a23\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405a21\n    unsigned char v15 = *(char *)v13; // 0x405a3d\n    char v16 = *(char *)v12; // 0x405a3d\n    char v17 = v16; // 0x405a3d\n    bool v18 = false; // 0x405a3d\n    while (v15 == v16) {\n        // 0x405a30\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405a50",
            "funcStartAddr": "405a50",
            "funcEndAddr": "405fb2",
            "decompiledFuncCode": "int64_t function_405a50(void) {\n    char * v1 = nl_langinfo(14); // 0x405a66\n    char * v2 = g44; // 0x405a6b\n    char * v3; // 0x405a50\n    int64_t v4; // 0x405a50\n    int64_t v5; // 0x405a50\n    int64_t v6; // 0x405a50\n    int64_t v7; // 0x405a50\n    int32_t size; // 0x405a50\n    int32_t size2; // 0x405a50\n    int32_t len; // 0x405b22\n    int64_t v8; // 0x405b22\n    char * env_val; // 0x405b0d\n    if (v2 == NULL) {\n        // 0x405b08\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405b75;\n        } else {\n            // 0x405b1a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405b75;\n            } else {\n                // 0x405b1f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405b0d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405fa5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405b75;\n                    } else {\n                        // 0x405f19\n                        size2 = len + 14;\n                        goto lab_0x405b3b;\n                    }\n                } else {\n                    goto lab_0x405b3b;\n                }\n            }\n        }\n    } else {\n        // 0x405a50\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405a8a;\n    }\n  lab_0x405dbc:;\n    // 0x405dbc\n    struct _IO_FILE * stream; // 0x405bfb\n    int32_t v10 = __uflow(stream); // 0x405dbf\n    int64_t v11; // 0x405a50\n    int64_t v12 = v11; // 0x405dc9\n    int64_t v13; // 0x405a50\n    int64_t v14 = v13; // 0x405dc9\n    int32_t v15 = v10; // 0x405dc9\n    int64_t v16; // 0x405a50\n    int64_t v17 = v16; // 0x405dc9\n    int64_t v18 = v11; // 0x405dc9\n    int64_t v19 = v13; // 0x405dc9\n    int64_t v20 = v16; // 0x405dc9\n    if (v10 == -1) {\n        // break -> 0x405dcf\n        goto lab_0x405dcf;\n    }\n    goto lab_0x405c49;\n  lab_0x405c3e:;\n    // 0x405c3e\n    int64_t v90; // 0x405a50\n    int64_t * v32; // 0x405c30\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405a50\n    v12 = v89;\n    int64_t v91; // 0x405a50\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405a50\n    v17 = v92;\n    goto lab_0x405c49;\n  lab_0x405c49:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405a50\n    int32_t v25; // bp-120, 0x405a50\n    int32_t v26; // bp-184, 0x405a50\n    int64_t v27; // 0x405bfb\n    int64_t v28; // 0x405c18\n    int64_t v29; // 0x405c1d\n    int64_t * v30; // 0x405c34\n    switch (c) {\n        case 32: {\n            goto lab_0x405c30;\n        }\n        case 10: {\n            goto lab_0x405c30;\n        }\n        case 9: {\n            goto lab_0x405c30;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405e21\n            int32_t v33; // 0x405a50\n            char v34; // 0x405a50\n            int32_t v35; // 0x405e2e\n            if (v31 < *v30) {\n                // 0x405e00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x405e2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405e21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405e00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x405e2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405e10\n                v36 = v33;\n            }\n            // 0x405eff\n            if (v36 == -1) {\n                // break -> 0x405dcf\n                break;\n            }\n            goto lab_0x405c30;\n        }\n        default: {\n            // 0x405c5f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x405dcf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405c88\n            int64_t v39 = v37 + 4; // 0x405c8a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405c96\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405c98\n            while (v41 == 0) {\n                // 0x405c88\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405cb6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405cc2\n            int64_t v45 = v43 + 4; // 0x405cc4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405cd0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405cd2\n            while (v47 == 0) {\n                // 0x405cc2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405cbf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405ce8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405cf8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405cfc\n            int64_t v52 = v51 + v48; // 0x405d05\n            int64_t * mem; // 0x405a50\n            int64_t v53; // 0x405a50\n            int64_t v54; // 0x405a50\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x405e3b\n                int64_t v56 = v55 + 3; // 0x405e47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405d21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405d30\n            if (mem == NULL) {\n                // 0x405f5c\n                free((int64_t *)v21);\n                function_405fc0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x405bd4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405d48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405d52\n            uint32_t v62 = (int32_t)v59; // 0x405d55\n            int64_t v63; // 0x405a50\n            if (v62 >= 8) {\n                // 0x405e64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405e7e\n                int64_t v66 = v61 - v65; // 0x405e82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405e8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405e9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405e9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405e9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405f2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405d67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x405d6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x405d7b\n            int64_t v74 = v60 - 1; // 0x405d7f\n            uint32_t v75 = (int32_t)v73; // 0x405d84\n            int64_t v76; // 0x405a50\n            if (v75 >= 8) {\n                // 0x405eb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405ebc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405ecc\n                int64_t v80 = v74 - v79; // 0x405ed0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405edb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405eeb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405ee9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405f46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405f4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405d96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x405d9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405f93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x405dae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405c3e;\n            } else {\n                goto lab_0x405dbc;\n            }\n        }\n    }\n  lab_0x405c30:;\n    int64_t v93 = v23; // 0x405a50\n    int64_t v94 = v22; // 0x405a50\n    int64_t v95 = v21; // 0x405a50\n    goto lab_0x405c30_2;\n  lab_0x405b75:;\n    int64_t * mem3 = malloc(size); // 0x405b75\n    int64_t v97 = (int64_t)&g10; // 0x405b80\n    int64_t v98; // 0x405a50\n    int64_t path; // 0x405a50\n    if (mem3 == NULL) {\n        goto lab_0x405b52;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405b75\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405b96;\n    }\n  lab_0x405a8a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x405a7d\n    char v100 = *v3; // 0x405a8a\n    int64_t v101; // 0x405a50\n    if (v100 == 0) {\n        // 0x405ae4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405a50\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405a50\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405ad0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405ad7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405aa0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405aad\n        char v107 = *(char *)v106; // 0x405ab2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405ae4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405abb\n    v104 = v103 + 1;\n  lab_0x405ad7:\n    // 0x405ae4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405b52:;\n    char * v108 = (char *)v97;\n    g44 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405a8a;\n  lab_0x405b96:;\n    int64_t v109 = v98 + path; // 0x405b96\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405bc2\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x405bf1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405f22\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x405c15\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405c30_2:;\n                uint64_t v96 = *v32; // 0x405c30\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x405dbc;\n                } else {\n                    goto lab_0x405c3e;\n                }\n            }\n          lab_0x405dcf:\n            // 0x405dcf\n            function_405fc0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x405dee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405bd4;\n  lab_0x405b3b:;\n    int64_t * mem4 = malloc(size2); // 0x405b3b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x405be1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405b96;\n    } else {\n        goto lab_0x405b52;\n    }\n  lab_0x405bd4:\n    // 0x405bd4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405b52;\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "40603b",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405fc7\n    if (fileno(stream) < 0) {\n        // 0x406027\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405fda\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40600b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406027\n            return fclose(stream);\n        }\n    }\n    // 0x405fdc\n    if ((int32_t)function_406040(a1, v1) == 0) {\n        // 0x406027\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405fe8\n    int32_t v3 = *v2; // 0x405ff0\n    int64_t result = fclose(stream); // 0x405ffe\n    if (v3 != 0) {\n        // 0x406030\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406000\n    return result;\n}\n"
        },
        {
            "funcName": "function_406040",
            "funcStartAddr": "406040",
            "funcEndAddr": "406080",
            "decompiledFuncCode": "int64_t function_406040(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40605a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40605a\n        return fflush(stream);\n    }\n    // 0x406068\n    function_406080(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406080",
            "funcStartAddr": "406080",
            "funcEndAddr": "4060d7",
            "decompiledFuncCode": "int64_t function_406080(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406080\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40608a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4060bb\n    int64_t result = -1; // 0x4060c4\n    if (v1 != -1) {\n        // 0x4060c6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4060d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4060e0",
            "funcStartAddr": "4060e0",
            "funcEndAddr": "40613d",
            "decompiledFuncCode": "int64_t function_4060e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4060e0\n    return function_401330();\n}\n"
        },
        {
            "funcName": "function_406140",
            "funcStartAddr": "406140",
            "funcEndAddr": "406141",
            "decompiledFuncCode": "int64_t function_406140(void) {\n    // 0x406140\n    int64_t result; // 0x406140\n    return result;\n}\n"
        },
        {
            "funcName": "function_406150",
            "funcStartAddr": "406150",
            "funcEndAddr": "406168",
            "decompiledFuncCode": "int64_t function_406150(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406150\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406168",
            "funcStartAddr": "406168",
            "funcEndAddr": "406188",
            "decompiledFuncCode": "int64_t function_406168(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406172\n    while (*(int64_t *)v1 != -1) {\n        // 0x406173\n        v1 -= 8;\n    }\n    // 0x406184\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_nice.elf"
}