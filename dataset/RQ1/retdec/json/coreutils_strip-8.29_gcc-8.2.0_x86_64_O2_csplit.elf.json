{
    "funcInfo": [
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "401ed5",
            "decompiledFuncCode": "int64_t function_401ed0(void) {\n    // 0x401ed0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ed5",
            "funcStartAddr": "401ed5",
            "funcEndAddr": "401eda",
            "decompiledFuncCode": "int64_t function_401ed5(void) {\n    // 0x401ed5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401eda",
            "funcStartAddr": "401eda",
            "funcEndAddr": "401edf",
            "decompiledFuncCode": "int64_t function_401eda(void) {\n    // 0x401eda\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401edf",
            "funcStartAddr": "401edf",
            "funcEndAddr": "401ee4",
            "decompiledFuncCode": "int64_t function_401edf(void) {\n    // 0x401edf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ee4",
            "funcStartAddr": "401ee4",
            "funcEndAddr": "401ee9",
            "decompiledFuncCode": "int64_t function_401ee4(void) {\n    // 0x401ee4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ee9",
            "funcStartAddr": "401ee9",
            "funcEndAddr": "401eee",
            "decompiledFuncCode": "int64_t function_401ee9(void) {\n    // 0x401ee9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401eee",
            "funcStartAddr": "401eee",
            "funcEndAddr": "401ef3",
            "decompiledFuncCode": "int64_t function_401eee(void) {\n    // 0x401eee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ef3",
            "funcStartAddr": "401ef3",
            "funcEndAddr": "401ef8",
            "decompiledFuncCode": "int64_t function_401ef3(void) {\n    // 0x401ef3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f00",
            "funcStartAddr": "401f00",
            "funcEndAddr": "402d70",
            "decompiledFuncCode": "int64_t function_401f00(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x401f14\n    function_404260(a2);\n    setlocale(LC_ALL, (char *)&g13);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v3; // 0x401f00\n    function_416950(0x404060, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3);\n    g50 = 1;\n    g52 = a2;\n    g47 = 0;\n    g46 = 0;\n    g51 = 0;\n    g48 = 0;\n    g58 = \"xx\";\n    int32_t v4 = v2;\n    int64_t v5; // 0x401f00\n    while (true) {\n        // 0x401f90\n        while (true) {\n          lab_0x401f90_2:;\n            int32_t v6 = function_408360(v4, a2, \"f:b:kn:sqz\", &g6, 0, v5);\n            switch (v6) {\n                case -1: {\n                    goto lab_0x402104;\n                }\n                case 107: {\n                    // 0x4020f8\n                    g50 = 0;\n                    goto lab_0x401f90_2;\n                }\n                default: {\n                    if (v6 > 107) {\n                        if (v6 == 115) {\n                            // 0x4020e9\n                            g51 = 1;\n                            goto lab_0x401f90_2;\n                        } else {\n                            if (v6 > 115) {\n                                if (v6 != 122) {\n                                    if (v6 != 128) {\n                                        // 0x402ac0\n                                        function_403c80(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x40201b\n                                    g48 = 1;\n                                } else {\n                                    // 0x401fcd\n                                    g49 = 1;\n                                }\n                                goto lab_0x401f90_2;\n                            } else {\n                                if (v6 == 110) {\n                                    // break -> 0x402039\n                                    break;\n                                }\n                                if (v6 != 113) {\n                                    // 0x402ac0\n                                    function_403c80(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x4020e9\n                                g51 = 1;\n                                goto lab_0x401f90_2;\n                            }\n                        }\n                    } else {\n                        if (v6 == -130) {\n                            // 0x402a90\n                            function_403c80(0);\n                            // UNREACHABLE\n                        }\n                        if (v6 <= 0xffffff7e) {\n                            if (v6 == -131) {\n                                // 0x4020a3\n                                function_406370((int64_t)g37, \"csplit\", \"GNU coreutils\", (int64_t)g25, \"Stuart Kemp\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x402ac0;\n                        }\n                        if (v6 != 98) {\n                            if (v6 != 102) {\n                                // 0x402ac0\n                                function_403c80(1);\n                                // UNREACHABLE\n                            }\n                            // 0x402081\n                            *(int64_t *)&g58 = (int64_t)g79;\n                        } else {\n                            // 0x401ffa\n                            *(int64_t *)&g57 = (int64_t)g79;\n                        }\n                        goto lab_0x401f90_2;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402104:;\n    int32_t v7 = *(int32_t *)0x61d33c; // 0x402104\n    if (v4 - v7 < 2) {\n        if (v7 < v4) {\n            // 0x402ccc\n            function_405e80(*(int64_t *)(a2 - 8 + (v1 >> 29)));\n            error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n        } else {\n            // 0x402aa1\n            error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        }\n      lab_0x402ac0:\n        // 0x402ac0\n        function_403c80(1);\n        // UNREACHABLE\n    }\n    // 0x402119\n    bool v8; // 0x401f00\n    int64_t v9 = v8 ? -1 : 1;\n    int64_t v10 = -1; // 0x402126\n    int64_t v11 = (int64_t)g58;\n    int64_t v12 = 0; // 0x402126\n    int64_t v13 = v11; // 0x402126\n    while (v10 != 0) {\n        int64_t v14 = v11 + v9; // 0x402126\n        int64_t v15 = v10 - 1; // 0x402126\n        v10 = v15;\n        v12 = v15;\n        v13 = v14;\n        if (*(char *)v11 == 0) {\n            // break -> \n            break;\n        }\n        v11 = v14;\n        v12 = 0;\n        v13 = v11;\n    }\n    char * v16; // 0x401f00\n    char v17; // 0x401f00\n    char v18; // 0x402198\n    int64_t v19; // 0x401f00\n    int64_t v20; // 0x401f00\n    int64_t v21; // 0x401f00\n    int32_t v22; // 0x401f00\n    int64_t v23; // 0x401f00\n    int64_t v24; // 0x401f00\n    int64_t v25; // 0x401f00\n    char v26; // 0x401f00\n    char v27; // 0x401f00\n    int64_t v28; // 0x401f00\n    int64_t v29; // 0x401f00\n    int64_t v30; // 0x401f00\n    int64_t v31; // 0x401f00\n    int64_t v32; // 0x401f00\n    int64_t v33; // 0x401f00\n    int64_t v34; // 0x401f00\n    int64_t v35; // 0x401f00\n    int64_t v36; // 0x401f00\n    int64_t v37; // 0x401f00\n    int64_t v38; // 0x401f00\n    int64_t v39; // 0x401f00\n    int64_t v40; // 0x401f00\n    int64_t v41; // 0x401f00\n    int64_t v42; // 0x401f00\n    int64_t v43; // 0x401f00\n    int64_t v44; // 0x401f00\n    if (g57 == NULL) {\n        // 0x4022b4\n        v42 = 10;\n        v20 = v5;\n        if (g24 >= 10) {\n            int64_t v45 = g24; // 0x4022ca\n            v42 = v45;\n            v20 = v5;\n            if (v12 < v45) {\n                // 0x4022d9\n                function_403510(v13);\n                // UNREACHABLE\n            }\n        }\n    } else {\n        char v46 = *g57; // 0x402148\n        char * format; // 0x402a7a\n        if (v46 == 0) {\n            // 0x402a6e\n            format = dcgettext(NULL, \"missing %% conversion specification in suffix\", 5);\n            error(1, (int32_t)\"missing %% conversion specification in suffix\" ^ (int32_t)\"missing %% conversion specification in suffix\", format);\n            // 0x402a90\n            function_403c80(0);\n            // UNREACHABLE\n        }\n        // 0x40216d\n        v27 = v46;\n        v37 = (int64_t)g57;\n        v30 = 0;\n        while (true) {\n          lab_0x40216d:;\n            int64_t v47 = v30;\n            int64_t v48 = v24;\n            int64_t v49 = v37;\n            int64_t v50 = v49 + 1; // 0x40216d\n            char v51 = *(char *)v50; // 0x402171\n            v21 = v50;\n            v26 = v51;\n            v23 = v48;\n            v28 = v47;\n            if (v27 != 37) {\n                goto lab_0x402162;\n            } else {\n                if (v51 != 37) {\n                    // 0x40218a\n                    v17 = v51;\n                    v38 = v50;\n                    v31 = 0;\n                    if ((char)v47 != 0) {\n                        // 0x402c9b\n                        error(1, (int32_t)\"too many %% conversion specifications in suffix\" ^ (int32_t)\"too many %% conversion specifications in suffix\", dcgettext(NULL, \"too many %% conversion specifications in suffix\", 5));\n                        v25 = v48;\n                        v19 = a2;\n                        goto lab_0x402cbd;\n                    }\n                    while (true) {\n                      lab_0x402198:\n                        // 0x402198\n                        v32 = v31;\n                        v39 = v38;\n                        v18 = v17;\n                        v41 = v39;\n                        v35 = v32;\n                        if (v18 == 39) {\n                            goto lab_0x40224e;\n                        } else {\n                            if (v18 > 39) {\n                                // 0x4021b5\n                                v40 = v39;\n                                v33 = v32;\n                                switch (v18) {\n                                    case 45: {\n                                        goto lab_0x4021af;\n                                    }\n                                    case 48: {\n                                        goto lab_0x4021af;\n                                    }\n                                    default: {\n                                        goto lab_0x4021bd;\n                                    }\n                                }\n                            } else {\n                                if (v18 != 35) {\n                                    goto lab_0x4021bd;\n                                } else {\n                                    // 0x4021ac\n                                    v40 = v39;\n                                    v33 = v32 & 0xfffffffd | 2;\n                                    goto lab_0x4021af;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x402262_2:\n                    // 0x402262\n                    *v16 = 117;\n                    v22 = -2;\n                    v44 = v43;\n                    v36 = v34;\n                    goto lab_0x40226a;\n                } else {\n                    int64_t v52 = v49 + 2; // 0x402180\n                    v21 = v52;\n                    v26 = *(char *)v52;\n                    v23 = v48;\n                    v28 = v47;\n                    goto lab_0x402162;\n                }\n            }\n        }\n      lab_0x4022e5:\n        if ((char)v29 == 0) {\n            // 0x402a6e\n            format = dcgettext(NULL, \"missing %% conversion specification in suffix\", 5);\n            error(1, (int32_t)\"missing %% conversion specification in suffix\" ^ (int32_t)\"missing %% conversion specification in suffix\", format);\n            // 0x402a90\n            function_403c80(0);\n            // UNREACHABLE\n        }\n        int32_t v53 = __snprintf_chk(NULL, 0, 1, -1, g57); // 0x402301\n        v42 = v53;\n        v20 = 0xffffffff;\n        if (v53 < 0) {\n            // 0x4022d9\n            function_403510(0);\n            // UNREACHABLE\n        }\n    }\n    int64_t v54 = function_4064b0(v42 + -1 - v12); // 0x402312\n    int32_t v55 = g34; // 0x402317\n    g59 = (char *)v54;\n    int64_t str = *(int64_t *)(8 * (int64_t)v55 + a2); // 0x40232c\n    g34 = &g35;\n    int32_t v56 = v55 + 1; // 0x402343\n    if (strcmp((char *)str, \"-\") != 0) {\n        int64_t v57 = function_404100(0, str, 0, 0); // 0x4029c9\n        v56 = g34;\n        if ((int32_t)v57 < 0) {\n            // 0x4029dc\n            function_405c30(4, str);\n            error(1, *__errno_location(), dcgettext(NULL, \"cannot open %s for reading\", 5));\n          lab_0x402a19:\n            // 0x402a19\n            function_403a40();\n            function_403000();\n            // 0x40276d\n            exit(0);\n            // UNREACHABLE\n        }\n    }\n    // 0x402349\n    int64_t * v58; // 0x401f00\n    int64_t v59; // 0x401f00\n    int64_t v60; // 0x401f00\n    int64_t v61; // 0x401f00\n    int64_t v62; // 0x401f00\n    int64_t v63; // 0x401f00\n    int64_t v64; // 0x401f00\n    int64_t v65; // 0x401f00\n    int64_t v66; // 0x401f00\n    int64_t v67; // 0x401f00\n    int64_t oact; // bp-216, 0x401f00\n    int64_t v68; // bp-224, 0x401f00\n    int32_t v69; // 0x401f00\n    int32_t v70; // 0x401f00\n    int32_t v71; // 0x401f00\n    int32_t v72; // 0x401f00\n    int32_t v73; // 0x401f00\n    int32_t v74; // 0x401f00\n    int32_t v75; // 0x401f00\n    int64_t v76; // 0x401f00\n    int64_t * v77; // 0x401f00\n    if (v56 < v4) {\n        int64_t v78 = v56;\n        v74 = v56;\n        v64 = v78;\n        v62 = *(int64_t *)((0x100000000 * v78 >> 29) + a2);\n        int64_t * v79; // 0x401f00\n        int64_t v80; // 0x401f00\n        int32_t v81; // 0x401f00\n        int32_t v82; // 0x401f00\n        while (true) {\n          lab_0x402391:;\n            int64_t v83 = v62;\n            int64_t v84 = v64;\n            v75 = v74;\n            char c = *(char *)v83; // 0x402391\n            if (c == 47 || c == 37) {\n                int64_t str2 = v83 + 1; // 0x4024d0\n                v82 = str2;\n                char * found_char_pos = strrchr((char *)str2, (int32_t)c); // 0x4024e3\n                if (found_char_pos == NULL) {\n                    // break -> 0x402bbc\n                    break;\n                }\n                int64_t v85 = (int64_t)found_char_pos; // 0x4024e3\n                int64_t v86 = function_403540(); // 0x4024f4\n                *(char *)(v86 + 29) = (char)(c == 37);\n                *(int32_t *)(v86 + 24) = (int32_t)v84;\n                *(char *)(v86 + 30) = 1;\n                int64_t v87 = v86 + 32; // 0x40250c\n                *(int64_t *)v87 = 0;\n                *(int64_t *)(v86 + 40) = 0;\n                int64_t v88 = function_4064b0(256); // 0x40251c\n                *(int64_t *)(v86 + 72) = 0;\n                *(int64_t *)(v86 + 64) = v88;\n                g80 = 710;\n                if (function_415890(0x100000000 * str2 >> 32, v85 + -1 - v83, v87) != 0) {\n                  lab_0x402b87:\n                    // 0x402b87\n                    function_405e80(v83);\n                    error(0, (int32_t)\"%s: invalid regular expression: %s\" ^ (int32_t)\"%s: invalid regular expression: %s\", dcgettext(NULL, \"%s: invalid regular expression: %s\", 5));\n                    function_402fb0(0);\n                    // UNREACHABLE\n                }\n                int64_t v89 = v85 + 1; // 0x40255c\n                v71 = v82;\n                v66 = v84;\n                v60 = v86;\n                if (*(char *)v89 == 0) {\n                    goto lab_0x402416;\n                } else {\n                    int64_t v90 = function_406820(v89, 0, 10, v86, (int64_t *)&g13); // 0x40257a\n                    v71 = v82;\n                    v66 = v84;\n                    v60 = v86;\n                    if ((int32_t)v90 == 0) {\n                        goto lab_0x402416;\n                    } else {\n                        int64_t v91 = function_405e80(v83); // 0x40258a\n                        error(1, (int32_t)\"%s: integer expected after delimiter\" ^ (int32_t)\"%s: integer expected after delimiter\", dcgettext(NULL, \"%s: integer expected after delimiter\", 5));\n                        v58 = (int64_t *)found_char_pos;\n                        v72 = v82;\n                        v67 = v91;\n                        v61 = v86;\n                        goto lab_0x4025b7;\n                    }\n                }\n            } else {\n                int64_t v92 = function_403540(); // 0x4023b9\n                v77 = (int64_t *)(8 * (int64_t)v75 + a2);\n                *(int32_t *)(v92 + 24) = (int32_t)v84;\n                int64_t v93 = function_406f70(*v77, 0, 10, &v68, (int64_t *)&g13, v20); // 0x4023da\n                if ((int32_t)v93 != 0) {\n                    goto lab_0x402b56;\n                }\n                // 0x4023e7\n                if (v68 == 0) {\n                    // 0x402b2d\n                    error(1, (int32_t)\"%s: line number must be greater than zero\" ^ (int32_t)\"%s: line number must be greater than zero\", dcgettext(NULL, \"%s: line number must be greater than zero\", 5));\n                    goto lab_0x402b56;\n                }\n                // 0x4023f5\n                v81 = v69;\n                v79 = v77;\n                v80 = g44;\n                if (v68 < g44) {\n                    goto lab_0x402be4;\n                }\n                // 0x402405\n                v70 = v69;\n                v63 = v68;\n                v65 = v84;\n                v59 = v92;\n                v58 = v77;\n                v72 = v69;\n                v67 = v84;\n                v61 = v92;\n                if (v68 == g44) {\n                    goto lab_0x4025b7;\n                } else {\n                    goto lab_0x40240b;\n                }\n            }\n        }\n        // 0x402bbc\n        error(1, (int32_t)\"%s: closing delimiter '%c' missing\" ^ (int32_t)\"%s: closing delimiter '%c' missing\", dcgettext(NULL, \"%s: closing delimiter '%c' missing\", 5));\n        v81 = v82;\n        v79 = NULL;\n        v80 = 1;\n      lab_0x402be4:\n        // 0x402be4\n        function_404210(v80, &oact);\n        function_405e80(*v79);\n        error(1, (int32_t)\"line number %s is smaller than preceding line number, %s\" ^ (int32_t)\"line number %s is smaller than preceding line number, %s\", dcgettext(NULL, \"line number %s is smaller than preceding line number, %s\", 5));\n        v73 = v81;\n      lab_0x402c25:\n        // 0x402c25\n        v76 = 8 * (int64_t)v73 + g52;\n        goto lab_0x402afe;\n    } else {\n        goto lab_0x402423_2;\n    }\n  lab_0x40226a:\n    // 0x40226a\n    if ((v22 & (int32_t)v36) != 0) {\n        // 0x402c3a\n        error(1, (int32_t)\"invalid flags in conversion specification: %%%c%c\" ^ (int32_t)\"invalid flags in conversion specification: %%%c%c\", dcgettext(NULL, \"invalid flags in conversion specification: %%%c%c\", 5));\n        goto lab_0x402c6f;\n    }\n    int64_t v94 = v44 + 1; // 0x402274\n    v21 = v94;\n    v26 = *(char *)v94;\n    int64_t v95; // 0x4021e9\n    v23 = v95;\n    v28 = 1;\n    goto lab_0x402162;\n  lab_0x40224e:\n    // 0x40224e\n    v40 = v41;\n    v33 = v35 & 0xfffffffe | 1;\n    goto lab_0x4021af;\n  lab_0x4021af:;\n    int64_t v97 = v40 + 1; // 0x4021af\n    v17 = *(char *)v97;\n    v38 = v97;\n    v31 = v33;\n    goto lab_0x402198;\n  lab_0x4021bd:;\n    int64_t v98 = v39; // 0x4021c6\n    char v99 = v18; // 0x4021c6\n    int64_t v100 = v39; // 0x4021c6\n    if (v18 == 57 || (int32_t)v18 < 57) {\n        int64_t v101 = v98 + 1; // 0x4021d0\n        char v102 = *(char *)v101; // 0x4021d4\n        v98 = v101;\n        v99 = v102;\n        v100 = v101;\n        while (v102 == 57 || (int32_t)v102 < 57) {\n            // 0x4021d0\n            v101 = v98 + 1;\n            v102 = *(char *)v101;\n            v98 = v101;\n            v99 = v102;\n            v100 = v101;\n        }\n    }\n    int64_t v103 = v100;\n    char v104 = v99;\n    int64_t v105 = v103; // 0x4021e3\n    int64_t v106 = v32; // 0x4021e3\n    char * v107; // 0x401f00\n    char v108; // 0x401f00\n    int64_t v109; // 0x401f00\n    int64_t v110; // 0x401f00\n    if (v104 == 46) {\n        goto lab_0x4029ab;\n    } else {\n        // 0x4021e1\n        v107 = (char *)v103;\n        v108 = v104;\n        v110 = v103;\n        v109 = v32;\n        goto lab_0x4021e9;\n    }\n  lab_0x4029ab:;\n    int64_t v111 = v105 + 1; // 0x4029ab\n    char * v112 = (char *)v111;\n    char v113 = *v112; // 0x4029af\n    v107 = v112;\n    v108 = v113;\n    v110 = v111;\n    v109 = v106;\n    int64_t v114 = v111; // 0x4029b8\n    while (v113 == 57 || (int32_t)v113 < 57) {\n        // 0x4029ab\n        v111 = v114 + 1;\n        v112 = (char *)v111;\n        v113 = *v112;\n        v107 = v112;\n        v108 = v113;\n        v110 = v111;\n        v109 = v106;\n        v114 = v111;\n    }\n    goto lab_0x4021e9;\n  lab_0x4021e9:\n    // 0x4021e9\n    v34 = v109;\n    v43 = v110;\n    char v115 = v108; // 0x4021e9\n    v16 = v107;\n    v95 = v115;\n    if (v115 == 105) {\n        // break -> 0x402262\n        goto lab_0x402262_2;\n    }\n    if (v115 > 105) {\n        // 0x4021f8\n        v22 = -3;\n        v44 = v43;\n        v36 = v34;\n        switch (v115) {\n            case 117: {\n                // 0x4022de\n                v22 = -2;\n                v44 = v43;\n                v36 = v34;\n                goto lab_0x40226a;\n            }\n            case 120: {\n                goto lab_0x40226a;\n            }\n            case 111: {\n                goto lab_0x40226a;\n            }\n            default: {\n                goto lab_0x402216;\n            }\n        }\n    } else {\n        // 0x402256\n        v22 = -3;\n        v44 = v43;\n        v36 = v34;\n        if (v115 == 88) {\n            goto lab_0x40226a;\n        }\n        if (v115 == 100) {\n            // break -> 0x402262\n            goto lab_0x402262_2;\n        }\n        if (v115 == 0) {\n            // 0x40228b\n            error(1, (int32_t)\"missing conversion specifier in suffix\" ^ (int32_t)\"missing conversion specifier in suffix\", dcgettext(NULL, \"missing conversion specifier in suffix\", 5));\n            v22 = -3;\n            v44 = (int32_t)\"missing conversion specifier in suffix\" ^ (int32_t)\"missing conversion specifier in suffix\";\n            v36 = 1;\n            goto lab_0x40226a;\n        }\n        goto lab_0x402216;\n    }\n  lab_0x402216:\n    // 0x402216\n    if ((*(char *)((2 * v95 | 1) + (int64_t)*__ctype_b_loc()) & 64) == 0) {\n        // 0x40298b\n        error(1, (int32_t)\"invalid conversion specifier in suffix: \\\\%.3o\" ^ (int32_t)\"invalid conversion specifier in suffix: \\\\%.3o\", dcgettext(NULL, \"invalid conversion specifier in suffix: \\\\%.3o\", 5));\n        v105 = (int32_t)\"invalid conversion specifier in suffix: \\\\%.3o\" ^ (int32_t)\"invalid conversion specifier in suffix: \\\\%.3o\";\n        v106 = 1;\n        goto lab_0x4029ab;\n    } else {\n        char * format2 = dcgettext(NULL, \"invalid conversion specifier in suffix: %c\", 5); // 0x402235\n        error(1, (int32_t)\"invalid conversion specifier in suffix: %c\" ^ (int32_t)\"invalid conversion specifier in suffix: %c\", format2);\n        v41 = (int64_t)format2;\n        v35 = 1;\n        goto lab_0x40224e;\n    }\n  lab_0x402b56:\n    // 0x402b56\n    function_405e80(*v77);\n    error(1, (int32_t)\"%s: invalid pattern\" ^ (int32_t)\"%s: invalid pattern\", dcgettext(NULL, \"%s: invalid pattern\", 5));\n    goto lab_0x402b87;\n  lab_0x402423_2:\n    // 0x402423\n    sigemptyset((struct _TYPEDEF_sigset_t *)&g45);\n    int64_t v116 = (int64_t)&g4; // 0x402438\n    int32_t sig_num = *(int32_t *)v116; // 0x40243b\n    sigaction(sig_num, NULL, (struct sigaction *)&oact);\n    if (oact != 1) {\n        // 0x402456\n        sigaddset((struct _TYPEDEF_sigset_t *)&g45, sig_num);\n    }\n    int64_t v117 = v116 + 4; // 0x402463\n    v116 = v117;\n    while (v117 != (int64_t)&g5) {\n        // 0x40243b\n        sig_num = *(int32_t *)v116;\n        sigaction(sig_num, NULL, (struct sigaction *)&oact);\n        if (oact != 1) {\n            // 0x402456\n            sigaddset((struct _TYPEDEF_sigset_t *)&g45, sig_num);\n        }\n        // 0x402463\n        v117 = v116 + 4;\n        v116 = v117;\n    }\n    // 0x40246c\n    oact = 0x403260;\n    int64_t v118; // bp-208, 0x401f00\n    __asm_rep_movsd_memcpy((char *)&v118, (char *)&g45, 32);\n    int64_t v119 = (int64_t)&g4; // 0x402491\n    int32_t sig_num2 = *(int32_t *)v119; // 0x4024a5\n    if (sigismember((struct _TYPEDEF_sigset_t *)&g45, sig_num2) != 0) {\n        // 0x4024b7\n        sigaction(sig_num2, (struct sigaction *)&oact, NULL);\n    }\n    int64_t v120 = v119 + 4; // 0x402498\n    v119 = v120;\n    while (v120 != (int64_t)&g5) {\n        // 0x4024a5\n        sig_num2 = *(int32_t *)v119;\n        if (sigismember((struct _TYPEDEF_sigset_t *)&g45, sig_num2) != 0) {\n            // 0x4024b7\n            sigaction(sig_num2, (struct sigaction *)&oact, NULL);\n        }\n        // 0x402498\n        v120 = v119 + 4;\n        v119 = v120;\n    }\n    // 0x40267d\n    int64_t v121; // 0x401f00\n    int64_t v122; // 0x401f00\n    int64_t v123; // 0x401f00\n    int64_t v124; // 0x4026ab\n    char * v125; // 0x401f00\n    unsigned char v126; // 0x4026be\n    int64_t v127; // 0x4027ca\n    if ((int64_t)g46 == 0) {\n      lab_0x402a3c:\n        // 0x402a3c\n        function_403190();\n        function_403a40();\n        function_403000();\n        if (close(0) == 0) {\n            // 0x402a5a\n            return 0;\n        }\n        goto lab_0x402c6f;\n      lab_0x402416:;\n        int64_t v128 = v66;\n        int64_t v129 = v128 + 1 & 0xffffffff; // 0x402416\n        if (v2 <= v129) {\n            goto lab_0x402423_2;\n        }\n        int64_t v130 = v60;\n        int64_t v131 = 8 * (int64_t)v75 + 8 + a2;\n        int64_t v132 = *(int64_t *)v131; // 0x402371\n        int64_t v133 = v129; // 0x402381\n        int64_t v134 = v132; // 0x402381\n        int64_t v135 = v132; // 0x402381\n        int64_t v136; // 0x402610\n        char * v137; // 0x402605\n        if (*(char *)v132 == 123) {\n            int64_t v138 = -1; // 0x4025f8\n            int64_t v139 = 0; // 0x4025f8\n            while (v138 != 0) {\n                int64_t v140 = v135;\n                v138--;\n                v135 = v140 + v9;\n                v139 = v138;\n                if (*(char *)v140 == 0) {\n                    // break -> \n                    break;\n                }\n                v139 = 0;\n            }\n            int64_t v141 = v132 - 2 + -1 - v139; // 0x402600\n            v137 = (char *)v141;\n            if (*v137 != 125) {\n              lab_0x402d3d:\n                // 0x402d3d\n                function_405e80(v132);\n                error(1, (int32_t)\"%s: '}' is required in repeat count\" ^ (int32_t)\"%s: '}' is required in repeat count\", dcgettext(NULL, \"%s: '}' is required in repeat count\", 5));\n                return &g84;\n            }\n            // 0x402610\n            v136 = v132 + 1;\n            *v137 = 0;\n            if (v136 == v141 - 1) {\n                // 0x402666\n                if (*(char *)v136 != 42) {\n                    goto lab_0x402622;\n                } else {\n                    // 0x40266d\n                    *(char *)(v130 + 28) = 1;\n                    goto lab_0x40264a;\n                }\n            } else {\n                goto lab_0x402622;\n            }\n        } else {\n            goto lab_0x402389;\n        }\n      lab_0x4025b7:\n        // 0x4025b7\n        function_405e80(*v58);\n        error(0, (int32_t)\"warning: line number %s is the same as preceding line number\" ^ (int32_t)\"warning: line number %s is the same as preceding line number\", dcgettext(NULL, \"warning: line number %s is the same as preceding line number\", 5));\n        v70 = v72;\n        v63 = v68;\n        v65 = v67;\n        v59 = v61;\n        goto lab_0x40240b;\n      lab_0x40240b:\n        // 0x40240b\n        g44 = v63;\n        *(int64_t *)(v59 + 8) = v63;\n        v71 = v70;\n        v66 = v65;\n        v60 = v59;\n        goto lab_0x402416;\n      lab_0x402389:\n        // 0x402389\n        v74 = v133;\n        v69 = v71;\n        v64 = v133;\n        v62 = v134;\n        goto lab_0x402391;\n      lab_0x402622:;\n        int64_t v142 = function_406f70(v136, 0, 10, &oact, (int64_t *)&g13, v20); // 0x402634\n        if ((int32_t)v142 != 0) {\n            // 0x402d05\n            int64_t v143; // 0x402371\n            function_405e80(*(int64_t *)(g52 + v143));\n            error(1, (int32_t)\"%s}: integer required between '{' and '}'\" ^ (int32_t)\"%s}: integer required between '{' and '}'\", dcgettext(NULL, \"%s}: integer required between '{' and '}'\", 5));\n            goto lab_0x402d3d;\n        }\n        // 0x402641\n        *(int64_t *)(v130 + 16) = oact;\n        goto lab_0x40264a;\n      lab_0x40264a:\n        // 0x40264a\n        *v137 = 125;\n        int64_t v144 = v128 + 2 & 0xffffffff; // 0x40264f\n        if (v2 <= v144) {\n            goto lab_0x402423_2;\n        }\n        // 0x40265c\n        v133 = v144;\n        v134 = *(int64_t *)(v131 + 8);\n        goto lab_0x402389;\n      lab_0x402790:\n        // 0x402790\n        if (function_403b30((int64_t)g61 + 1) == 0) {\n            // 0x4028be\n            if (g48 == 0) {\n                // break (via goto) -> 0x4028b2\n                goto lab_0x4028b2_3;\n            }\n        }\n        // 0x4027a9\n        v121 = g47;\n        v123 = v127;\n        goto lab_0x4027b3;\n      lab_0x40275a_3:\n        // 0x40275a\n        v25 = v124;\n        v19 = v126;\n        int64_t v96 = v122; // 0x40275e\n        if (*v125 == 0) {\n            goto lab_0x402cbd;\n        } else {\n            if (v126 == 0) {\n                goto lab_0x402a19;\n            } else {\n                goto lab_0x40276d;\n            }\n        }\n      lab_0x402162:\n        // 0x402162\n        v29 = v28;\n        v27 = v26;\n        v37 = v21;\n        v24 = v23;\n        v30 = v29;\n        if (v26 == 0) {\n            // break -> 0x4022e5\n            goto lab_0x4022e5;\n        }\n        goto lab_0x40216d;\n      lab_0x402afe:\n        // 0x402afe\n        function_405e80(*(int64_t *)v76);\n        error(0, (int32_t)\"%s: line number out of range\" ^ (int32_t)\"%s: line number out of range\", dcgettext(NULL, \"%s: line number out of range\", 5));\n        function_402fb0(0);\n        // UNREACHABLE\n      lab_0x402c6f:\n        // 0x402c6f\n        error(0, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n        function_402fb0(0);\n        // UNREACHABLE\n      lab_0x402cbd:\n        // 0x402cbd\n        function_403a70(v25, v96, v19 % 256);\n        // UNREACHABLE\n    }\n    int64_t v157 = g47;\n    int64_t v158 = 0; // 0x4028cd\n    uint64_t v145; // 0x401f00\n    int64_t * v150; // 0x401f00\n    while (true) {\n        int64_t v148 = 96 * v158;\n        int64_t v159 = v157; // 0x4026a5\n        int64_t v160 = 0; // 0x4026a5\n        v121 = v157;\n        v123 = 0;\n        int64_t v149; // 0x401f00\n        if (*(char *)((v148 || 30) + v157) == 0) {\n            while (true) {\n              lab_0x4027b3:\n                // 0x4027b3\n                v145 = v123;\n                int64_t v146 = v121;\n                int64_t v147 = v146 + v148; // 0x4027b3\n                if (*(char *)(v147 + 28) == 0) {\n                    // 0x4027bc\n                    v149 = v146;\n                    if (v145 > *(int64_t *)(v147 + 16)) {\n                        // break -> 0x4028cd\n                        break;\n                    }\n                }\n                // 0x4027c6\n                v150 = (int64_t *)(v147 + 8);\n                function_403190();\n                int64_t v151 = (int64_t)g61 + 1; // 0x4027de\n                if (function_403b30(v151) == 0 && g48 != 0) {\n                    // break (via goto) -> 0x4028b2\n                    goto lab_0x4028b2_3;\n                }\n                // 0x4027f0\n                v127 = v145 + 1;\n                uint64_t v152 = *v150 * v127; // 0x4027da\n                int64_t v153 = function_403c10(v151); // 0x4027f0\n                int64_t v154 = v153; // 0x4027fc\n                if (v152 > v153) {\n                    int64_t v155 = function_403960(); // 0x40280b\n                    if (v155 == 0) {\n                        // break (via goto) -> 0x4028b2\n                        goto lab_0x4028b2_3;\n                    }\n                    int64_t v156 = v154 + 1;\n                    function_403480(v155, v155 + 8);\n                    v154 = v156;\n                    while (v152 != v156) {\n                        // 0x40280b\n                        v155 = function_403960();\n                        if (v155 == 0) {\n                            // break (via goto) -> 0x4028b2\n                            goto lab_0x4028b2_3;\n                        }\n                        // 0x402819\n                        v156 = v154 + 1;\n                        function_403480(v155, v155 + 8);\n                        v154 = v156;\n                    }\n                    // 0x40282e\n                    function_403000();\n                    if (g48 == 0) {\n                        goto lab_0x402790;\n                    } else {\n                        // 0x402840\n                        function_403960();\n                        goto lab_0x402790;\n                    }\n                } else {\n                    // 0x4027fe\n                    function_403000();\n                    if (g48 != 0) {\n                        // 0x402840\n                        function_403960();\n                        goto lab_0x402790;\n                    } else {\n                        goto lab_0x402790;\n                    }\n                }\n            }\n        } else {\n            while (true) {\n                // 0x4026ab\n                v122 = v160;\n                int64_t v161 = v159;\n                v124 = v161 + v148;\n                v125 = (char *)(v124 + 28);\n                if (*v125 == 0) {\n                    // 0x4026b4\n                    v149 = v161;\n                    if (v122 > *(int64_t *)(v124 + 16)) {\n                        // break -> 0x4028cd\n                        break;\n                    }\n                }\n                // 0x4026be\n                v126 = *(char *)(v124 + 29);\n                if (v126 == 0) {\n                    // 0x402966\n                    function_403190();\n                }\n                // 0x4026cc\n                if (g48 != 0) {\n                    // 0x4026d5\n                    if (g61 != 0) {\n                        // 0x402a28\n                        function_403960();\n                    }\n                }\n                int64_t * v162 = (int64_t *)v124; // 0x4026e3\n                int64_t v163 = v124 + 32; // 0x4026e8\n                char * format3; // 0x402ad6\n                if (*v162 >= 0) {\n                    int64_t v164 = (int64_t)g61 + 1; // 0x402745\n                    g61 = v164;\n                    int64_t v165 = function_403b30(v164); // 0x402750\n                    if (v165 == 0) {\n                        goto lab_0x40275a_3;\n                    }\n                    int64_t v166 = *(int64_t *)v165; // 0x4026f8\n                    int64_t v167 = *(int64_t *)(v165 + 8); // 0x4026fb\n                    int64_t v168 = v166 + (int64_t)(*(char *)(v166 - 1 + v167) == 10); // 0x40270b\n                    int64_t v169 = function_416210(v163, v167, v168, 0, v168, 0); // 0x402717\n                    if (v169 == -2) {\n                        // 0x402aca\n                        format3 = dcgettext(NULL, \"error in regular expression search\", 5);\n                        error(0, (int32_t)\"error in regular expression search\" ^ (int32_t)\"error in regular expression search\", format3);\n                        function_402fb0(0);\n                        // UNREACHABLE\n                    }\n                    while (v169 == -1) {\n                        int64_t v170 = function_403960(); // 0x402730\n                        if (v126 == 0) {\n                            // 0x402970\n                            function_403480(v170, v170 + 8);\n                        }\n                        int64_t v171 = (int64_t)g61 + 1; // 0x402745\n                        g61 = v171;\n                        int64_t v172 = function_403b30(v171); // 0x402750\n                        if (v172 == 0) {\n                            goto lab_0x40275a_3;\n                        }\n                        v166 = *(int64_t *)v172;\n                        v167 = *(int64_t *)(v172 + 8);\n                        v168 = v166 + (int64_t)(*(char *)(v166 - 1 + v167) == 10);\n                        v169 = function_416210(v163, v167, v168, 0, v168, 0);\n                        if (v169 == -2) {\n                            // 0x402aca\n                            format3 = dcgettext(NULL, \"error in regular expression search\", 5);\n                            error(0, (int32_t)\"error in regular expression search\" ^ (int32_t)\"error in regular expression search\", format3);\n                            function_402fb0(0);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    int64_t v173 = (int64_t)g61 + 1; // 0x40288b\n                    g61 = v173;\n                    int64_t v174 = function_403b30(v173); // 0x402896\n                    if (v174 == 0) {\n                        goto lab_0x40275a_3;\n                    }\n                    int64_t v175 = *(int64_t *)v174; // 0x402850\n                    int64_t v176 = *(int64_t *)(v174 + 8); // 0x402853\n                    int64_t v177 = v175 + (int64_t)(*(char *)(v175 - 1 + v176) == 10); // 0x402863\n                    int64_t v178 = function_416210(v163, v176, v177, 0, v177, 0); // 0x40286f\n                    if (v178 == -2) {\n                        // 0x402aca\n                        format3 = dcgettext(NULL, \"error in regular expression search\", 5);\n                        error(0, (int32_t)\"error in regular expression search\" ^ (int32_t)\"error in regular expression search\", format3);\n                        function_402fb0(0);\n                        // UNREACHABLE\n                    }\n                    while (v178 == -1) {\n                        // 0x402884\n                        v173 = (int64_t)g61 + 1;\n                        g61 = v173;\n                        v174 = function_403b30(v173);\n                        if (v174 == 0) {\n                            goto lab_0x40275a_3;\n                        }\n                        // 0x402850\n                        v175 = *(int64_t *)v174;\n                        v176 = *(int64_t *)(v174 + 8);\n                        v177 = v175 + (int64_t)(*(char *)(v175 - 1 + v176) == 10);\n                        v178 = function_416210(v163, v176, v177, 0, v177, 0);\n                        if (v178 == -2) {\n                            // 0x402aca\n                            format3 = dcgettext(NULL, \"error in regular expression search\", 5);\n                            error(0, (int32_t)\"error in regular expression search\" ^ (int32_t)\"error in regular expression search\", format3);\n                            function_402fb0(0);\n                            // UNREACHABLE\n                        }\n                    }\n                }\n                uint64_t v179 = *v162 + (int64_t)g61; // 0x4028df\n                int32_t v180 = *(int32_t *)(v124 + 24); // 0x4028eb\n                uint64_t v181 = function_403c10(v163); // 0x4028f2\n                v73 = v180;\n                if (v179 < v181) {\n                    goto lab_0x402c25;\n                }\n                int64_t v182 = 0x100000000 * v179 / 0x100000000 - v181; // 0x402907\n                if (v182 != 0) {\n                    int64_t v183 = 0; // 0x402910\n                    int64_t v184 = function_403960(); // 0x402919\n                    if (v184 == 0) {\n                        // 0x402aee\n                        v76 = g52 + 8 * (int64_t)v180;\n                        goto lab_0x402afe;\n                    }\n                    // 0x402927\n                    if (v126 == 0) {\n                        // 0x40292c\n                        function_403480(v184, v184 + 8);\n                    }\n                    while (v182 != v183 + 1) {\n                        // 0x402910\n                        v183++;\n                        v184 = function_403960();\n                        if (v184 == 0) {\n                            // 0x402aee\n                            v76 = g52 + 8 * (int64_t)v180;\n                            goto lab_0x402afe;\n                        }\n                        // 0x402927\n                        if (v126 == 0) {\n                            // 0x40292c\n                            function_403480(v184, v184 + 8);\n                        }\n                    }\n                }\n                if (v126 == 0) {\n                    // 0x402a32\n                    function_403000();\n                }\n                // 0x402943\n                if (*v162 >= 1) {\n                    // 0x40294a\n                    g61 = v179;\n                }\n                // 0x402956\n                v159 = g47;\n                v160 = v122 + 1;\n            }\n        }\n        // 0x4028cd\n        v157 = v149;\n        v158 = 0x100000000 * v158 + 0x100000000 >> 32;\n        if (v158 >= (int64_t)g46) {\n            goto lab_0x402a3c;\n        }\n    }\n  lab_0x4028b2_3:\n    // 0x4028b2\n    function_403290(*v150, v145);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402d70",
            "funcEndAddr": "402d9b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402d70\n    int64_t v1; // 0x402d70\n    __libc_start_main(0x401f00, (int32_t)a4, (char **)&v1, (void (*)())0x4168e0, (void (*)())0x416940, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d9b",
            "funcStartAddr": "402d9b",
            "funcEndAddr": "402dba",
            "decompiledFuncCode": "int64_t function_402d9b(void) {\n    // 0x402d9b\n    return &g36;\n}\n"
        },
        {
            "funcName": "function_402dba",
            "funcStartAddr": "402dba",
            "funcEndAddr": "402df1",
            "decompiledFuncCode": "int64_t function_402dba(void) {\n    // 0x402dba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402df1",
            "funcStartAddr": "402df1",
            "funcEndAddr": "402e48",
            "decompiledFuncCode": "int64_t function_402df1(void) {\n    // 0x402df1\n    if (g40 != 0) {\n        // 0x402e47\n        int64_t result; // 0x402df1\n        return result;\n    }\n    int64_t v1 = g41; // 0x402e24\n    int64_t result2; // 0x402e36\n    if (g41 >= ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x402e36\n        result2 = function_402d9b();\n        g40 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x402e26\n        v1++;\n    }\n    // 0x402e1a\n    g41 = v1;\n    // 0x402e36\n    result2 = function_402d9b();\n    g40 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402e48",
            "funcStartAddr": "402e48",
            "funcEndAddr": "402e4d",
            "decompiledFuncCode": "int64_t function_402e48(void) {\n    // 0x402e48\n    return function_402dba();\n}\n"
        },
        {
            "funcName": "function_402e50",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402f08",
            "decompiledFuncCode": "int64_t function_402e50(int64_t a1) {\n    // 0x402e50\n    strcpy(g59, g58);\n    if (g57 == NULL) {\n        // 0x402ec0\n        __sprintf_chk((char *)((int64_t)strlen(g58) + (int64_t)g59), 1, -1, \"%0*u\", (int64_t)g24, (int32_t)a1);\n        return (int64_t)g59;\n    }\n    // 0x402e75\n    __sprintf_chk((char *)((int64_t)strlen(g58) + (int64_t)g59), 1, -1, g57);\n    return (int64_t)g59;\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "402fab",
            "decompiledFuncCode": "int64_t function_402f10(int32_t a1) {\n    // 0x402f10\n    if (g56 == 0) {\n        // 0x402fa0\n        g56 = 0;\n        return 0;\n    }\n    int64_t v1 = 0; // 0x402f10\n    int32_t result; // 0x402f10\n    while (true) {\n        int64_t v2 = v1;\n        int64_t path = function_402e50(v2); // 0x402f3f\n        int64_t v3; // 0x402f10\n        if ((char)a1 != 0 | unlink((char *)path) == 0) {\n            int64_t v4 = v2 + 1; // 0x402f36\n            v3 = v4;\n            result = g56;\n            if (g56 <= (int32_t)v4) {\n                // break -> 0x402f8f\n                break;\n            }\n        } else {\n            int64_t v5 = v2 + 1; // 0x402f62\n            error(0, *__errno_location(), \"%s\", (char *)function_405d00(0, 3, path));\n            v3 = v5;\n            result = g56;\n            if (g56 <= (int32_t)v5) {\n                // break -> 0x402f8f\n                break;\n            }\n        }\n        // 0x402f3d\n        v1 = v3 & 0xffffffff;\n    }\n    // 0x402f8f\n    g56 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402fb0",
            "funcStartAddr": "402fb0",
            "funcEndAddr": "402ff6",
            "decompiledFuncCode": "int64_t function_402fb0(int64_t a1) {\n    // 0x402fb0\n    function_403000();\n    int64_t oset; // bp-136, 0x402fb0\n    sigprocmask(SIG_BLOCK, (struct _TYPEDEF_sigset_t *)&g45, (struct _TYPEDEF_sigset_t *)&oset);\n    if (g50 != 0) {\n        // 0x402fd6\n        function_402f10(0);\n    }\n    // 0x402fdd\n    sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&oset, NULL);\n    exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403000",
            "funcStartAddr": "403000",
            "funcEndAddr": "40318e",
            "decompiledFuncCode": "int64_t function_403000(void) {\n    struct _IO_FILE * v1 = g54; // 0x403000\n    int64_t result; // 0x403000\n    if (v1 == NULL) {\n        // 0x403060\n        return result;\n    }\n    // 0x40300c\n    if ((*(char *)v1 & 32) != 0) {\n        // 0x403148\n        function_405c30(4, (int64_t)g53);\n        error(0, (int32_t)\"write error for %s\" ^ (int32_t)\"write error for %s\", dcgettext(NULL, \"write error for %s\", 5));\n        g54 = NULL;\n        function_402fb0(0);\n        // UNREACHABLE\n    }\n    int64_t v2 = function_4073b0((int64_t)v1, result); // 0x40301d\n    if ((int32_t)v2 != 0) {\n        int64_t v3 = function_405d00(0, 3, (int64_t)g53); // 0x403118\n        error(0, *__errno_location(), \"%s\", (char *)v3);\n        g54 = NULL;\n        function_402fb0(0);\n        // UNREACHABLE\n    }\n    // 0x40302a\n    int64_t result2; // 0x403000\n    int64_t oset; // bp-152, 0x403000\n    if (g55 == 0) {\n        // 0x403036\n        if (g49 != 0) {\n            // 0x403090\n            sigprocmask(g55, (struct _TYPEDEF_sigset_t *)&g45, (struct _TYPEDEF_sigset_t *)&oset);\n            int32_t v4 = unlink(g53); // 0x4030a7\n            int32_t err_num = *__errno_location(); // 0x4030ba\n            g56 -= (int32_t)(v4 == 0);\n            result2 = sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&oset, NULL);\n            if (v4 != 0) {\n                // 0x4030e2\n                error(0, err_num, \"%s\", (char *)function_405d00(0, 3, (int64_t)g53));\n                result2 = &g84;\n            }\n            // 0x403048\n            g54 = NULL;\n            return result2;\n        }\n    }\n    // 0x40303f\n    result2 = v2;\n    if (g51 == 0) {\n        int64_t v5 = function_404210((int64_t)g55, &oset); // 0x40306b\n        result2 = __fprintf_chk(g37, 1, \"%s\\n\", (char *)v5);\n    }\n    // 0x403048\n    g54 = NULL;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403190",
            "funcStartAddr": "403190",
            "funcEndAddr": "403260",
            "decompiledFuncCode": "int64_t function_403190(void) {\n    int64_t v1 = function_402e50((int64_t)(uint32_t)g56); // 0x4031a4\n    g53 = (char *)v1;\n    int64_t v2 = v1; // 0x4031bc\n    int32_t err_num = 75; // 0x4031bc\n    if (g56 != -1) {\n        // 0x4031e8\n        int64_t oset; // bp-152, 0x403190\n        sigprocmask(SIG_BLOCK, (struct _TYPEDEF_sigset_t *)&g45, (struct _TYPEDEF_sigset_t *)&oset);\n        int64_t v3 = function_404170(v1, &g1); // 0x4031ff\n        g54 = (struct _IO_FILE *)v3;\n        err_num = *__errno_location();\n        g56 += (int32_t)(v3 != 0);\n        int32_t result = sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&oset, NULL); // 0x403235\n        if (v3 != 0) {\n            // 0x40323f\n            g55 = 0;\n            return result;\n        }\n        // 0x403254\n        v2 = (int64_t)g53;\n    }\n    // 0x4031be\n    error(0, err_num, \"%s\", (char *)function_405d00(0, 3, v2));\n    function_402fb0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403260",
            "funcStartAddr": "403260",
            "funcEndAddr": "403289",
            "decompiledFuncCode": "int64_t function_403260(int64_t a1, int64_t a2) {\n    // 0x403260\n    if (g50 != 0) {\n        // 0x40326e\n        function_402f10(1);\n    }\n    int32_t sig_handler = a1; // 0x403278\n    signal(sig_handler, SIG_DFL);\n    return raise(sig_handler);\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "403337",
            "decompiledFuncCode": "int64_t function_403290(int64_t a1, int64_t a2) {\n    // 0x403290\n    int64_t v1; // bp-56, 0x403290\n    int64_t v2 = function_404210(a1, &v1); // 0x40329e\n    function_405e80(v2);\n    __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: %s: line number out of range\", 5));\n    int64_t v3; // 0x403290\n    if (a2 == 0) {\n        // 0x403324\n        fputc(10, g39);\n        v3 = 10;\n    } else {\n        // 0x4032e7\n        function_404210(a2, &v1);\n        __fprintf_chk(g39, 1, dcgettext(NULL, \" on repetition %s\\n\", 5));\n        v3 = (int64_t)g39;\n    }\n    // 0x40331f\n    function_402fb0(v3);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403340",
            "funcStartAddr": "403340",
            "funcEndAddr": "40342b",
            "decompiledFuncCode": "int64_t function_403340(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    if (a1 == 0) {\n        int64_t v1 = function_4064b0(1312); // 0x4033f8\n        *(int64_t *)a2 = v1;\n        *(int64_t *)(v1 + 1304) = 0;\n        *(int64_t *)v1 = 0;\n        *(int64_t *)(v1 + 8) = 0;\n        *(int64_t *)(v1 + 16) = 0;\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v2 = a2; // 0x403368\n    int64_t v3 = a2; // 0x403368\n    if (a2 == 80) {\n        // 0x4033a0\n        v3 = function_4064b0(1312);\n        *(int64_t *)(v3 + 1304) = 0;\n        int64_t * v4 = (int64_t *)v3; // 0x4033b5\n        *v4 = 0;\n        *(int64_t *)(v3 + 8) = 0;\n        *(int64_t *)(v3 + 16) = 0;\n        *(int64_t *)1384 = v3;\n        *(int64_t *)80 = v3;\n        v2 = *v4;\n    }\n    int64_t * v5 = (int64_t *)(v3 + 8); // 0x40336a\n    int64_t v6 = *v5; // 0x40336a\n    int64_t result = v2 + 1; // 0x40336e\n    int64_t v7 = 16 * v6 + v3; // 0x40337d\n    *(int64_t *)(v7 + 32) = a3;\n    *(int64_t *)(v7 + 24) = a4;\n    *(int64_t *)v3 = result;\n    *v5 = v6 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "40347a",
            "decompiledFuncCode": "int64_t function_403430(int64_t a1, int64_t a2) {\n    // 0x403430\n    if (a2 == 0) {\n        // 0x40345c\n        *(int64_t *)a2 = 0;\n        free(NULL);\n        *(int64_t *)a1 = 0;\n        return &g84;\n    }\n    int64_t v1 = *(int64_t *)(a2 + 1304); // 0x403448\n    free((int64_t *)a2);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        v1 = *(int64_t *)(v2 + 1304);\n        free((int64_t *)v2);\n    }\n    // 0x40345c\n    *(int64_t *)a2 = 0;\n    free((int64_t *)v1);\n    *(int64_t *)a1 = 0;\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_403480",
            "funcStartAddr": "403480",
            "funcEndAddr": "403504",
            "decompiledFuncCode": "int64_t function_403480(int64_t n, int64_t a2) {\n    int32_t result = fwrite_unlocked((int64_t *)1, 1, (int32_t)n, g54); // 0x40349e\n    if (result == 1) {\n        // 0x4034a8\n        g55 += result;\n        return result;\n    }\n    // 0x4034b6\n    function_405c30(4, (int64_t)g53);\n    error(0, *__errno_location(), dcgettext(NULL, \"write error for %s\", 5));\n    g54 = NULL;\n    function_402fb0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403510",
            "funcStartAddr": "403510",
            "funcEndAddr": "40353d",
            "decompiledFuncCode": "int64_t function_403510(int64_t a1) {\n    // 0x403510\n    error(0, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    function_402fb0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403540",
            "funcStartAddr": "403540",
            "funcEndAddr": "403624",
            "decompiledFuncCode": "int64_t function_403540(void) {\n    int64_t v1 = g46; // 0x403544\n    int128_t v2 = g43; // 0x40354b\n    int64_t v3 = g47; // 0x403552\n    int64_t v4 = v1; // 0x40355c\n    int64_t v5 = v3; // 0x40355c\n    int64_t v6; // 0x403540\n    int64_t v7; // 0x403540\n    int64_t v8; // 0x403540\n    if (v1 == (int64_t)v2) {\n        if (v3 == 0) {\n            // 0x4035f0\n            v7 = 1;\n            v8 = 96;\n            if (v1 == 0) {\n                goto lab_0x4035c7;\n            } else {\n                uint128_t v9 = 96 * (v2 & 0xffffffffffffffff); // 0x4035fd\n                if ((int64_t)v9 < 0) {\n                    // 0x403610\n                    function_403510(v3);\n                }\n                // 0x40360b\n                v6 = v1;\n                if (v9 % 0x7f0000000000000001 != 0) {\n                    // 0x403610\n                    function_403510(v3);\n                    // UNREACHABLE\n                }\n                goto lab_0x4035bf;\n            }\n        } else {\n            if (v1 >= 0xe38e38e38e38e3) {\n                // 0x403610\n                function_403510(v3);\n                // UNREACHABLE\n            }\n            // 0x4035b4\n            v6 = v1 + 1 + v1 / 2;\n            goto lab_0x4035bf;\n        }\n    } else {\n        goto lab_0x40355e;\n    }\n  lab_0x40355e:\n    // 0x40355e\n    g46 = v4 + 1;\n    int64_t result = 96 * v4 + v5; // 0x403571\n    *(char *)(result + 30) = 0;\n    *(int64_t *)(result + 16) = 0;\n    *(char *)(result + 28) = 0;\n    *(int64_t *)(result + 8) = 0;\n    *(int64_t *)result = 0;\n    return result;\n  lab_0x4035c7:\n    // 0x4035c7\n    g43 = v7;\n    int64_t v10 = function_406510(v3, v8); // 0x4035ce\n    g47 = v10;\n    v4 = g46;\n    v5 = v10;\n    goto lab_0x40355e;\n  lab_0x4035bf:\n    // 0x4035bf\n    v7 = v6;\n    v8 = 96 * v6;\n    goto lab_0x4035c7;\n}\n"
        },
        {
            "funcName": "function_403630",
            "funcStartAddr": "403630",
            "funcEndAddr": "403953",
            "decompiledFuncCode": "int64_t function_403630(void) {\n    int32_t v1 = g63;\n    int64_t v2 = v1 >= 0x1fff ? (int64_t)v1 : 0x1fff; // 0x40372c\n    int64_t v3; // 0x403630\n    int64_t v4; // 0x403630\n    int64_t v5; // 0x403630\n    int64_t v6; // 0x403630\n    int64_t * v7; // 0x403630\n    int64_t v8; // 0x4036b5\n    int64_t * v9; // 0x403630\n    int64_t * v10; // 0x4036bd\n    int64_t * v11; // 0x4036c5\n    int64_t * v12; // 0x4036cd\n    int64_t * v13; // 0x4036d1\n    int64_t * v14; // 0x403630\n    int64_t v15; // 0x403681\n    int64_t * v16; // 0x403630\n    int64_t v17; // 0x40369e\n    int64_t * v18; // 0x40369e\n    int64_t v19; // 0x4036a9\n    while (true) {\n      lab_0x403756:;\n        uint64_t v20 = v2;\n        int64_t v21 = 0x2000; // 0x40375d\n        int64_t v22 = 0x1fff; // 0x40375d\n        if (v20 >= 0x2000) {\n            int64_t v23 = v20 - 0x1800 & -2048; // 0x403667\n            v21 = v23 + 0x2000;\n            v22 = v23 + 0x1fff;\n        }\n        int64_t v24 = v22;\n        v15 = function_4064b0(72);\n        int64_t v25 = function_4064b0(v21); // 0x40368c\n        int32_t v26 = g63; // 0x403691\n        v16 = (int64_t *)v15;\n        *v16 = v24;\n        v17 = v15 + 40;\n        v18 = (int64_t *)v17;\n        *v18 = v25;\n        v19 = v15 + 56;\n        v7 = (int64_t *)v19;\n        *v7 = 0;\n        int64_t v27 = g62 + 1; // 0x4036b1\n        v8 = v15 + 48;\n        v9 = (int64_t *)v8;\n        *v9 = 0;\n        v10 = (int64_t *)(v15 + 32);\n        *v10 = 0;\n        v11 = (int64_t *)(v15 + 8);\n        *v11 = 0;\n        v12 = (int64_t *)(v15 + 24);\n        *v12 = v27;\n        v13 = (int64_t *)(v15 + 16);\n        *v13 = v27;\n        v14 = (int64_t *)(v15 + 64);\n        *v14 = 0;\n        v3 = v25;\n        v5 = v24;\n        if (v26 != 0) {\n            int64_t v28 = v26; // 0x403691\n            memcpy((int64_t *)v25, (int64_t *)g64, v26);\n            *v11 = v28;\n            g63 = 0;\n            int64_t v29 = v24 - v28; // 0x403799\n            v6 = v28;\n            v4 = v25;\n            if (v29 != 0) {\n                // 0x40394b\n                v3 = v25 + v28;\n                v5 = v29;\n                goto lab_0x4036e6;\n            } else {\n                goto lab_0x4037a2;\n            }\n        } else {\n            goto lab_0x4036e6;\n        }\n    }\n  lab_0x4038b2:\n    // 0x4038b2\n    error(0, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n    function_402fb0(0);\n    // UNREACHABLE\n  lab_0x4036e6:;\n    int64_t v30 = function_405ea0(0, v3, v5); // 0x4036ee\n    if (v30 != 0) {\n        if (v30 == -1) {\n            // break -> 0x4038b2\n            goto lab_0x4038b2;\n        }\n    } else {\n        // 0x4036fc\n        g60 = 1;\n    }\n    int64_t v31 = *v11 + v30; // 0x403703\n    *v11 = v31;\n    int64_t v32 = 0; // 0x40370e\n    if (v31 != 0) {\n        // 0x403910\n        v6 = v31;\n        v4 = *v18;\n        goto lab_0x4037a2;\n    } else {\n        goto lab_0x403714;\n    }\n  lab_0x4037a2:;\n    int64_t v33 = function_408460(v4, 10, v6); // 0x4037e4\n    int64_t v34 = v33; // 0x4037ef\n    int64_t v35 = v4; // 0x4037ef\n    int64_t v36 = v6; // 0x4037ef\n    int64_t v37 = v6; // 0x4037ef\n    int64_t v38 = v4; // 0x4037ef\n    int64_t v39 = 0; // 0x4037ef\n    if (v33 != 0) {\n        int64_t v40 = 1; // 0x4037c2\n        int64_t v41 = v34 + 1; // 0x4037c6\n        int64_t v42 = v34 - v35 + 1; // 0x4037ca\n        int64_t v43 = v36 - v42; // 0x4037d1\n        function_403340(v8, v19, v35, v42);\n        int64_t v44 = function_408460(v41, 10, v43); // 0x4037e4\n        v34 = v44;\n        int64_t v45 = v40; // 0x4037ef\n        v35 = v41;\n        v36 = v43;\n        v37 = v43;\n        v38 = v41;\n        v39 = v40;\n        while (v44 != 0) {\n            // 0x4037b0\n            v40 = v45 + 1;\n            v41 = v34 + 1;\n            v42 = v34 - v35 + 1;\n            v43 = v36 - v42;\n            function_403340(v8, v19, v35, v42);\n            v44 = function_408460(v41, 10, v43);\n            v34 = v44;\n            v45 = v40;\n            v35 = v41;\n            v36 = v43;\n            v37 = v43;\n            v38 = v41;\n            v39 = v40;\n        }\n    }\n    int64_t v46 = v39;\n    int64_t v47 = v38;\n    int64_t v48 = v37;\n    int64_t v49 = v47; // 0x4037f4\n    int64_t v50 = v46; // 0x4037f4\n    if (v48 != 0) {\n        // 0x4037f6\n        if (g60 == 0) {\n            int64_t v51 = function_4066b0(v47, v48); // 0x4038e6\n            int64_t v52 = g64; // 0x4038eb\n            free((int64_t *)v52);\n            g64 = v51;\n            g63 = v48;\n            v49 = v52;\n            v50 = v46;\n        } else {\n            // 0x403803\n            function_403340(v8, v19, v47, v48);\n            v49 = v8;\n            v50 = v46 + 1;\n        }\n    }\n    // 0x40381a\n    *v10 = v50;\n    int64_t v53 = g62 + 1; // 0x403825\n    *v13 = v53;\n    *v12 = v53;\n    g62 += v50;\n    v32 = v49;\n    int64_t v54; // 0x403630\n    if (v50 != 0) {\n        // 0x403844\n        *v14 = 0;\n        *v7 = *v9;\n        v54 = g65;\n        if (g65 == 0) {\n            // 0x403860\n            g65 = v15;\n            return 1;\n        }\n        goto lab_0x403883;\n    }\n    goto lab_0x403714;\n  lab_0x403714:\n    // 0x403714\n    if (g60 != 0) {\n        // 0x403920\n        function_403430(v17, v8);\n        free(v16);\n        return (int32_t)&g84 ^ (int32_t)&g84;\n    }\n    int64_t v55 = v32;\n    int64_t v56 = *v16; // 0x403721\n    v2 = 2 * v56;\n    if (v2 < 0) {\n        // 0x403946\n        function_403510(v55);\n        // UNREACHABLE\n    }\n    if (v56 < 0) {\n        // 0x403946\n        function_403510(v55);\n        // UNREACHABLE\n    }\n    // 0x40373e\n    function_403430(v17, v8);\n    free(v16);\n    goto lab_0x403756;\n  lab_0x403883:;\n    int64_t * v57 = (int64_t *)(v54 + 64);\n    int64_t v58 = *v57; // 0x403883\n    v54 = v58;\n    if (v58 == 0) {\n        // 0x40388c\n        *v57 = v15;\n        return 1;\n    }\n    goto lab_0x403883;\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "403a34",
            "decompiledFuncCode": "int64_t function_403960(void) {\n    int64_t v1 = g42; // 0x403961\n    if (v1 != 0) {\n        // 0x40396d\n        function_403430(v1 + 40, v1 + 48);\n        free((int64_t *)v1);\n        g42 = 0;\n    }\n    int64_t v2 = g65; // 0x403997\n    if (g65 == 0) {\n        // 0x403a10\n        if (g60 != 0 || (char)function_403630() == 0) {\n            // 0x4039d6\n            return 0;\n        }\n        // 0x403a22\n        v2 = g65;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 24); // 0x403999\n    uint64_t v4 = *v3; // 0x403999\n    if (v4 > (int64_t)g61) {\n        // 0x4039a6\n        g61 = v4;\n    }\n    int64_t * v5 = (int64_t *)(v2 + 56); // 0x4039ad\n    int64_t v6 = *v5; // 0x4039ad\n    *v3 = v4 + 1;\n    int64_t * v7 = (int64_t *)(v6 + 16); // 0x4039b9\n    int64_t v8 = *v7 + 1; // 0x4039bd\n    *v7 = v8;\n    int64_t result = v6 + 8 + 16 * v8; // 0x4039cc\n    if (*(int64_t *)v6 != v8) {\n        // 0x4039d6\n        return result;\n    }\n    int64_t v9 = *(int64_t *)(v6 + 1304); // 0x4039e0\n    *v5 = v9;\n    if (v9 == 0) {\n        // 0x4039f6\n        g42 = v2;\n        g65 = *(int64_t *)(v2 + 64);\n        return result;\n    }\n    // 0x4039f0\n    if (*(int64_t *)v9 != 0) {\n        // 0x4039d6\n        return result;\n    }\n    // 0x4039f6\n    g42 = v2;\n    g65 = *(int64_t *)(v2 + 64);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403a6b",
            "decompiledFuncCode": "int64_t function_403a40(void) {\n    int64_t result = function_403960(); // 0x403a5c\n    if (result == 0) {\n        // 0x403a66\n        return result;\n    }\n    int64_t v1 = result;\n    function_403480(v1, v1 + 8);\n    int64_t result2 = function_403960(); // 0x403a5c\n    while (result2 != 0) {\n        // 0x403a50\n        v1 = result2;\n        function_403480(v1, v1 + 8);\n        result2 = function_403960();\n    }\n    // 0x403a66\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403b30",
            "decompiledFuncCode": "int64_t function_403a70(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = *(int64_t *)(8 * (int64_t)*(int32_t *)(a1 + 24) + g52); // 0x403a8a\n    function_405e80(v1);\n    __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: %s: match not found\", 5));\n    int64_t v2; // 0x403a70\n    if (a2 == 0) {\n        // 0x403b11\n        fputc(10, g39);\n        v2 = 10;\n    } else {\n        // 0x403acf\n        int64_t v3; // bp-72, 0x403a70\n        function_404210(a2, &v3);\n        __fprintf_chk(g39, 1, dcgettext(NULL, \" on repetition %s\\n\", 5));\n        v2 = (int64_t)g39;\n    }\n    // 0x403b07\n    if ((char)a3 == 0) {\n        // 0x403b24\n        function_403a40();\n        function_403000();\n    }\n    // 0x403b0c\n    function_402fb0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403b30",
            "funcStartAddr": "403b30",
            "funcEndAddr": "403c01",
            "decompiledFuncCode": "int64_t function_403b30(uint64_t a1) {\n    int64_t v1 = g65; // 0x403b43\n    if (g65 == 0) {\n        goto lab_0x403ba0;\n    } else {\n        goto lab_0x403b45;\n    }\n  lab_0x403ba0:\n    // 0x403ba0\n    if (g60 != 0 || (char)function_403630() == 0) {\n        // 0x403ba9\n        return 0;\n    }\n    // 0x403bc1\n    v1 = g65;\n    goto lab_0x403b45;\n  lab_0x403b45:;\n    uint64_t v2 = *(int64_t *)(v1 + 16); // 0x403b45\n    if (v2 > a1) {\n        // 0x403ba9\n        return 0;\n    }\n    int64_t v3 = v2; // 0x403b61\n    int64_t v4 = v1; // 0x403b61\n    if (*(int64_t *)(v1 + 32) + v2 <= a1) {\n        int64_t * v5 = (int64_t *)(v1 + 64); // 0x403b63\n        int64_t v6 = *v5; // 0x403b63\n        int64_t v7 = v6; // 0x403b6a\n        int64_t v8; // 0x403b7e\n        if (v6 == 0) {\n            // 0x403b6c\n            if (g60 != 0 || (char)function_403630() == 0) {\n                // 0x403ba9\n                return 0;\n            }\n            // 0x403b7e\n            v8 = *v5;\n            v7 = v8;\n            if (v8 == 0) {\n                // 0x403b87\n                __assert_fail(\"b\", \"src/csplit.c\", 618, \"find_line\");\n                goto lab_0x403ba0;\n            }\n        }\n        int64_t v9 = *(int64_t *)(v7 + 16); // 0x403b50\n        v3 = v9;\n        v4 = v7;\n        while (*(int64_t *)(v7 + 32) + v9 <= a1) {\n            // 0x403b63\n            v5 = (int64_t *)(v7 + 64);\n            v6 = *v5;\n            v7 = v6;\n            if (v6 == 0) {\n                // 0x403b6c\n                if (g60 != 0 || (char)function_403630() == 0) {\n                    // 0x403ba9\n                    return 0;\n                }\n                // 0x403b7e\n                v8 = *v5;\n                v7 = v8;\n                if (v8 == 0) {\n                    // 0x403b87\n                    __assert_fail(\"b\", \"src/csplit.c\", 618, \"find_line\");\n                    goto lab_0x403ba0;\n                }\n            }\n            // 0x403b50\n            v9 = *(int64_t *)(v7 + 16);\n            v3 = v9;\n            v4 = v7;\n        }\n    }\n    int64_t v10 = a1 - v3; // 0x403bd0\n    int64_t v11 = *(int64_t *)(v4 + 48); // 0x403bd3\n    if (v10 < 80) {\n        // 0x403bf1\n        return v11 + 24 + 16 * v10;\n    }\n    int64_t v12 = v10 - 80; // 0x403be0\n    int64_t v13 = *(int64_t *)(v11 + 1304); // 0x403be4\n    int64_t v14 = v13; // 0x403bef\n    int64_t v15 = v12; // 0x403bef\n    while (v12 >= 80) {\n        // 0x403be0\n        v12 = v15 - 80;\n        v13 = *(int64_t *)(v14 + 1304);\n        v14 = v13;\n        v15 = v12;\n    }\n    // 0x403bf1\n    return v13 + 24 + 16 * v12;\n}\n"
        },
        {
            "funcName": "function_403c10",
            "funcStartAddr": "403c10",
            "funcEndAddr": "403c80",
            "decompiledFuncCode": "int64_t function_403c10(int64_t a1) {\n    // 0x403c10\n    if (g65 != 0) {\n        // 0x403c1c\n        return *(int64_t *)(g65 + 24);\n    }\n    // 0x403c28\n    if (g60 != 0) {\n        // 0x403c50\n        error(1, *__errno_location(), dcgettext(NULL, \"input disappeared\", 5));\n        return &g84;\n    }\n    // 0x403c32\n    if ((char)function_403630() != 0) {\n        // 0x403c3b\n        return *(int64_t *)(g65 + 24);\n    }\n    // 0x403c50\n    error(1, *__errno_location(), dcgettext(NULL, \"input disappeared\", 5));\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_403c80",
            "funcStartAddr": "403c80",
            "funcEndAddr": "40403d",
            "decompiledFuncCode": "int64_t function_403c80(int32_t status) {\n    // 0x403c80\n    if (status != 0) {\n        // 0x403c9a\n        __fprintf_chk(g39, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x403cbf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403cc6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE PATTERN...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ...,\\nand output byte counts of each piece to standard output.\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"\\nRead standard input if FILE is -\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d\\n  -f, --prefix=PREFIX        use PREFIX instead of 'xx'\\n  -k, --keep-files           do not remove output files on errors\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"      --suppress-matched     suppress the lines matching PATTERN\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"  -n, --digits=DIGITS        use specified number of digits instead of 2\\n  -s, --quiet, --silent      do not print counts of output file sizes\\n  -z, --elide-empty-files    remove empty output files\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g37);\n    fputs_unlocked(dcgettext(NULL, \"\\nEach PATTERN may be:\\n  INTEGER            copy up to but not including specified line number\\n  /REGEXP/[OFFSET]   copy up to but not including a matching line\\n  %REGEXP%[OFFSET]   skip to, but not including a matching line\\n  {INTEGER}          repeat the previous pattern specified number of times\\n  {*}                repeat the previous pattern as many times as possible\\n\\nA line OFFSET is a required '+' or '-' followed by a positive integer.\\n\", 5), g37);\n    int64_t v1 = &g2; // bp-136, 0x403e1f\n    bool v2; // 0x403c80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403ea0\n    int64_t v6 = *(int64_t *)v5; // 0x403ea4\n    int64_t v7 = 7; // 0x403eaa\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"csplit\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403eb6\n        char v11 = *(char *)v9; // 0x403eb6\n        char v12 = v11; // 0x403eb6\n        bool v13 = false; // 0x403eb6\n        while (v10 == v11) {\n            // 0x403eac\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403eb6\n            int64_t v15 = v8 + v3; // 0x403eb6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403ec2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x403ec2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403fd4;\n        } else {\n            // 0x403fbe\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404013\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403f24;\n            } else {\n                goto lab_0x403fd4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403f24;\n        } else {\n            // 0x403f0a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404013\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403f24;\n            } else {\n                goto lab_0x403f24;\n            }\n        }\n    }\n  lab_0x403fd4:\n    // 0x403fd4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403f64\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403cbf\n    exit(status);\n    // UNREACHABLE\n  lab_0x403f24:\n    // 0x403f24\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403f64\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403cbf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "404048",
            "decompiledFuncCode": "int64_t function_404040(int64_t a1) {\n    // 0x404040\n    g67 = a1;\n    int64_t result; // 0x404040\n    return result;\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404058",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1) {\n    // 0x404050\n    g66 = a1;\n    int64_t result; // 0x404050\n    return result;\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "4040fe",
            "decompiledFuncCode": "int64_t function_404060(void) {\n    // 0x404060\n    int32_t * err_num; // 0x404076\n    if ((int32_t)function_4162b0((int64_t)g37) == 0) {\n        goto lab_0x40408c;\n    } else {\n        // 0x404076\n        err_num = __errno_location();\n        if (g66 == 0) {\n            goto lab_0x4040a3;\n        } else {\n            // 0x404087\n            if (*err_num != 32) {\n                goto lab_0x4040a3;\n            } else {\n                goto lab_0x40408c;\n            }\n        }\n    }\n  lab_0x40408c:;\n    int64_t result = function_4162b0((int64_t)g39); // 0x404093\n    if ((int32_t)result == 0) {\n        // 0x40409c\n        return result;\n    }\n    // 0x4040de\n    _exit(g26);\n    // UNREACHABLE\n  lab_0x4040a3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4040af\n    if (g67 == 0) {\n        // 0x4040e9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4040c3\n        error(0, *err_num, \"%s: %s\", (char *)function_405cd0((int64_t)g67), v1);\n    }\n    // 0x4040de\n    _exit(g26);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "40416a",
            "decompiledFuncCode": "int64_t function_404100(int32_t fd2, int64_t path, int32_t oflag, int32_t a4) {\n    int32_t fd = open((char *)path, oflag); // 0x404115\n    if (fd != fd2 != fd >= 0) {\n        // 0x404124\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x40413c\n    int32_t * v1 = __errno_location(); // 0x404144\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "404203",
            "decompiledFuncCode": "int64_t function_404170(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x404177\n    int64_t result = (int64_t)file; // 0x404177\n    if (file == NULL) {\n        // 0x404191\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x404187\n    if (v1 >= 3) {\n        // 0x404191\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_405f00((int64_t)v1, v2); // 0x4041aa\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x4041e8\n        function_4073b0(result, v2);\n        // 0x404191\n        return 0;\n    }\n    // 0x4041ae\n    if ((int32_t)function_4073b0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x4041c0\n        if (v4 != NULL) {\n            // 0x404191\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x4041cd\n    close(fd);\n    // 0x404191\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "404258",
            "decompiledFuncCode": "int64_t function_404210(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x404210\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x404222\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40422b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x404254\n    return result;\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "4042f9",
            "decompiledFuncCode": "int64_t function_404260(int64_t str) {\n    // 0x404260\n    if (str == 0) {\n        // 0x4042d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g39);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40426e\n    int64_t result = (int64_t)found_char_pos; // 0x40426e\n    if (found_char_pos == NULL) {\n        // 0x4042c9\n        g68 = str;\n        g38 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x404278\n    if (v1 - str < 7) {\n        // 0x4042c9\n        g68 = str;\n        g38 = str;\n        return result;\n    }\n    // 0x404288\n    bool v2; // 0x404260\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x404260\n    int64_t v5 = result - 6; // 0x404260\n    int64_t v6 = 7; // 0x404296\n    unsigned char v7 = *(char *)v5; // 0x404296\n    char v8 = *(char *)v4; // 0x404296\n    char v9 = v8; // 0x404296\n    bool v10 = false; // 0x404296\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4042a0\n    int64_t v13 = v1; // 0x4042a0\n    int64_t v14 = 3; // 0x4042a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4042c9\n        g68 = str;\n        g38 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4042b2\n    char v16 = *(char *)v12; // 0x4042b2\n    char v17 = v16; // 0x4042b2\n    bool v18 = false; // 0x4042b2\n    while (v15 == v16) {\n        // 0x4042a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4042bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4042be\n        v20 = result + 4;\n        g36 = v20;\n    }\n    // 0x4042c9\n    g68 = v20;\n    g38 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "4043f2",
            "decompiledFuncCode": "int64_t function_404300(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x404314\n    int64_t result = (int64_t)v1; // 0x404314\n    if (result != a1) {\n        // 0x404321\n        return result;\n    }\n    int64_t v2 = function_416370(); // 0x404330\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4043e6\n    if (v3 == 85) {\n        // 0x404340\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4043d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n            return result2;\n        }\n        char v4 = *v1; // 0x40436e\n        int64_t result3 = v4 != 96 ? (int64_t)&g8 : (int64_t)&g11; // 0x40437b\n        // 0x404321\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4043d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n        return result2;\n    }\n    char v5 = *v1; // 0x4043bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g9 : (int64_t)&g10; // 0x4043ca\n    // 0x404321\n    return result4;\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "404457",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x404400\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x404448\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404457",
            "funcStartAddr": "404457",
            "funcEndAddr": "405621",
            "decompiledFuncCode": "int64_t function_404457(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4044a1\n    int64_t v3 = 0; // 0x4044a1\n    int64_t v4; // 0x404457\n    int64_t v5; // 0x404457\n    int64_t v6; // 0x404457\n    int64_t v7; // 0x404457\n    int64_t v8; // 0x404457\n    int64_t v9; // 0x404457\n    int64_t v10; // 0x404457\n    int64_t v11; // 0x404457\n    int64_t v12; // 0x404457\n    int64_t v13; // 0x404457\n    int64_t v14; // 0x404457\n    int64_t v15; // 0x404457\n    int64_t v16; // 0x404457\n    int64_t v17; // 0x404457\n    int64_t v18; // 0x404457\n    int64_t result; // 0x404457\n    int64_t v19; // 0x404457\n    int32_t wc; // bp+132, 0x404457\n    int64_t ps; // bp+136, 0x404457\n    char v20; // 0x404a10\n    int64_t v21; // 0x404a10\n    int64_t v22; // 0x404db8\n    int64_t v23; // 0x404457\n    int64_t v24; // 0x404dd7\n    int32_t v25; // 0x404457\n    while (true) {\n      lab_0x4044a8_2:\n        // 0x4044a8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x404457\n        int64_t v27; // 0x4044dc\n        while (true) {\n          lab_0x4044a8:\n            // 0x4044a8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4044b3\n            if (v15 == -1) {\n                // 0x4044b5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4044c3\n            if (v28) {\n                // break (via goto) -> 0x404c28\n                goto lab_0x404c28;\n            }\n            // 0x4044cc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g82 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x404abb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404601;\n                    }\n                    // 0x404edd\n                    v26 = v5 + 1;\n                    goto lab_0x4044a8;\n                }\n                case 7: {\n                    goto lab_0x404601;\n                }\n                case 8: {\n                    goto lab_0x404601;\n                }\n                case 9: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x404601;\n                }\n                case 12: {\n                    goto lab_0x404601;\n                }\n                case 13: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4045cd;\n                }\n                case 36: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x404601;\n                }\n                case 38: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x404601;\n                }\n                case 44: {\n                    goto lab_0x404601;\n                }\n                case 45: {\n                    goto lab_0x404601;\n                }\n                case 46: {\n                    goto lab_0x404601;\n                }\n                case 47: {\n                    goto lab_0x404601;\n                }\n                case 48: {\n                    goto lab_0x404601;\n                }\n                case 49: {\n                    goto lab_0x404601;\n                }\n                case 50: {\n                    goto lab_0x404601;\n                }\n                case 51: {\n                    goto lab_0x404601;\n                }\n                case 52: {\n                    goto lab_0x404601;\n                }\n                case 53: {\n                    goto lab_0x404601;\n                }\n                case 54: {\n                    goto lab_0x404601;\n                }\n                case 55: {\n                    goto lab_0x404601;\n                }\n                case 56: {\n                    goto lab_0x404601;\n                }\n                case 57: {\n                    goto lab_0x404601;\n                }\n                case 58: {\n                    goto lab_0x404601;\n                }\n                case 59: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x404601;\n                }\n                case 66: {\n                    goto lab_0x404601;\n                }\n                case 67: {\n                    goto lab_0x404601;\n                }\n                case 68: {\n                    goto lab_0x404601;\n                }\n                case 69: {\n                    goto lab_0x404601;\n                }\n                case 70: {\n                    goto lab_0x404601;\n                }\n                case 71: {\n                    goto lab_0x404601;\n                }\n                case 72: {\n                    goto lab_0x404601;\n                }\n                case 73: {\n                    goto lab_0x404601;\n                }\n                case 74: {\n                    goto lab_0x404601;\n                }\n                case 75: {\n                    goto lab_0x404601;\n                }\n                case 76: {\n                    goto lab_0x404601;\n                }\n                case 77: {\n                    goto lab_0x404601;\n                }\n                case 78: {\n                    goto lab_0x404601;\n                }\n                case 79: {\n                    goto lab_0x404601;\n                }\n                case 80: {\n                    goto lab_0x404601;\n                }\n                case 81: {\n                    goto lab_0x404601;\n                }\n                case 82: {\n                    goto lab_0x404601;\n                }\n                case 83: {\n                    goto lab_0x404601;\n                }\n                case 84: {\n                    goto lab_0x404601;\n                }\n                case 85: {\n                    goto lab_0x404601;\n                }\n                case 86: {\n                    goto lab_0x404601;\n                }\n                case 87: {\n                    goto lab_0x404601;\n                }\n                case 88: {\n                    goto lab_0x404601;\n                }\n                case 89: {\n                    goto lab_0x404601;\n                }\n                case 90: {\n                    goto lab_0x404601;\n                }\n                case 91: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x404601;\n                }\n                case 94: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x404601;\n                }\n                case 96: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x404601;\n                }\n                case 98: {\n                    goto lab_0x404601;\n                }\n                case 99: {\n                    goto lab_0x404601;\n                }\n                case 100: {\n                    goto lab_0x404601;\n                }\n                case 101: {\n                    goto lab_0x404601;\n                }\n                case 102: {\n                    goto lab_0x404601;\n                }\n                case 103: {\n                    goto lab_0x404601;\n                }\n                case 104: {\n                    goto lab_0x404601;\n                }\n                case 105: {\n                    goto lab_0x404601;\n                }\n                case 106: {\n                    goto lab_0x404601;\n                }\n                case 107: {\n                    goto lab_0x404601;\n                }\n                case 108: {\n                    goto lab_0x404601;\n                }\n                case 109: {\n                    goto lab_0x404601;\n                }\n                case 110: {\n                    goto lab_0x404601;\n                }\n                case 111: {\n                    goto lab_0x404601;\n                }\n                case 112: {\n                    goto lab_0x404601;\n                }\n                case 113: {\n                    goto lab_0x404601;\n                }\n                case 114: {\n                    goto lab_0x404601;\n                }\n                case 115: {\n                    goto lab_0x404601;\n                }\n                case 116: {\n                    goto lab_0x404601;\n                }\n                case 117: {\n                    goto lab_0x404601;\n                }\n                case 118: {\n                    goto lab_0x404601;\n                }\n                case 119: {\n                    goto lab_0x404601;\n                }\n                case 120: {\n                    goto lab_0x404601;\n                }\n                case 121: {\n                    goto lab_0x404601;\n                }\n                case 122: {\n                    goto lab_0x404601;\n                }\n                case 123: {\n                    goto lab_0x4045a5;\n                }\n                case 124: {\n                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4045a5;\n                }\n                case 126: {\n                    goto lab_0x4045cd;\n                }\n                default: {\n                    goto lab_0x4049a5;\n                }\n            }\n        }\n      lab_0x4049a5:\n        if (v23 != 1) {\n            // 0x404d10\n            ps = 0;\n            int64_t len = v15; // 0x404d20\n            if (v15 == -1) {\n                // 0x404d22\n                len = strlen((char *)str);\n            }\n            // 0x404d4e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x404daf:\n                // 0x404daf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404db4\n                int64_t v30 = v29 + str;\n                v24 = function_4083e0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40532a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40532a_2;\n                    }\n                    case -2: {\n                        // 0x40540d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x405447\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40544a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x405457\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x405450\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40532a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40532a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404d80;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x404e2c\n                        char v34 = *(char *)v33; // 0x404e3d\n                        unsigned char v35; // 0x404457\n                        if (v34 < 125) {\n                            // 0x404e48\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x404e5f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404e30\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x404e3d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404e48\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x404e5f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404e30\n                            v33++;\n                        }\n                        goto lab_0x404d80;\n                    }\n                }\n            }\n            goto lab_0x40532a_2;\n        } else {\n            // 0x4049f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404601;\n        }\n    }\n  lab_0x404c28:\n    // 0x404c28\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40552a\n        if (v8 > result) {\n            // 0x405533\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404857\n        return result;\n    }\n    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404601:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x404610\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40481a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404711\n    char v40 = v20; // 0x404711\n    int64_t v41 = v38; // 0x404711\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404711\n    int64_t v43 = v36; // 0x404711\n    goto lab_0x40468d;\n  lab_0x40481a_2:\n    // 0x404857\n    return function_404400(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40532a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x404601;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x404efe\n        int64_t v50 = v5 + 1; // 0x404fe1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404fe8\n        char v52 = v20; // 0x404fe8\n        int64_t v53 = result; // 0x404fe8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404fb1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404fb5\n            int64_t v56 = v54 + 1; // 0x404fba\n            int64_t v57 = v51 + 1; // 0x404fe1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404fac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404fb1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404fb5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40468d;\n    }\n  lab_0x404d80:\n    // 0x404d80\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x404d9f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404da2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40532a\n        goto lab_0x40532a_2;\n    }\n    goto lab_0x404daf;\n  lab_0x4045cd:\n    // 0x4045cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40481a_2;\n    }\n    goto lab_0x404601;\n  lab_0x4045a5:;\n    bool v60 = v15 == 1; // 0x4045b0\n    if (v15 == -1) {\n        // 0x4045b2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4045be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x404601;\n    } else {\n        goto lab_0x4045cd;\n    }\n  lab_0x40468d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x404692\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x404696\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4044a8_2;\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "4057ce",
            "decompiledFuncCode": "int64_t function_405630(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405632\n    int32_t * v3 = __errno_location(); // 0x40564c\n    int64_t v4 = (int64_t)g28; // 0x405651\n    int32_t v5 = *v3; // 0x40565b\n    int64_t v6 = v4; // 0x405671\n    if (v2 >= (int64_t)*(int32_t *)&g31) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4057c9\n            function_403510(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405680\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405687\n        int64_t v9; // 0x405630\n        if (g28 == &g29) {\n            int64_t v10 = function_406510(0, v8); // 0x4057aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g29); // 0x4057af\n            *(int64_t *)&g28 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406510(v4, v8); // 0x40569b\n            *(int64_t *)&g28 = v12;\n            v9 = v12;\n        }\n        // 0x4056aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g31; // 0x4056aa\n        int32_t v14 = v7; // 0x4056b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g31 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4056e1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4056eb\n    int64_t * v17 = (int64_t *)v15; // 0x4056ee\n    uint64_t v18 = *v17; // 0x4056ee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4056f1\n    int64_t result = *v19; // 0x4056f1\n    int64_t v20; // 0x405630\n    uint64_t v21 = function_404400(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x405714\n    if (v18 > v21) {\n        // 0x40578b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x405727\n    *v17 = v22;\n    if (result != (int64_t)&g69) {\n        // 0x405737\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4064b0(v22); // 0x405751\n    *v19 = result2;\n    int64_t v23; // 0x405630\n    function_404400(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40578b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "405804",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4057d7\n    int64_t result = function_4066b0(a1 == 0 ? (int64_t)&g70 : a1, 56); // 0x4057f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "40581f",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g70 : a1); // 0x40581c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "40582f",
            "decompiledFuncCode": "int64_t function_405820(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g70 : a1; // 0x405828\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g70;\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405863",
            "decompiledFuncCode": "int64_t function_405830(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g70 + 8 : a1 + 8; // 0x405849\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40584e\n    uint32_t v3 = *v2; // 0x40584e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405852\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "405883",
            "decompiledFuncCode": "int64_t function_405870(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g70 + 4 : a1 + 4); // 0x40587c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "4058bb",
            "decompiledFuncCode": "int64_t function_405890(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g70 : a1; // 0x405898\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4058b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4058ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g70;\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "405932",
            "decompiledFuncCode": "int64_t function_4058c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g70 : a5; // 0x4058e2\n    int32_t * v2 = __errno_location(); // 0x4058eb\n    uint32_t v3 = *(int32_t *)v1; // 0x40590b\n    int64_t result = function_404400(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40591a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405a21",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g70 : a4; // 0x405962\n    int32_t * v2 = __errno_location(); // 0x405968\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405987\n    int32_t * v4 = (int32_t *)v1; // 0x40598a\n    int64_t v5 = function_404400(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4059a5\n    int64_t v6 = v5 + 1; // 0x4059aa\n    int64_t result = function_4064b0(v6); // 0x4059bf\n    function_404400(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405a04\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x405a0d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a30",
            "funcStartAddr": "405a30",
            "funcEndAddr": "405a3a",
            "decompiledFuncCode": "int64_t function_405a30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405a30\n    return function_405940(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405ad5",
            "decompiledFuncCode": "int64_t function_405a40(void) {\n    uint32_t v1 = *(int32_t *)&g31; // 0x405a40\n    int64_t v2 = v1; // 0x405a40\n    int64_t v3 = v2; // 0x405a54\n    if (v1 >= 2) {\n        int64_t v4 = &g31;\n        int64_t v5 = v4 + 16; // 0x405a73\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g84;\n        while (v5 != (int64_t)g28 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405a70\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g84;\n        }\n    }\n    int64_t v6 = v3; // 0x405a8d\n    if (g29 != 0x61d4c0) {\n        // 0x405a8f\n        free((int64_t *)g29);\n        g29 = 256;\n        *(int64_t *)&g30 = (int64_t)&g69;\n        v6 = &g84;\n    }\n    int64_t result = v6; // 0x405ab1\n    if (g28 != &g29) {\n        // 0x405ab3\n        free(g28);\n        *(int64_t *)&g28 = (int64_t)&g29;\n        result = &g84;\n    }\n    // 0x405ac6\n    *(int32_t *)&g31 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405af1",
            "decompiledFuncCode": "int64_t function_405ae0(void) {\n    // 0x405ae0\n    int64_t v1; // 0x405ae0\n    return function_405630(v1, v1, -1, (int64_t *)&g70);\n}\n"
        },
        {
            "funcName": "function_405b00",
            "funcStartAddr": "405b00",
            "funcEndAddr": "405b0a",
            "decompiledFuncCode": "int64_t function_405b00(void) {\n    // 0x405b00\n    int64_t v1; // 0x405b00\n    return function_405630(v1, v1, v1, (int64_t *)&g70);\n}\n"
        },
        {
            "funcName": "function_405b10",
            "funcStartAddr": "405b10",
            "funcEndAddr": "405b26",
            "decompiledFuncCode": "int64_t function_405b10(int64_t a1) {\n    // 0x405b10\n    return function_405630(0, a1, -1, (int64_t *)&g70);\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405b42",
            "decompiledFuncCode": "int64_t function_405b30(int64_t a1, int64_t a2) {\n    // 0x405b30\n    return function_405630(0, a1, a2, (int64_t *)&g70);\n}\n"
        },
        {
            "funcName": "function_405b50",
            "funcStartAddr": "405b50",
            "funcEndAddr": "405bb8",
            "decompiledFuncCode": "int64_t function_405b50(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405b60\n    return function_405630((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "405c24",
            "decompiledFuncCode": "int64_t function_405bc0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405bd0\n    return function_405630((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405c30",
            "funcStartAddr": "405c30",
            "funcEndAddr": "405c3c",
            "decompiledFuncCode": "int64_t function_405c30(int64_t a1, int64_t a2) {\n    // 0x405c30\n    return function_405b50(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405c4f",
            "decompiledFuncCode": "int64_t function_405c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405c40\n    return function_405bc0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405cc0",
            "decompiledFuncCode": "int64_t function_405c50(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g70); // 0x405c5d\n    int128_t v2 = __asm_movdqa(g71); // 0x405c65\n    int128_t v3 = __asm_movdqa(g72); // 0x405c6d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x405c82\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405c98\n    uint32_t v6 = *v5; // 0x405c98\n    uint32_t v7 = (int32_t)a3 % 32; // 0x405c9d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405630(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405cc0",
            "funcStartAddr": "405cc0",
            "funcEndAddr": "405ccd",
            "decompiledFuncCode": "int64_t function_405cc0(int64_t a1, int64_t a2) {\n    // 0x405cc0\n    return function_405c50(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405cd0",
            "funcStartAddr": "405cd0",
            "funcEndAddr": "405ce1",
            "decompiledFuncCode": "int64_t function_405cd0(int64_t a1) {\n    // 0x405cd0\n    return function_405c50(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405cfa",
            "decompiledFuncCode": "int64_t function_405cf0(void) {\n    // 0x405cf0\n    int64_t v1; // 0x405cf0\n    return function_405c50(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405d00",
            "funcStartAddr": "405d00",
            "funcEndAddr": "405d6e",
            "decompiledFuncCode": "int64_t function_405d00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405d1a\n    return function_405630((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "405ddc",
            "decompiledFuncCode": "int64_t function_405d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g70); // 0x405d77\n    int128_t v2 = __asm_movdqa(g71); // 0x405d7f\n    int128_t v3 = __asm_movdqa(g72); // 0x405d87\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405da9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405dd7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x405dba\n    return function_405630(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405de9",
            "decompiledFuncCode": "int64_t function_405de0(void) {\n    // 0x405de0\n    int64_t v1; // 0x405de0\n    return function_405d70(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405df0",
            "funcStartAddr": "405df0",
            "funcEndAddr": "405e07",
            "decompiledFuncCode": "int64_t function_405df0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405df0\n    return function_405d70(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "405e23",
            "decompiledFuncCode": "int64_t function_405e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405e10\n    return function_405d70(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405e3a",
            "decompiledFuncCode": "int64_t function_405e30(void) {\n    // 0x405e30\n    int64_t v1; // 0x405e30\n    return function_405630(v1, v1, v1, &g27);\n}\n"
        },
        {
            "funcName": "function_405e40",
            "funcStartAddr": "405e40",
            "funcEndAddr": "405e52",
            "decompiledFuncCode": "int64_t function_405e40(int64_t a1, int64_t a2) {\n    // 0x405e40\n    return function_405630(0, a1, a2, &g27);\n}\n"
        },
        {
            "funcName": "function_405e60",
            "funcStartAddr": "405e60",
            "funcEndAddr": "405e71",
            "decompiledFuncCode": "int64_t function_405e60(void) {\n    // 0x405e60\n    int64_t v1; // 0x405e60\n    return function_405630(v1, v1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_405e80",
            "funcStartAddr": "405e80",
            "funcEndAddr": "405e96",
            "decompiledFuncCode": "int64_t function_405e80(int64_t a1) {\n    // 0x405e80\n    return function_405630(0, a1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_405ea0",
            "funcStartAddr": "405ea0",
            "funcEndAddr": "405efe",
            "decompiledFuncCode": "int64_t function_405ea0(int32_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read(fd, (int64_t *)buf, (int32_t)nbyte); // 0x405ec1\n    while (result < 0) {\n        // 0x405ece\n        if (*__errno_location() != 4) {\n            // break -> 0x405eda\n            break;\n        }\n        result = read(fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f00",
            "funcStartAddr": "405f00",
            "funcEndAddr": "405f0e",
            "decompiledFuncCode": "int64_t function_405f00(int64_t a1, int64_t a2) {\n    // 0x405f00\n    int64_t v1; // 0x405f00\n    return function_407430(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_405f10",
            "funcStartAddr": "405f10",
            "funcEndAddr": "4062ed",
            "decompiledFuncCode": "int64_t function_405f10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405fa8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405f2c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405f46\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405f8b\n    if (a6 < 10) {\n        // 0x405f9a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x406092\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4062f0",
            "funcStartAddr": "4062f0",
            "funcEndAddr": "406310",
            "decompiledFuncCode": "int64_t function_4062f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4062f0\n    if (a5 == 0) {\n        // 0x40630b\n        return function_405f10(a1, a2, a3, a4, a5, 0, (int64_t)&g84);\n    }\n    int64_t v1 = 0; // 0x4062f7\n    v1++;\n    int64_t v2 = v1; // 0x406309\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406300\n        v1++;\n        v2 = v1;\n    }\n    // 0x40630b\n    return function_405f10(a1, a2, a3, a4, a5, v2, (int64_t)&g84);\n}\n"
        },
        {
            "funcName": "function_406310",
            "funcStartAddr": "406310",
            "funcEndAddr": "406370",
            "decompiledFuncCode": "int64_t function_406310(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x406310\n    int64_t v3 = &v2; // 0x406310\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406343\n    int64_t v6; // 0x40632d\n    int64_t * v7; // 0x40634b\n    int64_t v8; // 0x40634b\n    int64_t v9; // 0x406357\n    if (v5 < 48) {\n        // 0x406320\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406363\n            break;\n        }\n    } else {\n        // 0x40634b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406363\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406341\n    while (v4 != 9) {\n        // 0x406339\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406320\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406363\n                break;\n            }\n        } else {\n            // 0x40634b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406363\n                break;\n            }\n        }\n        // 0x406339\n        v10 = 10;\n    }\n    // 0x406363\n    return function_405f10(a1, a2, a3, a4, v3, v10, (int64_t)&g84);\n}\n"
        },
        {
            "funcName": "function_406370",
            "funcStartAddr": "406370",
            "funcEndAddr": "40642c",
            "decompiledFuncCode": "int64_t function_406370(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x406370\n    int64_t v1; // bp-168, 0x406370\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406370\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406370\n    int64_t v8; // 0x406370\n    int64_t v9; // bp-56, 0x406370\n    int64_t v10; // 0x4063d5\n    int64_t v11; // 0x4063f9\n    if ((int32_t)v6 < 48) {\n        // 0x4063c0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406410\n            break;\n        }\n    } else {\n        // 0x4063f2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406410\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4063ea\n    int64_t v13 = 10; // 0x4063ea\n    while (v5 != 9) {\n        // 0x4063ec\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4063c0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406410\n                break;\n            }\n        } else {\n            // 0x4063f2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406410\n                break;\n            }\n        }\n        // 0x4063e2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406410\n    int64_t v14; // bp-136, 0x406370\n    int64_t result = function_405f10(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g84); // 0x40641f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406430",
            "funcStartAddr": "406430",
            "funcEndAddr": "4064a4",
            "decompiledFuncCode": "int64_t function_406430(int64_t a1) {\n    // 0x406430\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406493\n    return fputs_unlocked(v1, g37);\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "4064ca",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4064b4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4064c3\n        return (int64_t)mem;\n    }\n    // 0x4064c5\n    function_403510(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "4064f1",
            "decompiledFuncCode": "int64_t function_4064d0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4064d3\n    int64_t v2 = v1; // 0x4064d3\n    if (v2 < 0) {\n        // 0x4064eb\n        function_403510(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4064e9\n        return function_4064b0(v2);\n    }\n    // 0x4064eb\n    function_403510(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406500",
            "funcStartAddr": "406500",
            "funcEndAddr": "406502",
            "decompiledFuncCode": "int64_t function_406500(void) {\n    // 0x406500\n    int64_t v1; // 0x406500\n    return function_4064b0(v1);\n}\n"
        },
        {
            "funcName": "function_406510",
            "funcStartAddr": "406510",
            "funcEndAddr": "406546",
            "decompiledFuncCode": "int64_t function_406510(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406538\n        free(v1);\n        return (int32_t)&g84 ^ (int32_t)&g84;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406521\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406530\n        return (int64_t)mem;\n    }\n    // 0x406541\n    function_403510(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "406571",
            "decompiledFuncCode": "int64_t function_406550(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406553\n    int64_t v2 = v1; // 0x406553\n    if (v2 < 0) {\n        // 0x40656b\n        function_403510(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406569\n        return function_406510(a1, v2);\n    }\n    // 0x40656b\n    function_403510(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406580",
            "funcStartAddr": "406580",
            "funcEndAddr": "406606",
            "decompiledFuncCode": "int64_t function_406580(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4065db\n            function_403510(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406510(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4065c3\n    if (a2 == 0) {\n        // 0x4065e8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4065c8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4065db\n        function_403510(a1);\n        // UNREACHABLE\n    }\n    // 0x4065aa\n    *(int64_t *)a2 = v2;\n    return function_406510(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406610",
            "funcStartAddr": "406610",
            "funcEndAddr": "406660",
            "decompiledFuncCode": "int64_t function_406610(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406610\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40665a\n            function_403510(a1);\n            // UNREACHABLE\n        }\n        // 0x406632\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406510(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406645\n        *(int64_t *)a2 = 128;\n        return function_406510(0, 128);\n    }\n    // 0x406658\n    if (a2 < 0) {\n        // 0x40665a\n        function_403510(a1);\n        // UNREACHABLE\n    }\n    // 0x406632\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406510(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406660",
            "funcStartAddr": "406660",
            "funcEndAddr": "406677",
            "decompiledFuncCode": "int64_t function_406660(int64_t a1, int64_t a2) {\n    // 0x406660\n    return (int64_t)memset((int64_t *)function_4064b0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406680",
            "funcStartAddr": "406680",
            "funcEndAddr": "4066ae",
            "decompiledFuncCode": "int64_t function_406680(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406687\n    if ((int64_t)v1 < 0) {\n        // 0x4066a9\n        function_403510(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4066a9\n        function_403510(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40669a\n    if (mem != NULL) {\n        // 0x4066a4\n        return (int64_t)mem;\n    }\n    // 0x4066a9\n    function_403510(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4066b0",
            "funcStartAddr": "4066b0",
            "funcEndAddr": "4066d8",
            "decompiledFuncCode": "int64_t function_4066b0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4064b0(a2); // 0x4066bf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4066e0",
            "funcStartAddr": "4066e0",
            "funcEndAddr": "4066f3",
            "decompiledFuncCode": "int64_t function_4066e0(int64_t str) {\n    // 0x4066e0\n    return function_4066b0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406700",
            "funcStartAddr": "406700",
            "funcEndAddr": "4067e4",
            "decompiledFuncCode": "int64_t function_406700(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7) {\n    // 0x406700\n    int64_t result2; // bp-64, 0x406700\n    int64_t v1 = function_406820(a1, 0, a2 & 0xffffffff, (int64_t)&result2, (int64_t *)a5); // 0x406727\n    int32_t v2 = v1; // 0x40672c\n    int32_t * v3; // 0x406700\n    int32_t * v4; // 0x406700\n    if (v2 != 0) {\n        int32_t * v5 = __errno_location(); // 0x4067aa\n        v3 = v5;\n        if (v2 == 1) {\n            goto lab_0x406750;\n        } else {\n            // 0x4067b7\n            v4 = v5;\n            if (v2 == 3) {\n                // 0x4067bc\n                *v5 = 0;\n                v4 = v5;\n            }\n            goto lab_0x406757;\n        }\n    } else {\n        int64_t result = result2; // 0x406730\n        if (result >= a3 && result <= a4) {\n            // 0x406790\n            return result;\n        }\n        int32_t * v6 = __errno_location(); // 0x40673f\n        v3 = v6;\n        if (result < 0x40000000) {\n            int64_t v7 = result + 0x40000001; // 0x4067c8\n            *v6 = v7 == 0 | v7 < 0 != ((v7 ^ result) & (result ^ -0x8000000000000000)) < 0 ? 75 : 34;\n            v4 = v6;\n            goto lab_0x406757;\n        } else {\n            goto lab_0x406750;\n        }\n    }\n  lab_0x406750:\n    // 0x406750\n    *v3 = 75;\n    v4 = v3;\n    goto lab_0x406757;\n  lab_0x406757:;\n    int64_t v8 = function_405e80(a1); // 0x40675a\n    int32_t v9 = *v4; // 0x40675f\n    int32_t err_num = v9 == 22 ? 0 : v9; // 0x406775\n    int32_t v10 = a7; // 0x406778\n    error(v10 == 0 ? 1 : v10, err_num, \"%s: %s\", (char *)a6, (char *)v8);\n    // 0x406790\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4067f0",
            "funcStartAddr": "4067f0",
            "funcEndAddr": "406811",
            "decompiledFuncCode": "int64_t function_4067f0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x4067f0\n    return function_406700(a1, 10, (int64_t)a2, a3, (int64_t)a4, a5, (int64_t)a6);\n}\n"
        },
        {
            "funcName": "function_406820",
            "funcStartAddr": "406820",
            "funcEndAddr": "406f70",
            "decompiledFuncCode": "int64_t function_406820(int64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t * str) {\n    uint32_t v1 = (int32_t)a3; // 0x406832\n    if (v1 >= 37) {\n        // 0x406f49\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        return &g84;\n    }\n    // 0x40683b\n    int64_t v2; // bp-64, 0x406820\n    int64_t v3 = a2 == 0 ? (int64_t)&v2 : (int64_t)a2; // 0x406848\n    int32_t * v4 = __errno_location(); // 0x406852\n    *v4 = 0;\n    char * v5 = (char *)a1;\n    int32_t v6 = __strtol_internal(v5, (char **)v3, v1, 0); // 0x40686a\n    int64_t * v7 = (int64_t *)v3; // 0x40686f\n    int64_t v8 = *v7; // 0x40686f\n    int64_t v9; // 0x406820\n    int64_t v10; // 0x406820\n    int64_t v11; // 0x406820\n    char v12; // 0x406820\n    int64_t v13; // 0x406820\n    int64_t v14; // 0x406820\n    int64_t v15; // 0x406820\n    if (v8 == a1) {\n        // 0x4068c8\n        if (str == NULL) {\n            // 0x40689e\n            return 4;\n        }\n        char c = *v5; // 0x4068d1\n        if (c == 0) {\n            // 0x40689e\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x4068ef\n        v14 = 1;\n        v10 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x40689e\n            return 4;\n        }\n        goto lab_0x4068fd;\n    } else {\n        int32_t v16 = *v4; // 0x40687a\n        int64_t v17 = 0; // 0x406880\n        if (v16 != 0) {\n            // 0x4068b0\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x40689e\n                return 4;\n            }\n        }\n        int64_t v18 = v6; // 0x40686a\n        v13 = v18;\n        v9 = v17;\n        if (str == NULL) {\n            goto lab_0x406897;\n        } else {\n            char c2 = *(char *)v8; // 0x40688a\n            v13 = v18;\n            v9 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x406997\n                v14 = v18;\n                v10 = v17;\n                v12 = c2;\n                v15 = v18;\n                v11 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4068fd;\n                } else {\n                    goto lab_0x4069a5;\n                }\n            } else {\n                goto lab_0x406897;\n            }\n        }\n    }\n  lab_0x4068fd:;\n    int64_t v19 = v10;\n    int64_t v20 = v14;\n    unsigned char v21 = v12 - 69;\n    int64_t v22 = 1024; // 0x406904\n    int64_t v23 = 1; // 0x406904\n    int64_t v24; // 0x406820\n    int64_t v25; // 0x406820\n    int64_t v26; // 0x406820\n    int64_t v27; // 0x406820\n    int64_t v28; // 0x406820\n    int64_t v29; // 0x406820\n    int64_t v30; // 0x406820\n    int64_t v31; // 0x406820\n    int64_t v32; // 0x406820\n    int64_t v33; // 0x406820\n    int64_t v34; // 0x406820\n    int64_t v35; // 0x406820\n    int64_t v36; // 0x406820\n    int64_t v37; // 0x406820\n    int64_t v38; // 0x406820\n    int64_t v39; // 0x406820\n    int64_t v40; // 0x406820\n    int64_t v41; // 0x406820\n    int64_t v42; // 0x406820\n    if (v21 < 48) {\n        // 0x406930\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x406910;\n        } else {\n            // 0x406944\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x406910;\n            } else {\n                // 0x406956\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x406910;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v8 + 2); // 0x406f32\n                        v22 = 1024;\n                        v23 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x406910;\n                    }\n                    default: {\n                        // 0x40696b\n                        g85 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v15 = v20;\n                        v11 = v19;\n                        v25 = v20;\n                        v32 = 1;\n                        v24 = v19;\n                        v26 = 1024;\n                        v33 = 1;\n                        v37 = -0x20000000000000;\n                        v38 = 1;\n                        v27 = 1024;\n                        v34 = 1;\n                        v40 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v42 = -0x20000000000000;\n                        v29 = 1024;\n                        v36 = 1;\n                        v41 = -0x20000000000000;\n                        v30 = 1024;\n                        v31 = 1;\n                        v39 = -0x20000000000000;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x406bf8;\n                            }\n                            case 70: {\n                                goto lab_0x4069a5;\n                            }\n                            case 71: {\n                                goto lab_0x406c60;\n                            }\n                            case 72: {\n                                goto lab_0x4069a5;\n                            }\n                            case 73: {\n                                goto lab_0x4069a5;\n                            }\n                            case 74: {\n                                goto lab_0x4069a5;\n                            }\n                            case 75: {\n                                goto lab_0x406a45;\n                            }\n                            case 76: {\n                                goto lab_0x4069a5;\n                            }\n                            case 77: {\n                                goto lab_0x406a88;\n                            }\n                            case 78: {\n                                goto lab_0x4069a5;\n                            }\n                            case 79: {\n                                goto lab_0x4069a5;\n                            }\n                            case 80: {\n                                goto lab_0x406b28;\n                            }\n                            case 81: {\n                                goto lab_0x4069a5;\n                            }\n                            case 82: {\n                                goto lab_0x4069a5;\n                            }\n                            case 83: {\n                                goto lab_0x4069a5;\n                            }\n                            case 84: {\n                                goto lab_0x406b90;\n                            }\n                            case 85: {\n                                goto lab_0x4069a5;\n                            }\n                            case 86: {\n                                goto lab_0x4069a5;\n                            }\n                            case 87: {\n                                goto lab_0x4069a5;\n                            }\n                            case 88: {\n                                goto lab_0x4069a5;\n                            }\n                            case 89: {\n                                goto lab_0x406cc8;\n                            }\n                            case 90: {\n                                goto lab_0x406d30;\n                            }\n                            case 91: {\n                                goto lab_0x4069a5;\n                            }\n                            case 92: {\n                                goto lab_0x4069a5;\n                            }\n                            case 93: {\n                                goto lab_0x4069a5;\n                            }\n                            case 94: {\n                                goto lab_0x4069a5;\n                            }\n                            case 95: {\n                                goto lab_0x4069a5;\n                            }\n                            case 96: {\n                                goto lab_0x4069a5;\n                            }\n                            case 97: {\n                                goto lab_0x4069a5;\n                            }\n                            case 98: {\n                                goto lab_0x406af5;\n                            }\n                            case 99: {\n                                goto lab_0x4069e8;\n                            }\n                            case 100: {\n                                goto lab_0x4069a5;\n                            }\n                            case 101: {\n                                goto lab_0x4069a5;\n                            }\n                            case 102: {\n                                goto lab_0x4069a5;\n                            }\n                            case 103: {\n                                goto lab_0x406c60;\n                            }\n                            case 104: {\n                                goto lab_0x4069a5;\n                            }\n                            case 105: {\n                                goto lab_0x4069a5;\n                            }\n                            case 106: {\n                                goto lab_0x4069a5;\n                            }\n                            case 107: {\n                                goto lab_0x406a45;\n                            }\n                            case 108: {\n                                goto lab_0x4069a5;\n                            }\n                            case 109: {\n                                goto lab_0x406a88;\n                            }\n                            case 110: {\n                                goto lab_0x4069a5;\n                            }\n                            case 111: {\n                                goto lab_0x4069a5;\n                            }\n                            case 112: {\n                                goto lab_0x4069a5;\n                            }\n                            case 113: {\n                                goto lab_0x4069a5;\n                            }\n                            case 114: {\n                                goto lab_0x4069a5;\n                            }\n                            case 115: {\n                                goto lab_0x4069a5;\n                            }\n                            case 116: {\n                                goto lab_0x406b90;\n                            }\n                            default: {\n                                goto lab_0x406910;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x406910;\n    }\n  lab_0x406897:\n    // 0x406897\n    *(int64_t *)a4 = v13;\n    // 0x40689e\n    return v9 & 0xffffffff;\n  lab_0x406910:\n    // 0x406910\n    g81 = v12 - 66;\n    v15 = v20;\n    v11 = v19;\n    v25 = v20;\n    v32 = v23;\n    v24 = v19;\n    v38 = v23;\n    switch (v12) {\n        case 66: {\n            // 0x4069e1\n            v25 = 1024 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x4069e8;\n        }\n        case 69: {\n            // 0x406be0\n            v29 = v22;\n            v36 = v23;\n            v41 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406bf8;\n        }\n        case 71: {\n            goto lab_0x406c60;\n        }\n        case 75: {\n            goto lab_0x406a45;\n        }\n        case 77: {\n            goto lab_0x406a70;\n        }\n        case 80: {\n            // 0x406b10\n            v27 = v22;\n            v34 = v23;\n            v40 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406b28;\n        }\n        case 84: {\n            goto lab_0x406b78;\n        }\n        case 89: {\n            // 0x406cb0\n            goto lab_0x406cc8;\n        }\n        case 90: {\n            // 0x406d18\n            v30 = v22;\n            v31 = v23;\n            v39 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x406d30;\n        }\n        case 98: {\n            goto lab_0x406af5;\n        }\n        case 99: {\n            goto lab_0x4069e8;\n        }\n        case 103: {\n            goto lab_0x406c60;\n        }\n        case 107: {\n            goto lab_0x406a45;\n        }\n        case 109: {\n            goto lab_0x406a70;\n        }\n        case 116: {\n            goto lab_0x406b78;\n        }\n        case 119: {\n            // 0x406a29\n            v25 = 2 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x4069e8;\n        }\n        default: {\n            goto lab_0x4069a5;\n        }\n    }\n    // 0x406c48\n    goto lab_0x406c60;\n    // 0x406a30\n    goto lab_0x406a45;\n  lab_0x406a70:\n    // 0x406a70\n    v26 = v22;\n    v33 = v23;\n    v37 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x406a88;\n  lab_0x406b78:\n    // 0x406b78\n    v28 = v22;\n    v35 = v23;\n    v42 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x406b90;\n  lab_0x406af5:\n    // 0x406af5\n    v25 = 512 * v20;\n    v32 = v38;\n    v24 = v19;\n    goto lab_0x4069e8;\n  lab_0x4069e8:;\n    int64_t v63 = v24;\n    int64_t v64 = v32 + v8; // 0x4069e8\n    *v7 = v64;\n    v13 = v25;\n    v9 = (*(char *)v64 != 0 ? v63 | 2 : v63) & 0xffffffff;\n    goto lab_0x406897;\n  lab_0x4069a5:\n    // 0x4069a5\n    *(int64_t *)a4 = v15;\n    // 0x40689e\n    return (v11 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x406bf8:;\n    uint64_t v65 = v29;\n    int64_t v66 = v20;\n    int64_t v67 = -0x8000000000000000; // 0x406c31\n    int64_t v68 = 1; // 0x406c31\n    if (v66 >= v41) {\n        // 0x406c10\n        v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n        v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : 0;\n    }\n    int32_t v69 = 5; // 0x406c25\n    int32_t v70 = v69; // 0x406c28\n    int64_t v71 = v68; // 0x406c28\n    int64_t v59 = v67; // 0x406c28\n    int64_t v61 = v36; // 0x406c28\n    int64_t v62 = v68; // 0x406c28\n    while (v69 != 0) {\n        // 0x406c2e\n        v66 = v67;\n        v67 = -0x8000000000000000;\n        v68 = 1;\n        if (v66 >= v41) {\n            // 0x406c10\n            v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n            v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : v71;\n        }\n        // 0x406c25\n        v69 = v70 - 1;\n        v70 = v69;\n        v71 = v68;\n        v59 = v67;\n        v61 = v36;\n        v62 = v68;\n    }\n    goto lab_0x406e60;\n  lab_0x406c60:\n    // 0x406c60\n    while (true) {\n        // 0x406c96\n        int32_t v44; // 0x406820\n        int32_t v45 = v44;\n        int64_t v46; // 0x406820\n        int64_t v47 = v46;\n        int64_t v48 = -0x8000000000000000; // 0x406c99\n        int64_t v49 = 1; // 0x406c99\n        int64_t v50; // 0x406820\n        uint64_t v51; // 0x406820\n        if (v47 >= v51) {\n            int64_t v52 = v50;\n            uint64_t v53; // 0x406820\n            int64_t v54 = v47 > 0x7fffffffffffffff / v53 ? 0x7fffffffffffffff : v47 * v53;\n            int64_t v55 = v47 > 0x7fffffffffffffff / v53 ? 1 : v52;\n            v48 = v54;\n            v49 = v55;\n        }\n        int64_t v56 = v49;\n        int64_t v57 = v48;\n        int32_t v58 = v45 - 1; // 0x406c8d\n        v46 = v57;\n        v44 = v58;\n        v50 = v56;\n        v59 = v57;\n        int64_t v60; // 0x406820\n        v61 = v60;\n        v62 = v56;\n        if (v58 == 0) {\n            // break -> 0x406e60\n            break;\n        }\n    }\n    goto lab_0x406e60;\n  lab_0x406a45:;\n    int64_t v76 = 1;\n    v25 = -0x8000000000000000;\n    v32 = v76;\n    v24 = 1;\n    int64_t v73; // 0x406820\n    int64_t v74; // 0x406820\n    int64_t v75; // 0x406820\n    int64_t v72; // 0x406820\n    if (v20 < -0x20000000000000) {\n        goto lab_0x4069e8;\n    } else {\n        int64_t v77 = 1024;\n        v73 = 0x7fffffffffffffff / v77;\n        v75 = v77;\n        v74 = v20;\n        v72 = v76;\n        goto lab_0x406a5c;\n    }\n  lab_0x406a88:\n    // 0x406a88\n    v25 = -0x8000000000000000;\n    v32 = v33;\n    v24 = 1;\n    if (v20 < v37) {\n        goto lab_0x4069e8;\n    } else {\n        int64_t v78 = 0x7fffffffffffffff / v26;\n        v25 = 0x7fffffffffffffff;\n        v32 = v33;\n        v24 = 1;\n        if (v20 > v78) {\n            goto lab_0x4069e8;\n        } else {\n            int64_t v79 = v26 * v20; // 0x406aa8\n            v25 = -0x8000000000000000;\n            v32 = v33;\n            v24 = 1;\n            v73 = v78;\n            v75 = v26;\n            v74 = v79;\n            v72 = v33;\n            if (v79 < v37) {\n                goto lab_0x4069e8;\n            } else {\n                goto lab_0x406a5c;\n            }\n        }\n    }\n  lab_0x406b28:;\n    uint64_t v80 = v27;\n    int64_t v81 = v20;\n    int64_t v82 = -0x8000000000000000; // 0x406b61\n    int64_t v83 = 1; // 0x406b61\n    if (v40 <= v81) {\n        // 0x406b40\n        v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n        v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : 0;\n    }\n    int32_t v84 = 4; // 0x406b55\n    int32_t v85 = v84; // 0x406b58\n    int64_t v86 = v83; // 0x406b58\n    v59 = v82;\n    v61 = v34;\n    v62 = v83;\n    while (v84 != 0) {\n        // 0x406b5e\n        v81 = v82;\n        v82 = -0x8000000000000000;\n        v83 = 1;\n        if (v40 <= v81) {\n            // 0x406b40\n            v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n            v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : v86;\n        }\n        // 0x406b55\n        v84 = v85 - 1;\n        v85 = v84;\n        v86 = v83;\n        v59 = v82;\n        v61 = v34;\n        v62 = v83;\n    }\n    goto lab_0x406e60;\n  lab_0x406b90:;\n    uint64_t v87 = v28;\n    int64_t v88 = v20;\n    int64_t v89 = -0x8000000000000000; // 0x406bc9\n    int64_t v90 = 1; // 0x406bc9\n    if (v42 <= v88) {\n        // 0x406ba8\n        v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n        v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : 0;\n    }\n    int32_t v91 = 3; // 0x406bbd\n    int32_t v92 = v91; // 0x406bc0\n    int64_t v93 = v90; // 0x406bc0\n    v59 = v89;\n    v61 = v35;\n    v62 = v90;\n    while (v91 != 0) {\n        // 0x406bc6\n        v88 = v89;\n        v89 = -0x8000000000000000;\n        v90 = 1;\n        if (v42 <= v88) {\n            // 0x406ba8\n            v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n            v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : v93;\n        }\n        // 0x406bbd\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v59 = v89;\n        v61 = v35;\n        v62 = v90;\n    }\n    goto lab_0x406e60;\n  lab_0x406cc8:\n    // 0x406cc8\n    while (true) {\n        // 0x406cfe\n        int32_t v94; // 0x406820\n        int32_t v95 = v94;\n        int64_t v96; // 0x406820\n        int64_t v97 = v96;\n        int64_t v98 = -0x8000000000000000; // 0x406d01\n        int64_t v99 = 1; // 0x406d01\n        int64_t v100; // 0x406820\n        uint64_t v101; // 0x406820\n        if (v101 <= v97) {\n            int64_t v102 = v100;\n            uint64_t v103; // 0x406820\n            int64_t v104 = v97 > 0x7fffffffffffffff / v103 ? 0x7fffffffffffffff : v97 * v103;\n            int64_t v105 = v97 > 0x7fffffffffffffff / v103 ? 1 : v102;\n            v98 = v104;\n            v99 = v105;\n        }\n        int64_t v106 = v99;\n        int64_t v107 = v98;\n        int32_t v108 = v95 - 1; // 0x406cf5\n        v96 = v107;\n        v94 = v108;\n        v100 = v106;\n        v59 = v107;\n        int64_t v109; // 0x406820\n        v61 = v109;\n        v62 = v106;\n        if (v108 == 0) {\n            // break -> 0x406e60\n            break;\n        }\n    }\n    goto lab_0x406e60;\n  lab_0x406d30:;\n    uint64_t v110 = v30;\n    int64_t v111 = v20;\n    int64_t v112 = -0x8000000000000000; // 0x406d69\n    int64_t v113 = 1; // 0x406d69\n    if (v39 <= v111) {\n        // 0x406d48\n        v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n        v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : 0;\n    }\n    int32_t v114 = 6; // 0x406d5d\n    int32_t v115 = v114; // 0x406d60\n    int64_t v116 = v113; // 0x406d60\n    v59 = v112;\n    v61 = v31;\n    v62 = v113;\n    while (v114 != 0) {\n        // 0x406d66\n        v111 = v112;\n        v112 = -0x8000000000000000;\n        v113 = 1;\n        if (v39 <= v111) {\n            // 0x406d48\n            v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n            v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : v116;\n        }\n        // 0x406d5d\n        v114 = v115 - 1;\n        v115 = v114;\n        v116 = v113;\n        v59 = v112;\n        v61 = v31;\n        v62 = v113;\n    }\n    goto lab_0x406e60;\n  lab_0x406e60:\n    // 0x406e60\n    v25 = v59;\n    v32 = v61;\n    v24 = (v62 | v19) & 0xffffffff;\n    goto lab_0x4069e8;\n  lab_0x406a5c:\n    // 0x406a5c\n    v25 = 0x7fffffffffffffff;\n    v32 = v72;\n    v24 = 1;\n    if (v73 >= v74) {\n        // 0x406a65\n        v25 = v74 * v75;\n        v32 = v72;\n        v24 = v19;\n    }\n    goto lab_0x4069e8;\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "4073b0",
            "decompiledFuncCode": "int64_t function_406f70(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x406f7e\n    if (v1 >= 37) {\n        // 0x40738b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g84;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x406fa2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x406fd2\n    int64_t v4 = a1; // 0x406fd7\n    char v5 = c; // 0x406fd7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x406fcc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x406fc8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x406fd9\n    if (v5 == 45) {\n        // 0x407015\n        return 4;\n    }\n    // 0x406fde\n    int64_t v7; // bp-64, 0x406f70\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x406f9e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x406fe6\n    int64_t * v10 = (int64_t *)v8; // 0x406feb\n    int64_t v11 = *v10; // 0x406feb\n    char v12; // 0x406f70\n    int64_t v13; // 0x406f70\n    int64_t v14; // 0x406f70\n    int64_t v15; // 0x406f70\n    int64_t v16; // 0x406f70\n    int64_t v17; // 0x406f70\n    int64_t v18; // 0x406f70\n    if (v11 == a1) {\n        // 0x407048\n        if (c == 0 || str == NULL) {\n            // 0x407015\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x407069\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x407015\n            return 4;\n        }\n        goto lab_0x407077;\n    } else {\n        int32_t v19 = *v2; // 0x406ff6\n        int64_t v20 = 0; // 0x406ffc\n        if (v19 != 0) {\n            // 0x407030\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x407015\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x406fe6\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x407012;\n        } else {\n            char c2 = *(char *)v11; // 0x407005\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x407173\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407077;\n                } else {\n                    goto lab_0x407185;\n                }\n            } else {\n                goto lab_0x407012;\n            }\n        }\n    }\n  lab_0x407077:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40707f\n    int64_t v24 = 1; // 0x40707f\n    int64_t v25; // 0x406f70\n    int64_t v26; // 0x406f70\n    int64_t v27; // 0x406f70\n    int64_t v28; // 0x406f70\n    int64_t v29; // 0x406f70\n    int64_t v30; // 0x406f70\n    int64_t v31; // 0x406f70\n    int64_t v32; // 0x406f70\n    int64_t v33; // 0x406f70\n    int64_t v34; // 0x406f70\n    int64_t v35; // 0x406f70\n    int64_t v36; // 0x406f70\n    int64_t v37; // 0x406f70\n    int64_t v38; // 0x406f70\n    int64_t v39; // 0x406f70\n    int64_t v40; // 0x406f70\n    int64_t v41; // 0x406f70\n    int64_t v42; // 0x406f70\n    int64_t v43; // 0x406f70\n    int64_t v44; // 0x406f70\n    if (v22 < 48) {\n        // 0x407081\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4070ea;\n        } else {\n            // 0x407094\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4070ea;\n            } else {\n                // 0x4070b0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x4070ea;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x407319\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x4070ea;\n                    }\n                    default: {\n                        // 0x4070c5\n                        g86 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40728b;\n                            }\n                            case 70: {\n                                goto lab_0x407185;\n                            }\n                            case 71: {\n                                goto lab_0x4072c3;\n                            }\n                            case 72: {\n                                goto lab_0x407185;\n                            }\n                            case 73: {\n                                goto lab_0x407185;\n                            }\n                            case 74: {\n                                goto lab_0x407185;\n                            }\n                            case 75: {\n                                goto lab_0x40714c;\n                            }\n                            case 76: {\n                                goto lab_0x407185;\n                            }\n                            case 77: {\n                                goto lab_0x40710e;\n                            }\n                            case 78: {\n                                goto lab_0x407185;\n                            }\n                            case 79: {\n                                goto lab_0x407185;\n                            }\n                            case 80: {\n                                goto lab_0x407258;\n                            }\n                            case 81: {\n                                goto lab_0x407185;\n                            }\n                            case 82: {\n                                goto lab_0x407185;\n                            }\n                            case 83: {\n                                goto lab_0x407185;\n                            }\n                            case 84: {\n                                goto lab_0x407228;\n                            }\n                            case 85: {\n                                goto lab_0x407185;\n                            }\n                            case 86: {\n                                goto lab_0x407185;\n                            }\n                            case 87: {\n                                goto lab_0x407185;\n                            }\n                            case 88: {\n                                goto lab_0x407185;\n                            }\n                            case 89: {\n                                goto lab_0x4071f6;\n                            }\n                            case 90: {\n                                goto lab_0x4071bb;\n                            }\n                            case 91: {\n                                goto lab_0x407185;\n                            }\n                            case 92: {\n                                goto lab_0x407185;\n                            }\n                            case 93: {\n                                goto lab_0x407185;\n                            }\n                            case 94: {\n                                goto lab_0x407185;\n                            }\n                            case 95: {\n                                goto lab_0x407185;\n                            }\n                            case 96: {\n                                goto lab_0x407185;\n                            }\n                            case 97: {\n                                goto lab_0x407185;\n                            }\n                            case 98: {\n                                goto lab_0x40719f;\n                            }\n                            case 99: {\n                                goto lab_0x407128;\n                            }\n                            case 100: {\n                                goto lab_0x407185;\n                            }\n                            case 101: {\n                                goto lab_0x407185;\n                            }\n                            case 102: {\n                                goto lab_0x407185;\n                            }\n                            case 103: {\n                                goto lab_0x4072c3;\n                            }\n                            case 104: {\n                                goto lab_0x407185;\n                            }\n                            case 105: {\n                                goto lab_0x407185;\n                            }\n                            case 106: {\n                                goto lab_0x407185;\n                            }\n                            case 107: {\n                                goto lab_0x40714c;\n                            }\n                            case 108: {\n                                goto lab_0x407185;\n                            }\n                            case 109: {\n                                goto lab_0x40710e;\n                            }\n                            case 110: {\n                                goto lab_0x407185;\n                            }\n                            case 111: {\n                                goto lab_0x407185;\n                            }\n                            case 112: {\n                                goto lab_0x407185;\n                            }\n                            case 113: {\n                                goto lab_0x407185;\n                            }\n                            case 114: {\n                                goto lab_0x407185;\n                            }\n                            case 115: {\n                                goto lab_0x407185;\n                            }\n                            case 116: {\n                                goto lab_0x407228;\n                            }\n                            default: {\n                                goto lab_0x4070ea;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4070ea;\n    }\n  lab_0x407012:\n    // 0x407012\n    *a4 = v16;\n    // 0x407015\n    return v13 & 0xffffffff;\n  lab_0x4070ea:\n    // 0x4070ea\n    g87 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x406f70\n    switch (v12) {\n        case 66: {\n            // 0x4072e4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x407157;\n            } else {\n                // 0x4072f1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407128;\n            }\n        }\n        case 69: {\n            goto lab_0x40728b;\n        }\n        case 71: {\n            goto lab_0x4072c3;\n        }\n        case 75: {\n            goto lab_0x40714c;\n        }\n        case 77: {\n            goto lab_0x40710e;\n        }\n        case 80: {\n            goto lab_0x407258;\n        }\n        case 84: {\n            goto lab_0x407228;\n        }\n        case 89: {\n            goto lab_0x4071f6;\n        }\n        case 90: {\n            goto lab_0x4071bb;\n        }\n        case 98: {\n            goto lab_0x40719f;\n        }\n        case 99: {\n            goto lab_0x407128;\n        }\n        case 103: {\n            goto lab_0x4072c3;\n        }\n        case 107: {\n            goto lab_0x40714c;\n        }\n        case 109: {\n            goto lab_0x40710e;\n        }\n        case 116: {\n            goto lab_0x407228;\n        }\n        case 119: {\n            // 0x407190\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x407157;\n            } else {\n                // 0x407195\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407128;\n            }\n        }\n        default: {\n            goto lab_0x407185;\n        }\n    }\n  lab_0x40728b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x4072a3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x4072af\n    int64_t v51 = v48; // 0x4072b2\n    int64_t v52 = v37; // 0x4072b2\n    int64_t v53 = v49; // 0x4072b2\n    int32_t v54 = v50; // 0x4072b2\n    int64_t v55 = v49; // 0x4072b2\n    while (v50 != 0) {\n        // 0x4072a0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x4071e4;\n  lab_0x4072c3:\n    // 0x4072c3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4072ce\n        int128_t v56; // 0x4072c9\n        uint128_t v57; // 0x4072c9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4072ce\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x406f70\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x4072d3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x4072d8\n                v26 = v60;\n                int64_t v61; // 0x406f70\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x407128;\n  lab_0x40714c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40714f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x407128;\n    } else {\n        goto lab_0x407157;\n    }\n  lab_0x40710e:;\n    int128_t v65 = v27; // 0x407114\n    uint128_t v66 = v65 * (int128_t)v17; // 0x407114\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x407157;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x407119\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x407157;\n        } else {\n            // 0x40711e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x407128;\n        }\n    }\n  lab_0x407258:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40726b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x407277\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40727a\n    int64_t v73 = v70; // 0x40727a\n    while (v71 != 0) {\n        // 0x407268\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x4071e4;\n  lab_0x407228:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40723b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x407247\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40724a\n    int64_t v79 = v76; // 0x40724a\n    while (v77 != 0) {\n        // 0x407238\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x4071e4;\n  lab_0x4071f6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40720b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x407217\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40721a\n    int64_t v85 = v82; // 0x40721a\n    while (v83 != 0) {\n        // 0x407208\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x4071e4;\n  lab_0x4071bb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x4071d3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x4071df\n    int32_t v90 = v89; // 0x4071e2\n    int64_t v91 = v88; // 0x4071e2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x4071d0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x4071e4;\n  lab_0x40719f:\n    // 0x40719f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x407157;\n    } else {\n        // 0x4071a8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x407128;\n    }\n  lab_0x407128:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40712d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x407012;\n  lab_0x407185:\n    // 0x407185\n    *a4 = v18;\n    // 0x407015\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407157:\n    // 0x407157\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x407128;\n  lab_0x4071e4:\n    // 0x4071e4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x407128;\n}\n"
        },
        {
            "funcName": "function_4073b0",
            "funcStartAddr": "4073b0",
            "funcEndAddr": "40742b",
            "decompiledFuncCode": "int64_t function_4073b0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4073b7\n    if (fileno(stream) < 0) {\n        // 0x407417\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4073ca\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4073fb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x407417\n            return fclose(stream);\n        }\n    }\n    // 0x4073cc\n    if ((int32_t)function_407570(a1, v1) == 0) {\n        // 0x407417\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4073d8\n    int32_t v3 = *v2; // 0x4073e0\n    int64_t result = fclose(stream); // 0x4073ee\n    if (v3 != 0) {\n        // 0x407420\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4073f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407430",
            "funcStartAddr": "407430",
            "funcEndAddr": "407565",
            "decompiledFuncCode": "int64_t function_407430(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x407510\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40746c\n    int64_t v2; // 0x407430\n    if (g73 < 0) {\n        int64_t v3 = function_407430(fd, 0, v1, a4); // 0x4074b4\n        int64_t v4 = v3 & 0xffffffff; // 0x4074b9\n        if ((int32_t)v3 < 0) {\n            // 0x4074a0\n            return v4 & 0xffffffff;\n        }\n        // 0x4074bf\n        v2 = v4;\n        if (g73 != -1) {\n            // 0x4074a0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x407487\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x407496\n            g73 = 1;\n            // 0x4074a0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_407430(fd & 0xffffffff, 0, v1, a4); // 0x407547\n        int64_t v7 = v6 & 0xffffffff; // 0x40754c\n        if ((int32_t)v6 < 0) {\n            // 0x4074a0\n            return v7 & 0xffffffff;\n        }\n        // 0x407556\n        g73 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4074cf\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x4074da\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4074a0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x4074f2\n    close(fd2);\n    // 0x4074a0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407570",
            "funcStartAddr": "407570",
            "funcEndAddr": "4075b0",
            "decompiledFuncCode": "int64_t function_407570(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40758a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40758a\n        return fflush(stream);\n    }\n    // 0x407598\n    function_4075b0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4075b0",
            "funcStartAddr": "4075b0",
            "funcEndAddr": "407607",
            "decompiledFuncCode": "int64_t function_4075b0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4075b0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4075ba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4075eb\n    int64_t result = -1; // 0x4075f4\n    if (v1 != -1) {\n        // 0x4075f6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407602\n    return result;\n}\n"
        },
        {
            "funcName": "function_407610",
            "funcStartAddr": "407610",
            "funcEndAddr": "4076ef",
            "decompiledFuncCode": "int64_t function_407610(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40761c\n    uint32_t v2 = *v1; // 0x40761c\n    int64_t v3 = a2 & 0xffffffff; // 0x407621\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407624\n    uint64_t v5 = (int64_t)*v4; // 0x407624\n    int64_t v6; // 0x407692\n    if (v3 <= v5) {\n      lab_0x40768c_2:\n        // 0x40768c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407612\n    int64_t v8 = v2; // 0x407610\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40768c\n        goto lab_0x40768c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407648\n    int64_t v17; // 0x407656\n    int64_t * v18; // 0x407670\n    int64_t * v19; // 0x407673\n    int64_t v20; // 0x40767e\n    int64_t v21; // 0x407656\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407653\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407670\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407687\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40768c\n            goto lab_0x40768c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40768c\n            goto lab_0x40768c_2;\n        }\n        // 0x407642\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4076cb\n    int64_t * v23 = (int64_t *)v22; // 0x4076d0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4076d3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4076d0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4076e7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40763d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40768c\n            goto lab_0x40768c_2;\n        }\n        // 0x407642\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407653\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407670\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407687\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40768c\n                goto lab_0x40768c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40768c\n                goto lab_0x40768c_2;\n            }\n            // 0x407642\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4076b0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4076d0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4076e7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40768c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4076f0",
            "funcStartAddr": "4076f0",
            "funcEndAddr": "407d0c",
            "decompiledFuncCode": "int64_t function_4076f0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40770f\n    int64_t v2 = *v1; // 0x40770f\n    char * str2 = (char *)v2; // 0x40771c\n    char c = *str2; // 0x40771c\n    int64_t v3 = v2; // 0x407748\n    int64_t v4 = 0; // 0x4076f0\n    int32_t v5; // 0x4076f0\n    int64_t v6; // 0x4076f0\n    int64_t v7; // 0x4076f0\n    int64_t v8; // 0x4076f0\n    int64_t v9; // 0x4076f0\n    int64_t v10; // 0x4076f0\n    int64_t v11; // 0x4076f0\n    int64_t v12; // 0x4076f0\n    int64_t v13; // 0x4076f0\n    int64_t str3; // 0x4076f0\n    int64_t v14; // 0x4076f0\n    int64_t v15; // 0x4076f0\n    int64_t v16; // 0x4076f0\n    int64_t v17; // 0x4076f0\n    int32_t v18; // 0x4076f0\n    int32_t v19; // 0x4076f0\n    int32_t v20; // 0x4076f0\n    int32_t v21; // 0x4076f0\n    int32_t v22; // 0x4076f0\n    int32_t v23; // 0x4076f0\n    int32_t v24; // 0x4076f0\n    int32_t v25; // 0x4076f0\n    int32_t v26; // 0x4076f0\n    int32_t v27; // 0x4076f0\n    int32_t v28; // 0x4076f0\n    int32_t v29; // 0x4076f0\n    int64_t nmemb; // 0x4076f0\n    int64_t v30; // 0x4076f0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40774c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407748\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407758\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40775e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407728\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40778c\n                int64_t v34; // 0x4076f0\n                int64_t v35; // 0x4076f0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407795\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x407910;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4077a6\n                int64_t v37 = *(int64_t *)v36; // 0x4077aa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407780\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407795\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x407910;\n                        }\n                    }\n                    // 0x4077a6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4077f6:\n                    // 0x4077f6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407850;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4079c0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407850;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x407970\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40781a;\n                                } else {\n                                    // 0x40797c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40781a;\n                                    } else {\n                                        // 0x40798a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40781a;\n                                        } else {\n                                            goto lab_0x407850;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40781a;\n                            }\n                        }\n                    }\n                }\n              lab_0x407861:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x407a36\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x407be2\n                            flockfile(g39);\n                            int64_t v41 = *v1; // 0x407c02\n                            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x407c4f\n                            int64_t v43 = (int64_t)g39;\n                            int64_t v44 = v43; // 0x407c69\n                            int64_t v45; // 0x407c6b\n                            if (*(char *)v42 != 0) {\n                                // 0x407c6b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g39;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x407c63\n                            while (v17 + nmemb != v42) {\n                                // 0x407c65\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x407c6b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g39;\n                                }\n                                // 0x407c58\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x407c90\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g39);\n                            v40 = *v1;\n                        } else {\n                            // 0x407a44\n                            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x407b9f\n                        free((int64_t *)v17);\n                    }\n                    // 0x407a99\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x407ab0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40795e\n                    return 63;\n                }\n                // 0x407880\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x407904\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x407910:;\n                    int32_t * v49 = (int32_t *)a7; // 0x407920\n                    uint32_t v50 = *v49; // 0x407920\n                    int64_t v51 = v50; // 0x407920\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40792a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x407933\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x407b5f\n                                __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x407b0a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40795e\n                            return 63;\n                        }\n                        // 0x4079a8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x407cbf\n                                    __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x407bbd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x407bd0\n                                // 0x40795e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x407ace\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x407ae2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40794b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40794e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407952\n                    int64_t result = v59; // 0x407958\n                    if (v58 != 0) {\n                        // 0x40795a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40795e\n                    return result;\n                }\n            } else {\n                // 0x40775e\n                v5 = v32;\n            }\n            // break -> 0x407885\n            break;\n        }\n    }\n    // 0x407885\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40789d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4078a7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40795e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4079e9\n        __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4078d6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4078e6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407850:\n    // 0x407850\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407850\n    int64_t v63 = *(int64_t *)v62; // 0x407854\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407861\n        goto lab_0x407861;\n    }\n    goto lab_0x4077f6;\n  lab_0x40781a:\n    // 0x40781a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4076f0\n    int32_t v65; // 0x4076f0\n    int32_t v66; // 0x4076f0\n    if (v27 != 0) {\n        goto lab_0x407850;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4079d0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407850;\n            } else {\n                goto lab_0x407841;\n            }\n        } else {\n            // 0x407835\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x407b2c\n                int64_t v67 = (int64_t)mem; // 0x407b2c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407850;\n                } else {\n                    // 0x407b3f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407841;\n                }\n            } else {\n                goto lab_0x407841;\n            }\n        }\n    }\n  lab_0x407841:\n    // 0x407841\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407850;\n}\n"
        },
        {
            "funcName": "function_407d10",
            "funcStartAddr": "407d10",
            "funcEndAddr": "4082d6",
            "decompiledFuncCode": "int64_t function_407d10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407d31\n    if (v3 < 1) {\n        // 0x407eee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x407d2d\n    int32_t v5 = *(int32_t *)a7; // 0x407d39\n    uint64_t v6 = a1 & 0xffffffff; // 0x407d3b\n    int64_t v7 = v2; // 0x407d40\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x407d43\n    *v8 = 0;\n    int64_t v9; // 0x407d10\n    int64_t v10; // 0x407d10\n    int64_t v11; // 0x407d10\n    int64_t v12; // 0x407d10\n    int64_t str; // 0x407d10\n    int64_t v13; // 0x407d10\n    int64_t v14; // 0x407d10\n    int64_t v15; // 0x407d10\n    int64_t v16; // 0x407d10\n    int64_t v17; // 0x407d10\n    int32_t v18; // 0x407d10\n    char v19; // 0x407d10\n    if (v5 == 0) {\n        // 0x407f28\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x407d5a;\n    } else {\n        // 0x407d53\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x407da0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x407da3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x407e68;\n            } else {\n                int64_t v22 = v7 + 1; // 0x407db6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x407dc6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x407e7c;\n                } else {\n                    goto lab_0x407dd8;\n                }\n            }\n        } else {\n            goto lab_0x407d5a;\n        }\n    }\n  lab_0x407d5a:\n    // 0x407d5a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x407d60\n    *v24 = 0;\n    int64_t v25; // 0x407d10\n    int64_t v26; // 0x407d10\n    int64_t v27; // 0x407d10\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x407e50\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407e5d;\n        }\n        case 43: {\n            // 0x408160\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407e5d;\n        }\n        default: {\n            // 0x407d7c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4080df\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4081f8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x407e5d;\n                } else {\n                    // 0x4080ed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x407d8a;\n                }\n            } else {\n                goto lab_0x407d8a;\n            }\n        }\n    }\n  lab_0x407e68:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x407e6f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x407dd8;\n    } else {\n        goto lab_0x407e7c;\n    }\n  lab_0x407d8a:\n    // 0x407d8a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x407e5d;\n  lab_0x407e5d:\n    // 0x407e5d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x407e68;\n  lab_0x407dd8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x407dd8\n    int64_t v31 = v30; // 0x407dd8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x407dda\n    if ((int64_t)*v32 > v31) {\n        // 0x407ddf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x407de2\n    if (*v33 > v30) {\n        // 0x407de7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x407dea\n    int64_t v35 = v31; // 0x407dee\n    int64_t v36 = v15; // 0x407dee\n    int64_t v37; // 0x407d10\n    int64_t v38; // 0x407d10\n    int64_t v39; // 0x407d10\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x407f58\n        int64_t v41 = v40; // 0x407f58\n        v2 = v41;\n        int64_t v42; // 0x407d10\n        if (*v33 == v40) {\n            // 0x408140\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408148\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x407f64\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407f68\n                function_407610(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x407f78\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x407f81\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x407f8a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407fa1\n            int64_t v47 = v45 & 0xffffffff; // 0x407fa5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x407fae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x407fb4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x407fb6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x407f90\n            int64_t v49 = v48 & 0xffffffff; // 0x407f90\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407fa1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x407fae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x407fb4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x407fb6;\n                    }\n                }\n                // 0x407f90\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408158\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x407fb6;\n    } else {\n        goto lab_0x407df4;\n    }\n  lab_0x407e7c:\n    // 0x407e7c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x407e7f\n    int64_t v51 = v12; // 0x407e7f\n    int64_t v52 = v14; // 0x407e7f\n    if (*(char *)v10 == 0) {\n        goto lab_0x407dd8;\n    } else {\n        goto lab_0x407e85;\n    }\n  lab_0x407df4:;\n    int32_t v53 = v35; // 0x407df4\n    int64_t v54; // 0x407d10\n    int64_t v55; // 0x407d10\n    int64_t v56; // 0x407d10\n    int64_t v57; // 0x407d10\n    int64_t v58; // 0x407d10\n    int64_t v59; // 0x407d10\n    char * v60; // 0x407d10\n    int64_t v61; // 0x407d10\n    int64_t v62; // 0x407e09\n    int64_t v63; // 0x407d10\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407f43\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407f46;\n    } else {\n        // 0x407dfc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407d10\n        int64_t v66 = v65 ? -1 : 1; // 0x407e10\n        int64_t v67 = (int64_t)\"--\"; // 0x407d10\n        int64_t v68 = v62; // 0x407d10\n        int64_t v69 = 3; // 0x407e10\n        unsigned char v70 = *(char *)v68; // 0x407e10\n        char v71 = *(char *)v67; // 0x407e10\n        char v72 = v71; // 0x407e10\n        bool v73 = false; // 0x407e10\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x407f00\n            if (*(char *)v62 == 45) {\n                // 0x407fc0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x407fc0\n                if (c == 0) {\n                    goto lab_0x407f0a;\n                } else {\n                    // 0x407fcd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408050;\n                    } else {\n                        if (c == 45) {\n                            // 0x408233\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4080a5;\n                        } else {\n                            // 0x407fde\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408050;\n                            } else {\n                                // 0x407fe3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408004;\n                                } else {\n                                    // 0x407fea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408050;\n                                    } else {\n                                        goto lab_0x408004;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x407f0a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407e20\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407e23\n            int64_t v77 = v35 + 1; // 0x407e26\n            int32_t v78 = v77; // 0x407e29\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408190\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407e37\n                    function_407610(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407e45\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407f46;\n        }\n    }\n  lab_0x407e85:;\n    // 0x407e85\n    int64_t v79; // bp-104, 0x407d10\n    int64_t v80 = &v79; // 0x407d1a\n    int64_t v81 = v50 + 1; // 0x407e85\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x407e8c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x407e91\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x407e95\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x407e99\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407ea1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407ea6\n    int32_t c2 = v84; // 0x407ea6\n    char * found_char_pos = strchr(str2, c2); // 0x407ea6\n    int64_t v87 = *v82; // 0x407eab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x407eb5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x407ec0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4081b0\n            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40817d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x407eee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407ea6\n    char v91 = *(char *)(v90 + 1); // 0x407edb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x407e95\n        if (v91 != 58) {\n            // 0x407eee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408104\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408208\n                *v8 = 0;\n            } else {\n                // 0x4081ec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40812e\n            *v83 = 0;\n            // 0x407eee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40810e\n        if (v93 != 0) {\n            // 0x4081a0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40812e\n            *v83 = 0;\n            // 0x407eee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408121\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40812e\n            *v83 = 0;\n            // 0x407eee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40826a\n            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40821a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408221\n        // 0x40812e\n        *v83 = 0;\n        // 0x407eee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x408079\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40807b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4082a0\n                __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408251\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408258\n            // 0x407eee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408086\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40808a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4080a5;\n  lab_0x407fb6:\n    // 0x407fb6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x407df4;\n  lab_0x4080a5:;\n    int64_t v99 = function_4076f0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4080c3\n    // 0x407eee\n    return v99 & 0xffffffff;\n  lab_0x407f46:;\n    int32_t v100 = v55; // 0x407f46\n    if (v100 != (int32_t)v59) {\n        // 0x407f4a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x407eee\n    return 0xffffffff;\n  lab_0x407f0a:\n    // 0x407f0a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407f11\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x407eee\n    return v99 & 0xffffffff;\n  lab_0x408050:\n    // 0x408050\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x407e85;\n  lab_0x408004:\n    // 0x408004\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4076f0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40802a\n    if ((int32_t)v101 != -1) {\n        // 0x407eee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40803f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408050;\n}\n"
        },
        {
            "funcName": "function_4082e0",
            "funcStartAddr": "4082e0",
            "funcEndAddr": "408336",
            "decompiledFuncCode": "int64_t function_4082e0(int64_t a1) {\n    // 0x4082e0\n    *(int32_t *)&g74 = g34;\n    *(int32_t *)&g75 = g33;\n    int64_t v1; // 0x4082e0\n    int64_t result = function_407d10(v1, v1, v1, v1, v1, v1, &g74, a1 & 0xffffffff); // 0x408306\n    g34 = *(int32_t *)&g74;\n    g79 = (char *)g77;\n    *(int32_t *)&g32 = g76;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408340",
            "funcStartAddr": "408340",
            "funcEndAddr": "408358",
            "decompiledFuncCode": "int64_t function_408340(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408340\n    return function_4082e0(1);\n}\n"
        },
        {
            "funcName": "function_408360",
            "funcStartAddr": "408360",
            "funcEndAddr": "408373",
            "decompiledFuncCode": "int64_t function_408360(int32_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x408360\n    return function_4082e0(0);\n}\n"
        },
        {
            "funcName": "function_408380",
            "funcStartAddr": "408380",
            "funcEndAddr": "408395",
            "decompiledFuncCode": "int64_t function_408380(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408380\n    return function_407d10(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4083a0",
            "funcStartAddr": "4083a0",
            "funcEndAddr": "4083b6",
            "decompiledFuncCode": "int64_t function_4083a0(void) {\n    // 0x4083a0\n    return function_4082e0(0);\n}\n"
        },
        {
            "funcName": "function_4083c0",
            "funcStartAddr": "4083c0",
            "funcEndAddr": "4083d8",
            "decompiledFuncCode": "int64_t function_4083c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4083c0\n    return function_407d10(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4083e0",
            "funcStartAddr": "4083e0",
            "funcEndAddr": "40845a",
            "decompiledFuncCode": "int64_t function_4083e0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4083eb\n    int64_t v2 = (int64_t)&g13; // 0x4083eb\n    int32_t * pwc; // 0x4083e0\n    int64_t v3; // 0x4083e0\n    int64_t n; // 0x4083e0\n    if (a2 == 0) {\n        goto lab_0x408432;\n    } else {\n        // 0x4083ed\n        if (a3 == 0) {\n            // 0x408418\n            return -2;\n        }\n        // 0x4083f9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408432;\n        } else {\n            goto lab_0x408404;\n        }\n    }\n  lab_0x408432:\n    // 0x408432\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4083e0\n    pwc = (int32_t *)&v4;\n    goto lab_0x408404;\n  lab_0x408404:;\n    char * wstr = (char *)v3; // 0x40840a\n    int64_t ps; // 0x4083e0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40840a\n    int64_t result = v5; // 0x40840a\n    if (v5 < 0xfffffffe) {\n        // 0x408418\n        return result;\n    }\n    int64_t result2 = result; // 0x408449\n    if ((char)function_416310(0, v3) == 0) {\n        // 0x40844b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408418\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408460",
            "funcStartAddr": "408460",
            "funcEndAddr": "408564",
            "decompiledFuncCode": "int64_t function_408460(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x408460\n    if (a3 == 0) {\n        // 0x408499\n        return 0;\n    }\n    int64_t v1 = result; // 0x40846c\n    int64_t v2 = a3; // 0x40846c\n    int64_t result2; // 0x408460\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40846e\n        int64_t v4 = result; // 0x408471\n        if ((char)result == v3) {\n            // 0x408499\n            return result;\n        }\n        int64_t v5 = a3; // 0x408471\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x408480\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x4084a0;\n            }\n            // 0x408486\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x408499\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x408499\n        return result2;\n    }\n  lab_0x4084a0:;\n    int64_t result3 = v1; // 0x4084cd\n    int64_t v6 = v2; // 0x4084cd\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x4084af\n        int64_t v8 = 0x10000 * v7 | v7; // 0x4084bc\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x4084c6\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x4084e6\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x408515\n            int64_t v12 = v1 + 8; // 0x408519\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x408503\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40852c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x408523\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x408499\n                return 0;\n            }\n        }\n    }\n  lab_0x40852c:;\n    char v14 = a2; // 0x40852c\n    if (*(char *)result3 == v14) {\n        // 0x408499\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x408540\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x408499\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x408499\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408570",
            "funcStartAddr": "408570",
            "funcEndAddr": "4085b3",
            "decompiledFuncCode": "int64_t function_408570(int64_t a1, int64_t a2, int64_t a3) {\n    bool v1 = a1 == 0 | a2 == 0;\n    if (v1) {\n        // 0x40858a\n        return 0;\n    }\n    // 0x408580\n    int64_t v2; // 0x408570\n    int64_t result = v2 & -256 | (int64_t)v1; // 0x40857c\n    int64_t v3 = *(int64_t *)(a1 + 8); // 0x408580\n    if (v3 != *(int64_t *)(a2 + 8)) {\n        // 0x40858a\n        return result;\n    }\n    int64_t v4 = v3; // 0x4085a2\n    v4--;\n    int64_t result2 = 1; // 0x4085a6\n    while (v4 >= 0) {\n        int64_t v5 = 8 * v4; // 0x408598\n        int64_t v6 = *(int64_t *)(*(int64_t *)(a1 + 16) + v5); // 0x40859c\n        result2 = result;\n        if (v6 != *(int64_t *)(*(int64_t *)(a2 + 16) + v5)) {\n            // break -> 0x40858a\n            break;\n        }\n        v4--;\n        result2 = 1;\n    }\n    // 0x40858a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4085c0",
            "funcStartAddr": "4085c0",
            "funcEndAddr": "40862b",
            "decompiledFuncCode": "int64_t function_4085c0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a1; // 0x4085cd\n    int64_t result; // 0x4085c0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = *(int64_t *)(v2 + 8); // 0x4085d3\n        v1 = v3;\n        if (v3 == 0) {\n            int64_t v4 = *(int64_t *)(v2 + 16); // 0x4085dc\n            v1 = v4;\n            if (v4 == 0) {\n                // 0x4085e5\n                result = v4;\n                if ((int32_t)v4 != 0) {\n                    // break -> 0x408626\n                    break;\n                }\n                int64_t v5 = *(int64_t *)v2; // 0x4085f8\n                result = v4;\n                if (v5 == 0) {\n                    // break -> 0x408626\n                    break;\n                }\n                int64_t v6 = v2;\n                int64_t v7 = v5;\n                int64_t v8 = *(int64_t *)(v7 + 16); // 0x408600\n                v1 = v8;\n                while (v8 == 0 || v8 == v6) {\n                    // 0x408619\n                    result = v8;\n                    if ((int32_t)v8 != 0) {\n                        return result;\n                    }\n                    int64_t v9 = *(int64_t *)v7; // 0x4085f8\n                    result = v8;\n                    if (v9 == 0) {\n                        return result;\n                    }\n                    v6 = v7;\n                    v7 = v9;\n                    v8 = *(int64_t *)(v7 + 16);\n                    v1 = v8;\n                }\n            }\n        }\n    }\n  lab_0x408626_2:\n    // 0x408626\n    return result;\n}\n"
        },
        {
            "funcName": "function_408630",
            "funcStartAddr": "408630",
            "funcEndAddr": "40875f",
            "decompiledFuncCode": "int64_t function_408630(int64_t * a1, int64_t a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x408630\n    uint64_t v3 = *v2; // 0x408630\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x4086c0\n        *(char *)(v1 + 8) = 2;\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40863e\n    char v5 = *(char *)(v4 + v3); // 0x408649\n    *(char *)a1 = v5;\n    if (*(int32_t *)(a2 + 144) >= 2) {\n        // 0x408652\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x408658\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                // 0x408697\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n        }\n    }\n    switch (v5) {\n        case 92: {\n            if (a3 % 2 == 0) {\n                // 0x408697\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            int64_t v6 = v3 + 1;\n            if (v6 >= *(int64_t *)(a2 + 88)) {\n                // 0x408697\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            // 0x408710\n            *v2 = v6;\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = *(char *)(v4 + v6);\n            return 1;\n        }\n        case 91: {\n            uint64_t v7 = v3 + 1;\n            if (v7 >= *(int64_t *)(a2 + 88)) {\n                // 0x4086ee\n                *(char *)(v1 + 8) = 1;\n                *(char *)a1 = 91;\n                return 1;\n            }\n            char v8 = *(char *)(v4 + v7); // 0x4086da\n            *(char *)a1 = v8;\n            switch (v8) {\n                case 58: {\n                    if ((a3 & 4) != 0) {\n                        // 0x408755\n                        *(char *)(v1 + 8) = 30;\n                        return 2;\n                    }\n                    // 0x4086ee\n                    *(char *)(v1 + 8) = 1;\n                    *(char *)a1 = 91;\n                    return 1;\n                }\n                case 61: {\n                    // 0x408740\n                    *(char *)(v1 + 8) = 28;\n                    return 2;\n                }\n                case 46: {\n                    // 0x408730\n                    *(char *)(v1 + 8) = 26;\n                    return 2;\n                }\n            }\n            // 0x4086ee\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = 91;\n            return 1;\n        }\n        case 93: {\n            // 0x408700\n            *(char *)(v1 + 8) = 21;\n            return 1;\n        }\n    }\n    if (v5 == 94) {\n        // 0x40867b\n        *(char *)(v1 + 8) = 25;\n        return 1;\n    }\n    if (v5 == 45) {\n        // 0x4086ad\n        *(char *)(v1 + 8) = 22;\n        return 1;\n    }\n    // 0x408697\n    *(char *)(v1 + 8) = 1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408760",
            "funcStartAddr": "408760",
            "funcEndAddr": "40877d",
            "decompiledFuncCode": "int64_t function_408760(int64_t a1, int64_t a2) {\n    // 0x408760\n    if (*(char *)(a2 + 48) != 17 || *(int64_t *)(a2 + 40) != a1) {\n        // 0x408766\n        return 0;\n    }\n    char * v1 = (char *)(a2 + 50); // 0x408776\n    *v1 = *v1 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408780",
            "funcStartAddr": "408780",
            "funcEndAddr": "40898f",
            "decompiledFuncCode": "int64_t function_408780(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x408795\n    uint64_t v2 = 0x100000000 * a2 >> 32; // 0x4087a5\n    int64_t v3 = *(int64_t *)(v1 + 48) + 24 * a4; // 0x4087ad\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x4087b1\n    int64_t v5 = *v4; // 0x4087b1\n    if (v5 < 1) {\n        // 0x40895d\n        return (int32_t)v2 >> 1;\n    }\n    int64_t v6 = 1 << a3 % 64;\n    int32_t v7 = v2;\n    int64_t v8 = v5; // 0x4087fe\n    int64_t v9 = 0; // 0x4087fe\n    int64_t v10; // 0x408809\n    int64_t v11; // 0x408780\n    int64_t v12; // 0x408780\n    int64_t v13; // 0x408780\n    int64_t v14; // 0x408780\n    while (true) {\n      lab_0x408813_2:\n        // 0x408813\n        v13 = v9;\n        v10 = v8;\n        int64_t v15 = *(int64_t *)(*(int64_t *)(v3 + 16) + 8 * v13); // 0x408817\n        int64_t v16 = 16 * v15 + *(int64_t *)v1; // 0x408822\n        char v17 = *(char *)(v16 + 8); // 0x408825\n        if (v17 == 8) {\n            if (v7 % 2 != 0) {\n                // 0x408860\n                if (*(int64_t *)v16 == a3) {\n                    // 0x408840\n                    return 0xffffffff;\n                }\n            }\n            goto lab_0x408805;\n        } else {\n            if (v17 != 9) {\n                if (a5 == -1 || v17 != 4) {\n                    goto lab_0x408805;\n                } else {\n                    // 0x40888a\n                    v14 = 24 * v15 + 16;\n                    v11 = *(int64_t *)(a1 + 216) + 40 * a5;\n                    while (true) {\n                      lab_0x4088c0:\n                        // 0x4088c0\n                        v12 = v11;\n                        if (*(int64_t *)v12 != v15) {\n                            goto lab_0x408930;\n                        } else {\n                            if (a3 > 63) {\n                                goto lab_0x4088d9;\n                            } else {\n                                // 0x4088cc\n                                if ((v6 & (int64_t)*(int16_t *)(v12 + 34)) == 0) {\n                                    goto lab_0x408930;\n                                } else {\n                                    goto lab_0x4088d9;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x40893c:;\n                    int64_t v18 = v13 + 1; // 0x40894f\n                    uint64_t v19 = *v4; // 0x408953\n                    v8 = v19;\n                    v9 = v18;\n                    if (v19 <= v18) {\n                        // break -> 0x40895d\n                        break;\n                    }\n                    goto lab_0x408813_2;\n                }\n            } else {\n                if ((v7 & 2) != 0) {\n                    // 0x40883b\n                    if (*(int64_t *)v16 == a3) {\n                        // 0x408840\n                        return 0;\n                    }\n                }\n                goto lab_0x408805;\n            }\n        }\n    }\n  lab_0x40895d:\n    // 0x40895d\n    return v7 >> 1;\n  lab_0x408930:\n    // 0x408930\n    v11 = v12 + 40;\n    if (*(char *)(v12 + 32) == 0) {\n        // break -> 0x40893c\n        goto lab_0x40893c;\n    }\n    goto lab_0x4088c0;\n  lab_0x4088d9:;\n    int64_t v20 = *(int64_t *)*(int64_t *)(v14 + *(int64_t *)(v1 + 40)); // 0x4088e2\n    if (v20 == a4) {\n        // 0x408978\n        return -((v2 % 2)) & 0xffffffff;\n    }\n    int32_t v21 = function_408780(a1, v2 & 0xffffffff, a3, v20, a5); // 0x408903\n    if (v21 == -1) {\n        // 0x408840\n        return 0xffffffff;\n    }\n    // 0x40890c\n    if ((v7 & 2) != 0 == v21 == 0) {\n        // 0x408840\n        return 0;\n    }\n    if (a3 <= 63) {\n        int16_t * v22 = (int16_t *)(v12 + 34); // 0x408927\n        *v22 = *v22 & -1 - (int16_t)v6;\n    }\n    goto lab_0x408930;\n  lab_0x408805:;\n    int64_t v23 = v13 + 1; // 0x408805\n    v8 = v10;\n    v9 = v23;\n    if (v10 <= v23) {\n        // break -> 0x40895d\n        goto lab_0x40895d;\n    }\n    goto lab_0x408813;\n  lab_0x408813:\n    // 0x408813\n    goto lab_0x408813_2;\n}\n"
        },
        {
            "funcName": "function_408990",
            "funcStartAddr": "408990",
            "funcEndAddr": "4089f6",
            "decompiledFuncCode": "int64_t function_408990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = *(int64_t *)(a1 + 216) + 40 * a2; // 0x40899b\n    int64_t v2 = *(int64_t *)(v1 + 16); // 0x40899f\n    if (v2 > a5) {\n        // 0x4089c6\n        return 0xffffffff;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 24); // 0x4089a8\n    if (v3 < a5) {\n        // 0x4089c6\n        return 1;\n    }\n    if (v3 == a5) {\n        // 0x4089d3\n        return function_408780(a1, (int64_t)(v2 == a5) | 2, a3, a4, a6);\n    }\n    // 0x4089bf\n    if (v2 == a5) {\n        // 0x4089d3\n        return function_408780(a1, 1, a3, a4, a6);\n    }\n    // 0x4089c6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a9c",
            "decompiledFuncCode": "int64_t function_408a00(int64_t a1, uint64_t a2) {\n    // 0x408a00\n    if (*(int32_t *)(a1 + 144) >= 2) {\n        if (a2 >= 0x2000000000000000) {\n            // 0x408a90\n            return 12;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 16); // 0x408a24\n        int32_t v2 = a2;\n        int64_t * mem = realloc((int64_t *)*v1, 4 * v2); // 0x408a30\n        if (mem == NULL) {\n            // 0x408a90\n            return 12;\n        }\n        int64_t * v3 = (int64_t *)(a1 + 24); // 0x408a3a\n        int64_t v4 = *v3; // 0x408a3a\n        *v1 = (int64_t)mem;\n        if (v4 != 0) {\n            int64_t * mem2 = realloc((int64_t *)v4, 8 * v2); // 0x408a4f\n            if (mem2 == NULL) {\n                // 0x408a90\n                return 12;\n            }\n            // 0x408a59\n            *v3 = (int64_t)mem2;\n        }\n    }\n    // 0x408a5d\n    if (*(char *)(a1 + 139) == 0) {\n        // 0x408a66\n        *(int64_t *)(a1 + 64) = a2;\n        return 0;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x408a78\n    int64_t * mem3 = realloc((int64_t *)*v5, (int32_t)a2); // 0x408a7f\n    if (mem3 == NULL) {\n        // 0x408a90\n        return 12;\n    }\n    // 0x408a89\n    *v5 = (int64_t)mem3;\n    // 0x408a66\n    *(int64_t *)(a1 + 64) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408aa0",
            "funcStartAddr": "408aa0",
            "funcEndAddr": "408b04",
            "decompiledFuncCode": "int64_t function_408aa0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408aac\n    int64_t v2 = *v1; // 0x408aac\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x408ab0\n    int64_t v4 = *v3; // 0x408ab0\n    int64_t v5 = v4; // 0x408ab7\n    int64_t v6 = v2; // 0x408ab7\n    if (v2 == a1) {\n        int64_t v7 = a1 + 1; // 0x408ad8\n        *(int64_t *)a1 = 2 * v7;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)v7); // 0x408aea\n        if (mem == NULL) {\n            // 0x408aca\n            return 0;\n        }\n        // 0x408af4\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    // 0x408ab9\n    *v1 = v6 + 1;\n    *(int64_t *)(8 * v6 + v5) = a2;\n    // 0x408aca\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408b10",
            "funcStartAddr": "408b10",
            "funcEndAddr": "408c3c",
            "decompiledFuncCode": "int64_t function_408b10(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x408b48\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408b24\n    int64_t v2 = *v1; // 0x408b24\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x408b28\n    int64_t v4 = *v3; // 0x408b28\n    if (v2 == 0) {\n        // 0x408b31\n        *(int64_t *)v4 = a2;\n        *v1 = *v1 + 1;\n        // 0x408b3e\n        return 1;\n    }\n    int64_t v5 = v4; // 0x408b83\n    int64_t v6 = v2; // 0x408b83\n    if (v2 == a1) {\n        // 0x408c10\n        *(int64_t *)a1 = 2 * a1;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)a1); // 0x408c1e\n        if (mem == NULL) {\n            // 0x408b3e\n            return 0;\n        }\n        // 0x408c28\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    int64_t v7 = 8 * v6; // 0x408b89\n    int64_t v8; // 0x408b10\n    if (*(int64_t *)v5 > a2) {\n        // 0x408b96\n        v8 = v7;\n        if (v6 >= 1) {\n            int64_t v9 = v7 + v5;\n            int64_t v10 = v9 - 8; // 0x408ba0\n            *(int64_t *)v9 = *(int64_t *)v10;\n            v8 = 0;\n            while (v10 != v5) {\n                // 0x408ba0\n                v9 = v10;\n                v10 = v9 - 8;\n                *(int64_t *)v9 = *(int64_t *)v10;\n                v8 = 0;\n            }\n        }\n    } else {\n        int64_t v11 = v5 - 8; // 0x408bd0\n        int64_t v12 = *(int64_t *)(v7 + v11); // 0x408bd0\n        v8 = v7;\n        if (v12 > a2) {\n            *(int64_t *)(v7 + v5) = v12;\n            int64_t v13 = v7 - 8; // 0x408be4\n            uint64_t v14 = *(int64_t *)(v13 + v11); // 0x408be8\n            v8 = v13;\n            int64_t v15 = v13; // 0x408bf0\n            while (v14 > a2) {\n                // 0x408be0\n                *(int64_t *)(v15 + v5) = v14;\n                v13 = v15 - 8;\n                v14 = *(int64_t *)(v13 + v11);\n                v8 = v13;\n                v15 = v13;\n            }\n        }\n    }\n    // 0x408bb3\n    *(int64_t *)(v8 + v5) = a2;\n    *v1 = *v1 + 1;\n    // 0x408b3e\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408c40",
            "funcStartAddr": "408c40",
            "funcEndAddr": "408d3b",
            "decompiledFuncCode": "int64_t function_408c40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2 + 32; // 0x408c4e\n    int64_t * v2 = (int64_t *)(a2 + 16); // 0x408c5b\n    int64_t v3 = *v2; // 0x408c5b\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)v1 = v3;\n    int64_t size = 8 * v3; // 0x408c6e\n    int64_t * mem = malloc((int32_t)size); // 0x408c76\n    *(int64_t *)(a2 + 48) = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x408cbe\n        return 12;\n    }\n    if (v3 >= 0 == (v3 != 0)) {\n        int64_t v4 = 0; // 0x408c90\n        int64_t v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4); // 0x408c9e\n        int64_t v6 = size; // 0x408cb0\n        int64_t v7; // 0x408cb5\n        if ((*(char *)(size + 8 + 16 * v5) & 8) == 0) {\n            // 0x408cb2\n            v7 = function_408aa0(v1, v5);\n            v6 = v1;\n            if ((char)v7 == 0) {\n                // 0x408cbe\n                return 12;\n            }\n        }\n        // 0x408c90\n        v4++;\n        int64_t v8 = v6; // 0x408c98\n        while (*v2 > v4) {\n            // 0x408c9a\n            v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4);\n            v6 = v8;\n            if ((*(char *)(v8 + 8 + 16 * v5) & 8) == 0) {\n                // 0x408cb2\n                v7 = function_408aa0(v1, v5);\n                v6 = v1;\n                if ((char)v7 == 0) {\n                    // 0x408cbe\n                    return 12;\n                }\n            }\n            // 0x408c90\n            v4++;\n            v8 = v6;\n        }\n    }\n    int64_t v9 = 24 * (*(int64_t *)(a1 + 136) & a3) + *(int64_t *)(a1 + 64); // 0x408ce8\n    int64_t * v10 = (int64_t *)v9; // 0x408cec\n    uint64_t v11 = *v10; // 0x408cec\n    int64_t * v12 = (int64_t *)(v9 + 16); // 0x408cef\n    int64_t v13 = *v12; // 0x408cef\n    int64_t v14 = v11 + 1; // 0x408cf3\n    int64_t * v15 = (int64_t *)(v9 + 8); // 0x408cf7\n    int64_t v16 = v13; // 0x408cfb\n    int64_t v17 = v11; // 0x408cfb\n    int64_t v18 = v14; // 0x408cfb\n    if (*v15 <= v11) {\n        int64_t * mem2 = realloc((int64_t *)v13, 16 * (int32_t)v14); // 0x408d20\n        if (mem2 == NULL) {\n            // 0x408cbe\n            return 12;\n        }\n        // 0x408d2a\n        v16 = (int64_t)mem2;\n        v17 = *v10;\n        *v12 = v16;\n        *v15 = 2 * v14;\n        v18 = v17 + 1;\n    }\n    // 0x408cfd\n    *v10 = v18;\n    *(int64_t *)(8 * v17 + v16) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408d40",
            "funcStartAddr": "408d40",
            "funcEndAddr": "408d66",
            "decompiledFuncCode": "int64_t function_408d40(uint64_t a1, int64_t a2) {\n    uint64_t wc = a1 % 256; // 0x408d45\n    int32_t v1 = btowc((int32_t)wc); // 0x408d4f\n    int64_t v2 = v1; // 0x408d4f\n    int64_t result = v2; // 0x408d57\n    if (v1 == -1) {\n        // 0x408d59\n        result = (a2 == 0 ? wc : v2) & 0xffffffff;\n    }\n    // 0x408d5f\n    return result;\n}\n"
        },
        {
            "funcName": "function_408d70",
            "funcStartAddr": "408d70",
            "funcEndAddr": "408df0",
            "decompiledFuncCode": "int64_t function_408d70(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 88); // 0x408d72\n    int64_t v2 = *(int64_t *)(a1 + 64); // 0x408d77\n    int64_t v3 = v2 - v1; // 0x408d77\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0 ? v2 : v1; // 0x408d7f\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x408d84\n    uint64_t v6 = *v5; // 0x408d84\n    if (v4 <= v6) {\n        // 0x408de0\n        *(int64_t *)(a1 + 56) = v6;\n        int64_t result; // 0x408d70\n        return result;\n    }\n    int32_t ** v7 = __ctype_toupper_loc(); // 0x408d8d\n    int64_t v8 = v6; // 0x408d92\n    int64_t v9 = *(int64_t *)(a1 + 120); // 0x408d9c\n    int64_t v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40)); // 0x408da7\n    int64_t v11 = v10; // 0x408dad\n    if (v9 != 0) {\n        // 0x408dd8\n        v11 = (int64_t)*(char *)(v9 + v10);\n    }\n    int32_t v12 = *(int32_t *)(4 * v11 + (int64_t)*v7); // 0x408db6\n    *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n    v8++;\n    while (v4 != v8) {\n        // 0x408d98\n        v9 = *(int64_t *)(a1 + 120);\n        v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40));\n        v11 = v10;\n        if (v9 != 0) {\n            // 0x408dd8\n            v11 = (int64_t)*(char *)(v9 + v10);\n        }\n        // 0x408daf\n        v12 = *(int32_t *)(4 * v11 + (int64_t)*v7);\n        *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n        v8++;\n    }\n    // 0x408dc5\n    *v5 = v4;\n    *(int64_t *)(a1 + 56) = v4;\n    return (int64_t)v7;\n}\n"
        },
        {
            "funcName": "function_408df0",
            "funcStartAddr": "408df0",
            "funcEndAddr": "408f96",
            "decompiledFuncCode": "int64_t function_408df0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x408dff\n    int64_t v2 = *v1; // 0x408dff\n    int64_t * v3 = (int64_t *)(a1 + 48); // 0x408e03\n    int64_t v4 = *v3; // 0x408e03\n    int64_t * v5 = (int64_t *)(a1 + 64); // 0x408e07\n    int64_t v6 = *v5; // 0x408e07\n    int64_t v7 = v6 - v2; // 0x408e07\n    uint64_t v8 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v2)) < 0 ? v6 : v2; // 0x408e0b\n    int64_t result; // 0x408df0\n    if (v8 <= v4) {\n        // 0x408ea8\n        *v3 = v4;\n        *(int64_t *)(a1 + 56) = v4;\n        return result;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 120); // 0x408e20\n    int64_t * v10 = (int64_t *)(a1 + 32);\n    int64_t * v11 = (int64_t *)(a1 + 40);\n    int32_t * v12 = (int32_t *)(a1 + 144);\n    int64_t v13; // bp-104, 0x408df0\n    int64_t v14 = &v13;\n    int64_t v15 = v4; // 0x408df0\n    int64_t v16; // 0x408df0\n    int64_t v17; // 0x408df0\n    int64_t v18; // 0x408df0\n    int32_t v19; // bp-108, 0x408df0\n    int64_t v20; // 0x408e27\n    int64_t result2; // 0x408f68\n    while (true) {\n      lab_0x408e20:\n        // 0x408e20\n        v17 = v15;\n        int64_t v21 = *v9; // 0x408e20\n        v20 = *v10;\n        int64_t v22 = v8 - v17; // 0x408e2b\n        int64_t v23; // 0x408df0\n        if (v21 != 0) {\n            // 0x408f00\n            v23 = v14;\n            if (*v12 >= 1) {\n                // 0x408f0e\n                v23 = v14;\n                int64_t v24 = 0; // 0x408f18\n                int64_t v25 = v21; // 0x408f18\n                if (v22 >= 0 == (v22 != 0)) {\n                    int64_t v26 = v24 + v17;\n                    unsigned char v27 = *(char *)(v26 + v25 + *v11); // 0x408f3e\n                    char v28 = *(char *)(v25 + (int64_t)v27); // 0x408f41\n                    *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                    *(char *)(v24 + v14) = v28;\n                    int64_t v29 = v24 + 1; // 0x408f52\n                    v23 = v14;\n                    while (!((v22 == v29 | (v29 & 0xffffffff) >= (int64_t)*v12))) {\n                        // 0x408f2d\n                        v25 = *v9;\n                        v26 = v29 + v17;\n                        v27 = *(char *)(v26 + v25 + *v11);\n                        v28 = *(char *)(v25 + (int64_t)v27);\n                        *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                        *(char *)(v29 + v14) = v28;\n                        v29++;\n                        v23 = v14;\n                    }\n                }\n            }\n        } else {\n            // 0x408e37\n            v23 = v21 + v17 + *v11;\n        }\n        int64_t v30 = function_4083e0(&v19, v23, v22); // 0x408e49\n        if (v30 < 0xffffffffffffffff) {\n            // 0x408e58\n            v16 = v30;\n            v18 = v19;\n            if (v30 == -2) {\n                // 0x408f68\n                result2 = *v1;\n                if (*v5 < result2) {\n                    // break -> 0x408f76\n                    break;\n                }\n                goto lab_0x408ec0;\n            } else {\n                goto lab_0x408e66;\n            }\n        } else {\n            goto lab_0x408ec0;\n        }\n    }\n    // 0x408f76\n    *v10 = v20;\n    // 0x408ea8\n    *v3 = v17;\n    *(int64_t *)(a1 + 56) = v17;\n    return result2;\n  lab_0x408ec0:;\n    int64_t v31 = *v9; // 0x408ec3\n    unsigned char v32 = *(char *)(v17 + (int64_t)&v19 + *v11); // 0x408ece\n    int64_t v33 = v32; // 0x408ece\n    v19 = v32;\n    int64_t v34 = v33; // 0x408ed8\n    if (v31 != 0) {\n        unsigned char v35 = *(char *)(v31 + v33); // 0x408f7f\n        v19 = v35;\n        v34 = v35;\n    }\n    // 0x408ede\n    *v10 = v20;\n    v16 = 1;\n    v18 = v34;\n    goto lab_0x408e66;\n  lab_0x408e66:;\n    int64_t v36 = v16;\n    int64_t v37 = *(int64_t *)(a1 + 16); // 0x408e66\n    int64_t v38 = v17 + 1; // 0x408e6a\n    int64_t v39 = v37 + 4 * v17;\n    *(int32_t *)v39 = (int32_t)v18;\n    int64_t v40 = v36 + v17; // 0x408e79\n    int64_t v41; // 0x408df0\n    if (v38 < v40) {\n        int64_t v42 = v39 + 4; // 0x408e8a\n        *(int32_t *)v42 = -1;\n        v42 += 4;\n        while (v37 + 4 * v40 != v42) {\n            // 0x408e90\n            *(int32_t *)v42 = -1;\n            v42 += 4;\n        }\n        // 0x408e9f\n        v15 = v40;\n        result = v36;\n        v41 = v40;\n        if (v40 >= v8) {\n            // 0x408ea8\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    } else {\n        // 0x408ef0\n        v15 = v38;\n        result = v36;\n        v41 = v38;\n        if (v38 >= v8) {\n            // 0x408ea8\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    }\n    // 0x408e20\n    goto lab_0x408e20;\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "40959d",
            "decompiledFuncCode": "int64_t function_408fa0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x408fb1\n    int64_t v2 = *v1; // 0x408fb1\n    int64_t * v3 = (int64_t *)(a1 + 64); // 0x408fb5\n    int64_t v4 = *v3; // 0x408fb5\n    int64_t v5 = v4 - v2; // 0x408fb5\n    int64_t v6 = v5 == 0 | v5 < 0 != ((v5 ^ v4) & (v4 ^ v2)) < 0 ? v4 : v2; // 0x408fb9\n    int64_t * v7 = (int64_t *)(a1 + 48); // 0x408fc5\n    int64_t v8 = *v7; // 0x408fc5\n    int64_t * v9; // 0x408fa0\n    int64_t * v10; // 0x408fa0\n    int64_t v11; // 0x408fa0\n    int64_t v12; // 0x408fa0\n    int64_t v13; // 0x408fa0\n    int64_t v14; // 0x408fa0\n    int64_t v15; // 0x408fa0\n    int64_t v16; // 0x408fa0\n    int64_t v17; // 0x408fa0\n    int64_t v18; // 0x408fa0\n    int64_t v19; // 0x408fa0\n    int64_t v20; // 0x408fa0\n    int64_t wstr; // bp-120, 0x408fa0\n    struct _TYPEDEF___mbstate_t * v21; // bp-132, 0x408fa0\n    int32_t * v22; // 0x408fa0\n    int64_t v23; // 0x408fa0\n    int64_t * v24; // 0x409160\n    int64_t * v25; // 0x408fa0\n    int64_t * v26; // 0x408fa0\n    int64_t * v27; // 0x408fa0\n    int64_t v28; // 0x40916a\n    int64_t v29; // 0x409197\n    if (*(char *)(a1 + 138) != 0) {\n        goto lab_0x408fd6;\n    } else {\n        int64_t * v30 = (int64_t *)(a1 + 120);\n        if (*v30 == 0) {\n            // 0x409140\n            if (*(char *)(a1 + 140) != 0) {\n                goto lab_0x408fd6;\n            } else {\n                // 0x40914d\n                v16 = v8;\n                if (v8 < v6) {\n                    while (true) {\n                      lab_0x409160:\n                        // 0x409160\n                        v14 = v13;\n                        v28 = v14 + v19 + *v24;\n                        unsigned char v31 = *(char *)v28; // 0x40916d\n                        if (v31 <= -1) {\n                            goto lab_0x409189;\n                        } else {\n                            // 0x409178\n                            struct _TYPEDEF___mbstate_t * ps; // 0x40915a\n                            if (mbsinit(ps) != 0) {\n                                int32_t v32 = *(int32_t *)(4 * (int64_t)v31 + (int64_t)*__ctype_toupper_loc()); // 0x409294\n                                *(char *)(*v25 + v14) = (char)v32;\n                                unsigned char v33 = *(char *)(*v25 + v14); // 0x4092a4\n                                *(int32_t *)(*v26 + 4 * v14) = (int32_t)v33;\n                                int64_t v34; // 0x408fa0\n                                v20 = v34;\n                                v15 = v14 + 1;\n                                goto lab_0x40924a;\n                            } else {\n                                goto lab_0x409189;\n                            }\n                        }\n                    }\n                  lab_0x409380:\n                    // 0x409380\n                    v10 = v30;\n                    v9 = v27;\n                    v22 = (int32_t *)&v21;\n                    v23 = v29;\n                    v17 = v6;\n                    v18 = &wstr;\n                    v11 = v14;\n                    v12 = v14;\n                    goto lab_0x409000;\n                } else {\n                    goto lab_0x409253;\n                }\n            }\n        } else {\n            goto lab_0x408fd6;\n        }\n    }\n  lab_0x409253:\n    // 0x409253\n    *v7 = v16;\n    *(int64_t *)(a1 + 56) = v16;\n    // 0x40912a\n    return 0;\n  lab_0x408fda:;\n    // 0x408fda\n    int64_t v35; // 0x408fa0\n    int64_t v36 = v35;\n    int64_t v37; // 0x408fa0\n    int64_t v38 = v37;\n    int64_t v39; // 0x408fa0\n    int64_t v40 = v39;\n    int64_t v41 = v38; // 0x408fdd\n    int64_t v42 = v36; // 0x408fdd\n    int64_t v43; // 0x408fa0\n    if (v40 > v36) {\n        // 0x408fe3\n        v10 = (int64_t *)(a1 + 120);\n        v9 = (int64_t *)(a1 + 32);\n        v22 = (int32_t *)&v21;\n        v23 = v40 - v36;\n        v17 = v40;\n        v18 = v43;\n        v11 = v38;\n        v12 = v36;\n        goto lab_0x409000;\n    } else {\n        goto lab_0x409120;\n    }\n  lab_0x409189:\n    // 0x409189\n    v29 = v6 - v14;\n    int32_t ps2 = (int32_t)*v27; // bp-128, 0x40919a\n    uint64_t v44 = function_4083e0((int32_t *)&v21, v28, v29); // 0x4091b1\n    if (v44 < 0xfffffffffffffffe) {\n        int32_t wc = (int64_t)v21; // 0x4091c7\n        int32_t wc2 = towupper(wc); // 0x4091cd\n        int64_t v45; // 0x409207\n        if (wc2 == wc) {\n            int64_t v46 = *v25; // 0x409268\n            int64_t v47 = *v24; // 0x40926c\n            int64_t v48 = v46 + v14; // 0x409276\n            memcpy((int64_t *)v48, (int64_t *)(v47 + v14 + v48), (int32_t)v44);\n        } else {\n            int32_t v49 = wcrtomb((char *)&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x4091ed\n            if (v44 != (int64_t)v49) {\n                // break -> 0x409380\n                goto lab_0x409380;\n            }\n            // 0x4091fb\n            v45 = *v25 + v14;\n            memcpy((int64_t *)v45, &wstr, (int32_t)v44);\n        }\n        int64_t v50 = v45;\n        int64_t v51 = *v26; // 0x40920f\n        int64_t v52 = v14 + 1; // 0x40921b\n        int64_t v53 = v51 + 4 * v14;\n        *(int32_t *)v53 = wc2;\n        int64_t v54 = v44 + v14; // 0x409223\n        v20 = v50;\n        v15 = v52;\n        if (v52 < v54) {\n            int64_t v55 = v53 + 4; // 0x409234\n            *(int32_t *)v55 = -1;\n            v55 += 4;\n            v20 = v50;\n            v15 = v54;\n            while (v51 + 4 * v54 != v55) {\n                // 0x409238\n                *(int32_t *)v55 = -1;\n                v55 += 4;\n                v20 = v50;\n                v15 = v54;\n            }\n        }\n    } else {\n        int64_t v56; // 0x408fa0\n        if (v44 != -2) {\n            unsigned char v57 = *(char *)(v14 + v56 + *v24); // 0x4092ff\n            *(char *)(*v25 + v14) = v57;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v57;\n            *v27 = (int64_t)ps2;\n            v20 = v56;\n            v15 = v14 + 1;\n        } else {\n            // 0x4092be\n            if (*v3 < *v1) {\n                // 0x409537\n                *v27 = (int64_t)ps2;\n                v16 = v14;\n                goto lab_0x409253;\n            }\n            unsigned char v58 = *(char *)(v14 + v56 + *v24); // 0x4092da\n            *(char *)(*v25 + v14) = v58;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v58;\n            v20 = v56;\n            v15 = v14 + 1;\n        }\n    }\n    goto lab_0x40924a;\n  lab_0x40924a:\n    // 0x40924a\n    v19 = v20;\n    v13 = v15;\n    v16 = v15;\n    if (v6 <= v15) {\n        goto lab_0x409253;\n    }\n    goto lab_0x409160;\n  lab_0x408fd6:\n    // 0x408fd6\n    v39 = v6;\n    v43 = a1;\n    v37 = *(int64_t *)(a1 + 56);\n    v35 = v8;\n    goto lab_0x408fda;\n  lab_0x409120:\n    // 0x409120\n    *v7 = v42;\n    *(int64_t *)(a1 + 56) = v41;\n    // 0x40912a\n    return 0;\n  lab_0x409000:;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v17;\n    int64_t v62 = v23;\n    int64_t * v63 = v9;\n    int64_t * v64 = v10;\n    int64_t v65 = *v64; // 0x409004\n    ps2 = (int32_t)*v63;\n    int64_t v66; // 0x408fa0\n    if (v65 != 0) {\n        int32_t v67 = *(int32_t *)(a1 + 144); // 0x40931f\n        if (v62 < 1 || v67 < 1) {\n            // 0x40931f\n            v66 = &wstr;\n        } else {\n            int64_t v68 = &wstr;\n            int64_t v69 = 2 * (*(int64_t *)(a1 + 40) + v60); // 0x40934c\n            int64_t v70 = 0;\n            char v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69)); // 0x409360\n            *(char *)(v70 + v68) = v71;\n            v66 = v68;\n            while (v70 != (int64_t)(v67 - 1)) {\n                int64_t v72 = v70 + 1; // 0x409351\n                v66 = v68;\n                if (v62 == v72) {\n                    // break -> 0x409025\n                    break;\n                }\n                v70 = v72;\n                v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69));\n                *(char *)(v70 + v68) = v71;\n                v66 = v68;\n            }\n        }\n    } else {\n        // 0x409016\n        v66 = v60 + v18 + *(int64_t *)(a1 + 40);\n    }\n    int64_t v73 = v66;\n    uint64_t v74 = function_4083e0(v22, v73, v62); // 0x409038\n    int64_t v75; // 0x408fa0\n    int32_t wc4; // 0x409053\n    if (v74 < 0xfffffffffffffffe) {\n        int32_t wc3 = (int64_t)v21; // 0x40904e\n        wc4 = towupper(wc3);\n        if (wc4 == wc3) {\n            goto lab_0x409388;\n        } else {\n            int32_t v76 = wcrtomb((char *)&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x409081\n            int64_t v77 = v76; // 0x409081\n            if (v74 != v77) {\n                if (v76 == -1) {\n                    goto lab_0x409388;\n                } else {\n                    int64_t v78 = v59 + v77; // 0x40945b\n                    uint64_t v79 = *v3; // 0x409466\n                    if (v78 > v79) {\n                        goto lab_0x40910f;\n                    } else {\n                        int64_t * v80 = (int64_t *)(a1 + 24); // 0x409473\n                        int64_t v81 = *v80; // 0x409473\n                        int64_t v82 = v81; // 0x409478\n                        if (v81 == 0) {\n                            int64_t * mem = malloc(8 * (int32_t)v79); // 0x409557\n                            int64_t v83 = (int64_t)mem; // 0x409557\n                            *v80 = v83;\n                            v82 = v83;\n                            if (mem == NULL) {\n                                // 0x40912a\n                                return 12;\n                            }\n                        }\n                        char * v84 = (char *)(a1 + 140); // 0x40947e\n                        if (*v84 == 0) {\n                            int64_t v85 = v82; // 0x40948d\n                            if (v59 != 0) {\n                                int64_t v86 = 0;\n                                *(int64_t *)(8 * v86 + v85) = v86;\n                                int64_t v87 = v86 + 1; // 0x409497\n                                while (v59 != v87) {\n                                    // 0x409493\n                                    v86 = v87;\n                                    *(int64_t *)(8 * v86 + v85) = v86;\n                                    v87 = v86 + 1;\n                                }\n                            }\n                            // 0x4094a0\n                            *v84 = 1;\n                        }\n                        // 0x4094a8\n                        memcpy((int64_t *)(*(int64_t *)(a1 + 8) + v59), &wstr, v76);\n                        int64_t v88 = v74 - 1; // 0x4094c8\n                        int64_t v89 = *(int64_t *)(a1 + 16) + 4 * v59; // 0x4094cc\n                        *(int32_t *)v89 = wc4;\n                        int64_t v90 = *v80 + 8 * v59; // 0x4094d7\n                        *(int64_t *)v90 = v60;\n                        if (v76 >= 2) {\n                            uint64_t v91 = 1;\n                            int64_t v92 = v91 >= v74 ? v88 : v91; // 0x4094ef\n                            *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                            *(int32_t *)(4 * v91 + v89) = -1;\n                            int64_t v93 = v91 + 1; // 0x409501\n                            while (v93 != v77) {\n                                // 0x4094e9\n                                v91 = v93;\n                                v92 = v91 >= v74 ? v88 : v91;\n                                *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                                *(int32_t *)(4 * v91 + v89) = -1;\n                                v93 = v91 + 1;\n                            }\n                        }\n                        int64_t v94 = v77 - v74; // 0x40950e\n                        int64_t v95 = *v1 + v94; // 0x409511\n                        *v1 = v95;\n                        if (v60 < *(int64_t *)(a1 + 96)) {\n                            int64_t * v96 = (int64_t *)(a1 + 104); // 0x40951e\n                            *v96 = *v96 + v94;\n                        }\n                        int64_t v97 = *v3; // 0x409522\n                        int64_t v98 = v97 - v95; // 0x409522\n                        int64_t v99 = v98 == 0 | v98 < 0 != ((v98 ^ v97) & (v97 ^ v95)) < 0 ? v97 : v95; // 0x40952a\n                        v39 = v99;\n                        v43 = v88;\n                        v37 = v74 + v60;\n                        v35 = v78;\n                        goto lab_0x408fda;\n                    }\n                }\n            } else {\n                int64_t v100 = *(int64_t *)(a1 + 8) + v59; // 0x4090a9\n                memcpy((int64_t *)v100, &wstr, (int32_t)v74);\n                v75 = v100;\n                goto lab_0x4090b5;\n            }\n        }\n    } else {\n        if (v74 != -2) {\n            goto lab_0x4093bd;\n        } else {\n            // 0x4093af\n            if (*v3 < *v1) {\n                goto lab_0x40910f;\n            } else {\n                goto lab_0x4093bd;\n            }\n        }\n    }\n  lab_0x409388:;\n    int64_t v101 = *(int64_t *)(a1 + 8) + v59; // 0x409398\n    memcpy((int64_t *)v101, (int64_t *)v73, (int32_t)v74);\n    v75 = v101;\n    goto lab_0x4090b5;\n  lab_0x4093bd:;\n    int64_t v114 = (int64_t)&v21; // 0x409033\n    int64_t v115 = *v64; // 0x4093c0\n    int64_t v116 = (int64_t)*(char *)(v60 + v114 + *(int64_t *)(a1 + 40)); // 0x4093cb\n    int64_t v117 = v116; // 0x4093d1\n    if (v115 != 0) {\n        // 0x409594\n        v117 = (int64_t)*(char *)(v115 + v116);\n    }\n    // 0x4093d7\n    *(char *)(*(int64_t *)(a1 + 8) + v59) = (char)v117;\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x409587\n        *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v59) = v60;\n    }\n    int64_t v118 = *(int64_t *)(a1 + 16); // 0x4093f0\n    int64_t v119 = v60 + 1; // 0x4093f4\n    int64_t v120 = v59 + 1; // 0x4093f8\n    *(int32_t *)(v118 + 4 * v59) = (int32_t)v117;\n    v39 = v61;\n    v43 = v114;\n    v37 = v119;\n    v35 = v120;\n    if (v74 == -1) {\n        // 0x409409\n        *v63 = (int64_t)ps2;\n        v39 = v61;\n        v43 = v114;\n        v37 = v119;\n        v35 = v120;\n    }\n    goto lab_0x408fda;\n  lab_0x4090b5:;\n    int64_t v102 = v75;\n    int64_t v103; // 0x408fa0\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x409420\n        v103 = v60;\n        if (v74 != 0) {\n            int64_t v104 = v74 + v60; // 0x409433\n            int64_t v105 = v59 - v60; // 0x409438\n            int64_t v106 = v60;\n            *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n            int64_t v107 = v106 + 1; // 0x409443\n            v103 = v104;\n            while (v104 != v107) {\n                // 0x40943f\n                v106 = v107;\n                *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n                v107 = v106 + 1;\n                v103 = v104;\n            }\n        }\n    } else {\n        // 0x4090c3\n        v103 = v74 + v60;\n    }\n    int64_t v108 = v103;\n    int64_t v109 = *(int64_t *)(a1 + 16); // 0x4090ca\n    int64_t v110 = v59 + 1; // 0x4090ce\n    int64_t v111 = v74 + v59; // 0x4090d2\n    int64_t v112 = v109 + 4 * v59;\n    *(int32_t *)v112 = wc4;\n    v39 = v61;\n    v43 = v102;\n    v37 = v108;\n    v35 = v110;\n    if (v110 < v111) {\n        int64_t v113 = v112 + 4; // 0x4090f4\n        while (true) {\n            // 0x4090f8\n            *(int32_t *)v113 = -1;\n            v113 += 4;\n            v39 = v61;\n            v43 = v102;\n            v37 = v108;\n            v35 = v111;\n            if (v109 + 4 * v111 == v113) {\n                goto lab_0x408fda;\n            }\n        }\n    }\n    goto lab_0x408fda;\n  lab_0x40910f:\n    // 0x40910f\n    *v63 = (int64_t)ps2;\n    v41 = v60;\n    v42 = v59;\n    goto lab_0x409120;\n}\n"
        },
        {
            "funcName": "function_4095a0",
            "funcStartAddr": "4095a0",
            "funcEndAddr": "4096ee",
            "decompiledFuncCode": "int64_t function_4095a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 64); // 0x4095b0\n    uint64_t v2 = *v1; // 0x4095b0\n    if (v2 >= 0xfffffffffffffff) {\n        // 0x40964b\n        return 12;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 88); // 0x4095bd\n    int64_t v4 = *v3; // 0x4095bd\n    int64_t v5 = 2 * v2; // 0x4095c1\n    int64_t v6 = 0x100000000 * a2 >> 32; // 0x4095c4\n    int64_t v7 = v5 - v4; // 0x4095ca\n    int64_t v8 = v7 < 0 == ((v7 ^ v5) & (v4 ^ v5)) < 0 == (v7 != 0) ? v4 : v5; // 0x4095cd\n    int64_t v9 = v8 - v6; // 0x4095d1\n    int64_t v10 = function_408a00(a1, v9 < 0 == ((v9 ^ v8) & (v8 ^ v6)) < 0 ? v8 : v6); // 0x4095d8\n    int64_t result = v10 & 0xffffffff; // 0x4095dd\n    if ((int32_t)v10 != 0) {\n        // 0x40964b\n        return result;\n    }\n    int64_t * v11 = (int64_t *)(a1 + 184); // 0x4095e3\n    int64_t v12 = *v11; // 0x4095e3\n    if (v12 != 0) {\n        int64_t * mem = realloc((int64_t *)v12, 8 * (int32_t)*v1 + 8); // 0x4095fb\n        if (mem == NULL) {\n            // 0x40964b\n            return 12;\n        }\n        // 0x409609\n        *v11 = (int64_t)mem;\n    }\n    int32_t v13 = *(int32_t *)(a1 + 144); // 0x409617\n    if (*(char *)(a1 + 136) != 0) {\n        if (v13 >= 2) {\n            // 0x40962b\n            return function_408fa0(a1);\n        }\n        // 0x4096c8\n        function_408d70(a1);\n        return result;\n    }\n    if (v13 > 1) {\n        // 0x4096b0\n        function_408df0(a1);\n        return result;\n    }\n    int64_t * v14 = (int64_t *)(a1 + 120); // 0x40965d\n    int64_t v15 = *v14; // 0x40965d\n    if (v15 == 0) {\n        // 0x40964b\n        return result;\n    }\n    int64_t v16 = *v3; // 0x409666\n    int64_t * v17 = (int64_t *)(a1 + 48); // 0x40966a\n    uint64_t v18 = *v17; // 0x40966a\n    int64_t v19 = *v1; // 0x40966e\n    int64_t v20 = v19 - v16; // 0x40966e\n    uint64_t v21 = v20 == 0 | v20 < 0 != ((v20 ^ v19) & (v19 ^ v16)) < 0 ? v19 : v16; // 0x409672\n    if (v21 <= v18) {\n        // 0x40967c\n        *(int64_t *)(a1 + 56) = v18;\n        // 0x40964b\n        return result;\n    }\n    int64_t * v22 = (int64_t *)(a1 + 40); // 0x40968a\n    unsigned char v23 = *(char *)(v18 + v12 + *v22); // 0x40968e\n    int64_t * v24 = (int64_t *)(a1 + 8); // 0x409695\n    *(char *)(*v24 + v18) = *(char *)(v15 + (int64_t)v23);\n    int64_t v25 = v18 + 1; // 0x40969c\n    int64_t v26 = v25; // 0x4096a3\n    if (v21 != v25) {\n        unsigned char v27 = *(char *)(v26 + v12 + *v22); // 0x40968e\n        *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n        v26++;\n        while (v21 != v26) {\n            // 0x409680\n            v27 = *(char *)(v26 + v12 + *v22);\n            *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n            v26++;\n        }\n    }\n    // 0x4096a5\n    *v17 = v21;\n    *(int64_t *)(a1 + 56) = v21;\n    // 0x40964b\n    return result;\n}\n"
        },
        {
            "funcName": "function_4096f0",
            "funcStartAddr": "4096f0",
            "funcEndAddr": "409776",
            "decompiledFuncCode": "int64_t function_4096f0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x4096f7\n    int64_t * v2 = (int64_t *)(a1 + 192); // 0x4096fe\n    int64_t v3 = *v2; // 0x4096fe\n    if (v1 > a2) {\n        goto lab_0x409730;\n    } else {\n        // 0x40970a\n        if (v1 < *(int64_t *)(a1 + 88)) {\n            int64_t result = function_4095a0(a1, a2 + 1 & 0xffffffff); // 0x409716\n            if ((int32_t)result != 0) {\n                // 0x409726\n                return result;\n            }\n            goto lab_0x40971f;\n        } else {\n            goto lab_0x409730;\n        }\n    }\n  lab_0x409730:;\n    uint64_t v4 = *(int64_t *)(a1 + 48); // 0x409730\n    if (v4 <= a2) {\n        // 0x409739\n        if (v4 < *(int64_t *)(a1 + 88)) {\n            int64_t result2 = function_4095a0(a1, a2 + 1 & 0xffffffff); // 0x409745\n            if ((int32_t)result2 != 0) {\n                // 0x409726\n                return result2;\n            }\n        }\n    }\n    goto lab_0x40971f;\n  lab_0x40971f:\n    // 0x40971f\n    if (v3 < a2) {\n        int64_t v5 = *(int64_t *)(a1 + 184); // 0x409750\n        memset((int64_t *)(8 * v3 + 8 + v5), 0, 8 * (int32_t)(a2 - v3));\n        *v2 = a2;\n    }\n    // 0x409726\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "40979e",
            "decompiledFuncCode": "int64_t function_409780(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x409787\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_4097a0",
            "funcStartAddr": "4097a0",
            "funcEndAddr": "4097c8",
            "decompiledFuncCode": "int64_t function_4097a0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 + 8) & 0x400ff; // 0x4097a3\n    switch (result) {\n        case 6: {\n            // 0x4097b8\n            return function_409780(a1);\n        }\n        case 3: {\n            // 0x4097c0\n            free((int64_t *)a1);\n            return &g84;\n        }\n    }\n    // 0x4097b2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4097d0",
            "funcStartAddr": "4097d0",
            "funcEndAddr": "4097e4",
            "decompiledFuncCode": "int64_t function_4097d0(int64_t a1, int64_t a2) {\n    // 0x4097d0\n    function_4097a0(a2 + 40);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4097f0",
            "funcStartAddr": "4097f0",
            "funcEndAddr": "4099be",
            "decompiledFuncCode": "int64_t function_4097f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4097f0\n    int128_t v1; // 0x4097f0\n    int128_t v2 = v1;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x409804\n    uint64_t v4 = *v3; // 0x409804\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x409808\n    uint64_t v6 = *v5; // 0x409808\n    int64_t v7; // 0x4097f0\n    int64_t v8; // 0x4097f0\n    int64_t v9; // 0x4097f0\n    if (v4 >= v6) {\n        uint64_t v10 = 2 * v6; // 0x4098ca\n        if (v10 >= 0xaaaaaaaaaaaaaab) {\n            // 0x4098a8\n            return -1;\n        }\n        int32_t v11 = v6;\n        int64_t * mem = realloc((int64_t *)v4, 32 * v11); // 0x4098e7\n        if (mem == NULL) {\n            // 0x4098a8\n            return -1;\n        }\n        // 0x4098f5\n        *(int64_t *)a1 = (int64_t)mem;\n        int64_t * v12 = (int64_t *)(a1 + 24); // 0x4098fb\n        int32_t v13 = 16 * v11; // 0x40990d\n        int64_t * mem2 = realloc((int64_t *)*v12, v13); // 0x40990d\n        int64_t * v14 = (int64_t *)(a1 + 32); // 0x409912\n        int64_t * mem3 = realloc((int64_t *)*v14, v13); // 0x40991c\n        int64_t * v15 = (int64_t *)(a1 + 40); // 0x409921\n        int32_t v16 = 48 * v11; // 0x40992c\n        int64_t * mem4 = realloc((int64_t *)*v15, v16); // 0x40992c\n        int64_t * v17 = (int64_t *)(a1 + 48); // 0x409931\n        int64_t * mem5 = realloc((int64_t *)*v17, v16); // 0x40993b\n        if (mem2 == NULL | mem3 == NULL || mem4 == NULL || mem5 == NULL) {\n            // 0x409980\n            free(mem2);\n            free(mem3);\n            free(mem4);\n            free(mem5);\n            // 0x4098a8\n            return -1;\n        }\n        int64_t v18 = (int64_t)mem2; // 0x40990d\n        int64_t v19 = (int64_t)mem4; // 0x40992c\n        *v12 = v18;\n        *v14 = (int64_t)mem3;\n        *v15 = v19;\n        *v17 = (int64_t)mem5;\n        *v5 = v10;\n        v9 = *v3;\n        v7 = v18;\n        v8 = v19;\n    } else {\n        // 0x409815\n        v9 = v4;\n        v7 = *(int64_t *)(a1 + 24);\n        v8 = *(int64_t *)(a1 + 40);\n    }\n    int64_t v20 = 17 * v9; // 0x40982c\n    char v21 = a3; // 0x40982f\n    int64_t v22 = v20 + 8; // 0x409832\n    *(int64_t *)v22 = a3;\n    *(int64_t *)v20 = a2;\n    *(int32_t *)v22 = (int32_t)a3 & -0x3ff01;\n    bool v23 = v21 == 6; // 0x409842\n    if (v21 == 5) {\n        int32_t v24 = *(int32_t *)(a1 + 180); // 0x409844\n        int32_t v25 = v24 - 1; // 0x409844\n        v23 = v25 < 0 == (v24 & -v24) < 0 == (v25 != 0);\n    }\n    char * v26 = (char *)(v20 + 10); // 0x40984e\n    int128_t v27 = __asm_pxor(v2, v2); // 0x409855\n    *v26 = 16 * (char)v23 | *v26 & -17;\n    *(int64_t *)(v7 + 8 * v9) = -1;\n    int64_t v28 = 24 * *v3 + v8; // 0x409871\n    __asm_movups(*(int128_t *)v28, v27);\n    *(int64_t *)(v28 + 16) = 0;\n    int64_t v29 = *(int64_t *)(a1 + 48) + 24 * *v3; // 0x40988d\n    __asm_movups(*(int128_t *)v29, v27);\n    *(int64_t *)(v29 + 16) = 0;\n    int64_t result = *v3; // 0x40989c\n    *v3 = result + 1;\n    // 0x4098a8\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099c0",
            "funcStartAddr": "4099c0",
            "funcEndAddr": "409a5f",
            "decompiledFuncCode": "int64_t function_4099c0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 16 * a2; // 0x4099c7\n    int64_t v2 = v1 + a1;\n    int64_t result = function_4097f0(a1, *(int64_t *)v2, *(int64_t *)(v2 + 8)); // 0x4099e6\n    if (result != -1) {\n        int64_t v3 = a3 & 0xffffffff; // 0x4099cb\n        int64_t v4 = 16 * result + v3; // 0x409a05\n        int32_t v5 = 256 * (int32_t)a3; // 0x409a08\n        int32_t * v6 = (int32_t *)(v4 + 8); // 0x409a13\n        int32_t v7 = *v6 & -0x3ff01; // 0x409a16\n        *v6 = v7 | v5 & 0x3ff00;\n        uint32_t v8 = (*(int32_t *)((v1 | 8) + v3) | v5) & 0x3ff00 | v7; // 0x409a3a\n        *v6 = v8;\n        *(char *)(v4 + 10) = (char)(v8 / 0x10000) | 4;\n        *(int64_t *)(*(int64_t *)(a1 + 32) + 8 * result) = a2;\n    }\n    // 0x409a54\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a60",
            "funcStartAddr": "409a60",
            "funcEndAddr": "409ce4",
            "decompiledFuncCode": "int64_t function_409a60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t * v1 = (int64_t *)(a1 + 40);\n    int64_t * v2 = (int64_t *)(a1 + 24);\n    int64_t v3 = a1; // 0x409a7a\n    int64_t v4 = a2; // 0x409a7a\n    int64_t v5 = a3; // 0x409a7a\n    int64_t v6 = a5 & 0xffffffff;\n    int32_t v7 = v6;\n    int64_t v8; // 0x409a60\n    int64_t v9; // 0x409a60\n    int64_t v10; // 0x409a60\n    int64_t v11; // 0x409a60\n    int64_t result; // 0x409a60\n    int64_t v12; // 0x409a60\n    int64_t v13; // 0x409a60\n    int64_t v14; // 0x409a60\n    int64_t v15; // 0x409a60\n    int64_t v16; // 0x409c14\n    int64_t v17; // 0x409c18\n    int64_t v18; // 0x409c18\n    int64_t v19; // 0x409c2f\n    int64_t v20; // 0x409aa1\n    int64_t v21; // 0x409aa5\n    int64_t v22; // 0x409aa9\n    int64_t v23; // 0x409c45\n    int64_t v24; // 0x409cb8\n    int64_t v25; // 0x409abf\n    int64_t v26; // 0x409ac3\n    int64_t v27; // 0x409adb\n    int64_t v28; // 0x409adf\n    int64_t v29; // 0x409ae6\n    int64_t v30; // 0x409aea\n    int64_t v31; // 0x409c69\n    int64_t v32; // 0x409a60\n    int64_t v33; // 0x409ca3\n    int64_t v34; // 0x409b18\n    int64_t v35; // 0x409b1b\n    int64_t v36; // 0x409a85\n    int64_t v37; // 0x409a93\n    while (true) {\n        // 0x409a7f\n        v8 = v5;\n        v10 = v4;\n        v13 = v3;\n        v36 = *v1;\n        v37 = v13 + 8 + 16 * v10;\n        if (*(char *)v37 == 4) {\n            // 0x409c00\n            v16 = 24 * v8;\n            v17 = 8 * v10;\n            v18 = *(int64_t *)(*v2 + v17);\n            *(int64_t *)(v36 + 8 + v16) = 0;\n            v19 = function_4099c0(a1, v18, v6);\n            if (v19 == -1) {\n                return 12;\n            }\n            // 0x409c45\n            v23 = *v2;\n            *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n            v15 = v18;\n            v12 = v16;\n            v9 = v19;\n            goto lab_0x409b7a;\n        } else {\n            // 0x409a9d\n            v20 = 24 * v10;\n            v21 = v36 + v20;\n            v22 = *(int64_t *)(v21 + 8);\n            if (v22 == 0) {\n                // 0x409cb8\n                v24 = *v2;\n                *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                result = 0;\n                return result;\n            }\n            // 0x409ab6\n            v25 = 24 * v8;\n            v26 = v36 + v25;\n            v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n            *(int64_t *)(v26 + 8) = 0;\n            if (v22 == 1) {\n                // break -> 0x409bb0\n                break;\n            }\n            // 0x409adb\n            v27 = *(int64_t *)(a1 + 16);\n            v28 = v27 - 1;\n            v29 = 16 * v28;\n            v30 = v29 + v13;\n            if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                // 0x409b00\n                v32 = 16 * v27 - 32 - v29;\n                v14 = v28;\n                v11 = v30;\n                if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                    // 0x409b38\n                    if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                        // 0x409b49\n                        if ((char)function_408b10(v26, v14) == 0) {\n                            return 12;\n                        } else {\n                            goto lab_0x409b52;\n                        }\n                    }\n                }\n                // 0x409b18\n                v34 = v32 + v11;\n                v35 = v14 - 1;\n                while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                    // 0x409b32\n                    v14 = v35;\n                    v11 = v34;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x409b38\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x409b49\n                            if ((char)function_408b10(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x409b52;\n                            }\n                        }\n                    }\n                    // 0x409b18\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                }\n            }\n            // 0x409c60\n            v31 = function_4099c0(a1, v4, v6);\n            if (v31 == -1) {\n                return 12;\n            }\n            // 0x409c7b\n            if ((char)function_408b10(*v1 + v25, v31) == 0) {\n                return 12;\n            }\n            // 0x409c92\n            v33 = function_409a60(a1, v4, v31, a4, v6);\n            result = v33;\n            if ((int32_t)v33 != 0) {\n                // 0x409b9a\n                return result;\n            }\n            goto lab_0x409b52;\n        }\n    }\n    if (v10 == a4 == (v10 != v8)) {\n        // 0x409ccb\n        result = 0;\n        if ((char)function_408b10(v26, v4) != 0) {\n            return result;\n        } else {\n            return 12;\n        }\n    }\n    int64_t v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7); // 0x409bd1\n    v5 = function_4099c0(a1, v4, v38);\n    while (v5 != -1) {\n        // 0x409be5\n        v3 = *v1 + v25;\n        if ((char)function_408b10(v3, v5) == 0) {\n            // break -> 0x409b95\n            break;\n        }\n        v6 = v38;\n        v7 = v6;\n        while (true) {\n            // 0x409a7f\n            v8 = v5;\n            v10 = v4;\n            v13 = v3;\n            v36 = *v1;\n            v37 = v13 + 8 + 16 * v10;\n            if (*(char *)v37 == 4) {\n                // 0x409c00\n                v16 = 24 * v8;\n                v17 = 8 * v10;\n                v18 = *(int64_t *)(*v2 + v17);\n                *(int64_t *)(v36 + 8 + v16) = 0;\n                v19 = function_4099c0(a1, v18, v6);\n                if (v19 == -1) {\n                    return 12;\n                }\n                // 0x409c45\n                v23 = *v2;\n                *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n                v15 = v18;\n                v12 = v16;\n                v9 = v19;\n                goto lab_0x409b7a;\n            } else {\n                // 0x409a9d\n                v20 = 24 * v10;\n                v21 = v36 + v20;\n                v22 = *(int64_t *)(v21 + 8);\n                if (v22 == 0) {\n                    // 0x409cb8\n                    v24 = *v2;\n                    *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                    result = 0;\n                    return result;\n                }\n                // 0x409ab6\n                v25 = 24 * v8;\n                v26 = v36 + v25;\n                v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n                *(int64_t *)(v26 + 8) = 0;\n                if (v22 == 1) {\n                    // break -> 0x409bb0\n                    break;\n                }\n                // 0x409adb\n                v27 = *(int64_t *)(a1 + 16);\n                v28 = v27 - 1;\n                v29 = 16 * v28;\n                v30 = v29 + v13;\n                if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                    // 0x409b00\n                    v32 = 16 * v27 - 32 - v29;\n                    v14 = v28;\n                    v11 = v30;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x409b38\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x409b49\n                            if ((char)function_408b10(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x409b52;\n                            }\n                        }\n                    }\n                    // 0x409b18\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                    while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                        // 0x409b32\n                        v14 = v35;\n                        v11 = v34;\n                        if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                            // 0x409b38\n                            if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                                // 0x409b49\n                                if ((char)function_408b10(v26, v14) == 0) {\n                                    return 12;\n                                } else {\n                                    goto lab_0x409b52;\n                                }\n                            }\n                        }\n                        // 0x409b18\n                        v34 = v32 + v11;\n                        v35 = v14 - 1;\n                    }\n                }\n                // 0x409c60\n                v31 = function_4099c0(a1, v4, v6);\n                if (v31 == -1) {\n                    return 12;\n                }\n                // 0x409c7b\n                if ((char)function_408b10(*v1 + v25, v31) == 0) {\n                    return 12;\n                }\n                // 0x409c92\n                v33 = function_409a60(a1, v4, v31, a4, v6);\n                result = v33;\n                if ((int32_t)v33 != 0) {\n                    // 0x409b9a\n                    return result;\n                }\n                goto lab_0x409b52;\n            }\n        }\n        if (v10 == a4 == (v10 != v8)) {\n            // 0x409ccb\n            result = 0;\n            if ((char)function_408b10(v26, v4) != 0) {\n                return result;\n            } else {\n                return 12;\n            }\n        }\n        // 0x409bc0\n        v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7);\n        v5 = function_4099c0(a1, v4, v38);\n    }\n  lab_0x409b95_5:\n    // 0x409b9a\n    return 12;\n  lab_0x409b7a:;\n    int64_t v39 = *v1 + v12; // 0x409b81\n    if ((char)function_408b10(v39, v9) == 0) {\n        return 12;\n    }\n    goto lab_0x409a7f;\n  lab_0x409b52:;\n    int64_t v40 = *(int64_t *)(*(int64_t *)(v20 + 16 + *v1) + 8); // 0x409b61\n    int64_t v41 = function_4099c0(a1, v40, v6); // 0x409b6c\n    v15 = v40;\n    v12 = v25;\n    v9 = v41;\n    if (v41 == -1) {\n        // break (via goto) -> 0x409b95\n        goto lab_0x409b95_5;\n    }\n    goto lab_0x409b7a;\n}\n"
        },
        {
            "funcName": "function_409cf0",
            "funcStartAddr": "409cf0",
            "funcEndAddr": "409d49",
            "decompiledFuncCode": "int64_t function_409cf0(int64_t a1) {\n    // 0x409cf0\n    free((int64_t *)*(int64_t *)(a1 + 48));\n    free((int64_t *)*(int64_t *)(a1 + 72));\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x409d06\n    int64_t v2 = *v1; // 0x409d06\n    if (v2 != a1 + 8) {\n        // 0x409d13\n        free((int64_t *)*(int64_t *)(v2 + 16));\n        free((int64_t *)*v1);\n    }\n    // 0x409d25\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free((int64_t *)*(int64_t *)(a1 + 96));\n    free((int64_t *)*(int64_t *)(a1 + 88));\n    free((int64_t *)a1);\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_409d50",
            "funcStartAddr": "409d50",
            "funcEndAddr": "409d82",
            "decompiledFuncCode": "int64_t function_409d50(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    free((int64_t *)*(int64_t *)(v1 + 16));\n    free((int64_t *)*(int64_t *)(v1 + 24));\n    if (*(char *)(v1 + 139) == 0) {\n        // 0x409d6f\n        return &g84;\n    }\n    // 0x409d78\n    free((int64_t *)*(int64_t *)(v1 + 8));\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409e48",
            "decompiledFuncCode": "int64_t function_409d90(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 232); // 0x409d9b\n    if (*v2 < 1) {\n        // 0x409e29\n        *v2 = 0;\n        *(int64_t *)(v1 + 200) = 0;\n        int64_t result; // 0x409d90\n        return result;\n    }\n    int64_t v3 = 0; // 0x409e17\n    int64_t v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3); // 0x409db7\n    int64_t * v5 = (int64_t *)(v4 + 32); // 0x409dbb\n    int64_t * v6 = (int64_t *)(v4 + 40);\n    int64_t v7 = 0; // 0x409dc1\n    int64_t v8; // 0x409dcd\n    int64_t v9; // 0x409dd1\n    if (*v5 >= 1) {\n        v8 = *(int64_t *)(*v6 + 8 * v7);\n        v9 = v7 + 1;\n        free((int64_t *)*(int64_t *)(v8 + 32));\n        free((int64_t *)v8);\n        v7 = v9;\n        while (*v5 > v9) {\n            // 0x409dc8\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n        }\n    }\n    // 0x409ded\n    free((int64_t *)*v6);\n    int64_t * v10 = (int64_t *)(v4 + 16); // 0x409df7\n    int64_t v11 = *v10; // 0x409df7\n    if (v11 != 0) {\n        // 0x409e01\n        free((int64_t *)*(int64_t *)(v11 + 16));\n        free((int64_t *)*v10);\n    }\n    // 0x409e14\n    v3++;\n    free((int64_t *)v4);\n    while (*v2 > v3) {\n        // 0x409db0\n        v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3);\n        v5 = (int64_t *)(v4 + 32);\n        v6 = (int64_t *)(v4 + 40);\n        v7 = 0;\n        if (*v5 >= 1) {\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n            while (*v5 > v9) {\n                // 0x409dc8\n                v8 = *(int64_t *)(*v6 + 8 * v7);\n                v9 = v7 + 1;\n                free((int64_t *)*(int64_t *)(v8 + 32));\n                free((int64_t *)v8);\n                v7 = v9;\n            }\n        }\n        // 0x409ded\n        free((int64_t *)*v6);\n        v10 = (int64_t *)(v4 + 16);\n        v11 = *v10;\n        if (v11 != 0) {\n            // 0x409e01\n            free((int64_t *)*(int64_t *)(v11 + 16));\n            free((int64_t *)*v10);\n        }\n        // 0x409e14\n        v3++;\n        free((int64_t *)v4);\n    }\n    // 0x409e29\n    *v2 = 0;\n    *(int64_t *)(v1 + 200) = 0;\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_409e50",
            "funcStartAddr": "409e50",
            "funcEndAddr": "40a0d0",
            "decompiledFuncCode": "int64_t function_409e50(int64_t a1, int64_t a2) {\n    unsigned char v1 = *(char *)(a2 + 48); // 0x409e54\n    int64_t v2 = v1; // 0x409e54\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x409e58\n    g83 = v2;\n    int64_t v4 = v3; // 0x409e63\n    switch (v1) {\n        case 2: {\n            // 0x409f28\n            if (*(int64_t *)(a2 + 32) == 0) {\n                // 0x409e8a\n                return 0;\n            }\n            // 0x409f33\n            __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 1449, \"link_nfa_nodes\");\n            v4 = 1449;\n        }\n        case 4: {\n            // 0x409f50\n            *(int64_t *)(8 * v4 + 0x312d203e) = *(int64_t *)0x203e207466656c38;\n            // 0x409e8a\n            return 0;\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 12: {\n            int64_t v5 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x409fc5\n            int64_t * v6 = (int64_t *)v5; // 0x409fc9\n            *v6 = 1;\n            int64_t * v7 = (int64_t *)(v5 + 8); // 0x409fd0\n            *v7 = 1;\n            int64_t * mem = malloc(8); // 0x409fd8\n            *(int64_t *)(v5 + 16) = (int64_t)mem;\n            if (mem != NULL) {\n                // 0x409fe6\n                *mem = *(int64_t *)(*(int64_t *)(a2 + 32) + 56);\n                return 0;\n            }\n            // 0x40a040\n            *v7 = 0;\n            *v6 = 0;\n            // 0x409e8a\n            return 12;\n        }\n        case 10: {\n        }\n        case 11: {\n            char * v8 = (char *)(a1 + 176); // 0x409e90\n            *v8 = *v8 | 1;\n            int64_t v9 = *(int64_t *)(a2 + 8); // 0x409e97\n            int64_t v10 = a2 + 32;\n            int64_t v11 = *(int64_t *)(*(int64_t *)(v9 == 0 ? v10 : v9 + 24) + 56);\n            if (v11 < 0) {\n                // 0x40a0b6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g84;\n            }\n            int64_t v12 = *(int64_t *)(a2 + 16); // 0x409eac\n            int64_t v13 = *(int64_t *)(*(int64_t *)(v12 == 0 ? v10 : v12 + 24) + 56);\n            if (v13 < 0) {\n                // 0x40a09d\n                __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n                // 0x40a0b6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g84;\n            }\n            int64_t v14 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x409ee0\n            *(int64_t *)v14 = 2;\n            int64_t * mem2 = malloc(16); // 0x409eeb\n            int64_t v15 = (int64_t)mem2; // 0x409eeb\n            *(int64_t *)(v14 + 16) = v15;\n            if (mem2 == NULL) {\n                // 0x409e8a\n                return 12;\n            }\n            int64_t * v16 = (int64_t *)(v14 + 8);\n            if (v11 == v13) {\n                // 0x409ff0\n                *v16 = 1;\n                *mem2 = v11;\n                // 0x409e8a\n                return 0;\n            }\n            // 0x409f06\n            *v16 = 2;\n            if (v11 < v13) {\n                // 0x409f14\n                *mem2 = v11;\n                *(int64_t *)(v15 + 8) = v13;\n            } else {\n                // 0x40a028\n                *mem2 = v13;\n                *(int64_t *)(v15 + 8) = v11;\n            }\n            // 0x409e8a\n            return 0;\n        }\n        case 16: {\n            // 0x409e8a\n            return 0;\n        }\n        default: {\n            if ((v2 & 8) == 0) {\n                int64_t v17 = *(int64_t *)(*(int64_t *)(a2 + 32) + 56); // 0x409e7c\n                *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v3) = v17;\n                // 0x409e8a\n                return 0;\n            }\n            // 0x40a084\n            __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 1484, \"link_nfa_nodes\");\n            // 0x40a09d\n            __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n            // 0x40a0b6\n            __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n            return &g84;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_40a0d0",
            "funcStartAddr": "40a0d0",
            "funcEndAddr": "40a11e",
            "decompiledFuncCode": "int64_t function_40a0d0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 48); // 0x40a0d0\n    uint64_t v2 = a2 + 1; // 0x40a0d4\n    if (v2 >= v1) {\n        // 0x40a112\n        return 1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 16) + 4 * v2;\n    if (*(int32_t *)v3 != -1) {\n        // 0x40a112\n        return 1;\n    }\n    int64_t v4 = 2;\n    while (v4 != v1 - a2) {\n        int64_t v5 = v4 + 1; // 0x40a100\n        if (*(int32_t *)(v3 - 8 + 4 * v5) != -1) {\n            // break -> 0x40a112\n            break;\n        }\n        v4 = v5;\n    }\n    // 0x40a112\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a120",
            "funcStartAddr": "40a120",
            "funcEndAddr": "40a185",
            "decompiledFuncCode": "int64_t function_40a120(int64_t a1, int64_t a2, uint64_t a3) {\n    if (a1 < 1) {\n        // 0x40a165\n        return 0;\n    }\n    int64_t v1 = a1 - 1; // 0x40a12a\n    int64_t v2 = 0; // 0x40a133\n    if (v1 != 0) {\n        int64_t v3 = 0;\n        int64_t v4 = (v3 + v1) / 2; // 0x40a139\n        int64_t v5 = v4; // 0x40a140\n        int64_t v6 = v4; // 0x40a140\n        int64_t v7 = v1; // 0x40a140\n        int64_t v8; // 0x40a120\n        int64_t v9; // 0x40a14c\n        if (*(int64_t *)(8 * v4 + a2) >= a3) {\n            v2 = v3;\n            if (v3 >= v5) {\n                // break (via goto) -> 0x40a15d\n                goto lab_0x40a15d;\n            }\n            // 0x40a148\n            v9 = (v5 + v3) / 2;\n            v6 = v9;\n            v7 = v5;\n            while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                // 0x40a158\n                v8 = v9;\n                v2 = v3;\n                if (v3 >= v8) {\n                    // break (via goto) -> 0x40a15d\n                    goto lab_0x40a15d;\n                }\n                // 0x40a148\n                v9 = (v8 + v3) / 2;\n                v6 = v9;\n                v7 = v8;\n            }\n        }\n        int64_t v10 = v7;\n        int64_t v11 = v6 + 1; // 0x40a170\n        v2 = v11;\n        while (v11 < v10) {\n            // 0x40a135\n            v3 = v11;\n            v4 = (v3 + v10) / 2;\n            v5 = v4;\n            v6 = v4;\n            v7 = v10;\n            if (*(int64_t *)(8 * v4 + a2) >= a3) {\n                v2 = v3;\n                if (v3 >= v5) {\n                    // break (via goto) -> 0x40a15d\n                    goto lab_0x40a15d;\n                }\n                // 0x40a148\n                v9 = (v5 + v3) / 2;\n                v6 = v9;\n                v7 = v5;\n                while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                    // 0x40a158\n                    v8 = v9;\n                    v2 = v3;\n                    if (v3 >= v8) {\n                        // break (via goto) -> 0x40a15d\n                        goto lab_0x40a15d;\n                    }\n                    // 0x40a148\n                    v9 = (v8 + v3) / 2;\n                    v6 = v9;\n                    v7 = v8;\n                }\n            }\n            // 0x40a170\n            v10 = v7;\n            v11 = v6 + 1;\n            v2 = v11;\n        }\n    }\n  lab_0x40a15d:\n    // 0x40a15d\n    if (*(int64_t *)(8 * v2 + a2) == a3) {\n        // 0x40a180\n        return v2 + 1;\n    }\n    // 0x40a165\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a190",
            "funcStartAddr": "40a190",
            "funcEndAddr": "40a289",
            "decompiledFuncCode": "int64_t function_40a190(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a2 + 16; // 0x40a197\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x40a1b1\n    int64_t v3 = *v2; // 0x40a1b1\n    if (function_40a120(v3, v1, a3) != 0) {\n      lab_0x40a278:\n        // 0x40a265\n        return 0;\n    }\n    int32_t v4 = a5;\n    int64_t * v5 = (int64_t *)(a1 + 40);\n    int64_t v6 = a3;\n    int64_t v7 = 16 * v6 + v3; // 0x40a1d0\n    int64_t result; // 0x40a190\n    if ((int32_t)*(char *)(v7 + 8) == v4) {\n        // 0x40a1dd\n        if (*(int64_t *)v7 == a4) {\n            if (v4 != 9) {\n                return 0;\n            } else {\n                // 0x40a24e\n                result = 12;\n                if ((char)function_408b10(a2, v6) != 0) {\n                    return 0;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n    // 0x40a1e2\n    result = 12;\n    while ((char)function_408b10(a2, v6) != 0) {\n        int64_t v8 = 24 * v6; // 0x40a1fa\n        int64_t v9 = *v5 + v8; // 0x40a1fe\n        int64_t v10 = *(int64_t *)(v9 + 8); // 0x40a201\n        if (v10 == 0) {\n            // 0x40a265\n            return 0;\n        }\n        int64_t v11 = *(int64_t *)(v9 + 16); // 0x40a20a\n        int64_t v12 = v11; // 0x40a212\n        if (v10 == 2) {\n            int64_t v13 = function_40a190(a1, a2, *(int64_t *)(v11 + 8), a4, a5 & 0xffffffff); // 0x40a230\n            result = v13;\n            if ((int32_t)v13 != 0) {\n                // break -> 0x40a265\n                break;\n            }\n            // 0x40a239\n            v12 = *(int64_t *)(v8 + 16 + *v5);\n        }\n        int64_t v14 = *(int64_t *)v12; // 0x40a214\n        int64_t v15 = *v2; // 0x40a1b1\n        if (function_40a120(v15, v1, v14) != 0) {\n            // 0x40a265\n            return 0;\n        }\n        v6 = v14;\n        v7 = 16 * v6 + v15;\n        if ((int32_t)*(char *)(v7 + 8) == v4) {\n            // 0x40a1dd\n            if (*(int64_t *)v7 == a4) {\n                if (v4 != 9) {\n                    return 0;\n                } else {\n                    // 0x40a24e\n                    result = 12;\n                    if ((char)function_408b10(a2, v6) != 0) {\n                        return 0;\n                    } else {\n                        return result;\n                    }\n                }\n            }\n        }\n        // 0x40a1e2\n        result = 12;\n    }\n  lab_0x40a265:\n    // 0x40a265\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a290",
            "funcStartAddr": "40a290",
            "funcEndAddr": "40a2b3",
            "decompiledFuncCode": "int64_t function_40a290(uint64_t a1, int64_t result2, uint64_t a3) {\n    // 0x40a290\n    if (a3 >= a1) {\n        // 0x40a2b2\n        int64_t result; // 0x40a290\n        return result;\n    }\n    int64_t v1 = a3; // 0x40a293\n    int64_t v2 = 8 * v1 + result2;\n    *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n    v1++;\n    while (v1 != a1) {\n        // 0x40a2a0\n        v2 = 8 * v1 + result2;\n        *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n        v1++;\n    }\n    // 0x40a2b2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a2c0",
            "funcStartAddr": "40a2c0",
            "funcEndAddr": "40a34b",
            "decompiledFuncCode": "int64_t function_40a2c0(int64_t a1, int64_t a2) {\n    // 0x40a2c0\n    int64_t * v1; // 0x40a2d0\n    int64_t v2; // 0x40a2d0\n    switch (*(char *)(a2 + 48)) {\n        case 4: {\n            int64_t v3 = *(int64_t *)(a1 + 224); // 0x40a320\n            if (v3 == 0) {\n                // 0x40a2cc\n                return 0;\n            }\n            int64_t v4 = a2 + 40; // 0x40a32c\n            int64_t v5 = *(int64_t *)(8 * (int64_t)*(int32_t *)v4 + v3); // 0x40a330\n            *(int64_t *)v4 = v5;\n            int64_t * v6 = (int64_t *)(a1 + 160); // 0x40a341\n            *v6 = *v6 | (int64_t)(1 << (int32_t)v5 % 32);\n            return 0;\n        }\n        case 17: {\n            // 0x40a2d0\n            v1 = (int64_t *)(a2 + 8);\n            v2 = *v1;\n            if (v2 == 0 || *(char *)(v2 + 48) != 17) {\n                // 0x40a2cc\n                return 0;\n            }\n            // break -> 0x40a2df\n            break;\n        }\n        default: {\n            // 0x40a2cc\n            return 0;\n        }\n    }\n    uint64_t v7 = *(int64_t *)(v2 + 40); // 0x40a2df\n    int64_t v8 = *(int64_t *)(v2 + 8); // 0x40a2e3\n    *v1 = v8;\n    if (v8 != 0) {\n        // 0x40a2f0\n        *(int64_t *)v8 = a2;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 224); // 0x40a2f3\n    int64_t v10 = *(int64_t *)(8 * *(int64_t *)(a2 + 40) + v9); // 0x40a2fe\n    *(int64_t *)(v9 + 8 * v7) = v10;\n    if (v7 > 63) {\n        // 0x40a2cc\n        return 0;\n    }\n    uint64_t v11 = v7 % 64; // 0x40a313\n    int64_t v12 = -2; // 0x40a313\n    if (v11 != 0) {\n        v12 = 0xfffffffffffffffe >> 64 - v11 | -2 << v11;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 160); // 0x40a316\n    *v13 = *v13 & v12;\n    // 0x40a2cc\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a350",
            "funcStartAddr": "40a350",
            "funcEndAddr": "40a3a7",
            "decompiledFuncCode": "int64_t function_40a350(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a2 + 8); // 0x40a354\n    switch (*(char *)(a2 + 48)) {\n        case 11: {\n            // 0x40a388\n            *(int64_t *)(v1 + 32) = a2;\n            return 0;\n        }\n        case 16: {\n            int64_t v2 = *(int64_t *)(a2 + 16); // 0x40a390\n            *(int64_t *)(v1 + 32) = *(int64_t *)(v2 + 24);\n            *(int64_t *)(v2 + 32) = *(int64_t *)(a2 + 32);\n            return 0;\n        }\n    }\n    if (v1 != 0) {\n        // 0x40a365\n        *(int64_t *)(v1 + 32) = *(int64_t *)(a2 + 32);\n    }\n    int64_t v3 = *(int64_t *)(a2 + 16); // 0x40a36d\n    if (v3 != 0) {\n        // 0x40a376\n        *(int64_t *)(v3 + 32) = *(int64_t *)(a2 + 32);\n    }\n    // 0x40a37e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a3b0",
            "funcStartAddr": "40a3b0",
            "funcEndAddr": "40a5fe",
            "decompiledFuncCode": "int64_t function_40a3b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5, int64_t a6, uint64_t a7) {\n    int64_t v1 = *(int64_t *)(a1 + 200); // 0x40a3c7\n    int64_t v2 = -1; // 0x40a3e1\n    int64_t v3 = -1; // 0x40a3e1\n    if (v1 > 0) {\n        int64_t v4 = *(int64_t *)(a1 + 216); // 0x40a3e7\n        int64_t v5 = v4 + 8;\n        int64_t v6 = 0;\n        uint64_t v7 = v6 + v1; // 0x40a3e3\n        int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x40a3f8\n        int64_t v9 = v8; // 0x40a404\n        int64_t v10 = v1; // 0x40a404\n        int64_t v11 = v8; // 0x40a404\n        int64_t v12; // 0x40a3b0\n        int64_t v13; // 0x40a3b0\n        uint64_t v14; // 0x40a410\n        int64_t v15; // 0x40a41e\n        if (*(int64_t *)(40 * v8 + v5) >= a5) {\n            v13 = v6;\n            if (v6 >= v9) {\n                // break (via goto) -> 0x40a43b\n                goto lab_0x40a43b;\n            }\n            // 0x40a410\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v9;\n            v11 = v15;\n            while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                // 0x40a436\n                v12 = v15;\n                v13 = v6;\n                if (v6 >= v12) {\n                    // break (via goto) -> 0x40a43b\n                    goto lab_0x40a43b;\n                }\n                // 0x40a410\n                v14 = v12 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v12;\n                v11 = v15;\n            }\n        }\n        int64_t v16 = v10;\n        int64_t v17 = v11 + 1; // 0x40a5a8\n        v13 = v17;\n        while (v17 < v16) {\n            // 0x40a3e3\n            v6 = v17;\n            v7 = v6 + v16;\n            v8 = (v7 / 0x8000000000000000 + v7) / 2;\n            v9 = v8;\n            v10 = v16;\n            v11 = v8;\n            if (*(int64_t *)(40 * v8 + v5) >= a5) {\n                v13 = v6;\n                if (v6 >= v9) {\n                    // break (via goto) -> 0x40a43b\n                    goto lab_0x40a43b;\n                }\n                // 0x40a410\n                v14 = v9 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v9;\n                v11 = v15;\n                while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                    // 0x40a436\n                    v12 = v15;\n                    v13 = v6;\n                    if (v6 >= v12) {\n                        // break (via goto) -> 0x40a43b\n                        goto lab_0x40a43b;\n                    }\n                    // 0x40a410\n                    v14 = v12 + v6;\n                    v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                    v10 = v12;\n                    v11 = v15;\n                }\n            }\n            // 0x40a5a8\n            v16 = v10;\n            v17 = v11 + 1;\n            v13 = v17;\n        }\n      lab_0x40a43b:;\n        int64_t v18 = v13;\n        int64_t v19 = -1; // 0x40a43e\n        if (v1 > v18) {\n            // 0x40a444\n            v19 = *(int64_t *)(40 * v18 + 8 + v4) != a5 ? -1 : v18;\n        }\n        int64_t v20 = 0;\n        uint64_t v21 = v1 + v20; // 0x40a46c\n        int64_t v22 = (v21 / 0x8000000000000000 + v21) / 2; // 0x40a482\n        int64_t v23 = v22; // 0x40a48e\n        int64_t v24 = v1; // 0x40a48e\n        int64_t v25 = v22; // 0x40a48e\n        int64_t v26; // 0x40a3b0\n        int64_t v27; // 0x40a3b0\n        uint64_t v28; // 0x40a498\n        int64_t v29; // 0x40a4a7\n        if (*(int64_t *)(40 * v22 + v5) >= a7) {\n            v27 = v20;\n            if (v20 >= v23) {\n                // break (via goto) -> 0x40a4c4\n                goto lab_0x40a4c4;\n            }\n            // 0x40a498\n            v28 = v23 + v20;\n            v29 = (v28 / 0x8000000000000000 + v28) / 2;\n            v24 = v23;\n            v25 = v29;\n            while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                // 0x40a4bf\n                v26 = v29;\n                v27 = v20;\n                if (v20 >= v26) {\n                    // break (via goto) -> 0x40a4c4\n                    goto lab_0x40a4c4;\n                }\n                // 0x40a498\n                v28 = v26 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v26;\n                v25 = v29;\n            }\n        }\n        int64_t v30 = v24;\n        int64_t v31 = v25 + 1; // 0x40a5c0\n        v27 = v31;\n        while (v31 < v30) {\n            // 0x40a46c\n            v20 = v31;\n            v21 = v30 + v20;\n            v22 = (v21 / 0x8000000000000000 + v21) / 2;\n            v23 = v22;\n            v24 = v30;\n            v25 = v22;\n            if (*(int64_t *)(40 * v22 + v5) >= a7) {\n                v27 = v20;\n                if (v20 >= v23) {\n                    // break (via goto) -> 0x40a4c4\n                    goto lab_0x40a4c4;\n                }\n                // 0x40a498\n                v28 = v23 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v23;\n                v25 = v29;\n                while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                    // 0x40a4bf\n                    v26 = v29;\n                    v27 = v20;\n                    if (v20 >= v26) {\n                        // break (via goto) -> 0x40a4c4\n                        goto lab_0x40a4c4;\n                    }\n                    // 0x40a498\n                    v28 = v26 + v20;\n                    v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                    v24 = v26;\n                    v25 = v29;\n                }\n            }\n            // 0x40a5c0\n            v30 = v24;\n            v31 = v25 + 1;\n            v27 = v31;\n        }\n      lab_0x40a4c4:;\n        int64_t v32 = v27;\n        v2 = v19;\n        v3 = -1;\n        if (v1 > v32) {\n            // 0x40a4cd\n            v2 = v19;\n            v3 = *(int64_t *)(40 * v32 + 8 + v4) != a7 ? -1 : v32;\n        }\n    }\n    // 0x40a4ec\n    if (a2 < 1) {\n        // 0x40a58e\n        return 0;\n    }\n    int64_t * v33 = (int64_t *)(a1 + 216); // 0x40a524\n    int64_t * v34 = (int64_t *)*(int64_t *)(a1 + 152); // 0x40a555\n    int64_t v35 = 0; // 0x40a5d5\n    int64_t v36 = 8 * v35; // 0x40a538\n    int64_t v37 = *(int64_t *)(v36 + a3); // 0x40a538\n    int64_t v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34); // 0x40a558\n    int64_t v39 = function_408990(a1, v37, v38, a4, a5, v2); // 0x40a55e\n    uint64_t v40 = *(int64_t *)(v38 + v36); // 0x40a57c\n    int64_t result = 1; // 0x40a587\n    while ((int32_t)v39 == (int32_t)function_408990(a1, v40, v38, a6, a7, v3)) {\n        // 0x40a5d0\n        v35++;\n        result = 0;\n        if (v35 >= v40) {\n            // break -> 0x40a58e\n            break;\n        }\n        v36 = 8 * v35;\n        v37 = *(int64_t *)(v36 + v38);\n        v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34);\n        v39 = function_408990(a1, v37, v38, a4, a5, v2);\n        v40 = *(int64_t *)(v38 + v36);\n        result = 1;\n    }\n    // 0x40a58e\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a600",
            "funcStartAddr": "40a600",
            "funcEndAddr": "40a651",
            "decompiledFuncCode": "int64_t function_40a600(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a600\n    int64_t result; // 0x40a600\n    if ((int32_t)result != 0) {\n        // 0x40a64c\n        return result;\n    }\n    int64_t v1 = a1; // 0x40a61e\n    while (true) {\n        int64_t v2 = *(int64_t *)(v1 + 8); // 0x40a620\n        int64_t v3 = v2; // 0x40a629\n        int64_t v4 = 0; // 0x40a629\n        int64_t v5 = v1; // 0x40a629\n        if (v2 == 0) {\n            int64_t v6 = v5;\n            int64_t v7 = *(int64_t *)(v6 + 16); // 0x40a633\n            v3 = v7;\n            while (v7 != v4 != v7 != 0) {\n                int64_t v8 = *(int64_t *)v6; // 0x40a641\n                v4 = v6;\n                if (v8 == 0) {\n                    return result;\n                }\n                v6 = v8;\n                v7 = *(int64_t *)(v6 + 16);\n                v3 = v7;\n            }\n        }\n        // 0x40a610\n        v1 = v3;\n    }\n}\n"
        },
        {
            "funcName": "function_40a660",
            "funcStartAddr": "40a660",
            "funcEndAddr": "40a823",
            "decompiledFuncCode": "int64_t function_40a660(int64_t * a1, int128_t * a2) {\n    // 0x40a660\n    if (a2 == NULL) {\n        // 0x40a764\n        return 0;\n    }\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40a669\n    int64_t v3 = *v2; // 0x40a669\n    if (v3 == 0) {\n        // 0x40a764\n        return 0;\n    }\n    int64_t v4 = (int64_t)a1;\n    int64_t * v5 = (int64_t *)(v4 + 8); // 0x40a67d\n    int64_t v6 = *v5; // 0x40a67d\n    int64_t v7 = v6 + 2 * v3;\n    int64_t v8; // 0x40a660\n    int64_t * v9; // 0x40a660\n    int64_t v10; // 0x40a660\n    int64_t v11; // 0x40a660\n    int64_t v12; // 0x40a660\n    if (v7 > v4) {\n        int64_t v13 = v3 + v4; // 0x40a7c0\n        int64_t * v14 = (int64_t *)(v4 + 16);\n        int64_t * mem = realloc((int64_t *)*v14, 16 * (int32_t)v13); // 0x40a7d2\n        if (mem == NULL) {\n            // 0x40a764\n            return 12;\n        }\n        int64_t v15 = *v5; // 0x40a7dc\n        *v14 = (int64_t)mem;\n        *a1 = 2 * v13;\n        int64_t v16 = *v2; // 0x40a7e7\n        v9 = v14;\n        v11 = v16;\n        if (v15 != 0) {\n            // 0x40a7dc\n            v8 = 2 * v16 + v15;\n            v10 = v16;\n            v12 = v15;\n            goto lab_0x40a69d;\n        } else {\n            goto lab_0x40a7f5;\n        }\n    } else {\n        // 0x40a694\n        v8 = v7;\n        v10 = v3;\n        v12 = v6;\n        if (v6 == 0) {\n            // 0x40a694\n            v9 = (int64_t *)(v4 + 16);\n            v11 = v3;\n            goto lab_0x40a7f5;\n        } else {\n            goto lab_0x40a69d;\n        }\n    }\n  lab_0x40a7f5:;\n    int64_t v17 = *v9; // 0x40a7f5\n    int64_t v18 = *(int64_t *)(v1 + 16); // 0x40a7f9\n    *v5 = v11;\n    memcpy((int64_t *)v17, (int64_t *)v18, 8 * (int32_t)*v2);\n    // 0x40a764\n    return 0;\n  lab_0x40a69d:;\n    int64_t v19 = v10 - 1; // 0x40a6a1\n    int64_t v20 = -v10; // 0x40a6ac\n    int64_t v21 = v19; // 0x40a6b3\n    int64_t v22 = v8; // 0x40a6b3\n    if (v20 < 0) {\n        int64_t v23 = v12; // 0x40a660\n        int64_t v24 = v20;\n        int64_t v25 = v8; // 0x40a660\n        int64_t v26 = v19;\n        while (true) {\n            int64_t v27 = v23 - 1;\n            int64_t v28 = v24; // 0x40a6e6\n            v21 = v26;\n            v22 = v25;\n            if (v27 < 0) {\n                // break (via goto) -> 0x40a6f0\n                goto lab_0x40a6f0_2;\n            }\n            int64_t v29 = v25;\n            int64_t v30 = v26;\n            int64_t v31 = *(int64_t *)(v4 + 16); // 0x40a6bf\n            uint64_t v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30); // 0x40a6c3\n            uint64_t v33 = *(int64_t *)(v31 + 8 * v27); // 0x40a6c7\n            int64_t v34; // 0x40a660\n            int64_t v35; // 0x40a660\n            while (v33 != v32) {\n                // 0x40a6d1\n                v34 = v30;\n                v35 = v28;\n                if (v33 >= v32) {\n                    goto lab_0x40a6b0;\n                }\n                int64_t v36 = v30 - 1; // 0x40a6d7\n                int64_t v37 = v29 - 1; // 0x40a6db\n                *(int64_t *)(v31 + 8 * v37) = v32;\n                v28 = -v30;\n                v21 = v36;\n                v22 = v37;\n                if (v28 >= 0) {\n                    // break (via goto) -> 0x40a6f0\n                    goto lab_0x40a6f0_2;\n                }\n                v21 = v26;\n                v22 = v25;\n                if (v27 < 0) {\n                    // break (via goto) -> 0x40a6f0\n                    goto lab_0x40a6f0_2;\n                }\n                // 0x40a6ba\n                v29 = v37;\n                v30 = v36;\n                v31 = *(int64_t *)(v4 + 16);\n                v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30);\n                v33 = *(int64_t *)(v31 + 8 * v27);\n            }\n            // 0x40a790\n            v34 = v30 - 1;\n            v35 = -v30;\n          lab_0x40a6b0:\n            // 0x40a6b0\n            v24 = v35;\n            v26 = v34;\n            v23 = v27;\n            v25 = v29;\n            v21 = v26;\n            v22 = v29;\n            if (v24 >= 0) {\n                // break -> 0x40a6f0\n                break;\n            }\n        }\n    }\n  lab_0x40a6f0_2:;\n    int64_t v38 = v22; // 0x40a6f3\n    if (v21 >= 0) {\n        int64_t v39 = v21 + 1; // 0x40a6f5\n        int64_t v40 = *(int64_t *)(v4 + 16); // 0x40a6f9\n        int64_t v41 = *(int64_t *)(v1 + 16); // 0x40a6fd\n        int64_t v42 = v22 - v39; // 0x40a702\n        memcpy((int64_t *)(v40 + 8 * v42), (int64_t *)v41, 8 * (int32_t)v39);\n        v38 = v42;\n    }\n    int64_t v43 = *v5; // 0x40a716\n    int64_t v44 = v43 - 1; // 0x40a71f\n    int64_t v45 = 2 * *v2 + v44; // 0x40a71f\n    int64_t v46 = v45 - v38 + 1; // 0x40a72a\n    if (v46 == 0) {\n      lab_0x40a764:\n        // 0x40a764\n        return 0;\n    }\n    int64_t v47 = *(int64_t *)(v4 + 16); // 0x40a737\n    *v5 = v46 + v43;\n    int64_t v48 = v44; // 0x40a73f\n    int64_t v49 = v46; // 0x40a73f\n    int64_t v50 = v45; // 0x40a73f\n    while (true) {\n        int64_t v51 = v50;\n        int64_t v52 = v49;\n        uint64_t v53 = *(int64_t *)(8 * v51 + v47); // 0x40a740\n        uint64_t v54 = *(int64_t *)(8 * v48 + v47); // 0x40a744\n        int64_t v55 = 8 * (v52 + v48) + v47; // 0x40a74c\n        while (v53 > v54) {\n            // 0x40a755\n            *(int64_t *)v55 = v53;\n            int64_t v56 = v52 - 1; // 0x40a75c\n            if (v56 == 0) {\n                return 0;\n            }\n            v51--;\n            v52 = v56;\n            v53 = *(int64_t *)(8 * v51 + v47);\n            v54 = *(int64_t *)(8 * v48 + v47);\n            v55 = 8 * (v52 + v48) + v47;\n        }\n        // 0x40a770\n        *(int64_t *)v55 = v54;\n        int64_t v57 = v48 - 1; // 0x40a773\n        v48 = v57;\n        v49 = v52;\n        v50 = v51;\n        if (v57 < 0) {\n            // 0x40a779\n            memcpy((int64_t *)v47, (int64_t *)(v47 + 8 * v38), 8 * (int32_t)v52);\n            return 0;\n        }\n    }\n    // 0x40a764\n    int64_t v58; // 0x40a660\n    int64_t result = v58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a830",
            "funcStartAddr": "40a830",
            "funcEndAddr": "40aa84",
            "decompiledFuncCode": "int64_t function_40a830(int128_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 24 * a3; // 0x40a844\n    int64_t * v2 = (int64_t *)(a2 + 40); // 0x40a84c\n    int64_t v3 = *v2 + v1; // 0x40a854\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x40a85b\n    int64_t v5 = *v4 + 1; // 0x40a868\n    int128_t v6 = v5; // bp-120, 0x40a86c\n    int64_t * mem = malloc(8 * (int32_t)v5); // 0x40a875\n    if (mem == NULL) {\n        // 0x40a95a\n        return 12;\n    }\n    int64_t v7 = (int64_t)mem; // 0x40a875\n    int64_t * v8 = (int64_t *)(a2 + 48); // 0x40a888\n    int64_t v9 = v1 + 8;\n    *(int64_t *)(*v8 + v9) = -1;\n    int64_t v10 = a2 + 8 + 16 * a3;\n    uint32_t v11 = *(int32_t *)v10; // 0x40a8a3\n    int64_t v12 = v10; // 0x40a8ae\n    if ((v11 & 0x3ff00) != 0) {\n        // 0x40a9d0\n        if (*v4 == 0) {\n            goto lab_0x40aa20;\n        } else {\n            int64_t v13 = *(int64_t *)*(int64_t *)(v3 + 16); // 0x40a9db\n            v12 = v10;\n            if ((*(char *)(a2 + 10 + 16 * v13) & 4) == 0) {\n                int64_t result = function_409a60(a2, a3, a3, a3, (int64_t)(v11 / 256 % 1024)); // 0x40aa04\n                if ((int32_t)result != 0) {\n                    // 0x40a95a\n                    return result;\n                }\n                // 0x40aa11\n                v12 = 17 * a3 + 8;\n            }\n            goto lab_0x40a8b4;\n        }\n    } else {\n        goto lab_0x40a8b4;\n    }\n  lab_0x40a8b4:;\n    // 0x40a8b4\n    int64_t v14; // 0x40a830\n    int64_t v15; // 0x40a830\n    if ((*(char *)v12 & 8) == 0) {\n        goto lab_0x40aa20;\n    } else {\n        int64_t v16 = *v2; // 0x40a8be\n        int64_t v17 = v16 + v1; // 0x40a8c2\n        if (*(int64_t *)(v17 + 8) < 1) {\n            goto lab_0x40aa20;\n        } else {\n            int64_t v18 = 0;\n            int64_t v19 = *(int64_t *)(*(int64_t *)(v17 + 16) + 8 * v18); // 0x40a927\n            int64_t v20 = *v8; // 0x40a92b\n            int64_t v21 = 24 * v19; // 0x40a933\n            int64_t v22 = v20 + v21; // 0x40a937\n            int64_t v23 = *(int64_t *)(v22 + 8); // 0x40a93a\n            int64_t v24 = 0; // 0x40a942\n            int64_t v25 = v18; // 0x40a942\n            int64_t v26 = v19; // 0x40a942\n            int64_t v27 = v21; // 0x40a942\n            int64_t v28 = v22; // 0x40a942\n            int64_t v29 = v23; // 0x40a942\n            int64_t v30; // 0x40a830\n            int64_t v31; // 0x40a988\n            int64_t v32; // 0x40a992\n            int64_t v33; // 0x40a927\n            int64_t v34; // 0x40a933\n            int64_t v35; // 0x40a937\n            int64_t v36; // 0x40a93a\n            if (v23 == -1) {\n                // 0x40a988\n                v31 = v16 + v1;\n                v32 = v18;\n                v32++;\n                v30 = 1;\n                if (*(int64_t *)(v31 + 8) <= v32) {\n                    // break (via goto) -> 0x40a99c\n                    goto lab_0x40a99c;\n                }\n                // 0x40a923\n                v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                v34 = 24 * v33;\n                v35 = v34 + v20;\n                v36 = *(int64_t *)(v35 + 8);\n                v24 = 1;\n                v25 = v32;\n                v26 = v33;\n                v27 = v34;\n                v28 = v35;\n                v29 = v36;\n                while (v36 == -1) {\n                    // 0x40a988\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40a99c\n                        goto lab_0x40a99c;\n                    }\n                    // 0x40a923\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                }\n            }\n            int64_t v37 = v29;\n            int64_t result2; // 0x40a830\n            int64_t v38; // 0x40a830\n            int128_t v39; // bp-88, 0x40a830\n            int64_t v40; // 0x40a951\n            if (v37 != 0) {\n                // 0x40a8e0\n                v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                v38 = *(int64_t *)(v28 + 16);\n            } else {\n                // 0x40a949\n                v40 = function_40a830(&v39, a2, v26, v37);\n                int64_t v41; // 0x40a830\n                v38 = v41;\n                result2 = v40;\n                if ((int32_t)v40 != 0) {\n                    // 0x40a95a\n                    return result2;\n                }\n            }\n            int64_t v42 = function_40a660((int64_t *)&v6, &v39); // 0x40a8fc\n            result2 = v42;\n            while ((int32_t)v42 == 0) {\n                int64_t v43 = v38;\n                int64_t v44 = v24; // 0x40a90f\n                if (*(int64_t *)(v27 + 8 + *v8) == 0) {\n                    // 0x40a970\n                    free((int64_t *)v43);\n                    v44 = 1;\n                }\n                int64_t v45 = *v2; // 0x40a911\n                int64_t v46 = v25 + 1; // 0x40a915\n                int64_t v47 = v45 + v1; // 0x40a919\n                int64_t v48 = v45; // 0x40a921\n                if (*(int64_t *)(v47 + 8) <= v46) {\n                    // break -> 0x40a99c\n                    break;\n                }\n                v18 = v46;\n                int64_t v49 = v43;\n                v19 = *(int64_t *)(*(int64_t *)(v47 + 16) + 8 * v18);\n                v20 = *v8;\n                v21 = 24 * v19;\n                v22 = v20 + v21;\n                v23 = *(int64_t *)(v22 + 8);\n                v24 = v44;\n                v25 = v18;\n                v26 = v19;\n                v27 = v21;\n                v28 = v22;\n                v29 = v23;\n                if (v23 == -1) {\n                    // 0x40a988\n                    v31 = v48 + v1;\n                    v32 = v18;\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40a99c\n                        goto lab_0x40a99c;\n                    }\n                    // 0x40a923\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                    while (v36 == -1) {\n                        // 0x40a988\n                        v32++;\n                        v30 = 1;\n                        if (*(int64_t *)(v31 + 8) <= v32) {\n                            // break (via goto) -> 0x40a99c\n                            goto lab_0x40a99c;\n                        }\n                        // 0x40a923\n                        v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                        v34 = 24 * v33;\n                        v35 = v34 + v20;\n                        v36 = *(int64_t *)(v35 + 8);\n                        v24 = 1;\n                        v25 = v32;\n                        v26 = v33;\n                        v27 = v34;\n                        v28 = v35;\n                        v29 = v36;\n                    }\n                }\n                // 0x40a944\n                v37 = v29;\n                if (v37 != 0) {\n                    // 0x40a8e0\n                    v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                    v38 = *(int64_t *)(v28 + 16);\n                } else {\n                    // 0x40a949\n                    v40 = function_40a830(&v39, a2, v26, v37);\n                    v38 = v49;\n                    result2 = v40;\n                    if ((int32_t)v40 != 0) {\n                        // 0x40a95a\n                        return result2;\n                    }\n                }\n                // 0x40a8f2\n                v42 = function_40a660((int64_t *)&v6, &v39);\n                result2 = v42;\n            }\n            // 0x40a95a\n            return result2;\n          lab_0x40a99c:\n            // 0x40a99c\n            if ((char)function_408b10((int64_t)&v6, a3) == 0) {\n                // 0x40a95a\n                return 12;\n            }\n            int64_t v50 = *v8; // 0x40a9b1\n            v15 = v50;\n            if ((char)a4 == 1 || (char)v30 == 0) {\n                goto lab_0x40aa35;\n            } else {\n                // 0x40a9c5\n                *(int64_t *)(v50 + v9) = 0;\n                v14 = 0x100000000 * v7 >> 32;\n                goto lab_0x40aa49;\n            }\n        }\n    }\n  lab_0x40aa20:\n    // 0x40aa20\n    if ((char)function_408b10((int64_t)&v6, a3) == 0) {\n        // 0x40a95a\n        return 12;\n    }\n    // 0x40aa31\n    v15 = *v8;\n    goto lab_0x40aa35;\n  lab_0x40aa35:;\n    int128_t v51 = __asm_movdqa(0); // 0x40aa35\n    int64_t v52 = v15 + v1;\n    __asm_movups(*(int128_t *)v52, v51);\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    *(int64_t *)(v52 + 16) = v53;\n    v14 = v53;\n    goto lab_0x40aa49;\n  lab_0x40aa49:;\n    int128_t v54 = __asm_movdqa(0); // 0x40aa52\n    *(int64_t *)((int64_t)a1 + 16) = v14;\n    *a1 = (int128_t)__asm_movaps(v54);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40aa90",
            "funcStartAddr": "40aa90",
            "funcEndAddr": "40abcf",
            "decompiledFuncCode": "int64_t function_40aa90(int64_t a1, int64_t * a2, int64_t a3, uint32_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40aaa7\n    int64_t v3 = *v2; // 0x40aaa7\n    int64_t size = 8 * v3; // 0x40aab4\n    int128_t v4 = v3; // bp-72, 0x40aabc\n    int64_t * mem = malloc((int32_t)size); // 0x40aac1\n    if (mem == NULL) {\n        // 0x40abbd\n        return 12;\n    }\n    int64_t * v5 = (int64_t *)(v1 + 16);\n    if (v3 < 1) {\n      lab_0x40ab5d:\n        // 0x40ab5d\n        free((int64_t *)*v5);\n        int128_t v6 = __asm_movdqa(0); // 0x40ab6b\n        *v5 = (int64_t)mem;\n        *(int128_t *)a2 = (int128_t)__asm_movaps(v6);\n        return 0;\n    }\n    int64_t v7 = &v4;\n    int64_t v8 = size; // 0x40aa90\n    int64_t v9 = 0; // 0x40ab53\n    int64_t v10; // 0x40aa90\n    int64_t v11; // 0x40aa90\n    int64_t v12; // 0x40aaf0\n    while (true) {\n      lab_0x40aae0:;\n        int64_t v13 = *(int64_t *)(*v5 + 8 * v9); // 0x40aae4\n        v12 = *(int64_t *)(a1 + 48) + 24 * v13;\n        uint64_t v14 = *(int64_t *)(v12 + 8); // 0x40aaf4\n        if (v14 >= 1) {\n            int64_t v15 = 0;\n            int64_t v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16)); // 0x40ab19\n            int64_t v17 = 16 * v16 + v8; // 0x40ab24\n            int64_t v18; // 0x40ab4a\n            if ((int32_t)*(char *)(v17 + 8) == a4) {\n                // 0x40ab31\n                if (*(int64_t *)v17 == a3) {\n                    if (v16 == -1) {\n                        goto lab_0x40ab90;\n                    } else {\n                        // 0x40ab3c\n                        v18 = function_40a190(a1, v7, v13, a3, (int64_t)a4);\n                        v11 = a1;\n                        v10 = v18;\n                        if ((int32_t)v18 != 0) {\n                            goto lab_0x40ab9e_2;\n                        } else {\n                            goto lab_0x40ab53;\n                        }\n                    }\n                }\n            }\n            int64_t v19 = v15 + 1; // 0x40ab10\n            while (v14 != v19) {\n                // 0x40ab19\n                v15 = v19;\n                v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16));\n                v17 = 16 * v16 + v8;\n                if ((int32_t)*(char *)(v17 + 8) == a4) {\n                    // 0x40ab31\n                    if (*(int64_t *)v17 == a3) {\n                        if (v16 == -1) {\n                            goto lab_0x40ab90;\n                        } else {\n                            // 0x40ab3c\n                            v18 = function_40a190(a1, v7, v13, a3, (int64_t)a4);\n                            v11 = a1;\n                            v10 = v18;\n                            if ((int32_t)v18 != 0) {\n                                goto lab_0x40ab9e_2;\n                            } else {\n                                goto lab_0x40ab53;\n                            }\n                        }\n                    }\n                }\n                // 0x40ab10\n                v19 = v15 + 1;\n            }\n        }\n        goto lab_0x40ab90;\n    }\n  lab_0x40ab9e_2:\n    // 0x40ab9e\n    free(mem);\n    return v10 & 0xffffffff;\n  lab_0x40ab90:;\n    int64_t v20 = function_40a660((int64_t *)&v4, (int128_t *)v12); // 0x40ab95\n    v11 = v7;\n    v10 = v20;\n    if ((int32_t)v20 != 0) {\n        // break -> 0x40ab9e\n        goto lab_0x40ab9e_2;\n    }\n    goto lab_0x40ab53;\n  lab_0x40ab53:\n    // 0x40ab53\n    v9++;\n    v8 = v11;\n    if (*v2 <= v9) {\n        goto lab_0x40ab5d;\n    }\n    goto lab_0x40aae0;\n}\n"
        },
        {
            "funcName": "function_40abd0",
            "funcStartAddr": "40abd0",
            "funcEndAddr": "40ad82",
            "decompiledFuncCode": "int64_t function_40abd0(int128_t * a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40abd0\n    int64_t v2 = *v1; // 0x40abd0\n    if (v2 == 0) {\n        // 0x40ac98\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a3 + 8); // 0x40abdf\n    int64_t v4 = *v3; // 0x40abdf\n    if (v4 == 0) {\n        // 0x40ac98\n        return 0;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v4 + v2; // 0x40abee\n    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40ac03\n    int64_t v8 = *v7; // 0x40ac03\n    int64_t * v9 = (int64_t *)(v5 + 16); // 0x40ac0a\n    int64_t v10 = *v9; // 0x40ac0a\n    int64_t v11 = v8; // 0x40ac15\n    int64_t v12 = v10; // 0x40ac15\n    int64_t v13 = v4; // 0x40ac15\n    int64_t v14 = v2; // 0x40ac15\n    if (v8 + v6 > v5) {\n        int64_t v15 = v6 + v5; // 0x40ad4a\n        int64_t * mem = realloc((int64_t *)v10, 8 * (int32_t)v15); // 0x40ad55\n        if (mem == NULL) {\n            // 0x40ac98\n            return 12;\n        }\n        // 0x40ad62\n        v12 = (int64_t)mem;\n        v11 = *v7;\n        v14 = *v1;\n        *v9 = v12;\n        *(int64_t *)a1 = v15;\n        v13 = *v3;\n    }\n    int64_t v16 = *(int64_t *)(a2 + 16); // 0x40ac1b\n    int64_t v17 = *(int64_t *)(a3 + 16); // 0x40ac1f\n    int64_t v18 = v13 - 1; // 0x40ac28\n    int64_t v19 = v18; // 0x40ac3c\n    int64_t v20 = v11 - 1; // 0x40ac3c\n    int64_t v21 = *(int64_t *)(v17 + 8 * v18); // 0x40ac3c\n    int64_t v22 = v13 + v11 + v14; // 0x40ac3c\n    int64_t v23 = v14 - 1; // 0x40ac3c\n    int64_t v24; // 0x40abd0\n    int64_t v25; // 0x40abd0\n    int64_t v26; // 0x40abd0\n    int64_t v27; // 0x40abd0\n    int64_t v28; // 0x40abd0\n    int64_t v29; // 0x40abd0\n    int64_t v30; // 0x40abd0\n    int64_t v31; // 0x40abd0\n    int64_t v32; // 0x40abd0\n    int64_t v33; // 0x40abd0\n    int64_t v34; // 0x40abd0\n    int64_t v35; // 0x40abd0\n    int64_t v36; // 0x40abd0\n    int64_t v37; // 0x40abd0\n    while (true) {\n      lab_0x40ac40:;\n        int64_t v38 = v21;\n        int64_t v39 = *(int64_t *)(8 * v23 + v16);\n        v26 = v24;\n        v27 = v25;\n        v32 = v19;\n        v34 = v20;\n        v21 = v38;\n        v36 = v22;\n        v30 = v39;\n        v28 = v23;\n        v33 = v19;\n        v35 = v20;\n        v37 = v22;\n        v31 = v38;\n        v29 = v23;\n        if (v39 == v38) {\n            goto lab_0x40ac56;\n        } else {\n            goto lab_0x40ac45;\n        }\n    }\n  lab_0x40acb0_4:;\n    int64_t v40 = *v7; // 0x40acb0\n    int64_t v41 = *v1 + v40 + *v3; // 0x40acbb\n    int64_t v42 = v40 - 1; // 0x40acc0\n    int64_t v43; // 0x40abd0\n    int64_t v44 = v41 - v43; // 0x40acc8\n    *v7 = v44 + v40;\n    int64_t v45; // 0x40abd0\n    int64_t v46; // 0x40abd0\n    if (v42 < 0 || v44 < 1) {\n        // 0x40ad30\n        v46 = 8 * v44;\n        v45 = v12;\n    } else {\n        int64_t v47 = v42; // 0x40abd0\n        int64_t v48 = v44; // 0x40abd0\n        int64_t v49 = v41 - 1; // 0x40abd0\n        while (true) {\n            int64_t v50 = v47;\n            int64_t v51 = v49;\n            int64_t v52 = v48;\n            uint64_t v53 = *(int64_t *)(8 * v51 + v12); // 0x40ace0\n            uint64_t v54 = *(int64_t *)(8 * v50 + v12); // 0x40ace4\n            int64_t v55 = 8 * (v52 + v50) + v12; // 0x40acec\n            while (v53 > v54) {\n                // 0x40acf5\n                *(int64_t *)v55 = v53;\n                int64_t v56 = v52 - 1; // 0x40acfc\n                if (v56 == 0) {\n                    // break (via goto) -> 0x40ad02\n                    goto lab_0x40ad02;\n                }\n                v51--;\n                v52 = v56;\n                v53 = *(int64_t *)(8 * v51 + v12);\n                v54 = *(int64_t *)(8 * v50 + v12);\n                v55 = 8 * (v52 + v50) + v12;\n            }\n            // 0x40ad10\n            *(int64_t *)v55 = v54;\n            v47 = v50 - 1;\n            v48 = v52;\n            v49 = v51;\n            if (v50 == 0) {\n                // 0x40ad1d\n                v46 = 8 * v52;\n                v45 = *v9;\n                goto lab_0x40ad34;\n            }\n        }\n      lab_0x40ad02:\n        // 0x40ad02\n        v46 = 0;\n        v45 = *v9;\n    }\n    goto lab_0x40ad34;\n  lab_0x40ac78:;\n    // 0x40ac78\n    int64_t v58; // 0x40abd0\n    int64_t v59 = v58 - 1; // 0x40ac78\n    uint64_t v60; // 0x40abd0\n    *(int64_t *)(8 * v59 + v12) = v60;\n    int64_t v61; // 0x40abd0\n    int64_t v62 = v61; // 0x40ac7c\n    int64_t v63 = v59; // 0x40ac7c\n    goto lab_0x40ac80;\n  lab_0x40ac56:\n    // 0x40ac56\n    v60 = v31;\n    v58 = v37;\n    int64_t v72 = v35; // 0x40ac59\n    v61 = v35;\n    if (v35 >= 0) {\n        int64_t v73 = v72;\n        uint64_t v74 = *(int64_t *)(8 * v73 + v12); // 0x40ac6a\n        while (v74 > v60) {\n            // 0x40ac60\n            v72 = v73 - 1;\n            v61 = -1;\n            if (v73 == 0) {\n                goto lab_0x40ac78;\n            }\n            v73 = v72;\n            v74 = *(int64_t *)(8 * v73 + v12);\n        }\n        // 0x40ac73\n        v61 = v73;\n        v62 = v73;\n        v63 = v58;\n        if (v74 == v60) {\n            goto lab_0x40ac80;\n        } else {\n            goto lab_0x40ac78;\n        }\n    } else {\n        goto lab_0x40ac78;\n    }\n  lab_0x40ac45:;\n    int64_t v75 = v28;\n    v22 = v36;\n    v20 = v34;\n    v19 = v32;\n    int64_t v76 = v27;\n    int64_t v77 = v26;\n    int64_t v70; // 0x40abd0\n    int64_t v69; // 0x40abd0\n    int64_t v66; // 0x40abd0\n    int64_t v67; // 0x40abd0\n    int64_t v68; // 0x40abd0\n    if (v77 < v76) {\n        int64_t v78 = v19 - 1; // 0x40ac47\n        v66 = v78;\n        v67 = v20;\n        v68 = v22;\n        v69 = v30;\n        v70 = v75;\n        if (v78 < 0) {\n            // break -> 0x40acb0\n            goto lab_0x40acb0_4;\n        }\n        goto lab_0x40ac4d;\n    } else {\n        // 0x40aca0\n        v23 = v75 - 1;\n        v24 = v77;\n        v25 = v76;\n        v43 = v22;\n        if (v23 < 0) {\n            // break -> 0x40acb0\n            goto lab_0x40acb0_4;\n        }\n        goto lab_0x40ac40;\n    }\n  lab_0x40ac80:;\n    int64_t v64 = v29 - 1; // 0x40ac80\n    v43 = v63;\n    if (v64 < 0) {\n        // break -> 0x40acb0\n        goto lab_0x40acb0_4;\n    }\n    int64_t v65 = v33 - 1; // 0x40ac86\n    v43 = v63;\n    if (v65 < 0) {\n        // break -> 0x40acb0\n        goto lab_0x40acb0_4;\n    }\n    // 0x40ac8c\n    v66 = v65;\n    v67 = v62;\n    v68 = v63;\n    v69 = *(int64_t *)(8 * v64 + v16);\n    v70 = v64;\n    goto lab_0x40ac4d;\n  lab_0x40ac4d:;\n    int64_t v71 = *(int64_t *)(8 * v66 + v17); // 0x40ac4d\n    v26 = v69;\n    v27 = v71;\n    v32 = v66;\n    v34 = v67;\n    v21 = v71;\n    v36 = v68;\n    v30 = v69;\n    v28 = v70;\n    v33 = v66;\n    v35 = v67;\n    v37 = v68;\n    v31 = v69;\n    v29 = v70;\n    if (v69 != v71) {\n        goto lab_0x40ac45;\n    } else {\n        goto lab_0x40ac56;\n    }\n  lab_0x40ad34:;\n    int64_t v57 = v45;\n    memcpy((int64_t *)v57, (int64_t *)(v57 + 8 * v43), (int32_t)v46);\n    // 0x40ac98\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40ad90",
            "funcStartAddr": "40ad90",
            "funcEndAddr": "40ae67",
            "decompiledFuncCode": "int64_t function_40ad90(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    int64_t v1 = a5;\n    int32_t v2 = a2;\n    int64_t v3; // 0x40ad90\n    int64_t v4; // 0x40ad90\n    int32_t v5; // 0x40ad90\n    int64_t v6; // 0x40ad90\n    if (v2 == 15) {\n        int64_t * mem = malloc(968); // 0x40ae28\n        if (mem == NULL) {\n            // 0x40ae09\n            return 0;\n        }\n        int64_t v7 = (int64_t)mem; // 0x40ae28\n        *(int64_t *)a1 = v7;\n        *mem = 968;\n        v5 = 1;\n        v6 = 0;\n        v4 = 8;\n        v3 = v7;\n    } else {\n        int64_t v8 = 0x100000000 * a2;\n        int64_t v9 = v8 >> 26; // 0x40ada9\n        v5 = v2 + 1;\n        v6 = v9;\n        v4 = v9 | 8;\n        v3 = v8 >> 32;\n    }\n    int64_t v10 = a3;\n    int64_t v11 = a4;\n    *(int32_t *)a2 = v5;\n    int64_t result = v3 + v4; // 0x40adb6\n    int64_t v12 = v3 + v6;\n    *(int64_t *)(v12 + 8) = 0;\n    *(int64_t *)(v12 + 16) = v10;\n    *(int64_t *)(v12 + 24) = v11;\n    __asm_movups(*(int128_t *)(v12 + 48), __asm_movdqu(*(int128_t *)&v1));\n    char * v13 = (char *)(v12 + 58); // 0x40addb\n    *v13 = *v13 & -13;\n    *(int64_t *)(v12 + 32) = 0;\n    *(int64_t *)(v12 + 40) = 0;\n    *(int64_t *)(v12 + 64) = -1;\n    if (a3 != 0) {\n        // 0x40adfe\n        *(int64_t *)v10 = result;\n    }\n    // 0x40ae01\n    if (a4 != 0) {\n        // 0x40ae06\n        *(int64_t *)v11 = result;\n    }\n    // 0x40ae09\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae70",
            "funcStartAddr": "40ae70",
            "funcEndAddr": "40af19",
            "decompiledFuncCode": "int64_t function_40ae70(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 112; // 0x40ae74\n    int64_t v2 = a2 + 128; // 0x40ae7a\n    int64_t v3 = function_40ad90(v1, v2, 0, 0, a1 + 40); // 0x40aead\n    int64_t v4 = v3; // bp-48, 0x40aeb2\n    if (v3 == 0) {\n        // 0x40aefd\n        return 0;\n    }\n    *(int64_t *)v3 = a1;\n    int64_t v5 = *&v4; // 0x40aebd\n    char * v6 = (char *)(v5 + 50); // 0x40aec0\n    *v6 = *v6 | 4;\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x40aec4\n    int64_t v8; // 0x40ae70\n    int64_t v9; // 0x40ae70\n    int64_t result; // 0x40ae70\n    int64_t v10; // 0x40ae70\n    int64_t v11; // 0x40ae70\n    int64_t v12; // 0x40ae70\n    int64_t v13; // 0x40ae70\n    int64_t v14; // 0x40ae70\n    int64_t v15; // 0x40aee9\n    int64_t v16; // 0x40aeec\n    int64_t v17; // 0x40aedb\n    int64_t v18; // 0x40aedb\n    if (v7 != 0) {\n        // 0x40ae98\n        v13 = v7;\n        v10 = v5;\n        v9 = v5 + 8;\n    } else {\n        // 0x40aedb\n        v18 = *(int64_t *)(a1 + 16);\n        v11 = v5;\n        v12 = v5;\n        v8 = v18;\n        if (v18 != 0 != v18 != 0) {\n            v14 = a1;\n            v15 = *(int64_t *)v14;\n            if (v15 == 0) {\n                // 0x40aef8\n                result = v4;\n                return result;\n            }\n            // 0x40aed8\n            v16 = *(int64_t *)v11;\n            v17 = *(int64_t *)(v15 + 16);\n            v11 = v16;\n            v12 = v16;\n            v8 = v17;\n            while (v17 != 0 != v17 != v14) {\n                // 0x40aee9\n                v14 = v15;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40aef8\n                    result = v4;\n                    return result;\n                }\n                // 0x40aed8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n            }\n        }\n        // 0x40af10\n        v13 = v8;\n        v10 = v12;\n        v9 = v12 + 16;\n    }\n    int64_t v19 = v13;\n    int64_t v20 = function_40ad90(v1, v2, 0, 0, v19 + 40); // 0x40aead\n    int64_t * v21 = (int64_t *)v9; // 0x40aeb2\n    *v21 = v20;\n    result = 0;\n    while (v20 != 0) {\n        int64_t v22 = v19;\n        *(int64_t *)v20 = v10;\n        v5 = *v21;\n        v6 = (char *)(v5 + 50);\n        *v6 = *v6 | 4;\n        v7 = *(int64_t *)(v22 + 8);\n        if (v7 != 0) {\n            // 0x40ae98\n            v13 = v7;\n            v10 = v5;\n            v9 = v5 + 8;\n        } else {\n            // 0x40aedb\n            v18 = *(int64_t *)(v22 + 16);\n            v11 = v5;\n            int64_t v23 = v22; // 0x40aee2\n            v12 = v5;\n            v8 = v18;\n            if (v18 != 0 != v18 != 0) {\n                v14 = v23;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40aef8\n                    result = v4;\n                    return result;\n                }\n                // 0x40aed8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n                while (v17 != 0 != v17 != v14) {\n                    // 0x40aee9\n                    v14 = v15;\n                    v15 = *(int64_t *)v14;\n                    if (v15 == 0) {\n                        // 0x40aef8\n                        result = v4;\n                        return result;\n                    }\n                    // 0x40aed8\n                    v16 = *(int64_t *)v11;\n                    v17 = *(int64_t *)(v15 + 16);\n                    v11 = v16;\n                    v12 = v16;\n                    v8 = v17;\n                }\n            }\n            // 0x40af10\n            v13 = v8;\n            v10 = v12;\n            v9 = v12 + 16;\n        }\n        // 0x40ae9f\n        v19 = v13;\n        v20 = function_40ad90(v1, v2, 0, 0, v19 + 40);\n        v21 = (int64_t *)v9;\n        *v21 = v20;\n        result = 0;\n    }\n  lab_0x40aefd:\n    // 0x40aefd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40af20",
            "funcStartAddr": "40af20",
            "funcEndAddr": "40b13a",
            "decompiledFuncCode": "int64_t function_40af20(int32_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = *(int64_t *)(a3 + 8); // 0x40af34\n    int64_t v1; // 0x40af20\n    int64_t v2; // 0x40af20\n    int64_t v3; // 0x40af20\n    int64_t v4; // 0x40af20\n    int64_t v5; // 0x40af20\n    int64_t v6; // bp-72, 0x40af20\n    int64_t v7; // 0x40af20\n    int64_t v8; // 0x40af6f\n    int64_t v9; // 0x40af76\n    int64_t v10; // 0x40af20\n    int64_t v11; // 0x40af99\n    int64_t v12; // 0x40afb3\n    if ((*(char *)(a2 + 56) & 16) == 0) {\n        int64_t v13 = a2 + 128; // 0x40b0c8\n        int64_t v14 = a2 + 112; // 0x40b0cf\n        int64_t v15 = &v6;\n        int64_t v16 = function_40ad90(v14, v13, 0, 0, v15); // 0x40b0f2\n        int64_t v17 = function_40ad90(v14, v13, 0, 0, v15); // 0x40b10c\n        v10 = v15;\n        v8 = v13;\n        v11 = v16;\n        v9 = v14;\n        v12 = v17;\n        v1 = v15;\n        v7 = v13;\n        v5 = v16;\n        v2 = v17;\n        v3 = v14;\n        v4 = v17;\n        if (result != 0) {\n            goto lab_0x40afbb;\n        } else {\n            goto lab_0x40afd9;\n        }\n    } else {\n        if (result == 0) {\n            int64_t v18 = a2 + 128; // 0x40b070\n            int64_t v19 = a2 + 112; // 0x40b077\n            int64_t v20 = &v6;\n            int64_t v21 = function_40ad90(v19, v18, 0, 0, v20); // 0x40b09a\n            int64_t v22 = function_40ad90(v19, v18, 0, 0, v20); // 0x40b0b4\n            v1 = v20;\n            v7 = v18;\n            v5 = v21;\n            v2 = v22;\n            v3 = v19;\n            v4 = v22;\n            goto lab_0x40afd9;\n        } else {\n            uint64_t v23 = *(int64_t *)(a3 + 40); // 0x40af50\n            if (v23 > 63 || (*(int64_t *)(a2 + 160) & 1 << v23 % 64) == 0) {\n                // 0x40b057\n                return result;\n            }\n            // 0x40af6f\n            v8 = a2 + 128;\n            v9 = a2 + 112;\n            v10 = &v6;\n            v11 = function_40ad90(v9, v8, 0, 0, v10);\n            v12 = function_40ad90(v9, v8, 0, 0, v10);\n            goto lab_0x40afbb;\n        }\n    }\n  lab_0x40afbb:;\n    int64_t v24 = function_40ad90(v9, v8, (int32_t)result, (int32_t)v12, v10); // 0x40afd1\n    v1 = v10;\n    v7 = v8;\n    v5 = v11;\n    v2 = v24;\n    v3 = v9;\n    v4 = v12;\n    goto lab_0x40afd9;\n  lab_0x40afd9:;\n    int64_t v25 = function_40ad90(v3, v7, (int32_t)v5, (int32_t)v2, v1); // 0x40aff4\n    int64_t result2; // 0x40af20\n    if (v4 == 0 || v5 == 0 || v2 == 0 || v25 == 0) {\n        // 0x40b128\n        *a1 = 12;\n        result2 = 0;\n    } else {\n        int64_t v26 = *(int64_t *)(a3 + 40); // 0x40b025\n        *(int64_t *)(v4 + 40) = v26;\n        *(int64_t *)(v5 + 40) = v26;\n        char * v27 = (char *)(v4 + 50); // 0x40b038\n        char v28 = *(char *)(a3 + 50) & 8;\n        *v27 = *v27 & -9 | v28;\n        char * v29 = (char *)(v5 + 50); // 0x40b04b\n        *v29 = *v29 & -9 | v28;\n        result2 = v25;\n    }\n    // 0x40b057\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b140",
            "funcStartAddr": "40b140",
            "funcEndAddr": "40b1bb",
            "decompiledFuncCode": "int64_t function_40b140(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40b14c\n    int64_t v2 = *v1; // 0x40b14c\n    int32_t result = 0; // bp-28, 0x40b150\n    int64_t v3; // 0x40b140\n    if (v2 != 0) {\n        // 0x40b15d\n        if (*(char *)(v2 + 48) == 17) {\n            int64_t v4 = function_40af20(&result, a1, v2, v3); // 0x40b188\n            *v1 = v4;\n            if (v4 != 0) {\n                // 0x40b196\n                *(int64_t *)v4 = a2;\n            }\n        }\n    }\n    int64_t * v5 = (int64_t *)(a2 + 16); // 0x40b163\n    int64_t v6 = *v5; // 0x40b163\n    if (v6 == 0 || *(char *)(v6 + 48) != 17) {\n        // 0x40b172\n        return result;\n    }\n    int64_t v7 = function_40af20(&result, a1, v6, v3); // 0x40b1a8\n    *v5 = v7;\n    if (v7 != 0) {\n        // 0x40b1b6\n        *(int64_t *)v7 = a2;\n    }\n    // 0x40b172\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b1c0",
            "funcStartAddr": "40b1c0",
            "funcEndAddr": "40b23f",
            "decompiledFuncCode": "int64_t function_40b1c0(int64_t a1, int64_t a2) {\n    // 0x40b1c0\n    int128_t v1; // 0x40b1c0\n    int128_t v2 = v1;\n    int64_t v3 = a1;\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40b1c0\n    *(int64_t *)(a1 + 8) = v4;\n    if (v4 < 1) {\n        int128_t v5 = __asm_pxor(v2, v2); // 0x40b210\n        *(int64_t *)(v3 + 16) = 0;\n        __asm_movups(*(int128_t *)&v3, v5);\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)v3; // 0x40b1df\n    *v6 = v4;\n    int32_t size = 8 * (int32_t)v4; // 0x40b1e5\n    int64_t * mem = malloc(size); // 0x40b1e5\n    *(int64_t *)(v3 + 16) = (int64_t)mem;\n    int64_t result; // 0x40b1c0\n    if (mem == NULL) {\n        // 0x40b228\n        *(int64_t *)(v3 + 8) = 0;\n        *v6 = 0;\n        result = 12;\n    } else {\n        // 0x40b1f3\n        memcpy(mem, (int64_t *)*(int64_t *)(a2 + 16), size);\n        result = 0;\n    }\n    // 0x40b205\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b240",
            "funcStartAddr": "40b240",
            "funcEndAddr": "40b3c2",
            "decompiledFuncCode": "int64_t function_40b240(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b240\n    int128_t v1; // 0x40b240\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    if (a2 != 0) {\n        int64_t * v4 = (int64_t *)(a2 + 8); // 0x40b257\n        int64_t v5 = *v4; // 0x40b257\n        if (a3 != 0 && v5 >= 1) {\n            int64_t * v6 = (int64_t *)(a3 + 8); // 0x40b26d\n            uint64_t v7 = *v6; // 0x40b26d\n            if (v7 < 1) {\n                // 0x40b343\n                return function_40b1c0(v3, a2);\n            }\n            int64_t v8 = v7 + v5; // 0x40b27d\n            *a1 = v8;\n            int64_t * mem = malloc(8 * (int32_t)v8); // 0x40b28f\n            int64_t v9 = (int64_t)mem; // 0x40b28f\n            *(int64_t *)(v3 + 16) = v9;\n            if (mem == NULL) {\n                // 0x40b32a\n                return 12;\n            }\n            int64_t v10 = *(int64_t *)(a2 + 16); // 0x40b2a4\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v9;\n            int64_t v14 = *(int64_t *)(a3 + 16); // 0x40b2e8\n            int64_t v15 = *(int64_t *)v10; // 0x40b2ec\n            int64_t v16 = *(int64_t *)(v14 + 8 * v11); // 0x40b2f3\n            int64_t v17; // 0x40b240\n            int64_t v18; // 0x40b240\n            if (v15 > v16) {\n                // 0x40b2fc\n                *(int64_t *)v13 = v16;\n                v17 = v11 + 1;\n                v18 = v12;\n            } else {\n                // 0x40b2b8\n                *(int64_t *)v13 = v15;\n                v17 = v11 + (int64_t)(v15 == v16);\n                v18 = v12 + 1;\n            }\n            int64_t v19 = 1; // 0x40b2ef\n            int64_t v20 = v18;\n            int64_t v21 = v17;\n            uint64_t v22 = *v4; // 0x40b2ca\n            int64_t v23; // 0x40b240\n            while (v22 > v20) {\n                int64_t v24 = v13 + 8; // 0x40b2ce\n                int64_t v25 = 8 * v20 + v10; // 0x40b2db\n                if (v7 <= v21) {\n                    int64_t v26 = v22 - v20; // 0x40b3a0\n                    memcpy((int64_t *)v24, (int64_t *)v25, 8 * (int32_t)v26);\n                    v23 = v26 + v19;\n                    goto lab_0x40b369;\n                }\n                v11 = v21;\n                v12 = v20;\n                v13 = v24;\n                v14 = *(int64_t *)(a3 + 16);\n                v15 = *(int64_t *)v25;\n                v16 = *(int64_t *)(v14 + 8 * v11);\n                if (v15 > v16) {\n                    // 0x40b2fc\n                    *(int64_t *)v13 = v16;\n                    v17 = v11 + 1;\n                    v18 = v12;\n                } else {\n                    // 0x40b2b8\n                    *(int64_t *)v13 = v15;\n                    v17 = v11 + (int64_t)(v15 == v16);\n                    v18 = v12 + 1;\n                }\n                // 0x40b2ca\n                v19++;\n                v20 = v18;\n                v21 = v17;\n                v22 = *v4;\n            }\n            int64_t v27 = *v6; // 0x40b360\n            v23 = v19;\n            if (v27 > v21) {\n                int64_t v28 = v27 - v21; // 0x40b38b\n                memcpy((int64_t *)(8 * v19 + v9), (int64_t *)(8 * v21 + v14), 8 * (int32_t)v28);\n                v23 = v28 + v19;\n            }\n          lab_0x40b369:\n            // 0x40b369\n            *(int64_t *)(v3 + 8) = v23;\n            return 0;\n        }\n        // 0x40b308\n        if (v5 >= 0 == (v5 != 0)) {\n            // 0x40b343\n            return function_40b1c0(v3, a2);\n        }\n    }\n    if (a3 != 0) {\n        int64_t v29 = *(int64_t *)(a3 + 8); // 0x40b312\n        if (v29 >= 0 == (v29 != 0)) {\n            // 0x40b343\n            return function_40b1c0(v3, a3);\n        }\n    }\n    // 0x40b319\n    *(int64_t *)(v3 + 16) = 0;\n    *(int128_t *)a1 = (int128_t)__asm_movaps(__asm_pxor(v2, v2));\n    // 0x40b32a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b3d0",
            "funcStartAddr": "40b3d0",
            "funcEndAddr": "40b6d0",
            "decompiledFuncCode": "int64_t function_40b3d0(int128_t * a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40b3de\n    uint64_t v3 = *v2; // 0x40b3de\n    if (v3 == 0) {\n        // 0x40b6a8\n        *(int32_t *)a1 = 0;\n        // 0x40b477\n        return 0;\n    }\n    uint64_t v4 = (int64_t)a4;\n    int64_t v5 = v3 + (v4 & 0xffffffff); // 0x40b3ee\n    int64_t v6 = v5; // 0x40b3f2\n    if (v3 >= 1) {\n        int64_t v7 = *(int64_t *)(v1 + 16); // 0x40b3f4\n        int64_t v8 = v7; // 0x40b3fc\n        int64_t v9 = v5; // 0x40b3fc\n        v9 += *(int64_t *)v8;\n        v8 += 8;\n        v6 = v9;\n        while (v7 + 8 * v3 != v8) {\n            // 0x40b400\n            v9 += *(int64_t *)v8;\n            v8 += 8;\n            v6 = v9;\n        }\n    }\n    int64_t v10 = *(int64_t *)(a2 + 136) & v6; // 0x40b421\n    int64_t v11 = 24 * v10 + *(int64_t *)(a2 + 64); // 0x40b42c\n    uint64_t v12 = *(int64_t *)v11; // 0x40b430\n    if (v12 >= 1) {\n        int64_t v13 = 0; // 0x40b442\n        int64_t v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16)); // 0x40b451\n        int64_t result; // 0x40b3d0\n        if (*(int64_t *)v14 == v6) {\n            // 0x40b45a\n            if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                // 0x40b467\n                result = v14;\n                if ((char)function_408570(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                    // 0x40b477\n                    return result;\n                }\n            }\n        }\n        // 0x40b448\n        v13++;\n        while (v13 != v12) {\n            // 0x40b451\n            v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16));\n            if (*(int64_t *)v14 == v6) {\n                // 0x40b45a\n                if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                    // 0x40b467\n                    result = v14;\n                    if ((char)function_408570(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                        // 0x40b477\n                        return result;\n                    }\n                }\n            }\n            // 0x40b448\n            v13++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40b49a\n    if (mem == NULL) {\n        // 0x40b628\n        *(int32_t *)a1 = 12;\n        // 0x40b477\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40b49a\n    int64_t v15 = result2 + 8; // 0x40b4ab\n    if ((int32_t)function_40b1c0(v15, v1) != 0) {\n        // 0x40b6c3\n        free(mem);\n        // 0x40b628\n        *(int32_t *)a1 = 12;\n        // 0x40b477\n        return 0;\n    }\n    char * v16 = (char *)(result2 + 104); // 0x40b4c6\n    *v16 = *v16 & -16 | (char)a4 % 16;\n    int64_t * v17 = (int64_t *)(result2 + 80); // 0x40b4e6\n    *v17 = v15;\n    int64_t v18; // 0x40b3d0\n    int64_t v19; // 0x40b3d0\n    int64_t v20; // 0x40b3d0\n    int64_t v21; // 0x40b3d0\n    int64_t v22; // 0x40b3d0\n    int64_t v23; // 0x40b3d0\n    int64_t v24; // 0x40b3d0\n    int64_t v25; // 0x40b3d0\n    int64_t v26; // 0x40b4f0\n    int64_t v27; // 0x40b3d0\n    int64_t * v28; // 0x40b3d0\n    uint64_t v29; // 0x40b52a\n    if (*v2 >= 1) {\n        // 0x40b4f0\n        v26 = result2 + 24;\n        v27 = result2 + 16;\n        v28 = (int64_t *)v27;\n        v23 = v1;\n        v18 = 0;\n        v21 = 0;\n        while (true) {\n          lab_0x40b510:\n            // 0x40b510\n            v22 = v21;\n            int64_t v30 = v18;\n            int64_t v31 = 16 * *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v22) + v23; // 0x40b51c\n            int64_t v32 = v31 + 8; // 0x40b520\n            uint32_t v33 = *(int32_t *)v32; // 0x40b520\n            unsigned char v34 = *(char *)v32; // 0x40b523\n            v25 = 1;\n            v20 = v30;\n            if (v34 == 1 == (v33 & 0x3ff00) == 0) {\n                goto lab_0x40b5ee;\n            } else {\n                char v35 = 2 * *(char *)(v31 + 10) & 32 | *v16;\n                *v16 = v35;\n                if (v34 == 2) {\n                    // 0x40b640\n                    *v16 = v35 | 16;\n                } else {\n                    if (v34 == 4) {\n                        // 0x40b574\n                        *v16 = v35 | 64;\n                    }\n                }\n                int64_t v36 = v34; // 0x40b523\n                v25 = v36;\n                v20 = v30;\n                if ((v33 & 0x3ff00) == 0) {\n                    goto lab_0x40b5ee;\n                } else {\n                    int64_t v37 = v36; // 0x40b589\n                    int64_t v38 = v30; // 0x40b589\n                    if (v15 == *v17) {\n                        int64_t * mem2 = malloc(24); // 0x40b675\n                        int64_t v39 = (int64_t)mem2; // 0x40b675\n                        *v17 = v39;\n                        if (mem2 == NULL) {\n                            // 0x40b6b6\n                            function_409cf0(result2);\n                            goto lab_0x40b628;\n                        }\n                        // 0x40b684\n                        if ((int32_t)function_40b1c0(v39, v1) != 0) {\n                          lab_0x40b628:\n                            // 0x40b628\n                            *(int32_t *)a1 = 12;\n                            // 0x40b477\n                            return 0;\n                        }\n                        // 0x40b693\n                        *v16 = *v16 | -128;\n                        v37 = v1;\n                        v38 = 0;\n                    }\n                    // 0x40b58f\n                    v29 = (int64_t)(v33 / 256 & 0xff03ff);\n                    v19 = v38;\n                    v24 = v37;\n                    if (v29 % 2 == 0) {\n                        if (v4 % 2 == 0 || (v29 & 2) == 0) {\n                            goto lab_0x40b5a3;\n                        } else {\n                            goto lab_0x40b5c0;\n                        }\n                    } else {\n                        if (v4 % 2 == 0) {\n                            goto lab_0x40b5c0;\n                        } else {\n                            if ((v29 & 2) != 0) {\n                                goto lab_0x40b5c0;\n                            } else {\n                                goto lab_0x40b5a3;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40b604:\n    // 0x40b604\n    if ((int32_t)function_408c40(a2, result2, v6) == 0) {\n        // 0x40b477\n        return result2;\n    }\n    // 0x40b61a\n    function_409cf0(result2);\n    // 0x40b628\n    *(int32_t *)a1 = 12;\n    // 0x40b477\n    return 0;\n  lab_0x40b5ee:;\n    int64_t v40 = v22 + 1; // 0x40b5ee\n    v23 = v25;\n    v18 = v20;\n    v21 = v40;\n    if (v40 >= *v2) {\n        // break -> 0x40b604\n        goto lab_0x40b604;\n    }\n    goto lab_0x40b510;\n  lab_0x40b5a3:\n    if ((v4 & 2) == 0 == ((v29 & 16) != 0)) {\n        goto lab_0x40b5c0;\n    } else {\n        // 0x40b5ae\n        v25 = v24;\n        v20 = v19;\n        if ((v4 & 4) != 0 || (v29 & 64) == 0) {\n            goto lab_0x40b5ee;\n        } else {\n            goto lab_0x40b5c0;\n        }\n    }\n  lab_0x40b5c0:;\n    int64_t v41 = v22 - v19; // 0x40b5c3\n    int64_t v42 = v24; // 0x40b5c6\n    if (v41 >= 0) {\n        int64_t v43 = *v28; // 0x40b5c8\n        v42 = v24;\n        if (v41 < v43) {\n            // 0x40b5d2\n            *v28 = v43 - 1;\n            function_40a290(v27, v26, v41);\n            v42 = v26;\n        }\n    }\n    // 0x40b5ea\n    v25 = v42;\n    v20 = v19 + 1;\n    goto lab_0x40b5ee;\n}\n"
        },
        {
            "funcName": "function_40b6d0",
            "funcStartAddr": "40b6d0",
            "funcEndAddr": "40b8b8",
            "decompiledFuncCode": "int64_t function_40b6d0(int32_t * a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40b6de\n    int64_t v3 = *v2; // 0x40b6de\n    if (v3 == 0) {\n        // 0x40b8a4\n        *a1 = 0;\n        // 0x40b84f\n        return 0;\n    }\n    int64_t v4 = v3; // 0x40b6eb\n    if (v3 >= 1) {\n        int64_t v5 = *(int64_t *)(v1 + 16); // 0x40b6ed\n        int64_t v6 = v5; // 0x40b6f5\n        int64_t v7 = v3; // 0x40b6f5\n        v7 += *(int64_t *)v6;\n        v6 += 8;\n        v4 = v7;\n        while (v5 + 8 * v3 != v6) {\n            // 0x40b6f8\n            v7 += *(int64_t *)v6;\n            v6 += 8;\n            v4 = v7;\n        }\n    }\n    int64_t v8 = *(int64_t *)(a2 + 136) & v4; // 0x40b714\n    int64_t v9 = 24 * v8 + *(int64_t *)(a2 + 64); // 0x40b71f\n    uint64_t v10 = *(int64_t *)v9; // 0x40b723\n    if (v10 >= 1) {\n        int64_t v11 = 0; // 0x40b732\n        int64_t v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16)); // 0x40b738\n        int64_t result; // 0x40b6d0\n        int64_t v13; // 0x40b748\n        if (*(int64_t *)v12 == v4) {\n            // 0x40b741\n            v13 = function_408570(v12 + 8, v1, 3 * v8);\n            result = v12;\n            if ((char)v13 != 0) {\n                // 0x40b84f\n                return result;\n            }\n        }\n        // 0x40b755\n        v11++;\n        while (v10 != v11) {\n            // 0x40b738\n            v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16));\n            if (*(int64_t *)v12 == v4) {\n                // 0x40b741\n                v13 = function_408570(v12 + 8, v1, 3 * v8);\n                result = v12;\n                if ((char)v13 != 0) {\n                    // 0x40b84f\n                    return result;\n                }\n            }\n            // 0x40b755\n            v11++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40b768\n    if (mem == NULL) {\n        // 0x40b898\n        *a1 = 12;\n        // 0x40b84f\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40b768\n    int64_t v14 = result2 + 8; // 0x40b779\n    if ((int32_t)function_40b1c0(v14, v1) != 0) {\n        // 0x40b890\n        free(mem);\n        // 0x40b898\n        *a1 = 12;\n        // 0x40b84f\n        return 0;\n    }\n    uint64_t v15 = *v2; // 0x40b790\n    *(int64_t *)(result2 + 80) = v14;\n    char v16; // 0x40b6d0\n    int64_t v17; // 0x40b6d0\n    int64_t v18; // 0x40b6d0\n    int64_t v19; // 0x40b7a9\n    char * v20; // 0x40b6d0\n    if (v15 >= 1) {\n        int64_t v21 = *(int64_t *)(v1 + 16); // 0x40b7a1\n        v19 = v21 + 8 * v15;\n        v20 = (char *)(result2 + 104);\n        v17 = v21;\n        while (true) {\n          lab_0x40b7f4_2:\n            // 0x40b7f4\n            v18 = v17;\n            int64_t v22 = 16 * *(int64_t *)v18 + v21; // 0x40b7fb\n            int64_t v23 = v22 + 8; // 0x40b7fe\n            char v24 = *(char *)v23; // 0x40b7fe\n            if (v24 != 1) {\n                char v25 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                *v20 = v25;\n                if (v24 == 2) {\n                    // 0x40b868\n                    *v20 = v25 | 16;\n                    goto lab_0x40b7eb;\n                } else {\n                    if (v24 != 4) {\n                        // 0x40b878\n                        v16 = v25;\n                        if (v24 == 12) {\n                            goto lab_0x40b830;\n                        } else {\n                            // 0x40b87d\n                            v16 = v25;\n                            if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                                goto lab_0x40b7eb;\n                            } else {\n                                goto lab_0x40b830;\n                            }\n                        }\n                    } else {\n                        // 0x40b7e5\n                        *v20 = v25 | 64;\n                        goto lab_0x40b7eb;\n                    }\n                }\n            } else {\n                // 0x40b807\n                if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                    goto lab_0x40b7eb;\n                } else {\n                    char v26 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                    *v20 = v26;\n                    v16 = v26;\n                    goto lab_0x40b830;\n                }\n            }\n        }\n    }\n  lab_0x40b83d_2:\n    // 0x40b83d\n    if ((int32_t)function_408c40(a2, result2, v4) == 0) {\n        // 0x40b84f\n        return result2;\n    }\n    // 0x40b8ae\n    function_409cf0(result2);\n    // 0x40b898\n    *a1 = 12;\n    // 0x40b84f\n    return 0;\n  lab_0x40b7eb:;\n    int64_t v27 = v18 + 8; // 0x40b7eb\n    if (v19 == v27) {\n        // break -> 0x40b83d\n        goto lab_0x40b83d_2;\n    }\n    // 0x40b7f4\n    v17 = v27;\n    goto lab_0x40b7f4_2;\n  lab_0x40b830:;\n    int64_t v28 = v18 + 8; // 0x40b830\n    *v20 = v16 | -128;\n    if (v19 == v28) {\n        // break -> 0x40b83d\n        goto lab_0x40b83d_2;\n    }\n    // 0x40b7f4\n    v17 = v28;\n    goto lab_0x40b7f4_2;\n}\n"
        },
        {
            "funcName": "function_40b8c0",
            "funcStartAddr": "40b8c0",
            "funcEndAddr": "40b968",
            "decompiledFuncCode": "int64_t function_40b8c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b8c0\n    if (a4 < 1) {\n        // 0x40b958\n        return 0;\n    }\n    int64_t v1 = 0; // 0x40b8c0\n    int64_t result; // 0x40b8c0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = 8 * v2; // 0x40b939\n        int64_t * v4 = (int64_t *)(v3 + a2); // 0x40b939\n        int64_t v5 = *v4; // 0x40b939\n        int64_t v6 = *(int64_t *)(v3 + a3); // 0x40b93e\n        if (v5 != 0) {\n            if (v6 != 0) {\n                // 0x40b8ed\n                int64_t v7; // bp-72, 0x40b8c0\n                int64_t v8 = function_40b240(&v7, v5 + 8, v6 + 8, a4); // 0x40b8fa\n                int32_t v9 = v8; // 0x40b8ff\n                int32_t v10 = v9; // bp-76, 0x40b8ff\n                result = v8;\n                if (v9 != 0) {\n                    // break -> 0x40b958\n                    break;\n                }\n                // 0x40b907\n                int64_t v11; // 0x40b8c0\n                *v4 = function_40b6d0(&v10, a1, &v7, a4, v11, v11);\n                free((int64_t *)v11);\n                uint32_t v12 = v10; // 0x40b928\n                if (v12 != 0) {\n                    // 0x40b958\n                    result = v12;\n                    return result;\n                }\n            }\n            int64_t v13 = v2 + 1; // 0x40b930\n            v1 = v13;\n            result = 0;\n            if (v13 == a4) {\n                // break -> 0x40b958\n                break;\n            }\n        } else {\n            // 0x40b948\n            *v4 = v6;\n            int64_t v14 = v2 + 1; // 0x40b94d\n            v1 = v14;\n            result = 0;\n            if (v14 == a4) {\n                // break -> 0x40b958\n                break;\n            }\n        }\n    }\n  lab_0x40b958_2:\n    // 0x40b958\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b970",
            "funcStartAddr": "40b970",
            "funcEndAddr": "40bcf2",
            "decompiledFuncCode": "int64_t function_40b970(int64_t a1, int128_t * a2, uint64_t a3, int64_t a4, int32_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 200); // 0x40b981\n    if (v1 <= 0) {\n        // 0x40bc72\n        return 0;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(a1 + 216); // 0x40b994\n    int64_t v4 = *v3; // 0x40b994\n    int64_t v5 = v4 + 8; // 0x40b9ac\n    int64_t v6 = 0;\n    uint64_t v7 = v6 + v1; // 0x40b990\n    int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x40b9a5\n    int64_t v9 = v8; // 0x40b9b1\n    int64_t v10 = v8; // 0x40b9b1\n    int64_t v11 = v1; // 0x40b9b1\n    int64_t v12; // 0x40b970\n    int64_t v13; // 0x40b970\n    uint64_t v14; // 0x40b9c0\n    int64_t v15; // 0x40b9ce\n    if (*(int64_t *)(40 * v8 + v5) >= a3) {\n        v12 = v6;\n        if (v9 <= v6) {\n            // break (via goto) -> 0x40b9eb\n            goto lab_0x40b9eb;\n        }\n        // 0x40b9c0\n        v14 = v9 + v6;\n        v15 = (v14 / 0x8000000000000000 + v14) / 2;\n        v10 = v15;\n        v11 = v9;\n        while (*(int64_t *)(40 * v15 + v5) >= a3) {\n            // 0x40b9e6\n            v13 = v15;\n            v12 = v6;\n            if (v13 <= v6) {\n                // break (via goto) -> 0x40b9eb\n                goto lab_0x40b9eb;\n            }\n            // 0x40b9c0\n            v14 = v13 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v13;\n        }\n    }\n    int64_t v16 = v10 + 1; // 0x40bc60\n    v12 = v16;\n    while (v16 < v11) {\n        // 0x40b990\n        v6 = v16;\n        v7 = v6 + v11;\n        v8 = (v7 / 0x8000000000000000 + v7) / 2;\n        v9 = v8;\n        v10 = v8;\n        if (*(int64_t *)(40 * v8 + v5) >= a3) {\n            v12 = v6;\n            if (v9 <= v6) {\n                // break (via goto) -> 0x40b9eb\n                goto lab_0x40b9eb;\n            }\n            // 0x40b9c0\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v9;\n            while (*(int64_t *)(40 * v15 + v5) >= a3) {\n                // 0x40b9e6\n                v13 = v15;\n                v12 = v6;\n                if (v13 <= v6) {\n                    // break (via goto) -> 0x40b9eb\n                    goto lab_0x40b9eb;\n                }\n                // 0x40b9c0\n                v14 = v13 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v15;\n                v11 = v13;\n            }\n        }\n        // 0x40bc60\n        v16 = v10 + 1;\n        v12 = v16;\n    }\n  lab_0x40b9eb:\n    // 0x40b9eb\n    if (v1 <= v12) {\n        // 0x40bc72\n        return 0;\n    }\n    int64_t v17 = 40 * v12; // 0x40b9ff\n    if (v12 == -1 | *(int64_t *)(v17 + 8 + v4) != a3) {\n        // 0x40bc72\n        return 0;\n    }\n    int64_t v18 = v2 + 16; // 0x40ba26\n    int64_t v19 = *(int64_t *)(a1 + 152); // 0x40ba35\n    int64_t * v20 = (int64_t *)(a1 + 184);\n    int64_t v21; // bp-88, 0x40b970\n    int64_t v22 = &v21;\n    int64_t v23 = v4; // 0x40ba3f\n    int64_t * v24; // 0x40b970\n    int64_t v25; // 0x40b970\n    int64_t v26; // 0x40b970\n    int64_t result; // 0x40b970\n    int64_t v27; // 0x40b970\n    int64_t v28; // 0x40b970\n    int64_t v29; // 0x40b970\n    int64_t v30; // 0x40b970\n    int32_t v31; // bp-92, 0x40b970\n    int64_t v32; // 0x40bb48\n    int64_t v33; // 0x40ba63\n    int64_t v34; // 0x40ba67\n    int64_t v35; // 0x40ba77\n    while (true) {\n        // 0x40ba43\n        int64_t v36; // 0x40b970\n        v29 = v36;\n        v25 = v23 + v17;\n        int64_t v37; // 0x40bb72\n        while (true) {\n          lab_0x40bb28:\n            // 0x40bb28\n            v26 = v25;\n            v30 = v29;\n            int64_t v38 = *(int64_t *)v26; // 0x40bb28\n            int64_t v39 = *(int64_t *)(v2 + 8); // 0x40bb2b\n            v28 = v30;\n            if (function_40a120(v39, v18, v38) == 0) {\n                goto lab_0x40bb19;\n            } else {\n                // 0x40bb44\n                v32 = *(int64_t *)(v26 + 24) + a3;\n                int64_t v40 = v32 - *(int64_t *)(v26 + 16); // 0x40bb4e\n                if (v40 != a3) {\n                    // 0x40ba58\n                    v33 = *(int64_t *)(*(int64_t *)(v19 + 24) + 8 * v38);\n                    v34 = 8 * v40;\n                    int64_t * v41 = (int64_t *)(*v20 + v34);\n                    v35 = *v41;\n                    if (v35 == 0) {\n                        // 0x40bc10\n                        v21 = 1;\n                        int64_t * mem = malloc(8); // 0x40bc2c\n                        if (mem == NULL) {\n                            // 0x40bcb2\n                            result = 12;\n                            return result;\n                        }\n                        // 0x40bc3b\n                        v31 = 0;\n                        *mem = v33;\n                        v24 = v41;\n                        v27 = (int64_t)mem;\n                        goto lab_0x40bade;\n                    } else {\n                        // 0x40ba88\n                        v28 = v30;\n                        if (function_40a120(*(int64_t *)(v35 + 16), v35 + 24, v33) != 0) {\n                            goto lab_0x40bb19;\n                        } else {\n                            // 0x40ba9d\n                            v31 = function_40b1c0(v22, v35 + 8);\n                            int64_t v42 = function_408b10(v22, v33); // 0x40bab9\n                            if (v31 != 0) {\n                                goto lab_0x40bca0_2;\n                            }\n                            if ((char)v42 != 1) {\n                                goto lab_0x40bca0_2;\n                            }\n                            // 0x40bad2\n                            v24 = (int64_t *)(*v20 + v34);\n                            v27 = v30;\n                            goto lab_0x40bade;\n                        }\n                    }\n                } else {\n                    int64_t v43 = *(int64_t *)(v19 + 40); // 0x40bb5b\n                    v37 = *(int64_t *)*(int64_t *)(24 * v38 + 16 + v43);\n                    v28 = v30;\n                    if (function_40a120(v39, v18, v37) == 0) {\n                        // break -> 0x40bb82\n                        break;\n                    }\n                    goto lab_0x40bb19;\n                }\n            }\n        }\n        // 0x40bb82\n        v21 = 1;\n        int64_t * mem2 = malloc(8); // 0x40bb99\n        int32_t v44; // 0x40b970\n        if (mem2 == NULL) {\n            // 0x40bcd6\n            v21 = 0;\n            v44 = 12;\n        } else {\n            // 0x40bbac\n            *mem2 = v37;\n            v44 = 0;\n        }\n        // 0x40bbb1\n        v31 = v44;\n        int64_t v45 = function_40aa90(v19, &v21, a4, a5); // 0x40bbc6\n        int64_t v46 = function_40a660((int64_t *)a2, (int128_t *)&v21); // 0x40bbd6\n        free(mem2);\n        uint32_t v47 = v31; // 0x40bbe8\n        if ((v47 || (int32_t)(v46 || v45)) != 0) {\n            // 0x40bcc6\n            result = v47;\n            if (v47 != 0) {\n                return result;\n            } else {\n                // 0x40bcca\n                result = ((int32_t)v45 != 0 ? v45 : v46) & 0xffffffff;\n                return result;\n            }\n        }\n        // 0x40bbfa\n        v36 = (int64_t)mem2;\n        v23 = *v3;\n    }\n  lab_0x40bc72:\n    // 0x40bc72\n    return result;\n  lab_0x40bca0_2:\n    // 0x40bca0\n    free((int64_t *)v30);\n    result = v31;\n    if (v31 != 0) {\n        return result;\n    } else {\n        // 0x40bcb2\n        result = 12;\n        return result;\n    }\n  lab_0x40bb19:\n    // 0x40bb19\n    v29 = v28;\n    v25 = v26 + 40;\n    result = 0;\n    if (*(char *)(v26 + 32) == 0) {\n        return result;\n    }\n    goto lab_0x40bb28;\n  lab_0x40bade:;\n    int64_t v48 = v27;\n    *v24 = function_40b6d0(&v31, v19, &v21, v33, v32, v35);\n    free((int64_t *)v48);\n    v28 = v48;\n    if (*(int64_t *)(*v20 + v34) == 0) {\n        uint32_t v49 = v31; // 0x40bc88\n        v28 = v48;\n        if (v49 != 0) {\n            // 0x40bc72\n            result = v49;\n            goto lab_0x40bc72;\n        }\n    }\n    goto lab_0x40bb19;\n}\n"
        },
        {
            "funcName": "function_40bd00",
            "funcStartAddr": "40bd00",
            "funcEndAddr": "40be41",
            "decompiledFuncCode": "int64_t function_40bd00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x40bd12\n    if (a2 < 1) {\n      lab_0x40bde2:\n        // 0x40bde2\n        return 0;\n    }\n    int64_t * v2 = (int64_t *)(a1 + 232);\n    int64_t * v3 = (int64_t *)(a1 + 248);\n    int64_t * v4 = (int64_t *)(a1 + 240);\n    int64_t v5 = 0; // 0x40bd30\n    int64_t v6; // 0x40bd00\n    int64_t v7; // 0x40bd40\n    int64_t v8; // 0x40bd4b\n    uint64_t v9; // 0x40bd55\n    while (true) {\n        // 0x40bd3d\n        v6 = v5;\n        v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n        v8 = 16 * v7 + *(int64_t *)v1;\n        if (*(char *)(v8 + 8) == 8) {\n            // 0x40bd55\n            v9 = *(int64_t *)v8;\n            if (v9 <= 63) {\n                // 0x40bd5e\n                if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                    // break -> 0x40bd6c\n                    break;\n                }\n            }\n        }\n        // 0x40bd30\n        v5 = v6 + 1;\n        if (v5 >= a2) {\n            return 0;\n        }\n    }\n    int64_t v10 = *v2; // 0x40bd6c\n    int64_t v11 = *v3; // 0x40bd73\n    int64_t v12 = v10; // 0x40bd81\n    int64_t v13 = v11; // 0x40bd81\n    int64_t * mem; // 0x40be10\n    if (v10 == *v4) {\n        // 0x40bdf8\n        mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n        if (mem == NULL) {\n            // break -> 0x40bde2\n            break;\n        }\n        // 0x40be22\n        v13 = (int64_t)mem;\n        *v3 = v13;\n        v12 = *v2;\n        *v4 = 2 * v10;\n    }\n    int64_t * mem2 = calloc(1, 48); // 0x40bd9c\n    int64_t v14 = (int64_t)mem2; // 0x40bd9c\n    *(int64_t *)(v13 + 8 * v12) = v14;\n    int64_t result = 12; // 0x40bdb2\n    while (mem2 != NULL) {\n        // 0x40bdb4\n        *mem2 = a4;\n        int64_t v15 = v6 + 1; // 0x40bdc0\n        *(int64_t *)(v14 + 8) = v7;\n        *v2 = v12 + 1;\n        result = 0;\n        if (v15 >= 48) {\n            // break -> 0x40bde2\n            break;\n        }\n        v5 = v15;\n        while (true) {\n            // 0x40bd3d\n            v6 = v5;\n            v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n            v8 = 16 * v7 + *(int64_t *)v1;\n            if (*(char *)(v8 + 8) == 8) {\n                // 0x40bd55\n                v9 = *(int64_t *)v8;\n                if (v9 <= 63) {\n                    // 0x40bd5e\n                    if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                        // break -> 0x40bd6c\n                        break;\n                    }\n                }\n            }\n            // 0x40bd30\n            v5 = v6 + 1;\n            if (v5 >= 48) {\n                return 0;\n            }\n        }\n        // 0x40bd6c\n        v10 = *v2;\n        v11 = *v3;\n        v12 = v10;\n        v13 = v11;\n        if (v10 == *v4) {\n            // 0x40bdf8\n            mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n            result = 12;\n            if (mem == NULL) {\n                // break -> 0x40bde2\n                break;\n            }\n            // 0x40be22\n            v13 = (int64_t)mem;\n            *v3 = v13;\n            v12 = *v2;\n            *v4 = 2 * v10;\n        }\n        // 0x40bd83\n        mem2 = calloc(1, 48);\n        v14 = (int64_t)mem2;\n        *(int64_t *)(v13 + 8 * v12) = v14;\n        result = 12;\n    }\n    // 0x40bde2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40be50",
            "funcStartAddr": "40be50",
            "funcEndAddr": "40bf3e",
            "decompiledFuncCode": "int64_t function_40be50(int64_t a1, int64_t a2, int32_t a3) {\n    if (a2 < 0) {\n        // 0x40bf00\n        return (int64_t)*(int32_t *)(a1 + 112);\n    }\n    // 0x40be62\n    if (*(int64_t *)(a1 + 88) == a2) {\n        // 0x40bea6\n        return a3 & 2 ^ 10;\n    }\n    // 0x40be6c\n    if (*(int32_t *)(a1 + 144) < 2) {\n        unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a2); // 0x40bebb\n        int64_t v2 = *(int64_t *)(*(int64_t *)(a1 + 128) + (int64_t)(8 * v1 / 64)); // 0x40bec6\n        if ((1 << (int64_t)(v1 % 64) & v2) != 0) {\n            // 0x40bea6\n            return 1;\n        }\n        // 0x40beda\n        if (v1 != 10) {\n            // 0x40bea6\n            return 0;\n        }\n        // 0x40bee1\n        return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n    }\n    int64_t v3 = a2;\n    int32_t wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16)); // 0x40be8a\n    while (wc == -1) {\n        // 0x40be80\n        if (v3 == 0) {\n            // 0x40bf00\n            return (int64_t)*(int32_t *)(a1 + 112);\n        }\n        v3--;\n        wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16));\n    }\n    // 0x40be92\n    if (*(char *)(a1 + 142) != 0) {\n        // 0x40bf20\n        if (wc != 95 != (iswalnum(wc) == 0)) {\n            // 0x40bea6\n            return 1;\n        }\n    }\n    // 0x40be9f\n    if (wc != 10) {\n        // 0x40bea6\n        return 0;\n    }\n    // 0x40bee1\n    return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n}\n"
        },
        {
            "funcName": "function_40bf40",
            "funcStartAddr": "40bf40",
            "funcEndAddr": "40c06b",
            "decompiledFuncCode": "int64_t function_40bf40(int64_t a1, int64_t a2, int64_t a3) {\n    unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a3); // 0x40bf44\n    int64_t v2 = a2 + 8;\n    unsigned char v3 = *(char *)v2; // 0x40bf48\n    if (v3 == 3) {\n        uint64_t v4 = (int64_t)v1; // 0x40bf44\n        if ((*(int64_t *)((v4 / 8 & 24) + a2) & 1 << v4 % 64) == 0) {\n            // 0x40bfef\n            return 0;\n        }\n    } else {\n        if (v3 < 4) {\n            // 0x40bff8\n            if (v1 == (char)a2 != (v3 == 1)) {\n                // 0x40bfef\n                return 0;\n            }\n        } else {\n            if (v3 != 5) {\n                // 0x40bf5e\n                if (v1 < 0 || v3 != 7) {\n                    // 0x40bfef\n                    return 0;\n                }\n            }\n            if (v1 == 10) {\n                // 0x40c050\n                if ((*(char *)(*(int64_t *)(a1 + 152) + 216) & 64) == 0) {\n                    // 0x40bfef\n                    return 0;\n                }\n            } else {\n                if (v1 == 0) {\n                    // 0x40bf80\n                    if (*(char *)(*(int64_t *)(a1 + 152) + 216) <= -1) {\n                        // 0x40bfef\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uint32_t v5 = *(int32_t *)v2; // 0x40bf93\n    if ((v5 & 0x3ff00) == 0) {\n        // 0x40bfef\n        return 1;\n    }\n    int64_t v6 = v5; // 0x40bf93\n    uint64_t v7 = function_40be50(a1, a3, *(int32_t *)(a1 + 160)); // 0x40bfaf\n    if ((v6 & 1024) != 0) {\n        // 0x40c040\n        if ((v6 & 2048) == 0 != v7 % 2 != 0) {\n            // 0x40bfef\n            return 0;\n        }\n    } else {\n        if ((v6 & 2048) != 0) {\n            // 0x40bfc7\n            if (v7 % 2 != 0) {\n                // 0x40bfef\n                return 0;\n            }\n        }\n    }\n    int64_t result = 0; // 0x40bfd2\n    if ((v6 & 0x2000) != 0 != ((v7 & 2) == 0)) {\n        // 0x40bfdb\n        result = (char)(v5 / 256) <= -1 ? v7 / 8 % 2 : 1;\n    }\n    // 0x40bfef\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c070",
            "funcStartAddr": "40c070",
            "funcEndAddr": "40c138",
            "decompiledFuncCode": "int64_t function_40c070(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_40be50(v1, a4, *(int32_t *)(v1 + 160)); // 0x40c086\n    if (a2 < 1) {\n        // 0x40c10c\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 152); // 0x40c094\n    int64_t v4 = 0; // 0x40c0b6\n    int64_t result; // 0x40c070\n    uint32_t v5; // 0x40c0ce\n    uint32_t v6; // 0x40c0d1\n    int64_t v7; // 0x40c0c0\n    while (true) {\n      lab_0x40c0c0:\n        // 0x40c0c0\n        v7 = *(int64_t *)(8 * v4 + v3);\n        int64_t v8 = *(int64_t *)v3 + 8 + 16 * v7; // 0x40c0ce\n        if (*(char *)v8 != 2) {\n            goto lab_0x40c128;\n        } else {\n            // 0x40c0e1\n            v5 = *(int32_t *)v8;\n            result = v7;\n            if ((v5 & 0x3ff00) == 0) {\n                // break -> 0x40c10c\n                break;\n            }\n            // 0x40c0e6\n            v6 = v5 / 256;\n            int64_t v9 = v6; // 0x40c0d1\n            if ((v9 & 4) == 0) {\n                if (v2 % 2 == 0 || (v9 & 8) == 0) {\n                    goto lab_0x40c0f5;\n                } else {\n                    goto lab_0x40c128;\n                }\n            } else {\n                if (v2 % 2 == 0) {\n                    goto lab_0x40c128;\n                } else {\n                    if ((v9 & 8) != 0) {\n                        goto lab_0x40c128;\n                    } else {\n                        goto lab_0x40c0f5;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40c10c_2:\n    // 0x40c10c\n    return result;\n  lab_0x40c128:\n    // 0x40c128\n    v4++;\n    result = 0;\n    if (v4 == a2) {\n        return result;\n    }\n    goto lab_0x40c0c0;\n  lab_0x40c0f5:\n    if ((v2 & 2) == 0 != (v5 & 0x2000) != 0) {\n        // 0x40c100\n        result = v7;\n        if ((v2 & 8) == 0 != (char)v6 < 0) {\n            // break -> 0x40c10c\n            goto lab_0x40c10c_2;\n        }\n    }\n    goto lab_0x40c128;\n}\n"
        },
        {
            "funcName": "function_40c140",
            "funcStartAddr": "40c140",
            "funcEndAddr": "40c927",
            "decompiledFuncCode": "int64_t function_40c140(int64_t * a1, int64_t a2, int32_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40c15a\n    int64_t v3 = *v2; // 0x40c15a\n    int64_t v4 = a2 - v3; // 0x40c164\n    int64_t * v5; // 0x40c140\n    char * v6; // 0x40c140\n    int64_t * v7; // 0x40c140\n    int32_t * v8; // 0x40c140\n    int64_t * v9; // 0x40c140\n    int64_t * v10; // 0x40c140\n    int64_t v11; // 0x40c140\n    if (v3 > a2) {\n        int32_t * v12 = (int32_t *)(v1 + 144);\n        if (*v12 >= 2) {\n            // 0x40c16f\n            *(int64_t *)(v1 + 32) = 0;\n        }\n        int64_t * v13 = (int64_t *)(v1 + 48);\n        *v13 = 0;\n        *v2 = 0;\n        int64_t * v14 = (int64_t *)(v1 + 88);\n        *v14 = *(int64_t *)(v1 + 80);\n        int64_t * v15 = (int64_t *)(v1 + 56);\n        *v15 = 0;\n        int64_t * v16 = (int64_t *)(v1 + 104);\n        *v16 = *(int64_t *)(v1 + 96);\n        char * v17 = (char *)(v1 + 140);\n        *v17 = 0;\n        *(int32_t *)(v1 + 112) = 2 * a3 & 2 ^ 6;\n        v4 = a2;\n        if (*(char *)(v1 + 139) == 0) {\n            // 0x40c290\n            *(int64_t *)(v1 + 8) = v1;\n            v7 = v13;\n            v6 = v17;\n            v5 = v15;\n            v11 = a2;\n            v10 = v16;\n            v9 = v14;\n            v8 = v12;\n            if (a2 != 0) {\n                goto lab_0x40c1d3;\n            } else {\n                goto lab_0x40c2a0;\n            }\n        } else {\n            goto lab_0x40c1ca;\n        }\n    } else {\n        goto lab_0x40c1ca;\n    }\n  lab_0x40c7c8:\n    // 0x40c7c8\n    *v7 = 0;\n    int64_t v18; // 0x40c5c7\n    int64_t v19 = v18; // 0x40c7d2\n    int64_t v20; // 0x40c5ca\n    int64_t v21 = v20; // 0x40c7d2\n    int64_t v22 = 0; // 0x40c7d2\n    int64_t v23 = v1; // 0x40c7d2\n    goto lab_0x40c66f;\n  lab_0x40c3c1:;\n    // 0x40c3c1\n    int64_t v41; // 0x40c140\n    int64_t v38; // 0x40c140\n    int64_t v42 = v41 + v38; // 0x40c3c1\n    int64_t v43; // 0x40c140\n    int64_t v44; // 0x40c140\n    int64_t v39; // 0x40c140\n    int64_t v45; // 0x40c140\n    int64_t v46; // 0x40c140\n    int32_t v47; // bp-64, 0x40c140\n    if (v42 < a2) {\n        int64_t * v48 = (int64_t *)(v1 + 32); // 0x40c3f4\n        int64_t v49 = &v47;\n        int64_t v50 = *(int64_t *)(v1 + 80) - v42; // 0x40c3fd\n        int64_t v51 = function_4083e0(&v47, v42 + v39, v50); // 0x40c410\n        int64_t v52 = v51; // 0x40c426\n        int64_t v53 = v47; // 0x40c426\n        int64_t v54; // 0x40c140\n        if (v51 >= 0xfffffffffffffffe) {\n            // 0x40c855\n            v54 = 0;\n            if (v50 != 0 && v51 != 0) {\n                // 0x40c85f\n                v54 = (int64_t)*(char *)(v42 + v49);\n            }\n            // 0x40c867\n            v52 = 1;\n            v53 = v54;\n        }\n        int64_t v55 = v52 + v42; // 0x40c42c\n        int64_t v56 = v49; // 0x40c432\n        while (v55 < a2) {\n            int64_t v57 = v55;\n            v50 = *(int64_t *)(v1 + 80) - v57;\n            v51 = function_4083e0(&v47, v57 + v56, v50);\n            v52 = v51;\n            v53 = v47;\n            if (v51 >= 0xfffffffffffffffe) {\n                // 0x40c855\n                v54 = 0;\n                if (v50 != 0 && v51 != 0) {\n                    // 0x40c85f\n                    v54 = (int64_t)*(char *)(v57 + v49);\n                }\n                // 0x40c867\n                v52 = 1;\n                v53 = v54;\n            }\n            // 0x40c42c\n            v55 = v52 + v57;\n            v56 = v49;\n        }\n        int64_t v58 = v55 - a2; // 0x40c434\n        *v7 = v58;\n        v46 = v53;\n        v45 = v49;\n        v43 = v58;\n        v44 = v58;\n        if ((int32_t)v53 == -1) {\n            goto lab_0x40c7e1;\n        } else {\n            goto lab_0x40c447;\n        }\n    } else {\n        int64_t v59 = v42 - a2; // 0x40c7d7\n        *v7 = v59;\n        v44 = v59;\n        goto lab_0x40c7e1;\n    }\n  lab_0x40c1ca:\n    // 0x40c1ca\n    if (v4 == 0) {\n        // 0x40c1ca\n        v10 = (int64_t *)(v1 + 104);\n        v9 = (int64_t *)(v1 + 88);\n        v8 = (int32_t *)(v1 + 144);\n        goto lab_0x40c2a0;\n    } else {\n        // 0x40c1ca\n        v7 = (int64_t *)(v1 + 48);\n        v6 = (char *)(v1 + 140);\n        v5 = (int64_t *)(v1 + 56);\n        v11 = v4;\n        goto lab_0x40c1d3;\n    }\n  lab_0x40c1d3:;\n    int64_t v60 = v11;\n    int64_t * v24 = v5;\n    int64_t v61 = *v24; // 0x40c1d3\n    char v62 = *v6; // 0x40c1d7\n    int64_t v63 = *v7; // 0x40c1de\n    char * v64; // 0x40c140\n    int64_t v30; // 0x40c140\n    int64_t v65; // 0x40c140\n    int64_t v31; // 0x40c140\n    int64_t v66; // 0x40c140\n    int64_t v33; // 0x40c140\n    int64_t v67; // 0x40c140\n    char v68; // 0x40c140\n    int32_t v32; // 0x40c140\n    int64_t v40; // 0x40c6e9\n    int64_t * v69; // 0x40c488\n    int64_t v70; // 0x40c488\n    int64_t v71; // 0x40c4b5\n    uint64_t v72; // 0x40c4b8\n    if (v61 > v60) {\n        if (v62 != 0) {\n            // 0x40c488\n            v69 = (int64_t *)(v1 + 24);\n            v70 = *v69;\n            int64_t v73 = 0; // 0x40c491\n            uint64_t v74 = v73 + v63; // 0x40c4a7\n            v71 = (v74 / 0x8000000000000000 + v74) / 2;\n            v72 = *(int64_t *)(8 * v71 + v70);\n            int64_t v75 = v71; // 0x40c4c3\n            int64_t v76 = v73; // 0x40c4c3\n            if (v72 <= v60) {\n                if (v72 >= v60) {\n                    // 0x40c7b0\n                    goto lab_0x40c505;\n                }\n                // 0x40c49e\n                v75 = v63;\n                v76 = v71 + 1;\n            }\n            // 0x40c4a2\n            v73 = v76;\n            int64_t v77 = v75;\n            while (v73 < v77) {\n                int64_t v78 = v77;\n                v74 = v73 + v78;\n                v71 = (v74 / 0x8000000000000000 + v74) / 2;\n                v72 = *(int64_t *)(8 * v71 + v70);\n                v75 = v71;\n                v76 = v73;\n                if (v72 <= v60) {\n                    if (v72 >= v60) {\n                        // 0x40c7b0\n                        goto lab_0x40c505;\n                    }\n                    // 0x40c49e\n                    v75 = v78;\n                    v76 = v71 + 1;\n                }\n                // 0x40c4a2\n                v73 = v76;\n                v77 = v75;\n            }\n            // 0x40c4f8\n            goto lab_0x40c505;\n        } else {\n            // 0x40c1f3\n            *(int32_t *)(v1 + 112) = (int32_t)function_40be50(v1, v60 - 1, a3);\n            if (*(int32_t *)(v1 + 144) > 1) {\n                int64_t v79 = *(int64_t *)(v1 + 16); // 0x40c2b0\n                int64_t v80; // 0x40c1fd\n                memmove((int64_t *)v79, (int64_t *)(v79 + 4 * v60), 4 * (int32_t)v80);\n            }\n            int64_t v81 = v63 - v60;\n            char * v82 = (char *)(v1 + 139); // 0x40c215\n            char v83 = *v82; // 0x40c215\n            char v84 = v83; // 0x40c21e\n            int64_t v85 = v1; // 0x40c21e\n            int64_t v86 = v81; // 0x40c21e\n            if (v83 != 0) {\n                // 0x40c4d0\n                v85 = *(int64_t *)(v1 + 8);\n                memmove((int64_t *)v85, (int64_t *)(v85 + v60), (int32_t)v81);\n                v84 = *v82;\n                v86 = *v7 - v60;\n            }\n            // 0x40c224\n            *v24 = *v24 - v60;\n            *v7 = v86;\n            v68 = v84;\n            v66 = v85;\n            goto lab_0x40c22c;\n        }\n    } else {\n        if (v62 != 0) {\n            // 0x40c82d\n            *v6 = 0;\n            int64_t v87 = v60 - a2;\n            *(int64_t *)(v1 + 88) = *(int64_t *)(v1 + 80) + v87;\n            *(int64_t *)(v1 + 104) = *(int64_t *)(v1 + 96) + v87;\n        }\n        int32_t v88 = *(int32_t *)(v1 + 144); // 0x40c398\n        int64_t v89 = *v2; // 0x40c39f\n        *v7 = 0;\n        if (v88 < 2) {\n            int64_t v90 = (int64_t)*(char *)(v60 - 1 + v1 + v89); // 0x40c2ee\n            int64_t v91 = *(int64_t *)(v1 + 120); // 0x40c2f4\n            *v24 = 0;\n            int64_t v92 = v90; // 0x40c303\n            if (v91 != 0) {\n                // 0x40c305\n                v92 = (int64_t)*(char *)(v91 + v90);\n            }\n            int64_t v93 = *(int64_t *)((v92 / 8 & 24) + *(int64_t *)(v1 + 128)); // 0x40c317\n            int32_t v94 = 1; // 0x40c325\n            if ((v93 & 1 << v92 % 64) == 0) {\n                // 0x40c327\n                v94 = 0;\n                if (v92 == 10) {\n                    // 0x40c32e\n                    v94 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n                }\n            }\n            int64_t * v95 = (int64_t *)(v1 + 88); // 0x40c340\n            int64_t * v96 = (int64_t *)(v1 + 104); // 0x40c344\n            *(int32_t *)(v1 + 112) = v94;\n            int64_t v97 = *v95 - v60; // 0x40c34b\n            int64_t v98 = *v96 - v60; // 0x40c34e\n            char * v99 = (char *)(v1 + 139);\n            v30 = v97;\n            v31 = v98;\n            v32 = v88;\n            v33 = v1;\n            if (*v99 == 0) {\n                goto lab_0x40c244;\n            } else {\n                // 0x40c35e\n                *v2 = a2;\n                *v95 = v97;\n                *v96 = v98;\n                v64 = v99;\n                v65 = v97;\n                v67 = v1;\n                goto lab_0x40c370;\n            }\n        } else {\n            // 0x40c3b4\n            v38 = v61;\n            v39 = v1;\n            v41 = v89;\n            if (*(char *)(v1 + 137) != 0) {\n                int64_t v100 = v89 + v1; // 0x40c691\n                uint64_t v101 = v60 - (int64_t)v88 + v100; // 0x40c695\n                int64_t v102 = v60 - 1 + v100; // 0x40c698\n                uint64_t v103 = v101 > v1 ? v101 : v1; // 0x40c6a0\n                v38 = v61;\n                v39 = v1;\n                v41 = v89;\n                if (v103 > v102) {\n                    goto lab_0x40c3c1;\n                } else {\n                    int64_t v104 = v102;\n                    while ((*(char *)v104 & -64) == -128) {\n                        int64_t v105 = v104 - 1; // 0x40c6b0\n                        v38 = v61;\n                        v39 = v1;\n                        v41 = v89;\n                        if (v103 > v105) {\n                            goto lab_0x40c3c1;\n                        }\n                        v104 = v105;\n                    }\n                    int64_t v106 = *(int64_t *)(v1 + 120); // 0x40c6ce\n                    int64_t v107 = *(int64_t *)(v1 + 88) + v100 - v104; // 0x40c6d8\n                    int64_t v108 = v104; // 0x40c6de\n                    if (v106 != 0) {\n                        int64_t v109 = v107 - 6; // 0x40c8f2\n                        int32_t v110 = v109 == 0 | v109 < 0 != (5 - v107 & v107) < 0 ? (int32_t)v107 - 1 : 5; // 0x40c8ff\n                        if (v110 >= 0) {\n                            int64_t v111 = v110; // 0x40c915\n                            char v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104)); // 0x40c90c\n                            int64_t v113; // bp-120, 0x40c140\n                            *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                            v111--;\n                            while ((int32_t)v111 >= 0) {\n                                // 0x40c907\n                                v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104));\n                                *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                                v111--;\n                            }\n                        }\n                        // 0x40c91d\n                        int64_t v114; // bp-70, 0x40c140\n                        v108 = &v114;\n                    }\n                    // 0x40c6e4\n                    int32_t v115; // bp-76, 0x40c140\n                    v40 = &v115;\n                    v47 = 0;\n                    uint64_t v116 = function_4083e0(&v115, v108, v107); // 0x40c6ff\n                    uint64_t v117 = v100 + v60 - v104; // 0x40c70e\n                    if (v116 >= v117 == v116 < 0xfffffffffffffffe) {\n                        int64_t v118 = v116 - v117; // 0x40c7f8\n                        *(int64_t *)(v1 + 32) = 0;\n                        *v7 = v118;\n                        v46 = v115;\n                        v45 = v40;\n                        v43 = v118;\n                        if (v115 != -1) {\n                            goto lab_0x40c447;\n                        } else {\n                            goto lab_0x40c720;\n                        }\n                    } else {\n                        goto lab_0x40c720;\n                    }\n                }\n            } else {\n                goto lab_0x40c3c1;\n            }\n        }\n    }\n  lab_0x40c2a0:;\n    int64_t v34 = *v9; // 0x40c2ae\n    int64_t v35 = *v10; // 0x40c2ae\n    int32_t v36 = *v8; // 0x40c2ae\n    int64_t v37 = v1; // 0x40c2ae\n    goto lab_0x40c248;\n  lab_0x40c248:\n    // 0x40c248\n    *v2 = a2;\n    *(int64_t *)(v1 + 88) = v34;\n    *(int64_t *)(v1 + 104) = v35;\n    if (v36 >= 2) {\n        // 0x40c25d\n        if (*(char *)(v1 + 136) != 0) {\n            int64_t result = function_408fa0(v1); // 0x40c2d8\n            if ((int32_t)result != 0) {\n                // 0x40c278\n                return result;\n            }\n        } else {\n            // 0x40c269\n            function_408df0(v1);\n        }\n        // 0x40c26e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40c278\n        return 0;\n    }\n    // 0x40c248\n    v64 = (char *)(v1 + 139);\n    v65 = v34;\n    v67 = v37;\n    goto lab_0x40c370;\n  lab_0x40c370:;\n    int64_t v119 = v65;\n    if (*v64 == 0) {\n        // 0x40c37d\n        *(int64_t *)(v1 + 48) = v119;\n        // 0x40c26e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40c278\n        return 0;\n    }\n    // 0x40c740\n    if (*(char *)(v1 + 136) != 0) {\n        // 0x40c820\n        function_408d70(v1);\n        // 0x40c26e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40c278\n        return 0;\n    }\n    int64_t * v120 = (int64_t *)(v1 + 120); // 0x40c74d\n    int64_t v121 = *v120; // 0x40c74d\n    if (v121 == 0) {\n        // 0x40c26e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40c278\n        return 0;\n    }\n    int64_t v122 = *(int64_t *)(v1 + 64); // 0x40c75a\n    int64_t v123 = v122 - v119; // 0x40c75a\n    int64_t * v124 = (int64_t *)(v1 + 48); // 0x40c75e\n    int64_t v125 = *v124; // 0x40c75e\n    int64_t v126 = v123 == 0 | v123 < 0 != ((v123 ^ v122) & (v122 ^ v119)) < 0 ? v122 : v119; // 0x40c762\n    int64_t v127 = v125; // 0x40c76a\n    if (v126 > v125) {\n        unsigned char v128 = *(char *)(v67 + a2 + v125); // 0x40c786\n        int64_t * v129 = (int64_t *)(v1 + 8); // 0x40c78f\n        *(char *)(*v129 + v125) = *(char *)(v121 + (int64_t)v128);\n        int64_t v130 = v125 + 1; // 0x40c797\n        v127 = v126;\n        if (v126 != v130) {\n            unsigned char v131 = *(char *)(v130 + v67 + *v2); // 0x40c786\n            *(char *)(*v129 + v130) = *(char *)(*v120 + (int64_t)v131);\n            int64_t v132 = v130 + 1; // 0x40c797\n            int64_t v133 = v132; // 0x40c79e\n            v127 = v126;\n            while (v126 != v132) {\n                // 0x40c778\n                v131 = *(char *)(v133 + v67 + *v2);\n                *(char *)(*v129 + v133) = *(char *)(*v120 + (int64_t)v131);\n                v132 = v133 + 1;\n                v133 = v132;\n                v127 = v126;\n            }\n        }\n    }\n    // 0x40c7a0\n    *v124 = v127;\n    *(int64_t *)(v1 + 56) = v127;\n    // 0x40c26e\n    *(int64_t *)(v1 + 72) = 0;\n    // 0x40c278\n    return 0;\n  lab_0x40c505:;\n    int64_t v134 = v71 + (int64_t)(v72 < v60);\n    int64_t v135 = v71 + (int64_t)(v72 >= v60);\n    *(int32_t *)(v1 + 112) = (int32_t)function_40be50(v1, v135, a3);\n    int64_t v25; // 0x40c140\n    int64_t v26; // 0x40c140\n    int64_t v28; // 0x40c140\n    char v27; // 0x40c140\n    if (v63 > v60 == v60 == v134) {\n        int64_t v136 = 8 * v60;\n        if (*(int64_t *)(v70 + v136) != v60) {\n            goto lab_0x40c5b8;\n        } else {\n            int64_t v137 = *(int64_t *)(v1 + 16); // 0x40c530\n            memmove((int64_t *)v137, (int64_t *)(v137 + 4 * v60), 4 * (int32_t)(v63 - v60));\n            int64_t v138 = *(int64_t *)(v1 + 8); // 0x40c54b\n            int64_t v139 = *v7; // 0x40c54f\n            memmove((int64_t *)v138, (int64_t *)(v138 + v60), (int32_t)(v139 - v60));\n            *v24 = *v24 - v60;\n            uint64_t v140 = *v7 - v60; // 0x40c567\n            *v7 = v140;\n            if (v140 >= 1) {\n                for (int64_t i = 0; i < *v7; i++) {\n                    int64_t v141 = 8 * i + *v69;\n                    *(int64_t *)v141 = *(int64_t *)(v141 + v136) - v60;\n                }\n            }\n            // 0x40c595\n            v25 = *(int64_t *)(v1 + 88) - v60;\n            v26 = *(int64_t *)(v1 + 104) - v60;\n            v27 = *(char *)(v1 + 139);\n            v28 = v138;\n            goto lab_0x40c240;\n        }\n    } else {\n        goto lab_0x40c5b8;\n    }\n  lab_0x40c22c:\n    // 0x40c22c\n    v25 = *(int64_t *)(v1 + 88) - v60;\n    v26 = *(int64_t *)(v1 + 104) - v60;\n    v27 = v68;\n    v28 = v66;\n    goto lab_0x40c240;\n  lab_0x40c244:;\n    int64_t * v142 = (int64_t *)(v1 + 8); // 0x40c244\n    *v142 = *v142 + v60;\n    v34 = v30;\n    v35 = v31;\n    v36 = v32;\n    v37 = v33;\n    goto lab_0x40c248;\n  lab_0x40c5b8:\n    // 0x40c5b8\n    *v6 = 0;\n    v18 = *(int64_t *)(v1 + 80) - a2;\n    v20 = *(int64_t *)(v1 + 96) - a2;\n    int64_t * v143 = (int64_t *)(v1 + 88); // 0x40c5d1\n    *v143 = v18 + v60;\n    int64_t * v144 = (int64_t *)(v1 + 104); // 0x40c5d9\n    *v144 = v20 + v60;\n    int64_t v145 = v134; // 0x40c5e0\n    if (v134 >= 0 == (v134 != 0)) {\n        int64_t v146 = v134; // 0x40c5e8\n        v145 = v146;\n        while (*(int64_t *)(v70 - 8 + 8 * v146) == v60) {\n            // 0x40c5e8\n            v146--;\n            if (v146 == 0) {\n                // break -> 0x40c5f5\n                break;\n            }\n            v145 = v146;\n        }\n    }\n    // 0x40c5f5\n    int64_t v147; // 0x40c140\n    if (v145 < v63) {\n        int64_t v148 = v145; // 0x40c602\n        v147 = v148;\n        while (*(int32_t *)(4 * v148 + *(int64_t *)(v1 + 16)) == -1) {\n            // 0x40c608\n            v148++;\n            if (v148 == v63) {\n                goto lab_0x40c7c8;\n            }\n            v147 = v148;\n        }\n        goto lab_0x40c61c;\n    } else {\n        // 0x40c7bc\n        v147 = v145;\n        if (v145 != v63) {\n            goto lab_0x40c61c;\n        } else {\n            goto lab_0x40c7c8;\n        }\n    }\n  lab_0x40c240:;\n    int32_t v29 = *(int32_t *)(v1 + 144);\n    v30 = v25;\n    v31 = v26;\n    v32 = v29;\n    v33 = v28;\n    v34 = v25;\n    v35 = v26;\n    v36 = v29;\n    v37 = v28;\n    if (v27 != 0) {\n        goto lab_0x40c248;\n    } else {\n        goto lab_0x40c244;\n    }\n  lab_0x40c720:\n    // 0x40c720\n    v38 = *v24;\n    v39 = v40;\n    v41 = *v2;\n    goto lab_0x40c3c1;\n  lab_0x40c7e1:\n    // 0x40c7e1\n    *(int32_t *)(v1 + 112) = (int32_t)function_40be50(v1, v63 - 1, a3);\n    int64_t v149 = v1; // 0x40c7f3\n    int64_t v150 = v44; // 0x40c7f3\n    goto lab_0x40c46c;\n  lab_0x40c447:;\n    int64_t v164 = v46; // 0x40c44e\n    int64_t v163 = v45; // 0x40c44e\n    int32_t v161; // 0x40c140\n    int64_t v162; // 0x40c140\n    if (*(char *)(v1 + 142) != 0) {\n        int64_t v165 = v46 & 0xffffffff; // 0x40c8c4\n        int32_t wc = v46; // 0x40c8c6\n        v164 = v165;\n        v163 = v165;\n        v161 = 1;\n        v162 = v165;\n        if (wc != 95 == iswalnum(wc) == 0) {\n            goto lab_0x40c454;\n        } else {\n            goto lab_0x40c469;\n        }\n    } else {\n        goto lab_0x40c454;\n    }\n  lab_0x40c61c:;\n    uint64_t v166 = *(int64_t *)(8 * v147 + v70) - v60; // 0x40c621\n    *v7 = v166;\n    v19 = v18;\n    v21 = v20;\n    v22 = 0;\n    v23 = v1;\n    if (v166 != 0) {\n        if (v166 >= 1) {\n            int64_t v167 = *(int64_t *)(v1 + 16); // 0x40c62f\n            int64_t v168 = v167; // 0x40c637\n            *(int32_t *)v168 = -1;\n            v168 += 4;\n            while (v167 + 4 * v166 != v168) {\n                // 0x40c640\n                *(int32_t *)v168 = -1;\n                v168 += 4;\n            }\n        }\n        int64_t v169 = *(int64_t *)(v1 + 8); // 0x40c64f\n        memset((int64_t *)v169, 255, (int32_t)v166);\n        v19 = *v143 - v60;\n        v21 = *v144 - v60;\n        v22 = *v7;\n        v23 = v169;\n    }\n    goto lab_0x40c66f;\n  lab_0x40c46c:;\n    // 0x40c46c\n    char * v151; // 0x40c140\n    int64_t v152; // 0x40c140\n    int64_t v153; // 0x40c140\n    int64_t v154; // 0x40c140\n    int64_t v155; // 0x40c140\n    char v156; // 0x40c140\n    if (v150 != 0) {\n        if (v150 >= 1) {\n            int64_t v157 = *(int64_t *)(v1 + 16); // 0x40c87c\n            int64_t v158 = v157; // 0x40c884\n            *(int32_t *)v158 = -1;\n            v158 += 4;\n            while (v157 + 4 * v150 != v158) {\n                // 0x40c888\n                *(int32_t *)v158 = -1;\n                v158 += 4;\n            }\n        }\n        char * v159 = (char *)(v1 + 139);\n        v156 = 0;\n        v155 = v149;\n        v153 = v150;\n        if (*v159 == 0) {\n            goto lab_0x40c47c;\n        } else {\n            int64_t v160 = *(int64_t *)(v1 + 8); // 0x40c8a6\n            memset((int64_t *)v160, 255, (int32_t)v150);\n            v151 = v159;\n            v154 = v160;\n            v152 = *v7;\n            goto lab_0x40c475;\n        }\n    } else {\n        // 0x40c46c\n        v151 = (char *)(v1 + 139);\n        v154 = v149;\n        v152 = v150;\n        goto lab_0x40c475;\n    }\n  lab_0x40c454:\n    // 0x40c454\n    v161 = 0;\n    v162 = v163;\n    if ((int32_t)v164 == 10) {\n        // 0x40c45b\n        v161 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n        v162 = v163;\n    }\n    goto lab_0x40c469;\n  lab_0x40c66f:\n    // 0x40c66f\n    *v24 = v22;\n    v25 = v19;\n    v26 = v21;\n    v27 = *(char *)(v1 + 139);\n    v28 = v23;\n    goto lab_0x40c240;\n  lab_0x40c469:\n    // 0x40c469\n    *(int32_t *)(v1 + 112) = v161;\n    v149 = v162;\n    v150 = v43;\n    goto lab_0x40c46c;\n  lab_0x40c47c:\n    // 0x40c47c\n    *v24 = v153;\n    v68 = v156;\n    v66 = v155;\n    goto lab_0x40c22c;\n  lab_0x40c475:\n    // 0x40c475\n    v156 = *v151;\n    v155 = v154;\n    v153 = v152;\n    goto lab_0x40c47c;\n}\n"
        },
        {
            "funcName": "function_40c930",
            "funcStartAddr": "40c930",
            "funcEndAddr": "40cb55",
            "decompiledFuncCode": "int64_t function_40c930(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40c930\n    int128_t v1; // 0x40c930\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40c932\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40c949\n    int128_t v5 = __asm_movaps(v3); // bp-88, 0x40c94d\n    int64_t v6 = *v4 + 24 * a2; // 0x40c952\n    int64_t v7 = 0; // bp-72, 0x40c95b\n    int64_t * v8 = (int64_t *)(v6 + 8); // 0x40c964\n    int64_t v9 = *v8; // 0x40c964\n    if (v9 < 1) {\n        // 0x40cb11\n        free(NULL);\n        return (int32_t)&g84 ^ (int32_t)&g84;\n    }\n    int64_t v10 = v6 + 16; // 0x40c9d5\n    int64_t * v11 = (int64_t *)v10;\n    int64_t v12 = a3 + 8;\n    int64_t * v13 = (int64_t *)v12;\n    int64_t v14 = a3 + 16;\n    int64_t v15 = 0; // 0x40c9c8\n    int64_t v16 = a1; // 0x40c930\n    int64_t v17 = v9;\n    int64_t v18; // 0x40c930\n    int64_t v19; // 0x40c930\n    int64_t v20; // 0x40c930\n    int64_t v21; // 0x40ca03\n    int64_t v22; // 0x40ca0d\n    while (true) {\n      lab_0x40c9d5:\n        // 0x40c9d5\n        v19 = v17;\n        int64_t v23 = v16;\n        int64_t v24 = *(int64_t *)(*v11 + 8 * v15); // 0x40c9d9\n        v16 = v23;\n        v18 = v19;\n        if (v24 == a2) {\n            goto lab_0x40c9c8;\n        } else {\n            // 0x40c9e2\n            v16 = v23;\n            v18 = v19;\n            if ((*(char *)(v23 + 8 + 16 * v24) & 8) == 0) {\n                goto lab_0x40c9c8;\n            } else {\n                // 0x40c9f3\n                v21 = 24 * v24;\n                int64_t v25 = *(int64_t *)(a1 + 40) + v21; // 0x40ca0a\n                v22 = *(int64_t *)(v25 + 16);\n                int64_t v26 = *(int64_t *)v22; // 0x40ca16\n                int64_t v27 = function_40a120(v19, v10, v26); // 0x40ca21\n                if (*(int64_t *)(v25 + 8) > 1) {\n                    // 0x40c980\n                    v20 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40ca60;\n                    } else {\n                        int64_t v28 = *v13; // 0x40c989\n                        int64_t v29 = function_40a120(v28, v14, v26); // 0x40c994\n                        v20 = v28;\n                        if (v29 == 0) {\n                            goto lab_0x40ca60;\n                        } else {\n                            goto lab_0x40c9a2;\n                        }\n                    }\n                } else {\n                    // 0x40ca3b\n                    v16 = v19;\n                    v18 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40c9c8;\n                    } else {\n                        int64_t v30 = *v13; // 0x40ca40\n                        int64_t v31 = function_40a120(v30, v14, v26); // 0x40ca4b\n                        v16 = v30;\n                        v18 = v19;\n                        if (v31 != 0) {\n                            goto lab_0x40c9a2;\n                        } else {\n                            goto lab_0x40c9c8;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40caa0:\n    if (v17 < 1) {\n        // 0x40cb11\n        free((int64_t *)v7);\n        return (int32_t)&g84 ^ (int32_t)&g84;\n    }\n    int64_t v32 = 0; // 0x40c930\n    int64_t v33 = *(int64_t *)(*v11 + 8 * v32); // 0x40cabc\n    int64_t v34; // 0x40c930\n    int64_t v35; // 0x40cacd\n    int64_t v36; // 0x40cae0\n    if (function_40a120(v34, (int64_t)&v7, v33) == 0) {\n        // 0x40cacd\n        v35 = *v13;\n        v36 = function_40a120(v35, v14, v33) - 1;\n        if (v36 > -1 == v36 < v35) {\n            // 0x40caee\n            *v13 = v35 - 1;\n            function_40a290(v12, v14, v36);\n        }\n    }\n    int64_t v37 = v32 + 1; // 0x40cb02\n    v32 = v37;\n    while (*v8 > v37) {\n        // 0x40cab0\n        v33 = *(int64_t *)(*v11 + 8 * v32);\n        if (function_40a120(v34, (int64_t)&v7, v33) == 0) {\n            // 0x40cacd\n            v35 = *v13;\n            v36 = function_40a120(v35, v14, v33) - 1;\n            if (v36 > -1 == v36 < v35) {\n                // 0x40caee\n                *v13 = v35 - 1;\n                function_40a290(v12, v14, v36);\n            }\n        }\n        // 0x40cb02\n        v37 = v32 + 1;\n        v32 = v37;\n    }\n    // 0x40cb11\n    free((int64_t *)v7);\n    return (int32_t)&g84 ^ (int32_t)&g84;\n  lab_0x40c9c8:\n    // 0x40c9c8\n    v17 = v18;\n    v15++;\n    if (v17 <= v15) {\n        // break -> 0x40caa0\n        goto lab_0x40caa0;\n    }\n    goto lab_0x40c9d5;\n  lab_0x40ca60:;\n    int64_t v38 = *(int64_t *)(v22 + 8); // 0x40ca60\n    v16 = v20;\n    v18 = v19;\n    if (v38 < 1) {\n        goto lab_0x40c9c8;\n    } else {\n        int64_t v39 = function_40a120(v19, v10, v38); // 0x40ca76\n        v16 = v19;\n        v18 = v19;\n        if (v39 != 0) {\n            goto lab_0x40c9c8;\n        } else {\n            int64_t v40 = *v13; // 0x40ca84\n            int64_t v41 = function_40a120(v40, v14, v38); // 0x40ca8c\n            v16 = v40;\n            v18 = v19;\n            if (v41 == 0) {\n                goto lab_0x40c9c8;\n            } else {\n                goto lab_0x40c9a2;\n            }\n        }\n    }\n  lab_0x40c9a2:;\n    int64_t v42 = function_40abd0(&v5, a4, *v4 + v21); // 0x40c9b4\n    if ((int32_t)v42 != 0) {\n        // 0x40cb30\n        free((int64_t *)v7);\n        return v42 & 0xffffffff;\n    }\n    // 0x40c9c1\n    v16 = &v5;\n    v18 = *v8;\n    goto lab_0x40c9c8;\n}\n"
        },
        {
            "funcName": "function_40cb60",
            "funcStartAddr": "40cb60",
            "funcEndAddr": "40d66d",
            "decompiledFuncCode": "int64_t function_40cb60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40cb60\n    int128_t v1; // 0x40cb60\n    int128_t v2 = v1;\n    int64_t * mem = malloc(0x3800); // 0x40cb7e\n    if (mem == NULL) {\n        // 0x40cf22\n        return 0;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40cb9b\n    int128_t v4 = __asm_movaps(v3); // bp-152, 0x40cb9f\n    int64_t v5 = __asm_movaps(v3); // 0x40cbaf\n    int64_t * v6 = (int64_t *)(a2 + 88); // 0x40cbb9\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(a2 + 96); // 0x40cbc1\n    *v7 = 0;\n    int64_t v8; // 0x40cb60\n    int64_t v9; // 0x40cb60\n    int64_t v10; // 0x40cb60\n    int64_t v11; // 0x40cb60\n    int64_t v12; // 0x40cb60\n    int64_t v13; // 0x40cb60\n    int64_t v14; // 0x40cb60\n    int64_t v15; // 0x40cb60\n    int64_t v16; // 0x40cb60\n    int64_t v17; // 0x40cb60\n    int64_t v18; // 0x40cb60\n    int64_t v19; // 0x40cb60\n    int64_t v20; // 0x40cb60\n    int64_t v21; // 0x40cb60\n    int64_t v22; // 0x40cb60\n    int128_t v23; // 0x40cb60\n    int128_t v24; // 0x40cb60\n    int128_t v25; // 0x40cb60\n    int128_t v26; // 0x40cb60\n    int64_t v27; // 0x40cb60\n    int64_t v28; // 0x40cb60\n    int128_t v29; // bp-88, 0x40cb60\n    int64_t v30; // 0x40cb7e\n    int64_t v31; // 0x40cba4\n    int64_t v32; // 0x40cb60\n    int64_t v33; // 0x40cb60\n    int64_t v34; // 0x40d5a2\n    int64_t v35; // 0x40ce07\n    int128_t * v36; // 0x40cb60\n    int64_t v37; // 0x40cbe2\n    int64_t v38; // 0x40cbfb\n    uint32_t v39; // 0x40cbfe\n    char v40; // 0x40cc02\n    int64_t * mem2; // 0x40cc69\n    int32_t size2; // 0x40cca8\n    int64_t * mem3; // 0x40ccad\n    int64_t v41; // 0x40ccad\n    int64_t v42; // 0x40ccda\n    int64_t v43; // 0x40ccea\n    int128_t v44; // 0x40cb60\n    int128_t v45; // 0x40cb60\n    int128_t v46; // 0x40cb60\n    int128_t v47; // 0x40cb60\n    int128_t v48; // 0x40cb60\n    if (*(int64_t *)(a2 + 16) < 1) {\n        // 0x40d542\n        free(mem);\n        goto lab_0x40d54c;\n    } else {\n        // 0x40cbcf\n        v30 = (int64_t)mem;\n        v31 = v30 + 0x1800;\n        v32 = &v4;\n        v33 = &v29;\n        v36 = (int128_t *)(v32 + 16);\n        v23 = v5;\n        v28 = 0;\n        v44 = v3;\n        v14 = a1;\n        v18 = a2;\n        v10 = 0;\n        while (true) {\n          lab_0x40cbdd:\n            // 0x40cbdd\n            v11 = v10;\n            v19 = v18;\n            v15 = v14;\n            int128_t v49 = v44;\n            int128_t v50 = v23;\n            v37 = 8 * v28;\n            int64_t v51 = *(int64_t *)(*(int64_t *)(v19 + 24) + v37); // 0x40cbf3\n            v38 = 16 * v51 + *(int64_t *)v15;\n            int64_t v52 = v38 + 8; // 0x40cbfe\n            v39 = *(int32_t *)v52;\n            v40 = *(char *)v52;\n            v24 = v50;\n            v45 = v49;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            switch (v40) {\n                case 1: {\n                    unsigned char v53 = *(char *)v38; // 0x40cf38\n                    unsigned char v54 = v53 % 64;\n                    int64_t * v55 = (int64_t *)((int64_t)(v53 / 8 & 24) + v32); // 0x40cf53\n                    *v55 = (v54 == 0 ? 1 : 1 << (int64_t)v54) | *v55;\n                    v25 = v50;\n                    v47 = v49;\n                    goto lab_0x40cf57;\n                }\n                case 3: {\n                    int64_t v56 = 0;\n                    int64_t * v57 = (int64_t *)(v56 + v32); // 0x40d3c2\n                    *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                    v25 = v50;\n                    v47 = v49;\n                    int64_t v58 = v56 + 8; // 0x40d3d6\n                    while (v56 != 24) {\n                        // 0x40d3c2\n                        v56 = v58;\n                        v57 = (int64_t *)(v56 + v32);\n                        *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                        v25 = v50;\n                        v47 = v49;\n                        v58 = v56 + 8;\n                    }\n                    goto lab_0x40cf57;\n                }\n                case 5: {\n                    // 0x40d270\n                    if (*(int32_t *)(v15 + 180) < 2) {\n                        int128_t v59 = __asm_pcmpeqd(v49, v49); // 0x40d300\n                        v4 = __asm_movaps(v59);\n                        v26 = __asm_movaps(v59);\n                        v48 = v59;\n                    } else {\n                        int64_t v60 = 0;\n                        int64_t * v61 = (int64_t *)(v60 + v32); // 0x40d289\n                        *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                        int64_t v62 = v60 + 8; // 0x40d29d\n                        v26 = v50;\n                        v48 = v49;\n                        while (v60 != 24) {\n                            // 0x40d289\n                            v60 = v62;\n                            v61 = (int64_t *)(v60 + v32);\n                            *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                            v62 = v60 + 8;\n                            v26 = v50;\n                            v48 = v49;\n                        }\n                    }\n                    goto lab_0x40d29f;\n                }\n                case 7: {\n                    int128_t v63 = __asm_pcmpeqd(v49, v49); // 0x40d3a0\n                    v4 = __asm_movaps(v63);\n                    v26 = v50;\n                    v48 = v63;\n                    goto lab_0x40d29f;\n                }\n                default: {\n                    goto lab_0x40cc32;\n                }\n            }\n        }\n      lab_0x40cc43:\n        if (v13 < 1) {\n            // 0x40d655\n            free(mem);\n            if (v13 != 0) {\n                // 0x40cf22\n                return 0;\n            }\n            goto lab_0x40d54c;\n        } else {\n            int64_t v64 = v13 + 1; // 0x40cc58\n            int128_t v65 = v64; // bp-120, 0x40cc5d\n            int64_t size = 8 * v64; // 0x40cc62\n            mem2 = malloc((int32_t)size);\n            if (mem2 == NULL) {\n                goto lab_0x40d417;\n            } else {\n                // 0x40cc82\n                v4 = 0;\n                if (v13 > 0xaaaaaaaaaaaa855) {\n                    goto lab_0x40d417;\n                } else {\n                    // 0x40cc9d\n                    size2 = 24 * (int32_t)v13;\n                    mem3 = malloc(size2);\n                    if (mem3 == NULL) {\n                        goto lab_0x40d417;\n                    } else {\n                        // 0x40ccc0\n                        v41 = (int64_t)mem3;\n                        int64_t v66 = size - 8; // 0x40ccc5\n                        int128_t v67 = __asm_pxor(v46, v46); // 0x40ccc9\n                        v42 = v66 + v41;\n                        v43 = v42 + v66;\n                        v29 = __asm_movaps(v67);\n                        __asm_movaps(v67);\n                        int64_t * v68 = (int64_t *)(v17 + 48);\n                        int64_t v69 = 0; // 0x40cd06\n                        int64_t v70 = v30 + 8; // 0x40cd06\n                        int64_t v71 = v30; // 0x40cd06\n                        int64_t v72 = 0; // 0x40cd06\n                        while (true) {\n                            int64_t v73 = v70;\n                            int64_t v74 = v69;\n                            int64_t * v75 = (int64_t *)v73; // 0x40cd1a\n                            uint64_t v76 = *v75; // 0x40cd1a\n                            if (v76 >= 1) {\n                                int64_t v77 = v76; // 0x40cd64\n                                for (int64_t i = 0; i < v77; i++) {\n                                    int64_t v78 = *(int64_t *)(v73 + 8); // 0x40cd28\n                                    int64_t v79 = *(int64_t *)(v17 + 24); // 0x40cd30\n                                    int64_t v80 = *(int64_t *)(v79 + 8 * *(int64_t *)(v78 + 8 * i)); // 0x40cd35\n                                    int64_t v81 = v77; // 0x40cd3d\n                                    if (v80 != -1) {\n                                        int64_t v82 = function_40a660((int64_t *)&v65, (int128_t *)(*v68 + 24 * v80)); // 0x40cd4f\n                                        int32_t v83 = v82; // 0x40cd54\n                                        v4 = v83;\n                                        if (v83 != 0) {\n                                            // 0x40d405\n                                            free(mem3);\n                                            goto lab_0x40d417;\n                                        }\n                                        // 0x40cd3f\n                                        v81 = *v75;\n                                    }\n                                    // 0x40cd60\n                                    v77 = v81;\n                                }\n                            }\n                            int64_t v84 = function_40b3d0(&v4, v17, (int64_t *)&v65, 0); // 0x40cd77\n                            int64_t v85 = 8 * v72; // 0x40cd81\n                            int64_t * v86 = (int64_t *)(v85 + v41); // 0x40cd81\n                            *v86 = v84;\n                            if (v84 == 0) {\n                                // 0x40d4d8\n                                if ((int32_t)v4 != 0) {\n                                    // break -> 0x40d405\n                                    break;\n                                }\n                            }\n                            // 0x40cd8e\n                            int64_t v87; // 0x40cb60\n                            if (*(char *)(v84 + 104) < 0) {\n                                int64_t v88 = function_40b3d0(&v4, v17, (int64_t *)&v65, 1); // 0x40d460\n                                *(int64_t *)(v85 + v42) = v88;\n                                if (v88 == 0) {\n                                    // 0x40d3f0\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40d405\n                                        break;\n                                    }\n                                }\n                                int64_t v89 = v74; // 0x40d480\n                                if (v88 != *v86) {\n                                    int32_t v90 = *(int32_t *)(v17 + 180); // 0x40d48c\n                                    v89 = v90 < 2 == (1 - v90 & v90) < 0 ? 1 : 0x100000000000000 * v74 >> 56;\n                                }\n                                int64_t v91 = v89;\n                                int64_t v92 = function_40b3d0(&v4, v17, (int64_t *)&v65, 2); // 0x40d4ad\n                                *(int64_t *)(v85 + v43) = v92;\n                                v87 = v91;\n                                if (v92 == 0) {\n                                    // 0x40d4c4\n                                    v87 = v91;\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40d405\n                                        break;\n                                    }\n                                }\n                            } else {\n                                // 0x40cd98\n                                *(int64_t *)(v85 + v42) = v84;\n                                *(int64_t *)(v85 + v43) = v84;\n                                v87 = v74;\n                            }\n                            // 0x40cdaa\n                            v27 = v87;\n                            int64_t v93 = 0;\n                            int64_t * v94 = (int64_t *)(v93 + v33); // 0x40cdb4\n                            *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                            int64_t v95 = v93 + 8; // 0x40cdcc\n                            while (v93 != 24) {\n                                // 0x40cdb4\n                                v93 = v95;\n                                v94 = (int64_t *)(v93 + v33);\n                                *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                                v95 = v93 + 8;\n                            }\n                            // 0x40cdce\n                            v72++;\n                            v69 = v27;\n                            v70 = v73 + 24;\n                            v71 += 32;\n                            if (v72 == v13) {\n                                if ((char)v27 != 0) {\n                                    int64_t * mem4 = calloc(8, 512); // 0x40d5a2\n                                    v34 = (int64_t)mem4;\n                                    *v7 = v34;\n                                    if (mem4 == NULL) {\n                                        // 0x40d405\n                                        free(mem3);\n                                        goto lab_0x40d417;\n                                    } else {\n                                        // 0x40d5bc\n                                        v22 = v33;\n                                        v21 = v34;\n                                        v9 = v30 + 0x1820;\n                                        goto lab_0x40d5e2;\n                                    }\n                                } else {\n                                    int64_t * mem5 = calloc(8, 256); // 0x40ce07\n                                    v35 = (int64_t)mem5;\n                                    *v6 = v35;\n                                    if (mem5 == NULL) {\n                                        // 0x40d405\n                                        free(mem3);\n                                        goto lab_0x40d417;\n                                    } else {\n                                        // 0x40ce21\n                                        v8 = 0;\n                                        goto lab_0x40ce3f;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40d405\n                        free(mem3);\n                        goto lab_0x40d417;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40d233:;\n    int64_t v96 = v30 + 16; // 0x40d238\n    int64_t v97; // 0x40cb60\n    int64_t v98 = v97 + v96; // 0x40d240\n    int64_t v99 = v96; // 0x40d244\n    goto lab_0x40d248;\n  lab_0x40d07d:;\n    // 0x40d07d\n    int64_t v145; // 0x40cb60\n    int64_t v146; // 0x40d096\n    while (true) {\n        // 0x40d086\n        int64_t v147; // 0x40cb60\n        int64_t v148 = v147;\n        int64_t v149; // 0x40cb60\n        int64_t v150 = v149;\n        int64_t v151 = 8 * v150; // 0x40d086\n        int64_t v152 = *(int64_t *)(v151 + v32); // 0x40d086\n        int64_t v153 = *(int64_t *)(v151 + v145); // 0x40d08a\n        int64_t v154 = v153 & v152; // 0x40d08a\n        int64_t v155; // 0x40cb60\n        *(int64_t *)(v151 + v155) = v154;\n        int64_t v156 = v150 + 1; // 0x40d092\n        v146 = v154 | v148;\n        v149 = v156;\n        v147 = v146;\n        if (v156 == 4) {\n            // break -> 0x40d09f\n            break;\n        }\n    }\n    int64_t v157 = 0; // 0x40d0a2\n    int64_t v158 = 0; // 0x40d0a2\n    int64_t v159 = 0; // 0x40d0a2\n    int64_t v160; // 0x40cb60\n    int64_t v161; // 0x40cb60\n    int64_t v162; // 0x40cb60\n    if (v146 != 0) {\n        int64_t v163 = v159;\n        int64_t v164 = v158;\n        int64_t v165 = v157;\n        int64_t v166 = 8 * v165; // 0x40d0b2\n        int64_t * v167 = (int64_t *)(v166 + v32); // 0x40d0b2\n        int64_t v168 = *v167; // 0x40d0b2\n        int64_t v169 = *(int64_t *)(v166 + v145); // 0x40d0b6\n        int64_t v170 = v169 & -1 - v168; // 0x40d0c0\n        int64_t v171 = v168 & -1 - v169; // 0x40d0c6\n        *(int64_t *)(v166 + v33) = v170;\n        int64_t v172 = v170 | v163; // 0x40d0cd\n        *v167 = v171;\n        int64_t v173 = v165 + 1; // 0x40d0d4\n        int64_t v174 = v171 | v164; // 0x40d0d8\n        v157 = v173;\n        v158 = v174;\n        v159 = v172;\n        while (v173 != 4) {\n            // 0x40d0b2\n            v163 = v159;\n            v164 = v158;\n            v165 = v157;\n            v166 = 8 * v165;\n            v167 = (int64_t *)(v166 + v32);\n            v168 = *v167;\n            v169 = *(int64_t *)(v166 + v145);\n            v170 = v169 & -1 - v168;\n            v171 = v168 & -1 - v169;\n            *(int64_t *)(v166 + v33) = v170;\n            v172 = v170 | v163;\n            *v167 = v171;\n            v173 = v165 + 1;\n            v174 = v171 | v164;\n            v157 = v173;\n            v158 = v174;\n            v159 = v172;\n        }\n        // 0x40d0e1\n        int64_t v175; // 0x40cb60\n        int64_t v176 = 24 * v175 + v30; // 0x40d0eb\n        int64_t v177 = v176; // 0x40d0f2\n        int64_t v178; // 0x40cb60\n        int64_t v179 = v178; // 0x40d0f2\n        if (v172 != 0) {\n            int128_t v180 = v29; // 0x40d0f4\n            int128_t v181 = __asm_movdqa(v180); // 0x40d0f4\n            int64_t v182 = 32 * v178 + v31; // 0x40d109\n            int128_t v183 = *(int128_t *)v182; // 0x40d10e\n            __asm_movups(v183, v181);\n            int128_t v184; // 0x40cb60\n            int128_t v185 = __asm_movdqa(v184); // 0x40d111\n            int128_t v186 = *(int128_t *)(v182 + 16); // 0x40d11a\n            __asm_movups(v186, v185);\n            int128_t v187 = __asm_movdqa(0); // 0x40d11e\n            int64_t v188 = 24 * v178;\n            int128_t v189 = *(int128_t *)v145; // 0x40d130\n            __asm_movups(v189, v187);\n            int128_t v190; // 0x40cb60\n            int128_t v191 = __asm_movdqa(v190); // 0x40d135\n            int128_t v192 = *(int128_t *)(v145 + 16); // 0x40d13e\n            __asm_movups(v192, v191);\n            if ((int32_t)function_40b1c0(v188 + v30, v176) != 0) {\n                goto lab_0x40d233;\n            }\n            // 0x40d151\n            v177 = 0x100000000 * v176 >> 32;\n            v179 = v178 + 1;\n        }\n        int64_t v193 = v179;\n        int64_t v194 = v177;\n        int64_t * v195; // 0x40cb60\n        int64_t v196 = *v195; // 0x40d164\n        int64_t v197 = *(int64_t *)(v196 + v37); // 0x40d168\n        if ((char)function_408b10(v194, v197) == 0) {\n            // 0x40d15a\n            goto lab_0x40d233;\n        }\n        // 0x40d17c\n        int64_t v198; // 0x40cb60\n        v162 = v198;\n        v160 = v193;\n        v161 = v175;\n        if (v174 == 0) {\n            // break -> 0x40d195\n            goto lab_0x40d195_2;\n        }\n    }\n    goto lab_0x40d05e;\n  lab_0x40d05e:;\n    // 0x40d05e\n    int64_t v199; // 0x40cb60\n    int64_t v200 = v199;\n    int64_t v201; // 0x40cb60\n    int64_t v202 = v201 + 1; // 0x40d05e\n    v199 = v200;\n    int64_t v203; // 0x40cb60\n    v203 += 32;\n    v201 = v202;\n    v162 = 0x100000000000000 * v19 >> 56;\n    v160 = v200;\n    v161 = v202;\n    if (v202 >= v200) {\n        // break -> 0x40d195\n        goto lab_0x40d195_2;\n    }\n    goto lab_0x40d06f;\n  lab_0x40cc32:\n    // 0x40cc32\n    v13 = v12;\n    v17 = v16;\n    v46 = v45;\n    int64_t v206 = v28 + 1; // 0x40cc32\n    v23 = v24;\n    v28 = v206;\n    v44 = v46;\n    v14 = v17;\n    v18 = v20;\n    v10 = v13;\n    if (v206 >= *(int64_t *)(v20 + 16)) {\n        // break -> 0x40cc43\n        goto lab_0x40cc43;\n    }\n    goto lab_0x40cbdd;\n  lab_0x40cf57:;\n    uint32_t v207 = v39 / 256; // 0x40cc07\n    uint32_t v208 = v207 & 0xff03ff;\n    int128_t v209 = v47;\n    int128_t v210 = v25;\n    int128_t v211 = v209; // 0x40cf5a\n    int64_t v212; // 0x40cc0a\n    int128_t v213; // 0x40cb60\n    if ((int16_t)v208 == 0) {\n        goto lab_0x40d010;\n    } else {\n        // 0x40cf60\n        v212 = v208;\n        v213 = v209;\n        if ((v212 & 32) != 0) {\n            int128_t v214 = v4; // 0x40d2d0\n            int128_t v215 = __asm_pxor(v209, v209); // 0x40d2d5\n            v4 = __asm_movaps(v215);\n            *v36 = (int128_t)__asm_movaps(v215);\n            v24 = v210;\n            v45 = v215;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            if ((v214 & 1024) == 0) {\n                goto lab_0x40cc32;\n            } else {\n                // 0x40d2e9\n                v4 = 1024;\n                v213 = v215;\n                goto lab_0x40cf68;\n            }\n        } else {\n            goto lab_0x40cf68;\n        }\n    }\n  lab_0x40d29f:;\n    int128_t v216 = v48;\n    int128_t v217 = v26;\n    int64_t v218 = *(int64_t *)(v15 + 216); // 0x40d29f\n    if ((v218 & 64) == 0) {\n        // 0x40d2ab\n        v4 = (int64_t)v4 & -1025;\n    }\n    // 0x40d2b4\n    v25 = v217;\n    v47 = v216;\n    if ((char)v218 <= 255) {\n        // 0x40d2c0\n        v4 = (int64_t)v4 & -2;\n        v25 = v217;\n        v47 = v216;\n    }\n    goto lab_0x40cf57;\n  lab_0x40d010:;\n    int128_t v219 = v211;\n    v162 = v19;\n    v160 = v11;\n    v161 = 0;\n    if (v11 >= 1) {\n        // 0x40d021\n        v199 = v11;\n        v203 = v31;\n        v201 = 0;\n        while (true) {\n          lab_0x40d06f:\n            // 0x40d06f\n            if (v40 == 1) {\n                unsigned char v204 = *(char *)v38; // 0x40d040\n                int64_t v205 = *(int64_t *)(32 * v201 + v31 + (int64_t)(v204 / 8 & 24)); // 0x40d053\n                if ((1 << (int64_t)(v204 % 64) & v205) != 0) {\n                    goto lab_0x40d07d;\n                } else {\n                    goto lab_0x40d05e;\n                }\n            } else {\n                goto lab_0x40d07d;\n            }\n        }\n    }\n  lab_0x40d195_2:;\n    int64_t v220 = v160;\n    int64_t v221 = v162;\n    v24 = v210;\n    v45 = v219;\n    v16 = v15;\n    v20 = v221;\n    v12 = v220;\n    int64_t v222; // 0x40cb60\n    int64_t v223; // 0x40cb60\n    int64_t v224; // 0x40cb60\n    int64_t result; // 0x40cb60\n    int128_t v225; // 0x40cb60\n    if (v220 != v161) {\n        goto lab_0x40cc32;\n    } else {\n        int128_t v226 = __asm_movdqa(v4); // 0x40d19e\n        int64_t v227 = 32 * v220 + v31; // 0x40d1b5\n        __asm_movups(*(int128_t *)v227, v226);\n        __asm_movups(*(int128_t *)(v227 + 16), __asm_movdqa(v210));\n        v97 = 24 * v220;\n        int64_t v228 = v97 + v30; // 0x40d1dd\n        int64_t * v229 = (int64_t *)v228;\n        *v229 = 1;\n        int64_t * v230 = (int64_t *)(v228 + 8);\n        *v230 = 1;\n        int64_t * mem6 = malloc(8); // 0x40d1f6\n        *(int64_t *)(v228 + 16) = (int64_t)mem6;\n        if (mem6 == NULL) {\n            // 0x40cefb\n            *v230 = 0;\n            *v229 = 0;\n            if (v220 != 0) {\n                goto lab_0x40d233;\n            } else {\n                // 0x40cf14\n                free(mem);\n                result = 0;\n                goto lab_0x40cf22;\n            }\n        }\n        // 0x40d212\n        *mem6 = *(int64_t *)(*(int64_t *)(v221 + 24) + v37);\n        v225 = v219;\n        v223 = 0x100000000000000 * v15 >> 56;\n        v224 = v221;\n        v222 = v220 + 1;\n        goto lab_0x40d219;\n    }\n  lab_0x40cf68:;\n    int128_t v231 = v213;\n    v225 = v231;\n    v223 = v15;\n    v224 = v19;\n    v222 = v11;\n    if ((char)v207 <= -1) {\n        goto lab_0x40d219;\n    } else {\n        if ((v212 & 4) == 0) {\n            goto lab_0x40cfc0;\n        } else {\n            if (v40 == 1) {\n                // 0x40d380\n                v225 = v231;\n                v223 = v15;\n                v224 = v19;\n                v222 = v11;\n                if ((*(char *)(v38 + 10) & 64) == 0) {\n                    goto lab_0x40d219;\n                } else {\n                    // 0x40d38b\n                    if (*(int32_t *)(v15 + 180) > 1) {\n                        goto lab_0x40cf8b;\n                    } else {\n                        goto lab_0x40d350;\n                    }\n                }\n            } else {\n                // 0x40cf7d\n                if (*(int32_t *)(v15 + 180) < 2) {\n                    goto lab_0x40d350;\n                } else {\n                    goto lab_0x40cf8b;\n                }\n            }\n        }\n    }\n  lab_0x40d219:;\n    int128_t v232 = v225;\n    int128_t v233 = __asm_pxor(v232, v232); // 0x40d219\n    v4 = __asm_movaps(v233);\n    *v36 = (int128_t)__asm_movaps(v233);\n    v24 = v210;\n    v45 = v233;\n    v16 = v223;\n    v20 = v224;\n    v12 = v222;\n    goto lab_0x40cc32;\n  lab_0x40cfc0:\n    // 0x40cfc0\n    v211 = v231;\n    if ((v212 & 8) == 0) {\n        goto lab_0x40d010;\n    } else {\n        if (v40 == 1) {\n            // 0x40d3e0\n            v225 = v231;\n            v223 = v15;\n            v224 = v19;\n            v222 = v11;\n            if ((*(char *)(v38 + 10) & 64) == 0) {\n                goto lab_0x40cfcd;\n            } else {\n                goto lab_0x40d219;\n            }\n        } else {\n            goto lab_0x40cfcd;\n        }\n    }\n  lab_0x40cfcd:\n    // 0x40cfcd\n    if (*(int32_t *)(v15 + 180) < 2) {\n        int64_t v234 = 0; // 0x40d32f\n        int64_t v235 = 8 * v234; // 0x40d31c\n        int64_t * v236 = (int64_t *)(v235 + v32); // 0x40d327\n        int64_t v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235); // 0x40d327\n        *v236 = v237;\n        v234++;\n        int64_t v238 = v237; // 0x40d333\n        int64_t v239 = v238; // 0x40d33a\n        while (v234 != 4) {\n            // 0x40d31c\n            v235 = 8 * v234;\n            v236 = (int64_t *)(v235 + v32);\n            v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235);\n            *v236 = v237;\n            v234++;\n            v238 = v237 | v239;\n            v239 = v238;\n        }\n        // 0x40d33c\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v238 == 0) {\n            goto lab_0x40cc32;\n        } else {\n            goto lab_0x40d010;\n        }\n    } else {\n        int64_t v240 = 0; // 0x40cfe1\n        int64_t v241 = 8 * v240; // 0x40cfe3\n        int64_t v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120)); // 0x40cfeb\n        int64_t * v243 = (int64_t *)(v241 + v32); // 0x40cff2\n        int64_t v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241)); // 0x40cff2\n        *v243 = v244;\n        v240++;\n        int64_t v245 = v244; // 0x40cffe\n        int64_t v246 = v245; // 0x40d005\n        while (v240 != 4) {\n            // 0x40cfe3\n            v241 = 8 * v240;\n            v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120));\n            v243 = (int64_t *)(v241 + v32);\n            v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241));\n            *v243 = v244;\n            v240++;\n            v245 = v244 | v246;\n            v246 = v245;\n        }\n        // 0x40d007\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v245 == 0) {\n            goto lab_0x40cc32;\n        } else {\n            goto lab_0x40d010;\n        }\n    }\n  lab_0x40d350:;\n    int64_t v247 = 0; // 0x40d352\n    int64_t v248 = 8 * v247; // 0x40d354\n    int64_t * v249 = (int64_t *)(v248 + v32); // 0x40d354\n    int64_t v250 = *(int64_t *)(v15 + 184 + v248) & *v249; // 0x40d358\n    *v249 = v250;\n    int64_t v251 = v247 + 1; // 0x40d364\n    int64_t v252 = v250; // 0x40d368\n    v247 = v251;\n    int64_t v253 = v252; // 0x40d36f\n    while (v251 != 4) {\n        // 0x40d354\n        v248 = 8 * v247;\n        v249 = (int64_t *)(v248 + v32);\n        v250 = *(int64_t *)(v15 + 184 + v248) & *v249;\n        *v249 = v250;\n        v251 = v247 + 1;\n        v252 = v250 | v253;\n        v247 = v251;\n        v253 = v252;\n    }\n    // 0x40d371\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v252 != 0) {\n        goto lab_0x40cfc0;\n    } else {\n        goto lab_0x40cc32;\n    }\n  lab_0x40cf8b:;\n    int64_t v254 = 0; // 0x40cf91\n    int64_t v255 = 8 * v254; // 0x40cf93\n    int64_t v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120)); // 0x40cf93\n    int64_t * v257 = (int64_t *)(v255 + v32); // 0x40cfa2\n    int64_t v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257; // 0x40cfa2\n    *v257 = v258;\n    int64_t v259 = v254 + 1; // 0x40cfaa\n    int64_t v260 = v258; // 0x40cfae\n    v254 = v259;\n    int64_t v261 = v260; // 0x40cfb5\n    while (v259 != 4) {\n        // 0x40cf93\n        v255 = 8 * v254;\n        v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120));\n        v257 = (int64_t *)(v255 + v32);\n        v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257;\n        *v257 = v258;\n        v259 = v254 + 1;\n        v260 = v258 | v261;\n        v254 = v259;\n        v261 = v260;\n    }\n    // 0x40cfb7\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v260 == 0) {\n        goto lab_0x40cc32;\n    } else {\n        goto lab_0x40cfc0;\n    }\n  lab_0x40d54c:;\n    int64_t * mem7 = calloc(8, 256); // 0x40d556\n    int64_t v262 = (int64_t)mem7; // 0x40d556\n    *v6 = v262;\n    // 0x40cf22\n    return v262 & -256 | (int64_t)(mem7 != NULL);\n  lab_0x40d417:\n    // 0x40d417\n    free(mem2);\n    int64_t v263 = v30 + 16; // 0x40d424\n    int64_t v264 = v263 + 24; // 0x40d433\n    free((int64_t *)*(int64_t *)v263);\n    int64_t v265 = v264; // 0x40d43f\n    while (v264 != 24 * v13 + v263) {\n        // 0x40d430\n        v264 = v265 + 24;\n        free((int64_t *)*(int64_t *)v265);\n        v265 = v264;\n    }\n    // 0x40d441\n    free(mem);\n    result = 0;\n  lab_0x40cf22:\n    // 0x40cf22\n    return result;\n  lab_0x40d248:;\n    int64_t v100 = v99 + 24; // 0x40d24b\n    free((int64_t *)*(int64_t *)v99);\n    v99 = v100;\n    if (v98 != v100) {\n        goto lab_0x40d248;\n    } else {\n        // 0x40d259\n        free(mem);\n        result = 0;\n        goto lab_0x40cf22;\n    }\n  lab_0x40d5e2:;\n    int64_t v101 = v9;\n    int64_t v102 = v21;\n    int64_t v103 = *(int64_t *)v22; // 0x40d5e2\n    int64_t v104; // 0x40cb60\n    int64_t v105; // 0x40cb60\n    int64_t v106; // 0x40cb60\n    int64_t * v107; // 0x40cb60\n    if (v103 == 0) {\n        goto lab_0x40d602;\n    } else {\n        // 0x40d5f2\n        v107 = (int64_t *)(v101 - 32);\n        v105 = v103;\n        v106 = 1;\n        v104 = v102;\n        goto lab_0x40d5f2_2;\n    }\n  lab_0x40ce3f:;\n    int64_t v108 = v8;\n    int64_t v109 = *(int64_t *)(v108 + v33); // 0x40ce42\n    int64_t v110; // 0x40cb60\n    int64_t v111; // 0x40cb60\n    int64_t v112; // 0x40cb60\n    int64_t * v113; // 0x40cb60\n    int64_t v114; // 0x40cb60\n    int64_t * v115; // 0x40cb60\n    if (v109 == 0) {\n        goto lab_0x40ce74;\n    } else {\n        // 0x40ce60\n        v113 = (int64_t *)(v108 + v31);\n        v114 = v30 + 0x1820 + v108;\n        v115 = (int64_t *)(v17 + 184 + v108);\n        v110 = v109;\n        v111 = 1;\n        v112 = 64 * v108 + v35;\n        goto lab_0x40ce60_2;\n    }\n  lab_0x40d602:;\n    int64_t v116 = v22 + 8; // 0x40d602\n    int64_t v117 = v34; // 0x40d614\n    v22 = v116;\n    v21 = v102 + 512;\n    v9 = v101 + 8;\n    int64_t v118; // bp-56, 0x40cb60\n    if (v116 != (int64_t)&v118) {\n        goto lab_0x40d5e2;\n    } else {\n        goto lab_0x40ce7e;\n    }\n  lab_0x40ce74:\n    // 0x40ce74\n    v8 = v108 + 8;\n    v117 = v35;\n    if (v108 != 24) {\n        goto lab_0x40ce3f;\n    } else {\n        goto lab_0x40ce7e;\n    }\n  lab_0x40ce7e:;\n    int64_t v119; // 0x40cb60\n    char v120; // 0x40cb60\n    if ((v120 & 4) == 0) {\n        goto lab_0x40cead;\n    } else {\n        // 0x40ce8f\n        v119 = 0;\n        goto lab_0x40ce8f_2;\n    }\n  lab_0x40d5f2_2:;\n    int64_t v121 = v104;\n    int64_t v122 = v106;\n    uint64_t v123 = v105;\n    int64_t v124; // 0x40cb60\n    int64_t v125; // 0x40cb60\n    int64_t v126; // 0x40cb60\n    if (v123 % 2 != 0) {\n        // 0x40d61b\n        v126 = 0;\n        v125 = v101;\n        v124 = 0;\n        if ((*v107 & v122) != 0) {\n            goto lab_0x40d63c;\n        } else {\n            goto lab_0x40d626;\n        }\n    } else {\n        goto lab_0x40d5f6;\n    }\n  lab_0x40ce60_2:;\n    int64_t v127 = v112;\n    int64_t v128 = v111;\n    uint64_t v129 = v110;\n    int64_t v130; // 0x40cb60\n    int64_t v131; // 0x40cb60\n    int64_t v132; // 0x40cb60\n    if (v129 % 2 != 0) {\n        // 0x40d4f0\n        v131 = v114;\n        v130 = 0;\n        v132 = 0;\n        if ((*v113 & v128) != 0) {\n            goto lab_0x40d51f;\n        } else {\n            goto lab_0x40d508;\n        }\n    } else {\n        goto lab_0x40ce68;\n    }\n  lab_0x40cead:\n    // 0x40cead\n    free(mem3);\n    free(mem2);\n    int64_t v133 = v30 + 16; // 0x40cece\n    int64_t v134 = v133; // 0x40ced5\n    goto lab_0x40ced8;\n  lab_0x40d5f6:\n    // 0x40d5f6\n    v105 = v123 / 2;\n    v106 = 2 * v122;\n    v104 = v121 + 8;\n    if (v123 >= 2) {\n        goto lab_0x40d5f2_2;\n    } else {\n        goto lab_0x40d602;\n    }\n  lab_0x40ce68:\n    // 0x40ce68\n    v110 = v129 / 2;\n    v111 = 2 * v128;\n    v112 = v127 + 8;\n    if (v129 >= 2) {\n        goto lab_0x40ce60_2;\n    } else {\n        goto lab_0x40ce74;\n    }\n  lab_0x40ced8:;\n    int64_t v135 = v134 + 24; // 0x40cedc\n    free((int64_t *)*(int64_t *)v134);\n    v134 = v135;\n    if (v133 + (int64_t)size2 != v135) {\n        goto lab_0x40ced8;\n    } else {\n        // 0x40ceea\n        free(mem);\n        result = 1;\n        goto lab_0x40cf22;\n    }\n  lab_0x40ce8f_2:;\n    int64_t v136 = v119;\n    if ((*(char *)(v30 + 0x1801 + 32 * v136) & 4) != 0) {\n        int64_t v137 = *(int64_t *)(8 * v136 + v43); // 0x40d57e\n        *(int64_t *)(v117 + 80) = v137;\n        if ((char)v27 == 0) {\n            goto lab_0x40cead;\n        } else {\n            // 0x40d58c\n            *(int64_t *)(v117 + 2128) = v137;\n            goto lab_0x40cead;\n        }\n    } else {\n        int64_t v138 = v136 + 1; // 0x40cea4\n        v119 = v138;\n        if (v138 != v13) {\n            goto lab_0x40ce8f_2;\n        } else {\n            goto lab_0x40cead;\n        }\n    }\n  lab_0x40d63c:;\n    int64_t v139 = 8 * v124; // 0x40d63c\n    *(int64_t *)v121 = *(int64_t *)(v139 + v41);\n    *(int64_t *)(v121 + 2048) = *(int64_t *)(v139 + v42);\n    goto lab_0x40d5f6;\n  lab_0x40d626:;\n    int64_t v140 = v125;\n    int64_t v141 = v126 + 1; // 0x40d629\n    v126 = v141;\n    v125 = v140 + 32;\n    v124 = v141;\n    if ((*(int64_t *)v140 & v122) == 0) {\n        goto lab_0x40d626;\n    } else {\n        goto lab_0x40d63c;\n    }\n  lab_0x40d51f:;\n    int64_t v142 = v132;\n    if ((*v115 & v128) == 0) {\n        // 0x40d535\n        *(int64_t *)v127 = *(int64_t *)(v142 + v41);\n        goto lab_0x40ce68;\n    } else {\n        // 0x40d529\n        *(int64_t *)v127 = *(int64_t *)(v142 + v42);\n        goto lab_0x40ce68;\n    }\n  lab_0x40d508:;\n    int64_t v143 = v131;\n    int64_t v144 = v130 + 1; // 0x40d50b\n    v131 = v143 + 32;\n    v130 = v144;\n    if ((*(int64_t *)v143 & v128) == 0) {\n        goto lab_0x40d508;\n    } else {\n        // 0x40d51b\n        v132 = 8 * v144;\n        goto lab_0x40d51f;\n    }\n}\n"
        },
        {
            "funcName": "function_40d670",
            "funcStartAddr": "40d670",
            "funcEndAddr": "40d6f7",
            "decompiledFuncCode": "int64_t function_40d670(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 48; // 0x40d670\n    char * v2 = (char *)v1; // 0x40d670\n    if (*v2 == 16) {\n        int64_t v3 = *(int64_t *)(a2 + 8); // 0x40d676\n        *(int64_t *)(a2 + 24) = *(int64_t *)(v3 + 24);\n        *(int64_t *)(a2 + 56) = *(int64_t *)(v3 + 56);\n        return 0;\n    }\n    // 0x40d690\n    *(int64_t *)(a2 + 24) = a2;\n    int64_t v4 = a2 + 40; // 0x40d6a4\n    int64_t v5 = function_4097f0(a1, *(int64_t *)v4, *(int64_t *)v1); // 0x40d6a8\n    *(int64_t *)(a2 + 56) = v5;\n    if (v5 == -1) {\n        // 0x40d6e6\n        return 12;\n    }\n    // 0x40d6ba\n    if (*v2 == 12) {\n        int32_t * v6 = (int32_t *)(a1 + 8 + 16 * v5); // 0x40d6d8\n        *v6 = *v6 & -0x3ff01 | 256 * *(int32_t *)v4 & 0x3ff00;\n    }\n    // 0x40d6e6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d700",
            "funcStartAddr": "40d700",
            "funcEndAddr": "40d87c",
            "decompiledFuncCode": "int64_t function_40d700(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 != 0) {\n        int64_t v2 = 0; // 0x40d71b\n        if (*v1 != 0) {\n            int64_t v3 = v2 + 1; // 0x40d72f\n            int64_t v4 = a1 + 16 * v2; // 0x40d737\n            function_4097a0(v4);\n            v2 = v3;\n            int64_t v5 = v4; // 0x40d744\n            while (*v1 > v3) {\n                // 0x40d72c\n                v3 = v2 + 1;\n                v4 = v5 + 16 * v2;\n                function_4097a0(v4);\n                v2 = v3;\n                v5 = v4;\n            }\n        }\n    }\n    // 0x40d746\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    int64_t * v6; // 0x40d700\n    int64_t * v7; // 0x40d700\n    int64_t * v8; // 0x40d700\n    if (*v1 == 0) {\n        // 0x40d746\n        v7 = (int64_t *)(a1 + 56);\n        v6 = (int64_t *)(a1 + 48);\n        v8 = (int64_t *)(a1 + 40);\n    } else {\n        int64_t * v9 = (int64_t *)(a1 + 48);\n        int64_t * v10 = (int64_t *)(a1 + 56);\n        int64_t * v11 = (int64_t *)(a1 + 40);\n        int64_t v12 = 0;\n        int64_t v13 = *v9; // 0x40d760\n        if (v13 != 0) {\n            // 0x40d76a\n            free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n        }\n        int64_t v14 = *v10; // 0x40d778\n        if (v14 != 0) {\n            // 0x40d782\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n        }\n        int64_t v15 = *v11; // 0x40d790\n        if (v15 != 0) {\n            // 0x40d79a\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n        }\n        int64_t v16 = v12 + 1; // 0x40d7a8\n        v7 = v10;\n        v6 = v9;\n        v8 = v11;\n        while (*v1 > v16) {\n            // 0x40d760\n            v12 = v16;\n            v13 = *v9;\n            if (v13 != 0) {\n                // 0x40d76a\n                free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n            }\n            // 0x40d778\n            v14 = *v10;\n            if (v14 != 0) {\n                // 0x40d782\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n            }\n            // 0x40d790\n            v15 = *v11;\n            if (v15 != 0) {\n                // 0x40d79a\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n            }\n            // 0x40d7a8\n            v16 = v12 + 1;\n            v7 = v10;\n            v6 = v9;\n            v8 = v11;\n        }\n    }\n    // 0x40d7b3\n    free((int64_t *)*v8);\n    free((int64_t *)*v6);\n    int64_t * v17 = (int64_t *)*v7; // 0x40d7cf\n    free(v17);\n    free(v17);\n    int64_t * v18 = (int64_t *)(a1 + 64); // 0x40d7dd\n    int64_t v19 = *v18; // 0x40d7dd\n    int64_t * v20 = NULL; // 0x40d7e5\n    if (v19 != 0) {\n        int64_t v21 = 0; // 0x40d823\n        int64_t v22 = 24 * v21 + v19; // 0x40d7f7\n        int64_t * v23 = (int64_t *)v22; // 0x40d7fb\n        int64_t * v24 = (int64_t *)(v22 + 16);\n        int64_t v25 = 0; // 0x40d800\n        int64_t v26; // 0x40d810\n        if (*v23 >= 1) {\n            v26 = v25 + 1;\n            function_409cf0(*(int64_t *)(*v24 + 8 * v25));\n            v25 = v26;\n            while (v26 < *v23) {\n                // 0x40d808\n                v26 = v25 + 1;\n                function_409cf0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n            }\n        }\n        // 0x40d81f\n        v21++;\n        free((int64_t *)*v24);\n        int64_t v27 = *v18;\n        while (*(int64_t *)(a1 + 136) >= v21) {\n            // 0x40d7f0\n            v22 = 24 * v21 + v27;\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 16);\n            v25 = 0;\n            if (*v23 >= 1) {\n                v26 = v25 + 1;\n                function_409cf0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n                while (v26 < *v23) {\n                    // 0x40d808\n                    v26 = v25 + 1;\n                    function_409cf0(*(int64_t *)(*v24 + 8 * v25));\n                    v25 = v26;\n                }\n            }\n            // 0x40d81f\n            v21++;\n            free((int64_t *)*v24);\n            v27 = *v18;\n        }\n        // 0x40d845\n        v20 = (int64_t *)v27;\n    }\n    // 0x40d845\n    free(v20);\n    int64_t v28 = *(int64_t *)(a1 + 120); // 0x40d84a\n    if (v28 != (int64_t)&g15) {\n        // 0x40d858\n        free((int64_t *)v28);\n    }\n    // 0x40d85d\n    free((int64_t *)*(int64_t *)(a1 + 224));\n    free((int64_t *)a1);\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_40d880",
            "funcStartAddr": "40d880",
            "funcEndAddr": "40d8ce",
            "decompiledFuncCode": "int64_t function_40d880(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 < 1) {\n        // 0x40d8c0\n        free((int64_t *)*v1);\n        return &g84;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = v2 + 1; // 0x40d899\n    int64_t v4 = 48 * v2; // 0x40d89d\n    free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n    uint64_t v5 = *(int64_t *)(v4 + 16 + *v1); // 0x40d8b0\n    free((int64_t *)v5);\n    while (v3 < v5) {\n        // 0x40d890\n        v2 = v3;\n        v3 = v2 + 1;\n        v4 = 48 * v2;\n        free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n        v5 = *(int64_t *)(v4 + 16 + *v1);\n        free((int64_t *)v5);\n    }\n    // 0x40d8c0\n    free((int64_t *)*v1);\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_40d8d0",
            "funcStartAddr": "40d8d0",
            "funcEndAddr": "40d960",
            "decompiledFuncCode": "int64_t function_40d8d0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int128_t * a6) {\n    int64_t v1 = a1 - 1; // 0x40d8d7\n    *(int64_t *)a1 = v1;\n    if (v1 < 0) {\n        // 0x40d942\n        __assert_fail(\"num >= 0\", \"lib/regexec.c\", 1359, \"pop_fail_stack\");\n        return &g84;\n    }\n    int64_t v2 = 48 * v1; // 0x40d8ee\n    int64_t v3 = v2 + a2; // 0x40d8f8\n    *a3 = *(int64_t *)v3;\n    int64_t v4 = *(int64_t *)(v3 + 16); // 0x40d901\n    memcpy((int64_t *)a5, (int64_t *)v4, 16 * (int32_t)a4);\n    int64_t * v5 = (int64_t *)((int64_t)a6 + 16); // 0x40d90d\n    free((int64_t *)*v5);\n    int64_t v6 = v4 + v2;\n    free((int64_t *)*(int64_t *)(v6 + 16));\n    *a6 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)(v6 + 24)));\n    *v5 = *(int64_t *)(v6 + 40);\n    return *(int64_t *)(v6 + 8);\n}\n"
        },
        {
            "funcName": "function_40d960",
            "funcStartAddr": "40d960",
            "funcEndAddr": "40d9ac",
            "decompiledFuncCode": "int64_t function_40d960(int64_t a1, int64_t str) {\n    // 0x40d960\n    int64_t v1; // 0x40d960\n    uint64_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x40d96f\n    if (len != 1) {\n        // 0x40d9a0\n        return 3;\n    }\n    int64_t * v3 = (int64_t *)((v2 / 8 & 24) + a1); // 0x40d98a\n    *v3 = *v3 | (int64_t)len << v2 % 64;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d9b0",
            "funcStartAddr": "40d9b0",
            "funcEndAddr": "40e176",
            "decompiledFuncCode": "int64_t function_40d9b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = a4; // 0x40d9d1\n    int64_t v3 = a6; // 0x40d9d1\n    int64_t v4; // 0x40d9b0\n    int64_t v5; // 0x40d9b0\n    int64_t v6; // 0x40d9b0\n    int64_t v7; // 0x40d9b0\n    int64_t v8; // 0x40d9b0\n    bool v9; // 0x40d9b0\n    if ((a7 & 0x400000) == 0) {\n        goto lab_0x40d9f5;\n    } else {\n        int64_t v10 = v9 ? -1 : 1;\n        int64_t v11 = (int64_t)\"upper\"; // 0x40d9b0\n        int64_t v12 = a6; // 0x40d9b0\n        unsigned char v13 = *(char *)v12; // 0x40d9e0\n        char v14 = *(char *)v11; // 0x40d9e0\n        v2 = 5;\n        char v15 = v14; // 0x40d9e0\n        bool v16 = false; // 0x40d9e0\n        while (v13 == v14) {\n            // 0x40d9d3\n            v11 += v10;\n            v12 += v10;\n            v15 = v13;\n            v16 = true;\n            if (v2 == 0) {\n                // break -> \n                break;\n            }\n            v13 = *(char *)v12;\n            v14 = *(char *)v11;\n            v2--;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v17 = v15;\n        v3 = (int64_t)\"alpha\";\n        int64_t v18 = (int64_t)\"lower\"; // 0x40d9e9\n        int64_t v19 = a6; // 0x40d9e9\n        if ((v13 >= v17 && !v16) != v13 < v17) {\n            unsigned char v20 = *(char *)v19; // 0x40daf3\n            char v21 = *(char *)v18; // 0x40daf3\n            int64_t v22 = 5; // 0x40daf3\n            char v23 = v21; // 0x40daf3\n            bool v24 = false; // 0x40daf3\n            while (v20 == v21) {\n                // 0x40dae6\n                v18 += v10;\n                v19 += v10;\n                v23 = v20;\n                v24 = true;\n                if (v22 == 0) {\n                    // break -> \n                    break;\n                }\n                v20 = *(char *)v19;\n                v21 = *(char *)v18;\n                v22--;\n                v23 = v21;\n                v24 = false;\n            }\n            unsigned char v25 = v23;\n            int64_t v26 = !((v20 < v25 | v24)) == v20 < v25 ? (int64_t)\"alpha\" : a6; // 0x40db05\n            v6 = a3;\n            v8 = v22;\n            v4 = v26;\n            v7 = v22;\n            v5 = v26;\n            if (v22 != v1) {\n                goto lab_0x40da05;\n            } else {\n                goto lab_0x40db15;\n            }\n        } else {\n            goto lab_0x40d9f5;\n        }\n    }\n  lab_0x40d9f5:\n    // 0x40d9f5\n    v6 = a3;\n    v8 = v2;\n    v4 = v3;\n    v7 = v1;\n    v5 = v3;\n    if (v2 == v1) {\n        goto lab_0x40db15;\n    } else {\n        goto lab_0x40da05;\n    }\n  lab_0x40db15:;\n    int64_t v27 = 2 * v7 | 1; // 0x40db15\n    int64_t * v28 = (int64_t *)a3; // 0x40db2e\n    int64_t * mem = realloc(v28, 8 * (int32_t)v27); // 0x40db2e\n    if (mem == NULL) {\n        // 0x40da96\n        return 12;\n    }\n    int64_t v29 = (int64_t)mem; // 0x40db2e\n    *v28 = v29;\n    *a5 = v27;\n    v6 = v29;\n    v8 = v7;\n    v4 = v5;\n    goto lab_0x40da05;\n  lab_0x40da05:\n    // 0x40da05\n    *(int64_t *)a4 = v8 + 1;\n    char * name = (char *)v4; // 0x40da14\n    *(int64_t *)(8 * v8 + v6) = (int64_t)wctype(name);\n    int64_t v30 = v9 ? -1 : 1;\n    int64_t v31 = (int64_t)\"alnum\"; // 0x40d9b0\n    int64_t v32 = v4; // 0x40d9b0\n    int64_t v33 = 6; // 0x40d9b0\n    unsigned char v34 = *(char *)v32; // 0x40da2a\n    char v35 = *(char *)v31; // 0x40da2a\n    char v36 = v35; // 0x40da2a\n    bool v37 = false; // 0x40da2a\n    while (v34 == v35) {\n        int64_t v38 = v33 - 1; // 0x40da2a\n        v31 += v30;\n        v32 += v30;\n        v33 = v38;\n        v36 = v34;\n        v37 = true;\n        if (v38 == 0) {\n            // break -> \n            break;\n        }\n        v34 = *(char *)v32;\n        v35 = *(char *)v31;\n        v36 = v35;\n        v37 = false;\n    }\n    unsigned char v39 = v36;\n    int64_t v40 = (int64_t)\"cntrl\"; // 0x40da33\n    int64_t v41 = v4; // 0x40da33\n    int64_t v42 = 6; // 0x40da33\n    if ((v34 >= v39 && !v37) == v34 < v39) {\n        int64_t v43 = (int64_t)*__ctype_b_loc(); // 0x40dab4\n        if (a1 != 0) {\n            int64_t v44 = 0;\n            unsigned char v45; // 0x40dcde\n            unsigned char v46; // 0x40d9b0\n            int64_t * v47; // 0x40dcf3\n            if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                // 0x40dcde\n                v45 = *(char *)(v44 + a1);\n                v46 = v45 % 64;\n                v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n            }\n            int64_t v48 = v44 + 1; // 0x40dd01\n            while (v44 != 255) {\n                // 0x40dcd8\n                v44 = v48;\n                if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                    // 0x40dcde\n                    v45 = *(char *)(v44 + a1);\n                    v46 = v45 % 64;\n                    v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                    *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n                }\n                // 0x40dcf7\n                v48 = v44 + 1;\n            }\n        } else {\n            int64_t v49 = 0;\n            int64_t * v50; // 0x40dad3\n            if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                // 0x40dac6\n                v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                *v50 = *v50 | 1 << v49 % 64;\n            }\n            int64_t v51 = v49 + 1; // 0x40dae2\n            while (v49 != 255) {\n                // 0x40dac0\n                v49 = v51;\n                if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                    // 0x40dac6\n                    v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                    *v50 = *v50 | 1 << v49 % 64;\n                }\n                // 0x40dad7\n                v51 = v49 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v52 = *(char *)v41; // 0x40da42\n    char v53 = *(char *)v40; // 0x40da42\n    char v54 = v53; // 0x40da42\n    bool v55 = false; // 0x40da42\n    while (v52 == v53) {\n        int64_t v56 = v42 - 1; // 0x40da42\n        v40 += v30;\n        v41 += v30;\n        v42 = v56;\n        v54 = v52;\n        v55 = true;\n        if (v56 == 0) {\n            // break -> \n            break;\n        }\n        v52 = *(char *)v41;\n        v53 = *(char *)v40;\n        v54 = v53;\n        v55 = false;\n    }\n    unsigned char v57 = v54;\n    int64_t v58 = (int64_t)\"lower\"; // 0x40da4b\n    int64_t v59 = v4; // 0x40da4b\n    int64_t v60 = 6; // 0x40da4b\n    if ((v52 >= v57 && !v55) == v52 < v57) {\n        int64_t v61 = (int64_t)*__ctype_b_loc(); // 0x40da5d\n        if (a1 != 0) {\n            int64_t v62 = 0;\n            unsigned char v63; // 0x40dd16\n            unsigned char v64; // 0x40d9b0\n            int64_t * v65; // 0x40dd2b\n            if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                // 0x40dd16\n                v63 = *(char *)(v62 + a1);\n                v64 = v63 % 64;\n                v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n            }\n            int64_t v66 = v62 + 1; // 0x40dd39\n            while (v62 != 255) {\n                // 0x40dd10\n                v62 = v66;\n                if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                    // 0x40dd16\n                    v63 = *(char *)(v62 + a1);\n                    v64 = v63 % 64;\n                    v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                    *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n                }\n                // 0x40dd2f\n                v66 = v62 + 1;\n            }\n        } else {\n            int64_t v67 = 0;\n            int64_t * v68; // 0x40da83\n            if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                // 0x40da76\n                v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                *v68 = *v68 | 1 << v67 % 64;\n            }\n            int64_t v69 = v67 + 1; // 0x40da92\n            while (v67 != 255) {\n                // 0x40da70\n                v67 = v69;\n                if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                    // 0x40da76\n                    v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                    *v68 = *v68 | 1 << v67 % 64;\n                }\n                // 0x40da87\n                v69 = v67 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v70 = *(char *)v59; // 0x40db61\n    char v71 = *(char *)v58; // 0x40db61\n    char v72 = v71; // 0x40db61\n    bool v73 = false; // 0x40db61\n    while (v70 == v71) {\n        int64_t v74 = v60 - 1; // 0x40db61\n        v58 += v30;\n        v59 += v30;\n        v60 = v74;\n        v72 = v70;\n        v73 = true;\n        if (v74 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v59;\n        v71 = *(char *)v58;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v75 = v72;\n    int64_t v76 = (int64_t)\"space\"; // 0x40db6a\n    int64_t v77 = v4; // 0x40db6a\n    int64_t v78 = 6; // 0x40db6a\n    if ((v70 >= v75 && !v73) == v70 < v75) {\n        int64_t v79 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v80 = 0;\n            unsigned char v81; // 0x40dd4f\n            unsigned char v82; // 0x40d9b0\n            int64_t * v83; // 0x40dd64\n            if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                // 0x40dd4f\n                v81 = *(char *)(v80 + a1);\n                v82 = v81 % 64;\n                v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n            }\n            int64_t v84 = v80 + 1; // 0x40dd72\n            while (v80 != 255) {\n                // 0x40dd48\n                v80 = v84;\n                if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                    // 0x40dd4f\n                    v81 = *(char *)(v80 + a1);\n                    v82 = v81 % 64;\n                    v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                    *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n                }\n                // 0x40dd68\n                v84 = v80 + 1;\n            }\n        } else {\n            int64_t v85 = 0;\n            int64_t * v86; // 0x40dbfc\n            if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                // 0x40dbef\n                v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                *v86 = *v86 | 1 << v85 % 64;\n            }\n            int64_t v87 = v85 + 1; // 0x40dc0b\n            while (v85 != 255) {\n                // 0x40dbe8\n                v85 = v87;\n                if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                    // 0x40dbef\n                    v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                    *v86 = *v86 | 1 << v85 % 64;\n                }\n                // 0x40dc00\n                v87 = v85 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v88 = *(char *)v77; // 0x40db79\n    char v89 = *(char *)v76; // 0x40db79\n    char v90 = v89; // 0x40db79\n    bool v91 = false; // 0x40db79\n    while (v88 == v89) {\n        // 0x40db6c\n        v78--;\n        v76 += v30;\n        v77 += v30;\n        v90 = v88;\n        v91 = true;\n        if (v78 == 0) {\n            // break -> \n            break;\n        }\n        v88 = *(char *)v77;\n        v89 = *(char *)v76;\n        v90 = v89;\n        v91 = false;\n    }\n    unsigned char v92 = v90;\n    int64_t v93 = (int64_t)\"alpha\"; // 0x40db82\n    int64_t v94 = v4; // 0x40db82\n    int64_t v95 = 6; // 0x40db82\n    if ((v88 >= v92 && !v91) == v88 < v92) {\n        int64_t v96 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v97 = 0;\n            unsigned char v98; // 0x40ded7\n            unsigned char v99; // 0x40d9b0\n            int64_t * v100; // 0x40deec\n            if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                // 0x40ded7\n                v98 = *(char *)(v97 + a1);\n                v99 = v98 % 64;\n                v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n            }\n            int64_t v101 = v97 + 1; // 0x40defa\n            while (v97 != 255) {\n                // 0x40ded0\n                v97 = v101;\n                if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                    // 0x40ded7\n                    v98 = *(char *)(v97 + a1);\n                    v99 = v98 % 64;\n                    v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                    *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n                }\n                // 0x40def0\n                v101 = v97 + 1;\n            }\n        } else {\n            int64_t v102 = 0;\n            int64_t * v103; // 0x40dbb4\n            if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                // 0x40dba7\n                v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                *v103 = *v103 | 1 << v102 % 64;\n            }\n            int64_t v104 = v102 + 1; // 0x40dbc3\n            while (v102 != 255) {\n                // 0x40dba0\n                v102 = v104;\n                if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                    // 0x40dba7\n                    v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                    *v103 = *v103 | 1 << v102 % 64;\n                }\n                // 0x40dbb8\n                v104 = v102 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v105 = *(char *)v94; // 0x40dc1f\n    char v106 = *(char *)v93; // 0x40dc1f\n    char v107 = v106; // 0x40dc1f\n    bool v108 = false; // 0x40dc1f\n    while (v105 == v106) {\n        int64_t v109 = v95 - 1; // 0x40dc1f\n        v93 += v30;\n        v94 += v30;\n        v95 = v109;\n        v107 = v105;\n        v108 = true;\n        if (v109 == 0) {\n            // break -> \n            break;\n        }\n        v105 = *(char *)v94;\n        v106 = *(char *)v93;\n        v107 = v106;\n        v108 = false;\n    }\n    unsigned char v110 = v107;\n    int64_t v111 = (int64_t)\"digit\"; // 0x40dc28\n    int64_t v112 = v4; // 0x40dc28\n    int64_t v113 = 6; // 0x40dc28\n    if ((v105 >= v110 && !v108) == v105 < v110) {\n        int64_t v114 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v115 = 0;\n            unsigned char v116; // 0x40dea4\n            unsigned char v117; // 0x40d9b0\n            int64_t * v118; // 0x40deb9\n            if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                // 0x40dea4\n                v116 = *(char *)(v115 + a1);\n                v117 = v116 % 64;\n                v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n            }\n            int64_t v119 = v115 + 1; // 0x40dec7\n            while (v115 != 255) {\n                // 0x40de9d\n                v115 = v119;\n                if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                    // 0x40dea4\n                    v116 = *(char *)(v115 + a1);\n                    v117 = v116 % 64;\n                    v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                    *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n                }\n                // 0x40debd\n                v119 = v115 + 1;\n            }\n        } else {\n            int64_t v120 = 0;\n            int64_t * v121; // 0x40dcbc\n            if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                // 0x40dcaf\n                v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                *v121 = *v121 | 1 << v120 % 64;\n            }\n            int64_t v122 = v120 + 1; // 0x40dccb\n            while (v120 != 255) {\n                // 0x40dca8\n                v120 = v122;\n                if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                    // 0x40dcaf\n                    v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                    *v121 = *v121 | 1 << v120 % 64;\n                }\n                // 0x40dcc0\n                v122 = v120 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v123 = *(char *)v112; // 0x40dc37\n    char v124 = *(char *)v111; // 0x40dc37\n    char v125 = v124; // 0x40dc37\n    bool v126 = false; // 0x40dc37\n    while (v123 == v124) {\n        // 0x40dc2a\n        v113--;\n        v111 += v30;\n        v112 += v30;\n        v125 = v123;\n        v126 = true;\n        if (v113 == 0) {\n            // break -> \n            break;\n        }\n        v123 = *(char *)v112;\n        v124 = *(char *)v111;\n        v125 = v124;\n        v126 = false;\n    }\n    unsigned char v127 = v125;\n    int64_t v128 = (int64_t)\"print\"; // 0x40dc40\n    int64_t v129 = v4; // 0x40dc40\n    int64_t v130 = 6; // 0x40dc40\n    if ((v123 >= v127 && !v126) == v123 < v127) {\n        int64_t v131 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v132 = 0;\n            unsigned char v133; // 0x40df0a\n            unsigned char v134; // 0x40d9b0\n            int64_t * v135; // 0x40df1f\n            if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                // 0x40df0a\n                v133 = *(char *)(v132 + a1);\n                v134 = v133 % 64;\n                v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n            }\n            int64_t v136 = v132 + 1; // 0x40df2d\n            while (v132 != 255) {\n                // 0x40df03\n                v132 = v136;\n                if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                    // 0x40df0a\n                    v133 = *(char *)(v132 + a1);\n                    v134 = v133 % 64;\n                    v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                    *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n                }\n                // 0x40df23\n                v136 = v132 + 1;\n            }\n        } else {\n            int64_t v137 = 0;\n            int64_t * v138; // 0x40dc74\n            if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                // 0x40dc67\n                v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                *v138 = *v138 | 1 << v137 % 64;\n            }\n            int64_t v139 = v137 + 1; // 0x40dc83\n            while (v137 != 255) {\n                // 0x40dc60\n                v137 = v139;\n                if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                    // 0x40dc67\n                    v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                    *v138 = *v138 | 1 << v137 % 64;\n                }\n                // 0x40dc78\n                v139 = v137 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v140 = *(char *)v129; // 0x40dd86\n    char v141 = *(char *)v128; // 0x40dd86\n    char v142 = v141; // 0x40dd86\n    bool v143 = false; // 0x40dd86\n    while (v140 == v141) {\n        int64_t v144 = v130 - 1; // 0x40dd86\n        v128 += v30;\n        v129 += v30;\n        v130 = v144;\n        v142 = v140;\n        v143 = true;\n        if (v144 == 0) {\n            // break -> \n            break;\n        }\n        v140 = *(char *)v129;\n        v141 = *(char *)v128;\n        v142 = v141;\n        v143 = false;\n    }\n    unsigned char v145 = v142;\n    int64_t v146 = (int64_t)\"upper\"; // 0x40dd8f\n    int64_t v147 = v4; // 0x40dd8f\n    int64_t v148 = 6; // 0x40dd8f\n    if ((v140 >= v145 && !v143) == v140 < v145) {\n        int64_t v149 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v150 = 0;\n            unsigned char v151; // 0x40e0e1\n            unsigned char v152; // 0x40d9b0\n            int64_t * v153; // 0x40e0f6\n            if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                // 0x40e0e1\n                v151 = *(char *)(v150 + a1);\n                v152 = v151 % 64;\n                v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n            }\n            int64_t v154 = v150 + 1; // 0x40e104\n            while (v150 != 255) {\n                // 0x40e0da\n                v150 = v154;\n                if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                    // 0x40e0e1\n                    v151 = *(char *)(v150 + a1);\n                    v152 = v151 % 64;\n                    v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                    *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n                }\n                // 0x40e0fa\n                v154 = v150 + 1;\n            }\n        } else {\n            int64_t v155 = 0;\n            int64_t * v156; // 0x40ddc4\n            if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                // 0x40ddb7\n                v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                *v156 = *v156 | 1 << v155 % 64;\n            }\n            int64_t v157 = v155 + 1; // 0x40ddd3\n            while (v155 != 255) {\n                // 0x40ddb0\n                v155 = v157;\n                if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                    // 0x40ddb7\n                    v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                    *v156 = *v156 | 1 << v155 % 64;\n                }\n                // 0x40ddc8\n                v157 = v155 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v158 = *(char *)v147; // 0x40dde7\n    char v159 = *(char *)v146; // 0x40dde7\n    char v160 = v159; // 0x40dde7\n    bool v161 = false; // 0x40dde7\n    while (v158 == v159) {\n        int64_t v162 = v148 - 1; // 0x40dde7\n        v146 += v30;\n        v147 += v30;\n        v148 = v162;\n        v160 = v158;\n        v161 = true;\n        if (v162 == 0) {\n            // break -> \n            break;\n        }\n        v158 = *(char *)v147;\n        v159 = *(char *)v146;\n        v160 = v159;\n        v161 = false;\n    }\n    unsigned char v163 = v160;\n    int64_t v164 = (int64_t)\"blank\"; // 0x40ddf0\n    int64_t v165 = v4; // 0x40ddf0\n    int64_t v166 = 6; // 0x40ddf0\n    if ((v158 >= v163 && !v161) == v158 < v163) {\n        int64_t v167 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v168 = 0;\n            unsigned char v169; // 0x40e14b\n            unsigned char v170; // 0x40d9b0\n            int64_t * v171; // 0x40e160\n            if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                // 0x40e14b\n                v169 = *(char *)(v168 + a1);\n                v170 = v169 % 64;\n                v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n            }\n            int64_t v172 = v168 + 1; // 0x40e16f\n            while (v168 != 255) {\n                // 0x40e144\n                v168 = v172;\n                if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                    // 0x40e14b\n                    v169 = *(char *)(v168 + a1);\n                    v170 = v169 % 64;\n                    v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                    *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n                }\n                // 0x40e164\n                v172 = v168 + 1;\n            }\n        } else {\n            int64_t v173 = 0;\n            int64_t * v174; // 0x40de1e\n            if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                // 0x40de11\n                v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                *v174 = *v174 | 1 << v173 % 64;\n            }\n            int64_t v175 = v173 + 1; // 0x40de2d\n            while (v173 != 255) {\n                // 0x40de0a\n                v173 = v175;\n                if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                    // 0x40de11\n                    v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                    *v174 = *v174 | 1 << v173 % 64;\n                }\n                // 0x40de22\n                v175 = v173 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v176 = *(char *)v165; // 0x40de4b\n    char v177 = *(char *)v164; // 0x40de4b\n    char v178 = v177; // 0x40de4b\n    bool v179 = false; // 0x40de4b\n    while (v176 == v177) {\n        int64_t v180 = v166 - 1; // 0x40de4b\n        v164 += v30;\n        v165 += v30;\n        v166 = v180;\n        v178 = v176;\n        v179 = true;\n        if (v180 == 0) {\n            // break -> \n            break;\n        }\n        v176 = *(char *)v165;\n        v177 = *(char *)v164;\n        v178 = v177;\n        v179 = false;\n    }\n    unsigned char v181 = v178;\n    int64_t v182 = (int64_t)\"graph\"; // 0x40de54\n    int64_t v183 = v4; // 0x40de54\n    int64_t v184 = 6; // 0x40de54\n    if ((v176 >= v181 && !v179) == v176 < v181) {\n        int64_t v185 = (int64_t)*__ctype_b_loc(); // 0x40de66\n        if (a1 != 0) {\n            int64_t v186 = 0;\n            unsigned char v187; // 0x40e118\n            unsigned char v188; // 0x40d9b0\n            int64_t * v189; // 0x40e12d\n            if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                // 0x40e118\n                v187 = *(char *)(v186 + a1);\n                v188 = v187 % 64;\n                v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n            }\n            int64_t v190 = v186 + 1; // 0x40e13b\n            while (v186 != 255) {\n                // 0x40e112\n                v186 = v190;\n                if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                    // 0x40e118\n                    v187 = *(char *)(v186 + a1);\n                    v188 = v187 % 64;\n                    v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                    *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n                }\n                // 0x40e131\n                v190 = v186 + 1;\n            }\n        } else {\n            int64_t v191 = 0;\n            int64_t * v192; // 0x40de85\n            if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                // 0x40de78\n                v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                *v192 = *v192 | 1 << v191 % 64;\n            }\n            int64_t v193 = v191 + 1; // 0x40de94\n            while (v191 != 255) {\n                // 0x40de72\n                v191 = v193;\n                if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                    // 0x40de78\n                    v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                    *v192 = *v192 | 1 << v191 % 64;\n                }\n                // 0x40de89\n                v193 = v191 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    unsigned char v194 = *(char *)v183; // 0x40df41\n    char v195 = *(char *)v182; // 0x40df41\n    char v196 = v195; // 0x40df41\n    bool v197 = false; // 0x40df41\n    while (v194 == v195) {\n        int64_t v198 = v184 - 1; // 0x40df41\n        v182 += v30;\n        v183 += v30;\n        v184 = v198;\n        v196 = v194;\n        v197 = true;\n        if (v198 == 0) {\n            // break -> \n            break;\n        }\n        v194 = *(char *)v183;\n        v195 = *(char *)v182;\n        v196 = v195;\n        v197 = false;\n    }\n    unsigned char v199 = v196;\n    if ((v194 >= v199 && !v197) == v194 < v199) {\n        int64_t v200 = (int64_t)*__ctype_b_loc(); // 0x40df58\n        if (a1 != 0) {\n            int64_t v201 = 0;\n            unsigned char v202; // 0x40df98\n            unsigned char v203; // 0x40d9b0\n            int64_t * v204; // 0x40dfad\n            if (*(int16_t *)(2 * v201 + v200) < 0) {\n                // 0x40df98\n                v202 = *(char *)(v201 + a1);\n                v203 = v202 % 64;\n                v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n            }\n            int64_t v205 = v201 + 1; // 0x40dfbb\n            while (v201 != 255) {\n                // 0x40df91\n                v201 = v205;\n                if (*(int16_t *)(2 * v201 + v200) < 0) {\n                    // 0x40df98\n                    v202 = *(char *)(v201 + a1);\n                    v203 = v202 % 64;\n                    v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                    *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n                }\n                // 0x40dfb1\n                v205 = v201 + 1;\n            }\n        } else {\n            int64_t v206 = 0;\n            int64_t * v207; // 0x40df74\n            if (*(int16_t *)(2 * v206 + v200) < 0) {\n                // 0x40df67\n                v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                *v207 = *v207 | 1 << v206 % 64;\n            }\n            int64_t v208 = v206 + 1; // 0x40df83\n            while (v206 != 255) {\n                // 0x40df60\n                v206 = v208;\n                if (*(int16_t *)(2 * v206 + v200) < 0) {\n                    // 0x40df67\n                    v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                    *v207 = *v207 | 1 << v206 % 64;\n                }\n                // 0x40df78\n                v208 = v206 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    // 0x40dfc2\n    if (strcmp(name, \"punct\") == 0) {\n        int64_t v209 = (int64_t)*__ctype_b_loc(); // 0x40dfdf\n        if (a1 != 0) {\n            int64_t v210 = 0;\n            unsigned char v211; // 0x40e01d\n            unsigned char v212; // 0x40d9b0\n            int64_t * v213; // 0x40e032\n            if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                // 0x40e01d\n                v211 = *(char *)(v210 + a1);\n                v212 = v211 % 64;\n                v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n            }\n            int64_t v214 = v210 + 1; // 0x40e040\n            while (v210 != 255) {\n                // 0x40e017\n                v210 = v214;\n                if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                    // 0x40e01d\n                    v211 = *(char *)(v210 + a1);\n                    v212 = v211 % 64;\n                    v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                    *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n                }\n                // 0x40e036\n                v214 = v210 + 1;\n            }\n        } else {\n            int64_t v215 = 0;\n            int64_t * v216; // 0x40dffa\n            if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                // 0x40dfed\n                v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                *v216 = *v216 | 1 << v215 % 64;\n            }\n            int64_t v217 = v215 + 1; // 0x40e009\n            while (v215 != 255) {\n                // 0x40dfe7\n                v215 = v217;\n                if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                    // 0x40dfed\n                    v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                    *v216 = *v216 | 1 << v215 % 64;\n                }\n                // 0x40dffe\n                v217 = v215 + 1;\n            }\n        }\n        // 0x40da96\n        return 0;\n    }\n    // 0x40e047\n    if (strcmp(name, \"xdigit\") != 0) {\n        // 0x40da96\n        return 4;\n    }\n    int64_t v218 = (int64_t)*__ctype_b_loc() + 1;\n    if (a1 == 0) {\n        int64_t v219 = 0;\n        int64_t * v220; // 0x40e080\n        if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n            // 0x40e073\n            v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n            *v220 = *v220 | 1 << v219 % 64;\n        }\n        int64_t v221 = v219 + 1; // 0x40e08f\n        while (v219 != 255) {\n            // 0x40e06c\n            v219 = v221;\n            if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n                // 0x40e073\n                v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n                *v220 = *v220 | 1 << v219 % 64;\n            }\n            // 0x40e084\n            v221 = v219 + 1;\n        }\n        // 0x40da96\n        return 0;\n    }\n    int64_t v222 = 0;\n    unsigned char v223; // 0x40e0a4\n    unsigned char v224; // 0x40d9b0\n    int64_t * v225; // 0x40e0b9\n    if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n        // 0x40e0a4\n        v223 = *(char *)(v222 + a1);\n        v224 = v223 % 64;\n        v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n        *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n    }\n    int64_t v226 = v222 + 1; // 0x40e0c7\n    while (v222 != 255) {\n        // 0x40e09d\n        v222 = v226;\n        if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n            // 0x40e0a4\n            v223 = *(char *)(v222 + a1);\n            v224 = v223 % 64;\n            v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n            *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n        }\n        // 0x40e0bd\n        v226 = v222 + 1;\n    }\n    // 0x40da96\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40e180",
            "funcStartAddr": "40e180",
            "funcEndAddr": "40e3b5",
            "decompiledFuncCode": "int64_t function_40e180(int64_t a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-96, 0x40e1ad\n    int64_t * mem = calloc(32, 1); // 0x40e1b6\n    if (mem == NULL) {\n        // 0x40e350\n        *(int32_t *)a6 = 12;\n        // 0x40e329\n        return 0;\n    }\n    int64_t * mem2 = calloc(80, 1); // 0x40e1d1\n    if (mem2 == NULL) {\n        // 0x40e370\n        free(mem);\n        *(int32_t *)a6 = 12;\n        // 0x40e329\n        return 0;\n    }\n    int64_t v2 = (int64_t)mem; // 0x40e1b6\n    int64_t v3 = (int64_t)mem2; // 0x40e1d1\n    char * v4 = (char *)(v3 + 32); // 0x40e1e6\n    unsigned char v5 = (char)a5; // 0x40e1ea\n    *v4 = *v4 & -2 | v5 % 2;\n    int64_t v6 = function_40d9b0(a2, v2, v3 + 24, v3 + 72, &v1, (int64_t)a3, 0); // 0x40e213\n    int32_t v7 = v6; // 0x40e21a\n    if (v7 != 0) {\n        // 0x40e390\n        free(mem);\n        function_409780(v3);\n        *(int32_t *)a6 = v7;\n        // 0x40e329\n        return 0;\n    }\n    // 0x40e222\n    int64_t v8; // 0x40e180\n    char v9 = *(char *)&v8; // 0x40e222\n    int64_t v10 = v9; // 0x40e222\n    v8 = v10;\n    v8 = v10;\n    int64_t v11 = (int64_t)a4; // 0x40e22e\n    if (v9 != 0) {\n        int64_t v12 = v8;\n        v11++;\n        char v13 = *(char *)v11; // 0x40e25d\n        v8 = v13;\n        int64_t * v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2); // 0x40e262\n        *v14 = *v14 | 1 << v12 % 64;\n        while (v13 != 0) {\n            v12 = v8;\n            v11++;\n            v13 = *(char *)v11;\n            v8 = v13;\n            v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2);\n            *v14 = *v14 | 1 << v12 % 64;\n        }\n    }\n    if (v5 != 0) {\n        int64_t v15 = v2;\n        int64_t * v16 = (int64_t *)v15; // 0x40e276\n        *v16 = -1 - *v16;\n        int64_t v17 = v15 + 8; // 0x40e280\n        while (v2 + 24 != v15) {\n            // 0x40e276\n            v15 = v17;\n            v16 = (int64_t *)v15;\n            *v16 = -1 - *v16;\n            v17 = v15 + 8;\n        }\n    }\n    int32_t * v18 = (int32_t *)(a1 + 180); // 0x40e282\n    if (*v18 >= 2) {\n        int64_t v19 = *(int64_t *)(a1 + 120); // 0x40e28b\n        v8 = v19;\n        *mem = *mem & *(int64_t *)v19;\n        int64_t v20 = 0; // 0x40e299\n        v20 += 8;\n        int64_t * v21 = (int64_t *)(v20 + v2); // 0x40e295\n        *v21 = *v21 & *(int64_t *)(v20 + v19);\n        while (v20 != 24) {\n            // 0x40e291\n            v20 += 8;\n            v21 = (int64_t *)(v20 + v2);\n            *v21 = *v21 & *(int64_t *)(v20 + v8);\n        }\n    }\n    int64_t v22 = a1 + 112; // 0x40e2a3\n    int64_t v23 = a1 + 128; // 0x40e2a7\n    v8 = 0;\n    int64_t v24; // bp-88, 0x40e180\n    int64_t v25 = &v24; // 0x40e2b2\n    v24 = v2;\n    int64_t result = function_40ad90(v22, v23, 0, 0, v25); // 0x40e2c7\n    if (result != 0) {\n        // 0x40e2d4\n        if (*v18 < 2) {\n            // 0x40e360\n            function_409780(v3);\n            // 0x40e329\n            return result;\n        }\n        char * v26 = (char *)(a1 + 176); // 0x40e2e1\n        *v26 = *v26 | 2;\n        v24 = v3;\n        int64_t v27 = function_40ad90(v22, v23, 0, 0, v25); // 0x40e301\n        if (v27 != 0) {\n            // 0x40e30b\n            int64_t v28; // bp-72, 0x40e180\n            int64_t result2 = function_40ad90(v22, v23, (int32_t)result, (int32_t)v27, (int64_t)&v28); // 0x40e321\n            // 0x40e329\n            return result2;\n        }\n    }\n    // 0x40e340\n    free(mem);\n    function_409780(v3);\n    // 0x40e350\n    *(int32_t *)a6 = 12;\n    // 0x40e329\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40e3c0",
            "funcStartAddr": "40e3c0",
            "funcEndAddr": "40e898",
            "decompiledFuncCode": "int64_t function_40e3c0(int64_t result, int64_t result2, int64_t a3, int64_t a4) {\n    int64_t v1 = a4;\n    int32_t * v2 = (int32_t *)(result + 180); // 0x40e3d7\n    int32_t v3 = 0; // 0x40e3e2\n    if (*v2 == 1) {\n        // 0x40e3e4\n        v3 = (int32_t)(*(int64_t *)(result + 24) / 0x400000) % 2;\n    }\n    // 0x40e3f3\n    if (result2 < 1) {\n        // 0x40e5b3\n        return result;\n    }\n    char * v4 = (char *)(result + 26);\n    int64_t * v5 = (int64_t *)(result + 16);\n    char wstr; // bp-312, 0x40e3c0\n    int64_t v6 = &wstr;\n    char ps; // bp-320, 0x40e3c0\n    int64_t v7 = &ps;\n    int64_t v8 = a3; // 0x40e411\n    int64_t v9 = 0; // 0x40e411\n    int64_t v10 = result; // 0x40e411\n    int64_t v11; // 0x40e3c0\n    int64_t v12; // 0x40e3c0\n    int64_t v13; // 0x40e3c0\n    int64_t v14; // 0x40e3c0\n    int64_t v15; // 0x40e3c0\n    int64_t v16; // 0x40e3c0\n    unsigned char v17; // 0x40e474\n    int64_t v18; // 0x40e5c9\n    while (true) {\n      lab_0x40e451_2:\n        // 0x40e451\n        v13 = v10;\n        v11 = v9;\n        int64_t v19 = *(int64_t *)(8 * v11 + v8); // 0x40e459\n        v1 = v13;\n        int64_t v20 = 16 * v19; // 0x40e467\n        v16 = v20 + v13;\n        v17 = *(char *)(v16 + 8);\n        if (v17 != 1) {\n            int64_t v21 = v17; // 0x40e474\n            char * v22 = NULL; // 0x40e3c0\n            int64_t v23 = v13; // 0x40e3c0\n            switch (v17) {\n                case 3: {\n                    int64_t v24 = (int64_t)v22; // 0x40e718\n                    int64_t v25 = *(int64_t *)(*(int64_t *)(v23 + v20) + v24); // 0x40e71d\n                    int64_t v26 = 0; // 0x40e729\n                    int64_t v27 = 8 * v24;\n                    int64_t v28 = v23;\n                    int64_t v29 = v28; // 0x40e734\n                    char * v30; // 0x40e3c0\n                    char * v31; // 0x40e3c0\n                    int64_t v32; // 0x40e744\n                    int32_t v33; // 0x40e75b\n                    if ((1 << v26 % 64 & v25) != 0) {\n                        // 0x40e736\n                        v31 = (char *)(v27 + a4);\n                        *v31 = 1;\n                        v29 = v28;\n                        if (v3 != 0) {\n                            // 0x40e744\n                            v32 = v27 + 128;\n                            v30 = v31;\n                            if ((int32_t)v32 < 384) {\n                                // 0x40e753\n                                v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                v30 = (char *)((int64_t)v33 + a4);\n                            }\n                            // 0x40e762\n                            *v30 = 1;\n                            v29 = v32 & 0xffffffff;\n                        }\n                    }\n                    int64_t v34 = v29;\n                    int64_t v35 = v27 + 1; // 0x40e769\n                    v26 = v26 + 1 & 0xffffffff;\n                    while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                        // 0x40e730\n                        v27 = v35;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40e736\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40e744\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40e753\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40e762\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40e765\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                    }\n                    // 0x40e773\n                    v14 = v21;\n                    v15 = v16;\n                    v12 = v34;\n                    while (v22 != (char *)24) {\n                        // 0x40e788\n                        v1 = v34;\n                        v22 = (char *)(v24 + 8);\n                        v24 = (int64_t)v22;\n                        v25 = *(int64_t *)(*(int64_t *)(v34 + v20) + v24);\n                        v26 = 0;\n                        v27 = 8 * v24;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40e736\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40e744\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40e753\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40e762\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40e765\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                        while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                            // 0x40e730\n                            v27 = v35;\n                            v28 = v34;\n                            v29 = v28;\n                            if ((1 << v26 % 64 & v25) != 0) {\n                                // 0x40e736\n                                v31 = (char *)(v27 + a4);\n                                *v31 = 1;\n                                v29 = v28;\n                                if (v3 != 0) {\n                                    // 0x40e744\n                                    v32 = v27 + 128;\n                                    v30 = v31;\n                                    if ((int32_t)v32 < 384) {\n                                        // 0x40e753\n                                        v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                        v30 = (char *)((int64_t)v33 + a4);\n                                    }\n                                    // 0x40e762\n                                    *v30 = 1;\n                                    v29 = v32 & 0xffffffff;\n                                }\n                            }\n                            // 0x40e765\n                            v34 = v29;\n                            v35 = v27 + 1;\n                            v26 = v26 + 1 & 0xffffffff;\n                        }\n                        // 0x40e773\n                        v14 = v21;\n                        v15 = v16;\n                        v12 = v34;\n                    }\n                    goto lab_0x40e43f;\n                }\n                case 6: {\n                    // 0x40e5c5\n                    v18 = *(int64_t *)v16;\n                    if (*v2 < 2) {\n                        goto lab_0x40e5f6;\n                    } else {\n                        // 0x40e5d5\n                        if (*(int64_t *)(v18 + 72) != 0) {\n                            goto lab_0x40e6bc;\n                        } else {\n                            // 0x40e5e0\n                            if (*(char *)(v18 + 32) % 2 != 0) {\n                                goto lab_0x40e6bc;\n                            } else {\n                                // 0x40e5eb\n                                if (*(int64_t *)(v18 + 64) != 0) {\n                                    goto lab_0x40e6bc;\n                                } else {\n                                    goto lab_0x40e5f6;\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    int64_t v36 = v21 & 253; // 0x40e42a\n                    if (v36 == 5) {\n                        // break -> 0x40e794\n                        break;\n                    }\n                    // 0x40e436\n                    v14 = v36;\n                    v15 = v16;\n                    v12 = v13;\n                    if (v17 == 2) {\n                        int128_t v37 = __asm_movdqa(g17); // 0x40e810\n                        __asm_movups(*(int128_t *)&v1, v37);\n                        __asm_movups(*(int128_t *)(a4 + 16), v37);\n                        __asm_movups(*(int128_t *)(a4 + 32), v37);\n                        __asm_movups(*(int128_t *)(a4 + 48), v37);\n                        __asm_movups(*(int128_t *)(a4 + 64), v37);\n                        __asm_movups(*(int128_t *)(a4 + 80), v37);\n                        __asm_movups(*(int128_t *)(a4 + 96), v37);\n                        __asm_movups(*(int128_t *)(a4 + 112), v37);\n                        __asm_movups(*(int128_t *)(a4 + 128), v37);\n                        __asm_movups(*(int128_t *)(a4 + 144), v37);\n                        __asm_movups(*(int128_t *)(a4 + 160), v37);\n                        __asm_movups(*(int128_t *)(a4 + 176), v37);\n                        __asm_movups(*(int128_t *)(a4 + 192), v37);\n                        __asm_movups(*(int128_t *)(a4 + 208), v37);\n                        __asm_movups(*(int128_t *)(a4 + 224), v37);\n                        __asm_movups(*(int128_t *)(a4 + 240), v37);\n                        goto lab_0x40e87f;\n                    }\n                    goto lab_0x40e43f;\n                }\n            }\n        } else {\n            char * v38 = (char *)v16; // 0x40e47f\n            int64_t v39 = (int64_t)*v38; // 0x40e47f\n            *(char *)(v39 + a4) = 1;\n            if (v3 != 0) {\n                int32_t v40 = *(int32_t *)(4 * v39 + (int64_t)*__ctype_tolower_loc()); // 0x40e49e\n                *(char *)((int64_t)v40 + a4) = 1;\n            }\n            // 0x40e4a7\n            v14 = v39;\n            v15 = v16;\n            v12 = v13;\n            if ((*v4 & 64) == 0) {\n                goto lab_0x40e43f;\n            } else {\n                // 0x40e4b2\n                v14 = v39;\n                v15 = v16;\n                v12 = v13;\n                if (*v2 < 2) {\n                    goto lab_0x40e43f;\n                } else {\n                    // 0x40e4bf\n                    v1 = v20;\n                    wstr = *v38;\n                    int64_t v41 = v19 + 1; // 0x40e4d2\n                    int64_t v42 = 1; // 0x40e4da\n                    if (*v5 > v41) {\n                        // 0x40e4e0\n                        v42 = 1;\n                        if ((*(int32_t *)(v16 + 24) & 0x2000ff) == 0x200001) {\n                            int64_t v43 = v41; // 0x40e52e\n                            int64_t v44; // bp-311, 0x40e3c0\n                            int64_t v45 = &v44; // 0x40e3c0\n                            int64_t v46 = v45 + 1; // 0x40e52a\n                            v43++;\n                            *(char *)v45 = *(char *)(v16 + 16);\n                            while (*v5 > v43) {\n                                int64_t v47 = 16 * v43 + v13; // 0x40e513\n                                v45 = v46;\n                                if ((*(int32_t *)(v47 + 8) & 0x2000ff) != 0x200001) {\n                                    // break -> 0x40e53f\n                                    break;\n                                }\n                                v46 = v45 + 1;\n                                v43++;\n                                *(char *)v45 = *(char *)v47;\n                            }\n                            // 0x40e53f\n                            v42 = v46 - v6;\n                        }\n                    }\n                    // 0x40e54a\n                    ps = 0;\n                    int32_t wc; // bp-324, 0x40e3c0\n                    int64_t v48 = function_4083e0(&wc, v6, v42); // 0x40e565\n                    v14 = v42;\n                    v15 = v6;\n                    v12 = &wc;\n                    if (v48 != v42) {\n                        goto lab_0x40e43f;\n                    } else {\n                        uint32_t wc2 = towlower(wc); // 0x40e577\n                        int64_t v49 = wc2; // 0x40e586\n                        int32_t v50 = wcrtomb(&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40e588\n                        v14 = v7;\n                        v15 = v49;\n                        v12 = v6;\n                        if (v50 == -1) {\n                            goto lab_0x40e43f;\n                        } else {\n                            int64_t v51 = v11 + 1; // 0x40e59c\n                            *(char *)((int64_t)wstr + a4) = 1;\n                            v8 = v7;\n                            v9 = v51;\n                            v10 = v6;\n                            if (v51 >= v49) {\n                                // 0x40e5b3\n                                return result2;\n                            }\n                            goto lab_0x40e451_2;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v17 != 2) {\n        // 0x40e5b3\n    }\n  lab_0x40e43f:;\n    int64_t v52 = v11 + 1; // 0x40e444\n    v8 = v14;\n    v9 = v52;\n    v10 = v12;\n    if (v52 >= v15) {\n        // 0x40e5b3\n        return result2;\n    }\n    goto lab_0x40e451_2;\n  lab_0x40e5f6:;\n    int64_t * v53 = (int64_t *)(v18 + 40); // 0x40e5f9\n    int64_t v54 = *v53; // 0x40e5f9\n    v14 = 6;\n    v15 = v16;\n    v12 = v13;\n    if (v54 >= 0 == (v54 != 0)) {\n        int64_t * v55 = (int64_t *)v18; // 0x40e61f\n        int64_t v56 = 0; // 0x40e608\n        ps = 0;\n        int64_t v57 = 4 * v56; // 0x40e62d\n        uint32_t wc3 = *(int32_t *)(*v55 + v57); // 0x40e635\n        int32_t v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40e639\n        int64_t v59 = v7; // 0x40e642\n        int32_t v60; // 0x40e665\n        int64_t v61; // 0x40e644\n        if (v58 != -1) {\n            // 0x40e644\n            v61 = wstr;\n            *(char *)(v61 + a4) = 1;\n            v59 = v61;\n            if (v3 != 0) {\n                // 0x40e658\n                v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                *(char *)((int64_t)v60 + a4) = 1;\n                v59 = v61;\n            }\n        }\n        int64_t v62 = wc3; // 0x40e635\n        int64_t v63 = v59;\n        int64_t v64 = v63; // 0x40e677\n        int64_t v65 = v62; // 0x40e677\n        uint32_t wc4; // 0x40e68d\n        int64_t v66; // 0x40e69c\n        int32_t v67; // 0x40e69e\n        if ((*v4 & 64) != 0) {\n            // 0x40e679\n            v64 = v63;\n            v65 = v62;\n            if (*v2 >= 2) {\n                // 0x40e686\n                wc4 = towlower(*(int32_t *)(*v55 + v57));\n                v66 = wc4;\n                v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                v64 = v7;\n                v65 = v66;\n                if (v67 != -1) {\n                    // 0x40e6ad\n                    *(char *)((int64_t)wstr + a4) = 1;\n                    v64 = v7;\n                    v65 = v66;\n                }\n            }\n        }\n        // 0x40e608\n        v56++;\n        v14 = v64;\n        v15 = v65;\n        v12 = v6;\n        while (v56 < *v53) {\n            // 0x40e616\n            ps = 0;\n            v57 = 4 * v56;\n            wc3 = *(int32_t *)(*v55 + v57);\n            v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps);\n            v59 = v7;\n            if (v58 != -1) {\n                // 0x40e644\n                v61 = wstr;\n                *(char *)(v61 + a4) = 1;\n                v59 = v61;\n                if (v3 != 0) {\n                    // 0x40e658\n                    v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                    *(char *)((int64_t)v60 + a4) = 1;\n                    v59 = v61;\n                }\n            }\n            // 0x40e66e\n            v62 = wc3;\n            v63 = v59;\n            v64 = v63;\n            v65 = v62;\n            if ((*v4 & 64) != 0) {\n                // 0x40e679\n                v64 = v63;\n                v65 = v62;\n                if (*v2 >= 2) {\n                    // 0x40e686\n                    wc4 = towlower(*(int32_t *)(*v55 + v57));\n                    v66 = wc4;\n                    v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                    v64 = v7;\n                    v65 = v66;\n                    if (v67 != -1) {\n                        // 0x40e6ad\n                        *(char *)((int64_t)wstr + a4) = 1;\n                        v64 = v7;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x40e608\n            v56++;\n            v14 = v64;\n            v15 = v65;\n            v12 = v6;\n        }\n    }\n    goto lab_0x40e43f;\n    // 0x40e451\n    goto lab_0x40e451_2;\n  lab_0x40e6bc:\n    // 0x40e6bc\n    ps = 0;\n    wstr = 0;\n    if (function_4083e0(NULL, v7, 1) == -2) {\n        // 0x40e6ed\n        *(char *)((int64_t)ps + a4) = 1;\n    }\n    char v68 = ps + 1; // 0x40e6f7\n    ps = v68;\n    v14 = 1;\n    v15 = v7;\n    v12 = 0;\n    while (v68 != 0) {\n        // 0x40e6c8\n        wstr = 0;\n        if (function_4083e0(NULL, v7, 1) == -2) {\n            // 0x40e6ed\n            *(char *)((int64_t)ps + a4) = 1;\n        }\n        // 0x40e6f7\n        v68 = ps + 1;\n        ps = v68;\n        v14 = 1;\n        v15 = v7;\n        v12 = 0;\n    }\n    goto lab_0x40e43f;\n  lab_0x40e87f:;\n    char * v69 = (char *)(result + 56); // 0x40e884\n    *v69 = *v69 | 1;\n    // 0x40e5b3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e8a0",
            "funcStartAddr": "40e8a0",
            "funcEndAddr": "40eb24",
            "decompiledFuncCode": "int64_t function_40e8a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = 16 * a3 + a1; // 0x40e8a8\n    char v2 = *(char *)(v1 + 8); // 0x40e8b2\n    if (v2 == 7) {\n        int64_t v3 = *(int64_t *)(a4 + 8); // 0x40e9c8\n        int64_t v4 = v3 + a5; // 0x40e9cc\n        unsigned char v5 = *(char *)v4; // 0x40e9cc\n        if (v5 < 194) {\n            // 0x40e8f0\n            return 0;\n        }\n        uint64_t v6 = *(int64_t *)(a4 + 88); // 0x40e9da\n        uint64_t v7 = a5 + 1;\n        if (v7 >= v6) {\n            // 0x40e8f0\n            return 0;\n        }\n        int64_t v8 = v3 + v7;\n        unsigned char v9 = *(char *)v8; // 0x40e9eb\n        if (v5 < 224) {\n            // 0x40eac3\n            if (v9 == -65 || (v9 ^ -128) < 63) {\n                // 0x40e8f0\n                return 2;\n            }\n            // 0x40e8f0\n            return 0;\n        }\n        int64_t v10; // 0x40e8a0\n        if (v5 < 240) {\n            // 0x40ea03\n            v10 = 3;\n            if (v5 == -32 == v9 < 160) {\n                // 0x40e8f0\n                return 0;\n            }\n        } else {\n            if (v5 < 248) {\n                // 0x40eaa5\n                v10 = 4;\n                if (v5 == -16 == v9 < 144) {\n                    // 0x40e8f0\n                    return 0;\n                }\n            } else {\n                if (v5 < 252) {\n                    // 0x40eadf\n                    v10 = 5;\n                    if (v5 == -8 == v9 < 136) {\n                        // 0x40e8f0\n                        return 0;\n                    }\n                } else {\n                    if (v5 >= 254) {\n                        // 0x40e8f0\n                        return 0;\n                    }\n                    // 0x40eb06\n                    v10 = 6;\n                    if (v5 == -4 == v9 < 132) {\n                        // 0x40e8f0\n                        return 0;\n                    }\n                }\n            }\n        }\n        // 0x40ea1c\n        if (v6 < v10 + a5) {\n            // 0x40e8f0\n            return 0;\n        }\n        // 0x40ea29\n        if (v9 != -65 && (v9 ^ -128) >= 63) {\n            // 0x40e8f0\n            return 0;\n        }\n        int64_t v11 = v8; // 0x40ea4e\n        v11++;\n        while (v10 + v4 != v11) {\n            char v12 = *(char *)v11;\n            if (v12 != -65 && (v12 ^ -128) >= 63) {\n                // 0x40e8f0\n                return 0;\n            }\n            v11++;\n        }\n        // 0x40e8f0\n        return v10 & 0xffffffff;\n    }\n    // 0x40e8c1\n    if (*(int32_t *)(a4 + 144) == 1) {\n        // 0x40e8f0\n        return 0;\n    }\n    int64_t v13 = function_40a0d0(a4, a5); // 0x40e8d6\n    int64_t v14 = v13 & 0xffffffff; // 0x40e8db\n    if (v2 == 5) {\n        if ((int32_t)v13 < 2) {\n            // 0x40e8f0\n            return 0;\n        }\n        if ((a5 & 64) == 0) {\n            // 0x40e90c\n            if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 10) {\n                // 0x40e8f0\n                return 0;\n            }\n        }\n        // 0x40e917\n        if ((char)a5 > -1) {\n            // 0x40e8f0\n            return v14 & 0xffffffff;\n        }\n        // 0x40e91b\n        if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 0) {\n            // 0x40e8f0\n            return 0;\n        }\n        // 0x40e8f0\n        return v14 & 0xffffffff;\n    }\n    if (v2 == 6 != (int32_t)v13 > 1) {\n        // 0x40e8f0\n        return 0;\n    }\n    int64_t v15 = *(int64_t *)v1; // 0x40e930\n    int64_t * v16 = (int64_t *)(v15 + 64); // 0x40e933\n    int64_t v17 = *v16; // 0x40e933\n    int64_t v18 = *(int64_t *)(v15 + 40); // 0x40e937\n    if (v17 != 0) {\n        goto lab_0x40e94d;\n    } else {\n        // 0x40e940\n        if ((*(int64_t *)(v15 + 72) || v18) == 0) {\n            goto lab_0x40ea8d;\n        } else {\n            goto lab_0x40e94d;\n        }\n    }\n  lab_0x40e9b2_2:\n    // 0x40e9b2\n    if (*(char *)(v15 + 32) % 2 == 0) {\n        // 0x40e8f0\n        return v14 & 0xffffffff;\n    }\n    // 0x40e8f0\n    return 0;\n  lab_0x40e94d:;\n    uint32_t wc = *(int32_t *)(*(int64_t *)(a4 + 16) + 4 * a5); // 0x40e951\n    if (v18 < 1) {\n        goto lab_0x40e97f;\n    } else {\n        int64_t v19 = *(int64_t *)v15; // 0x40e95a\n        if (*(int32_t *)v19 == wc) {\n            goto lab_0x40e9b2_2;\n        } else {\n            int64_t v20 = 1; // 0x40e976\n            while (v18 != v20) {\n                // 0x40e970\n                if (*(int32_t *)(4 * v20 + v19) == wc) {\n                    goto lab_0x40e9b2_2;\n                }\n                v20++;\n            }\n            goto lab_0x40e97f;\n        }\n    }\n  lab_0x40e97f:;\n    int64_t * v21 = (int64_t *)(v15 + 72); // 0x40e97f\n    int64_t v22 = v17; // 0x40e986\n    if (*v21 < 1) {\n        goto lab_0x40ea5c;\n    } else {\n        int64_t v23 = 0; // 0x40e990\n        int64_t v24 = *(int64_t *)(v15 + 24); // 0x40e99e\n        while (iswctype(wc, (int32_t)*(int64_t *)(v24 + 8 * v23)) == 0) {\n            // 0x40e990\n            v23++;\n            if (v23 >= *v21) {\n                // 0x40ea58\n                v22 = *v16;\n                goto lab_0x40ea5c;\n            }\n            v24 = *(int64_t *)(v15 + 24);\n        }\n        goto lab_0x40e9b2_2;\n    }\n  lab_0x40ea8d:\n    // 0x40ea8d\n    if (*(char *)(v15 + 32) % 2 != 0) {\n        // 0x40e8f0\n        return v14 & 0xffffffff;\n    }\n    // 0x40e8f0\n    return 0;\n  lab_0x40ea5c:\n    // 0x40ea5c\n    if (v22 >= 1) {\n        int64_t v25 = 0; // 0x40ea67\n        int64_t v26 = 4 * v25; // 0x40ea70\n        if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n            // 0x40ea76\n            if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                goto lab_0x40e9b2_2;\n            }\n        }\n        // 0x40ea84\n        v25++;\n        while (v25 != v22) {\n            // 0x40ea70\n            v26 = 4 * v25;\n            if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n                // 0x40ea76\n                if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                    goto lab_0x40e9b2_2;\n                }\n            }\n            // 0x40ea84\n            v25++;\n        }\n    }\n    goto lab_0x40ea8d;\n}\n"
        },
        {
            "funcName": "function_40eb30",
            "funcStartAddr": "40eb30",
            "funcEndAddr": "40f24f",
            "decompiledFuncCode": "int64_t function_40eb30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    // 0x40eb30\n    int128_t v1; // 0x40eb30\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 152); // 0x40eb51\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x40eb58\n    int64_t v5 = *v4; // 0x40eb58\n    int64_t v6 = *(int64_t *)(*(int64_t *)v3 + 16 * a3); // 0x40eb69\n    int32_t * v7 = (int32_t *)(a1 + 224); // 0x40eb7b\n    int32_t result = 0; // bp-128, 0x40eb82\n    int64_t v8 = (int64_t)*v7 + a6; // 0x40eb8a\n    int64_t * v9; // 0x40eb30\n    int64_t v10; // 0x40eb30\n    if (v8 < v5) {\n        // 0x40eb30\n        v9 = (int64_t *)(a2 + 16);\n        v10 = a2;\n    } else {\n        int64_t v11 = v8 + 1; // 0x40f180\n        if (0x7fffffffffffffff - v5 < v11) {\n            // 0x40eff6\n            return 12;\n        }\n        uint64_t v12 = v11 + v5; // 0x40f1a0\n        if (v12 >= 0x2000000000000000) {\n            // 0x40eff6\n            return 12;\n        }\n        int64_t * v13 = (int64_t *)(a2 + 16);\n        int64_t * mem = realloc((int64_t *)*v13, 8 * (int32_t)v12); // 0x40f1ba\n        if (mem == NULL) {\n            // 0x40eff6\n            return 12;\n        }\n        int64_t v14 = (int64_t)mem; // 0x40f1ba\n        *v13 = v14;\n        *v4 = v12;\n        memset((int64_t *)(8 * v5 + v14), 0, 8 * (int32_t)v11);\n        v9 = v13;\n        v10 = 0;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 184); // 0x40eb96\n    int64_t v16 = *v15; // 0x40eb96\n    int32_t * v17 = (int32_t *)(a1 + 160); // 0x40eba3\n    int32_t v18 = *v17; // 0x40eba3\n    int64_t v19 = *v9; // 0x40ebae\n    int64_t * v20 = (int64_t *)(a1 + 72); // 0x40ebb7\n    int64_t v21 = *v20; // 0x40ebb7\n    *v15 = v19;\n    int128_t v22; // bp-120, 0x40eb30\n    int32_t v23; // 0x40eb30\n    int64_t v24; // 0x40ebef\n    if (v10 == 0) {\n        // 0x40f0f0\n        *v20 = a4;\n        v23 = function_40be50(a1, a4 - 1, v18);\n        goto lab_0x40f104;\n    } else {\n        // 0x40ebd2\n        *v20 = v10;\n        v23 = function_40be50(a1, v10 - 1, v18);\n        if (v10 == a4) {\n            goto lab_0x40f104;\n        } else {\n            // 0x40ebef\n            v24 = *(int64_t *)(v19 + 8 * v10);\n            if (v24 == 0) {\n                goto lab_0x40ec03;\n            } else {\n                // 0x40ebf8\n                if ((*(char *)(v24 + 104) & 64) != 0) {\n                    int64_t v25 = function_40b1c0((int64_t)&v22, v24 + 8); // 0x40f01f\n                } else {\n                    goto lab_0x40ec03;\n                }\n            }\n        }\n    }\n  lab_0x40efd0_2:\n    // 0x40efd0\n    free(NULL);\n    result = 12;\n    int64_t v26; // 0x40eb30\n    int64_t v27 = v26; // 0x40efdd\n    goto lab_0x40efe5_2;\n  lab_0x40ee40_2:\n    // 0x40ee40\n    free(NULL);\n    int32_t v52; // bp-124, 0x40eb30\n    int32_t v53 = v52; // 0x40ee52\n    result = v53;\n    int128_t v54; // 0x40eca2\n    int128_t v45 = v54; // 0x40ee5c\n    v27 = v26;\n    if (v53 != 0) {\n        goto lab_0x40efe5_2;\n    } else {\n        goto lab_0x40eecc;\n    }\n  lab_0x40ef3d_2:\n    // 0x40ef3d\n    free((int64_t *)v26);\n    int64_t v55 = *(int64_t *)(*v15 + 8 * a6); // 0x40ef57\n    int64_t result2; // 0x40eb30\n    int64_t v33; // 0x40eb30\n    if (v55 == 0) {\n        // 0x40f218\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = 1;\n    } else {\n        // 0x40ef64\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = function_40a120(*(int64_t *)(v55 + 16), v55 + 24, a5) == 0;\n    }\n    // 0x40eff6\n    return result2;\n  lab_0x40ecf0:;\n    // 0x40ecf0\n    int64_t v56; // 0x40eb30\n    int64_t v57 = v56;\n    int64_t v58; // 0x40eb30\n    if ((char)function_40bf40(a1, v57, v58) == 0) {\n        goto lab_0x40ed2f;\n    } else {\n        goto lab_0x40ed0d;\n    }\n  lab_0x40ed2f:;\n    // 0x40ed2f\n    int64_t v59; // 0x40eb30\n    int64_t v60 = v59 + 1; // 0x40ed2f\n    int64_t * v61; // 0x40eca6\n    uint64_t v62 = *v61; // 0x40ed33\n    int64_t v63 = v60; // 0x40ed37\n    if (v60 >= v62) {\n        // break -> 0x40f0ad\n        goto lab_0x40f0ad;\n    }\n    goto lab_0x40ed3d;\n  lab_0x40ed0d:;\n    // 0x40ed0d\n    int64_t * v77; // 0x40eb30\n    int64_t v92 = *v77; // 0x40ed0d\n    int64_t v68; // 0x40ed45\n    int64_t v93 = *(int64_t *)(v92 + 8 * v68); // 0x40ed1e\n    int64_t v94; // 0x40eb30\n    if ((char)function_408b10(v94, v93) == 0) {\n        goto lab_0x40efd0_2;\n    }\n    goto lab_0x40ed2f;\n  lab_0x40eca2:;\n    // 0x40eca2\n    int128_t v40; // 0x40eb30\n    v54 = __asm_pxor(v40, v40);\n    v52 = 0;\n    int128_t v83 = __asm_movaps(v54); // bp-88, 0x40ecbb\n    int64_t v39; // 0x40eb30\n    if (*(int64_t *)(v39 + 40) >= 1) {\n        // 0x40ecd5\n        int64_t v88; // 0x40ecab\n        int64_t v73 = v88 + 216; // 0x40ecd7\n        int64_t * v65 = (int64_t *)(v39 + 48); // 0x40ed3d\n        int64_t * v67 = (int64_t *)v88; // 0x40ed41\n        int32_t v95; // 0x40ec62\n        v58 = v95;\n        v77 = (int64_t *)(v88 + 24);\n        v63 = 0;\n        while (true) {\n          lab_0x40ed3d:\n            // 0x40ed3d\n            v59 = v63;\n            int64_t v64 = *v65; // 0x40ed3d\n            int64_t v66 = *v67; // 0x40ed41\n            v68 = *(int64_t *)(v64 + 8 * v59);\n            int64_t v69 = 16 * v68; // 0x40ed4c\n            int64_t v70 = v69 + v66; // 0x40ed50\n            char v71 = *(char *)(v70 + 10); // 0x40ed54\n            v56 = v70;\n            if ((v71 & 16) == 0) {\n                goto lab_0x40ecf0;\n            } else {\n                int64_t v72 = function_40e8a0(v66, v73, v68, a1, v58); // 0x40ed69\n                int32_t v74 = v72; // 0x40ed71\n                if (v74 < 2) {\n                    if (v74 != 0) {\n                        goto lab_0x40ed0d;\n                    } else {\n                        int64_t v75 = *v67; // 0x40efa8\n                        v56 = v75 + v69;\n                        goto lab_0x40ecf0;\n                    }\n                } else {\n                    int64_t v76 = *v77; // 0x40ed85\n                    int64_t v78 = *v15; // 0x40ed92\n                    int64_t v79 = *(int64_t *)(v76 + 8 * v68); // 0x40ed9a\n                    int64_t v80 = 8 * ((0x100000000 * v72 >> 32) + v58); // 0x40ed9e\n                    int64_t v81 = *(int64_t *)(v78 + v80); // 0x40eda6\n                    if (v81 != 0) {\n                        int64_t v82 = function_40a660((int64_t *)&v83, (int128_t *)(v81 + 8)); // 0x40edcc\n                        int32_t v84 = v82; // 0x40edd6\n                        v52 = v84;\n                        if (v84 != 0) {\n                            goto lab_0x40ee40_2;\n                        }\n                    }\n                    // 0x40edde\n                    int64_t v85; // 0x40eb30\n                    if ((char)function_408b10(v85, v79) == 0) {\n                        goto lab_0x40efd0_2;\n                    }\n                    int64_t v86 = *v15; // 0x40ee06\n                    int64_t v87 = function_40b6d0(&v52, v88, (int64_t *)&v83, v58, v58, a6); // 0x40ee0e\n                    *(int64_t *)(v86 + v80) = v87;\n                    int64_t v89 = *v15; // 0x40ee17\n                    int64_t v90 = *(int64_t *)(v89 + v80); // 0x40ee1f\n                    int32_t v91 = v52; // 0x40ee2a\n                    if (v90 == 0 && v91 != 0) {\n                        goto lab_0x40ee40_2;\n                    }\n                    goto lab_0x40ed0d;\n                }\n            }\n        }\n    }\n  lab_0x40f0ad:\n    // 0x40f0ad\n    free(NULL);\n    result = 0;\n    v45 = v54;\n    goto lab_0x40eecc;\n  lab_0x40eecc:;\n    // 0x40eecc\n    int64_t v42; // 0x40eb30\n    int64_t v96 = function_40be50(a1, (int64_t)((int32_t)v42 - 1), *v17); // 0x40eedb\n    int64_t v97 = function_40b3d0((int128_t *)&result, v3, (int64_t *)&v22, (int32_t)v96); // 0x40eef4\n    int64_t v98; // 0x40eb30\n    int64_t v41; // 0x40eb30\n    int64_t v99; // 0x40eb30\n    int64_t v43; // 0x40ec52\n    if (v97 == 0) {\n        // 0x40f0c0\n        v27 = v26;\n        if (result != 0) {\n            // break -> 0x40efe5\n            goto lab_0x40efe5_2;\n        }\n        int64_t v100 = *v15; // 0x40f0cc\n        *(int64_t *)(v100 + v43) = 0;\n        v99 = v41 + 1;\n        v98 = v100;\n    } else {\n        int64_t v101 = *v15; // 0x40ef05\n        *(int64_t *)(v101 + v43) = v97;\n        v99 = 0;\n        v98 = v101;\n    }\n    // 0x40ef1f\n    v33 = v42;\n    if (v42 >= a6) {\n        goto lab_0x40ef3d_2;\n    }\n    int64_t v34 = v99; // 0x40ef37\n    int128_t v35 = v45; // 0x40ef37\n    int64_t v36 = v98; // 0x40ef37\n    int64_t v37 = v42; // 0x40ef37\n    int64_t v38 = v97; // 0x40ef37\n    v33 = v42;\n    if (v99 > (int64_t)*v7) {\n        goto lab_0x40ef3d_2;\n    }\n    goto lab_0x40ec4e;\n  lab_0x40f104:\n    // 0x40f104\n    v22 = 1;\n    int64_t * mem2 = malloc(8); // 0x40f121\n    if (mem2 == NULL) {\n        // 0x40eff6\n        return 12;\n    }\n    int64_t v102 = (int64_t)mem2; // 0x40f121\n    *mem2 = a3;\n    int32_t v103 = 0x100000000 * a7 >> 32;\n    result = 0;\n    int32_t v104 = function_40aa90(v3, (int64_t *)&v22, v6, v103); // 0x40f166\n    result = v104;\n    v27 = v102;\n    if (v104 == 0) {\n        goto lab_0x40f042;\n    } else {\n        goto lab_0x40efe5_2;\n    }\n  lab_0x40f042:;\n    int32_t v105 = function_40b970(a1, &v22, a4, v6, v103); // 0x40f05d\n    result = v105;\n    v27 = v102;\n    int64_t v51 = a4; // 0x40f063\n    int64_t v50 = v102; // 0x40f063\n    int32_t v49 = v23; // 0x40f063\n    if (v105 != 0) {\n        goto lab_0x40efe5_2;\n    } else {\n        goto lab_0x40f065;\n    }\n  lab_0x40efe5_2:\n    // 0x40efe5\n    free((int64_t *)v27);\n    // 0x40eff6\n    return result;\n  lab_0x40ec03:;\n    int128_t v28 = __asm_pxor(v2, v2); // 0x40ec0f\n    v22 = __asm_movaps(v28);\n    int64_t v29 = 0; // 0x40ec13\n    int128_t v30 = v28; // 0x40ec13\n    int64_t v31 = v10; // 0x40ec13\n    int64_t v32 = v24; // 0x40ec13\n    goto lab_0x40ec1b;\n  lab_0x40f065:;\n    int64_t v48 = function_40b3d0((int128_t *)&result, v3, (int64_t *)&v22, v49); // 0x40f075\n    v27 = v50;\n    if (v48 != 0 || result == 0) {\n        // 0x40f086\n        *(int64_t *)(*v15 + 8 * v51) = v48;\n        v29 = v50;\n        v31 = v51;\n        v32 = v48;\n        goto lab_0x40ec1b;\n    } else {\n        goto lab_0x40efe5_2;\n    }\n  lab_0x40ec1b:\n    // 0x40ec1b\n    v26 = v29;\n    v33 = v31;\n    if (v31 < a6) {\n        // 0x40ec26\n        v33 = v31;\n        if (*v7 < 0) {\n            goto lab_0x40ef3d_2;\n        } else {\n            // 0x40ec36\n            v34 = 0;\n            v35 = v30;\n            v36 = *v15;\n            v37 = v31;\n            v38 = v32;\n            while (true) {\n              lab_0x40ec4e:\n                // 0x40ec4e\n                v39 = v38;\n                v40 = v35;\n                v41 = v34;\n                v42 = v37 + 1;\n                v43 = 8 * v42;\n                int64_t v44 = *(int64_t *)(v43 + v36); // 0x40ec52\n                if (v44 == 0) {\n                    // 0x40efb8\n                    v45 = v40;\n                    if (v39 != 0) {\n                        goto lab_0x40eca2;\n                    } else {\n                        goto lab_0x40eecc;\n                    }\n                } else {\n                    int64_t v46 = function_40a660((int64_t *)&v22, (int128_t *)(v44 + 8)); // 0x40ec88\n                    int32_t v47 = v46; // 0x40ec8d\n                    result = v47;\n                    v27 = v26;\n                    if (v47 != 0) {\n                        // break -> 0x40efe5\n                        break;\n                    }\n                    // 0x40ec99\n                    v45 = v40;\n                    if (v39 == 0) {\n                        goto lab_0x40eecc;\n                    } else {\n                        goto lab_0x40eca2;\n                    }\n                }\n            }\n            goto lab_0x40efe5_2;\n        }\n    } else {\n        goto lab_0x40ef3d_2;\n    }\n}\n"
        },
        {
            "funcName": "function_40f250",
            "funcStartAddr": "40f250",
            "funcEndAddr": "40fb13",
            "decompiledFuncCode": "int64_t function_40f250(int64_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40f250\n    int128_t v1; // 0x40f250\n    int128_t v2 = v1;\n    int64_t v3 = 0; // bp-88, 0x40f274\n    int64_t v4 = 0; // 0x40f296\n    if ((char)a5 != 0) {\n        int64_t * mem = malloc(96); // 0x40f2a5\n        v4 = &v3;\n        if (mem == NULL) {\n            // 0x40f5b9\n            return 12;\n        }\n    }\n    int128_t v5 = __asm_pxor(v2, v2); // 0x40f2c5\n    int64_t v6 = 0; // bp-104, 0x40f2c9\n    int128_t v7 = __asm_movaps(v5); // bp-120, 0x40f2d1\n    uint64_t v8 = 16 * a3; // 0x40f2e3\n    int32_t size = v8; // 0x40f2e7\n    int64_t result; // 0x40f250\n    int64_t v9; // 0x40f250\n    char v10; // 0x40f250\n    if (v8 < 4031) {\n        // 0x40f2fa\n        v10 = 0;\n        int64_t v11; // bp-216, 0x40f250\n        v9 = (int64_t)&v11 + -1 - v8 & -16;\n    } else {\n        int64_t * mem2 = malloc(size); // 0x40fa37\n        v10 = 1;\n        v9 = (int64_t)mem2;\n        if (mem2 == NULL) {\n            // 0x40fa53\n            result = 12;\n            if (v4 != 0) {\n                // 0x40fa63\n                function_40d880(v4);\n                result = 12;\n            }\n          lab_0x40f5b9:\n            // 0x40f5b9\n            return result;\n        }\n    }\n    int64_t * v12 = (int64_t *)v9; // 0x40f329\n    int64_t * v13 = (int64_t *)a4; // 0x40f329\n    memcpy(v12, v13, size);\n    int64_t v14 = a4; // bp-128, 0x40f33a\n    int64_t * v15 = (int64_t *)(a4 + 8); // 0x40f429\n    int64_t v16 = *v15; // 0x40f429\n    if (v16 < a4) {\n      lab_0x40f590_2:\n        // 0x40f590\n        free((int64_t *)v6);\n        if (v10 != 0) {\n            // 0x40fa6d\n            free(v12);\n            if (v4 == 0) {\n                // 0x40f5b9\n                return 0;\n            }\n        } else {\n            // 0x40f5a6\n            if (v4 == 0) {\n                // 0x40f5b9\n                return 0;\n            }\n        }\n        // 0x40f5b2\n        function_40d880(v4);\n        // 0x40f5b9\n        return 0;\n    }\n    int64_t v17 = (int64_t)a2;\n    int64_t v18 = v4 + 16;\n    int64_t v19 = &v7;\n    int64_t * v20 = (int64_t *)(v17 + 184);\n    int64_t * v21 = (int64_t *)v4;\n    int64_t * v22 = (int64_t *)(v4 + 8);\n    int64_t * v23 = (int64_t *)v18;\n    int64_t v24 = v16; // 0x40f429\n    int64_t v25 = *(int64_t *)(a1 + 144); // 0x40f250\n    int64_t v26 = a4; // 0x40f425\n    int64_t v27; // 0x40f250\n    int64_t v28; // 0x40f250\n    int64_t v29; // 0x40f250\n    int64_t v30; // 0x40f250\n    int64_t v31; // 0x40f250\n    int64_t v32; // 0x40f250\n    int64_t v33; // 0x40f250\n    int64_t v34; // 0x40f250\n    int64_t v35; // 0x40f250\n    int64_t v36; // 0x40f443\n    int64_t v37; // 0x40f5e8\n    while (true) {\n        // 0x40f436\n        int64_t v38; // 0x40f250\n        v34 = v38;\n        v28 = v24;\n        v31 = v26;\n        v29 = v25;\n        while (true) {\n          lab_0x40f436:\n            // 0x40f436\n            v30 = v29;\n            v32 = v31;\n            int64_t v39 = v28;\n            v35 = v34;\n            v36 = 16 * v30;\n            int64_t v40 = v36 + a1; // 0x40f44a\n            char v41 = *(char *)(v40 + 8); // 0x40f44d\n            if (v41 != 8) {\n                // 0x40f350\n                v27 = v39;\n                if (v41 == 9) {\n                    int64_t v42 = *(int64_t *)v40 + 1; // 0x40f5d3\n                    v27 = v39;\n                    if (v42 < a3) {\n                        int64_t v43 = 16 * v42; // 0x40f5e4\n                        v37 = v43 + a4;\n                        if (*(int64_t *)v37 < v32) {\n                            // 0x40f960\n                            *(int64_t *)(v37 + 8) = v32;\n                            memcpy(v12, v13, size);\n                            v27 = *v15;\n                            goto lab_0x40f359;\n                        } else {\n                            // 0x40f5f6\n                            if ((*(char *)(v40 + 10) & 8) == 0) {\n                                goto lab_0x40f60e;\n                            } else {\n                                // 0x40f5fc\n                                if (*(int64_t *)(v43 + v9) != -1) {\n                                    // 0x40f9a0\n                                    memcpy(v13, v12, size);\n                                    int64_t v44 = *v15; // 0x40f9bd\n                                    v27 = v44;\n                                    goto lab_0x40f359;\n                                } else {\n                                    goto lab_0x40f60e;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40f359;\n                    }\n                } else {\n                    goto lab_0x40f359;\n                }\n            } else {\n                int64_t v45 = *(int64_t *)v40 + 1; // 0x40f45d\n                v27 = v39;\n                if (v45 < a3) {\n                    int64_t v46 = 16 * v45 + a4; // 0x40f472\n                    *(int64_t *)(v46 + 8) = -1;\n                    *(int64_t *)v46 = v32;\n                    v27 = *v15;\n                }\n                goto lab_0x40f359;\n            }\n        }\n      lab_0x40f425_2:\n        // 0x40f425\n        v26 = v14;\n        v24 = *v15;\n        v38 = v33;\n        if (v24 < v26) {\n            goto lab_0x40f590_2;\n        }\n    }\n  lab_0x40f920_3:\n    // 0x40f920\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40fa90\n        free(v12);\n        goto lab_0x40f936;\n    } else {\n        goto lab_0x40f936;\n    }\n  lab_0x40f82a_3:\n    // 0x40f82a\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40fb02\n        free(v12);\n        // 0x40f840\n        function_40d880(v4);\n        result = 0;\n        return result;\n    } else {\n        // 0x40f840\n        function_40d880(v4);\n        result = 0;\n        return result;\n    }\n  lab_0x40f359:;\n    int64_t v47 = v30; // 0x40f35c\n    int64_t v48 = v36; // 0x40f35c\n    if (v32 == v27) {\n        // 0x40f35e\n        v47 = v30;\n        v48 = v36;\n        if (*(int64_t *)(v17 + 176) == v30) {\n            if (v4 == 0) {\n                // 0x40fad9\n                free((int64_t *)v6);\n                result = 0;\n                if (v10 == 0) {\n                    return result;\n                } else {\n                    // 0x40faef\n                    free(v12);\n                    result = (int32_t)&g84 ^ (int32_t)&g84;\n                    return result;\n                }\n            }\n            int64_t v49 = a4; // 0x40f800\n            int64_t v50 = 0; // 0x40f800\n            if (a3 == 0) {\n                goto lab_0x40f82a_3;\n            }\n            int64_t v51; // 0x40f250\n            while (true) {\n                // 0x40f810\n                v51 = v50;\n                int64_t v52 = v49;\n                if (*(int64_t *)v52 >= 0) {\n                    // 0x40f816\n                    if (*(int64_t *)(v52 + 8) == -1) {\n                        // break -> 0x40f858\n                        break;\n                    }\n                }\n                // 0x40f81d\n                v50 = v51 + 1;\n                v49 = v52 + 16;\n                if (v50 == a3) {\n                    goto lab_0x40f82a_3;\n                }\n            }\n            if (v51 == a3) {\n                goto lab_0x40f82a_3;\n            }\n            int64_t v53 = function_40d8d0(v4, v18, &v14, a3, a4, &v7); // 0x40f87e\n            v47 = v53;\n            v48 = 16 * v53;\n        }\n    }\n    int64_t v54 = v48;\n    int64_t v55 = v47;\n    int64_t v56 = *(int64_t *)(v17 + 152); // 0x40f36c\n    int64_t * v57 = (int64_t *)v56; // 0x40f374\n    int64_t v58 = *v57; // 0x40f374\n    int64_t v59 = v58 + v54; // 0x40f377\n    char v60 = *(char *)(v59 + 8); // 0x40f37b\n    int64_t v61; // 0x40f250\n    int64_t v62; // 0x40f250\n    int64_t v63; // 0x40f250\n    int64_t v64; // 0x40f250\n    int64_t v65; // 0x40f250\n    int64_t v66; // 0x40f250\n    int64_t v67; // 0x40f250\n    int64_t v68; // 0x40f250\n    int64_t v69; // 0x40f250\n    int64_t v70; // 0x40f250\n    int64_t v71; // 0x40f250\n    int64_t v72; // 0x40f250\n    int64_t v73; // 0x40f71e\n    int64_t v74; // 0x40f500\n    if ((v60 & 8) != 0) {\n        int64_t v75 = *(int64_t *)(8 * v14 + *v20); // 0x40f4a3\n        if ((char)function_408b10(v19, v55) == 0) {\n            // break (via goto) -> 0x40f920\n            goto lab_0x40f920_3;\n        }\n        int64_t v76 = *(int64_t *)(v56 + 40) + 24 * v55; // 0x40f4b6\n        int64_t v77 = *(int64_t *)(v76 + 8); // 0x40f4ce\n        v71 = v35;\n        if (v77 < 1) {\n            goto lab_0x40f54a;\n        } else {\n            // 0x40f4d7\n            v61 = -1;\n            int64_t v78 = 0;\n            v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n            int64_t v79 = v61; // 0x40f515\n            int64_t v80; // 0x40f725\n            int64_t v81; // 0x40f250\n            int64_t * mem3; // 0x40f9f2\n            int64_t v82; // 0x40f9f2\n            int64_t v83; // 0x40f700\n            if (function_40a120(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                // 0x40f517\n                v79 = v74;\n                if (v61 != -1) {\n                    // 0x40f6e8\n                    v83 = function_40a120(v35, (int64_t)&v6, v61);\n                    v69 = v35;\n                    v63 = v83 != 0 ? v74 : v61;\n                    if (v4 == 0 || v83 != 0) {\n                        goto lab_0x40f41c;\n                    } else {\n                        // 0x40f71e\n                        v73 = *v21;\n                        v80 = v73 + 1;\n                        *v21 = v80;\n                        v81 = *v23;\n                        v62 = v81;\n                        if (v80 == *v22) {\n                            // 0x40f9d8\n                            mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                            if (mem3 == NULL) {\n                                goto lab_0x40f790;\n                            } else {\n                                // 0x40fa00\n                                v82 = (int64_t)mem3;\n                                *v22 = 2 * *v22;\n                                *v23 = v82;\n                                v62 = v82;\n                                goto lab_0x40f73a;\n                            }\n                        } else {\n                            goto lab_0x40f73a;\n                        }\n                    }\n                }\n            }\n            int64_t v84 = v79;\n            int64_t v85 = v78 + 1; // 0x40f524\n            while (v77 != v85) {\n                // 0x40f500\n                v61 = v84;\n                v78 = v85;\n                v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n                v79 = v61;\n                if (function_40a120(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                    // 0x40f517\n                    v79 = v74;\n                    if (v61 != -1) {\n                        // 0x40f6e8\n                        v83 = function_40a120(v35, (int64_t)&v6, v61);\n                        v69 = v35;\n                        v63 = v83 != 0 ? v74 : v61;\n                        if (v4 == 0 || v83 != 0) {\n                            goto lab_0x40f41c;\n                        } else {\n                            // 0x40f71e\n                            v73 = *v21;\n                            v80 = v73 + 1;\n                            *v21 = v80;\n                            v81 = *v23;\n                            v62 = v81;\n                            if (v80 == *v22) {\n                                // 0x40f9d8\n                                mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                                if (mem3 == NULL) {\n                                    goto lab_0x40f790;\n                                } else {\n                                    // 0x40fa00\n                                    v82 = (int64_t)mem3;\n                                    *v22 = 2 * *v22;\n                                    *v23 = v82;\n                                    v62 = v82;\n                                    goto lab_0x40f73a;\n                                }\n                            } else {\n                                goto lab_0x40f73a;\n                            }\n                        }\n                    }\n                }\n                // 0x40f524\n                v84 = v79;\n                v85 = v78 + 1;\n            }\n            // 0x40f52d\n            v33 = v35;\n            v25 = v84;\n            v70 = v35;\n            v64 = v84;\n            if (v84 >= 0) {\n                // break -> 0x40f425\n                goto lab_0x40f425_2;\n            }\n            goto lab_0x40f540;\n        }\n    } else {\n        // 0x40f387\n        if ((*(char *)(v59 + 10) & 16) != 0) {\n            int64_t v86 = 0x100000000 * function_40e8a0(v58, v56 + 216, v55, v17, v14);\n            v67 = v86 >> 32;\n            if (v86 != 0) {\n                goto lab_0x40f7d9;\n            } else {\n                // 0x40f649\n                v65 = v14;\n                v68 = *v57 + v54;\n                goto lab_0x40f39d;\n            }\n        } else {\n            if (v60 == 4) {\n                int64_t v87 = a4 + 16 + 16 * *(int64_t *)v59; // 0x40f66b\n                int64_t v88 = *(int64_t *)(v87 + 8); // 0x40f66e\n                int64_t v89 = *(int64_t *)v87; // 0x40f672\n                int64_t n = v88 - v89; // 0x40f678\n                if (v4 == 0) {\n                    // 0x40f7d0\n                    v67 = n;\n                    if (n == 0) {\n                        goto lab_0x40f898;\n                    } else {\n                        goto lab_0x40f7d9;\n                    }\n                } else {\n                    // 0x40f689\n                    v72 = v35;\n                    if (v88 == -1 || v89 == -1) {\n                        goto lab_0x40f558;\n                    } else {\n                        if (n == 0) {\n                            goto lab_0x40f898;\n                        } else {\n                            int64_t v90 = *(int64_t *)(v17 + 8); // 0x40f6a6\n                            int32_t memcmp_rc = memcmp((int64_t *)(v90 + v89), (int64_t *)(v14 + v90), (int32_t)n); // 0x40f6c0\n                            v72 = v35;\n                            v66 = n;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40f558;\n                            } else {\n                                goto lab_0x40f6d4;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40f399\n                v65 = v14;\n                v68 = v59;\n                goto lab_0x40f39d;\n            }\n        }\n    }\n  lab_0x40f54a:\n    // 0x40f54a\n    v72 = v71;\n    if (v4 == 0) {\n        // 0x40faa1\n        free((int64_t *)v6);\n        result = 1;\n        if (v10 == 0) {\n            return result;\n        } else {\n            // 0x40fabc\n            free(v12);\n            result = 1;\n            return result;\n        }\n    }\n    goto lab_0x40f558;\n  lab_0x40f60e:\n    // 0x40f60e\n    *(int64_t *)(v37 + 8) = v32;\n    v27 = *v15;\n    goto lab_0x40f359;\n  lab_0x40f558:;\n    int64_t v91 = function_40d8d0(v4, v18, &v14, a3, a4, &v7); // 0x40f575\n    int64_t v92 = *v15; // 0x40f581\n    v34 = v72;\n    v28 = v92;\n    v31 = v14;\n    v29 = v91;\n    if (v92 < v14) {\n        goto lab_0x40f590_2;\n    }\n    goto lab_0x40f436;\n  lab_0x40f540:\n    // 0x40f540\n    v71 = v70;\n    if (v64 == -2) {\n        // break (via goto) -> 0x40f920\n        goto lab_0x40f920_3;\n    }\n    goto lab_0x40f54a;\n  lab_0x40f7d9:\n    // 0x40f7d9\n    v66 = v67;\n    goto lab_0x40f6d4;\n  lab_0x40f6d4:;\n    int64_t v93 = v14 + v66; // 0x40f6e0\n    goto lab_0x40f3ca;\n  lab_0x40f39d:\n    // 0x40f39d\n    if ((char)function_40bf40(v17, v68, v65) == 0) {\n        goto lab_0x40f54a;\n    } else {\n        // 0x40f3be\n        v93 = v65 + 1;\n        goto lab_0x40f3ca;\n    }\n  lab_0x40f3ca:;\n    int64_t v94 = v93;\n    int64_t v95 = *(int64_t *)(*(int64_t *)(v56 + 24) + 8 * v55);\n    v14 = v94;\n    v69 = 0;\n    v63 = v95;\n    if (v4 == 0) {\n        goto lab_0x40f41c;\n    } else {\n        // 0x40f3d8\n        v72 = v35;\n        if (v94 > *(int64_t *)(v17 + 168)) {\n            goto lab_0x40f558;\n        } else {\n            int64_t v96 = *(int64_t *)(*v20 + 8 * v94); // 0x40f3ee\n            v72 = v35;\n            if (v96 == 0) {\n                goto lab_0x40f558;\n            } else {\n                int64_t v97 = function_40a120(*(int64_t *)(v96 + 16), v96 + 24, v95); // 0x40f406\n                v69 = 0;\n                v63 = v95;\n                v72 = v35;\n                if (v97 == 0) {\n                    goto lab_0x40f558;\n                } else {\n                    goto lab_0x40f41c;\n                }\n            }\n        }\n    }\n  lab_0x40f898:\n    // 0x40f898\n    if ((char)function_408b10(v19, v55) == 0) {\n        // break (via goto) -> 0x40f920\n        goto lab_0x40f920_3;\n    }\n    int64_t v98 = v14; // 0x40f8b7\n    int64_t v99 = *(int64_t *)(24 * v55 + 16 + *(int64_t *)(v56 + 40)); // 0x40f8c6\n    int64_t v100 = *(int64_t *)v99; // 0x40f8ca\n    int64_t v101 = *(int64_t *)(*v20 + 8 * v98); // 0x40f8d5\n    int64_t v102 = function_40a120(*(int64_t *)(v101 + 16), v101 + 24, v100); // 0x40f8e4\n    v69 = v35;\n    v63 = v100;\n    if (v102 != 0) {\n        goto lab_0x40f41c;\n    } else {\n        // 0x40f8f2\n        v65 = v98;\n        v68 = *v57 + v54;\n        goto lab_0x40f39d;\n    }\n  lab_0x40f41c:\n    // 0x40f41c\n    v33 = v69;\n    v25 = v63;\n    v70 = v69;\n    v64 = v63;\n    if (v63 >= 0) {\n        // break -> 0x40f425\n        goto lab_0x40f425_2;\n    }\n    goto lab_0x40f540;\n  lab_0x40f936:\n    // 0x40f936\n    if (v4 != 0) {\n      lab_0x40f7a6:\n        // 0x40f7a6\n        function_40d880(v4);\n        return 12;\n    }\n    // 0x40f5b9\n    return 12;\n  lab_0x40f73a:;\n    int64_t v103 = v62 + 48 * v73; // 0x40f742\n    *(int64_t *)(v103 + 8) = v74;\n    *(int64_t *)v103 = v14;\n    int64_t * mem4 = malloc(size); // 0x40f756\n    *(int64_t *)(v103 + 16) = (int64_t)mem4;\n    if (mem4 == NULL) {\n        goto lab_0x40f790;\n    } else {\n        // 0x40f764\n        memcpy(mem4, v13, size);\n        v69 = v35;\n        v63 = v61;\n        if ((int32_t)function_40b1c0(v103 + 24, v19) == 0) {\n            goto lab_0x40f41c;\n        } else {\n            goto lab_0x40f790;\n        }\n    }\n  lab_0x40f790:\n    // 0x40f790\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40fa90\n        free(v12);\n        goto lab_0x40f936;\n    } else {\n        goto lab_0x40f7a6;\n    }\n}\n"
        },
        {
            "funcName": "function_40fb20",
            "funcStartAddr": "40fb20",
            "funcEndAddr": "40fcb6",
            "decompiledFuncCode": "int64_t function_40fb20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a3 + 16; // 0x40fb34\n    int64_t * v2 = (int64_t *)(a3 + 8); // 0x40fb47\n    int64_t result = function_40eb30(a1, v1, a3, *v2, a4, a5, 8); // 0x40fb50\n    if ((int32_t)result != 0) {\n        // 0x40fb5b\n        return result;\n    }\n    int64_t v3 = *v2; // 0x40fb70\n    int64_t * v4 = (int64_t *)(a1 + 200); // 0x40fb74\n    uint64_t v5 = *v4; // 0x40fb74\n    int64_t * v6 = (int64_t *)(a1 + 208); // 0x40fb7b\n    uint64_t v7 = *v6; // 0x40fb7b\n    int64_t * v8 = (int64_t *)(a1 + 216); // 0x40fb86\n    int64_t v9 = *v8; // 0x40fb86\n    int64_t v10 = v5; // 0x40fb93\n    int64_t v11 = v9; // 0x40fb93\n    if (v5 >= v7) {\n        int64_t * mem = realloc((int64_t *)v9, 80 * (int32_t)v7); // 0x40fc3d\n        if (mem == NULL) {\n            // 0x40fca0\n            free((int64_t *)*v8);\n            // 0x40fb5b\n            return 12;\n        }\n        int64_t v12 = (int64_t)mem; // 0x40fc3d\n        *v8 = v12;\n        memset((int64_t *)(40 * *v4 + v12), 0, 40 * (int32_t)*v6);\n        *v6 = 2 * *v6;\n        v10 = *v4;\n        v11 = *v8;\n    }\n    int64_t v13 = 40 * v10; // 0x40fb9d\n    int64_t v14; // 0x40fb20\n    if (v10 < 1) {\n        // 0x40fb99\n        v14 = v11 + v13;\n    } else {\n        int64_t v15 = v13 + v11;\n        v14 = v15;\n        if (*(int64_t *)(v15 - 32) == a5) {\n            // 0x40fc20\n            *(char *)(v15 - 8) = 1;\n            v14 = v15;\n        }\n    }\n    // 0x40fbb1\n    *(int64_t *)v14 = a4;\n    *(int64_t *)(v14 + 8) = a5;\n    *(int16_t *)(v14 + 34) = (int16_t)(v3 == v1);\n    *(int64_t *)(v14 + 16) = v1;\n    *(int64_t *)(v14 + 24) = v3;\n    *v4 = v10 + 1;\n    *(char *)(v14 + 32) = 0;\n    int32_t * v16 = (int32_t *)(a1 + 224); // 0x40fbe3\n    if (v3 - v1 > (int64_t)*v16) {\n        // 0x40fbf2\n        *v16 = (int32_t)v3 - (int32_t)v1;\n    }\n    // 0x40fbfc\n    return function_4096f0(a1, 0);\n}\n"
        },
        {
            "funcName": "function_40fcc0",
            "funcStartAddr": "40fcc0",
            "funcEndAddr": "410532",
            "decompiledFuncCode": "int64_t function_40fcc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40fcc0\n    if (a2 >= 0 != a2 != 0) {\n        // 0x41014b\n        return 0;\n    }\n    // 0x40fd59\n    int64_t v1; // bp-232, 0x40fcc0\n    int64_t v2 = &v1; // 0x40fccd\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x40fd5e\n    int64_t * v4 = (int64_t *)(v2 + 56); // 0x40fd6a\n    int32_t * v5 = (int32_t *)(a1 + 160);\n    int64_t * v6 = (int64_t *)(a1 + 200);\n    int64_t * v7 = (int64_t *)(a1 + 216);\n    int64_t * v8 = (int64_t *)(a1 + 232);\n    int64_t * v9 = (int64_t *)(v2 + 104);\n    int64_t * v10 = (int64_t *)(v2 + 96);\n    int64_t * v11 = (int64_t *)(a1 + 8);\n    int64_t * v12 = (int64_t *)(v2 + 24);\n    int64_t * v13 = (int64_t *)(v2 + 16);\n    int64_t * v14 = (int64_t *)(v2 + 32);\n    int64_t * v15 = (int64_t *)(v2 + 64);\n    int64_t * v16 = (int64_t *)(v2 + 112);\n    int64_t v17 = v2 + 40;\n    int64_t * v18 = (int64_t *)v17;\n    int64_t * v19 = (int64_t *)(v2 + 120);\n    int64_t * v20 = (int64_t *)(v2 + 48);\n    int64_t * v21 = (int64_t *)(a1 + 184);\n    int64_t v22 = v2 + 140;\n    int32_t * v23 = (int32_t *)v22;\n    int64_t * v24 = (int64_t *)(v2 + 88);\n    int32_t * v25 = (int32_t *)v17;\n    int64_t * v26 = (int64_t *)(v2 + 144);\n    int128_t * v27 = (int128_t *)v22;\n    int64_t * v28 = (int64_t *)(v2 + 160);\n    int64_t v29 = *v3; // 0x40fd45\n    int64_t v30 = *(int64_t *)(a1 + 72); // 0x40fcc0\n    int64_t v31; // 0x40fcc0\n    int64_t v32; // 0x40fd66\n    int64_t v33; // 0x40fd75\n    uint32_t v34; // 0x40fd82\n    int64_t v35; // 0x40fd82\n    uint64_t v36; // 0x40fd9d\n    while (true) {\n      lab_0x40fd59:\n        // 0x40fd59\n        v31 = v30;\n        v32 = *(int64_t *)(*(int64_t *)*(int64_t *)(v2 + 72) + 8 * v29);\n        v33 = 16 * v32;\n        int64_t v37 = (v33 | 8) + *(int64_t *)*v4; // 0x40fd7c\n        v30 = v31;\n        if (*(char *)v37 != 4) {\n            goto lab_0x40fd40_3;\n        } else {\n            // 0x40fd82\n            v34 = *(int32_t *)v37;\n            if ((v34 & 0x3ff00) == 0) {\n                goto lab_0x40fdd0;\n            } else {\n                // 0x40fd8d\n                v35 = v34;\n                v36 = function_40be50(a1, v31, *v5);\n                if ((v35 & 1024) != 0) {\n                    // 0x40fd10\n                    v30 = v31;\n                    if (v36 % 2 == 0) {\n                        goto lab_0x40fd40_3;\n                    } else {\n                        // 0x40fd14\n                        v30 = v31;\n                        if ((v35 & 2048) != 0) {\n                            goto lab_0x40fd40_3;\n                        } else {\n                            goto lab_0x40fd19;\n                        }\n                    }\n                } else {\n                    // 0x40fdb4\n                    v30 = v31;\n                    if ((v35 & 2048) == 0 || v36 % 2 == 0) {\n                        goto lab_0x40fd19;\n                    } else {\n                        goto lab_0x40fd40_3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x41014b_7:;\n    // 0x41014b\n    int64_t result; // 0x40fcc0\n    return result;\n  lab_0x40fe98:;\n    int64_t v38 = *(int64_t *)(a1 + 152); // 0x40fe98\n    int64_t v39 = *(int64_t *)v38; // 0x40fea7\n    *v9 = v38;\n    *v10 = *(int64_t *)(v39 + v33);\n    int64_t v40; // 0x40fcc0\n    int64_t v41; // 0x40fcc0\n    int64_t v42; // 0x40fcc0\n    int64_t v43; // 0x40fcc0\n    int64_t v44; // 0x40fcc0\n    int64_t v45; // 0x40fcc0\n    int64_t v46; // 0x40fcc0\n    int64_t v47; // 0x40fcc0\n    int64_t v48; // 0x40fcc0\n    int64_t v49; // 0x40fcc0\n    int64_t v50; // 0x40fcc0\n    int64_t v51; // 0x40fcc0\n    int64_t v52; // 0x40fcc0\n    int64_t v53; // 0x40fcc0\n    int64_t v54; // 0x40fdd0\n    int64_t v55; // 0x40feec\n    int64_t * v56; // 0x40fef0\n    int64_t * v57; // 0x410160\n    int64_t * v58; // 0x410165\n    int64_t v59; // 0x40ff20\n    if (*v8 < 1) {\n        // 0x40fe6f\n        *v23 = 0;\n        v30 = v31;\n        goto lab_0x40fd40_3;\n    } else {\n        // 0x40feba\n        *v12 = v31;\n        *v13 = 0;\n        *v14 = *v11;\n        *v15 = v32;\n        *v16 = v54;\n        v40 = *v13;\n        v51 = v39;\n        while (true) {\n          lab_0x40fedb:\n            // 0x40fedb\n            v55 = *(int64_t *)(*(int64_t *)(a1 + 248) + 8 * v40);\n            v56 = (int64_t *)(v55 + 8);\n            if (*v10 == *(int64_t *)(16 * *v56 + v51)) {\n                // 0x410160\n                v57 = (int64_t *)(v55 + 32);\n                v58 = (int64_t *)v55;\n                int64_t v60 = *v58; // 0x410165\n                int64_t v61 = *v12; // 0x410168\n                v41 = v61;\n                v42 = v60;\n                if (*v57 < 1) {\n                    goto lab_0x410313;\n                } else {\n                    int64_t v62 = v61;\n                    v49 = 0;\n                    int64_t v63 = v60;\n                    int64_t v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49); // 0x4101a0\n                    int64_t v65 = *(int64_t *)(v64 + 8); // 0x4101a4\n                    int64_t v66 = v65 - v63; // 0x4101ab\n                    int64_t v67 = v66 + v62; // 0x4101ae\n                    int64_t v68 = v64; // 0x4101b5\n                    int64_t v69; // 0x40fcc0\n                    int64_t v70; // 0x40fcc0\n                    int32_t memcmp_rc; // 0x4101d8\n                    int64_t v71; // 0x4102b4\n                    int64_t v72; // 0x4102c1\n                    int64_t n; // 0x4102c5\n                    int64_t v73; // 0x4102ca\n                    int64_t v74; // 0x4102cf\n                    int64_t v75; // 0x4102d4\n                    if (v66 >= 1) {\n                        // 0x4101b7\n                        v69 = *v14;\n                        v75 = v63;\n                        n = v66;\n                        v74 = v62;\n                        v73 = v64;\n                        v72 = v69;\n                        if (*(int64_t *)(a1 + 48) < v67) {\n                            // 0x410290\n                            *v18 = v66;\n                            *v14 = v64;\n                            v50 = v63;\n                            v48 = v62;\n                            v43 = v69;\n                            if (*(int64_t *)(a1 + 88) < v67) {\n                                goto lab_0x4104a0_2;\n                            }\n                            // 0x4102a4\n                            *v19 = v62;\n                            *v20 = v63;\n                            v71 = function_4096f0(a1, v67);\n                            result = v71;\n                            if ((int32_t)v71 != 0) {\n                                // break (via goto) -> 0x41014b\n                                goto lab_0x41014b_7;\n                            }\n                            // 0x4102c1\n                            v72 = *v11;\n                            n = *v18;\n                            v73 = *v14;\n                            v74 = *v19;\n                            v75 = *v20;\n                        }\n                        // 0x4101c1\n                        v70 = v72;\n                        *v20 = v73;\n                        *v18 = v75;\n                        *v14 = v74;\n                        memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                        v68 = *v20;\n                        v50 = *v18;\n                        v48 = *v14;\n                        v43 = v70;\n                        if (memcmp_rc != 0) {\n                            goto lab_0x4104a0_2;\n                        }\n                    }\n                    int64_t v76 = function_40fb20(a1, v55, v68, *v15, *v12); // 0x410207\n                    int64_t v77 = *v11; // 0x41020c\n                    result = v76;\n                    if ((int32_t)v76 >= 2) {\n                        // break (via goto) -> 0x41014b\n                        goto lab_0x41014b_7;\n                    }\n                    int64_t v78 = v49 + 1; // 0x410188\n                    while (v78 < *v57) {\n                        // 0x41019c\n                        v62 = v67;\n                        v49 = v78;\n                        v63 = v65;\n                        v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49);\n                        v65 = *(int64_t *)(v64 + 8);\n                        v66 = v65 - v63;\n                        v67 = v66 + v62;\n                        v68 = v64;\n                        if (v66 >= 1) {\n                            // 0x4101b7\n                            v69 = v77;\n                            v75 = v63;\n                            n = v66;\n                            v74 = v62;\n                            v73 = v64;\n                            v72 = v69;\n                            if (*(int64_t *)(a1 + 48) < v67) {\n                                // 0x410290\n                                *v18 = v66;\n                                *v14 = v64;\n                                v50 = v63;\n                                v48 = v62;\n                                v43 = v69;\n                                if (*(int64_t *)(a1 + 88) < v67) {\n                                    goto lab_0x4104a0_2;\n                                }\n                                // 0x4102a4\n                                *v19 = v62;\n                                *v20 = v63;\n                                v71 = function_4096f0(a1, v67);\n                                result = v71;\n                                if ((int32_t)v71 != 0) {\n                                    // break (via goto) -> 0x41014b\n                                    goto lab_0x41014b_7;\n                                }\n                                // 0x4102c1\n                                v72 = *v11;\n                                n = *v18;\n                                v73 = *v14;\n                                v74 = *v19;\n                                v75 = *v20;\n                            }\n                            // 0x4101c1\n                            v70 = v72;\n                            *v20 = v73;\n                            *v18 = v75;\n                            *v14 = v74;\n                            memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                            v68 = *v20;\n                            v50 = *v18;\n                            v48 = *v14;\n                            v43 = v70;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x4104a0_2;\n                            }\n                        }\n                        // 0x4101f4\n                        v76 = function_40fb20(a1, v55, v68, *v15, *v12);\n                        v77 = *v11;\n                        result = v76;\n                        if ((int32_t)v76 >= 2) {\n                            // break (via goto) -> 0x41014b\n                            goto lab_0x41014b_7;\n                        }\n                        // 0x410188\n                        v78 = v49 + 1;\n                    }\n                    // 0x410307\n                    *v14 = v77;\n                    v44 = v65;\n                    v47 = v67;\n                    goto lab_0x41030c;\n                }\n            } else {\n                goto lab_0x40ff02_2;\n            }\n        }\n      lab_0x40ff20:\n        // 0x40ff20\n        v59 = *v12;\n        int64_t v79 = *v15; // 0x40ff25\n        *v23 = 0;\n        int64_t v80 = *v16; // 0x40ff35\n        v30 = v59;\n        if (v80 < *v6) {\n            int64_t v81 = *v4; // 0x40ff4f\n            *v15 = 8 * v79;\n            *v10 = 24 * v79;\n            int64_t * v82 = (int64_t *)(v81 + 48);\n            int64_t * v83 = (int64_t *)(v81 + 24);\n            int64_t * v84 = (int64_t *)(v81 + 40);\n            v45 = v80;\n            while (true) {\n              lab_0x4100a9_2:\n                // 0x4100a9\n                v46 = v45;\n                int64_t v85 = *v7 + 40 * v46; // 0x4100b4\n                if (v79 != *(int64_t *)v85) {\n                    goto lab_0x410098;\n                } else {\n                    // 0x4100bd\n                    if (v59 != *(int64_t *)(v85 + 8)) {\n                        goto lab_0x410098;\n                    } else {\n                        int64_t v86 = *(int64_t *)(v85 + 24); // 0x4100c3\n                        int64_t v87 = *(int64_t *)(v85 + 16); // 0x4100c7\n                        int64_t v88 = v86 - v87; // 0x4100d3\n                        *v14 = v88;\n                        int64_t v89; // 0x40fcc0\n                        if (v88 == 0) {\n                            // 0x40ff78\n                            v89 = *(int64_t *)(*v84 + 16 + *v10);\n                        } else {\n                            // 0x4100e1\n                            v89 = *v15 + *v83;\n                        }\n                        // 0x40ff97\n                        *v12 = 24 * *(int64_t *)v89 + *v82;\n                        int64_t v90 = v86 + v59 - v87; // 0x40ffa3\n                        int64_t v91 = function_40be50(a1, v90 - 1, *v5); // 0x40ffaa\n                        int64_t v92 = 8 * v90; // 0x40ffb4\n                        *v13 = 0;\n                        int64_t v93 = *v21; // 0x40ffc7\n                        int64_t v94 = v93 + v92; // 0x40ffce\n                        int64_t v95 = *(int64_t *)(v93 + *v24); // 0x40ffd2\n                        int64_t v96 = *(int64_t *)v94; // 0x40ffd6\n                        if (v95 != 0) {\n                            // 0x40ffde\n                            *v13 = *(int64_t *)(v95 + 16);\n                        }\n                        if (v96 == 0) {\n                            // 0x410108\n                            *v18 = v94;\n                            int64_t v97 = function_40b3d0(v27, v81, (int64_t *)*v12, (int32_t)v91); // 0x41011d\n                            int64_t v98 = *v21; // 0x410127\n                            *(int64_t *)*v18 = v97;\n                            v52 = v98;\n                            v53 = v98;\n                            if (*(int64_t *)(v98 + v92) != 0) {\n                                goto lab_0x410072;\n                            } else {\n                                goto lab_0x41013c;\n                            }\n                        } else {\n                            // 0x40fff0\n                            *v25 = (int32_t)v91;\n                            *v20 = v92;\n                            int64_t v99 = function_40b240(v26, *(int64_t *)(v96 + 80), *v12, v91 & 0xffffffff); // 0x41000a\n                            int32_t v100 = v99; // 0x410018\n                            *v23 = v100;\n                            if (v100 != 0) {\n                                // 0x4102e0\n                                free((int64_t *)*v28);\n                                result = (int64_t)*v23;\n                                goto lab_0x41014b_7;\n                            }\n                            // 0x410027\n                            *v18 = *v21 + *v20;\n                            *(int64_t *)*v18 = function_40b3d0(v27, v81, v26, *v25);\n                            free((int64_t *)*v28);\n                            int64_t v101 = *v21; // 0x410060\n                            v52 = v101;\n                            v53 = v101;\n                            if (*(int64_t *)(v101 + v92) == 0) {\n                                goto lab_0x41013c;\n                            } else {\n                                goto lab_0x410072;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        goto lab_0x40fd40_3;\n    }\n  lab_0x4104a0_2:;\n    int64_t v102 = v48;\n    int64_t v103 = v50;\n    *v14 = v43;\n    if (*v57 > v49) {\n        goto lab_0x40ff02_2;\n    } else {\n        // 0x4104b5\n        v44 = v103;\n        v47 = v102;\n        v41 = v102;\n        v42 = v103;\n        if (v49 == 0) {\n            goto lab_0x410313;\n        } else {\n            goto lab_0x41030c;\n        }\n    }\n  lab_0x410454:;\n    // 0x410454\n    int64_t v104; // 0x40fcc0\n    int64_t v105 = v104 + 1; // 0x410454\n    int64_t v106 = v105; // 0x41045d\n    if (*v12 < v105) {\n        // break -> 0x40ff02\n        goto lab_0x40ff02_2;\n    }\n    goto lab_0x410330;\n  lab_0x410098:;\n    int64_t v130 = v46 + 1; // 0x410098\n    v30 = v59;\n    int64_t v131 = v130; // 0x4100a3\n    if (v130 >= *v6) {\n        // break -> 0x40fd40\n        goto lab_0x40fd40_3;\n    }\n    // 0x4100a9\n    v45 = v131;\n    goto lab_0x4100a9_2;\n  lab_0x410072:\n    // 0x410072\n    if (*v14 != 0) {\n        goto lab_0x410098;\n    } else {\n        // 0x41007a\n        if (*(int64_t *)(*(int64_t *)(*v24 + v52) + 16) > *v13) {\n            int64_t v132 = *v12; // 0x410220\n            int64_t v133 = v132 + 16; // 0x41022b\n            int64_t v134 = v132 + 8; // 0x41022f\n            *v13 = v133;\n            int64_t v135 = function_40bd00(a1, v134, v133, v59); // 0x41023e\n            int32_t v136 = v135; // 0x410243\n            *v23 = v136;\n            result = v135;\n            if (v136 != 0) {\n                // break (via goto) -> 0x41014b\n                goto lab_0x41014b_7;\n            }\n            int64_t v137 = function_40fcc0(a1, v134, *v13); // 0x410260\n            int32_t v138 = v137; // 0x410265\n            *v23 = v138;\n            result = v137;\n            if (v138 != 0) {\n                // break (via goto) -> 0x41014b\n                goto lab_0x41014b_7;\n            }\n            int64_t v139 = v46 + 1; // 0x410274\n            v30 = v59;\n            v131 = v139;\n            if (v139 >= *v6) {\n                // break -> 0x40fd40\n                goto lab_0x40fd40_3;\n            }\n            // 0x4100a9\n            v45 = v131;\n            goto lab_0x4100a9_2;\n        } else {\n            goto lab_0x410098;\n        }\n    }\n  lab_0x41013c:;\n    uint32_t v140 = *v23; // 0x41013c\n    v52 = v53;\n    if (v140 != 0) {\n        // 0x41014b\n        result = v140;\n        goto lab_0x41014b_7;\n    }\n    goto lab_0x410072;\n  lab_0x40ff02_2:;\n    int64_t v141 = *v13 + 1; // 0x40ff02\n    *v13 = v141;\n    if (v141 >= *v8) {\n        // break -> 0x40ff20\n        goto lab_0x40ff20;\n    }\n    // 0x40ff16\n    v40 = v141;\n    v51 = *(int64_t *)*v9;\n    goto lab_0x40fedb;\n  lab_0x410313:;\n    int64_t v142 = v42;\n    int64_t v122; // 0x4103a5\n    int64_t v128; // 0x41047c\n    int64_t v127; // 0x410481\n    int64_t * v143; // 0x40fcc0\n    int64_t * v144; // 0x40fcc0\n    if (*v12 >= v142) {\n        int64_t * v126 = (int64_t *)(v55 + 16);\n        v143 = (int64_t *)(v55 + 24);\n        v144 = (int64_t *)(v55 + 40);\n        v106 = v142;\n        int64_t v145 = v41; // 0x410326\n        while (true) {\n          lab_0x410330:\n            // 0x410330\n            v104 = v106;\n            if (v104 - *v58 >= 1) {\n                // 0x41033b\n                int64_t * v107; // 0x40fcc0\n                int64_t v108 = *v107; // 0x41033b\n                int64_t v109; // 0x40fcc0\n                int64_t v110; // 0x40fcc0\n                if (v108 > v110) {\n                    int64_t v111 = *v14;\n                    v109 = v111;\n                } else {\n                    // 0x4104d0\n                    int64_t * v112; // 0x40fcc0\n                    uint64_t v113 = *v112; // 0x4104d0\n                    if (v113 <= v110) {\n                        // break -> 0x40ff02\n                        break;\n                    }\n                    int64_t v114 = function_4095a0(a1, v110 + 1 & 0xffffffff); // 0x4104e1\n                    result = v114;\n                    if ((int32_t)v114 != 0) {\n                        // break (via goto) -> 0x41014b\n                        goto lab_0x41014b_7;\n                    }\n                    int64_t v115 = *v11; // 0x4104ee\n                    *v14 = v115;\n                    v109 = v115;\n                }\n                int64_t v116 = v109; // 0x410345\n                char v117 = *(char *)(v104 - 1 + v116); // 0x41034e\n                char v118 = *(char *)(v116 + v110); // 0x410354\n                if (v118 != v117) {\n                    // break -> 0x40ff02\n                    break;\n                }\n            }\n            int64_t v119 = *(int64_t *)(*v21 + 8 * v104); // 0x410368\n            if (v119 != 0) {\n                uint64_t v120 = *(int64_t *)(v119 + 16); // 0x410375\n                if (v120 >= 1) {\n                    int64_t v121 = 0;\n                    v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                    int64_t v123 = 16 * v122 + *(int64_t *)*v9; // 0x4103b0\n                    int64_t v124; // 0x4103c8\n                    int64_t v125; // 0x4103cc\n                    int64_t * mem; // 0x41047c\n                    if (*(char *)(v123 + 8) == 9) {\n                        // 0x4103b9\n                        if (*v10 == *(int64_t *)v123) {\n                            if (v122 == -1) {\n                                goto lab_0x410454;\n                            } else {\n                                // 0x4103c8\n                                v124 = *v126;\n                                v127 = *v58;\n                                v128 = v124;\n                                if (v124 == 0) {\n                                    // 0x410468\n                                    *v18 = v125;\n                                    mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                    v128 = (int64_t)mem;\n                                    v127 = *v18;\n                                    *v126 = v128;\n                                    result = 12;\n                                    if (mem != NULL) {\n                                        goto lab_0x4103d8;\n                                    } else {\n                                        goto lab_0x41014b_7;\n                                    }\n                                } else {\n                                    goto lab_0x4103d8;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v129 = v121 + 1; // 0x410398\n                    while (v120 != v129) {\n                        // 0x4103a5\n                        v121 = v129;\n                        v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                        v123 = 16 * v122 + *(int64_t *)*v9;\n                        if (*(char *)(v123 + 8) == 9) {\n                            // 0x4103b9\n                            if (*v10 == *(int64_t *)v123) {\n                                if (v122 == -1) {\n                                    goto lab_0x410454;\n                                } else {\n                                    // 0x4103c8\n                                    v124 = *v126;\n                                    v125 = *v58;\n                                    v127 = v125;\n                                    v128 = v124;\n                                    if (v124 == 0) {\n                                        // 0x410468\n                                        *v18 = v125;\n                                        mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                        v128 = (int64_t)mem;\n                                        v127 = *v18;\n                                        *v126 = v128;\n                                        result = 12;\n                                        if (mem != NULL) {\n                                            goto lab_0x4103d8;\n                                        } else {\n                                            goto lab_0x41014b_7;\n                                        }\n                                    } else {\n                                        goto lab_0x4103d8;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x410398\n                        v129 = v121 + 1;\n                    }\n                }\n            }\n            goto lab_0x410454;\n        }\n    }\n    goto lab_0x40ff02_2;\n  lab_0x41030c:\n    // 0x41030c\n    v41 = v47;\n    v42 = v44 + 1;\n    goto lab_0x410313;\n  lab_0x40fd40_3:\n    // 0x40fd40\n    v29 = *v3 + 1;\n    *v3 = v29;\n    if (v29 >= *(int64_t *)*(int64_t *)(v2 + 80)) {\n        // break -> 0x41014b\n        goto lab_0x41014b_7;\n    }\n    goto lab_0x40fd59;\n  lab_0x40fdd0:\n    // 0x40fdd0\n    v54 = *v6;\n    if (v54 > 0) {\n        int64_t v146 = *v7; // 0x40fde5\n        int64_t v147 = v146 + 8; // 0x40fdfd\n        int64_t v148 = 0;\n        uint64_t v149 = v148 + v54; // 0x40fde1\n        int64_t v150 = (v149 / 0x8000000000000000 + v149) / 2; // 0x40fdf6\n        int64_t v151 = v150; // 0x40fe02\n        int64_t v152 = v54; // 0x40fe02\n        int64_t v153 = v150; // 0x40fe02\n        int64_t v154; // 0x40fcc0\n        int64_t v155; // 0x40fcc0\n        uint64_t v156; // 0x40fe10\n        int64_t v157; // 0x40fe1e\n        if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n            v155 = v151;\n            v154 = v148;\n            if (v155 <= v148) {\n                // break (via goto) -> 0x40fe37\n                goto lab_0x40fe37;\n            }\n            // 0x40fe10\n            v156 = v155 + v148;\n            v157 = (v156 / 0x8000000000000000 + v156) / 2;\n            v152 = v155;\n            v153 = v157;\n            while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                // 0x40fe32\n                v155 = v157;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40fe37\n                    goto lab_0x40fe37;\n                }\n                // 0x40fe10\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n            }\n        }\n        int64_t v158 = v152;\n        int64_t v159 = v153 + 1; // 0x40fe88\n        v154 = v159;\n        while (v159 < v158) {\n            // 0x40fde1\n            v148 = v159;\n            v149 = v148 + v158;\n            v150 = (v149 / 0x8000000000000000 + v149) / 2;\n            v151 = v150;\n            v152 = v158;\n            v153 = v150;\n            if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n                v155 = v151;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40fe37\n                    goto lab_0x40fe37;\n                }\n                // 0x40fe10\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n                while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                    // 0x40fe32\n                    v155 = v157;\n                    v154 = v148;\n                    if (v155 <= v148) {\n                        // break (via goto) -> 0x40fe37\n                        goto lab_0x40fe37;\n                    }\n                    // 0x40fe10\n                    v156 = v155 + v148;\n                    v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                    v152 = v155;\n                    v153 = v157;\n                }\n            }\n            // 0x40fe88\n            v158 = v152;\n            v159 = v153 + 1;\n            v154 = v159;\n        }\n      lab_0x40fe37:;\n        int64_t v160 = v154;\n        if (v54 > v160) {\n            int64_t v161 = v146 + 40 * v160; // 0x40fe47\n            int64_t v162 = v161; // 0x40fe4f\n            if (v160 != -1 == *(int64_t *)(v161 + 8) == v31) {\n                int64_t v163 = v162;\n                while (v32 != *(int64_t *)v163) {\n                    // 0x40fe60\n                    v162 = v163 + 40;\n                    if (*(char *)(v163 + 32) == 0) {\n                        goto lab_0x40fe98;\n                    }\n                    v163 = v162;\n                }\n                // 0x40fe6f\n                *v23 = 0;\n                v30 = v31;\n                goto lab_0x40fd40_3;\n            } else {\n                goto lab_0x40fe98;\n            }\n        } else {\n            goto lab_0x40fe98;\n        }\n    } else {\n        goto lab_0x40fe98;\n    }\n  lab_0x40fd19:\n    // 0x40fd19\n    v30 = v31;\n    if ((v35 & 0x2000) != 0 == (v36 & 2) == 0) {\n        goto lab_0x40fd40_3;\n    } else {\n        if ((char)(v34 / 256) > -1) {\n            goto lab_0x40fdd0;\n        } else {\n            // 0x40fd2e\n            v30 = v31;\n            if ((v36 & 8) != 0) {\n                goto lab_0x40fdd0;\n            } else {\n                goto lab_0x40fd40_3;\n            }\n        }\n    }\n  lab_0x4103d8:\n    // 0x4103d8\n    *(int64_t *)(v2 - 16) = 9;\n    int64_t v164 = function_40eb30(a1, v128, *v56, v127, v122, v104, (int64_t)&g84); // 0x4103eb\n    int32_t v165 = v164; // 0x4103f2\n    if (v165 == 1) {\n        goto lab_0x410454;\n    } else {\n        // 0x4103f7\n        result = v164;\n        if (v165 != 0) {\n            goto lab_0x41014b_7;\n        } else {\n            int64_t v166 = *v143; // 0x4103ff\n            if (*v57 == v166) {\n                int64_t v167 = 2 * v166 | 1; // 0x4104fc\n                *v18 = v167;\n                int64_t * mem2 = realloc((int64_t *)*v144, 8 * (int32_t)v167); // 0x410512\n                result = 12;\n                if (mem2 == NULL) {\n                    goto lab_0x41014b_7;\n                } else {\n                    // 0x410520\n                    *v144 = (int64_t)mem2;\n                    *v143 = *v18;\n                    goto lab_0x41040d;\n                }\n            } else {\n                goto lab_0x41040d;\n            }\n        }\n    }\n  lab_0x41040d:;\n    int64_t * mem3 = calloc(1, 40); // 0x410417\n    result = 12;\n    if (mem3 == NULL) {\n        goto lab_0x41014b_7;\n    } else {\n        int64_t v168 = (int64_t)mem3; // 0x410417\n        int64_t v169 = *v57; // 0x410421\n        *(int64_t *)(*v144 + 8 * v169) = v168;\n        *mem3 = v122;\n        *(int64_t *)(v168 + 8) = v104;\n        *v57 = v169 + 1;\n        function_40fb20(a1, v55, v168, *v15, *v12);\n        goto lab_0x410454;\n    }\n}\n"
        },
        {
            "funcName": "function_410540",
            "funcStartAddr": "410540",
            "funcEndAddr": "4106f7",
            "decompiledFuncCode": "int64_t function_410540(int32_t * a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 72); // 0x410554\n    int64_t v3 = *v2; // 0x410554\n    int64_t * v4 = (int64_t *)(v1 + 184); // 0x410558\n    int64_t v5 = *(int64_t *)(v1 + 152); // 0x41055f\n    int64_t v6 = 8 * v3; // 0x410566\n    int64_t * v7 = (int64_t *)(v1 + 192); // 0x410571\n    int64_t * v8 = (int64_t *)(*v4 + v6);\n    int64_t result; // 0x410540\n    if (*v7 < v3) {\n        // 0x41057a\n        *v8 = a3;\n        *v7 = v3;\n        result = a3;\n    } else {\n        int64_t v9 = *v8; // 0x4105b0\n        if (v9 == 0) {\n            // 0x410688\n            *v8 = a3;\n            result = a3;\n        } else {\n            int64_t v10 = *(int64_t *)(v9 + 80); // 0x4105bc\n            int64_t v11; // bp-88, 0x410540\n            if (a3 == 0) {\n                // 0x410640\n                v11 = __asm_movaps(__asm_movdqu(*(int128_t *)v10));\n                int64_t v12 = function_40be50(v1, v3 - 1, *(int32_t *)(v1 + 160)); // 0x410660\n                int64_t v13 = function_40b3d0((int128_t *)a1, v5, &v11, (int32_t)v12); // 0x410672\n                *v8 = v13;\n                result = v13;\n            } else {\n                int64_t v14 = *(int64_t *)(a3 + 80); // 0x4105c5\n                int64_t v15; // 0x410540\n                int32_t v16 = function_40b240(&v11, v14, v10, v15); // 0x4105d9\n                *a1 = v16;\n                if (v16 != 0) {\n                    // 0x410595\n                    return 0;\n                }\n                int64_t v17 = function_40be50(v1, *v2 - 1, *(int32_t *)(v1 + 160)); // 0x4105f6\n                int64_t v18 = function_40b3d0((int128_t *)a1, v5, &v11, (int32_t)v17); // 0x410617\n                *(int64_t *)(*v4 + v6) = v18;\n                result = v18;\n                if (v14 != 0) {\n                    // 0x410630\n                    free((int64_t *)v15);\n                    result = v18;\n                }\n            }\n        }\n    }\n    // 0x410587\n    if (*(int64_t *)(v5 + 152) == 0) {\n        // 0x410595\n        return result;\n    }\n    // 0x410698\n    if (result == 0) {\n        // 0x410595\n        return 0;\n    }\n    int64_t v19 = result + 16; // 0x41069d\n    int64_t v20 = result + 24; // 0x4106a1\n    int32_t v21 = function_40bd00(v1, v19, v20, v3); // 0x4106b6\n    *a1 = v21;\n    if (v21 != 0) {\n        // 0x410595\n        return 0;\n    }\n    // 0x4106be\n    if ((*(char *)(result + 104) & 64) == 0) {\n        // 0x410595\n        return result;\n    }\n    int32_t v22 = function_40fcc0(v1, v19, v20); // 0x4106d6\n    *a1 = v22;\n    int64_t result2 = 0; // 0x4106dc\n    if (v22 == 0) {\n        // 0x4106de\n        result2 = *(int64_t *)(*v4 + v6);\n    }\n    // 0x410595\n    return result2;\n}\n"
        },
        {
            "funcName": "function_410700",
            "funcStartAddr": "410700",
            "funcEndAddr": "410a24",
            "decompiledFuncCode": "int64_t function_410700(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 24); // 0x410719\n    uint64_t v2 = *v1; // 0x410719\n    int64_t * mem = malloc(8); // 0x410733\n    if (mem == NULL) {\n        // 0x410a10\n        return 12;\n    }\n    // 0x410746\n    int64_t v3; // bp-152, 0x410700\n    int64_t v4 = &v3; // 0x410715\n    int64_t v5 = (int64_t)mem; // 0x410733\n    *mem = *(int64_t *)(a2 + 16);\n    int64_t v6 = v5; // 0x41075e\n    int64_t v7; // 0x410700\n    int64_t v8; // 0x410700\n    int64_t v9; // 0x410700\n    int64_t v10; // 0x410700\n    int64_t * v11; // 0x410700\n    int64_t * v12; // 0x410700\n    int64_t v13; // 0x410700\n    int64_t v14; // 0x4107be\n    int64_t * v15; // 0x4107d9\n    int64_t * v16; // 0x410700\n    int64_t v17; // 0x4108ae\n    if ((int32_t)v5 == 0) {\n        // 0x410764\n        v6 = 0;\n        if (v2 >= 1) {\n            // 0x41077e\n            v11 = (int64_t *)(v4 + 16);\n            int32_t * v18 = (int32_t *)(v4 + 28);\n            int32_t * v19 = (int32_t *)(a1 + 224);\n            int64_t * v20 = (int64_t *)(a1 + 152);\n            v12 = (int64_t *)(v4 + 8);\n            int64_t * v21 = (int64_t *)(v4 + 40);\n            int64_t * v22 = (int64_t *)(v4 + 48);\n            int64_t * v23 = (int64_t *)(v4 + 32);\n            v13 = a2 + 40;\n            int64_t v24 = v2; // 0x410700\n            while (true) {\n                int64_t v25 = 8 * v24; // 0x410781\n                *v11 = v25;\n                if (*(int64_t *)(v25 + a2) == 0) {\n                    uint32_t v26 = *v18 + 1; // 0x4109d0\n                    *v18 = v26;\n                    if ((int64_t)*v19 < (int64_t)v26) {\n                        // break -> 0x4109e6\n                        break;\n                    }\n                } else {\n                    // 0x410799\n                    *v18 = 0;\n                    if (*v19 < 0) {\n                        // break -> 0x4109e6\n                        break;\n                    }\n                }\n                int64_t v27 = *(int64_t *)(a1 + 184); // 0x4107b2\n                v14 = v24 - 1;\n                *(int64_t *)(v4 + 72) = 0;\n                int64_t v28 = *(int64_t *)(v27 - 8 + *v11); // 0x4107cb\n                v9 = v27;\n                if (v28 != 0) {\n                    // 0x4107d9\n                    v15 = (int64_t *)(v28 + 40);\n                    int64_t v29 = *v20; // 0x4107de\n                    v9 = v27;\n                    if (*v15 >= 1) {\n                        // 0x4107eb\n                        *v12 = 0;\n                        int64_t * v30 = (int64_t *)v29; // 0x4108aa\n                        v16 = (int64_t *)(v29 + 24);\n                        v7 = 0;\n                        while (true) {\n                          lab_0x4108a1:\n                            // 0x4108a1\n                            v17 = *(int64_t *)(8 * v7 + *(int64_t *)(v28 + 48));\n                            int64_t v31 = 16 * v17; // 0x4108b5\n                            int64_t v32 = v31 + *v30; // 0x4108b9\n                            v10 = v32;\n                            if ((*(char *)(v32 + 10) & 16) == 0) {\n                                goto lab_0x410800;\n                            } else {\n                                int64_t v33 = *v20; // 0x4108c6\n                                *v21 = v31;\n                                int64_t v34 = v33 + 216; // 0x4108e2\n                                *v22 = v33;\n                                *v23 = *v1;\n                                int64_t v35 = function_40e8a0(*(int64_t *)v33, v34, v17, a1, v14); // 0x4108f3\n                                int64_t v36 = *v21; // 0x4108f8\n                                int32_t v37 = v35; // 0x4108fd\n                                int64_t v38 = v35 & 0xffffffff; // 0x4108ff\n                                if (v37 < 1) {\n                                    // 0x410960\n                                    v8 = v38;\n                                    if (v37 != 0) {\n                                        goto lab_0x410841;\n                                    } else {\n                                        // 0x410966\n                                        v10 = *v30 + v36;\n                                        goto lab_0x410800;\n                                    }\n                                } else {\n                                    int64_t v39 = (0x100000000 * v35 >> 32) + v14; // 0x410906\n                                    v8 = v38;\n                                    if (*v23 < v39) {\n                                        goto lab_0x410841;\n                                    } else {\n                                        int64_t v40 = *(int64_t *)(8 * v39 + v34); // 0x41091c\n                                        if (v40 == 0) {\n                                            // 0x410966\n                                            v10 = *v30 + v36;\n                                            goto lab_0x410800;\n                                        } else {\n                                            // 0x410925\n                                            *v23 = v36;\n                                            int64_t v41 = *(int64_t *)(*(int64_t *)(*v22 + 24) + 8 * v17); // 0x410936\n                                            v8 = v38;\n                                            if (function_40a120(*(int64_t *)(v40 + 16), v40 + 24, v41) != 0) {\n                                                goto lab_0x410841;\n                                            } else {\n                                                // 0x410948\n                                                v10 = *v30 + *v23;\n                                                goto lab_0x410800;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x410978:\n                // 0x410978\n                v6 = v9;\n                if ((int32_t)v9 != 0) {\n                    goto lab_0x4109a5_3;\n                }\n                // 0x41098f\n                v24 = v14;\n                v6 = 0;\n                if (v14 == 0) {\n                    goto lab_0x4109a5_3;\n                }\n            }\n            // 0x4109e6\n            memset((int64_t *)a2, 0, (int32_t)*v11);\n            free((int64_t *)*(int64_t *)(v4 + 80));\n            return (int32_t)&g84 ^ (int32_t)&g84;\n        }\n    }\n  lab_0x4109a5_3:;\n    int32_t * v42 = (int32_t *)(v4 + 8); // 0x4109aa\n    *v42 = (int32_t)v6;\n    free((int64_t *)*(int64_t *)(v4 + 80));\n    return (int64_t)*v42;\n  lab_0x410800:;\n    int64_t v43 = v10;\n    if ((char)function_40bf40(a1, v43, v14) == 0) {\n        goto lab_0x41088c;\n    } else {\n        int64_t v44 = *(int64_t *)(*v11 + v43); // 0x410817\n        if (v44 == 0) {\n            goto lab_0x41088c;\n        } else {\n            int64_t v45 = *(int64_t *)(*v16 + 8 * v17); // 0x41082d\n            v8 = 1;\n            if (function_40a120(*(int64_t *)(v44 + 16), v44 + 24, v45) == 0) {\n                goto lab_0x41088c;\n            } else {\n                goto lab_0x410841;\n            }\n        }\n    }\n  lab_0x41088c:;\n    int64_t v46 = *v12 + 1; // 0x41088c\n    *v12 = v46;\n    v7 = v46;\n    v9 = v46;\n    if (v46 >= *v15) {\n        // break -> 0x410978\n        goto lab_0x410978;\n    }\n    goto lab_0x4108a1;\n  lab_0x410841:\n    // 0x410841\n    if (*(int64_t *)v13 == 0) {\n        goto lab_0x410877;\n    } else {\n        int64_t v47 = *(int64_t *)(*v16 + 8 * v17); // 0x410862\n        *(int64_t *)(v4 - 16) = v14;\n        int64_t v48 = *(int64_t *)(v4 + 56); // 0x410867\n        int64_t v49 = function_40a3b0(a1, v13, v48, v47, (0x100000000 * v8 >> 32) + v14, v17, (int64_t)&g84); // 0x41086c\n        if ((char)v49 != 0) {\n            goto lab_0x41088c;\n        } else {\n            goto lab_0x410877;\n        }\n    }\n  lab_0x410877:\n    // 0x410877\n    v6 = 12;\n    if ((char)function_408b10(v4 + 64, v17) == 0) {\n        goto lab_0x4109a5_3;\n    }\n    goto lab_0x41088c;\n}\n"
        },
        {
            "funcName": "function_410a30",
            "funcStartAddr": "410a30",
            "funcEndAddr": "4129b9",
            "decompiledFuncCode": "int64_t function_410a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, uint64_t a7, int64_t a8, int64_t a9) {\n    // 0x410a30\n    int64_t v1; // 0x410a30\n    int64_t v2 = v1;\n    int64_t v3; // bp-312, 0x410a30\n    __asm_rep_stosq_memset((char *)&v3, 0, 32);\n    int64_t v4 = *(int64_t *)(a1 + 32); // 0x410a7c\n    char * v5 = (char *)v4; // 0x410a88\n    char * v6 = v5; // 0x410a90\n    if (v4 != 0) {\n        unsigned char v7 = *(char *)(a1 + 56); // 0x410a92\n        v6 = NULL;\n        if (a4 != a5 && (v7 & 8) != 0) {\n            // 0x410aa8\n            v6 = v7 % 2 == 0 ? v5 : NULL;\n        }\n    }\n    int64_t * v8 = (int64_t *)(a1 + 48); // 0x410ac5\n    uint64_t v9 = *v8; // 0x410ac5\n    int64_t v10 = 0; // 0x410ad1\n    int64_t v11 = a7; // 0x410ad1\n    if (v9 < a7) {\n        // 0x410ad3\n        v10 = -1 - v9 + a7;\n        v11 = v9 + 1;\n    }\n    int64_t v12 = *(int64_t *)(a1 + 16); // 0x410afd\n    if (v12 == 0) {\n        // 0x4114a0\n        return 1;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x410b0d\n    int64_t v14 = *v13; // 0x410b0d\n    if (v14 == 0) {\n        // 0x4114a0\n        return 1;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 80); // 0x410b1a\n    int64_t v16 = *v15; // 0x410b1a\n    if (v16 == 0) {\n        // 0x4114a0\n        return 1;\n    }\n    int64_t * v17 = (int64_t *)(a1 + 88); // 0x410b27\n    int64_t v18 = *v17; // 0x410b27\n    if (v18 == 0) {\n        // 0x4114a0\n        return 1;\n    }\n    int64_t * v19 = (int64_t *)(a1 + 96); // 0x410b34\n    if (*v19 == 0) {\n        // 0x4114a0\n        return 1;\n    }\n    int64_t v20 = a4; // 0x410b44\n    int64_t v21 = a5; // 0x410b44\n    if (*(int64_t *)(v14 + 16) != 0) {\n        goto lab_0x410b78;\n    } else {\n        // 0x410b46\n        v20 = a4;\n        v21 = a5;\n        if (*(int64_t *)(v16 + 16) != 0) {\n            goto lab_0x410b78;\n        } else {\n            // 0x410b4d\n            if (*(int64_t *)(v18 + 16) == 0) {\n                goto lab_0x410b5a;\n            } else {\n                // 0x410b54\n                if (*(char *)(a1 + 56) < 0) {\n                    goto lab_0x410b78;\n                } else {\n                    goto lab_0x410b5a;\n                }\n            }\n        }\n    }\n  lab_0x411480_9:;\n    // 0x411480\n    int64_t v22; // 0x410a30\n    free((int64_t *)v22);\n    int64_t * v23; // 0x410a30\n    int64_t v24; // 0x410a30\n    int64_t v25; // 0x410a30\n    if (*v23 != 0) {\n        // 0x411c98\n        function_409d90(&v3);\n        free((int64_t *)v24);\n        free((int64_t *)v25);\n    }\n    // 0x411498\n    function_409d50(&v3);\n    // 0x4114a0\n    int64_t v26; // 0x410a30\n    return v26 & 0xffffffff;\n  lab_0x4119e8_3:;\n    // 0x4119e8\n    int32_t v27; // 0x410a30\n    int32_t v28 = v27; // bp-392, 0x4119e8\n    int32_t v29; // 0x410a30\n    int32_t v30 = v29; // 0x4119f2\n    int64_t v31; // 0x410a30\n    int64_t v32 = v31; // 0x4119f2\n    int64_t v33 = 0; // 0x4119f2\n    int64_t v34; // 0x410a30\n    int64_t v35 = v34; // 0x4119f2\n    int64_t v36; // 0x410a30\n    int64_t v37 = v36; // 0x4119f2\n    int64_t v38; // 0x410a30\n    int64_t v39 = v38; // 0x4119f2\n    int64_t * v40; // 0x410a30\n    v23 = v40;\n    v26 = 12;\n    int64_t v41; // 0x410a30\n    v25 = v41;\n    int64_t v42; // 0x410a30\n    v24 = v42;\n    v22 = 0;\n    int64_t v43; // 0x410a30\n    if (v43 == 0) {\n        goto lab_0x411480_9;\n    } else {\n        goto lab_0x4111d8;\n    }\n  lab_0x41127f:;\n    // 0x41127f\n    int64_t v44; // 0x410a30\n    int64_t v45 = v44;\n    int64_t v46; // 0x410a30\n    int64_t v47 = v46;\n    int64_t v48; // 0x410a30\n    int64_t v49 = v48;\n    int32_t v50; // 0x410a30\n    int32_t v51 = v50;\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v52; // 0x410a30\n    int64_t v53 = v52; // 0x410a30\n    int128_t v54; // 0x410a30\n    int128_t v55 = v54; // 0x410a30\n    int64_t v56; // 0x410a30\n    int64_t v57 = v56; // 0x410a30\n    int32_t v58; // 0x410a30\n    int64_t v59; // 0x410a30\n    int64_t v60; // 0x410a30\n    int64_t v61; // 0x410a30\n    int64_t v62; // 0x410a30\n    int64_t v63; // 0x410a30\n    int64_t v64; // 0x410a30\n    int64_t v65; // 0x410a30\n    int64_t v66; // 0x410a30\n    int64_t v67; // bp-376, 0x410a30\n    int64_t v68; // 0x410a30\n    int64_t * mem; // 0x411aff\n    int64_t v69; // 0x410a30\n    int64_t * mem2; // 0x411b26\n    int64_t v70; // 0x411b26\n    int128_t v71; // 0x411b4e\n    int64_t v72; // 0x410c2d\n    char * v73; // 0x410a30\n    char * v74; // 0x410a30\n    int64_t v75; // 0x410a30\n    int128_t v76; // 0x410a30\n    switch (v45) {\n        case -1: {\n            goto lab_0x4118e0;\n        }\n        case -2: {\n            goto lab_0x411480_9;\n        }\n        default: {\n            // 0x411293\n            int64_t v77; // 0x410a30\n            if (v11 < 2 | (*v73 & 16) != 0) {\n                // 0x411450\n                v65 = v45;\n                v64 = v43;\n                if (*v40 == 0) {\n                    goto lab_0x411463_2;\n                }\n                int64_t v78 = *(int64_t *)(8 * v45 + v43); // 0x411aae\n                int64_t v79 = function_40c070(&v3, *(int64_t *)(v78 + 16), v78 + 24, v45); // 0x411aba\n                v77 = v79;\n            } else {\n                int64_t v80 = *(int64_t *)(8 * v45 + v43); // 0x4112c7\n                int64_t v81 = function_40c070(&v3, *(int64_t *)(v80 + 16), v80 + 24, v45); // 0x4112d3\n                v77 = v81;\n                if (*v74 % 2 == 0) {\n                    // 0x4112f5\n                    v65 = v45;\n                    v64 = v43;\n                    v77 = v81;\n                    if (*v40 == 0) {\n                        goto lab_0x411463_2;\n                    }\n                }\n            }\n            // 0x411acf\n            if (v45 >= 0x1fffffffffffffff) {\n                // break -> 0x411480\n                break;\n            }\n            int64_t v82 = v45 + 1; // 0x411aef\n            int32_t size = 8 * (int32_t)v82; // 0x411aff\n            mem = malloc(size);\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if (mem == NULL) {\n                // break -> 0x411480\n                break;\n            }\n            int64_t v83 = v77;\n            v69 = (int64_t)mem;\n            if (*v40 == 0) {\n                int128_t v84 = __asm_pxor(v54, v54); // 0x411860\n                v67 = v69;\n                __asm_movaps(v84);\n                int64_t v85 = function_410700(v72, v75); // 0x4118a7\n                free(NULL);\n                int32_t v86 = v85;\n                v58 = v86;\n                v68 = 0;\n                v66 = v83;\n                v76 = v84;\n                v63 = v85;\n                if (v86 != 0) {\n                    goto lab_0x412092;\n                } else {\n                    // 0x4118c5\n                    v60 = v45;\n                    if (*mem != 0) {\n                        goto lab_0x411c38;\n                    }\n                    // 0x4118cf\n                    free(mem);\n                    v53 = v83;\n                    v55 = v84;\n                    v57 = v69;\n                    goto lab_0x4118e0;\n                }\n            } else {\n                // 0x411b23\n                mem2 = malloc(size);\n                v70 = (int64_t)mem2;\n                int64_t v87 = v45; // 0x411b36\n                if (mem2 == NULL) {\n                    // 0x4120d4\n                    free(mem);\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    goto lab_0x411480_9;\n                }\n                v61 = v83;\n                v62 = v82;\n                int128_t v88 = v54;\n                memset(mem2, 0, 8 * (int32_t)v62);\n                v71 = __asm_pxor(v88, v88);\n                __asm_movaps(v71);\n                v67 = v69;\n                int64_t v89 = function_410700(v72, v75); // 0x411b91\n                free(NULL);\n                int32_t v90 = v89;\n                v58 = v90;\n                v68 = v70;\n                v66 = v61;\n                v76 = v71;\n                v63 = v89;\n                while (v90 == 0) {\n                    // 0x411bb3\n                    v59 = v87;\n                    if (*mem != 0) {\n                        goto lab_0x411c0d_2;\n                    }\n                    // 0x411bb9\n                    if (*mem2 != 0) {\n                        goto lab_0x411c0d_2;\n                    }\n                    int64_t v91 = v59; // 0x411bd8\n                    if (v59 == 0) {\n                        goto lab_0x411cc0_2;\n                    }\n                    int64_t v92; // 0x410a30\n                    int64_t v93; // 0x410a30\n                    int64_t v94; // 0x411bde\n                    while (true) {\n                        // 0x411bde\n                        v92 = v91;\n                        v93 = v92 - 1;\n                        v94 = *(int64_t *)(8 * v93 + v43);\n                        if (v94 != 0) {\n                            // 0x411be7\n                            if ((*(char *)(v94 + 104) & 16) != 0) {\n                                // break -> 0x411bed\n                                break;\n                            }\n                        }\n                        // 0x411bd0\n                        v91 = v93;\n                        if (v93 == 0) {\n                            goto lab_0x411cc0_2;\n                        }\n                    }\n                    int64_t v95 = function_40c070(&v3, *(int64_t *)(v94 + 16), v94 + 24, v93); // 0x411c00\n                    v87 = v93;\n                    v61 = v95;\n                    v62 = v92;\n                    v88 = v71;\n                    memset(mem2, 0, 8 * (int32_t)v62);\n                    v71 = __asm_pxor(v88, v88);\n                    __asm_movaps(v71);\n                    v67 = v69;\n                    v89 = function_410700(v72, v75);\n                    free(NULL);\n                    v90 = v89;\n                    v58 = v90;\n                    v68 = v70;\n                    v66 = v61;\n                    v76 = v71;\n                    v63 = v89;\n                }\n                goto lab_0x412092;\n            }\n        }\n    }\n  lab_0x4116fe:;\n    // 0x4116fe\n    int64_t v96; // 0x410a30\n    int64_t v97 = v96 + 1; // 0x4116fe\n    int64_t v98; // 0x410a30\n    int64_t v99 = v98; // 0x411706\n    int64_t v100; // 0x410a30\n    int64_t v101 = v100; // 0x411706\n    int64_t v102; // 0x410a30\n    int64_t v103 = v102; // 0x411706\n    int64_t v104; // 0x410a30\n    int64_t v105 = v104; // 0x411706\n    int64_t v106; // 0x410a30\n    int64_t v107 = v106; // 0x411706\n    int64_t v108 = v97; // 0x411706\n    int64_t v109 = v98; // 0x411706\n    int64_t v110 = v100; // 0x411706\n    int64_t v111 = v102; // 0x411706\n    int64_t v112 = v106; // 0x411706\n    int64_t v113 = v104; // 0x411706\n    int64_t v114 = v106; // 0x411706\n    int64_t v115 = v36; // 0x411706\n    int64_t v116; // 0x410a30\n    int64_t v117 = v116; // 0x411706\n    int64_t * v118; // 0x411590\n    if (v97 >= *v118) {\n        // break -> 0x411a53\n        goto lab_0x411a53;\n    }\n    goto lab_0x41170c;\n  lab_0x4115f0:;\n    // 0x4115f0\n    int64_t v119; // 0x410a30\n    int64_t v121; // 0x411714\n    int64_t v135 = function_40e8a0(v36, a1 + 216, v121, v72, v119); // 0x4115fe\n    int64_t v120; // 0x410a30\n    v98 = v120;\n    v100 = v72;\n    v102 = v121;\n    v104 = v36;\n    int64_t v136; // 0x410a30\n    v106 = v136;\n    v116 = v121;\n    int64_t v137; // 0x410a30\n    int64_t v138; // 0x410a30\n    int64_t v139; // 0x410a30\n    int64_t v140; // 0x410a30\n    int32_t v141; // bp-388, 0x410a30\n    int64_t v142; // 0x41165e\n    int64_t * v143; // 0x410ba2\n    int32_t v127; // 0x410a30\n    int64_t v144; // 0x410a30\n    if ((int32_t)v135 == 0) {\n        goto lab_0x4116fe;\n    } else {\n        int64_t v145 = (0x100000000 * v135 >> 32) + v136; // 0x41160e\n        int32_t v146 = function_4096f0(v72, v145);\n        v141 = v146;\n        v27 = v146;\n        v31 = v120;\n        v34 = v119;\n        v38 = v121;\n        if (v146 != 0) {\n            goto lab_0x4119e8_3;\n        }\n        int64_t v147 = 8 * v145; // 0x411656\n        v142 = v147 + v43;\n        int64_t v148 = *v8 + 24 * *(int64_t *)(*v143 + 8 * v121); // 0x41166e\n        int64_t * v149 = (int64_t *)v142; // 0x411672\n        int64_t v150 = *v149; // 0x411672\n        if (v150 == 0) {\n            // 0x411790\n            v67 = __asm_movaps(__asm_movdqu(*(int128_t *)v148));\n            int64_t v151 = *(int64_t *)(v148 + 16); // 0x4117a3\n            int64_t v152 = function_40be50(v72, v145 - 1, v127); // 0x4117b6\n            int64_t v153 = v152 & 0xffffffff; // 0x4117ce\n            int64_t v154 = function_40b3d0((int128_t *)&v141, a1, &v67, (int32_t)v152); // 0x4117d0\n            *v149 = v154;\n            v98 = v151;\n            v100 = v153;\n            v102 = v43;\n            v104 = v144;\n            v106 = v136;\n            v116 = v147;\n            v140 = v151;\n            v138 = v153;\n            v139 = v144;\n            v137 = v147;\n            if (v154 != 0) {\n                goto lab_0x4116fe;\n            } else {\n                goto lab_0x4117f0;\n            }\n        } else {\n            int64_t v155 = function_40b240(&v67, *(int64_t *)(v150 + 80), v148, v72); // 0x41168a\n            int32_t v156 = v155;\n            v141 = v156;\n            v27 = v156;\n            v31 = v120;\n            v34 = v142;\n            v38 = v147;\n            if (v156 != 0) {\n                goto lab_0x4119e8_3;\n            }\n            int64_t v157 = function_40be50(v72, v145 - 1, v127); // 0x4116ac\n            int64_t v158 = v157 & 0xffffffff; // 0x4116c4\n            int64_t v159 = function_40b3d0((int128_t *)&v141, a1, &v67, (int32_t)v157); // 0x4116ce\n            *v149 = v159;\n            free((int64_t *)v120);\n            v98 = v120;\n            v100 = v158;\n            v102 = v43;\n            v104 = v120;\n            v106 = v136;\n            v116 = v142;\n            v140 = v120;\n            v138 = v158;\n            v139 = v120;\n            v137 = v142;\n            if (*v149 == 0) {\n                goto lab_0x4117f0;\n            } else {\n                goto lab_0x4116fe;\n            }\n        }\n    }\n  lab_0x4115d1:;\n    // 0x4115d1\n    int64_t v132; // 0x410a30\n    int64_t v160 = v132;\n    v98 = v120;\n    int64_t v129; // 0x411764\n    v100 = v129;\n    v102 = v160;\n    v104 = v72;\n    v106 = v119;\n    v116 = v121;\n    uint64_t v125; // 0x411728\n    uint64_t v126; // 0x41174e\n    int64_t v128; // 0x41175f\n    if ((v125 & 0x2000) != 0 == (v126 & 2) == 0) {\n        goto lab_0x4116fe;\n    } else {\n        uint32_t v161 = (int32_t)v128 & 128; // 0x4115de\n        if (v161 == 0) {\n            goto lab_0x4115f0;\n        } else {\n            // 0x4115e6\n            v98 = v120;\n            v100 = v161;\n            v102 = v160;\n            v104 = v72;\n            v106 = v119;\n            v116 = v121;\n            if ((v126 & 8) == 0) {\n                goto lab_0x4116fe;\n            } else {\n                goto lab_0x4115f0;\n            }\n        }\n    }\n  lab_0x4117f0:\n    // 0x4117f0\n    v98 = v140;\n    v100 = v138;\n    v102 = v43;\n    v104 = v139;\n    v106 = v136;\n    v116 = v137;\n    v27 = v141;\n    v31 = v140;\n    v34 = v142;\n    v38 = v137;\n    if (v141 != 0) {\n        goto lab_0x4119e8_3;\n    }\n    goto lab_0x4116fe;\n  lab_0x411463_2:\n    // 0x411463\n    v23 = v40;\n    int64_t v162; // 0x410fb5\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v163; // 0x410a30\n    int64_t v164; // 0x410a30\n    int64_t v165; // 0x410a30\n    int64_t v166; // 0x411e27\n    if (v11 != 0) {\n        // 0x411e08\n        v165 = a8 + 16;\n        v166 = 16 * v11 + a8;\n        v163 = v165;\n        if (v11 < 2) {\n            // 0x412114\n            *(int64_t *)a8 = 0;\n            *(int64_t *)(a8 + 8) = v65;\n            v164 = 0;\n            goto lab_0x411ee2;\n        } else {\n            goto lab_0x411e40;\n        }\n    } else {\n        goto lab_0x411480_9;\n    }\n  lab_0x411c38:\n    // 0x411c38\n    free((int64_t *)v43);\n    v65 = v60;\n    v64 = v69;\n    goto lab_0x411463_2;\n  lab_0x411c0d_2:;\n    int64_t v167 = function_40b8c0(a1, v69, v70, v62); // 0x411c1b\n    free(mem2);\n    int32_t v168 = v167;\n    v60 = v59;\n    v58 = v168;\n    v68 = 0;\n    v66 = v61;\n    v76 = v71;\n    v63 = v167;\n    if (v168 != 0) {\n        goto lab_0x412092;\n    } else {\n        goto lab_0x411c38;\n    }\n  lab_0x411cc0_2:\n    // 0x411cc0\n    free(mem);\n    free(mem2);\n    function_409d90(&v3);\n    int32_t v169 = v51; // 0x411ce0\n    int64_t v170 = v61; // 0x411ce0\n    int128_t v171 = v71; // 0x411ce0\n    int64_t v172; // bp-384, 0x410a30\n    int64_t v173 = v172; // 0x411ce0\n    int64_t v174 = v49; // 0x411ce0\n    int64_t v175 = v47; // 0x411ce0\n    int64_t v176 = v69; // 0x411ce0\n    goto lab_0x4118f0;\n  lab_0x4111a4:;\n    // 0x4111a4\n    int64_t v298; // 0x410a30\n    int64_t v469 = v298;\n    int64_t v297; // 0x410a30\n    int64_t v470 = v297;\n    int64_t v296; // 0x410a30\n    int64_t v471 = v296;\n    int64_t v293; // 0x410a30\n    int64_t v472 = v293;\n    int64_t v291; // 0x410a30\n    int64_t v473 = v291;\n    int64_t v294; // 0x410a30\n    int32_t v474 = (int32_t)v294 + 1; // 0x4111a8\n    int64_t v326; // 0x410a30\n    int64_t v475 = (int64_t)*(char *)(v294 + v326); // 0x4111b8\n    int64_t v282; // 0x410a30\n    int64_t * v476 = (int64_t *)(v282 + 88); // 0x4111bc\n    int64_t v477 = *v476; // 0x4111bc\n    int64_t v295; // 0x410a30\n    int64_t v478 = v295; // 0x4111c3\n    int64_t v479 = v477; // 0x4111c3\n    int64_t v480; // 0x410a30\n    int64_t v292; // 0x410a30\n    int64_t v481; // 0x410a30\n    int64_t v482; // 0x410a30\n    int64_t v347; // 0x410a30\n    if (v477 == 0) {\n        int64_t v483 = v292;\n        int64_t v484 = *(int64_t *)(v282 + 96); // 0x411808\n        while (v484 == 0) {\n            // 0x411a00\n            if ((char)function_40cb60(a1, v282, v472, v483, v471) == 0) {\n                // 0x411a18\n                v28 = 12;\n                v30 = v474;\n                v32 = v473;\n                v33 = 0;\n                v35 = v471;\n                v37 = v470;\n                v39 = v469;\n                v23 = v40;\n                v26 = 12;\n                v25 = v41;\n                v24 = v42;\n                v22 = 0;\n                if (v43 != 0) {\n                    goto lab_0x4111d8;\n                } else {\n                    goto lab_0x411480_9;\n                }\n            }\n            int64_t v485 = *v476; // 0x4111bc\n            v478 = a1;\n            v479 = v485;\n            if (v485 != 0) {\n                goto lab_0x4111c9;\n            }\n            v484 = *(int64_t *)(v282 + 96);\n        }\n        int64_t v486 = v484 + 8 * v475;\n        int64_t v487 = function_40be50(v72, (int64_t)v474 - 1, v127) % 2 == 0 ? v486 : v486 + 2048;\n        v482 = v347;\n        v480 = v487;\n        v481 = v72;\n    } else {\n      lab_0x4111c9:\n        // 0x4111c9\n        v482 = v472;\n        v480 = v479 + 8 * v475;\n        v481 = v478;\n    }\n    int64_t v488 = *(int64_t *)v480;\n    v30 = v474;\n    v32 = v473;\n    v33 = v488;\n    v35 = v471;\n    v37 = v470;\n    v39 = v469;\n    int32_t v489 = v474; // 0x4111d6\n    int64_t v490 = v473; // 0x4111d6\n    int64_t v491 = v482; // 0x4111d6\n    int64_t v492 = v488; // 0x4111d6\n    int64_t v493 = v481; // 0x4111d6\n    int64_t v494 = v471; // 0x4111d6\n    int64_t v495 = v470; // 0x4111d6\n    int64_t v496 = v469; // 0x4111d6\n    if (v43 == 0) {\n        goto lab_0x4111ee;\n    } else {\n        goto lab_0x4111d8;\n    }\n  lab_0x411590:;\n    // 0x411590\n    int64_t v300; // 0x410a30\n    int64_t v497 = v300;\n    int64_t v299; // 0x410a30\n    int64_t v498 = v299;\n    v118 = (int64_t *)(v282 + 16);\n    int64_t v277; // 0x410a30\n    v109 = v277;\n    int64_t v284; // 0x411169\n    v110 = v284;\n    int64_t v278; // 0x410a30\n    v111 = v278;\n    v112 = v498;\n    v113 = v497;\n    int64_t v280; // 0x410a30\n    v114 = v280;\n    int64_t v281; // 0x410a30\n    v115 = v281;\n    int64_t v283; // 0x410a30\n    v117 = v283;\n    if (*v118 >= 1) {\n        int64_t * v122 = (int64_t *)(v282 + 24); // 0x41170c\n        v136 = v29;\n        v99 = v277;\n        v101 = v284;\n        v103 = v278;\n        v105 = v497;\n        v107 = v498;\n        v108 = 0;\n        while (true) {\n          lab_0x41170c:\n            // 0x41170c\n            v96 = v108;\n            v119 = v107;\n            v36 = v105;\n            v120 = v99;\n            v121 = *(int64_t *)(*v122 + 8 * v96);\n            int64_t v123 = 16 * v121 + v36; // 0x41171f\n            v98 = v120;\n            v100 = v101;\n            v102 = v103;\n            v104 = v36;\n            v106 = v119;\n            v116 = v121;\n            if ((*(char *)(v123 + 10) & 16) == 0) {\n                goto lab_0x4116fe;\n            } else {\n                uint32_t v124 = *(int32_t *)(v123 + 8); // 0x411728\n                if ((v124 & 0x3ff00) == 0) {\n                    goto lab_0x4115f0;\n                } else {\n                    // 0x411737\n                    v125 = (int64_t)v124;\n                    v126 = function_40be50(v72, v119, v127);\n                    v128 = v125 / 256;\n                    v129 = v128 & 0xff03ff;\n                    if ((v125 & 1024) != 0) {\n                        // 0x4115c0\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v128;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v126 % 2 == 0) {\n                            goto lab_0x4116fe;\n                        } else {\n                            uint32_t v130 = (int32_t)v128 & 8; // 0x4115c8\n                            int64_t v131 = v130; // 0x4115c8\n                            v132 = v131;\n                            v98 = v120;\n                            v100 = v129;\n                            v102 = v131;\n                            v104 = v72;\n                            v106 = v119;\n                            v116 = v121;\n                            if (v130 != 0) {\n                                goto lab_0x4116fe;\n                            } else {\n                                goto lab_0x4115d1;\n                            }\n                        }\n                    } else {\n                        uint32_t v133 = (int32_t)v128 & 8; // 0x411772\n                        int64_t v134 = v133; // 0x411772\n                        v132 = v134;\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v134;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v133 == 0 || v126 % 2 == 0) {\n                            goto lab_0x4115d1;\n                        } else {\n                            goto lab_0x4116fe;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x411a53:\n    // 0x411a53\n    v28 = 0;\n    v291 = v109;\n    v292 = v110;\n    v293 = v111;\n    v294 = v112;\n    v295 = v113;\n    v296 = v114;\n    v297 = v115;\n    v298 = v117;\n    goto lab_0x4111a4;\n  lab_0x4111ee:;\n    int64_t v499 = v496;\n    int64_t v500 = v495;\n    int64_t v501 = v494;\n    int64_t v502 = v490;\n    int32_t v503 = v489;\n    int32_t v504 = v503; // 0x4111f1\n    int64_t v505 = v491; // 0x4111f1\n    int64_t v506 = v492; // 0x4111f1\n    int64_t v507 = v493; // 0x4111f1\n    int64_t v265; // 0x410a30\n    int64_t v263; // 0x410a30\n    int64_t v264; // 0x410a30\n    int32_t v261; // 0x410a30\n    int64_t v262; // 0x410a30\n    int64_t v260; // 0x410a30\n    int64_t v276; // 0x410a30\n    int64_t v259; // 0x410a30\n    int64_t v275; // 0x410a30\n    int64_t v274; // 0x410a30\n    int32_t v258; // 0x410a30\n    int32_t v272; // 0x410a30\n    int64_t v348; // 0x410a30\n    char v349; // 0x410a30\n    if (v492 == 0) {\n        // 0x4111f7\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 != 0) {\n            // break (via goto) -> 0x411480\n            goto lab_0x411480_9;\n        }\n        // 0x41120e\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v43 == 0) {\n            // break -> 0x41126d\n            goto lab_0x41126d_6;\n        }\n        int32_t v508 = v503; // 0x411226\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if ((v349 & (char)v274) != 0) {\n            // break -> 0x41126d\n            goto lab_0x41126d_6;\n        }\n        int32_t v509 = v508;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v509;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v509 > -1) {\n            // break (via goto) -> 0x41126d\n            goto lab_0x41126d_6;\n        }\n        int64_t v510 = (int64_t)v509 + 1;\n        int64_t v511; // 0x411253\n        while (*(int64_t *)(8 * v510 + v43) == 0) {\n            // 0x411253\n            v511 = v510 + 1;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = 0;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v511 > 0) {\n                // break (via goto) -> 0x41126d\n                goto lab_0x41126d_6;\n            }\n            v510 = v511;\n        }\n        int64_t v512 = function_410540(&v28, &v3, 0); // 0x4114d5\n        uint32_t v513 = v28; // 0x4114da\n        int32_t v514 = v510;\n        while (v513 == 0) {\n            // 0x4114e5\n            v508 = v514;\n            if (v512 != 0) {\n                // 0x411100\n                v504 = v514;\n                v505 = v513;\n                v506 = v512;\n                v507 = v348;\n                goto lab_0x411100_2;\n            }\n            v509 = v508;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = v509;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v509 > -1) {\n                // break (via goto) -> 0x41126d\n                goto lab_0x41126d_6;\n            }\n            // 0x411240\n            v510 = (int64_t)v509 + 1;\n            while (*(int64_t *)(8 * v510 + v43) == 0) {\n                // 0x411253\n                v511 = v510 + 1;\n                v258 = v272;\n                v259 = v275;\n                v260 = v276;\n                v261 = 0;\n                v262 = v502;\n                v263 = v501;\n                v264 = v500;\n                v265 = v499;\n                if (v511 > 0) {\n                    // break (via goto) -> 0x41126d\n                    goto lab_0x41126d_6;\n                }\n                v510 = v511;\n            }\n            // 0x4114c0\n            v512 = function_410540(&v28, &v3, 0);\n            v513 = v28;\n            v514 = v510;\n        }\n        // 0x411500\n        v504 = v514;\n        v505 = v513;\n        v506 = v512;\n        v507 = v348;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v514;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v512 == 0) {\n            // break -> 0x41126d\n            goto lab_0x41126d_6;\n        }\n    }\n    goto lab_0x411100_2;\n  lab_0x4111d8:;\n    int64_t v564 = function_410540(&v28, &v3, v33); // 0x4111e6\n    v489 = v30;\n    v490 = v32;\n    v491 = v33;\n    v492 = v564;\n    v493 = v348;\n    v494 = v35;\n    v495 = v37;\n    v496 = v39;\n    goto lab_0x4111ee;\n  lab_0x411100_2:;\n    int64_t v515 = v507;\n    int64_t v516 = v506;\n    int64_t v517 = v505;\n    int32_t v518 = v504;\n    int64_t v519 = v518; // 0x411103\n    char v520 = *(char *)(v516 + 104); // 0x411125\n    int64_t v521 = v274; // 0x41112b\n    int64_t v522 = v275; // 0x41112b\n    int64_t v523 = v276; // 0x41112b\n    int64_t v524 = v517; // 0x41112b\n    int64_t v525 = v515; // 0x41112b\n    int64_t v526; // 0x410a30\n    int64_t v527; // 0x410a30\n    if ((v520 & 16) == 0) {\n        goto lab_0x411158;\n    } else {\n        // 0x41112d\n        v527 = v517;\n        v526 = v515;\n        if (v520 < 0) {\n            int64_t v528 = v516 + 24; // 0x411524\n            int64_t v529 = function_40c070(&v3, *(int64_t *)(v516 + 16), v528, v519); // 0x41152e\n            v527 = v528;\n            v526 = v72;\n            v521 = v274;\n            v522 = v275;\n            v523 = v276;\n            v524 = v528;\n            v525 = v72;\n            if (v529 == 0) {\n                goto lab_0x411158;\n            } else {\n                goto lab_0x411135;\n            }\n        } else {\n            goto lab_0x411135;\n        }\n    }\n  lab_0x411158:;\n    // 0x411158\n    char v273; // 0x410a30\n    char v530 = v273 & (char)(v282 == v516); // 0x41110e\n    int32_t v531 = v530 == 0 ? (int64_t)v272 : v284;\n    int64_t v243 = v499; // 0x411163\n    int64_t v244 = v516; // 0x411163\n    int64_t v245 = v500; // 0x411163\n    int64_t v246 = v501; // 0x411163\n    int64_t v247 = v525; // 0x411163\n    int64_t v248 = v519; // 0x411163\n    int64_t v249 = v524; // 0x411163\n    int64_t v250 = v502; // 0x411163\n    int64_t v252 = v523; // 0x411163\n    int64_t v253 = v522; // 0x411163\n    int64_t v254 = v521; // 0x411163\n    char v255 = v530; // 0x411163\n    int32_t v256 = v518; // 0x411163\n    int32_t v257 = v531; // 0x411163\n    v258 = v531;\n    v259 = v522;\n    v260 = v523;\n    v261 = v518;\n    v262 = v502;\n    v263 = v501;\n    v264 = v500;\n    v265 = v499;\n    if (v519 >= a6) {\n        // break -> 0x41126d\n        goto lab_0x41126d_6;\n    }\n    goto lab_0x411169;\n  lab_0x411135:\n    // 0x411135\n    v521 = 1;\n    v522 = v519;\n    v523 = 0;\n    v524 = v527;\n    v525 = v526;\n    v50 = v518;\n    v52 = v502;\n    v48 = v501;\n    v46 = v500;\n    v44 = v519;\n    v56 = v499;\n    int32_t v309; // 0x410a30\n    if (v309 == 0) {\n        goto lab_0x41127f;\n    }\n    goto lab_0x411158;\n  lab_0x410f30:\n    // 0x410f30\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v353; // 0x410a30\n    int64_t v179; // 0x410e1c\n    if (v179 > v353) {\n        // break -> 0x411480\n        goto lab_0x411480_9;\n    }\n    char v532 = 0;\n    int64_t v533 = v353;\n    int64_t v534 = 0; // 0x410f7f\n    if (v533 < a3) {\n        // 0x410f81\n        v534 = (int64_t)*(char *)(v533 + a2);\n    }\n    int64_t v535 = v534;\n    int64_t v536 = v535; // 0x410f89\n    int64_t v313; // 0x410b9e\n    if (v313 != 0) {\n        // 0x410f8b\n        v536 = (int64_t)*(char *)(v535 + v313);\n    }\n    int64_t v345; // 0x410a30\n    while (*(char *)(v536 + v345) == 0) {\n        int64_t v537 = v533 - 1; // 0x410f68\n        if (v537 < v179) {\n            // 0x411d38\n            v172 = v537;\n            v23 = v40;\n            v26 = 1;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            goto lab_0x411480_9;\n        }\n        v532 = 1;\n        v533 = v537;\n        v534 = 0;\n        if (v533 < a3) {\n            // 0x410f81\n            v534 = (int64_t)*(char *)(v533 + a2);\n        }\n        // 0x410f86\n        v535 = v534;\n        v536 = v535;\n        if (v313 != 0) {\n            // 0x410f8b\n            v536 = (int64_t)*(char *)(v535 + v313);\n        }\n    }\n    // 0x410f95\n    int32_t v356; // 0x410a30\n    int32_t v235 = v356; // 0x410f97\n    int64_t v355; // 0x410a30\n    int64_t v236 = v355; // 0x410f97\n    int128_t v354; // 0x410a30\n    int128_t v237 = v354; // 0x410f97\n    int64_t v238 = v353; // 0x410f97\n    int64_t v239 = a3; // 0x410f97\n    int64_t v240 = v179; // 0x410f97\n    int64_t v350; // 0x410a30\n    int64_t v241 = v350; // 0x410f97\n    if (v532 != 0) {\n        // 0x410f99\n        v172 = v533;\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v533;\n        v239 = a3;\n        v240 = v179;\n        v241 = v350;\n    }\n    goto lab_0x410fa8;\n  lab_0x410fa8:;\n    int64_t v538 = v238;\n    v162 = function_40c140(&v3, v538, v127);\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if ((int32_t)v162 != 0) {\n        // break -> 0x411480\n        goto lab_0x411480_9;\n    }\n    int64_t v234 = v241;\n    int64_t v233 = v240;\n    int64_t v232 = v239;\n    v54 = v237;\n    int64_t v231 = v236;\n    int32_t v215 = v235;\n    int64_t v285; // 0x410a30\n    int32_t v339; // 0x410e3f\n    if (v285 == 0 || v339 == 1) {\n        goto lab_0x410fec;\n    } else {\n        // 0x410fdb\n        v169 = v215;\n        v170 = v231;\n        v171 = v54;\n        v173 = v538;\n        v174 = v232;\n        v175 = v233;\n        v176 = v234;\n        int32_t * v539; // 0x410a30\n        if (*v539 == -1) {\n            goto lab_0x4118f0;\n        } else {\n            goto lab_0x410fec;\n        }\n    }\n  lab_0x41192c:;\n    // 0x41192c\n    int64_t v191; // 0x410a30\n    int64_t v540 = v191;\n    uint64_t v541 = v540 - v1; // 0x411993\n    int64_t v542; // 0x4119b7\n    if (v285 <= v541) {\n        // 0x4119a5\n        v542 = function_40c140(&v3, v540, v127);\n        v23 = v40;\n        v26 = v542;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if ((int32_t)v542 != 0) {\n            // break (via goto) -> 0x411480\n            goto lab_0x411480_9;\n        }\n    }\n    int64_t v543 = v345; // 0x411956\n    if (v540 < a3) {\n        // 0x411958\n        v543 = (int64_t)*(char *)(v541 + v326) + v345;\n    }\n    // 0x411967\n    int32_t v188; // 0x410a30\n    v235 = v188;\n    int64_t v189; // 0x410a30\n    v236 = v189;\n    int128_t v190; // 0x410a30\n    v237 = v190;\n    v238 = v540;\n    int64_t v192; // 0x410a30\n    v239 = v192;\n    int64_t v193; // 0x410a30\n    v240 = v193;\n    v241 = v179;\n    int64_t v180; // 0x410e2b\n    int64_t v178; // 0x410a30\n    while (*(char *)v543 == 0) {\n        int64_t v544 = v540 + v178; // 0x411973\n        v172 = v544;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v544 < v179 || v544 > v180) {\n            // break (via goto) -> 0x411480\n            goto lab_0x411480_9;\n        }\n        v540 = v544;\n        v541 = v540 - v1;\n        if (v285 <= v541) {\n            // 0x4119a5\n            v542 = function_40c140(&v3, v540, v127);\n            v23 = v40;\n            v26 = v542;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if ((int32_t)v542 != 0) {\n                // break (via goto) -> 0x411480\n                goto lab_0x411480_9;\n            }\n        }\n        // 0x411950\n        v543 = v345;\n        if (v540 < a3) {\n            // 0x411958\n            v543 = (int64_t)*(char *)(v541 + v326) + v345;\n        }\n        // 0x411967\n        v235 = v188;\n        v236 = v189;\n        v237 = v190;\n        v238 = v540;\n        v239 = v192;\n        v240 = v193;\n        v241 = v179;\n    }\n    goto lab_0x410fa8;\n  lab_0x41138c:;\n    // 0x41138c\n    int64_t v358; // 0x410a30\n    int64_t v545 = v358;\n    int64_t v357; // 0x410a30\n    int64_t v546 = v357;\n    v235 = v356;\n    v236 = v355;\n    v237 = v354;\n    v238 = v546;\n    v239 = v545;\n    int64_t v351; // 0x410a30\n    v240 = v351;\n    v241 = v350;\n    char * v346; // 0x410a30\n    if (v180 == v546) {\n        int64_t v547 = 0; // 0x4113a3\n        if (v180 < a3) {\n            // 0x4113a5\n            v547 = (int64_t)*v346;\n        }\n        int64_t v548 = v547;\n        int64_t v549 = v548; // 0x4113b9\n        if (v313 != 0) {\n            // 0x4113bb\n            v549 = (int64_t)*(char *)(v548 + v313);\n        }\n        // 0x4113bf\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v546;\n        v239 = v545;\n        v240 = v351;\n        v241 = v350;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (*(char *)(v549 + v345) == 0) {\n            // break -> 0x411480\n            goto lab_0x411480_9;\n        }\n    }\n    goto lab_0x410fa8;\n  lab_0x410fec:;\n    int64_t v550 = *v13; // 0x411013\n    v28 = 0;\n    int64_t v218 = v347; // 0x411047\n    int64_t v220 = v72; // 0x411047\n    int64_t v222 = v550; // 0x411047\n    int64_t v223; // 0x410a30\n    int64_t v221; // 0x410a30\n    int64_t v219; // 0x410a30\n    if (*(char *)(v550 + 104) >= 0) {\n        goto lab_0x411090;\n    } else {\n        uint64_t v551 = function_40be50(v72, (int64_t)v215 - 1, v127); // 0x411057\n        if (v551 % 2 != 0) {\n            // 0x411ce8\n            v219 = v347;\n            v221 = v72;\n            v223 = *v15;\n            goto lab_0x411cec;\n        } else {\n            int32_t v552 = v551; // 0x411064\n            v218 = v347;\n            v220 = v72;\n            v222 = v550;\n            if (v552 == 0) {\n                goto lab_0x411090;\n            } else {\n                int64_t v553 = v551 & 6; // 0x41106a\n                if (v553 == 6) {\n                    // 0x412080\n                    v219 = 6;\n                    v221 = v72;\n                    v223 = *v19;\n                    goto lab_0x411cec;\n                } else {\n                    if ((v551 & 2) != 0) {\n                        // 0x411db0\n                        v219 = v553;\n                        v221 = v72;\n                        v223 = *v17;\n                        goto lab_0x411cec;\n                    } else {\n                        // 0x41107e\n                        v218 = v553;\n                        v220 = v72;\n                        v222 = v550;\n                        if ((v551 & 4) != 0) {\n                            int64_t v554 = *(int64_t *)(v550 + 80); // 0x411dc0\n                            int64_t v555 = function_40b3d0((int128_t *)&v28, a1, (int64_t *)v554, v552); // 0x411dd1\n                            v219 = v554;\n                            v221 = v348;\n                            v223 = v555;\n                            goto lab_0x411cec;\n                        } else {\n                            goto lab_0x411090;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x411090:;\n    int64_t v198 = v222;\n    int64_t v202 = v220;\n    int64_t v200 = v218;\n    int64_t v242; // 0x410a30\n    char v197; // 0x410a30\n    int64_t v201; // 0x410a30\n    int64_t v199; // 0x410a30\n    char v196; // 0x410a30\n    if (v43 == 0) {\n        goto lab_0x4110b4;\n    } else {\n        // 0x41109d\n        *(int64_t *)(8 * (int64_t)v215 + v43) = v198;\n        if (*v40 != 0) {\n            int64_t v556 = v198 + 16; // 0x412038\n            int64_t v557 = v198 + 24; // 0x41203c\n            int64_t v558 = function_40bd00(v72, v556, v557, 0); // 0x41204b\n            int32_t v559 = v558; // 0x412050\n            v28 = v559;\n            v242 = v558;\n            if (v559 != 0) {\n                goto lab_0x41213e;\n            } else {\n                char * v560 = (char *)(v198 + 104); // 0x41205f\n                char v561 = *v560; // 0x41205f\n                v196 = 0;\n                v197 = v561;\n                v199 = v557;\n                v201 = v72;\n                if ((v561 & 64) != 0) {\n                    int64_t v562 = function_40fcc0(v72, v556, v557); // 0x4120fa\n                    int32_t v563 = v562; // 0x4120ff\n                    v28 = v563;\n                    v242 = v562;\n                    if (v563 != 0) {\n                        goto lab_0x41213e;\n                    } else {\n                        // 0x41210a\n                        v196 = 0;\n                        v197 = *v560;\n                        v199 = v557;\n                        v201 = v72;\n                        goto lab_0x4110c8;\n                    }\n                } else {\n                    goto lab_0x4110c8;\n                }\n            }\n        } else {\n            goto lab_0x4110b4;\n        }\n    }\n  lab_0x4118f0:;\n    int64_t v177 = v173 + v178; // 0x4118f8\n    v172 = v177;\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v177 < v179 || v177 > v180) {\n        // break -> 0x411480\n        goto lab_0x411480_9;\n    }\n    int32_t v181 = v169; // 0x411926\n    int64_t v182 = v170; // 0x411926\n    int128_t v183 = v171; // 0x411926\n    int64_t v184 = v177; // 0x411926\n    int64_t v185 = v174; // 0x411926\n    int64_t v186 = v175; // 0x411926\n    int64_t v187 = v176; // 0x411926\n    v188 = v169;\n    v189 = v170;\n    v190 = v171;\n    v191 = v177;\n    v192 = v174;\n    v193 = v175;\n    int32_t v194; // 0x410a30\n    if (v194 < 9) {\n        goto lab_0x410ef8;\n    } else {\n        goto lab_0x41192c;\n    }\n  lab_0x4110b4:;\n    // 0x4110b4\n    char v195; // 0x410ed6\n    v196 = v195;\n    v197 = *(char *)(v198 + 104);\n    v199 = v200;\n    v201 = v202;\n    goto lab_0x4110c8;\n  lab_0x4110c8:;\n    int64_t v203 = v201;\n    int64_t v204 = v199;\n    char v205 = v196;\n    int64_t v206; // 0x410a30\n    int64_t v207; // 0x410a30\n    int64_t v208; // 0x410a30\n    int64_t v209; // 0x410a30\n    int64_t v210; // 0x410a30\n    int64_t v211; // 0x410a30\n    int64_t v212; // 0x410a30\n    int64_t v213; // 0x410a30\n    if ((v197 & 16) != 0) {\n        // 0x411d58\n        if (*(char *)(v198 + 104) < 0) {\n            int64_t v214 = v215;\n            int64_t v216 = v198 + 24; // 0x411de9\n            int64_t v217 = function_40c070(&v3, *(int64_t *)(v198 + 16), v216, v214); // 0x411df0\n            v206 = v214;\n            v213 = 0;\n            v212 = v216;\n            v210 = v72;\n            v208 = -1;\n            v207 = v214;\n            v211 = v216;\n            v209 = v72;\n            if (v217 == 0) {\n                goto lab_0x4110e0;\n            } else {\n                goto lab_0x411d63;\n            }\n        } else {\n            // 0x411d58\n            v207 = v215;\n            v211 = v204;\n            v209 = v203;\n            goto lab_0x411d63;\n        }\n    } else {\n        // 0x4110c8\n        v206 = v215;\n        v213 = 0;\n        v212 = v204;\n        v210 = v203;\n        v208 = -1;\n        goto lab_0x4110e0;\n    }\n  lab_0x411cec:\n    // 0x411cec\n    v218 = v219;\n    v220 = v221;\n    v222 = v223;\n    int64_t v224; // 0x410a30\n    int64_t v225; // 0x410a30\n    int64_t v226; // 0x410a30\n    int64_t v227; // 0x410a30\n    int32_t v228; // 0x410a30\n    int64_t v229; // 0x410a30\n    int128_t v230; // 0x410a30\n    if (v223 != 0) {\n        goto lab_0x411090;\n    } else {\n        // 0x411cf5\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 == 12) {\n            // break -> 0x411480\n            goto lab_0x411480_9;\n        }\n        // 0x411d09\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1073, \"check_matching\");\n        v228 = v215;\n        v229 = v231;\n        v230 = v54;\n        v227 = a1;\n        v225 = v232;\n        v226 = v233;\n        v224 = v234;\n      lab_0x411d28_2:\n        // 0x411d28\n        v172 = v227;\n        v235 = v228;\n        v236 = v229;\n        v237 = v230;\n        v238 = v227;\n        v239 = v225;\n        v240 = v226;\n        v241 = v224;\n        goto lab_0x410fa8;\n    }\n  lab_0x41213e:\n    // 0x41213e\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = 0x100000000 * v242 >> 32;\n    v56 = v234;\n    goto lab_0x41127f;\n  lab_0x4110e0:\n    // 0x4110e0\n    v243 = v234;\n    v244 = v198;\n    v245 = v233;\n    v246 = v232;\n    v247 = v210;\n    v248 = v206;\n    v249 = v212;\n    v250 = v231;\n    int64_t v251; // 0x410ec7\n    v252 = v251;\n    v253 = v208;\n    v254 = v213;\n    v255 = v205;\n    v256 = v215;\n    v257 = v215;\n    v258 = v215;\n    v259 = v208;\n    v260 = v251;\n    v261 = v215;\n    v262 = v231;\n    v263 = v232;\n    v264 = v233;\n    v265 = v234;\n    int64_t v266; // 0x410a30\n    int64_t v267; // bp-576, 0x410a30\n    int32_t v268; // bp-688, 0x410a30\n    int32_t result; // bp-692, 0x410a30\n    int64_t v269; // 0x4121ce\n    int64_t v270; // 0x412243\n    int64_t * v271; // 0x412243\n    if (v206 < a6) {\n        while (true) {\n          lab_0x411169:\n            // 0x411169\n            v272 = v257;\n            v29 = v256;\n            v273 = v255;\n            v274 = v254;\n            v275 = v253;\n            v276 = v252;\n            v277 = v250;\n            v278 = v249;\n            int64_t v279 = v248;\n            v280 = v246;\n            v281 = v245;\n            v282 = v244;\n            v283 = v243;\n            v284 = v279 + 1;\n            if (v2 < a3 == v284 >= v2 || v285 < a3 == v284 >= v285) {\n                int32_t v286 = function_4095a0(v72, v279 + 2 & 0xffffffff);\n                v28 = v286;\n                if (v286 != 0) {\n                    // 0x411a78\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    if (v286 != 12) {\n                        // 0x41216d\n                        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1128, \"check_matching\");\n                        v267 = v283;\n                        v269 = *(int64_t *)0x409f5000002340;\n                        result = 0;\n                        if (v269 == 0) {\n                            int64_t v287 = function_40b6d0(&result, 0x409e7000000000, (int64_t *)\"check_matching\", 0x409f5000002340, v280, v281); // 0x41268b\n                            *(int64_t *)0x656765722f628cac = v287;\n                            // 0x412209\n                            return result;\n                        }\n                        // 0x412220\n                        v268 = 0;\n                        int64_t v288 = function_40b6d0(&v268, 0x409e7000000000, (int64_t *)\"check_matching\", 0x409f5000002340, v280, v281); // 0x412233\n                        uint32_t result2 = v268; // 0x41223b\n                        if (result2 != 0) {\n                            // 0x412209\n                            return result2;\n                        }\n                        // 0x412243\n                        v270 = v288 + 56;\n                        v271 = (int64_t *)v270;\n                        int64_t v289 = *v271; // 0x412243\n                        if (v289 != 0) {\n                            goto lab_0x4122d0;\n                        } else {\n                            // 0x412255\n                            *(int64_t *)(v288 + 64) = 0;\n                            *v271 = 0x676e69686374;\n                            int64_t * mem3 = malloc(0x4b431ba0); // 0x412269\n                            *(int64_t *)(v288 + 72) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x412209\n                                return 12;\n                            }\n                            // 0x412277\n                            v268 = 0;\n                            v266 = v289;\n                            goto lab_0x41229a;\n                        }\n                    } else {\n                        goto lab_0x411480_9;\n                    }\n                }\n                int64_t v290 = v29; // 0x411574\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v290;\n                v295 = v72;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v290;\n                v300 = v72;\n                if ((*(char *)(v282 + 104) & 32) == 0) {\n                    goto lab_0x4111a4;\n                } else {\n                    goto lab_0x411590;\n                }\n            } else {\n                // 0x411199\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v279;\n                v295 = v247;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v279;\n                v300 = v247;\n                if ((*(char *)(v282 + 104) & 32) != 0) {\n                    goto lab_0x411590;\n                } else {\n                    goto lab_0x4111a4;\n                }\n            }\n        }\n    }\n  lab_0x41126d_6:;\n    int64_t v301 = v265;\n    int64_t v302 = v264;\n    int64_t v303 = v263;\n    int64_t v304 = v262;\n    int32_t v305 = v261;\n    int64_t v306 = v260;\n    int64_t v307 = v259;\n    v50 = v305;\n    v52 = v304;\n    v48 = v303;\n    v46 = v302;\n    v44 = v307;\n    v56 = v301;\n    if (v306 != 0) {\n        int64_t * v308 = (int64_t *)v306; // 0x41127c\n        *v308 = *v308 + (int64_t)v258;\n        v50 = v305;\n        v52 = v304;\n        v48 = v303;\n        v46 = v302;\n        v44 = v307;\n        v56 = v301;\n    }\n    goto lab_0x41127f;\n  lab_0x411d63:\n    // 0x411d63\n    v206 = v207;\n    v213 = 1;\n    v212 = v211;\n    v210 = v209;\n    v208 = v207;\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = v207;\n    v56 = v234;\n    if (v309 != 0) {\n        goto lab_0x4110e0;\n    } else {\n        goto lab_0x41127f;\n    }\n  lab_0x4118e0:\n    // 0x4118e0\n    function_409d90(&v3);\n    v169 = v51;\n    v170 = v53;\n    v171 = v55;\n    v173 = v172;\n    v174 = v49;\n    v175 = v47;\n    v176 = v57;\n    goto lab_0x4118f0;\n  lab_0x412092:\n    // 0x412092\n    free(mem);\n    free((int64_t *)v68);\n    v53 = v66;\n    v55 = v76;\n    v57 = v69;\n    if (v58 != 1) {\n        // 0x411480\n        v23 = v40;\n        v26 = v63 & 0xffffffff;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        goto lab_0x411480_9;\n    }\n    goto lab_0x4118e0;\n  lab_0x410b78:;\n    int64_t v310 = v21;\n    int64_t v311 = v20;\n    int32_t v312 = 1; // 0x410b89\n    if (v11 == 0) {\n        // 0x410f00\n        v312 = *(int64_t *)(a1 + 152) != 0;\n    }\n    // 0x410b8f\n    v313 = *(int64_t *)(a1 + 40);\n    v143 = (int64_t *)(a1 + 24);\n    int32_t * v314 = (int32_t *)(a1 + 180); // 0x410ba6\n    int64_t v315 = v12 + 1; // 0x410bbd\n    int64_t v316 = (int64_t)*v314; // 0x410bc6\n    int64_t v317 = v315 - v316; // 0x410bc9\n    int64_t v318 = v317 < 0 == ((v317 ^ v315) & (v315 ^ v316)) < 0 ? v315 : v316; // 0x410bd4\n    int64_t v319 = a3 + 1; // 0x410bd8\n    int64_t v320 = v318 - v319; // 0x410bec\n    int64_t v321 = v320 < 0 == ((v320 ^ v318) & (v318 ^ v319)) < 0 == (v320 != 0) ? v319 : v318; // 0x410bf7\n    v3 = a2;\n    v72 = &v3;\n    int64_t v322 = function_408a00(v72, v321); // 0x410c5c\n    int64_t v323; // 0x410a30\n    int64_t v324; // 0x410a30\n    int64_t v325; // 0x410a30\n    if ((int32_t)v322 != 0) {\n        // 0x410b8f\n        v23 = (int64_t *)(a1 + 152);\n        v26 = v322;\n        goto lab_0x411480_9;\n    } else {\n        // 0x410c6d\n        v309 = v312;\n        if ((*v143 & 0x400000 || v313) != 0) {\n            goto lab_0x410cc3;\n        } else {\n            // 0x410ca3\n            v323 = a2;\n            v324 = a2;\n            v325 = a3;\n            if (*v314 < 2) {\n                goto lab_0x410cc5;\n            } else {\n                goto lab_0x410cc3;\n            }\n        }\n    }\n  lab_0x410cc3:\n    // 0x410cc3\n    v324 = v323;\n    v325 = 0;\n    goto lab_0x410cc5;\n  lab_0x410b5a:\n    // 0x410b5a\n    v20 = 0;\n    v21 = 0;\n    if (a4 != 0 == (a5 != 0)) {\n        // 0x4114a0\n        return 1;\n    }\n    goto lab_0x410b78;\n  lab_0x410cc5:\n    // 0x410cc5\n    v285 = v325;\n    v326 = v324;\n    v40 = (int64_t *)(a1 + 152);\n    int64_t v327 = *v40; // 0x410d01\n    int64_t v328 = 2 * v327; // 0x410d1b\n    int64_t v329; // 0x410a30\n    int64_t v330; // 0x410a30\n    if (v328 < 1) {\n        goto lab_0x410d7c;\n    } else {\n        // 0x410d2b\n        v23 = v40;\n        v26 = 12;\n        if (v328 > 0x666666666666666) {\n            goto lab_0x411480_9;\n        } else {\n            int32_t v331 = v327;\n            int64_t * mem4 = malloc(80 * v331); // 0x410d46\n            int64_t v332 = (int64_t)mem4; // 0x410d46\n            int64_t * mem5 = malloc(16 * v331); // 0x410d5d\n            int64_t v333 = (int64_t)mem5; // 0x410d5d\n            v330 = v332;\n            v329 = v333;\n            v23 = v40;\n            v26 = 12;\n            v25 = v332;\n            v24 = v333;\n            if (mem4 == NULL || mem5 == NULL) {\n                goto lab_0x411480_9;\n            } else {\n                goto lab_0x410d7c;\n            }\n        }\n    }\n  lab_0x410d7c:\n    // 0x410d7c\n    v42 = v329;\n    v41 = v330;\n    int64_t v334; // 0x410a30\n    if (v11 < 2) {\n        // 0x411c70\n        v334 = 0;\n        if ((*(char *)(a1 + 176) & 2) != 0) {\n            goto lab_0x410da6;\n        } else {\n            goto lab_0x410de2;\n        }\n    } else {\n        goto lab_0x410da6;\n    }\n  lab_0x410da6:\n    // 0x410da6\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    if (v2 < 0x1fffffffffffffff) {\n        // 0x410dc1\n        g92 = &v267;\n        int64_t * mem6 = malloc(8 * (int32_t)v2 + 8); // 0x410dc9\n        int64_t v335 = (int64_t)mem6; // 0x410dc9\n        v334 = v335;\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v335;\n        if (mem6 == NULL) {\n            goto lab_0x411480_9;\n        } else {\n            goto lab_0x410de2;\n        }\n    } else {\n        goto lab_0x411480_9;\n    }\n  lab_0x410de2:\n    // 0x410de2\n    v43 = v334;\n    v172 = v311;\n    int64_t v336 = v311 - v310; // 0x410e08\n    bool v337 = v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0;\n    int32_t v338 = v337; // 0x410e0b\n    v339 = *v314;\n    int32_t v340 = 8; // 0x410e51\n    if (v6 != NULL) {\n        int32_t v341 = 4; // 0x410e5b\n        if (v339 != 1) {\n            // 0x410e5d\n            v341 = 4 * (int32_t)((*v143 & 0x400000 | v313) == 0);\n        }\n        // 0x410e80\n        v340 = 2 * v338 | (int32_t)(v313 != 0) | v341;\n    }\n    // 0x410e9c\n    v179 = v337 ? v311 : v310;\n    v180 = v336 < 0 == ((v336 ^ v311) & (v310 ^ v311)) < 0 ? v311 : v310;\n    int64_t v342 = v311 - v180; // 0x410e9c\n    int64_t v343 = v311 - v179; // 0x410ea4\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v342 < 0 == ((v342 ^ v311) & (v180 ^ v311)) < 0 != v342 != 0 && v343 < 0 == ((v343 ^ v311) & (v179 ^ v311)) < 0) {\n        int64_t v344 = 0x100000000 * a9 >> 32;\n        v194 = v340;\n        v251 = v337 ? (int64_t)&v172 : 0;\n        v195 = v251 != 0;\n        v345 = (int64_t)v6;\n        v346 = (char *)(v180 + a2);\n        v127 = v344;\n        v178 = (int32_t)!((v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0)) + v338;\n        v347 = v344 & 0xffffffff;\n        v348 = &v28;\n        v144 = &v141;\n        v349 = (char)v309 ^ 1;\n        v73 = (char *)(a1 + 56);\n        v74 = (char *)(a1 + 176);\n        v75 = &v67;\n        v184 = v311;\n        v185 = a5;\n        v186 = a6;\n        v187 = v327;\n        while (true) {\n          lab_0x410ef8:\n            // 0x410ef8\n            v350 = v187;\n            v351 = v186;\n            int64_t v352 = v185;\n            v353 = v184;\n            v354 = v183;\n            v355 = v182;\n            v356 = v181;\n            v235 = v356;\n            v236 = v355;\n            v237 = v354;\n            v238 = v353;\n            v239 = v352;\n            v240 = v351;\n            v241 = v350;\n            v188 = v356;\n            v189 = v355;\n            v190 = v354;\n            v191 = v353;\n            v192 = v352;\n            v193 = v351;\n            switch (g92) {\n                case 0: {\n                    goto lab_0x410f30;\n                }\n                case 1: {\n                    goto lab_0x410f30;\n                }\n                case 2: {\n                    // 0x4113e8\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        // 0x4113ef\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v359 = v353; // 0x411405\n                        if (*(char *)((int64_t)*(char *)(v353 + a2) + v345) != 0) {\n                            goto lab_0x410fa8;\n                        } else {\n                            int64_t v360 = v359 + 1;\n                            while (v180 != v360) {\n                                // 0x411420\n                                v359 = v360;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v360;\n                                v225 = v352;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)*(char *)(v360 + a2) + v345) != 0) {\n                                    goto lab_0x411d28_2;\n                                }\n                                v360 = v359 + 1;\n                            }\n                            // 0x41143a\n                            v172 = v180;\n                            v357 = v360;\n                            v358 = v352;\n                            goto lab_0x41138c;\n                        }\n                    } else {\n                        goto lab_0x41138c;\n                    }\n                }\n                case 3: {\n                    // 0x411310\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        unsigned char v361 = *(char *)(v313 + (int64_t)*(char *)(v353 + a2)); // 0x411328\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v362 = v353; // 0x411339\n                        if (*(char *)((int64_t)v361 + v345) != 0) {\n                            goto lab_0x410fa8;\n                        } else {\n                            int64_t v363 = v362 + 1;\n                            while (v180 != v363) {\n                                unsigned char v364 = *(char *)(v313 + (int64_t)*(char *)(v363 + a2)); // 0x411365\n                                v362 = v363;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v363;\n                                v225 = a2;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)v364 + v345) != 0) {\n                                    goto lab_0x411d28_2;\n                                }\n                                v363 = v362 + 1;\n                            }\n                            // 0x41137f\n                            v172 = v180;\n                            v357 = v363;\n                            v358 = a2;\n                            goto lab_0x41138c;\n                        }\n                    } else {\n                        goto lab_0x41138c;\n                    }\n                }\n                case 4: {\n                    goto lab_0x410fa8;\n                }\n                default: {\n                    goto lab_0x41192c;\n                }\n            }\n        }\n    }\n    goto lab_0x411480_9;\n  lab_0x4122d0:;\n    int64_t v365 = v269 + 8; // 0x4122dd\n    int64_t result3 = function_40abd0((int128_t *)\"check_matching\", v365, v270); // 0x4122e9\n    int32_t v366 = result3; // 0x4122ee\n    result = v366;\n    int64_t v367 = v280; // 0x4122f4\n    int64_t v368 = v281; // 0x4122f4\n    int64_t v369 = 0; // 0x4122f4\n    if (v366 != 0) {\n        // 0x412209\n        return result3;\n    }\n    goto lab_0x412780;\n  lab_0x412780:;\n    int64_t v370 = v368;\n    int64_t v371 = v367;\n    int64_t v372 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48); // 0x412780\n    int64_t v373 = 40 * *(int64_t *)(v372 + 8 * v369); // 0x412791\n    int64_t v374 = 0x409fb000000000; // 0x412799\n    int64_t v375 = v371; // 0x412799\n    int64_t v376 = v370; // 0x412799\n    int64_t v377; // 0x410a30\n    int64_t v378; // 0x410a30\n    int64_t v379; // 0x410a30\n    int64_t v380; // 0x410a30\n    int64_t v381; // 0x410a30\n    int64_t v382; // 0x410a30\n    int64_t v383; // 0x4127ac\n    int64_t v384; // 0x4127b8\n    if (*(int64_t *)(v373 + 0x409fb000000010) < 1128) {\n        // 0x41279f\n        v374 = 0x409fb000000000;\n        v375 = v371;\n        v376 = v370;\n        if (*(int64_t *)(v373 + 0x409fb000000008) < 1128) {\n            goto lab_0x41283d;\n        } else {\n            // 0x4127a9\n            v383 = *(int64_t *)0x409e7000000000;\n            int64_t v385 = 16 * *(int64_t *)(v373 + 0x409fb000000000); // 0x4127b4\n            v384 = *(int64_t *)(v383 + v385);\n            v377 = v383;\n            v380 = v385;\n            v378 = 0;\n            v381 = 0x61666e5f6b6e696c;\n            v382 = -1;\n            v379 = -1;\n            if (*(int64_t *)(v373 + 0x409fb000000018) == 1128) {\n                goto lab_0x412896;\n            } else {\n                goto lab_0x4127ee;\n            }\n        }\n    } else {\n        goto lab_0x41283d;\n    }\n  lab_0x41283d:;\n    int64_t v386 = v376;\n    int64_t v387 = v375;\n    int64_t v388 = v369 + 1; // 0x41283d\n    v367 = v387;\n    v368 = v386;\n    v369 = v388;\n    if (v388 >= *(int64_t *)((int64_t)\"lib/regexec.c\" + 40)) {\n        // 0x41284b\n        result = 0;\n        int64_t v389 = function_40b6d0(&result, 0x409e7000000000, (int64_t *)\"check_matching\", v374, v387, v386); // 0x412318\n        *(int64_t *)0x656765722f628cac = v389;\n        uint32_t v390 = result; // 0x412321\n        // 0x412209\n        return v390 != 0 ? (int64_t)v390 : 0;\n    }\n    goto lab_0x412780;\n  lab_0x41229a:;\n    int64_t v391 = *(int64_t *)(8 * v266 + 0x61666e5f6b6e696c); // 0x4122a1\n    int64_t v392 = *(int64_t *)0x409e7000000038; // 0x4122a9\n    int32_t v393 = function_40a660(v271, (int128_t *)(v392 + 24 * v391)); // 0x4122b7\n    v268 = v393;\n    if (v393 != 0) {\n        // 0x412209\n        return 12;\n    }\n    int64_t v394 = v266 + 1; // 0x412290\n    v266 = v394;\n    if (v394 > 0x676e69686373) {\n        goto lab_0x4122d0;\n    } else {\n        goto lab_0x41229a;\n    }\n  lab_0x412896:;\n    int64_t v395 = v382;\n    int64_t v396 = v381; // 0x410a30\n    int64_t v397 = v379; // 0x410a30\n    goto lab_0x412896_2;\n  lab_0x4127ee:;\n    int64_t v410 = v378;\n    int64_t v414 = v380;\n    int64_t v412 = v377;\n    int64_t v416 = *(int64_t *)(8 * v410 + 0x61666e5f6b6e696c); // 0x4127f2\n    int64_t v417 = 16 * v416 + v412; // 0x4127fd\n    int64_t v411; // 0x410a30\n    int64_t v415; // 0x410a30\n    int64_t result4; // 0x410a30\n    int64_t v413; // 0x410a30\n    if ((*(char *)(v417 + 8) || 1) == 9) {\n        // 0x41280c\n        if (v384 != *(int64_t *)v417) {\n            goto lab_0x4127e0;\n        } else {\n            int64_t v418 = function_40c930(0x409e7000000000, v416, (int64_t)\"check_matching\", v365); // 0x41281c\n            result4 = v418;\n            if ((int32_t)v418 != 0) {\n                // 0x412209\n                return result4;\n            }\n            int64_t v419 = v410 + 1; // 0x412829\n            v374 = v365;\n            v375 = v384;\n            v376 = v370;\n            if (v419 < 0x676e69686374) {\n                // 0x412829\n                v411 = *(int64_t *)0x409e7000000000;\n                v413 = v365;\n                v415 = v419;\n                goto lab_0x4127ea;\n            } else {\n                goto lab_0x41283d;\n            }\n        }\n    } else {\n        goto lab_0x4127e0;\n    }\n  lab_0x412896_2:;\n    int64_t v398 = v397;\n    int64_t v399 = v396;\n    int64_t v400 = *(int64_t *)v399; // 0x412896\n    int64_t v401 = 16 * v400 + v383; // 0x4128a0\n    char v402 = *(char *)(v401 + 8); // 0x4128a3\n    int64_t v403; // 0x410a30\n    int64_t v404; // 0x410a30\n    int64_t v405; // 0x410a30\n    int64_t v406; // 0x412889\n    if (v402 != 8) {\n        // 0x412880\n        v406 = v398;\n        if (v402 != 9) {\n            goto lab_0x41288d;\n        } else {\n            // 0x412886\n            v406 = v384 == *(int64_t *)v401 ? v400 : v398;\n            goto lab_0x41288d;\n        }\n    } else {\n        int64_t v407 = v384 == *(int64_t *)v401 ? v400 : v395; // 0x4128b1\n        int64_t v408 = v399 + 8; // 0x4128b5\n        v381 = v408;\n        v382 = v407;\n        v379 = v398;\n        v404 = v408;\n        v405 = v407;\n        v403 = v398;\n        if (v408 != 0x6169a9d2b6b1850c) {\n            goto lab_0x412896;\n        } else {\n            goto lab_0x4128be;\n        }\n    }\n  lab_0x4127e0:;\n    int64_t v409 = v410 + 1; // 0x4127e0\n    v411 = v412;\n    v413 = v414;\n    v415 = v409;\n    v374 = v414;\n    v375 = v384;\n    v376 = v370;\n    if (v409 > 0x676e69686373) {\n        goto lab_0x41283d;\n    } else {\n        goto lab_0x4127ea;\n    }\n  lab_0x4127ea:\n    // 0x4127ea\n    v377 = v411;\n    v380 = v413;\n    v378 = v415;\n    goto lab_0x4127ee;\n  lab_0x41288d:;\n    int64_t v420 = v399 + 8; // 0x41288d\n    v396 = v420;\n    v397 = v406;\n    v404 = 0x6169a9d2b6b1850c;\n    v405 = v395;\n    v403 = v406;\n    if (v420 == 0x6169a9d2b6b1850c) {\n        goto lab_0x4128be;\n    } else {\n        goto lab_0x412896_2;\n    }\n  lab_0x4128be:;\n    int64_t v421 = v403;\n    int64_t v422 = v405;\n    int64_t v423; // 0x410a30\n    if (v422 >= 0) {\n        int64_t v424 = function_40c930(0x409e7000000000, v422, (int64_t)\"check_matching\", v365); // 0x41296b\n        result4 = v424;\n        if ((int32_t)v424 != 0) {\n            // 0x412209\n            return result4;\n        }\n        // 0x412978\n        v374 = v365;\n        v375 = v384;\n        v376 = v421;\n        v423 = v365;\n        if (v421 < 0) {\n            goto lab_0x41283d;\n        } else {\n            goto lab_0x4128db;\n        }\n    } else {\n        // 0x4128cf\n        v374 = v404;\n        v375 = v384;\n        v376 = v421;\n        v423 = v404;\n        if (v421 < 0) {\n            goto lab_0x41283d;\n        } else {\n            goto lab_0x4128db;\n        }\n    }\n  lab_0x4128db:;\n    int64_t v425 = v423; // 0x4128eb\n    int64_t v426 = 0; // 0x4128eb\n    goto lab_0x412902;\n  lab_0x412902:;\n    int64_t v427 = v426;\n    int64_t v428 = v425;\n    int64_t v429 = *(int64_t *)(8 * v427 + 0x61666e5f6b6e696c); // 0x412902\n    int64_t v430 = 24 * v429; // 0x412912\n    int64_t v431 = *(int64_t *)0x409e7000000038 + v430; // 0x412916\n    int64_t v432 = v430; // 0x412929\n    int64_t v433; // 0x410a30\n    int64_t v434; // 0x410a30\n    int64_t v435; // 0x410a30\n    if (function_40a120(*(int64_t *)(v431 + 8), v431 + 16, v421) != 0) {\n        goto lab_0x4128f0;\n    } else {\n        int64_t v436 = *(int64_t *)0x409e7000000030 + v430; // 0x41292b\n        int64_t v437 = function_40a120(*(int64_t *)(v436 + 8), v436 + 16, v421); // 0x412938\n        v432 = v436;\n        if (v437 != 0) {\n            goto lab_0x4128f0;\n        } else {\n            int64_t v438 = function_40c930(0x409e7000000000, v429, (int64_t)\"check_matching\", v365); // 0x412950\n            result4 = v438;\n            v435 = v365;\n            v434 = v427;\n            v433 = v436;\n            if ((int32_t)v438 != 0) {\n                // 0x412209\n                return result4;\n            }\n            goto lab_0x4128f4;\n        }\n    }\n  lab_0x4128f0:\n    // 0x4128f0\n    v435 = v428;\n    v434 = v427 + 1;\n    v433 = v432;\n    goto lab_0x4128f4;\n  lab_0x4128f4:\n    // 0x4128f4\n    v374 = v435;\n    v375 = v384;\n    v376 = v433;\n    v425 = v435;\n    v426 = v434;\n    if (v434 > 0x676e69686373) {\n        goto lab_0x41283d;\n    } else {\n        goto lab_0x412902;\n    }\n  lab_0x411e40:\n    // 0x411e40\n    *(int64_t *)(v163 + 8) = -1;\n    int64_t v439 = v163 + 16; // 0x411e44\n    *(int64_t *)v163 = -1;\n    v163 = v439;\n    int64_t v440; // 0x410a30\n    int64_t * v441; // 0x411e61\n    if (v166 != v439) {\n        goto lab_0x411e40;\n    } else {\n        // 0x411e51\n        v441 = (int64_t *)a8;\n        *v441 = 0;\n        *(int64_t *)(a8 + 8) = v65;\n        v164 = 0;\n        if (v11 == 1 | (*v73 & 16) != 0) {\n            goto lab_0x411ee2;\n        } else {\n            // 0x411e92\n            v440 = 0;\n            if (*v74 % 2 == 0) {\n                goto lab_0x411eb2;\n            } else {\n                int64_t v442 = *v40; // 0x411ea6\n                v440 = v442 >= 0 == (v442 != 0);\n                goto lab_0x411eb2;\n            }\n        }\n    }\n  lab_0x411ee2:;\n    int64_t v443 = a8; // 0x411f1d\n    int64_t v444 = 0; // 0x411f1d\n    int64_t v445 = v164; // 0x411f1d\n    goto lab_0x411f23;\n  lab_0x411f23:;\n    int64_t v446 = v445;\n    int64_t v447 = v443;\n    int64_t * v448; // 0x410a30\n    int64_t v449; // 0x410a30\n    int64_t v450; // 0x410a30\n    int64_t * v451; // 0x411f29\n    int64_t v452; // 0x411f29\n    int64_t v453; // 0x41214b\n    if (v446 == -1) {\n        goto lab_0x411f43;\n    } else {\n        // 0x411f29\n        v451 = (int64_t *)(v447 + 8);\n        v452 = *v451;\n        char v454; // 0x410a30\n        if (v454 != 0) {\n            // 0x412146\n            v453 = v285;\n            if (v285 == v446) {\n                goto lab_0x41214f;\n            } else {\n                // 0x41214b\n                v453 = *(int64_t *)(8 * v446 + v1);\n                goto lab_0x41214f;\n            }\n        } else {\n            // 0x411f29\n            v448 = (int64_t *)v447;\n            v449 = v446;\n            v450 = v452;\n            goto lab_0x411f36;\n        }\n    }\n  lab_0x411f43:;\n    int64_t v455 = v444 + 1; // 0x411f43\n    if (v455 != v11) {\n        int64_t v456 = v447 + 16; // 0x411f47\n        v443 = v456;\n        v444 = v455;\n        v445 = *(int64_t *)v456;\n        goto lab_0x411f23;\n    } else {\n        if (v10 < 1) {\n            goto lab_0x411fa8;\n        } else {\n            // 0x411f5b\n            goto lab_0x411f98;\n        }\n    }\n  lab_0x411eb2:;\n    int64_t v457 = function_40f250(a1, &v3, v11, a8, v440); // 0x411eca\n    v23 = v40;\n    v26 = v457;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    if ((int32_t)v457 != 0) {\n        goto lab_0x411480_9;\n    } else {\n        // 0x411ed7\n        v164 = *v441;\n        goto lab_0x411ee2;\n    }\n  lab_0x411fa8:;\n    int64_t v458 = *(int64_t *)(a1 + 224); // 0x411fb5\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v459; // 0x410a30\n    int64_t v460; // 0x411fcd\n    int64_t v461; // 0x410a30\n    if (v458 == 0) {\n        goto lab_0x411480_9;\n    } else {\n        // 0x411fc5\n        v460 = v11 - 1;\n        v23 = v40;\n        v26 = v162;\n        v25 = v41;\n        v24 = v42;\n        v22 = v64;\n        if (v460 != 0) {\n            // 0x411fd8\n            v461 = a8 + 24;\n            v459 = 0;\n            goto lab_0x411fd8_2;\n        } else {\n            goto lab_0x411480_9;\n        }\n    }\n  lab_0x41214f:;\n    int64_t v462 = v453;\n    int64_t * v463 = (int64_t *)v447;\n    *v463 = v462;\n    v448 = v463;\n    v449 = v462;\n    v450 = v285;\n    if (v285 == v452) {\n        goto lab_0x411f36;\n    } else {\n        // 0x412157\n        v448 = v463;\n        v449 = v462;\n        v450 = *(int64_t *)(8 * v452 + v1);\n        goto lab_0x411f36;\n    }\n  lab_0x411f36:\n    // 0x411f36\n    *v448 = v449 + v172;\n    *v451 = v450 + v172;\n    goto lab_0x411f43;\n  lab_0x411f98:\n    // 0x411f98\n    *(int64_t *)v166 = -1;\n    *(int64_t *)(v166 + 8) = -1;\n    if (16 * (v11 + v10) + a8 != v166 + 16) {\n        goto lab_0x411f98;\n    } else {\n        goto lab_0x411fa8;\n    }\n  lab_0x411fd8_2:;\n    int64_t v464 = v459;\n    int64_t * v465 = (int64_t *)(8 * v464 + v458); // 0x411fd8\n    int64_t v466 = *v465; // 0x411fd8\n    if (v466 == v464) {\n        goto lab_0x412027;\n    } else {\n        int64_t v467 = 16 * v464; // 0x412000\n        *(int64_t *)(v467 + v165) = *(int64_t *)(16 * v466 + v165);\n        *(int64_t *)(v467 + v461) = *(int64_t *)(16 * *v465 + v461);\n        goto lab_0x412027;\n    }\n  lab_0x412027:;\n    int64_t v468 = v464 + 1; // 0x412027\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    v459 = v468;\n    if (v468 != v460) {\n        goto lab_0x411fd8_2;\n    } else {\n        goto lab_0x411480_9;\n    }\n}\n"
        },
        {
            "funcName": "function_4129c0",
            "funcStartAddr": "4129c0",
            "funcEndAddr": "412bdd",
            "decompiledFuncCode": "int64_t function_4129c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    int32_t * v1 = (int32_t *)(a2 + 144); // 0x4129d6\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x4129dd\n    if (*v1 != 1) {\n        int64_t v3 = function_40a0d0(a2, a2); // 0x4129e9\n        if ((int32_t)v3 > 1) {\n            // 0x412a38\n            *(int32_t *)a1 = 1;\n            *(int32_t *)(a1 + 8) = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * a2);\n            *v2 = (0x100000000 * v3 >> 32) + a2;\n            return 0;\n        }\n    }\n    char * v4 = (char *)(a3 + 8); // 0x4129f3\n    char v5 = *v4; // 0x4129f3\n    int64_t v6 = a2 + (0x100000000 * a4 >> 32); // 0x4129f7\n    *v2 = v6;\n    int64_t v7; // 0x4129c0\n    int64_t v8; // 0x4129c0\n    char v9; // 0x4129c0\n    int64_t v10; // 0x4129c0\n    int64_t v11; // 0x4129c0\n    char v12; // 0x4129c0\n    int64_t v13; // 0x4129c0\n    int64_t v14; // 0x4129c0\n    int64_t v15; // 0x4129c0\n    int64_t v16; // 0x4129c0\n    int64_t * v17; // 0x412a60\n    int64_t * v18; // 0x4129c0\n    int64_t * v19; // 0x4129c0\n    int64_t * v20; // 0x4129c0\n    switch (v5) {\n        case 30: {\n        }\n        case 28: {\n        }\n        case 26: {\n            // 0x412a60\n            v17 = (int64_t *)(a2 + 104);\n            if (v6 >= *v17) {\n                // 0x412a28\n                return 7;\n            }\n            // 0x412a6a\n            v18 = (int64_t *)(a2 + 40);\n            v19 = (int64_t *)(a2 + 8);\n            v20 = (int64_t *)(a1 + 8);\n            v12 = v5;\n            v14 = a2;\n            v10 = 0;\n            v7 = v6;\n            while (true) {\n              lab_0x412a92:\n                // 0x412a92\n                v8 = v7;\n                v11 = v10;\n                v15 = v14;\n                if (v12 == 30) {\n                    // 0x412b10\n                    if (*(char *)(a2 + 139) == 0) {\n                        goto lab_0x412a99;\n                    } else {\n                        // 0x412b1e\n                        if (*(char *)(a2 + 140) == 0) {\n                            int64_t v21 = v8 + 1; // 0x412b88\n                            *v2 = v21;\n                            v13 = v21;\n                            v16 = v15;\n                            v9 = *(char *)(v8 + v15 + *v18);\n                            goto lab_0x412aaa;\n                        } else {\n                            // 0x412b28\n                            if (v8 == *(int64_t *)(a2 + 48)) {\n                                goto lab_0x412b3d;\n                            } else {\n                                // 0x412b2e\n                                if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v8) == -1) {\n                                    goto lab_0x412a99;\n                                } else {\n                                    goto lab_0x412b3d;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x412a99;\n                }\n            }\n          lab_0x412a28_3:\n            // 0x412a28\n            return 0;\n        }\n    }\n    if ((char)a6 == 0 == v5 == 22) {\n        // 0x412ba0\n        int64_t v22; // bp-56, 0x4129c0\n        function_408630(&v22, a2, a5);\n        char v23; // 0x4129c0\n        if (v23 != 21) {\n            // 0x412a28\n            return 11;\n        }\n    }\n    // 0x412a19\n    *(int32_t *)a1 = 0;\n    int64_t v24; // 0x4129c0\n    *(char *)(a1 + 8) = *(char *)&v24;\n    // 0x412a28\n    return 0;\n  lab_0x412a99:;\n    int64_t v25 = v8 + 1; // 0x412a9d\n    *v2 = v25;\n    v13 = v25;\n    v16 = v15;\n    v9 = *(char *)(*v19 + v8);\n    goto lab_0x412aaa;\n  lab_0x412aaa:;\n    uint64_t v26 = v13;\n    if (*v17 <= v26) {\n        // break -> 0x412a28\n        goto lab_0x412a28_3;\n    }\n    // 0x412ab0\n    if (*(char *)&v24 == v9) {\n        // 0x412ab5\n        if (*(char *)(*v19 + v26) == 93) {\n            // 0x412abf\n            *v2 = v26 + 1;\n            *(char *)(*v20 + (0x100000000 * v11 >> 32)) = 0;\n            unsigned char v27 = *v4; // 0x412ad0\n            v24 = v27;\n            switch (v27) {\n                case 28: {\n                    // 0x412bd0\n                    *(int32_t *)a1 = 2;\n                    goto lab_0x412a28_3;\n                }\n                case 30: {\n                    // 0x412bc3\n                    *(int32_t *)a1 = 4;\n                    goto lab_0x412a28_3;\n                }\n                default: {\n                    // 0x412ae6\n                    if (v27 != 26) {\n                        goto lab_0x412a28_3;\n                    } else {\n                        // 0x412af1\n                        *(int32_t *)a1 = 3;\n                        goto lab_0x412a28_3;\n                    }\n                }\n            }\n        }\n    }\n    // 0x412a78\n    *(char *)(*v20 + v11) = v9;\n    if (v11 == 31) {\n        // break -> 0x412a28\n        goto lab_0x412a28_3;\n    }\n    // 0x412a8a\n    v12 = *v4;\n    v14 = v16;\n    v10 = v11 + 1;\n    v7 = *v2;\n    goto lab_0x412a92;\n  lab_0x412b3d:;\n    int64_t v28 = *(int64_t *)(a2 + 24); // 0x412b3d\n    char v29 = *(char *)(*(int64_t *)(v28 + 8 * v8) + v15 + *v18); // 0x412b4c\n    if (v29 <= -1) {\n        goto lab_0x412a99;\n    } else {\n        int64_t v30 = 1; // 0x412b67\n        int64_t v31 = v15; // 0x412b67\n        if (*v1 != 1) {\n            // 0x412b69\n            v30 = 0x100000000 * function_40a0d0(a2, v8) >> 32;\n            v31 = v8;\n        }\n        int64_t v32 = v30 + v8; // 0x412b76\n        *v2 = v32;\n        v13 = v32;\n        v16 = v31;\n        v9 = v29;\n        goto lab_0x412aaa;\n    }\n}\n"
        },
        {
            "funcName": "function_412be0",
            "funcStartAddr": "412be0",
            "funcEndAddr": "413283",
            "decompiledFuncCode": "int64_t function_412be0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x412bee\n    uint64_t v3 = *v2; // 0x412bee\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x412d08\n        *(char *)(v1 + 8) = 2;\n        // 0x412d0e\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x412bff\n    char * v5 = (char *)(v1 + 10); // 0x412c03\n    int32_t v6 = *(int32_t *)(a2 + 144); // 0x412c0b\n    int64_t v7 = v4 + v3;\n    unsigned char v8 = *(char *)v7; // 0x412c14\n    char v9 = *v5 & -97;\n    *v5 = v9;\n    *(char *)a1 = v8;\n    char v10; // 0x412be0\n    if (v6 < 2) {\n        if (v8 == 92) {\n            goto lab_0x412ce0;\n        } else {\n            // 0x412ca6\n            *(char *)(v1 + 8) = 1;\n            uint16_t v11 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)*__ctype_b_loc()); // 0x412cbb\n            v10 = 64 * ((char)(v11 / 8) % 2 | (char)(v8 == 95)) | v9;\n            goto lab_0x412c85;\n        }\n    } else {\n        // 0x412c29\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x412c2f\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                int32_t * v12 = (int32_t *)(v1 + 8); // 0x412d90\n                *v12 = *v12 & -0x200100 | 0x200001;\n                // 0x412d0e\n                return 1;\n            }\n        }\n        if (v8 == 92) {\n            goto lab_0x412ce0;\n        } else {\n            // 0x412c48\n            *(char *)(v1 + 8) = 1;\n            int32_t wc = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3); // 0x412c55\n            v10 = 64 * (char)(wc == 95 | iswalnum(wc) != 0) | *v5 & -65;\n            goto lab_0x412c85;\n        }\n    }\n  lab_0x412ce0:;\n    uint64_t v13 = v3 + 1;\n    if (v13 >= *(int64_t *)(a2 + 88)) {\n        // 0x412ceb\n        *(char *)(v1 + 8) = 36;\n        return 1;\n    }\n    // 0x412d20\n    char v14; // 0x412be0\n    int32_t v15; // 0x4131e7\n    if (*(char *)(a2 + 139) != 0) {\n        if (v6 < 2) {\n            goto lab_0x413202;\n        } else {\n            int64_t v16 = *(int64_t *)(a2 + 16) + 4 * v13;\n            v15 = *(int32_t *)v16;\n            if (v15 == -1) {\n                goto lab_0x41326b;\n            } else {\n                // 0x4131ef\n                if (*(int64_t *)(a2 + 48) == v3 + 2) {\n                    goto lab_0x413202;\n                } else {\n                    // 0x4131fa\n                    if (*(int32_t *)(v16 + 4) == -1) {\n                        goto lab_0x41326b;\n                    } else {\n                        goto lab_0x413202;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x412d2e\n        v14 = *(char *)(v4 + v13);\n        goto lab_0x412d3b;\n    }\n  lab_0x412c85:\n    // 0x412c85\n    *v5 = v10;\n    g88 = v8 - 10;\n    switch (v8) {\n        case 10: {\n            // 0x412f18\n            if ((a3 & 2048) == 0) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412f2a\n            *(char *)(v1 + 8) = 10;\n            // 0x412d0e\n            return 1;\n        }\n        case 36: {\n            if ((a3 & 8) != 0) {\n                // 0x412f80\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x412d0e\n                return 1;\n            }\n            int64_t v17 = v3 + 1; // 0x412f46\n            if (v17 == *(int64_t *)(a2 + 88)) {\n                // 0x412f80\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412f50\n            *v2 = v17;\n            int64_t v18; // bp-72, 0x412be0\n            function_412be0(&v18, a2, a3);\n            *v2 = *v2 - 1;\n            char v19; // 0x412be0\n            if (v19 < 11) {\n                // 0x412f80\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x412d0e\n                return 1;\n            }\n            // break -> 0x412d0e\n            break;\n        }\n        case 40: {\n            // 0x412de8\n            if ((a3 & 0x2000) == 0) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412dfa\n            *(char *)(v1 + 8) = 8;\n            // 0x412d0e\n            return 1;\n        }\n        case 41: {\n            // 0x412e08\n            if ((a3 & 0x2000) == 0) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412e1a\n            *(char *)(v1 + 8) = 9;\n            // 0x412d0e\n            return 1;\n        }\n        case 42: {\n            // 0x412e28\n            *(char *)(v1 + 8) = 11;\n            // 0x412d0e\n            return 1;\n        }\n        case 43: {\n            // 0x412e40\n            if ((a3 & 1026) != 0) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412e52\n            *(char *)(v1 + 8) = 18;\n            // 0x412d0e\n            return 1;\n        }\n        case 46: {\n            // 0x412e60\n            *(char *)(v1 + 8) = 5;\n            // 0x412d0e\n            return 1;\n        }\n        case 63: {\n            // 0x412e70\n            if ((a3 & 1026) != 0) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412e82\n            *(char *)(v1 + 8) = 19;\n            // 0x412d0e\n            return 1;\n        }\n        case 91: {\n            // 0x412e90\n            *(char *)(v1 + 8) = 20;\n            // 0x412d0e\n            return 1;\n        }\n        case 94: {\n            if ((a3 & 0x800008) == 0 == (v3 != 0)) {\n                // 0x41323a\n                if ((a3 & 2048) == 0 | *(char *)(v7 - 1) != 10) {\n                    // 0x412d0e\n                    return 1;\n                }\n            }\n            // 0x412eb2\n            *(char *)(v1 + 8) = 12;\n            *(int32_t *)a1 = 16;\n            // 0x412d0e\n            return 1;\n        }\n        case 123: {\n            // 0x412ed0\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412ee9\n            *(char *)(v1 + 8) = 23;\n            // 0x412d0e\n            return 1;\n        }\n        case 124: {\n            // 0x412ef8\n            if ((a3 & 0x8400) != 0x8000) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412f2a\n            *(char *)(v1 + 8) = 10;\n            // 0x412d0e\n            return 1;\n        }\n        case 125: {\n            // 0x412f98\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x412d0e\n                return 1;\n            }\n            // 0x412fb1\n            *(char *)(v1 + 8) = 24;\n            // 0x412d0e\n            return 1;\n        }\n    }\n    // 0x412d0e\n    return 1;\n  lab_0x413202:;\n    int64_t v20 = *(int64_t *)(a2 + 40); // 0x41320e\n    if (*(char *)(a2 + 140) == 0) {\n        // 0x413258\n        v14 = *(char *)(v20 + a2 + v13);\n        goto lab_0x412d3b;\n    } else {\n        int64_t v21 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v13); // 0x41321b\n        char v22 = *(char *)(v20 + a2 + v21); // 0x41321f\n        v14 = v22;\n        if (v22 > -1) {\n            goto lab_0x412d3b;\n        } else {\n            // 0x412d2e\n            v14 = *(char *)(v4 + v13);\n            goto lab_0x412d3b;\n        }\n    }\n  lab_0x412d3b:;\n    int64_t v23 = v14;\n    int32_t v24 = v14;\n    *(char *)a1 = v14;\n    *(char *)(v1 + 8) = 1;\n    int64_t v25; // 0x412be0\n    int64_t v26; // 0x412be0\n    int32_t wc2; // 0x412be0\n    int32_t v27; // 0x412be0\n    int32_t v28; // 0x412be0\n    char v29; // 0x412be0\n    if (v6 < 2) {\n        uint16_t v30 = *(int16_t *)(2 * v23 + (int64_t)*__ctype_b_loc()); // 0x412dbc\n        char v31 = *v5; // 0x412dd0\n        v29 = 64 * ((char)(v30 / 8) % 2 | (char)(v14 == 95)) | v31 & -65;\n        v28 = v24;\n        v26 = v23;\n        goto lab_0x412d73;\n    } else {\n        // 0x412d47\n        v27 = v24;\n        wc2 = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v13);\n        v25 = v23;\n        goto lab_0x412d4e;\n    }\n  lab_0x41326b:;\n    unsigned char v32 = *(char *)(v4 + v13); // 0x41326b\n    *(char *)(v1 + 8) = 1;\n    *(char *)a1 = v32;\n    v27 = v32;\n    wc2 = v15;\n    v25 = v32;\n    goto lab_0x412d4e;\n  lab_0x412d4e:;\n    int32_t v33 = iswalnum(wc2); // 0x412d50\n    v29 = 64 * (char)(wc2 == 95 | v33 != 0) | *v5 & -65;\n    v28 = v27;\n    v26 = v25;\n    goto lab_0x412d73;\n  lab_0x412d73:\n    // 0x412d73\n    *v5 = v29;\n    uint64_t v34 = v26 + 0xffffffd9; // 0x412d73\n    g89 = v34 % 256;\n    switch ((char)v34) {\n        case 0: {\n            // 0x4131ab\n            if ((a3 & 0x80000) == 0) {\n                // 0x4131bd\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 128;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 1: {\n            // 0x413194\n            if ((a3 & 0x2000) != 0) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412dfa\n            *(char *)(v1 + 8) = 8;\n            // 0x412d0e\n            return 2;\n        }\n        case 2: {\n            // 0x41317d\n            if ((a3 & 0x2000) != 0) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412e1a\n            *(char *)(v1 + 8) = 9;\n            // 0x412d0e\n            return 2;\n        }\n        case 4: {\n            // 0x413162\n            if ((a3 & 1026) != 2) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412e52\n            *(char *)(v1 + 8) = 18;\n            // 0x412d0e\n            return 2;\n        }\n        case 10: {\n        }\n        case 11: {\n        }\n        case 12: {\n        }\n        case 13: {\n        }\n        case 14: {\n        }\n        case 15: {\n        }\n        case 16: {\n        }\n        case 17: {\n        }\n        case 18: {\n            // 0x41313a\n            if ((a3 & 0x4000) == 0) {\n                // 0x41314c\n                *(char *)(v1 + 8) = 4;\n                *a1 = (int64_t)(v28 - 49);\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 21: {\n            // 0x413119\n            if ((a3 & 0x80000) == 0) {\n                // 0x41312b\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 6;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 23: {\n            // 0x4130f8\n            if ((a3 & 0x80000) == 0) {\n                // 0x41310a\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 9;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 24: {\n            // 0x4130dd\n            if ((a3 & 1026) != 2) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412e82\n            *(char *)(v1 + 8) = 19;\n            // 0x412d0e\n            return 2;\n        }\n        case 27: {\n            // 0x4130bc\n            if ((a3 & 0x80000) == 0) {\n                // 0x4130ce\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 512;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 44: {\n            // 0x4130a1\n            if ((a3 & 0x80000) == 0) {\n                // 0x4130b3\n                *(char *)(v1 + 8) = 35;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 48: {\n            // 0x413086\n            if ((a3 & 0x80000) == 0) {\n                // 0x413098\n                *(char *)(v1 + 8) = 33;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 57: {\n            // 0x413065\n            if ((a3 & 0x80000) == 0) {\n                // 0x413077\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 64;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 59: {\n            // 0x413044\n            if ((a3 & 0x80000) == 0) {\n                // 0x413056\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 256;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 76: {\n            // 0x413029\n            if ((a3 & 0x80000) == 0) {\n                // 0x41303b\n                *(char *)(v1 + 8) = 34;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 80: {\n            // 0x41300e\n            if ((a3 & 0x80000) == 0) {\n                // 0x413020\n                *(char *)(v1 + 8) = 32;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 84: {\n            // 0x412ff0\n            if ((a3 & 0x1200) != 512) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412ee9\n            *(char *)(v1 + 8) = 23;\n            // 0x412d0e\n            return 2;\n        }\n        case 85: {\n            // 0x412fd5\n            if ((a3 & 0x8400) == 0) {\n                // 0x412fe7\n                *(char *)(v1 + 8) = 10;\n            }\n            // 0x412d0e\n            return 2;\n        }\n        case 86: {\n            // 0x412fba\n            if ((a3 & 0x1200) != 512) {\n                // 0x412d0e\n                return 2;\n            }\n            // 0x412fb1\n            *(char *)(v1 + 8) = 24;\n            // 0x412d0e\n            return 2;\n        }\n    }\n    // 0x412d0e\n    return 2;\n}\n"
        },
        {
            "funcName": "function_413290",
            "funcStartAddr": "413290",
            "funcEndAddr": "413346",
            "decompiledFuncCode": "int64_t function_413290(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 72);\n    int64_t result2 = -1;\n    *v1 = (0x100000000 * function_412be0((int64_t *)a2, a1, a3) >> 32) + *v1;\n    char v2 = *(char *)(a2 + 8); // 0x4132c9\n    int64_t result = result2; // 0x413290\n    switch (v2) {\n        case 2: {\n            // 0x413327\n            return -2;\n        }\n        case 24: {\n            // 0x413327\n            return result;\n        }\n    }\n    // 0x4132d6\n    int64_t v3; // 0x413290\n    unsigned char v4 = (char)v3; // 0x4132be\n    while (v4 != 44) {\n        int64_t v5 = -2; // 0x4132dd\n        if (v2 == 1) {\n            // 0x4132e8\n            v5 = -2;\n            if (result2 != -2 && v4 <= 57) {\n                int64_t v6 = v4; // 0x4132be\n                if (result2 == -1) {\n                    // 0x413338\n                    v5 = v6 - 48;\n                } else {\n                    int64_t v7 = 10 * result2 + v6; // 0x4132ff\n                    int64_t v8 = v7 - 0x8030; // 0x413308\n                    v5 = v8 < 0 == (0x802f - v7 & v7) < 0 == (v8 != 0) ? 0x8000 : v7 - 48;\n                }\n            }\n        }\n        // 0x4132b0\n        result2 = v5;\n        *v1 = (0x100000000 * function_412be0((int64_t *)a2, a1, a3) >> 32) + *v1;\n        v2 = *(char *)(a2 + 8);\n        result = result2;\n        switch (v2) {\n            case 2: {\n                // 0x413327\n                return -2;\n            }\n            case 24: {\n                // 0x413327\n                return result;\n            }\n        }\n        // 0x4132d6\n        int64_t v9; // 0x413290\n        v4 = *(char *)&v9;\n    }\n    // 0x413327\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413350",
            "funcStartAddr": "413350",
            "funcEndAddr": "414834",
            "decompiledFuncCode": "int64_t function_413350(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x413350\n    int128_t v1; // 0x413350\n    int128_t v2 = v1;\n    int64_t v3 = a6;\n    int64_t v4 = a3;\n    int64_t v5; // bp-280, 0x413350\n    int64_t v6 = &v5; // 0x41335a\n    unsigned char v7 = *(char *)(a3 + 8); // 0x413369\n    int64_t v8 = v7; // 0x413369\n    int64_t v9 = v4; // 0x413375\n    v4 = v8;\n    g90 = v8;\n    int32_t v10 = v7;\n    int64_t * v11; // 0x413350\n    int32_t v12; // 0x413350\n    int64_t v13; // 0x413350\n    int64_t v14; // bp-88, 0x413350\n    int64_t v15; // 0x413350\n    int64_t v16; // 0x4140ab\n    char v17; // 0x4140b2\n    int64_t * mem2; // 0x413a99\n    int64_t v18; // 0x413a99\n    int64_t * v19; // 0x413ac0\n    char * v20; // 0x413ac7\n    switch (v7) {\n        case 1: {\n            int64_t v21 = a2 + 112; // 0x413c17\n            int64_t v22 = a2 + 128; // 0x413c1b\n            int64_t v23 = function_40ad90(v21, v22, 0, 0, v9); // 0x413c28\n            if (v23 == 0) {\n                // 0x413ce1\n                *(int32_t *)a6 = 12;\n                // 0x4134c8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x413c3b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                int64_t * v24 = (int64_t *)(a1 + 72); // 0x413c58\n                int64_t v25 = &v14;\n                int64_t v26 = 0x100000000 * v23 >> 32; // 0x413cc5\n                uint64_t v27 = *v24; // 0x413c58\n                while (*(int64_t *)(a1 + 104) > v27) {\n                    // 0x413c66\n                    if (v27 == *(int64_t *)(a1 + 48)) {\n                        // break -> 0x4133f0\n                        break;\n                    }\n                    // 0x413c70\n                    if (*(int32_t *)(*(int64_t *)(a1 + 16) + 4 * v27) != -1) {\n                        // break -> 0x4133f0\n                        break;\n                    }\n                    // 0x413c7e\n                    *v24 = (0x100000000 * function_412be0((int64_t *)v9, a1, a4) >> 32) + *v24;\n                    int64_t v28 = function_40ad90(v21, v22, 0, 0, v9); // 0x413ca1\n                    v26 = function_40ad90(v21, v22, (int32_t)v26, (int32_t)v28, v25);\n                    if (v28 == 0 || v26 == 0) {\n                        // 0x413ce1\n                        *(int32_t *)a6 = 12;\n                        // 0x4134c8\n                        *(int64_t *)(v6 + 24) = 0;\n                        // 0x41341a\n                        return *(int64_t *)(v6 + 24);\n                    }\n                    v27 = *v24;\n                }\n            }\n            goto lab_0x4133f0;\n        }\n        case 4: {\n            int64_t v29 = 1 << v10 % 32; // 0x413d01\n            if ((*(int64_t *)(a2 + 168) & v29) == 0) {\n                // 0x41437c\n                *(int32_t *)a6 = 6;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v30 = (int64_t *)(a2 + 160); // 0x413d1c\n            *v30 = *v30 | v29;\n            if (function_40ad90(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x413ce1\n                *(int32_t *)a6 = 12;\n                // 0x4134c8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v31 = (int64_t *)(a2 + 152); // 0x413d3d\n            *v31 = *v31 + 1;\n            char * v32 = (char *)(a2 + 176); // 0x413d45\n            *v32 = *v32 | 2;\n            goto lab_0x4133f0;\n        }\n        case 5: {\n            // 0x413d51\n            if (function_40ad90(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x413ce1\n                *(int32_t *)a6 = 12;\n                // 0x4134c8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x413d7b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                char * v33 = (char *)(a2 + 176); // 0x413d88\n                *v33 = *v33 | 2;\n            }\n            goto lab_0x4133f0;\n        }\n        case 8: {\n            int64_t * v34 = (int64_t *)(a2 + 48); // 0x413431\n            uint64_t v35 = *v34; // 0x413431\n            v5 = a5;\n            *v34 = v35 + 1;\n            int64_t v36 = function_412be0((int64_t *)v9, a1, a4 | 0x800000); // 0x413456\n            int64_t * v37 = (int64_t *)(a1 + 72); // 0x41345d\n            *v37 = (0x100000000 * v36 >> 32) + *v37;\n            char * v38 = (char *)(v9 + 8); // 0x413463\n            int64_t v39 = 0; // 0x413469\n            if (*v38 != 9) {\n                // 0x41346f\n                v4 = v9;\n                int64_t v40 = function_414980(a1, a2, v9, a4, v5 + 1, a6); // 0x41348b\n                if (*(int32_t *)&v3 != 0) {\n                    // 0x4134c8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x41341a\n                    return *(int64_t *)(v6 + 24);\n                }\n                // 0x413499\n                v39 = v40;\n                if (*v38 != 9) {\n                    if (v40 != 0) {\n                        // 0x4134aa\n                        function_4085c0(v40, 0x4097d0, 0);\n                    }\n                    // 0x4134b9\n                    *(int32_t *)a6 = 8;\n                  lab_0x4134c8:\n                    // 0x4134c8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x41341a\n                    return *(int64_t *)(v6 + 24);\n                }\n            }\n            // 0x413ef2\n            if (v35 < 9) {\n                int32_t v41 = 1 << (int32_t)v35 % 32;\n                v4 = v41;\n                int64_t * v42 = (int64_t *)(a2 + 168); // 0x413f4a\n                *v42 = *v42 | (int64_t)v41;\n            }\n            int64_t v43 = function_40ad90(a2 + 112, a2 + 128, (int32_t)v39, 0, (int64_t)&v14); // 0x413f1d\n            if (v43 == 0) {\n                // 0x413ce1\n                *(int32_t *)a6 = 12;\n                // 0x4134c8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x413f30\n            *(int64_t *)(v43 + 40) = v35;\n            goto lab_0x4133f0;\n        }\n        case 9: {\n            if ((a4 & 0x20000) == 0) {\n                // 0x413ed9\n                *(int32_t *)a6 = 16;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x4133c0;\n        }\n        case 11: {\n            goto lab_0x4133a1;\n        }\n        case 12: {\n            char * v44 = (char *)(a2 + 176); // 0x413da6\n            unsigned char v45 = *v44; // 0x413da6\n            if ((v45 & 16) != 0) {\n                // 0x413e00\n            } else {\n                int64_t v46 = v45; // 0x413da6\n                *v44 = v45 | 16;\n                v13 = 0;\n                v15 = 0;\n                if ((v46 & 8) != 0) {\n                    goto lab_0x4145f5;\n                } else {\n                    // 0x413dc7\n                    *(int64_t *)(a2 + 184) = 0x3ff000000000000;\n                    *(int64_t *)(a2 + 192) = 0x7fffffe87fffffe;\n                    v13 = 128;\n                    v15 = 2;\n                    if ((v46 & 4) == 0) {\n                        goto lab_0x4145f5;\n                    } else {\n                        // 0x413df1\n                        __asm_movups(*(int128_t *)(a2 + 200), __asm_pxor(v2, v2));\n                        v12 = *(int32_t *)&v4;\n                        goto lab_0x413e00_2;\n                    }\n                }\n            }\n        }\n        case 18: {\n            goto lab_0x4133a1;\n        }\n        case 19: {\n            goto lab_0x4133a1;\n        }\n        case 20: {\n            int64_t * mem = calloc(32, 1); // 0x413a83\n            v5 = (int64_t)mem;\n            mem2 = calloc(80, 1);\n            if (mem == NULL || mem2 == NULL) {\n                // 0x414366\n                free((int64_t *)v5);\n                free(mem2);\n                // 0x413ce1\n                *(int32_t *)a6 = 12;\n                // 0x4134c8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x413ab5\n            v18 = (int64_t)mem2;\n            v19 = (int64_t *)v9;\n            int64_t v47 = function_408630(v19, a1, a4); // 0x413ac0\n            v20 = (char *)(v9 + 8);\n            char v48 = *v20; // 0x413ac7\n            v17 = v48;\n            v16 = v47;\n            switch (v48) {\n                case 2: {\n                    // 0x41433a\n                    *(int32_t *)a6 = 2;\n                    v11 = (int64_t *)(v6 + 48);\n                    goto lab_0x41400b_3;\n                }\n                case 25: {\n                    char * v49 = (char *)(v18 + 32); // 0x41407e\n                    *v49 = *v49 | 1;\n                    if ((a4 & 256) != 0) {\n                        int64_t * v50 = (int64_t *)v5; // 0x414092\n                        *v50 = *v50 | 1024;\n                    }\n                    int64_t * v51 = (int64_t *)(a1 + 72); // 0x41409c\n                    *v51 = *v51 + (0x100000000 * v47 >> 32);\n                    v16 = function_408630(v19, a1, a4);\n                    v17 = *v20;\n                    if (v17 == 2) {\n                        // 0x41433a\n                        *(int32_t *)a6 = 2;\n                        v11 = (int64_t *)(v6 + 48);\n                        goto lab_0x41400b_3;\n                    } else {\n                        goto lab_0x413ae2;\n                    }\n                }\n                default: {\n                    goto lab_0x413ae2;\n                }\n            }\n        }\n        case 23: {\n            if ((a4 & 0x1000000) != 0) {\n              lab_0x4136c5:\n                // 0x4136c5\n                *(int64_t *)(v6 + 24) = 0;\n                *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n                // 0x41341a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x4133a1;\n        }\n        case 24: {\n            goto lab_0x4133c0;\n        }\n        case 32: {\n            goto lab_0x413b84;\n        }\n        case 33: {\n            goto lab_0x413b84;\n        }\n        case 34: {\n            goto lab_0x413bd0;\n        }\n        case 35: {\n            goto lab_0x413bd0;\n        }\n        case 36: {\n            // 0x413bf2\n            *(int32_t *)a6 = 5;\n            // 0x41341a\n            return *(int64_t *)(v6 + 24);\n        }\n        default: {\n            goto lab_0x4134c8;\n        }\n    }\n  lab_0x4139db:;\n    // 0x4139db\n    int64_t * v52; // 0x413350\n    if (*v52 == 0) {\n        goto lab_0x4134c8;\n    } else {\n        goto lab_0x41377b;\n    }\n  lab_0x41377b:\n    // 0x41377b\n    function_4085c0(*v52, 0x4097d0, 0);\n    *v52 = 0;\n    return *(int64_t *)(v6 + 24);\n  lab_0x413872:;\n    // 0x413872\n    int64_t v53; // 0x413350\n    char * v54 = (char *)(v53 + 8);\n    char * v55 = v54; // 0x41387b\n    int128_t v56; // 0x413350\n    int128_t v57 = v56; // 0x41387b\n    int64_t * v58; // 0x4133f0\n    int64_t * v59; // 0x413350\n    if ((*v58 & 0x200000) == 0) {\n        // 0x41434a\n        if (*v54 != 2) {\n            // 0x4139d0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4139db;\n        } else {\n            // 0x414356\n            *(int32_t *)*v59 = 9;\n            goto lab_0x4139db;\n        }\n    }\n    goto lab_0x413881;\n  lab_0x413994:;\n    // 0x413994\n    int64_t v83; // 0x413350\n    int64_t v336 = v83; // 0x413996\n    int64_t v337 = v336 - 0x7fff; // 0x413996\n    int64_t v84; // 0x413350\n    int64_t v316 = v84; // 0x4139a4\n    if (v337 < 0 == (0x7ffe - v336 & v336) < 0 == (v337 != 0)) {\n        // 0x4139a6\n        *(int32_t *)*v59 = 15;\n        goto lab_0x4139db;\n    }\n    goto lab_0x413939;\n  lab_0x4138d9:;\n    int64_t v338 = *v58; // 0x4138d9\n    v4 = v338;\n    int128_t v80; // 0x413845\n    int128_t * v78; // 0x413350\n    *v78 = (int128_t)__asm_movaps(v80);\n    int64_t v66; // 0x413350\n    int64_t v339 = function_413290(v66, v53, v338); // 0x4138e9\n    v5 = v339;\n    v56 = __asm_movdqa(*v78);\n    int64_t v81; // 0x413350\n    if (v339 == -2) {\n        goto lab_0x413872;\n    } else {\n        int64_t v340 = v81;\n        if (v339 != -1 == v339 < v340) {\n            // 0x4139d0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4139db;\n        }\n        // 0x413915\n        if (*(char *)(v53 + 8) != 24) {\n            // 0x4139d0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4139db;\n        }\n        // 0x413921\n        v83 = v339;\n        v84 = v340;\n        if (v339 != -1) {\n            goto lab_0x413994;\n        } else {\n            int64_t v341 = v340 - 0x7fff; // 0x41392a\n            v316 = v340;\n            if (v341 < 0 == (0x7ffe - v340 & v340) < 0 == (v341 != 0)) {\n                // 0x4139a6\n                *(int32_t *)*v59 = 15;\n                goto lab_0x4139db;\n            }\n            goto lab_0x413939;\n        }\n    }\n  lab_0x413881:;\n    // 0x413881\n    int64_t * v60; // 0x4134f6\n    int64_t v61; // 0x4134f6\n    *v60 = v61;\n    int128_t * v62; // 0x4134fa\n    *v62 = (int128_t)__asm_movaps(v57);\n    *v55 = 1;\n    int64_t v63 = *v52; // 0x413895\n    int64_t v64 = v53; // 0x413895\n    int64_t v65 = v66; // 0x413895\n    goto lab_0x41366e;\n  lab_0x4138a0:\n    // 0x4138a0\n    if (*(int32_t *)*v59 != 0) {\n        // 0x4134c8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4138af;\n  lab_0x413939:;\n    int64_t v315 = v316;\n    int64_t v317 = *v58; // 0x413939\n    v4 = v317;\n    int64_t v318 = function_412be0((int64_t *)v53, v66, v317); // 0x413944\n    int64_t v319 = *v52; // 0x413949\n    *v60 = *v60 + (0x100000000 * v318 >> 32);\n    int64_t v127; // 0x413350\n    int64_t v99; // 0x413350\n    int64_t v132; // 0x413350\n    int64_t v128; // 0x413350\n    int64_t v101; // 0x413350\n    int64_t v135; // 0x413350\n    int64_t v102; // 0x413350\n    int64_t v103; // 0x413350\n    int64_t v136; // 0x413350\n    int64_t v129; // 0x413350\n    int64_t v134; // 0x413350\n    int64_t v100; // 0x413350\n    int64_t v133; // 0x413350\n    int64_t * v89; // 0x413350\n    int64_t * v110; // 0x413350\n    int64_t * v118; // 0x413350\n    int64_t v114; // 0x413350\n    char * v108; // 0x413350\n    if (v319 == 0) {\n        goto lab_0x4138a0;\n    } else {\n        int64_t v320 = v5; // 0x41395d\n        if ((v320 || v315) != 0) {\n            if (v315 < 1) {\n                // 0x414828\n                v4 = 0;\n                v132 = 0;\n                v133 = v315;\n                v134 = *v52;\n                v135 = v53;\n                v136 = v66;\n                goto lab_0x413a52;\n            } else {\n                int64_t v321; // 0x413350\n                int64_t v322; // 0x413350\n                int64_t v323; // 0x413350\n                int64_t v324; // 0x413350\n                int64_t v325; // 0x413350\n                if (v315 == 1) {\n                    int64_t v326 = *v52; // 0x4147f7\n                    v321 = v320;\n                    v322 = v53;\n                    v323 = v326;\n                    v324 = v66;\n                    v325 = v326;\n                } else {\n                    int64_t v327 = *v110; // 0x4136f3\n                    int64_t v328 = *v52; // 0x4136f8\n                    *v89 = v66;\n                    *v118 = v53;\n                    int64_t v329 = v327 + 112; // 0x41370f\n                    int64_t v330 = v327 + 128; // 0x413713\n                    int64_t v331 = 2; // 0x41371d\n                    int64_t v332 = function_40ae70(v328, *v110); // 0x41373a\n                    v4 = v328;\n                    *v108 = 16;\n                    int64_t v333 = function_40ad90(v329, v330, (int32_t)v328, (int32_t)v332, v114); // 0x41375e\n                    if (v332 == 0 || v333 == 0) {\n                        // 0x413770\n                        *(int32_t *)*v59 = 12;\n                        goto lab_0x41377b;\n                    }\n                    // 0x413725\n                    v331++;\n                    int64_t v334 = v333; // 0x41372c\n                    int64_t v335 = v332; // 0x41372c\n                    while (v315 >= v331) {\n                        // 0x413732\n                        v332 = function_40ae70(v335, *v110);\n                        v4 = v334;\n                        *v108 = 16;\n                        v333 = function_40ad90(v329, v330, (int32_t)v334, (int32_t)v332, v114);\n                        if (v332 == 0 || v333 == 0) {\n                            // 0x413770\n                            *(int32_t *)*v59 = 12;\n                            goto lab_0x41377b;\n                        }\n                        // 0x413725\n                        v331++;\n                        v334 = v333;\n                        v335 = v332;\n                    }\n                    // 0x4139f0\n                    v321 = v5;\n                    v322 = *v118;\n                    v323 = v332;\n                    v324 = *v89;\n                    v325 = v333;\n                }\n                // 0x413a03\n                v4 = v325;\n                v127 = v325;\n                v128 = v322;\n                v129 = v324;\n                v99 = v325;\n                v100 = v315;\n                v101 = v322;\n                v102 = v323;\n                v103 = v324;\n                if (v315 != v321) {\n                    goto lab_0x413a2f;\n                } else {\n                    goto lab_0x413a10;\n                }\n            }\n        } else {\n            // 0x41396a\n            v4 = 0;\n            function_4085c0(v319, 0x4097d0, 0);\n            if (*(int32_t *)*v59 != 0) {\n                goto lab_0x41377b;\n            }\n            goto lab_0x4138af;\n        }\n    }\n  lab_0x41366e:;\n    uint32_t v67 = *(int32_t *)*v59; // 0x413673\n    v4 = v67;\n    if (v63 == 0 == (v67 != 0)) {\n        goto lab_0x4139db;\n    }\n    // 0x413682\n    *v52 = v63;\n    int64_t v68 = v63; // 0x413682\n    int64_t v69 = v64; // 0x413682\n    int64_t v70 = v65; // 0x413682\n    goto lab_0x413687;\n  lab_0x4138af:\n    // 0x4138af\n    *v52 = 0;\n    v68 = 0;\n    v69 = v53;\n    v70 = v66;\n    goto lab_0x413687;\n  lab_0x413808:;\n    // 0x413808\n    int64_t v96; // 0x413350\n    int64_t v104 = v96;\n    function_4085c0(v104, 0x408760, (int32_t)*(int64_t *)(v104 + 40));\n    goto lab_0x413819;\n  lab_0x41356a:;\n    // 0x41356a\n    int64_t v94; // 0x413350\n    int64_t v105 = v94;\n    int64_t v93; // 0x413350\n    int64_t v106 = v93;\n    int64_t v92; // 0x413350\n    int64_t v107 = v92;\n    char v90; // 0x413350\n    *v108 = v90;\n    int64_t v109 = *v110; // 0x413571\n    int64_t v111 = v109 + 112; // 0x413583\n    int64_t v112 = v109 + 128; // 0x413587\n    int64_t v113 = function_40ad90(v111, v112, (int32_t)v107, 0, v114); // 0x413594\n    v4 = v113;\n    if (v113 == 0) {\n        // 0x413770\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41377b;\n    }\n    // 0x4135a5\n    int64_t v91; // 0x413350\n    int64_t v115 = v91 + 2; // 0x4135a5\n    int64_t v116 = v113; // 0x4135ad\n    int64_t v117 = v106; // 0x4135ad\n    if (v115 <= v5) {\n        // 0x4135b3\n        *v118 = v106;\n        int64_t v119 = v115; // 0x4135bb\n        int64_t v120 = v107; // 0x4135bb\n        v120 = function_40ae70(v120, *v110);\n        v4 = v113;\n        *v108 = 16;\n        int64_t v121 = function_40ad90(v111, v112, (int32_t)v113, (int32_t)v120, v114); // 0x4135ea\n        if (v120 == 0 || v121 == 0) {\n            // 0x413770\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41377b;\n        }\n        // 0x413601\n        v4 = v121;\n        *v108 = 10;\n        int64_t v122 = function_40ad90(v111, v112, (int32_t)v121, 0, v114); // 0x41361c\n        if (v122 == 0) {\n            // 0x413770\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41377b;\n        }\n        // 0x41362d\n        v119++;\n        int64_t v123 = v122; // 0x413635\n        while (v119 <= v5) {\n            // 0x4135be\n            v120 = function_40ae70(v120, *v110);\n            v4 = v123;\n            *v108 = 16;\n            v121 = function_40ad90(v111, v112, (int32_t)v123, (int32_t)v120, v114);\n            if (v120 == 0 || v121 == 0) {\n                // 0x413770\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41377b;\n            }\n            // 0x413601\n            v4 = v121;\n            *v108 = 10;\n            v122 = function_40ad90(v111, v112, (int32_t)v121, 0, v114);\n            if (v122 == 0) {\n                // 0x413770\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41377b;\n            }\n            // 0x41362d\n            v119++;\n            v123 = v122;\n        }\n        // 0x413637\n        v4 = v122;\n        v116 = v122;\n        v117 = *v118;\n    }\n    int64_t v124 = v117;\n    int64_t v125 = v116; // 0x41364d\n    int64_t v126 = *v89; // 0x41363f\n    v127 = v125;\n    v128 = v124;\n    v129 = v105;\n    if (v126 == 0) {\n        goto lab_0x413a10;\n    } else {\n        // 0x41364d\n        *v108 = 16;\n        v63 = function_40ad90(v111, v112, (int32_t)v126, (int32_t)v125, v114);\n        v64 = v124;\n        v65 = v105;\n        goto lab_0x41366e;\n    }\n  lab_0x413687:;\n    unsigned char v71 = *(char *)(v69 + 8); // 0x413687\n    if ((*v58 & 0x1000000) != 0) {\n        if (v71 != 11 != v71 != 23) {\n            // 0x4136ac\n            if (v68 == 0) {\n                goto lab_0x4136c5;\n            } else {\n                // 0x4136b6\n                function_4085c0(v68, 0x4097d0, 0);\n                goto lab_0x4136c5;\n            }\n        }\n    }\n    char v72 = v71; // 0x413414\n    int64_t v73 = v70; // 0x413414\n    int64_t v74 = v69; // 0x413414\n    if (v71 >= 24) {\n        // break -> 0x41341a\n        goto lab_0x41341a_2;\n    }\n    goto lab_0x4134e0;\n  lab_0x413819:\n    // 0x413819\n    v90 = v5 == -1 ? 11 : 10;\n    int64_t v95; // 0x413350\n    v91 = v95;\n    v92 = v104;\n    int64_t v97; // 0x413350\n    v93 = v97;\n    int64_t v98; // 0x413350\n    v94 = v98;\n    goto lab_0x41356a;\n  lab_0x413a10:\n    // 0x413a10\n    *v52 = v127;\n    v68 = v127;\n    v69 = v128;\n    v70 = v129;\n    goto lab_0x413687;\n  lab_0x413a2f:\n    // 0x413a2f\n    *v89 = v99;\n    int64_t v130 = function_40ae70(v102, *v110); // 0x413a3c\n    int64_t v131 = *v89; // 0x413a41\n    v4 = v131;\n    v132 = v131;\n    v133 = v100;\n    v134 = v130;\n    v135 = v101;\n    v136 = v103;\n    if (v130 == 0) {\n        // 0x413770\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41377b;\n    }\n    goto lab_0x413a52;\n  lab_0x413a52:\n    // 0x413a52\n    *v89 = v132;\n    v95 = v133;\n    v96 = v134;\n    v97 = v135;\n    v98 = v136;\n    if (*(char *)(v134 + 48) != 17) {\n        goto lab_0x413819;\n    } else {\n        goto lab_0x413808;\n    }\n  lab_0x41464a:;\n    // 0x41464a\n    uint64_t v137; // 0x413350\n    int64_t v138 = 1 << v137;\n    v4 = v138;\n    int64_t * v139; // 0x413350\n    *v139 = *v139 | v138;\n    goto lab_0x414638;\n  lab_0x414638:;\n    int64_t v140 = v137 + 1; // 0x414640\n    if (v137 == 63) {\n        // break -> 0x414659\n        goto lab_0x414659;\n    }\n    goto lab_0x414642;\n  lab_0x41400b_3:\n    // 0x41400b\n    free((int64_t *)v5);\n    function_409780(v18);\n    if (*(int32_t *)*v11 != 0) {\n        // 0x4134c8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x41402d\n    *(int64_t *)(v6 + 24) = 0;\n    goto lab_0x4133f0;\n  lab_0x4144ae:;\n    // 0x4144ae\n    int64_t * v177; // 0x413350\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x4146b6_3:\n    // 0x4146b6\n    *(int32_t *)*v177 = 11;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x4145b5_5:\n    // 0x4145b5\n    *(int32_t *)*v177 = 3;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x413b74:;\n    // 0x413b74\n    int64_t v188; // 0x413b49\n    int64_t v254 = v188 & 0xffffffff; // 0x413b4e\n    int64_t v234; // 0x413350\n    int64_t v255; // 0x413350\n    int64_t v235; // 0x413350\n    int64_t * v152; // 0x413b24\n    int32_t * v168; // 0x413350\n    int64_t v178; // 0x413350\n    int64_t * v179; // 0x413350\n    int64_t * v180; // 0x413350\n    int64_t * v181; // 0x413350\n    int64_t * v182; // 0x413350\n    int64_t v148; // 0x413af3\n    int64_t * v149; // 0x413b0e\n    int64_t v151; // 0x413b24\n    switch (g91) {\n        case 0: {\n            unsigned char v256 = *(char *)v151; // 0x413fb1\n            unsigned char v257 = v256 % 64;\n            int64_t v258 = v257 == 0 ? 1 : 1 << (int64_t)v257;\n            v4 = v258;\n            int64_t * v259 = (int64_t *)(v148 + (int64_t)(v256 / 8 & 24)); // 0x413fc8\n            *v259 = v258 | *v259;\n            v255 = v254;\n            goto lab_0x413f6f;\n        }\n        case 1: {\n            int64_t v260 = *v181; // 0x413f8d\n            v4 = v260;\n            int64_t v261 = *mem2; // 0x413f91\n            int64_t v262 = v260; // 0x413f9a\n            int64_t v263 = v261; // 0x413f9a\n            if (v260 == *v182) {\n                int64_t v264 = 2 * v260 | 1; // 0x4143b6\n                *v182 = v264;\n                int64_t * mem3 = realloc((int64_t *)v261, 4 * (int32_t)v264); // 0x4143c8\n                if (mem3 == NULL) {\n                    goto lab_0x4144ae;\n                }\n                // 0x4143d6\n                v263 = (int64_t)mem3;\n                *mem2 = v263;\n                v262 = *v181;\n                v4 = v262;\n            }\n            // 0x413fa0\n            *v181 = v262 + 1;\n            *(int32_t *)(4 * v4 + v263) = *v168;\n            v255 = v254;\n            goto lab_0x413f6f;\n        }\n        case 2: {\n            int32_t v265 = function_40d960(v148, *v152); // 0x413f65\n            *(int32_t *)*v177 = v265;\n            v255 = v254;\n            v11 = v177;\n            if (v265 != 0) {\n                goto lab_0x41400b_3;\n            }\n            goto lab_0x413f6f;\n        }\n        case 3: {\n            int32_t v266 = function_40d960(v148, *v152); // 0x41404d\n            *(int32_t *)*v177 = v266;\n            v255 = v254;\n            v11 = v177;\n            if (v266 != 0) {\n                goto lab_0x41400b_3;\n            }\n            goto lab_0x413f6f;\n        }\n        case 4: {\n            int64_t v267 = *(int64_t *)(a1 + 120); // 0x413fd3\n            *v179 = *v149;\n            int64_t v268 = function_40d9b0(v267, v148, v18 + 24, v178, v180, *v152, (int64_t)&g84); // 0x413ff3\n            int32_t v269 = v268; // 0x413ffd\n            *(int32_t *)*v177 = v269;\n            v3 = *v179;\n            v255 = v254;\n            v11 = v177;\n            if (v269 != 0) {\n                goto lab_0x41400b_3;\n            }\n            goto lab_0x413f6f;\n        }\n        default: {\n            // 0x4147b4\n            __assert_fail(\"0\", \"lib/regcomp.c\", 3315, \"parse_bracket_exp\");\n            v234 = &g84;\n            v235 = (int64_t)\"parse_bracket_exp\";\n            goto lab_0x4147cd_3;\n        }\n    }\n  lab_0x4140d5:\n    // 0x4140d5\n    *(int32_t *)*v177 = 7;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x413f6f:;\n    int64_t v270 = v255;\n    int64_t v183 = v270; // 0x413350\n    int64_t v184 = 0; // 0x413350\n    int64_t * v156; // 0x413350\n    int64_t * v163; // 0x413350\n    switch (*v20) {\n        case 2: {\n            goto lab_0x4140d5;\n        }\n        case 21: {\n            // 0x4143e3\n            *v156 = *v156 + (0x100000000 * v270 >> 32);\n            if (*(char *)(v6 + 56) != 0) {\n                // 0x4143f1\n                v4 = v5 + 32;\n                int64_t v271 = v5; // 0x4143f8\n                int64_t * v272 = (int64_t *)v271; // 0x4143fc\n                *v272 = -1 - *v272;\n                v271 += 8;\n                while (v4 != v271) {\n                    // 0x4143fc\n                    v272 = (int64_t *)v271;\n                    *v272 = -1 - *v272;\n                    v271 += 8;\n                }\n            }\n            uint32_t v273 = *(int32_t *)(*v163 + 180); // 0x41440d\n            v4 = v273;\n            if (v273 >= 2) {\n                int64_t v274 = 0;\n                int64_t * v275 = (int64_t *)(v274 + v5); // 0x41442b\n                *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                int64_t v276 = v274 + 8; // 0x414437\n                while (v274 != 24) {\n                    // 0x414427\n                    v274 = v276;\n                    v275 = (int64_t *)(v274 + v5);\n                    *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                    v276 = v274 + 8;\n                }\n            }\n            // 0x414439\n            if (*v181 != 0) {\n                goto lab_0x4144be;\n            } else {\n                // 0x414440\n                if (*(int64_t *)(v18 + 48) != 0) {\n                    goto lab_0x4144be;\n                } else {\n                    // 0x414447\n                    if (*(int64_t *)(v18 + 56) != 0) {\n                        goto lab_0x4144be;\n                    } else {\n                        // 0x41444e\n                        if (*(int64_t *)(v18 + 64) != 0) {\n                            goto lab_0x4144be;\n                        } else {\n                            int64_t v277 = v4; // 0x414455\n                            v4 = v277 + 0xffffffff & 0xffffffff;\n                            if ((int32_t)v277 < 2) {\n                                goto lab_0x414468;\n                            } else {\n                                // 0x41445a\n                                if (*(int64_t *)v178 != 0) {\n                                    goto lab_0x4144be;\n                                } else {\n                                    // 0x414461\n                                    if (*(char *)(v18 + 32) % 2 != 0) {\n                                        goto lab_0x4144be;\n                                    } else {\n                                        goto lab_0x414468;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        default: {\n            goto lab_0x413b0e;\n        }\n    }\n  lab_0x41424f:;\n    // 0x41424f\n    int64_t v203; // 0x413350\n    int64_t v278 = (int64_t)*(char *)v203;\n    int64_t v220 = v278; // 0x414251\n    int64_t v216; // 0x413350\n    char v218; // 0x413350\n    int64_t v217; // 0x413350\n    int64_t v219; // 0x413350\n    int64_t * v162; // 0x413350\n    int32_t v197; // 0x414216\n    if (v197 == 0) {\n        goto lab_0x4146a9;\n    } else {\n        // 0x414257\n        v218 = 0;\n        v219 = v278;\n        if (v197 != 3) {\n            goto lab_0x41426a;\n        } else {\n            int64_t v279 = *v162; // 0x41425e\n            v3 = v279;\n            v216 = v279;\n            v217 = v278;\n            goto lab_0x414266;\n        }\n    }\n  lab_0x4146a9:;\n    // 0x4146a9\n    int64_t v161; // 0x413350\n    v218 = *(char *)v161;\n    v219 = v220;\n    goto lab_0x41426a;\n  lab_0x414266:\n    // 0x414266\n    v218 = *(char *)v216;\n    v219 = v217;\n    goto lab_0x41426a;\n  lab_0x41426a:;\n    int64_t v280 = v219;\n    unsigned char v281 = v218;\n    int64_t v282; // 0x413350\n    int64_t v283; // 0x413350\n    int32_t v284; // 0x413350\n    char * v165; // 0x413350\n    int32_t v195; // 0x4141ed\n    if (v195 == 0) {\n        goto lab_0x414674;\n    } else {\n        // 0x414273\n        v283 = v281;\n        v284 = v197;\n        v282 = (int64_t)*v168;\n        if (*v165 != 0) {\n            goto lab_0x414674;\n        } else {\n            goto lab_0x414283;\n        }\n    }\n  lab_0x414674:;\n    // 0x414674\n    int32_t * v170; // 0x413350\n    *v170 = (int32_t)v281;\n    int64_t * v171; // 0x413350\n    *v171 = v4;\n    int64_t v285 = function_408d40(v280, v4); // 0x414680\n    v4 = *v171;\n    v283 = (int64_t)*v170;\n    int32_t * v160; // 0x413350\n    v284 = *v160;\n    v282 = v285 & 0xffffffff;\n    goto lab_0x414283;\n  lab_0x414283:;\n    int64_t v286 = v282;\n    int32_t v287 = v284;\n    int64_t v288 = v283;\n    int64_t v289; // 0x413350\n    int64_t v290; // 0x413350\n    if (v287 == 0) {\n        goto lab_0x4145c5;\n    } else {\n        int64_t v291 = (int64_t)*(int32_t *)v161; // 0x41428b\n        v3 = v291;\n        v289 = v291;\n        v290 = v286;\n        if (v287 == 3) {\n            goto lab_0x4145c5;\n        } else {\n            goto lab_0x41429c;\n        }\n    }\n  lab_0x4145c5:\n    // 0x4145c5\n    *v170 = (int32_t)v286;\n    *v171 = v4;\n    int64_t v292 = function_408d40(v288, v4); // 0x4145d4\n    v4 = *v171;\n    int64_t v293 = v292 & 0xffffffff; // 0x4145e3\n    v3 = v293;\n    v289 = v293;\n    v290 = (int64_t)*v170;\n    goto lab_0x41429c;\n  lab_0x41429c:;\n    int32_t v294 = v290;\n    if (v294 == -1) {\n        goto lab_0x4145b5_5;\n    }\n    uint32_t v295 = (int32_t)v289; // 0x4142a6\n    if (v295 == -1) {\n        goto lab_0x4145b5_5;\n    }\n    // 0x4142b0\n    if (v294 > v295 == ((*v149 & 0x10000) != 0)) {\n        goto lab_0x4146b6_3;\n    }\n    int64_t v296 = v4; // 0x4142c4\n    int32_t v297 = v294; // 0x4142c7\n    int64_t * v172; // 0x413350\n    int32_t * v173; // 0x413350\n    int32_t * v174; // 0x413350\n    int64_t * v175; // 0x413350\n    int64_t * v176; // 0x413350\n    if (v296 != 0) {\n        int64_t v298 = *(int64_t *)(v296 + 64); // 0x4142c9\n        int64_t v299 = *(int64_t *)(v296 + 8); // 0x4142cd\n        int32_t v300 = v294; // 0x4142d6\n        int64_t v301 = v298; // 0x4142d6\n        int64_t v302 = v299; // 0x4142d6\n        if (v298 == *v172) {\n            // 0x414732\n            *v173 = v295;\n            *v174 = v294;\n            *v171 = v4;\n            int64_t v303 = 2 * v298 | 1; // 0x41474c\n            int64_t v304 = 4 * v303; // 0x414750\n            *v172 = v303;\n            *v175 = v304;\n            *v176 = (int64_t)realloc((int64_t *)v299, (int32_t)v304);\n            int64_t * mem4 = realloc((int64_t *)*(int64_t *)(*v171 + 16), (int32_t)*v175); // 0x414780\n            int64_t v305 = *v176; // 0x414785\n            if (v305 == 0) {\n                // 0x4147cd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4147cd_3;\n            }\n            int64_t v306 = *v171; // 0x414792\n            v4 = v306;\n            v300 = *v174;\n            v3 = (int64_t)*v173;\n            if (mem4 == NULL) {\n                // 0x4147cd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4147cd_3;\n            }\n            // 0x4147a3\n            *(int64_t *)(v306 + 16) = (int64_t)mem4;\n            v301 = *(int64_t *)(v4 + 64);\n            *(int64_t *)(v4 + 8) = v305;\n            v302 = v305;\n        }\n        int64_t v307 = 4 * v301; // 0x4142dc\n        *(int32_t *)(v302 + v307) = v300;\n        *(int64_t *)(v4 + 64) = v301 + 1;\n        *(int32_t *)(*(int64_t *)(v4 + 16) + v307) = (int32_t)v3;\n        v297 = v300;\n    }\n    int64_t v308 = 0;\n    uint32_t v309 = (int32_t)v308; // 0x414302\n    int64_t v310; // 0x414312\n    int64_t * v311; // 0x414319\n    if (v297 <= v309) {\n        // 0x414307\n        if ((int32_t)v3 >= v309) {\n            // 0x41430c\n            v310 = v308 >> 6;\n            v4 = v310;\n            v311 = (int64_t *)(8 * v310 + v148);\n            *v311 = *v311 | 1 << v308 % 64;\n        }\n    }\n    int64_t v312 = v308 + 1; // 0x414328\n    while (v308 != 255) {\n        // 0x414300\n        v308 = v312;\n        v309 = (int32_t)v308;\n        if (v297 <= v309) {\n            // 0x414307\n            if ((int32_t)v3 >= v309) {\n                // 0x41430c\n                v310 = v308 >> 6;\n                v4 = v310;\n                v311 = (int64_t *)(8 * v310 + v148);\n                *v311 = *v311 | 1 << v308 % 64;\n            }\n        }\n        // 0x41431e\n        v312 = v308 + 1;\n    }\n    // 0x41432a\n    *(int32_t *)*v177 = 0;\n    int64_t v194; // 0x4141e8\n    v255 = v194 & 0xffffffff;\n    goto lab_0x413f6f;\n  lab_0x4133a1:\n    if ((a4 & 32) != 0) {\n        // 0x4136c5\n        *(int64_t *)(v6 + 24) = 0;\n        *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    if ((a4 & 16) != 0) {\n        // 0x4140e5\n        v5 = a5;\n        int64_t v313 = function_412be0((int64_t *)v9, a1, a4); // 0x4140f5\n        int64_t * v314 = (int64_t *)(a1 + 72); // 0x414107\n        *v314 = (0x100000000 * v313 >> 32) + *v314;\n        function_413350(a1, a2, v9, a4, v5, a6);\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4133c0;\n  lab_0x4133c0:\n    // 0x4133c0\n    *(char *)(v9 + 8) = 1;\n    if (function_40ad90(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n        // 0x413ce1\n        *(int32_t *)a6 = 12;\n        // 0x4134c8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4133f0;\n  lab_0x413b84:;\n    int64_t v223 = &g3; // 0x413ba0\n    int64_t v222 = (int64_t)\"alnum\"; // 0x413ba0\n    bool v224 = v7 == 33; // 0x413ba0\n    goto lab_0x413ba4;\n  lab_0x413bd0:\n    // 0x413bd0\n    v223 = (int64_t)&g13;\n    v222 = (int64_t)\"space\";\n    v224 = v7 == 35;\n    goto lab_0x413ba4;\n  lab_0x4133f0:\n    // 0x4133f0\n    v58 = (int64_t *)(v6 + 8);\n    int64_t v144 = function_412be0((int64_t *)v9, a1, *v58); // 0x4133fb\n    unsigned char v145 = *(char *)(v9 + 8); // 0x413400\n    int64_t * v146 = (int64_t *)(a1 + 72); // 0x413408\n    *v146 = *v146 + (0x100000000 * v144 >> 32);\n    if (v145 >= 24) {\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x4134e0\n    v52 = (int64_t *)(v6 + 24);\n    int64_t v147 = v6 + 32;\n    v89 = (int64_t *)v147;\n    v78 = (int128_t *)v147;\n    v59 = (int64_t *)(v6 + 48);\n    v110 = (int64_t *)(v6 + 16);\n    v118 = (int64_t *)(v6 + 56);\n    v114 = v6 + 192;\n    v108 = (char *)(v6 + 200);\n    v72 = v145;\n    v73 = a1;\n    v74 = v9;\n    while (true) {\n      lab_0x4134e0:;\n        unsigned char v75 = v72;\n        if ((1 << (int64_t)(v75 % 64) & 0x8c0800) == 0) {\n            // break -> 0x41341a\n            break;\n        }\n        // 0x4134f6\n        v53 = v74;\n        v66 = v73;\n        v60 = (int64_t *)(v66 + 72);\n        v61 = *v60;\n        v62 = (int128_t *)v53;\n        int128_t v76 = __asm_movdqa(*v62); // 0x4134fa\n        if (v75 == 23) {\n            int64_t v77 = *v58; // 0x413830\n            v4 = v77;\n            *v78 = (int128_t)__asm_movaps(v76);\n            int64_t v79 = function_413290(v66, v53, v77); // 0x413840\n            v80 = __asm_movdqa(*v78);\n            v5 = v79;\n            v56 = v80;\n            switch (v79) {\n                case -1: {\n                    // 0x4138c0\n                    if (*(char *)(v53 + 8) != 1) {\n                        // 0x4139d0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4139db;\n                    }\n                    // 0x4138cc\n                    v81 = 0;\n                    if (*(char *)v53 != 44) {\n                        // 0x4139d0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4139db;\n                    }\n                    goto lab_0x4138d9;\n                }\n                case -2: {\n                    goto lab_0x413872;\n                }\n                default: {\n                    char * v82 = (char *)(v53 + 8);\n                    v56 = v80;\n                    v83 = v79;\n                    v84 = v79;\n                    switch (*v82) {\n                        case 24: {\n                            goto lab_0x413994;\n                        }\n                        case 1: {\n                            // 0x4139b3\n                            v81 = v79;\n                            if (*(char *)v53 == 44) {\n                                goto lab_0x4138d9;\n                            } else {\n                                // 0x4139be\n                                v55 = v82;\n                                v57 = v80;\n                                if ((*v58 & 0x200000) == 0) {\n                                    // 0x4139d0\n                                    *(int32_t *)*v59 = 10;\n                                    goto lab_0x4139db;\n                                }\n                                goto lab_0x413881;\n                            }\n                        }\n                        default: {\n                            goto lab_0x413872;\n                        }\n                    }\n                }\n            }\n        } else {\n            int64_t v85 = *v58;\n            v4 = v85;\n            int64_t v86 = function_412be0((int64_t *)v53, v66, v85);\n            *v60 = (0x100000000 * v86 >> 32) + *v60;\n            int64_t v87 = *v52;\n            if (v75 == 19) {\n                if (v87 == 0) {\n                    goto lab_0x4138a0;\n                } else {\n                    int64_t v88 = v75 == 18; // 0x4134e9\n                    v5 = 1;\n                    *v89 = 0;\n                    v90 = 10;\n                    v91 = v88;\n                    v92 = v87;\n                    v93 = v53;\n                    v94 = v66;\n                    v95 = v88;\n                    v96 = v87;\n                    v97 = v53;\n                    v98 = v66;\n                    if (*(char *)(v87 + 48) == 17) {\n                        goto lab_0x413808;\n                    } else {\n                        goto lab_0x41356a;\n                    }\n                }\n            } else {\n                if (v87 == 0) {\n                    goto lab_0x4138a0;\n                } else {\n                    if (v75 == 18) {\n                        // 0x413a1a\n                        v5 = -1;\n                        v4 = v87;\n                        v99 = v87;\n                        v100 = 1;\n                        v101 = v53;\n                        v102 = v87;\n                        v103 = v66;\n                        goto lab_0x413a2f;\n                    } else {\n                        // 0x413543\n                        v5 = -1;\n                        if (*(char *)(v87 + 48) == 17) {\n                            // 0x4137f0\n                            *v89 = 0;\n                            v95 = 0;\n                            v96 = *v52;\n                            v97 = v53;\n                            v98 = v66;\n                            goto lab_0x413808;\n                        } else {\n                            // 0x413552\n                            *v89 = 0;\n                            v90 = 11;\n                            v91 = 0;\n                            v92 = v87;\n                            v93 = v53;\n                            v94 = v66;\n                            goto lab_0x41356a;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // 0x41341a\n    return *(int64_t *)(v6 + 24);\n  lab_0x413ae2:\n    // 0x413ae2\n    if (v17 == 21) {\n        // 0x4140ca\n        *v20 = 1;\n    }\n    // 0x413aea\n    v148 = v5;\n    v149 = (int64_t *)(v6 + 8);\n    int64_t v150 = v6 + 112; // 0x413b1f\n    v151 = v6 + 120;\n    v152 = (int64_t *)v151;\n    int64_t v153; // bp-120, 0x413350\n    int64_t v154 = &v153;\n    int32_t * v155 = (int32_t *)v150; // 0x413b29\n    v156 = (int64_t *)(a1 + 72);\n    int64_t v157 = v6 + 144;\n    int64_t v158 = v6 + 192;\n    int64_t v159 = v6 + 128;\n    v160 = (int32_t *)v159;\n    v161 = v6 + 136;\n    v162 = (int64_t *)v161;\n    v163 = (int64_t *)(v6 + 16);\n    int64_t v164 = v6 + 64;\n    v165 = (char *)v164;\n    bool v166; // 0x413350\n    int64_t v167 = v166 ? -1 : 1;\n    v168 = (int32_t *)v151;\n    int64_t v169 = v6 + 72;\n    v170 = (int32_t *)v169;\n    v171 = (int64_t *)v164;\n    v172 = (int64_t *)(v6 + 32);\n    v173 = (int32_t *)(v6 + 92);\n    v174 = (int32_t *)(v6 + 88);\n    v175 = (int64_t *)(v6 + 80);\n    v176 = (int64_t *)v169;\n    v177 = (int64_t *)(v6 + 48);\n    v178 = v18 + 72;\n    v179 = (int64_t *)(v6 - 16);\n    v180 = (int64_t *)(v6 + 104);\n    v181 = (int64_t *)(v18 + 40);\n    v182 = (int64_t *)(v6 + 24);\n    v183 = v16 & 0xffffffff;\n    v184 = 1;\n    int32_t v185; // 0x413350\n    while (true) {\n      lab_0x413b0e:\n        // 0x413b0e\n        v3 = v184;\n        int64_t v186 = *v149; // 0x413b0e\n        v3 = v184;\n        *v152 = v154;\n        *v155 = 3;\n        int32_t v187 = function_4129c0(v150, a1, v9, v183, v186, (int32_t)v184);\n        v185 = v187;\n        if (v187 != 0) {\n            // break -> 0x414124\n            break;\n        }\n        // 0x413b3e\n        g91 = v6 - 8;\n        v188 = function_408630(v19, a1, *v149);\n        if ((*v155 - 2 & -3) == 0) {\n            goto lab_0x413b74;\n        } else {\n            unsigned char v189 = *v20; // 0x413b5c\n            v4 = v189;\n            switch (v189) {\n                case 2: {\n                    goto lab_0x4140d5;\n                }\n                case 22: {\n                    int64_t v190 = 0x100000000 * v188;\n                    *v156 = *v156 + (v190 >> 32);\n                    int64_t v191 = *v149; // 0x41416b\n                    int64_t v192 = function_408630((int64_t *)v157, a1, v191); // 0x41417b\n                    unsigned char v193 = *(char *)(v6 + 152); // 0x414180\n                    v4 = v193;\n                    switch (v193) {\n                        case 2: {\n                            goto lab_0x4140d5;\n                        }\n                        case 21: {\n                            // 0x414395\n                            *v156 = *v156 + (-v190 >> 32);\n                            *v20 = 1;\n                            goto lab_0x413b74;\n                        }\n                        default: {\n                            // 0x41419a\n                            *v160 = 3;\n                            *v162 = v158;\n                            if ((int32_t)function_4129c0(v159, a1, v157, v192 & 0xffffffff, v191, 1) != 0) {\n                                // break -> 0x414124\n                                break;\n                            }\n                            // 0x4141dd\n                            v194 = function_408630(v19, a1, *v149);\n                            v195 = *v155;\n                            int32_t v196 = *(int32_t *)(*v163 + 180); // 0x4141fe\n                            v4 = v196 < 2 == (1 - v196 & v196) < 0 ? v18 : 0;\n                            if ((v195 - 2 & -3) == 0) {\n                                goto lab_0x4146b6_3;\n                            }\n                            // 0x414216\n                            v197 = *v160;\n                            if ((v197 - 2 & -3) == 0) {\n                                goto lab_0x4146b6_3;\n                            }\n                            // 0x414229\n                            *v165 = (char)(v195 == 3);\n                            if (v195 == 3) {\n                                int64_t v198 = *v152; // 0x4146fd\n                                int64_t v199 = -1; // 0x41470e\n                                int64_t v200 = v198; // 0x41470e\n                                int64_t v201; // 0x413350\n                                while (v199 != 0) {\n                                    int64_t v202 = v200;\n                                    v199--;\n                                    v200 = v202 + v167;\n                                    v201 = v199;\n                                    if (*(char *)v202 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                }\n                                if (-v201 >= 4) {\n                                    goto lab_0x4145b5_5;\n                                }\n                                // 0x414720\n                                v203 = v198;\n                                if (v197 == 3) {\n                                    // 0x414591\n                                    int64_t v204; // 0x413350\n                                    while (v204 != 0) {\n                                        int64_t v205; // 0x413350\n                                        int64_t v206 = v205;\n                                        char v207 = *(char *)v206; // 0x41459f\n                                        int64_t v208; // 0x413350\n                                        int64_t v209 = v208 - 1; // 0x41459f\n                                        v204 = v209;\n                                        v205 = v206 + v167;\n                                        int64_t v210 = v209; // 0x41459f\n                                        if (v207 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v208 = v204;\n                                        v210 = 0;\n                                    }\n                                    v203 = v198;\n                                }\n                                goto lab_0x41424f;\n                            } else {\n                                if (v197 == 3) {\n                                    int64_t v211 = *v162; // 0x4146c6\n                                    v3 = v211;\n                                    int64_t v212 = v211; // 0x4146d7\n                                    int64_t v213 = -1; // 0x4146d7\n                                    int64_t v214 = 0; // 0x4146d7\n                                    while (v213 != 0) {\n                                        int64_t v215 = v212;\n                                        v213--;\n                                        v212 = v215 + v167;\n                                        v214 = v213;\n                                        if (*(char *)v215 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v214 = 0;\n                                    }\n                                    if (-v214 >= 4) {\n                                        goto lab_0x4145b5_5;\n                                    }\n                                    // 0x4146ed\n                                    v203 = v151;\n                                    v216 = v211;\n                                    v217 = 0;\n                                    if (v195 != 0) {\n                                        goto lab_0x414266;\n                                    } else {\n                                        goto lab_0x41424f;\n                                    }\n                                } else {\n                                    // 0x414241\n                                    v203 = v151;\n                                    if (v195 != 0) {\n                                        // 0x41469d\n                                        v218 = 0;\n                                        v219 = 0;\n                                        v220 = 0;\n                                        if (v197 != 0) {\n                                            goto lab_0x41426a;\n                                        } else {\n                                            goto lab_0x4146a9;\n                                        }\n                                    } else {\n                                        goto lab_0x41424f;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x413b74;\n                }\n            }\n        }\n    }\n    // 0x414124\n    *(int32_t *)*v177 = v185;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x413ba4:;\n    int64_t v221 = *(int64_t *)(a1 + 120);\n    v4 = v222;\n    v3 = a6;\n    if (!(((int32_t)a6 == 0 | function_40e180(a2, v221, (char *)v222, (int64_t *)v223, (int64_t)v224, a6) != 0))) {\n        // 0x4134c8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4133f0;\n  lab_0x414059:;\n    // 0x414059\n    int64_t v225; // 0x413e05\n    int64_t v226; // 0x413e09\n    if (function_40ad90(v225, v226, 0, 0, v9) == 0) {\n        // 0x413ce1\n        *(int32_t *)a6 = 12;\n        // 0x4134c8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41341a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x413eaf;\n  lab_0x4145f5:;\n    int16_t * v250 = *__ctype_b_loc(); // 0x414609\n    v3 = (v13 | 256) - 64 * v15;\n    int64_t v251 = v13; // 0x41461f\n    int64_t v252 = 8 * v15 + a2; // 0x41461f\n    int64_t v141 = 2 * v13 + (int64_t)v250; // 0x41461f\n    while (true) {\n        int64_t v143 = v251;\n        v139 = (int64_t *)(v252 + 184);\n        v140 = 0;\n        while (true) {\n          lab_0x414642:\n            // 0x414642\n            v137 = v140;\n            if ((*(char *)(2 * v137 + v141) & 8) == 0) {\n                int64_t v142 = v137 + v143; // 0x414630\n                v4 = v142 & 0xffffffff;\n                if ((int32_t)v142 == 95) {\n                    goto lab_0x41464a;\n                } else {\n                    goto lab_0x414638;\n                }\n            } else {\n                goto lab_0x41464a;\n            }\n        }\n      lab_0x414659:;\n        int64_t v253 = v143 + 64; // 0x414659\n        v12 = v10;\n        v251 = v253 & 0xffffffff;\n        v252 += 8;\n        v141 += 128;\n        if ((int32_t)v3 == (int32_t)v253) {\n            // break -> 0x413e00\n            break;\n        }\n    }\n    goto lab_0x413e00_2;\n  lab_0x413eaf:;\n    int64_t v227 = function_412be0((int64_t *)v9, a1, a4); // 0x413eba\n    int64_t * v228 = (int64_t *)(a1 + 72); // 0x413ec1\n    *v228 = (0x100000000 * v227 >> 32) + *v228;\n    // 0x41341a\n    return *(int64_t *)(v6 + 24);\n  lab_0x413e00_2:;\n    int32_t v229 = v12;\n    v225 = a2 + 112;\n    v226 = a2 + 128;\n    if ((v229 - 256 & -257) != 0) {\n        goto lab_0x414059;\n    } else {\n        int32_t * v230 = (int32_t *)v9;\n        int64_t v231; // 0x413350\n        if (v229 == 256) {\n            // 0x41413a\n            *v230 = 6;\n            v4 = 0;\n            v231 = function_40ad90(v225, v226, 0, 0, v9);\n        } else {\n            // 0x413e2f\n            *v230 = 5;\n            v4 = 0;\n            v231 = function_40ad90(v225, v226, 0, 0, v9);\n        }\n        // 0x413e54\n        *v230 = 10;\n        int64_t v232 = function_40ad90(v225, v226, 0, 0, v9); // 0x413e61\n        int64_t v233 = function_40ad90(v225, v226, (int32_t)v231, (int32_t)v232, (int64_t)&v14); // 0x413e85\n        if (v233 == 0 || v231 == 0 || v232 == 0) {\n            // 0x413ce1\n            *(int32_t *)a6 = 12;\n            // 0x4134c8\n            *(int64_t *)(v6 + 24) = 0;\n            // 0x41341a\n            return *(int64_t *)(v6 + 24);\n        }\n        goto lab_0x413eaf;\n    }\n  lab_0x4147cd_3:\n    // 0x4147cd\n    *v182 = v234;\n    free((int64_t *)v235);\n    free((int64_t *)*v182);\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x41400b_3;\n  lab_0x4144be:;\n    int64_t v236 = *v163; // 0x4144be\n    char * v237 = (char *)(v236 + 176); // 0x4144ca\n    *v237 = *v237 | 2;\n    int64_t v238 = v236 + 112; // 0x4144d1\n    int64_t v239 = v236 + 128; // 0x4144d5\n    char * v240 = (char *)(v6 + 168); // 0x4144e2\n    *v240 = 6;\n    int64_t * v241 = (int64_t *)(v6 + 160); // 0x4144ea\n    *v241 = v18;\n    int64_t v242 = function_40ad90(v238, v239, 0, 0, v154); // 0x4144f2\n    *v182 = v242;\n    int64_t v243 = v5 + 32; // 0x414503\n    v4 = v243;\n    int64_t v244 = v5; // 0x41450d\n    if (v242 == 0) {\n        goto lab_0x4144ae;\n    } else {\n        while (*(int64_t *)v244 == 0) {\n            int64_t v245 = v244 + 8; // 0x414515\n            v244 = v245;\n            if (v243 == v245) {\n                // 0x41451e\n                free((int64_t *)v5);\n                goto lab_0x4133f0;\n            }\n        }\n        // 0x41452c\n        *v240 = 3;\n        *v241 = v5;\n        int64_t v246 = function_40ad90(v238, v239, 0, 0, v154); // 0x41454d\n        if (v246 == 0) {\n            goto lab_0x4144ae;\n        } else {\n            // 0x41455b\n            *(char *)(v6 + 200) = 10;\n            int64_t v247 = function_40ad90(v238, v239, (int32_t)v246, (int32_t)*v182, v158); // 0x414579\n            *v182 = v247;\n            if (v247 != 0) {\n                goto lab_0x4133f0;\n            } else {\n                goto lab_0x4144ae;\n            }\n        }\n    }\n  lab_0x414468:\n    // 0x414468\n    function_409780(v18);\n    *(char *)(v6 + 168) = 3;\n    *(int64_t *)(v6 + 160) = v5;\n    int64_t v248 = *v163; // 0x41448b\n    int64_t v249 = function_40ad90(v248 + 112, v248 + 128, 0, 0, v154); // 0x41449b\n    *v182 = v249;\n    if (v249 != 0) {\n        goto lab_0x4133f0;\n    } else {\n        goto lab_0x4144ae;\n    }\n}\n"
        },
        {
            "funcName": "function_414840",
            "funcStartAddr": "414840",
            "funcEndAddr": "41497e",
            "decompiledFuncCode": "int64_t function_414840(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = function_413350(a1, a2, a3, a4, a5, a6); // 0x41486a\n    int64_t v1; // 0x414840\n    if ((int32_t)v1 != 0 == result == 0) {\n        // 0x414915\n        return 0;\n    }\n    char * v2 = (char *)(a3 + 8); // 0x414888\n    char v3 = *v2; // 0x414888\n    if ((v3 & -9) == 2) {\n        // 0x414915\n        return result;\n    }\n    // 0x414896\n    int64_t v4; // bp-72, 0x414840\n    int64_t v5 = &v4;\n    int64_t v6 = result;\n    int64_t result2 = v6; // 0x414898\n    if (a5 != 0 == v3 == 9) {\n        return result2;\n    }\n    int64_t v7 = function_413350(a1, a2, a3, a4, a5, a6); // 0x4148b3\n    int32_t v8 = v7;\n    if (v7 == 0 == (v8 != 0)) {\n        // 0x41493c\n        result2 = 0;\n        if (v6 == 0) {\n            return result2;\n        } else {\n            // 0x414941\n            function_4085c0(v6, 0x4097d0, 0);\n            result2 = 0;\n            return result2;\n        }\n    }\n    int64_t v9; // 0x4148f5\n    char v10; // 0x414907\n    while (v6 != 0 && v7 != 0) {\n        // 0x4148d0\n        v9 = function_40ad90(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n        if (v9 == 0) {\n            // 0x414955\n            function_4085c0(v7, 0x4097d0, 0);\n            function_4085c0(v6, 0x4097d0, 0);\n            *(int32_t *)a6 = 12;\n            result2 = 0;\n            return result2;\n        }\n        // 0x414904\n        v10 = *v2;\n        result2 = v9;\n        if ((v10 & -9) == 2) {\n            return result2;\n        }\n        v6 = v9;\n        result2 = v6;\n        if (a5 != 0 == v10 == 9) {\n            return result2;\n        }\n        // 0x41489f\n        v7 = function_413350(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41493c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x414941\n                function_4085c0(v6, 0x4097d0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n    }\n    int64_t v11 = v6 == 0 ? v7 : v6; // 0x414933\n    char v12 = *v2; // 0x414888\n    result2 = v11;\n    while ((v12 & -9) != 2) {\n        // 0x414896\n        v6 = v11;\n        result2 = v6;\n        if (a5 != 0 == v12 == 9) {\n            return result2;\n        }\n        // 0x41489f\n        v7 = function_413350(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41493c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x414941\n                function_4085c0(v6, 0x4097d0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n        while (v6 != 0 && v7 != 0) {\n            // 0x4148d0\n            v9 = function_40ad90(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n            if (v9 == 0) {\n                // 0x414955\n                function_4085c0(v7, 0x4097d0, 0);\n                function_4085c0(v6, 0x4097d0, 0);\n                *(int32_t *)a6 = 12;\n                result2 = 0;\n                return result2;\n            }\n            // 0x414904\n            v10 = *v2;\n            result2 = v9;\n            if ((v10 & -9) == 2) {\n                return result2;\n            }\n            v6 = v9;\n            result2 = v6;\n            if (a5 != 0 == v10 == 9) {\n                return result2;\n            }\n            // 0x41489f\n            v7 = function_413350(a1, a2, a3, a4, a5, a6);\n            v8 = v7;\n            if (v7 == 0 == (v8 != 0)) {\n                // 0x41493c\n                result2 = 0;\n                if (v6 == 0) {\n                    return result2;\n                } else {\n                    // 0x414941\n                    function_4085c0(v6, 0x4097d0, 0);\n                    result2 = 0;\n                    return result2;\n                }\n            }\n        }\n        // 0x414930\n        v11 = v6 == 0 ? v7 : v6;\n        v12 = *v2;\n        result2 = v11;\n    }\n  lab_0x414915_2:\n    // 0x414915\n    return result2;\n}\n"
        },
        {
            "funcName": "function_414980",
            "funcStartAddr": "414980",
            "funcEndAddr": "414ad1",
            "decompiledFuncCode": "int64_t function_414980(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a2 + 168); // 0x4149a2\n    int64_t v2 = function_414840(a1, a2, a3, a4, a5, a6); // 0x4149b2\n    int64_t v3; // 0x414980\n    if ((int32_t)v3 != 0 && v2 == 0) {\n        // 0x4149d1\n        return 0;\n    }\n    char * v4 = (char *)(a3 + 8); // 0x414a69\n    int64_t * v5 = (int64_t *)(a1 + 72);\n    int64_t v6 = a2 + 112;\n    int64_t v7; // bp-72, 0x414980\n    int64_t v8 = &v7;\n    int64_t v9 = v2;\n    int64_t result = v9; // 0x414a6d\n    while (*v4 == 10) {\n        // 0x414a73\n        *v5 = (0x100000000 * function_412be0((int64_t *)a3, a1, a4 | 0x800000) >> 32) + *v5;\n        char v10 = *v4; // 0x414a8f\n        int64_t v11 = 0; // 0x414a9b\n        if ((v10 & -9) != 2 && a5 != 0 != (v10 == 9)) {\n            // 0x4149f7\n            v11 = function_414840(a1, a2, a3, a4, a5, a6);\n            int64_t v12; // 0x414980\n            if (v11 == 0 == (*(int32_t *)&v12 != 0)) {\n                // 0x414ab4\n                result = 0;\n                if (v9 == 0) {\n                    return result;\n                } else {\n                    // 0x414abd\n                    function_4085c0(v9, 0x4097d0, 0);\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        int64_t v13 = function_40ad90(v6, a2 + 128, (int32_t)v9, (int32_t)v11, v8); // 0x414a5c\n        if (v13 == 0) {\n            // 0x414aa8\n            *(int32_t *)a6 = 12;\n            result = 0;\n            return result;\n        }\n        v9 = v13;\n        result = v9;\n    }\n  lab_0x4149d1:\n    // 0x4149d1\n    return result;\n}\n"
        },
        {
            "funcName": "function_414ae0",
            "funcStartAddr": "414ae0",
            "funcEndAddr": "41588a",
            "decompiledFuncCode": "int64_t function_414ae0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x414ae0\n    int128_t v1; // 0x414ae0\n    int128_t v2 = v1;\n    int64_t v3; // 0x414ae0\n    int64_t v4 = v3;\n    char * v5 = (char *)(a1 + 56); // 0x414afd\n    *v5 = *v5 & -112;\n    int64_t v6 = a1 + 8;\n    int64_t * v7 = (int64_t *)v6; // 0x414b01\n    int32_t result = 0; // bp-268, 0x414b09\n    *(int64_t *)(a1 + 24) = a4;\n    int64_t * v8 = (int64_t *)(a1 + 16); // 0x414b18\n    *v8 = 0;\n    int64_t * v9 = (int64_t *)(a1 + 48); // 0x414b20\n    *v9 = 0;\n    int64_t v10 = v6; // 0x414b28\n    int64_t v11 = a1; // 0x414b28\n    if (*v7 < 232) {\n        int64_t * v12 = (int64_t *)a1; // 0x415668\n        int64_t * mem = realloc(v12, 232); // 0x415668\n        if (mem == NULL) {\n            // 0x41542b\n            return 12;\n        }\n        // 0x415679\n        v11 = (int64_t)mem;\n        *v7 = 232;\n        *v12 = v11;\n        v10 = v11 + 8;\n    }\n    // 0x414b2e\n    *v8 = 232;\n    int64_t v13 = v10 & -8; // 0x414b3f\n    int64_t * v14 = (int64_t *)v11; // 0x414b43\n    *v14 = 0;\n    *(int64_t *)(v11 + 224) = 0;\n    __asm_rep_stosq_memset((char *)v13, 0, (v11 + 232 - v13) / 8 % 0x20000000);\n    *(int32_t *)(v11 + 128) = 15;\n    int64_t v15; // 0x414ae0\n    int64_t v16; // 0x414ae0\n    uint64_t v17; // 0x414ae0\n    int64_t v18; // 0x414ae0\n    int64_t v19; // 0x414ae0\n    int64_t v20; // 0x414b81\n    int64_t * v21; // 0x414bcd\n    int32_t * v22; // 0x414bdb\n    char * v23; // 0x414c38\n    if (a3 < 0x555555555555555) {\n        // 0x414b81\n        v20 = a3 + 1;\n        *(int64_t *)v10 = v20;\n        *v14 = (int64_t)malloc(16 * (int32_t)v20);\n        int64_t size = 1; // 0x414ba1\n        int64_t v24 = 0; // 0x414ba1\n        if (a3 != 0) {\n            int64_t v25 = 2; // 0x414bb0\n            int64_t v26 = v25; // 0x414bb6\n            while (v25 <= a3) {\n                // 0x414bb0\n                v25 = 2 * v26;\n                v26 = v25;\n            }\n            // 0x414bb8\n            size = v25;\n            v24 = v25 - 1;\n        }\n        int64_t * mem2 = calloc(24, (int32_t)size); // 0x414bc1\n        *(int64_t *)(v11 + 136) = v24;\n        v21 = (int64_t *)(v11 + 64);\n        *v21 = (int64_t)mem2;\n        int32_t v27 = __ctype_get_mb_cur_max(); // 0x414bd1\n        v22 = (int32_t *)(v11 + 180);\n        *v22 = v27;\n        char * v28 = nl_langinfo(14); // 0x414be1\n        if ((*v28 & -33) == 85) {\n            int64_t v29 = (int64_t)v28; // 0x414be1\n            if ((*(char *)(v29 + 1) & -33) == 84) {\n                // 0x414bfd\n                if ((*(char *)(v29 + 2) & -33) == 70) {\n                    int64_t v30 = v29 + 3; // 0x414c0b\n                    bool v31; // 0x414ae0\n                    int64_t v32 = v31 ? -1 : 1; // 0x414c21\n                    int64_t v33 = (int64_t)&g14; // 0x414ae0\n                    int64_t v34 = v30 + (int64_t)(*(char *)v30 == 45); // 0x414ae0\n                    int64_t v35 = 2; // 0x414c21\n                    unsigned char v36 = *(char *)v34; // 0x414c21\n                    char v37 = *(char *)v33; // 0x414c21\n                    char v38 = v37; // 0x414c21\n                    bool v39 = false; // 0x414c21\n                    while (v36 == v37) {\n                        v35--;\n                        v33 += v32;\n                        v34 += v32;\n                        v38 = v36;\n                        v39 = true;\n                        if (v35 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v36 = *(char *)v34;\n                        v37 = *(char *)v33;\n                        v38 = v37;\n                        v39 = false;\n                    }\n                    unsigned char v40 = v38;\n                    if ((v36 >= v40 && !v39) == v36 < v40) {\n                        char * v41 = (char *)(v11 + 176); // 0x414c2c\n                        *v41 = *v41 | 4;\n                    }\n                }\n            }\n        }\n        // 0x414c38\n        v23 = (char *)(v11 + 176);\n        char v42 = *v23; // 0x414c38\n        *v23 = v42 & -9;\n        if (*v22 < 2) {\n            goto lab_0x414c63;\n        } else {\n            if ((v42 & 4) == 0) {\n                int64_t * mem3 = calloc(32, 1); // 0x4154da\n                int64_t * v43 = (int64_t *)(v11 + 120); // 0x4154df\n                *v43 = (int64_t)mem3;\n                int64_t v44 = 0; // 0x4154e6\n                if (mem3 == NULL) {\n                    // 0x4154c0\n                    result = 12;\n                    goto lab_0x41549e;\n                } else {\n                    while (true) {\n                        int64_t v45 = v44;\n                        v16 = 0;\n                        v18 = 8 * v45;\n                        while (true) {\n                          lab_0x415516_2:\n                            // 0x415516\n                            v19 = v18;\n                            v17 = v16;\n                            int32_t wc = v19; // 0x415516\n                            int32_t v46 = btowc(wc); // 0x41551f\n                            int64_t v47 = v19 & 0xffffff80; // 0x41552d\n                            if (v46 == -1) {\n                                if (v47 != 0) {\n                                    goto lab_0x41550b;\n                                } else {\n                                    // 0x415504\n                                    *v23 = *v23 | 8;\n                                    goto lab_0x41550b;\n                                }\n                            } else {\n                                int64_t * v48 = (int64_t *)(*v43 + v45); // 0x415545\n                                *v48 = *v48 | 1 << v17 % 64;\n                                if (v47 != 0) {\n                                    goto lab_0x41550b;\n                                } else {\n                                    if (v46 != wc) {\n                                        // 0x415504\n                                        *v23 = *v23 | 8;\n                                        goto lab_0x41550b;\n                                    } else {\n                                        int64_t v49 = v17 + 1; // 0x415550\n                                        v15 = v49;\n                                        if ((int32_t)v49 == 64) {\n                                            // break -> 0x415560\n                                            break;\n                                        }\n                                        goto lab_0x415516;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x415560:\n                        // 0x415560\n                        v44 = v45 + 8;\n                        if (v45 == 24) {\n                            // break -> 0x414c63\n                            break;\n                        }\n                    }\n                    goto lab_0x414c63;\n                }\n            } else {\n                // 0x414c5b\n                *(int64_t *)(v11 + 120) = (int64_t)&g15;\n                goto lab_0x414c63;\n            }\n        }\n    } else {\n        // 0x4154c0\n        result = 12;\n        goto lab_0x41549e;\n    }\n  lab_0x41550b:;\n    int64_t v50 = v17 + 1; // 0x41550b\n    v15 = v50;\n    if ((int32_t)v50 == 64) {\n        // break -> 0x415560\n        goto lab_0x415560;\n    }\n    goto lab_0x415516;\n  lab_0x415516:\n    // 0x415516\n    v16 = v15 & 0xffffffff;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x415516_2;\n  lab_0x415720_2:\n    // 0x415720\n    result = 0;\n    int64_t v51; // 0x414ae0\n    int64_t v52 = v51; // 0x415728\n    int64_t v53 = v51; // 0x415728\n    goto lab_0x414e29;\n  lab_0x415010:;\n    // 0x415010\n    int64_t * v83; // 0x414ae0\n    int64_t v91 = *v83; // 0x415010\n    int64_t v92 = function_4085c0(v91, 0x40b140, (int32_t)a1); // 0x41501c\n    int64_t v93 = v92; // 0x415023\n    int64_t v94 = v91; // 0x415023\n    int64_t v95; // 0x414ae0\n    int64_t v73; // 0x414ae0\n    int64_t v96; // bp-232, 0x414ae0\n    int64_t v68; // bp-248, 0x414ae0\n    int64_t * v80; // 0x414f67\n    int64_t * v97; // 0x414ae0\n    if ((int32_t)v92 != 0) {\n        goto lab_0x415238_2;\n    } else {\n        int64_t v98 = *v83; // 0x415029\n        int64_t v99 = function_4085c0(v98, 0x40d670, (int32_t)v73); // 0x415035\n        v93 = v99;\n        v94 = v98;\n        if ((int32_t)v99 != 0) {\n            goto lab_0x415238_2;\n        } else {\n            // 0x415042\n            function_40a600(*v83, 0x40a350, v73);\n            int64_t v100 = *v83; // 0x415053\n            int64_t v101 = function_40a600(v100, 0x409e50, v73); // 0x41505f\n            v93 = v101;\n            v94 = v100;\n            if ((int32_t)v101 != 0) {\n                goto lab_0x415238_2;\n            } else {\n                // 0x415078\n                v97 = (int64_t *)(v73 + 16);\n                int64_t v102 = 0; // 0x414ae0\n                int64_t v103 = 0; // 0x414ae0\n                int64_t v104; // 0x414ae0\n                while (true) {\n                    int64_t v105 = *v97; // 0x415078\n                    int64_t v106 = v105; // 0x41507c\n                    int64_t v107 = v102; // 0x41507c\n                    int64_t v108 = v103; // 0x41507c\n                    int64_t v109 = v103; // 0x41507c\n                    int64_t v110 = v102; // 0x41507c\n                    v104 = v103;\n                    int64_t v111; // 0x414ae0\n                    if (v105 == v103) {\n                      lab_0x41509c:\n                        // 0x41509c\n                        v111 = v109;\n                        if ((char)v110 == 0) {\n                            // break -> 0x415130\n                            break;\n                        }\n                      lab_0x4150a5:\n                        // 0x4150a5\n                        v106 = v111;\n                        v107 = 0;\n                        v108 = 0;\n                    }\n                    int64_t v112 = v107;\n                    int64_t v113 = v106; // 0x415096\n                    int64_t v114 = v108;\n                    int64_t v115; // 0x415092\n                    while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                        // 0x415092\n                        v115 = v114 + 1;\n                        v109 = v113;\n                        v110 = v112;\n                        v104 = v115;\n                        if (v113 == v115) {\n                            goto lab_0x41509c;\n                        }\n                        v114 = v115;\n                    }\n                    int64_t v116 = function_40a830((int128_t *)&v68, v73, v114, 1); // 0x4150c3\n                    if ((int32_t)v116 != 0) {\n                        // 0x415238\n                        v93 = v116;\n                        v94 = &v68;\n                        goto lab_0x415238_2;\n                    }\n                    int64_t v117 = v114 + 1; // 0x4150d9\n                    v102 = v112;\n                    v103 = v117;\n                    while (*(int64_t *)((0x1800000000 * v114 >> 32) + 8 + *v80) == 0) {\n                        // 0x4150e5\n                        free((int64_t *)v96);\n                        int64_t v118 = *v97; // 0x4150f5\n                        v111 = v118;\n                        if (v118 == v117) {\n                            goto lab_0x4150a5;\n                        }\n                        v112 = 1;\n                        v113 = v118;\n                        v114 = v117;\n                        while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                            // 0x415092\n                            v115 = v114 + 1;\n                            v109 = v113;\n                            v110 = v112;\n                            v104 = v115;\n                            if (v113 == v115) {\n                                goto lab_0x41509c;\n                            }\n                            v114 = v115;\n                        }\n                        // 0x4150b0\n                        v116 = function_40a830((int128_t *)&v68, v73, v114, 1);\n                        if ((int32_t)v116 != 0) {\n                            // 0x415238\n                            v93 = v116;\n                            v94 = &v68;\n                            goto lab_0x415238_2;\n                        }\n                        // 0x4150d0\n                        v117 = v114 + 1;\n                        v102 = v112;\n                        v103 = v117;\n                    }\n                }\n                // 0x415130\n                v95 = v104;\n                if ((*v5 & 16) != 0) {\n                    goto lab_0x415248;\n                } else {\n                    // 0x41513a\n                    if (*v9 == 0) {\n                        goto lab_0x415248;\n                    } else {\n                        // 0x415145\n                        if (*(char *)(v73 + 176) % 2 == 0) {\n                            goto lab_0x415248;\n                        } else {\n                            goto lab_0x415153;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x415238_2:\n    // 0x415238\n    result = v93;\n    int64_t v67 = v94; // 0x415240\n    goto lab_0x415448;\n  lab_0x4152d8:;\n    // 0x4152d8\n    int64_t v140; // 0x414ae0\n    int64_t v141 = v140 + 1; // 0x4152d8\n    uint64_t v78; // 0x414ae0\n    if (v78 <= v141) {\n        // break -> 0x415380\n        goto lab_0x415380;\n    }\n    int64_t v142 = v141; // 0x414ae0\n    goto lab_0x4152e5_2;\n  lab_0x414c63:;\n    // 0x414c63\n    int64_t v129; // bp-208, 0x414ae0\n    int64_t v124; // bp-216, 0x414ae0\n    int64_t * v158; // 0x414c84\n    int64_t v128; // 0x414c84\n    if (*v14 == 0) {\n        // 0x4154c0\n        result = 12;\n        goto lab_0x41549e;\n    } else {\n        // 0x414c6d\n        if (*v21 == 0) {\n            // 0x4154c0\n            result = 12;\n            goto lab_0x41549e;\n        } else {\n            // 0x414c78\n            v158 = (int64_t *)(a1 + 40);\n            v128 = *v158;\n            result = 0;\n            __asm_rep_stosq_memset((char *)&v129, 0, 18);\n            v124 = a2;\n            if (a3 != 0) {\n                int64_t v159 = &v124; // 0x415105\n                int64_t v160 = function_408a00(v159, v20); // 0x41510a\n                v93 = v160;\n                v94 = v159;\n                if ((int32_t)v160 != 0) {\n                    goto lab_0x415238_2;\n                } else {\n                    // 0x415117\n                    goto lab_0x414d22;\n                }\n            } else {\n                goto lab_0x414d22;\n            }\n        }\n    }\n  lab_0x41549e:\n    // 0x41549e\n    function_40d700(v11);\n    *(int64_t *)a1 = 0;\n    *v7 = 0;\n    // 0x41542b\n    return result;\n  lab_0x414d22:;\n    int64_t v125 = a4 & 0x400000; // 0x414ca7\n    int32_t v126 = *v22;\n    int64_t v127 = (v128 | v125) == 0 ? a2 : v129;\n    v129 = v127;\n    if (v125 == 0) {\n        if (v126 > 1) {\n            int64_t v130 = &v124;\n            function_408df0(v130);\n            result = 0;\n            v52 = v130;\n            v53 = v130;\n        } else {\n            if ((v128 || v125) != 0) {\n                int64_t v131 = a3 - v4; // 0x414db6\n                int64_t v132 = v131 == 0 | v131 < 0 != ((v131 ^ a3) & (v4 ^ a3)) < 0 ? a3 : v4; // 0x414dc6\n                if (v132 > v3) {\n                    unsigned char v133 = *(char *)(2 * v3 + v124); // 0x414dfd\n                    *(char *)(v127 + v3) = *(char *)(v128 + (int64_t)v133);\n                    int64_t v134 = v3 + 1; // 0x414e08\n                    int64_t v135 = v134; // 0x414e0f\n                    if (v132 != v134) {\n                        unsigned char v136 = *(char *)(v135 + v3 + v124); // 0x414dfd\n                        *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                        int64_t v137 = v135 + 1; // 0x414e08\n                        v135 = v137;\n                        while (v132 != v137) {\n                            // 0x414de0\n                            v136 = *(char *)(v135 + v3 + v124);\n                            *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                            v137 = v135 + 1;\n                            v135 = v137;\n                        }\n                    }\n                }\n            }\n            // 0x414e11\n            result = 0;\n            v52 = &v124;\n            v53 = v126;\n        }\n        goto lab_0x414e29;\n    } else {\n        // 0x414d38\n        v51 = &v124;\n        if (v126 < 2) {\n            // 0x415648\n            function_408d70(v51);\n            result = 0;\n            v52 = v51;\n            v53 = v51;\n            goto lab_0x414e29;\n        } else {\n            int64_t v138 = function_408fa0(v51); // 0x414d46\n            v93 = v138;\n            v94 = v51;\n            // 0x414d41\n            while ((int32_t)v138 == 0) {\n                if (v3 >= a3) {\n                    goto lab_0x415720_2;\n                }\n                // 0x414d61\n                if (v4 > v3 + (int64_t)*v22) {\n                    goto lab_0x415720_2;\n                }\n                int64_t v139 = function_408a00(v51, 2 * v4); // 0x414d89\n                v93 = v139;\n                v94 = v51;\n                if ((int32_t)v139 != 0) {\n                    // break -> 0x415238\n                    break;\n                }\n                v138 = function_408fa0(v51);\n                v93 = v138;\n                v94 = v51;\n            }\n            goto lab_0x415238_2;\n        }\n    }\n  lab_0x415448:;\n    int64_t * v119 = (int64_t *)(v67 + 112); // 0x415448\n    int64_t v120 = *v119; // 0x415448\n    if (v120 != 0) {\n        int64_t * v121 = (int64_t *)v120; // 0x415458\n        int64_t v122 = *v121; // 0x415458\n        free(v121);\n        while (v122 != 0) {\n            // 0x415458\n            v121 = (int64_t *)v122;\n            v122 = *v121;\n            free(v121);\n        }\n    }\n    // 0x415468\n    *v119 = 0;\n    int64_t * v123 = (int64_t *)(v67 + 32); // 0x415470\n    *(int32_t *)(v67 + 128) = 15;\n    *(int64_t *)(v67 + 104) = 0;\n    free((int64_t *)*v123);\n    *v123 = 0;\n    function_409d50(&v124);\n    goto lab_0x41549e;\n  lab_0x414e29:;\n    int64_t v54 = v53;\n    int64_t v55 = v52;\n    *v9 = 0;\n    *(int64_t *)(v54 + 216) = a4;\n    int32_t v56; // bp-264, 0x414ae0\n    function_412be0((int64_t *)&v56, v55, a4 | 0x800000);\n    int64_t v57 = &v56; // 0x414e61\n    int64_t v58 = function_414980(v55, a1, v57, a4, 0, (int64_t)&result); // 0x414e78\n    int64_t v59; // 0x414ae0\n    int64_t v60; // 0x414ae0\n    int64_t v61; // 0x414ae0\n    int64_t v62; // 0x414ae0\n    int64_t v63; // 0x4156c9\n    int64_t v64; // 0x4156d7\n    int64_t v65; // 0x414ae0\n    int64_t v66; // 0x4156f2\n    if (result != 0) {\n        if (v58 == 0) {\n            // 0x415842\n            *(int64_t *)(v11 + 104) = 0;\n            v67 = v55;\n            goto lab_0x415448;\n        } else {\n            // 0x4156c9\n            v63 = v54 + 112;\n            v64 = v54 + 128;\n            v65 = &v68;\n            v66 = function_40ad90(v63, v64, 0, 0, v65);\n            goto lab_0x414ec7;\n        }\n    } else {\n        int64_t v69 = v54 + 112; // 0x414e89\n        int64_t v70 = v54 + 128; // 0x414e97\n        int64_t v71 = &v68;\n        int64_t v72 = function_40ad90(v69, v70, 0, 0, v71); // 0x414eb2\n        v65 = v71;\n        v64 = v70;\n        v66 = v72;\n        v63 = v69;\n        v62 = 2;\n        v61 = v72;\n        v60 = v69;\n        v59 = v72;\n        if (v58 == 0) {\n            goto lab_0x414ee6;\n        } else {\n            goto lab_0x414ec7;\n        }\n    }\n  lab_0x414ee6:\n    // 0x414ee6\n    v73 = v60;\n    int64_t * v74; // 0x414ae0\n    int64_t * v75; // 0x414f02\n    int64_t * v76; // 0x414f9d\n    int64_t * v77; // 0x414ae0\n    if (v61 == 0 || v59 == 0) {\n        // 0x415708\n        result = 12;\n        *(int64_t *)(v11 + 104) = 0;\n        v67 = v73;\n        goto lab_0x415448;\n    } else {\n        // 0x414efe\n        v78 = v62;\n        v75 = (int64_t *)(v11 + 104);\n        *v75 = v59;\n        int32_t v79 = (int32_t)*(int64_t *)(v73 + 8);\n        int32_t size2 = 8 * v79; // 0x414f1f\n        int64_t * mem4 = malloc(size2); // 0x414f1f\n        *(int64_t *)(v73 + 24) = (int64_t)mem4;\n        int64_t * mem5 = malloc(size2); // 0x414f33\n        *(int64_t *)(v73 + 32) = (int64_t)mem5;\n        int32_t size3 = 24 * v79; // 0x414f44\n        int64_t * mem6 = malloc(size3); // 0x414f44\n        *(int64_t *)(v73 + 40) = (int64_t)mem6;\n        int64_t * mem7 = malloc(size3); // 0x414f55\n        v80 = (int64_t *)(v73 + 48);\n        *v80 = (int64_t)mem7;\n        if (mem4 == NULL | mem5 == NULL || mem6 == NULL || mem7 == NULL) {\n            // 0x415440\n            result = 12;\n            v67 = v73;\n            goto lab_0x415448;\n        } else {\n            int64_t v81 = *v9; // 0x414f8c\n            int64_t * mem8 = malloc(8 * (int32_t)v81); // 0x414f98\n            int64_t v82 = (int64_t)mem8; // 0x414f98\n            v76 = (int64_t *)(v73 + 224);\n            *v76 = v82;\n            if (mem8 == NULL) {\n                // 0x414f8c\n                v83 = (int64_t *)(v73 + 104);\n                goto lab_0x415010;\n            } else {\n                // 0x414fa9\n                if (v81 != 0) {\n                    int64_t v84 = 0;\n                    *(int64_t *)(8 * v84 + v82) = v84;\n                    int64_t v85 = v84 + 1; // 0x414fb4\n                    while (v85 != v81) {\n                        // 0x414fb0\n                        v84 = v85;\n                        *(int64_t *)(8 * v84 + v82) = v84;\n                        v85 = v84 + 1;\n                    }\n                }\n                // 0x414fbd\n                v77 = (int64_t *)(v73 + 104);\n                function_40a600(*v77, 0x40a2c0, v73);\n                int64_t v86 = *v9; // 0x414fce\n                int64_t v87 = *v76;\n                v74 = (int64_t *)v87;\n                if (v86 == 0) {\n                    goto lab_0x414fff;\n                } else {\n                    // 0x414fdb\n                    v83 = v77;\n                    if (*v74 == 0) {\n                        int64_t v88 = 1; // 0x414ff6\n                        while (v88 != v86) {\n                            int64_t v89 = v88; // 0x414ff4\n                            v83 = v77;\n                            if (*(int64_t *)(8 * v88 + v87) != v88) {\n                                goto lab_0x415010;\n                            }\n                            v88 = v89 + 1;\n                        }\n                        goto lab_0x414fff;\n                    } else {\n                        goto lab_0x415010;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x414ec7:;\n    int64_t v90 = function_40ad90(v63, v64, (int32_t)v58, (int32_t)v66, v65); // 0x414edb\n    v62 = 16;\n    v61 = v66;\n    v60 = v63;\n    v59 = v90;\n    goto lab_0x414ee6;\n  lab_0x414fff:\n    // 0x414fff\n    free(v74);\n    *v76 = 0;\n    v83 = v77;\n    goto lab_0x415010;\n  lab_0x415248:\n    // 0x415248\n    if (*(int64_t *)(v73 + 152) != 0) {\n        goto lab_0x415153;\n    } else {\n        goto lab_0x415256;\n    }\n  lab_0x415153:;\n    int64_t size4 = 24 * v95; // 0x415157\n    int64_t * mem9 = malloc((int32_t)size4); // 0x41515b\n    int64_t v161 = (int64_t)mem9; // 0x41515b\n    int64_t * v162 = (int64_t *)(v73 + 56); // 0x415160\n    *v162 = v161;\n    if (mem9 == NULL) {\n        // 0x415820\n        result = 12;\n        v67 = size4;\n        goto lab_0x415448;\n    } else {\n        if (v95 != 0) {\n            int128_t v163 = __asm_pxor(v2, v2); // 0x415188\n            __asm_movups(*(int128_t *)mem9, v163);\n            *(int64_t *)(v161 + 16) = 0;\n            uint64_t v164 = *v97; // 0x41519f\n            int64_t v165 = 1; // 0x4151a6\n            int128_t v166 = v163; // 0x4151a6\n            int64_t v167 = v164; // 0x4151a6\n            if (v164 > 1) {\n                int128_t v168 = v166;\n                int128_t v169 = __asm_pxor(v168, v168); // 0x415188\n                int64_t v170 = v165 + 1; // 0x41518c\n                int64_t v171 = *v162 + 24 * v165; // 0x415190\n                __asm_movups(*(int128_t *)v171, v169);\n                *(int64_t *)(v171 + 16) = 0;\n                uint64_t v172 = *v97; // 0x41519f\n                v165 = v170;\n                v167 = v172;\n                while (v172 > v170) {\n                    // 0x415180\n                    v168 = v169;\n                    v169 = __asm_pxor(v168, v168);\n                    v170 = v165 + 1;\n                    v171 = *v162 + 24 * v165;\n                    __asm_movups(*(int128_t *)v171, v169);\n                    *(int64_t *)(v171 + 16) = 0;\n                    v172 = *v97;\n                    v165 = v170;\n                    v167 = v172;\n                }\n            }\n            int64_t v173 = v167;\n            if (v173 != 0) {\n                int64_t v174 = *v80; // 0x4151ba\n                int64_t v175 = 0;\n                int64_t v176 = 24 * v175; // 0x4151ca\n                int64_t v177 = v176 + v174; // 0x4151d7\n                int64_t v178 = *(int64_t *)(v177 + 8); // 0x4151da\n                int64_t v179 = v173; // 0x4151e3\n                int64_t v180 = v174; // 0x4151e3\n                int64_t v181; // 0x414ae0\n                int64_t v182; // 0x41521e\n                int64_t v183; // 0x415227\n                int64_t v184; // 0x4151f0\n                int64_t v185; // 0x4151f9\n                if (v178 >= 0 == (v178 != 0)) {\n                    // 0x41520d\n                    v181 = *(int64_t *)(v177 + 16);\n                    v185 = 0;\n                    v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                    v183 = function_408aa0(v182, v175);\n                    v93 = 12;\n                    v94 = v182;\n                    if ((char)v183 == 0) {\n                        goto lab_0x415238_2;\n                    }\n                    // 0x4151f0\n                    v184 = *v80;\n                    v185++;\n                    v181 = 0x100000000 * v181 >> 32;\n                    while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                        // 0x41520d\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_408aa0(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x415238_2;\n                        }\n                        // 0x4151f0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                    }\n                    // 0x4156a0\n                    v179 = *v97;\n                    v180 = v184;\n                }\n                // 0x4156a0\n                v174 = v180;\n                int64_t v186 = v179; // 0x4156ab\n                int64_t v187 = v175 + 1; // 0x4156a0\n                while (v186 > v187) {\n                    // 0x4151be\n                    v175 = v187;\n                    v176 = 24 * v175;\n                    v177 = v176 + v174;\n                    v178 = *(int64_t *)(v177 + 8);\n                    v179 = v186;\n                    v180 = v174;\n                    if (v178 >= 0 == (v178 != 0)) {\n                        // 0x41520d\n                        v181 = *(int64_t *)(v177 + 16);\n                        v185 = 0;\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_408aa0(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x415238_2;\n                        }\n                        // 0x4151f0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                        while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                            // 0x41520d\n                            v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                            v183 = function_408aa0(v182, v175);\n                            v93 = 12;\n                            v94 = v182;\n                            if ((char)v183 == 0) {\n                                goto lab_0x415238_2;\n                            }\n                            // 0x4151f0\n                            v184 = *v80;\n                            v185++;\n                            v181 = 0x100000000 * v181 >> 32;\n                        }\n                        // 0x4156a0\n                        v179 = *v97;\n                        v180 = v184;\n                    }\n                    // 0x4156a0\n                    v174 = v180;\n                    v186 = v179;\n                    v187 = v175 + 1;\n                }\n            }\n        }\n        goto lab_0x415256;\n    }\n  lab_0x415256:\n    // 0x415256\n    result = 0;\n    unsigned char result2 = *v23 / 4 & (char)(v125 == 0); // 0x415270\n    if (result2 != 0) {\n        // 0x415590\n        if (*v158 == 0) {\n            // 0x41559b\n            if (*(int64_t *)(v11 + 16) != 0) {\n                // 0x4155a8\n                return result2;\n            }\n            int64_t v188 = *(int64_t *)(v11 + 152); // 0x415856\n            *v22 = 1;\n            *v23 = 2 * (char)(v188 >= 0 == (v188 != 0)) | *v23 & -7;\n        }\n    }\n    int64_t v155 = &v68; // 0x41527c\n    int64_t v189 = *(int64_t *)(*(int64_t *)(*v75 + 24) + 56); // 0x415283\n    *(int64_t *)(v11 + 144) = v189;\n    int64_t * v153 = (int64_t *)(v11 + 48); // 0x415292\n    int64_t v190 = function_40b1c0(v155, *v153 + 24 * v189); // 0x41529a\n    int64_t v191 = v190 & 0xffffffff; // 0x41529f\n    int32_t v192 = v190; // 0x4152a2\n    v56 = v192;\n    int64_t v154 = v155; // 0x4152a8\n    int64_t v156 = v191; // 0x4152a8\n    if (v192 != 0) {\n        goto lab_0x4153bf;\n    } else {\n        // 0x4152ae\n        if (*(int64_t *)(v11 + 152) >= 1) {\n            int64_t v152 = &v96;\n            v142 = 0;\n            while (true) {\n              lab_0x4152e5_2:\n                // 0x4152e5\n                v140 = v142;\n                int64_t v143 = *v14; // 0x4152ea\n                int64_t v144 = *(int64_t *)(v96 + 8 * v140); // 0x4152ed\n                int64_t v145 = 16 * v144 + v143; // 0x4152f8\n                if (*(char *)(v145 + 8) == 4) {\n                    int64_t * v146 = (int64_t *)v145;\n                    int64_t v147 = 0;\n                    int64_t v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143; // 0x415319\n                    int64_t v149; // 0x41532a\n                    int64_t v150; // 0x415340\n                    int64_t v151; // 0x41535f\n                    if (*(char *)(v148 + 8) == 9) {\n                        // 0x415322\n                        if (*(int64_t *)v148 == *v146) {\n                            // 0x41532a\n                            v149 = *(int64_t *)(v11 + 40);\n                            v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                            if (function_40a120(v78, v152, v150) != 0) {\n                                goto lab_0x4152d8;\n                            } else {\n                                // 0x415350\n                                v151 = function_40a660(&v68, (int128_t *)(*v153 + 24 * v150));\n                                if ((int32_t)v151 != 0) {\n                                    // 0x4157e0\n                                    v154 = v155;\n                                    v156 = v151 & 0xffffffff;\n                                    goto lab_0x4153bf;\n                                } else {\n                                    // 0x4152e5\n                                    v142 = 1;\n                                    goto lab_0x4152e5_2;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v157 = v147 + 1; // 0x415308\n                    while (v78 != v157) {\n                        // 0x415311\n                        v147 = v157;\n                        v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143;\n                        if (*(char *)(v148 + 8) == 9) {\n                            // 0x415322\n                            if (*(int64_t *)v148 == *v146) {\n                                // 0x41532a\n                                v149 = *(int64_t *)(v11 + 40);\n                                v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                                if (function_40a120(v78, v152, v150) != 0) {\n                                    goto lab_0x4152d8;\n                                } else {\n                                    // 0x415350\n                                    v151 = function_40a660(&v68, (int128_t *)(*v153 + 24 * v150));\n                                    if ((int32_t)v151 != 0) {\n                                        // 0x4157e0\n                                        v154 = v155;\n                                        v156 = v151 & 0xffffffff;\n                                        goto lab_0x4153bf;\n                                    } else {\n                                        // 0x4152e5\n                                        v142 = 1;\n                                        goto lab_0x4152e5_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x415308\n                        v157 = v147 + 1;\n                    }\n                }\n                goto lab_0x4152d8;\n            }\n        }\n      lab_0x415380:;\n        int64_t v193 = function_40b3d0((int128_t *)&v56, v11, &v68, 0); // 0x41538d\n        *(int64_t *)(v11 + 72) = v193;\n        if (v193 == 0) {\n            goto lab_0x415638;\n        } else {\n            // 0x41539f\n            if (*(char *)(v193 + 104) < 0) {\n                int64_t v194 = function_40b3d0((int128_t *)&v56, v11, &v68, 1); // 0x4155e0\n                int64_t * v195 = (int64_t *)(v11 + 80); // 0x4155f0\n                *v195 = v194;\n                int64_t v196 = function_40b3d0((int128_t *)&v56, v11, &v68, 2); // 0x4155f9\n                int64_t * v197 = (int64_t *)(v11 + 88); // 0x415609\n                *v197 = v196;\n                int64_t v198 = function_40b3d0((int128_t *)&v56, v11, &v68, 6); // 0x415612\n                *(int64_t *)(v11 + 96) = v198;\n                if (*v195 == 0) {\n                    goto lab_0x415638;\n                } else {\n                    // 0x415622\n                    if (v198 != 0 == (*v197 != 0)) {\n                        goto lab_0x4153b5;\n                    } else {\n                        goto lab_0x415638;\n                    }\n                }\n            } else {\n                // 0x4153a9\n                *(int64_t *)(v11 + 96) = v193;\n                *(int64_t *)(v11 + 88) = v193;\n                *(int64_t *)(v11 + 80) = v193;\n                goto lab_0x4153b5;\n            }\n        }\n    }\n  lab_0x4153bf:\n    // 0x4153bf\n    result = v156;\n    int64_t * v199 = (int64_t *)(v154 + 112); // 0x4153c8\n    int64_t v200 = *v199; // 0x4153c8\n    if (v200 != 0) {\n        int64_t * v201 = (int64_t *)v200; // 0x4153d8\n        int64_t v202 = *v201; // 0x4153d8\n        free(v201);\n        while (v202 != 0) {\n            // 0x4153d8\n            v201 = (int64_t *)v202;\n            v202 = *v201;\n            free(v201);\n        }\n    }\n    // 0x4153e8\n    *v199 = 0;\n    int64_t * v203 = (int64_t *)(v154 + 32); // 0x4153f1\n    *(int32_t *)(v154 + 128) = 15;\n    *(int64_t *)(v154 + 104) = 0;\n    free((int64_t *)*v203);\n    *v203 = 0;\n    function_409d50(&v124);\n    if (result == 0) {\n        // 0x41542b\n        return result;\n    }\n    goto lab_0x41549e;\n  lab_0x415638:\n    // 0x415638\n    v154 = v57;\n    v156 = v56;\n    goto lab_0x4153bf;\n  lab_0x4153b5:\n    // 0x4153b5\n    free((int64_t *)v96);\n    v154 = v96;\n    v156 = v191;\n    goto lab_0x4153bf;\n}\n"
        },
        {
            "funcName": "function_415890",
            "funcStartAddr": "415890",
            "funcEndAddr": "4158f7",
            "decompiledFuncCode": "int64_t function_415890(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)(a3 + 56); // 0x4158b0\n    *v1 = *v1 & 111 | (char)(g80 / 0x200000) & 16 | -128;\n    int64_t v2; // 0x415890\n    int64_t v3 = function_414ae0(a3, a1, a2, g80, a1, v2); // 0x4158c5\n    if ((int32_t)v3 == 0) {\n        // 0x4158f0\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)((0x100000000 * v3 >> 29) + (int64_t)&g16); // 0x4158d7\n    return (int64_t)dcgettext(NULL, (char *)(v4 + (int64_t)\"Success\"), 5);\n}\n"
        },
        {
            "funcName": "function_415900",
            "funcStartAddr": "415900",
            "funcEndAddr": "41590f",
            "decompiledFuncCode": "int64_t function_415900(int64_t a1) {\n    int64_t result = g80; // 0x415900\n    g80 = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_415910",
            "funcStartAddr": "415910",
            "funcEndAddr": "4159d3",
            "decompiledFuncCode": "int64_t function_415910(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 32); // 0x415916\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(v1 + 248) = 0;\n    int64_t v2 = v1 + 8 & -8; // 0x41593a\n    __asm_rep_stosq_memset((char *)v2, 0, (v1 + 256 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)(a1 + 72); // 0x415953\n    int64_t v4 = *v3; // 0x415953\n    function_40e3c0(a1, v4 + 16, v4 + 24, v1);\n    int64_t v5 = *(int64_t *)(a1 + 80); // 0x415965\n    int64_t v6 = v5; // 0x41596f\n    if (*v3 != v5) {\n        // 0x415971\n        function_40e3c0(a1, v5 + 16, v5 + 24, v1);\n        v6 = *v3;\n    }\n    int64_t v7 = *(int64_t *)(a1 + 88); // 0x415989\n    int64_t v8 = v6; // 0x415991\n    if (v7 != v6) {\n        // 0x415993\n        function_40e3c0(a1, v7 + 16, v7 + 24, v1);\n        v8 = *v3;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 96); // 0x4159ab\n    if (v9 != v8) {\n        // 0x4159b5\n        function_40e3c0(a1, v9 + 16, v9 + 24, v1);\n    }\n    char * v10 = (char *)(a1 + 56); // 0x4159c8\n    *v10 = *v10 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4159e0",
            "funcStartAddr": "4159e0",
            "funcEndAddr": "415f6b",
            "decompiledFuncCode": "int64_t function_4159e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x4159e0\n    if (a4 < 0 || a4 > a3) {\n        // 0x415b0f\n        return -1;\n    }\n    int64_t v1 = a5 + a4; // 0x4159e5\n    int64_t v2 = a3; // 0x415a21\n    if (v1 > a3) {\n        goto lab_0x415a4c;\n    } else {\n        // 0x415a27\n        v2 = a3;\n        if (a5 > -1 == v1 < a4) {\n            goto lab_0x415a4c;\n        } else {\n            if (v1 < 0) {\n                goto lab_0x415d08;\n            } else {\n                // 0x415a3e\n                v2 = v1;\n                if (a5 >= 0 || v1 < a4) {\n                    goto lab_0x415a4c;\n                } else {\n                    goto lab_0x415d08;\n                }\n            }\n        }\n    }\n  lab_0x415a4c:;\n    char * v3 = (char *)(a1 + 56); // 0x415a4c\n    int64_t v4 = (int64_t)*v3; // 0x415a4c\n    int64_t v5 = v4; // 0x415a62\n    int64_t v6 = v2; // 0x415a62\n    if (v2 > a4) {\n        // 0x415a64\n        v5 = v4;\n        v6 = v2;\n        if ((v4 & 8) == 0 == (*(int64_t *)(a1 + 32) != 0)) {\n            // 0x415c60\n            function_415910(a1);\n            v5 = (int64_t)*v3;\n            v6 = v2;\n        }\n    }\n    goto lab_0x415a73;\n  lab_0x415a73:;\n    int64_t size = 16; // 0x415a75\n    int64_t v7 = 0; // 0x415a75\n    int64_t v8 = 1; // 0x415a75\n    int64_t v9; // 0x4159e0\n    if (a7 == 0 || (v5 & 16) != 0) {\n        goto lab_0x415aa1;\n    } else {\n        uint64_t v10 = *(int64_t *)(a1 + 48); // 0x415a87\n        if ((v5 & 6) == 4) {\n            int64_t v11 = *(int64_t *)a7; // 0x415c20\n            if (v11 > v10) {\n                // 0x415a93\n                v9 = v10 + 1;\n                goto lab_0x415a9a;\n            } else {\n                // 0x415c2d\n                v9 = v11;\n                size = 16;\n                v7 = 0;\n                v8 = 1;\n                if (v11 >= 0 == (v11 != 0)) {\n                    goto lab_0x415a9a;\n                } else {\n                    goto lab_0x415aa1;\n                }\n            }\n        } else {\n            // 0x415a93\n            v9 = v10 + 1;\n            goto lab_0x415a9a;\n        }\n    }\n  lab_0x415aa1:;\n    int64_t * mem = malloc((int32_t)size); // 0x415ab0\n    if (mem == NULL) {\n        // 0x415b0f\n        return -2;\n    }\n    uint64_t v12 = v8;\n    int64_t v13 = (int64_t)mem; // 0x415ab0\n    int64_t result = -1; // 0x4159e0\n    int64_t v14; // 0x4159e0\n    int64_t v15; // 0x4159e0\n    int64_t v16; // 0x4159e0\n    int64_t v17; // 0x4159e0\n    int64_t v18; // 0x4159e0\n    int64_t v19; // 0x4159e0\n    int64_t v20; // 0x4159e0\n    int64_t v21; // 0x4159e0\n    int64_t v22; // 0x4159e0\n    int64_t v23; // 0x4159e0\n    int64_t v24; // 0x4159e0\n    int64_t v25; // 0x4159e0\n    int64_t v26; // 0x4159e0\n    int64_t v27; // 0x4159e0\n    int64_t v28; // 0x4159e0\n    int64_t v29; // 0x4159e0\n    int64_t v30; // 0x4159e0\n    int64_t v31; // 0x4159e0\n    int64_t v32; // 0x4159e0\n    int64_t v33; // 0x4159e0\n    int64_t v34; // 0x4159e0\n    int64_t v35; // 0x4159e0\n    int64_t v36; // 0x4159e0\n    int64_t v37; // 0x4159e0\n    int64_t v38; // 0x4159e0\n    char * v39; // 0x415b31\n    switch ((int32_t)v40) {\n        case 0: {\n            // 0x415b28\n            v14 = v7;\n            v36 = a2;\n            v26 = a3;\n            v31 = v6;\n            v16 = v6;\n            v21 = a6;\n            if (v14 == 0) {\n                goto lab_0x415bf8;\n            } else {\n                // 0x415b31\n                v39 = (char *)(a1 + 56);\n                int64_t v41 = v12 + 1; // 0x415b36\n                unsigned char v42 = *v39 / 2 % 4;\n                switch (v42) {\n                    case 0: {\n                        int32_t size2 = 8 * (int32_t)v41; // 0x415cb0\n                        int64_t * mem2 = malloc(size2); // 0x415cb0\n                        int64_t v43 = (int64_t)mem2; // 0x415cb0\n                        *(int64_t *)(v14 + 8) = v43;\n                        v35 = v41;\n                        v25 = a3;\n                        int64_t v44; // 0x4159e0\n                        v30 = v44;\n                        v15 = v44;\n                        v20 = 0;\n                        if (mem2 == NULL) {\n                            goto lab_0x415bdd;\n                        } else {\n                            int64_t * mem3 = malloc(size2); // 0x415cd5\n                            *(int64_t *)(v14 + 16) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x415dca\n                                free(mem2);\n                                v35 = v41;\n                                v25 = a3;\n                                v30 = v43;\n                                v15 = v44;\n                                v20 = 0;\n                                goto lab_0x415bdd;\n                            } else {\n                                // 0x415cf2\n                                *(int64_t *)v14 = v41;\n                                v34 = v41;\n                                v24 = a3;\n                                v29 = v43;\n                                v19 = 1;\n                                goto lab_0x415b67;\n                            }\n                        }\n                    }\n                    case 1: {\n                        int64_t * v45 = (int64_t *)v14; // 0x415d4e\n                        v34 = a2;\n                        v24 = a3;\n                        v29 = v6;\n                        v19 = 1;\n                        if (*v45 >= v41) {\n                            goto lab_0x415b67;\n                        } else {\n                            int64_t v46 = 8 * v41; // 0x415d58\n                            int64_t * v47 = (int64_t *)(v14 + 8); // 0x415d60\n                            int32_t v48 = v46; // 0x415d77\n                            int64_t * mem4 = realloc((int64_t *)*v47, v48); // 0x415d77\n                            v35 = v46;\n                            v25 = 1;\n                            v30 = v41;\n                            v15 = v6;\n                            v20 = 0;\n                            if (mem4 == NULL) {\n                                goto lab_0x415bdd;\n                            } else {\n                                int64_t * v49 = (int64_t *)(v14 + 16); // 0x415d89\n                                int64_t * mem5 = realloc((int64_t *)*v49, v48); // 0x415d91\n                                if (mem5 == NULL) {\n                                    // 0x415dda\n                                    free(mem4);\n                                    v35 = v46;\n                                    v25 = 1;\n                                    v30 = v41;\n                                    v15 = v6;\n                                    v20 = 0;\n                                    goto lab_0x415bdd;\n                                } else {\n                                    // 0x415da6\n                                    *v47 = (int64_t)mem4;\n                                    *v49 = (int64_t)mem5;\n                                    *v45 = v41;\n                                    v34 = v46;\n                                    v24 = 1;\n                                    v29 = v41;\n                                    v19 = 1;\n                                    goto lab_0x415b67;\n                                }\n                            }\n                        }\n                    }\n                    default: {\n                        // 0x415b4e\n                        v38 = a2;\n                        v28 = a3;\n                        v33 = v6;\n                        v18 = v6;\n                        v23 = a6;\n                        if (v42 != 2) {\n                            goto lab_0x415e1c;\n                        } else {\n                            // 0x415b57\n                            v34 = a2;\n                            v24 = a3;\n                            v29 = v6;\n                            v19 = 2;\n                            v37 = a2;\n                            v27 = a3;\n                            v32 = v6;\n                            v17 = v6;\n                            v22 = a6;\n                            if (v12 > *(int64_t *)v14) {\n                                goto lab_0x415e03;\n                            } else {\n                                goto lab_0x415b67;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            goto lab_0x415b07;\n        }\n        default: {\n            goto lab_0x415b00;\n        }\n    }\n  lab_0x415d08:\n    // 0x415d08\n    v5 = (int64_t)*(char *)(a1 + 56);\n    v6 = 0;\n    goto lab_0x415a73;\n  lab_0x415b00:\n    // 0x415b00\n    result = -2;\n  lab_0x415b07:\n    // 0x415b07\n    free(mem);\n    // 0x415b0f\n    return result;\n  lab_0x415bf8:;\n    int64_t v50 = *mem; // 0x415bfd\n    result = v50;\n    if ((char)a8 == 0) {\n        // 0x415b07\n        free(mem);\n        // 0x415b0f\n        return result;\n    }\n    if (v50 == a4) {\n        // 0x415b07\n        free(mem);\n        // 0x415b0f\n        return *(int64_t *)(v13 + 8) - v50;\n    }\n    // 0x415dea\n    __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 445, \"re_search_stub\");\n    v37 = v36;\n    v27 = v26;\n    v32 = v31;\n    v17 = v16;\n    v22 = v21;\n    goto lab_0x415e03;\n  lab_0x415a9a:\n    // 0x415a9a\n    size = 16 * v9;\n    v7 = a7;\n    v8 = v9;\n    goto lab_0x415aa1;\n  lab_0x415e03:\n    // 0x415e03\n    __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 506, \"re_copy_regs\");\n    v38 = v37;\n    v28 = v27;\n    v33 = v32;\n    v18 = v17;\n    v23 = v22;\n    goto lab_0x415e1c;\n  lab_0x415e1c:\n    // 0x415e1c\n    __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 504, \"re_copy_regs\");\n    if ((v18 || v28) <= -1) {\n        // 0x415b0f\n        return -2;\n    }\n    int64_t size3 = v18 + 504; // 0x415e8c\n    if ((size3 & (v18 ^ -0x8000000000000000)) < 0) {\n        // 0x415b0f\n        return -2;\n    }\n    int64_t * v51 = NULL; // 0x415e98\n    int64_t v52 = (int64_t)\"lib/regexec.c\"; // 0x415e98\n    if (v18 != 0) {\n        int64_t * mem6 = malloc((int32_t)size3); // 0x415f02\n        if (mem6 == NULL) {\n            // 0x415b0f\n            return -2;\n        }\n        int64_t v53 = (int64_t)mem6; // 0x415f02\n        memcpy(mem6, (int64_t *)\"lib/regexec.c\", 504);\n        memcpy((int64_t *)(v53 + 504), (int64_t *)\"re_copy_regs\", (int32_t)v18);\n        v51 = mem6;\n        v52 = v53;\n    }\n    int64_t result2 = function_4159e0((int64_t)\"regs_allocated == REGS_FIXED\", v52, size3, v23, v38, v28, v33, a6 % 256); // 0x415ec3\n    free(v51);\n    // 0x415b0f\n    return result2;\n  lab_0x415bdd:\n    // 0x415bdd\n    *v39 = *v39 & -7 | 2 * (char)v20;\n    v36 = v35;\n    v26 = v25;\n    v31 = v30;\n    v16 = v15;\n    v21 = v20;\n    if (v20 == 0) {\n        goto lab_0x415b00;\n    } else {\n        goto lab_0x415bf8;\n    }\n  lab_0x415b67:;\n    int64_t v54 = v19;\n    int64_t v55 = v29;\n    int64_t v56 = v24;\n    int64_t v57 = v34;\n    int64_t v58 = 0; // 0x415b6a\n    int64_t v59 = v6; // 0x415b6a\n    if (v12 >= 1) {\n        int64_t v60 = *(int64_t *)(v14 + 8); // 0x415b70\n        int64_t v61 = 0; // 0x415b87\n        int64_t v62 = 2 * v61; // 0x415b90\n        *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n        int64_t v63 = *(int64_t *)(v13 + 8 + v62); // 0x415b99\n        *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n        v61 += 8;\n        v58 = v12;\n        v59 = v60;\n        while (v61 != 8 * v12) {\n            // 0x415b90\n            v62 = 2 * v61;\n            *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n            v63 = *(int64_t *)(v13 + 8 + v62);\n            *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n            v61 += 8;\n            v58 = v12;\n            v59 = v60;\n        }\n    }\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    int64_t * v66 = (int64_t *)v14; // 0x415bab\n    v35 = v57;\n    v25 = v56;\n    v30 = v55;\n    v15 = v64;\n    v20 = v54;\n    if (*v66 > v65) {\n        int64_t v67 = v65 + 1; // 0x415bc8\n        int64_t v68 = 8 * v65; // 0x415bcc\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n        v35 = v57;\n        v25 = v56;\n        v30 = v55;\n        v15 = v64;\n        v20 = v54;\n        while (*v66 > v67) {\n            int64_t v69 = v67;\n            v67 = v69 + 1;\n            v68 = 8 * v69;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n            v35 = v57;\n            v25 = v56;\n            v30 = v55;\n            v15 = v64;\n            v20 = v54;\n        }\n    }\n    goto lab_0x415bdd;\n}\n"
        },
        {
            "funcName": "function_415f70",
            "funcStartAddr": "415f70",
            "funcEndAddr": "416080",
            "decompiledFuncCode": "int64_t function_415f70(int64_t a1, int64_t str, uint64_t a3) {\n    // 0x415f70\n    *(int64_t *)a1 = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t * mem = malloc(256); // 0x415fb5\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x415fba\n    *v1 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x416070\n        return 12;\n    }\n    int64_t v2 = (a3 % 2 == 0 ? 0x10102c6 : 0x3b2fc) | 0x200000 * a3 & 0x400000; // 0x415fd7\n    int64_t v3 = (a3 & 4) != 0 ? v2 & 0x143b2be | 256 : v2;\n    *(int64_t *)(a1 + 40) = 0;\n    char * v4 = (char *)(a1 + 56); // 0x415ff2\n    *v4 = ((a3 & 4) != 0 ? -128 : 0) | 2 * (char)a3 & 16 | *v4 & 111;\n    int64_t v5; // 0x415f70\n    int64_t v6 = function_414ae0(a1, str, (int64_t)strlen((char *)str), v3, v5, v5); // 0x416017\n    int32_t v7 = v6; // 0x41601e\n    int64_t v8 = 8; // 0x416021\n    if (v7 != 16) {\n        // 0x416023\n        v8 = v6 & 0xffffffff;\n        if (v7 == 0) {\n            // 0x416027\n            function_415910(a1);\n            // 0x41602f\n            return v8 & 0xffffffff;\n        }\n    }\n    // 0x41605d\n    free((int64_t *)*v1);\n    *v1 = 0;\n    // 0x41602f\n    return v8 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_416080",
            "funcStartAddr": "416080",
            "funcEndAddr": "4160fd",
            "decompiledFuncCode": "int64_t function_416080(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {\n    int64_t v1 = *(int64_t *)((0x100000000 * a1 >> 29) + (int64_t)&g16); // 0x4160a1\n    char * str = dcgettext(NULL, (char *)(v1 + (int64_t)\"Success\"), 5); // 0x4160b2\n    int64_t result = (int64_t)strlen(str) + 1; // 0x4160c2\n    if (a4 == 0) {\n        // 0x4160de\n        return result;\n    }\n    int64_t v2 = result; // 0x4160d1\n    if (result > a4) {\n        // 0x4160f0\n        v2 = a4 - 1;\n        *(char *)(v2 + a3) = 0;\n    }\n    // 0x4160d3\n    memcpy((int64_t *)a3, (int64_t *)str, (int32_t)v2);\n    // 0x4160de\n    return result;\n}\n"
        },
        {
            "funcName": "function_416100",
            "funcStartAddr": "416100",
            "funcEndAddr": "416144",
            "decompiledFuncCode": "int64_t function_416100(int64_t a1) {\n    if (a1 != 0) {\n        // 0x41610c\n        function_40d700(a1);\n    }\n    // 0x416111\n    *(int64_t *)a1 = 0;\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x416118\n    *(int64_t *)(a1 + 8) = 0;\n    free((int64_t *)*v1);\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)(a1 + 40); // 0x416131\n    free((int64_t *)*v2);\n    *v2 = 0;\n    return &g84;\n}\n"
        },
        {
            "funcName": "function_416150",
            "funcStartAddr": "416150",
            "funcEndAddr": "4161e6",
            "decompiledFuncCode": "int64_t function_416150(int64_t a1, int64_t str, int64_t a3, int64_t a4, int64_t a5) {\n    if ((a5 & 0xfffffff8) != 0) {\n        // 0x4161e0\n        return 2;\n    }\n    int64_t v1; // 0x416150\n    int64_t v2; // 0x416150\n    int64_t v3; // 0x416150\n    int64_t v4; // 0x416150\n    int64_t v5; // 0x416150\n    int64_t v6; // 0x416150\n    if ((a5 & 4) != 0) {\n        int64_t v7 = *(int64_t *)(a4 + 8); // 0x4161c3\n        v5 = 0;\n        v1 = a4;\n        v3 = v7;\n        v6 = 0;\n        v2 = a4;\n        v4 = v7;\n        if ((*(char *)(a1 + 56) & 16) != 0) {\n            goto lab_0x416196;\n        } else {\n            goto lab_0x4161cd;\n        }\n    } else {\n        int64_t len = strlen((char *)str); // 0x41617d\n        v5 = 0;\n        v1 = 0;\n        v3 = len;\n        v6 = 0;\n        v2 = 0;\n        v4 = len;\n        if ((*(char *)(a1 + 56) & 16) == 0) {\n            goto lab_0x4161cd;\n        } else {\n            goto lab_0x416196;\n        }\n    }\n  lab_0x416196:;\n    int64_t v8 = v3;\n    return (int32_t)function_410a30(a1, str, v8, v1, v8, v8, v6, v5, a5 & 0xffffffff) != 0;\n  lab_0x4161cd:\n    // 0x4161cd\n    v5 = a4;\n    v1 = v2;\n    v3 = v4;\n    v6 = a3;\n    goto lab_0x416196;\n}\n"
        },
        {
            "funcName": "function_4161f0",
            "funcStartAddr": "4161f0",
            "funcEndAddr": "416208",
            "decompiledFuncCode": "int64_t function_4161f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4161f0\n    return function_4159e0(a1, a2, a3, a4, 0, a3, a5, 1);\n}\n"
        },
        {
            "funcName": "function_416210",
            "funcStartAddr": "416210",
            "funcEndAddr": "416225",
            "decompiledFuncCode": "int64_t function_416210(int64_t a1, int64_t a2, int64_t a3, int32_t a4, int64_t a5, int32_t a6) {\n    // 0x416210\n    return function_4159e0(a1, a2, a3, (int64_t)a4, a5, a3, (int64_t)a6, 0);\n}\n"
        },
        {
            "funcName": "function_416230",
            "funcStartAddr": "416230",
            "funcEndAddr": "41624a",
            "decompiledFuncCode": "int64_t function_416230(int64_t a1, int64_t a2) {\n    // 0x416230\n    int64_t result; // 0x416230\n    return result;\n}\n"
        },
        {
            "funcName": "function_416250",
            "funcStartAddr": "416250",
            "funcEndAddr": "41626c",
            "decompiledFuncCode": "int64_t function_416250(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x416250\n    int64_t result; // 0x416250\n    return result;\n}\n"
        },
        {
            "funcName": "function_416270",
            "funcStartAddr": "416270",
            "funcEndAddr": "4162ac",
            "decompiledFuncCode": "int64_t function_416270(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 56);\n    char v2 = *v1 & -7;\n    if (a3 == 0) {\n        // 0x416290\n        *v1 = v2;\n        *(int64_t *)a2 = 0;\n        *(int64_t *)(a2 + 16) = 0;\n        *(int64_t *)(a2 + 8) = 0;\n        int64_t result; // 0x416270\n        return result;\n    }\n    unsigned char result2 = v2 | 2;\n    *v1 = result2;\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 8) = a4;\n    *(int64_t *)(a2 + 16) = a5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4162b0",
            "funcStartAddr": "4162b0",
            "funcEndAddr": "41630d",
            "decompiledFuncCode": "int64_t function_4162b0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4162b7\n    int64_t v2; // 0x4162b0\n    int64_t result = function_4073b0(a1, v2); // 0x4162c8\n    if ((v2 & 32) != 0) {\n        // 0x4162f0\n        if ((int32_t)result == 0) {\n            // 0x4162f4\n            *__errno_location() = 0;\n        }\n        // 0x4162ea\n        return 0xffffffff;\n    }\n    // 0x4162d1\n    if ((int32_t)result == 0) {\n        // 0x4162ea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4162d8\n    if (v1 == 0) {\n        // 0x4162da\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4162ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_416310",
            "funcStartAddr": "416310",
            "funcEndAddr": "41636e",
            "decompiledFuncCode": "int64_t function_416310(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x416316\n    if (locale == NULL) {\n        // 0x416343\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x416316\n    bool v2; // 0x416310\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g18; // 0x416310\n    int64_t v5 = v1; // 0x416310\n    int64_t v6 = 2; // 0x416335\n    unsigned char v7 = *(char *)v5; // 0x416335\n    char v8 = *(char *)v4; // 0x416335\n    char v9 = v8; // 0x416335\n    bool v10 = false; // 0x416335\n    while (v7 == v8) {\n        // 0x416328\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x416341\n    int64_t v13 = v1; // 0x416341\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x416343\n        return 0;\n    }\n    int64_t v14 = 6; // 0x416341\n    unsigned char v15 = *(char *)v13; // 0x41635d\n    char v16 = *(char *)v12; // 0x41635d\n    char v17 = v16; // 0x41635d\n    bool v18 = false; // 0x41635d\n    while (v15 == v16) {\n        // 0x416350\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_416370",
            "funcStartAddr": "416370",
            "funcEndAddr": "4168d2",
            "decompiledFuncCode": "int64_t function_416370(void) {\n    char * v1 = nl_langinfo(14); // 0x416386\n    char * v2 = g78; // 0x41638b\n    char * v3; // 0x416370\n    int64_t v4; // 0x416370\n    int64_t v5; // 0x416370\n    int64_t v6; // 0x416370\n    int64_t v7; // 0x416370\n    int32_t size; // 0x416370\n    int32_t size2; // 0x416370\n    int32_t len; // 0x416442\n    int64_t v8; // 0x416442\n    char * env_val; // 0x41642d\n    if (v2 == NULL) {\n        // 0x416428\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x416495;\n        } else {\n            // 0x41643a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x416495;\n            } else {\n                // 0x41643f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41642d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4168c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x416495;\n                    } else {\n                        // 0x416839\n                        size2 = len + 14;\n                        goto lab_0x41645b;\n                    }\n                } else {\n                    goto lab_0x41645b;\n                }\n            }\n        }\n    } else {\n        // 0x416370\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4163aa;\n    }\n  lab_0x4166dc:;\n    // 0x4166dc\n    struct _IO_FILE * stream; // 0x41651b\n    int32_t v10 = __uflow(stream); // 0x4166df\n    int64_t v11; // 0x416370\n    int64_t v12 = v11; // 0x4166e9\n    int64_t v13; // 0x416370\n    int64_t v14 = v13; // 0x4166e9\n    int32_t v15 = v10; // 0x4166e9\n    int64_t v16; // 0x416370\n    int64_t v17 = v16; // 0x4166e9\n    int64_t v18 = v11; // 0x4166e9\n    int64_t v19 = v13; // 0x4166e9\n    int64_t v20 = v16; // 0x4166e9\n    if (v10 == -1) {\n        // break -> 0x4166ef\n        goto lab_0x4166ef;\n    }\n    goto lab_0x416569;\n  lab_0x41655e:;\n    // 0x41655e\n    int64_t v90; // 0x416370\n    int64_t * v32; // 0x416550\n    *v32 = v90 + 1;\n    int64_t v89; // 0x416370\n    v12 = v89;\n    int64_t v91; // 0x416370\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x416370\n    v17 = v92;\n    goto lab_0x416569;\n  lab_0x416569:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x416370\n    int32_t v25; // bp-120, 0x416370\n    int32_t v26; // bp-184, 0x416370\n    int64_t v27; // 0x41651b\n    int64_t v28; // 0x416538\n    int64_t v29; // 0x41653d\n    int64_t * v30; // 0x416554\n    switch (c) {\n        case 32: {\n            goto lab_0x416550;\n        }\n        case 10: {\n            goto lab_0x416550;\n        }\n        case 9: {\n            goto lab_0x416550;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x416741\n            int32_t v33; // 0x416370\n            char v34; // 0x416370\n            int32_t v35; // 0x41674e\n            if (v31 < *v30) {\n                // 0x416720\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x41674b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x416741\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x416720\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x41674b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x416730\n                v36 = v33;\n            }\n            // 0x41681f\n            if (v36 == -1) {\n                // break -> 0x4166ef\n                break;\n            }\n            goto lab_0x416550;\n        }\n        default: {\n            // 0x41657f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4166ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4165a8\n            int64_t v39 = v37 + 4; // 0x4165aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4165b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4165b8\n            while (v41 == 0) {\n                // 0x4165a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4165d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4165e2\n            int64_t v45 = v43 + 4; // 0x4165e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4165f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4165f2\n            while (v47 == 0) {\n                // 0x4165e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4165df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x416608\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x416618\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x41661c\n            int64_t v52 = v51 + v48; // 0x416625\n            int64_t * mem; // 0x416370\n            int64_t v53; // 0x416370\n            int64_t v54; // 0x416370\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x41675b\n                int64_t v56 = v55 + 3; // 0x416767\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x416641\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x416650\n            if (mem == NULL) {\n                // 0x41687c\n                free((int64_t *)v21);\n                function_4073b0(v27, v53);\n                v24 = (int64_t)&g13;\n                goto lab_0x4164f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x416668\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x416672\n            uint32_t v62 = (int32_t)v59; // 0x416675\n            int64_t v63; // 0x416370\n            if (v62 >= 8) {\n                // 0x416784\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x41679e\n                int64_t v66 = v61 - v65; // 0x4167a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4167ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4167be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4167be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4167bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x41684f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x416687\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x41668b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x41669b\n            int64_t v74 = v60 - 1; // 0x41669f\n            uint32_t v75 = (int32_t)v73; // 0x4166a4\n            int64_t v76; // 0x416370\n            if (v75 >= 8) {\n                // 0x4167d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4167dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4167ec\n                int64_t v80 = v74 - v79; // 0x4167f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4167fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x41680b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x416809\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x416866\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41686e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4166b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4166ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4168b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4166ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x41655e;\n            } else {\n                goto lab_0x4166dc;\n            }\n        }\n    }\n  lab_0x416550:;\n    int64_t v93 = v23; // 0x416370\n    int64_t v94 = v22; // 0x416370\n    int64_t v95 = v21; // 0x416370\n    goto lab_0x416550_2;\n  lab_0x416495:;\n    int64_t * mem3 = malloc(size); // 0x416495\n    int64_t v97 = (int64_t)&g13; // 0x4164a0\n    int64_t v98; // 0x416370\n    int64_t path; // 0x416370\n    if (mem3 == NULL) {\n        goto lab_0x416472;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x416495\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4164b6;\n    }\n  lab_0x4163aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g13 : (int64_t)v1; // 0x41639d\n    char v100 = *v3; // 0x4163aa\n    int64_t v101; // 0x416370\n    if (v100 == 0) {\n        // 0x416404\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x416370\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x416370\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4163f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4163f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4163c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4163cd\n        char v107 = *(char *)v106; // 0x4163d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x416404\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4163db\n    v104 = v103 + 1;\n  lab_0x4163f7:\n    // 0x416404\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x416472:;\n    char * v108 = (char *)v97;\n    g78 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4163aa;\n  lab_0x4164b6:;\n    int64_t v109 = v98 + path; // 0x4164b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4164e2\n    v24 = (int64_t)&g13;\n    if (fd >= 0) {\n        // 0x416511\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x416842\n            close(fd);\n            v24 = (int64_t)&g13;\n        } else {\n            // 0x416535\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x416550_2:;\n                uint64_t v96 = *v32; // 0x416550\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4166dc;\n                } else {\n                    goto lab_0x41655e;\n                }\n            }\n          lab_0x4166ef:\n            // 0x4166ef\n            function_4073b0(v27, v19);\n            v24 = (int64_t)&g13;\n            if (v18 != 0) {\n                // 0x41670e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4164f4;\n  lab_0x41645b:;\n    int64_t * mem4 = malloc(size2); // 0x41645b\n    v97 = (int64_t)&g13;\n    if (mem4 != NULL) {\n        // 0x416501\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4164b6;\n    } else {\n        goto lab_0x416472;\n    }\n  lab_0x4164f4:\n    // 0x4164f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x416472;\n}\n"
        },
        {
            "funcName": "function_4168e0",
            "funcStartAddr": "4168e0",
            "funcEndAddr": "41693d",
            "decompiledFuncCode": "int64_t function_4168e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4168e0\n    return function_4019b0();\n}\n"
        },
        {
            "funcName": "function_416940",
            "funcStartAddr": "416940",
            "funcEndAddr": "416941",
            "decompiledFuncCode": "int64_t function_416940(void) {\n    // 0x416940\n    int64_t result; // 0x416940\n    return result;\n}\n"
        },
        {
            "funcName": "function_416950",
            "funcStartAddr": "416950",
            "funcEndAddr": "416968",
            "decompiledFuncCode": "int64_t function_416950(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x416950\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g23);\n}\n"
        },
        {
            "funcName": "function_416968",
            "funcStartAddr": "416968",
            "funcEndAddr": "416988",
            "decompiledFuncCode": "int64_t function_416968(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g19; // 0x416972\n    while (*(int64_t *)v1 != -1) {\n        // 0x416973\n        v1 -= 8;\n    }\n    // 0x416984\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_csplit.elf"
}