{
    "funcInfo": [
        {
            "funcName": "function_4016d0",
            "funcStartAddr": "4016d0",
            "funcEndAddr": "4016d5",
            "decompiledFuncCode": "int64_t function_4016d0(void) {\n    // 0x4016d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016d5",
            "funcStartAddr": "4016d5",
            "funcEndAddr": "4016da",
            "decompiledFuncCode": "int64_t function_4016d5(void) {\n    // 0x4016d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016da",
            "funcStartAddr": "4016da",
            "funcEndAddr": "4016df",
            "decompiledFuncCode": "int64_t function_4016da(void) {\n    // 0x4016da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016df",
            "funcStartAddr": "4016df",
            "funcEndAddr": "4016e4",
            "decompiledFuncCode": "int64_t function_4016df(void) {\n    // 0x4016df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e4",
            "funcStartAddr": "4016e4",
            "funcEndAddr": "4016e9",
            "decompiledFuncCode": "int64_t function_4016e4(void) {\n    // 0x4016e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e9",
            "funcStartAddr": "4016e9",
            "funcEndAddr": "4016ee",
            "decompiledFuncCode": "int64_t function_4016e9(void) {\n    // 0x4016e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016ee",
            "funcStartAddr": "4016ee",
            "funcEndAddr": "4016f3",
            "decompiledFuncCode": "int64_t function_4016ee(void) {\n    // 0x4016ee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016f3",
            "funcStartAddr": "4016f3",
            "funcEndAddr": "4016f8",
            "decompiledFuncCode": "int64_t function_4016f3(void) {\n    // 0x4016f3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401700",
            "funcStartAddr": "401700",
            "funcEndAddr": "401899",
            "decompiledFuncCode": "int64_t function_401700(int64_t a1, int64_t a2) {\n    // 0x401700\n    function_4032e0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g20 = 2;\n    int64_t v1; // 0x401700\n    function_408f30(0x4031f0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    g32 = a2;\n    uint32_t v2 = (int32_t)a1; // 0x401756\n    int64_t v3; // 0x401700\n    char * v4; // 0x401861\n    if (v2 == 2) {\n        char * str = (char *)*(int64_t *)(a2 + 8); // 0x4017c7\n        if (strcmp(str, \"--help\") == 0) {\n            // 0x401892\n            function_402e30(0);\n            // UNREACHABLE\n        }\n        // 0x4017d4\n        if (strcmp(str, \"--version\") == 0) {\n            // 0x401813\n            function_4056b0((int64_t)g27, &g4, \"GNU coreutils\", (int64_t)g19, \"Kevin Braunsdorf\", \"Matthew Bradburn\");\n            // 0x4017b2\n            return 0;\n        }\n        // 0x4017e7\n        if (strcmp(str, \"]\") == 0) {\n            // 0x4017f8\n            g34 = 1;\n            *(int32_t *)&g35 = 1;\n            // 0x4017b2\n            return 1;\n        }\n    } else {\n        if (v2 >= 2) {\n            // 0x401764\n            if (strcmp((char *)*(int64_t *)(a2 - 8 + (0x100000000 * a1 >> 29)), \"]\") == 0) {\n                // 0x40177e\n                *(int32_t *)&g35 = 1;\n                g34 = v2 - 1;\n                uint64_t v5 = function_402790(a1 + 0xfffffffe & 0xffffffff); // 0x401794\n                int32_t v6 = *(int32_t *)&g35; // 0x401799\n                if (v6 == g34) {\n                    // 0x4017b2\n                    return v5 % 256 ^ 1;\n                }\n                int64_t v7 = *(int64_t *)(g32 + 8 * (int64_t)v6); // 0x40187a\n                // 0x40185f\n                v3 = function_404f00((int64_t *)v7);\n                v4 = dcgettext(NULL, (char *)(int64_t)\"extra argument %s\", 5);\n                function_401b10((int64_t)v4, v3, 5, v1, v1, v1);\n                // UNREACHABLE\n            }\n        }\n    }\n    // 0x40185f\n    v3 = function_404f00((int64_t *)\"]\");\n    v4 = dcgettext(NULL, (char *)(int64_t)\"missing %s\", 5);\n    function_401b10((int64_t)v4, v3, 5, v1, v1, v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4018a0",
            "funcEndAddr": "4018cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4018a0\n    int64_t v1; // 0x4018a0\n    __libc_start_main(0x401700, (int32_t)a4, (char **)&v1, (void (*)())0x408ec0, (void (*)())0x408f20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018cb",
            "funcStartAddr": "4018cb",
            "funcEndAddr": "4018ea",
            "decompiledFuncCode": "int64_t function_4018cb(void) {\n    // 0x4018cb\n    return 0x60d258;\n}\n"
        },
        {
            "funcName": "function_4018ea",
            "funcStartAddr": "4018ea",
            "funcEndAddr": "401921",
            "decompiledFuncCode": "int64_t function_4018ea(void) {\n    // 0x4018ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401921",
            "funcStartAddr": "401921",
            "funcEndAddr": "401978",
            "decompiledFuncCode": "int64_t function_401921(void) {\n    // 0x401921\n    if (g30 != 0) {\n        // 0x401977\n        int64_t result; // 0x401921\n        return result;\n    }\n    int64_t v1 = g31; // 0x401954\n    int64_t result2; // 0x401966\n    if (g31 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401966\n        result2 = function_4018cb();\n        g30 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401956\n        v1++;\n    }\n    // 0x40194a\n    g31 = v1;\n    // 0x401966\n    result2 = function_4018cb();\n    g30 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401978",
            "funcStartAddr": "401978",
            "funcEndAddr": "40197d",
            "decompiledFuncCode": "int64_t function_401978(void) {\n    // 0x401978\n    return function_4018ea();\n}\n"
        },
        {
            "funcName": "function_401980",
            "funcStartAddr": "401980",
            "funcEndAddr": "401ac8",
            "decompiledFuncCode": "int64_t function_401980(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x401980\n    bool v1; // 0x401980\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = (int64_t)&g1; // 0x401980\n    int64_t v4 = a1; // 0x401980\n    int64_t v5 = 2; // 0x401996\n    unsigned char v6 = *(char *)v4; // 0x401996\n    char v7 = *(char *)v3; // 0x401996\n    char v8 = v7; // 0x401996\n    bool v9 = false; // 0x401996\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    int64_t v11 = (int64_t)\"!=\"; // 0x4019a0\n    int64_t v12 = a1; // 0x4019a0\n    if ((v6 >= v10 && !v9) == v6 < v10) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v13 = 3; // 0x4019a0\n    unsigned char v14 = *(char *)v12; // 0x4019af\n    char v15 = *(char *)v11; // 0x4019af\n    char v16 = v15; // 0x4019af\n    bool v17 = false; // 0x4019af\n    while (v14 == v15) {\n        // 0x4019a2\n        v13--;\n        v11 += v2;\n        v12 += v2;\n        v16 = v14;\n        v17 = true;\n        if (v13 == 0) {\n            // break -> \n            break;\n        }\n        v14 = *(char *)v12;\n        v15 = *(char *)v11;\n        v16 = v15;\n        v17 = false;\n    }\n    unsigned char v18 = v16;\n    int64_t v19 = (int64_t)\"==\"; // 0x4019b9\n    int64_t v20 = a1; // 0x4019b9\n    if ((v14 >= v18 && !v17) == v14 < v18) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v21 = 3; // 0x4019b9\n    unsigned char v22 = *(char *)v20; // 0x4019cd\n    char v23 = *(char *)v19; // 0x4019cd\n    char v24 = v23; // 0x4019cd\n    bool v25 = false; // 0x4019cd\n    while (v22 == v23) {\n        // 0x4019c0\n        v21--;\n        v19 += v2;\n        v20 += v2;\n        v24 = v22;\n        v25 = true;\n        if (v21 == 0) {\n            // break -> \n            break;\n        }\n        v22 = *(char *)v20;\n        v23 = *(char *)v19;\n        v24 = v23;\n        v25 = false;\n    }\n    unsigned char v26 = v24;\n    int64_t v27 = (int64_t)\"-nt\"; // 0x4019d7\n    int64_t v28 = a1; // 0x4019d7\n    if ((v22 >= v26 && !v25) == v22 < v26) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v29 = 4; // 0x4019d7\n    unsigned char v30 = *(char *)v28; // 0x4019e6\n    char v31 = *(char *)v27; // 0x4019e6\n    char v32 = v31; // 0x4019e6\n    bool v33 = false; // 0x4019e6\n    while (v30 == v31) {\n        // 0x4019d9\n        v29--;\n        v27 += v2;\n        v28 += v2;\n        v32 = v30;\n        v33 = true;\n        if (v29 == 0) {\n            // break -> \n            break;\n        }\n        v30 = *(char *)v28;\n        v31 = *(char *)v27;\n        v32 = v31;\n        v33 = false;\n    }\n    unsigned char v34 = v32;\n    int64_t v35 = (int64_t)\"-ot\"; // 0x4019f0\n    int64_t v36 = a1; // 0x4019f0\n    if ((v30 >= v34 && !v33) == v30 < v34) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v37 = 4; // 0x4019f0\n    unsigned char v38 = *(char *)v36; // 0x4019ff\n    char v39 = *(char *)v35; // 0x4019ff\n    char v40 = v39; // 0x4019ff\n    bool v41 = false; // 0x4019ff\n    while (v38 == v39) {\n        // 0x4019f2\n        v37--;\n        v35 += v2;\n        v36 += v2;\n        v40 = v38;\n        v41 = true;\n        if (v37 == 0) {\n            // break -> \n            break;\n        }\n        v38 = *(char *)v36;\n        v39 = *(char *)v35;\n        v40 = v39;\n        v41 = false;\n    }\n    unsigned char v42 = v40;\n    int64_t v43 = (int64_t)\"-ef\"; // 0x401a09\n    int64_t v44 = a1; // 0x401a09\n    if ((v38 >= v42 && !v41) == v38 < v42) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v45 = 4; // 0x401a09\n    unsigned char v46 = *(char *)v44; // 0x401a18\n    char v47 = *(char *)v43; // 0x401a18\n    char v48 = v47; // 0x401a18\n    bool v49 = false; // 0x401a18\n    while (v46 == v47) {\n        // 0x401a0b\n        v45--;\n        v43 += v2;\n        v44 += v2;\n        v48 = v46;\n        v49 = true;\n        if (v45 == 0) {\n            // break -> \n            break;\n        }\n        v46 = *(char *)v44;\n        v47 = *(char *)v43;\n        v48 = v47;\n        v49 = false;\n    }\n    unsigned char v50 = v48;\n    int64_t v51 = (int64_t)\"-eq\"; // 0x401a22\n    int64_t v52 = a1; // 0x401a22\n    if ((v46 >= v50 && !v49) == v46 < v50) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v53 = 4; // 0x401a22\n    unsigned char v54 = *(char *)v52; // 0x401a31\n    char v55 = *(char *)v51; // 0x401a31\n    char v56 = v55; // 0x401a31\n    bool v57 = false; // 0x401a31\n    while (v54 == v55) {\n        // 0x401a24\n        v53--;\n        v51 += v2;\n        v52 += v2;\n        v56 = v54;\n        v57 = true;\n        if (v53 == 0) {\n            // break -> \n            break;\n        }\n        v54 = *(char *)v52;\n        v55 = *(char *)v51;\n        v56 = v55;\n        v57 = false;\n    }\n    unsigned char v58 = v56;\n    int64_t v59 = (int64_t)\"-ne\"; // 0x401a3b\n    int64_t v60 = a1; // 0x401a3b\n    if ((v54 >= v58 && !v57) == v54 < v58) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v61 = 4; // 0x401a3b\n    unsigned char v62 = *(char *)v60; // 0x401a4e\n    char v63 = *(char *)v59; // 0x401a4e\n    char v64 = v63; // 0x401a4e\n    bool v65 = false; // 0x401a4e\n    while (v62 == v63) {\n        // 0x401a41\n        v61--;\n        v59 += v2;\n        v60 += v2;\n        v64 = v62;\n        v65 = true;\n        if (v61 == 0) {\n            // break -> \n            break;\n        }\n        v62 = *(char *)v60;\n        v63 = *(char *)v59;\n        v64 = v63;\n        v65 = false;\n    }\n    unsigned char v66 = v64;\n    int64_t v67 = (int64_t)\"-lt\"; // 0x401a58\n    int64_t v68 = a1; // 0x401a58\n    if ((v62 >= v66 && !v65) == v62 < v66) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v69 = 4; // 0x401a58\n    unsigned char v70 = *(char *)v68; // 0x401a6b\n    char v71 = *(char *)v67; // 0x401a6b\n    char v72 = v71; // 0x401a6b\n    bool v73 = false; // 0x401a6b\n    while (v70 == v71) {\n        // 0x401a5e\n        v69--;\n        v67 += v2;\n        v68 += v2;\n        v72 = v70;\n        v73 = true;\n        if (v69 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v68;\n        v71 = *(char *)v67;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v74 = v72;\n    int64_t v75 = (int64_t)\"-le\"; // 0x401a75\n    int64_t v76 = a1; // 0x401a75\n    if ((v70 >= v74 && !v73) == v70 < v74) {\n        // 0x4019bb\n        return 1;\n    }\n    int64_t v77 = 4; // 0x401a75\n    unsigned char v78 = *(char *)v76; // 0x401a88\n    char v79 = *(char *)v75; // 0x401a88\n    char v80 = v79; // 0x401a88\n    bool v81 = false; // 0x401a88\n    while (v78 == v79) {\n        // 0x401a7b\n        v77--;\n        v75 += v2;\n        v76 += v2;\n        v80 = v78;\n        v81 = true;\n        if (v77 == 0) {\n            // break -> \n            break;\n        }\n        v78 = *(char *)v76;\n        v79 = *(char *)v75;\n        v80 = v79;\n        v81 = false;\n    }\n    unsigned char v82 = v80;\n    if ((v78 >= v82 && !v81) == v78 < v82) {\n        // 0x4019bb\n        return 1;\n    }\n    char * str = (char *)a1; // 0x401aa0\n    if (strcmp(str, \"-gt\") == 0) {\n        // 0x4019bb\n        return 1;\n    }\n    int32_t strcmp_rc = strcmp(str, \"-ge\"); // 0x401abc\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_401ad0",
            "funcStartAddr": "401ad0",
            "funcEndAddr": "401b0c",
            "decompiledFuncCode": "int64_t function_401ad0(int64_t a1, int64_t * a2) {\n    // 0x401ad0\n    int64_t v1; // bp-152, 0x401ad0\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x401ae6\n    if (v2 == 0) {\n        // branch -> 0x401b03\n    }\n    // 0x401b03\n    return (int64_t)(v2 & -256) | (int64_t)(v2 == 0);\n}\n"
        },
        {
            "funcName": "function_401b10",
            "funcStartAddr": "401b10",
            "funcEndAddr": "401bad",
            "decompiledFuncCode": "int64_t function_401b10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x401b10\n    int64_t v1; // 0x401b10\n    if ((char)v1 != 0) {\n        // 0x401b34\n        int128_t v2; // 0x401b10\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 8; // bp-208, 0x401b89\n    function_405240(0, 0, a1, &v3);\n    exit(2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401c82",
            "decompiledFuncCode": "int64_t function_401bb0(int64_t a1) {\n    int64_t v1 = (int64_t)*__ctype_b_loc(); // 0x401bb9\n    int64_t v2 = a1;\n    unsigned char v3 = *(char *)v2; // 0x401bbf\n    int64_t v4 = v2 + 1;\n    while (*(char *)(2 * (int64_t)v3 + v1) % 2 != 0) {\n        // 0x401bbf\n        v2 = v4;\n        v3 = *(char *)v2;\n        v4 = v2 + 1;\n    }\n    int64_t v5 = v3 == 43 ? v4 : v2 + (int64_t)(v3 == 45);\n    char v6 = *(char *)v5; // 0x401bdc\n    int64_t v7; // 0x401c5c\n    char * v8; // 0x401c70\n    int64_t v9; // 0x401bb0\n    if (v6 != 57 && (int32_t)v6 >= 57) {\n        // 0x401c59\n        v7 = function_404f00((int64_t *)a1);\n        v8 = dcgettext(NULL, \"invalid integer %s\", 5);\n        function_401b10((int64_t)v8, v7, 5, v5, v1, v9);\n        // UNREACHABLE\n    }\n    int64_t v10 = v5 + 1; // 0x401bdf\n    char v11 = *(char *)v10; // 0x401beb\n    int64_t v12 = v10; // 0x401bf7\n    char v13 = v11; // 0x401bf7\n    int64_t v14 = v10; // 0x401bf7\n    if (v11 == 57 || (int32_t)v11 < 57) {\n        v12++;\n        char v15 = *(char *)v12; // 0x401c04\n        v13 = v15;\n        v14 = v12;\n        while (v15 == 57 || (int32_t)v15 < 57) {\n            // 0x401c00\n            v12++;\n            v15 = *(char *)v12;\n            v13 = v15;\n            v14 = v12;\n        }\n    }\n    int64_t v16 = (int64_t)v13 & 0xffffffff;\n    int64_t v17 = v14; // 0x401c19\n    int64_t v18 = v16; // 0x401c19\n    if (*(char *)((2 * v16 & 510) + v1) % 2 != 0) {\n        v17++;\n        int64_t v19 = (int64_t)*(char *)v17; // 0x401c24\n        v18 = v19;\n        while (*(char *)(2 * v19 + v1) % 2 != 0) {\n            // 0x401c20\n            v17++;\n            v19 = (int64_t)*(char *)v17;\n            v18 = v19;\n        }\n    }\n    // 0x401c31\n    if ((char)v18 == 0) {\n        // 0x401c35\n        return v3 == 43 ? v4 : v2;\n    }\n    // 0x401c59\n    v7 = function_404f00((int64_t *)a1);\n    v8 = dcgettext(NULL, \"invalid integer %s\", 5);\n    function_401b10((int64_t)v8, v7, 5, v18, v1, v9);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c90",
            "funcStartAddr": "401c90",
            "funcEndAddr": "401cca",
            "decompiledFuncCode": "int64_t function_401c90(void) {\n    int64_t v1 = *(int64_t *)(g32 - 8 + 8 * (int64_t)g34); // 0x401c9f\n    int64_t v2 = function_404f00((int64_t *)v1); // 0x401ca4\n    int64_t v3; // 0x401c90\n    function_401b10((int64_t)dcgettext(NULL, \"missing argument after %s\", 5), v2, 5, v3, v3, v3);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cd0",
            "funcStartAddr": "401cd0",
            "funcEndAddr": "402209",
            "decompiledFuncCode": "int64_t function_401cd0(int64_t a1, int64_t a2) {\n    // 0x401cd0\n    int64_t v1; // 0x401cd0\n    int64_t v2 = v1;\n    *(int32_t *)&g35 = (int32_t)&g36;\n    if (g34 > (int32_t)&g36) {\n        // 0x401ce7\n        *(int32_t *)&g35 = (int32_t)&g37;\n        return &g37;\n    }\n    int64_t v3 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36); // 0x401d17\n    char v4 = *(char *)(v3 + 1); // 0x401d1b\n    g47 = v4 - 71;\n    int64_t v5; // 0x401cd0\n    int64_t v6; // bp-176, 0x401cd0\n    int32_t v7; // 0x401cd0\n    switch (v4) {\n        case 71: {\n            int64_t v8 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x4021b4\n            if (__xstat(1, (char *)v8, (struct stat *)&v6) != 0) {\n                // 0x401d32\n                return 0;\n            }\n            int32_t * v9 = __errno_location(); // 0x4021c6\n            *v9 = 0;\n            int32_t v10 = getegid(); // 0x4021d4\n            if (v10 != -1) {\n                // 0x401d32\n                return ((int64_t)&v6 & -256 | (int64_t)(v7 == v10)) & 0xffffffff;\n            }\n            // 0x4021fb\n            if (*v9 != 0) {\n                // 0x401d32\n                return 0;\n            }\n            // 0x401d32\n            return (int64_t)(v7 == v10) & 0xffffffff;\n        }\n        case 76: {\n        }\n        case 104: {\n            int64_t v11 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x402174\n            int32_t v12 = __lxstat(1, (char *)v11, (struct stat *)&v6); // 0x402179\n            v5 = 0;\n            if (v12 == 0) {\n                // 0x402188\n                v5 = (v7 & 0xf000) == 0xa000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 79: {\n            int64_t v13 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x402124\n            if (__xstat(1, (char *)v13, (struct stat *)&v6) != 0) {\n                // 0x401d32\n                return 0;\n            }\n            int32_t * v14 = __errno_location(); // 0x402136\n            *v14 = 0;\n            int32_t v15 = geteuid(); // 0x402144\n            if (v15 != -1) {\n                // 0x401d32\n                return ((int64_t)&v6 & -256 | (int64_t)(v7 == v15)) & 0xffffffff;\n            }\n            // 0x4021ea\n            if (*v14 != 0) {\n                // 0x401d32\n                return 0;\n            }\n            // 0x401d32\n            return (int64_t)(v7 == v15) & 0xffffffff;\n        }\n        case 83: {\n            int64_t v16 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x4020e4\n            int32_t v17 = __xstat(1, (char *)v16, (struct stat *)&v6); // 0x4020e9\n            v5 = 0;\n            if (v17 == 0) {\n                // 0x4020f8\n                v5 = (v7 & 0xf000) == 0xc000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 97: {\n        }\n        case 101: {\n            int64_t v18 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x4020b4\n            int32_t v19 = __xstat(1, (char *)v18, (struct stat *)&v6); // 0x4020b9\n            // 0x401d32\n            return ((int64_t)&v6 & -256 | (int64_t)(v19 == 0)) & 0xffffffff;\n        }\n        case 98: {\n            int64_t v20 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x402074\n            int32_t v21 = __xstat(1, (char *)v20, (struct stat *)&v6); // 0x402079\n            v5 = 0;\n            if (v21 == 0) {\n                // 0x402088\n                v5 = (v7 & 0xf000) == 0x6000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 99: {\n            int64_t v22 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x402034\n            int32_t v23 = __xstat(1, (char *)v22, (struct stat *)&v6); // 0x402039\n            v5 = 0;\n            if (v23 == 0) {\n                // 0x402048\n                v5 = (v7 & 0xf000) == 0x2000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 100: {\n            int64_t v24 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401ff4\n            int32_t v25 = __xstat(1, (char *)v24, (struct stat *)&v6); // 0x401ff9\n            v5 = 0;\n            if (v25 == 0) {\n                // 0x402008\n                v5 = (v7 & 0xf000) == 0x4000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 102: {\n            int64_t v26 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401fb4\n            int32_t v27 = __xstat(1, (char *)v26, (struct stat *)&v6); // 0x401fb9\n            v5 = 0;\n            if (v27 == 0) {\n                // 0x401fc8\n                v5 = (v7 & 0xf000) == 0x8000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 103: {\n            int64_t v28 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401f74\n            int32_t v29 = __xstat(1, (char *)v28, (struct stat *)&v6); // 0x401f79\n            v5 = 0;\n            if (v29 == 0) {\n                // 0x401f88\n                v5 = v7 / 1024 % 2;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 107: {\n            int64_t v30 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401f34\n            int32_t v31 = __xstat(1, (char *)v30, (struct stat *)&v6); // 0x401f39\n            v5 = 0;\n            if (v31 == 0) {\n                // 0x401f48\n                v5 = v7 / 512 % 2;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 110: {\n            int64_t v32 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401f0c\n            char v33 = *(char *)v32; // 0x401f11\n            // 0x401d32\n            return ((int64_t)(v33 != 0) | (int64_t)&g36 & -256) & 0xffffffff;\n        }\n        case 112: {\n            int64_t v34 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401ecc\n            int32_t v35 = __xstat(1, (char *)v34, (struct stat *)&v6); // 0x401ed1\n            v5 = 0;\n            if (v35 == 0) {\n                // 0x401ee0\n                v5 = (v7 & 0xf000) == 0x1000;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 114: {\n            int64_t v36 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401ea1\n            int32_t v37 = euidaccess((char *)v36, 4); // 0x401ea6\n            // 0x401d32\n            return ((int64_t)(v37 == 0) | (int64_t)&g36 & -256) & 0xffffffff;\n        }\n        case 115: {\n            int64_t v38 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401e64\n            int32_t v39 = __xstat(1, (char *)v38, (struct stat *)&v6); // 0x401e69\n            v5 = 0;\n            if (v39 == 0) {\n                // 0x401e78\n                v5 = v2 >= 0 == (v2 != 0);\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 116: {\n            int32_t * v40 = __errno_location(); // 0x401e09\n            *v40 = 0;\n            int32_t str_as_l = strtol((char *)(int64_t)(int32_t)&g36, NULL, 10); // 0x401e21\n            v5 = 0;\n            if (str_as_l > -1 == (*v40 != 34)) {\n                // 0x401e3d\n                v5 = isatty(str_as_l) != 0;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 117: {\n            int64_t v41 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401dc4\n            int32_t v42 = __xstat(1, (char *)v41, (struct stat *)&v6); // 0x401dc9\n            v5 = 0;\n            if (v42 == 0) {\n                // 0x401dd8\n                v5 = v7 / 2048 % 2;\n            }\n            // 0x401d32\n            return v5 & 0xffffffff;\n        }\n        case 119: {\n            int64_t v43 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401d99\n            int32_t v44 = euidaccess((char *)v43, 2); // 0x401d9e\n            // 0x401d32\n            return ((int64_t)(v44 == 0) | (int64_t)&g36 & -256) & 0xffffffff;\n        }\n        case 120: {\n            int64_t v45 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401d71\n            int32_t v46 = euidaccess((char *)v45, 1); // 0x401d76\n            // 0x401d32\n            return ((int64_t)(v46 == 0) | (int64_t)&g36 & -256) & 0xffffffff;\n        }\n        case 122: {\n            int64_t v47 = *(int64_t *)(g32 + 8 * (int64_t)(int32_t)&g36 - 8); // 0x401d4c\n            char v48 = *(char *)v47; // 0x401d51\n            // 0x401d32\n            return ((int64_t)(v48 == 0) | (int64_t)&g36 & -256) & 0xffffffff;\n        }\n    }\n    // 0x401d32\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402210",
            "funcStartAddr": "402210",
            "funcEndAddr": "4026b4",
            "decompiledFuncCode": "int64_t function_402210(uint32_t a1) {\n    int64_t v1 = &g36; // 0x40222d\n    if ((char)a1 != 0) {\n        // 0x40222f\n        *(int32_t *)&g35 = (int32_t)&g36;\n        v1 = &g37;\n    }\n    int64_t v2 = 0x100000000 * v1 >> 29;\n    int64_t v3 = v2 + g32;\n    int64_t v4 = &g33; // 0x40224f\n    int64_t v5 = 0; // 0x40224f\n    bool v6; // 0x402210\n    if (v1 < (int64_t)&g33) {\n        int64_t v7 = v6 ? -1 : 1; // 0x402260\n        int64_t v8 = (int64_t)\"-l\"; // 0x402210\n        int64_t v9 = *(int64_t *)(v3 + 8); // 0x402210\n        unsigned char v10 = *(char *)v9; // 0x402260\n        char v11 = *(char *)v8; // 0x402260\n        int64_t v12 = 2; // 0x402260\n        char v13 = v11; // 0x402260\n        bool v14 = false; // 0x402260\n        while (v10 == v11) {\n            v8 += v7;\n            v9 += v7;\n            v13 = v10;\n            v14 = true;\n            if (v12 == 0) {\n                // break -> \n                break;\n            }\n            v10 = *(char *)v9;\n            v11 = *(char *)v8;\n            v12--;\n            v13 = v11;\n            v14 = false;\n        }\n        unsigned char v15 = v13;\n        uint64_t v16 = (int64_t)!((v10 < v15 | v14)) - (int64_t)(v10 < v15); // 0x402265\n        int64_t v17 = v16 % 256 | v12 & -256; // 0x402265\n        v4 = v17;\n        v5 = 0;\n        if ((char)v16 == 0) {\n            // 0x4022e0\n            *(int32_t *)&g35 = (int32_t)v1;\n            v4 = v17;\n            v5 = 1;\n        }\n    }\n    int64_t v18 = *(int64_t *)v3; // 0x40226c\n    unsigned char v19 = *(char *)v18; // 0x402278\n    bool v20; // 0x402210\n    int64_t v21; // 0x402210\n    char v22; // 0x402338\n    bool v23; // 0x402210\n    switch (v19) {\n        case 45: {\n            // 0x402338\n            v22 = *(char *)(v18 + 1);\n            v21 = v4;\n            switch (v22) {\n                case 108: {\n                    goto lab_0x402498;\n                }\n                case 103: {\n                    goto lab_0x402498;\n                }\n                default: {\n                    goto lab_0x40234e;\n                }\n            }\n        }\n        case 61: {\n            char v24 = *(char *)(v18 + 1); // 0x4022f0\n            if (v24 == 0) {\n                goto lab_0x402308;\n            } else {\n                // 0x4022f8\n                v20 = false;\n                v23 = false;\n                if (v24 != 61) {\n                    goto lab___crit_edge21;\n                } else {\n                    // 0x4022fc\n                    v20 = false;\n                    v23 = false;\n                    if (*(char *)(v18 + 2) != 0) {\n                        goto lab___crit_edge21;\n                    } else {\n                        goto lab_0x402308;\n                    }\n                }\n            }\n        }\n        default: {\n            int64_t v25 = v6 ? -1 : 1; // 0x402293\n            int64_t v26 = 2; // 0x402293\n            int64_t v27 = v18; // 0x402293\n            int64_t v28 = (int64_t)\"!=\"; // 0x402293\n            v20 = v19 < 33;\n            v23 = false;\n            if (v19 == 33) {\n                v20 = v19 < 33;\n                v23 = true;\n                while (v26 != 0) {\n                    int64_t v29 = v27 + v25; // 0x402293\n                    int64_t v30 = v28 + v25; // 0x402293\n                    unsigned char v31 = *(char *)v29;\n                    unsigned char v32 = *(char *)v30; // 0x402293\n                    v26--;\n                    v27 = v29;\n                    v28 = v30;\n                    v20 = v31 < v32;\n                    v23 = false;\n                    if (v31 != v32) {\n                        // break -> ._crit_edge21\n                        break;\n                    }\n                    v20 = v31 < v32;\n                    v23 = true;\n                }\n            }\n            goto lab___crit_edge21;\n        }\n    }\n  lab___crit_edge21:;\n    bool v33 = v20;\n    if ((!v33 && !v23) != v33) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t str2 = *(int64_t *)(g32 + 8 * (int64_t)&g37); // 0x4022b0\n    int64_t str = *(int64_t *)(g32 + 8 * (int64_t)&g37 - 16); // 0x4022b4\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x4022b9\n    *(int32_t *)&g35 = (int32_t)&g38;\n    // 0x4022cd\n    return (int64_t)(strcmp_rc != 0) & 0xffffffff;\n  lab_0x402498:;\n    unsigned char v34 = *(char *)(v18 + 2); // 0x402498\n    int64_t v35 = v34; // 0x402498\n    v21 = v35;\n    int64_t v36; // 0x402210\n    int64_t v37; // 0x40255c\n    char * v38; // 0x402570\n    if (v34 != 101 == (v34 != 116)) {\n        goto lab_0x40234e;\n    } else {\n        // 0x4024aa\n        if (*(char *)(v18 + 3) != 0) {\n            // 0x402559\n            v37 = function_404f00((int64_t *)v18);\n            v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n            function_401b10((int64_t)v38, v37, 5, v35, v36, v36);\n            // UNREACHABLE\n        }\n        goto lab_0x40259b;\n    }\n  lab_0x40234e:;\n    uint64_t v39 = (int64_t)a1; // 0x402212\n    int64_t v40; // 0x402210\n    int64_t v41; // 0x402210\n    char v42; // 0x402210\n    int64_t v43; // bp-184, 0x402210\n    int64_t v44; // bp-328, 0x402210\n    char * v45; // 0x40268b\n    switch (v22) {\n        case 101: {\n            char v46 = *(char *)(v18 + 2); // 0x402400\n            v42 = v46;\n            v41 = v21;\n            if (v46 == 113) {\n                goto lab_0x402595;\n            } else {\n                goto lab_0x40240d;\n            }\n        }\n        case 110: {\n            unsigned char v47 = *(char *)(v18 + 2); // 0x402588\n            int64_t v48 = v47; // 0x402588\n            v41 = v48;\n            if (v47 != 101) {\n                // 0x4024bd\n                if (v47 != 116 || *(char *)(v18 + 3) != 0) {\n                    // 0x402559\n                    v37 = function_404f00((int64_t *)v18);\n                    v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n                    function_401b10((int64_t)v38, v37, 5, v48, v36, v36);\n                    // UNREACHABLE\n                }\n                // 0x4024d0\n                *(int32_t *)&g35 = (int32_t)&g38;\n                if ((char)(v5 || v39) != 0) {\n                    // 0x402689\n                    v45 = dcgettext(NULL, (char *)(int64_t)\"-nt does not accept -l\", 5);\n                    function_401b10((int64_t)v45, 0, 5, v48, v36, v36);\n                    // UNREACHABLE\n                }\n                int64_t v49 = function_401ad0(*(int64_t *)(v3 - 8), &v44); // 0x4024e8\n                int64_t v50 = function_401ad0(*(int64_t *)(v3 + 8), &v43); // 0x4024fc\n                if ((char)v49 == 0 || (char)v50 == 0) {\n                    // 0x4022cd\n                    return v49 & 0xffffffff & 0xffffffff;\n                }\n                // 0x402512\n                if (v43 > v44) {\n                    // 0x4022cd\n                    return 0;\n                }\n                // 0x402531\n                v40 = v50 & 0xffffffff;\n                if (v43 >= v44) {\n                    int32_t v51 = 0; // 0x402539\n                    v40 = v50 & 0xffffff00 | (int64_t)(v51 >= 0 == (v51 != 0));\n                }\n                // 0x4022cd\n                return v40 & 0xffffffff;\n            }\n            goto lab_0x402595;\n        }\n        default: {\n            if (v22 == 111) {\n                // 0x402369\n                if (*(char *)(v18 + 2) != 116 || *(char *)(v18 + 3) != 0) {\n                    // 0x402559\n                    v37 = function_404f00((int64_t *)v18);\n                    v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n                    function_401b10((int64_t)v38, v37, 5, v21, v36, v36);\n                    // UNREACHABLE\n                }\n                // 0x40237d\n                *(int32_t *)&g35 = (int32_t)&g38;\n                int64_t v52 = v5 | v39;\n                if ((char)v52 != 0) {\n                    // 0x402689\n                    v45 = dcgettext(NULL, (char *)(int64_t)\"-ot does not accept -l\", 5);\n                    function_401b10((int64_t)v45, 0, 5, v21, v36, v36);\n                    // UNREACHABLE\n                }\n                int64_t v53 = function_401ad0(*(int64_t *)(v3 - 8), &v44); // 0x402396\n                int64_t v54 = function_401ad0(*(int64_t *)(v3 + 8), &v43); // 0x4023ab\n                if ((char)v53 == 0 || (char)v54 == 0) {\n                    // 0x4022cd\n                    return v54 & 0xffffffff & 0xffffffff;\n                }\n                uint64_t v55 = v44; // 0x4023c3\n                v40 = v53 & 0xffffffff;\n                if (v55 >= v43) {\n                    int64_t v56 = v55 - v43; // 0x4023ea\n                    uint32_t v57 = v56 < 0 == ((v56 ^ v55) & (v43 ^ v55)) < 0 == (v56 != 0) ? (int32_t)v52 % 256 : (int32_t)false; // 0x4023ef\n                    v40 = v57;\n                }\n                // 0x4022cd\n                return v40 & 0xffffffff;\n            }\n            // 0x402550\n            if (v22 != 101) {\n                // 0x402559\n                v37 = function_404f00((int64_t *)v18);\n                v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n                function_401b10((int64_t)v38, v37, 5, v21, v36, v36);\n                // UNREACHABLE\n            }\n            // 0x402640\n            v42 = *(char *)(v18 + 2);\n            goto lab_0x40240d;\n        }\n    }\n  lab_0x402308:;\n    int64_t str4 = *(int64_t *)(g32 + 8 * (int64_t)&g37); // 0x402316\n    int64_t str3 = *(int64_t *)(g32 + 8 * (int64_t)&g37 - 16); // 0x40231a\n    int32_t strcmp_rc2 = strcmp((char *)str3, (char *)str4); // 0x40231f\n    *(int32_t *)&g35 = (int32_t)&g38;\n    // 0x4022cd\n    return (int64_t)(strcmp_rc2 == 0) & 0xffffffff;\n  lab_0x40240d:\n    // 0x40240d\n    if (v42 != 102 || *(char *)(v18 + 3) != 0) {\n        // 0x402559\n        v37 = function_404f00((int64_t *)v18);\n        v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n        function_401b10((int64_t)v38, v37, 5, v21, v36, v36);\n        // UNREACHABLE\n    }\n    // 0x402420\n    *(int32_t *)&g35 = (int32_t)&g38;\n    if ((char)(v5 || v39) != 0) {\n        // 0x402689\n        v45 = dcgettext(NULL, (char *)(int64_t)\"-ef does not accept -l\", 5);\n        function_401b10((int64_t)v45, 0, 5, v21, v36, v36);\n        // UNREACHABLE\n    }\n    int64_t v58 = v5 | v39 % 256; // 0x402427\n    int64_t v59 = *(int64_t *)(v3 - 8); // 0x402430\n    if (__xstat(1, (char *)v59, (struct stat *)&v44) != 0) {\n        // 0x4022cd\n        return v58 & 0xffffffff;\n    }\n    int32_t v60 = __xstat(1, (char *)*(int64_t *)(v3 + 8), (struct stat *)&v43); // 0x40245c\n    if (v60 != 0) {\n        // 0x4022cd\n        return v58 & 0xffffffff;\n    }\n    // 0x402469\n    v40 = v58;\n    if (v44 == v43) {\n        // 0x40247b\n        v40 = true;\n    }\n    // 0x4022cd\n    return v40 & 0xffffffff;\n  lab_0x402595:\n    // 0x402595\n    if (*(char *)(v18 + 3) != 0) {\n        // 0x402559\n        v37 = function_404f00((int64_t *)v18);\n        v38 = dcgettext(NULL, \"%s: unknown binary operator\", 5);\n        function_401b10((int64_t)v38, v37, 5, v41, v36, v36);\n        // UNREACHABLE\n    }\n    goto lab_0x40259b;\n  lab_0x40259b:\n    if ((char)a1 != 0) {\n        int64_t str5 = *(int64_t *)(v3 - 8); // 0x40259b\n        int32_t len = strlen((char *)str5); // 0x4025a4\n        function_403290((int64_t)len, &v44);\n    }\n    if (v5 != 0) {\n        int32_t len2 = strlen((char *)*(int64_t *)(v2 + 16 + g32)); // 0x4025c8\n        function_403290((int64_t)len2, &v43);\n    }\n    int64_t v61 = function_404f20(); // 0x4025e3\n    int64_t v62 = *(int64_t *)(g32 + v2); // 0x4025ef\n    char v63 = *(char *)(v62 + 2); // 0x4025f3\n    *(int32_t *)&g35 = (int32_t)&g38;\n    switch (*(char *)(v62 + 1)) {\n        case 108: {\n            int32_t v64 = v61; // 0x402653\n            int32_t v65 = (int32_t)(v63 == 101) - v64; // 0x402653\n            v40 = v65 < 0 == (v65 & v64) < 0 == (v65 != 0);\n            // break -> 0x4022cd\n            break;\n        }\n        case 103: {\n            int32_t v66 = v63 == 101; // 0x402663\n            int32_t v67 = v61; // 0x402665\n            int32_t v68 = v66 - v67; // 0x402665\n            v40 = v68 < 0 != ((v68 ^ v66) & (v66 ^ v67)) < 0;\n            // break -> 0x4022cd\n            break;\n        }\n        default: {\n            // 0x40260f\n            v40 = (int32_t)v61 != 0 == v63 == 101;\n            // break -> 0x4022cd\n            break;\n        }\n    }\n    // 0x4022cd\n    return v40 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4026c0",
            "funcStartAddr": "4026c0",
            "funcEndAddr": "4026e7",
            "decompiledFuncCode": "int64_t function_4026c0(int64_t a1) {\n    char v1 = *(char *)(a1 + 1); // 0x4026c0\n    int64_t result = 0; // 0x4026cc\n    if (v1 < 123) {\n        unsigned char v2 = (v1 + 57) % 64;\n        int64_t v3 = v2 == 0 ? 1 : 1 << (int64_t)v2;\n        result = v3 & -256 | (int64_t)((v3 & 0xb7b93fc0011a1) != 0);\n    }\n    // 0x4026e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4026f0",
            "funcStartAddr": "4026f0",
            "funcEndAddr": "402790",
            "decompiledFuncCode": "int64_t function_4026f0(void) {\n    int64_t v1 = 8 * (int64_t)*(int32_t *)&g35 + g32;\n    int64_t v2 = *(int64_t *)v1; // 0x402708\n    bool v3; // 0x4026f0\n    int64_t v4 = v3 ? -1 : 1; // 0x40271a\n    int64_t v5 = (int64_t)&g2; // 0x40271a\n    int64_t v6 = v2; // 0x4026f0\n    int64_t v7 = 2; // 0x40271a\n    unsigned char v8 = *(char *)v6; // 0x40271a\n    char v9 = *(char *)v5; // 0x40271a\n    v5 += v4;\n    v7--;\n    char v10 = v9; // 0x40271a\n    bool v11 = false; // 0x40271a\n    while (v8 == v9) {\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v5 += v4;\n        v7--;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    if ((v8 >= v12 && !v11) == v8 < v12) {\n        int64_t v13 = *(int64_t *)(v1 + 8); // 0x402750\n        *(int32_t *)&g35 = (int32_t)&g37;\n        return v13 & -256 | (int64_t)(*(char *)v13 == 0);\n    }\n    // 0x402725\n    int64_t v14; // 0x40276a\n    char * v15; // 0x40277e\n    if (*(char *)v2 != 45 || *(char *)(v2 + 1) == 0 || *(char *)(v2 + 2) != 0) {\n        // 0x40276a\n        v14 = function_404f00((int64_t *)v5);\n        v15 = dcgettext(NULL, \"%s: unary operator expected\", 5);\n        return function_401b10((int64_t)v15, v14, 5, v7, v2, g32);\n    }\n    int64_t result = function_4026c0(v2); // 0x40273d\n    if ((char)result != 0) {\n        // 0x402746\n        return result;\n    }\n    // 0x40276a\n    v14 = function_404f00((int64_t *)v2);\n    v15 = dcgettext(NULL, \"%s: unary operator expected\", 5);\n    return function_401b10((int64_t)v15, v14, 5, v7, v2, g32);\n}\n"
        },
        {
            "funcName": "function_402790",
            "funcStartAddr": "402790",
            "funcEndAddr": "402cc7",
            "decompiledFuncCode": "int64_t function_402790(int64_t a1) {\n    int32_t v1 = a1; // 0x402794\n    if (v1 == 2) {\n        // 0x402868\n        return function_4026f0();\n    }\n    // 0x40279d\n    int64_t v2; // bp-8, 0x402790\n    int64_t v3 = &v2; // 0x402790\n    int64_t v4; // 0x402790\n    int64_t v5; // 0x402790\n    int64_t v6; // 0x402790\n    int64_t v7; // 0x402790\n    int64_t v8; // 0x402790\n    int64_t v9; // 0x402790\n    int64_t v10; // 0x402790\n    int64_t v11; // 0x402790\n    int64_t v12; // 0x402790\n    int64_t v13; // 0x402790\n    int64_t v14; // 0x402790\n    int64_t v15; // 0x402790\n    int64_t v16; // 0x402790\n    int64_t v17; // 0x402790\n    int64_t v18; // 0x402790\n    int64_t v19; // 0x402790\n    int64_t v20; // 0x402790\n    bool v21; // 0x402790\n    if (v1 > 2) {\n        if (v1 == 3) {\n            // 0x402858\n            return function_402cd0();\n        }\n        if (v1 != 4) {\n            goto lab_0x402840;\n        } else {\n            int64_t v22 = (int64_t)*(int32_t *)&g35; // 0x4027b1\n            int64_t v23 = 8 * v22; // 0x4027c9\n            int64_t v24 = v23 + g32;\n            int64_t v25 = *(int64_t *)v24; // 0x4027c9\n            int64_t v26 = v21 ? -1 : 1;\n            int64_t v27 = (int64_t)&g2; // 0x402790\n            unsigned char v28 = *(char *)v25; // 0x4027db\n            char v29 = *(char *)v27; // 0x4027db\n            int64_t v30 = v25 + v26; // 0x4027db\n            int64_t v31 = 1; // 0x4027db\n            char v32 = v29; // 0x4027db\n            bool v33 = false; // 0x4027db\n            while (v28 == v29) {\n                v27 += v26;\n                v32 = v28;\n                v33 = true;\n                if (v31 == 0) {\n                    // break -> \n                    break;\n                }\n                v28 = *(char *)v30;\n                v29 = *(char *)v27;\n                v30 += v26;\n                v31--;\n                v32 = v29;\n                v33 = false;\n            }\n            unsigned char v34 = v32;\n            int64_t v35 = v22 & -256; // 0x4027dd\n            uint64_t v36 = (int64_t)!((v28 < v34 | v33)) - (int64_t)(v28 < v34); // 0x4027e0\n            int64_t v37 = (int64_t)&g3; // 0x4027e5\n            if ((char)v36 != 0) {\n                unsigned char v38 = *(char *)v25; // 0x402885\n                char v39 = *(char *)v37; // 0x402885\n                int64_t v40 = v25 + v26; // 0x402885\n                int64_t v41 = 1; // 0x402885\n                char v42 = v39; // 0x402885\n                bool v43 = false; // 0x402885\n                while (v38 == v39) {\n                    // 0x402878\n                    v37 += v26;\n                    v42 = v38;\n                    v43 = true;\n                    if (v41 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v38 = *(char *)v40;\n                    v39 = *(char *)v37;\n                    v40 += v26;\n                    v41--;\n                    v42 = v39;\n                    v43 = false;\n                }\n                unsigned char v44 = v42;\n                uint64_t v45 = (int64_t)!((v38 < v44 | v43)) - (int64_t)(v38 < v44); // 0x40288a\n                v4 = v26;\n                v12 = v22;\n                v14 = v41;\n                v16 = v45 % 256 | v35;\n                v18 = v40;\n                v8 = v25;\n                v10 = g32;\n                v6 = v23;\n                if ((char)v45 == 0) {\n                    int64_t v46 = (int64_t)&g11; // 0x402790\n                    int64_t v47 = *(int64_t *)(v24 + 24); // 0x402790\n                    unsigned char v48 = *(char *)v47; // 0x4028a0\n                    char v49 = *(char *)v46; // 0x4028a0\n                    int64_t v50 = v47 + v26; // 0x4028a0\n                    int64_t v51 = 1; // 0x4028a0\n                    char v52 = v49; // 0x4028a0\n                    bool v53 = false; // 0x4028a0\n                    while (v48 == v49) {\n                        v46 += v26;\n                        v52 = v48;\n                        v53 = true;\n                        if (v51 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v48 = *(char *)v50;\n                        v49 = *(char *)v46;\n                        v50 += v26;\n                        v51--;\n                        v52 = v49;\n                        v53 = false;\n                    }\n                    unsigned char v54 = v52;\n                    uint64_t v55 = (int64_t)!((v48 < v54 | v53)) - (int64_t)(v48 < v54); // 0x4028a5\n                    v4 = v26;\n                    v12 = v22;\n                    v14 = v51;\n                    v16 = v55 % 256 | v35;\n                    v18 = v50;\n                    v8 = v25;\n                    v10 = g32;\n                    v6 = v23;\n                    if ((char)v55 == 0) {\n                        // 0x4028ac\n                        *(int32_t *)&g35 = (int32_t)&g36;\n                        int64_t result = function_4026f0(); // 0x4028b5\n                        *(int32_t *)&g35 = (int32_t)&g36;\n                        // 0x402808\n                        return result;\n                    }\n                }\n                goto lab_0x402846;\n            } else {\n                // 0x4027eb\n                *(int32_t *)&g35 = (int32_t)&g36;\n                v5 = v26;\n                v13 = &g36;\n                v15 = v31;\n                v17 = v36 % 256 | v35;\n                v20 = v3;\n                v19 = v30;\n                v9 = v25;\n                v11 = g32;\n                v7 = v23;\n                if (g34 > (int32_t)&g36) {\n                    // 0x402808\n                    return function_402cd0() & 0xffffffff ^ 1;\n                }\n                goto lab_0x4028d0;\n            }\n        }\n    } else {\n        if (v1 == 1) {\n            // 0x402815\n            *(int32_t *)&g35 = (int32_t)&g36;\n            int64_t v56 = *(int64_t *)(g32 + 8 * (int64_t)*(int32_t *)&g35); // 0x40282c\n            return v56 & -256 | (int64_t)(*(char *)v56 != 0);\n        }\n        goto lab_0x402840;\n    }\n  lab_0x402c4b_2:;\n    // 0x402c4b\n    int64_t v57; // 0x402a17\n    int64_t v58 = v57; // 0x402790\n    int64_t v59; // 0x402a25\n    char v60 = v59; // 0x402790\n    int64_t v61; // 0x402790\n    int64_t v62 = v61; // 0x402790\n    int64_t v63; // 0x4029a8\n    int64_t v64 = v63; // 0x402790\n    goto lab_0x402c4b_3;\n  lab_0x402ab0:;\n    // 0x402ab0\n    int64_t v67; // 0x402790\n    int64_t v68 = v67; // 0x402ab2\n    int64_t v69; // 0x402790\n    int64_t v70 = v69; // 0x402ab2\n    int64_t v71; // 0x402790\n    int64_t v72 = v71; // 0x402ab2\n    int64_t v73; // 0x402790\n    int64_t v74 = v73; // 0x402ab2\n    int64_t v75; // 0x402790\n    int64_t v76 = v75; // 0x402ab2\n    int64_t v77; // 0x402790\n    int64_t v78 = v77; // 0x402ab2\n    int64_t v79; // 0x402790\n    int64_t v80 = v79; // 0x402ab2\n    int64_t v81; // 0x402790\n    int64_t v82 = v81; // 0x402ab2\n    int64_t v83; // 0x402790\n    int64_t v84 = v83; // 0x402ab2\n    int64_t v85; // 0x402790\n    int64_t v86 = v85; // 0x402ab2\n    int64_t v87; // 0x402790\n    int64_t v88 = v87; // 0x402ab2\n    int64_t v89; // 0x402790\n    int64_t v90 = v89; // 0x402ab2\n    int64_t v91 = v89; // 0x402ab2\n    int64_t v92 = v87; // 0x402ab2\n    int64_t v93 = v85; // 0x402ab2\n    int64_t v94 = v83; // 0x402ab2\n    int64_t v95 = v81; // 0x402ab2\n    int64_t v96 = v79; // 0x402ab2\n    int64_t v97 = v77; // 0x402ab2\n    int64_t v98 = v75; // 0x402ab2\n    int64_t v99 = v73; // 0x402ab2\n    int64_t v100 = v71; // 0x402ab2\n    int64_t v101 = v69; // 0x402ab2\n    int64_t v102 = v67; // 0x402ab2\n    int64_t v103; // 0x402790\n    if ((char)v103 != 0) {\n      lab_0x402ab4:\n        // 0x402ab4\n        *(int32_t *)&g35 = (int32_t)v84;\n        v91 = v90;\n        v92 = v88;\n        v93 = v86;\n        v94 = v84;\n        v95 = v82;\n        v96 = v80;\n        v97 = v78;\n        v98 = v76;\n        v99 = v74;\n        v100 = v72;\n        v101 = v70;\n        v102 = v68;\n    }\n    goto lab_0x402aba;\n  lab_0x402900:;\n    // 0x402900\n    int64_t v268; // 0x402790\n    int64_t v161 = v268;\n    int64_t v266; // 0x402790\n    int64_t v159 = v266;\n    int64_t v265; // 0x402790\n    int64_t v158 = v265;\n    int64_t v264; // 0x402790\n    int64_t v290 = v264;\n    int64_t v263; // 0x402790\n    int64_t v291 = v263;\n    int64_t v262; // 0x402790\n    int64_t v157 = v262;\n    int64_t v261; // 0x402790\n    int64_t v292 = v261;\n    int64_t v260; // 0x402790\n    int64_t v293 = v260;\n    int64_t v259; // 0x402790\n    int64_t v160 = v259; // 0x402900\n    int64_t v294 = 0x100000000 * v291;\n    int64_t v295 = v294 >> 32; // 0x402907\n    int64_t v296 = *(int64_t *)((v294 >> 29) + v160); // 0x40290a\n    unsigned char v297 = *(char *)v296; // 0x40290e\n    int64_t v298 = v297; // 0x40290e\n    int64_t v147; // 0x402790\n    int64_t v267; // 0x402790\n    int64_t v149; // 0x402790\n    int64_t v145; // 0x402790\n    int64_t v163; // 0x402790\n    int64_t v152; // 0x402790\n    int64_t v154; // 0x402790\n    int64_t v156; // 0x402790\n    if (v297 != 33) {\n        goto lab_0x402993;\n    } else {\n        // 0x40291c\n        v91 = v292;\n        v92 = v157;\n        v93 = v291;\n        v94 = v295;\n        v95 = v290;\n        v96 = v158;\n        v97 = v159;\n        v98 = v160;\n        v99 = 0;\n        v100 = v298;\n        v101 = v161;\n        v102 = v296;\n        if (*(char *)(v296 + 1) != 0) {\n            goto lab_0x402aba;\n        } else {\n            int64_t v299 = v291 + 1; // 0x402927\n            int64_t v300 = v299 & 0xffffffff; // 0x402927\n            *(int32_t *)&g35 = (int32_t)v299;\n            v103 = v293;\n            v89 = v292;\n            v87 = v157;\n            v85 = v300;\n            v83 = v295;\n            v81 = v290;\n            v79 = v158;\n            v77 = v159;\n            v75 = v160;\n            v73 = v267;\n            v71 = v298;\n            v69 = v161;\n            v67 = v296;\n            if (v300 < v161) {\n                int64_t v301 = 0x100000000 * v299;\n                int64_t v302 = v301 >> 32; // 0x402939\n                int64_t v303 = *(int64_t *)((v301 >> 29) + v160); // 0x402974\n                int64_t v304 = v302 & 0xffffffff; // 0x402978\n                unsigned char v305 = *(char *)v303; // 0x40297c\n                if (v305 == 33) {\n                    int64_t v306 = v302; // 0x402955\n                    v103 = 0;\n                    v89 = v304;\n                    v87 = v157;\n                    v85 = v304;\n                    v83 = v302;\n                    v81 = 33;\n                    v79 = v158;\n                    v77 = v159;\n                    v75 = v160;\n                    v73 = 1;\n                    v71 = v298;\n                    v69 = v161;\n                    v67 = v303;\n                    if (*(char *)(v303 + 1) != 0) {\n                        goto lab_0x402ab0;\n                    } else {\n                        int64_t v307 = v306 + 1; // 0x40295b\n                        if (v161 <= v307) {\n                            // 0x402c40\n                            *(int32_t *)&g35 = (int32_t)v307;\n                            v58 = v307 & 0xffffffff;\n                            v60 = 33;\n                            v62 = v158;\n                            v64 = v159;\n                            goto lab_0x402c4b_3;\n                        }\n                        int64_t v308 = 0; // 0x40296b\n                        int64_t v309 = *(int64_t *)(8 * v307 + v160); // 0x402974\n                        int64_t v310 = v307 & 0xffffffff; // 0x402978\n                        unsigned char v311 = *(char *)v309; // 0x40297c\n                        while (v311 == 33) {\n                            // 0x402950\n                            if (*(char *)(v309 + 1) != 0) {\n                                goto lab_0x402ab4;\n                            }\n                            v307++;\n                            if (v161 <= v307) {\n                                // 0x402c40\n                                *(int32_t *)&g35 = (int32_t)v307;\n                                v58 = v307 & 0xffffffff;\n                                v60 = 33;\n                                v62 = v158;\n                                v64 = v159;\n                                goto lab_0x402c4b_3;\n                            }\n                            // 0x40296b\n                            v308 ^= 1;\n                            v309 = *(int64_t *)(8 * v307 + v160);\n                            v310 = v307 & 0xffffffff;\n                            v311 = *(char *)v309;\n                        }\n                        // 0x40298a\n                        v147 = v311;\n                        *(int32_t *)&g35 = (int32_t)v307;\n                        v163 = 1;\n                        v156 = v310;\n                        v154 = v310;\n                        v152 = v307;\n                        v149 = v308;\n                        v145 = v309;\n                        goto lab_0x402993;\n                    }\n                } else {\n                    // 0x402986\n                    v163 = 0;\n                    v156 = v304;\n                    v154 = v304;\n                    v152 = v302;\n                    v149 = 1;\n                    v147 = v305;\n                    v145 = v303;\n                    goto lab_0x402993;\n                }\n            } else {\n                goto lab_0x402ab0;\n            }\n        }\n    }\n  lab_0x402aba:;\n    int64_t v104 = v102;\n    int64_t v105 = v101;\n    int64_t v106 = v100;\n    int64_t v107 = v99;\n    int64_t v108 = v98;\n    int64_t v109 = v97;\n    int64_t v110 = v96;\n    int64_t v111 = v94;\n    int64_t v112 = v93;\n    int64_t v113 = v92;\n    int32_t v114 = v105 - v112; // 0x402abf\n    int64_t v115 = v104; // 0x402ac2\n    int64_t v116; // 0x402790\n    int64_t v117; // 0x402790\n    int64_t v118; // 0x402790\n    int64_t v119; // 0x402790\n    int64_t v120; // 0x402790\n    int64_t v121; // 0x402790\n    int64_t v122; // 0x402790\n    int64_t v123; // 0x402790\n    int64_t v124; // 0x402790\n    int64_t v125; // 0x402790\n    int64_t v126; // 0x402790\n    int64_t v127; // 0x402790\n    int64_t v128; // 0x402790\n    int64_t v129; // 0x402790\n    int64_t * v130; // 0x402790\n    if (v114 < 4) {\n        int64_t v131 = v91;\n        v129 = v95;\n        v119 = v108;\n        if (v114 == 3) {\n            goto lab_0x402afa;\n        } else {\n            // 0x402b52\n            v116 = v108;\n            v127 = v131;\n            v117 = v108;\n            if ((char)v106 != 45) {\n                goto lab_0x402b12;\n            } else {\n                goto lab_0x402b58;\n            }\n        }\n    } else {\n        int64_t v132 = (int64_t)\"-l\";\n        unsigned char v133 = *(char *)v115; // 0x402ad5\n        char v134 = *(char *)v132; // 0x402ad5\n        int64_t v135 = v115 + v5; // 0x402ad5\n        int64_t v136 = 2; // 0x402ad5\n        char v137 = v134; // 0x402ad5\n        bool v138 = false; // 0x402ad5\n        while (v133 == v134) {\n            int64_t v139 = v132 + v5; // 0x402ad5\n            v115 = v135;\n            int64_t v140 = v136; // 0x402ad5\n            v137 = v133;\n            v138 = true;\n            if (v136 == 0) {\n                // break -> \n                break;\n            }\n            v132 = v139;\n            v133 = *(char *)v115;\n            v134 = *(char *)v132;\n            v135 = v115 + v5;\n            v136 = v140 - 1;\n            v137 = v134;\n            v138 = false;\n        }\n        unsigned char v141 = v137;\n        v129 = v135;\n        v119 = v108;\n        if ((v133 >= v141 && !v138) != v133 < v141) {\n            goto lab_0x402afa;\n        } else {\n            // 0x402ae0\n            *v130 = v108;\n            int64_t v142 = function_401980(*(int64_t *)(8 * v111 + 16 + v108), v135, v113); // 0x402ae9\n            int64_t v143 = *v130; // 0x402aee\n            v129 = v135;\n            v119 = v143;\n            if ((char)v142 != 0) {\n                // 0x402bf8\n                v124 = function_402210(1);\n                v128 = v113;\n                v126 = (int64_t)*(int32_t *)&g35;\n                v125 = v111;\n                v123 = v109;\n                v118 = v143;\n                v120 = v107;\n                v121 = v106;\n                v122 = v104;\n                goto lab_0x402a58;\n            } else {\n                goto lab_0x402afa;\n            }\n        }\n    }\n  lab_0x402993:;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = v147;\n    int64_t v151 = v152;\n    int64_t v153 = v154;\n    int64_t v155 = v156;\n    v91 = v155;\n    v92 = v157;\n    v93 = v153;\n    v94 = v151;\n    v95 = v150;\n    v96 = v158;\n    v97 = v159;\n    v98 = v160;\n    v99 = v148;\n    v100 = v146;\n    v101 = v161;\n    v102 = v144;\n    if (v146 != 40) {\n        goto lab_0x402aba;\n    } else {\n        // 0x40299d\n        v91 = v155;\n        v92 = v157;\n        v93 = v153;\n        v94 = v151;\n        v95 = v150;\n        v96 = v158;\n        v97 = v159;\n        v98 = v160;\n        v99 = v148;\n        v100 = v146;\n        v101 = v161;\n        v102 = v144;\n        if (*(char *)(v144 + 1) != 0) {\n            goto lab_0x402aba;\n        } else {\n            int64_t v162 = v153 + 1; // 0x4029a8\n            v63 = v162 & 0xffffffff;\n            *(int32_t *)&g35 = (int32_t)v162;\n            v103 = v163;\n            v89 = v155;\n            v87 = v157;\n            v85 = v153;\n            v83 = v151;\n            v81 = v150;\n            v79 = v158;\n            v77 = v63;\n            v75 = v160;\n            v73 = v148;\n            v71 = v146;\n            v69 = v161;\n            v67 = v144;\n            if (v161 > v63) {\n                // 0x4029bc\n                if ((v153 + 2 & 0xffffffff) < v161) {\n                    uint32_t v164 = -1 - (int32_t)v153 + (int32_t)v161; // 0x4029d2\n                    int64_t v165 = 1; // 0x4029d5\n                    int64_t v166; // 0x4029bc\n                    int64_t v167 = (0x100000000 * v166 >> 29) + v160; // 0x4029d5\n                    int64_t v168 = v167;\n                    int64_t v169 = v165;\n                    int64_t v170 = *(int64_t *)v168; // 0x4029da\n                    int64_t v171 = (int64_t)&g11; // 0x402790\n                    int64_t v172 = v170; // 0x402790\n                    int64_t v173 = 2; // 0x402790\n                    int64_t v174 = v172;\n                    int64_t v175 = v171;\n                    unsigned char v176 = *(char *)v174; // 0x4029e7\n                    char v177 = *(char *)v175; // 0x4029e7\n                    char v178 = v177; // 0x4029e7\n                    bool v179 = false; // 0x4029e7\n                    int64_t v180; // 0x402790\n                    int64_t v181; // 0x402790\n                    int64_t v182; // 0x4029e7\n                    while (v176 == v177) {\n                        v181 = v173;\n                        v182 = v181 - 1;\n                        v171 = v175 + v180;\n                        v172 = v174 + v180;\n                        v173 = v182;\n                        v178 = v176;\n                        v179 = true;\n                        if (v182 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v174 = v172;\n                        v175 = v171;\n                        v176 = *(char *)v174;\n                        v177 = *(char *)v175;\n                        v178 = v177;\n                        v179 = false;\n                    }\n                    bool v183 = v179;\n                    unsigned char v184 = v178;\n                    while ((v176 >= v184 && !v183) != v176 < v184) {\n                        if (v169 == 4) {\n                            // 0x402b90\n                            goto lab_0x402a10;\n                        }\n                        int64_t v185 = v169 + 1; // 0x4029fc\n                        int64_t v186 = v185 & 0xffffffff; // 0x4029fc\n                        int64_t v187 = v168 + 8; // 0x4029ff\n                        v165 = v186;\n                        v167 = v187;\n                        if (v164 == (int32_t)v185) {\n                            // break -> 0x402a10\n                            break;\n                        }\n                        v168 = v167;\n                        v169 = v165;\n                        v170 = *(int64_t *)v168;\n                        v171 = (int64_t)&g11;\n                        v172 = v170;\n                        v173 = 2;\n                        v174 = v172;\n                        v175 = v171;\n                        v176 = *(char *)v174;\n                        v177 = *(char *)v175;\n                        v178 = v177;\n                        v179 = false;\n                        while (v176 == v177) {\n                            v181 = v173;\n                            v182 = v181 - 1;\n                            v171 = v175 + v180;\n                            v172 = v174 + v180;\n                            v173 = v182;\n                            v178 = v176;\n                            v179 = true;\n                            if (v182 == 0) {\n                                // break -> \n                                break;\n                            }\n                            v174 = v172;\n                            v175 = v171;\n                            v176 = *(char *)v174;\n                            v177 = *(char *)v175;\n                            v178 = v177;\n                            v179 = false;\n                        }\n                        v183 = v179;\n                        v184 = v178;\n                    }\n                }\n                goto lab_0x402a10;\n            } else {\n                goto lab_0x402ab0;\n            }\n        }\n    }\n  lab_0x402afa:;\n    int64_t v188 = v119;\n    int64_t v189 = *(int64_t *)(8 * v111 + 8 + v188); // 0x402afa\n    if ((char)function_401980(v189, v129, v113) != 0) {\n        // 0x402ba0\n        v124 = function_402210(0);\n        v128 = v113;\n        v126 = (int64_t)*(int32_t *)&g35;\n        v125 = v111;\n        v123 = v109;\n        v118 = v188;\n        v120 = v107;\n        v121 = v106;\n        v122 = v104;\n        goto lab_0x402a58;\n    } else {\n        // 0x402b0c\n        v116 = v188;\n        if ((char)v106 == 45) {\n            goto lab_0x402b58;\n        } else {\n            goto lab_0x402b12;\n        }\n    }\n  lab_0x402b12:;\n    int64_t v190 = v112 + 1; // 0x402b18\n    int64_t v191 = v190 & 0xffffffff; // 0x402b18\n    *(int32_t *)&g35 = (int32_t)v190;\n    char * v192; // 0x402790\n    char v193 = *v192 & (char)(v107 ^ (int64_t)((char)v106 != 0)); // 0x402b24\n    *v192 = v193;\n    char v194 = v193; // 0x402b2b\n    int64_t v195 = v113; // 0x402b2b\n    int64_t v196 = v191; // 0x402b2b\n    int64_t v197 = v111; // 0x402b2b\n    int64_t v198 = v109; // 0x402b2b\n    int64_t v199 = v116; // 0x402b2b\n    int64_t v200 = v107; // 0x402b2b\n    int64_t v201 = v106; // 0x402b2b\n    int64_t v202 = v105; // 0x402b2b\n    int64_t v203 = v104; // 0x402b2b\n    char v204 = v193; // 0x402b2b\n    if (v105 <= v191) {\n        // break -> 0x402b31\n        goto lab_0x402b31_2;\n    }\n    goto lab_0x402a68;\n  lab_0x402b58:;\n    int64_t v284 = v117;\n    v116 = v284;\n    int64_t v282; // 0x402790\n    int64_t v283; // 0x402790\n    int64_t v281; // 0x402790\n    int64_t v279; // 0x402790\n    int64_t v280; // 0x402790\n    if (*(char *)(v104 + 1) == 0) {\n        goto lab_0x402b12;\n    } else {\n        // 0x402b5f\n        v116 = v284;\n        if (*(char *)(v104 + 2) != 0) {\n            goto lab_0x402b12;\n        } else {\n            int64_t v285 = function_4026c0(v104); // 0x402b69\n            if ((char)v285 == 0) {\n                // 0x402cb3\n                v281 = v127;\n                v282 = v110;\n                v283 = v109;\n                v279 = (int64_t)\"%s: unary operator expected\";\n                v280 = function_404f00((int64_t *)v104);\n                goto lab_0x402c9f;\n            }\n            // 0x402b76\n            v124 = v285;\n            v128 = v113;\n            v126 = (int64_t)*(int32_t *)&g35;\n            v125 = v111;\n            v123 = v109;\n            v118 = v284;\n            v120 = v107;\n            v121 = v106;\n            v122 = v104;\n            goto lab_0x402a58;\n        }\n    }\n  lab_0x402a10:\n    // 0x402a10\n    v61 = v158;\n    int64_t v286 = function_402790(1); // 0x402a12\n    v57 = (int64_t)*(int32_t *)&g35;\n    v59 = *(int64_t *)(8 * v57 + g32);\n    if (v59 == 0) {\n        int64_t v287 = function_404f00((int64_t *)&g11); // 0x402c8d\n        v281 = v57;\n        v282 = v61;\n        v283 = v63;\n        v279 = (int64_t)\"%s expected\";\n        v280 = v287;\n        goto lab_0x402c9f;\n    }\n    // 0x402a35\n    if (*(char *)v59 != 41) {\n        goto lab_0x402c4b_2;\n    }\n    // 0x402a3e\n    if (*(char *)(v59 + 1) != 0) {\n        goto lab_0x402c4b_2;\n    }\n    // 0x402a48\n    *(int32_t *)&g35 = (int32_t)&g36;\n    v124 = v286;\n    v128 = g32;\n    v126 = &g36;\n    v125 = v151;\n    v123 = v63;\n    v118 = v160;\n    v120 = v148;\n    v121 = v146;\n    v122 = v144;\n    goto lab_0x402a58;\n  lab_0x402a58:;\n    int64_t v288 = g34;\n    char v289 = *v192 & (char)(v120 ^ v124); // 0x402a5b\n    *v192 = v289;\n    v194 = v289;\n    v195 = v128;\n    v196 = v126;\n    v197 = v125;\n    v198 = v123;\n    v199 = v118;\n    v200 = v120;\n    v201 = v121;\n    v202 = v288;\n    v203 = v122;\n    v204 = v289;\n    if (v126 >= v288) {\n        // break -> 0x402b31\n        goto lab_0x402b31_2;\n    }\n    goto lab_0x402a68;\n  lab_0x402a68:;\n    int64_t v205 = v203;\n    int64_t v206 = v202;\n    int64_t v207 = v201;\n    int64_t v208 = v200;\n    int64_t v209 = v199;\n    int64_t v210 = v198;\n    int64_t v211 = v197;\n    int64_t v212 = v196;\n    int64_t v213 = v195;\n    char v214 = v194; // 0x402bcd\n    int64_t v215 = *(int64_t *)(g32 + (0x100000000 * v212 >> 29)); // 0x402a77\n    int64_t v216 = (int64_t)\"-a\";\n    unsigned char v217 = *(char *)v215; // 0x402a83\n    char v218 = *(char *)v216; // 0x402a83\n    int64_t v219 = v215 + v5; // 0x402a83\n    int64_t v220 = 2; // 0x402a83\n    char v221 = v218; // 0x402a83\n    bool v222 = false; // 0x402a83\n    while (v217 == v218) {\n        int64_t v223 = v216 + v5; // 0x402a83\n        int64_t v224 = v219; // 0x402a83\n        int64_t v225 = v220; // 0x402a83\n        v221 = v217;\n        v222 = true;\n        if (v220 == 0) {\n            // break -> \n            break;\n        }\n        v216 = v223;\n        v217 = *(char *)v224;\n        v218 = *(char *)v216;\n        v219 = v224 + v5;\n        v220 = v225 - 1;\n        v221 = v218;\n        v222 = false;\n    }\n    unsigned char v226 = v221;\n    uint64_t v227 = (int64_t)!((v217 < v226 | v222)) - (int64_t)(v217 < v226); // 0x402a88\n    int64_t v228; // 0x402790\n    int64_t v229; // 0x402790\n    int64_t v230; // 0x402790\n    int64_t v231; // 0x402790\n    int64_t v232; // 0x402790\n    int64_t v233; // 0x402790\n    int64_t v234; // 0x402790\n    int64_t v235; // 0x402790\n    int64_t v236; // 0x402790\n    int64_t v237; // 0x402790\n    int64_t v238; // 0x402790\n    int64_t v239; // 0x402790\n    int64_t v240; // 0x402790\n    char * v241; // 0x4028eb\n    if ((char)v227 != 0) {\n        char v242 = *v241 | v214; // 0x402bd2\n        *v241 = v242;\n        int64_t v243 = (int64_t)\"-o\";\n        unsigned char v244 = *(char *)v215; // 0x402bd6\n        char v245 = *(char *)v243; // 0x402bd6\n        int64_t v246 = v215 + v5; // 0x402bd6\n        int64_t v247 = 2; // 0x402bd6\n        char v248 = v245; // 0x402bd6\n        bool v249 = false; // 0x402bd6\n        while (v244 == v245) {\n            int64_t v250 = v243 + v5; // 0x402bd6\n            int64_t v251 = v246; // 0x402bd6\n            int64_t v252 = v247; // 0x402bd6\n            v248 = v244;\n            v249 = true;\n            if (v247 == 0) {\n                // break -> \n                break;\n            }\n            v243 = v250;\n            v244 = *(char *)v251;\n            v245 = *(char *)v243;\n            v246 = v251 + v5;\n            v247 = v252 - 1;\n            v248 = v245;\n            v249 = false;\n        }\n        unsigned char v253 = v248;\n        uint64_t v254 = (int64_t)!((v244 < v253 | v249)) - (int64_t)(v244 < v253); // 0x402bdb\n        char result2 = v242; // 0x402bdf\n        if ((char)v254 != 0) {\n            // 0x402b3a\n            return result2;\n        }\n        int64_t v255 = v212 + 1; // 0x402be5\n        *(int32_t *)&g35 = (int32_t)v255;\n        v235 = v254 % 256;\n        v238 = v247;\n        v239 = v213;\n        v237 = v255 & 0xffffffff;\n        v236 = v211;\n        v240 = v246;\n        v233 = v215;\n        v234 = v210;\n        v228 = v209;\n        v229 = v208;\n        v230 = v207;\n        v231 = v206;\n        v232 = v205;\n        goto lab_0x4028f0_2;\n    } else {\n        int64_t v256 = v227 % 256; // 0x402a88\n        int64_t v257 = v212 + 1; // 0x402a92\n        int64_t v258 = v257 & 0xffffffff; // 0x402a92\n        *(int32_t *)&g35 = (int32_t)v257;\n        v259 = g32;\n        v260 = v256;\n        v261 = v220;\n        v262 = v213;\n        v263 = v258;\n        v264 = v219;\n        v265 = v215;\n        v266 = v210;\n        v267 = v208;\n        v268 = v206;\n        v103 = v256;\n        v89 = v220;\n        v87 = v213;\n        v85 = v258;\n        v83 = v211;\n        v81 = v219;\n        v79 = v215;\n        v77 = v210;\n        v75 = v209;\n        v73 = v208;\n        v71 = v207;\n        v69 = v206;\n        v67 = v205;\n        if (v258 < v206) {\n            goto lab_0x402900;\n        } else {\n            goto lab_0x402ab0;\n        }\n    }\n  lab_0x402840:\n    // 0x402840\n    v4 = v21 ? -1 : 1;\n    v12 = (int64_t)*(int32_t *)&g35;\n    goto lab_0x402846;\n  lab_0x402846:\n    // 0x402846\n    v5 = v4;\n    v13 = v12;\n    v15 = v14;\n    v17 = v16;\n    int64_t v269; // 0x402790\n    v20 = g34 > (int32_t)v12 ? (int64_t)&v269 : v3;\n    v19 = v18;\n    v9 = v8;\n    v11 = v10;\n    v7 = v6;\n    goto lab_0x4028d0;\n  lab_0x4028d0:\n    // 0x4028d0\n    v241 = (char *)(v20 - 57);\n    *v241 = 0;\n    v192 = (char *)(v20 - 58);\n    v130 = (int64_t *)(v20 - 72);\n    v235 = v13;\n    v238 = v15;\n    v239 = v17;\n    v237 = (int64_t)*(int32_t *)&g35;\n    v240 = v19;\n    v233 = v9;\n    v234 = v11;\n    v228 = v7;\n    v231 = g34;\n    while (true) {\n      lab_0x4028f0_2:;\n        int64_t v270 = v231;\n        int64_t v271 = v229;\n        int64_t v272 = v234;\n        int64_t v273 = v233;\n        int64_t v274 = v240;\n        int64_t v275 = v237;\n        int64_t v276 = v239;\n        int64_t v277 = v238;\n        int64_t v278 = v235;\n        *v192 = 1;\n        v103 = v278;\n        v89 = v277;\n        v87 = v276;\n        v85 = v275;\n        v83 = v236;\n        v81 = v274;\n        v79 = v273;\n        v77 = v272;\n        v75 = v228;\n        v73 = v271;\n        v71 = v230;\n        v69 = v270;\n        v67 = v232;\n        if (v275 < v270) {\n            // 0x4028f0\n            v259 = g32;\n            v260 = v278;\n            v261 = v277;\n            v262 = v276;\n            v263 = v275;\n            v264 = v274;\n            v265 = v273;\n            v266 = v272;\n            v267 = v271;\n            v268 = v270;\n            goto lab_0x402900;\n        } else {\n            goto lab_0x402ab0;\n        }\n    }\n  lab_0x402b31_2:;\n    char result3 = *v241 | v204; // 0x402b36\n    *v241 = result3;\n    // 0x402b3a\n    return result3;\n  lab_0x402c9f:\n    // 0x402c9f\n    function_401b10((int64_t)dcgettext(NULL, (char *)v279, 5), v280, 5, v281, v282, v283);\n    // UNREACHABLE\n  lab_0x402c4b_3:;\n    int64_t v65 = function_404ee0(1, v60); // 0x402c50\n    int64_t v66 = function_404ee0(0, (char)&g11); // 0x402c5f\n    function_401b10((int64_t)dcgettext(NULL, \"%s expected, found %s\", 5), v66, v65, v58, v62, v64);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402cd0",
            "funcStartAddr": "402cd0",
            "funcEndAddr": "402e30",
            "decompiledFuncCode": "int64_t function_402cd0(void) {\n    int64_t v1 = *(int64_t *)(g32 + 8 * (int64_t)&g36); // 0x402cef\n    int64_t v2; // 0x402cd0\n    int64_t v3 = function_401980(v1, v2, v2); // 0x402cff\n    if ((char)v3 != 0) {\n        // 0x402df0\n        return function_402210(0);\n    }\n    int64_t v4 = *(int64_t *)(g32 + 8 * (int64_t)&g36 - 8); // 0x402d0c\n    bool v5; // 0x402cd0\n    int64_t v6 = v5 ? -1 : 1;\n    int64_t v7 = (int64_t)&g2; // 0x402cd0\n    int64_t v8 = v4; // 0x402cd0\n    int64_t v9 = 2; // 0x402d1e\n    unsigned char v10 = *(char *)v8; // 0x402d1e\n    char v11 = *(char *)v7; // 0x402d1e\n    char v12 = v11; // 0x402d1e\n    bool v13 = false; // 0x402d1e\n    while (v10 == v11) {\n        v9--;\n        v7 += v6;\n        v8 += v6;\n        v12 = v10;\n        v13 = true;\n        if (v9 == 0) {\n            // break -> \n            break;\n        }\n        v10 = *(char *)v8;\n        v11 = *(char *)v7;\n        v12 = v11;\n        v13 = false;\n    }\n    unsigned char v14 = v12;\n    int64_t v15 = v3 & -256; // 0x402d20\n    uint64_t v16 = (int64_t)!((v10 < v14 | v13)) - (int64_t)(v10 < v14); // 0x402d23\n    int64_t v17 = (int64_t)&g3; // 0x402d27\n    int64_t v18 = v4; // 0x402d27\n    int64_t v19 = 2; // 0x402d27\n    if ((char)v16 == 0) {\n        // 0x402d29\n        *(int32_t *)&g35 = (int32_t)&g36;\n        int64_t result = v16 % 256 | v15; // 0x402d38\n        if (g34 > (int32_t)&g36) {\n            // 0x402d3e\n            result = function_4026f0() & 0xffffffff ^ 1;\n        }\n        // 0x402d46\n        return result;\n    }\n    unsigned char v20 = *(char *)v18; // 0x402d65\n    char v21 = *(char *)v17; // 0x402d65\n    char v22 = v21; // 0x402d65\n    bool v23 = false; // 0x402d65\n    while (v20 == v21) {\n        // 0x402d58\n        v19--;\n        v17 += v6;\n        v18 += v6;\n        v22 = v20;\n        v23 = true;\n        if (v19 == 0) {\n            // break -> \n            break;\n        }\n        v20 = *(char *)v18;\n        v21 = *(char *)v17;\n        v22 = v21;\n        v23 = false;\n    }\n    unsigned char v24 = v22;\n    if ((v20 >= v24 && !v23) == v20 < v24) {\n        int64_t v25 = (int64_t)&g11; // 0x402cd0\n        int64_t v26 = *(int64_t *)(g32 + 8 * (int64_t)&g36 + 8); // 0x402cd0\n        int64_t v27 = 2; // 0x402d7f\n        unsigned char v28 = *(char *)v26; // 0x402d7f\n        char v29 = *(char *)v25; // 0x402d7f\n        char v30 = v29; // 0x402d7f\n        bool v31 = false; // 0x402d7f\n        while (v28 == v29) {\n            v27--;\n            v25 += v6;\n            v26 += v6;\n            v30 = v28;\n            v31 = true;\n            if (v27 == 0) {\n                // break -> \n                break;\n            }\n            v28 = *(char *)v26;\n            v29 = *(char *)v25;\n            v30 = v29;\n            v31 = false;\n        }\n        unsigned char v32 = v30;\n        if ((v28 >= v32 && !v31) == v28 < v32) {\n            // 0x402d8a\n            *(int32_t *)&g35 = (int32_t)&g38;\n            // 0x402d46\n            return v15 | (int64_t)(*(char *)v1 != 0);\n        }\n    }\n    int64_t v33 = (int64_t)\"-a\"; // 0x402cd0\n    int64_t v34 = v1; // 0x402cd0\n    int64_t v35 = 3; // 0x402dad\n    unsigned char v36 = *(char *)v34; // 0x402dad\n    char v37 = *(char *)v33; // 0x402dad\n    char v38 = v37; // 0x402dad\n    bool v39 = false; // 0x402dad\n    while (v36 == v37) {\n        v35--;\n        v33 += v6;\n        v34 += v6;\n        v38 = v36;\n        v39 = true;\n        if (v35 == 0) {\n            // break -> \n            break;\n        }\n        v36 = *(char *)v34;\n        v37 = *(char *)v33;\n        v38 = v37;\n        v39 = false;\n    }\n    unsigned char v40 = v38;\n    int64_t v41 = (int64_t)!((v36 < v40 | v39)) - (int64_t)(v36 < v40); // 0x402db2\n    int64_t v42 = (int64_t)\"-o\"; // 0x402db6\n    int64_t v43 = v1; // 0x402db6\n    if ((char)v41 == 0) {\n        // 0x402dd0\n        return v41 % 256 | v15;\n    }\n    int64_t v44 = 3; // 0x402db6\n    unsigned char v45 = *(char *)v43; // 0x402dc5\n    char v46 = *(char *)v42; // 0x402dc5\n    v44--;\n    char v47 = v46; // 0x402dc5\n    bool v48 = false; // 0x402dc5\n    while (v45 == v46) {\n        // 0x402db8\n        v42 += v6;\n        v43 += v6;\n        v47 = v45;\n        v48 = true;\n        if (v44 == 0) {\n            // break -> \n            break;\n        }\n        v45 = *(char *)v43;\n        v46 = *(char *)v42;\n        v44--;\n        v47 = v46;\n        v48 = false;\n    }\n    unsigned char v49 = v47;\n    int64_t v50 = (int64_t)!((v45 < v49 | v48)) - (int64_t)(v45 < v49); // 0x402dca\n    if ((char)v50 == 0) {\n        // 0x402dd0\n        return v50 % 256 | v15;\n    }\n    int64_t v51 = function_404f00((int64_t *)v1); // 0x402e04\n    function_401b10((int64_t)dcgettext(NULL, \"%s: binary operator expected\", 5), v51, 5, v44, v2, v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e30",
            "funcStartAddr": "402e30",
            "funcEndAddr": "4031c6",
            "decompiledFuncCode": "int64_t function_402e30(int32_t status) {\n    if (status != 0) {\n        // 0x402e3c\n        __fprintf_chk(g29, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402e6d\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402e74\n    fputs_unlocked(dcgettext(NULL, \"Usage: test EXPRESSION\\n  or:  test\\n  or:  [ EXPRESSION ]\\n  or:  [ ]\\n  or:  [ OPTION\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"Exit with the status determined by EXPRESSION.\\n\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nAn omitted EXPRESSION defaults to false.  Otherwise,\\nEXPRESSION is true or false and sets exit status.  It is one of:\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\n  ( EXPRESSION )               EXPRESSION is true\\n  ! EXPRESSION                 EXPRESSION is false\\n  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\\n  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -n STRING            the length of STRING is nonzero\\n  STRING               equivalent to -n STRING\\n  -z STRING            the length of STRING is zero\\n  STRING1 = STRING2    the strings are equal\\n  STRING1 != STRING2   the strings are not equal\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\n  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\\n  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\\n  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\\n  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER2\\n  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2\\n  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\n  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\\n  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\\n  FILE1 -ot FILE2   FILE1 is older than FILE2\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -b FILE     FILE exists and is block special\\n  -c FILE     FILE exists and is character special\\n  -d FILE     FILE exists and is a directory\\n  -e FILE     FILE exists\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"  -f FILE     FILE exists and is a regular file\\n  -g FILE     FILE exists and is set-group-ID\\n  -G FILE     FILE exists and is owned by the effective group ID\\n  -h FILE     FILE exists and is a symbolic link (same as -L)\\n  -k FILE     FILE exists and has its sticky bit set\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"  -L FILE     FILE exists and is a symbolic link (same as -h)\\n  -O FILE     FILE exists and is owned by the effective user ID\\n  -p FILE     FILE exists and is a named pipe\\n  -r FILE     FILE exists and read permission is granted\\n  -s FILE     FILE exists and has a size greater than zero\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"  -S FILE     FILE exists and is a socket\\n  -t FD       file descriptor FD is opened on a terminal\\n  -u FILE     FILE exists and its set-user-ID bit is set\\n  -w FILE     FILE exists and write permission is granted\\n  -x FILE     FILE exists and execute (or search) permission is granted\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nExcept for -h and -L, all FILE-related tests dereference symbolic links.\\nBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\\nINTEGER may also be -l STRING, which evaluates to the length of STRING.\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nNOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\\nEXPR2' or 'test EXPR1 || test EXPR2' instead.\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nNOTE: [ honors the --help and --version options, but test does not.\\ntest treats each of those as it treats any other nonempty STRING.\\n\", 5), g27);\n    dcgettext(NULL, \"test and/or [\", 5);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL); // 0x40310c\n    if (locale != NULL) {\n        // 0x403116\n        if (strncmp(locale, \"en_\", 3) != 0) {\n            // 0x40319c\n            __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n        }\n    }\n    // 0x40312c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402e6d\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4031d0",
            "funcStartAddr": "4031d0",
            "funcEndAddr": "4031d8",
            "decompiledFuncCode": "int64_t function_4031d0(int64_t a1) {\n    // 0x4031d0\n    g40 = a1;\n    int64_t result; // 0x4031d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031e0",
            "funcStartAddr": "4031e0",
            "funcEndAddr": "4031e8",
            "decompiledFuncCode": "int64_t function_4031e0(int64_t a1) {\n    // 0x4031e0\n    g39 = a1;\n    int64_t result; // 0x4031e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031f0",
            "funcStartAddr": "4031f0",
            "funcEndAddr": "40328e",
            "decompiledFuncCode": "int64_t function_4031f0(void) {\n    // 0x4031f0\n    int32_t * err_num; // 0x403206\n    if ((int32_t)function_405d20((int64_t)g27) == 0) {\n        goto lab_0x40321c;\n    } else {\n        // 0x403206\n        err_num = __errno_location();\n        if (g39 == 0) {\n            goto lab_0x403233;\n        } else {\n            // 0x403217\n            if (*err_num != 32) {\n                goto lab_0x403233;\n            } else {\n                goto lab_0x40321c;\n            }\n        }\n    }\n  lab_0x40321c:;\n    int64_t result = function_405d20((int64_t)g29); // 0x403223\n    if ((int32_t)result == 0) {\n        // 0x40322c\n        return result;\n    }\n    // 0x40326e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x403233:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40323f\n    if (g40 == 0) {\n        // 0x403279\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403253\n        error(0, *err_num, \"%s: %s\", (char *)function_404d50((int64_t)g40), v1);\n    }\n    // 0x40326e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "4032d8",
            "decompiledFuncCode": "int64_t function_403290(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403290\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x4032a2\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x4032ab\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x4032d4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032e0",
            "funcStartAddr": "4032e0",
            "funcEndAddr": "403379",
            "decompiledFuncCode": "int64_t function_4032e0(int64_t str) {\n    // 0x4032e0\n    if (str == 0) {\n        // 0x403359\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g29);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4032ee\n    int64_t result = (int64_t)found_char_pos; // 0x4032ee\n    if (found_char_pos == NULL) {\n        // 0x403349\n        g41 = str;\n        g28 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4032f8\n    if (v1 - str < 7) {\n        // 0x403349\n        g41 = str;\n        g28 = str;\n        return result;\n    }\n    // 0x403308\n    bool v2; // 0x4032e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4032e0\n    int64_t v5 = result - 6; // 0x4032e0\n    int64_t v6 = 7; // 0x403316\n    unsigned char v7 = *(char *)v5; // 0x403316\n    char v8 = *(char *)v4; // 0x403316\n    char v9 = v8; // 0x403316\n    bool v10 = false; // 0x403316\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403320\n    int64_t v13 = v1; // 0x403320\n    int64_t v14 = 3; // 0x403320\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403349\n        g41 = str;\n        g28 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403332\n    char v16 = *(char *)v12; // 0x403332\n    char v17 = v16; // 0x403332\n    bool v18 = false; // 0x403332\n    while (v15 == v16) {\n        // 0x403322\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40333c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40333e\n        v20 = result + 4;\n        g26 = v20;\n    }\n    // 0x403349\n    g41 = v20;\n    g28 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403380",
            "funcStartAddr": "403380",
            "funcEndAddr": "403472",
            "decompiledFuncCode": "int64_t function_403380(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403394\n    int64_t result = (int64_t)v1; // 0x403394\n    if (result != a1) {\n        // 0x4033a1\n        return result;\n    }\n    int64_t v2 = function_405de0(); // 0x4033b0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403466\n    if (v3 == 85) {\n        // 0x4033c0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403458\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4033ee\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x4033fb\n        // 0x4033a1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403458\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40343d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40344a\n    // 0x4033a1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403480",
            "funcStartAddr": "403480",
            "funcEndAddr": "4034d7",
            "decompiledFuncCode": "int64_t function_403480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x403480\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4034d7",
            "funcStartAddr": "4034d7",
            "funcEndAddr": "4046a1",
            "decompiledFuncCode": "int64_t function_4034d7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = 0; // 0x403521\n    int64_t v2 = 0; // 0x403521\n    int64_t v3; // 0x4034d7\n    int64_t v4; // 0x4034d7\n    int64_t v5; // 0x4034d7\n    int64_t v6; // 0x4034d7\n    int64_t v7; // 0x4034d7\n    int64_t v8; // 0x4034d7\n    int64_t v9; // 0x4034d7\n    int64_t v10; // 0x4034d7\n    int64_t v11; // 0x4034d7\n    int64_t v12; // 0x4034d7\n    int64_t v13; // 0x4034d7\n    int64_t v14; // 0x4034d7\n    int64_t v15; // 0x4034d7\n    int64_t v16; // 0x4034d7\n    int64_t v17; // 0x4034d7\n    int64_t v18; // 0x4034d7\n    int64_t v19; // 0x4034d7\n    int64_t result; // 0x4034d7\n    int64_t v20; // 0x4034d7\n    int64_t v21; // 0x4034d7\n    int64_t ps; // bp+136, 0x4034d7\n    char v22; // 0x403a90\n    int64_t v23; // 0x403a90\n    int32_t wc; // 0x4034d7\n    int64_t v24; // 0x4034d7\n    while (true) {\n      lab_0x403528_2:\n        // 0x403528\n        v11 = v10;\n        v7 = v6;\n        v14 = v13;\n        result = v1;\n        int64_t v25 = v2; // 0x4034d7\n        int64_t v26; // 0x40355c\n        while (true) {\n          lab_0x403528:\n            // 0x403528\n            v4 = v25;\n            bool v27 = v14 == v4; // 0x403533\n            if (v14 == -1) {\n                // 0x403535\n                v27 = *(char *)(v4 + str) == 0;\n            }\n            // 0x403543\n            if (v27) {\n                // break (via goto) -> 0x403ca8\n                goto lab_0x403ca8;\n            }\n            // 0x40354c\n            v26 = v4 + str;\n            v22 = *(char *)v26;\n            v23 = v22;\n            g51 = v23;\n            v17 = v14;\n            v8 = v7;\n            v12 = v11;\n            v3 = v14;\n            v5 = v7;\n            v9 = v11;\n            switch (v22) {\n                case 0: {\n                    // 0x403b3b\n                    if (wc % 2 == 0) {\n                        goto lab_0x403681;\n                    }\n                    // 0x403f5d\n                    v25 = v4 + 1;\n                    goto lab_0x403528;\n                }\n                case 7: {\n                    goto lab_0x403681;\n                }\n                case 8: {\n                    goto lab_0x403681;\n                }\n                case 9: {\n                    goto lab_0x40389a_2;\n                }\n                case 10: {\n                    goto lab_0x40389a_2;\n                }\n                case 11: {\n                    goto lab_0x403681;\n                }\n                case 12: {\n                    goto lab_0x403681;\n                }\n                case 13: {\n                    goto lab_0x40389a_2;\n                }\n                case 32: {\n                    goto lab_0x40389a_2;\n                }\n                case 33: {\n                    goto lab_0x40389a_2;\n                }\n                case 34: {\n                    goto lab_0x40389a_2;\n                }\n                case 35: {\n                    goto lab_0x40364d;\n                }\n                case 36: {\n                    goto lab_0x40389a_2;\n                }\n                case 37: {\n                    goto lab_0x403681;\n                }\n                case 38: {\n                    goto lab_0x40389a_2;\n                }\n                case 39: {\n                    goto lab_0x40389a_2;\n                }\n                case 40: {\n                    goto lab_0x40389a_2;\n                }\n                case 41: {\n                    goto lab_0x40389a_2;\n                }\n                case 42: {\n                    goto lab_0x40389a_2;\n                }\n                case 43: {\n                    goto lab_0x403681;\n                }\n                case 44: {\n                    goto lab_0x403681;\n                }\n                case 45: {\n                    goto lab_0x403681;\n                }\n                case 46: {\n                    goto lab_0x403681;\n                }\n                case 47: {\n                    goto lab_0x403681;\n                }\n                case 48: {\n                    goto lab_0x403681;\n                }\n                case 49: {\n                    goto lab_0x403681;\n                }\n                case 50: {\n                    goto lab_0x403681;\n                }\n                case 51: {\n                    goto lab_0x403681;\n                }\n                case 52: {\n                    goto lab_0x403681;\n                }\n                case 53: {\n                    goto lab_0x403681;\n                }\n                case 54: {\n                    goto lab_0x403681;\n                }\n                case 55: {\n                    goto lab_0x403681;\n                }\n                case 56: {\n                    goto lab_0x403681;\n                }\n                case 57: {\n                    goto lab_0x403681;\n                }\n                case 58: {\n                    goto lab_0x403681;\n                }\n                case 59: {\n                    goto lab_0x40389a_2;\n                }\n                case 60: {\n                    goto lab_0x40389a_2;\n                }\n                case 61: {\n                    goto lab_0x40389a_2;\n                }\n                case 62: {\n                    goto lab_0x40389a_2;\n                }\n                case 63: {\n                    goto lab_0x40389a_2;\n                }\n                case 65: {\n                    goto lab_0x403681;\n                }\n                case 66: {\n                    goto lab_0x403681;\n                }\n                case 67: {\n                    goto lab_0x403681;\n                }\n                case 68: {\n                    goto lab_0x403681;\n                }\n                case 69: {\n                    goto lab_0x403681;\n                }\n                case 70: {\n                    goto lab_0x403681;\n                }\n                case 71: {\n                    goto lab_0x403681;\n                }\n                case 72: {\n                    goto lab_0x403681;\n                }\n                case 73: {\n                    goto lab_0x403681;\n                }\n                case 74: {\n                    goto lab_0x403681;\n                }\n                case 75: {\n                    goto lab_0x403681;\n                }\n                case 76: {\n                    goto lab_0x403681;\n                }\n                case 77: {\n                    goto lab_0x403681;\n                }\n                case 78: {\n                    goto lab_0x403681;\n                }\n                case 79: {\n                    goto lab_0x403681;\n                }\n                case 80: {\n                    goto lab_0x403681;\n                }\n                case 81: {\n                    goto lab_0x403681;\n                }\n                case 82: {\n                    goto lab_0x403681;\n                }\n                case 83: {\n                    goto lab_0x403681;\n                }\n                case 84: {\n                    goto lab_0x403681;\n                }\n                case 85: {\n                    goto lab_0x403681;\n                }\n                case 86: {\n                    goto lab_0x403681;\n                }\n                case 87: {\n                    goto lab_0x403681;\n                }\n                case 88: {\n                    goto lab_0x403681;\n                }\n                case 89: {\n                    goto lab_0x403681;\n                }\n                case 90: {\n                    goto lab_0x403681;\n                }\n                case 91: {\n                    goto lab_0x40389a_2;\n                }\n                case 92: {\n                    goto lab_0x40389a_2;\n                }\n                case 93: {\n                    goto lab_0x403681;\n                }\n                case 94: {\n                    goto lab_0x40389a_2;\n                }\n                case 95: {\n                    goto lab_0x403681;\n                }\n                case 96: {\n                    goto lab_0x40389a_2;\n                }\n                case 97: {\n                    goto lab_0x403681;\n                }\n                case 98: {\n                    goto lab_0x403681;\n                }\n                case 99: {\n                    goto lab_0x403681;\n                }\n                case 100: {\n                    goto lab_0x403681;\n                }\n                case 101: {\n                    goto lab_0x403681;\n                }\n                case 102: {\n                    goto lab_0x403681;\n                }\n                case 103: {\n                    goto lab_0x403681;\n                }\n                case 104: {\n                    goto lab_0x403681;\n                }\n                case 105: {\n                    goto lab_0x403681;\n                }\n                case 106: {\n                    goto lab_0x403681;\n                }\n                case 107: {\n                    goto lab_0x403681;\n                }\n                case 108: {\n                    goto lab_0x403681;\n                }\n                case 109: {\n                    goto lab_0x403681;\n                }\n                case 110: {\n                    goto lab_0x403681;\n                }\n                case 111: {\n                    goto lab_0x403681;\n                }\n                case 112: {\n                    goto lab_0x403681;\n                }\n                case 113: {\n                    goto lab_0x403681;\n                }\n                case 114: {\n                    goto lab_0x403681;\n                }\n                case 115: {\n                    goto lab_0x403681;\n                }\n                case 116: {\n                    goto lab_0x403681;\n                }\n                case 117: {\n                    goto lab_0x403681;\n                }\n                case 118: {\n                    goto lab_0x403681;\n                }\n                case 119: {\n                    goto lab_0x403681;\n                }\n                case 120: {\n                    goto lab_0x403681;\n                }\n                case 121: {\n                    goto lab_0x403681;\n                }\n                case 122: {\n                    goto lab_0x403681;\n                }\n                case 123: {\n                    goto lab_0x403625;\n                }\n                case 124: {\n                    goto lab_0x40389a_2;\n                }\n                case 125: {\n                    goto lab_0x403625;\n                }\n                case 126: {\n                    goto lab_0x40364d;\n                }\n                default: {\n                    goto lab_0x403a25;\n                }\n            }\n        }\n      lab_0x403a25:\n        if (v24 != 1) {\n            // 0x403d90\n            ps = 0;\n            int64_t len = v14; // 0x403da0\n            if (v14 == -1) {\n                // 0x403da2\n                len = strlen((char *)str);\n            }\n            int64_t v28 = len;\n            v18 = 0;\n            while (true) {\n              lab_0x403e2f:\n                // 0x403e2f\n                v19 = v18;\n                uint64_t v29 = v19 + v4; // 0x403e34\n                v20 = 0;\n                switch (str) {\n                    case 0: {\n                        goto lab_0x404379_2;\n                    }\n                    case -1: {\n                        // 0x404459\n                        v15 = 0x100000000 * v28 >> 32;\n                        goto lab_0x4043aa_2;\n                    }\n                    case -2: {\n                        int64_t v30 = 0x100000000 * v28 >> 32; // 0x40448d\n                        v15 = v30;\n                        if (v29 >= v30) {\n                            goto lab_0x4043aa_2;\n                        } else {\n                            // 0x4044c7\n                            v15 = v30;\n                            if (*(char *)(v29 - 2) != 0) {\n                                int64_t v31 = 1; // 0x4044d7\n                                v21 = v31;\n                                v16 = v30;\n                                while (v31 + v4 < v30) {\n                                    // 0x4044d0\n                                    v21 = v31;\n                                    v16 = v30;\n                                    int64_t v32 = v31; // 0x4044d5\n                                    if (*(char *)(v31 + v26) == 0) {\n                                        // break -> 0x4043aa\n                                        break;\n                                    }\n                                    v31 = v32 + 1;\n                                    v21 = v31;\n                                    v16 = v30;\n                                }\n                                goto lab_0x4043aa;\n                            } else {\n                                goto lab_0x4043aa_2;\n                            }\n                        }\n                    }\n                    case 1: {\n                        goto lab_0x403e00;\n                    }\n                    default: {\n                        int64_t v33; // 0x4034d7\n                        char v34; // 0x403ebd\n                        unsigned char v35; // 0x4034d7\n                        if (*(char *)v33 < 125) {\n                            // 0x403ec8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403edf\n                                v3 = 0x100000000 * v28 >> 32;\n                                v5 = 0x100000000 * v7 >> 32;\n                                v9 = 0x100000000 * v11 >> 32;\n                                goto lab_0x40389a_2;\n                            }\n                        }\n                        int64_t v36 = v33 + 1; // 0x403eb0\n                        v33 = v36;\n                        // 0x403e9c\n                        int64_t v37; // 0x403ea9\n                        while (v37 != v36) {\n                            // 0x403ebd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403ec8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403edf\n                                    v3 = 0x100000000 * v28 >> 32;\n                                    v5 = 0x100000000 * v7 >> 32;\n                                    v9 = 0x100000000 * v11 >> 32;\n                                    goto lab_0x40389a_2;\n                                }\n                            }\n                            // 0x403eb0\n                            v36 = v33 + 1;\n                            v33 = v36;\n                        }\n                        goto lab_0x403e00;\n                    }\n                }\n            }\n          lab_0x404379_2:\n            // 0x404379\n            v21 = v20;\n            v16 = 0x100000000 * v28 >> 32;\n            goto lab_0x4043aa;\n        } else {\n            // 0x403a74\n            __ctype_b_loc();\n            v17 = 0x100000000000000 * v14 >> 56;\n            v8 = v7;\n            v12 = v11;\n            goto lab_0x403681;\n        }\n    }\n  lab_0x403ca8:\n    // 0x403ca8\n    v3 = v14;\n    v5 = v7;\n    v9 = v11;\n    if (result != 0) {\n        // 0x4045aa\n        if (v7 > result) {\n            // 0x4045b3\n            *(char *)(v11 + result) = 0;\n        }\n        // 0x4038d7\n        return result;\n    }\n    goto lab_0x40389a_2;\n  lab_0x403681:;\n    int64_t v41 = v12;\n    int64_t v42 = v8;\n    int64_t v43 = v17;\n    if (v24 != 0) {\n        // 0x403690\n        v3 = v43;\n        v5 = v42;\n        v9 = v41;\n        if ((*(int32_t *)((v23 / 8 & 28) + v24) & 1 << (int32_t)(v22 % 32)) != 0) {\n            goto lab_0x40389a_2;\n        }\n    }\n    int64_t v44 = result; // 0x403791\n    char v45 = v22; // 0x403791\n    int64_t v46 = v43; // 0x403791\n    v2 = v4 + 1;\n    int64_t v47 = v42; // 0x403791\n    int64_t v48 = v41; // 0x403791\n    goto lab_0x40370d;\n  lab_0x40389a_2:;\n    // 0x4038d7\n    char * v38; // 0x4034d7\n    return function_403480(v9, v5, str, v3, 2, wc & -3, 0, (int64_t)v38, (int64_t)v38);\n  lab_0x403e00:\n    // 0x403e00\n    iswprint(wc);\n    int64_t v39 = v19 + str; // 0x403e1f\n    int32_t v40 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403e22\n    v18 = v39;\n    v20 = v39;\n    if (v40 != 0) {\n        // break -> 0x404379\n        goto lab_0x404379_2;\n    }\n    goto lab_0x403e2f;\n  lab_0x40364d:\n    // 0x40364d\n    v17 = v14;\n    v8 = v7;\n    v12 = v11;\n    v3 = v14;\n    v5 = v7;\n    v9 = v11;\n    if (v4 == 0) {\n        goto lab_0x40389a_2;\n    }\n    goto lab_0x403681;\n  lab_0x403625:;\n    bool v51 = v14 == 1; // 0x403630\n    if (v14 == -1) {\n        // 0x403632\n        v51 = *(char *)(str + 1) == 0;\n    }\n    // 0x40363e\n    v17 = v14;\n    v8 = v7;\n    v12 = v11;\n    if (!v51) {\n        goto lab_0x403681;\n    } else {\n        goto lab_0x40364d;\n    }\n  lab_0x4043aa:;\n    int64_t v52 = v16;\n    uint64_t v53 = v21;\n    int64_t v54 = 0x100000000 * v7 >> 32;\n    int64_t v55 = 0x100000000 * v11 >> 32;\n    v17 = v52;\n    v8 = v54;\n    v12 = v55;\n    if (v53 < 2) {\n        goto lab_0x403681;\n    } else {\n        uint64_t v56 = v53 + v4; // 0x403f7e\n        int64_t v57 = v4 + 1; // 0x404061\n        v44 = result;\n        v45 = v22;\n        v46 = v52;\n        v2 = v57;\n        v47 = v54;\n        v48 = v55;\n        int64_t v58 = v57; // 0x404068\n        char v59 = v22; // 0x404068\n        int64_t v60 = result; // 0x404068\n        if (v57 < v56) {\n            uint64_t v61 = v60;\n            if (v54 > v61) {\n                // 0x404031\n                *(char *)(v61 + v55) = v59;\n            }\n            char v62 = *(char *)(v58 + str); // 0x404035\n            int64_t v63 = v61 + 1; // 0x40403a\n            int64_t v64 = v58 + 1; // 0x404061\n            v44 = v63;\n            v45 = v62;\n            v46 = v52;\n            v2 = v64;\n            v47 = v54;\n            v48 = v55;\n            v58 = v64;\n            while (v64 < v56) {\n                // 0x40402c\n                v61 = v63;\n                if (v54 > v61) {\n                    // 0x404031\n                    *(char *)(v61 + v55) = v62;\n                }\n                // 0x404035\n                v62 = *(char *)(v58 + str);\n                v63 = v61 + 1;\n                v64 = v58 + 1;\n                v44 = v63;\n                v45 = v62;\n                v46 = v52;\n                v2 = v64;\n                v47 = v54;\n                v48 = v55;\n                v58 = v64;\n            }\n        }\n        goto lab_0x40370d;\n    }\n  lab_0x40370d:;\n    int64_t v49 = v48;\n    uint64_t v50 = v44;\n    if (v50 < v47) {\n        // 0x403712\n        *(char *)(v49 + v50) = v45;\n    }\n    // 0x403716\n    v1 = v50 + 1;\n    v13 = v46;\n    v6 = v47;\n    v10 = v49;\n    goto lab_0x403528_2;\n  lab_0x4043aa_2:\n    // 0x4043aa\n    v17 = v15;\n    v8 = 0x100000000 * v7 >> 32;\n    v12 = 0x100000000 * v11 >> 32;\n    goto lab_0x403681;\n}\n"
        },
        {
            "funcName": "function_4046b0",
            "funcStartAddr": "4046b0",
            "funcEndAddr": "40484e",
            "decompiledFuncCode": "int64_t function_4046b0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4046b2\n    int32_t * v3 = __errno_location(); // 0x4046cc\n    int64_t v4 = (int64_t)g22; // 0x4046d1\n    int32_t v5 = *v3; // 0x4046db\n    int64_t v6 = v4; // 0x4046f1\n    if (v2 >= (int64_t)*(int32_t *)0x60d250) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404849\n            function_405a40(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404700\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404707\n        int64_t v9; // 0x4046b0\n        if (g22 == &g23) {\n            int64_t v10 = function_405850(0, v8); // 0x40482a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x40482f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405850(v4, v8); // 0x40471b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40472a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40472a\n        int32_t v14 = v7; // 0x404731\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x404761\n    int64_t v17 = v15 + 8; // 0x404764\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40476b\n    int64_t * v19 = (int64_t *)v16; // 0x40476e\n    uint64_t v20 = *v19; // 0x40476e\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x404771\n    int64_t result = *v21; // 0x404771\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40477c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x404785\n    int64_t v24; // 0x4046b0\n    uint64_t v25 = function_403480(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x404794\n    if (v20 > v25) {\n        // 0x40480b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x4047a7\n    *v19 = v26;\n    if (result != (int64_t)&g42) {\n        // 0x4047b7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4057f0(v26); // 0x4047d1\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x4047eb\n    int64_t v28 = *v23; // 0x4047ee\n    int64_t v29; // 0x4046b0\n    function_403480(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40480b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "404884",
            "decompiledFuncCode": "int64_t function_404850(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404857\n    int64_t result = function_4059f0(a1 == 0 ? (int64_t)&g43 : a1, 56); // 0x404876\n    return result;\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "40489f",
            "decompiledFuncCode": "int64_t function_404890(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g43 : a1); // 0x40489c\n    return result;\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "4048af",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x4048a8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_4048b0",
            "funcStartAddr": "4048b0",
            "funcEndAddr": "4048e3",
            "decompiledFuncCode": "int64_t function_4048b0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 + 8 : a1 + 8; // 0x4048c9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4048ce\n    uint32_t v3 = *v2; // 0x4048ce\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4048d2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404903",
            "decompiledFuncCode": "int64_t function_4048f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g43 + 4 : a1 + 4); // 0x4048fc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "40493b",
            "decompiledFuncCode": "int64_t function_404910(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x404918\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404935\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40492c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_404940",
            "funcStartAddr": "404940",
            "funcEndAddr": "4049b2",
            "decompiledFuncCode": "int64_t function_404940(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g43 : a5; // 0x404962\n    int32_t * v2 = __errno_location(); // 0x40496b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x404984\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x404988\n    uint32_t v5 = *(int32_t *)v1; // 0x40498b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x404991\n    int64_t result = function_403480(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40499a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "404aa1",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g43 : a4; // 0x4049e2\n    int32_t * v2 = __errno_location(); // 0x4049e8\n    int64_t v3 = v1 + 8; // 0x4049ff\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404a07\n    int32_t * v5 = (int32_t *)v1; // 0x404a0a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x404a18\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x404a1b\n    int64_t v8 = function_403480(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x404a25\n    int64_t v9 = v8 + 1; // 0x404a2a\n    int64_t result = function_4057f0(v9); // 0x404a3f\n    function_403480(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x404a84\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x404a8d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ab0",
            "funcStartAddr": "404ab0",
            "funcEndAddr": "404aba",
            "decompiledFuncCode": "int64_t function_404ab0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ab0\n    return function_4049c0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404b55",
            "decompiledFuncCode": "int64_t function_404ac0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x404ac0\n    int64_t v2 = v1; // 0x404ac0\n    int64_t v3 = v2; // 0x404ad4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x404af3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g52;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404af0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g52;\n        }\n    }\n    int64_t v6 = v3; // 0x404b0d\n    if (g23 != 0x60d2c0) {\n        // 0x404b0f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g42;\n        v6 = &g52;\n    }\n    int64_t result = v6; // 0x404b31\n    if (g22 != &g23) {\n        // 0x404b33\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g52;\n    }\n    // 0x404b46\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404b60",
            "funcStartAddr": "404b60",
            "funcEndAddr": "404b71",
            "decompiledFuncCode": "int64_t function_404b60(void) {\n    // 0x404b60\n    int64_t v1; // 0x404b60\n    return function_4046b0(v1, v1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404b8a",
            "decompiledFuncCode": "int64_t function_404b80(void) {\n    // 0x404b80\n    int64_t v1; // 0x404b80\n    return function_4046b0(v1, v1, v1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404b90",
            "funcStartAddr": "404b90",
            "funcEndAddr": "404ba6",
            "decompiledFuncCode": "int64_t function_404b90(int64_t a1) {\n    // 0x404b90\n    return function_4046b0(0, a1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404bc2",
            "decompiledFuncCode": "int64_t function_404bb0(int64_t a1, int64_t a2) {\n    // 0x404bb0\n    return function_4046b0(0, a1, a2, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404c38",
            "decompiledFuncCode": "int64_t function_404bd0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404be0\n    return function_4046b0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404ca4",
            "decompiledFuncCode": "int64_t function_404c40(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404c50\n    return function_4046b0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cbc",
            "decompiledFuncCode": "int64_t function_404cb0(int64_t a1, int64_t a2) {\n    // 0x404cb0\n    return function_404bd0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404ccf",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404cc0\n    return function_404c40(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404d40",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x404cdd\n    int128_t v2 = __asm_movdqa(g44); // 0x404ce5\n    int128_t v3 = __asm_movdqa(g45); // 0x404ced\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404d02\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404d18\n    uint32_t v6 = *v5; // 0x404d18\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404d1d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4046b0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404d40",
            "funcStartAddr": "404d40",
            "funcEndAddr": "404d4d",
            "decompiledFuncCode": "int64_t function_404d40(int64_t a1, int64_t a2) {\n    // 0x404d40\n    return function_404cd0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d61",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1) {\n    // 0x404d50\n    return function_404cd0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404d7a",
            "decompiledFuncCode": "int64_t function_404d70(void) {\n    // 0x404d70\n    int64_t v1; // 0x404d70\n    return function_404cd0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404d80",
            "funcStartAddr": "404d80",
            "funcEndAddr": "404dee",
            "decompiledFuncCode": "int64_t function_404d80(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404d9a\n    return function_4046b0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e5c",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x404df7\n    int128_t v2 = __asm_movdqa(g44); // 0x404dff\n    int128_t v3 = __asm_movdqa(g45); // 0x404e07\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404e29\n    if (a2 == 0 || a3 == 0) {\n        // 0x404e57\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404e3a\n    return function_4046b0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404e69",
            "decompiledFuncCode": "int64_t function_404e60(void) {\n    // 0x404e60\n    int64_t v1; // 0x404e60\n    return function_404df0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404e87",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404e70\n    return function_404df0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404ea3",
            "decompiledFuncCode": "int64_t function_404e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404e90\n    return function_404df0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404eba",
            "decompiledFuncCode": "int64_t function_404eb0(void) {\n    // 0x404eb0\n    int64_t v1; // 0x404eb0\n    return function_4046b0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_404ec0",
            "funcStartAddr": "404ec0",
            "funcEndAddr": "404ed2",
            "decompiledFuncCode": "int64_t function_404ec0(int64_t a1, int64_t a2) {\n    // 0x404ec0\n    return function_4046b0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_404ee0",
            "funcStartAddr": "404ee0",
            "funcEndAddr": "404ef1",
            "decompiledFuncCode": "int64_t function_404ee0(int64_t a1, char a2) {\n    // 0x404ee0\n    return function_4046b0(a1, (int64_t)a2, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_404f00",
            "funcStartAddr": "404f00",
            "funcEndAddr": "404f16",
            "decompiledFuncCode": "int64_t function_404f00(int64_t * a1) {\n    // 0x404f00\n    return function_4046b0(0, (int64_t)a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "405171",
            "decompiledFuncCode": "int64_t function_404f20(void) {\n    // 0x404f20\n    int64_t v1; // 0x404f20\n    uint64_t v2 = v1;\n    char v3 = v2;\n    char v4 = v1;\n    int64_t v5 = v1 % 256; // 0x404f23\n    int64_t v6; // 0x404f20\n    int64_t v7; // 0x404f20\n    int64_t v8; // 0x404f20\n    int64_t v9; // 0x404f20\n    int64_t v10; // 0x404f20\n    int64_t v11; // 0x404f20\n    int64_t v12; // 0x404f20\n    int64_t v13; // 0x404f20\n    int64_t v14; // 0x404f20\n    int64_t v15; // 0x404f20\n    int64_t v16; // 0x404f20\n    int64_t v17; // 0x404f20\n    int64_t v18; // 0x404f20\n    int64_t v19; // 0x404f20\n    if (v3 == 45) {\n        int64_t v20; // 0x404f20\n        int64_t v21 = v20 + 1; // 0x404fd0\n        unsigned char v22 = *(char *)v21; // 0x404fd4\n        v20 = v21;\n        while (v22 == 48) {\n            // 0x404fd0\n            v21 = v20 + 1;\n            v22 = *(char *)v21;\n            v20 = v21;\n        }\n        int64_t v23 = (int64_t)v22 + 0xffffffd0; // 0x404fdf\n        if (v4 != 45) {\n            // 0x404fe8\n            if ((int32_t)v23 < 10) {\n                // 0x405028\n                return 0xffffffff;\n            }\n            // 0x404ff8\n            if (v4 != 48) {\n                // 0x405001\n                return (int32_t)v5 < 58 ? 0xffffffff : 0;\n            }\n            int64_t v24; // 0x404f20\n            int64_t v25 = v24 + 1; // 0x405100\n            unsigned char v26 = *(char *)v25; // 0x405104\n            v24 = v25;\n            while (v26 == 48) {\n                // 0x405100\n                v25 = v24 + 1;\n                v26 = *(char *)v25;\n                v24 = v25;\n            }\n            // 0x405001\n            return (int32_t)(int64_t)v26 < 58 ? 0xffffffff : 0;\n        }\n        int64_t v27; // 0x404f20\n        int64_t v28 = v27 + 1; // 0x405050\n        unsigned char v29 = *(char *)v28; // 0x405054\n        v27 = v28;\n        while (v29 == 48) {\n            // 0x405050\n            v28 = v27 + 1;\n            v29 = *(char *)v28;\n            v27 = v28;\n        }\n        int64_t v30 = v29; // 0x405054\n        v8 = v28;\n        v9 = v21;\n        v19 = v30;\n        v13 = v23;\n        if (v22 != v29) {\n            goto lab_0x405082;\n        } else {\n            // 0x405060\n            v11 = v28;\n            v18 = v30;\n            if ((int32_t)v23 < 10) {\n                int64_t v31 = v21 + 1; // 0x40506a\n                int64_t v32 = v28 + 1; // 0x40506e\n                unsigned char v33 = *(char *)v31; // 0x405072\n                int64_t v34 = v33;\n                while (v33 == *(char *)v32) {\n                    // 0x405060\n                    v11 = v32;\n                    v18 = v34;\n                    if ((int32_t)(v34 + 0xffffffd0) >= 10) {\n                        goto lab_0x405158;\n                    }\n                    v31++;\n                    v32++;\n                    v33 = *(char *)v31;\n                    v34 = v33;\n                }\n            } else {\n                goto lab_0x405158;\n            }\n        }\n    } else {\n        int64_t v35 = v2 % 256; // 0x404f20\n        if (v4 == 45) {\n            int64_t v36; // 0x404f20\n            int64_t v37 = v36 + 1; // 0x405010\n            unsigned char v38 = *(char *)v37; // 0x405014\n            v36 = v37;\n            while (v38 == 48) {\n                // 0x405010\n                v37 = v36 + 1;\n                v38 = *(char *)v37;\n                v36 = v37;\n            }\n            // 0x40501b\n            if ((int32_t)v38 < 58) {\n                // 0x405028\n                return 1;\n            }\n            // 0x405037\n            if (v3 != 48) {\n                // 0x40503c\n                return (int32_t)v35 < 58;\n            }\n            int64_t v39; // 0x404f20\n            int64_t v40 = v39 + 1; // 0x405030\n            unsigned char v41 = *(char *)v40; // 0x405034\n            v39 = v40;\n            while (v41 == 48) {\n                // 0x405030\n                v40 = v39 + 1;\n                v41 = *(char *)v40;\n                v39 = v40;\n            }\n            // 0x40503c\n            return (int32_t)(int64_t)v41 < 58;\n        }\n        int64_t v42 = v35; // 0x404f43\n        int64_t v43; // 0x404f20\n        if (v3 == 48) {\n            int64_t v44; // 0x404f20\n            int64_t v45 = v44 + 1; // 0x4050f0\n            unsigned char v46 = *(char *)v45; // 0x4050f4\n            v44 = v45;\n            while (v46 == 48) {\n                // 0x4050f0\n                v45 = v44 + 1;\n                v46 = *(char *)v45;\n                v44 = v45;\n            }\n            // 0x404f40\n            v43 = v45;\n            v42 = v46;\n        }\n        int64_t v47 = v5; // 0x404f4c\n        int64_t v48; // 0x404f20\n        if (v4 == 48) {\n            int64_t v49; // 0x404f20\n            int64_t v50 = v49 + 1; // 0x4050e0\n            unsigned char v51 = *(char *)v50; // 0x4050e4\n            v49 = v50;\n            while (v51 == 48) {\n                // 0x4050e0\n                v50 = v49 + 1;\n                v51 = *(char *)v50;\n                v49 = v50;\n            }\n            // 0x404f49\n            v48 = v50;\n            v47 = v51;\n        }\n        int64_t v52 = v42 + 0xffffffd0; // 0x404f55\n        v6 = v48;\n        v7 = v43;\n        v15 = v42;\n        v17 = v47;\n        v12 = v52;\n        if ((char)v47 != (char)v42) {\n            goto lab_0x404f80;\n        } else {\n            // 0x404f60\n            v10 = v48;\n            v14 = v42;\n            v16 = v47;\n            if ((int32_t)v52 < 10) {\n                int64_t v53 = v43 + 1; // 0x404f6a\n                int64_t v54 = v48 + 1; // 0x404f6e\n                unsigned char v55 = *(char *)v53; // 0x404f72\n                int64_t v56 = v55;\n                unsigned char v57 = *(char *)v54; // 0x404f75\n                int64_t v58 = v56 + 0xffffffd0; // 0x404f78\n                while (v55 == v57) {\n                    // 0x404f60\n                    v10 = v54;\n                    v14 = v56;\n                    v16 = v56;\n                    if ((int32_t)v58 >= 10) {\n                        goto lab_0x405140;\n                    }\n                    v53++;\n                    v54++;\n                    v55 = *(char *)v53;\n                    v56 = v55;\n                    v57 = *(char *)v54;\n                    v58 = v56 + 0xffffffd0;\n                }\n                // 0x404f80\n                v6 = v54;\n                v7 = v53;\n                v15 = v56;\n                v17 = v57;\n                v12 = v58;\n                goto lab_0x404f80;\n            } else {\n                goto lab_0x405140;\n            }\n        }\n    }\n  lab_0x405158:;\n    int64_t v59 = v11; // 0x40515d\n    int64_t v60 = v18; // 0x40515d\n    goto lab_0x405160;\n  lab_0x405140:;\n    int64_t v73 = v10; // 0x405140\n    int64_t v74 = v14 - v16 & 0xffffffff; // 0x405140\n    int64_t v75 = v16; // 0x405140\n    goto lab_0x405142;\n  lab_0x405082:\n    // 0x405082\n    v59 = v8;\n    v60 = v19;\n    int64_t v61; // 0x404f20\n    if ((int32_t)v13 < 10) {\n        int64_t v76 = 1;\n        unsigned char v77 = *(char *)(v76 + v9); // 0x4050a0\n        while (v77 == 57 || (int32_t)v77 < 57) {\n            // 0x4050a0\n            int64_t v78; // 0x404f20\n            v76 = v78 + 1;\n            v77 = *(char *)(v76 + v9);\n            v78 = v76;\n        }\n        // 0x4050b2\n        v61 = v8;\n        if ((int32_t)v19 >= 58) {\n            // 0x405129\n            return v76 != 0 ? 0xffffffff : 0;\n        }\n        goto lab_0x4050ba;\n    } else {\n        goto lab_0x405160;\n    }\n  lab_0x404f80:;\n    int64_t v79 = v15 - v17 & 0xffffffff; // 0x404f80\n    v73 = v6;\n    v74 = v79;\n    v75 = v17;\n    int64_t v69; // 0x404f20\n    int64_t v71; // 0x404f20\n    int64_t v72; // 0x404f20\n    if ((int32_t)v12 < 10) {\n        int64_t v80 = 1;\n        int64_t v81 = v80; // 0x404fa0\n        while ((int32_t)*(char *)(v80 + v7) < 58) {\n            // 0x404f90\n            v80 = v81 + 1;\n            v81 = v80;\n        }\n        // 0x404fa2\n        v69 = v6;\n        v72 = v79;\n        v71 = v80;\n        if ((int32_t)v17 >= 58) {\n            // 0x405120\n            return v80 != 0;\n        }\n        goto lab_0x404fae;\n    } else {\n        goto lab_0x405142;\n    }\n  lab_0x405160:\n    // 0x405160\n    v61 = v59;\n    if ((int32_t)v60 >= 58) {\n        // 0x405028\n        return 0;\n    }\n    goto lab_0x4050ba;\n  lab_0x405142:\n    // 0x405142\n    v69 = v73;\n    v72 = v74;\n    v71 = 0;\n    if ((int32_t)v75 >= 58) {\n        // 0x405028\n        return 0;\n    }\n    goto lab_0x404fae;\n  lab_0x4050ba:;\n    int64_t v62 = 1;\n    unsigned char v63 = *(char *)(v62 + v61); // 0x4050c0\n    int64_t v64 = v62; // 0x4050cf\n    while (v63 == 57 || (int32_t)v63 < 57) {\n        // 0x4050c0\n        v62 = v64 + 1;\n        v63 = *(char *)(v62 + v61);\n        v64 = v62;\n    }\n    // 0x4050d1\n    int64_t v65; // 0x404f20\n    if (v65 != v62) {\n        // 0x4050d6\n        return v65 < v62 ? 1 : 0xffffffff;\n    }\n    // 0x405110\n    int64_t v66; // 0x404f20\n    return v65 == 0 ? 0 : v66 & 0xffffffff;\n  lab_0x404fae:;\n    int64_t v67 = 1;\n    unsigned char v68 = *(char *)(v67 + v69); // 0x404fb0\n    int64_t v70 = v67; // 0x404fbf\n    while (v68 == 57 || (int32_t)v68 < 57) {\n        // 0x404fb0\n        v67 = v70 + 1;\n        v68 = *(char *)(v67 + v69);\n        v70 = v67;\n    }\n    // 0x404fc1\n    if (v71 == v67) {\n        // 0x405110\n        return v71 == 0 ? 0 : v72 & 0xffffffff;\n    }\n    // 0x404fca\n    return v71 < v67 ? 0xffffffff : 1;\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "405231",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, int64_t a2, int32_t file_name, int32_t line_num, int64_t a5, int64_t a6) {\n    int64_t v1 = function_405bb0(a5, a6); // 0x40519a\n    if (v1 == 0) {\n        // 0x405205\n        error(0, *__errno_location(), dcgettext(NULL, \"unable to display error message\", 5));\n        abort();\n        // UNREACHABLE\n    }\n    int32_t status = a1;\n    int32_t err_num = a2;\n    if (file_name == 0) {\n        // 0x4051e0\n        error(status, err_num, \"%s\", (char *)v1);\n        free((int64_t *)v1);\n        return &g52;\n    }\n    // 0x4051ac\n    error_at_line(status, err_num, (char *)(int64_t)file_name, line_num, \"%s\", (char *)v1);\n    free((int64_t *)v1);\n    return &g52;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "40524f",
            "decompiledFuncCode": "int64_t function_405240(int32_t a1, int32_t a2, int64_t a3, int64_t * a4) {\n    // 0x405240\n    return function_405180((int64_t)a1, (int64_t)a2, 0, 0, a3, (int64_t)a4);\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "40562d",
            "decompiledFuncCode": "int64_t function_405250(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4052e8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40526c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405286\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4052cb\n    if (a6 < 10) {\n        // 0x4052da\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4053d2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "405650",
            "decompiledFuncCode": "int64_t function_405630(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405630\n    if (a5 == 0) {\n        // 0x40564b\n        return function_405250(a1, a2, a3, a4, a5, 0, (int64_t)&g52);\n    }\n    int64_t v1 = 0; // 0x405637\n    v1++;\n    int64_t v2 = v1; // 0x405649\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405640\n        v1++;\n        v2 = v1;\n    }\n    // 0x40564b\n    return function_405250(a1, a2, a3, a4, a5, v2, (int64_t)&g52);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4056b0",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405650\n    int64_t v3 = &v2; // 0x405650\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405683\n    int64_t v6; // 0x40566d\n    int64_t * v7; // 0x40568b\n    int64_t v8; // 0x40568b\n    int64_t v9; // 0x405697\n    if (v5 < 48) {\n        // 0x405660\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4056a3\n            break;\n        }\n    } else {\n        // 0x40568b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4056a3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405681\n    while (v4 != 9) {\n        // 0x405679\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405660\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4056a3\n                break;\n            }\n        } else {\n            // 0x40568b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4056a3\n                break;\n            }\n        }\n        // 0x405679\n        v10 = 10;\n    }\n    // 0x4056a3\n    return function_405250(a1, a2, a3, a4, v3, v10, (int64_t)&g52);\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "40576c",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t a1, int64_t * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4056b0\n    int64_t v1; // bp-168, 0x4056b0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4056b0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4056b0\n    int64_t v8; // 0x4056b0\n    int64_t v9; // bp-56, 0x4056b0\n    int64_t v10; // 0x405715\n    int64_t v11; // 0x405739\n    if ((int32_t)v6 < 48) {\n        // 0x405700\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405750\n            break;\n        }\n    } else {\n        // 0x405732\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405750\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40572a\n    int64_t v13 = 10; // 0x40572a\n    while (v5 != 9) {\n        // 0x40572c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405700\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405750\n                break;\n            }\n        } else {\n            // 0x405732\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405750\n                break;\n            }\n        }\n        // 0x405722\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405750\n    int64_t v14; // bp-136, 0x4056b0\n    int64_t result = function_405250(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g52); // 0x40575f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "4057e4",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1) {\n    // 0x405770\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4057d3\n    return fputs_unlocked(v1, g27);\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "40580a",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4057f4\n    if (size != 0 != (mem == NULL)) {\n        // 0x405803\n        return (int64_t)mem;\n    }\n    // 0x405805\n    function_405a40(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405831",
            "decompiledFuncCode": "int64_t function_405810(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405813\n    int64_t v2 = v1; // 0x405813\n    if (v2 < 0) {\n        // 0x40582b\n        function_405a40(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405829\n        return function_4057f0(v2);\n    }\n    // 0x40582b\n    function_405a40(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405840",
            "funcStartAddr": "405840",
            "funcEndAddr": "405842",
            "decompiledFuncCode": "int64_t function_405840(void) {\n    // 0x405840\n    int64_t v1; // 0x405840\n    return function_4057f0(v1);\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "405886",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405878\n        free(v1);\n        return (int32_t)&g52 ^ (int32_t)&g52;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405861\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405870\n        return (int64_t)mem;\n    }\n    // 0x405881\n    function_405a40(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "4058b1",
            "decompiledFuncCode": "int64_t function_405890(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405893\n    int64_t v2 = v1; // 0x405893\n    if (v2 < 0) {\n        // 0x4058ab\n        function_405a40(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4058a9\n        return function_405850(a1, v2);\n    }\n    // 0x4058ab\n    function_405a40(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "405946",
            "decompiledFuncCode": "int64_t function_4058c0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40591b\n            function_405a40(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405850(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405903\n    if (a2 == 0) {\n        // 0x405928\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405908\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40591b\n        function_405a40(a1);\n        // UNREACHABLE\n    }\n    // 0x4058ea\n    *(int64_t *)a2 = v2;\n    return function_405850(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405950",
            "funcStartAddr": "405950",
            "funcEndAddr": "4059a0",
            "decompiledFuncCode": "int64_t function_405950(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405950\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40599a\n            function_405a40(a1);\n            // UNREACHABLE\n        }\n        // 0x405972\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405850(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405985\n        *(int64_t *)a2 = 128;\n        return function_405850(0, 128);\n    }\n    // 0x405998\n    if (a2 < 0) {\n        // 0x40599a\n        function_405a40(a1);\n        // UNREACHABLE\n    }\n    // 0x405972\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405850(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "4059b7",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2) {\n    // 0x4059a0\n    return (int64_t)memset((int64_t *)function_4057f0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "4059ee",
            "decompiledFuncCode": "int64_t function_4059c0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4059c7\n    if ((int64_t)v1 < 0) {\n        // 0x4059e9\n        function_405a40(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4059e9\n        function_405a40(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4059da\n    if (mem != NULL) {\n        // 0x4059e4\n        return (int64_t)mem;\n    }\n    // 0x4059e9\n    function_405a40(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059f0",
            "funcStartAddr": "4059f0",
            "funcEndAddr": "405a18",
            "decompiledFuncCode": "int64_t function_4059f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4057f0(a2); // 0x4059ff\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405a20",
            "funcStartAddr": "405a20",
            "funcEndAddr": "405a33",
            "decompiledFuncCode": "int64_t function_405a20(int64_t str) {\n    // 0x405a20\n    return function_4059f0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405a71",
            "decompiledFuncCode": "int64_t function_405a40(int64_t a1) {\n    // 0x405a40\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405a80",
            "funcStartAddr": "405a80",
            "funcEndAddr": "405ba7",
            "decompiledFuncCode": "int64_t function_405a80(int64_t a1, int64_t a2) {\n    int64_t v1 = a2;\n    int128_t v2 = *(int128_t *)&v1; // 0x405a8e\n    int128_t v3; // 0x405a80\n    __asm_movups(v3, __asm_movdqu(v2));\n    int64_t result; // 0x405a80\n    int64_t v4; // 0x405a80\n    if (a1 == 0) {\n        int64_t v5 = function_4057f0(1); // 0x405b75\n        v4 = v5;\n        result = v5;\n    } else {\n        int64_t v6 = v2;\n        int64_t v7 = 0; // 0x405abb\n        int64_t v8 = a1; // 0x405abb\n        int64_t v9 = v3;\n        int32_t v10 = v3;\n        int64_t str; // 0x405a80\n        int64_t v11; // 0x405a80\n        int64_t v12; // 0x405a80\n        int64_t v13; // 0x405a80\n        int32_t v14; // 0x405a80\n        int32_t v15; // 0x405ac2\n        if (v10 < 48) {\n            // 0x405ac0\n            v15 = (int32_t)v9 + 8;\n            v14 = v15;\n            v13 = v15;\n            v11 = v12;\n            str = (v9 & 0xffffffff) + *(int64_t *)(a2 + 16);\n        } else {\n            // 0x405aea\n            v14 = v10;\n            v13 = v9;\n            v11 = v12 + 8;\n            str = v12;\n        }\n        uint64_t v16 = v7 + (int64_t)strlen((char *)*(int64_t *)str); // 0x405ad4\n        int64_t v17 = v16 < v7 ? -1 : v16; // 0x405ad7\n        v8--;\n        v7 = v17;\n        while (v8 != 0) {\n            int64_t v18 = v11;\n            v9 = v13;\n            v10 = v14;\n            if (v10 < 48) {\n                // 0x405ac0\n                v15 = (int32_t)v9 + 8;\n                v14 = v15;\n                v13 = v15;\n                v11 = v18;\n                str = (v9 & 0xffffffff) + *(int64_t *)(a2 + 16);\n            } else {\n                // 0x405aea\n                v14 = v10;\n                v13 = v9;\n                v11 = v18 + 8;\n                str = v18;\n            }\n            // 0x405acc\n            v16 = v7 + (int64_t)strlen((char *)*(int64_t *)str);\n            v17 = v16 < v7 ? -1 : v16;\n            v8--;\n            v7 = v17;\n        }\n        if (v17 >= 0x80000000) {\n            // 0x405b98\n            *__errno_location() = 75;\n            // 0x405b83\n            return 0;\n        }\n        int64_t v19 = function_4057f0(v17 + 1); // 0x405b11\n        int64_t * v20 = (int64_t *)(v6 + 8);\n        int64_t v21 = v19; // 0x405b1c\n        int64_t v22 = a1; // 0x405b1c\n        uint32_t v23 = (int32_t)v2; // 0x405b53\n        int64_t v24; // 0x405a80\n        int64_t v25; // 0x405b5c\n        if (v23 < 48) {\n            // 0x405b20\n            *(int32_t *)v6 = v23 + 8;\n            v24 = *(int64_t *)(v6 + 16) + (int64_t)v23;\n        } else {\n            // 0x405b5c\n            v25 = *v20;\n            *v20 = v25 + 8;\n            v24 = v25;\n        }\n        int64_t str2 = *(int64_t *)v24; // 0x405b2e\n        int32_t len = strlen((char *)str2); // 0x405b34\n        memcpy((int64_t *)v21, (int64_t *)str2, len);\n        v21 += (int64_t)len;\n        v22--;\n        v4 = v21;\n        result = v19;\n        while (v22 != 0) {\n            // 0x405b2e\n            v23 = *(int32_t *)&v1;\n            if (v23 < 48) {\n                // 0x405b20\n                *(int32_t *)v6 = v23 + 8;\n                v24 = *(int64_t *)(v6 + 16) + (int64_t)v23;\n            } else {\n                // 0x405b5c\n                v25 = *v20;\n                *v20 = v25 + 8;\n                v24 = v25;\n            }\n            // 0x405b2e\n            str2 = *(int64_t *)v24;\n            len = strlen((char *)str2);\n            memcpy((int64_t *)v21, (int64_t *)str2, len);\n            v21 += (int64_t)len;\n            v22--;\n            v4 = v21;\n            result = v19;\n        }\n    }\n    // 0x405b80\n    *(char *)v4 = 0;\n    // 0x405b83\n    return result;\n}\n"
        },
        {
            "funcName": "function_405bb0",
            "funcStartAddr": "405bb0",
            "funcEndAddr": "405c3a",
            "decompiledFuncCode": "int64_t function_405bb0(int64_t a1, int64_t a2) {\n    char v1 = a1;\n    if (v1 == 0) {\n        // 0x405be8\n        return 0;\n    }\n    if (v1 == 37) {\n        // 0x405bbf\n        if (*(char *)(a1 + 1) == 115) {\n            int64_t result = 1; // 0x405bdc\n            int64_t v2 = 2 * result + a1;\n            char v3 = *(char *)v2; // 0x405be0\n            while (v3 != 0) {\n                if (v3 != 37) {\n                    goto lab_0x405bf8_2;\n                }\n                // 0x405bd5\n                if (*(char *)(v2 + 1) != 115) {\n                    goto lab_0x405bf8_2;\n                }\n                result++;\n                v2 = 2 * result + a1;\n                v3 = *(char *)v2;\n            }\n            // 0x405be8\n            return result;\n        }\n    }\n  lab_0x405bf8_2:;\n    // 0x405bf8\n    int64_t result2; // bp-16, 0x405bb0\n    if ((int32_t)function_405cc0(&result2, a1, a2) >= 0) {\n        // 0x405c0c\n        return result2;\n    }\n    // 0x405c20\n    if (*__errno_location() != 12) {\n        // 0x405be8\n        return 0;\n    }\n    // 0x405c35\n    function_405a40((int64_t)&result2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405cba",
            "decompiledFuncCode": "int64_t function_405c40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405c4b\n    int64_t v2 = (int64_t)&g12; // 0x405c4b\n    int64_t v3; // 0x405c40\n    int64_t v4; // 0x405c40\n    int64_t n; // 0x405c40\n    if (a2 == 0) {\n        goto lab_0x405c92;\n    } else {\n        // 0x405c4d\n        if (a3 == 0) {\n            // 0x405c78\n            return -2;\n        }\n        // 0x405c59\n        n = a3;\n        v4 = a2;\n        v3 = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == 0) {\n            goto lab_0x405c92;\n        } else {\n            goto lab_0x405c64;\n        }\n    }\n  lab_0x405c92:\n    // 0x405c92\n    n = v1;\n    v4 = v2;\n    int64_t v5; // bp-28, 0x405c40\n    v3 = &v5;\n    goto lab_0x405c64;\n  lab_0x405c64:;\n    int32_t * pwc = (int32_t *)v3; // 0x405c6a\n    char * wstr = (char *)v4; // 0x405c6a\n    int64_t ps; // 0x405c40\n    int32_t v6 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405c6a\n    int64_t result = v6; // 0x405c6a\n    if (v6 < 0xfffffffe) {\n        // 0x405c78\n        return result;\n    }\n    int64_t result2 = result; // 0x405ca9\n    if ((char)function_405d80(0, v4) == 0) {\n        // 0x405cab\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405c78\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405cc0",
            "funcStartAddr": "405cc0",
            "funcEndAddr": "405d19",
            "decompiledFuncCode": "int64_t function_405cc0(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x405cc0\n    int32_t v1; // bp-16, 0x405cc0\n    int64_t v2; // 0x405cc0\n    int64_t v3 = function_406470(0, (int64_t *)&v1, a2, a3, v2, v2, v2, (int64_t)&g52); // 0x405cd5\n    if (v3 == 0) {\n        // 0x405cf2\n        return 0xffffffff;\n    }\n    // 0x405cdf\n    int64_t result; // 0x405cc0\n    if (v1 > -1) {\n        // 0x405ced\n        *a1 = v3;\n        result = v1;\n    } else {\n        // 0x405cf8\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x405cf2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d20",
            "funcStartAddr": "405d20",
            "funcEndAddr": "405d7d",
            "decompiledFuncCode": "int64_t function_405d20(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405d27\n    int64_t v2; // 0x405d20\n    int64_t result = function_406350(a1, v2); // 0x405d38\n    if ((v2 & 32) != 0) {\n        // 0x405d60\n        if ((int32_t)result == 0) {\n            // 0x405d64\n            *__errno_location() = 0;\n        }\n        // 0x405d5a\n        return 0xffffffff;\n    }\n    // 0x405d41\n    if ((int32_t)result == 0) {\n        // 0x405d5a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405d48\n    if (v1 == 0) {\n        // 0x405d4a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405d5a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "405dde",
            "decompiledFuncCode": "int64_t function_405d80(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405d86\n    if (locale == NULL) {\n        // 0x405db3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405d86\n    bool v2; // 0x405d80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x405d80\n    int64_t v5 = v1; // 0x405d80\n    int64_t v6 = 2; // 0x405da5\n    unsigned char v7 = *(char *)v5; // 0x405da5\n    char v8 = *(char *)v4; // 0x405da5\n    char v9 = v8; // 0x405da5\n    bool v10 = false; // 0x405da5\n    while (v7 == v8) {\n        // 0x405d98\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405db1\n    int64_t v13 = v1; // 0x405db1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405db3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405db1\n    unsigned char v15 = *(char *)v13; // 0x405dcd\n    char v16 = *(char *)v12; // 0x405dcd\n    char v17 = v16; // 0x405dcd\n    bool v18 = false; // 0x405dcd\n    while (v15 == v16) {\n        // 0x405dc0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "406342",
            "decompiledFuncCode": "int64_t function_405de0(void) {\n    char * v1 = nl_langinfo(14); // 0x405df6\n    char * v2 = g46; // 0x405dfb\n    char * v3; // 0x405de0\n    int64_t v4; // 0x405de0\n    int64_t v5; // 0x405de0\n    int64_t v6; // 0x405de0\n    int64_t v7; // 0x405de0\n    int32_t size; // 0x405de0\n    int32_t size2; // 0x405de0\n    int32_t len; // 0x405eb2\n    int64_t v8; // 0x405eb2\n    char * env_val; // 0x405e9d\n    if (v2 == NULL) {\n        // 0x405e98\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405f05;\n        } else {\n            // 0x405eaa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405f05;\n            } else {\n                // 0x405eaf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405e9d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406335\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405f05;\n                    } else {\n                        // 0x4062a9\n                        size2 = len + 14;\n                        goto lab_0x405ecb;\n                    }\n                } else {\n                    goto lab_0x405ecb;\n                }\n            }\n        }\n    } else {\n        // 0x405de0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405e1a;\n    }\n  lab_0x40614c:;\n    // 0x40614c\n    struct _IO_FILE * stream; // 0x405f8b\n    int32_t v10 = __uflow(stream); // 0x40614f\n    int64_t v11; // 0x405de0\n    int64_t v12 = v11; // 0x406159\n    int64_t v13; // 0x405de0\n    int64_t v14 = v13; // 0x406159\n    int32_t v15 = v10; // 0x406159\n    int64_t v16; // 0x405de0\n    int64_t v17 = v16; // 0x406159\n    int64_t v18 = v11; // 0x406159\n    int64_t v19 = v13; // 0x406159\n    int64_t v20 = v16; // 0x406159\n    if (v10 == -1) {\n        // break -> 0x40615f\n        goto lab_0x40615f;\n    }\n    goto lab_0x405fd9;\n  lab_0x405fce:;\n    // 0x405fce\n    int64_t v90; // 0x405de0\n    int64_t * v32; // 0x405fc0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405de0\n    v12 = v89;\n    int64_t v91; // 0x405de0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405de0\n    v17 = v92;\n    goto lab_0x405fd9;\n  lab_0x405fd9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405de0\n    int32_t v25; // bp-120, 0x405de0\n    int32_t v26; // bp-184, 0x405de0\n    int64_t v27; // 0x405f8b\n    int64_t v28; // 0x405fa8\n    int64_t v29; // 0x405fad\n    int64_t * v30; // 0x405fc4\n    switch (c) {\n        case 32: {\n            goto lab_0x405fc0;\n        }\n        case 10: {\n            goto lab_0x405fc0;\n        }\n        case 9: {\n            goto lab_0x405fc0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4061b1\n            int32_t v33; // 0x405de0\n            char v34; // 0x405de0\n            int32_t v35; // 0x4061be\n            if (v31 < *v30) {\n                // 0x406190\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4061bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4061b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406190\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4061bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4061a0\n                v36 = v33;\n            }\n            // 0x40628f\n            if (v36 == -1) {\n                // break -> 0x40615f\n                break;\n            }\n            goto lab_0x405fc0;\n        }\n        default: {\n            // 0x405fef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40615f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406018\n            int64_t v39 = v37 + 4; // 0x40601a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406026\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406028\n            while (v41 == 0) {\n                // 0x406018\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406046\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406052\n            int64_t v45 = v43 + 4; // 0x406054\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406060\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406062\n            while (v47 == 0) {\n                // 0x406052\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40604f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406078\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406088\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40608c\n            int64_t v52 = v51 + v48; // 0x406095\n            int64_t * mem; // 0x405de0\n            int64_t v53; // 0x405de0\n            int64_t v54; // 0x405de0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4061cb\n                int64_t v56 = v55 + 3; // 0x4061d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4060b1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4060c0\n            if (mem == NULL) {\n                // 0x4062ec\n                free((int64_t *)v21);\n                function_406350(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x405f64;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4060d8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4060e2\n            uint32_t v62 = (int32_t)v59; // 0x4060e5\n            int64_t v63; // 0x405de0\n            if (v62 >= 8) {\n                // 0x4061f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40620e\n                int64_t v66 = v61 - v65; // 0x406212\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40621d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40622e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40622e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40622b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4062bf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4060f7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4060fb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40610b\n            int64_t v74 = v60 - 1; // 0x40610f\n            uint32_t v75 = (int32_t)v73; // 0x406114\n            int64_t v76; // 0x405de0\n            if (v75 >= 8) {\n                // 0x406242\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40624c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40625c\n                int64_t v80 = v74 - v79; // 0x406260\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40626b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40627b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406279\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4062d6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4062de\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406126\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40612a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406323\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40613e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405fce;\n            } else {\n                goto lab_0x40614c;\n            }\n        }\n    }\n  lab_0x405fc0:;\n    int64_t v93 = v23; // 0x405de0\n    int64_t v94 = v22; // 0x405de0\n    int64_t v95 = v21; // 0x405de0\n    goto lab_0x405fc0_2;\n  lab_0x405f05:;\n    int64_t * mem3 = malloc(size); // 0x405f05\n    int64_t v97 = (int64_t)&g12; // 0x405f10\n    int64_t v98; // 0x405de0\n    int64_t path; // 0x405de0\n    if (mem3 == NULL) {\n        goto lab_0x405ee2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405f05\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405f26;\n    }\n  lab_0x405e1a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x405e0d\n    char v100 = *v3; // 0x405e1a\n    int64_t v101; // 0x405de0\n    if (v100 == 0) {\n        // 0x405e74\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405de0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405de0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405e60\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405e67;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405e30\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405e3d\n        char v107 = *(char *)v106; // 0x405e42\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405e74\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405e4b\n    v104 = v103 + 1;\n  lab_0x405e67:\n    // 0x405e74\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405ee2:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405e1a;\n  lab_0x405f26:;\n    int64_t v109 = v98 + path; // 0x405f26\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405f52\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405f81\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4062b2\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405fa5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405fc0_2:;\n                uint64_t v96 = *v32; // 0x405fc0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40614c;\n                } else {\n                    goto lab_0x405fce;\n                }\n            }\n          lab_0x40615f:\n            // 0x40615f\n            function_406350(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40617e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405f64;\n  lab_0x405ecb:;\n    int64_t * mem4 = malloc(size2); // 0x405ecb\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405f71\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405f26;\n    } else {\n        goto lab_0x405ee2;\n    }\n  lab_0x405f64:\n    // 0x405f64\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405ee2;\n}\n"
        },
        {
            "funcName": "function_406350",
            "funcStartAddr": "406350",
            "funcEndAddr": "4063cb",
            "decompiledFuncCode": "int64_t function_406350(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406357\n    if (fileno(stream) < 0) {\n        // 0x4063b7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40636a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40639b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4063b7\n            return fclose(stream);\n        }\n    }\n    // 0x40636c\n    if ((int32_t)function_4063d0(a1, v1) == 0) {\n        // 0x4063b7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406378\n    int32_t v3 = *v2; // 0x406380\n    int64_t result = fclose(stream); // 0x40638e\n    if (v3 != 0) {\n        // 0x4063c0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406390\n    return result;\n}\n"
        },
        {
            "funcName": "function_4063d0",
            "funcStartAddr": "4063d0",
            "funcEndAddr": "406410",
            "decompiledFuncCode": "int64_t function_4063d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4063ea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4063ea\n        return fflush(stream);\n    }\n    // 0x4063f8\n    function_406410(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406410",
            "funcStartAddr": "406410",
            "funcEndAddr": "406467",
            "decompiledFuncCode": "int64_t function_406410(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406410\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40641a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40644b\n    int64_t result = -1; // 0x406454\n    if (v1 != -1) {\n        // 0x406456\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406462\n    return result;\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "407f89",
            "decompiledFuncCode": "int64_t function_406470(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x406470\n    int64_t v1; // bp-1416, 0x406470\n    int64_t v2; // bp-1656, 0x406470\n    if ((int32_t)function_4081b0(a3, &v1, &v2) < 0) {\n        // 0x406ae0\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40647b\n    int64_t v4; // bp-1384, 0x406470\n    int64_t v5; // bp-1640, 0x406470\n    int64_t v6; // 0x406470\n    if ((int32_t)function_407f90(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x4073c7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x4073e3\n            free((int64_t *)v6);\n        }\n        // 0x4073e8\n        *__errno_location() = 22;\n        // 0x406ae0\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x4064db\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x4064e3\n    uint64_t v9 = v8 + v6; // 0x4064e7\n    int64_t v10; // 0x406470\n    char * v11; // 0x406470\n    int64_t v12; // 0x406470\n    if (v9 < v8) {\n        // 0x406b90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406a99;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x406b90\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x406a99;\n        } else {\n            uint64_t size = v9 + 6; // 0x4064f7\n            if (size < 4000) {\n                // 0x406640\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x406470\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x406534;\n            } else {\n                if (size == -1) {\n                    // 0x406b90\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x406a99;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x406518\n                    if (mem == NULL) {\n                        // 0x406b90\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x406a99;\n                    } else {\n                        // 0x40652d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x406534;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406a60_2:;\n    // 0x406a60\n    int64_t v14; // 0x406470\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x406a68\n    int64_t v17 = v16; // 0x406a76\n    int64_t v18 = v16; // 0x406a76\n    int64_t v19 = v15; // 0x406a76\n    int64_t v20; // 0x406558\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x406c88;\n    } else {\n        goto lab_0x406a81;\n    }\n  lab_0x406a99:\n    // 0x406a99\n    if (v6 != (int64_t)&v4) {\n        // 0x406ab0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x406acc\n        free((int64_t *)v6);\n    }\n    // 0x406ad1\n    *(int32_t *)v10 = 12;\n    // 0x406ae0\n    return 0;\n  lab_0x406534:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40656d\n    int64_t v23 = *v22; // 0x40656d\n    int64_t v24 = 0; // 0x406573\n    int64_t v25 = v20; // 0x406573\n    int64_t v26 = v21; // 0x406573\n    int64_t v27 = 0; // 0x406573\n    int64_t v28; // 0x406470\n    int64_t v29; // 0x406470\n    int64_t v30; // 0x406470\n    int64_t v31; // 0x406470\n    int64_t v32; // 0x406470\n    int64_t v33; // 0x406470\n    int64_t v34; // 0x406470\n    if (v23 == a3) {\n        goto lab_0x406b83;\n    } else {\n        int64_t v35 = v23 - a3; // 0x406579\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40658b;\n    }\n  lab_0x406b83:;\n    int64_t v36 = v24; // 0x406b86\n    float80_t v37; // 0x406470\n    float80_t v38 = v37; // 0x406b86\n    float80_t v39; // 0x406470\n    float80_t v40 = v39; // 0x406b86\n    int64_t v41 = v25; // 0x406b86\n    int64_t v42 = v26; // 0x406b86\n    int64_t v43 = v27; // 0x406b86\n    int64_t v44; // 0x406470\n    int64_t v45 = v44; // 0x406b86\n    goto lab_0x4066e8;\n  lab_0x4066e8:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x406470\n    int64_t v51; // 0x406470\n    int64_t v52; // 0x406470\n    int64_t v53; // 0x406470\n    int64_t v54; // 0x406470\n    int64_t v55; // 0x406470\n    int64_t v56; // 0x406470\n    int64_t v57; // 0x406470\n    int64_t dest_mem2; // 0x406470\n    int64_t dest_mem3; // 0x406470\n    int64_t v58; // 0x406470\n    float80_t v59; // 0x406470\n    float80_t v60; // 0x406470\n    float80_t v61; // 0x406470\n    float80_t v62; // 0x406470\n    float80_t v63; // 0x406470\n    uint64_t v64; // 0x407816\n    char * v65; // 0x4066fc\n    char v66; // 0x4066fc\n    int64_t v67; // 0x406724\n    uint32_t v68; // 0x406728\n    int64_t v69; // 0x406b05\n    char v70; // 0x406470\n    if (v1 == v49) {\n        // 0x407810\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x407f7a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x407872;\n            } else {\n                goto lab_0x406a60_2;\n            }\n        } else {\n            // 0x407820\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x407872;\n            } else {\n                if (v47 != 0) {\n                    // 0x407e3d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406a60_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x407e43\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40783e;\n                        } else {\n                            goto lab_0x407e4f;\n                        }\n                    }\n                } else {\n                    // 0x40782e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40783e;\n                    } else {\n                        goto lab_0x407e4f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4066fc\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x406701\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x4072d0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x406a60_2;\n                } else {\n                    goto lab_0x406b62;\n                }\n            } else {\n                // 0x406b12\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x406b62;\n                } else {\n                    if (v47 != 0) {\n                        // 0x407400\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x406a60_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x407406\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x406b30;\n                            } else {\n                                goto lab_0x407412;\n                            }\n                        }\n                    } else {\n                        // 0x406b20\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x406b30;\n                        } else {\n                            goto lab_0x407412;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x406719\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g48 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x407090\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b67;\n                }\n                case 19: {\n                    // 0x407080\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b67;\n                }\n                case 20: {\n                    // 0x407068\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b67;\n                }\n                case 21: {\n                    goto lab_0x406c50;\n                }\n                case 22: {\n                    goto lab_0x406c50;\n                }\n                default: {\n                    // 0x40673a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x406be0\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x406bfd;\n                        } else {\n                            // 0x406be7\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x406770;\n                            } else {\n                                goto lab_0x406bfd;\n                            }\n                        }\n                    } else {\n                        goto lab_0x406770;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40658b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x406470\n    float80_t v77 = v76;\n    float80_t v78; // 0x406470\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x406470\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40658e\n    int64_t v89 = v85; // 0x40658e\n    int64_t v90 = v84; // 0x40658e\n    float80_t v91 = v79; // 0x40658e\n    float80_t v92 = v77; // 0x40658e\n    int64_t v93 = v75; // 0x40658e\n    int64_t v94 = v80; // 0x40658e\n    int64_t v95 = v81; // 0x40658e\n    int64_t v96 = v82; // 0x40658e\n    int64_t v97 = v87; // 0x40658e\n    int64_t v98; // 0x406470\n    int64_t v99; // 0x406470\n    int64_t v100; // 0x406470\n    int64_t v101; // 0x406470\n    int64_t v102; // 0x406470\n    if (v82 >= v87) {\n        goto lab_0x4066d9;\n    } else {\n        if (v82 != 0) {\n            // 0x406670\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x406a60_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x406676\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40668b;\n                } else {\n                    goto lab_0x40667e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4065b4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40669e;\n                } else {\n                    goto lab_0x4065c0;\n                }\n            } else {\n                goto lab_0x40667e;\n            }\n        }\n    }\n  lab_0x4066d9:\n    // 0x4066d9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x4066e8;\n  lab_0x407872:\n    // 0x407872\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40787a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40788b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x407897\n    if (v12 != 0) {\n        // 0x4078a3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x4078c2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4078de\n        free((int64_t *)v6);\n    }\n    // 0x4078e3\n    *a2 = v46;\n    // 0x406ae0\n    return result;\n  lab_0x406c50:\n    // 0x406c50\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x406b67;\n  lab_0x40667e:\n    // 0x40667e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        goto lab_0x40668b;\n    }\n  lab_0x406c88:\n    // 0x406c88\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x406a81;\n  lab_0x406a81:\n    if (v12 == 0) {\n        // 0x406b90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406a99;\n    } else {\n        // 0x406a91\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x406a99;\n    }\n  lab_0x406b62:\n    // 0x406b62\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x406b67;\n  lab_0x406770:;\n    int64_t v273 = (int64_t)v11; // 0x406770\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x406777\n    int64_t v275 = v273 + 1; // 0x40677b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x406784\n    if (v274 % 2 != 0) {\n        // 0x406786\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x406777\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x406797\n    if ((v277 & 2) != 0) {\n        // 0x406799\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4067a3\n    if ((v277 & 4) != 0) {\n        // 0x4067a5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4067af\n    if ((v277 & 8) != 0) {\n        // 0x4067b1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x4067bb\n    if ((v277 & 16) != 0) {\n        // 0x4067bd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x4067c7\n    if ((v277 & 64) != 0) {\n        // 0x4067c9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x4067d3\n    if ((v277 & 32) != 0) {\n        // 0x4067d5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x4067dd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x4067e1\n    int64_t v293 = v290; // 0x4067e8\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x4067f7\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40681a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40681e\n    int64_t v298 = v295; // 0x406825\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x406834\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40672a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x406860\n    int64_t v272; // 0x406470\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x406869\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x406c68;\n        } else {\n            if (v301 == 12) {\n                // 0x407428\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x406890;\n            } else {\n                // 0x406880\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x406c60\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x406c68;\n                } else {\n                    goto lab_0x406890;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406890;\n    }\n  lab_0x406b67:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x406b67\n    int64_t v111 = v55 + 88; // 0x406b6b\n    int64_t v112 = *(int64_t *)v111; // 0x406b6f\n    int64_t v113 = v49 + 1; // 0x406b72\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x406579\n        int64_t v115 = v114 + v105; // 0x40657f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x406ba8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x406a60_2;\n            } else {\n                goto lab_0x4066d9;\n            }\n        } else {\n            goto lab_0x40658b;\n        }\n    } else {\n        goto lab_0x406b83;\n    }\n  lab_0x40668b:;\n    int64_t v116 = v80 == v20; // 0x406692\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x4065c0;\n    } else {\n        goto lab_0x40669e;\n    }\n  lab_0x40669e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x406470\n    if (v102 != 0) {\n        goto lab_0x4065c0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4066ba\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x406c75;\n        } else {\n            // 0x4066c8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x4066d9;\n        }\n    }\n  lab_0x4065c0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x4065d7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x406a60_2;\n    } else {\n        // 0x4065fd\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x406625\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x4066d9;\n    }\n  lab_0x40783e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x407e04\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x406a60_2;\n        } else {\n            // 0x407e15\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407e2a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x407872;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x407861\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x406c75;\n        } else {\n            // 0x40786f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x407872;\n        }\n    }\n  lab_0x407e4f:\n    // 0x407e4f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        goto lab_0x40783e;\n    }\n  lab_0x406bfd:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x406bfd\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x406c01\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x406c05\n    int64_t v123 = 0; // 0x406c0c\n    int64_t v124 = v122; // 0x406c0c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x406c12\n        int64_t v126 = v120; // 0x406c1a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x407ba1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x407bb9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x407bcb\n            int64_t v131 = v128; // 0x407bd4\n            int64_t v132 = v130; // 0x407bd4\n            int64_t v133; // 0x406470\n            int64_t v134; // 0x407be6\n            if (v130 < v129) {\n                // 0x407bd6\n                if (v121 == v128) {\n                    // break -> 0x4069f0\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x4069db\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x4069f0\n                        goto lab_0x4069f0;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x407b98\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x407ba1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x407bd6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x4069f0\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x4069db\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x4069f0\n                            goto lab_0x4069f0;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x407b98\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x406c24\n            if (*(int32_t *)v135 != 5) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x406c30\n            int64_t v137 = v136; // 0x406c30\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x406c3d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x4069f0:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x4069f0\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x4069f4\n    int64_t v142; // 0x406470\n    int64_t v143; // 0x406470\n    int64_t v144; // 0x406470\n    if (v140 == v141) {\n        goto lab_0x4070a0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x406a01\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x407c04\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x407c0d\n            if (v141 == v146) {\n                goto lab_0x4070be;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x407c33\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x407c3a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x407c53\n                int64_t v152 = v151; // 0x407c5c\n                int64_t v153 = v149; // 0x407c5c\n                int64_t v154; // 0x406470\n                int64_t v155; // 0x407c67\n                if (v151 < v150) {\n                    // 0x407c5e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x406a60_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x407c7a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x406a60_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x407c20\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x407c29\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x407c5e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x406a60_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x407c7a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x406a60_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x407c20\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x406a2c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x406a13\n            if (*(int32_t *)v156 != 5) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x406a20\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x4070a0;\n            } else {\n                goto lab_0x406a2c;\n            }\n        }\n    }\n  lab_0x406890:\n    // 0x406890\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40689d\n    int64_t v160 = 0; // 0x4068a5\n    if (v159 != -1) {\n        // 0x4068ab\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40719c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x4068ce\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x4068dc\n        if (*(int32_t *)v162 != 5) {\n            // 0x40719c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x4068ef\n        int64_t v164; // bp-8, 0x406470\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x406470\n    uint64_t v165; // 0x406906\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x407338\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x406964\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x406a60_2;\n    } else {\n        // 0x406910\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x406964\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x407040\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x406a60_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x407046\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x406932;\n                } else {\n                    goto lab_0x407052;\n                }\n            }\n        } else {\n            // 0x406922\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x406932;\n            } else {\n                goto lab_0x407052;\n            }\n        }\n    }\n  lab_0x406b30:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x407359\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x406a60_2;\n        } else {\n            // 0x407371\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407382\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x406b62;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x406b51\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x406c75;\n        } else {\n            // 0x406b5f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x406b62;\n        }\n    }\n  lab_0x407412:\n    // 0x407412\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        goto lab_0x406b30;\n    }\n  lab_0x4070a0:\n    // 0x4070a0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x4070be;\n  lab_0x406c68:\n    // 0x406c68\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x406890;\n  lab_0x406c75:\n    // 0x406c75\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x406c88;\n  lab_0x4070be:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x4070c4\n    v14 = v48;\n    int64_t v170; // 0x406470\n    int64_t v171; // 0x406470\n    int64_t * v172; // 0x406470\n    int64_t v173; // 0x406470\n    int64_t v174; // bp-760, 0x406470\n    uint64_t size5; // 0x4070c8\n    if (v169 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        // 0x4070d9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x407139;\n        } else {\n            // 0x4070e5\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x406a60_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40710d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x406a60_2;\n                } else {\n                    goto lab_0x407139;\n                }\n            }\n        }\n    }\n  lab_0x406a2c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x4070be;\n    } else {\n        // 0x406a35\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x4070be;\n        } else {\n            goto lab_0x406a60_2;\n        }\n    }\n  lab_0x406932:\n    // 0x406932\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x4072f9\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x407314\n            if (v48 == v20 && v46 != 0) {\n                // 0x407322\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x406964\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x406953\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x406964\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x406a60_2;\n  lab_0x407052:\n    // 0x407052\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        goto lab_0x406932;\n    }\n  lab_0x407139:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x406470\n    int64_t v181; // 0x406470\n    int64_t v182; // 0x406470\n    int64_t v183; // 0x406470\n    int64_t v184; // 0x406470\n    int64_t v185; // 0x406470\n    int64_t v186; // 0x406470\n    int64_t v187; // 0x406470\n    int64_t v188; // 0x406470\n    int64_t v189; // 0x406470\n    int64_t v190; // 0x406470\n    int64_t v191; // 0x406470\n    int64_t v192; // 0x406470\n    int64_t v193; // 0x406470\n    float80_t v194; // 0x406470\n    float80_t v195; // 0x406470\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x407cb2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x407cc0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x407ded\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x4075f9;\n    } else {\n        // 0x407141\n        int64_t v198; // 0x406470\n        float80_t v199; // 0x406470\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x407901\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40790e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40776a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40716f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x407178\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40719c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x407ce6\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x407ce6\n                            v181 = v187 + 3;\n                            goto lab_0x407e61;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x407e61;\n                            } else {\n                                goto lab_0x407d22;\n                            }\n                        }\n                    } else {\n                        // 0x4079f3\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x4075e7;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x407a01\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x407f4a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x407a48\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x407a5b\n                                int64_t v207 = v176 & 0xffffffff; // 0x407a5e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x407a6c\n                                int64_t v209 = v187 + 1; // 0x407a89\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x407a9e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x407aab\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x4075f9;\n                        }\n                    }\n                } else {\n                    // 0x407798\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x407798\n                        v180 = v187 + 1;\n                        goto lab_0x407d47;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x407d47;\n                        } else {\n                            goto lab_0x4077b8;\n                        }\n                    }\n                }\n            } else {\n                // 0x4075d0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x4075e7;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x407b1c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x407b2d\n                    char v215 = *v213; // 0x407b34\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x407b70\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x407b7d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x407b45\n                        v182 = v218;\n                        int64_t v219; // 0x407b37\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x4075f9;\n                }\n            }\n        } else {\n            float80_t v220; // 0x406470\n            if (v220 != 0.0L) {\n                // 0x40719c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x4077eb\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x4077fa\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x407ad3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x4075f9;\n        }\n    }\n  lab_0x4075f9:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x4075fc\n    int64_t v229 = v228; // 0x407602\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x407604\n        int64_t v232 = v231 + v224; // 0x407607\n        int64_t v233 = v232 - v225; // 0x40760e\n        if ((v230 & 2) != 0) {\n            // 0x407ab3\n            v229 = v233;\n            int64_t v234 = v224; // 0x407ab6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x407ac0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x407ac0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x407925\n                int64_t v238 = v224; // 0x40792b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x407939\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x407930\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x407945\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x407958\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x407631\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x407651\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x407648\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40765a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x407668\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40719c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x407698\n    int64_t dest_mem5 = v48; // 0x4076a5\n    int64_t v250 = v248; // 0x4076a5\n    int64_t v251 = v47; // 0x4076a5\n    int64_t v252; // 0x406470\n    if (v47 - v46 > v248) {\n        goto lab_0x407720;\n    } else {\n        if (v249 < v46) {\n            // 0x4078f2\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x406a60_2;\n            } else {\n                goto lab_0x407720;\n            }\n        } else {\n            // 0x4076b0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x407720;\n            } else {\n                if (v47 != 0) {\n                    // 0x407c88\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406a60_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x407c8e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x4076ce;\n                        } else {\n                            goto lab_0x407c9a;\n                        }\n                    }\n                } else {\n                    // 0x4076be\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x4076ce;\n                    } else {\n                        goto lab_0x407c9a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x407720:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x407731\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40774d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x406b67;\n  lab_0x4075e7:\n    // 0x4075e7\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x4075f9;\n  lab_0x407d47:;\n    char * v257 = nl_langinfo(0x10000); // 0x407d7a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x407d8b\n    char v259 = *v257; // 0x407d92\n    int64_t v260 = v176 & 0xffffffff; // 0x407d95\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x407da3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x407dd0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x407ddd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x4077b8;\n  lab_0x4077b8:\n    // 0x4077b8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x4075f9;\n  lab_0x4076ce:\n    // 0x4076ce\n    if (v48 == 0 || v48 == v20) {\n        // 0x40796b\n        int64_t size7; // 0x406470\n        int64_t * mem12 = malloc((int32_t)size7); // 0x407982\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x406a60_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40798e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x4079b9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x407720;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x4076fd\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x406a60_2;\n        } else {\n            // 0x40770b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x407720;\n        }\n    }\n  lab_0x407c9a:\n    // 0x407c9a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x406a60_2;\n    } else {\n        goto lab_0x4076ce;\n    }\n  lab_0x407e61:;\n    int64_t v265 = v187 + 4; // 0x407e61\n    char v266 = *nl_langinfo(0x10000); // 0x407eac\n    int64_t v267 = v176 & 0xffffffff; // 0x407eaf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x407eb6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x407edd\n        int64_t v270 = v265 + 1; // 0x407ee5\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x407d22;\n  lab_0x407d22:\n    // 0x407d22\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x4075f9;\n}\n"
        },
        {
            "funcName": "function_407f90",
            "funcStartAddr": "407f90",
            "funcEndAddr": "4081a9",
            "decompiledFuncCode": "int64_t function_407f90(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x407ff3\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x407fa8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x407fb9\n    g49 = v5;\n    int64_t v6; // 0x407f90\n    int64_t v7; // 0x407f90\n    int64_t v8; // 0x407f90\n    int64_t v9; // 0x407f90\n    int64_t v10; // 0x407f90\n    int64_t v11; // 0x407f90\n    int64_t v12; // 0x407f90\n    uint32_t v13; // 0x4080b0\n    int64_t * v14; // 0x4080e0\n    int64_t v15; // 0x4080e8\n    uint32_t v16; // 0x408130\n    uint32_t v17; // 0x408100\n    int64_t * v18; // 0x408090\n    int64_t v19; // 0x408090\n    int64_t * v20; // 0x4080a0\n    int64_t v21; // 0x4080a0\n    int64_t * v22; // 0x408078\n    int64_t v23; // 0x408078\n    int64_t * v24; // 0x408060\n    int64_t v25; // 0x408060\n    int64_t * v26; // 0x408180\n    uint32_t v27; // 0x408040\n    int64_t v28; // 0x408180\n    int64_t * v29; // 0x408170\n    int64_t v30; // 0x408170\n    uint32_t v31; // 0x408020\n    int64_t * v32; // 0x408198\n    int64_t v33; // 0x408198\n    int64_t v34; // 0x408143\n    uint32_t v35; // 0x408000\n    int64_t v36; // 0x408117\n    uint32_t v37; // 0x407fc8\n    int32_t * v38; // 0x4080b0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x408040\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x408047\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x408090\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x408053\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x407fe6\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x408020\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x408027\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x4080a0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x408033\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x407fe6\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x408000\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x408007\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x408078\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x408013\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x407fe6\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x407fc8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x407fd3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x408060\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x407fdf\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x407fe6\n            break;\n        }\n        case 11: {\n            // 0x4080b0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x4080bf\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x408180\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x4080cc\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x407fe6\n            break;\n        }\n        case 12: {\n            // 0x4080e0\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x407fe6\n            break;\n        }\n        case 15: {\n            // 0x408130\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x408137\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x408170\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x408143\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x407fe6\n            break;\n        }\n        case 16: {\n            // 0x408100\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40810b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x408198\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x408117\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x407fe6\n            break;\n        }\n        default: {\n            // 0x407ff3\n            return 0xffffffff;\n        }\n    }\n    // 0x407fe6\n    v3++;\n    int64_t v39 = v4 + 32; // 0x407ff1\n    while (v3 < v2) {\n        // 0x407fb0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g49 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x408040\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x408047\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x408090\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x408053\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x407fe6\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x408020\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x408027\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x4080a0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x408033\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x407fe6\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x408000\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x408007\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x408078\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x408013\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x407fe6\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x407fc8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x407fd3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x408060\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x407fdf\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x407fe6\n                break;\n            }\n            case 11: {\n                // 0x4080b0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x4080bf\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x408180\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x4080cc\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x407fe6\n                break;\n            }\n            case 12: {\n                // 0x4080e0\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x407fe6\n                break;\n            }\n            case 15: {\n                // 0x408130\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x408137\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x408170\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x408143\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x407fe6\n                break;\n            }\n            case 16: {\n                // 0x408100\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40810b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x408198\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x408117\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x407fe6\n                break;\n            }\n            default: {\n                // 0x407ff3\n                return 0xffffffff;\n            }\n        }\n        // 0x407fe6\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x407ff3\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4081b0",
            "funcStartAddr": "4081b0",
            "funcEndAddr": "408eb9",
            "decompiledFuncCode": "int64_t function_4081b0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x4081b2\n    int64_t v4 = v1 + 16; // 0x4081b6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x4081e9\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x4081fe\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40822b\n    int32_t v8 = 0; // 0x408230\n    int64_t v9 = 0; // 0x408230\n    int64_t v10 = v3; // 0x408230\n    int64_t v11 = a1; // 0x408230\n    int64_t v12 = 0; // 0x408230\n    char v13; // 0x4081b0\n    int64_t v14; // 0x4081b0\n    int64_t v15; // 0x4081b0\n    int64_t v16; // 0x4081b0\n    int64_t v17; // 0x4081b0\n    int64_t v18; // 0x4081b0\n    int64_t v19; // 0x4081b0\n    int64_t v20; // 0x4081b0\n    int64_t v21; // 0x4081b0\n    int64_t v22; // 0x4081b0\n    int64_t v23; // 0x4081b0\n    int64_t v24; // 0x4081b0\n    int64_t v25; // 0x4081b0\n    int64_t v26; // 0x4081b0\n    int64_t v27; // 0x4081b0\n    int64_t v28; // 0x4081b0\n    int64_t v29; // 0x4081b0\n    int64_t v30; // 0x4081b0\n    int32_t v31; // 0x4081b0\n    int64_t v32; // 0x4081b0\n    int64_t v33; // 0x408220\n    int64_t v34; // 0x408270\n    int64_t * v35; // 0x408293\n    int64_t v36; // 0x4082f6\n    if (v7 != 0) {\n        // 0x408220\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x4081b0\n        int64_t v38 = 7; // 0x4081b0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x4081b0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x408220:\n            // 0x408220\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x408263\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x408278\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x4082b4\n                int64_t v43 = v42; // 0x4082b4\n                int64_t v44 = v43; // 0x4082bd\n                int64_t v45 = v33; // 0x4082bd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x408650\n                    char v47 = *(char *)v46; // 0x408654\n                    int64_t v48 = v46; // 0x40865d\n                    while (v47 < 58) {\n                        // 0x408650\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40865f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x408cf5\n                        char v52 = *(char *)v51; // 0x408cf5\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x408cf9\n                        int64_t v54 = v33; // 0x408d0d\n                        int64_t v55 = v51; // 0x408d0d\n                        char v56 = v52; // 0x408d0d\n                        int64_t v57 = v53; // 0x408d0d\n                        bool v58 = v52 < 58; // 0x408d0d\n                        bool v59 = v52 < 58; // 0x408d0d\n                        char v60 = v52; // 0x408d0d\n                        int64_t v61 = v51; // 0x408d0d\n                        int64_t v62; // 0x408d22\n                        int64_t v63; // 0x408cf5\n                        char v64; // 0x408cf5\n                        int64_t v65; // 0x408cf9\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x408978_9;\n                            }\n                            // 0x408cf3\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x408d0f\n                                if (v64 >= 58) {\n                                    goto lab_0x408978_9;\n                                }\n                                // 0x408cf3\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x408cc8\n                        while (v58) {\n                            // 0x408cce\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x408978_9;\n                                }\n                                // 0x408cf3\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x408d0f\n                                    if (v64 >= 58) {\n                                        goto lab_0x408978_9;\n                                    }\n                                    // 0x408cf3\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x408cc4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x408dcd\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x408978_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x408dde\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x4081b0\n                v36 = v45;\n                char v70; // 0x4081b0\n                while (true) {\n                    // 0x4082f6\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x408310\n                                *v41 = *v41 | 2;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                            case 43: {\n                                // 0x408320\n                                *v41 = *v41 | 4;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                            case 32: {\n                                // 0x408330\n                                *v41 = *v41 | 8;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                            case 35: {\n                                // 0x408340\n                                *v41 = *v41 | 16;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                            case 48: {\n                                // 0x408350\n                                *v41 = *v41 | 32;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x408358\n                                    break;\n                                }\n                                // 0x4082e6\n                                *v41 = *v41 | 64;\n                                // break -> 0x4082f0\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x4082ff\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x4082f0\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x4081b0\n                int64_t * v72; // 0x408281\n                int64_t * v73; // 0x40828a\n                if (v70 == 42) {\n                    // 0x4083cd\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x4083ed\n                    int64_t v75 = v74; // 0x4083ed\n                    int64_t v76 = v75 + 0xffffffd0; // 0x4083f1\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x4083f7\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x4087cd\n                        char v80 = *(char *)v79; // 0x4087d1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x4087cd\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x4087dd\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x4087e1\n                        int64_t v82 = v36; // 0x4087e1\n                        int64_t v83 = 0; // 0x4087e1\n                        if (v80 != 36) {\n                            goto lab_0x4083fd;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x408812\n                            int64_t v89 = v85; // 0x408812\n                            int64_t v90 = v87; // 0x408812\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x408817\n                            int64_t v95 = v92 + 1; // 0x40881a\n                            char v96 = *(char *)v95; // 0x40881a\n                            int64_t v97 = v96; // 0x40881a\n                            while (v94 < v91) {\n                                // 0x408831\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x408978_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x4087eb\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x4087f4\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x408831\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x408978_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x4087eb\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x408e6b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x408978_9;\n                            }\n                            // 0x408e79\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40840c;\n                        }\n                    } else {\n                        goto lab_0x4083fd;\n                    }\n                } else {\n                    // 0x40835d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x4081b0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x408a7b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x408a80\n                        int64_t v102 = v71; // 0x408a89\n                        char * v103 = v100; // 0x408a89\n                        int64_t v104 = v36; // 0x408a89\n                        int64_t v105 = v71; // 0x408a89\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x408a93\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x408a93\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x408a93\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x408aa2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x408ac5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x408368;\n                }\n            } else {\n                goto lab_0x408228;\n            }\n        }\n    }\n  lab_0x408232:\n    // 0x408232\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x408254\n    return 0;\n  lab_0x408978_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x408983\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x408995\n    if (v3 != v115) {\n        // 0x4089a0\n        free((int64_t *)v115);\n    }\n    // 0x4089a5\n    *__errno_location() = 22;\n    // 0x408254\n    return 0xffffffff;\n  lab_0x408b50_5:;\n    // 0x408b50\n    int64_t v116; // 0x4081b0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x408b55\n    int64_t v119; // 0x4081b0\n    if (v4 == v117) {\n        goto lab_0x408b69_3;\n    } else {\n        // 0x408b57\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x408b69_3;\n    }\n  lab_0x408b69_3:;\n    int64_t v120 = *v5; // 0x408b69\n    int32_t * v121; // 0x408b79\n    if (v3 == v120) {\n        // 0x408b79\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x408b74\n    free((int64_t *)v120);\n    // 0x408b79\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x408228:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40822b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x408232\n        goto lab_0x408232;\n    }\n    goto lab_0x408220;\n  lab_0x4083fd:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x4083fd\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x4087a3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x408978_9;\n        }\n        // 0x4087bb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40840c;\n  lab_0x408368:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40836b\n    int64_t v147 = v339; // 0x40836b\n    int64_t v145 = v338; // 0x40836b\n    int64_t v143 = v337; // 0x40836b\n    int64_t v186; // 0x4081b0\n    int64_t v190; // 0x4081b0\n    int64_t v189; // 0x4081b0\n    int64_t v188; // 0x4081b0\n    int64_t v187; // 0x4081b0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x408470;\n    } else {\n        goto lab_0x408371;\n    }\n  lab_0x40840c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40840c\n    int64_t v132 = v128; // 0x408413\n    int64_t v133 = v16; // 0x408413\n    int64_t v134 = v131; // 0x408413\n    int64_t v135; // 0x4081b0\n    int64_t v136; // 0x4081b0\n    int64_t v137; // 0x4081b0\n    int64_t v138; // 0x4086bf\n    if (v16 > v127) {\n        goto lab_0x40841c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x4086b5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x408b50_5;\n        }\n        int64_t size = 32 * v138; // 0x4086de\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x408c3c\n            if (mem == NULL) {\n                goto lab_0x408b69_3;\n            }\n            // 0x408c5e\n            v135 = (int64_t)mem;\n            goto lab_0x408c69;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x4086ff\n            int64_t v140 = *v6; // 0x408704\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x408b50_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x4086ff\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x408c69;\n            } else {\n                goto lab_0x40873d;\n            }\n        }\n    }\n  lab_0x408371:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x408378\n    int64_t v151 = v146; // 0x408378\n    int64_t v152 = v144; // 0x408378\n    uint64_t v153; // 0x4081b0\n    int64_t v154; // 0x4081b0\n    int64_t v155; // 0x4083b7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x4083bb\n        int64_t v158; // 0x4081b0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x408520\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x4083b3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x408528\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x4083b0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x4083b3\n                    break;\n                }\n            }\n        } else {\n            // 0x4083c0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x4083b3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x408528\n    int64_t v162 = v161 % 256; // 0x408534\n    g50 = v162;\n    int64_t v163 = 17; // 0x408537\n    int64_t v164 = v154; // 0x408537\n    int64_t v165 = v154; // 0x408537\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x4085a1;\n        }\n        case 28: {\n            goto lab_0x4088f2;\n        }\n        case 30: {\n            // 0x40891e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x408549;\n        }\n        case 32: {\n            goto lab_0x4088f2;\n        }\n        case 33: {\n            goto lab_0x4088f2;\n        }\n        case 34: {\n            goto lab_0x4088f2;\n        }\n        case 46: {\n            // 0x40890f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x408549;\n        }\n        case 51: {\n            goto lab_0x40892d;\n        }\n        case 60: {\n            goto lab_0x4088f2;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x408849\n            int32_t v167 = v166 - 7; // 0x408849\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40884f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x408549;\n        }\n        case 63: {\n            goto lab_0x4088a0;\n        }\n        case 64: {\n            goto lab_0x4088f2;\n        }\n        case 65: {\n            goto lab_0x4088f2;\n        }\n        case 66: {\n            goto lab_0x4088f2;\n        }\n        case 68: {\n            goto lab_0x4088a0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40885f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x408865\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40886d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40887b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40888f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x408549;\n        }\n        case 74: {\n            goto lab_0x40892d;\n        }\n        case 75: {\n            goto lab_0x408549;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x408540\n            int32_t v172 = v171 - 7; // 0x408540\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x408546\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x408549;\n        }\n        case 80: {\n            goto lab_0x40892d;\n        }\n        case 83: {\n            goto lab_0x40892d;\n        }\n        default: {\n            goto lab_0x408978_9;\n        }\n    }\n  lab_0x40841c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x408433\n        int64_t v178 = v176; // 0x4081b0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x408428\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x408428\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x408441\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40844d\n    int32_t v182 = *v181; // 0x40844d\n    if (v182 != 0) {\n        // 0x408ace\n        if (v182 != 5) {\n            goto lab_0x408978_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x408ad7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x408368;\n    } else {\n        // 0x408457\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40845d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x408371;\n        } else {\n            goto lab_0x408470;\n        }\n    }\n  lab_0x408470:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x408470\n    char v197 = *v196; // 0x408470\n    int64_t * v198; // 0x408298\n    *v198 = v192;\n    int64_t v199; // 0x4081b0\n    int64_t v200; // 0x4081b0\n    int64_t v201; // 0x4081b0\n    int64_t v202; // 0x4081b0\n    int64_t v203; // 0x4081b0\n    int64_t * v204; // 0x4082a1\n    int64_t * v205; // 0x4082aa\n    int64_t v206; // 0x408489\n    if (v197 != 42) {\n        char v207 = *v196; // 0x408670\n        int64_t v208 = v193; // 0x408679\n        char * v209; // 0x4081b0\n        int64_t v210; // 0x4081b0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x408680\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x408684\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x408680\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40868e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x408670\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x4086a1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x408371;\n    } else {\n        // 0x40847f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40849f\n        int64_t v219 = v218; // 0x40849f\n        int64_t v220 = v219 + 0xffffffd0; // 0x4084a3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x4084a9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x408d54\n            char v224 = *(char *)v223; // 0x408d58\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x408d54\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x408d64\n            v201 = v223;\n            int64_t v225 = v219; // 0x408d68\n            int64_t v226 = v206; // 0x408d68\n            int64_t v227 = 0; // 0x408d68\n            if (v224 != 36) {\n                goto lab_0x4084af;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x408d99\n                int64_t v233 = v229; // 0x408d99\n                int64_t v234 = v231; // 0x408d99\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x408d9e\n                int64_t v239 = v236 + 1; // 0x408da5\n                char v240 = *(char *)v239; // 0x408da9\n                int64_t v241 = v240; // 0x408da9\n                while (v238 < v235) {\n                    // 0x408db7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x408978_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x408d72\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x408d7b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x408db7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x408978_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x408d72\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x408e87\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x408978_9;\n                }\n                // 0x408e95\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x4084be;\n            }\n        } else {\n            goto lab_0x4084af;\n        }\n    }\n  lab_0x4085a1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x4085a6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x4085ae\n    *a2 = v245;\n    int64_t v246; // 0x4081b0\n    int64_t v247; // 0x4081b0\n    int64_t dest_mem; // 0x4081b0\n    int64_t v248; // 0x4081b0\n    int64_t v249; // 0x408ea3\n    if (v246 > v245) {\n        // 0x4085ba\n        goto lab_0x408228;\n    } else {\n        if (v246 < 0) {\n            // 0x408ea3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x408b50_5;\n        }\n        int64_t v250 = 2 * v246; // 0x4085d6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x408ea3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x408b50_5;\n        }\n        int64_t v251 = *v5; // 0x4085e7\n        int64_t size2 = 176 * v246; // 0x4085f9\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x408749\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x408cac\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x408b79\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x408b57\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x408b69_3;\n            }\n            goto lab_0x408764;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40860b\n            if (mem4 == NULL) {\n                // 0x408ea3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x408b50_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40860b\n            int64_t v254 = *v5; // 0x40862d\n            int64_t v255 = *a2; // 0x408631\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x408764;\n            } else {\n                goto lab_0x40863f;\n            }\n        }\n    }\n  lab_0x4088f2:\n    // 0x4088f2\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x408907\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x408549;\n  lab_0x40892d:;\n    uint32_t v335 = (int32_t)v153; // 0x408935\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40893b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x408943\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x408951\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40895e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408549;\n  lab_0x4088a0:;\n    uint32_t v336 = (int32_t)v153; // 0x4088a8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x4088ae\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4088b6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x4088c4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4088d1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408549;\n  lab_0x408549:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x4081b0\n    int64_t v260; // 0x4081b0\n    int64_t * v261; // 0x4082af\n    if (v259 == -1) {\n        // 0x408a54\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x408978_9;\n        }\n        // 0x408a6c\n        v260 = v148;\n    } else {\n        // 0x408553\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x408558\n    int64_t v264 = v258; // 0x40855f\n    int64_t v265 = v162; // 0x40855f\n    int64_t v266 = v263; // 0x40855f\n    int64_t v267; // 0x4081b0\n    int64_t v268; // 0x4081b0\n    int64_t v269; // 0x4081b0\n    int64_t v270; // 0x4081b0\n    int64_t v271; // 0x4081b0\n    if (v142 > v262) {\n        goto lab_0x408565;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x4089c8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x4089d2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x408b50_5;\n        }\n        int64_t size3 = 32 * v273; // 0x4089f1\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x408a04\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x408ae9\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x408b69_3;\n            }\n            goto lab_0x408b06;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x408a11\n            if (mem6 == NULL) {\n                // 0x408ea3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x408b50_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x408a11\n            int64_t v276 = v274 & 0xffffffff; // 0x408a16\n            int64_t v277 = *v6; // 0x408a41\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x408b06;\n            } else {\n                goto lab_0x408a4b;\n            }\n        }\n    }\n  lab_0x408565:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40857b\n        int64_t v282 = v279; // 0x4081b0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x408570\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x408570\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x408589\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x408595\n    int32_t v286 = *v285; // 0x408595\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x4089ba\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x408978_9;\n        }\n    } else {\n        // 0x40859f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x4085a1;\n  lab_0x408c69:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x408c69\n    int64_t * v290; // 0x4081b0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40873d;\n  lab_0x40873d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40841c;\n  lab_0x4084af:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x4084af\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x408d2a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x408978_9;\n        }\n        // 0x408d42\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x4084be;\n  lab_0x4084be:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x4084be\n    int64_t v300 = v296; // 0x4084c5\n    int64_t v301 = v191; // 0x4084c5\n    int64_t v302 = v299; // 0x4084c5\n    int64_t v303; // 0x4081b0\n    int64_t v304; // 0x4081b0\n    int64_t v305; // 0x4081b0\n    int64_t v306; // 0x408ba2\n    if (v191 > v295) {\n        goto lab_0x4084ce;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x408b98\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x408b50_5;\n        }\n        int64_t size4 = 32 * v306; // 0x408bbd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x408dee\n            if (mem7 == NULL) {\n                goto lab_0x408b69_3;\n            }\n            // 0x408e10\n            v304 = (int64_t)mem7;\n            goto lab_0x408e1b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x408bde\n            int64_t v308 = *v6; // 0x408be3\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x408b50_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x408bde\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x408e1b;\n            } else {\n                goto lab_0x408c1c;\n            }\n        }\n    }\n  lab_0x408764:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x4081b0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40863f;\n  lab_0x40863f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x408228;\n  lab_0x408b06:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x408b1c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x408a4b;\n  lab_0x408a4b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x408565;\n  lab_0x4084ce:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x4084e3\n        int64_t v324 = v322; // 0x4081b0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x4084d8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x4084d8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x4084f1\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x4084fe\n    int32_t v328 = *v327; // 0x4084fe\n    if (v328 != 0) {\n        // 0x408c25\n        if (v328 != 5) {\n            goto lab_0x408978_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x408c2e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x408508\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x408511\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x408371;\n  lab_0x408e1b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x408e1b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x408c1c;\n  lab_0x408c1c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x4084ce;\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408f1d",
            "decompiledFuncCode": "int64_t function_408ec0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408ec0\n    return function_401330();\n}\n"
        },
        {
            "funcName": "function_408f20",
            "funcStartAddr": "408f20",
            "funcEndAddr": "408f21",
            "decompiledFuncCode": "int64_t function_408f20(void) {\n    // 0x408f20\n    int64_t result; // 0x408f20\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f30",
            "funcStartAddr": "408f30",
            "funcEndAddr": "408f48",
            "decompiledFuncCode": "int64_t function_408f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408f30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_408f48",
            "funcStartAddr": "408f48",
            "funcEndAddr": "408f68",
            "decompiledFuncCode": "int64_t function_408f48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x408f52\n    while (*(int64_t *)v1 != -1) {\n        // 0x408f53\n        v1 -= 8;\n    }\n    // 0x408f64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_[.elf"
}