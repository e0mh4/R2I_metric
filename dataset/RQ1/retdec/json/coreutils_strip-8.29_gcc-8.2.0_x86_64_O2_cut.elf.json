{
    "funcInfo": [
        {
            "funcName": "function_401a20",
            "funcStartAddr": "401a20",
            "funcEndAddr": "401a25",
            "decompiledFuncCode": "int64_t function_401a20(void) {\n    // 0x401a20\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a25",
            "funcStartAddr": "401a25",
            "funcEndAddr": "401a2a",
            "decompiledFuncCode": "int64_t function_401a25(void) {\n    // 0x401a25\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a2a",
            "funcStartAddr": "401a2a",
            "funcEndAddr": "401a2f",
            "decompiledFuncCode": "int64_t function_401a2a(void) {\n    // 0x401a2a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a2f",
            "funcStartAddr": "401a2f",
            "funcEndAddr": "401a34",
            "decompiledFuncCode": "int64_t function_401a2f(void) {\n    // 0x401a2f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a34",
            "funcStartAddr": "401a34",
            "funcEndAddr": "401a39",
            "decompiledFuncCode": "int64_t function_401a34(void) {\n    // 0x401a34\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a39",
            "funcStartAddr": "401a39",
            "funcEndAddr": "401a3e",
            "decompiledFuncCode": "int64_t function_401a39(void) {\n    // 0x401a39\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a40",
            "funcStartAddr": "401a40",
            "funcEndAddr": "401df4",
            "decompiledFuncCode": "int64_t function_401a40(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401a51\n    function_403790(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401a40\n    function_4074f0(0x4031d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    g43 = 0;\n    g44 = 0;\n    *(char *)&g41 = 0;\n    g37 = 0;\n    int64_t v3 = 0; // 0x401aa9\n    int64_t v4; // 0x401a40\n    int64_t v5; // 0x401a40\n    int64_t v6; // 0x401a40\n    int64_t v7; // 0x401a40\n    int64_t v8; // 0x401a40\n    int64_t v9; // 0x401c74\n    int64_t v10; // 0x401cc6\n    uint32_t v11; // 0x401ce7\n    int64_t v12; // 0x401ce7\n    int64_t v13; // 0x401a40\n    while (true) {\n        // 0x401ab0\n        int64_t v14; // 0x401a40\n        v7 = v14;\n        v4 = v3;\n        int32_t v15 = function_406ac0(v1, a2, \"b:c:d:f:nsz\", &g2, 0, v2);\n        int64_t v16; // 0x401a40\n        int64_t v17; // 0x401a40\n        switch (v15) {\n            case -1: {\n                // 0x401c74\n                if (g44 == 0) {\n                    // 0x401db1\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify a list of bytes, characters, or fields\", 5));\n                    // 0x401dc6\n                    function_4026b0(1);\n                    // UNREACHABLE\n                }\n                // 0x401c8c\n                if (v4 != 0 == (g44 != 2)) {\n                    // 0x401db1\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"an input delimiter may be specified only when operating on fields\", 5));\n                    // 0x401dc6\n                    function_4026b0(1);\n                    // UNREACHABLE\n                }\n                // 0x401c9d\n                if ((g43 & (char)(g44 != 2)) != 0) {\n                    // 0x401db1\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"suppressing non-delimited lines makes sense\\n\\tonly when operating on fields\", 5));\n                    // 0x401dc6\n                    function_4026b0(1);\n                    // UNREACHABLE\n                }\n                // 0x401ca9\n                v9 = g44;\n                v10 = (v9 ^ 3) + v9 + (int64_t)(g42 == 0) & 2 | 4 * (int64_t)(g44 != 2);\n                function_402bd0(v7, (int32_t)v10);\n                if (v4 == 0) {\n                    // 0x401cd2\n                    *(char *)&g41 = 9;\n                }\n                // 0x401cd9\n                if (g38 == 0) {\n                    // 0x401d66\n                    *(char *)&g36 = 0;\n                    g38 = &g35;\n                    *(char *)&g35 = *(char *)&g41;\n                    g39 = 1;\n                }\n                // 0x401ce7\n                v11 = *(int32_t *)0x60b2bc;\n                if (v11 == (int32_t)a1) {\n                    // 0x401d95\n                    v5 = function_401ee0((int64_t)\"-\") & 0xffffffff;\n                } else {\n                    // 0x401cf5\n                    v12 = v11;\n                    v5 = 1;\n                    if (v1 > v12) {\n                        // 0x401d00\n                        v13 = 1;\n                        v13 &= function_401ee0(*(int64_t *)((0x100000000 * v12 >> 29) + a2));\n                        g26 = &g27;\n                        v8 = &g27;\n                        v5 = v13;\n                        while (v1 > (int64_t)&g27) {\n                            // 0x401d00\n                            v13 &= function_401ee0(*(int64_t *)((0x100000000 * v8 >> 29) + a2));\n                            g26 = &g27;\n                            v8 = &g27;\n                            v5 = v13;\n                        }\n                    }\n                }\n                // 0x401d21\n                if (g37 == 0) {\n                    // 0x401d2a\n                    return v5 % 256 ^ 1;\n                }\n                // 0x401d3b\n                v6 = v5;\n                if ((int32_t)function_405c20((int64_t)g30, v10) == -1) {\n                    // 0x401d4c\n                    error(0, *__errno_location(), \"-\");\n                    v6 = 0;\n                }\n                // 0x401d2a\n                return v6 % 256 ^ 1;\n            }\n            case 102: {\n                // 0x401c40\n                v17 = (int64_t)\"only one type of list may be specified\";\n                if (g44 != 0) {\n                    goto lab_0x401db1;\n                }\n                // 0x401c4e\n                g44 = 2;\n                v3 = v4;\n                v16 = (int64_t)g64;\n                // break -> 0x401ab0\n                break;\n            }\n            default: {\n                if (v15 > 102) {\n                    if (v15 == 122) {\n                        // 0x401c68\n                        *(char *)&g16 = 0;\n                        v3 = v4;\n                        v16 = v7;\n                    } else {\n                        if (v15 > 122) {\n                            if (v15 != 128) {\n                                if (v15 != 129) {\n                                    // 0x401dc6\n                                    function_4026b0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401bbb\n                                g42 = 1;\n                                v3 = v4;\n                                v16 = v7;\n                            } else {\n                                int64_t v18 = (int64_t)g64; // 0x401b67\n                                *(char *)&g40 = 1;\n                                int64_t v19 = v18; // 0x401b7d\n                                int64_t v20 = 1; // 0x401b7d\n                                if (*g64 != 0) {\n                                    int64_t v21 = -1; // 0x401b87\n                                    int64_t v22 = 0; // 0x401b87\n                                    while (v21 != 0) {\n                                        int64_t v23 = v19;\n                                        v21--;\n                                        bool v24; // 0x401a40\n                                        v19 = v23 + (v24 ? -1 : 1);\n                                        v22 = v21;\n                                        if (*(char *)v23 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v22 = 0;\n                                    }\n                                    v20 = -2 - v22;\n                                }\n                                // 0x401b93\n                                g39 = v20;\n                                g38 = function_405ba0(v18);\n                                v3 = v4;\n                                v16 = v7;\n                            }\n                        } else {\n                            // 0x401ae6\n                            v3 = v4;\n                            v16 = v7;\n                            if (v15 != 110) {\n                                if (v15 != 115) {\n                                  lab_0x401dc6:\n                                    // 0x401dc6\n                                    function_4026b0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401af4\n                                g43 = 1;\n                                v3 = v4;\n                                v16 = v7;\n                            }\n                        }\n                    }\n                } else {\n                    if (v15 > 99) {\n                        if (v15 != 100) {\n                            // 0x401dc6\n                            function_4026b0(1);\n                            // UNREACHABLE\n                        }\n                        char v25 = *g64; // 0x401bf0\n                        if (v25 != 0) {\n                            // 0x401bf7\n                            v17 = (int64_t)\"the delimiter must be a single character\";\n                            if (*(char *)((int64_t)g64 + 1) != 0) {\n                              lab_0x401db1:\n                                // 0x401db1\n                                error(0, 0, dcgettext(NULL, (char *)v17, 5));\n                                // 0x401dc6\n                                function_4026b0(1);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x401c01\n                        *(char *)&g41 = v25;\n                        v3 = 1;\n                        v16 = v7;\n                    } else {\n                        if (v15 <= 97) {\n                            if (v15 == -131) {\n                                // 0x401b1d\n                                function_405830((int64_t)g29, \"cut\", \"GNU coreutils\", (int64_t)g17, \"David M. Ihnat\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v15 == -130) {\n                                // 0x401bd2\n                                function_4026b0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x401dc6;\n                        }\n                        // 0x401c18\n                        if (g44 != 0) {\n                            // 0x401db1\n                            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"only one type of list may be specified\", 5));\n                            // 0x401dc6\n                            function_4026b0(1);\n                            // UNREACHABLE\n                        }\n                        // 0x401c26\n                        g44 = 1;\n                        v3 = v4;\n                        v16 = (int64_t)g64;\n                    }\n                }\n                // break -> 0x401ab0\n                break;\n            }\n        }\n        // 0x401ab0\n        v14 = v16;\n    }\n    // 0x401c74\n    if (g44 == 0) {\n        // 0x401db1\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify a list of bytes, characters, or fields\", 5));\n        // 0x401dc6\n        function_4026b0(1);\n        // UNREACHABLE\n    }\n    // 0x401c8c\n    if (v4 != 0 == (g44 != 2)) {\n        // 0x401db1\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"an input delimiter may be specified only when operating on fields\", 5));\n        // 0x401dc6\n        function_4026b0(1);\n        // UNREACHABLE\n    }\n    // 0x401c9d\n    if ((g43 & (char)(g44 != 2)) != 0) {\n        // 0x401db1\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"suppressing non-delimited lines makes sense\\n\\tonly when operating on fields\", 5));\n        // 0x401dc6\n        function_4026b0(1);\n        // UNREACHABLE\n    }\n    // 0x401ca9\n    v9 = g44;\n    v10 = (v9 ^ 3) + v9 + (int64_t)(g42 == 0) & 2 | 4 * (int64_t)(g44 != 2);\n    function_402bd0(v7, (int32_t)v10);\n    if (v4 == 0) {\n        // 0x401cd2\n        *(char *)&g41 = 9;\n    }\n    // 0x401cd9\n    if (g38 == 0) {\n        // 0x401d66\n        *(char *)&g36 = 0;\n        g38 = &g35;\n        *(char *)&g35 = *(char *)&g41;\n        g39 = 1;\n    }\n    // 0x401ce7\n    v11 = *(int32_t *)0x60b2bc;\n    if (v11 == (int32_t)a1) {\n        // 0x401d95\n        v5 = function_401ee0((int64_t)\"-\") & 0xffffffff;\n    } else {\n        // 0x401cf5\n        v12 = v11;\n        v5 = 1;\n        if (v1 > v12) {\n            // 0x401d00\n            v13 = 1;\n            v13 &= function_401ee0(*(int64_t *)((0x100000000 * v12 >> 29) + a2));\n            g26 = &g27;\n            v8 = &g27;\n            v5 = v13;\n            while (v1 > (int64_t)&g27) {\n                // 0x401d00\n                v13 &= function_401ee0(*(int64_t *)((0x100000000 * v8 >> 29) + a2));\n                g26 = &g27;\n                v8 = &g27;\n                v5 = v13;\n            }\n        }\n    }\n    // 0x401d21\n    if (g37 == 0) {\n        // 0x401d2a\n        return v5 % 256 ^ 1;\n    }\n    // 0x401d3b\n    v6 = v5;\n    if ((int32_t)function_405c20((int64_t)g30, v10) == -1) {\n        // 0x401d4c\n        error(0, *__errno_location(), \"-\");\n        v6 = 0;\n    }\n    // 0x401d2a\n    return v6 % 256 ^ 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401e00",
            "funcEndAddr": "401e2b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401e00\n    int64_t v1; // 0x401e00\n    __libc_start_main(0x401a40, (int32_t)a4, (char **)&v1, (void (*)())0x407480, (void (*)())0x4074e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e2b",
            "funcStartAddr": "401e2b",
            "funcEndAddr": "401e4a",
            "decompiledFuncCode": "int64_t function_401e2b(void) {\n    // 0x401e2b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401e4a",
            "funcStartAddr": "401e4a",
            "funcEndAddr": "401e81",
            "decompiledFuncCode": "int64_t function_401e4a(void) {\n    // 0x401e4a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401e81",
            "funcStartAddr": "401e81",
            "funcEndAddr": "401ed8",
            "decompiledFuncCode": "int64_t function_401e81(void) {\n    // 0x401e81\n    if (g33 != 0) {\n        // 0x401ed7\n        int64_t result; // 0x401e81\n        return result;\n    }\n    int64_t v1 = g34; // 0x401eb4\n    int64_t result2; // 0x401ec6\n    if (g34 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401ec6\n        result2 = function_401e2b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401eb6\n        v1++;\n    }\n    // 0x401eaa\n    g34 = v1;\n    // 0x401ec6\n    result2 = function_401e2b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ed8",
            "funcStartAddr": "401ed8",
            "funcEndAddr": "401edd",
            "decompiledFuncCode": "int64_t function_401ed8(void) {\n    // 0x401ed8\n    return function_401e4a();\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "4026b0",
            "decompiledFuncCode": "int64_t function_401ee0(int64_t file_path) {\n    // 0x401ee0\n    int64_t v1; // bp-72, 0x401ee0\n    int64_t v2 = &v1; // 0x401efa\n    bool v3; // 0x401ee0\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = (int64_t)\"-\"; // 0x401ee0\n    int64_t v6 = file_path; // 0x401ee0\n    int64_t v7 = 2; // 0x401efe\n    unsigned char v8 = *(char *)v6; // 0x401efe\n    char v9 = *(char *)v5; // 0x401efe\n    char v10 = v9; // 0x401efe\n    bool v11 = false; // 0x401efe\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    struct _IO_FILE * stream2; // 0x401ee0\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x402458\n        stream2 = file;\n        if (file == NULL) {\n            // 0x402469\n            error(0, *__errno_location(), \"%s\", (char *)function_405230(0, 3, file_path));\n            return (int32_t)&g66 ^ (int32_t)&g66;\n        }\n    } else {\n        // 0x401f0d\n        g37 = 1;\n        stream2 = g30;\n    }\n    int64_t v13 = (int64_t)stream2;\n    int64_t v14; // 0x401ee0\n    function_403280(v13, 2, v14);\n    g47 = g62;\n    int64_t * v15 = (int64_t *)(v13 + 8);\n    int64_t v16; // 0x401ee0\n    int64_t v17; // 0x401ee0\n    int64_t v18; // 0x401ee0\n    int32_t v19; // 0x401ee0\n    int64_t v20; // 0x401ee0\n    int64_t v21; // 0x401ee0\n    int64_t v22; // 0x401ee0\n    int64_t v23; // 0x401ee0\n    int64_t v24; // 0x401ee0\n    int32_t c3; // 0x401ee0\n    int64_t * v25; // 0x4024b4\n    int64_t * v26; // 0x401f47\n    unsigned char v27; // 0x40254f\n    int32_t v28; // 0x402558\n    if (g44 == 1) {\n        // 0x4024b0\n        v25 = (int64_t *)(v13 + 16);\n        v21 = 0;\n        v16 = 0;\n        while (true) {\n          lab_0x4024b0_2:;\n            uint64_t v29 = *v15; // 0x4024b0\n            v20 = v29;\n            v22 = v21;\n            v17 = v16;\n            v23 = v21;\n            v18 = v16;\n            if (v29 >= *v25) {\n                goto lab_0x402547;\n            } else {\n                goto lab_0x4024be;\n            }\n        }\n      lab_0x402565:\n        if (v24 == 0) {\n            // 0x402230\n            v19 = stream2->e0;\n            goto lab_0x402234;\n        } else {\n            int64_t v30 = (int64_t)g29; // 0x40256e\n            int64_t * v31 = (int64_t *)(v30 + 40); // 0x402575\n            uint64_t v32 = *v31; // 0x402575\n            if (v32 >= *(int64_t *)(v30 + 48)) {\n                // 0x402688\n                __overflow(g29, v28);\n                v19 = stream2->e0;\n            } else {\n                // 0x402583\n                *v31 = v32 + 1;\n                *(char *)v32 = v27;\n                v19 = stream2->e0;\n            }\n            goto lab_0x402234;\n        }\n    } else {\n        uint64_t v33 = *v15; // 0x401f43\n        v26 = (int64_t *)(v13 + 16);\n        if (v33 >= *v26) {\n            int32_t v34 = __uflow(stream2); // 0x40221b\n            c3 = v34;\n            if (v34 != -1) {\n                goto lab_0x401f5c;\n            } else {\n                // 0x402230\n                v19 = stream2->e0;\n                goto lab_0x402234;\n            }\n        } else {\n            // 0x401f51\n            *v15 = v33 + 1;\n            c3 = (int32_t)*(char *)v33;\n            goto lab_0x401f5c;\n        }\n    }\n  lab_0x402547:;\n    uint32_t v35 = __uflow(stream2); // 0x40254a\n    v27 = *(char *)&g16;\n    v28 = v27;\n    char v36 = v27; // 0x40255a\n    int64_t v37; // 0x401ee0\n    int64_t v38; // 0x401ee0\n    int64_t v39; // 0x401ee0\n    if (v35 == v28) {\n        goto lab_0x4025a0;\n    } else {\n        // 0x40255c\n        v24 = v23;\n        v39 = v24;\n        v38 = v35;\n        v37 = v18;\n        if (v35 == -1) {\n            // break -> 0x402565\n            goto lab_0x402565;\n        }\n        goto lab_0x4024d8;\n    }\n  lab_0x4024be:;\n    char v40 = *(char *)&g16; // 0x4024c2\n    *v15 = v20 + 1;\n    unsigned char v41 = *(char *)v20; // 0x4024cd\n    v39 = v22;\n    v38 = v41;\n    v37 = v17;\n    v36 = v40;\n    if (v41 == v40) {\n        goto lab_0x4025a0;\n    } else {\n        goto lab_0x4024d8;\n    }\n  lab_0x4025a0:;\n    unsigned char v42 = v36;\n    int64_t v43 = (int64_t)g29; // 0x4025a0\n    int64_t * v44 = (int64_t *)(v43 + 40); // 0x4025a7\n    uint64_t v45 = *v44; // 0x4025a7\n    if (v45 >= *(int64_t *)(v43 + 48)) {\n        // 0x402620\n        __overflow(g29, (int32_t)v42);\n    } else {\n        // 0x4025b1\n        *v44 = v45 + 1;\n        *(char *)v45 = v42;\n    }\n    // 0x4025bc\n    g47 = g62;\n    int64_t v46 = 0; // 0x4025cf\n    int64_t v47 = 0; // 0x4025cf\n    goto lab_0x4024b0;\n  lab_0x4024d8:;\n    int64_t v204 = v37;\n    int64_t v205 = v38;\n    int64_t v206 = g47; // 0x4024d8\n    int64_t v207 = v39 + 1; // 0x4024df\n    int64_t v208 = v206; // 0x4024e7\n    if (v207 > *(int64_t *)(v206 + 8)) {\n        int64_t v209 = v206 + 16; // 0x4024e9\n        g47 = v209;\n        v208 = v209;\n    }\n    uint64_t v210 = *(int64_t *)v208; // 0x4024f4\n    v46 = v207;\n    v47 = v204;\n    if (v207 < v210) {\n        goto lab_0x4024b0;\n    } else {\n        unsigned char v211 = *(char *)&g40; // 0x4024fc\n        int64_t v212 = (int64_t)g29; // 0x402503\n        int64_t v213 = v212; // 0x40250c\n        int64_t v214 = v204; // 0x40250c\n        if (v211 != 0) {\n            unsigned char v215 = (char)(v207 == v210) & (char)v204; // 0x402514\n            v213 = v212;\n            v214 = v211;\n            if (v215 != 0) {\n                // 0x402640\n                fwrite_unlocked((int64_t *)g38, 1, g39, g29);\n                v213 = (int64_t)g29;\n                v214 = v215;\n            }\n        }\n        int64_t v216 = v214;\n        int64_t v217 = v213;\n        int64_t * v218 = (int64_t *)(v217 + 40); // 0x402520\n        uint64_t v219 = *v218; // 0x402520\n        if (v219 >= *(int64_t *)(v217 + 48)) {\n            // 0x402630\n            __overflow((struct _IO_FILE *)v217, (int32_t)v205 % 256);\n            v46 = v207;\n            v47 = v216;\n            goto lab_0x4024b0;\n        } else {\n            // 0x40252e\n            *v218 = v219 + 1;\n            *(char *)v219 = (char)v205;\n            uint64_t v220 = *v15; // 0x402539\n            v20 = v220;\n            v22 = v207;\n            v17 = v216;\n            v23 = v207;\n            v18 = v216;\n            if (v220 < *v25) {\n                goto lab_0x4024be;\n            } else {\n                goto lab_0x402547;\n            }\n        }\n    }\n  lab_0x4024b0:\n    // 0x4024b0\n    v21 = v46;\n    v16 = v47;\n    goto lab_0x4024b0_2;\n  lab_0x402285_2:;\n    // 0x402285\n    int64_t v48; // 0x401ee0\n    int64_t v49 = v48;\n    int64_t v50; // 0x401ee0\n    int64_t v51 = v50;\n    char v52; // 0x401ee0\n    unsigned char v53 = v52; // 0x402288\n    char v54; // 0x401ee0\n    int64_t v55 = v54;\n    int64_t v56 = v53;\n    int64_t v57 = v55; // 0x402290\n    int64_t v58 = v56; // 0x402290\n    int64_t v59 = v51; // 0x402290\n    int32_t v60; // 0x401ee0\n    int64_t v61; // 0x401ee0\n    int64_t v62; // 0x401ee0\n    int64_t v63; // 0x401ee0\n    int64_t v64; // 0x401ee0\n    int64_t v65; // 0x401ee0\n    int64_t v66; // 0x401ee0\n    if (v53 == v54) {\n        // 0x402285\n        v60 = v53;\n        v62 = v56;\n        v64 = v55;\n        v65 = v56;\n        v63 = v51;\n        v61 = v49;\n        v66 = 0;\n        goto lab_0x4022e0;\n    } else {\n        goto lab_0x402292;\n    }\n  lab_0x402156:;\n    // 0x402156\n    int64_t v67; // 0x401ee0\n    int64_t v68 = v67;\n    *(int64_t *)(v2 - 16) = v13;\n    char v69 = *(char *)&g16; // 0x402168\n    char v70 = *(char *)&g41; // 0x402177\n    int64_t n = function_4032b0(&g46, &g45, 0, -1, v70, v69, (int64_t)&g66); // 0x40217f\n    if (n < 0) {\n        // break -> 0x4025d8\n        goto lab_0x4025d8;\n    }\n    if (n == 0) {\n        // 0x402696\n        __assert_fail(\"n_bytes != 0\", \"src/cut.c\", 329, \"cut_fields\");\n        return &g66;\n    }\n    int64_t data = g46; // 0x402198\n    int64_t v71 = n - 1;\n    char v72; // 0x401ee0\n    unsigned char v73; // 0x401ee0\n    int64_t v74; // 0x401ee0\n    int64_t v75; // 0x401ee0\n    int64_t v76; // 0x401ee0\n    int64_t v77; // 0x401ee0\n    int64_t v78; // 0x401ee0\n    int64_t v79; // 0x401ee0\n    if (*(char *)(data + v71) == *(char *)&g41) {\n        // 0x402318\n        v75 = v68;\n        if (*(int64_t *)g47 < 2) {\n            // 0x402390\n            v73 = v72;\n            fwrite_unlocked((int64_t *)data, 1, (int32_t)n - 1, g29);\n            if (*(char *)&g41 == *(char *)&g16) {\n                uint64_t c2 = *v15; // 0x402428\n                if (c2 >= *v26) {\n                    // 0x402600\n                    if (__uflow(stream2) != -1) {\n                        // 0x402441\n                        int32_t v80; // 0x401ee0\n                        int32_t c = v80;\n                        struct _IO_FILE * stream; // 0x401ee0\n                        ungetc(c, stream);\n                        goto lab_0x4023b0;\n                    } else {\n                        // 0x402611\n                        v75 = v68;\n                        goto lab_0x402325;\n                    }\n                } else {\n                    // 0x402436\n                    *v15 = c2 + 1;\n                    // 0x402441\n                    ungetc((int32_t)*(char *)c2, stream2);\n                    goto lab_0x4023b0;\n                }\n            } else {\n                goto lab_0x4023b0;\n            }\n        } else {\n            goto lab_0x402325;\n        }\n    } else {\n        // 0x4021b4\n        v78 = 0;\n        v77 = 1;\n        v74 = v68;\n        if (g43 != 0) {\n            goto lab_0x401f90;\n        } else {\n            // 0x4021c1\n            fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g29);\n            unsigned char v81 = *(char *)&g16; // 0x4021dc\n            int64_t v82 = v81; // 0x4021dc\n            v79 = v82;\n            v76 = v68;\n            if ((int32_t)*(char *)(g46 + v71) != (int32_t)v81) {\n                int64_t v83 = (int64_t)g29; // 0x4021f0\n                int64_t * v84 = (int64_t *)(v83 + 40); // 0x4021f7\n                uint64_t v85 = *v84; // 0x4021f7\n                if (v85 >= *(int64_t *)(v83 + 48)) {\n                    // 0x402670\n                    int32_t v86; // 0x4021e8\n                    struct _IO_FILE * v87; // 0x4021f0\n                    __overflow(v87, v86);\n                    unsigned char v88 = *(char *)&g16; // 0x402677\n                    v79 = v88;\n                    v76 = v68;\n                } else {\n                    // 0x402205\n                    *v84 = v85 + 1;\n                    *(char *)v85 = v81;\n                    v79 = v82;\n                    v76 = v68;\n                }\n            }\n            goto lab_0x40213e;\n        }\n    }\n  lab_0x401fa3:;\n    int64_t v89 = g47; // 0x401faa\n    int64_t v90; // 0x401ee0\n    int64_t v91 = v90; // 0x401faa\n    int64_t v92; // 0x401ee0\n    int64_t v93 = v92; // 0x401faa\n    int64_t v94; // 0x401ee0\n    int64_t v95 = v94 & 0xffffffff; // 0x401faa\n    goto lab_0x401fad;\n  lab_0x401fad:;\n    int64_t v96 = v95;\n    int64_t v97 = v93;\n    int64_t v98 = v91;\n    int64_t v99 = v96; // 0x401fb0\n    int64_t v100; // 0x401ee0\n    int64_t v101; // 0x401ee0\n    int64_t v102; // 0x401ee0\n    int64_t v103; // 0x401ee0\n    int64_t v104; // 0x401ee0\n    int64_t v105; // 0x401ee0\n    char v106; // 0x401ee0\n    int64_t v107; // 0x401ee0\n    int64_t v108; // 0x401ee0\n    int64_t v109; // 0x401ee0\n    int64_t v110; // 0x401ee0\n    int64_t v111; // 0x401ee0\n    char v112; // 0x401ee0\n    int64_t v113; // 0x401ee0\n    int64_t v114; // 0x401ee0\n    int64_t v115; // 0x401ee0\n    int64_t v116; // 0x401ee0\n    int64_t v117; // 0x401ee0\n    int64_t v118; // 0x401ee0\n    if (*(int64_t *)v89 > v98) {\n        int64_t v119 = v99;\n        uint64_t v120 = *v15; // 0x402094\n        int64_t v121; // 0x401ee0\n        if (v120 < *v26) {\n            // 0x402058\n            *v15 = v120 + 1;\n            v121 = (int64_t)*(char *)v120;\n        } else {\n            // 0x40209e\n            v121 = __uflow(stream2);\n        }\n        int64_t v122 = v121;\n        unsigned char v123 = *(char *)&g41; // 0x402064\n        unsigned char v124 = *(char *)&g16; // 0x40206b\n        int32_t v125 = v122; // 0x402076\n        while ((int32_t)v123 != v125) {\n            // 0x40207f\n            v52 = v124;\n            v54 = v123;\n            v50 = v97;\n            v48 = v119;\n            if (v125 == (int32_t)v124) {\n                goto lab_0x402285_2;\n            }\n            // 0x40208b\n            v99 = v122;\n            if (v125 == -1) {\n                // 0x4020d9\n                v105 = v124;\n                v111 = 0;\n                v116 = 0xffffffff;\n                v109 = 1;\n                v114 = v123;\n                v104 = v97;\n                v102 = v119;\n                goto lab_0x4020d9_2;\n            }\n            v119 = v99;\n            v120 = *v15;\n            if (v120 < *v26) {\n                // 0x402058\n                *v15 = v120 + 1;\n                v121 = (int64_t)*(char *)v120;\n            } else {\n                // 0x40209e\n                v121 = __uflow(stream2);\n            }\n            // 0x402064\n            v122 = v121;\n            v123 = *(char *)&g41;\n            v124 = *(char *)&g16;\n            v125 = v122;\n        }\n        // 0x4022c5\n        v106 = v124;\n        v112 = v123;\n        v117 = v123;\n        v107 = v97;\n        v100 = v119;\n        v103 = v122;\n    } else {\n        if ((char)v97 != 0) {\n            // 0x401fbf\n            fwrite_unlocked((int64_t *)g38, 1, g39, g29);\n        }\n        int64_t v126 = v96;\n        uint64_t v127 = *v15; // 0x40203f\n        int64_t v128; // 0x401ee0\n        if (v127 < *v26) {\n            // 0x401fe0\n            *v15 = v127 + 1;\n            v128 = (int64_t)*(char *)v127;\n        } else {\n            // 0x402049\n            v128 = __uflow(stream2);\n        }\n        int64_t v129 = v128;\n        unsigned char v130 = *(char *)&g41; // 0x401feb\n        unsigned char v131 = *(char *)&g16; // 0x401ff2\n        uint32_t v132 = (int32_t)v129; // 0x402000\n        while (v132 != (int32_t)v130) {\n            // 0x402008\n            v52 = v131;\n            v54 = v130;\n            v50 = 1;\n            v48 = v126;\n            if (v132 == (int32_t)v131) {\n                goto lab_0x402285_2;\n            }\n            if (v132 == -1) {\n                // 0x4020ed\n                v101 = v126;\n                v113 = v130;\n                v118 = v131;\n                v108 = 1;\n                v115 = 0xffffffff;\n                v110 = 0;\n                goto lab_0x4020ed_2;\n            }\n            int64_t v133 = (int64_t)g29; // 0x40201c\n            int64_t * v134 = (int64_t *)(v133 + 40); // 0x402023\n            uint64_t v135 = *v134; // 0x402023\n            if (v135 >= *(int64_t *)(v133 + 48)) {\n                // 0x4020b0\n                __overflow(g29, v132 % 256);\n            } else {\n                // 0x402031\n                *v134 = v135 + 1;\n                *(char *)v135 = (char)v129;\n            }\n            // 0x40203c\n            v126 = v129;\n            v127 = *v15;\n            if (v127 < *v26) {\n                // 0x401fe0\n                *v15 = v127 + 1;\n                v128 = (int64_t)*(char *)v127;\n            } else {\n                // 0x402049\n                v128 = __uflow(stream2);\n            }\n            // 0x401feb\n            v129 = v128;\n            v130 = *(char *)&g41;\n            v131 = *(char *)&g16;\n            v132 = (int32_t)v129;\n        }\n        int64_t v136 = v130; // 0x401feb\n        v106 = v131;\n        v112 = v130;\n        v117 = v136;\n        v107 = 1;\n        v100 = v126;\n        v103 = v136;\n    }\n    int64_t v137 = v103;\n    int64_t v138 = v100;\n    int64_t v139 = v107;\n    char v140 = v106;\n    int32_t v141; // 0x401ee0\n    char v142; // 0x401ee0\n    int64_t v143; // 0x401ee0\n    int64_t v144; // 0x401ee0\n    int64_t v145; // 0x401ee0\n    int64_t v146; // 0x401ee0\n    int32_t c4; // 0x401ee0\n    int64_t v147; // 0x401ee0\n    int64_t v148; // 0x401ee0\n    if (v140 == v112) {\n        uint64_t v149 = *v15; // 0x402348\n        if (v149 >= *v26) {\n            int32_t v150 = __uflow(stream2); // 0x4023c3\n            c4 = v150;\n            if (v150 != -1) {\n                goto lab_0x40235d;\n            } else {\n                // 0x4023cf\n                v105 = (int64_t)*(char *)&g16;\n                v111 = 0;\n                v116 = v150;\n                v109 = 1;\n                v114 = (int64_t)*(char *)&g41;\n                v104 = v139;\n                v102 = v138;\n                goto lab_0x4020d9_2;\n            }\n        } else {\n            // 0x402352\n            *v15 = v149 + 1;\n            c4 = (int32_t)*(char *)v149;\n            goto lab_0x40235d;\n        }\n    } else {\n        int64_t v151 = v137 & 0xffffffff; // 0x4022cb\n        int32_t v152 = v137; // 0x4022ce\n        v147 = v151;\n        v145 = v139;\n        v141 = v152;\n        v142 = v140;\n        v146 = v117;\n        v148 = v151;\n        v144 = v139;\n        v143 = v138;\n        if (v152 == (int32_t)v117) {\n            goto lab_0x402296;\n        } else {\n            goto lab_0x4022d2;\n        }\n    }\n  lab_0x402325:;\n    int64_t v153 = v75;\n    int64_t v154 = g47;\n    v89 = v154;\n    v91 = 2;\n    v93 = v153;\n    v95 = 0;\n    if (*(int64_t *)(v154 + 8) < 2) {\n        int64_t v155 = v154 + 16; // 0x40232c\n        g47 = v155;\n        v89 = v155;\n        v91 = 2;\n        v93 = v153;\n        v95 = 0;\n    }\n    goto lab_0x401fad;\n  lab_0x401f90:;\n    int64_t v156 = v78; // 0x401ee0\n    int64_t v157 = v77; // 0x401ee0\n    int64_t v158 = v74; // 0x401ee0\n    goto lab_0x401f90_2;\n  lab_0x4023b0:\n    // 0x4023b0\n    v75 = v73;\n    goto lab_0x402325;\n  lab_0x40213e:\n    // 0x40213e\n    v94 = v79;\n    v90 = 1;\n    v92 = v76;\n    v67 = v76;\n    v72 = 1;\n    char * v160; // 0x401f98\n    if (*v160 % 2 == 0) {\n        goto lab_0x401fa3;\n    } else {\n        goto lab_0x402156;\n    }\n  lab_0x402296:;\n    int64_t v161 = v145;\n    int64_t v162 = v147;\n    int64_t v163 = g47; // 0x402296\n    int64_t v164 = v98 + 1; // 0x40229d\n    v78 = v162;\n    v77 = v164;\n    v74 = v161;\n    if (v164 > *(int64_t *)(v163 + 8)) {\n        // 0x4022ab\n        g47 = v163 + 16;\n        v78 = v162;\n        v77 = v164;\n        v74 = v161;\n    }\n    goto lab_0x401f90;\n  lab_0x4022d2:\n    // 0x4022d2\n    v60 = v141;\n    v62 = v142;\n    v64 = v146;\n    v65 = v148;\n    v63 = v144;\n    v61 = v143;\n    v66 = v141 == -1;\n    goto lab_0x4022e0;\n  lab_0x40235d:\n    // 0x40235d\n    ungetc(c4, stream2);\n    v57 = (int64_t)*(char *)&g41;\n    v58 = v137 & 0xffffffff;\n    v59 = v139;\n    goto lab_0x402292;\n  lab_0x4022e0:;\n    int64_t v165 = v66;\n    int64_t v166 = v63;\n    int64_t v167 = v65;\n    int64_t v168 = v62;\n    int32_t v169 = v60;\n    v78 = v167;\n    v77 = v98;\n    v74 = v166;\n    if (v169 != (int32_t)v168 == v165 == 0) {\n        goto lab_0x401f90;\n    } else {\n        // 0x4022f5\n        v105 = v168;\n        v111 = v169 == (int32_t)v168;\n        v116 = v167;\n        v109 = v165;\n        v114 = v64;\n        v104 = v166;\n        v102 = v61;\n        goto lab_0x4020d9_2;\n    }\n  lab_0x402292:\n    // 0x402292\n    v147 = v58;\n    v145 = v59;\n    if ((int32_t)v58 != (int32_t)v57) {\n        // 0x402292\n        int64_t v170; // 0x401ee0\n        int64_t v171 = v170;\n        char v172 = *(char *)&g16;\n        int32_t v173; // 0x401ee0\n        v141 = v173;\n        v142 = v172;\n        int64_t v174; // 0x401ee0\n        v146 = v174;\n        int64_t v175; // 0x401ee0\n        v148 = v175;\n        int64_t v176; // 0x401ee0\n        v144 = v176;\n        v143 = v171;\n        goto lab_0x4022d2;\n    } else {\n        goto lab_0x402296;\n    }\n  lab_0x4020d9_2:;\n    int64_t v177 = v102;\n    int64_t v178 = v114;\n    int64_t v179 = v109;\n    int64_t v180 = v116;\n    int64_t v181 = v111;\n    int64_t v182 = v105;\n    v101 = v177;\n    v113 = v178;\n    v118 = v182;\n    v108 = v179;\n    v115 = v180;\n    v110 = v181;\n    int64_t v183; // 0x401ee0\n    int64_t v184; // 0x401ee0\n    if ((char)v104 != 0) {\n        goto lab_0x4020ed_2;\n    } else {\n        // 0x4020de\n        v101 = v177;\n        v113 = v178;\n        v118 = v182;\n        v108 = v179;\n        v115 = v180;\n        v110 = v181;\n        v183 = v179;\n        v184 = v180;\n        if (v98 == 1 == g43 == 1) {\n            goto lab_0x402127;\n        } else {\n            goto lab_0x4020ed_2;\n        }\n    }\n  lab_0x4020ed_2:;\n    int32_t v185 = v118; // 0x4020ed\n    char v186 = v118; // 0x4020f4\n    if ((char)v110 == 0 == ((char)v113 != v186 && v185 == (int32_t)v101)) {\n        // 0x402230\n        v19 = stream2->e0;\n        goto lab_0x402234;\n    }\n    int64_t v187 = v115;\n    int64_t v188 = v108;\n    int64_t v189 = (int64_t)g29; // 0x402108\n    int64_t * v190 = (int64_t *)(v189 + 40); // 0x40210f\n    uint64_t v191 = *v190; // 0x40210f\n    int32_t * v192; // 0x401ee0\n    if (v191 >= *(int64_t *)(v189 + 48)) {\n        // 0x402410\n        *v192 = (int32_t)v187;\n        __overflow(g29, v185);\n        v183 = v188;\n        v184 = (int64_t)*v192;\n    } else {\n        // 0x40211d\n        *v190 = v191 + 1;\n        *(char *)v191 = v186;\n        v183 = v188;\n        v184 = v187;\n    }\n    goto lab_0x402127;\n  lab_0x402127:\n    // 0x402127\n    if ((char)v183 != 0) {\n        // 0x402230\n        v19 = stream2->e0;\n        goto lab_0x402234;\n    }\n    // 0x402130\n    g47 = g62;\n    v79 = v184;\n    v76 = v183;\n    goto lab_0x40213e;\n  lab_0x402234:;\n    int64_t v193 = (int64_t)\"-\"; // 0x402236\n    int64_t v194 = 2; // 0x402236\n    if ((v19 & 32) != 0) {\n        // 0x402469\n        error(0, *__errno_location(), \"%s\", (char *)function_405230(0, 3, file_path));\n        return (int32_t)&g66 ^ (int32_t)&g66;\n    }\n    unsigned char v195 = *(char *)file_path; // 0x402249\n    char v196 = *(char *)v193; // 0x402249\n    int64_t v197 = file_path + v4; // 0x402249\n    char v198 = v196; // 0x402249\n    bool v199 = false; // 0x402249\n    while (v195 == v196) {\n        int64_t v200 = v194 - 1; // 0x402249\n        v193 += v4;\n        v194 = v200;\n        v198 = v195;\n        v199 = true;\n        if (v200 == 0) {\n            // break -> \n            break;\n        }\n        v195 = *(char *)v197;\n        v196 = *(char *)v193;\n        v197 += v4;\n        v198 = v196;\n        v199 = false;\n    }\n    unsigned char v201 = v198;\n    if ((v195 >= v201 && !v199) == v195 < v201) {\n        // 0x4023f0\n        clearerr_unlocked(stream2);\n        return 1;\n    }\n    // 0x40225b\n    if ((int32_t)function_405c20(v13, v197) == -1) {\n        // 0x402469\n        error(0, *__errno_location(), \"%s\", (char *)function_405230(0, 3, file_path));\n        return (int32_t)&g66 ^ (int32_t)&g66;\n    }\n    // 0x402270\n    return 1;\n  lab_0x401f5c:\n    // 0x401f5c\n    ungetc(c3, stream2);\n    v160 = (char *)(v2 + 11);\n    v192 = (int32_t *)(v2 + 12);\n    v156 = 0;\n    v157 = 1;\n    v158 = 0;\n    while (true) {\n      lab_0x401f90_2:;\n        char v159 = *v160 & (char)(v157 == 1); // 0x401f98\n        v94 = v156;\n        v90 = v157;\n        v92 = v158;\n        v67 = v158;\n        v72 = v159;\n        if (v159 != 0) {\n            goto lab_0x402156;\n        } else {\n            goto lab_0x401fa3;\n        }\n    }\n  lab_0x4025d8:;\n    int64_t v202 = g46; // 0x4025d8\n    free((int64_t *)v202);\n    int32_t v203 = stream2->e0; // 0x4025e4\n    g46 = 0;\n    v19 = v203;\n    if ((v203 & 48) == 0) {\n        // 0x4025fb\n        function_405bc0(v202);\n        // UNREACHABLE\n    }\n    goto lab_0x402234;\n}\n"
        },
        {
            "funcName": "function_4026b0",
            "funcStartAddr": "4026b0",
            "funcEndAddr": "402add",
            "decompiledFuncCode": "int64_t function_4026b0(int32_t status) {\n    // 0x4026b0\n    if (status != 0) {\n        // 0x4026ca\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4026ef\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4026f6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s OPTION... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print selected parts of lines from each FILE to standard output.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --bytes=LIST        select only these bytes\\n  -c, --characters=LIST   select only these characters\\n  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --fields=LIST       select only these fields;  also print any line\\n                            that contains no delimiter character, unless\\n                            the -s option is specified\\n  -n                      (ignored)\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --complement        complement the set of selected bytes, characters\\n                            or fields\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -s, --only-delimited    do not print lines not containing delimiters\\n      --output-delimiter=STRING  use STRING as the output delimiter\\n                            the default is to use the input delimiter\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nUse one, and only one of -b, -c or -f.  Each LIST is made up of one\\nrange, or many ranges separated by commas.  Selected input is written\\nin the same order that it is read, and is written exactly once.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"Each range is one of:\\n\\n  N     N'th byte, character or field, counted from 1\\n  N-    from N'th byte, character or field, to end of line\\n  N-M   from N'th to M'th (included) byte, character or field\\n  -M    from first to M'th (included) byte, character or field\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x4028b8\n    bool v2; // 0x4026b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402940\n    int64_t v6 = *(int64_t *)v5; // 0x402944\n    int64_t v7 = 4; // 0x40294a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"cut\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402956\n        char v11 = *(char *)v9; // 0x402956\n        char v12 = v11; // 0x402956\n        bool v13 = false; // 0x402956\n        while (v10 == v11) {\n            // 0x40294c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402956\n            int64_t v15 = v8 + v3; // 0x402956\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402962\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x402962\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402a74;\n        } else {\n            // 0x402a5e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ab3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4029c4;\n            } else {\n                goto lab_0x402a74;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4029c4;\n        } else {\n            // 0x4029aa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ab3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4029c4;\n            } else {\n                goto lab_0x4029c4;\n            }\n        }\n    }\n  lab_0x402a74:\n    // 0x402a74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402a04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4026ef\n    exit(status);\n    // UNREACHABLE\n  lab_0x4029c4:\n    // 0x4029c4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402a04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4026ef\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402ae0",
            "funcStartAddr": "402ae0",
            "funcEndAddr": "402af2",
            "decompiledFuncCode": "int64_t function_402ae0(void) {\n    int64_t result = 0xffffffff; // 0x402ae9\n    int64_t v1; // 0x402ae0\n    if (0x100000000 * v1 >> 32 >= (v1 & 0xffffffff)) {\n        int32_t v2 = v1;\n        int32_t v3 = v2 - (int32_t)v1; // 0x402ae7\n        result = v3 < 0 == ((v3 ^ v2) & (int32_t)(v1 ^ v1)) < 0 == (v3 != 0);\n    }\n    // 0x402af1\n    return result;\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402bcc",
            "decompiledFuncCode": "int64_t function_402b00(int64_t a1, int64_t a2) {\n    int32_t v1 = g63; // 0x402b0c\n    int64_t v2 = v1; // 0x402b0c\n    int64_t v3 = g62; // 0x402b24\n    int64_t v4 = v2; // 0x402b24\n    if (g49 == v2) {\n        int64_t v5; // 0x402b00\n        int64_t v6; // 0x402b00\n        if (g62 == 0) {\n            // 0x402b98\n            v5 = 8;\n            v6 = 128;\n            if (v1 != 0) {\n                // 0x402b9d\n                v5 = v2;\n                v6 = 16 * v2;\n                if (v1 > -1 != v1 > -1) {\n                    // 0x402bb7\n                    function_405bc0(a1);\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            if (v1 <= 0xffffffff) {\n                // 0x402bb7\n                function_405bc0(a1);\n                // UNREACHABLE\n            }\n            int64_t v7 = v2 + 1 + v2 / 2; // 0x402b6a\n            v5 = v7;\n            v6 = 16 * v7;\n        }\n        // 0x402b76\n        g49 = v5;\n        v3 = function_4059d0(g62, v6);\n        g62 = v3;\n        v4 = g63;\n    }\n    int64_t result = 16 * v4 + v3; // 0x402b31\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 8) = a2;\n    g63 = (int32_t)v4 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "40316e",
            "decompiledFuncCode": "int64_t function_402bd0(int64_t a1, uint32_t a2) {\n    int64_t v1 = a1; // 0x402bee\n    int64_t v2 = 0; // 0x402bee\n    if (a2 % 2 != 0) {\n        // 0x402bf0\n        bool v3; // 0x402bd0\n        int64_t v4 = v3 ? -1 : 1; // 0x402bfd\n        int64_t v5 = (int64_t)\"-\"; // 0x402bd0\n        int64_t v6 = a1; // 0x402bd0\n        int64_t v7 = 2; // 0x402bfd\n        unsigned char v8 = *(char *)v6; // 0x402bfd\n        char v9 = *(char *)v5; // 0x402bfd\n        char v10 = v9; // 0x402bfd\n        bool v11 = false; // 0x402bfd\n        while (v8 == v9) {\n            // 0x402bf0\n            v7--;\n            v5 += v4;\n            v6 += v4;\n            v10 = v8;\n            v11 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = *(char *)v6;\n            v9 = *(char *)v5;\n            v10 = v9;\n            v11 = false;\n        }\n        unsigned char v12 = v10;\n        v2 = !((v8 < v12 | v11)) == v8 < v12;\n        v1 = v2 + a1;\n    }\n    int32_t v13 = 1; // 0x402c21\n    int64_t v14 = v2; // 0x402c21\n    int64_t v15 = v2; // 0x402c21\n    int64_t v16 = v2; // 0x402c21\n    int64_t v17 = 0; // 0x402c21\n    int64_t v18 = 0; // 0x402c21\n    int64_t v19 = v1; // 0x402c21\n    char * str; // 0x402ff3\n    int64_t v20; // 0x402bd0\n    int64_t v21; // 0x402bd0\n    int64_t v22; // 0x402bd0\n    char * format; // 0x402bd0\n    int64_t v23; // 0x402bd0\n    int64_t v24; // 0x402bd0\n    uint64_t v25; // 0x402bd0\n    int32_t v26; // 0x402bd0\n    int32_t v27; // 0x402bd0\n    char * format2; // 0x402bd0\n    char * v28; // 0x402cb2\n    while (true) {\n      lab_0x402cb2:\n        // 0x402cb2\n        v22 = v19;\n        v21 = v18;\n        v25 = v16;\n        v23 = v15;\n        v24 = v14;\n        v28 = (char *)v22;\n        char v29 = *v28; // 0x402cb2\n        if (v29 != 45) {\n            // 0x402c30\n            v27 = v13;\n            if (v29 == 44) {\n                goto lab_0x402c5c;\n            } else {\n                unsigned char v30 = *(char *)(2 * (int64_t)v29 + (int64_t)*__ctype_b_loc()); // 0x402c4c\n                if (v29 != 0 == v30 % 2 == 0) {\n                    if ((int32_t)v29 >= 58) {\n                        // 0x403118\n                        function_4053b0(v22);\n                        if ((a2 & 4) == 0) {\n                            // 0x403160\n                            format2 = dcgettext(NULL, \"invalid field value %s\", 5);\n                            goto lab_0x40313b;\n                        } else {\n                            // 0x40312f\n                            format2 = dcgettext(NULL, \"invalid byte/character position %s\", 5);\n                            goto lab_0x40313b;\n                        }\n                    }\n                    char * v31 = g48; // 0x402e95\n                    if ((char)v17 == 0 || g48 == NULL) {\n                        // 0x402ef8\n                        g48 = v28;\n                        v31 = v28;\n                    }\n                    // 0x402ea1\n                    str = v31;\n                    if (v25 >= 0x199999999999999a) {\n                        goto lab_0x402ff3_2;\n                    }\n                    int64_t v32 = (0x100000000 * (int64_t)v29 - 0x3000000000 >> 32) + 10 * v25; // 0x402ecc\n                    v26 = v27;\n                    v14 = (char)v23 == 0 ? 1 : v24 & 0xffffffff;\n                    v15 = v23;\n                    v16 = v32;\n                    v20 = 1;\n                    v18 = ((char)v23 != 0 ? v23 : v21) & 0xffffffff;\n                    if (v32 < v25 || v32 == -1) {\n                        goto lab_0x402ff3_2;\n                    }\n                    goto lab_0x402cae;\n                } else {\n                    goto lab_0x402c5c;\n                }\n            }\n        } else {\n            if ((char)v23 != 0) {\n                // break -> 0x40308b\n                break;\n            }\n            char v33 = v24; // 0x402ccf\n            unsigned char v34 = (char)(v25 == 0) & v33; // 0x402ccf\n            if (v34 != 0) {\n                if ((a2 & 4) == 0) {\n                    // 0x4030a8\n                    format = dcgettext(NULL, \"fields are numbered from 1\", 5);\n                    goto lab_0x402fdb;\n                } else {\n                    // 0x40307a\n                    format = dcgettext(NULL, \"byte/character positions are numbered from 1\", 5);\n                    goto lab_0x402fdb;\n                }\n            }\n            if (v33 != 0) {\n                // 0x402e70\n                v26 = v25;\n                v14 = v24;\n                v15 = v24 & 0xffffffff;\n                v16 = 0;\n                v20 = v34;\n                v18 = v21;\n            } else {\n                // 0x402ce2\n                v26 = 1;\n                v14 = v24;\n                v15 = 1;\n                v16 = 0;\n                v20 = v24 & 0xffffffff;\n                v18 = v21;\n            }\n            goto lab_0x402cae;\n        }\n    }\n    if ((a2 & 4) == 0) {\n        // 0x4030b9\n        format = dcgettext(NULL, \"invalid field range\", 5);\n    } else {\n        // 0x403097\n        format = dcgettext(NULL, \"invalid byte or character range\", 5);\n    }\n  lab_0x402fdb:\n    // 0x402fdb\n    error(0, 0, format);\n    function_4026b0(1);\n    // UNREACHABLE\n  lab_0x402d17_2:;\n    // 0x402d17\n    int64_t v35; // 0x402bd0\n    int64_t v36; // 0x402bd0\n    int64_t v37; // 0x402bd0\n    int64_t v38; // 0x402bd0\n    int64_t v39; // 0x402bd0\n    int64_t v40; // 0x402bd0\n    if (g63 == 0) {\n        // 0x4030f6\n        v40 = (int64_t)\"missing list of fields\";\n        if ((a2 & 4) == 0) {\n            goto lab_0x402fd4_2;\n        } else {\n            // 0x403102\n            format = dcgettext(NULL, \"missing list of byte/character positions\", 5);\n            goto lab_0x402fdb;\n        }\n    } else {\n        // 0x402d27\n        qsort((int64_t *)g62, g63, 16, (int32_t (*)(int64_t *, int64_t *))0x402ae0);\n        int64_t v41 = g63; // 0x402d40\n        v37 = 0;\n        v35 = g62;\n        v38 = v41;\n        v39 = v41;\n        v36 = g62;\n        if (g63 == 0) {\n            goto lab_0x402de1;\n        } else {\n            goto lab_0x402d59;\n        }\n    }\n  lab_0x402fd4_2:\n    // 0x402fd4\n    format = dcgettext(NULL, (char *)v40, 5);\n    goto lab_0x402fdb;\n  lab_0x402ff3_2:\n    // 0x402ff3\n    strspn(str, \"0123456789\");\n    int64_t v42 = function_405c00(); // 0x40300d\n    function_4053b0(v42);\n    char * format3; // 0x402bd0\n    if ((a2 & 4) == 0) {\n        // 0x4030e5\n        format3 = dcgettext(NULL, \"field number %s is too large\", 5);\n        goto lab_0x40303c;\n    } else {\n        // 0x403030\n        format3 = dcgettext(NULL, \"byte/character offset %s is too large\", 5);\n        goto lab_0x40303c;\n    }\n  lab_0x402c5c:\n    if ((char)v23 == 0) {\n        if (v25 == 0) {\n            if ((a2 & 4) == 0) {\n                // 0x4030a8\n                format = dcgettext(NULL, \"fields are numbered from 1\", 5);\n                goto lab_0x402fdb;\n            } else {\n                // 0x4030d6\n                format = dcgettext(NULL, \"byte/character positions are numbered from 1\", 5);\n                goto lab_0x402fdb;\n            }\n        }\n        // 0x402d09\n        function_402b00(v25, v25);\n        v26 = v27;\n        v14 = 0;\n        v15 = 0;\n        v16 = 0;\n        v20 = 0;\n        v18 = 0;\n        if (*v28 == 0) {\n            goto lab_0x402d17_2;\n        }\n        goto lab_0x402cae;\n    } else {\n        if ((char)v24 != 0) {\n            // 0x402e40\n            if ((char)v21 == 0) {\n                goto lab_0x402c8b;\n            } else {\n                goto lab_0x402e49;\n            }\n        } else {\n            if ((char)v21 != 0) {\n                goto lab_0x402e49;\n            } else {\n                // 0x402c76\n                v40 = (int64_t)\"invalid range with no endpoint: -\";\n                if (a2 % 2 == 0) {\n                    goto lab_0x402fd4_2;\n                }\n                goto lab_0x402c8b;\n            }\n        }\n    }\n  lab_0x402cae:\n    // 0x402cae\n    v13 = v26;\n    v17 = v20;\n    v19 = v22 + 1;\n    goto lab_0x402cb2;\n  lab_0x402c8b:;\n    int32_t v43 = 1;\n    function_402b00((int64_t)v43, -1);\n    int32_t v44 = v43; // 0x402c97\n    goto lab_0x402c9c;\n  lab_0x402e49:;\n    uint64_t v86 = (int64_t)v27; // 0x402e49\n    v40 = (int64_t)\"invalid decreasing range\";\n    if (v25 < v86) {\n        goto lab_0x402fd4_2;\n    }\n    // 0x402e54\n    function_402b00(v86, v25);\n    v44 = v27;\n    goto lab_0x402c9c;\n  lab_0x402c9c:\n    // 0x402c9c\n    v26 = v44;\n    v14 = 0;\n    v15 = 0;\n    v16 = 0;\n    v20 = 0;\n    v18 = 0;\n    if (*v28 == 0) {\n        goto lab_0x402d17_2;\n    }\n    goto lab_0x402cae;\n  lab_0x40313b:\n    // 0x40313b\n    error(0, 0, format2);\n    function_4026b0(1);\n    // UNREACHABLE\n  lab_0x402de1:;\n    int64_t v45 = v39; // 0x402de6\n    int64_t v46 = v36; // 0x402de6\n    int64_t * v47; // 0x402f1f\n    if ((a2 & 2) != 0) {\n        // 0x402f14\n        g62 = 0;\n        v47 = (int64_t *)v36;\n        uint64_t v48 = *v47; // 0x402f1f\n        g63 = 0;\n        g49 = 0;\n        if (v48 < 2) {\n            goto lab_0x402f3e;\n        } else {\n            // 0x402fb7\n            function_402b00(1, v48 - 1);\n            goto lab_0x402f3e;\n        }\n    } else {\n        goto lab_0x402dec;\n    }\n  lab_0x402d59:;\n    int64_t v49 = v37 + 1; // 0x402d59\n    int64_t v50 = v49; // 0x402d60\n    int64_t v51 = v38; // 0x402d60\n    int64_t v52 = v35; // 0x402d60\n    int64_t v53 = v49; // 0x402d60\n    int64_t v54 = v35; // 0x402d60\n    int64_t v55 = v38; // 0x402d60\n    if (v49 >= v38) {\n        goto lab_0x402d50;\n    } else {\n        goto lab_0x402d62;\n    }\n  lab_0x402dec:;\n    int64_t v56 = v45 + 1; // 0x402dec\n    g63 = v56;\n    int64_t v57 = function_4059d0(v46, 16 * v56); // 0x402e01\n    g62 = v57;\n    int64_t result = v57 - 16 + 16 * (int64_t)g63; // 0x402e18\n    *(int64_t *)(result + 8) = -1;\n    *(int64_t *)result = -1;\n    return result;\n  lab_0x402d50:\n    // 0x402d50\n    v37 = v50;\n    v35 = v52;\n    v38 = v51;\n    v39 = v51;\n    v36 = v52;\n    if (v50 >= v51) {\n        goto lab_0x402de1;\n    } else {\n        goto lab_0x402d59;\n    }\n  lab_0x402d62:;\n    int64_t v58 = v55;\n    int64_t v59 = v54;\n    int64_t v60 = v53;\n    int64_t v61 = 16 * v60; // 0x402d65\n    int64_t v62 = v61 - 16; // 0x402d69\n    int64_t v63 = v61 + v59; // 0x402d6d\n    int64_t v64 = v62 + v59; // 0x402d71\n    uint64_t v65 = *(int64_t *)(v64 + 8); // 0x402d75\n    v50 = v60;\n    v51 = v58;\n    v52 = v59;\n    int64_t v66; // 0x402bd0\n    int64_t v67; // 0x402bd0\n    int64_t v68; // 0x402bd0\n    int64_t v69; // 0x402bd0\n    int64_t v70; // 0x402bd0\n    int64_t v71; // 0x402d7e\n    if (v65 < *(int64_t *)v63) {\n        goto lab_0x402d50;\n    } else {\n        // 0x402d7e\n        v71 = v61 + 16;\n        v67 = v65;\n        v70 = v64;\n        v68 = v58;\n        v69 = v63;\n        v66 = v59;\n        goto lab_0x402d88;\n    }\n  lab_0x402f3e:;\n    int64_t v72 = 16 * v39 + v36;\n    int64_t v73; // 0x402bd0\n    if (v39 < 2) {\n        goto lab_0x402f7b;\n    } else {\n        // 0x402f58\n        v73 = v36 + 16;\n        goto lab_0x402f58_2;\n    }\n  lab_0x402f7b:;\n    int64_t v74 = *(int64_t *)(v72 - 8); // 0x402f7f\n    if (v74 != -1) {\n        // 0x402fa5\n        function_402b00(v74 + 1, -1);\n        goto lab_0x402f8a;\n    } else {\n        goto lab_0x402f8a;\n    }\n  lab_0x402d88:;\n    uint64_t v75 = v67;\n    uint64_t v76 = *(int64_t *)(v69 + 8); // 0x402d88\n    *(int64_t *)(v70 + 8) = v76 >= v75 ? v76 : v75;\n    memmove((int64_t *)v69, (int64_t *)(v71 + v66), 16 * (int32_t)(v68 - v60) - 16);\n    int64_t v77 = g62; // 0x402db0\n    int64_t v78 = (int64_t)g63 - 1; // 0x402db7\n    g63 = v78;\n    v50 = v60;\n    v51 = v78;\n    v52 = v77;\n    if (v78 > v60) {\n        int64_t v79 = v77 + v62; // 0x402dc7\n        int64_t v80 = v77 + v61; // 0x402dcb\n        uint64_t v81 = *(int64_t *)(v79 + 8); // 0x402dcf\n        v67 = v81;\n        v70 = v79;\n        v68 = v78;\n        v69 = v80;\n        v66 = v77;\n        if (*(int64_t *)v80 > v81) {\n            int64_t v82 = v60 + 1; // 0x402d59\n            v50 = v82;\n            v51 = v78;\n            v52 = v77;\n            v53 = v82;\n            v54 = v77;\n            v55 = v78;\n            if (v82 >= v78) {\n                goto lab_0x402d50;\n            } else {\n                goto lab_0x402d62;\n            }\n        } else {\n            goto lab_0x402d88;\n        }\n    } else {\n        goto lab_0x402d50;\n    }\n  lab_0x402f8a:\n    // 0x402f8a\n    free(v47);\n    v45 = g63;\n    v46 = g62;\n    goto lab_0x402dec;\n  lab_0x402f58_2:;\n    int64_t v83 = *(int64_t *)v73; // 0x402f5c\n    int64_t v84 = *(int64_t *)(v73 - 8) + 1; // 0x402f60\n    if (v84 == v83) {\n        goto lab_0x402f72;\n    } else {\n        // 0x402f69\n        function_402b00(v84, v83 - 1);\n        goto lab_0x402f72;\n    }\n  lab_0x402f72:;\n    int64_t v85 = v73 + 16; // 0x402f72\n    v73 = v85;\n    if (v72 != v85) {\n        goto lab_0x402f58_2;\n    } else {\n        goto lab_0x402f7b;\n    }\n  lab_0x40303c:\n    // 0x40303c\n    error(0, 0, format3);\n    free((int64_t *)v42);\n    function_4026b0(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403170",
            "funcStartAddr": "403170",
            "funcEndAddr": "4031a6",
            "decompiledFuncCode": "int64_t function_403170(void) {\n    // 0x403170\n    g63 = 0;\n    g49 = 0;\n    free((int64_t *)g62);\n    g62 = 0;\n    return &g66;\n}\n"
        },
        {
            "funcName": "function_4031b0",
            "funcStartAddr": "4031b0",
            "funcEndAddr": "4031b8",
            "decompiledFuncCode": "int64_t function_4031b0(int64_t a1) {\n    // 0x4031b0\n    g51 = a1;\n    int64_t result; // 0x4031b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031c0",
            "funcStartAddr": "4031c0",
            "funcEndAddr": "4031c8",
            "decompiledFuncCode": "int64_t function_4031c0(int64_t a1) {\n    // 0x4031c0\n    g50 = a1;\n    int64_t result; // 0x4031c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031d0",
            "funcStartAddr": "4031d0",
            "funcEndAddr": "40326e",
            "decompiledFuncCode": "int64_t function_4031d0(void) {\n    // 0x4031d0\n    int32_t * err_num; // 0x4031e6\n    if ((int32_t)function_406cd0((int64_t)g29) == 0) {\n        goto lab_0x4031fc;\n    } else {\n        // 0x4031e6\n        err_num = __errno_location();\n        if (g50 == 0) {\n            goto lab_0x403213;\n        } else {\n            // 0x4031f7\n            if (*err_num != 32) {\n                goto lab_0x403213;\n            } else {\n                goto lab_0x4031fc;\n            }\n        }\n    }\n  lab_0x4031fc:;\n    int64_t result = function_406cd0((int64_t)g32); // 0x403203\n    if ((int32_t)result == 0) {\n        // 0x40320c\n        return result;\n    }\n    // 0x40324e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x403213:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40321f\n    if (g51 == 0) {\n        // 0x403259\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403233\n        error(0, *err_num, \"%s: %s\", (char *)function_405200((int64_t)g51), v1);\n    }\n    // 0x40324e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403270",
            "funcStartAddr": "403270",
            "funcEndAddr": "403275",
            "decompiledFuncCode": "int64_t function_403270(void) {\n    // 0x403270\n    int64_t fd; // 0x403270\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "4032a1",
            "decompiledFuncCode": "int64_t function_403280(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x403280\n    if (stream == 0) {\n        // 0x4032a0\n        int64_t result; // 0x403280\n        return result;\n    }\n    // 0x403285\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "4035fd",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t * a1, int64_t * a2, int32_t a3, uint64_t a4, char a5, char a6, int64_t a7) {\n    int64_t * mem = a1; // 0x4032f2\n    int64_t size = (int64_t)a2; // 0x4032f2\n    if (a1 == NULL) {\n        // 0x4035c8\n        size = a4 < 64 ? a4 : 64;\n        mem = malloc((int32_t)size);\n        if (mem == NULL) {\n            // 0x403474\n            return -1;\n        }\n    }\n    int64_t v1 = (int64_t)mem;\n    uint64_t v2 = (int64_t)a3; // 0x4032f8\n    int64_t v3 = v1; // 0x4032fd\n    int64_t v4 = size; // 0x4032fd\n    int64_t v5; // 0x4032b0\n    uint64_t v6; // 0x4032b0\n    int64_t v7; // 0x4032b0\n    char v8; // 0x4032b0\n    int64_t v9; // 0x4032b0\n    int64_t v10; // 0x4032b0\n    int64_t v11; // 0x4032b0\n    int64_t v12; // 0x4032b0\n    int64_t v13; // 0x4032b0\n    int32_t v14; // 0x4032b0\n    int32_t v15; // 0x4032b0\n    int32_t v16; // 0x4032b0\n    int64_t v17; // 0x4032b0\n    int64_t v18; // 0x4032b0\n    int64_t v19; // 0x4032b0\n    int32_t v20; // bp-64, 0x4032b0\n    int64_t v21; // 0x4032b0\n    int64_t v22; // 0x4033e1\n    int64_t v23; // 0x403355\n    if (size >= v2) {\n        int64_t v24 = size - v2; // 0x403306\n        v3 = v1;\n        v4 = size;\n        if (v24 == 0 != size >= a4) {\n            char v25 = a5 == -1 ? a6 : a5;\n            int64_t * v26 = (int64_t *)(a7 + 8);\n            int32_t v27 = v25;\n            int32_t v28 = a5 == -1 ? a6 : a6 == -1 ? a5 : a6;\n            v21 = v2 ^ -0x8000000000000000;\n            v17 = v1;\n            v10 = v1 + v2;\n            v9 = v24;\n            v5 = size;\n            while (true) {\n              lab_0x4033d9:\n                // 0x4033d9\n                v6 = v5;\n                v11 = v10;\n                v18 = v17;\n                v22 = function_405ce0(a7, (int64_t *)&v20);\n                if (v22 != 0) {\n                    // 0x403350\n                    v16 = v15;\n                    v23 = v20;\n                    if (v25 != -1) {\n                        int64_t v29 = function_403600(v22, v27, v28, v23); // 0x40353e\n                        if (v29 == 0) {\n                            goto lab_0x403360;\n                        } else {\n                            int64_t v30 = v29 - v22; // 0x40354c\n                            v20 = (int32_t)v30 + 1;\n                            v14 = v16;\n                            v13 = v30 + 2;\n                            v8 = 1;\n                            goto lab_0x403367;\n                        }\n                    } else {\n                        goto lab_0x403360;\n                    }\n                } else {\n                    uint64_t v31 = *v26; // 0x4033f2\n                    int32_t v32; // 0x4032b0\n                    if (v31 >= *(int64_t *)(a7 + 16)) {\n                        int32_t v33 = __uflow((struct _IO_FILE *)a7); // 0x40343b\n                        v32 = v33;\n                        if (v33 == -1) {\n                            // break -> 0x403449\n                            break;\n                        }\n                    } else {\n                        // 0x4033fc\n                        *v26 = v31 + 1;\n                        v32 = (int32_t)*(char *)v31;\n                    }\n                    int32_t v34 = v32;\n                    v20 = 1;\n                    v14 = v34;\n                    v13 = 2;\n                    v8 = v34 == v28 | v34 == v27;\n                    goto lab_0x403367;\n                }\n            }\n            if (v11 != v18) {\n              lab_0x403580:\n                // 0x403580\n                *(char *)v12 = 0;\n                *a1 = v19;\n                int64_t result = v12 - (v19 + v2); // 0x40359d\n                *a2 = v7;\n                if (result != 0) {\n                    // 0x403474\n                    return result;\n                }\n                // 0x403474\n                return -1;\n            }\n        }\n    }\n  lab_0x403458_3:\n    // 0x403458\n    *a1 = v3;\n    *a2 = v4;\n    // 0x403474\n    return -1;\n  lab_0x403360:\n    // 0x403360\n    v14 = v16;\n    v13 = v23 + 1;\n    v8 = 0;\n    goto lab_0x403367;\n  lab_0x403367:;\n    uint64_t v35 = v13;\n    int32_t v36 = v14;\n    int64_t v37 = v18; // 0x40336f\n    int64_t v38 = v11; // 0x40336f\n    int64_t v39 = v9; // 0x40336f\n    int64_t v40 = v6; // 0x40336f\n    if (v6 < a4 == v9 < v35) {\n        int64_t v41 = v6 < 64 ? v6 + 64 : 2 * v6; // 0x4034a5\n        int64_t v42 = v11 - v18; // 0x4034a9\n        uint64_t v43 = v41 - v42 < v35 ? v35 + v42 : v41; // 0x4034bb\n        int64_t v44 = v43 > a4 | v6 >= v43 ? a4 : v43;\n        int64_t v45 = v44; // 0x4034d9\n        if (v44 - v2 < 0) {\n            // 0x4034db\n            v3 = v18;\n            v4 = v21;\n            v45 = v21;\n            if (v6 == v21) {\n                goto lab_0x403458_3;\n            }\n        }\n        int64_t * mem2 = realloc((int64_t *)v18, (int32_t)v45); // 0x403504\n        v3 = v18;\n        v4 = v6;\n        if (mem2 == NULL) {\n            goto lab_0x403458_3;\n        }\n        int64_t v46 = (int64_t)mem2; // 0x403504\n        v37 = v46;\n        v38 = v42 + v46;\n        v39 = v45 - v42;\n        v40 = v45;\n    }\n    int64_t v47 = v40;\n    int64_t v48 = v39;\n    int64_t v49 = v38;\n    int64_t v50 = v37;\n    int64_t v51 = v49; // 0x40337e\n    int64_t v52 = v48; // 0x40337e\n    if (v48 >= 2) {\n        uint64_t v53 = v48 - 1; // 0x403380\n        uint64_t v54 = (int64_t)v20; // 0x403384\n        int64_t v55 = v53 < v54 ? v53 : v54; // 0x403389\n        if (v22 == 0) {\n            // 0x403488\n            *(char *)v49 = (char)v36;\n        } else {\n            // 0x403398\n            memcpy((int64_t *)v49, (int64_t *)v22, (int32_t)v55);\n        }\n        // 0x4033b0\n        v51 = v55 + v49;\n        v52 = v48 - v55;\n    }\n    // 0x4033b6\n    if (v22 != 0) {\n        // 0x4033bb\n        v3 = v50;\n        v4 = v47;\n        if ((int32_t)function_406d30(a7, (int64_t)v20) != 0) {\n            goto lab_0x403458_3;\n        }\n    }\n    // 0x4033d0\n    v17 = v50;\n    v15 = v36;\n    v10 = v51;\n    v9 = v52;\n    v5 = v47;\n    v19 = v50;\n    v12 = v51;\n    v7 = v47;\n    if (v8 != 0) {\n        goto lab_0x403580;\n    }\n    goto lab_0x4033d9;\n}\n"
        },
        {
            "funcName": "function_403600",
            "funcStartAddr": "403600",
            "funcEndAddr": "403789",
            "decompiledFuncCode": "int64_t function_403600(int64_t result, int32_t a2, int32_t a3, int64_t a4) {\n    uint64_t v1 = (int64_t)a2;\n    char v2 = a2; // 0x403600\n    char v3 = a3; // 0x403600\n    if (v2 == v3) {\n        // 0x403778\n        return function_406bc0(result, v1 % 256, a4);\n    }\n    int64_t v4 = result; // 0x403612\n    int64_t v5 = 0; // 0x403612\n    int64_t result2; // 0x403600\n    if (a4 != 0) {\n        // 0x403614\n        v4 = result;\n        v5 = a4;\n        if (result % 8 != 0) {\n            char v6 = result;\n            int64_t v7 = result; // 0x40361f\n            if (v6 != v3 != v6 != v2) {\n                // 0x403763\n                return result;\n            }\n            int64_t v8 = a4; // 0x40361f\n            v7++;\n            v8--;\n            v4 = v7;\n            v5 = v8;\n            while (v8 != 0 && v7 % 8 != 0) {\n                char v9 = *(char *)v7; // 0x403636\n                result2 = v7;\n                if (v9 == v3 || v9 == v2) {\n                    // 0x403763\n                    return result2;\n                }\n                v7++;\n                v8--;\n                v4 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v10 = v4; // 0x4036ab\n    int64_t v11 = v5; // 0x4036ab\n    int64_t result3; // 0x403600\n    int64_t v12; // 0x403600\n    if (v5 < 8) {\n        goto lab_0x403727;\n    } else {\n        uint64_t v13 = (int64_t)a3;\n        int64_t v14 = 256 * v13 & 0xff00 | v13 % 256; // 0x403675\n        int64_t v15 = 256 * v1 & 0xff00 | v1 % 256; // 0x403677\n        int64_t v16 = 0x10000 * v14 | v14; // 0x40368d\n        int64_t v17 = 0x10000 * v15 | v15; // 0x403690\n        int64_t v18 = 0x100000000 * v16 | v16; // 0x4036a1\n        int64_t v19 = 0x100000000 * v17 | v17; // 0x4036a4\n        int64_t v20 = *(int64_t *)v4; // 0x4036b7\n        int64_t v21 = v20 ^ v19; // 0x4036bd\n        int64_t v22 = v20 ^ v18; // 0x4036c0\n        result3 = v4;\n        v12 = v5;\n        if (((v22 - 0x101010101010101 & (v22 ^ -0x7f7f7f7f7f7f7f80) | v21 - 0x101010101010101 & (v21 ^ -0x7f7f7f7f7f7f7f80)) & -0x7f7f7f7f7f7f7f80) == 0) {\n            int64_t v23 = v5 - 8; // 0x403719\n            int64_t v24 = v4 + 8; // 0x40371d\n            v10 = v24;\n            v11 = v23;\n            while (v23 >= 8) {\n                int64_t v25 = *(int64_t *)v24; // 0x4036f0\n                int64_t v26 = v25 ^ v18; // 0x4036f6\n                int64_t v27 = v25 ^ v19; // 0x4036f9\n                result3 = v24;\n                v12 = v23;\n                if (((v26 - 0x101010101010101 & (v26 ^ -0x7f7f7f7f7f7f7f80) | v27 - 0x101010101010101 & (v27 ^ -0x7f7f7f7f7f7f7f80)) & -0x7f7f7f7f7f7f7f80) != 0) {\n                    goto lab_0x40372c;\n                }\n                v23 -= 8;\n                v24 += 8;\n                v10 = v24;\n                v11 = v23;\n            }\n            goto lab_0x403727;\n        } else {\n            goto lab_0x40372c;\n        }\n    }\n  lab_0x40372c:;\n    char v28 = *(char *)result3; // 0x40372c\n    if (v28 == v3 || v28 == v2) {\n        // 0x403763\n        return result3;\n    }\n    int64_t v29 = result3 + 1;\n    result2 = 0;\n    while (v29 != v12 + result3) {\n        char v30 = *(char *)v29; // 0x403748\n        result2 = v29;\n        if (v30 == v2 || v30 == v3) {\n            // break -> 0x403763\n            break;\n        }\n        v29++;\n        result2 = 0;\n    }\n    // 0x403763\n    return result2;\n  lab_0x403727:\n    // 0x403727\n    result3 = v10;\n    v12 = v11;\n    if (v11 == 0) {\n        // 0x403763\n        return 0;\n    }\n    goto lab_0x40372c;\n}\n"
        },
        {
            "funcName": "function_403790",
            "funcStartAddr": "403790",
            "funcEndAddr": "403829",
            "decompiledFuncCode": "int64_t function_403790(int64_t str) {\n    // 0x403790\n    if (str == 0) {\n        // 0x403809\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40379e\n    int64_t result = (int64_t)found_char_pos; // 0x40379e\n    if (found_char_pos == NULL) {\n        // 0x4037f9\n        g52 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4037a8\n    if (v1 - str < 7) {\n        // 0x4037f9\n        g52 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x4037b8\n    bool v2; // 0x403790\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403790\n    int64_t v5 = result - 6; // 0x403790\n    int64_t v6 = 7; // 0x4037c6\n    unsigned char v7 = *(char *)v5; // 0x4037c6\n    char v8 = *(char *)v4; // 0x4037c6\n    char v9 = v8; // 0x4037c6\n    bool v10 = false; // 0x4037c6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4037d0\n    int64_t v13 = v1; // 0x4037d0\n    int64_t v14 = 3; // 0x4037d0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4037f9\n        g52 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4037e2\n    char v16 = *(char *)v12; // 0x4037e2\n    char v17 = v16; // 0x4037e2\n    bool v18 = false; // 0x4037e2\n    while (v15 == v16) {\n        // 0x4037d2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4037ec\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4037ee\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x4037f9\n    g52 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403830",
            "funcStartAddr": "403830",
            "funcEndAddr": "403922",
            "decompiledFuncCode": "int64_t function_403830(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403844\n    int64_t result = (int64_t)v1; // 0x403844\n    if (result != a1) {\n        // 0x403851\n        return result;\n    }\n    int64_t v2 = function_406ee0(); // 0x403860\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403916\n    if (v3 == 85) {\n        // 0x403870\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403908\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40389e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x4038ab\n        // 0x403851\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403908\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4038ed\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4038fa\n    // 0x403851\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403987",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403930\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403978\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403987",
            "funcStartAddr": "403987",
            "funcEndAddr": "404b51",
            "decompiledFuncCode": "int64_t function_403987(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4039d1\n    int64_t v3 = 0; // 0x4039d1\n    int64_t v4; // 0x403987\n    int64_t v5; // 0x403987\n    int64_t v6; // 0x403987\n    int64_t v7; // 0x403987\n    int64_t v8; // 0x403987\n    int64_t v9; // 0x403987\n    int64_t v10; // 0x403987\n    int64_t v11; // 0x403987\n    int64_t v12; // 0x403987\n    int64_t v13; // 0x403987\n    int64_t v14; // 0x403987\n    int64_t v15; // 0x403987\n    int64_t v16; // 0x403987\n    int64_t v17; // 0x403987\n    int64_t v18; // 0x403987\n    int64_t result; // 0x403987\n    int64_t v19; // 0x403987\n    int32_t wc; // bp+132, 0x403987\n    int64_t ps; // bp+136, 0x403987\n    char v20; // 0x403f40\n    int64_t v21; // 0x403f40\n    int64_t v22; // 0x4042e8\n    int64_t v23; // 0x403987\n    int64_t v24; // 0x404307\n    int32_t v25; // 0x403987\n    while (true) {\n      lab_0x4039d8_2:\n        // 0x4039d8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403987\n        int64_t v27; // 0x403a0c\n        while (true) {\n          lab_0x4039d8:\n            // 0x4039d8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4039e3\n            if (v15 == -1) {\n                // 0x4039e5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4039f3\n            if (v28) {\n                // break (via goto) -> 0x404158\n                goto lab_0x404158;\n            }\n            // 0x4039fc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g65 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403feb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403b31;\n                    }\n                    // 0x40440d\n                    v26 = v5 + 1;\n                    goto lab_0x4039d8;\n                }\n                case 7: {\n                    goto lab_0x403b31;\n                }\n                case 8: {\n                    goto lab_0x403b31;\n                }\n                case 9: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403b31;\n                }\n                case 12: {\n                    goto lab_0x403b31;\n                }\n                case 13: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x403afd;\n                }\n                case 36: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403b31;\n                }\n                case 38: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403b31;\n                }\n                case 44: {\n                    goto lab_0x403b31;\n                }\n                case 45: {\n                    goto lab_0x403b31;\n                }\n                case 46: {\n                    goto lab_0x403b31;\n                }\n                case 47: {\n                    goto lab_0x403b31;\n                }\n                case 48: {\n                    goto lab_0x403b31;\n                }\n                case 49: {\n                    goto lab_0x403b31;\n                }\n                case 50: {\n                    goto lab_0x403b31;\n                }\n                case 51: {\n                    goto lab_0x403b31;\n                }\n                case 52: {\n                    goto lab_0x403b31;\n                }\n                case 53: {\n                    goto lab_0x403b31;\n                }\n                case 54: {\n                    goto lab_0x403b31;\n                }\n                case 55: {\n                    goto lab_0x403b31;\n                }\n                case 56: {\n                    goto lab_0x403b31;\n                }\n                case 57: {\n                    goto lab_0x403b31;\n                }\n                case 58: {\n                    goto lab_0x403b31;\n                }\n                case 59: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403b31;\n                }\n                case 66: {\n                    goto lab_0x403b31;\n                }\n                case 67: {\n                    goto lab_0x403b31;\n                }\n                case 68: {\n                    goto lab_0x403b31;\n                }\n                case 69: {\n                    goto lab_0x403b31;\n                }\n                case 70: {\n                    goto lab_0x403b31;\n                }\n                case 71: {\n                    goto lab_0x403b31;\n                }\n                case 72: {\n                    goto lab_0x403b31;\n                }\n                case 73: {\n                    goto lab_0x403b31;\n                }\n                case 74: {\n                    goto lab_0x403b31;\n                }\n                case 75: {\n                    goto lab_0x403b31;\n                }\n                case 76: {\n                    goto lab_0x403b31;\n                }\n                case 77: {\n                    goto lab_0x403b31;\n                }\n                case 78: {\n                    goto lab_0x403b31;\n                }\n                case 79: {\n                    goto lab_0x403b31;\n                }\n                case 80: {\n                    goto lab_0x403b31;\n                }\n                case 81: {\n                    goto lab_0x403b31;\n                }\n                case 82: {\n                    goto lab_0x403b31;\n                }\n                case 83: {\n                    goto lab_0x403b31;\n                }\n                case 84: {\n                    goto lab_0x403b31;\n                }\n                case 85: {\n                    goto lab_0x403b31;\n                }\n                case 86: {\n                    goto lab_0x403b31;\n                }\n                case 87: {\n                    goto lab_0x403b31;\n                }\n                case 88: {\n                    goto lab_0x403b31;\n                }\n                case 89: {\n                    goto lab_0x403b31;\n                }\n                case 90: {\n                    goto lab_0x403b31;\n                }\n                case 91: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403b31;\n                }\n                case 94: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403b31;\n                }\n                case 96: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403b31;\n                }\n                case 98: {\n                    goto lab_0x403b31;\n                }\n                case 99: {\n                    goto lab_0x403b31;\n                }\n                case 100: {\n                    goto lab_0x403b31;\n                }\n                case 101: {\n                    goto lab_0x403b31;\n                }\n                case 102: {\n                    goto lab_0x403b31;\n                }\n                case 103: {\n                    goto lab_0x403b31;\n                }\n                case 104: {\n                    goto lab_0x403b31;\n                }\n                case 105: {\n                    goto lab_0x403b31;\n                }\n                case 106: {\n                    goto lab_0x403b31;\n                }\n                case 107: {\n                    goto lab_0x403b31;\n                }\n                case 108: {\n                    goto lab_0x403b31;\n                }\n                case 109: {\n                    goto lab_0x403b31;\n                }\n                case 110: {\n                    goto lab_0x403b31;\n                }\n                case 111: {\n                    goto lab_0x403b31;\n                }\n                case 112: {\n                    goto lab_0x403b31;\n                }\n                case 113: {\n                    goto lab_0x403b31;\n                }\n                case 114: {\n                    goto lab_0x403b31;\n                }\n                case 115: {\n                    goto lab_0x403b31;\n                }\n                case 116: {\n                    goto lab_0x403b31;\n                }\n                case 117: {\n                    goto lab_0x403b31;\n                }\n                case 118: {\n                    goto lab_0x403b31;\n                }\n                case 119: {\n                    goto lab_0x403b31;\n                }\n                case 120: {\n                    goto lab_0x403b31;\n                }\n                case 121: {\n                    goto lab_0x403b31;\n                }\n                case 122: {\n                    goto lab_0x403b31;\n                }\n                case 123: {\n                    goto lab_0x403ad5;\n                }\n                case 124: {\n                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403ad5;\n                }\n                case 126: {\n                    goto lab_0x403afd;\n                }\n                default: {\n                    goto lab_0x403ed5;\n                }\n            }\n        }\n      lab_0x403ed5:\n        if (v23 != 1) {\n            // 0x404240\n            ps = 0;\n            int64_t len = v15; // 0x404250\n            if (v15 == -1) {\n                // 0x404252\n                len = strlen((char *)str);\n            }\n            // 0x40427e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4042df:\n                // 0x4042df\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4042e4\n                int64_t v30 = v29 + str;\n                v24 = function_406b40(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40485a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40485a_2;\n                    }\n                    case -2: {\n                        // 0x40493d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404977\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40497a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404987\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404980\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40485a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40485a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4042b0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40435c\n                        char v34 = *(char *)v33; // 0x40436d\n                        unsigned char v35; // 0x403987\n                        if (v34 < 125) {\n                            // 0x404378\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40438f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404360\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40436d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404378\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40438f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404360\n                            v33++;\n                        }\n                        goto lab_0x4042b0;\n                    }\n                }\n            }\n            goto lab_0x40485a_2;\n        } else {\n            // 0x403f24\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403b31;\n        }\n    }\n  lab_0x404158:\n    // 0x404158\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x404a5a\n        if (v8 > result) {\n            // 0x404a63\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403d87\n        return result;\n    }\n    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403b31:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403b40\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x403d4a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403c41\n    char v40 = v20; // 0x403c41\n    int64_t v41 = v38; // 0x403c41\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403c41\n    int64_t v43 = v36; // 0x403c41\n    goto lab_0x403bbd;\n  lab_0x403d4a_2:\n    // 0x403d87\n    return function_403930(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40485a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403b31;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40442e\n        int64_t v50 = v5 + 1; // 0x404511\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404518\n        char v52 = v20; // 0x404518\n        int64_t v53 = result; // 0x404518\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4044e1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4044e5\n            int64_t v56 = v54 + 1; // 0x4044ea\n            int64_t v57 = v51 + 1; // 0x404511\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4044dc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4044e1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4044e5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x403bbd;\n    }\n  lab_0x4042b0:\n    // 0x4042b0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4042cf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4042d2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40485a\n        goto lab_0x40485a_2;\n    }\n    goto lab_0x4042df;\n  lab_0x403afd:\n    // 0x403afd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x403d4a_2;\n    }\n    goto lab_0x403b31;\n  lab_0x403ad5:;\n    bool v60 = v15 == 1; // 0x403ae0\n    if (v15 == -1) {\n        // 0x403ae2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x403aee\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403b31;\n    } else {\n        goto lab_0x403afd;\n    }\n  lab_0x403bbd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403bc2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403bc6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4039d8_2;\n}\n"
        },
        {
            "funcName": "function_404b60",
            "funcStartAddr": "404b60",
            "funcEndAddr": "404cfe",
            "decompiledFuncCode": "int64_t function_404b60(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404b62\n    int32_t * v3 = __errno_location(); // 0x404b7c\n    int64_t v4 = (int64_t)g20; // 0x404b81\n    int32_t v5 = *v3; // 0x404b8b\n    int64_t v6 = v4; // 0x404ba1\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404cf9\n            function_405bc0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404bb0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404bb7\n        int64_t v9; // 0x404b60\n        if (g20 == &g21) {\n            int64_t v10 = function_4059d0(0, v8); // 0x404cda\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x404cdf\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4059d0(v4, v8); // 0x404bcb\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x404bda\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x404bda\n        int32_t v14 = v7; // 0x404be1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404c11\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x404c1b\n    int64_t * v17 = (int64_t *)v15; // 0x404c1e\n    uint64_t v18 = *v17; // 0x404c1e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404c21\n    int64_t result = *v19; // 0x404c21\n    int64_t v20; // 0x404b60\n    uint64_t v21 = function_403930(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404c44\n    if (v18 > v21) {\n        // 0x404cbb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404c57\n    *v17 = v22;\n    if (result != (int64_t)&g53) {\n        // 0x404c67\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405970(v22); // 0x404c81\n    *v19 = result2;\n    int64_t v23; // 0x404b60\n    function_403930(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x404cbb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d34",
            "decompiledFuncCode": "int64_t function_404d00(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404d07\n    int64_t result = function_405b70(a1 == 0 ? (int64_t)&g54 : a1, 56); // 0x404d26\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d40",
            "funcStartAddr": "404d40",
            "funcEndAddr": "404d4f",
            "decompiledFuncCode": "int64_t function_404d40(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g54 : a1); // 0x404d4c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d5f",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 : a1; // 0x404d58\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g54;\n}\n"
        },
        {
            "funcName": "function_404d60",
            "funcStartAddr": "404d60",
            "funcEndAddr": "404d93",
            "decompiledFuncCode": "int64_t function_404d60(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 + 8 : a1 + 8; // 0x404d79\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x404d7e\n    uint32_t v3 = *v2; // 0x404d7e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404d82\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404db3",
            "decompiledFuncCode": "int64_t function_404da0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g54 + 4 : a1 + 4); // 0x404dac\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404dc0",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "404deb",
            "decompiledFuncCode": "int64_t function_404dc0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 : a1; // 0x404dc8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404de5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404ddc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g54;\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e62",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g54 : a5; // 0x404e12\n    int32_t * v2 = __errno_location(); // 0x404e1b\n    uint32_t v3 = *(int32_t *)v1; // 0x404e3b\n    int64_t result = function_403930(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404e4a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404f51",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g54 : a4; // 0x404e92\n    int32_t * v2 = __errno_location(); // 0x404e98\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404eb7\n    int32_t * v4 = (int32_t *)v1; // 0x404eba\n    int64_t v5 = function_403930(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404ed5\n    int64_t v6 = v5 + 1; // 0x404eda\n    int64_t result = function_405970(v6); // 0x404eef\n    function_403930(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404f34\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404f3d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404f6a",
            "decompiledFuncCode": "int64_t function_404f60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404f60\n    return function_404e70(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "405005",
            "decompiledFuncCode": "int64_t function_404f70(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x404f70\n    int64_t v2 = v1; // 0x404f70\n    int64_t v3 = v2; // 0x404f84\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404fa3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g66;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404fa0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g66;\n        }\n    }\n    int64_t v6 = v3; // 0x404fbd\n    if (g21 != 0x60b360) {\n        // 0x404fbf\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g53;\n        v6 = &g66;\n    }\n    int64_t result = v6; // 0x404fe1\n    if (g20 != &g21) {\n        // 0x404fe3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g66;\n    }\n    // 0x404ff6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "405021",
            "decompiledFuncCode": "int64_t function_405010(void) {\n    // 0x405010\n    int64_t v1; // 0x405010\n    return function_404b60(v1, v1, -1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "40503a",
            "decompiledFuncCode": "int64_t function_405030(void) {\n    // 0x405030\n    int64_t v1; // 0x405030\n    return function_404b60(v1, v1, v1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "405056",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1) {\n    // 0x405040\n    return function_404b60(0, a1, -1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "405072",
            "decompiledFuncCode": "int64_t function_405060(int64_t a1, int64_t a2) {\n    // 0x405060\n    return function_404b60(0, a1, a2, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "4050e8",
            "decompiledFuncCode": "int64_t function_405080(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405090\n    return function_404b60((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405154",
            "decompiledFuncCode": "int64_t function_4050f0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405100\n    return function_404b60((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "40516c",
            "decompiledFuncCode": "int64_t function_405160(int64_t a1, int64_t a2) {\n    // 0x405160\n    return function_405080(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "40517f",
            "decompiledFuncCode": "int64_t function_405170(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405170\n    return function_4050f0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051f0",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g54); // 0x40518d\n    int128_t v2 = __asm_movdqa(g55); // 0x405195\n    int128_t v3 = __asm_movdqa(g56); // 0x40519d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4051b2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4051c8\n    uint32_t v6 = *v5; // 0x4051c8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4051cd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404b60(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4051f0",
            "funcStartAddr": "4051f0",
            "funcEndAddr": "4051fd",
            "decompiledFuncCode": "int64_t function_4051f0(int64_t a1, int64_t a2) {\n    // 0x4051f0\n    return function_405180(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405200",
            "funcStartAddr": "405200",
            "funcEndAddr": "405211",
            "decompiledFuncCode": "int64_t function_405200(int64_t a1) {\n    // 0x405200\n    return function_405180(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "40522a",
            "decompiledFuncCode": "int64_t function_405220(void) {\n    // 0x405220\n    int64_t v1; // 0x405220\n    return function_405180(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405230",
            "funcStartAddr": "405230",
            "funcEndAddr": "40529e",
            "decompiledFuncCode": "int64_t function_405230(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40524a\n    return function_404b60((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4052a0",
            "funcStartAddr": "4052a0",
            "funcEndAddr": "40530c",
            "decompiledFuncCode": "int64_t function_4052a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g54); // 0x4052a7\n    int128_t v2 = __asm_movdqa(g55); // 0x4052af\n    int128_t v3 = __asm_movdqa(g56); // 0x4052b7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4052d9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405307\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4052ea\n    return function_404b60(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "405319",
            "decompiledFuncCode": "int64_t function_405310(void) {\n    // 0x405310\n    int64_t v1; // 0x405310\n    return function_4052a0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "405337",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405320\n    return function_4052a0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "405353",
            "decompiledFuncCode": "int64_t function_405340(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405340\n    return function_4052a0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "40536a",
            "decompiledFuncCode": "int64_t function_405360(void) {\n    // 0x405360\n    int64_t v1; // 0x405360\n    return function_404b60(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_405370",
            "funcStartAddr": "405370",
            "funcEndAddr": "405382",
            "decompiledFuncCode": "int64_t function_405370(int64_t a1, int64_t a2) {\n    // 0x405370\n    return function_404b60(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4053a1",
            "decompiledFuncCode": "int64_t function_405390(void) {\n    // 0x405390\n    int64_t v1; // 0x405390\n    return function_404b60(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4053b0",
            "funcStartAddr": "4053b0",
            "funcEndAddr": "4053c6",
            "decompiledFuncCode": "int64_t function_4053b0(int64_t a1) {\n    // 0x4053b0\n    return function_404b60(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4053d0",
            "funcStartAddr": "4053d0",
            "funcEndAddr": "4057ad",
            "decompiledFuncCode": "int64_t function_4053d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405468\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4053ec\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405406\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40544b\n    if (a6 < 10) {\n        // 0x40545a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405552\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057d0",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4057b0\n    if (a5 == 0) {\n        // 0x4057cb\n        return function_4053d0(a1, a2, a3, a4, a5, 0, (int64_t)&g66);\n    }\n    int64_t v1 = 0; // 0x4057b7\n    v1++;\n    int64_t v2 = v1; // 0x4057c9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4057c0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4057cb\n    return function_4053d0(a1, a2, a3, a4, a5, v2, (int64_t)&g66);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "405830",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4057d0\n    int64_t v3 = &v2; // 0x4057d0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405803\n    int64_t v6; // 0x4057ed\n    int64_t * v7; // 0x40580b\n    int64_t v8; // 0x40580b\n    int64_t v9; // 0x405817\n    if (v5 < 48) {\n        // 0x4057e0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405823\n            break;\n        }\n    } else {\n        // 0x40580b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405823\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405801\n    while (v4 != 9) {\n        // 0x4057f9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4057e0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405823\n                break;\n            }\n        } else {\n            // 0x40580b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405823\n                break;\n            }\n        }\n        // 0x4057f9\n        v10 = 10;\n    }\n    // 0x405823\n    return function_4053d0(a1, a2, a3, a4, v3, v10, (int64_t)&g66);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "4058ec",
            "decompiledFuncCode": "int64_t function_405830(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405830\n    int64_t v1; // bp-168, 0x405830\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405830\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405830\n    int64_t v8; // 0x405830\n    int64_t v9; // bp-56, 0x405830\n    int64_t v10; // 0x405895\n    int64_t v11; // 0x4058b9\n    if ((int32_t)v6 < 48) {\n        // 0x405880\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4058d0\n            break;\n        }\n    } else {\n        // 0x4058b2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4058d0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4058aa\n    int64_t v13 = 10; // 0x4058aa\n    while (v5 != 9) {\n        // 0x4058ac\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405880\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4058d0\n                break;\n            }\n        } else {\n            // 0x4058b2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4058d0\n                break;\n            }\n        }\n        // 0x4058a2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4058d0\n    int64_t v14; // bp-136, 0x405830\n    int64_t result = function_4053d0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g66); // 0x4058df\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405964",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1) {\n    // 0x4058f0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405953\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "40598a",
            "decompiledFuncCode": "int64_t function_405970(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405974\n    if (size != 0 != (mem == NULL)) {\n        // 0x405983\n        return (int64_t)mem;\n    }\n    // 0x405985\n    function_405bc0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059b1",
            "decompiledFuncCode": "int64_t function_405990(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405993\n    int64_t v2 = v1; // 0x405993\n    if (v2 < 0) {\n        // 0x4059ab\n        function_405bc0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4059a9\n        return function_405970(v2);\n    }\n    // 0x4059ab\n    function_405bc0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "4059c2",
            "decompiledFuncCode": "int64_t function_4059c0(void) {\n    // 0x4059c0\n    int64_t v1; // 0x4059c0\n    return function_405970(v1);\n}\n"
        },
        {
            "funcName": "function_4059d0",
            "funcStartAddr": "4059d0",
            "funcEndAddr": "405a06",
            "decompiledFuncCode": "int64_t function_4059d0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4059f8\n        free(v1);\n        return (int32_t)&g66 ^ (int32_t)&g66;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4059e1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4059f0\n        return (int64_t)mem;\n    }\n    // 0x405a01\n    function_405bc0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405a31",
            "decompiledFuncCode": "int64_t function_405a10(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405a13\n    int64_t v2 = v1; // 0x405a13\n    if (v2 < 0) {\n        // 0x405a2b\n        function_405bc0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405a29\n        return function_4059d0(a1, v2);\n    }\n    // 0x405a2b\n    function_405bc0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405ac6",
            "decompiledFuncCode": "int64_t function_405a40(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x405a9b\n            function_405bc0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4059d0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405a83\n    if (a2 == 0) {\n        // 0x405aa8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405a88\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x405a9b\n        function_405bc0(a1);\n        // UNREACHABLE\n    }\n    // 0x405a6a\n    *(int64_t *)a2 = v2;\n    return function_4059d0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405b20",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405ad0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x405b1a\n            function_405bc0(a1);\n            // UNREACHABLE\n        }\n        // 0x405af2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4059d0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405b05\n        *(int64_t *)a2 = 128;\n        return function_4059d0(0, 128);\n    }\n    // 0x405b18\n    if (a2 < 0) {\n        // 0x405b1a\n        function_405bc0(a1);\n        // UNREACHABLE\n    }\n    // 0x405af2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4059d0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405b20",
            "funcStartAddr": "405b20",
            "funcEndAddr": "405b37",
            "decompiledFuncCode": "int64_t function_405b20(int64_t a1, int64_t a2) {\n    // 0x405b20\n    return (int64_t)memset((int64_t *)function_405970(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405b40",
            "funcStartAddr": "405b40",
            "funcEndAddr": "405b6e",
            "decompiledFuncCode": "int64_t function_405b40(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405b47\n    if ((int64_t)v1 < 0) {\n        // 0x405b69\n        function_405bc0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405b69\n        function_405bc0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x405b5a\n    if (mem != NULL) {\n        // 0x405b64\n        return (int64_t)mem;\n    }\n    // 0x405b69\n    function_405bc0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405b98",
            "decompiledFuncCode": "int64_t function_405b70(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405970(a2); // 0x405b7f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bb3",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t str) {\n    // 0x405ba0\n    return function_405b70(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "405bf1",
            "decompiledFuncCode": "int64_t function_405bc0(int64_t a1) {\n    // 0x405bc0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "405c18",
            "decompiledFuncCode": "int64_t function_405c00(void) {\n    // 0x405c00\n    int64_t str; // 0x405c00\n    char * v1 = strndup((char *)str, (int32_t)str); // 0x405c04\n    if (v1 != NULL) {\n        // 0x405c0e\n        return (int64_t)v1;\n    }\n    // 0x405c13\n    function_405bc0(str);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405c20",
            "funcStartAddr": "405c20",
            "funcEndAddr": "405c9b",
            "decompiledFuncCode": "int64_t function_405c20(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405c27\n    if (fileno(stream) < 0) {\n        // 0x405c87\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405c3a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405c6b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405c87\n            return fclose(stream);\n        }\n    }\n    // 0x405c3c\n    if ((int32_t)function_405ca0(a1, v1) == 0) {\n        // 0x405c87\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405c48\n    int32_t v3 = *v2; // 0x405c50\n    int64_t result = fclose(stream); // 0x405c5e\n    if (v3 != 0) {\n        // 0x405c90\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405c60\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ca0",
            "funcStartAddr": "405ca0",
            "funcEndAddr": "405ce0",
            "decompiledFuncCode": "int64_t function_405ca0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405cba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405cba\n        return fflush(stream);\n    }\n    // 0x405cc8\n    function_405d10(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405ce0",
            "funcStartAddr": "405ce0",
            "funcEndAddr": "405d03",
            "decompiledFuncCode": "int64_t function_405ce0(int64_t a1, int64_t * a2) {\n    // 0x405ce0\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x405d00\n        return 0;\n    }\n    int64_t result = *(int64_t *)(a1 + 8); // 0x405cea\n    int64_t v1 = *(int64_t *)(a1 + 16) - result; // 0x405cf2\n    if (v1 == 0) {\n        // 0x405d00\n        return 0;\n    }\n    // 0x405cf7\n    *a2 = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405d67",
            "decompiledFuncCode": "int64_t function_405d10(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405d10\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405d1a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405d4b\n    int64_t result = -1; // 0x405d54\n    if (v1 != -1) {\n        // 0x405d56\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405d62\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "405e4f",
            "decompiledFuncCode": "int64_t function_405d70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405d7c\n    uint32_t v2 = *v1; // 0x405d7c\n    int64_t v3 = a2 & 0xffffffff; // 0x405d81\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405d84\n    uint64_t v5 = (int64_t)*v4; // 0x405d84\n    int64_t v6; // 0x405df2\n    if (v3 <= v5) {\n      lab_0x405dec_2:\n        // 0x405dec\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405d72\n    int64_t v8 = v2; // 0x405d70\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x405dec\n        goto lab_0x405dec_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405da8\n    int64_t v17; // 0x405db6\n    int64_t * v18; // 0x405dd0\n    int64_t * v19; // 0x405dd3\n    int64_t v20; // 0x405dde\n    int64_t v21; // 0x405db6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405db3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405dd0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405de7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x405dec\n            goto lab_0x405dec_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405dec\n            goto lab_0x405dec_2;\n        }\n        // 0x405da2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x405e2b\n    int64_t * v23 = (int64_t *)v22; // 0x405e30\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405e33\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405e30\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405e47\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x405d9d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405dec\n            goto lab_0x405dec_2;\n        }\n        // 0x405da2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405db3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405dd0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405de7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x405dec\n                goto lab_0x405dec_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x405dec\n                goto lab_0x405dec_2;\n            }\n            // 0x405da2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405e10\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405e30\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405e47\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x405dec\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405e50",
            "funcStartAddr": "405e50",
            "funcEndAddr": "40646c",
            "decompiledFuncCode": "int64_t function_405e50(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x405e6f\n    int64_t v2 = *v1; // 0x405e6f\n    char * str2 = (char *)v2; // 0x405e7c\n    char c = *str2; // 0x405e7c\n    int64_t v3 = v2; // 0x405ea8\n    int64_t v4 = 0; // 0x405e50\n    int32_t v5; // 0x405e50\n    int64_t v6; // 0x405e50\n    int64_t v7; // 0x405e50\n    int64_t v8; // 0x405e50\n    int64_t v9; // 0x405e50\n    int64_t v10; // 0x405e50\n    int64_t v11; // 0x405e50\n    int64_t v12; // 0x405e50\n    int64_t v13; // 0x405e50\n    int64_t str3; // 0x405e50\n    int64_t v14; // 0x405e50\n    int64_t v15; // 0x405e50\n    int64_t v16; // 0x405e50\n    int64_t v17; // 0x405e50\n    int32_t v18; // 0x405e50\n    int32_t v19; // 0x405e50\n    int32_t v20; // 0x405e50\n    int32_t v21; // 0x405e50\n    int32_t v22; // 0x405e50\n    int32_t v23; // 0x405e50\n    int32_t v24; // 0x405e50\n    int32_t v25; // 0x405e50\n    int32_t v26; // 0x405e50\n    int32_t v27; // 0x405e50\n    int32_t v28; // 0x405e50\n    int32_t v29; // 0x405e50\n    int64_t nmemb; // 0x405e50\n    int64_t v30; // 0x405e50\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x405eac\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405ea8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405eb8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x405ebe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405e88\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x405eec\n                int64_t v34; // 0x405e50\n                int64_t v35; // 0x405e50\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405ef5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406070;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405f06\n                int64_t v37 = *(int64_t *)v36; // 0x405f0a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405ee0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405ef5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406070;\n                        }\n                    }\n                    // 0x405f06\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405f56:\n                    // 0x405f56\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405fb0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406120\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405fb0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4060d0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405f7a;\n                                } else {\n                                    // 0x4060dc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405f7a;\n                                    } else {\n                                        // 0x4060ea\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405f7a;\n                                        } else {\n                                            goto lab_0x405fb0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405f7a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405fc1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406196\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406342\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x406362\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4063af\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x4063c9\n                            int64_t v45; // 0x4063cb\n                            if (*(char *)v42 != 0) {\n                                // 0x4063cb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4063c3\n                            while (v17 + nmemb != v42) {\n                                // 0x4063c5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4063cb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x4063b8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4063f0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x4061a4\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4062ff\n                        free((int64_t *)v17);\n                    }\n                    // 0x4061f9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406210\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4060be\n                    return 63;\n                }\n                // 0x405fe0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406064\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406070:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406080\n                    uint32_t v50 = *v49; // 0x406080\n                    int64_t v51 = v50; // 0x406080\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40608a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406093\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4062bf\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40626a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4060be\n                            return 63;\n                        }\n                        // 0x406108\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40641f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40631d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406330\n                                // 0x4060be\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40622e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406242\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4060ab\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4060ae\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4060b2\n                    int64_t result = v59; // 0x4060b8\n                    if (v58 != 0) {\n                        // 0x4060ba\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4060be\n                    return result;\n                }\n            } else {\n                // 0x405ebe\n                v5 = v32;\n            }\n            // break -> 0x405fe5\n            break;\n        }\n    }\n    // 0x405fe5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405ffd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406007\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4060be\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406149\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406036\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406046\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405fb0:\n    // 0x405fb0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405fb0\n    int64_t v63 = *(int64_t *)v62; // 0x405fb4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405fc1\n        goto lab_0x405fc1;\n    }\n    goto lab_0x405f56;\n  lab_0x405f7a:\n    // 0x405f7a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405e50\n    int32_t v65; // 0x405e50\n    int32_t v66; // 0x405e50\n    if (v27 != 0) {\n        goto lab_0x405fb0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406130\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405fb0;\n            } else {\n                goto lab_0x405fa1;\n            }\n        } else {\n            // 0x405f95\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40628c\n                int64_t v67 = (int64_t)mem; // 0x40628c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405fb0;\n                } else {\n                    // 0x40629f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405fa1;\n                }\n            } else {\n                goto lab_0x405fa1;\n            }\n        }\n    }\n  lab_0x405fa1:\n    // 0x405fa1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405fb0;\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "406a36",
            "decompiledFuncCode": "int64_t function_406470(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406491\n    if (v3 < 1) {\n        // 0x40664e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40648d\n    int32_t v5 = *(int32_t *)a7; // 0x406499\n    uint64_t v6 = a1 & 0xffffffff; // 0x40649b\n    int64_t v7 = v2; // 0x4064a0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4064a3\n    *v8 = 0;\n    int64_t v9; // 0x406470\n    int64_t v10; // 0x406470\n    int64_t v11; // 0x406470\n    int64_t v12; // 0x406470\n    int64_t str; // 0x406470\n    int64_t v13; // 0x406470\n    int64_t v14; // 0x406470\n    int64_t v15; // 0x406470\n    int64_t v16; // 0x406470\n    int64_t v17; // 0x406470\n    int32_t v18; // 0x406470\n    char v19; // 0x406470\n    if (v5 == 0) {\n        // 0x406688\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4064ba;\n    } else {\n        // 0x4064b3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406500\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406503\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4065c8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406516\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406526\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4065dc;\n                } else {\n                    goto lab_0x406538;\n                }\n            }\n        } else {\n            goto lab_0x4064ba;\n        }\n    }\n  lab_0x4064ba:\n    // 0x4064ba\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4064c0\n    *v24 = 0;\n    int64_t v25; // 0x406470\n    int64_t v26; // 0x406470\n    int64_t v27; // 0x406470\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4065b0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4065bd;\n        }\n        case 43: {\n            // 0x4068c0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4065bd;\n        }\n        default: {\n            // 0x4064dc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40683f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406958\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4065bd;\n                } else {\n                    // 0x40684d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4064ea;\n                }\n            } else {\n                goto lab_0x4064ea;\n            }\n        }\n    }\n  lab_0x4065c8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4065cf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406538;\n    } else {\n        goto lab_0x4065dc;\n    }\n  lab_0x4064ea:\n    // 0x4064ea\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4065bd;\n  lab_0x4065bd:\n    // 0x4065bd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4065c8;\n  lab_0x406538:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406538\n    int64_t v31 = v30; // 0x406538\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40653a\n    if ((int64_t)*v32 > v31) {\n        // 0x40653f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406542\n    if (*v33 > v30) {\n        // 0x406547\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40654a\n    int64_t v35 = v31; // 0x40654e\n    int64_t v36 = v15; // 0x40654e\n    int64_t v37; // 0x406470\n    int64_t v38; // 0x406470\n    int64_t v39; // 0x406470\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4066b8\n        int64_t v41 = v40; // 0x4066b8\n        v2 = v41;\n        int64_t v42; // 0x406470\n        if (*v33 == v40) {\n            // 0x4068a0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4068a8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4066c4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4066c8\n                function_405d70(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4066d8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4066e1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4066ea\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406701\n            int64_t v47 = v45 & 0xffffffff; // 0x406705\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40670e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406714\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406716;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4066f0\n            int64_t v49 = v48 & 0xffffffff; // 0x4066f0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406701\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40670e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406714\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406716;\n                    }\n                }\n                // 0x4066f0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4068b8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406716;\n    } else {\n        goto lab_0x406554;\n    }\n  lab_0x4065dc:\n    // 0x4065dc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4065df\n    int64_t v51 = v12; // 0x4065df\n    int64_t v52 = v14; // 0x4065df\n    if (*(char *)v10 == 0) {\n        goto lab_0x406538;\n    } else {\n        goto lab_0x4065e5;\n    }\n  lab_0x406554:;\n    int32_t v53 = v35; // 0x406554\n    int64_t v54; // 0x406470\n    int64_t v55; // 0x406470\n    int64_t v56; // 0x406470\n    int64_t v57; // 0x406470\n    int64_t v58; // 0x406470\n    int64_t v59; // 0x406470\n    char * v60; // 0x406470\n    int64_t v61; // 0x406470\n    int64_t v62; // 0x406569\n    int64_t v63; // 0x406470\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4066a3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4066a6;\n    } else {\n        // 0x40655c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406470\n        int64_t v66 = v65 ? -1 : 1; // 0x406570\n        int64_t v67 = (int64_t)\"--\"; // 0x406470\n        int64_t v68 = v62; // 0x406470\n        int64_t v69 = 3; // 0x406570\n        unsigned char v70 = *(char *)v68; // 0x406570\n        char v71 = *(char *)v67; // 0x406570\n        char v72 = v71; // 0x406570\n        bool v73 = false; // 0x406570\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406660\n            if (*(char *)v62 == 45) {\n                // 0x406720\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406720\n                if (c == 0) {\n                    goto lab_0x40666a;\n                } else {\n                    // 0x40672d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4067b0;\n                    } else {\n                        if (c == 45) {\n                            // 0x406993\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406805;\n                        } else {\n                            // 0x40673e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4067b0;\n                            } else {\n                                // 0x406743\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406764;\n                                } else {\n                                    // 0x40674a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4067b0;\n                                    } else {\n                                        goto lab_0x406764;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40666a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406580\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406583\n            int64_t v77 = v35 + 1; // 0x406586\n            int32_t v78 = v77; // 0x406589\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4068f0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406597\n                    function_405d70(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4065a5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4066a6;\n        }\n    }\n  lab_0x4065e5:;\n    // 0x4065e5\n    int64_t v79; // bp-104, 0x406470\n    int64_t v80 = &v79; // 0x40647a\n    int64_t v81 = v50 + 1; // 0x4065e5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4065ec\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4065f1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4065f5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4065f9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406601\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406606\n    int32_t c2 = v84; // 0x406606\n    char * found_char_pos = strchr(str2, c2); // 0x406606\n    int64_t v87 = *v82; // 0x40660b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406615\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406620\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406910\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4068dd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40664e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406606\n    char v91 = *(char *)(v90 + 1); // 0x40663b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4065f5\n        if (v91 != 58) {\n            // 0x40664e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406864\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406968\n                *v8 = 0;\n            } else {\n                // 0x40694c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40688e\n            *v83 = 0;\n            // 0x40664e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40686e\n        if (v93 != 0) {\n            // 0x406900\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40688e\n            *v83 = 0;\n            // 0x40664e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406881\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40688e\n            *v83 = 0;\n            // 0x40664e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4069ca\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40697a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406981\n        // 0x40688e\n        *v83 = 0;\n        // 0x40664e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4067d9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4067db\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406a00\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4069b1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4069b8\n            // 0x40664e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4067e6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4067ea\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406805;\n  lab_0x406716:\n    // 0x406716\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406554;\n  lab_0x406805:;\n    int64_t v99 = function_405e50(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406823\n    // 0x40664e\n    return v99 & 0xffffffff;\n  lab_0x4066a6:;\n    int32_t v100 = v55; // 0x4066a6\n    if (v100 != (int32_t)v59) {\n        // 0x4066aa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40664e\n    return 0xffffffff;\n  lab_0x40666a:\n    // 0x40666a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406671\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40664e\n    return v99 & 0xffffffff;\n  lab_0x4067b0:\n    // 0x4067b0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4065e5;\n  lab_0x406764:\n    // 0x406764\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405e50(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40678a\n    if ((int32_t)v101 != -1) {\n        // 0x40664e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40679f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4067b0;\n}\n"
        },
        {
            "funcName": "function_406a40",
            "funcStartAddr": "406a40",
            "funcEndAddr": "406a96",
            "decompiledFuncCode": "int64_t function_406a40(int64_t a1) {\n    // 0x406a40\n    *(int32_t *)&g57 = g26;\n    *(int32_t *)&g58 = g25;\n    int64_t v1; // 0x406a40\n    int64_t result = function_406470(v1, v1, v1, v1, v1, v1, &g57, a1 & 0xffffffff); // 0x406a66\n    g26 = *(int32_t *)&g57;\n    g64 = (char *)g60;\n    *(int32_t *)&g24 = g59;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406aa0",
            "funcStartAddr": "406aa0",
            "funcEndAddr": "406ab8",
            "decompiledFuncCode": "int64_t function_406aa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406aa0\n    return function_406a40(1);\n}\n"
        },
        {
            "funcName": "function_406ac0",
            "funcStartAddr": "406ac0",
            "funcEndAddr": "406ad3",
            "decompiledFuncCode": "int64_t function_406ac0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x406ac0\n    return function_406a40(0);\n}\n"
        },
        {
            "funcName": "function_406ae0",
            "funcStartAddr": "406ae0",
            "funcEndAddr": "406af5",
            "decompiledFuncCode": "int64_t function_406ae0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406ae0\n    return function_406470(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406b00",
            "funcStartAddr": "406b00",
            "funcEndAddr": "406b16",
            "decompiledFuncCode": "int64_t function_406b00(void) {\n    // 0x406b00\n    return function_406a40(0);\n}\n"
        },
        {
            "funcName": "function_406b20",
            "funcStartAddr": "406b20",
            "funcEndAddr": "406b38",
            "decompiledFuncCode": "int64_t function_406b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406b20\n    return function_406470(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406b40",
            "funcStartAddr": "406b40",
            "funcEndAddr": "406bba",
            "decompiledFuncCode": "int64_t function_406b40(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x406b4b\n    int64_t v2 = (int64_t)&g9; // 0x406b4b\n    int32_t * pwc; // 0x406b40\n    int64_t v3; // 0x406b40\n    int64_t n; // 0x406b40\n    if (a2 == 0) {\n        goto lab_0x406b92;\n    } else {\n        // 0x406b4d\n        if (a3 == 0) {\n            // 0x406b78\n            return -2;\n        }\n        // 0x406b59\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406b92;\n        } else {\n            goto lab_0x406b64;\n        }\n    }\n  lab_0x406b92:\n    // 0x406b92\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406b40\n    pwc = (int32_t *)&v4;\n    goto lab_0x406b64;\n  lab_0x406b64:;\n    char * wstr = (char *)v3; // 0x406b6a\n    int64_t ps; // 0x406b40\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x406b6a\n    int64_t result = v5; // 0x406b6a\n    if (v5 < 0xfffffffe) {\n        // 0x406b78\n        return result;\n    }\n    int64_t result2 = result; // 0x406ba9\n    if ((char)function_406e80(0, v3) == 0) {\n        // 0x406bab\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406b78\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406cc4",
            "decompiledFuncCode": "int64_t function_406bc0(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x406bc0\n    if (a3 == 0) {\n        // 0x406bf9\n        return 0;\n    }\n    int64_t v1 = result; // 0x406bcc\n    int64_t v2 = a3; // 0x406bcc\n    int64_t result2; // 0x406bc0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x406bce\n        int64_t v4 = result; // 0x406bd1\n        if ((char)result == v3) {\n            // 0x406bf9\n            return result;\n        }\n        int64_t v5 = a3; // 0x406bd1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x406be0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x406c00;\n            }\n            // 0x406be6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x406bf9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x406bf9\n        return result2;\n    }\n  lab_0x406c00:;\n    int64_t result3 = v1; // 0x406c2d\n    int64_t v6 = v2; // 0x406c2d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x406c0f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x406c1c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x406c26\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x406c46\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x406c75\n            int64_t v12 = v1 + 8; // 0x406c79\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x406c63\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x406c8c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x406c83\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x406bf9\n                return 0;\n            }\n        }\n    }\n  lab_0x406c8c:;\n    char v14 = a2; // 0x406c8c\n    if (*(char *)result3 == v14) {\n        // 0x406bf9\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x406ca0\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x406bf9\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x406bf9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406cd0",
            "funcStartAddr": "406cd0",
            "funcEndAddr": "406d2d",
            "decompiledFuncCode": "int64_t function_406cd0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406cd7\n    int64_t v2; // 0x406cd0\n    int64_t result = function_405c20(a1, v2); // 0x406ce8\n    if ((v2 & 32) != 0) {\n        // 0x406d10\n        if ((int32_t)result == 0) {\n            // 0x406d14\n            *__errno_location() = 0;\n        }\n        // 0x406d0a\n        return 0xffffffff;\n    }\n    // 0x406cf1\n    if ((int32_t)result == 0) {\n        // 0x406d0a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406cf8\n    if (v1 == 0) {\n        // 0x406cfa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x406d0a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406d30",
            "funcStartAddr": "406d30",
            "funcEndAddr": "406e80",
            "decompiledFuncCode": "int64_t function_406d30(int64_t a1, int64_t a2) {\n    // 0x406d30\n    if (a2 == 0) {\n        // 0x406dce\n        return 0;\n    }\n    int64_t v1 = function_407450(a1); // 0x406d50\n    struct _IO_FILE * stream; // 0x406d30\n    struct _IO_FILE * stream3; // 0x406d30\n    int64_t v2; // 0x406d30\n    int64_t v3; // bp-4136, 0x406d30\n    if (v1 == 0) {\n        // 0x406d3b\n        stream = (struct _IO_FILE *)a1;\n        v2 = a2;\n      lab_0x406e00_2:;\n        int32_t fd = fileno(stream); // 0x406e03\n        if (fd >= 0) {\n            // 0x406e58\n            if (lseek(fd, 0, SEEK_CUR) >= 0) {\n                // 0x406dce\n                return function_405d10(a1, (int32_t)v2, 1);\n            }\n        }\n        uint64_t v4 = v2;\n        uint64_t v5 = v4 < 0x1000 ? v4 : 0x1000; // 0x406e35\n        int32_t v6 = __fread_chk(&v3, 0x1000, 1, (int32_t)v5, stream); // 0x406e46\n        stream3 = stream;\n        while (v5 <= (int64_t)v6) {\n            int64_t v7 = v4 - v5; // 0x406e20\n            if (v7 == 0) {\n                // 0x406dce\n                return 0;\n            }\n            v4 = v7;\n            v5 = v4 < 0x1000 ? v4 : 0x1000;\n            v6 = __fread_chk(&v3, 0x1000, 1, (int32_t)v5, stream);\n            stream3 = stream;\n        }\n    } else {\n        int64_t * v8 = (int64_t *)(a1 + 8);\n        struct _IO_FILE * stream2 = (struct _IO_FILE *)a1;\n        int64_t v9 = a2;\n        int64_t v10 = function_405ce0(a1, &v3); // 0x406d86\n        int64_t v11 = v9; // 0x406d8e\n        int64_t v12 = v1; // 0x406d8e\n        int64_t v13; // 0x406d9c\n        int64_t v14; // 0x406da5\n        int64_t v15; // 0x406daa\n        uint64_t v16; // 0x406d90\n        if (v10 != 0) {\n            // 0x406d90\n            v16 = v3;\n            v11 = v9;\n            v12 = v1;\n            if (v16 != 0) {\n                // 0x406d99\n                v13 = v16 > v9 ? v9 : v16;\n                *v8 = *v8 + v13;\n                v14 = v9 - v13;\n                if (v14 == 0) {\n                    // 0x406dce\n                    return 0;\n                }\n                // 0x406daa\n                v15 = v1 - v13;\n                v11 = v14;\n                v12 = v15;\n                stream = stream2;\n                v2 = v14;\n                if (v15 == 0) {\n                    goto lab_0x406e00_2;\n                }\n            }\n        }\n        int32_t c = fgetc(stream2); // 0x406db2\n        stream3 = stream2;\n        while (c != -1) {\n            int64_t v17 = v11 - 1; // 0x406d70\n            if (v17 == 0) {\n                // 0x406dce\n                return 0;\n            }\n            int64_t v18 = v12 - 1; // 0x406d76\n            stream = stream2;\n            v2 = v17;\n            if (v18 == 0) {\n                goto lab_0x406e00_2;\n            }\n            int64_t v19 = v18;\n            v9 = v17;\n            v10 = function_405ce0(a1, &v3);\n            v11 = v9;\n            v12 = v19;\n            if (v10 != 0) {\n                // 0x406d90\n                v16 = v3;\n                v11 = v9;\n                v12 = v19;\n                if (v16 != 0) {\n                    // 0x406d99\n                    v13 = v16 > v9 ? v9 : v16;\n                    *v8 = *v8 + v13;\n                    v14 = v9 - v13;\n                    if (v14 == 0) {\n                        // 0x406dce\n                        return 0;\n                    }\n                    // 0x406daa\n                    v15 = v19 - v13;\n                    v11 = v14;\n                    v12 = v15;\n                    stream = stream2;\n                    v2 = v14;\n                    if (v15 == 0) {\n                        goto lab_0x406e00_2;\n                    }\n                }\n            }\n            // 0x406daf\n            c = fgetc(stream2);\n            stream3 = stream2;\n        }\n    }\n    // 0x406dce\n    return ferror(stream3) != 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_406e80",
            "funcStartAddr": "406e80",
            "funcEndAddr": "406ede",
            "decompiledFuncCode": "int64_t function_406e80(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406e86\n    if (locale == NULL) {\n        // 0x406eb3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406e86\n    bool v2; // 0x406e80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x406e80\n    int64_t v5 = v1; // 0x406e80\n    int64_t v6 = 2; // 0x406ea5\n    unsigned char v7 = *(char *)v5; // 0x406ea5\n    char v8 = *(char *)v4; // 0x406ea5\n    char v9 = v8; // 0x406ea5\n    bool v10 = false; // 0x406ea5\n    while (v7 == v8) {\n        // 0x406e98\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406eb1\n    int64_t v13 = v1; // 0x406eb1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406eb3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406eb1\n    unsigned char v15 = *(char *)v13; // 0x406ecd\n    char v16 = *(char *)v12; // 0x406ecd\n    char v17 = v16; // 0x406ecd\n    bool v18 = false; // 0x406ecd\n    while (v15 == v16) {\n        // 0x406ec0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406ee0",
            "funcStartAddr": "406ee0",
            "funcEndAddr": "407442",
            "decompiledFuncCode": "int64_t function_406ee0(void) {\n    char * v1 = nl_langinfo(14); // 0x406ef6\n    char * v2 = g61; // 0x406efb\n    char * v3; // 0x406ee0\n    int64_t v4; // 0x406ee0\n    int64_t v5; // 0x406ee0\n    int64_t v6; // 0x406ee0\n    int64_t v7; // 0x406ee0\n    int32_t size; // 0x406ee0\n    int32_t size2; // 0x406ee0\n    int32_t len; // 0x406fb2\n    int64_t v8; // 0x406fb2\n    char * env_val; // 0x406f9d\n    if (v2 == NULL) {\n        // 0x406f98\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407005;\n        } else {\n            // 0x406faa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407005;\n            } else {\n                // 0x406faf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x406f9d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407435\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407005;\n                    } else {\n                        // 0x4073a9\n                        size2 = len + 14;\n                        goto lab_0x406fcb;\n                    }\n                } else {\n                    goto lab_0x406fcb;\n                }\n            }\n        }\n    } else {\n        // 0x406ee0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x406f1a;\n    }\n  lab_0x40724c:;\n    // 0x40724c\n    struct _IO_FILE * stream; // 0x40708b\n    int32_t v10 = __uflow(stream); // 0x40724f\n    int64_t v11; // 0x406ee0\n    int64_t v12 = v11; // 0x407259\n    int64_t v13; // 0x406ee0\n    int64_t v14 = v13; // 0x407259\n    int32_t v15 = v10; // 0x407259\n    int64_t v16; // 0x406ee0\n    int64_t v17 = v16; // 0x407259\n    int64_t v18 = v11; // 0x407259\n    int64_t v19 = v13; // 0x407259\n    int64_t v20 = v16; // 0x407259\n    if (v10 == -1) {\n        // break -> 0x40725f\n        goto lab_0x40725f;\n    }\n    goto lab_0x4070d9;\n  lab_0x4070ce:;\n    // 0x4070ce\n    int64_t v90; // 0x406ee0\n    int64_t * v32; // 0x4070c0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406ee0\n    v12 = v89;\n    int64_t v91; // 0x406ee0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406ee0\n    v17 = v92;\n    goto lab_0x4070d9;\n  lab_0x4070d9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406ee0\n    int32_t v25; // bp-120, 0x406ee0\n    int32_t v26; // bp-184, 0x406ee0\n    int64_t v27; // 0x40708b\n    int64_t v28; // 0x4070a8\n    int64_t v29; // 0x4070ad\n    int64_t * v30; // 0x4070c4\n    switch (c) {\n        case 32: {\n            goto lab_0x4070c0;\n        }\n        case 10: {\n            goto lab_0x4070c0;\n        }\n        case 9: {\n            goto lab_0x4070c0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4072b1\n            int32_t v33; // 0x406ee0\n            char v34; // 0x406ee0\n            int32_t v35; // 0x4072be\n            if (v31 < *v30) {\n                // 0x407290\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4072bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4072b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407290\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4072bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4072a0\n                v36 = v33;\n            }\n            // 0x40738f\n            if (v36 == -1) {\n                // break -> 0x40725f\n                break;\n            }\n            goto lab_0x4070c0;\n        }\n        default: {\n            // 0x4070ef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40725f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407118\n            int64_t v39 = v37 + 4; // 0x40711a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407126\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407128\n            while (v41 == 0) {\n                // 0x407118\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407146\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407152\n            int64_t v45 = v43 + 4; // 0x407154\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407160\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407162\n            while (v47 == 0) {\n                // 0x407152\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40714f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407178\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407188\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40718c\n            int64_t v52 = v51 + v48; // 0x407195\n            int64_t * mem; // 0x406ee0\n            int64_t v53; // 0x406ee0\n            int64_t v54; // 0x406ee0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4072cb\n                int64_t v56 = v55 + 3; // 0x4072d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4071b1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4071c0\n            if (mem == NULL) {\n                // 0x4073ec\n                free((int64_t *)v21);\n                function_405c20(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x407064;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4071d8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4071e2\n            uint32_t v62 = (int32_t)v59; // 0x4071e5\n            int64_t v63; // 0x406ee0\n            if (v62 >= 8) {\n                // 0x4072f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40730e\n                int64_t v66 = v61 - v65; // 0x407312\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40731d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40732e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40732e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40732b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4073bf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4071f7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4071fb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40720b\n            int64_t v74 = v60 - 1; // 0x40720f\n            uint32_t v75 = (int32_t)v73; // 0x407214\n            int64_t v76; // 0x406ee0\n            if (v75 >= 8) {\n                // 0x407342\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40734c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40735c\n                int64_t v80 = v74 - v79; // 0x407360\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40736b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40737b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407379\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4073d6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4073de\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407226\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40722a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407423\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40723e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4070ce;\n            } else {\n                goto lab_0x40724c;\n            }\n        }\n    }\n  lab_0x4070c0:;\n    int64_t v93 = v23; // 0x406ee0\n    int64_t v94 = v22; // 0x406ee0\n    int64_t v95 = v21; // 0x406ee0\n    goto lab_0x4070c0_2;\n  lab_0x407005:;\n    int64_t * mem3 = malloc(size); // 0x407005\n    int64_t v97 = (int64_t)&g9; // 0x407010\n    int64_t v98; // 0x406ee0\n    int64_t path; // 0x406ee0\n    if (mem3 == NULL) {\n        goto lab_0x406fe2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407005\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407026;\n    }\n  lab_0x406f1a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x406f0d\n    char v100 = *v3; // 0x406f1a\n    int64_t v101; // 0x406ee0\n    if (v100 == 0) {\n        // 0x406f74\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406ee0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406ee0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406f60\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406f67;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406f30\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406f3d\n        char v107 = *(char *)v106; // 0x406f42\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406f74\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x406f4b\n    v104 = v103 + 1;\n  lab_0x406f67:\n    // 0x406f74\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406fe2:;\n    char * v108 = (char *)v97;\n    g61 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x406f1a;\n  lab_0x407026:;\n    int64_t v109 = v98 + path; // 0x407026\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407052\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x407081\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4073b2\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x4070a5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4070c0_2:;\n                uint64_t v96 = *v32; // 0x4070c0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40724c;\n                } else {\n                    goto lab_0x4070ce;\n                }\n            }\n          lab_0x40725f:\n            // 0x40725f\n            function_405c20(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x40727e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407064;\n  lab_0x406fcb:;\n    int64_t * mem4 = malloc(size2); // 0x406fcb\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x407071\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407026;\n    } else {\n        goto lab_0x406fe2;\n    }\n  lab_0x407064:\n    // 0x407064\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406fe2;\n}\n"
        },
        {
            "funcName": "function_407450",
            "funcStartAddr": "407450",
            "funcEndAddr": "407478",
            "decompiledFuncCode": "int64_t function_407450(int64_t a1) {\n    // 0x407450\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x407477\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x407460\n    int64_t result = v1; // 0x40746a\n    if ((a1 & 256) != 0) {\n        // 0x40746c\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x407477\n    return result;\n}\n"
        },
        {
            "funcName": "function_407480",
            "funcStartAddr": "407480",
            "funcEndAddr": "4074dd",
            "decompiledFuncCode": "int64_t function_407480(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407480\n    return function_401600();\n}\n"
        },
        {
            "funcName": "function_4074e0",
            "funcStartAddr": "4074e0",
            "funcEndAddr": "4074e1",
            "decompiledFuncCode": "int64_t function_4074e0(void) {\n    // 0x4074e0\n    int64_t result; // 0x4074e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "407508",
            "decompiledFuncCode": "int64_t function_4074f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4074f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_407508",
            "funcStartAddr": "407508",
            "funcEndAddr": "407528",
            "decompiledFuncCode": "int64_t function_407508(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x407512\n    while (*(int64_t *)v1 != -1) {\n        // 0x407513\n        v1 -= 8;\n    }\n    // 0x407524\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cut.elf"
}