{
    "funcInfo": [
        {
            "funcName": "function_401d70",
            "funcStartAddr": "401d70",
            "funcEndAddr": "401d75",
            "decompiledFuncCode": "int64_t function_401d70(void) {\n    // 0x401d70\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d75",
            "funcStartAddr": "401d75",
            "funcEndAddr": "401d7a",
            "decompiledFuncCode": "int64_t function_401d75(void) {\n    // 0x401d75\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d7a",
            "funcStartAddr": "401d7a",
            "funcEndAddr": "401d7f",
            "decompiledFuncCode": "int64_t function_401d7a(void) {\n    // 0x401d7a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d7f",
            "funcStartAddr": "401d7f",
            "funcEndAddr": "401d84",
            "decompiledFuncCode": "int64_t function_401d7f(void) {\n    // 0x401d7f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d84",
            "funcStartAddr": "401d84",
            "funcEndAddr": "401d89",
            "decompiledFuncCode": "int64_t function_401d84(void) {\n    // 0x401d84\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d89",
            "funcStartAddr": "401d89",
            "funcEndAddr": "401d8e",
            "decompiledFuncCode": "int64_t function_401d89(void) {\n    // 0x401d89\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d8e",
            "funcStartAddr": "401d8e",
            "funcEndAddr": "401d93",
            "decompiledFuncCode": "int64_t function_401d8e(void) {\n    // 0x401d8e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d93",
            "funcStartAddr": "401d93",
            "funcEndAddr": "401d98",
            "decompiledFuncCode": "int64_t function_401d93(void) {\n    // 0x401d93\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d98",
            "funcStartAddr": "401d98",
            "funcEndAddr": "401d9d",
            "decompiledFuncCode": "int64_t function_401d98(void) {\n    // 0x401d98\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d9d",
            "funcStartAddr": "401d9d",
            "funcEndAddr": "401da2",
            "decompiledFuncCode": "int64_t function_401d9d(void) {\n    // 0x401d9d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401da2",
            "funcStartAddr": "401da2",
            "funcEndAddr": "401da7",
            "decompiledFuncCode": "int64_t function_401da2(void) {\n    // 0x401da2\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401da7",
            "funcStartAddr": "401da7",
            "funcEndAddr": "401dac",
            "decompiledFuncCode": "int64_t function_401da7(void) {\n    // 0x401da7\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dac",
            "funcStartAddr": "401dac",
            "funcEndAddr": "401db1",
            "decompiledFuncCode": "int64_t function_401dac(void) {\n    // 0x401dac\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401db1",
            "funcStartAddr": "401db1",
            "funcEndAddr": "401db6",
            "decompiledFuncCode": "int64_t function_401db1(void) {\n    // 0x401db1\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dc0",
            "funcStartAddr": "401dc0",
            "funcEndAddr": "4027f8",
            "decompiledFuncCode": "int64_t function_401dc0(int64_t a1, int64_t a2) {\n    int64_t err_num3 = 0x100000000 * a1 >> 32; // 0x401dcf\n    function_402db0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401dc0\n    function_40adc0(0x402d10, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int64_t v2 = 0; // 0x401e26\n    int64_t v3 = 0; // 0x401e26\n    int64_t v4 = 16; // 0x401e26\n    int64_t v5 = 0; // 0x401e26\n    int64_t v6 = 0xffffffff; // 0x401e26\n    int64_t v7; // 0x401dc0\n    int64_t v8; // 0x401dc0\n    int64_t v9; // 0x401dc0\n    int64_t v10; // 0x401dc0\n    int64_t v11; // 0x401dc0\n    while (true) {\n      lab_0x401e30_2:\n        // 0x401e30\n        v8 = v6;\n        v7 = v5;\n        v9 = v4;\n        v10 = v3;\n        v11 = v2;\n        int32_t v12 = function_408310(err_num3 & 0xffffffff, a2, \"HLPRhvu:r:t:l:\", &g2, 0, v1);\n        v2 = v11;\n        v3 = 1;\n        v4 = v9;\n        v5 = v7;\n        v6 = v8;\n        switch (v12) {\n            case -1: {\n                goto lab_0x401fb8;\n            }\n            case 108: {\n                goto lab_0x401e30_2;\n            }\n            default: {\n                if (v12 > 108) {\n                    if (v12 == 118) {\n                        // 0x401f70\n                        g38 = 1;\n                        v2 = v11;\n                        v3 = v10;\n                        v4 = v9;\n                        v5 = v7;\n                        v6 = v8;\n                    } else {\n                        if (v12 > 118) {\n                            // 0x401e67\n                            v2 = v11;\n                            v3 = v10;\n                            v4 = v9;\n                            v5 = 0;\n                            v6 = v8;\n                            if (v12 != 129) {\n                                if (v12 > 129) {\n                                    // 0x401e74\n                                    v2 = v11;\n                                    v3 = v10;\n                                    v4 = v9;\n                                    v5 = 1;\n                                    v6 = v8;\n                                    if (v12 != 130) {\n                                        if (v12 != 131) {\n                                            // 0x401f37\n                                            function_4028e0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401eab\n                                        v2 = g55;\n                                        v3 = v10;\n                                        v4 = v9;\n                                        v5 = v7;\n                                        v6 = v8;\n                                    }\n                                } else {\n                                    // 0x401ec0\n                                    v2 = v11;\n                                    v3 = v10;\n                                    v4 = v9;\n                                    v5 = v7;\n                                    v6 = 1;\n                                    if (v12 != 128) {\n                                        // 0x401f37\n                                        function_4028e0(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x401e88\n                            v2 = v11;\n                            v3 = 1;\n                            v4 = v9;\n                            v5 = v7;\n                            v6 = v8;\n                            if (v12 < 116 == (v12 != 114)) {\n                                // 0x401f37\n                                function_4028e0(1);\n                                // UNREACHABLE\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401ed8\n                    v2 = v11;\n                    v3 = v10;\n                    v4 = 2;\n                    v5 = v7;\n                    v6 = v8;\n                    if (v12 != 76) {\n                        if (v12 > 76) {\n                            if (v12 == 82) {\n                                // 0x401f60\n                                *(char *)&g39 = 1;\n                                v2 = v11;\n                                v3 = v10;\n                                v4 = v9;\n                                v5 = v7;\n                                v6 = v8;\n                            } else {\n                                if (v12 > 82) {\n                                    // 0x401ee6\n                                    v2 = v11;\n                                    v3 = v10;\n                                    v4 = v9;\n                                    v5 = v7;\n                                    v6 = v8;\n                                    if (v12 != 102) {\n                                        // 0x401eef\n                                        v2 = v11;\n                                        v3 = v10;\n                                        v4 = v9;\n                                        v5 = v7;\n                                        v6 = 0;\n                                        if (v12 != 104) {\n                                          lab_0x401f37:\n                                            // 0x401f37\n                                            function_4028e0(1);\n                                            // UNREACHABLE\n                                        }\n                                    }\n                                } else {\n                                    // 0x401f20\n                                    v2 = v11;\n                                    v3 = v10;\n                                    v4 = 16;\n                                    v5 = v7;\n                                    v6 = v8;\n                                    if (v12 != 80) {\n                                        // 0x401f37\n                                        function_4028e0(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                        } else {\n                            if (v12 == -130) {\n                                // 0x4026e8\n                                function_4028e0(0);\n                                // UNREACHABLE\n                            }\n                            // 0x401f0b\n                            v2 = v11;\n                            v3 = v10;\n                            v4 = 17;\n                            v5 = v7;\n                            v6 = v8;\n                            if (v12 != 72) {\n                                if (v12 == -131) {\n                                    // 0x401f80\n                                    function_404ea0((int64_t)g30, \"chcon\", \"GNU coreutils\", (int64_t)g19, \"Russell Coker\", \"Jim Meyering\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401f37;\n                            }\n                        }\n                    }\n                }\n                goto lab_0x401e30_2;\n            }\n        }\n    }\n  lab_0x401fb8:;\n    char v13 = *(char *)&g39; // 0x401fb8\n    int64_t v14; // 0x401dc0\n    int64_t v15; // 0x401dc0\n    int64_t v16; // 0x401dc0\n    if (v13 != 0) {\n        int32_t v17 = v8;\n        if (v9 == 16) {\n            if (v17 == 1) {\n                // 0x4026ef\n                error(1, (int32_t)\"-R --dereference requires either -H or -L\" ^ (int32_t)\"-R --dereference requires either -H or -L\", dcgettext(NULL, \"-R --dereference requires either -H or -L\", 5));\n                goto lab_0x402711;\n            } else {\n                // 0x4025a2\n                g40 = 0;\n                v16 = 16;\n                goto lab_0x401fd6;\n            }\n        } else {\n            // 0x402318\n            v14 = err_num3;\n            v15 = v8;\n            if (v17 == 0) {\n                goto lab_0x40274f;\n            } else {\n                // 0x402321\n                g40 = 1;\n                v16 = v9;\n                goto lab_0x401fd6;\n            }\n        }\n    } else {\n        // 0x401fc7\n        g40 = v8 != 0;\n        v16 = 16;\n        goto lab_0x401fd6;\n    }\n    // 0x401e30\n    goto lab_0x401e30_2;\n  lab_0x401fd6:;\n    int32_t v18 = *(int32_t *)0x6102dc; // 0x401fd6\n    int64_t v19 = v18; // 0x401fd6\n    int32_t v20 = (int32_t)err_num3 - v18; // 0x401fe0\n    unsigned char v21 = (char)(v11 != 0) | (char)v10; // 0x401feb\n    int64_t v22; // 0x401dc0\n    int64_t v23; // 0x401dc0\n    int64_t v24; // 0x401dc0\n    int64_t v25; // 0x401dc0\n    int64_t v26; // 0x401dc0\n    int32_t * err_num; // 0x402003\n    if (v21 == 0) {\n        // 0x402462\n        if (v20 > 1) {\n            goto lab_0x402771;\n        } else {\n            goto lab_0x40246b;\n        }\n    } else {\n        if (v20 < 1) {\n            goto lab_0x40246b;\n        } else {\n            // 0x401fff\n            err_num = __errno_location();\n            if (v11 != 0) {\n                goto lab_0x402711;\n            } else {\n                // 0x40201b\n                g36 = 0;\n                if (v7 != 0 == (v13 != 0)) {\n                    int64_t v27 = function_4049f0(&g35); // 0x4025b3\n                    g37 = v27;\n                    v24 = g28;\n                    if (v27 != 0) {\n                        goto lab_0x40203e;\n                    } else {\n                        int64_t v28 = function_404780(4, (int64_t)\"/\"); // 0x4025d9\n                        error(1, *err_num, dcgettext(NULL, \"failed to get attributes of %s\", 5));\n                        v26 = v28;\n                        v25 = v16;\n                        v22 = a2;\n                        v23 = v7;\n                        goto lab_0x402608;\n                    }\n                } else {\n                    // 0x402033\n                    g37 = 0;\n                    v24 = v19;\n                    goto lab_0x40203e;\n                }\n            }\n        }\n    }\n  lab_0x40274f:\n    // 0x40274f\n    error(1, (int32_t)\"-R -h requires -P\" ^ (int32_t)\"-R -h requires -P\", dcgettext(NULL, \"-R -h requires -P\", 5));\n    int64_t v29 = v14; // 0x40276c\n    int64_t v30 = v15; // 0x40276c\n    goto lab_0x402771;\n  lab_0x402711:\n    // 0x402711\n    *(int32_t *)(int64_t)&g58 = 95;\n    function_404780(4, v11);\n    error(1, *(int32_t *)err_num3, dcgettext(NULL, \"failed to get security context of %s\", 5));\n    v14 = err_num3;\n    v15 = 0;\n    goto lab_0x40274f;\n  lab_0x402771:;\n    int64_t v31 = *(int64_t *)(8 * v30 + a2); // 0x402771\n    g28 = (int32_t)v30 + 1;\n    g36 = v31;\n    int32_t * err_num2 = __errno_location(); // 0x402786\n    *err_num2 = 95;\n    function_4049d0(v31);\n    error(1, *err_num2, dcgettext(NULL, \"invalid context: %s\", 5));\n    int64_t v32 = v29; // 0x4027bf\n    goto lab_0x4027c4;\n  lab_0x40246b:\n    // 0x40246b\n    v32 = err_num3;\n    if (err_num3 <= v19) {\n        // 0x402474\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401f37\n        function_4028e0(1);\n        // UNREACHABLE\n    }\n    goto lab_0x4027c4;\n  lab_0x4027c4:\n    // 0x4027c4\n    function_4049d0(*(int64_t *)(a2 - 8 + 8 * v32));\n    error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n    // 0x401f37\n    function_4028e0(1);\n    // UNREACHABLE\n  lab_0x40203e:;\n    int64_t v33 = function_405270(8 * v24 + a2, (int32_t)v16 | 8); // 0x402049\n    int64_t v34 = v21; // 0x40204e\n    int64_t v35 = fts_read(v33); // 0x402059\n    g56 = v35;\n    int64_t v36 = v35; // 0x402064\n    int64_t v37 = v35; // 0x402064\n    int64_t v38 = v34; // 0x402064\n    int64_t v39 = v33; // 0x402064\n    int64_t v40 = v34; // 0x402064\n    int64_t v41 = v33; // 0x402064\n    if (v35 == 0) {\n        goto lab_0x4020f6;\n    } else {\n        goto lab_0x402070;\n    }\n  lab_0x4020f6:;\n    int64_t v42 = v40; // 0x4020fb\n    if (*err_num != 0) {\n        // 0x4024f4\n        error(0, *err_num, dcgettext(NULL, \"fts_read failed\", 5));\n        v42 = 0;\n    }\n    int64_t v43 = v42; // 0x40210b\n    if ((int32_t)fts_close(v41) != 0) {\n        // 0x4024cc\n        error(0, *err_num, dcgettext(NULL, \"fts_close failed\", 5));\n        v43 = 0;\n    }\n    // 0x402111\n    return v43 % 256 ^ 1;\n  lab_0x402070:;\n    int64_t v44 = v39;\n    int64_t v45 = v38;\n    int64_t v46 = v37;\n    int64_t str = *(int64_t *)(v46 + 56); // 0x402075\n    int64_t v47; // 0x401dc0\n    int64_t v48; // 0x401dc0\n    int64_t v49; // 0x401dc0\n    int64_t v50; // 0x401dc0\n    int64_t v51; // 0x401dc0\n    int64_t v52; // 0x401dc0\n    int64_t v53; // 0x401dc0\n    int64_t v54; // 0x401dc0\n    switch (v36) {\n        case 1: {\n            unsigned char v55 = *(char *)&g39; // 0x40224a\n            if (v55 == 0) {\n                goto lab_0x402180;\n            } else {\n                int64_t v56 = v55; // 0x40224a\n                v52 = v45;\n                v48 = v44;\n                v50 = v56;\n                if (g37 != 0) {\n                    // 0x40226b\n                    v52 = v45;\n                    v48 = v44;\n                    v50 = v56;\n                    if (*(int64_t *)(v46 + 128) == *(int64_t *)g37) {\n                        // 0x40227b\n                        v52 = v45;\n                        v48 = v44;\n                        v50 = v56;\n                        if (*(int64_t *)(v46 + 120) == *(int64_t *)(g37 + 8)) {\n                            // 0x402289\n                            if (strcmp((char *)str, (char *)0x40d2a8) != 0) {\n                                // 0x402695\n                                function_4046a0(1, 4, (int64_t)\"/\");\n                                function_4046a0(0, 4, str);\n                                error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n                            } else {\n                                // 0x40229e\n                                function_404780(4, str);\n                                error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n                            }\n                            // 0x4022d0\n                            error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n                            fts_set(v44, v46, 4);\n                            fts_read(v44);\n                            v52 = v45;\n                            v48 = v44;\n                            v50 = 0;\n                        }\n                    }\n                }\n                goto lab_0x4020df;\n            }\n        }\n        case 2: {\n            // 0x4021fb\n            if ((char)function_4052c0(v44, v46) == 0) {\n                goto lab_0x402180;\n            } else {\n                // 0x40220e\n                function_404850(0, 3, str);\n                error(0, (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5));\n                v52 = v45;\n                v48 = v44;\n                v50 = 0;\n                goto lab_0x4020df;\n            }\n        }\n        case 4: {\n            // 0x4021dc\n            function_404780(4, str);\n            v54 = (int64_t)\"cannot read directory %s\";\n            goto lab_0x4020b6;\n        }\n        case 6: {\n            // 0x40214f\n            if (*(char *)&g39 == 0) {\n                goto lab_0x402457;\n            } else {\n                // 0x40215c\n                if (g37 == 0) {\n                    goto lab_0x402180;\n                } else {\n                    // 0x402168\n                    if (*(int64_t *)(v46 + 128) == *(int64_t *)g37) {\n                        // 0x40251c\n                        if (*(int64_t *)(v46 + 120) != *(int64_t *)(g37 + 8)) {\n                            goto lab_0x402180;\n                        } else {\n                            // 0x40252a\n                            if (strcmp((char *)str, \"/\") != 0) {\n                                // 0x402642\n                                function_4046a0(1, 4, (int64_t)\"/\");\n                                function_4046a0(0, 4, str);\n                                error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n                            } else {\n                                // 0x40253f\n                                function_404780(4, str);\n                                error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n                            }\n                            // 0x402571\n                            error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n                            v53 = v46;\n                            v51 = v45;\n                            v47 = v44;\n                            v49 = 0;\n                            goto lab_0x4020d2;\n                        }\n                    } else {\n                        goto lab_0x402180;\n                    }\n                }\n            }\n        }\n        case 7: {\n            // 0x402127\n            error(0, *(int32_t *)(v46 + 64), \"%s\", (char *)function_404850(0, 3, str));\n            v53 = v46;\n            v51 = v45;\n            v47 = v44;\n            v49 = 0;\n            goto lab_0x4020d2;\n        }\n        case 10: {\n            // 0x40208a\n            if (*(int64_t *)(v46 + 88) != 0) {\n                // 0x40209c\n                function_404780(4, str);\n                v54 = (int64_t)\"cannot access %s\";\n                goto lab_0x4020b6;\n            } else {\n                int64_t * v57 = (int64_t *)(v46 + 32); // 0x402091\n                if (*v57 == 0) {\n                    // 0x40243f\n                    *v57 = 1;\n                    fts_set(v44, v46, 1);\n                    goto lab_0x402457;\n                } else {\n                    // 0x40209c\n                    function_404780(4, str);\n                    v54 = (int64_t)\"cannot access %s\";\n                    goto lab_0x4020b6;\n                }\n            }\n        }\n        default: {\n            goto lab_0x402180;\n        }\n    }\n  lab_0x402608:\n    // 0x402608\n    function_404780(4, v23);\n    error(0, (int32_t)\"can't apply partial context to unlabeled file %s\" ^ (int32_t)\"can't apply partial context to unlabeled file %s\", dcgettext(NULL, \"can't apply partial context to unlabeled file %s\", 5));\n    v53 = v26;\n    v51 = v25;\n    v47 = v22;\n    v49 = 0;\n    goto lab_0x4020d2;\n  lab_0x402180:;\n    int64_t v65 = *(int64_t *)(v46 + 48); // 0x402187\n    if (g38 != 0) {\n        // 0x402345\n        function_404780(4, str);\n        __printf_chk(1, dcgettext(NULL, \"changing security context of %s\\n\", 5));\n    }\n    int32_t v67 = *(int32_t *)(v44 + 44); // 0x402198\n    int32_t v64 = 0; // bp-64, 0x40219d\n    int64_t v66; // 0x401dc0\n    if (g36 == 0) {\n        int64_t v68; // 0x401dc0\n        if (g40 == 0) {\n            // 0x402498\n            v68 = function_408500(v67, v65, (int64_t *)&v64);\n        } else {\n            // 0x40238d\n            v68 = function_408410(v67, v65);\n        }\n        // 0x402392\n        if ((int32_t)v68 < 0) {\n            // 0x4024a2\n            if (*err_num == 61) {\n                goto lab_0x40239a;\n            } else {\n                // 0x4024ad\n                function_404780(4, v65);\n                v66 = (int64_t)\"failed to get security context of %s\";\n                goto lab_0x4023c2;\n            }\n        } else {\n            goto lab_0x40239a;\n        }\n    } else {\n        int64_t v69; // 0x401dc0\n        if (g40 == 0) {\n            // 0x4023e4\n            v69 = function_408520(v67, v65, g36);\n        } else {\n            // 0x4021c4\n            v69 = function_408510(v67, v65, g36);\n        }\n        // 0x4021c9\n        if ((int32_t)v69 != 0) {\n            // 0x4023ee\n            function_4049b0(1, g36);\n            function_4046a0(0, 4, v65);\n            error(0, *err_num, dcgettext(NULL, \"failed to change context of %s to %s\", 5));\n            v53 = v46;\n            v51 = v45;\n            v47 = v44;\n            v49 = 0;\n        } else {\n            // 0x4021d1\n            v53 = v46;\n            v51 = v45;\n            v47 = v44;\n            v49 = v21;\n        }\n        goto lab_0x4020d2;\n    }\n  lab_0x4020d2:;\n    int64_t v58 = v49;\n    int64_t v59 = v47;\n    int64_t v60 = v51;\n    v52 = v60;\n    v48 = v59;\n    v50 = v58;\n    if (*(char *)&g39 == 0) {\n        // 0x402330\n        fts_set(v59, v53, 4);\n        v52 = v60;\n        v48 = v59;\n        v50 = v58;\n    }\n    goto lab_0x4020df;\n  lab_0x4020b6:\n    // 0x4020b6\n    error(0, *(int32_t *)(v46 + 64), dcgettext(NULL, (char *)v54, 5));\n    v53 = v46;\n    v51 = v45;\n    v47 = v44;\n    v49 = 0;\n    goto lab_0x4020d2;\n  lab_0x402457:\n    // 0x402457\n    v52 = v45;\n    v48 = v44;\n    v50 = v21;\n    goto lab_0x4020df;\n  lab_0x4020df:;\n    int64_t v61 = v52 & 0xffffffff & v50; // 0x4020e2\n    int64_t v62 = fts_read(v48); // 0x4020e5\n    v40 = v61;\n    v41 = v48;\n    if (v62 != 0) {\n        // 0x402070\n        v36 = g56;\n        v37 = v62;\n        v38 = v61;\n        v39 = v48;\n        goto lab_0x402070;\n    } else {\n        goto lab_0x4020f6;\n    }\n  lab_0x40239a:;\n    int32_t v63 = v64; // 0x40239a\n    v26 = v46;\n    v25 = v45;\n    v22 = v44;\n    v23 = v65;\n    if (v63 == 0) {\n        goto lab_0x402608;\n    } else {\n        // 0x4023a8\n        *err_num = 95;\n        function_4049d0((int64_t)v63);\n        v66 = (int64_t)\"failed to create security context: %s\";\n        goto lab_0x4023c2;\n    }\n  lab_0x4023c2:\n    // 0x4023c2\n    error(0, *err_num, dcgettext(NULL, (char *)v66, 5));\n    v53 = v46;\n    v51 = v45;\n    v47 = v44;\n    v49 = 0;\n    goto lab_0x4020d2;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402800",
            "funcEndAddr": "40282b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402800\n    int64_t v1; // 0x402800\n    __libc_start_main(0x401dc0, (int32_t)a4, (char **)&v1, (void (*)())0x40ad50, (void (*)())0x40adb0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40282b",
            "funcStartAddr": "40282b",
            "funcEndAddr": "40284a",
            "decompiledFuncCode": "int64_t function_40282b(void) {\n    // 0x40282b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_40284a",
            "funcStartAddr": "40284a",
            "funcEndAddr": "402881",
            "decompiledFuncCode": "int64_t function_40284a(void) {\n    // 0x40284a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402881",
            "funcStartAddr": "402881",
            "funcEndAddr": "4028d8",
            "decompiledFuncCode": "int64_t function_402881(void) {\n    // 0x402881\n    if (g33 != 0) {\n        // 0x4028d7\n        int64_t result; // 0x402881\n        return result;\n    }\n    int64_t v1 = g34; // 0x4028b4\n    int64_t result2; // 0x4028c6\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x4028c6\n        result2 = function_40282b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x4028b6\n        v1++;\n    }\n    // 0x4028aa\n    g34 = v1;\n    // 0x4028c6\n    result2 = function_40282b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4028d8",
            "funcStartAddr": "4028d8",
            "funcEndAddr": "4028dd",
            "decompiledFuncCode": "int64_t function_4028d8(void) {\n    // 0x4028d8\n    return function_40284a();\n}\n"
        },
        {
            "funcName": "function_4028e0",
            "funcStartAddr": "4028e0",
            "funcEndAddr": "402ced",
            "decompiledFuncCode": "int64_t function_4028e0(int64_t a1) {\n    int32_t status = a1; // 0x4028f6\n    if (status != 0) {\n        // 0x4028fa\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40291f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402926\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... CONTEXT FILE...\\n  or:  %s [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Change the SELinux security context of each FILE to CONTEXT.\\nWith --reference, change the security context of each FILE to that of RFILE.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --dereference      affect the referent of each symbolic link (this is\\n                         the default), rather than the symbolic link itself\\n  -h, --no-dereference   affect symbolic links instead of any referenced file\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -u, --user=USER        set user USER in the target security context\\n  -r, --role=ROLE        set role ROLE in the target security context\\n  -t, --type=TYPE        set type TYPE in the target security context\\n  -l, --range=RANGE      set range RANGE in the target security context\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve-root  do not treat '/' specially (the default)\\n      --preserve-root    fail to operate recursively on '/'\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --reference=RFILE  use RFILE's security context rather than specifying\\n                         a CONTEXT value\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -R, --recursive        operate on files and directories recursively\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -v, --verbose          output a diagnostic for every file processed\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following options modify how a hierarchy is traversed when the -R\\noption is also specified.  If more than one is specified, only the final\\none takes effect.\\n\\n  -H                     if a command line argument is a symbolic link\\n                         to a directory, traverse it\\n  -L                     traverse every symbolic link to a directory\\n                         encountered\\n  -P                     do not traverse any symbolic links (default)\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x402acb\n    bool v2; // 0x4028e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402b50\n    int64_t v6 = *(int64_t *)v5; // 0x402b54\n    int64_t v7 = 6; // 0x402b5a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"chcon\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402b66\n        char v11 = *(char *)v9; // 0x402b66\n        char v12 = v11; // 0x402b66\n        bool v13 = false; // 0x402b66\n        while (v10 == v11) {\n            // 0x402b5c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402b66\n            int64_t v15 = v8 + v3; // 0x402b66\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402b72\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402b72\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402c84;\n        } else {\n            // 0x402c6e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402cc3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402bd4;\n            } else {\n                goto lab_0x402c84;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402bd4;\n        } else {\n            // 0x402bba\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402cc3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402bd4;\n            } else {\n                goto lab_0x402bd4;\n            }\n        }\n    }\n  lab_0x402c84:\n    // 0x402c84\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c14\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40291f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402bd4:\n    // 0x402bd4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c14\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40291f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402cf0",
            "funcStartAddr": "402cf0",
            "funcEndAddr": "402cf8",
            "decompiledFuncCode": "int64_t function_402cf0(int64_t a1) {\n    // 0x402cf0\n    g42 = a1;\n    int64_t result; // 0x402cf0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d00",
            "funcStartAddr": "402d00",
            "funcEndAddr": "402d08",
            "decompiledFuncCode": "int64_t function_402d00(int64_t a1) {\n    // 0x402d00\n    g41 = a1;\n    int64_t result; // 0x402d00\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d10",
            "funcStartAddr": "402d10",
            "funcEndAddr": "402dae",
            "decompiledFuncCode": "int64_t function_402d10(void) {\n    // 0x402d10\n    int32_t * err_num; // 0x402d26\n    if ((int32_t)function_408530((int64_t)g30) == 0) {\n        goto lab_0x402d3c;\n    } else {\n        // 0x402d26\n        err_num = __errno_location();\n        if (g41 == 0) {\n            goto lab_0x402d53;\n        } else {\n            // 0x402d37\n            if (*err_num != 32) {\n                goto lab_0x402d53;\n            } else {\n                goto lab_0x402d3c;\n            }\n        }\n    }\n  lab_0x402d3c:;\n    int64_t result = function_408530((int64_t)g32); // 0x402d43\n    if ((int32_t)result == 0) {\n        // 0x402d4c\n        return result;\n    }\n    // 0x402d8e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x402d53:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402d5f\n    if (g42 == 0) {\n        // 0x402d99\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402d73\n        error(0, *err_num, \"%s: %s\", (char *)function_404820((int64_t)g42), v1);\n    }\n    // 0x402d8e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402db0",
            "funcStartAddr": "402db0",
            "funcEndAddr": "402e49",
            "decompiledFuncCode": "int64_t function_402db0(int64_t str) {\n    // 0x402db0\n    if (str == 0) {\n        // 0x402e29\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402dbe\n    int64_t result = (int64_t)found_char_pos; // 0x402dbe\n    if (found_char_pos == NULL) {\n        // 0x402e19\n        g43 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402dc8\n    if (v1 - str < 7) {\n        // 0x402e19\n        g43 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x402dd8\n    bool v2; // 0x402db0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402db0\n    int64_t v5 = result - 6; // 0x402db0\n    int64_t v6 = 7; // 0x402de6\n    unsigned char v7 = *(char *)v5; // 0x402de6\n    char v8 = *(char *)v4; // 0x402de6\n    char v9 = v8; // 0x402de6\n    bool v10 = false; // 0x402de6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402df0\n    int64_t v13 = v1; // 0x402df0\n    int64_t v14 = 3; // 0x402df0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402e19\n        g43 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402e02\n    char v16 = *(char *)v12; // 0x402e02\n    char v17 = v16; // 0x402e02\n    bool v18 = false; // 0x402e02\n    while (v15 == v16) {\n        // 0x402df2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402e0c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402e0e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x402e19\n    g43 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402e50",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402f42",
            "decompiledFuncCode": "int64_t function_402e50(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402e64\n    int64_t result = (int64_t)v1; // 0x402e64\n    if (result != a1) {\n        // 0x402e71\n        return result;\n    }\n    int64_t v2 = function_4099e0(); // 0x402e80\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402f36\n    if (v3 == 85) {\n        // 0x402e90\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402f28\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x402ebe\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x402ecb\n        // 0x402e71\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402f28\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x402f0d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x402f1a\n    // 0x402e71\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402f50",
            "funcStartAddr": "402f50",
            "funcEndAddr": "402fa7",
            "decompiledFuncCode": "int64_t function_402f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402f50\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402f98\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402fa7",
            "funcStartAddr": "402fa7",
            "funcEndAddr": "404171",
            "decompiledFuncCode": "int64_t function_402fa7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402ff1\n    int64_t v3 = 0; // 0x402ff1\n    int64_t v4; // 0x402fa7\n    int64_t v5; // 0x402fa7\n    int64_t v6; // 0x402fa7\n    int64_t v7; // 0x402fa7\n    int64_t v8; // 0x402fa7\n    int64_t v9; // 0x402fa7\n    int64_t v10; // 0x402fa7\n    int64_t v11; // 0x402fa7\n    int64_t v12; // 0x402fa7\n    int64_t v13; // 0x402fa7\n    int64_t v14; // 0x402fa7\n    int64_t v15; // 0x402fa7\n    int64_t v16; // 0x402fa7\n    int64_t v17; // 0x402fa7\n    int64_t v18; // 0x402fa7\n    int64_t result; // 0x402fa7\n    int64_t v19; // 0x402fa7\n    int32_t wc; // bp+132, 0x402fa7\n    int64_t ps; // bp+136, 0x402fa7\n    char v20; // 0x403560\n    int64_t v21; // 0x403560\n    int64_t v22; // 0x403908\n    int64_t v23; // 0x402fa7\n    int64_t v24; // 0x403927\n    int32_t v25; // 0x402fa7\n    while (true) {\n      lab_0x402ff8_2:\n        // 0x402ff8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402fa7\n        int64_t v27; // 0x40302c\n        while (true) {\n          lab_0x402ff8:\n            // 0x402ff8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403003\n            if (v15 == -1) {\n                // 0x403005\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403013\n            if (v28) {\n                // break (via goto) -> 0x403778\n                goto lab_0x403778;\n            }\n            // 0x40301c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g57 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40360b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403151;\n                    }\n                    // 0x403a2d\n                    v26 = v5 + 1;\n                    goto lab_0x402ff8;\n                }\n                case 7: {\n                    goto lab_0x403151;\n                }\n                case 8: {\n                    goto lab_0x403151;\n                }\n                case 9: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403151;\n                }\n                case 12: {\n                    goto lab_0x403151;\n                }\n                case 13: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40311d;\n                }\n                case 36: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403151;\n                }\n                case 38: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403151;\n                }\n                case 44: {\n                    goto lab_0x403151;\n                }\n                case 45: {\n                    goto lab_0x403151;\n                }\n                case 46: {\n                    goto lab_0x403151;\n                }\n                case 47: {\n                    goto lab_0x403151;\n                }\n                case 48: {\n                    goto lab_0x403151;\n                }\n                case 49: {\n                    goto lab_0x403151;\n                }\n                case 50: {\n                    goto lab_0x403151;\n                }\n                case 51: {\n                    goto lab_0x403151;\n                }\n                case 52: {\n                    goto lab_0x403151;\n                }\n                case 53: {\n                    goto lab_0x403151;\n                }\n                case 54: {\n                    goto lab_0x403151;\n                }\n                case 55: {\n                    goto lab_0x403151;\n                }\n                case 56: {\n                    goto lab_0x403151;\n                }\n                case 57: {\n                    goto lab_0x403151;\n                }\n                case 58: {\n                    goto lab_0x403151;\n                }\n                case 59: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403151;\n                }\n                case 66: {\n                    goto lab_0x403151;\n                }\n                case 67: {\n                    goto lab_0x403151;\n                }\n                case 68: {\n                    goto lab_0x403151;\n                }\n                case 69: {\n                    goto lab_0x403151;\n                }\n                case 70: {\n                    goto lab_0x403151;\n                }\n                case 71: {\n                    goto lab_0x403151;\n                }\n                case 72: {\n                    goto lab_0x403151;\n                }\n                case 73: {\n                    goto lab_0x403151;\n                }\n                case 74: {\n                    goto lab_0x403151;\n                }\n                case 75: {\n                    goto lab_0x403151;\n                }\n                case 76: {\n                    goto lab_0x403151;\n                }\n                case 77: {\n                    goto lab_0x403151;\n                }\n                case 78: {\n                    goto lab_0x403151;\n                }\n                case 79: {\n                    goto lab_0x403151;\n                }\n                case 80: {\n                    goto lab_0x403151;\n                }\n                case 81: {\n                    goto lab_0x403151;\n                }\n                case 82: {\n                    goto lab_0x403151;\n                }\n                case 83: {\n                    goto lab_0x403151;\n                }\n                case 84: {\n                    goto lab_0x403151;\n                }\n                case 85: {\n                    goto lab_0x403151;\n                }\n                case 86: {\n                    goto lab_0x403151;\n                }\n                case 87: {\n                    goto lab_0x403151;\n                }\n                case 88: {\n                    goto lab_0x403151;\n                }\n                case 89: {\n                    goto lab_0x403151;\n                }\n                case 90: {\n                    goto lab_0x403151;\n                }\n                case 91: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403151;\n                }\n                case 94: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403151;\n                }\n                case 96: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403151;\n                }\n                case 98: {\n                    goto lab_0x403151;\n                }\n                case 99: {\n                    goto lab_0x403151;\n                }\n                case 100: {\n                    goto lab_0x403151;\n                }\n                case 101: {\n                    goto lab_0x403151;\n                }\n                case 102: {\n                    goto lab_0x403151;\n                }\n                case 103: {\n                    goto lab_0x403151;\n                }\n                case 104: {\n                    goto lab_0x403151;\n                }\n                case 105: {\n                    goto lab_0x403151;\n                }\n                case 106: {\n                    goto lab_0x403151;\n                }\n                case 107: {\n                    goto lab_0x403151;\n                }\n                case 108: {\n                    goto lab_0x403151;\n                }\n                case 109: {\n                    goto lab_0x403151;\n                }\n                case 110: {\n                    goto lab_0x403151;\n                }\n                case 111: {\n                    goto lab_0x403151;\n                }\n                case 112: {\n                    goto lab_0x403151;\n                }\n                case 113: {\n                    goto lab_0x403151;\n                }\n                case 114: {\n                    goto lab_0x403151;\n                }\n                case 115: {\n                    goto lab_0x403151;\n                }\n                case 116: {\n                    goto lab_0x403151;\n                }\n                case 117: {\n                    goto lab_0x403151;\n                }\n                case 118: {\n                    goto lab_0x403151;\n                }\n                case 119: {\n                    goto lab_0x403151;\n                }\n                case 120: {\n                    goto lab_0x403151;\n                }\n                case 121: {\n                    goto lab_0x403151;\n                }\n                case 122: {\n                    goto lab_0x403151;\n                }\n                case 123: {\n                    goto lab_0x4030f5;\n                }\n                case 124: {\n                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4030f5;\n                }\n                case 126: {\n                    goto lab_0x40311d;\n                }\n                default: {\n                    goto lab_0x4034f5;\n                }\n            }\n        }\n      lab_0x4034f5:\n        if (v23 != 1) {\n            // 0x403860\n            ps = 0;\n            int64_t len = v15; // 0x403870\n            if (v15 == -1) {\n                // 0x403872\n                len = strlen((char *)str);\n            }\n            // 0x40389e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4038ff:\n                // 0x4038ff\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403904\n                int64_t v30 = v29 + str;\n                v24 = function_408390(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403e7a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403e7a_2;\n                    }\n                    case -2: {\n                        // 0x403f5d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403f97\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403f9a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403fa7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403fa0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403e7a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403e7a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4038d0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40397c\n                        char v34 = *(char *)v33; // 0x40398d\n                        unsigned char v35; // 0x402fa7\n                        if (v34 < 125) {\n                            // 0x403998\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4039af\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403980\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40398d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403998\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4039af\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403980\n                            v33++;\n                        }\n                        goto lab_0x4038d0;\n                    }\n                }\n            }\n            goto lab_0x403e7a_2;\n        } else {\n            // 0x403544\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403151;\n        }\n    }\n  lab_0x403778:\n    // 0x403778\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40407a\n        if (v8 > result) {\n            // 0x404083\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4033a7\n        return result;\n    }\n    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403151:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403160\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40336a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403261\n    char v40 = v20; // 0x403261\n    int64_t v41 = v38; // 0x403261\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403261\n    int64_t v43 = v36; // 0x403261\n    goto lab_0x4031dd;\n  lab_0x40336a_2:\n    // 0x4033a7\n    return function_402f50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403e7a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403151;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403a4e\n        int64_t v50 = v5 + 1; // 0x403b31\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403b38\n        char v52 = v20; // 0x403b38\n        int64_t v53 = result; // 0x403b38\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403b01\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403b05\n            int64_t v56 = v54 + 1; // 0x403b0a\n            int64_t v57 = v51 + 1; // 0x403b31\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403afc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403b01\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403b05\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4031dd;\n    }\n  lab_0x4038d0:\n    // 0x4038d0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4038ef\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4038f2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403e7a\n        goto lab_0x403e7a_2;\n    }\n    goto lab_0x4038ff;\n  lab_0x40311d:\n    // 0x40311d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40336a_2;\n    }\n    goto lab_0x403151;\n  lab_0x4030f5:;\n    bool v60 = v15 == 1; // 0x403100\n    if (v15 == -1) {\n        // 0x403102\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40310e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403151;\n    } else {\n        goto lab_0x40311d;\n    }\n  lab_0x4031dd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4031e2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4031e6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402ff8_2;\n}\n"
        },
        {
            "funcName": "function_404180",
            "funcStartAddr": "404180",
            "funcEndAddr": "40431e",
            "decompiledFuncCode": "int64_t function_404180(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404182\n    int32_t * v3 = __errno_location(); // 0x40419c\n    int32_t v4 = v2; // 0x4041b1\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g22; // 0x4041a1\n    int32_t v6 = *v3; // 0x4041ab\n    int64_t v7 = v5; // 0x4041c1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if (v4 == 0x7fffffff) {\n            // 0x404319\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x4041d0\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x4041d7\n        int64_t v10; // 0x404180\n        if (g22 == &g23) {\n            int64_t v11 = function_405040(0, v9); // 0x4042fa\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g23); // 0x4042ff\n            *(int64_t *)&g22 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_405040(v5, v9); // 0x4041eb\n            *(int64_t *)&g22 = v13;\n            v10 = v13;\n        }\n        // 0x4041fa\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g25; // 0x4041fa\n        int32_t v15 = v8; // 0x404201\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g25 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x404231\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40423b\n    int64_t * v18 = (int64_t *)v16; // 0x40423e\n    uint64_t v19 = *v18; // 0x40423e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x404241\n    int64_t result = *v20; // 0x404241\n    int64_t v21; // 0x404180\n    uint64_t v22 = function_402f50(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x404264\n    if (v19 > v22) {\n        // 0x4042db\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x404277\n    *v18 = v23;\n    if (result != (int64_t)&g44) {\n        // 0x404287\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404fe0(v23); // 0x4042a1\n    *v20 = result2;\n    int64_t v24; // 0x404180\n    function_402f50(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x4042db\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404320",
            "funcStartAddr": "404320",
            "funcEndAddr": "404354",
            "decompiledFuncCode": "int64_t function_404320(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404327\n    int64_t result = function_4051e0(a1 == 0 ? (int64_t)&g45 : a1, 56); // 0x404346\n    return result;\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "40436f",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g45 : a1); // 0x40436c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "40437f",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g45 : a1; // 0x404378\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g45;\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "4043b3",
            "decompiledFuncCode": "int64_t function_404380(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g45 + 8 : a1 + 8; // 0x404399\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40439e\n    uint32_t v3 = *v2; // 0x40439e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4043a2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043d3",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g45 + 4 : a1 + 4); // 0x4043cc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "40440b",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g45 : a1; // 0x4043e8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404405\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4043fc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g45;\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404482",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g45 : a5; // 0x404432\n    int32_t * v2 = __errno_location(); // 0x40443b\n    uint32_t v3 = *(int32_t *)v1; // 0x40445b\n    int64_t result = function_402f50(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40446a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "404571",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g45 : a4; // 0x4044b2\n    int32_t * v2 = __errno_location(); // 0x4044b8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4044d7\n    int32_t * v4 = (int32_t *)v1; // 0x4044da\n    int64_t v5 = function_402f50(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4044f5\n    int64_t v6 = v5 + 1; // 0x4044fa\n    int64_t result = function_404fe0(v6); // 0x40450f\n    function_402f50(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404554\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40455d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404580",
            "funcStartAddr": "404580",
            "funcEndAddr": "40458a",
            "decompiledFuncCode": "int64_t function_404580(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404580\n    return function_404490(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "404625",
            "decompiledFuncCode": "int64_t function_404590(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x404590\n    int64_t v2 = v1; // 0x404590\n    int64_t v3 = v2; // 0x4045a4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x4045c3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g58;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4045c0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g58;\n        }\n    }\n    int64_t v6 = v3; // 0x4045dd\n    if (g23 != 0x610360) {\n        // 0x4045df\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g44;\n        v6 = &g58;\n    }\n    int64_t result = v6; // 0x404601\n    if (g22 != &g23) {\n        // 0x404603\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g58;\n    }\n    // 0x404616\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404630",
            "funcStartAddr": "404630",
            "funcEndAddr": "404641",
            "decompiledFuncCode": "int64_t function_404630(void) {\n    // 0x404630\n    int64_t v1; // 0x404630\n    return function_404180(v1, v1, -1, (int64_t *)&g45);\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "40465a",
            "decompiledFuncCode": "int64_t function_404650(void) {\n    // 0x404650\n    int64_t v1; // 0x404650\n    return function_404180(v1, v1, v1, (int64_t *)&g45);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "404676",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1) {\n    // 0x404660\n    return function_404180(0, a1, -1, (int64_t *)&g45);\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "404692",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1, int64_t a2) {\n    // 0x404680\n    return function_404180(0, a1, a2, (int64_t *)&g45);\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "404708",
            "decompiledFuncCode": "int64_t function_4046a0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4046b0\n    return function_404180((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404774",
            "decompiledFuncCode": "int64_t function_404710(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404720\n    return function_404180((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404780",
            "funcStartAddr": "404780",
            "funcEndAddr": "40478c",
            "decompiledFuncCode": "int64_t function_404780(int64_t a1, int64_t a2) {\n    // 0x404780\n    return function_4046a0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "40479f",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404790\n    return function_404710(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "404810",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g45); // 0x4047ad\n    int128_t v2 = __asm_movdqa(g46); // 0x4047b5\n    int128_t v3 = __asm_movdqa(g47); // 0x4047bd\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x4047d2\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4047e8\n    uint32_t v6 = *v5; // 0x4047e8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4047ed\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404180(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "40481d",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2) {\n    // 0x404810\n    return function_4047a0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404820",
            "funcStartAddr": "404820",
            "funcEndAddr": "404831",
            "decompiledFuncCode": "int64_t function_404820(int64_t a1) {\n    // 0x404820\n    return function_4047a0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404840",
            "funcStartAddr": "404840",
            "funcEndAddr": "40484a",
            "decompiledFuncCode": "int64_t function_404840(void) {\n    // 0x404840\n    int64_t v1; // 0x404840\n    return function_4047a0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "4048be",
            "decompiledFuncCode": "int64_t function_404850(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40486a\n    return function_404180((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4048c0",
            "funcStartAddr": "4048c0",
            "funcEndAddr": "40492c",
            "decompiledFuncCode": "int64_t function_4048c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g45); // 0x4048c7\n    int128_t v2 = __asm_movdqa(g46); // 0x4048cf\n    int128_t v3 = __asm_movdqa(g47); // 0x4048d7\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x4048f9\n    if (a2 == 0 || a3 == 0) {\n        // 0x404927\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40490a\n    return function_404180(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404939",
            "decompiledFuncCode": "int64_t function_404930(void) {\n    // 0x404930\n    int64_t v1; // 0x404930\n    return function_4048c0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404940",
            "funcStartAddr": "404940",
            "funcEndAddr": "404957",
            "decompiledFuncCode": "int64_t function_404940(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404940\n    return function_4048c0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "404973",
            "decompiledFuncCode": "int64_t function_404960(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404960\n    return function_4048c0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404980",
            "funcStartAddr": "404980",
            "funcEndAddr": "40498a",
            "decompiledFuncCode": "int64_t function_404980(void) {\n    // 0x404980\n    int64_t v1; // 0x404980\n    return function_404180(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_404990",
            "funcStartAddr": "404990",
            "funcEndAddr": "4049a2",
            "decompiledFuncCode": "int64_t function_404990(int64_t a1, int64_t a2) {\n    // 0x404990\n    return function_404180(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4049b0",
            "funcStartAddr": "4049b0",
            "funcEndAddr": "4049c1",
            "decompiledFuncCode": "int64_t function_4049b0(int64_t a1, int64_t a2) {\n    // 0x4049b0\n    return function_404180(a1, a2, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049e6",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t a1) {\n    // 0x4049d0\n    return function_404180(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "404a3b",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t * a1) {\n    // 0x4049f0\n    int64_t v1; // bp-152, 0x4049f0\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x404a30\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404e1d",
            "decompiledFuncCode": "int64_t function_404a40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404ad8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404a5c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404a76\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404abb\n    if (a6 < 10) {\n        // 0x404aca\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404bc2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e40",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404e20\n    if (a5 == 0) {\n        // 0x404e3b\n        return function_404a40(a1, a2, a3, a4, a5, 0, (int64_t)&g58);\n    }\n    int64_t v1 = 0; // 0x404e27\n    v1++;\n    int64_t v2 = v1; // 0x404e39\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404e30\n        v1++;\n        v2 = v1;\n    }\n    // 0x404e3b\n    return function_404a40(a1, a2, a3, a4, a5, v2, (int64_t)&g58);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404ea0",
            "decompiledFuncCode": "int64_t function_404e40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404e40\n    int64_t v3 = &v2; // 0x404e40\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404e73\n    int64_t v6; // 0x404e5d\n    int64_t * v7; // 0x404e7b\n    int64_t v8; // 0x404e7b\n    int64_t v9; // 0x404e87\n    if (v5 < 48) {\n        // 0x404e50\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404e93\n            break;\n        }\n    } else {\n        // 0x404e7b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404e93\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404e71\n    while (v4 != 9) {\n        // 0x404e69\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404e50\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404e93\n                break;\n            }\n        } else {\n            // 0x404e7b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404e93\n                break;\n            }\n        }\n        // 0x404e69\n        v10 = 10;\n    }\n    // 0x404e93\n    return function_404a40(a1, a2, a3, a4, v3, v10, (int64_t)&g58);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404f5c",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404ea0\n    int64_t v1; // bp-168, 0x404ea0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404ea0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404ea0\n    int64_t v8; // 0x404ea0\n    int64_t v9; // bp-56, 0x404ea0\n    int64_t v10; // 0x404f05\n    int64_t v11; // 0x404f29\n    if ((int32_t)v6 < 48) {\n        // 0x404ef0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404f40\n            break;\n        }\n    } else {\n        // 0x404f22\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404f40\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404f1a\n    int64_t v13 = 10; // 0x404f1a\n    while (v5 != 9) {\n        // 0x404f1c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404ef0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404f40\n                break;\n            }\n        } else {\n            // 0x404f22\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404f40\n                break;\n            }\n        }\n        // 0x404f12\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404f40\n    int64_t v14; // bp-136, 0x404ea0\n    int64_t result = function_404a40(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g58); // 0x404f4f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404fd4",
            "decompiledFuncCode": "int64_t function_404f60(int64_t a1) {\n    // 0x404f60\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404fc3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404ffa",
            "decompiledFuncCode": "int64_t function_404fe0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404fe4\n    if (size != 0 != (mem == NULL)) {\n        // 0x404ff3\n        return (int64_t)mem;\n    }\n    // 0x404ff5\n    function_405230(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405021",
            "decompiledFuncCode": "int64_t function_405000(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405003\n    int64_t v2 = v1; // 0x405003\n    if (v2 < 0) {\n        // 0x40501b\n        function_405230(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405019\n        return function_404fe0(v2);\n    }\n    // 0x40501b\n    function_405230(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405032",
            "decompiledFuncCode": "int64_t function_405030(void) {\n    // 0x405030\n    int64_t v1; // 0x405030\n    return function_404fe0(v1);\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "405076",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405068\n        free(v1);\n        return (int32_t)&g58 ^ (int32_t)&g58;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405051\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405060\n        return (int64_t)mem;\n    }\n    // 0x405071\n    function_405230(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "4050a1",
            "decompiledFuncCode": "int64_t function_405080(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405083\n    int64_t v2 = v1; // 0x405083\n    if (v2 < 0) {\n        // 0x40509b\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405099\n        return function_405040(a1, v2);\n    }\n    // 0x40509b\n    function_405230(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4050b0",
            "funcStartAddr": "4050b0",
            "funcEndAddr": "405136",
            "decompiledFuncCode": "int64_t function_4050b0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40510b\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405040(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4050f3\n    if (a2 == 0) {\n        // 0x405118\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4050f8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40510b\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    // 0x4050da\n    *(int64_t *)a2 = v2;\n    return function_405040(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405190",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405140\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40518a\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        // 0x405162\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405040(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405175\n        *(int64_t *)a2 = 128;\n        return function_405040(0, 128);\n    }\n    // 0x405188\n    if (a2 < 0) {\n        // 0x40518a\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    // 0x405162\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405040(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4051a7",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1, int64_t a2) {\n    // 0x405190\n    return (int64_t)memset((int64_t *)function_404fe0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "4051de",
            "decompiledFuncCode": "int64_t function_4051b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4051b7\n    if ((int64_t)v1 < 0) {\n        // 0x4051d9\n        function_405230(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4051d9\n        function_405230(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4051ca\n    if (mem != NULL) {\n        // 0x4051d4\n        return (int64_t)mem;\n    }\n    // 0x4051d9\n    function_405230(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "405208",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404fe0(a2); // 0x4051ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "405223",
            "decompiledFuncCode": "int64_t function_405210(int64_t str) {\n    // 0x405210\n    return function_4051e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405230",
            "funcStartAddr": "405230",
            "funcEndAddr": "405261",
            "decompiledFuncCode": "int64_t function_405230(int64_t a1) {\n    // 0x405230\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "4052c0",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1, int32_t a2) {\n    // 0x405270\n    int64_t v1; // 0x405270\n    int64_t result = fts_open(a1, a2 | 512, v1); // 0x40527a\n    if (result != 0) {\n        // 0x405284\n        return result;\n    }\n    // 0x405290\n    if (*__errno_location() == 22) {\n        // 0x4052a0\n        __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n        return &g58;\n    }\n    // 0x40529a\n    function_405230(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "4052e9",
            "decompiledFuncCode": "int64_t function_4052c0(int64_t a1, int64_t a2) {\n    int64_t result = 1; // 0x4052c0\n    int32_t v1; // 0x4052c0\n    switch (v1 & 17) {\n        case 17: {\n            // 0x4052e0\n            return *(int64_t *)(a2 + 88) != 0;\n        }\n        default: {\n            // 0x4052d7\n            result = 0;\n        }\n        case 16: {\n            // 0x4052d7\n            return result;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "40530a",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t a1, int64_t a2) {\n    // 0x4052f0\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x405300\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x4052fc\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "40531d",
            "decompiledFuncCode": "int64_t function_405310(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405310\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "40532c",
            "decompiledFuncCode": "int64_t function_405320(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405320\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "40533a",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1, int64_t a2) {\n    // 0x405330\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "405362",
            "decompiledFuncCode": "int64_t function_405340(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x40534b\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x405352\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_405370",
            "funcStartAddr": "405370",
            "funcEndAddr": "40551a",
            "decompiledFuncCode": "int64_t function_405370(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x405376\n    int64_t v2 = a1 + 72; // 0x40537e\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x40537e\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x405381\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x405386\n    int64_t v6 = *v5; // 0x405386\n    int32_t v7; // 0x405370\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x405390;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x405390;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x4053eb\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x405440\n                    v7 = *__errno_location();\n                    goto lab_0x405447;\n                } else {\n                    goto lab_0x405407;\n                }\n            }\n        }\n    } else {\n        goto lab_0x405390;\n    }\n  lab_0x405390:;\n    struct stat * v9 = (struct stat *)v1; // 0x405398\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x405407;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x4053a1\n        int32_t v11 = *v10; // 0x4053a9\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x4053b4\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x4053cd\n                *v10 = 0;\n                return 13;\n            }\n            // 0x4054f0\n            v7 = *v10;\n        }\n        goto lab_0x405447;\n    }\n  lab_0x405407:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x40540d\n    int64_t v13; // 0x405370\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x405480\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x40548d\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x405494\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x4054a2\n            break;\n        }\n        case -0x6000: {\n            // 0x405433\n            return 12;\n        }\n        default: {\n            // 0x405433\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x4054a2\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x405433\n        return 1;\n    }\n    // 0x4054b8\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x405433\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x4054c1\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x405433\n        return 1;\n    }\n    // 0x405433\n    return *v4 == 0 ? 1 : 5;\n  lab_0x405447:\n    // 0x405447\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x405450\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "40561d",
            "decompiledFuncCode": "int64_t function_405520(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x405533\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x405537\n    int64_t v3 = *v2; // 0x405537\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40553b\n    int64_t base = v3; // 0x40553f\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x40554b\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x4055f1\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x405560\n        if (mem == NULL) {\n            // 0x4055f1\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x405571\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x40557b\n    int64_t v7 = result; // 0x40557b\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x405580\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x405591\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x4055a1\n    int64_t result2 = *(int64_t *)v8; // 0x4055a8\n    if (nmemb == 1) {\n        // 0x4055da\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x4055c3\n    int64_t * v10 = (int64_t *)v9; // 0x4055c3\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x4055cf\n    int64_t v12 = v11; // 0x4055d3\n    int64_t v13 = v9; // 0x4055d3\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x4055c3\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x4055da\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "4056aa",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x40563e\n    int64_t result = (int64_t)mem; // 0x40563e\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x40564b\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x40569c\n    return result;\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "4056f1",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t a1) {\n    // 0x4056b0\n    if (a1 == 0) {\n        // 0x4056e2\n        int64_t result; // 0x4056b0\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x4056c0\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x4056c4\n    if (dirp != 0) {\n        // 0x4056cd\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x4056d2\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x4056cd\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x4056d2\n        free((int64_t *)v2);\n    }\n    // 0x4056e2\n    return &g58;\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "405739",
            "decompiledFuncCode": "int64_t function_405700(int64_t a1) {\n    int64_t result = function_409940(a1); // 0x40571f\n    if ((char)result != 0) {\n        // 0x405728\n        return result;\n    }\n    int32_t fd = function_409990(a1); // 0x405718\n    if (fd >= 0) {\n        // 0x405730\n        close(fd);\n    }\n    int64_t result2 = function_409940(a1); // 0x40571f\n    while ((char)result2 == 0) {\n        // 0x405710\n        fd = function_409990(a1);\n        if (fd >= 0) {\n            // 0x405730\n            close(fd);\n        }\n        // 0x40571c\n        result2 = function_409940(a1);\n    }\n    // 0x405728\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405851",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x405748\n    int64_t v2 = *v1; // 0x405748\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x405782\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x405756\n    int64_t v4 = *v3; // 0x405756\n    int64_t v5 = v4; // 0x405760\n    int64_t result; // bp-152, 0x405740\n    if (v4 == 0) {\n        // 0x4057f0\n        v5 = function_408f60(13, 0, 0x405320, 0x405330, 0x401920);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x40581c\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x405782\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x405766\n    result = *v6;\n    int64_t v7 = function_408cf0(v5, &result); // 0x405774\n    if (v7 != 0) {\n        // 0x405782\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x405790\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x405782\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x4057ac\n    if (mem == NULL) {\n        // 0x405782\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x4057ac\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_409700(v5, v8) != 0) {\n        // 0x4057d8\n        return result;\n    }\n    // 0x405840\n    free(mem);\n    // 0x405782\n    return result;\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "4058c4",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_405740(a1, a2); // 0x405864\n    if (v1 == 0x9fa0) {\n        // 0x405896\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x4058a0\n        if (v1 != 0) {\n            // 0x4058a7\n            return v1 != 0x6969;\n        }\n        // 0x405896\n        return 0;\n    }\n    // 0x405873\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x405896\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x405896\n            return 2;\n        }\n    }\n    // 0x405896\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "405936",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x4058db\n    int32_t fd = *v1; // 0x4058db\n    int32_t v2 = a2; // 0x4058de\n    if (fd == v2 == (fd != -100)) {\n        // 0x405931\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x4058eb\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x4058f5\n            *v1 = v2;\n            int64_t result; // 0x4058d0\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x405922\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_409950(a1 + 96, fd); // 0x405904\n    uint32_t fd2 = (int32_t)result3; // 0x405909\n    if (fd2 < 0) {\n        // 0x4058f5\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x40590f\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "40599a",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x405949\n    uint32_t v2 = v1 & 4; // 0x40594e\n    if (v2 != 0) {\n        // 0x405972\n        function_405700(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x405940\n    if ((v1 & 512) == 0) {\n        // 0x405988\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x405958\n        function_4058d0(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x405972\n    function_405700(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405a0b",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x4059aa\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x4059d8\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x4059b7\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x4059bd\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x4059bd\n    if (mem != NULL) {\n        // 0x4059c7\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x4059f8\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g58 ^ (int32_t)&g58;\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405a6b",
            "decompiledFuncCode": "int64_t function_405a10(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_408f60(31, 0, 0x405310, 0x4052f0, 0x401920); // 0x405a33\n        *(int64_t *)a2 = v1;\n        // 0x405a41\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x405a4d\n    int64_t v2 = (int64_t)mem; // 0x405a4d\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x405a41\n        return 0;\n    }\n    // 0x405a5f\n    function_408590(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405ab4",
            "decompiledFuncCode": "int64_t function_405a70(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x405a8a\n    if ((a2 & 512) == 0) {\n        // 0x405aa8\n        return function_408620(a3, v1, (int32_t)v1);\n    }\n    // 0x405a98\n    return function_409fb0((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_405ac0",
            "funcStartAddr": "405ac0",
            "funcEndAddr": "405c86",
            "decompiledFuncCode": "int64_t function_405ac0(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x405acf\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x405adc\n    uint32_t v4 = *v3; // 0x405adc\n    int64_t v5 = v4; // 0x405adc\n    int32_t v6 = v4 & 4; // 0x405ae3\n    int64_t v7; // 0x405ac0\n    int64_t v8; // 0x405ac0\n    int64_t v9; // 0x405ac0\n    int64_t v10; // 0x405ac0\n    int64_t v11; // 0x405ac0\n    if (a4 == 0) {\n        goto lab_0x405b60;\n    } else {\n        // 0x405aeb\n        bool v12; // 0x405ac0\n        int64_t v13 = v12 ? -1 : 1; // 0x405af8\n        int64_t v14 = (int64_t)\"..\"; // 0x405ac0\n        int64_t v15 = v1; // 0x405ac0\n        int64_t v16 = 3; // 0x405af8\n        unsigned char v17 = *(char *)v15; // 0x405af8\n        char v18 = *(char *)v14; // 0x405af8\n        char v19 = v18; // 0x405af8\n        bool v20 = false; // 0x405af8\n        while (v17 == v18) {\n            // 0x405aeb\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x405b60;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x405bd0;\n            } else {\n                // 0x405b0b\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x405b72;\n                } else {\n                    // 0x405b13\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x405bfe;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x405b20\n                        int64_t v23 = function_409940(v22); // 0x405b2c\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x405bfe;\n                        } else {\n                            int64_t v24 = function_409990(v22); // 0x405b44\n                            if ((int32_t)v24 < 0) {\n                                // 0x405c48\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x405bfe;\n                            } else {\n                                // 0x405b54\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x405b72;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405b60:\n    if (v6 != 0) {\n        goto lab_0x405bd0;\n    } else {\n        // 0x405b64\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x405bfe;\n        } else {\n            goto lab_0x405b72;\n        }\n    }\n  lab_0x405bd0:\n    // 0x405bd0\n    if ((v5 & 512) == 0) {\n        // 0x405bdf\n        return 0;\n    }\n    int32_t fd = a3; // 0x405bd9\n    if (fd >= 0) {\n        // 0x405c38\n        close(fd);\n        // 0x405bdf\n        return 0;\n    }\n    // 0x405bdf\n    return 0;\n  lab_0x405bfe:;\n    int64_t v25 = function_405a70(*(int32_t *)(a1 + 44), v8, v1); // 0x405c08\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x405bdf\n        return 0xffffffff;\n    }\n    goto lab_0x405b72;\n  lab_0x405b72:;\n    int32_t fd2 = v7; // 0x405b77\n    int64_t v26; // bp-200, 0x405ac0\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x405b7f\n    int64_t v28 = 0xffffffff; // 0x405b88\n    if (v27 != 0) {\n        goto lab_0x405bb3;\n    } else {\n        // 0x405b8a\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x405ba3;\n        } else {\n            // 0x405b95\n            int64_t v29; // 0x405ac0\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x405c20\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x405c58\n                    function_4058d0(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x405bdf\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x405c27\n                v28 = fchdir(fd2);\n                goto lab_0x405bb3;\n            } else {\n                goto lab_0x405ba3;\n            }\n        }\n    }\n  lab_0x405bb3:\n    // 0x405bb3\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x405bb7\n        close(fd2);\n    }\n    // 0x405bdf\n    return v28 & 0xffffffff;\n  lab_0x405ba3:\n    // 0x405ba3\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x405bb3;\n}\n"
        },
        {
            "funcName": "function_405c90",
            "funcStartAddr": "405c90",
            "funcEndAddr": "405d3f",
            "decompiledFuncCode": "int64_t function_405c90(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_4085a0(a2, a3 + 120); // 0x405d18\n        if ((char)result == 0) {\n            // 0x405d01\n            return 1;\n        }\n        // 0x405d21\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x405ca7\n    if (mem == NULL) {\n        // 0x405d01\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x405ca7\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_409700(a2, v1); // 0x405cd6\n    if (v2 == v1) {\n        // 0x405d01\n        return 1;\n    }\n    // 0x405ce3\n    free(mem);\n    int64_t result2 = 0; // 0x405cee\n    if (v2 != 0) {\n        // 0x405cf0\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x405d01\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d40",
            "funcStartAddr": "405d40",
            "funcEndAddr": "405dd6",
            "decompiledFuncCode": "int64_t function_405d40(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x405d80\n        free((int64_t *)function_409740(a2));\n        return &g58;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x405d4f\n    if (result == 0) {\n        // 0x405d79\n        return 0;\n    }\n    // 0x405d58\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x405d79\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x405dbc\n    int64_t result2 = result; // 0x405dc0\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x405dc2\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x405d79\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "406793",
            "decompiledFuncCode": "int64_t function_405de0(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x405df4\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x405df8\n    int64_t dirp = *dirp2; // 0x405df8\n    int64_t v2; // 0x405de0\n    int32_t * v3; // 0x405de0\n    int64_t v4; // 0x405de0\n    int64_t v5; // 0x405de0\n    int64_t v6; // 0x405de0\n    int64_t v7; // 0x405de0\n    int64_t v8; // 0x405de0\n    int64_t v9; // 0x405de0\n    char v10; // 0x405de0\n    int64_t v11; // 0x405de0\n    int64_t v12; // 0x405de0\n    int64_t v13; // 0x406216\n    int64_t v14; // 0x405de0\n    int64_t v15; // 0x406255\n    int32_t * v16; // 0x405de0\n    int64_t v17; // 0x406262\n    int32_t v18; // 0x406266\n    if (dirp == 0) {\n        // 0x4061d0\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x4061d0\n        uint64_t v20 = (int64_t)v19; // 0x4061d0\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x4061db\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x4063b0\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x4061ef\n        int64_t v22 = 0xffffff9c; // 0x406208\n        if ((v20 & 516) == 512) {\n            // 0x40620a\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x40620e\n        v13 = function_409fb0(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x40621d\n        if (fd < 0) {\n            goto lab_0x406552;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x406227\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x40653c\n                close(fd);\n                goto lab_0x406552;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x406235\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x4065ec\n                    *v26 = (int16_t)function_405370(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x406245\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x4065a0\n                        function_405d40(v27, v28, a1);\n                        function_405370(a1, a1, 0);\n                        int64_t v29 = function_405c90(*v16, v28, a1); // 0x4065c6\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x4065d3\n                            *__errno_location() = 12;\n                          lab_0x406392:\n                            // 0x406392\n                            return 0;\n                        }\n                    }\n                }\n                // 0x406255\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x406590;\n                } else {\n                    // 0x406276\n                    if ((*v16 & 56) == 24) {\n                        // 0x4063c2\n                    } else {\n                        // 0x406286\n                        goto lab_0x406295;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x405e0a\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x40666d\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x406392\n                return 0;\n            }\n            goto lab_0x406689;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x406578\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x405e34;\n            } else {\n                goto lab_0x405e2b;\n            }\n        }\n    }\n  lab_0x406340_2:;\n    // 0x406340\n    int64_t v32; // 0x405f64\n    free((int64_t *)v32);\n    int64_t v33; // 0x405de0\n    function_4056b0(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x405de0\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x4060bc_2:;\n    // 0x4060bc\n    int64_t v35; // 0x405de0\n    int64_t v36 = v35; // 0x4060c9\n    int64_t v37; // 0x405de0\n    int64_t v38 = v37; // 0x4060c9\n    int64_t v39; // 0x405de0\n    int64_t v40 = v39; // 0x4060c9\n    char * v41; // 0x405de0\n    char * v42 = v41; // 0x4060c9\n    int64_t v43 = v35; // 0x4060c9\n    int64_t result2 = v37; // 0x4060c9\n    int64_t v44 = v39; // 0x4060c9\n    char v45; // 0x405de0\n    if (v45 == 0) {\n        goto lab_0x406411;\n    } else {\n        goto lab_0x4060cf;\n    }\n  lab_0x405f4c:;\n    // 0x405f4c\n    char * str; // 0x405de0\n    uint64_t len = (int64_t)strlen(str); // 0x405f53\n    int64_t v46; // 0x405de0\n    v32 = function_405620(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x406340_2;\n    }\n    // 0x405f75\n    int64_t v47; // 0x405de0\n    int64_t v48 = v47; // 0x405f7a\n    char v49; // 0x405de0\n    char v50 = v49; // 0x405f7a\n    int64_t v51; // 0x405de0\n    int64_t v52 = v51; // 0x405f7a\n    int64_t v53 = a1; // 0x405f7a\n    int64_t v54; // 0x405de0\n    int64_t v55; // 0x405de0\n    int64_t v56; // 0x405e82\n    int64_t * v57; // 0x405e82\n    int64_t v58; // 0x405de0\n    int64_t * v59; // 0x405de0\n    if (v51 <= len) {\n        char v60 = function_4059a0(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x406340_2;\n        }\n        int64_t v61 = *v59; // 0x406040\n        char v62 = v49; // 0x406049\n        int64_t v63 = v47; // 0x406049\n        if (v61 != *v59) {\n            // 0x40604f\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x406063\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x405f83\n    int32_t * v65; // 0x405f1a\n    if (v64 < len) {\n        // 0x406740\n        free((int64_t *)v32);\n        function_4056b0(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x406392;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x405f93\n    int64_t * v68; // 0x405e97\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x405f2b\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x405fb3\n    int32_t v71; // 0x405de0\n    if ((v70 & 4) != 0) {\n        // 0x406080\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x40608d\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x405fbe\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x405de0\n    int64_t v75; // 0x405de0\n    int64_t v76; // 0x405de0\n    int64_t v77; // 0x405de0\n    int64_t v78; // 0x405fdc\n    int64_t v79; // 0x405fdc\n    int64_t v80; // 0x405de0\n    int64_t v81; // 0x405f2b\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x4061a8\n        *(int16_t *)(v32 + 112) = (int16_t)function_405370(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x405ed7;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x405fd2\n        int64_t v83 = v82; // 0x405fda\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x405fe8;\n            } else {\n                int64_t v85 = v84; // 0x406170\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x406328\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x40618f\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x405ed0;\n            }\n        } else {\n            goto lab_0x405fe8;\n        }\n    }\n  lab_0x405ed7:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x405de0\n    v39 = v88 + 1;\n    int64_t v89; // 0x405de0\n    int64_t v90; // 0x405de0\n    int64_t v91; // 0x405de0\n    int64_t v92; // 0x405de0\n    int64_t v93; // 0x405de0\n    int64_t v94; // 0x405de0\n    char v95; // 0x405de0\n    int64_t v96; // 0x405de0\n    if (v33 == 0) {\n        // 0x4060a8\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x4060bc_2;\n        }\n    } else {\n        // 0x405eeb\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x4060bc_2;\n        }\n    }\n    goto lab_0x405f03;\n  lab_0x405fe8:\n    // 0x405fe8\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x405ffb\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x405de0\n        v75 = v167;\n    } else {\n        // 0x405ec0\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x405ed0;\n  lab_0x405f03:;\n    int64_t v97 = *dirp2; // 0x405f0d\n    int64_t dirp3 = v97; // 0x405f14\n    int64_t v98 = v91; // 0x405f14\n    int64_t v99 = v90; // 0x405f14\n    int64_t v100 = v93; // 0x405f14\n    int64_t v101 = v89; // 0x405f14\n    int64_t v102 = v92; // 0x405f14\n    char v103 = v95; // 0x405f14\n    int64_t v104 = v96; // 0x405f14\n    int64_t v105 = v96; // 0x405f14\n    char v106 = v95; // 0x405f14\n    int64_t v107 = v93; // 0x405f14\n    int64_t v108 = v90; // 0x405f14\n    if (v97 == 0) {\n        goto lab_0x406406;\n    }\n    goto lab_0x405f1a;\n  lab_0x405ed0:\n    // 0x405ed0\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x405ed7;\n  lab_0x406552:\n    // 0x406552\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x406392\n        return 0;\n    }\n    goto lab_0x406689;\n  lab_0x406689:\n    // 0x406689\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x406392\n    return 0;\n  lab_0x405e2b:\n    // 0x405e2b\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x405e34;\n  lab_0x406590:\n    // 0x406590\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x405e34;\n  lab_0x405e34:;\n    int64_t v111 = *(int64_t *)v4; // 0x405e34\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x405e4a\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x405e6b\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x405e72\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x405e82\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x405f0d\n    if (v115 == 0) {\n        // 0x405e82\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x406411;\n    } else {\n        // 0x405f1a\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x405f1a:\n            // 0x405f1a\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x4064f0\n                break;\n            }\n            // 0x405f3c\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x405f4c;\n            } else {\n                // 0x405f42\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x406150\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x405f03;\n                    } else {\n                        // 0x406156\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x405f4c;\n                        } else {\n                            goto lab_0x405f03;\n                        }\n                    }\n                } else {\n                    goto lab_0x405f4c;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x4064f0\n        if (v116 != 0) {\n            // 0x406500\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x40651d\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x40652a\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x406406:\n        // 0x406406\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x4060cf;\n        } else {\n            goto lab_0x406411;\n        }\n    }\n  lab_0x406295:;\n    int64_t v117 = v13 & 0xffffffff; // 0x40621b\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x40629a\n    int16_t * v121; // 0x405de0\n    int16_t v122; // 0x405de0\n    int64_t v123; // 0x405de0\n    int64_t v124; // 0x405de0\n    int64_t v125; // 0x405de0\n    int64_t v126; // 0x405de0\n    int64_t v127; // 0x405de0\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_40a450(v117, 1030, 3, v5); // 0x406611\n        int64_t v129 = v128 & 0xffffffff; // 0x406616\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x4062a0;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x406625\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x4062cd;\n            } else {\n                // 0x40663a\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x40630f;\n            }\n        }\n    } else {\n        goto lab_0x4062a0;\n    }\n  lab_0x406411:\n    // 0x406411\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x40641d\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x406436\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x4064a8;\n    } else {\n        // 0x406445\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x406488\n            int64_t v133; // 0x405de0\n            if (*v68 != 0) {\n                int64_t v134 = function_405ac0(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x40665e\n                v133 = v134;\n            } else {\n                // 0x406493\n                v133 = function_405940(a1);\n            }\n            // 0x4064a0\n            if ((int32_t)v133 != 0) {\n                // 0x4066a4\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x4066b3\n                *v135 = *v135 | 0x4000;\n                function_4056b0(result2);\n                // 0x406392\n                return 0;\n            }\n            goto lab_0x4064a8;\n        } else {\n            goto lab_0x406451;\n        }\n    }\n  lab_0x4060cf:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x4060cf\n    int64_t v137 = *v59; // 0x4060d3\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x4060e0\n        int64_t v139 = *v138; // 0x4060e0\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x4060f0\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x4060fb\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x4060ff\n        int64_t v142 = v141; // 0x406106\n        while (v141 != 0) {\n            // 0x4060e0\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x4060f0\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x4060fb\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x406108\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x40611e\n        int64_t v144 = *v143; // 0x40611e\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x40612e\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x406139\n        *v145 = v137;\n        int64_t v147 = v146; // 0x406144\n        if (v146 == 0) {\n            // 0x406146\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x406110\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x40612e\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x406139\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x406146\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x406110\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x406411;\n  lab_0x4062a0:;\n    int64_t v149 = function_405ac0(a1, a1, v120, 0); // 0x4062aa\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x405de0\n    int16_t v151; // 0x405de0\n    int64_t v152; // 0x405de0\n    int64_t dirp6; // 0x405de0\n    int64_t v153; // 0x405de0\n    if ((int32_t)v149 == 0) {\n        goto lab_0x405e2b;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x4062bc\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x4062e2;\n        } else {\n            goto lab_0x4062cd;\n        }\n    }\n  lab_0x4064a8:\n    // 0x4064a8\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x4064b8\n            function_4056b0(result2);\n            // 0x406392\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x406718\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x4064b8\n                function_4056b0(result2);\n                // 0x406392\n                return 0;\n            }\n        }\n        // 0x406731\n        *v157 = 6;\n        // 0x4064b8\n        function_4056b0(result2);\n        // 0x406392\n        return 0;\n    }\n    goto lab_0x406451;\n  lab_0x406451:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x406451\n    int64_t v159 = *v158; // 0x406451\n    int64_t v160 = v159; // 0x40645c\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x406467\n            uint64_t v161; // 0x405de0\n            int64_t v162; // 0x405de0\n            return function_405520(a1, v162, v161);\n        }\n        // 0x4066ce\n        int64_t v163; // 0x405de0\n        switch (function_405740(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x4064d0\n                v160 = *v158;\n                // break -> 0x4064d8\n                break;\n            }\n            default: {\n                // 0x4066ee\n                *v158 = 0x405340;\n                int64_t result = function_405520(a1, result2, v44); // 0x406701\n                *v158 = 0;\n                // 0x406392\n                return result;\n            }\n        }\n    }\n    // 0x4064d8\n    if (v44 == 1 || v160 == 0) {\n        // 0x406392\n        return result2;\n    }\n    // 0x406467\n    return function_405520(a1, result2, v44);\n  lab_0x4062cd:\n    // 0x4062cd\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x4062e2;\n  lab_0x4062e2:\n    // 0x4062e2\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x4062ec\n    int64_t v165 = v164; // 0x4062ec\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x406300\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x406304\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x40630f;\n  lab_0x40630f:\n    // 0x40630f\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x405e34;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "4067a0",
            "funcEndAddr": "406b39",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x406a40\n        *__errno_location() = 22;\n        // 0x406a2d\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x4067e8\n    int64_t result = (int64_t)mem; // 0x4067e8\n    if (mem == NULL) {\n        // 0x406a2d\n        return result;\n    }\n    // 0x4067f9\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x406a80\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x406807\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x40680e\n    *v2 = -100;\n    int64_t v3 = a1; // 0x406824\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x406828\n    int64_t v5 = v4 < len ? len : v4; // 0x406830\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x406838\n    while (str != 0) {\n        // 0x406828\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x406840\n    int64_t v7 = result + 32; // 0x406859\n    char v8 = function_4059a0(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x406862\n    if (v8 == 0) {\n        // 0x406a6b\n        free(mem);\n        // 0x406a2d\n        return 0;\n    }\n    int64_t v9; // 0x4067a0\n    int64_t v10; // 0x4067a0\n    int64_t v11; // 0x4067a0\n    char v12; // 0x4067a0\n    char * v13; // 0x4067a0\n    char * v14; // 0x40688d\n    if (v7 == 0) {\n        // 0x406a90\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x4068b3;\n        } else {\n            goto lab_0x4069dc;\n        }\n    } else {\n        int64_t v15 = function_405620(result, (int64_t)&g10, 0); // 0x406885\n        if (v15 == 0) {\n            goto lab_0x406a62;\n        } else {\n            // 0x40689b\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x4068c0;\n            } else {\n                goto lab_0x4068b3;\n            }\n        }\n    }\n  lab_0x406958:;\n    // 0x406958\n    int64_t v16; // 0x4067a0\n    int64_t v17; // 0x4068f9\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x4067a0\n    int64_t v19 = v18; // 0x40695c\n    int64_t v20 = v17; // 0x40695c\n    goto lab_0x40695f;\n  lab_0x40695f:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x4067a0\n    int64_t v23 = v22 + 1; // 0x40695f\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x406963\n    int64_t v25 = v19; // 0x40696b\n    int64_t v26 = v23; // 0x40696b\n    int64_t v27 = v21; // 0x40696b\n    int64_t v28 = v24; // 0x40696b\n    if (v24 == 0) {\n        // 0x4069c0\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x4069dc;\n        } else {\n            // 0x4069cb\n            v13 = v14;\n            v9 = function_405520(result, v21, v23);\n            goto lab_0x4069dc;\n        }\n    }\n    goto lab_0x40696d;\n  lab_0x406af0:\n    // 0x406af0\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x40695f;\n  lab_0x4068b3:\n    // 0x4068b3\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x4068c0;\n  lab_0x4069dc:;\n    int64_t v35 = function_405620(result, (int64_t)&g10, 0); // 0x4069e6\n    *mem = v35;\n    char * v33 = v13; // 0x4069f1\n    int64_t v34 = v9; // 0x4069f1\n    if (v35 != 0) {\n        // 0x4069f3\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x4069fc\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_405a10(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x406a10\n            if ((v37 & 516) == 0) {\n                int32_t v38 = function_405a70(*v2, (int64_t)v37, (int64_t)\".\"); // 0x406b25\n                *(int32_t *)(result + 40) = v38;\n                if (v38 < 0) {\n                    int32_t v39 = *v36; // 0x406b30\n                    *v36 = v39 | 4;\n                }\n            }\n            // 0x406a1f\n            function_409920(result + 96, 0xffffffff);\n            // 0x406a2d\n            return result;\n        }\n    }\n    goto lab_0x406a50;\n  lab_0x406a62:\n    // 0x406a62\n    free((int64_t *)*(int64_t *)v7);\n    // 0x406a6b\n    free(mem);\n    // 0x406a2d\n    return 0;\n  lab_0x4068c0:\n    // 0x4068c0\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x4069dc;\n    } else {\n        // 0x40696d\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x40696d:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x406970\n            int64_t v29 = len2; // 0x406970\n            int64_t v30 = v29; // 0x406979\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x40698a\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x4069ac\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x4068f0\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x4068f0\n            v17 = function_405620(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x406a50\n                break;\n            }\n            // 0x40690a\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x406ab0\n                *(int16_t *)(v17 + 112) = (int16_t)function_405370(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x406958;\n                } else {\n                    // 0x406acb\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x406af0;\n                    } else {\n                        goto lab_0x40695f;\n                    }\n                }\n            } else {\n                // 0x40693a\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x406ae8\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x406af0;\n                } else {\n                    goto lab_0x406958;\n                }\n            }\n        }\n        goto lab_0x406a50;\n    }\n  lab_0x406a50:\n    // 0x406a50\n    function_4056b0(v34);\n    free((int64_t *)v33);\n    goto lab_0x406a62;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "406b40",
            "funcEndAddr": "406cb9",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x406b54\n        int64_t v2 = a1; // 0x406b54\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x406b6f\n                int64_t v5; // 0x406b40\n                if (v4 != 0) {\n                    // 0x406b60\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x406b8b\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x406b78\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x406b8b\n                        break;\n                    }\n                }\n                // 0x406b6f\n                v1 = v5;\n            }\n        }\n        // 0x406b8b\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x406b93\n    if (v7 != 0) {\n        // 0x406b9c\n        function_4056b0(v7);\n    }\n    // 0x406ba1\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x406bb3\n    int32_t v9 = *v8; // 0x406bb3\n    int32_t * v10; // 0x406b40\n    int32_t v11; // 0x406b40\n    if ((v9 & 512) == 0) {\n        // 0x406c10\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x406bc4;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x406c14\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x406c70\n                int32_t v13 = *v12; // 0x406c7b\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x406bc4;\n                } else {\n                    goto lab_0x406c92;\n                }\n            } else {\n                // 0x406c20\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x406bc4;\n                } else {\n                    // 0x406c2c\n                    v10 = __errno_location();\n                    goto lab_0x406c92;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x406bbb\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x406c40\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x406c4d\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x406bc4;\n    }\n  lab_0x406bc4:\n    // 0x406bc4\n    function_405700(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x406bcd\n    if (v14 != 0) {\n        // 0x406bd6\n        function_4091a0(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x406bdb\n    if ((*v8 & 258) == 0) {\n        // 0x406c60\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x406bed\n            function_4091a0(v15);\n        }\n    }\n    // 0x406bf2\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x406bfc\n    if (v11 != 0) {\n        // 0x406ca8\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x406c02\n    return result;\n  lab_0x406c92:\n    // 0x406c92\n    v11 = *v10;\n    goto lab_0x406bc4;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "406cc0",
            "funcEndAddr": "407419",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x406cc0\n    if (result == 0) {\n        // 0x406dea\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x406cd4\n    uint32_t v2 = *v1; // 0x406cd4\n    if ((v2 & 0x4000) != 0) {\n        // 0x406dea\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x406ce0\n    int16_t v4 = *v3; // 0x406ce0\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x4070b0\n        *(int16_t *)(result + 112) = (int16_t)function_405370(result, result, 0);\n        // 0x406dea\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x406cfa\n    int16_t v6 = *v5; // 0x406cfa\n    int64_t v7; // 0x406cc0\n    int64_t v8; // 0x406cc0\n    int64_t v9; // 0x406cc0\n    int64_t v10; // 0x406cc0\n    int64_t v11; // 0x406cc0\n    int64_t v12; // 0x406cc0\n    int64_t v13; // 0x406cc0\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_405370(result, result, 1); // 0x40705a\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x407340\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x407340\n                    int32_t v17 = *(int32_t *)(result + 44); // 0x4073b3\n                    int32_t v18 = function_405a70(v17, v16, (int64_t)\".\"); // 0x4073c2\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x4073ee\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x406dea\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x4073c9\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = (int64_t)\".\";\n                    v12 = v16;\n                    goto lab_0x406ff7;\n                } else {\n                    // 0x40734b\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x40700e;\n                }\n            } else {\n                // 0x407068\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x406dea\n                    return result;\n                }\n                goto lab_0x407080;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x406d40;\n            } else {\n                goto lab_0x406e17;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x406d40;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x406e17;\n            } else {\n                goto lab_0x406eb2;\n            }\n        }\n    }\n  lab_0x406d40:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x406d40\n    int64_t result2; // 0x406cc0\n    int64_t v24; // 0x406cc0\n    int64_t v25; // 0x406f10\n    while (v23 != 0) {\n        // 0x406d18\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x406f00\n            if ((int32_t)function_405940(result) != 0) {\n                // 0x40729f\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x406f10\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x406f10\n                if ((*v1 & 258) == 0) {\n                    // 0x4072ad\n                    free((int64_t *)v26);\n                    goto lab_0x406f2e;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x406f2e;\n                    } else {\n                        // 0x406f29\n                        function_4091a0(v26);\n                        goto lab_0x406f2e;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x406d2f\n        if (v28 != 4) {\n            // 0x406fb0\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_405370(result, v23, 1); // 0x4072d4\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x4072d4\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x407357\n                    if ((v31 & 4) != 0) {\n                        // 0x4072de\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x406fba;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x407366\n                        int32_t v33 = function_405a70(v32, (int64_t)v31, (int64_t)\".\"); // 0x407375\n                        *(int32_t *)(v23 + 68) = v33;\n                        if (v33 < 0) {\n                            int32_t v34 = *__errno_location(); // 0x40740b\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v34;\n                            // 0x4072de\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x406fba;\n                        } else {\n                            int16_t * v35 = (int16_t *)(v23 + 114); // 0x407380\n                            *v35 = *v35 | 2;\n                            // 0x4072de\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x406fba;\n                        }\n                    }\n                } else {\n                    // 0x4072de\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x406fba;\n                }\n            } else {\n                goto lab_0x406fba;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v36 = (int64_t *)(v22 + 8); // 0x406d49\n    int64_t v37 = *v36; // 0x406d49\n    int64_t result6 = v37; // 0x406d52\n    if (*(int64_t *)(v37 + 24) != 0) {\n        // 0x407260\n        *v21 = v37;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v37 + 72)) = 0;\n        int64_t v38 = function_405de0(result, 3); // 0x407279\n        if (v38 != 0) {\n            // 0x40730f\n            free((int64_t *)v22);\n            v24 = v38;\n            goto lab_0x406fba;\n        } else {\n            // 0x40728a\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x406dea\n                return 0;\n            }\n            // 0x407296\n            result6 = *v36;\n            goto lab_0x406d58;\n        }\n    } else {\n        goto lab_0x406d58;\n    }\n  lab_0x406e17:;\n    int64_t v39 = v2; // 0x406cd4\n    if ((v39 & 64) == 0) {\n        goto lab_0x406e2b;\n    } else {\n        // 0x406e1c\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x406eb2;\n        } else {\n            goto lab_0x406e2b;\n        }\n    }\n  lab_0x406d58:\n    // 0x406d58\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v40 = (int64_t *)(result6 + 88); // 0x406d64\n    if (*v40 == -1) {\n        // 0x40717f\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x406dea\n        return 0;\n    }\n    // 0x406d6f\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v40 == 0) {\n        // 0x4071af\n        if ((int32_t)function_405940(result) == 0) {\n            goto lab_0x406da6;\n        } else {\n            goto lab_0x4071bf;\n        }\n    } else {\n        uint16_t v41 = *(int16_t *)(result6 + 114); // 0x406d92\n        if ((v41 & 2) != 0) {\n            int32_t v42 = *v1; // 0x407135\n            int32_t * v43 = (int32_t *)(result6 + 68); // 0x40713a\n            uint32_t fd = *v43; // 0x40713a\n            int32_t fd2 = fd; // 0x40713f\n            if ((v42 & 4) == 0) {\n                if ((v42 & 512) == 0) {\n                    // 0x40731c\n                    if (fchdir(fd) != 0) {\n                        // 0x407325\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x407338\n                    fd2 = *v43;\n                } else {\n                    // 0x40714a\n                    function_4058d0(result, (int64_t)fd, 1);\n                    fd2 = *v43;\n                }\n            }\n            // 0x40715c\n            close(fd2);\n            goto lab_0x406da6;\n        } else {\n            if (v41 % 2 == 0) {\n                int64_t v44 = *(int64_t *)(result6 + 8); // 0x4072ec\n                if ((int32_t)function_405ac0(result, v44, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x406da6;\n                } else {\n                    goto lab_0x4071bf;\n                }\n            } else {\n                goto lab_0x406da6;\n            }\n        }\n    }\n  lab_0x406eb2:\n    // 0x406eb2\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x4072b7\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v45 = (int64_t *)(result + 8); // 0x406ebc\n    int64_t v46 = *v45; // 0x406ebc\n    if (v46 != 0) {\n        // 0x406ec6\n        function_4056b0(v46);\n        *v45 = 0;\n    }\n    // 0x406ed4\n    *v5 = 6;\n    function_405d40(*v1, result + 88, result);\n    // 0x406dea\n    return result;\n  lab_0x407080:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x40708b\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x406dea\n        return result3;\n    }\n    int64_t v47 = *(int64_t *)(result5 + 8); // 0x4071e7\n    int64_t * v48 = (int64_t *)(v47 + 104); // 0x4071eb\n    int64_t v49; // 0x406cc0\n    int64_t v50; // 0x406cc0\n    if (*v48 != 0) {\n        goto lab_0x407203;\n    } else {\n        // 0x4071f2\n        if ((*v1 & 24) == 24) {\n            // 0x407399\n            if ((int32_t)function_405860(v47, v13, v11) != 2) {\n                goto lab_0x407203;\n            } else {\n                // 0x4073aa\n                v49 = (int64_t)*(int16_t *)(result5 + 112);\n                v50 = result5;\n                goto lab_0x407001;\n            }\n        } else {\n            goto lab_0x407203;\n        }\n    }\n  lab_0x406e2b:;\n    int64_t * v51 = (int64_t *)(result + 8); // 0x406e2b\n    int64_t v52 = *v51; // 0x406e2b\n    int64_t v53; // 0x406cc0\n    if (v52 == 0) {\n        goto lab_0x4070d9;\n    } else {\n        if ((v39 & 0x2000) != 0) {\n            // 0x4070c3\n            *v1 = v2 & -0x2001;\n            function_4056b0(v52);\n            *v51 = 0;\n            goto lab_0x4070d9;\n        } else {\n            int64_t v54 = *(int64_t *)(result + 48); // 0x406e42\n            if ((int32_t)function_405ac0(result, result, 0xffffffff, (int32_t)v54) == 0) {\n                // 0x407166\n                v53 = *v51;\n            } else {\n                int32_t * v55 = __errno_location(); // 0x406e5e\n                int64_t v56 = *v51; // 0x406e63\n                int16_t * v57 = (int16_t *)(result + 114); // 0x406e6a\n                *v57 = *v57 | 1;\n                *(int32_t *)(result + 64) = *v55;\n                v53 = 0;\n                if (v56 != 0) {\n                    *(int64_t *)(v56 + 48) = *(int64_t *)(*(int64_t *)(v56 + 8) + 48);\n                    int64_t v58 = *(int64_t *)(v56 + 16); // 0x406e8c\n                    int64_t v59 = v58; // 0x406e93\n                    v53 = v56;\n                    while (v58 != 0) {\n                        int64_t v60 = *(int64_t *)(*(int64_t *)(v59 + 8) + 48); // 0x406e84\n                        *(int64_t *)(v59 + 48) = v60;\n                        v58 = *(int64_t *)(v59 + 16);\n                        v59 = v58;\n                        v53 = v56;\n                    }\n                }\n            }\n            goto lab_0x406e95;\n        }\n    }\n  lab_0x406ff7:;\n    uint16_t v61 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v49 = v61;\n    v50 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v61 == 11) {\n        goto lab_0x407080;\n    } else {\n        goto lab_0x407001;\n    }\n  lab_0x40700e:;\n    int64_t v62 = v8; // 0x407013\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x40701e;\n    } else {\n        goto lab_0x407015;\n    }\n  lab_0x407203:;\n    int64_t v63 = function_405370(result, result5, 0); // 0x40720b\n    int16_t v64 = v63; // 0x407216\n    *(int16_t *)(result5 + 112) = v64;\n    v49 = v63;\n    v50 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x407001;\n    } else {\n        // 0x40722c\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x40738a\n            result3 = result5;\n            if (v64 != 1) {\n                int64_t v65 = result3;\n                result2 = v65;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x407015;\n        } else {\n            uint64_t v66 = *v48 - 1; // 0x40723b\n            if (v66 < 0xfffffffffffffffe) {\n                // 0x4073da\n                *v48 = v66;\n            }\n            // 0x407249\n            v62 = result5;\n            if (v64 != 1) {\n                // 0x406dea\n                return result5;\n            }\n            goto lab_0x40701e;\n        }\n    }\n  lab_0x4070d9:;\n    int64_t v67 = function_405de0(result, 3); // 0x4070e1\n    *v51 = v67;\n    v53 = v67;\n    if (v67 == 0) {\n        int32_t v68 = *v1; // 0x4070f7\n        if ((v68 & 0x4000) != 0) {\n            // 0x406dea\n            return 0;\n        }\n        // 0x407108\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x407123\n            function_405d40(v68, result + 88, result);\n            result2 = result;\n          lab_0x406dea:\n            // 0x406dea\n            return result2;\n        }\n        // 0x407111\n        if (*v5 != 4) {\n            // 0x407118\n            *v5 = 7;\n        }\n        // 0x407123\n        function_405d40(v68, result + 88, result);\n        // 0x406dea\n        return result;\n    }\n    goto lab_0x406e95;\n  lab_0x406fba:;\n    int64_t v69 = *(int64_t *)(v24 + 8); // 0x406fba\n    int64_t v70 = *(int64_t *)(v69 + 72); // 0x406fbe\n    char v71 = *(char *)(v70 - 1 + *(int64_t *)(v69 + 56)); // 0x406fca\n    int64_t v72 = *(int64_t *)(result + 32) + v70 + (int64_t)(v71 == 47); // 0x406fd3\n    *(char *)v72 = 47;\n    int64_t v73 = *(int64_t *)(v24 + 96) + 1; // 0x406fe3\n    int64_t v74 = v24 + 264; // 0x406fe7\n    memmove((int64_t *)(v72 + 1), (int64_t *)v74, (int32_t)v73);\n    v7 = v24;\n    v10 = v73;\n    v12 = v74;\n    goto lab_0x406ff7;\n  lab_0x406da6:;\n    int64_t v75 = (int64_t)*v1; // 0x406dab\n    int64_t v76 = v75; // 0x406db0\n    int32_t * v77; // 0x406cc0\n    int64_t v78; // 0x406cc0\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x406dd8;\n    } else {\n        // 0x406da6\n        v77 = (int32_t *)(result6 + 64);\n        v78 = v75;\n        goto lab_0x406db2;\n    }\n  lab_0x4071bf:;\n    int32_t v79 = *__errno_location(); // 0x4071c4\n    int32_t * v80 = (int32_t *)(result6 + 64);\n    *v80 = v79;\n    uint32_t v81 = *v1 | 0x4000; // 0x4071c9\n    *v1 = v81;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x406dea\n        return 0;\n    }\n    // 0x4071dd\n    v77 = v80;\n    v78 = v81;\n    goto lab_0x406db2;\n  lab_0x407001:\n    // 0x407001\n    result2 = v50;\n    v8 = v50;\n    if ((int16_t)v49 != 1) {\n        // 0x406dea\n        return result2;\n    }\n    goto lab_0x40700e;\n  lab_0x40701e:;\n    int64_t v93 = function_405c90(*v1, result + 88, v62); // 0x40702e\n    result2 = v62;\n    if ((char)v93 == 0) {\n        // 0x40703b\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x406dea\n    return result2;\n  lab_0x407015:\n    // 0x407015\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v62 = v8;\n    goto lab_0x40701e;\n  lab_0x406e95:\n    // 0x406e95\n    *v51 = 0;\n    v24 = v53;\n    goto lab_0x406fba;\n  lab_0x406dd8:\n    // 0x406dd8\n    if ((v76 & 0x4000) != 0) {\n        // 0x406dea\n        return 0;\n    }\n    // 0x406dea\n    return result6;\n  lab_0x406db2:\n    // 0x406db2\n    if (*v77 != 0) {\n        // 0x4071a1\n        int64_t v82; // 0x406cc0\n        *(int16_t *)(v82 + 112) = 7;\n        int64_t v83; // 0x406cc0\n        v76 = v83;\n    } else {\n        // 0x406dbd\n        *(int16_t *)(result6 + 112) = 6;\n        function_405d40((int32_t)v78, result + 88, result6);\n        v76 = (int64_t)*v1;\n    }\n    goto lab_0x406dd8;\n  lab_0x406f2e:;\n    int64_t * v84 = (int64_t *)(v23 + 96); // 0x406f2e\n    int64_t v85 = *v84; // 0x406f2e\n    int64_t str = v23 + 264; // 0x406f32\n    int64_t * v86 = (int64_t *)(result + 32); // 0x406f39\n    *(int64_t *)(v23 + 72) = v85;\n    int64_t v87 = v85 + 1; // 0x406f45\n    int64_t * v88 = (int64_t *)str; // 0x406f49\n    memmove((int64_t *)*v86, v88, (int32_t)v87);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x406f56\n    int64_t v89 = v87; // 0x406f5e\n    int64_t v90; // 0x406f56\n    if (found_char_pos == NULL) {\n        goto lab_0x406f8b;\n    } else {\n        // 0x406f60\n        v90 = (int64_t)found_char_pos;\n        if (str == v90) {\n            // 0x407170\n            v89 = v87;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x406f8b;\n            } else {\n                goto lab_0x406f69;\n            }\n        } else {\n            goto lab_0x406f69;\n        }\n    }\n  lab_0x406f8b:;\n    int64_t v91 = *v86; // 0x406f8b\n    *(int64_t *)(v23 + 56) = v91;\n    *(int64_t *)(v23 + 48) = v91;\n    function_405a10(*v1, v25);\n    v7 = v23;\n    v10 = v89;\n    v12 = v25;\n    goto lab_0x406ff7;\n  lab_0x406f69:;\n    int64_t str2 = v90 + 1; // 0x406f69\n    int64_t len = strlen((char *)str2); // 0x406f70\n    int64_t v92 = len + 1; // 0x406f7e\n    memmove(v88, (int64_t *)str2, (int32_t)v92);\n    *v84 = len;\n    v89 = v92;\n    goto lab_0x406f8b;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "407420",
            "funcEndAddr": "407449",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x407425\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x407430\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "407450",
            "funcEndAddr": "4075bd",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x40745d\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x407548\n        *v1 = 22;\n        return 0;\n    }\n    // 0x407471\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x40747a\n    if ((*v2 & 64) != 0) {\n        // 0x4074ef\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x407484\n    if (v3 == 9) {\n        // 0x407570\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x407494\n    if (v3 != 1) {\n        // 0x4074ef\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x40749c\n    int64_t v5 = *v4; // 0x40749c\n    if (v5 != 0) {\n        // 0x4074a5\n        function_4056b0(v5);\n    }\n    int64_t v6 = 1; // 0x4074b6\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x4074b8\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x4074c5\n    int64_t result; // 0x4074e6\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x4074e0\n        result = function_405de0(a1, v6);\n        *v4 = result;\n        // 0x4074ef\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x4074d7\n    if ((v8 & 4) != 0) {\n        // 0x4074e0\n        result = function_405de0(a1, v6);\n        *v4 = result;\n        // 0x4074ef\n        return result;\n    }\n    int64_t v9 = function_405a70(*(int32_t *)(a1 + 44), (int64_t)v8, (int64_t)\".\"); // 0x407508\n    int32_t fd = v9; // 0x40750f\n    if (fd < 0) {\n        // 0x407598\n        *v4 = 0;\n        // 0x4074ef\n        return 0;\n    }\n    // 0x407517\n    *v4 = function_405de0(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x407580\n        function_4058d0(a1, v9 & 0xffffffff, 1);\n        // 0x4074ef\n        return *v4;\n    }\n    // 0x40752c\n    if (fchdir(fd) == 0) {\n        // 0x407537\n        close(fd);\n        // 0x4074ef\n        return *v4;\n    }\n    // 0x4075a7\n    close(fd);\n    // 0x4074ef\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4075c0",
            "funcStartAddr": "4075c0",
            "funcEndAddr": "40769f",
            "decompiledFuncCode": "int64_t function_4075c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4075cc\n    uint32_t v2 = *v1; // 0x4075cc\n    int64_t v3 = a2 & 0xffffffff; // 0x4075d1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4075d4\n    uint64_t v5 = (int64_t)*v4; // 0x4075d4\n    int64_t v6; // 0x407642\n    if (v3 <= v5) {\n      lab_0x40763c_2:\n        // 0x40763c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4075c2\n    int64_t v8 = v2; // 0x4075c0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40763c\n        goto lab_0x40763c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4075f8\n    int64_t v17; // 0x407606\n    int64_t * v18; // 0x407620\n    int64_t * v19; // 0x407623\n    int64_t v20; // 0x40762e\n    int64_t v21; // 0x407606\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407603\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407620\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407637\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40763c\n            goto lab_0x40763c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40763c\n            goto lab_0x40763c_2;\n        }\n        // 0x4075f2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40767b\n    int64_t * v23 = (int64_t *)v22; // 0x407680\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x407683\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x407680\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x407697\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4075ed\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40763c\n            goto lab_0x40763c_2;\n        }\n        // 0x4075f2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407603\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407620\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407637\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40763c\n                goto lab_0x40763c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40763c\n                goto lab_0x40763c_2;\n            }\n            // 0x4075f2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x407660\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x407680\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x407697\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40763c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4076a0",
            "funcStartAddr": "4076a0",
            "funcEndAddr": "407cbc",
            "decompiledFuncCode": "int64_t function_4076a0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4076bf\n    int64_t v2 = *v1; // 0x4076bf\n    char * str2 = (char *)v2; // 0x4076cc\n    char c = *str2; // 0x4076cc\n    int64_t v3 = v2; // 0x4076f8\n    int64_t v4 = 0; // 0x4076a0\n    int32_t v5; // 0x4076a0\n    int64_t v6; // 0x4076a0\n    int64_t v7; // 0x4076a0\n    int64_t v8; // 0x4076a0\n    int64_t v9; // 0x4076a0\n    int64_t v10; // 0x4076a0\n    int64_t v11; // 0x4076a0\n    int64_t v12; // 0x4076a0\n    int64_t v13; // 0x4076a0\n    int64_t str3; // 0x4076a0\n    int64_t v14; // 0x4076a0\n    int64_t v15; // 0x4076a0\n    int64_t v16; // 0x4076a0\n    int64_t v17; // 0x4076a0\n    int32_t v18; // 0x4076a0\n    int32_t v19; // 0x4076a0\n    int32_t v20; // 0x4076a0\n    int32_t v21; // 0x4076a0\n    int32_t v22; // 0x4076a0\n    int32_t v23; // 0x4076a0\n    int32_t v24; // 0x4076a0\n    int32_t v25; // 0x4076a0\n    int32_t v26; // 0x4076a0\n    int32_t v27; // 0x4076a0\n    int32_t v28; // 0x4076a0\n    int32_t v29; // 0x4076a0\n    int64_t nmemb; // 0x4076a0\n    int64_t v30; // 0x4076a0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4076fc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4076f8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407708\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40770e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4076d8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40773c\n                int64_t v34; // 0x4076a0\n                int64_t v35; // 0x4076a0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407745\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4078c0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x407756\n                int64_t v37 = *(int64_t *)v36; // 0x40775a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407730\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407745\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4078c0;\n                        }\n                    }\n                    // 0x407756\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4077a6:\n                    // 0x4077a6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407800;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x407970\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407800;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x407920\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4077ca;\n                                } else {\n                                    // 0x40792c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4077ca;\n                                    } else {\n                                        // 0x40793a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4077ca;\n                                        } else {\n                                            goto lab_0x407800;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4077ca;\n                            }\n                        }\n                    }\n                }\n              lab_0x407811:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4079e6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x407b92\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x407bb2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x407bff\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x407c19\n                            int64_t v45; // 0x407c1b\n                            if (*(char *)v42 != 0) {\n                                // 0x407c1b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x407c13\n                            while (v17 + nmemb != v42) {\n                                // 0x407c15\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x407c1b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x407c08\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x407c40\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x4079f4\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x407b4f\n                        free((int64_t *)v17);\n                    }\n                    // 0x407a49\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x407a60\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40790e\n                    return 63;\n                }\n                // 0x407830\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4078b4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4078c0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4078d0\n                    uint32_t v50 = *v49; // 0x4078d0\n                    int64_t v51 = v50; // 0x4078d0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4078da\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4078e3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x407b0f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x407aba\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40790e\n                            return 63;\n                        }\n                        // 0x407958\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x407c6f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x407b6d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x407b80\n                                // 0x40790e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x407a7e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x407a92\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4078fb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4078fe\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407902\n                    int64_t result = v59; // 0x407908\n                    if (v58 != 0) {\n                        // 0x40790a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40790e\n                    return result;\n                }\n            } else {\n                // 0x40770e\n                v5 = v32;\n            }\n            // break -> 0x407835\n            break;\n        }\n    }\n    // 0x407835\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40784d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x407857\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40790e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x407999\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x407886\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x407896\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407800:\n    // 0x407800\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407800\n    int64_t v63 = *(int64_t *)v62; // 0x407804\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407811\n        goto lab_0x407811;\n    }\n    goto lab_0x4077a6;\n  lab_0x4077ca:\n    // 0x4077ca\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4076a0\n    int32_t v65; // 0x4076a0\n    int32_t v66; // 0x4076a0\n    if (v27 != 0) {\n        goto lab_0x407800;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x407980\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407800;\n            } else {\n                goto lab_0x4077f1;\n            }\n        } else {\n            // 0x4077e5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x407adc\n                int64_t v67 = (int64_t)mem; // 0x407adc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407800;\n                } else {\n                    // 0x407aef\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4077f1;\n                }\n            } else {\n                goto lab_0x4077f1;\n            }\n        }\n    }\n  lab_0x4077f1:\n    // 0x4077f1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407800;\n}\n"
        },
        {
            "funcName": "function_407cc0",
            "funcStartAddr": "407cc0",
            "funcEndAddr": "408286",
            "decompiledFuncCode": "int64_t function_407cc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407ce1\n    if (v3 < 1) {\n        // 0x407e9e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x407cdd\n    int32_t v5 = *(int32_t *)a7; // 0x407ce9\n    uint64_t v6 = a1 & 0xffffffff; // 0x407ceb\n    int64_t v7 = v2; // 0x407cf0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x407cf3\n    *v8 = 0;\n    int64_t v9; // 0x407cc0\n    int64_t v10; // 0x407cc0\n    int64_t v11; // 0x407cc0\n    int64_t v12; // 0x407cc0\n    int64_t str; // 0x407cc0\n    int64_t v13; // 0x407cc0\n    int64_t v14; // 0x407cc0\n    int64_t v15; // 0x407cc0\n    int64_t v16; // 0x407cc0\n    int64_t v17; // 0x407cc0\n    int32_t v18; // 0x407cc0\n    char v19; // 0x407cc0\n    if (v5 == 0) {\n        // 0x407ed8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x407d0a;\n    } else {\n        // 0x407d03\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x407d50\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x407d53\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x407e18;\n            } else {\n                int64_t v22 = v7 + 1; // 0x407d66\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x407d76\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x407e2c;\n                } else {\n                    goto lab_0x407d88;\n                }\n            }\n        } else {\n            goto lab_0x407d0a;\n        }\n    }\n  lab_0x407d0a:\n    // 0x407d0a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x407d10\n    *v24 = 0;\n    int64_t v25; // 0x407cc0\n    int64_t v26; // 0x407cc0\n    int64_t v27; // 0x407cc0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x407e00\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407e0d;\n        }\n        case 43: {\n            // 0x408110\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407e0d;\n        }\n        default: {\n            // 0x407d2c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40808f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4081a8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x407e0d;\n                } else {\n                    // 0x40809d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x407d3a;\n                }\n            } else {\n                goto lab_0x407d3a;\n            }\n        }\n    }\n  lab_0x407e18:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x407e1f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x407d88;\n    } else {\n        goto lab_0x407e2c;\n    }\n  lab_0x407d3a:\n    // 0x407d3a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x407e0d;\n  lab_0x407e0d:\n    // 0x407e0d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x407e18;\n  lab_0x407d88:;\n    uint32_t v30 = *(int32_t *)a7; // 0x407d88\n    int64_t v31 = v30; // 0x407d88\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x407d8a\n    if ((int64_t)*v32 > v31) {\n        // 0x407d8f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x407d92\n    if (*v33 > v30) {\n        // 0x407d97\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x407d9a\n    int64_t v35 = v31; // 0x407d9e\n    int64_t v36 = v15; // 0x407d9e\n    int64_t v37; // 0x407cc0\n    int64_t v38; // 0x407cc0\n    int64_t v39; // 0x407cc0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x407f08\n        int64_t v41 = v40; // 0x407f08\n        v2 = v41;\n        int64_t v42; // 0x407cc0\n        if (*v33 == v40) {\n            // 0x4080f0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4080f8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x407f14\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407f18\n                function_4075c0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x407f28\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x407f31\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x407f3a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407f51\n            int64_t v47 = v45 & 0xffffffff; // 0x407f55\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x407f5e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x407f64\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x407f66;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x407f40\n            int64_t v49 = v48 & 0xffffffff; // 0x407f40\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407f51\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x407f5e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x407f64\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x407f66;\n                    }\n                }\n                // 0x407f40\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408108\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x407f66;\n    } else {\n        goto lab_0x407da4;\n    }\n  lab_0x407e2c:\n    // 0x407e2c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x407e2f\n    int64_t v51 = v12; // 0x407e2f\n    int64_t v52 = v14; // 0x407e2f\n    if (*(char *)v10 == 0) {\n        goto lab_0x407d88;\n    } else {\n        goto lab_0x407e35;\n    }\n  lab_0x407da4:;\n    int32_t v53 = v35; // 0x407da4\n    int64_t v54; // 0x407cc0\n    int64_t v55; // 0x407cc0\n    int64_t v56; // 0x407cc0\n    int64_t v57; // 0x407cc0\n    int64_t v58; // 0x407cc0\n    int64_t v59; // 0x407cc0\n    char * v60; // 0x407cc0\n    int64_t v61; // 0x407cc0\n    int64_t v62; // 0x407db9\n    int64_t v63; // 0x407cc0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407ef3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407ef6;\n    } else {\n        // 0x407dac\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407cc0\n        int64_t v66 = v65 ? -1 : 1; // 0x407dc0\n        int64_t v67 = (int64_t)\"--\"; // 0x407cc0\n        int64_t v68 = v62; // 0x407cc0\n        int64_t v69 = 3; // 0x407dc0\n        unsigned char v70 = *(char *)v68; // 0x407dc0\n        char v71 = *(char *)v67; // 0x407dc0\n        char v72 = v71; // 0x407dc0\n        bool v73 = false; // 0x407dc0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x407eb0\n            if (*(char *)v62 == 45) {\n                // 0x407f70\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x407f70\n                if (c == 0) {\n                    goto lab_0x407eba;\n                } else {\n                    // 0x407f7d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408000;\n                    } else {\n                        if (c == 45) {\n                            // 0x4081e3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x408055;\n                        } else {\n                            // 0x407f8e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408000;\n                            } else {\n                                // 0x407f93\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x407fb4;\n                                } else {\n                                    // 0x407f9a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408000;\n                                    } else {\n                                        goto lab_0x407fb4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x407eba;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407dd0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407dd3\n            int64_t v77 = v35 + 1; // 0x407dd6\n            int32_t v78 = v77; // 0x407dd9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408140\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407de7\n                    function_4075c0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407df5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407ef6;\n        }\n    }\n  lab_0x407e35:;\n    // 0x407e35\n    int64_t v79; // bp-104, 0x407cc0\n    int64_t v80 = &v79; // 0x407cca\n    int64_t v81 = v50 + 1; // 0x407e35\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x407e3c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x407e41\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x407e45\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x407e49\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407e51\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407e56\n    int32_t c2 = v84; // 0x407e56\n    char * found_char_pos = strchr(str2, c2); // 0x407e56\n    int64_t v87 = *v82; // 0x407e5b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x407e65\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x407e70\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x408160\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40812d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x407e9e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407e56\n    char v91 = *(char *)(v90 + 1); // 0x407e8b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x407e45\n        if (v91 != 58) {\n            // 0x407e9e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4080b4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4081b8\n                *v8 = 0;\n            } else {\n                // 0x40819c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4080de\n            *v83 = 0;\n            // 0x407e9e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4080be\n        if (v93 != 0) {\n            // 0x408150\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4080de\n            *v83 = 0;\n            // 0x407e9e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4080d1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4080de\n            *v83 = 0;\n            // 0x407e9e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40821a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4081ca\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4081d1\n        // 0x4080de\n        *v83 = 0;\n        // 0x407e9e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x408029\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40802b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x408250\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408201\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408208\n            // 0x407e9e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408036\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40803a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x408055;\n  lab_0x407f66:\n    // 0x407f66\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x407da4;\n  lab_0x408055:;\n    int64_t v99 = function_4076a0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408073\n    // 0x407e9e\n    return v99 & 0xffffffff;\n  lab_0x407ef6:;\n    int32_t v100 = v55; // 0x407ef6\n    if (v100 != (int32_t)v59) {\n        // 0x407efa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x407e9e\n    return 0xffffffff;\n  lab_0x407eba:\n    // 0x407eba\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407ec1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x407e9e\n    return v99 & 0xffffffff;\n  lab_0x408000:\n    // 0x408000\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x407e35;\n  lab_0x407fb4:\n    // 0x407fb4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4076a0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x407fda\n    if ((int32_t)v101 != -1) {\n        // 0x407e9e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x407fef\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408000;\n}\n"
        },
        {
            "funcName": "function_408290",
            "funcStartAddr": "408290",
            "funcEndAddr": "4082e6",
            "decompiledFuncCode": "int64_t function_408290(int64_t a1) {\n    // 0x408290\n    *(int32_t *)&g48 = g28;\n    *(int32_t *)&g49 = g27;\n    int64_t v1; // 0x408290\n    int64_t result = function_407cc0(v1, v1, v1, v1, v1, v1, &g48, a1 & 0xffffffff); // 0x4082b6\n    g28 = *(int32_t *)&g48;\n    g55 = g51;\n    *(int32_t *)&g26 = g50;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4082f0",
            "funcStartAddr": "4082f0",
            "funcEndAddr": "408308",
            "decompiledFuncCode": "int64_t function_4082f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4082f0\n    return function_408290(1);\n}\n"
        },
        {
            "funcName": "function_408310",
            "funcStartAddr": "408310",
            "funcEndAddr": "408323",
            "decompiledFuncCode": "int64_t function_408310(int64_t a1, int64_t a2, char * a3, char (**a4)[10], int32_t a5, int64_t a6) {\n    // 0x408310\n    return function_408290(0);\n}\n"
        },
        {
            "funcName": "function_408330",
            "funcStartAddr": "408330",
            "funcEndAddr": "408345",
            "decompiledFuncCode": "int64_t function_408330(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408330\n    return function_407cc0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408350",
            "funcStartAddr": "408350",
            "funcEndAddr": "408366",
            "decompiledFuncCode": "int64_t function_408350(void) {\n    // 0x408350\n    return function_408290(0);\n}\n"
        },
        {
            "funcName": "function_408370",
            "funcStartAddr": "408370",
            "funcEndAddr": "408388",
            "decompiledFuncCode": "int64_t function_408370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408370\n    return function_407cc0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408390",
            "funcStartAddr": "408390",
            "funcEndAddr": "40840a",
            "decompiledFuncCode": "int64_t function_408390(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40839b\n    int64_t v2 = (int64_t)&g10; // 0x40839b\n    int32_t * pwc; // 0x408390\n    int64_t v3; // 0x408390\n    int64_t n; // 0x408390\n    if (a2 == 0) {\n        goto lab_0x4083e2;\n    } else {\n        // 0x40839d\n        if (a3 == 0) {\n            // 0x4083c8\n            return -2;\n        }\n        // 0x4083a9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4083e2;\n        } else {\n            goto lab_0x4083b4;\n        }\n    }\n  lab_0x4083e2:\n    // 0x4083e2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408390\n    pwc = (int32_t *)&v4;\n    goto lab_0x4083b4;\n  lab_0x4083b4:;\n    char * wstr = (char *)v3; // 0x4083ba\n    int64_t ps; // 0x408390\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4083ba\n    int64_t result = v5; // 0x4083ba\n    if (v5 < 0xfffffffe) {\n        // 0x4083c8\n        return result;\n    }\n    int64_t result2 = result; // 0x4083f9\n    if ((char)function_408670(0, v3) == 0) {\n        // 0x4083fb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4083c8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408410",
            "funcStartAddr": "408410",
            "funcEndAddr": "4084f1",
            "decompiledFuncCode": "int64_t function_408410(uint32_t fd, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x408422\n    int64_t v2; // 0x408410\n    if (fd == -100 || (char)v2 == 47) {\n        // 0x40849a\n        *v1 = 95;\n        // 0x4084a1\n        return 0xffffffff;\n    }\n    // 0x408436\n    int32_t v3; // bp-4072, 0x408410\n    int64_t v4 = function_40ac10((int64_t *)&v3, (int64_t)fd, a2); // 0x408441\n    if (v4 != 0) {\n        // 0x40844b\n        *v1 = 95;\n        if (v4 != (int64_t)&v3) {\n            // 0x408457\n            free((int64_t *)v4);\n        }\n    }\n    // 0x40845f\n    if ((int32_t)function_40a000((int64_t *)&v3) != 0) {\n        // 0x4084e1\n        function_409f50(*v1);\n        // UNREACHABLE\n    }\n    // 0x40846b\n    if (fd > -1 == v3 == fd) {\n        // 0x4084d0\n        function_40a070((int64_t *)&v3);\n        *v1 = 9;\n        // 0x4084a1\n        return 0xffffffff;\n    }\n    // 0x408474\n    if (fchdir(fd) != 0) {\n        // 0x4084b8\n        function_40a070((int64_t *)&v3);\n        // 0x4084a1\n        return 0xffffffff;\n    }\n    // 0x40847f\n    *v1 = 95;\n    if ((int32_t)function_40a050((int64_t *)&v3) != 0) {\n        // 0x4084e9\n        function_409f80(*v1);\n        // UNREACHABLE\n    }\n    // 0x408492\n    function_40a070((int64_t *)&v3);\n    // 0x40849a\n    *v1 = 95;\n    // 0x4084a1\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408500",
            "funcStartAddr": "408500",
            "funcEndAddr": "408505",
            "decompiledFuncCode": "int64_t function_408500(int32_t a1, int64_t a2, int64_t * a3) {\n    // 0x408500\n    return function_408410(a1, a2);\n}\n"
        },
        {
            "funcName": "function_408510",
            "funcStartAddr": "408510",
            "funcEndAddr": "408515",
            "decompiledFuncCode": "int64_t function_408510(int32_t a1, int64_t a2, int64_t a3) {\n    // 0x408510\n    return function_408410(a1, a2);\n}\n"
        },
        {
            "funcName": "function_408520",
            "funcStartAddr": "408520",
            "funcEndAddr": "408525",
            "decompiledFuncCode": "int64_t function_408520(int32_t a1, int64_t a2, int64_t a3) {\n    // 0x408520\n    return function_408410(a1, a2);\n}\n"
        },
        {
            "funcName": "function_408530",
            "funcStartAddr": "408530",
            "funcEndAddr": "40858d",
            "decompiledFuncCode": "int64_t function_408530(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x408537\n    int64_t v2; // 0x408530\n    int64_t result = function_40a3d0(a1, v2); // 0x408548\n    if ((v2 & 32) != 0) {\n        // 0x408570\n        if ((int32_t)result == 0) {\n            // 0x408574\n            *__errno_location() = 0;\n        }\n        // 0x40856a\n        return 0xffffffff;\n    }\n    // 0x408551\n    if ((int32_t)result == 0) {\n        // 0x40856a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x408558\n    if (v1 == 0) {\n        // 0x40855a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40856a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408590",
            "funcStartAddr": "408590",
            "funcEndAddr": "4085a0",
            "decompiledFuncCode": "int64_t function_408590(int64_t a1) {\n    // 0x408590\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x408590\n    return result;\n}\n"
        },
        {
            "funcName": "function_4085a0",
            "funcStartAddr": "4085a0",
            "funcEndAddr": "408620",
            "decompiledFuncCode": "int64_t function_4085a0(int64_t a1, int64_t a2) {\n    // 0x4085a0\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x408602\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g58;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x4085a9\n    int64_t v2 = *v1; // 0x4085a9\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x4085ad\n    if (v2 == 0) {\n        // 0x4085d0\n        *v1 = 1;\n        // 0x4085d8\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x4085e8\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x4085c8\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x4085bb\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x4085c8\n        return 0;\n    }\n    // 0x4085f7\n    if (v4 == 0) {\n        // 0x4085c8\n        return 1;\n    }\n    // 0x4085d8\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408620",
            "funcStartAddr": "408620",
            "funcEndAddr": "40866a",
            "decompiledFuncCode": "int64_t function_408620(int64_t path, int64_t oflag, int32_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x408633\n    return function_40a090((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_408670",
            "funcStartAddr": "408670",
            "funcEndAddr": "4086ce",
            "decompiledFuncCode": "int64_t function_408670(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x408676\n    if (locale == NULL) {\n        // 0x4086a3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x408676\n    bool v2; // 0x408670\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x408670\n    int64_t v5 = v1; // 0x408670\n    int64_t v6 = 2; // 0x408695\n    unsigned char v7 = *(char *)v5; // 0x408695\n    char v8 = *(char *)v4; // 0x408695\n    char v9 = v8; // 0x408695\n    bool v10 = false; // 0x408695\n    while (v7 == v8) {\n        // 0x408688\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4086a1\n    int64_t v13 = v1; // 0x4086a1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4086a3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4086a1\n    unsigned char v15 = *(char *)v13; // 0x4086bd\n    char v16 = *(char *)v12; // 0x4086bd\n    char v17 = v16; // 0x4086bd\n    bool v18 = false; // 0x4086bd\n    while (v15 == v16) {\n        // 0x4086b0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4086d0",
            "funcStartAddr": "4086d0",
            "funcEndAddr": "408763",
            "decompiledFuncCode": "int64_t function_4086d0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x4086e7\n    if (v1 == -1) {\n        // 0x40875f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x4086ef\n    int64_t v3; // 0x4086d0\n    while (true) {\n      lab_0x4086f8:\n        // 0x4086f8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x408750;\n        } else {\n            goto lab_0x408755;\n        }\n    }\n  lab_0x40875f_2:;\n    // 0x40875f\n    int64_t result; // 0x4086d0\n    return result;\n  lab_0x408755:;\n    int64_t v4 = v3 + 2; // 0x408755\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40875f\n        goto lab_0x40875f_2;\n    }\n    goto lab_0x4086f8;\n  lab_0x408750:\n    // 0x408750\n    result = v3;\n    goto lab_0x408755;\n}\n"
        },
        {
            "funcName": "function_408770",
            "funcStartAddr": "408770",
            "funcEndAddr": "408780",
            "decompiledFuncCode": "int64_t function_408770(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x408770\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_408780",
            "funcStartAddr": "408780",
            "funcEndAddr": "408787",
            "decompiledFuncCode": "int64_t function_408780(int64_t a1, int64_t a2) {\n    // 0x408780\n    int64_t v1; // 0x408780\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_408790",
            "funcStartAddr": "408790",
            "funcEndAddr": "4087b1",
            "decompiledFuncCode": "int64_t function_408790(int64_t a1, int64_t a2) {\n    // 0x408790\n    int64_t v1; // 0x408790\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_4087c0",
            "funcStartAddr": "4087c0",
            "funcEndAddr": "4088d9",
            "decompiledFuncCode": "int64_t function_4087c0(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_408790(a1, a2); // 0x4087d4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x4087dc\n    int64_t result2 = *v2; // 0x4087dc\n    if (result2 == 0) {\n        // 0x40886e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x408804\n            if (v3 == 0) {\n                // 0x40886e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x408811\n            int64_t v5 = v3; // 0x408817\n            int64_t v6 = v1; // 0x408817\n            int64_t result = v4; // 0x408817\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40884c_2:\n                // 0x40884c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x408851\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x408860\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40886e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x408824\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x408831\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40884c_2;\n                }\n                // 0x408839\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40884c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40886e\n            return 0;\n        }\n    }\n    // 0x408883\n    if ((char)a4 == 0) {\n        // 0x40886e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x408888\n    if (v12 == 0) {\n        // 0x4088d0\n        *v2 = 0;\n        // 0x40886e\n        return result2;\n    }\n    // 0x408891\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40889f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4088e0",
            "funcStartAddr": "4088e0",
            "funcEndAddr": "40895e",
            "decompiledFuncCode": "int64_t function_4088e0(uint64_t a1) {\n    if (a1 == (int64_t)&g12) {\n        // 0x40895d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x4088eb\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g12) {\n        // 0x40894a\n        *(int64_t *)a1 = (int64_t)&g12;\n        return 0;\n    }\n    // 0x4088f9\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x408914\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x408921\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x408929\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40895d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408960",
            "funcStartAddr": "408960",
            "funcEndAddr": "408aaa",
            "decompiledFuncCode": "int64_t function_408960(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40897a\n    uint64_t v2 = *v1; // 0x40897a\n    if (v2 <= a2) {\n        // 0x408a64\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x408960\n    int64_t v8 = a2; // 0x408960\n    int64_t v9; // 0x408960\n    int64_t result; // 0x408960\n    int64_t v10; // 0x408960\n    while (true) {\n      lab_0x408996_2:\n        // 0x408996\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x408996\n        int64_t v12 = *v11; // 0x408996\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x408988;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40899f\n            int64_t v14 = *v13; // 0x40899f\n            int64_t v15 = v14; // 0x4089a7\n            int64_t v16 = v12; // 0x4089a7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x4089c4\n                    int64_t v19 = *v18; // 0x4089c4\n                    int64_t v20 = function_408790(v3, v19); // 0x4089cd\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x4089d2\n                    int64_t v22 = *v21; // 0x4089d2\n                    int64_t * v23 = (int64_t *)v20; // 0x4089d6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x4089b0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4089ff\n                            break;\n                        }\n                    } else {\n                        // 0x4089dc\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4089ff\n                            break;\n                        }\n                    }\n                    // 0x4089c4\n                    v15 = v22;\n                }\n                // 0x4089ff\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x408a03\n                v9 = *v1;\n                goto lab_0x408988;\n            } else {\n                int64_t v26 = function_408790(v3, v25); // 0x408a1b\n                int64_t * v27 = (int64_t *)v26; // 0x408a20\n                if (*v27 == 0) {\n                    // 0x408a80\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x408a29\n                    int64_t * v29; // 0x408960\n                    int64_t v30; // 0x408960\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x408a8f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x408a64\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x408a8f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x408a3a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x408a49\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x408a51\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x408a5a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x408a64\n                    break;\n                }\n                goto lab_0x408996_2;\n            }\n        }\n    }\n    // 0x408a64\n    return result;\n  lab_0x408988:;\n    int64_t v36 = v10 + 16; // 0x408988\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x408996_2;\n    // 0x408996\n    goto lab_0x408996_2;\n}\n"
        },
        {
            "funcName": "function_408ab0",
            "funcStartAddr": "408ab0",
            "funcEndAddr": "408ab5",
            "decompiledFuncCode": "int64_t function_408ab0(int64_t a1) {\n    // 0x408ab0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_408ac0",
            "funcStartAddr": "408ac0",
            "funcEndAddr": "408ac5",
            "decompiledFuncCode": "int64_t function_408ac0(int64_t a1) {\n    // 0x408ac0\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_408ad0",
            "funcStartAddr": "408ad0",
            "funcEndAddr": "408ad5",
            "decompiledFuncCode": "int64_t function_408ad0(int64_t a1) {\n    // 0x408ad0\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408b2f",
            "decompiledFuncCode": "int64_t function_408ae0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408ae3\n    int64_t result = 0; // 0x408aec\n    if (v1 <= a1) {\n      lab_0x408b2d:\n        // 0x408b2d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x408af0\n    while (*(int64_t *)v3 == 0) {\n        // 0x408af0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x408aff\n    int64_t v6 = v5; // 0x408b0b\n    int64_t v7 = 1; // 0x408b0b\n    int64_t v8; // 0x408ae0\n    int64_t v9; // 0x408b10\n    int64_t v10; // 0x408b14\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x408b10\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x408b20\n    int64_t v12 = v3 + 16; // 0x408b24\n    while (v12 < v1) {\n        // 0x408af9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x408af0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x408aff\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x408b10\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x408b1d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x408b2d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408b30",
            "funcStartAddr": "408b30",
            "funcEndAddr": "408b97",
            "decompiledFuncCode": "int64_t function_408b30(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408b33\n    int64_t v2 = a1; // 0x408b3f\n    int64_t v3 = 0; // 0x408b3f\n    int64_t v4 = 0; // 0x408b3f\n    int64_t v5 = 0; // 0x408b3f\n    int64_t v6 = 0; // 0x408b3f\n    int64_t v7; // 0x408b30\n    int64_t v8; // 0x408b30\n    int64_t v9; // 0x408b30\n    if (v1 > a1) {\n        while (true) {\n          lab_0x408b51_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x408b48;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x408b57\n                int64_t v13 = v10 + 1; // 0x408b5b\n                int64_t v14 = v11 + 1; // 0x408b5f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x408b66\n                int64_t v16 = v14; // 0x408b66\n                if (v12 == 0) {\n                    goto lab_0x408b48;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x408b70\n                    int64_t v18 = v16 + 1; // 0x408b74\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x408b70\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x408b7d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x408b86\n                        break;\n                    }\n                    goto lab_0x408b51_2;\n                }\n            }\n        }\n    }\n  lab_0x408b86:\n    // 0x408b86\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x408b8f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x408b8e\n    return 0;\n  lab_0x408b48:;\n    int64_t v20 = v8 + 16; // 0x408b48\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x408b86\n        goto lab_0x408b86;\n    }\n    goto lab_0x408b51_2;\n    // 0x408b51\n    goto lab_0x408b51_2;\n}\n"
        },
        {
            "funcName": "function_408ba0",
            "funcStartAddr": "408ba0",
            "funcEndAddr": "408ce8",
            "decompiledFuncCode": "int64_t function_408ba0(uint64_t a1, int64_t a2) {\n    // 0x408ba0\n    int128_t v1; // 0x408ba0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x408bb3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x408bb7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x408bbe\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x408bd0\n            while (*(int64_t *)v7 == 0) {\n                // 0x408bd0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x408c0d\n                    goto lab_0x408c0d;\n                }\n            }\n        }\n    }\n  lab_0x408c0d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x408c1c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x408ba0\n    int128_t v10; // 0x408ba0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x408cb3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x408cbc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x408c53;\n        } else {\n            goto lab_0x408cc9;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x408c46\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x408cc9;\n        } else {\n            goto lab_0x408c53;\n        }\n    }\n  lab_0x408c53:\n    // 0x408c53\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x408c57\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x408c57\n    goto lab_0x408c5c;\n  lab_0x408cc9:\n    // 0x408cc9\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x408cda\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x408c5c;\n  lab_0x408c5c:\n    // 0x408c5c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_408cf0",
            "funcStartAddr": "408cf0",
            "funcEndAddr": "408d43",
            "decompiledFuncCode": "int64_t function_408cf0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_408790(a1, result); // 0x408cfa\n    int64_t v2 = *(int64_t *)v1; // 0x408cff\n    if (v2 == 0) {\n        // 0x408d2d\n        return 0;\n    }\n    // 0x408d13\n    if (v2 == result) {\n        // 0x408d2d\n        return result;\n    }\n    int64_t v3 = v1; // 0x408d24\n    int64_t result2 = v2; // 0x408d22\n    while ((char)v1 == 0) {\n        // 0x408d24\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x408d2d\n            break;\n        }\n        // 0x408d10\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x408d2d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x408d2d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "408d98",
            "decompiledFuncCode": "int64_t function_408d50(uint64_t a1) {\n    int64_t result = 0; // 0x408d55\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x408d67\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408d5e\n    if (v1 <= a1) {\n        // 0x408d67\n        return result;\n    }\n    int64_t v2 = a1; // 0x408d65\n    int64_t v3 = *(int64_t *)v2; // 0x408d79\n    result = v3;\n    while (v3 == 0) {\n        // 0x408d70\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x408d67\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x408d67\n    return result;\n}\n"
        },
        {
            "funcName": "function_408da0",
            "funcStartAddr": "408da0",
            "funcEndAddr": "408e0a",
            "decompiledFuncCode": "int64_t function_408da0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408790(a1, a2); // 0x408dac\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x408dc8\n    while (*(int64_t *)v2 != a2) {\n        // 0x408dc0\n        if (v3 == 0) {\n            goto lab_0x408dd6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x408e00\n        return *(int64_t *)v3;\n    }\n  lab_0x408dd6:;\n    int64_t v4 = v1 + 16; // 0x408de8\n    int64_t result = 0; // 0x408def\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x408de0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x408df3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x408df3\n    return result;\n}\n"
        },
        {
            "funcName": "function_408e10",
            "funcStartAddr": "408e10",
            "funcEndAddr": "408e74",
            "decompiledFuncCode": "int64_t function_408e10(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408e16\n    int64_t result = 0; // 0x408e1a\n    if (*v1 <= a1) {\n      lab_0x408e31:\n        // 0x408e31\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x408e1f\n    int64_t v4 = v2; // 0x408e25\n    int64_t v5; // 0x408e10\n    int64_t v6; // 0x408e10\n    int64_t v7; // 0x408e58\n    int64_t v8; // 0x408e61\n    int64_t v9; // 0x408e41\n    int64_t v10; // 0x408e45\n    if (v3 != 0) {\n        // 0x408e38\n        if (v2 >= a3) {\n            // break -> 0x408e31\n            break;\n        }\n        // 0x408e3d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x408e55\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x408e50\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x408e55\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x408e27\n    result = v11;\n    while (*v1 > v12) {\n        // 0x408e1f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x408e38\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x408e31\n                break;\n            }\n            // 0x408e3d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x408e55\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x408e50\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x408e55\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x408e27\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x408e31\n    return result;\n}\n"
        },
        {
            "funcName": "function_408e80",
            "funcStartAddr": "408e80",
            "funcEndAddr": "408ef8",
            "decompiledFuncCode": "int64_t function_408e80(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408e91\n    int64_t result = 0; // 0x408e95\n    if (v1 <= a1) {\n      lab_0x408eb4:\n        // 0x408eb4\n        return result;\n    }\n    int64_t v2 = a1; // 0x408eaa\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x408ea8\n    int64_t v5 = v2; // 0x408ea8\n    int64_t v6 = v3; // 0x408ea8\n    int64_t v7; // 0x408e80\n    int64_t v8; // 0x408ed8\n    int64_t v9; // 0x408edc\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x408ed8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x408ee8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x408ed8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x408ea2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x408ed8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x408ee8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x408ed8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x408eaa\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x408eb4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408f00",
            "funcStartAddr": "408f00",
            "funcEndAddr": "408f31",
            "decompiledFuncCode": "int64_t function_408f00(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x408f07\n    if (v1 == 0) {\n        // 0x408f2d\n        return 0;\n    }\n    int64_t result = 0; // 0x408f07\n    v2++;\n    char v3 = *(char *)v2; // 0x408f23\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x408f2d\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f40",
            "funcStartAddr": "408f40",
            "funcEndAddr": "408f60",
            "decompiledFuncCode": "int64_t function_408f40(int64_t a1) {\n    // 0x408f40\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_408f60",
            "funcStartAddr": "408f60",
            "funcEndAddr": "4090ea",
            "decompiledFuncCode": "int64_t function_408f60(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x408f60\n    int128_t v1; // 0x408f60\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x408f9a\n    int64_t result = (int64_t)mem; // 0x408f9a\n    if (mem == NULL) {\n        // 0x40904a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x408fab\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x408f60\n    int128_t v6; // 0x408f60\n    if (a2 == 0) {\n        // 0x409060\n        *v4 = (int64_t)&g12;\n        int64_t v7 = function_4088e0(v3); // 0x409068\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40906d\n        if ((char)v7 == 0) {\n            // 0x409040\n            free(mem);\n            // 0x40904a\n            return 0;\n        }\n        // 0x409079\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x4090c3;\n        } else {\n            goto lab_0x40907e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_4088e0(v3) == 0) {\n            // 0x409040\n            free(mem);\n            // 0x40904a\n            return 0;\n        }\n        // 0x408fc5\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_4086d0(a1); // 0x408fd3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x409040\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x409040\n                free(mem);\n                // 0x40904a\n                return 0;\n            }\n            // 0x408ff1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x409040\n                free(mem);\n                // 0x40904a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x409002\n            int64_t v10 = (int64_t)mem2; // 0x409002\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x409040\n                free(mem);\n                // 0x40904a\n                return 0;\n            }\n            // 0x40900f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x408770 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x408780 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40904a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x4090b8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40907e;\n        } else {\n            goto lab_0x4090c3;\n        }\n    }\n  lab_0x4090c3:\n    // 0x4090c3\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x4090d3\n    int128_t v13 = v6; // 0x4090dc\n    int128_t v14 = __asm_addss(v12, v12); // 0x4090dc\n    goto lab_0x409087;\n  lab_0x40907e:\n    // 0x40907e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x409087;\n  lab_0x409087:\n    // 0x409087\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x409040\n    free(mem);\n    // 0x40904a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4090f0",
            "funcStartAddr": "4090f0",
            "funcEndAddr": "409198",
            "decompiledFuncCode": "int64_t function_4090f0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4090fa\n    uint64_t v2 = *v1; // 0x4090fa\n    int64_t result; // 0x4090f0\n    if (v2 <= a1) {\n      lab_0x409183:\n        // 0x409183\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x409108\n    while (*v6 == 0) {\n        // 0x409108\n        v7 = v5 + 16;\n        int64_t v8; // 0x4090f0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x409183\n            goto lab_0x409183;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x409119\n    int64_t v10 = *v9; // 0x409119\n    int64_t v11 = *v3; // 0x40911e\n    int64_t v12 = v11; // 0x409125\n    int64_t v13 = v10; // 0x409125\n    int64_t result2 = v11; // 0x409125\n    int64_t * v14; // 0x40913e\n    int64_t v15; // 0x40913e\n    int64_t v16; // 0x40913a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x409135\n            v16 = *v3;\n        }\n        // 0x40913e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x409130\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409135\n                v16 = *v3;\n            }\n            // 0x40913e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40915d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x409170\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40917d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40910c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x409108\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x409183\n                goto lab_0x409183;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x409119\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409135\n                v16 = *v3;\n            }\n            // 0x40913e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x409130\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x409135\n                    v16 = *v3;\n                }\n                // 0x40913e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40915d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x409183\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4091a0",
            "funcStartAddr": "4091a0",
            "funcEndAddr": "409276",
            "decompiledFuncCode": "int64_t function_4091a0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4091af\n    uint64_t v2 = *v1; // 0x4091af\n    int64_t v3 = a1; // 0x4091b3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x409203;\n    } else {\n        // 0x4091b5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x409203;\n        } else {\n            // 0x4091bc\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x4091d1\n                int64_t v6; // 0x4091c8\n                while (v5 == 0) {\n                    // 0x4091c8\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x409203\n                        goto lab_0x409203;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x4091e8\n                int64_t v8 = v7; // 0x4091ef\n                int64_t v9 = v5; // 0x4091ef\n                int64_t v10; // 0x4091a0\n                int64_t v11; // 0x4091e8\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x4091e0\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x4091e3\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x4091f6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x4091d1\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x4091c8\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x409203\n                            goto lab_0x409203;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x4091e3\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x4091e0\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x4091e3\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x4091f1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x409203;\n            } else {\n                goto lab_0x40923c;\n            }\n        }\n    }\n  lab_0x409203:\n    // 0x409203\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x409210\n        int64_t v14 = v13; // 0x409217\n        int64_t v15 = v2; // 0x409217\n        int64_t v16; // 0x409220\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x409220\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x409231\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x409231\n        int64_t v18 = v15; // 0x40923a\n        int64_t v19 = v17; // 0x40923a\n        while (v15 > v17) {\n            // 0x409210\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x409220\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x409231\n                v15 = *v1;\n            }\n            // 0x409231\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40923c;\n  lab_0x40923c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40923c\n    if (v20 == 0) {\n        // 0x409261\n        free(NULL);\n        free((int64_t *)a1);\n        return &g58;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x409250\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40925f\n    while (v21 != 0) {\n        // 0x409250\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x409261\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g58;\n}\n"
        },
        {
            "funcName": "function_409280",
            "funcStartAddr": "409280",
            "funcEndAddr": "40947a",
            "decompiledFuncCode": "int64_t function_409280(int64_t a1, uint64_t a2) {\n    // 0x409280\n    int128_t v1; // 0x409280\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40928b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x409280\n        if (a2 < 0) {\n            // 0x409400\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x409410\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x4092a0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x4092a9\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x4093f2\n        return 0;\n    }\n    uint64_t nmemb = function_4086d0(a2); // 0x4092e3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x4093f2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40931b\n    if (*v6 == nmemb) {\n        // 0x4093f2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40932d\n    int64_t v7 = (int64_t)mem; // 0x40932d\n    int64_t v8 = v7; // bp-104, 0x409332\n    if (mem == NULL) {\n        // 0x4093f2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40938a\n    int64_t v10 = *v9; // 0x40938a\n    int64_t v11 = function_408960(&v8, a1, 0); // 0x409393\n    int64_t result = v11 & 0xffffffff; // 0x409398\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x409354\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x4093b6\n        function_408960(v13, v12, 1);\n        function_408960(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x409440\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x4093f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_409480",
            "funcStartAddr": "409480",
            "funcEndAddr": "4096f4",
            "decompiledFuncCode": "int64_t function_409480(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x409480\n    int128_t v1; // 0x409480\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x409480\n    int64_t v5 = function_4087c0(a1, a2, &v4, 0); // 0x4094a1\n    if (v5 != 0) {\n        // 0x4094ae\n        if (a3 != NULL) {\n            // 0x4094b5\n            *a3 = v5;\n        }\n        // 0x4094b9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x4094c8\n    uint64_t v7 = *v6; // 0x4094c8\n    int64_t v8; // 0x409480\n    int64_t v9; // 0x409480\n    int64_t v10; // 0x409480\n    int128_t v11; // 0x409480\n    int128_t v12; // 0x409480\n    int64_t v13; // 0x409480\n    if (v7 < 0) {\n        // 0x409550\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x409560\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x409564\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x409569\n        int128_t v17 = __asm_addss(v15, v15); // 0x40956d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x4094eb;\n        } else {\n            goto lab_0x40957a;\n        }\n    } else {\n        // 0x4094d1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x4094d5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x4094d9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x4094de\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40957a;\n        } else {\n            goto lab_0x4094eb;\n        }\n    }\n  lab_0x4094eb:\n    // 0x4094eb\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x4094f4\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x4094fc\n    int128_t v23 = v11; // 0x4094fc\n    if (v13 == 0) {\n        goto lab_0x409502;\n    } else {\n        goto lab_0x4095a1;\n    }\n  lab_0x40957a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x409587\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40958a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x409593\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x409502;\n    } else {\n        goto lab_0x4095a1;\n    }\n  lab_0x409502:;\n    int64_t * v28 = (int64_t *)v4; // 0x409507\n    if (*v28 == 0) {\n        // 0x409618\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x409621\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x409512\n    int64_t v31 = *v30; // 0x409512\n    int64_t * v32; // 0x409480\n    int64_t v33; // 0x409480\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40963d\n        if (mem == NULL) {\n            // 0x4094b9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40963d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x409527\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40953d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x4095a1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x4095a1\n    function_4088e0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x4095aa\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x4095ae\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x4095b2\n    int128_t v44; // 0x409480\n    if (v42 < 0) {\n        // 0x409670\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x409680\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x4095c0\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x4095c9\n    int128_t v47; // 0x409480\n    int64_t v48; // 0x409480\n    if (v46 < 0) {\n        // 0x409650\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40965d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x409660\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x4095d2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x4095d6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x4095db\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x4095eb\n        int128_t v53 = v52; // 0x4095f4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x409690\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x4095fa\n        __asm_comiss(v53, 0x5f800000);\n        // 0x4094b9\n        return 0xffffffff;\n    }\n    goto lab_0x409502;\n}\n"
        },
        {
            "funcName": "function_409700",
            "funcStartAddr": "409700",
            "funcEndAddr": "40973b",
            "decompiledFuncCode": "int64_t function_409700(int64_t a1, int64_t a2) {\n    // 0x409700\n    int64_t v1; // bp-16, 0x409700\n    int64_t v2; // 0x409700\n    int32_t v3 = function_409480(a1, a2, &v1, v2); // 0x409712\n    if (v3 == -1) {\n        // 0x409720\n        return 0;\n    }\n    // 0x409717\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409917",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1) {\n    // 0x409740\n    int128_t v1; // 0x409740\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x409740\n    int64_t v5; // 0x409740\n    int64_t result = function_4087c0(a1, v5, &v4, 1); // 0x409755\n    if (result == 0) {\n        // 0x409772\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x409767\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x409772\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x409780\n    uint64_t v8 = *v7 - 1; // 0x409784\n    *v7 = v8;\n    int64_t v9; // 0x409740\n    int64_t v10; // 0x409740\n    int64_t v11; // 0x409740\n    int128_t v12; // 0x409740\n    int128_t v13; // 0x409740\n    int64_t v14; // 0x409740\n    if (v8 < 0) {\n        // 0x409870\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x409880\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x409884\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x409889\n        int128_t v18 = __asm_addss(v16, v16); // 0x40988d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x4097ac;\n        } else {\n            goto lab_0x40989a;\n        }\n    } else {\n        // 0x409792\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x409796\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40979a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40979f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40989a;\n        } else {\n            goto lab_0x4097ac;\n        }\n    }\n  lab_0x4097ac:\n    // 0x4097ac\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x4097b0\n    int64_t v23 = v14; // 0x4097b0\n    int128_t v24 = v12; // 0x4097b0\n    int64_t v25 = v10; // 0x4097b0\n    int128_t v26 = v22; // 0x4097b0\n    goto lab_0x4097b5;\n  lab_0x40989a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x4098a7\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x4098aa\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x4097b5;\n  lab_0x4097b5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x4097b5\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x409772\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x4097be\n    function_4088e0(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x4097c7\n    int64_t v31 = *(int64_t *)v29; // 0x4097cb\n    int128_t v32; // 0x409740\n    if (v30 < 0) {\n        // 0x4098e0\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x4098f0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x4097d8\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x4097e1\n    int128_t v35; // 0x409740\n    int64_t v36; // 0x409740\n    if (v34 < 0) {\n        // 0x4098c0\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x4098cd\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x4098d0\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x4097ee\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x4097f2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x4097f7\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x409772\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x409808\n    int128_t v41 = v40; // 0x409811\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x409813\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x409818\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x409908\n    if ((char)function_409280(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x409772\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40983a\n    if (*v43 != 0) {\n        int64_t v44; // 0x409740\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x409848\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x409859\n    *v43 = 0;\n    // 0x409772\n    return result;\n}\n"
        },
        {
            "funcName": "function_409920",
            "funcStartAddr": "409920",
            "funcEndAddr": "40993b",
            "decompiledFuncCode": "int64_t function_409920(int64_t a1, int64_t a2) {\n    // 0x409920\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x40992c\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x409920\n    return result;\n}\n"
        },
        {
            "funcName": "function_409940",
            "funcStartAddr": "409940",
            "funcEndAddr": "409945",
            "decompiledFuncCode": "int64_t function_409940(int64_t a1) {\n    // 0x409940\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_409950",
            "funcStartAddr": "409950",
            "funcEndAddr": "409985",
            "decompiledFuncCode": "int64_t function_409950(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x409950\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x409954\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x40995d\n    uint32_t v4 = (*v2 + v3) % 4; // 0x40995f\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x409968\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x40996e\n    int32_t v7 = *v6; // 0x40996e\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x409978\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x409980\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_409990",
            "funcStartAddr": "409990",
            "funcEndAddr": "4099d1",
            "decompiledFuncCode": "int64_t function_409990(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x409994\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40999e\n    uint32_t v3 = *v2; // 0x40999e\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x4099ab\n    int64_t result = (int64_t)*v4; // 0x4099ab\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x4099c8\n        *v1 = 1;\n        return result;\n    }\n    // 0x4099b4\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099e0",
            "funcStartAddr": "4099e0",
            "funcEndAddr": "409f42",
            "decompiledFuncCode": "int64_t function_4099e0(void) {\n    char * v1 = nl_langinfo(14); // 0x4099f6\n    char * v2 = g52; // 0x4099fb\n    char * v3; // 0x4099e0\n    int64_t v4; // 0x4099e0\n    int64_t v5; // 0x4099e0\n    int64_t v6; // 0x4099e0\n    int64_t v7; // 0x4099e0\n    int32_t size; // 0x4099e0\n    int32_t size2; // 0x4099e0\n    int32_t len; // 0x409ab2\n    int64_t v8; // 0x409ab2\n    char * env_val; // 0x409a9d\n    if (v2 == NULL) {\n        // 0x409a98\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409b05;\n        } else {\n            // 0x409aaa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409b05;\n            } else {\n                // 0x409aaf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x409a9d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409f35\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409b05;\n                    } else {\n                        // 0x409ea9\n                        size2 = len + 14;\n                        goto lab_0x409acb;\n                    }\n                } else {\n                    goto lab_0x409acb;\n                }\n            }\n        }\n    } else {\n        // 0x4099e0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x409a1a;\n    }\n  lab_0x409d4c:;\n    // 0x409d4c\n    struct _IO_FILE * stream; // 0x409b8b\n    int32_t v10 = __uflow(stream); // 0x409d4f\n    int64_t v11; // 0x4099e0\n    int64_t v12 = v11; // 0x409d59\n    int64_t v13; // 0x4099e0\n    int64_t v14 = v13; // 0x409d59\n    int32_t v15 = v10; // 0x409d59\n    int64_t v16; // 0x4099e0\n    int64_t v17 = v16; // 0x409d59\n    int64_t v18 = v11; // 0x409d59\n    int64_t v19 = v13; // 0x409d59\n    int64_t v20 = v16; // 0x409d59\n    if (v10 == -1) {\n        // break -> 0x409d5f\n        goto lab_0x409d5f;\n    }\n    goto lab_0x409bd9;\n  lab_0x409bce:;\n    // 0x409bce\n    int64_t v90; // 0x4099e0\n    int64_t * v32; // 0x409bc0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4099e0\n    v12 = v89;\n    int64_t v91; // 0x4099e0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4099e0\n    v17 = v92;\n    goto lab_0x409bd9;\n  lab_0x409bd9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4099e0\n    int32_t v25; // bp-120, 0x4099e0\n    int32_t v26; // bp-184, 0x4099e0\n    int64_t v27; // 0x409b8b\n    int64_t v28; // 0x409ba8\n    int64_t v29; // 0x409bad\n    int64_t * v30; // 0x409bc4\n    switch (c) {\n        case 32: {\n            goto lab_0x409bc0;\n        }\n        case 10: {\n            goto lab_0x409bc0;\n        }\n        case 9: {\n            goto lab_0x409bc0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409db1\n            int32_t v33; // 0x4099e0\n            char v34; // 0x4099e0\n            int32_t v35; // 0x409dbe\n            if (v31 < *v30) {\n                // 0x409d90\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x409dbb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409db1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409d90\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x409dbb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409da0\n                v36 = v33;\n            }\n            // 0x409e8f\n            if (v36 == -1) {\n                // break -> 0x409d5f\n                break;\n            }\n            goto lab_0x409bc0;\n        }\n        default: {\n            // 0x409bef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x409d5f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409c18\n            int64_t v39 = v37 + 4; // 0x409c1a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409c26\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409c28\n            while (v41 == 0) {\n                // 0x409c18\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409c46\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409c52\n            int64_t v45 = v43 + 4; // 0x409c54\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409c60\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409c62\n            while (v47 == 0) {\n                // 0x409c52\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x409c4f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409c78\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409c88\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x409c8c\n            int64_t v52 = v51 + v48; // 0x409c95\n            int64_t * mem; // 0x4099e0\n            int64_t v53; // 0x4099e0\n            int64_t v54; // 0x4099e0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x409dcb\n                int64_t v56 = v55 + 3; // 0x409dd7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409cb1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409cc0\n            if (mem == NULL) {\n                // 0x409eec\n                free((int64_t *)v21);\n                function_40a3d0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x409b64;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409cd8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409ce2\n            uint32_t v62 = (int32_t)v59; // 0x409ce5\n            int64_t v63; // 0x4099e0\n            if (v62 >= 8) {\n                // 0x409df4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x409e0e\n                int64_t v66 = v61 - v65; // 0x409e12\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x409e1d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x409e2e\n                    int64_t v70 = v69 & 0xffffffff; // 0x409e2e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x409e2b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x409ebf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409cf7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x409cfb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x409d0b\n            int64_t v74 = v60 - 1; // 0x409d0f\n            uint32_t v75 = (int32_t)v73; // 0x409d14\n            int64_t v76; // 0x4099e0\n            if (v75 >= 8) {\n                // 0x409e42\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x409e4c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x409e5c\n                int64_t v80 = v74 - v79; // 0x409e60\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x409e6b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x409e7b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409e79\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409ed6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x409ede\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409d26\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x409d2a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409f23\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x409d3e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x409bce;\n            } else {\n                goto lab_0x409d4c;\n            }\n        }\n    }\n  lab_0x409bc0:;\n    int64_t v93 = v23; // 0x4099e0\n    int64_t v94 = v22; // 0x4099e0\n    int64_t v95 = v21; // 0x4099e0\n    goto lab_0x409bc0_2;\n  lab_0x409b05:;\n    int64_t * mem3 = malloc(size); // 0x409b05\n    int64_t v97 = (int64_t)&g10; // 0x409b10\n    int64_t v98; // 0x4099e0\n    int64_t path; // 0x4099e0\n    if (mem3 == NULL) {\n        goto lab_0x409ae2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409b05\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x409b26;\n    }\n  lab_0x409a1a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x409a0d\n    char v100 = *v3; // 0x409a1a\n    int64_t v101; // 0x4099e0\n    if (v100 == 0) {\n        // 0x409a74\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4099e0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4099e0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x409a60\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x409a67;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x409a30\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x409a3d\n        char v107 = *(char *)v106; // 0x409a42\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x409a74\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x409a4b\n    v104 = v103 + 1;\n  lab_0x409a67:\n    // 0x409a74\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409ae2:;\n    char * v108 = (char *)v97;\n    g52 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x409a1a;\n  lab_0x409b26:;\n    int64_t v109 = v98 + path; // 0x409b26\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x409b52\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x409b81\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409eb2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x409ba5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409bc0_2:;\n                uint64_t v96 = *v32; // 0x409bc0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x409d4c;\n                } else {\n                    goto lab_0x409bce;\n                }\n            }\n          lab_0x409d5f:\n            // 0x409d5f\n            function_40a3d0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x409d7e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x409b64;\n  lab_0x409acb:;\n    int64_t * mem4 = malloc(size2); // 0x409acb\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x409b71\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x409b26;\n    } else {\n        goto lab_0x409ae2;\n    }\n  lab_0x409b64:\n    // 0x409b64\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409ae2;\n}\n"
        },
        {
            "funcName": "function_409f50",
            "funcStartAddr": "409f50",
            "funcEndAddr": "409f7b",
            "decompiledFuncCode": "int64_t function_409f50(int32_t err_num) {\n    // 0x409f50\n    error(g20, err_num, dcgettext(NULL, \"unable to record current working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409fab",
            "decompiledFuncCode": "int64_t function_409f80(int32_t err_num) {\n    // 0x409f80\n    error(g20, err_num, dcgettext(NULL, \"failed to return to initial working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409fb0",
            "funcStartAddr": "409fb0",
            "funcEndAddr": "409ffa",
            "decompiledFuncCode": "int64_t function_409fb0(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x409fc2\n    return function_40a090((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_40a000",
            "funcStartAddr": "40a000",
            "funcEndAddr": "40a04a",
            "decompiledFuncCode": "int64_t function_40a000(int64_t * a1) {\n    int64_t * v1 = (int64_t *)((int64_t)a1 + 8); // 0x40a00b\n    *v1 = 0;\n    int64_t v2; // 0x40a000\n    int32_t v3 = function_408620((int64_t)\".\", 0x80000, (int32_t)v2); // 0x40a01f\n    *(int32_t *)a1 = v3;\n    if (v3 >= 0) {\n        // 0x40a027\n        return 0;\n    }\n    int64_t v4 = function_40a630(0, 0); // 0x40a034\n    *v1 = v4;\n    return v4 == 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_40a050",
            "funcStartAddr": "40a050",
            "funcEndAddr": "40a069",
            "decompiledFuncCode": "int64_t function_40a050(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t fd = v1;\n    if (fd < 0) {\n        // 0x40a060\n        return function_40a160(*(int64_t *)(v1 + 8));\n    }\n    // 0x40a056\n    return fchdir(fd);\n}\n"
        },
        {
            "funcName": "function_40a070",
            "funcStartAddr": "40a070",
            "funcEndAddr": "40a089",
            "decompiledFuncCode": "int64_t function_40a070(int64_t * a1) {\n    // 0x40a070\n    int64_t v1; // 0x40a070\n    uint32_t fd = (int32_t)v1;\n    if (fd >= 0) {\n        // 0x40a07a\n        close(fd);\n    }\n    // 0x40a07f\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 8));\n    return &g58;\n}\n"
        },
        {
            "funcName": "function_40a090",
            "funcStartAddr": "40a090",
            "funcEndAddr": "40a0de",
            "decompiledFuncCode": "int64_t function_40a090(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40a09c\n    if (fd >= 3) {\n        // 0x40a0a1\n        return a1 & 0xffffffff;\n    }\n    // 0x40a0b0\n    int64_t v1; // 0x40a090\n    int64_t v2 = function_40ad40(a1, v1); // 0x40a0b0\n    int32_t * v3 = __errno_location(); // 0x40a0b8\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a0e0",
            "funcStartAddr": "40a0e0",
            "funcEndAddr": "40a120",
            "decompiledFuncCode": "int64_t function_40a0e0(int32_t fd) {\n    // 0x40a0e0\n    if (fd < 0) {\n        // 0x40a0e4\n        int64_t result; // 0x40a0e0\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x40a0ec\n    if (result2 == 0) {\n        // 0x40a0f5\n        return result2;\n    }\n    // 0x40a0fa\n    __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 64, \"cdb_free\");\n    return &g58;\n}\n"
        },
        {
            "funcName": "function_40a120",
            "funcStartAddr": "40a120",
            "funcEndAddr": "40a157",
            "decompiledFuncCode": "int64_t function_40a120(int32_t * a1) {\n    // 0x40a120\n    int64_t path; // 0x40a120\n    int32_t fd = path;\n    uint32_t v1 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x40a132\n    int64_t result = 0xffffffff; // 0x40a139\n    if (v1 >= 0) {\n        // 0x40a13b\n        function_40a0e0(fd);\n        *a1 = v1;\n        result = 0;\n    }\n    // 0x40a148\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a160",
            "funcStartAddr": "40a160",
            "funcEndAddr": "40a3d0",
            "decompiledFuncCode": "int64_t function_40a160(int64_t a1) {\n    char * path = (char *)a1; // 0x40a16f\n    uint32_t result = chdir(path); // 0x40a16f\n    if (result == 0) {\n        // 0x40a2a6\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x40a17e\n    if (*v1 != 36) {\n        // 0x40a2a6\n        return result;\n    }\n    int32_t len = strlen(path); // 0x40a192\n    int32_t fd = -100; // bp-44, 0x40a197\n    if (len == 0) {\n        // 0x40a3b2\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g58;\n    }\n    if (len < 0x1000) {\n        // 0x40a399\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40a3b2\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g58;\n    }\n    int64_t v2 = len; // 0x40a192\n    int32_t ini_seg_bytes = strspn(path, \"/\"); // 0x40a1bf\n    int64_t v3; // 0x40a160\n    if (ini_seg_bytes == 2) {\n        int64_t v4 = function_40ab00(a1 + 3, 47, v2 - 3); // 0x40a2e5\n        if (v4 == 0) {\n            // 0x40a2a6\n            return 0xffffffff;\n        }\n        char * v5 = (char *)v4; // 0x40a2f2\n        *v5 = 0;\n        int64_t v6 = function_40a120(&fd); // 0x40a2fd\n        *v5 = 47;\n        if ((int32_t)v6 != 0) {\n            goto lab_0x40a290;\n        } else {\n            int64_t str = v4 + 1; // 0x40a309\n            v3 = str + (int64_t)strspn((char *)str, \"/\");\n            goto lab_0x40a1dd;\n        }\n    } else {\n        // 0x40a1d1\n        v3 = a1;\n        if (ini_seg_bytes != 0) {\n            // 0x40a2b8\n            if ((int32_t)function_40a120(&fd) != 0) {\n                goto lab_0x40a290;\n            } else {\n                // 0x40a2cb\n                v3 = (int64_t)ini_seg_bytes + a1;\n                goto lab_0x40a1dd;\n            }\n        } else {\n            goto lab_0x40a1dd;\n        }\n    }\n  lab_0x40a290:\n    // 0x40a290\n    function_40a0e0(fd);\n    // 0x40a2a6\n    return 0xffffffff;\n  lab_0x40a1dd:\n    // 0x40a1dd\n    if (*(char *)v3 == 47) {\n      lab_0x40a367:\n        // 0x40a367\n        __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 162, \"chdir_long\");\n        // 0x40a380\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40a399\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40a3b2\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g58;\n    }\n    uint64_t v7 = v2 + a1; // 0x40a1e7\n    if (v7 < v3) {\n        // 0x40a380\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40a399\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40a3b2\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g58;\n    }\n    int64_t v8 = v3; // 0x40a25d\n    int64_t v9 = v3; // 0x40a25d\n    if (v7 - v3 > 4095) {\n        int64_t * v10 = memrchr((int64_t *)v8, 47, 0x1000); // 0x40a205\n        while (v10 != NULL) {\n            int64_t v11 = (int64_t)v10; // 0x40a205\n            *(char *)v10 = 0;\n            if (v11 - v8 > 4095) {\n                // 0x40a34e\n                __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 179, \"chdir_long\");\n                goto lab_0x40a367;\n            }\n            int64_t v12 = function_40a120(&fd); // 0x40a230\n            *(char *)v10 = 47;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x40a290;\n            }\n            int64_t str2 = v11 + 1; // 0x40a23c\n            int64_t v13 = str2 + (int64_t)strspn((char *)str2, \"/\"); // 0x40a24d\n            v8 = v13;\n            v9 = v13;\n            if (v7 - v13 <= 4095) {\n                goto lab_0x40a25f;\n            }\n            v10 = memrchr((int64_t *)v8, 47, 0x1000);\n        }\n        // 0x40a328\n        *v1 = 36;\n        // 0x40a2a6\n        return 0xffffffff;\n    }\n  lab_0x40a25f:\n    // 0x40a25f\n    if (v7 > v9) {\n        // 0x40a264\n        if ((int32_t)function_40a120(&fd) != 0) {\n            goto lab_0x40a290;\n        } else {\n            goto lab_0x40a275;\n        }\n    } else {\n        goto lab_0x40a275;\n    }\n  lab_0x40a275:\n    // 0x40a275\n    if (fchdir(fd) == 0) {\n        // 0x40a340\n        function_40a0e0(fd);\n        // 0x40a2a6\n        return 0;\n    }\n    goto lab_0x40a290;\n}\n"
        },
        {
            "funcName": "function_40a3d0",
            "funcStartAddr": "40a3d0",
            "funcEndAddr": "40a44b",
            "decompiledFuncCode": "int64_t function_40a3d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40a3d7\n    if (fileno(stream) < 0) {\n        // 0x40a437\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40a3ea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40a41b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40a437\n            return fclose(stream);\n        }\n    }\n    // 0x40a3ec\n    if ((int32_t)function_40a590(a1, v1) == 0) {\n        // 0x40a437\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40a3f8\n    int32_t v3 = *v2; // 0x40a400\n    int64_t result = fclose(stream); // 0x40a40e\n    if (v3 != 0) {\n        // 0x40a440\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40a410\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a450",
            "funcStartAddr": "40a450",
            "funcEndAddr": "40a585",
            "decompiledFuncCode": "int64_t function_40a450(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40a480\n    if (cmd != 1030) {\n        // 0x40a530\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40a48c\n    int64_t v2; // 0x40a450\n    if (g53 < 0) {\n        int64_t v3 = function_40a450(fd, 0, v1, a4); // 0x40a4d4\n        int64_t v4 = v3 & 0xffffffff; // 0x40a4d9\n        if ((int32_t)v3 < 0) {\n            // 0x40a4c0\n            return v4 & 0xffffffff;\n        }\n        // 0x40a4df\n        v2 = v4;\n        if (g53 != -1) {\n            // 0x40a4c0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40a4a7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40a4b6\n            g53 = 1;\n            // 0x40a4c0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40a450(fd & 0xffffffff, 0, v1, a4); // 0x40a567\n        int64_t v7 = v6 & 0xffffffff; // 0x40a56c\n        if ((int32_t)v6 < 0) {\n            // 0x40a4c0\n            return v7 & 0xffffffff;\n        }\n        // 0x40a576\n        g53 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40a4ef\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40a4fa\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40a4c0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40a512\n    close(fd2);\n    // 0x40a4c0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a590",
            "funcStartAddr": "40a590",
            "funcEndAddr": "40a5d0",
            "decompiledFuncCode": "int64_t function_40a590(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40a5aa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40a5aa\n        return fflush(stream);\n    }\n    // 0x40a5b8\n    function_40a5d0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40a5d0",
            "funcStartAddr": "40a5d0",
            "funcEndAddr": "40a627",
            "decompiledFuncCode": "int64_t function_40a5d0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40a5d0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40a5da\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40a60b\n    int64_t result = -1; // 0x40a614\n    if (v1 != -1) {\n        // 0x40a616\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40a622\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a630",
            "funcStartAddr": "40a630",
            "funcEndAddr": "40aaf2",
            "decompiledFuncCode": "int64_t function_40a630(int32_t a1, int32_t a2) {\n    // 0x40a630\n    int32_t size; // 0x40a630\n    int32_t v1; // 0x40a630\n    int32_t v2; // 0x40a630\n    if (a2 != 0) {\n        // 0x40a690\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x40a662;\n        } else {\n            goto lab_0x40a6ac;\n        }\n    } else {\n        // 0x40a650\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x40aa50\n            *__errno_location() = 22;\n            // 0x40a676\n            return 0;\n        }\n        goto lab_0x40a662;\n    }\n  lab_0x40a9f0:;\n    // 0x40a9f0\n    int32_t v3; // 0x40a9ea\n    int64_t v4 = v3; // 0x40a9f2\n    int64_t v5; // 0x40a630\n    int64_t dirp2 = v5; // 0x40a9f2\n    int32_t * v6; // 0x40a736\n    if (v3 != 0) {\n        goto lab_0x40aa01;\n    } else {\n        // 0x40a9f4\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x40aa01;\n    }\n  lab_0x40a802:;\n    // 0x40a802\n    int64_t v7; // 0x40a630\n    int64_t v8 = v7;\n    int64_t v9; // 0x40a630\n    int64_t v10 = v9 + 19; // 0x40a802\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x40a630\n    int64_t v12; // 0x40a630\n    int32_t v13; // 0x40a630\n    int32_t fd; // 0x40a752\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x40a835\n        if (v11 == v12) {\n            // break -> 0x40a850\n            goto lab_0x40a850;\n        }\n    }\n    int64_t v14 = v8; // 0x40a630\n    goto lab_0x40a7c0_2;\n  lab_0x40aace_2:\n    // 0x40aace\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x40aa01;\n  lab_0x40a662:;\n    int64_t * mem = malloc(size); // 0x40a667\n    int32_t v41 = (int64_t)mem; // 0x40a66c\n    int32_t result = v41; // 0x40a674\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x40a676\n        return result;\n    }\n    goto lab_0x40a6ac;\n  lab_0x40a6ac:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x40a6b1\n    int64_t v46 = v45 - 1; // 0x40a6c0\n    *(char *)v46 = 0;\n    int64_t v47; // 0x40a630\n    int64_t v48; // 0x40a630\n    int32_t * v49; // 0x40a630\n    int64_t v50; // 0x40a630\n    int64_t v33; // 0x40a630\n    int64_t v40; // 0x40a630\n    int64_t v51; // 0x40a630\n    int32_t v38; // 0x40a630\n    int32_t v52; // 0x40a630\n    int32_t v53; // 0x40a630\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x40aa28;\n    } else {\n        // 0x40a6d6\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x40aa28;\n        } else {\n            // 0x40a701\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x40a948;\n            } else {\n                // 0x40a736\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x40a743\n                int32_t v55 = v42; // 0x40a743\n                int64_t v56 = v11; // 0x40a743\n                int64_t v57 = v46; // 0x40a743\n                int64_t v58 = 0; // 0x40a743\n                int32_t fd2 = -100; // 0x40a743\n                int64_t dirp3; // 0x40a630\n                while (true) {\n                    // 0x40a746\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x40aa77\n                        break;\n                    }\n                    // 0x40a762\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x40aa88\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40aa6d;\n                        } else {\n                            // 0x40aa91\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40aa6d;\n                        }\n                    }\n                    // 0x40a77b\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x40a780\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x40aa69\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40aa6d;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x40a7a7\n                    if (dirp == NULL) {\n                        // 0x40aa69\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40aa6d;\n                    }\n                    // 0x40a7b8\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x40a7c0_2:;\n                        int64_t v15 = v14; // 0x40a630\n                        int64_t v16; // 0x40a630\n                        int64_t v17; // 0x40a630\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40a7cb\n                            int64_t v20; // 0x40a630\n                            int64_t v21; // 0x40a630\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x40a9a0\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x40a9f0;\n                                }\n                                // 0x40a9ad\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x40a9b8\n                                if (v23 == NULL) {\n                                    // 0x40a9ea\n                                    v3 = *v6;\n                                    goto lab_0x40a9f0;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x40a802;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x40a7e3\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x40a9d0\n                            if (*(char *)v28 != 0) {\n                                // 0x40a9da\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x40a7e3\n                                    break;\n                                }\n                            }\n                            // 0x40a7c0\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x40a802;\n                        } else {\n                            // 0x40a7e8\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40a7fd\n                            int64_t v32; // 0x40a630\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x40a7c0\n                                v14 = v31;\n                                goto lab_0x40a7c0_2;\n                            } else {\n                                goto lab_0x40a802;\n                            }\n                        }\n                    }\n                  lab_0x40a850:;\n                    int64_t v61 = v38; // 0x40a858\n                    uint64_t v62 = v57 - v61; // 0x40a858\n                    int32_t len = strlen(str); // 0x40a85d\n                    uint64_t v63 = (int64_t)len; // 0x40a85d\n                    int32_t v64 = v60; // 0x40a868\n                    int32_t v65 = v38; // 0x40a868\n                    int64_t dest_mem = v57; // 0x40a868\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x40aae0\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x40aa01;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x40a876\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x40a881\n                        uint64_t v68 = v67 + v66; // 0x40a885\n                        if (v68 < v66) {\n                            goto lab_0x40aace_2;\n                        }\n                        // 0x40a898\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x40a8a0\n                        if (mem2 == NULL) {\n                            goto lab_0x40aace_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x40a8a0\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x40a8fd\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40a92e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x40aa30;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x40a948;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x40aa77\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x40aa09;\n                } else {\n                    goto lab_0x40aa01;\n                }\n            }\n        }\n    }\n  lab_0x40aa28:\n    // 0x40aa28\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x40aa30;\n  lab_0x40aa30:;\n    int64_t v77 = (int64_t)*v49; // 0x40aa36\n    int64_t v34 = v77; // 0x40aa3a\n    int32_t * v35 = v49; // 0x40aa3a\n    int32_t * v36 = v49; // 0x40aa3a\n    int32_t v37 = v53; // 0x40aa3a\n    int64_t v39 = v77; // 0x40aa3a\n    if (a1 != 0) {\n        goto lab_0x40aa11;\n    } else {\n        goto lab_0x40aa3c;\n    }\n  lab_0x40aa11:\n    // 0x40aa11\n    *v35 = (int32_t)v34;\n    // 0x40a676\n    return 0;\n  lab_0x40aa3c:\n    // 0x40aa3c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x40aa11;\n  lab_0x40a948:\n    // 0x40a948\n    if (v51 == v47 - 1 + v48) {\n        // 0x40aab7\n        int64_t v78; // 0x40a630\n        int64_t v79 = v78 - 1; // 0x40aabc\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x40a972\n    int32_t v81 = v50 - v51; // 0x40a972\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40a97d\n    if (a2 == 0) {\n        // 0x40aaa0\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x40a676\n    return result2;\n  lab_0x40aa09:\n    // 0x40aa09\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40aa3c;\n    } else {\n        goto lab_0x40aa11;\n    }\n  lab_0x40aa01:\n    // 0x40aa01\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x40aa09;\n  lab_0x40aa6d:\n    // 0x40aa6d\n    close(fd);\n    v33 = v40;\n    goto lab_0x40aa09;\n}\n"
        },
        {
            "funcName": "function_40ab00",
            "funcStartAddr": "40ab00",
            "funcEndAddr": "40ac04",
            "decompiledFuncCode": "int64_t function_40ab00(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40ab00\n    if (a3 == 0) {\n        // 0x40ab39\n        return 0;\n    }\n    int64_t v1 = result; // 0x40ab0c\n    int64_t v2 = a3; // 0x40ab0c\n    int64_t result2; // 0x40ab00\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40ab0e\n        int64_t v4 = result; // 0x40ab11\n        if ((char)result == v3) {\n            // 0x40ab39\n            return result;\n        }\n        int64_t v5 = a3; // 0x40ab11\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40ab20\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40ab40;\n            }\n            // 0x40ab26\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40ab39\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40ab39\n        return result2;\n    }\n  lab_0x40ab40:;\n    int64_t result3 = v1; // 0x40ab6d\n    int64_t v6 = v2; // 0x40ab6d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40ab4f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40ab5c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40ab66\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40ab86\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40abb5\n            int64_t v12 = v1 + 8; // 0x40abb9\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40aba3\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40abcc;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40abc3\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40ab39\n                return 0;\n            }\n        }\n    }\n  lab_0x40abcc:;\n    char v14 = a2; // 0x40abcc\n    if (*(char *)result3 == v14) {\n        // 0x40ab39\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40abe0\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40ab39\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40ab39\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ac10",
            "funcStartAddr": "40ac10",
            "funcEndAddr": "40ad3a",
            "decompiledFuncCode": "int64_t function_40ac10(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t result = (int64_t)a1;\n    if ((char)a3 == 0) {\n        // 0x40acd8\n        *(char *)a1 = 0;\n        return result;\n    }\n    // 0x40ac26\n    if (g54 == 0) {\n        int32_t fd = open(\"/proc/self/fd\", O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x40acb2\n        if (fd < 0) {\n            // 0x40acbe\n            g54 = -1;\n            return 0;\n        }\n        // 0x40acf0\n        int64_t path; // bp-72, 0x40ac10\n        __sprintf_chk((char *)&path, 1, 32, \"/proc/self/fd/%d/../fd\", (int64_t)fd);\n        g54 = access((char *)&path, F_OK) == 0 ? 1 : -1;\n        close(fd);\n    }\n    // 0x40ac36\n    if (g54 < 0) {\n        // 0x40ac7e\n        return 0;\n    }\n    char * str = (char *)a3; // 0x40ac3d\n    int32_t len = strlen(str); // 0x40ac3d\n    uint64_t size = (int64_t)len + 27; // 0x40ac42\n    int64_t v1 = result; // 0x40ac4d\n    if (len != 4005 && size >= 4032) {\n        int64_t * mem = malloc((int32_t)size); // 0x40ac90\n        v1 = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x40ac7e\n            return 0;\n        }\n    }\n    int64_t result2 = v1;\n    strcpy((char *)(result2 + (int64_t)__sprintf_chk((char *)result2, 1, -1, \"/proc/self/fd/%d/\", a2 & 0xffffffff)), str);\n    // 0x40ac7e\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ad40",
            "funcStartAddr": "40ad40",
            "funcEndAddr": "40ad4e",
            "decompiledFuncCode": "int64_t function_40ad40(int64_t a1, int64_t a2) {\n    // 0x40ad40\n    int64_t v1; // 0x40ad40\n    return function_40a450(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40ad50",
            "funcStartAddr": "40ad50",
            "funcEndAddr": "40adad",
            "decompiledFuncCode": "int64_t function_40ad50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40ad50\n    return function_4018c0();\n}\n"
        },
        {
            "funcName": "function_40adb0",
            "funcStartAddr": "40adb0",
            "funcEndAddr": "40adb1",
            "decompiledFuncCode": "int64_t function_40adb0(void) {\n    // 0x40adb0\n    int64_t result; // 0x40adb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40adc0",
            "funcStartAddr": "40adc0",
            "funcEndAddr": "40add8",
            "decompiledFuncCode": "int64_t function_40adc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40adc0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_40add8",
            "funcStartAddr": "40add8",
            "funcEndAddr": "40adf8",
            "decompiledFuncCode": "int64_t function_40add8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x40ade2\n    while (*(int64_t *)v1 != -1) {\n        // 0x40ade3\n        v1 -= 8;\n    }\n    // 0x40adf4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chcon.elf"
}