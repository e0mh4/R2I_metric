{
    "funcInfo": [
        {
            "funcName": "function_402d80",
            "funcStartAddr": "402d80",
            "funcEndAddr": "402d85",
            "decompiledFuncCode": "int64_t function_402d80(void) {\n    // 0x402d80\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d85",
            "funcStartAddr": "402d85",
            "funcEndAddr": "402d8a",
            "decompiledFuncCode": "int64_t function_402d85(void) {\n    // 0x402d85\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d8a",
            "funcStartAddr": "402d8a",
            "funcEndAddr": "402d8f",
            "decompiledFuncCode": "int64_t function_402d8a(void) {\n    // 0x402d8a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d8f",
            "funcStartAddr": "402d8f",
            "funcEndAddr": "402d94",
            "decompiledFuncCode": "int64_t function_402d8f(void) {\n    // 0x402d8f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d94",
            "funcStartAddr": "402d94",
            "funcEndAddr": "402d99",
            "decompiledFuncCode": "int64_t function_402d94(void) {\n    // 0x402d94\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d99",
            "funcStartAddr": "402d99",
            "funcEndAddr": "402d9e",
            "decompiledFuncCode": "int64_t function_402d99(void) {\n    // 0x402d99\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d9e",
            "funcStartAddr": "402d9e",
            "funcEndAddr": "402da3",
            "decompiledFuncCode": "int64_t function_402d9e(void) {\n    // 0x402d9e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402da3",
            "funcStartAddr": "402da3",
            "funcEndAddr": "402da8",
            "decompiledFuncCode": "int64_t function_402da3(void) {\n    // 0x402da3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402da8",
            "funcStartAddr": "402da8",
            "funcEndAddr": "402dad",
            "decompiledFuncCode": "int64_t function_402da8(void) {\n    // 0x402da8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dad",
            "funcStartAddr": "402dad",
            "funcEndAddr": "402db2",
            "decompiledFuncCode": "int64_t function_402dad(void) {\n    // 0x402dad\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402db2",
            "funcStartAddr": "402db2",
            "funcEndAddr": "402db7",
            "decompiledFuncCode": "int64_t function_402db2(void) {\n    // 0x402db2\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402db7",
            "funcStartAddr": "402db7",
            "funcEndAddr": "402dbc",
            "decompiledFuncCode": "int64_t function_402db7(void) {\n    // 0x402db7\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dbc",
            "funcStartAddr": "402dbc",
            "funcEndAddr": "402dc1",
            "decompiledFuncCode": "int64_t function_402dbc(void) {\n    // 0x402dbc\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402dc1",
            "funcStartAddr": "402dc1",
            "funcEndAddr": "402dc6",
            "decompiledFuncCode": "int64_t function_402dc1(void) {\n    // 0x402dc1\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dc6",
            "funcStartAddr": "402dc6",
            "funcEndAddr": "402dcb",
            "decompiledFuncCode": "int64_t function_402dc6(void) {\n    // 0x402dc6\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dd0",
            "funcStartAddr": "402dd0",
            "funcEndAddr": "403430",
            "decompiledFuncCode": "int64_t function_402dd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x402dd0\n    function_40c350(a2);\n    setlocale(LC_ALL, (char *)&g18);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_415170(0x40a6c0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v1; // bp-280, 0x402dd0\n    function_4053c0(&v1);\n    isatty(0);\n    int64_t v2 = 0; // 0x402eb7\n    int32_t v3 = 4; // 0x402eb7\n    int64_t v4 = 0; // 0x402eb7\n    int64_t v5 = 0; // 0x402eb7\n    int64_t v6 = 0; // 0x402eb7\n    int64_t v7 = 0; // 0x402eb7\n    int64_t v8; // 0x402dd0\n    int64_t v9; // 0x402dd0\n    int64_t v10; // 0x402dd0\n    int64_t v11; // 0x402dd0\n    int64_t v12; // 0x402dd0\n    int64_t v13; // 0x402dd0\n    int32_t err_num; // 0x402dd0\n    int64_t v14; // 0x402dd0\n    int64_t v15; // 0x402dd0\n    int64_t v16; // bp-200, 0x402dd0\n    int32_t v17; // 0x402dd0\n    int32_t v18; // 0x402dd0\n    while (true) {\n      lab_0x402ec0_2:\n        // 0x402ec0\n        v13 = v7;\n        v12 = v6;\n        int64_t v19 = v5;\n        v9 = v4;\n        v17 = v3;\n        v8 = v2;\n        int64_t v20; // 0x402dd0\n        int32_t v21 = function_413690(a1 & 0xffffffff, a2, \"bfint:uvS:TZ\", &g2, 0, v20);\n        v2 = v8;\n        v3 = 1;\n        v4 = v9;\n        v5 = v19;\n        v6 = v12;\n        v7 = v13;\n        v14 = a2;\n        v15 = a2;\n        v11 = v19;\n        switch (v21) {\n            case -1: {\n                goto lab_0x4030a7;\n            }\n            case 102: {\n                goto lab_0x402ec0_2;\n            }\n            default: {\n                if (v21 > 102) {\n                    if (v21 == 116) {\n                        if (v19 != 0) {\n                            // 0x4033c6\n                            error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", dcgettext(NULL, \"multiple target directories specified\", 5));\n                            err_num = 0;\n                            v10 = v9;\n                            goto lab_0x4033e8;\n                        }\n                        int32_t v22 = __xstat(1, g73, (struct stat *)&v16); // 0x40304a\n                        int64_t v23 = (int64_t)g73;\n                        if (v22 != 0) {\n                            // 0x40331d\n                            function_40dd80(4, v23);\n                            error(1, *__errno_location(), dcgettext(NULL, \"failed to access %s\", 5));\n                            goto lab_0x403368;\n                        }\n                        // 0x403057\n                        v2 = v8;\n                        v3 = v17;\n                        v4 = v9;\n                        v5 = v23;\n                        v6 = v12;\n                        v7 = v13;\n                        if ((v18 & 0xf000) != 0x4000) {\n                            int64_t v24 = function_40dd80(4, v23); // 0x40307a\n                            error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n                            v14 = v24;\n                            v15 = (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\";\n                            v11 = v23;\n                            goto lab_0x4030a7;\n                        }\n                    } else {\n                        if (v21 > 116) {\n                            // 0x402ef6\n                            v2 = v8;\n                            v3 = v17;\n                            v4 = v9;\n                            v5 = v19;\n                            v6 = v12;\n                            v7 = v13;\n                            if (v21 >= 119) {\n                                if (v21 != 128) {\n                                    // 0x402f75\n                                    function_4036b0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x402f47\n                                g46 = 1;\n                                v2 = v8;\n                                v3 = v17;\n                                v4 = v9;\n                                v5 = v19;\n                                v6 = v12;\n                                v7 = v13;\n                            }\n                        } else {\n                            // 0x402f58\n                            v2 = v8;\n                            v3 = 3;\n                            v4 = v9;\n                            v5 = v19;\n                            v6 = v12;\n                            v7 = v13;\n                            if (v21 != 105) {\n                                // 0x402fc0\n                                v2 = v8;\n                                v3 = 2;\n                                v4 = v9;\n                                v5 = v19;\n                                v6 = v12;\n                                v7 = v13;\n                                if (v21 != 110) {\n                                    // 0x402f75\n                                    function_4036b0(1);\n                                    // UNREACHABLE\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v21 == 83) {\n                        // 0x403000\n                        v2 = (int64_t)g73;\n                        v3 = v17;\n                        v4 = v9;\n                        v5 = v19;\n                        v6 = 1;\n                        v7 = v13;\n                    } else {\n                        if (v21 <= 83) {\n                            if (v21 == -131) {\n                                // 0x402f87\n                                function_40ff60((int64_t)g39, \"mv\", \"GNU coreutils\", (int64_t)g27, \"Mike Parker\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v21 == -130) {\n                                // 0x402fd9\n                                function_4036b0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x402f75;\n                        }\n                        // 0x402f1b\n                        v2 = v8;\n                        v3 = v17;\n                        v4 = v9;\n                        v5 = v19;\n                        v6 = v12;\n                        v7 = v13;\n                        if (v21 != 90) {\n                            if (v21 != 98) {\n                                // 0x402f70\n                                v2 = v8;\n                                v3 = v17;\n                                v4 = 1;\n                                v5 = v19;\n                                v6 = v12;\n                                v7 = v13;\n                                if (v21 != 84) {\n                                  lab_0x402f75:\n                                    // 0x402f75\n                                    function_4036b0(1);\n                                    // UNREACHABLE\n                                }\n                            } else {\n                                char * v25 = g73; // 0x402f25\n                                v2 = v8;\n                                v3 = v17;\n                                v4 = v9;\n                                v5 = v19;\n                                v6 = 1;\n                                v7 = v25 != NULL ? (int64_t)v25 : v13;\n                            }\n                        }\n                    }\n                }\n                goto lab_0x402ec0_2;\n            }\n        }\n    }\n  lab_0x4030a7:;\n    int32_t v26 = (int32_t)a1 - g36; // 0x4030ae\n    int64_t v27 = v26; // 0x4030ae\n    int64_t v28 = 8 * (int64_t)g36 + v14; // 0x4030b0\n    int64_t v29; // 0x402dd0\n    int64_t v30; // 0x402dd0\n    int64_t v31; // 0x402dd0\n    int64_t v32; // 0x402dd0\n    int64_t v33; // 0x402dd0\n    int64_t v34; // 0x402dd0\n    int64_t v35; // 0x402dd0\n    int64_t v36; // 0x402dd0\n    int64_t v37; // 0x402dd0\n    int64_t v38; // 0x402dd0\n    int64_t v39; // 0x402dd0\n    int64_t * v40; // 0x403216\n    if ((int64_t)(v11 == 0) < v27) {\n        // 0x4030c4\n        char * format; // 0x4032cb\n        if (v9 == 0) {\n            if (v11 == 0) {\n                if (v26 == 1) {\n                    // 0x4032a6\n                    __assert_fail(\"2 <= n_files\", \"src/mv.c\", 454, \"main\");\n                    // 0x4032bf\n                    format = dcgettext(NULL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5);\n                    error(1, (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\" ^ (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\", format);\n                    goto lab_0x4032e1;\n                } else {\n                    // 0x403204\n                    v39 = 0x100000000 * v27;\n                    v40 = (int64_t *)(v28 - 8 + (v39 >> 29));\n                    int64_t v41 = *v40; // 0x403216\n                    int32_t v42 = __xstat(1, (char *)v41, (struct stat *)&v16); // 0x40321d\n                    v36 = v28;\n                    v38 = v41;\n                    if (v42 == 0) {\n                        goto lab_0x40327c;\n                    } else {\n                        int32_t v43 = *__errno_location(); // 0x40322b\n                        v36 = v28;\n                        v38 = v41;\n                        if (v43 == 0) {\n                            goto lab_0x40327c;\n                        } else {\n                            // 0x403233\n                            v35 = v28;\n                            err_num = v43;\n                            v10 = v41;\n                            if (v43 != 2) {\n                                goto lab_0x4033e8;\n                            } else {\n                                goto lab_0x40323d;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40316c\n                v33 = v28;\n                v29 = v11;\n                if (v12 != 0) {\n                    goto lab_0x4030eb;\n                } else {\n                    // 0x403175\n                    v1 = 0;\n                    function_40a040(v8);\n                    function_409750(v8, v15);\n                    v34 = v28;\n                    v31 = v27;\n                    v37 = v15;\n                    v30 = v11;\n                    goto lab_0x40312e;\n                }\n            }\n        } else {\n            if (v11 != 0) {\n                // 0x4032bf\n                format = dcgettext(NULL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5);\n                error(1, (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\" ^ (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\", format);\n                goto lab_0x4032e1;\n            } else {\n                // 0x4030d6\n                v32 = v28;\n                if (v26 > 2) {\n                    // 0x403382\n                    function_40dd80(4, *(int64_t *)(v28 + 16));\n                    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n                    function_4036b0(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x4030df;\n            }\n        }\n    } else {\n        goto lab_0x4032e1;\n    }\n    // 0x402ec0\n    goto lab_0x402ec0_2;\n  lab_0x4032e1:\n    // 0x4032e1\n    if (v26 == 1) {\n        // 0x4032e6\n        function_40dd80(4, *(int64_t *)v28);\n        error(0, (int32_t)\"missing destination file operand after %s\" ^ (int32_t)\"missing destination file operand after %s\", dcgettext(NULL, \"missing destination file operand after %s\", 5));\n        // 0x402f75\n        function_4036b0(1);\n        // UNREACHABLE\n    }\n  lab_0x403368:\n    // 0x403368\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing file operand\", 5));\n    // 0x402f75\n    function_4036b0(1);\n    // UNREACHABLE\n  lab_0x4030eb:\n    // 0x4030eb\n    if (v17 == 2) {\n        // 0x403368\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"options --backup and --no-clobber are mutually exclusive\", 5));\n        // 0x402f75\n        function_4036b0(1);\n        // UNREACHABLE\n    }\n    char * v44 = dcgettext(NULL, \"backup type\", 5); // 0x403102\n    int64_t v45 = 0x100000000 * function_40a5f0((int64_t)v44, v13) >> 32; // 0x40310d\n    int64_t v46 = v33; // 0x40310d\n    int64_t v47 = v27; // 0x40310d\n    int64_t v48 = v13; // 0x40310d\n    int64_t v49 = v29; // 0x40310d\n    goto lab_0x403112;\n  lab_0x4030df:\n    // 0x4030df\n    v33 = v32;\n    v29 = 0;\n    if (v12 == 0) {\n        // 0x4031ca\n        int64_t v58; // 0x402dd0\n        int64_t v59 = v58;\n        v1 = 0;\n        function_40a040(v8);\n        function_409750(v8, v59);\n        goto lab_0x4031e1;\n    } else {\n        goto lab_0x4030eb;\n    }\n  lab_0x40327c:;\n    int64_t v60 = v38;\n    int64_t v61 = v36;\n    v35 = v61;\n    if ((v18 & 0xf000) != 0x4000) {\n        goto lab_0x40323d;\n    } else {\n        // 0x40328c\n        v45 = 0;\n        v46 = v61;\n        v47 = v26 - 1;\n        v48 = v60;\n        v49 = *(int64_t *)(v61 + (v39 - 0x100000000 >> 29));\n        if (v12 != 0) {\n            goto lab_0x4030eb;\n        } else {\n            goto lab_0x403112;\n        }\n    }\n  lab_0x403112:\n    // 0x403112\n    v1 = v45;\n    function_40a040(v8);\n    function_409750(v8, v48);\n    v34 = v46;\n    v31 = v47;\n    v37 = v48;\n    v30 = v49;\n    if (v49 == 0) {\n        goto lab_0x4031e1;\n    } else {\n        goto lab_0x40312e;\n    }\n  lab_0x40312e:\n    // 0x40312e\n    if ((int32_t)v31 == 1) {\n        int64_t v50 = function_403620(*(int64_t *)v34, v30, 1, &v1); // 0x403143\n        // 0x40314a\n        return (v50 & 0xffffffff) % 256 ^ 1;\n    }\n    // 0x40318e\n    function_405360(&v1, v37);\n    int64_t v51 = v34 + 8; // 0x4031b8\n    int64_t v52 = function_403620(*(int64_t *)v34, v30, 1, &v1) & 1;\n    int64_t v53 = v51; // 0x4031c6\n    int64_t v54 = v52; // 0x4031c6\n    while (v51 != v34 + 8 + (8 * v31 + 0x7fffffff8 & 0x7fffffff8)) {\n        // 0x4031a8\n        v51 = v53 + 8;\n        v52 = function_403620(*(int64_t *)v53, v30, 1, &v1) & v54;\n        v53 = v51;\n        v54 = v52;\n    }\n    // 0x40314a\n    return v52 % 256 ^ 1;\n  lab_0x40323d:\n    // 0x40323d\n    v32 = v35;\n    if (v26 == 2) {\n        goto lab_0x4030df;\n    } else {\n        int64_t v55 = function_40dd80(4, *v40); // 0x40324f\n        error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n        v36 = v55;\n        v38 = (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\";\n        goto lab_0x40327c;\n    }\n  lab_0x4031e1:;\n    int64_t v56 = *(int64_t *)v46; // 0x4031e5\n    int64_t v57 = function_403620(v56, *(int64_t *)(v46 + 8), 0, &v1); // 0x4031ef\n    // 0x40314a\n    return (v57 & 0xffffffff) % 256 ^ 1;\n  lab_0x4033e8:\n    // 0x4033e8\n    function_40dd80(4, v10);\n    error(1, err_num, dcgettext(NULL, \"failed to access %s\", 5));\n    return &g76;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "403430",
            "funcEndAddr": "40345b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403430\n    int64_t v1; // 0x403430\n    __libc_start_main(0x402dd0, (int32_t)a4, (char **)&v1, (void (*)())0x415100, (void (*)())0x415160, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40345b",
            "funcStartAddr": "40345b",
            "funcEndAddr": "40347a",
            "decompiledFuncCode": "int64_t function_40345b(void) {\n    // 0x40345b\n    return 0x61d488;\n}\n"
        },
        {
            "funcName": "function_40347a",
            "funcStartAddr": "40347a",
            "funcEndAddr": "4034b1",
            "decompiledFuncCode": "int64_t function_40347a(void) {\n    // 0x40347a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4034b1",
            "funcStartAddr": "4034b1",
            "funcEndAddr": "403508",
            "decompiledFuncCode": "int64_t function_4034b1(void) {\n    // 0x4034b1\n    if (g43 != 0) {\n        // 0x403507\n        int64_t result; // 0x4034b1\n        return result;\n    }\n    int64_t v1 = g44; // 0x4034e4\n    int64_t result2; // 0x4034f6\n    if (g44 >= ((int64_t)&g22 - (int64_t)&g21 >> 3) - 1) {\n        // 0x4034f6\n        result2 = function_40345b();\n        g43 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g22 - (int64_t)&g21 >> 3) - 1) {\n        // 0x4034e6\n        v1++;\n    }\n    // 0x4034da\n    g44 = v1;\n    // 0x4034f6\n    result2 = function_40345b();\n    g43 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403508",
            "funcStartAddr": "403508",
            "funcEndAddr": "40350d",
            "decompiledFuncCode": "int64_t function_403508(void) {\n    // 0x403508\n    return function_40347a();\n}\n"
        },
        {
            "funcName": "function_403510",
            "funcStartAddr": "403510",
            "funcEndAddr": "403620",
            "decompiledFuncCode": "int64_t function_403510(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403510\n    char v1; // bp-73, 0x403510\n    char v2; // bp-74, 0x403510\n    int64_t result = function_4094d0(a1, a2, 0, a3, (int64_t *)&v2, (int64_t *)&v1); // 0x40352b\n    if ((char)result == 0) {\n        // 0x40353d\n        return result;\n    }\n    // 0x403534\n    if (v2 != 0) {\n        // 0x40353d\n        return 0;\n    }\n    // 0x403548\n    if (a1 == 0 || v1 == 1) {\n        // 0x40353d\n        return result;\n    }\n    char v3 = 0; // bp-56, 0x403560\n    if (function_40e240(&g45) == 0) {\n        // 0x4035c8\n        function_40dd80(4, (int64_t)\"/\");\n        error(1, *__errno_location(), dcgettext(NULL, \"failed to get attributes of %s\", 5));\n        // 0x403607\n        __assert_fail(\"VALID_STATUS (status)\", \"src/mv.c\", 236, \"do_move\");\n        return &g76;\n    }\n    int64_t v4 = a1; // bp-72, 0x40359e\n    int64_t v5 = function_4041b0(&v4, &v3, 0); // 0x4035b0\n    int32_t v6 = v5;\n    if (v6 < 5) {\n        // 0x40353d\n        return v5 & -256 | (int64_t)(v6 != 4);\n    }\n    // 0x403607\n    __assert_fail(\"VALID_STATUS (status)\", \"src/mv.c\", 236, \"do_move\");\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "4036af",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x403620\n    if (g46 != 0) {\n        // 0x4036a8\n        function_40aa90(a1);\n    }\n    int64_t v1 = (int64_t)a4;\n    if ((char)a3 == 0) {\n        // 0x403644\n        return function_403510(a1, a2, v1);\n    }\n    // 0x403660\n    function_40aa00(a1, a2);\n    int64_t v2 = function_40aeb0(); // 0x403670\n    function_40aa90(v2);\n    int64_t v3 = function_403510(a1, v2, v1); // 0x403689\n    free((int64_t *)v2);\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "403a75",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1) {\n    int32_t status = a1; // 0x4036c6\n    if (status != 0) {\n        // 0x4036ca\n        __fprintf_chk(g42, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4036ef\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4036f6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n  or:  %s [OPTION]... SOURCE... DIRECTORY\\n  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --backup[=CONTROL]       make a backup of each existing destination file\\n  -b                           like --backup but does not accept an argument\\n  -f, --force                  do not prompt before overwriting\\n  -i, --interactive            prompt before overwrite\\n  -n, --no-clobber             do not overwrite an existing file\\nIf you specify more than one of -i, -f, -n, only the final one takes effect.\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\\n                                 argument\\n  -S, --suffix=SUFFIX          override the usual backup suffix\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY\\n  -T, --no-target-directory    treat DEST as a normal file\\n  -u, --update                 move only when the SOURCE file is newer\\n                                 than the destination file or when the\\n                                 destination file is missing\\n  -v, --verbose                explain what is being done\\n  -Z, --context                set SELinux security context of destination\\n                                 file to default type\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n\", 5), g39);\n    int64_t v1 = &g1; // bp-136, 0x403855\n    bool v2; // 0x4036b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4038d8\n    int64_t v6 = *(int64_t *)v5; // 0x4038dc\n    int64_t v7 = 3; // 0x4038e2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"mv\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4038ee\n        char v11 = *(char *)v9; // 0x4038ee\n        char v12 = v11; // 0x4038ee\n        bool v13 = false; // 0x4038ee\n        while (v10 == v11) {\n            // 0x4038e4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4038ee\n            int64_t v15 = v8 + v3; // 0x4038ee\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4038fa\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x4038fa\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403a0c;\n        } else {\n            // 0x4039f6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403a4b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40395c;\n            } else {\n                goto lab_0x403a0c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40395c;\n        } else {\n            // 0x403942\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403a4b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40395c;\n            } else {\n                goto lab_0x40395c;\n            }\n        }\n    }\n  lab_0x403a0c:\n    // 0x403a0c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40399c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4036ef\n    exit(status);\n    // UNREACHABLE\n  lab_0x40395c:\n    // 0x40395c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40399c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4036ef\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403c89",
            "decompiledFuncCode": "int64_t function_403a80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t * path = (int64_t *)(a2 + 48); // 0x403a9d\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x403aa1\n    int32_t fd = *v1; // 0x403aa1\n    if (unlinkat(fd, (char *)*path, 512 * (int32_t)((char)a4 != 0)) == 0) {\n        // 0x403bc0\n        if (*(char *)(a3 + 25) == 0) {\n            // 0x403b5f\n            return 2;\n        }\n        // 0x403bcd\n        function_40dd80(4, *(int64_t *)(a2 + 56));\n        char * v2; // 0x403a80\n        if ((char)a4 == 0) {\n            // 0x403c58\n            v2 = dcgettext(NULL, \"removed %s\\n\", 5);\n        } else {\n            // 0x403be8\n            v2 = dcgettext(NULL, \"removed directory %s\\n\", 5);\n        }\n        // 0x403bf7\n        __printf_chk(1, v2);\n        return 2;\n    }\n    int32_t * err_num = __errno_location(); // 0x403ab7\n    uint32_t v3 = *err_num; // 0x403abc\n    if (v3 == 30) {\n        // 0x403c20\n        int64_t v4; // bp-184, 0x403a80\n        if (__fxstatat(1, *v1, (char *)*path, (struct stat *)&v4, 256) != 0) {\n            // 0x403c3e\n            if (*err_num == 2) {\n                // 0x403b5f\n                return 2;\n            }\n        }\n        // 0x403c47\n        *err_num = 30;\n        goto lab_0x403afa;\n    } else {\n        if ((char)v3 == 0) {\n            goto lab_0x403aef;\n        } else {\n            // 0x403ad1\n            if (v3 == 20) {\n                // 0x403b5f\n                return 2;\n            }\n            if (v3 > 20) {\n                // 0x403ae5\n                switch (v3) {\n                    case 22: {\n                    }\n                    case 84: {\n                        // 0x403b5f\n                        return 2;\n                    }\n                }\n                goto lab_0x403aef;\n            } else {\n                // 0x403b70\n                if (v3 == 2) {\n                    // 0x403b5f\n                    return 2;\n                }\n                // 0x403b75\n                if (v3 < 40 == *(int16_t *)(a2 + 112) == 4) {\n                    goto lab_0x403b89;\n                } else {\n                    goto lab_0x403afa;\n                }\n            }\n        }\n    }\n  lab_0x403afa:\n    // 0x403afa\n    function_40dd80(4, *(int64_t *)(a2 + 56));\n    error(0, *err_num, dcgettext(NULL, \"cannot remove %s\", 5));\n    int64_t v5 = *(int64_t *)(a2 + 8); // 0x403b2f\n    if (*(int64_t *)(v5 + 88) < 0) {\n        // 0x403b5f\n        return 4;\n    }\n    int64_t v6 = v5; // 0x403b38\n    int64_t * v7 = (int64_t *)(v6 + 32); // 0x403b53\n    while (*v7 == 0) {\n        // 0x403b40\n        *v7 = 1;\n        int64_t v8 = *(int64_t *)(v6 + 8); // 0x403b48\n        v6 = v8;\n        if (*(int64_t *)(v8 + 88) < 0) {\n            // break -> 0x403b5f\n            break;\n        }\n        v7 = (int64_t *)(v6 + 32);\n    }\n    // 0x403b5f\n    return 4;\n  lab_0x403aef:\n    // 0x403aef\n    if (v3 < 40 == *(int16_t *)(a2 + 112) == 4) {\n        goto lab_0x403b89;\n    } else {\n        goto lab_0x403afa;\n    }\n  lab_0x403b89:\n    if ((1 << (int64_t)(v3 % 64) & 0x8000320000) != 0) {\n        int32_t v9 = *(int32_t *)(a2 + 64); // 0x403b9d\n        if (v9 != 1 != v9 != 13) {\n            // 0x403bae\n            *err_num = v9;\n        }\n    }\n    goto lab_0x403afa;\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403d00",
            "decompiledFuncCode": "int64_t function_403c90(int32_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 48); // 0x403c91\n    int64_t v3 = *v2; // 0x403c91\n    int64_t v4 = v3; // 0x403c9c\n    if (v3 == -1) {\n        // 0x403cb0\n        if (__fxstatat(1, a1, (char *)a2, (struct stat *)a3, 256) != 0) {\n            // 0x403ccc\n            *v2 = -2;\n            int32_t * v5 = __errno_location(); // 0x403cd4\n            int32_t v6 = *v5; // 0x403cd9\n            *(int64_t *)(v1 + 8) = (int64_t)v6;\n            // 0x403ce3\n            *v5 = v6;\n            return 0xffffffff;\n        }\n        // 0x403cf0\n        v4 = *v2;\n    }\n    // 0x403c9e\n    if (v4 >= 0) {\n        // 0x403ca3\n        return 0;\n    }\n    // 0x403ce3\n    *__errno_location() = *(int32_t *)(v1 + 8);\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "4041a2",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403d00\n    int64_t v1; // 0x403d00\n    int64_t v2 = v1;\n    int32_t fd = *(int32_t *)(a1 + 44); // 0x403d17\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x403d1a\n    int64_t path = *(int64_t *)(a2 + 48); // 0x403d23\n    struct dirent * v4; // 0x403d00\n    int64_t v5; // 0x403d00\n    int64_t v6; // 0x403d00\n    struct __dirstream * dirp; // 0x403d6f\n    if (a6 == 0) {\n        // 0x403f90\n        v6 = v2 + (int64_t)((char)a3 == 0) + (v2 ^ 7) & 4;\n        v5 = (char)a3 != 0 ? 0 : a3 & 0xffffffff;\n    } else {\n        int32_t * v7 = (int32_t *)(int64_t)a6; // 0x403d39\n        *v7 = 2;\n        uint32_t fd2 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY | O_NOFOLLOW); // 0x403d60\n        int32_t v8 = 3; // 0x403d67\n        int64_t v9 = 0; // 0x403d67\n        if (fd2 >= 0) {\n            // 0x403d69\n            dirp = fdopendir(fd2);\n            if (dirp == NULL) {\n                // 0x404100\n                close(fd2);\n                v8 = 3;\n                v9 = 0;\n            } else {\n                int32_t * v10 = __errno_location(); // 0x403d84\n                *v10 = 0;\n                struct dirent * v11 = readdir(dirp); // 0x403d97\n                v4 = v11;\n                if (v11 == NULL) {\n                  lab_0x404058:;\n                    int32_t v12 = *(int32_t *)(0x100000000 * (int64_t)v10 >> 32); // 0x404060\n                    closedir(dirp);\n                    v8 = v12 != 0 ? 3 : 4;\n                    v9 = v12 == 0;\n                } else {\n                    while (true) {\n                      lab_0x403da5:;\n                        int64_t v13 = (int64_t)v4;\n                        if (*(char *)(v13 + 19) != 46) {\n                            // break -> 0x403daf\n                            break;\n                        }\n                        int64_t v14 = v13 + 20; // 0x404032\n                        char v15 = *(char *)(v14 + (int64_t)(*(char *)v14 == 46)); // 0x404039\n                        switch (v15) {\n                            case 0: {\n                                goto lab_0x403d94;\n                            }\n                            case 47: {\n                                goto lab_0x403d94;\n                            }\n                            default: {\n                                goto lab_0x403daf;\n                            }\n                        }\n                    }\n                  lab_0x403daf:\n                    // 0x403daf\n                    closedir(dirp);\n                    v8 = 3;\n                    v9 = 0;\n                }\n            }\n        }\n        // 0x403dbf\n        *v7 = v8;\n        v6 = 4 * (int64_t)((char)a3 != 0);\n        v5 = v9;\n    }\n    // 0x403dc3\n    if (*(int64_t *)(a2 + 32) != 0) {\n        // 0x403ee5\n        return 3;\n    }\n    int32_t * v16 = (int32_t *)(a4 + 4); // 0x403dce\n    int32_t v17 = *v16; // 0x403dce\n    if (v17 == 5) {\n        // 0x403ee5\n        return 2;\n    }\n    int32_t v18 = v17; // 0x403dde\n    int32_t v19; // 0x403d00\n    int64_t v20; // 0x403d00\n    int64_t v21; // bp-200, 0x403d00\n    int32_t v22; // 0x403d00\n    if (*(char *)&v20 != 0) {\n        goto lab_0x403f13;\n    } else {\n        if (v17 != 3) {\n            // 0x403de9\n            if (*(char *)(a4 + 24) == 0) {\n                // 0x403ee5\n                return 2;\n            }\n        }\n        // 0x403df3\n        if ((char)function_4100a0() != 0) {\n            // 0x403f10\n            v18 = *v16;\n            goto lab_0x403f13;\n        } else {\n            // 0x403e00\n            if ((int32_t)function_403c90(fd, path, &v21) != 0) {\n                goto lab_0x4040e0;\n            } else {\n                int32_t v23; // 0x403d00\n                if ((v23 & 0xf000) == 0xa000) {\n                    // 0x403f10\n                    v18 = *v16;\n                    goto lab_0x403f13;\n                } else {\n                    // 0x403e30\n                    if (faccessat(fd, (char *)path, W_OK, AT_REMOVEDIR) == 0) {\n                        // 0x403f10\n                        v18 = *v16;\n                        goto lab_0x403f13;\n                    } else {\n                        int32_t v24 = *__errno_location(); // 0x403e53\n                        v22 = 1;\n                        v19 = v24;\n                        if (v24 != 13) {\n                            goto lab_0x4040e8;\n                        } else {\n                            goto lab_0x403f1b;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403d94:;\n    struct dirent * v25 = readdir(dirp); // 0x403d97\n    v4 = v25;\n    if (v25 == NULL) {\n        goto lab_0x404058;\n    }\n    goto lab_0x403da5;\n  lab_0x403f13:\n    // 0x403f13\n    v22 = 0;\n    if (v18 != 3) {\n        // 0x403ee5\n        return 2;\n    }\n    goto lab_0x403f1b;\n  lab_0x403f1b:;\n    int32_t v26 = v6; // 0x403f1b\n    if (v26 == 0) {\n        // 0x404090\n        if ((int32_t)function_403c90(fd, path, &v21) != 0) {\n            goto lab_0x4040e0;\n        } else {\n            int32_t v27; // 0x403d00\n            switch ((int16_t)v27 & -0x1000) {\n                case -0x6000: {\n                    // 0x404148\n                    if (*v16 != 3) {\n                        // 0x403ee5\n                        return 2;\n                    }\n                    // 0x4040c7\n                    function_40dd80(4, v3);\n                    goto lab_0x403e75;\n                }\n                case 0x4000: {\n                    goto lab_0x403f2c;\n                }\n                default: {\n                    // 0x4040c7\n                    function_40dd80(4, v3);\n                    goto lab_0x403e75;\n                }\n            }\n        }\n    } else {\n        if (v26 != 4) {\n            // 0x4040c7\n            function_40dd80(4, v3);\n            goto lab_0x403e75;\n        } else {\n            goto lab_0x403f2c;\n        }\n    }\n  lab_0x4040e0:\n    // 0x4040e0\n    v19 = *__errno_location();\n    goto lab_0x4040e8;\n  lab_0x403f2c:;\n    // 0x403f2c\n    int32_t err_num; // 0x403d00\n    if (*(char *)(a4 + 9) != 0) {\n        // 0x403fc0\n        function_40dd80(4, v3);\n        if ((int32_t)a5 != 2) {\n            goto lab_0x403e75;\n        } else {\n            if ((char)v5 != 0) {\n                goto lab_0x403e75;\n            } else {\n                char * v29; // 0x403d00\n                if (v22 != 0) {\n                    // 0x404130\n                    v29 = dcgettext(NULL, \"%s: descend into write-protected directory %s? \", 5);\n                } else {\n                    // 0x403ffb\n                    v29 = dcgettext(NULL, \"%s: descend into directory %s? \", 5);\n                }\n                // 0x40400a\n                __fprintf_chk(g42, 1, v29);\n                goto lab_0x403ed7;\n            }\n        }\n    } else {\n        // 0x403f36\n        if (*(char *)(a4 + 10) == 0) {\n            // 0x403f45\n            function_40dd80(4, v3);\n            err_num = 21;\n            goto lab_0x403f5d;\n        } else {\n            if ((char)v5 != 0) {\n                // 0x4040c7\n                function_40dd80(4, v3);\n                goto lab_0x403e75;\n            } else {\n                // 0x403f45\n                function_40dd80(4, v3);\n                err_num = 21;\n                goto lab_0x403f5d;\n            }\n        }\n    }\n  lab_0x4040e8:\n    // 0x4040e8\n    function_40dd80(4, v3);\n    err_num = v19;\n    goto lab_0x403f5d;\n  lab_0x403e75:\n    // 0x403e75\n    if ((int32_t)function_403c90(fd, path, &v21) != 0) {\n        // 0x404160\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot remove %s\", 5));\n        // 0x403ee5\n        return 4;\n    }\n    // 0x403e8c\n    function_40ac30(&v21);\n    char * v28; // 0x403d00\n    if (v22 != 0) {\n        // 0x404118\n        v28 = dcgettext(NULL, \"%s: remove write-protected %s %s? \", 5);\n    } else {\n        // 0x403eac\n        v28 = dcgettext(NULL, \"%s: remove %s %s? \", 5);\n    }\n    // 0x403eb8\n    __fprintf_chk(g42, 1, v28);\n    goto lab_0x403ed7;\n  lab_0x403f5d:\n    // 0x403f5d\n    error(0, err_num, dcgettext(NULL, \"cannot remove %s\", 5));\n    // 0x403ee5\n    return 4;\n  lab_0x403ed7:\n    // 0x403ed7\n    if ((char)function_4103f0() == 0) {\n        // 0x403ee5\n        return 3;\n    }\n    // 0x403ee5\n    return 2;\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "404886",
            "decompiledFuncCode": "int64_t function_4041b0(int64_t * a1, char * a2, int64_t a3) {\n    // 0x4041b0\n    if (a1 == NULL) {\n        // 0x4042aa\n        return 2;\n    }\n    int64_t v1 = (int64_t)a2;\n    char * v2 = (char *)(v1 + 8); // 0x4041c8\n    int64_t v3 = *v2 == 0 ? 536 : 600; // 0x4041dc\n    int64_t v4 = function_410370((int64_t)a1, (int32_t)v3); // 0x4041e2\n    int64_t v5 = fts_read(v4); // 0x4041f3\n    g74 = v5;\n    int64_t v6 = 2; // 0x4041fe\n    if (v5 == 0) {\n      lab_0x404288_2:;\n        int32_t * err_num = __errno_location(); // 0x404288\n        if (*err_num != 0) {\n            // 0x4046e0\n            error(0, *err_num, dcgettext(NULL, \"fts_read failed\", 5));\n            if ((int32_t)fts_close(v4) == 0) {\n                // 0x4042aa\n                return 4;\n            }\n        } else {\n            // 0x40429a\n            if ((int32_t)fts_close(v4) == 0) {\n                // 0x4042aa\n                return v6 & 0xffffffff;\n            }\n        }\n        // 0x404715\n        error(0, *err_num, dcgettext(NULL, \"fts_close failed\", 5));\n        // 0x4042aa\n        return 4;\n    }\n    char * v7 = (char *)(v1 + 10);\n    bool v8; // 0x4041b0\n    int64_t v9 = v8 ? -1 : 1;\n    int32_t v10; // bp-60, 0x4041b0\n    int32_t v11 = &v10;\n    int64_t v12 = v5; // 0x4041f3\n    int64_t v13 = 2;\n    int64_t v14 = v3; // 0x4041b0\n    struct dirent * v15; // 0x4041b0\n    int64_t v16; // 0x4041b0\n    int64_t v17; // 0x4041b0\n    int64_t v18; // 0x4041b0\n    int64_t v19; // 0x4041b0\n    int64_t v20; // 0x4041b0\n    int64_t v21; // 0x4041b0\n    int64_t v22; // 0x4041b0\n    int64_t v23; // 0x4041b0\n    int32_t err_num3; // 0x4041b0\n    int32_t err_num2; // 0x4041b0\n    char * format; // 0x4041b0\n    int16_t v24; // 0x404204\n    int64_t path; // 0x40439e\n    struct __dirstream * dirp; // 0x4043ba\n    int32_t * v25; // 0x4043cb\n    while (true) {\n      lab_0x404204_2:\n        // 0x404204\n        v16 = v12;\n        v20 = v12;\n        v22 = v14;\n        v18 = v13;\n        while (true) {\n          lab_0x404204:\n            // 0x404204\n            v19 = v18;\n            v21 = v20;\n            switch (v16) {\n                case 1: {\n                    // 0x404388\n                    v23 = v22;\n                    if (*(char *)(v1 + 9) != 0) {\n                        goto lab_0x404420;\n                    } else {\n                        // 0x404393\n                        if (*v7 == 0) {\n                            // 0x404530\n                            err_num3 = 21;\n                            goto lab_0x404536;\n                        } else {\n                            // 0x40439e\n                            path = *(int64_t *)(v21 + 48);\n                            int32_t fd = openat(*(int32_t *)(v4 + 44), (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY | O_NOFOLLOW); // 0x4043ac\n                            if (fd < 0) {\n                                goto lab_0x4043f8;\n                            } else {\n                                // 0x4043b8\n                                dirp = fdopendir(fd);\n                                if (dirp == NULL) {\n                                    // 0x4047bb\n                                    close(fd);\n                                    goto lab_0x4043f8;\n                                } else {\n                                    // 0x4043cb\n                                    v25 = __errno_location();\n                                    *v25 = 0;\n                                    struct dirent * v26 = readdir(dirp); // 0x4043dc\n                                    v15 = v26;\n                                    if (v26 == NULL) {\n                                        goto lab_0x40440e;\n                                    } else {\n                                        while (true) {\n                                          lab_0x4043e6:;\n                                            int64_t v27 = (int64_t)v15;\n                                            if (*(char *)(v27 + 19) != 46) {\n                                                // break -> 0x4043f0\n                                                break;\n                                            }\n                                            int64_t v28 = v27 + 20; // 0x404632\n                                            char v29 = *(char *)(v28 + (int64_t)(*(char *)v28 == 46)); // 0x404639\n                                            switch (v29) {\n                                                case 0: {\n                                                    goto lab_0x4043d9;\n                                                }\n                                                case 47: {\n                                                    goto lab_0x4043d9;\n                                                }\n                                                default: {\n                                                    goto lab_0x4043f0;\n                                                }\n                                            }\n                                        }\n                                      lab_0x4043f0:\n                                        // 0x4043f0\n                                        closedir(dirp);\n                                        goto lab_0x4043f8;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                case 2: {\n                    // 0x404350\n                    function_40de50(0, 3, *(int64_t *)(v21 + 56));\n                    err_num2 = (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\";\n                    format = dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5);\n                    goto lab_0x40424d;\n                }\n                case 3: {\n                    goto lab_0x4042c0;\n                }\n                case 4: {\n                    goto lab_0x4042c0;\n                }\n                case 6: {\n                    goto lab_0x4042c0;\n                }\n                case 7: {\n                    // 0x404220\n                    function_40de50(0, 3, *(int64_t *)(v21 + 56));\n                    char * v30 = dcgettext(NULL, \"traversal failed: %s\", 5); // 0x40423f\n                    err_num2 = *(int32_t *)(v21 + 64);\n                    format = v30;\n                    goto lab_0x40424d;\n                }\n                case 8: {\n                    goto lab_0x4042c0;\n                }\n                case 10: {\n                    goto lab_0x4042c0;\n                }\n                case 11: {\n                    goto lab_0x4042c0;\n                }\n                case 12: {\n                    goto lab_0x4042c0;\n                }\n                case 13: {\n                    goto lab_0x4042c0;\n                }\n                default: {\n                    goto lab_0x4047c8;\n                }\n            }\n        }\n      lab_0x4042c0:\n        // 0x4042c0\n        v24 = *(int16_t *)(v21 + 112);\n        if (v24 != 6) {\n            goto lab_0x4042e8;\n        } else {\n            // 0x4042c6\n            if (*v2 == 0) {\n                goto lab_0x4042e8;\n            } else {\n                // 0x4042cd\n                if (*(int64_t *)(v21 + 88) < 1) {\n                    goto lab_0x4042e8;\n                } else {\n                    // 0x4042d4\n                    if (*(int64_t *)(v21 + 120) != *(int64_t *)(v4 + 24)) {\n                        int64_t v31 = *(int64_t *)(v21 + 8); // 0x404740\n                        int64_t v32 = v31; // 0x404749\n                        if (*(int64_t *)(v31 + 88) >= 0) {\n                            int64_t v33 = v32;\n                            int64_t * v34 = (int64_t *)(v33 + 32); // 0x404763\n                            while (*v34 == 0) {\n                                // 0x404750\n                                *v34 = 1;\n                                int64_t v35 = *(int64_t *)(v33 + 8); // 0x404758\n                                v32 = v35;\n                                if (*(int64_t *)(v35 + 88) < 0) {\n                                    // break -> 0x40476a\n                                    break;\n                                }\n                                v33 = v32;\n                                v34 = (int64_t *)(v33 + 32);\n                            }\n                        }\n                        // 0x40476a\n                        function_40dd80(4, *(int64_t *)(v21 + 56));\n                        error(0, (int32_t)\"skipping %s, since it's on a different device\" ^ (int32_t)\"skipping %s, since it's on a different device\", dcgettext(NULL, \"skipping %s, since it's on a different device\", 5));\n                        v14 = (int32_t)\"skipping %s, since it's on a different device\" ^ (int32_t)\"skipping %s, since it's on a different device\";\n                        v17 = 4;\n                        goto lab_0x4041f0;\n                    } else {\n                        goto lab_0x4042e8;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4047c8:\n    // 0x4047c8\n    function_40de50(0, 3, *(int64_t *)(v21 + 56));\n    error(0, (int32_t)\"unexpected failure: fts_info=%d: %s\\nplease report to %s\" ^ (int32_t)\"unexpected failure: fts_info=%d: %s\\nplease report to %s\", dcgettext(NULL, \"unexpected failure: fts_info=%d: %s\\nplease report to %s\", 5));\n    abort();\n    // UNREACHABLE\n  lab_0x404452_4:;\n    int64_t v36 = function_403d00(v4, v21, 1, v1, 2, v11); // 0x40446b\n    int64_t v37 = v36; // 0x404476\n    if ((int32_t)v36 == 2) {\n        // 0x4044e0\n        v14 = v21;\n        v17 = v19;\n        if (v10 != 4) {\n            goto lab_0x4041f0;\n        } else {\n            int64_t v38 = function_403a80(v4, v21, v1, 1); // 0x4044f9\n            fts_set(v4, v21, 4);\n            fts_read(v4);\n            v14 = v21;\n            v17 = v19;\n            v37 = v38;\n            if ((int32_t)v38 == 2) {\n                goto lab_0x4041f0;\n            } else {\n                goto lab_0x404478;\n            }\n        }\n    } else {\n        goto lab_0x404478;\n    }\n  lab_0x40440e:\n    // 0x40440e\n    closedir(dirp);\n    v23 = path;\n    if (*v25 != 0) {\n        goto lab_0x4043f8;\n    } else {\n        goto lab_0x404420;\n    }\n  lab_0x4043d9:;\n    struct dirent * v39 = readdir(dirp); // 0x4043dc\n    v15 = v39;\n    if (v39 == NULL) {\n        goto lab_0x40440e;\n    }\n    goto lab_0x4043e6;\n  lab_0x404420:\n    // 0x404420\n    if (*(int64_t *)(v21 + 88) != 0) {\n        goto lab_0x404452_4;\n    }\n    int64_t v40 = function_40aa00(*(int64_t *)(v21 + 48), v23); // 0x40442b\n    if (*(char *)v40 == 46) {\n        int64_t v41 = v40 + 1; // 0x4045aa\n        char v42 = *(char *)(v41 + (int64_t)(*(char *)v41 == 46)); // 0x4045b1\n        if (v42 != 0 == (v42 != 47)) {\n            goto lab_0x404439;\n        } else {\n            // 0x4045c2\n            function_40dca0(2, 4, *(int64_t *)(v21 + 56));\n            function_40dca0(1, 4, (int64_t)\"..\");\n            function_40dca0(0, 4, (int64_t)\".\");\n            error(0, (int32_t)\"refusing to remove %s or %s directory: skipping %s\" ^ (int32_t)\"refusing to remove %s or %s directory: skipping %s\", dcgettext(NULL, \"refusing to remove %s or %s directory: skipping %s\", 5));\n            goto lab_0x404256;\n        }\n    } else {\n        goto lab_0x404439;\n    }\n  lab_0x40424d:\n    // 0x40424d\n    error(0, err_num2, format);\n    goto lab_0x404256;\n  lab_0x404439:;\n    int64_t v59 = *(int64_t *)(v1 + 16); // 0x404439\n    if (v59 == 0) {\n        goto lab_0x404452_4;\n    }\n    // 0x404442\n    if (*(int64_t *)(v21 + 128) != *(int64_t *)v59) {\n        goto lab_0x404452_4;\n    }\n    // 0x404658\n    if (*(int64_t *)(v21 + 120) != *(int64_t *)(v59 + 8)) {\n        goto lab_0x404452_4;\n    }\n    int64_t * v60 = (int64_t *)(v21 + 56); // 0x404666\n    int64_t v61 = *v60; // 0x404666\n    int64_t v62 = 2; // 0x4041b0\n    int64_t v63 = v61;\n    int64_t v64 = (int64_t)\"/\";\n    unsigned char v65 = *(char *)v63; // 0x404677\n    char v66 = *(char *)v64; // 0x404677\n    char v67 = v66; // 0x404677\n    bool v68 = false; // 0x404677\n    while (v65 == v66) {\n        int64_t v69 = v62 - 1; // 0x404677\n        int64_t v70 = v64 + v9; // 0x404677\n        int64_t v71 = v63 + v9; // 0x404677\n        v62 = v69;\n        v67 = v65;\n        v68 = true;\n        if (v69 == 0) {\n            // break -> \n            break;\n        }\n        v63 = v71;\n        v64 = v70;\n        v65 = *(char *)v63;\n        v66 = *(char *)v64;\n        v67 = v66;\n        v68 = false;\n    }\n    unsigned char v72 = v67;\n    if ((v65 >= v72 && !v68) != v65 < v72) {\n        // 0x40480e\n        function_40dca0(1, 4, (int64_t)\"/\");\n        function_40dca0(0, 4, *v60);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n    } else {\n        // 0x404686\n        function_40dd80(4, v61);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n    }\n    // 0x4046b8\n    error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n    goto lab_0x404256;\n  lab_0x404256:\n    // 0x404256\n    fts_set(v4, v21, 4);\n    fts_read(v4);\n    int64_t v43 = fts_read(v4); // 0x404277\n    v6 = 4;\n    if (v43 == 0) {\n        goto lab_0x404288_2;\n    }\n    // 0x404204\n    v16 = g74;\n    v20 = v43;\n    v22 = v21;\n    v18 = 4;\n    goto lab_0x404204;\n  lab_0x404536:\n    // 0x404536\n    function_40dd80(4, *(int64_t *)(v21 + 56));\n    error(0, err_num3, dcgettext(NULL, \"cannot remove %s\", 5));\n    if (*(int64_t *)(*(int64_t *)(v21 + 8) + 88) >= 0) {\n        int64_t v44; // 0x4041b0\n        int64_t v45 = v44;\n        int64_t * v46 = (int64_t *)(v45 + 32); // 0x404597\n        int64_t v47 = *v46; // 0x404597\n        while (v47 == 0) {\n            // 0x404580\n            *v46 = 1;\n            int64_t v48 = *(int64_t *)(v45 + 8); // 0x404588\n            int64_t v49 = *(int64_t *)(v48 + 88); // 0x40458c\n            v44 = v48;\n            if (v49 < 0) {\n                // break -> 0x404256\n                break;\n            }\n            v45 = v44;\n            v46 = (int64_t *)(v45 + 32);\n            v47 = *v46;\n        }\n    }\n    goto lab_0x404256;\n  lab_0x4043f8:\n    // 0x4043f8\n    err_num3 = 39;\n    if (*v7 == 0) {\n        // 0x404530\n        err_num3 = 21;\n        goto lab_0x404536;\n    } else {\n        goto lab_0x404536;\n    }\n  lab_0x4042e8:;\n    int64_t v50 = (v24 - 4 & -3) == 0; // 0x404301\n    int64_t v51 = function_403d00(v4, v21, v50, v1, 3, 0); // 0x40430b\n    int64_t v52 = v51; // 0x404316\n    if ((int32_t)v51 == 2) {\n        // 0x4044c0\n        v52 = function_403a80(v4, v21, v1, v50);\n    }\n    goto lab_0x40431c;\n  lab_0x40431c:;\n    int32_t v53 = v52;\n    if (v53 < 5) {\n        // 0x404329\n        v14 = v21;\n        v17 = 4;\n        if (v53 != 4) {\n            // 0x404333\n            v14 = v21;\n            v17 = v19;\n            if (v53 == 3) {\n                // 0x40433d\n                v14 = v21;\n                v17 = (int32_t)v19 == 2 ? 3 : v19 & 0xffffffff;\n            }\n        }\n    } else {\n        // 0x404862\n        __assert_fail(\"VALID_STATUS (s)\", \"src/remove.c\", 574, \"rm\");\n        v14 = (int64_t)\"src/remove.c\";\n        v17 = 4;\n    }\n    goto lab_0x4041f0;\n  lab_0x4041f0:\n    // 0x4041f0\n    v13 = v17;\n    v12 = fts_read(v4);\n    g74 = v12;\n    v6 = v13;\n    if (v12 == 0) {\n        goto lab_0x404288_2;\n    }\n    goto lab_0x404204_2;\n  lab_0x404478:;\n    int64_t v54 = *(int64_t *)(v21 + 8); // 0x404478\n    int64_t v55 = v54; // 0x404481\n    if (*(int64_t *)(v54 + 88) >= 0) {\n        goto lab_0x40449b;\n    } else {\n        goto lab_0x4044a2;\n    }\n  lab_0x40449b:;\n    int64_t v56 = v55;\n    int64_t * v57 = (int64_t *)(v56 + 32); // 0x40449b\n    if (*v57 == 0) {\n        // 0x404488\n        *v57 = 1;\n        int64_t v58 = *(int64_t *)(v56 + 8); // 0x404490\n        v55 = v58;\n        if (*(int64_t *)(v58 + 88) < 0) {\n            goto lab_0x4044a2;\n        } else {\n            goto lab_0x40449b;\n        }\n    } else {\n        goto lab_0x4044a2;\n    }\n  lab_0x4044a2:\n    // 0x4044a2\n    fts_set(v4, v21, 4);\n    fts_read(v4);\n    v52 = v37;\n    goto lab_0x40431c;\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "4048d4",
            "decompiledFuncCode": "int64_t function_404890(int64_t a1, int32_t a2) {\n    if ((a2 & 0xf000) == 0xa000 || (char)function_4100a0() != 0) {\n        // 0x40489e\n        return 1;\n    }\n    int32_t v1 = euidaccess((char *)a1, 2); // 0x4048c8\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "404982",
            "decompiledFuncCode": "int64_t function_4048e0(int64_t a1, uint64_t a2) {\n    int64_t v1 = g48; // 0x4048f2\n    if (g48 == 0) {\n        int64_t * mem = calloc(g26, 1); // 0x404954\n        if (mem == NULL) {\n            // 0x404967\n            g48 = &g47;\n            g26 = 1024;\n            v1 = &g47;\n        } else {\n            int64_t v2 = (int64_t)mem; // 0x404954\n            g48 = v2;\n            v1 = v2;\n        }\n    }\n    // 0x4048f4\n    if (a2 == 0) {\n        // 0x40492e\n        return 1;\n    }\n    int64_t v3 = a1 & 0xffffffff; // 0x4048ea\n    uint64_t v4 = (int64_t)g26; // 0x404905\n    int64_t v5 = v4 > a2 ? a2 : v4; // 0x404919\n    if (function_40afb0(v3, v1, v5) != v5) {\n        // 0x40492e\n        return 0;\n    }\n    int64_t v6 = a2; // 0x40492c\n    v6 -= v5;\n    int64_t result = 1; // 0x404903\n    while (v6 != 0) {\n        uint64_t v7 = (int64_t)g26; // 0x404905\n        int64_t v8 = v6 < v7 ? v6 : v7; // 0x404919\n        result = 0;\n        if (function_40afb0(v3, g48, v8) != v8) {\n            // break -> 0x40492e\n            break;\n        }\n        v6 -= v8;\n        result = 1;\n    }\n    // 0x40492e\n    return result;\n}\n"
        },
        {
            "funcName": "function_404990",
            "funcStartAddr": "404990",
            "funcEndAddr": "4049c7",
            "decompiledFuncCode": "int64_t function_404990(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = fallocate((int32_t)a1, 3, (int32_t)a2, (int32_t)a3); // 0x40499c\n    int64_t result = v1; // 0x4049a1\n    if (v1 >= 0) {\n        // 0x4049a7\n        return result;\n    }\n    int32_t v2 = *__errno_location(); // 0x4049b5\n    return v2 != 38 == (v2 != 95) ? result : 0;\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049ed",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t a1, int64_t path, int64_t mode) {\n    int32_t fd = a1; // 0x4049d5\n    if (fd >= 0) {\n        // 0x4049e8\n        return fchmod(fd, (int32_t)mode);\n    }\n    // 0x4049d9\n    return chmod((char *)path, (int32_t)mode);\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "404a30",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t a1) {\n    int32_t * err_num = __errno_location(); // 0x4049f1\n    *err_num = 95;\n    error(1, *err_num, dcgettext(NULL, \"failed to restore the default file creation context\", 5));\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404ade",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1, int64_t a2, char a3) {\n    int64_t v1 = function_40dca0(1, 4, a2); // 0x404a47\n    __printf_chk(1, \"%s -> %s\", (char *)function_40dca0(0, 4, a1), (char *)v1);\n    if (a3 != 0) {\n        // 0x404a7a\n        function_40dd80(4, (int64_t)a3);\n        __printf_chk(1, dcgettext(NULL, \" (backup: %s)\", 5));\n    }\n    int64_t v2 = (int64_t)g39; // 0x404aad\n    int64_t * v3 = (int64_t *)(v2 + 40); // 0x404ab4\n    uint64_t result = *v3; // 0x404ab4\n    if (result >= *(int64_t *)(v2 + 48)) {\n        // 0x404ad0\n        return __overflow(g39, 10);\n    }\n    // 0x404abe\n    *v3 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404c0c",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ae0\n    int64_t v1; // 0x404ae0\n    int32_t v2 = v1;\n    if ((char)function_404890(a2, v2) != 0) {\n        // 0x404ba0\n        function_40dd80(4, a2);\n        __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: overwrite %s? \", 5));\n        return function_4103f0();\n    }\n    // 0x404b05\n    int64_t v3; // bp-52, 0x404ae0\n    function_40ad20(v2, &v3);\n    function_40dd80(4, a2);\n    if (*(char *)(a1 + 24) == 0) {\n        // 0x404b44\n        if ((*(int32_t *)(a1 + 20) & 0xffff00) == 0) {\n            // 0x404b62\n            __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5));\n            return function_4103f0();\n        }\n    }\n    // 0x404b62\n    __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5));\n    return function_4103f0();\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404d13",
            "decompiledFuncCode": "int64_t function_404c10(int64_t a1, int64_t a2, uint64_t a3, char a4, int32_t a5) {\n    int32_t v1 = function_409b50(0xffffff9c, a1, 0xffffff9c, a2, 1024 * (int32_t)(bool)((char)a5 != 0), a3 % 256); // 0x404c47\n    if (v1 < 0) {\n        // 0x404cb0\n        function_40dca0(1, 4, a1);\n        function_40dca0(0, 4, a2);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot create hard link %s to %s\", 5));\n        return 0;\n    }\n    unsigned char v2 = (char)(v1 != 0) & a4; // 0x404c4e\n    if (v2 == 0) {\n        // 0x404c53\n        return 1;\n    }\n    // 0x404c68\n    function_40dd80(4, a2);\n    __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n    return a1 & 0xffffff00 | (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_404d20",
            "funcStartAddr": "404d20",
            "funcEndAddr": "404dd7",
            "decompiledFuncCode": "int64_t function_404d20(uint32_t fd, int64_t a2, char a3, int64_t offset) {\n    int32_t v1 = lseek(fd, (int32_t)offset, SEEK_CUR); // 0x404d3d\n    int64_t v2; // 0x404d20\n    if (v1 < 0) {\n        // 0x404d90\n        function_40dd80(4, a2);\n        v2 = (int64_t)\"cannot lseek %s\";\n    } else {\n        if (a3 == 0 || (int32_t)function_404990((int64_t)fd, (int64_t)v1 - offset, offset) >= 0) {\n            // 0x404d4c\n            return 1;\n        }\n        // 0x404d74\n        function_40dd80(4, a2);\n        v2 = (int64_t)\"error deallocating %s\";\n    }\n    // 0x404daa\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v2, 5));\n    return (int32_t)&g76 ^ (int32_t)&g76;\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "405203",
            "decompiledFuncCode": "int64_t function_404de0(char fd, int64_t a2, int64_t buf, uint64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10, int64_t a11) {\n    char * v1 = (char *)a11; // 0x404e18\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)a10; // 0x404e38\n    *v2 = 0;\n    if (a9 == 0) {\n        // 0x404ee9\n        return 1;\n    }\n    int64_t v3 = 0x100000000 * a2 >> 32; // 0x404e6f\n    int32_t v4 = v3;\n    char v5 = a6;\n    int64_t v6 = a9; // 0x404e77\n    int64_t v7 = 0; // 0x404e77\n    int64_t v8 = 0; // 0x404e77\n    char v9; // 0x404de0\n    int64_t v10; // 0x404de0\n    int64_t v11; // 0x404de0\n    int64_t v12; // 0x404de0\n    uint64_t v13; // 0x404de0\n    int64_t v14; // 0x404de0\n    int64_t v15; // 0x404de0\n    int64_t v16; // 0x404de0\n    int64_t v17; // 0x404de0\n    int64_t v18; // 0x404de0\n    int64_t result; // 0x404de0\n    int64_t v19; // 0x404de0\n    int64_t v20; // 0x404de0\n    int64_t v21; // 0x404de0\n    int64_t v22; // 0x404de0\n    int64_t v23; // 0x404de0\n    int64_t v24; // 0x404de0\n    int64_t v25; // 0x404de0\n    int64_t v26; // 0x404de0\n    int64_t v27; // 0x404de0\n    int64_t v28; // 0x404de0\n    int64_t v29; // 0x404de0\n    int64_t v30; // 0x404de0\n    int64_t v31; // 0x404de0\n    int64_t v32; // 0x404de0\n    int64_t v33; // 0x404de0\n    uint64_t v34; // 0x404de0\n    int64_t v35; // 0x404de0\n    uint64_t v36; // 0x404de0\n    int64_t v37; // 0x404e96\n    int64_t v38; // 0x404f33\n    while (true) {\n      lab_0x404e7c:\n        // 0x404e7c\n        v18 = v8;\n        v15 = v7;\n        v36 = v6;\n        int32_t nbyte = v36 < a4 ? v36 : a4; // 0x404e96\n        int32_t v39 = read((int32_t)fd, (int64_t *)buf, nbyte); // 0x404e96\n        while (v39 < 0) {\n            int32_t * err_num = __errno_location(); // 0x404ea5\n            if (*err_num != 4) {\n                // 0x404eaf\n                function_40dd80(4, a7);\n                error(0, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            v39 = read((int32_t)fd, (int64_t *)buf, nbyte);\n        }\n        if (v39 == 0) {\n            // break -> 0x404f00\n            break;\n        }\n        // 0x404f06\n        v37 = v39;\n        *v2 = *v2 + v37;\n        int64_t v40 = a5 == 0 ? a4 : a5; // 0x404f2b\n        int64_t v41 = v25; // 0x404f2b\n        int64_t v42 = buf; // 0x404f2b\n        int64_t v43 = v37; // 0x404f2b\n        int64_t v44 = buf; // 0x404f2b\n        int64_t v45 = v15; // 0x404f2b\n        int64_t v46 = v18; // 0x404f2b\n        while (true) {\n            // 0x404f30\n            v14 = v44;\n            v13 = v43;\n            int64_t * str = (int64_t *)v14;\n            v33 = v40;\n            v28 = v41;\n            v10 = v42;\n            v16 = v45;\n            v19 = v46;\n            while (true) {\n              lab_0x404f30:\n                // 0x404f30\n                v20 = v19;\n                v17 = v16;\n                v11 = v10;\n                v34 = v33;\n                v38 = v34 > v13 ? v13 : v34;\n                int64_t v47 = v28 & -256; // 0x404f3a\n                int64_t v48 = v47 | (int64_t)!((a5 == 0 | v38 == 0)); // 0x404f3e\n                int64_t v49 = v38; // 0x404f43\n                int64_t v50 = v14; // 0x404f43\n                if (a5 == 0 || v38 == 0) {\n                    char v51 = v17;\n                    int64_t v52 = v17 & 0xffffffff; // 0x40501e\n                    v9 = v51;\n                    v30 = v52;\n                    v32 = v52;\n                    if (v38 != 0 == ((v51 ^ 1) & (char)(v13 <= v34)) == 0) {\n                        // break -> 0x405099\n                        break;\n                    }\n                    goto lab_0x405030;\n                } else {\n                    int64_t v53 = v50;\n                    while (*(char *)v53 == 0) {\n                        int64_t n = v49 - 1; // 0x404f5c\n                        if (n == 0) {\n                            // 0x405080\n                            v31 = v48;\n                            v23 = (v17 ^ 1) & (int64_t)(v20 != 0);\n                            goto lab_0x405090;\n                        }\n                        int64_t str2 = v53 + 1; // 0x404f58\n                        v49 = n;\n                        v50 = str2;\n                        if (n % 16 == 0) {\n                            int32_t memcmp_rc = memcmp(str, (int64_t *)str2, (int32_t)n); // 0x404f73\n                            int64_t v54 = v47 | (int64_t)(memcmp_rc == 0); // 0x404f7f\n                            v24 = memcmp_rc != 0;\n                            v35 = v54 ^ v17;\n                            v29 = v54;\n                            goto lab_0x404f8d;\n                        }\n                        v53 = v50;\n                    }\n                    // 0x405160\n                    v24 = v48 & 0xffffff01;\n                    v35 = v17;\n                    v29 = 0;\n                    goto lab_0x404f8d;\n                }\n            }\n          lab_0x405099:\n            if (0x7fffffffffffffff - v38 < v20) {\n                // 0x405120\n                function_40dd80(4, a7);\n                error(0, (int32_t)\"overflow reading %s\" ^ (int32_t)\"overflow reading %s\", dcgettext(NULL, \"overflow reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            // 0x4050ab\n            v26 = v32;\n            v12 = v11;\n            v21 = v20 + v38;\n          lab_0x4050b7_2:\n            // 0x4050b7\n            v46 = v21;\n            v42 = v12;\n            v41 = v26;\n            v45 = v41 & 0xffffffff;\n            v43 = v13 - v38;\n            v40 = v38;\n            v44 = v38 + v14;\n            v7 = v45;\n            v27 = v41;\n            v22 = v46;\n            if (v43 == 0) {\n                // break -> 0x4050e3\n                break;\n            }\n        }\n        goto lab_0x4050e3_2;\n    }\n    char v55 = v15; // 0x404de0\n    int64_t v56 = v18; // 0x404de0\n  lab_0x4051b3:\n    // 0x4051b3\n    result = 1;\n    if (v55 != 0) {\n        // 0x4051b8\n        return function_404d20(v4, a8, v5, v56);\n    }\n  lab_0x404ee9:\n    // 0x404ee9\n    return result;\n  lab_0x405030:;\n    int64_t v57 = v20 + v38; // 0x405033\n    int32_t v58 = 1; // 0x405046\n    int64_t v59 = 0; // 0x405046\n    int64_t v60 = v30; // 0x405046\n    int64_t v61 = v57; // 0x405046\n    int32_t v62 = 1; // 0x405046\n    int64_t v63 = 0; // 0x405046\n    int64_t v64 = v30; // 0x405046\n    int64_t v65 = v57; // 0x405046\n    if (v9 == 0) {\n        goto lab_0x404fc9;\n    } else {\n        goto lab_0x40504c;\n    }\n  lab_0x404f8d:;\n    int64_t v66 = v35 & (int64_t)(v20 != 0);\n    v31 = v29;\n    v23 = v66;\n    int64_t v67; // 0x404de0\n    int64_t v68; // 0x404de0\n    int32_t v69; // 0x404de0\n    if (v13 > v34 || (char)v24 == 0) {\n        goto lab_0x405090;\n    } else {\n        // 0x404fa8\n        v69 = 1;\n        v68 = 0;\n        v67 = 1;\n        if (v66 == 0) {\n            // 0x404fa8\n            v9 = v17;\n            v30 = 0;\n            goto lab_0x405030;\n        } else {\n            goto lab_0x404fbb;\n        }\n    }\n  lab_0x404fc9:;\n    int64_t v70 = v61;\n    int32_t v71 = v58; // 0x404fe1\n    int64_t v72 = v60; // 0x404fe1\n    int64_t v73 = v59; // 0x404fe1\n    if (v70 != function_40afb0(v3 & 0xffffffff, v11, v70)) {\n        // 0x40516c\n        function_40dd80(4, a8);\n        error(0, *__errno_location(), dcgettext(NULL, \"error writing %s\", 5));\n        result = v17 & 0xffffffff;\n        return result;\n    }\n    goto lab_0x404fe7;\n  lab_0x40504c:;\n    int64_t v76 = function_404d20(v4, a8, v5, v65); // 0x40505d\n    v71 = v62;\n    v72 = v64;\n    v73 = v63;\n    if ((char)v76 == 0) {\n        // 0x405070\n        result = v76 & 0xffffffff;\n        goto lab_0x404ee9;\n    }\n    goto lab_0x404fe7;\n  lab_0x405090:\n    // 0x405090\n    v69 = 0;\n    v68 = v31;\n    v67 = v23;\n    v32 = v31;\n    if ((char)v23 == 0) {\n        // break -> 0x405099\n        goto lab_0x405099;\n    }\n    goto lab_0x404fbb;\n  lab_0x404fe7:;\n    int64_t v74 = v72;\n    v26 = v74;\n    v12 = v14;\n    v21 = v38;\n    if (v71 == 0) {\n        goto lab_0x4050b7_2;\n    }\n    if (v38 == 0) {\n        // 0x4050e3\n        v7 = v74 & 0xffffffff;\n        v27 = v74;\n        v22 = 0;\n        goto lab_0x4050e3_2;\n    }\n    // 0x404ffc\n    v26 = v74;\n    v12 = v14;\n    v21 = 0;\n    if (v73 % 256 == 0) {\n        goto lab_0x4050b7_2;\n    }\n    // 0x405005\n    v33 = 0;\n    v28 = v74;\n    v10 = v14;\n    v16 = v74 & 0xffffffff;\n    v19 = v38;\n    goto lab_0x404f30;\n  lab_0x404fbb:\n    // 0x404fbb\n    v58 = v69;\n    v59 = v67;\n    v60 = v68;\n    v61 = v20;\n    v62 = v69;\n    v63 = v67;\n    v64 = v68;\n    v65 = v20;\n    if ((char)v17 != 0) {\n        goto lab_0x40504c;\n    } else {\n        goto lab_0x404fc9;\n    }\n  lab_0x4050e3_2:\n    // 0x4050e3\n    v8 = v22;\n    v6 = v36 - v37;\n    char v75 = v27;\n    *v1 = v75;\n    v25 = v27;\n    v55 = v75;\n    v56 = v8;\n    if (v6 == 0) {\n        goto lab_0x4051b3;\n    }\n    goto lab_0x404e7c;\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "4052d8",
            "decompiledFuncCode": "int64_t function_405210(int64_t a1, int64_t a2, int32_t a3, char a4, int64_t a5) {\n    // 0x405210\n    if (*(char *)(a5 + 37) == 0) {\n        unsigned char v1 = *(char *)(a5 + 33) & a4; // 0x4052a2\n        if (v1 == 0) {\n            // 0x4052a8\n            return 1;\n        }\n        // 0x4052c0\n        *__errno_location() = 95;\n        return (int64_t)a4 & 0xffffff00 | (int64_t)v1;\n    }\n    int32_t * err_num = __errno_location(); // 0x405227\n    char * v2 = (char *)(a5 + 38);\n    if (*(char *)(a5 + 35) != 0) {\n        char v3 = *v2; // 0x405288\n        if (v3 == 0) {\n            // 0x405290\n            *err_num = 95;\n            // 0x405275\n            return v3 ^ 1;\n        }\n    }\n    // 0x405235\n    *err_num = 95;\n    function_40dd80(4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to get security context of %s\", 5));\n    // 0x405275\n    return (int64_t)(*v2 ^ 1);\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "405353",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1, char a2, int32_t a3, int64_t a4) {\n    int32_t * err_num = __errno_location(); // 0x4052ea\n    if (*(char *)(a4 + 35) != 0) {\n        // 0x405340\n        if (*(char *)(a4 + 38) == 0) {\n            // 0x405346\n            *err_num = 95;\n            return 0;\n        }\n    }\n    // 0x4052f8\n    *err_num = 95;\n    function_40dca0(0, 4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to set the security context of %s\", 5));\n    return (int32_t)&g76 ^ (int32_t)&g76;\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "405386",
            "decompiledFuncCode": "int64_t function_405360(int64_t * a1, int64_t a2) {\n    int64_t result = function_40b8c0(61, 0, 0x40c280, 0x40c2c0, 0x40c330); // 0x40537b\n    *(int64_t *)((int64_t)a1 + 56) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4053b6",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, int64_t a2) {\n    int64_t result = function_40b8c0(61, 0, 0x40c2b0, 0x40c2c0, 0x40c330); // 0x4053ab\n    *(int64_t *)(a1 + 64) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "4053f1",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t * a1) {\n    // 0x4053c0\n    int128_t v1; // 0x4053c0\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x4053c1\n    *(int64_t *)(v3 + 64) = 0;\n    int64_t v5; // 0x4053c0\n    __asm_movups(*(int128_t *)&v5, v4);\n    __asm_movups(*(int128_t *)(v3 + 16), v4);\n    __asm_movups(*(int128_t *)(v3 + 32), v4);\n    __asm_movups(*(int128_t *)(v3 + 48), v4);\n    int32_t v6 = geteuid(); // 0x4053df\n    char v7 = v6 == 0; // 0x4053e9\n    *(char *)(v3 + 27) = v7;\n    *(char *)(v3 + 26) = v7;\n    return (int64_t)(v6 & -256) | (int64_t)(v6 == 0);\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "405424",
            "decompiledFuncCode": "int64_t function_405400(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405404\n    int32_t v2 = *v1; // 0x405409\n    bool v3 = v2 == 1 | v2 == 22;\n    int64_t result = (int64_t)v1 & -256 | (int64_t)v3; // 0x405419\n    if (v3) {\n        // 0x40541b\n        result = (int64_t)(*(char *)(a1 + 26) ^ 1);\n    }\n    // 0x405422\n    return result;\n}\n"
        },
        {
            "funcName": "function_405430",
            "funcStartAddr": "405430",
            "funcEndAddr": "40561b",
            "decompiledFuncCode": "int64_t function_405430(int64_t a1, int64_t a2, int64_t a3, int64_t a4, char a5, int64_t * a6) {\n    int32_t owner = *(int32_t *)(a4 + 28); // 0x405446\n    int32_t group = *(int32_t *)(a4 + 32); // 0x40544a\n    int64_t v1; // 0x405430\n    if (a5 != 0) {\n        goto lab_0x4054a0;\n    } else {\n        // 0x405453\n        if (*(int64_t *)(a1 + 24) % 0xff000000000100 == 0) {\n            // 0x4054f8\n            if (*(char *)(a1 + 43) == 0) {\n                goto lab_0x4054a0;\n            } else {\n                // 0x4054fe\n                v1 = a1 + 16;\n                goto lab_0x40546e;\n            }\n        } else {\n            // 0x405467\n            v1 = a4 + 24;\n            goto lab_0x40546e;\n        }\n    }\n  lab_0x4054a0:;\n    int32_t fd = a3; // 0x4054a6\n    if (fd == -1) {\n        char * path = (char *)a2; // 0x405523\n        if (lchown(path, owner, group) == 0) {\n            // 0x4054e3\n            return 1;\n        }\n        int32_t * v2 = __errno_location(); // 0x40552c\n        int32_t v3 = *v2; // 0x405531\n        if (v3 != 1 != v3 != 22) {\n            // 0x405540\n            lchown(path, -1, group);\n            *v2 = v3;\n        }\n    } else {\n        // 0x4054ab\n        if (fchown(fd, owner, group) == 0) {\n            // 0x4054e3\n            return 1;\n        }\n        int32_t * v4 = __errno_location(); // 0x4054b6\n        int32_t v5 = *v4; // 0x4054bb\n        switch (v5) {\n            case 1: {\n            }\n            case 22: {\n                // 0x4055a0\n                fchown(fd, -1, group);\n                *v4 = v5;\n                // break -> 0x4054d5\n                break;\n            }\n        }\n    }\n    // 0x4054d5\n    if ((char)function_405400(a1) != 0) {\n        // 0x4054e3\n        return 0;\n    }\n    // 0x405558\n    function_40dd80(4, a2);\n    error(0, *__errno_location(), dcgettext(NULL, \"failed to preserve ownership for %s\", 5));\n    // 0x4054e3\n    return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n  lab_0x40546e:;\n    int32_t v6 = *(int32_t *)((int64_t)a6 + 24);\n    uint32_t v7 = *(int32_t *)v1;\n    if (((v7 % 512 ^ 4095) & v6) != 0) {\n        // 0x40547e\n        if ((int32_t)function_40c430(a2, a3 & 0xffffffff, v6 & 448 & v7) != 0) {\n            int32_t * err_num = __errno_location(); // 0x4055c0\n            switch (*err_num) {\n                case 1: {\n                }\n                case 22: {\n                    // 0x405610\n                    if (*(char *)(a1 + 27) == 0) {\n                        // 0x4054e3\n                        return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n                    }\n                    // break -> 0x4055d4\n                    break;\n                }\n            }\n            // 0x4055d4\n            function_40dd80(4, a2);\n            error(0, *err_num, dcgettext(NULL, \"clearing permissions for %s\", 5));\n            // 0x4054e3\n            return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n        }\n    }\n    goto lab_0x4054a0;\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "40564a",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1) {\n    uint32_t result = g25; // 0x405621\n    if (result != -1) {\n        // 0x40562c\n        return result;\n    }\n    int32_t cmask = umask(0); // 0x405632\n    g25 = cmask;\n    umask(cmask);\n    return cmask;\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4094cc",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1, int64_t str3, char a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    // 0x405650\n    int64_t v1; // 0x405650\n    int64_t v2 = v1;\n    int64_t v3 = a6 + 24; // 0x405680\n    char * v4 = (char *)v3; // 0x405680\n    if (!((a10 == 0 | *v4 == 0))) {\n        // 0x4056a3\n        *(char *)a10 = 0;\n    }\n    int32_t * v5 = (int32_t *)(a6 + 4); // 0x4056ae\n    int64_t v6 = 1; // 0x4056b6\n    char * v7 = (char *)a9; // 0x4056bb\n    *v7 = 0;\n    int32_t v8 = v6;\n    char * file_path = (char *)a1;\n    int64_t v9; // 0x405650\n    int64_t v10; // 0x405650\n    int64_t v11; // bp-632, 0x405650\n    if (*v5 == 2) {\n        int32_t v12 = __lxstat(v8, file_path, (struct stat *)&v11); // 0x405ee0\n        v10 = v1 & -256 | (int64_t)(v12 != 0);\n        v9 = a1;\n        if (v12 == 0) {\n            goto lab_0x4056ec;\n        } else {\n            goto lab_0x405ef7;\n        }\n    } else {\n        int32_t v13 = __xstat(v8, file_path, (struct stat *)&v11); // 0x4056d5\n        v10 = v1 & -256 | (int64_t)(v13 != 0);\n        v9 = a1;\n        if (v13 != 0) {\n            goto lab_0x405ef7;\n        } else {\n            goto lab_0x4056ec;\n        }\n    }\n  lab_0x408c84:;\n    // 0x408c84\n    int64_t v14; // 0x405650\n    free((int64_t *)v14);\n    int32_t fd3; // 0x405650\n    int32_t fd = fd3; // 0x408c90\n    int64_t v15; // 0x405650\n    int64_t v16 = v15; // 0x408c90\n    int64_t v17; // 0x405650\n    int64_t v18 = v17; // 0x408c90\n    int64_t v19; // 0x405650\n    int64_t v20 = v19; // 0x408c90\n    int64_t v21; // 0x408ab9\n    int64_t v22 = v21 & 0xffffffff; // 0x408c90\n    int64_t v23 = 0; // 0x408c90\n    int64_t v24; // 0x405650\n    int64_t v25 = v24; // 0x408c90\n    int64_t v26 = v10 % 256; // 0x408c90\n    goto lab_0x408600;\n  lab_0x4056ec:;\n    int64_t v192 = &v11; // 0x4056c5\n    int32_t owner; // 0x405650\n    int32_t v138 = owner & 0xf000; // 0x4056f8\n    int64_t * v470; // 0x405650\n    int64_t v89; // 0x405650\n    int64_t v473; // 0x405650\n    int64_t v242; // 0x405650\n    if (v138 == 0x4000) {\n        // 0x405f48\n        if (*(char *)(a6 + 42) == 0) {\n            // 0x406970\n            v6 = 4;\n            function_40dd80(4, a1);\n            v242 = (int64_t)\"omitting directory %s\";\n            v473 = 5;\n            if (*(char *)(a6 + 25) == 0) {\n                goto lab_0x406ad8;\n            } else {\n                goto lab_0x406992;\n            }\n        } else {\n            if ((char)a7 == 0) {\n                goto lab_0x405732;\n            } else {\n                // 0x405f53\n                v470 = (int64_t *)(a6 + 64);\n                goto lab_0x40635f;\n            }\n        }\n    } else {\n        if ((char)a7 == 0) {\n            goto lab_0x405732;\n        } else {\n            int64_t * v694 = (int64_t *)(a6 + 64);\n            int64_t v695 = *v694; // 0x405716\n            v6 = v695;\n            if (*(int32_t *)&v89 == 0) {\n                uint64_t v696 = function_40abf0(v695, a1, v192); // 0x406352\n                v470 = v694;\n                if ((char)v696 != 0) {\n                    // 0x407330\n                    function_40dd80(4, a1);\n                    error(0, (int32_t)\"warning: source file %s specified more than once\" ^ (int32_t)\"warning: source file %s specified more than once\", dcgettext(NULL, \"warning: source file %s specified more than once\", 5));\n                    // 0x405f31\n                    return v696 % 256 & 0xffffffff;\n                }\n                goto lab_0x40635f;\n            } else {\n                // 0x405723\n                function_40ab60(v695, a1, v192);\n                goto lab_0x405732;\n            }\n        }\n    }\n  lab_0x405ef7:\n    // 0x405ef7\n    function_40dd80(4, v9);\n    error(0, *__errno_location(), dcgettext(NULL, \"cannot stat %s\", 5));\n    // 0x405f31\n    return 0;\n  lab_0x405732:;\n    // 0x405732\n    int64_t v471; // bp-888, 0x405650\n    int64_t v135 = &v471; // 0x405666\n    int64_t v79 = a7 & 0xffffffff; // 0x405685\n    int32_t v472 = *v5; // 0x40573c\n    int32_t v397 = v472 == 4 ? 1 : (int32_t)((int64_t)(v472 == 3) & a7);\n    int64_t v278; // 0x405662\n    if (a3 != 0) {\n        goto lab_0x405a90;\n    } else {\n        // 0x40575f\n        v278 = (int64_t)a3 & 0xffffffff;\n        if (v138 == 0x8000) {\n            goto lab_0x40578d;\n        } else {\n            // 0x40576c\n            if (*(char *)(a6 + 20) == 0) {\n                goto lab_0x406200;\n            } else {\n                switch ((int16_t)v138) {\n                    case -0x6000: {\n                        goto lab_0x406200;\n                    }\n                    case 0x4000: {\n                        goto lab_0x406200;\n                    }\n                    default: {\n                        goto lab_0x40578d;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406ad8:\n    // 0x406ad8\n    v6 = 0;\n    // 0x406999\n    error(0, 0, dcgettext(NULL, \"-r not specified; omitting directory %s\", (int32_t)v473));\n    // 0x405f31\n    return 0;\n  lab_0x406992:\n    // 0x406992\n    v6 = 0;\n    // 0x406999\n    error(0, 0, dcgettext(NULL, (char *)v242, 5));\n    // 0x405f31\n    return 0;\n  lab_0x405a90:;\n    // 0x405a90\n    int128_t v93; // 0x405650\n    int32_t v123 = v93; // 0x405a99\n    char v125 = 0; // 0x405a99\n    int64_t v126 = 1; // 0x405a99\n    int64_t v130 = v93; // 0x405a99\n    int64_t v132 = 0; // 0x405a99\n    int64_t v134 = v135; // 0x405a99\n    goto lab_0x405aa4;\n  lab_0x40635f:\n    // 0x40635f\n    function_40ab60(*v470, a1, v192);\n    goto lab_0x405732;\n  lab_0x405aa4:;\n    int32_t v243 = v123; // 0x405aa6\n    char v244 = v125; // 0x405aa6\n    int64_t v245 = v126; // 0x405aa6\n    int128_t v128; // 0x405650\n    int128_t v246 = v128; // 0x405aa6\n    int64_t v247 = v130; // 0x405aa6\n    int64_t v248 = v134; // 0x405aa6\n    int64_t v249; // 0x405650\n    int64_t v250; // 0x405650\n    int32_t v251; // 0x405650\n    int64_t v252; // 0x405650\n    int128_t v253; // 0x405650\n    int64_t v254; // 0x405650\n    char v255; // 0x405650\n    if ((char)a7 != 0) {\n        // 0x405ed0\n        v251 = v123;\n        v255 = v125;\n        v254 = v126;\n        v253 = v128;\n        v252 = v130;\n        v249 = v132;\n        v250 = v134;\n        v243 = v123;\n        v244 = v125;\n        v245 = v126;\n        v246 = v128;\n        v247 = v130;\n        v248 = v134;\n        if (*(int64_t *)(a6 + 56) != 0) {\n            goto lab_0x4059e0;\n        } else {\n            goto lab_0x405aac;\n        }\n    } else {\n        goto lab_0x405aac;\n    }\n  lab_0x40578d:;\n    // 0x40578d\n    int64_t v256; // 0x405650\n    int32_t v165; // bp-488, 0x405650\n    bool v257; // 0x405650\n    if (*v4 != 0) {\n        goto lab_0x406200;\n    } else {\n        // 0x405798\n        if (*(char *)(a6 + 44) != 0) {\n            goto lab_0x406200;\n        } else {\n            // 0x4057a3\n            if (*(char *)(a6 + 23) != 0) {\n                goto lab_0x406200;\n            } else {\n                // 0x4057ae\n                if (*(int32_t *)&v89 != 0) {\n                    goto lab_0x406200;\n                } else {\n                    // 0x4057bb\n                    if (*(char *)(a6 + 21) != 0) {\n                        goto lab_0x406200;\n                    } else {\n                        // 0x4057c6\n                        v6 = 1;\n                        int32_t v258 = __xstat(1, (char *)str3, (struct stat *)&v165); // 0x4057e3\n                        v257 = v258 != 0;\n                        v256 = 1;\n                        if (v258 != 0) {\n                            goto lab_0x40623b;\n                        } else {\n                            goto lab_0x405804;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405aac:;\n    int32_t v259 = v243; // 0x405ab1\n    char v260 = v244; // 0x405ab1\n    int64_t v261 = v245; // 0x405ab1\n    int128_t v262 = v246; // 0x405ab1\n    int64_t v263 = v247; // 0x405ab1\n    int64_t v264 = v248; // 0x405ab1\n    int64_t v265; // 0x405650\n    int64_t v266; // 0x405650\n    int32_t v267; // 0x405650\n    int32_t v268; // 0x405650\n    int64_t v269; // 0x405650\n    int64_t v270; // 0x405650\n    int128_t v271; // 0x405650\n    int128_t v272; // 0x405650\n    int64_t v273; // 0x405650\n    int64_t v274; // 0x405650\n    char v275; // 0x405650\n    char v276; // 0x405650\n    if (*(char *)(a6 + 46) == 0) {\n        goto lab_0x405f70;\n    } else {\n        // 0x405ab7\n        v268 = v243;\n        v276 = v244;\n        v274 = v245;\n        v272 = v246;\n        v270 = v247;\n        v266 = v248;\n        v267 = v243;\n        v275 = v244;\n        v273 = v245;\n        v271 = v246;\n        v269 = v247;\n        v265 = v248;\n        if (*v4 != 0) {\n            goto lab_0x406130;\n        } else {\n            goto lab_0x405ac2;\n        }\n    }\n  lab_0x406200:\n    // 0x406200\n    v6 = 1;\n    int32_t v277 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x40621d\n    v257 = false;\n    v256 = v278;\n    if (v277 == 0) {\n        goto lab_0x405804;\n    } else {\n        goto lab_0x40623b;\n    }\n  lab_0x4059e0:;\n    // 0x4059e0\n    int64_t v279; // 0x405650\n    int64_t v280; // 0x405650\n    int64_t v281; // 0x405650\n    int32_t v282; // 0x405650\n    int32_t v283; // 0x405650\n    int64_t v86; // bp-200, 0x405650\n    int64_t v284; // 0x405650\n    int64_t v285; // 0x405650\n    int128_t v286; // 0x405650\n    int128_t v287; // 0x405650\n    int64_t v288; // 0x405650\n    int64_t v289; // 0x405650\n    char v290; // 0x405650\n    char v291; // 0x405650\n    if (*v4 != 0) {\n        // 0x405f60\n        v259 = v251;\n        v260 = v255;\n        v261 = v254;\n        v262 = v253;\n        v263 = v252;\n        v264 = v250;\n        v267 = v251;\n        v275 = v255;\n        v273 = v254;\n        v271 = v253;\n        v269 = v252;\n        v265 = v250;\n        if (*(char *)(a6 + 46) != 0) {\n            goto lab_0x406130;\n        } else {\n            goto lab_0x405f70;\n        }\n    } else {\n        // 0x4059eb\n        if (*(int32_t *)&v89 != 0) {\n            // 0x406490\n            v268 = v251;\n            v276 = v255;\n            v274 = v254;\n            v272 = v253;\n            v270 = v252;\n            v266 = v250;\n            if (*(char *)(a6 + 46) != 0) {\n                goto lab_0x405ac2;\n            } else {\n                // 0x40649b\n                v283 = v251;\n                v291 = v255;\n                v289 = v254;\n                v287 = v253;\n                v285 = v252;\n                v281 = v250;\n                v282 = v251;\n                v290 = v255;\n                v288 = v254;\n                v286 = v253;\n                v284 = v252;\n                v280 = v250;\n                if (v138 != 0x4000) {\n                    goto lab_0x405af3;\n                } else {\n                    goto lab_0x4064b0;\n                }\n            }\n        } else {\n            // 0x4059f7\n            v279 = &v165;\n            if ((char)v249 == 0) {\n                int32_t v292 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x407411\n                v243 = v251;\n                v244 = v255;\n                v245 = v254;\n                v246 = v253;\n                v247 = v252;\n                v248 = v250;\n                if (v292 != 0) {\n                    goto lab_0x405aac;\n                } else {\n                    // 0x40741e\n                    v279 = &v86;\n                    goto lab_0x405a06;\n                }\n            } else {\n                goto lab_0x405a06;\n            }\n        }\n    }\n  lab_0x405f70:;\n    int32_t v293 = v259; // 0x405f75\n    char v294 = v260; // 0x405f75\n    int64_t v295 = v261; // 0x405f75\n    int128_t v296 = v262; // 0x405f75\n    int64_t v297 = v263; // 0x405f75\n    int64_t v298 = v264; // 0x405f75\n    int32_t v299 = v259; // 0x405f75\n    char v300 = v260; // 0x405f75\n    int64_t v301 = v261; // 0x405f75\n    int128_t v302 = v262; // 0x405f75\n    int64_t v303 = v263; // 0x405f75\n    int64_t v304 = v264; // 0x405f75\n    if (v138 != 0x4000 | *(char *)(a6 + 42) == 0) {\n        goto lab_0x405ae8;\n    } else {\n        goto lab_0x405f8b;\n    }\n  lab_0x405804:;\n    int64_t v305 = &v165;\n    int64_t v97 = v257;\n    int64_t v150 = owner; // 0x40580b\n    int64_t v306; // 0x405650\n    int32_t v307; // 0x405650\n    int64_t v308; // 0x405650\n    int64_t v99; // 0x405650\n    int64_t v309; // 0x405650\n    int64_t v310; // 0x405650\n    int64_t v94; // 0x405650\n    int64_t v311; // 0x405650\n    int32_t v95; // 0x405650\n    int64_t v98; // 0x405650\n    char v70; // bp-344, 0x405650\n    int64_t v96; // 0x405650\n    int64_t v312; // 0x405650\n    if (v1 == v150) {\n        // 0x406cc8\n        if (v11 != (int64_t)v165) {\n            goto lab_0x405818;\n        } else {\n            unsigned char v313 = *(char *)(a6 + 23); // 0x406cdc\n            int32_t v314 = v93;\n            v94 = str3;\n            v95 = v314;\n            v96 = 1;\n            v98 = v93;\n            v99 = v256;\n            if (v313 != 0) {\n                goto lab_0x405823;\n            } else {\n                // 0x406cea\n                v312 = 1;\n                if (*v5 == 2) {\n                    goto lab_0x406af5;\n                } else {\n                    // 0x406cf5\n                    v6 = 1;\n                    int32_t v315 = __lxstat(1, (char *)str3, (struct stat *)&v70); // 0x406d19\n                    int64_t v316 = v256 % 256; // 0x406d1e\n                    v94 = str3;\n                    v95 = v314;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v316;\n                    if (v315 != 0) {\n                        goto lab_0x405823;\n                    } else {\n                        // 0x406d2e\n                        v6 = 1;\n                        int32_t v317 = __lxstat(1, file_path, (struct stat *)&v86); // 0x406d47\n                        v94 = a1;\n                        v95 = v314;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v316;\n                        if (v317 != 0) {\n                            goto lab_0x405823;\n                        } else {\n                            int64_t v318 = v313; // 0x406d6a\n                            // 0x406d6c\n                            v318 = v86 == (int64_t)v70;\n                            int64_t v319 = &v70; // 0x406d84\n                            v89 = v319;\n                            int64_t v320 = &v86; // 0x406d8b\n                            int32_t v321 = v319;\n                            v311 = a1;\n                            v306 = v319;\n                            v307 = v321;\n                            v310 = v320;\n                            v309 = v316;\n                            v308 = v318;\n                            if ((owner & 0xf000) != 0xa000) {\n                                goto lab_0x406b19;\n                            } else {\n                                // 0x406da2\n                                v311 = a1;\n                                v306 = v319;\n                                v307 = v321;\n                                v310 = v320;\n                                v309 = v316;\n                                v308 = v318;\n                                if ((owner & 0xf000) != 0xa000) {\n                                    goto lab_0x406b19;\n                                } else {\n                                    // 0x406db8\n                                    v94 = a1;\n                                    v95 = v314;\n                                    v96 = v97;\n                                    v98 = v93;\n                                    v99 = v316;\n                                    v311 = a1;\n                                    v306 = v319;\n                                    v307 = v321;\n                                    v310 = v320;\n                                    v309 = v316;\n                                    v308 = v318;\n                                    if (*(char *)(a6 + 21) == 0) {\n                                        goto lab_0x406b19;\n                                    } else {\n                                        goto lab_0x405823;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x405818;\n    }\n  lab_0x40623b:;\n    int32_t * v322 = __errno_location(); // 0x40623b\n    if (*v322 != 2) {\n        // 0x406249\n        function_40dd80(4, str3);\n        char * format7 = dcgettext(NULL, \"cannot stat %s\", 5); // 0x406273\n        error(0, *(int32_t *)(0x100000000000000 * (int64_t)v322 >> 56), format7);\n        // 0x405f31\n        return v278 & 0xffffffff;\n    }\n    goto lab_0x405a90;\n  lab_0x405ae8:\n    // 0x405ae8\n    v283 = v293;\n    v291 = v294;\n    v289 = v295;\n    v287 = v296;\n    v285 = v297;\n    v281 = v298;\n    int32_t v323 = v293; // 0x405aed\n    char v324 = v294; // 0x405aed\n    int64_t v325 = v295; // 0x405aed\n    int128_t v326 = v296; // 0x405aed\n    int64_t v327 = v297; // 0x405aed\n    int64_t v328 = v298; // 0x405aed\n    if (*v4 != 0) {\n        goto lab_0x406147;\n    } else {\n        goto lab_0x405af3;\n    }\n  lab_0x405f8b:;\n    int64_t v329 = owner; // 0x405f92\n    v6 = v329;\n    int64_t v330 = v329; // 0x405f9b\n    int32_t v331 = v299; // 0x405f9b\n    char v332 = v300; // 0x405f9b\n    int64_t v333 = v301; // 0x405f9b\n    int128_t v334 = v302; // 0x405f9b\n    int64_t v335 = v303; // 0x405f9b\n    int64_t v336 = v304; // 0x405f9b\n    int64_t v337; // 0x405650\n    int32_t v338; // 0x405650\n    int64_t v339; // 0x405650\n    int128_t v340; // 0x405650\n    int64_t v341; // 0x405650\n    char v342; // 0x405650\n    int64_t v343; // 0x405650\n    if ((char)a7 == 0) {\n        goto lab_0x4069d0;\n    } else {\n        // 0x405fa1\n        v338 = v299;\n        v342 = v300;\n        v341 = v301;\n        v340 = v302;\n        v339 = v303;\n        v337 = v304;\n        v343 = function_4096d0(str3, v329, v11);\n        goto lab_0x405fb7;\n    }\n  lab_0x406130:\n    // 0x406130\n    v323 = v267;\n    v324 = v275;\n    v325 = v273;\n    v326 = v271;\n    v327 = v269;\n    v328 = v265;\n    if (v138 != 0x4000) {\n        goto lab_0x406147;\n    } else {\n        // 0x40613c\n        v299 = v267;\n        v300 = v275;\n        v301 = v273;\n        v302 = v271;\n        v303 = v269;\n        v304 = v265;\n        v323 = v267;\n        v324 = v275;\n        v325 = v273;\n        v326 = v271;\n        v327 = v269;\n        v328 = v265;\n        if (*(char *)(a6 + 42) != 0) {\n            goto lab_0x405f8b;\n        } else {\n            goto lab_0x406147;\n        }\n    }\n  lab_0x405ac2:\n    // 0x405ac2\n    v282 = v268;\n    v290 = v276;\n    v288 = v274;\n    v286 = v272;\n    v284 = v270;\n    v280 = v266;\n    if (v138 == 0x4000) {\n        goto lab_0x4064b0;\n    } else {\n        // 0x405ad2\n        function_404a30(a1, str3, v276);\n        v293 = v268;\n        v294 = v276;\n        v295 = v274;\n        v296 = v272;\n        v297 = v270;\n        v298 = v266;\n        goto lab_0x405ae8;\n    }\n  lab_0x405818:\n    // 0x405818\n    v94 = str3;\n    v95 = v93;\n    v96 = v97;\n    v98 = v93;\n    v99 = v256;\n    v312 = 0;\n    if (*v5 == 2) {\n        goto lab_0x406af5;\n    } else {\n        goto lab_0x405823;\n    }\n  lab_0x406147:;\n    // 0x406147\n    int64_t v344; // 0x405650\n    int64_t v345; // 0x405650\n    int64_t v346; // 0x405650\n    int32_t v347; // 0x405650\n    int32_t v348; // 0x405650\n    int32_t v349; // 0x405650\n    int64_t v350; // 0x405650\n    int64_t v351; // 0x405650\n    int64_t v352; // 0x405650\n    int128_t v353; // 0x405650\n    int128_t v354; // 0x405650\n    int128_t v355; // 0x405650\n    int64_t v356; // 0x405650\n    int64_t v357; // 0x405650\n    int64_t v358; // 0x405650\n    char v359; // 0x405650\n    char v360; // 0x405650\n    char v361; // 0x405650\n    int64_t v362; // 0x405650\n    if (v1 == 1) {\n        // 0x4069e8\n        v349 = v323;\n        v361 = v324;\n        v357 = v325;\n        v355 = v326;\n        v352 = v327;\n        v346 = v328;\n        v362 = function_409690((int64_t)owner, v11);\n        goto lab_0x4062ec;\n    } else {\n        // 0x406155\n        v347 = v323;\n        v359 = v324;\n        v356 = v325;\n        v353 = v326;\n        v350 = v327;\n        v344 = v328;\n        v348 = v323;\n        v360 = v324;\n        v354 = v326;\n        v351 = v327;\n        v358 = 0;\n        v345 = v328;\n        if (*(char *)(a6 + 34) != 0) {\n            goto lab_0x406100;\n        } else {\n            goto lab_0x406167;\n        }\n    }\n  lab_0x405af3:\n    // 0x405af3\n    v347 = v283;\n    v359 = v291;\n    v356 = v289;\n    v353 = v287;\n    v350 = v285;\n    v344 = v281;\n    int64_t v190; // 0x405650\n    int32_t v363; // 0x405650\n    int64_t v364; // 0x405650\n    int128_t v365; // 0x405650\n    int64_t v185; // 0x405650\n    int64_t v72; // 0x405650\n    int64_t v366; // 0x405650\n    char v367; // 0x405650\n    if (*(char *)(a6 + 34) != 0) {\n        goto lab_0x406100;\n    } else {\n        // 0x405afe\n        v363 = v283;\n        v367 = v291;\n        v72 = v289;\n        v365 = v287;\n        v364 = v285;\n        v366 = 0;\n        v185 = 0x100000000000000 * v289 >> 56;\n        v190 = v281;\n        goto lab_0x405b16;\n    }\n  lab_0x4069d0:\n    // 0x4069d0\n    v338 = v331;\n    v342 = v332;\n    v341 = v333;\n    v340 = v334;\n    v339 = v335;\n    v337 = v336;\n    v343 = function_409690(v330, v11);\n    goto lab_0x405fb7;\n  lab_0x4064b0:\n    // 0x4064b0\n    v283 = v282;\n    v291 = v290;\n    v289 = v288;\n    v287 = v286;\n    v285 = v284;\n    v281 = v280;\n    v299 = v282;\n    v300 = v290;\n    v301 = v288;\n    v302 = v286;\n    v303 = v284;\n    v304 = v280;\n    if (*(char *)(a6 + 42) == 0) {\n        goto lab_0x405af3;\n    } else {\n        goto lab_0x405f8b;\n    }\n  lab_0x406af5:\n    // 0x406af5\n    v89 = v305;\n    int32_t v462 = v305;\n    v311 = str3;\n    v306 = v305;\n    v307 = v462;\n    v310 = v192;\n    v309 = v256;\n    v308 = v312;\n    int64_t v222; // 0x405650\n    int64_t v221; // 0x405650\n    int64_t v220; // 0x405650\n    int64_t v219; // 0x405650\n    if (v138 == 0xa000) {\n        // 0x407890\n        v311 = str3;\n        v306 = v305;\n        v307 = v462;\n        v310 = v192;\n        v309 = v256;\n        v308 = v312;\n        if ((owner & 0xf000) != 0xa000) {\n            goto lab_0x406b19;\n        } else {\n            // 0x4078a6\n            v6 = a1;\n            if ((char)function_40e2f0(a1, str3) != 0) {\n                goto lab_0x406b70;\n            } else {\n                int64_t v463 = v256 % 256; // 0x4078d1\n                v94 = str3;\n                v95 = v93;\n                v96 = v97;\n                v98 = v93;\n                v99 = v463;\n                if (v312 == 0 | *(int32_t *)&v89 != 0) {\n                    goto lab_0x405823;\n                } else {\n                    // 0x4078ed\n                    v219 = str3;\n                    v220 = 1;\n                    v221 = v463;\n                    v222 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x4078fb;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406b19;\n    }\n  lab_0x405823:;\n    int64_t v131 = v98;\n    int128_t v464; // 0x405650\n    int128_t v129 = v464;\n    int64_t v127 = v96;\n    int32_t v124 = v95;\n    int64_t v419; // 0x405650\n    int64_t v409; // 0x405650\n    int64_t v418; // 0x405650\n    int32_t v417; // 0x405650\n    int64_t v51; // 0x405650\n    int64_t v416; // 0x405650\n    int64_t v103; // 0x405650\n    int64_t v415; // 0x405650\n    if (v138 == 0x4000) {\n        // 0x406dd0\n        v103 = v94;\n        v409 = v99;\n        if (*v4 == 0) {\n            goto lab_0x40585f;\n        } else {\n            // 0x406ddb\n            v415 = v94;\n            v417 = *(int32_t *)(a6 + 8);\n            v418 = v99;\n            goto lab_0x406ddf;\n        }\n    } else {\n        // 0x405833\n        v416 = v94;\n        v419 = v99;\n        if (*(char *)(a6 + 45) != 0) {\n            int64_t v465 = 0; // 0x406a17\n            if (*(char *)(a6 + 31) != 0) {\n                // 0x406a19\n                v465 = 1;\n                if (*v4 != 0) {\n                    // 0x406a25\n                    v465 = v11 != (int64_t)v165;\n                }\n            }\n            // 0x406a38\n            v6 = str3;\n            int64_t v466 = function_40eb60(str3, v305, v192, v465); // 0x406a54\n            v416 = v305;\n            v419 = v99 % 256;\n            if ((int32_t)v466 < 0) {\n                goto lab_0x40583e;\n            } else {\n                if (a10 != 0) {\n                    // 0x406a70\n                    *(char *)a10 = 1;\n                }\n                int64_t v467 = function_4096d0(str3, v150, v11); // 0x406a8c\n                if (v467 == 0) {\n                    // 0x405f31\n                    return 1;\n                }\n                char v468 = *(char *)(a6 + 46); // 0x406a9a\n                v6 = v467;\n                if ((char)function_404c10(v467, str3, 1, v468, v397) != 0) {\n                    // 0x405f31\n                    return 1;\n                }\n                // 0x406ac2\n                v51 = 1;\n                if (*(char *)(a6 + 37) == 0) {\n                    // 0x405f31\n                    return v10 & 0xffffffff;\n                }\n                goto lab_0x406acd;\n            }\n        } else {\n            goto lab_0x40583e;\n        }\n    }\n  lab_0x405a06:\n    // 0x405a06\n    v243 = v251;\n    v244 = v255;\n    v245 = v254;\n    v246 = v253;\n    v247 = v252;\n    v248 = v250;\n    int64_t v108; // 0x405650\n    if ((*(int32_t *)(v279 + 24) & 0xf000) != 0xa000) {\n        goto lab_0x405aac;\n    } else {\n        // 0x405a19\n        v243 = v251;\n        v244 = v255;\n        v245 = v254;\n        v246 = v253;\n        v247 = v252;\n        v248 = v250;\n        if ((char)function_40abf0(*(int64_t *)(a6 + 56), str3, v279) == 0) {\n            goto lab_0x405aac;\n        } else {\n            // 0x405a2d\n            function_40dca0(1, 4, str3);\n            v6 = 0;\n            function_40dca0(0, 4, a1);\n            v108 = (int64_t)\"will not copy %s through just-created symlink %s\";\n            goto lab_0x405a68;\n        }\n    }\n  lab_0x406100:;\n    int32_t v375 = v347; // 0x406105\n    char v376 = v359; // 0x406105\n    int64_t v377 = v356; // 0x406105\n    int128_t v378 = v353; // 0x406105\n    int64_t v379 = v350; // 0x406105\n    int64_t v380 = 0; // 0x406105\n    int64_t v381 = v344; // 0x406105\n    if (*(char *)(a6 + 23) == 0) {\n        if (v1 < 2) {\n            int32_t v469 = *v5; // 0x4062aa\n            v375 = v347;\n            v376 = v359;\n            v377 = v356;\n            v378 = v353;\n            v379 = v350;\n            v380 = 0;\n            v381 = v344;\n            if (((char)a7 == 0 || v469 != 3) == (v469 != 4)) {\n                goto lab_0x406116;\n            } else {\n                goto lab_0x4062cb;\n            }\n        } else {\n            goto lab_0x4062cb;\n        }\n    } else {\n        goto lab_0x406116;\n    }\n  lab_0x405fb7:;\n    int32_t v368 = v338; // 0x405fbf\n    char v369 = v342; // 0x405fbf\n    int64_t v370 = v341; // 0x405fbf\n    int128_t v371 = v340; // 0x405fbf\n    int64_t v372 = v339; // 0x405fbf\n    int64_t v373 = v343; // 0x405fbf\n    int64_t v374 = v337; // 0x405fbf\n    v375 = v338;\n    v376 = v342;\n    v377 = v341;\n    v378 = v340;\n    v379 = v339;\n    v380 = 0;\n    v381 = v337;\n    if (v343 == 0) {\n        goto lab_0x406116;\n    } else {\n        goto lab_0x405fc5;\n    }\n  lab_0x406b19:;\n    int64_t v382 = v308;\n    int64_t v383 = v309;\n    int64_t v384 = v310;\n    int64_t v385 = v306; // 0x407fd2\n    int64_t v386 = v311;\n    v6 = v307;\n    int64_t v387; // 0x405650\n    int64_t v209; // 0x405650\n    int64_t v388; // 0x405650\n    int64_t v211; // 0x405650\n    int64_t v389; // 0x405650\n    int64_t v210; // 0x405650\n    int64_t v208; // 0x405650\n    int64_t v390; // 0x405650\n    char v391; // 0x407160\n    if (v307 == 0) {\n        // 0x407160\n        v391 = *v4;\n        if (v391 != 0) {\n            goto lab_0x4074d0;\n        } else {\n            // 0x40716d\n            if (*(char *)(a6 + 21) != 0) {\n                goto lab_0x4074d0;\n            } else {\n                // 0x407178\n                v390 = v386;\n                v387 = v385;\n                v389 = v384;\n                v388 = v383;\n                v208 = v386;\n                v209 = v385;\n                v210 = v384;\n                v211 = v383;\n                if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n                    goto lab_0x4071ba;\n                } else {\n                    goto lab_0x407187;\n                }\n            }\n        }\n    } else {\n        if ((char)v382 != 0) {\n            // 0x407dc5\n            v6 = a1;\n            int64_t v392 = function_40e2f0(a1, str3); // 0x407dd6\n            v219 = str3;\n            v220 = 0;\n            v221 = v383 % 256;\n            v222 = v392 & 0xffffffff ^ 1;\n            goto lab_0x4078fb;\n        } else {\n            int32_t v393 = v93;\n            v94 = v386;\n            v95 = v393;\n            v96 = v97;\n            v98 = v93;\n            v99 = v383;\n            if (*v4 != 0) {\n                goto lab_0x405823;\n            } else {\n                // 0x406b39\n                v94 = v386;\n                v95 = v393;\n                v96 = v97;\n                v98 = v93;\n                v99 = v383;\n                if (*v5 == 2) {\n                    goto lab_0x405823;\n                } else {\n                    // 0x406b44\n                    v94 = v386;\n                    v95 = v393;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v383;\n                    if ((*(int32_t *)(v384 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x405823;\n                    } else {\n                        // 0x406b57\n                        v94 = v386;\n                        v95 = v393;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v383;\n                        if ((*(int32_t *)(v385 + 24) & 0xf000) == 0xa000) {\n                            goto lab_0x405823;\n                        } else {\n                            goto lab_0x406b70;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4062ec:\n    // 0x4062ec\n    v375 = v349;\n    v376 = v361;\n    v377 = v357;\n    v378 = v355;\n    v379 = v352;\n    v380 = 0;\n    v381 = v346;\n    int64_t v394; // 0x405650\n    char v395; // 0x405650\n    if (v362 == 0) {\n        goto lab_0x406116;\n    } else {\n        // 0x4062fa\n        v368 = v349;\n        v369 = v361;\n        v370 = v357;\n        v371 = v355;\n        v372 = v352;\n        v373 = v362;\n        v374 = v346;\n        if (v138 == 0x4000) {\n            goto lab_0x405fc5;\n        } else {\n            char v396 = *(char *)(a6 + 46); // 0x40630a\n            v6 = v362;\n            v395 = v361;\n            v394 = 1;\n            if ((char)function_404c10(v362, str3, 1, v396, v397) != 0) {\n                // 0x405f31\n                return 1;\n            }\n            goto lab_0x406068;\n        }\n    }\n  lab_0x406167:\n    // 0x406167\n    v6 = a1;\n    char * file_path2 = (char *)str3; // 0x406171\n    int64_t v398; // 0x405650\n    if (rename(file_path, file_path2) == 0) {\n        // 0x406c78\n        if (*(char *)(a6 + 46) != 0) {\n            // 0x407558\n            __printf_chk(1, dcgettext(NULL, \"renamed \", 5));\n            function_404a30(a1, str3, v360);\n        }\n        // 0x406c83\n        if (*(char *)(a6 + 33) != 0) {\n            // 0x407538\n            function_4052e0(str3, 0, 1, a6);\n        }\n        if (a10 != 0) {\n            // 0x406c95\n            *(char *)a10 = 1;\n        }\n        // 0x406c9c\n        v398 = 1;\n        if ((char)a7 != 0) {\n            // 0x406ca4\n            function_40ab60(*(int64_t *)(a6 + 56), str3, v192);\n            v398 = v79;\n        }\n        // 0x405f31\n        return v398 & 0xffffffff;\n    }\n    int32_t * err_num3 = __errno_location(); // 0x40617e\n    int32_t v399 = *err_num3; // 0x406186\n    if (v399 == 22) {\n        // 0x407958\n        function_40dca0(1, 4, g49);\n        function_40dca0(0, 4, g50);\n        error(0, (int32_t)\"cannot move %s to a subdirectory of itself, %s\" ^ (int32_t)\"cannot move %s to a subdirectory of itself, %s\", dcgettext(NULL, \"cannot move %s to a subdirectory of itself, %s\", 5));\n        *v7 = 1;\n        // 0x405f31\n        return 1;\n    }\n    int64_t v400; // 0x405650\n    if (v399 != 18) {\n        // 0x406ec8\n        function_40dca0(1, 4, str3);\n        v6 = 0;\n        function_40dca0(0, 4, a1);\n        v400 = (int64_t)\"cannot move %s to %s\";\n        goto lab_0x406c3d;\n    } else {\n        // 0x40619a\n        v6 = str3;\n        if (v138 == 0x4000) {\n            // 0x406bf0\n            v363 = v348;\n            v367 = v360;\n            v72 = 1;\n            v365 = v354;\n            v364 = v351;\n            v366 = v358;\n            v185 = 1;\n            v190 = v345;\n            if (rmdir(file_path2) == 0) {\n                goto lab_0x405b16;\n            } else {\n                // 0x406bfd\n                v363 = v348;\n                v367 = v360;\n                v72 = 1;\n                v365 = v354;\n                v364 = v351;\n                v366 = v358;\n                v185 = 1;\n                v190 = v345;\n                if (*err_num3 == 2) {\n                    goto lab_0x405b16;\n                } else {\n                    goto lab_0x406c08;\n                }\n            }\n        } else {\n            // 0x4061b1\n            if (unlink(file_path2) == 0) {\n                goto lab_0x4061c5;\n            } else {\n                // 0x4061ba\n                if (*err_num3 != 2) {\n                    goto lab_0x406c08;\n                } else {\n                    goto lab_0x4061c5;\n                }\n            }\n        }\n    }\n  lab_0x406116:\n    // 0x406116\n    v348 = v375;\n    v360 = v376;\n    v354 = v378;\n    v351 = v379;\n    v358 = v380;\n    v345 = v381;\n    if (*v4 != 0) {\n        goto lab_0x406167;\n    } else {\n        // 0x40611d\n        v363 = v375;\n        v367 = v376;\n        v72 = v377;\n        v365 = v378;\n        v364 = v379;\n        v366 = v380;\n        v185 = 0x100000000000000 * v377 >> 56;\n        v190 = v381;\n        goto lab_0x405b16;\n    }\n  lab_0x405b16:;\n    int64_t v55 = v366;\n    char v53 = v367;\n    char * v401 = (char *)(a6 + 43); // 0x405b24\n    int32_t v73; // 0x405650\n    if (*v401 != 0) {\n        // 0x405b2b\n        v73 = *(int32_t *)(a6 + 16);\n    }\n    uint32_t v402 = v73 % 0x1000;\n    uint64_t v403 = (int64_t)v402;\n    char * v404 = (char *)(a6 + 29); // 0x405b36\n    int64_t * v405; // 0x405650\n    int64_t * v171; // 0x405650\n    int32_t v74; // 0x405b51\n    if (*v404 != 0) {\n        int32_t v406 = 0x1000000 * (int32_t)v185 >> 24; // 0x4063d0\n        v6 = a1;\n        if ((char)function_405210(a1, str3, owner, (char)v406, a6) == 0) {\n            // 0x405f31\n            return v10 & 0xffffffff;\n        }\n        int64_t * v407 = (int64_t *)(v403 % 64); // 0x406406\n        v405 = v407;\n        v74 = v406;\n        v171 = v407;\n        if (v138 != 0x4000) {\n            goto lab_0x405b81;\n        } else {\n            goto lab_0x406412;\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x406930\n            v6 = a1;\n            if ((char)function_405210(a1, str3, owner, (char)v185, a6) == 0) {\n                // 0x405f31\n                return v10 & 0xffffffff;\n            }\n            // 0x406956\n            v171 = (int64_t *)(v403 & 18);\n            goto lab_0x406412;\n        } else {\n            // 0x405b51\n            v74 = 0x1000000 * (int32_t)v185 >> 24;\n            v6 = a1;\n            v405 = NULL;\n            if ((char)function_405210(a1, str3, owner, (char)v74, a6) == 0) {\n                // 0x405f31\n                return v10 & 0xffffffff;\n            }\n            goto lab_0x405b81;\n        }\n    }\n  lab_0x405fc5:\n    // 0x405fc5\n    if ((char)function_40e2f0(a1, v373) != 0) {\n        // 0x407380\n        function_40dca0(1, 4, g49);\n        function_40dca0(0, 4, g50);\n        char * format8 = dcgettext(NULL, \"cannot copy a directory, %s, into itself, %s\", 5); // 0x4073bb\n        v6 = 0;\n        error(0, (int32_t)\"cannot copy a directory, %s, into itself, %s\" ^ (int32_t)\"cannot copy a directory, %s, into itself, %s\", format8);\n        *v7 = 1;\n        v395 = v369;\n        v394 = (int64_t)format8;\n        goto lab_0x406068;\n    } else {\n        // 0x405fdc\n        if ((char)function_40e2f0(str3, v373) != 0) {\n            // 0x407bd0\n            function_40dd80(4, g50);\n            error(0, (int32_t)\"warning: source directory %s specified more than once\" ^ (int32_t)\"warning: source directory %s specified more than once\", dcgettext(NULL, \"warning: source directory %s specified more than once\", 5));\n            if (a10 != 0 != *v4 != 0) {\n                // 0x405f31\n                return 1;\n            }\n            // 0x406e6b\n            *(char *)a10 = 1;\n            // 0x405f31\n            return 1;\n        }\n        int32_t v408 = *v5; // 0x405ff7\n        v375 = v368;\n        v376 = v369;\n        v377 = v370;\n        v378 = v371;\n        v379 = v372;\n        v380 = v373;\n        v381 = v374;\n        if (v408 == 4) {\n            goto lab_0x406116;\n        } else {\n            if (v408 != 3) {\n                goto lab_0x406011;\n            } else {\n                // 0x406009\n                v375 = v368;\n                v376 = v369;\n                v377 = v370;\n                v378 = v371;\n                v379 = v372;\n                v380 = v373;\n                v381 = v374;\n                if ((char)a7 != 0) {\n                    goto lab_0x406116;\n                } else {\n                    goto lab_0x406011;\n                }\n            }\n        }\n    }\n  lab_0x40585f:\n    // 0x40585f\n    if ((char)v127 != 0) {\n        // 0x405f31\n        return 1;\n    }\n    int64_t v105 = v409 & 0xffffffff ^ 1; // 0x405875\n    int64_t v410; // 0x405650\n    int64_t v106; // 0x405650\n    int64_t v236; // 0x405650\n    int64_t v235; // 0x405650\n    int64_t v104; // 0x405650\n    int64_t v234; // 0x405650\n    int64_t v102; // 0x405650\n    int64_t v233; // 0x405650\n    int64_t v232; // 0x405650\n    int64_t v107; // 0x407ab5\n    if ((owner & 0xf000) == 0x4000) {\n        // 0x4075c0\n        v233 = v103;\n        v235 = v105;\n        if (v138 == 0x4000) {\n            goto lab_0x405900;\n        } else {\n            // 0x4075d0\n            if (*v4 == 0) {\n                goto lab_0x407ee5;\n            } else {\n                uint32_t v411 = *(int32_t *)&v89; // 0x4075db\n                v102 = v103;\n                v104 = v105;\n                v106 = v411;\n                if (v411 == 0) {\n                    goto lab_0x407ee5;\n                } else {\n                    goto lab_0x407600;\n                }\n            }\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x407aaa\n            if (*v4 == 0) {\n                goto lab_0x407e01;\n            } else {\n                uint32_t v412 = *(int32_t *)&v89; // 0x407ab5\n                if (v412 == 0) {\n                    goto lab_0x407e01;\n                } else {\n                    // 0x407ac2\n                    v107 = v412;\n                    v410 = v107;\n                    if ((char)a7 != 0) {\n                        goto lab_0x4058a4;\n                    } else {\n                        goto lab_0x407d38;\n                    }\n                }\n            }\n        } else {\n            int64_t v413 = (int64_t)*(int32_t *)&v89; // 0x40589c\n            v410 = v413;\n            v232 = v103;\n            v234 = v105;\n            v236 = v413;\n            if ((char)a7 == 0) {\n                goto lab_0x405904;\n            } else {\n                goto lab_0x4058a4;\n            }\n        }\n    }\n  lab_0x40583e:;\n    int32_t v414 = *(int32_t *)(a6 + 8); // 0x405843\n    v415 = v416;\n    v417 = v414;\n    v418 = v419;\n    if (*v4 != 0) {\n        goto lab_0x406ddf;\n    } else {\n        // 0x40584d\n        v103 = v416;\n        v409 = v419;\n        switch (v414) {\n            case 2: {\n                int64_t v420 = v398;\n                return v420 & 0xffffffff;\n            }\n            case 3: {\n                // 0x407c79\n                v6 = a6;\n                int64_t v421 = function_404ae0(a6, str3, v305 + 24); // 0x407c95\n                v103 = str3;\n                v409 = v419 % 256;\n                if ((char)v421 == 0) {\n                    // 0x405f31\n                    return 1;\n                }\n                // break -> 0x40585f\n                break;\n            }\n        }\n        goto lab_0x40585f;\n    }\n  lab_0x4062cb:\n    // 0x4062cb\n    v349 = v347;\n    v361 = v359;\n    v357 = v356;\n    v355 = v353;\n    v352 = v350;\n    v346 = v344;\n    v362 = function_4096d0(str3, (int64_t)owner, v11);\n    goto lab_0x4062ec;\n  lab_0x406b70:\n    // 0x406b70\n    function_40dca0(1, 4, str3);\n    v6 = 0;\n    function_40dca0(0, 4, a1);\n    v108 = (int64_t)\"%s and %s are the same file\";\n    goto lab_0x405a68;\n  lab_0x4074d0:;\n    int32_t v454 = v93;\n    v94 = v386;\n    v95 = v454;\n    v96 = v97;\n    v98 = v93;\n    v99 = v383;\n    int64_t v229; // 0x405650\n    int64_t v231; // 0x405650\n    int64_t v230; // 0x405650\n    int64_t v228; // 0x405650\n    if ((*(int32_t *)(v385 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x405823;\n    } else {\n        if ((char)v382 == 0) {\n            goto lab_0x4074f4;\n        } else {\n            // 0x4074e9\n            if (*(int64_t *)(v385 + 16) < 2) {\n                goto lab_0x4074f4;\n            } else {\n                // 0x407fc1\n                v6 = a1;\n                int64_t v455 = function_40e2f0(a1, str3); // 0x407fe0\n                int64_t v456 = 0x100000000 * v385 >> 32; // 0x407fec\n                v89 = v456;\n                int64_t v457 = v383 % 256; // 0x407ff5\n                if ((char)v455 == 0) {\n                    // 0x4087a2\n                    v219 = str3;\n                    v220 = v455;\n                    v221 = v457;\n                    v222 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x4078fb;\n                } else {\n                    int64_t v458 = 0x100000000000000 * v384 >> 56; // 0x407fe5\n                    v390 = str3;\n                    v387 = v456;\n                    v389 = v458;\n                    v388 = v457;\n                    v228 = str3;\n                    v229 = v456;\n                    v230 = v458;\n                    v231 = v457;\n                    if ((*(int32_t *)(v458 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x407187;\n                    } else {\n                        goto lab_0x40719b;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406ddf:;\n    int64_t v459 = v418; // 0x405650\n    switch (v417) {\n        case 2: {\n            goto lab_0x406e60;\n        }\n        case 3: {\n            goto lab_0x406e26;\n        }\n        default: {\n            // 0x406de9\n            v103 = v415;\n            v409 = v418;\n            if (v417 != 4) {\n                goto lab_0x40585f;\n            } else {\n                // 0x406df2\n                v103 = v415;\n                v409 = v418;\n                if (*(char *)(a6 + 47) == 0) {\n                    goto lab_0x40585f;\n                } else {\n                    // 0x406dfd\n                    v6 = str3;\n                    int64_t v460 = function_404890(str3, owner); // 0x406e11\n                    int64_t v461 = v418 % 256; // 0x406e16\n                    v103 = owner;\n                    v409 = v461;\n                    v459 = v461;\n                    if ((char)v460 != 0) {\n                        goto lab_0x40585f;\n                    } else {\n                        goto lab_0x406e26;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405a68:\n    // 0x405a68\n    v6 = 0;\n    // 0x405a78\n    error(0, 0, dcgettext(NULL, (char *)v108, 5));\n    // 0x405f31\n    return 0;\n  lab_0x406c3d:\n    // 0x406c3d\n    error(0, *err_num3, dcgettext(NULL, (char *)v400, 5));\n    function_409640((int64_t)owner, v11);\n    // 0x405f31\n    return v10 & 0xffffffff;\n  lab_0x405b81:;\n    int64_t * v41 = v405;\n    char v422 = *(char *)(a6 + 44); // 0x405b81\n    int64_t v50; // 0x405650\n    int64_t v69; // 0x405650\n    int64_t v48; // 0x405650\n    int64_t v49; // 0x405650\n    int64_t v36; // 0x405650\n    int64_t v47; // 0x405650\n    int64_t v46; // 0x405650\n    int64_t v59; // 0x405650\n    int64_t v423; // 0x405650\n    int64_t v45; // 0x405650\n    int64_t v35; // 0x405650\n    int64_t v42; // 0x405650\n    int64_t v43; // 0x405650\n    int64_t v44; // 0x405650\n    int64_t * v40; // 0x405650\n    int64_t v38; // 0x405650\n    char v39; // 0x4064c0\n    int64_t v424; // 0x405ba1\n    bool v425; // 0x405650\n    int64_t str7; // 0x407a35\n    int32_t v426; // 0x408179\n    if (v422 == 0) {\n        // 0x4064c0\n        v39 = *(char *)(a6 + 23);\n        if (v39 != 0) {\n            int64_t v427 = (int64_t)*(char *)(a6 + 22); // 0x406bb7\n            v6 = a1;\n            int64_t v428 = function_404c10(a1, str3, v427, 0, v397); // 0x406bc8\n            v38 = 0;\n            v40 = v41;\n            v42 = v72;\n            v43 = 0x100000000000000 * v428 >> 56;\n            v44 = 0;\n            v45 = v427;\n            v46 = v79;\n            v47 = 0;\n            v48 = a1;\n            v49 = v10;\n            v35 = v427;\n            v36 = v10;\n            if ((char)v428 != 0) {\n                goto lab_0x405c05;\n            } else {\n                goto lab_0x4065d0;\n            }\n        } else {\n            // 0x4064d3\n            v59 = owner;\n            if (v138 == 0x8000) {\n                goto lab_0x406f08;\n            } else {\n                unsigned char v429 = *(char *)(a6 + 20) & (char)(v138 != 0xa000); // 0x4064ed\n                if (v429 != 0) {\n                    goto lab_0x406f08;\n                } else {\n                    int64_t v430 = v429; // 0x4064ed\n                    if (v138 == 0x1000) {\n                        // 0x407cc5\n                        v6 = 0;\n                        v86 = 0;\n                        uint32_t v431 = owner & -1 - (int32_t)(int64_t)v41; // 0x407ce8\n                        int64_t v432 = v431; // 0x407cee\n                        char * pathname = (char *)str3; // 0x407cf3\n                        int32_t v433 = __xmknod(0, pathname, v431, (int32_t *)&v86); // 0x407cf3\n                        v38 = v430;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = 1;\n                        v44 = v430;\n                        v45 = v432;\n                        v46 = v79;\n                        v47 = v430;\n                        v48 = a1;\n                        v49 = v10;\n                        if (v433 != 0) {\n                            // 0x40812c\n                            v6 = str3;\n                            v38 = v430;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v430;\n                            v45 = v432;\n                            v46 = v79;\n                            v47 = v430;\n                            v48 = a1;\n                            v49 = v10;\n                            if (mkfifo(pathname, v431 & -0x1001) == 0) {\n                                goto lab_0x405c05;\n                            } else {\n                                // 0x408151\n                                v6 = 4;\n                                function_40dd80(4, str3);\n                                v69 = (int64_t)\"cannot create fifo %s\";\n                                goto lab_0x4065b0;\n                            }\n                        } else {\n                            goto lab_0x405c05;\n                        }\n                    } else {\n                        if ((owner & 0xb000) != 0x2000 && v138 != 0xc000) {\n                            if (v138 != 0xa000) {\n                                // 0x407d78\n                                v6 = 4;\n                                function_40dd80(4, a1);\n                                v50 = (int64_t)\"%s has unknown file type\";\n                                goto lab_0x406472;\n                            } else {\n                                // 0x407a2b\n                                str7 = function_409e80(a1, v1);\n                                if (str7 == 0) {\n                                    // 0x4087c0\n                                    v6 = 4;\n                                    function_40dd80(4, a1);\n                                    v69 = (int64_t)\"cannot read symbolic link %s\";\n                                    goto lab_0x4065b0;\n                                } else {\n                                    int64_t v434 = function_409c90(str7, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x407a5a\n                                    v423 = str3;\n                                    if ((int32_t)v434 < 0) {\n                                        // 0x408174\n                                        v426 = *__errno_location();\n                                        v423 = str3;\n                                        if (v426 == 0) {\n                                            goto lab_0x407a67;\n                                        } else {\n                                            // 0x408189\n                                            if ((char)v72 == 0 == *(char *)(a6 + 45) == 1) {\n                                                if ((owner & 0xf000) != 0xa000) {\n                                                    goto lab_0x40819d;\n                                                } else {\n                                                    // 0x4090ab\n                                                    v6 = str7;\n                                                    int64_t v435 = str7; // 0x4090c0\n                                                    int64_t v436 = -1; // 0x4090c0\n                                                    int64_t v437 = 0; // 0x4090c0\n                                                    while (v436 != 0) {\n                                                        int64_t v438 = v435;\n                                                        v435 = v438 + (v425 ? -1 : 1);\n                                                        v6 = v435;\n                                                        v436--;\n                                                        v437 = v436;\n                                                        if (*(char *)v438 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v437 = 0;\n                                                    }\n                                                    if (v1 != -2 - v437) {\n                                                        goto lab_0x40819d;\n                                                    } else {\n                                                        int64_t str6 = function_409e80(str3, v1); // 0x4090d9\n                                                        if (str6 == 0) {\n                                                            goto lab_0x40819d;\n                                                        } else {\n                                                            int32_t strcmp_rc = strcmp((char *)str6, (char *)str7); // 0x4090f4\n                                                            int64_t v439 = 0x100000000 * str6 >> 32; // 0x4090f9\n                                                            v6 = v439;\n                                                            free((int64_t *)v439);\n                                                            v423 = v439;\n                                                            if (strcmp_rc != 0) {\n                                                                goto lab_0x40819d;\n                                                            } else {\n                                                                goto lab_0x407a67;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            } else {\n                                                goto lab_0x40819d;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x407a67;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x406541\n                            v6 = 0;\n                            int64_t v440 = ((int64_t)v41 ^ 0xffffffff) & v59; // 0x406560\n                            int32_t v441 = __xmknod(0, (char *)str3, (int32_t)v440, (int32_t *)&v86); // 0x406569\n                            v38 = v430;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v430;\n                            v45 = v440;\n                            v46 = v79;\n                            v47 = v430;\n                            v48 = a1;\n                            v49 = v10;\n                            if (v441 == 0) {\n                                goto lab_0x405c05;\n                            } else {\n                                // 0x40658c\n                                v6 = 4;\n                                function_40dd80(4, str3);\n                                v69 = (int64_t)\"cannot create special file %s\";\n                                goto lab_0x4065b0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x405b94\n        if (*(char *)&v6 == 47) {\n            goto lab_0x405bcd;\n        } else {\n            // 0x405b9a\n            v424 = function_40a920();\n            v6 = v424;\n            int64_t v442 = v425 ? -1 : 1; // 0x405bb6\n            int64_t v443 = v424; // 0x405bb6\n            int64_t v444 = (int64_t)\".\"; // 0x405650\n            int64_t v445 = 2; // 0x405bb6\n            unsigned char v446 = *(char *)v444; // 0x405bb6\n            char v447 = *(char *)v443; // 0x405bb6\n            v443 += v442;\n            v6 = v443;\n            char v448 = v447; // 0x405bb6\n            bool v449 = false; // 0x405bb6\n            while (v446 == v447) {\n                v445--;\n                v444 += v442;\n                v448 = v446;\n                v449 = true;\n                if (v445 == 0) {\n                    // break -> \n                    break;\n                }\n                v446 = *(char *)v444;\n                v447 = *(char *)v443;\n                v443 += v442;\n                v6 = v443;\n                v448 = v447;\n                v449 = false;\n            }\n            unsigned char v450 = v448;\n            if ((v446 >= v450 && !v449) != v446 < v450) {\n                // 0x407450\n                if (__xstat(1, \".\", (struct stat *)&v70) != 0) {\n                    // 0x405bc5\n                    free((int64_t *)v424);\n                    goto lab_0x405bcd;\n                } else {\n                    // 0x40746e\n                    if (__xstat(1, (char *)v424, (struct stat *)&v86) != 0) {\n                        // 0x405bc5\n                        free((int64_t *)v424);\n                        goto lab_0x405bcd;\n                    } else {\n                        // 0x4086ca\n                        if (v86 != (int64_t)v70) {\n                            goto lab_0x40749e;\n                        } else {\n                            // 0x405bc5\n                            free((int64_t *)v424);\n                            goto lab_0x405bcd;\n                        }\n                    }\n                }\n            } else {\n                // 0x405bc5\n                free((int64_t *)v424);\n                goto lab_0x405bcd;\n            }\n        }\n    }\n  lab_0x406412:;\n    int64_t v451 = owner; // 0x40641a\n    if (a5 != 0) {\n        if (*(int64_t *)(a5 + 8) == v451) {\n            // 0x406452\n            if (*(int64_t *)(a5 + 16) == v11) {\n                // 0x406458\n                v6 = 4;\n                function_40dd80(4, a1);\n                v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                goto lab_0x406472;\n            }\n        }\n        int64_t v452 = *(int64_t *)a5; // 0x406440\n        while (v452 != 0) {\n            int64_t v453 = v452;\n            if (*(int64_t *)(v453 + 8) == v451) {\n                // 0x406452\n                if (*(int64_t *)(v453 + 16) == v11) {\n                    // 0x406458\n                    v6 = 4;\n                    function_40dd80(4, a1);\n                    v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                    goto lab_0x406472;\n                }\n            }\n            // 0x406440\n            v452 = *(int64_t *)v453;\n        }\n    }\n    int64_t v184 = v190 - 17 & -16; // 0x406618\n    *(int64_t *)v184 = a5;\n    *(int64_t *)(v184 | 8) = v451;\n    *(int64_t *)(v184 + 16) = v11;\n    int64_t * v170; // 0x405650\n    int64_t v169; // 0x405650\n    int64_t v168; // 0x405650\n    if ((owner & 0xf000) == 0x4000 == (char)v72 == 0) {\n        // 0x407830\n        v168 = 0;\n        v170 = NULL;\n        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) != 0) {\n            // 0x407d97\n            v6 = str3;\n            v168 = 0;\n            v170 = NULL;\n            if ((char)function_4052e0(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                goto lab_0x40674f;\n            } else {\n                // 0x407db5\n                v35 = 0;\n                v36 = v10;\n                v168 = 0;\n                v170 = NULL;\n                if (*(char *)(a6 + 38) == 0) {\n                    goto lab_0x40674f;\n                } else {\n                    goto lab_0x4065d0;\n                }\n            }\n        } else {\n            goto lab_0x40674f;\n        }\n    } else {\n        char * path = (char *)str3; // 0x40665f\n        if (mkdir(path, v402 & -1 - (int32_t)(int64_t)v171) != 0) {\n            // 0x407598\n            v6 = 4;\n            function_40dd80(4, str3);\n            v69 = (int64_t)\"cannot create directory %s\";\n            goto lab_0x4065b0;\n        } else {\n            // 0x40666c\n            v6 = 1;\n            if (__lxstat(1, path, (struct stat *)&v165) != 0) {\n                // 0x407c23\n                v6 = 4;\n                function_40dd80(4, str3);\n                v69 = (int64_t)\"cannot stat %s\";\n                goto lab_0x4065b0;\n            } else {\n                // 0x40668c\n                v169 = 0;\n                if ((owner & 448) == 448) {\n                    goto lab_0x4066d4;\n                } else {\n                    // 0x4066a9\n                    v6 = str3;\n                    v169 = 1;\n                    if (chmod(path, owner || 448) != 0) {\n                        // 0x408070\n                        v6 = 4;\n                        function_40dd80(4, str3);\n                        v69 = (int64_t)\"setting permissions for %s\";\n                        goto lab_0x4065b0;\n                    } else {\n                        goto lab_0x4066d4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406068:;\n    char v52 = v395; // 0x40606d\n    int64_t v54 = v10; // 0x40606d\n    v51 = v394;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x406acd;\n    } else {\n        goto lab_0x406073;\n    }\n  lab_0x4078fb:\n    // 0x4078fb\n    if ((char)v222 == 0) {\n        goto lab_0x406b70;\n    } else {\n        // 0x407904\n        v94 = v219;\n        v95 = v93;\n        v96 = 0x100000000000000 * v220 >> 56;\n        v98 = v93;\n        v99 = v221;\n        goto lab_0x405823;\n    }\n  lab_0x405900:\n    // 0x405900\n    v232 = v233;\n    v234 = v235;\n    v236 = (int64_t)*(int32_t *)&v89;\n    goto lab_0x405904;\n  lab_0x406e60:\n    // 0x406e60\n    if (a10 == 0) {\n        // 0x405f31\n        return 1;\n    }\n    // 0x406e6b\n    *(char *)a10 = 1;\n    // 0x405f31\n    return 1;\n  lab_0x406e26:\n    // 0x406e26\n    v6 = a6;\n    int64_t v478 = function_404ae0(a6, str3, v305 + 24); // 0x406e42\n    v103 = str3;\n    v409 = v459 % 256;\n    if ((char)v478 != 0) {\n        goto lab_0x40585f;\n    } else {\n        goto lab_0x406e60;\n    }\n  lab_0x406acd:\n    // 0x406acd\n    function_4049f0(v6);\n    v473 = v51;\n    goto lab_0x406ad8;\n  lab_0x4061c5:;\n    unsigned char v479 = *(char *)(a6 + 46) % 2; // 0x4061d2\n    v363 = v348;\n    v367 = v360;\n    v72 = 1;\n    v365 = v354;\n    v364 = v351;\n    v366 = v358;\n    v185 = 1;\n    v190 = v345;\n    if (v479 != 0) {\n        // 0x407910\n        __printf_chk(1, dcgettext(NULL, \"copied \", 5));\n        function_404a30(a1, str3, v360);\n        v363 = v348;\n        v367 = v360;\n        v72 = v479;\n        v365 = v354;\n        v364 = v351;\n        v366 = v358;\n        v185 = 1;\n        v190 = v345;\n    }\n    goto lab_0x405b16;\n  lab_0x406073:;\n    int64_t file_path3 = v52; // 0x406073\n    v6 = file_path3;\n    if (v52 == 0) {\n        // 0x405f31\n        return v54 & 0xffffffff;\n    }\n    // 0x406083\n    if (rename((char *)file_path3, (char *)str3) != 0) {\n        // 0x406e80\n        function_40dd80(4, str3);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot un-backup %s\", 5));\n        // 0x405f31\n        return v54 & 0xffffffff;\n    }\n    // 0x406097\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x4060a2\n        function_40dca0(1, 4, str3);\n        function_40dca0(0, 4, file_path3);\n        __printf_chk(1, dcgettext(NULL, \"%s -> %s (unbackup)\\n\", 5));\n    }\n    // 0x405f31\n    return v54 & 0xffffffff;\n  lab_0x406011:\n    // 0x406011\n    function_40dca0(1, 4, v373);\n    function_40dca0(0, 4, str3);\n    char * format10 = dcgettext(NULL, \"will not create hard link %s to directory %s\", 5); // 0x40604c\n    v6 = 0;\n    error(0, (int32_t)\"will not create hard link %s to directory %s\" ^ (int32_t)\"will not create hard link %s to directory %s\", format10);\n    v395 = v369;\n    v394 = (int64_t)format10;\n    goto lab_0x406068;\n  lab_0x4074f4:;\n    int64_t v207 = v386; // 0x407501\n    int64_t v205 = v385; // 0x407501\n    char v212 = v391; // 0x407501\n    int64_t v203 = v384; // 0x407501\n    int64_t v201 = v383; // 0x407501\n    int64_t v223 = v386; // 0x407501\n    int32_t v224 = v454; // 0x407501\n    int64_t v227 = v385; // 0x407501\n    int64_t v226 = v384; // 0x407501\n    int64_t v225 = v383; // 0x407501\n    if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x4071a0;\n    } else {\n        goto lab_0x407507;\n    }\n  lab_0x4071ba:;\n    int64_t v91 = v211;\n    int64_t v84 = v210;\n    int64_t v88 = v209; // 0x407df3\n    int64_t v101 = v208;\n    if (*(char *)(a6 + 44) != 0) {\n        goto lab_0x407df0;\n    } else {\n        // 0x4071c5\n        if ((*(int32_t *)(a6 + 20) & -0xff0100) == 0) {\n            goto lab_0x4071e3;\n        } else {\n            // 0x4071cf\n            if ((*(int32_t *)(v88 + 24) & 0xf000) == 0xa000) {\n                goto lab_0x407df0;\n            } else {\n                goto lab_0x4071e3;\n            }\n        }\n    }\n  lab_0x407187:;\n    int64_t v480 = v388;\n    int64_t v481 = v389;\n    int64_t v482 = v387; // 0x407187\n    int64_t v483 = v390;\n    v228 = v483;\n    v229 = v482;\n    v230 = v481;\n    v231 = v480;\n    if ((*(int32_t *)(v482 + 24) & 0xf000) != 0xa000) {\n        // 0x407187\n        v223 = v483;\n        v224 = v93;\n        v227 = v482;\n        v226 = v481;\n        v225 = v480;\n        goto lab_0x407507;\n    } else {\n        goto lab_0x40719b;\n    }\n  lab_0x405904:;\n    unsigned char v237 = *v4; // 0x405904\n    int64_t v117; // 0x405650\n    int64_t v136; // 0x405650\n    int64_t v112; // 0x405650\n    int64_t v133; // 0x405650\n    int64_t v110; // 0x405650\n    if (v237 != 0) {\n        // 0x407baf\n        uint32_t v238; // 0x405650\n        if ((v238 & 0xf000) == 0x4000 || v138 != 0x4000) {\n            // 0x407bc5\n            v123 = v124;\n            v125 = 0;\n            v126 = v127;\n            v128 = v129;\n            v130 = v131;\n            int64_t v239; // 0x405650\n            v132 = v239;\n            v134 = v135;\n            int64_t v240; // 0x405650\n            v102 = v240;\n            v104 = v239;\n            int64_t v241; // 0x405650\n            v106 = v241;\n            if (v241 == 0) {\n                goto lab_0x405aa4;\n            } else {\n                goto lab_0x407600;\n            }\n        } else {\n            goto lab_0x407d38;\n        }\n    } else {\n        // 0x405911\n        v136 = v237;\n        v133 = v234;\n        v110 = v232;\n        v112 = v234;\n        v117 = v236;\n        if (v236 != 0) {\n            goto lab_0x407b68;\n        } else {\n            goto lab_0x40591a;\n        }\n    }\n  lab_0x407ee5:\n    // 0x407ee5\n    v6 = 4;\n    function_40dd80(4, str3);\n    v242 = (int64_t)\"cannot overwrite directory %s with non-directory\";\n    goto lab_0x406992;\n  lab_0x407e01:\n    // 0x407e01\n    function_40dca0(1, 4, a1);\n    v6 = 0;\n    function_40dca0(0, 4, str3);\n    v108 = (int64_t)\"cannot overwrite non-directory %s with directory %s\";\n    goto lab_0x405a68;\n  lab_0x4058a4:\n    // 0x4058a4\n    if (v410 == 3) {\n        // 0x407b5d\n        v102 = v103;\n        v104 = v105;\n        v106 = 3;\n        v110 = v103;\n        v112 = v105;\n        v117 = 3;\n        if (*v4 != 0) {\n            goto lab_0x407600;\n        } else {\n            goto lab_0x407b68;\n        }\n    } else {\n        int64_t v474 = *(int64_t *)(a6 + 56); // 0x4058ae\n        v6 = v474;\n        int64_t v475 = function_40abf0(v474, str3, v305); // 0x4058c6\n        v233 = str3;\n        v235 = v105 % 256;\n        if ((char)v475 != 0) {\n            // 0x4081f3\n            function_40dca0(1, 4, a1);\n            v6 = 0;\n            function_40dca0(0, 4, str3);\n            v108 = (int64_t)\"will not overwrite just-created %s with %s\";\n            goto lab_0x405a68;\n        } else {\n            goto lab_0x405900;\n        }\n    }\n  lab_0x406c08:\n    // 0x406c08\n    function_40dca0(1, 4, str3);\n    v6 = 0;\n    function_40dca0(0, 4, a1);\n    v400 = (int64_t)\"inter-device move failed: %s to %s; unable to remove target\";\n    goto lab_0x406c3d;\n  lab_0x405bcd:;\n    int64_t v476 = v422; // 0x405b86\n    v6 = a1;\n    int64_t v477 = function_409c90(a1, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x405be1\n    v38 = 0;\n    v40 = v41;\n    v42 = v72;\n    v43 = v476;\n    v44 = v476;\n    v45 = str3;\n    v46 = v79;\n    v47 = 0;\n    v48 = a1;\n    v49 = v10;\n    if ((int32_t)v477 < 0) {\n        // 0x4079be\n        function_40dca0(1, 4, a1);\n        function_40dca0(0, 4, str3);\n        char * format9 = dcgettext(NULL, \"cannot create symbolic link %s to %s\", 5); // 0x4079f5\n        int32_t err_num4 = *__errno_location(); // 0x407a0b\n        v6 = 0;\n        error(0, err_num4, format9);\n        v35 = (int64_t)format9;\n        v36 = v10;\n        goto lab_0x4065d0;\n    } else {\n        goto lab_0x405c05;\n    }\n  lab_0x40674f:;\n    int128_t v172 = __asm_movdqu(*(int128_t *)&v89); // 0x40674f\n    int128_t v173 = __asm_movdqu(*(int128_t *)(a6 + 16)); // 0x406755\n    int128_t v174 = __asm_movdqu(*(int128_t *)(a6 + 32)); // 0x406763\n    int128_t v175 = __asm_movdqu(*(int128_t *)(a6 + 48)); // 0x406769\n    v86 = __asm_movaps(v172);\n    __asm_movaps(v173);\n    __asm_movaps(v174);\n    __asm_movaps(v175);\n    int64_t v176 = function_40e7f0(a1, 2); // 0x406793\n    int32_t length2; // bp-680, 0x405650\n    int32_t v177; // 0x405650\n    int32_t v167; // 0x405650\n    if (v176 == 0) {\n        // 0x408022\n        function_40dd80(4, a1);\n        char * format6 = dcgettext(NULL, \"cannot access %s\", 5); // 0x408042\n        int32_t * err_num2 = __errno_location(); // 0x40804a\n        v6 = 0;\n        error(0, *err_num2, format6);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = 0;\n        v44 = 0;\n        v45 = (int64_t)format6;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10;\n    } else {\n        // 0x4067a8\n        int64_t v178; // 0x405650\n        uint32_t v179; // 0x405650\n        char * v180; // 0x405650\n        int64_t v181; // 0x4068ba\n        if (*(char *)v176 == 0) {\n            // branch -> 0x40690b\n        } else {\n            int64_t v182 = &v86;\n            int64_t v183 = 0x100000000 * v184 >> 32;\n            v179 = 0x1000000 * (int32_t)v185 >> 24;\n            v180 = (char *)a8;\n            int64_t v186 = 0; // 0x406825\n            int64_t str5 = v176; // 0x40683f\n            int64_t v187 = function_40aeb0(); // 0x40685b\n            int64_t v188 = function_40aeb0(); // 0x40686f\n            char v189 = *v180; // 0x40689c\n            *(int64_t *)(v190 - 40) = 0;\n            *(int64_t *)(v190 - 48) = (int64_t)&length2;\n            *(int64_t *)(v190 - 56) = (int64_t)&v70;\n            *(int64_t *)(v190 - 64) = 0;\n            v70 = v189;\n            int64_t v191 = function_405650(v187, v188, (char)v179, v192, v183, v182, (int64_t)v189, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76); // 0x4068b5\n            v181 = 0x100000000000000 * (v191 & 1) >> 56;\n            *v7 = *v7 | (char)length2;\n            free((int64_t *)v188);\n            free((int64_t *)v187);\n            while ((char)length2 == 0) {\n                // 0x406830\n                v186 = v70 | (char)v186;\n                str5 = str5 + 1 + (int64_t)strlen((char *)str5);\n                v178 = v186;\n                if (*(char *)str5 == 0) {\n                    // break -> 0x4068ec\n                    break;\n                }\n                v187 = function_40aeb0();\n                v188 = function_40aeb0();\n                v189 = *v180;\n                *(int64_t *)(v190 - 40) = 0;\n                *(int64_t *)(v190 - 48) = (int64_t)&length2;\n                *(int64_t *)(v190 - 56) = (int64_t)&v70;\n                *(int64_t *)(v190 - 64) = 0;\n                v70 = v189;\n                v191 = function_405650(v187, v188, (char)v179, v192, v183, v182, (int64_t)v189, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76);\n                v181 = 0x100000000000000 * (v191 & v181) >> 56;\n                *v7 = *v7 | (char)length2;\n                free((int64_t *)v188);\n                free((int64_t *)v187);\n            }\n        }\n        // 0x40690b\n        v6 = v176;\n        free((int64_t *)v176);\n        *v180 = (char)(v178 & 0xffffffff);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = v181;\n        v44 = 0;\n        v45 = v179;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10 % 256;\n    }\n    goto lab_0x405c05;\n  lab_0x4071a0:;\n    int64_t v200 = v201;\n    int64_t v202 = v203;\n    int64_t v204 = v205; // 0x4080b9\n    int64_t v206 = v207;\n    v208 = v206;\n    v209 = v204;\n    v210 = v202;\n    v211 = v200;\n    if (v138 == 0xa000 == (v212 != 0)) {\n        // 0x4080a4\n        v208 = v206;\n        v209 = v204;\n        v210 = v202;\n        v211 = v200;\n        if (*(int64_t *)(v204 + 16) < 2) {\n            goto lab_0x4071ba;\n        } else {\n            // 0x4080af\n            v6 = a1;\n            char * v213 = canonicalize_file_name(file_path); // 0x4080c7\n            int64_t v214 = 0x100000000 * v204 >> 32; // 0x4080d3\n            v89 = v214;\n            int64_t v215 = v200 % 256; // 0x4080dd\n            v208 = v206;\n            v209 = v214;\n            v210 = 0x100000000000000 * v202 >> 56;\n            v211 = v215;\n            if (v213 == NULL) {\n                goto lab_0x4071ba;\n            } else {\n                int64_t v216 = (int64_t)v213; // 0x4080c7\n                int64_t v217 = function_40e2f0(v216, str3); // 0x408103\n                int64_t v218 = 0x100000000000000 * v216 >> 56; // 0x408108\n                v6 = v218;\n                free((int64_t *)v218);\n                v219 = str3;\n                v220 = (int32_t)&g76 ^ (int32_t)&g76;\n                v221 = v215;\n                v222 = v217 & 0xffffffff ^ 1;\n                goto lab_0x4078fb;\n            }\n        }\n    } else {\n        goto lab_0x4071ba;\n    }\n  lab_0x407507:\n    // 0x407507\n    v94 = v223;\n    v95 = v224;\n    v96 = v97;\n    v98 = v93;\n    v99 = v225;\n    if (*(int64_t *)(v226 + 8) != *(int64_t *)(v227 + 8)) {\n        goto lab_0x405823;\n    } else {\n        // 0x407515\n        v94 = v223;\n        v95 = v224;\n        v96 = v97;\n        v98 = v93;\n        v99 = v225;\n        if (*(int64_t *)v226 != *(int64_t *)v227) {\n            goto lab_0x405823;\n        } else {\n            // 0x407521\n            v94 = v223;\n            v95 = v224;\n            v96 = 1;\n            v98 = v93;\n            v99 = v225;\n            v228 = v223;\n            v229 = v227;\n            v230 = v226;\n            v231 = v225;\n            if (*(char *)(a6 + 23) == 0) {\n                goto lab_0x40719b;\n            } else {\n                goto lab_0x405823;\n            }\n        }\n    }\n  lab_0x407df0:\n    // 0x407df0\n    v219 = v101;\n    v220 = 0;\n    v221 = v91;\n    v222 = *(int64_t *)v88 == *(int64_t *)v84;\n    goto lab_0x4078fb;\n  lab_0x40719b:\n    // 0x40719b\n    v207 = v228;\n    v205 = v229;\n    v212 = *v4;\n    v203 = v230;\n    v201 = v231;\n    goto lab_0x4071a0;\n  lab_0x407600:;\n    int64_t v484 = function_40aa00(a1, v102); // 0x407609\n    int64_t v485 = v104 % 256; // 0x40760e\n    int64_t v141 = v102; // 0x40761b\n    int64_t v142 = v485; // 0x40761b\n    int64_t str = v484; // 0x40761b\n    int64_t v143 = v106; // 0x40761b\n    int64_t v118 = v102; // 0x40761b\n    int64_t v119 = v485; // 0x40761b\n    int64_t v120 = v484; // 0x40761b\n    int64_t v121 = v106; // 0x40761b\n    int64_t v122 = 1; // 0x40761b\n    if (*(char *)v484 == 46) {\n        goto lab_0x407f93;\n    } else {\n        goto lab_0x407621;\n    }\n  lab_0x405c05:;\n    int64_t v193 = v49;\n    int64_t v194 = v48;\n    int64_t v195 = v45;\n    uint64_t v162 = v43;\n    int64_t * v196 = v40;\n    int64_t v197 = v38;\n    int32_t v198 = v177;\n    char v199 = v42; // 0x405c13\n    int64_t v156 = v195; // 0x405c1a\n    if (v199 != 0) {\n        goto lab_0x405c70;\n    } else {\n        // 0x405c1c\n        v156 = v195;\n        if (v138 == 0x4000 | *(char *)(a6 + 20) == 1) {\n            goto lab_0x405c70;\n        } else {\n            // 0x405c28\n            v156 = v195;\n            if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                goto lab_0x405c70;\n            } else {\n                // 0x405c38\n                v6 = str3;\n                v156 = 0;\n                if ((char)function_4052e0(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                    goto lab_0x405c70;\n                } else {\n                    // 0x405c61\n                    v156 = 0;\n                    v35 = 0;\n                    v36 = v193;\n                    if (*(char *)(a6 + 38) != 0) {\n                        goto lab_0x4065d0;\n                    } else {\n                        goto lab_0x405c70;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4065d0:\n    // 0x4065d0\n    v51 = v35;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x406acd;\n    } else {\n        // 0x4065db\n        v52 = v53;\n        v54 = v36;\n        if (v55 == 0) {\n            // 0x4065e9\n            function_409640((int64_t)owner, v11);\n            v52 = v53;\n            v54 = v36;\n        }\n        goto lab_0x406073;\n    }\n  lab_0x406f08:;\n    char * v56 = (char *)(a6 + 35); // 0x406f22\n    unsigned char v57 = *v56; // 0x406f22\n    int64_t v58 = function_40ab10(a1, 0x20000 * (int32_t)(*v5 == 2), v59); // 0x406f32\n    int32_t v60 = v58; // 0x406f3d\n    int32_t err_num5; // 0x405650\n    int64_t v61; // 0x405650\n    int64_t v62; // 0x405650\n    int64_t v63; // 0x405650\n    char * format11; // 0x405650\n    int64_t v64; // 0x405650\n    int64_t v65; // 0x405650\n    int32_t v66; // 0x405650\n    int32_t v67; // 0x405650\n    uint32_t fd2; // 0x406f45\n    uint32_t v68; // 0x406f8c\n    if (v60 < 0) {\n        // 0x407c46\n        v6 = 4;\n        function_40dd80(4, a1);\n        v69 = (int64_t)\"cannot open %s for reading\";\n        goto lab_0x4065b0;\n    } else {\n        // 0x406f45\n        fd2 = 0x1000000 * v60 >> 24;\n        if (__fxstat(1, fd2, (struct stat *)&v70) != 0) {\n            // 0x407f1f\n            function_40dd80(4, a1);\n            v6 = 0;\n            char * v71 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x407f3f\n            err_num5 = *__errno_location();\n            v64 = v72;\n            format11 = v71;\n            goto lab_0x4070f0;\n        } else {\n            if (v1 != (int64_t)owner) {\n                goto lab_0x407acf;\n            } else {\n                // 0x406f78\n                if (v11 != (int64_t)v70) {\n                    goto lab_0x407acf;\n                } else {\n                    // 0x406f8c\n                    v68 = v73 % 512;\n                    if ((char)v72 != 0) {\n                        // 0x406f8c\n                        v66 = (int64_t)v41;\n                        v61 = v74;\n                        goto lab_0x407040;\n                    } else {\n                        int64_t v75 = function_40ab10(str3, *v56 == 0 ? 1 : 513, (int64_t)&v70); // 0x406fc6\n                        int64_t v76 = 0x100000000 * v75 >> 32; // 0x406fcd\n                        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                            int64_t v77 = v76 & 0xffffffff; // 0x4082b5\n                            v63 = v77;\n                            v15 = v72;\n                            v67 = 0;\n                            v65 = v76;\n                            v62 = v77;\n                            if ((int32_t)v76 < 0) {\n                                goto lab_0x406fef;\n                            } else {\n                                goto lab_0x4082cd;\n                            }\n                        } else {\n                            // 0x406fe7\n                            v63 = v75 & 0xffffffff;\n                            if ((int32_t)v75 >= 0) {\n                                int64_t v78 = function_4052e0(str3, *(char *)(a6 + 37), 0, a6); // 0x408903\n                                v15 = v72;\n                                v67 = 0;\n                                v65 = v76;\n                                v62 = a6;\n                                if ((char)v78 != 0) {\n                                    goto lab_0x4082cd;\n                                } else {\n                                    // 0x408913\n                                    v15 = 0;\n                                    v67 = 0;\n                                    v65 = v76;\n                                    v62 = a6;\n                                    if (*(char *)(a6 + 38) == 0) {\n                                        goto lab_0x4082cd;\n                                    } else {\n                                        // 0x408913\n                                        fd = v76;\n                                        v16 = 0;\n                                        v18 = 0;\n                                        v20 = 0;\n                                        v22 = v79;\n                                        v23 = v78 & 0xffffffff;\n                                        v25 = a1;\n                                        v26 = v10;\n                                        goto lab_0x408600;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x406fef;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4065b0:;\n    char * format4 = dcgettext(NULL, (char *)v69, 5); // 0x4065b2\n    int32_t * err_num = __errno_location(); // 0x4065ba\n    v6 = 0;\n    error(0, *err_num, format4);\n    v35 = (int64_t)format4;\n    v36 = v10;\n    goto lab_0x4065d0;\n  lab_0x4071e3:;\n    // 0x4071e3\n    int64_t v80; // 0x405650\n    int64_t v81; // 0x405650\n    int64_t v82; // 0x405650\n    int32_t v83; // 0x405650\n    if (*v5 != 2) {\n        goto lab_0x406b70;\n    } else {\n        // 0x4071ee\n        if ((*(int32_t *)(v84 + 24) & 0xf000) == 0xa000) {\n            // 0x408974\n            v6 = 1;\n            int32_t v85 = __xstat(1, file_path, (struct stat *)&v86); // 0x408994\n            int64_t v87 = 0x100000000000000 * v88 >> 56; // 0x408999\n            v89 = v87;\n            int64_t v90 = v91 % 256; // 0x4089a0\n            int32_t v92 = v93;\n            v94 = a1;\n            v95 = v92;\n            v96 = v97;\n            v98 = v93;\n            v99 = v90;\n            v82 = a1;\n            v80 = v87;\n            v83 = v92;\n            v81 = v90;\n            if (v85 == 0) {\n                goto lab_0x407260;\n            } else {\n                goto lab_0x405823;\n            }\n        } else {\n            // 0x407201\n            v86 = __asm_movaps(__asm_movdqa(*(int128_t *)v84));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 16)));\n            int64_t v100 = __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 32))); // 0x40721d\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 48)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 64)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 80)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 96)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 112)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 128)));\n            v82 = v101;\n            v80 = v89;\n            v83 = v100;\n            v81 = v91;\n            goto lab_0x407260;\n        }\n    }\n  lab_0x407d38:\n    // 0x407d38\n    v102 = v103;\n    v104 = v105;\n    v106 = v107;\n    if ((int32_t)v107 != 0) {\n        goto lab_0x407600;\n    } else {\n        // 0x407d41\n        function_40de50(0, 3, str3);\n        v6 = 0;\n        function_40de50(0, 3, a1);\n        v108 = (int64_t)\"cannot move directory onto non-directory: %s -> %s\";\n        goto lab_0x405a68;\n    }\n  lab_0x407b68:;\n    int64_t v109 = function_40aa00(a1, v110); // 0x407b71\n    int64_t v111 = v112 % 256; // 0x407b76\n    int64_t v113 = v110; // 0x407b83\n    int64_t v114 = v111; // 0x407b83\n    int64_t v115 = v109; // 0x407b83\n    int64_t v116 = v117; // 0x407b83\n    v118 = v110;\n    v119 = v111;\n    v120 = v109;\n    v121 = v117;\n    v122 = 0;\n    if (*(char *)v109 == 46) {\n        goto lab_0x407f93;\n    } else {\n        goto lab_0x407b89;\n    }\n  lab_0x40591a:\n    // 0x40591a\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v133;\n    v134 = v135;\n    if (((char)v136 || (char)((owner & 0xf000) == 0x4000)) != 0) {\n        goto lab_0x405aa4;\n    } else {\n        char v137 = *(char *)(a6 + 21); // 0x405942\n        if (v137 != 0) {\n            goto lab_0x40596a;\n        } else {\n            // 0x405951\n            if (v1 < 2 | *(char *)(a6 + 34) == 0) {\n                // 0x407f5d\n                v123 = v124;\n                v125 = 0;\n                v126 = v137;\n                v128 = v129;\n                v130 = v131;\n                v132 = v133;\n                v134 = v135;\n                if (v138 != 0x8000 == *v5 == 2) {\n                    goto lab_0x40596a;\n                } else {\n                    goto lab_0x405aa4;\n                }\n            } else {\n                goto lab_0x40596a;\n            }\n        }\n    }\n  lab_0x407f93:;\n    int64_t v139 = v120 + 1; // 0x407f95\n    char v140 = *(char *)(v139 + (int64_t)(*(char *)v139 == 46)); // 0x407f9d\n    v136 = v122;\n    v133 = v119;\n    switch (v140) {\n        case 0: {\n            goto lab_0x40591a;\n        }\n        case 47: {\n            goto lab_0x40591a;\n        }\n        default: {\n            // 0x407fb4\n            v141 = v118;\n            v142 = v119;\n            str = v120;\n            v143 = v121;\n            v113 = v118;\n            v114 = v119;\n            v115 = v120;\n            v116 = v121;\n            if (v122 == 0) {\n                goto lab_0x407b89;\n            } else {\n                goto lab_0x407621;\n            }\n        }\n    }\n  lab_0x407621:;\n    int64_t v144 = v142; // 0x407625\n    if ((int32_t)v143 != 3) {\n        uint32_t len = strlen((char *)str); // 0x40763b\n        int64_t str2 = function_40aa00(str3, v141); // 0x40764e\n        int32_t len2 = strlen((char *)str2); // 0x40765d\n        int64_t v145 = len2; // 0x40765d\n        int64_t len3 = strlen(g52); // 0x407676\n        int64_t v146 = v142 % 256; // 0x40767b\n        v144 = v146;\n        if (0x100000000000000 * (int64_t)len >> 56 == len3 + v145) {\n            // 0x40769d\n            v144 = v146;\n            if (memcmp((int64_t *)(str & 0xffffffff), (int64_t *)(0x100000000000000 * str2 >> 56), len2) == 0) {\n                // 0x4076d2\n                v144 = v146;\n                if (strcmp((char *)((0x100000000 * str >> 32) + v145), g52) == 0) {\n                    int32_t len4 = strlen((char *)str3); // 0x407705\n                    int64_t v147 = function_4100e0(len3 + 1 + (int64_t)len4); // 0x40771d\n                    int64_t * v148 = (int64_t *)v147; // 0x407744\n                    strcpy((char *)mempcpy(v148, (int64_t *)str3, len4), g52);\n                    uint32_t v149 = __xstat(1, (char *)v147, (struct stat *)&v86); // 0x40776a\n                    v6 = v147;\n                    free(v148);\n                    v144 = v146;\n                    if (v1 == v150 == v149 % 256 == 0) {\n                        // 0x408e24\n                        v144 = v146;\n                        if (v11 == v86) {\n                            // 0x408e38\n                            char * format5; // 0x405650\n                            if (*v4 == 0) {\n                                // 0x408e89\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not copied\", 5);\n                            } else {\n                                // 0x408e3f\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not moved\", 5);\n                            }\n                            // 0x408e53\n                            function_40dca0(1, 4, a1);\n                            v6 = 0;\n                            function_40dca0(0, 4, str3);\n                            // 0x405a78\n                            error(0, 0, format5);\n                            // 0x405f31\n                            return 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int64_t str4 = function_40a570(str3, *(int32_t *)&v89); // 0x4077b9\n    uint64_t v151 = 0x100000000000000 * v144 >> 56; // 0x4077d2\n    int32_t * err_num6; // 0x405650\n    int64_t v152; // 0x405650\n    if (str4 == 0) {\n        int32_t * v153 = __errno_location(); // 0x407e86\n        v123 = v124;\n        v125 = 0;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v135;\n        if (*v153 == 2) {\n            goto lab_0x405aa4;\n        } else {\n            // 0x407ea5\n            v6 = 4;\n            function_40dd80(4, str3);\n            err_num6 = v153;\n            v152 = (int64_t)\"cannot backup %s\";\n            goto lab_0x407ec3;\n        }\n    } else {\n        int32_t len5 = strlen((char *)str4); // 0x4077e1\n        int64_t v154 = v135 - ((int64_t)len5 + 24 & -16); // 0x4077f5\n        int64_t * dest_mem = memcpy((int64_t *)(v154 + 15 & -16), (int64_t *)str4, len5 + 1); // 0x407801\n        free((int64_t *)(0x100000000000000 * str4 >> 56));\n        v123 = v124;\n        v125 = (int64_t)dest_mem;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v154;\n        goto lab_0x405aa4;\n    }\n  lab_0x405c70:;\n    int64_t v155 = v156;\n    int64_t v157 = v155; // 0x405c72\n    if ((char)v46 != 0) {\n        int64_t * v158 = (int64_t *)(a6 + 56); // 0x405c74\n        v157 = v155;\n        if (*v158 != 0) {\n            int64_t v159 = &v86; // 0x405c82\n            v6 = 1;\n            int32_t v160 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x405c95\n            v157 = v159;\n            if (v160 == 0) {\n                int64_t v161 = *v158; // 0x405ca6\n                v6 = v161;\n                function_40ab60(v161, str3, v159);\n                v157 = v159;\n            }\n        }\n    }\n    // 0x405cc8\n    if (v47 != 0 || v138 != 0x4000 == (*(char *)(a6 + 23) != 0)) {\n        // 0x405f31\n        return v162 % 256 & 0xffffffff;\n    }\n    char v163 = v44;\n    if (*(char *)(a6 + 31) == 0) {\n        goto lab_0x405da0;\n    } else {\n        // 0x405cec\n        v6 = str3;\n        if (v163 == 0) {\n            // 0x4073e0\n            if ((int32_t)function_40f8a0(str3, &v86) == 0) {\n                goto lab_0x405dad;\n            } else {\n                goto lab_0x405d52;\n            }\n        } else {\n            // 0x405d3f\n            if ((int32_t)function_40f8b0(str3, &v86, v157) == 0 || *__errno_location() == 38) {\n                // 0x405f31\n                return v162 % 256 & 0xffffffff;\n            }\n            goto lab_0x405d52;\n        }\n    }\n  lab_0x4066d4:;\n    char * v164 = (char *)a8; // 0x4066d8\n    if (*v164 == 0) {\n        // 0x407b37\n        v6 = str3;\n        function_4096d0(str3, v1, (int64_t)v165);\n        *v164 = 1;\n    }\n    // 0x4066e1\n    int32_t v166; // 0x405650\n    v167 = v166;\n    v168 = v169;\n    v170 = v171;\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x4066e8\n        if (*v4 == 0) {\n            // 0x407caf\n            v6 = a1;\n            function_404a30(a1, str3, 0);\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        } else {\n            // 0x4066f3\n            function_40dd80(4, str3);\n            v6 = 1;\n            __printf_chk(1, dcgettext(NULL, \"created directory %s\\n\", 5));\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        }\n    }\n    goto lab_0x40674f;\n  lab_0x407b89:\n    // 0x407b89\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v114;\n    v134 = v135;\n    v141 = v113;\n    v142 = v114;\n    str = v115;\n    v143 = v116;\n    if ((owner & 0xf000) != 0x4000) {\n        goto lab_0x407621;\n    } else {\n        goto lab_0x405aa4;\n    }\n  lab_0x405da0:\n    if (v163 != 0) {\n        // 0x405f31\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405dad;\n  lab_0x40596a:\n    // 0x40596a\n    if (unlink((char *)str3) == 0) {\n        goto lab_0x40599f;\n    } else {\n        int32_t * v555 = __errno_location(); // 0x405987\n        if (*v555 != 2) {\n            // 0x4087df\n            v6 = 4;\n            function_40dd80(4, str3);\n            err_num6 = v555;\n            v152 = (int64_t)\"cannot remove %s\";\n            goto lab_0x407ec3;\n        } else {\n            goto lab_0x40599f;\n        }\n    }\n  lab_0x405dad:\n    // 0x405dad\n    if (*v404 != 0) {\n        if (true != (true == v199 == 0)) {\n            // 0x405dcf\n            v6 = a6;\n            int64_t v486 = function_405430(a6, str3, 0xffffffff, v192, v199, (int64_t *)&v165); // 0x405df4\n            if ((int32_t)v486 == -1) {\n                // 0x405f31\n                return 0;\n            }\n        }\n    }\n    // 0x405e18\n    char v487; // 0x405ec2\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        // 0x407860\n        if ((int32_t)function_409d90(v194, 0xffffffff, str3) == 0) {\n            // 0x405f31\n            return v162 % 256 & 0xffffffff;\n        }\n        // 0x405ebb\n        v487 = *(char *)(a6 + 36);\n        // 0x405f31\n        return (v487 != 0 ? v193 : v162 % 256) & 0xffffffff & 0xffffffff;\n    }\n    // 0x405e2c\n    int64_t v488; // 0x407b1b\n    if (*v401 != 0) {\n        // 0x407b01\n        v488 = (int32_t)function_409e20(str3) != 0 ? v193 : v162 % 256;\n        // 0x405f31\n        return v488 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405e37\n    if (*(char *)(a6 + 32) != 0) {\n        // 0x407c65\n        function_405620(v6);\n        // 0x407b01\n        v488 = (int32_t)function_409e20(str3) != 0 ? v193 : v162 % 256;\n        // 0x405f31\n        return v488 & 0xffffffff & 0xffffffff;\n    }\n    int32_t v489 = (int64_t)v196; // 0x405e48\n    int64_t * v490 = v196; // 0x405e4a\n    int64_t * v491; // 0x405650\n    int32_t v492; // 0x405650\n    uint32_t v493; // 0x40637e\n    int64_t * v494; // 0x40637e\n    if (v489 != 0) {\n        // 0x406377\n        v493 = -1 - (int32_t)function_405620(v6) & v489;\n        v494 = (int64_t *)(int64_t)v493;\n        v490 = v494;\n        if (v493 == 0) {\n            goto lab_0x405e50;\n        } else {\n            // 0x40638a\n            v492 = v198;\n            v491 = v494;\n            if ((char)v197 == 1) {\n                goto lab_0x405e5d;\n            } else {\n                if (v199 != 0) {\n                    int32_t v495 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x408815\n                    v9 = str3;\n                    if (v495 == 0) {\n                        goto lab_0x4063a4;\n                    } else {\n                        goto lab_0x405ef7;\n                    }\n                } else {\n                    goto lab_0x4063a4;\n                }\n            }\n        }\n    } else {\n        goto lab_0x405e50;\n    }\n  lab_0x4070f0:\n    // 0x4070f0\n    error(0, err_num5, format11);\n    int64_t v27 = v64; // 0x4070fc\n    int64_t v28 = 0; // 0x4070fc\n    int64_t v29 = (int64_t)format11; // 0x4070fc\n    int64_t v30 = v79; // 0x4070fc\n    int64_t v31 = 0; // 0x4070fc\n    int64_t v32 = a1; // 0x4070fc\n    int64_t v33 = v10; // 0x4070fc\n    goto lab_0x407107;\n  lab_0x407acf:\n    // 0x407acf\n    function_40dd80(4, a1);\n    v6 = 0;\n    err_num5 = (int32_t)\"skipping file %s, as it was replaced while being copied\" ^ (int32_t)\"skipping file %s, as it was replaced while being copied\";\n    v64 = v72;\n    format11 = dcgettext(NULL, \"skipping file %s, as it was replaced while being copied\", 5);\n    goto lab_0x4070f0;\n  lab_0x40749e:\n    // 0x40749e\n    free((int64_t *)v424);\n    v6 = 0;\n    function_40de50(0, 3, str3);\n    v50 = (int64_t)\"%s: can make relative symbolic links only in current directory\";\n    goto lab_0x406472;\n  lab_0x407260:;\n    // 0x407260\n    int64_t v496; // 0x405650\n    int64_t v497; // 0x405650\n    int64_t v498; // 0x405650\n    int128_t v499; // 0x405650\n    if ((*(int32_t *)(v80 + 24) & 0xf000) == 0xa000) {\n        // 0x40893d\n        v6 = 1;\n        int32_t v500 = __xstat(1, (char *)str3, (struct stat *)&v70); // 0x40895a\n        int64_t v501 = v81 % 256; // 0x40895f\n        v94 = str3;\n        v95 = v83;\n        v96 = v97;\n        v98 = v93;\n        v99 = v501;\n        v497 = str3;\n        v498 = v93;\n        v496 = v501;\n        if (v500 == 0) {\n            goto lab_0x4072eb;\n        } else {\n            goto lab_0x405823;\n        }\n    } else {\n        // 0x407274\n        v70 = __asm_movaps(__asm_movdqa(*(int128_t *)v80));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 16)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 32)));\n        int64_t v502 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 48))); // 0x4072a0\n        int64_t v503 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 64))); // 0x4072ad\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 80)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 96)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 112)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 128)));\n        v497 = v82;\n        v499 = v502;\n        v498 = v503;\n        v496 = v81;\n        goto lab_0x4072eb;\n    }\n  lab_0x40599f:;\n    int64_t v504 = v133 % 256;\n    char v505 = *(char *)(a6 + 46); // 0x40599f\n    if (v505 != 0) {\n        // 0x408261\n        function_40dd80(4, str3);\n        __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n        v123 = v124;\n        v125 = 0;\n        v126 = v505;\n        v128 = v129;\n        v130 = v131;\n        v132 = v504;\n        v134 = v135;\n        goto lab_0x405aa4;\n    } else {\n        if ((char)a7 == 0) {\n            unsigned char v506 = *(char *)(a6 + 42) & (char)(v138 == 0x4000); // 0x40823a\n            v293 = v124;\n            v294 = 0;\n            v295 = 1;\n            v296 = v129;\n            v297 = v131;\n            v298 = v135;\n            if (v506 != 0) {\n                // 0x4069b2\n                v6 = v150;\n                v330 = v150;\n                v331 = v124;\n                v332 = 0;\n                v333 = v506;\n                v334 = v129;\n                v335 = v131;\n                v336 = v135;\n                goto lab_0x4069d0;\n            } else {\n                goto lab_0x405ae8;\n            }\n        } else {\n            int64_t v507 = 0x100000000000000 * a7 >> 56; // 0x4059bf\n            v251 = v124;\n            v255 = 0;\n            v254 = v507;\n            v253 = v129;\n            v252 = v131;\n            v249 = v504;\n            v250 = v135;\n            v259 = v124;\n            v260 = 0;\n            v261 = v507;\n            v262 = v129;\n            v263 = v131;\n            v264 = v135;\n            if (*(int64_t *)(a6 + 56) == 0) {\n                goto lab_0x405f70;\n            } else {\n                goto lab_0x4059e0;\n            }\n        }\n    }\n  lab_0x407ec3:\n    // 0x407ec3\n    error(0, *err_num6, dcgettext(NULL, (char *)v152, 5));\n    // 0x405f31\n    return 0;\n  lab_0x405e50:\n    // 0x405e50\n    v492 = v198;\n    v491 = v490;\n    if ((char)v197 == 0) {\n        // 0x405f31\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405e5d;\n  lab_0x405d52:\n    // 0x405d52\n    function_40dd80(4, str3);\n    char * format17 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x405d72\n    int32_t * err_num8 = __errno_location(); // 0x405d7a\n    v6 = 0;\n    error(0, *err_num8, format17);\n    if (*(char *)(a6 + 36) != 0) {\n        // 0x405f31\n        return 0;\n    }\n    goto lab_0x405da0;\n  lab_0x407107:\n    // 0x407107\n    if (close(fd2) < 0) {\n        // 0x407e3b\n        function_40dd80(4, v32);\n        char * format2 = dcgettext(NULL, \"failed to close %s\", 5); // 0x407e57\n        error(0, *__errno_location(), format2);\n        int64_t v34 = 0x100000000 * v28 >> 32; // 0x407e75\n        v6 = v34;\n        free((int64_t *)v34);\n        v35 = (int64_t)format2;\n        v36 = v33;\n        goto lab_0x4065d0;\n    } else {\n        int64_t v37 = 0x100000000 * v28 >> 32; // 0x407129\n        v6 = v37;\n        free((int64_t *)v37);\n        v38 = v39;\n        v40 = v41;\n        v42 = v27;\n        v43 = 0x100000000000000 * v31 >> 56;\n        v44 = 0;\n        v45 = v29;\n        v46 = v30;\n        v47 = v31 % 256;\n        v48 = v32;\n        v49 = v33;\n        v35 = v29;\n        v36 = v33;\n        if ((char)v31 != 0) {\n            goto lab_0x405c05;\n        } else {\n            goto lab_0x4065d0;\n        }\n    }\n  lab_0x406472:;\n    char * format3 = dcgettext(NULL, (char *)v50, 5); // 0x406474\n    v6 = 0;\n    error(0, 0, format3);\n    v35 = (int64_t)format3;\n    v36 = v10;\n    goto lab_0x4065d0;\n  lab_0x405e5d:\n    // 0x405e5d\n    if (chmod((char *)str3, v492 || (int32_t)(int64_t)v491) == 0) {\n        // 0x405f31\n        return v162 % 256 & 0xffffffff;\n    }\n    // 0x405e7d\n    function_40dd80(4, str3);\n    error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    // 0x405ebb\n    v487 = *(char *)(a6 + 36);\n    // 0x405f31\n    return (v487 != 0 ? v193 : v162 % 256) & 0xffffffff & 0xffffffff;\n  lab_0x4072eb:\n    // 0x4072eb\n    v94 = v497;\n    v95 = v83;\n    v96 = v97;\n    v464 = v499;\n    v98 = v498;\n    v99 = v496;\n    // 0x4072ff\n    v94 = v497;\n    v95 = v83;\n    v96 = v97;\n    v464 = v499;\n    v98 = v498;\n    v99 = v496;\n    if (v86 != (int64_t)v70) {\n        goto lab_0x405823;\n    } else {\n        // 0x407313\n        v94 = v497;\n        v95 = v83;\n        v96 = 1;\n        v464 = v499;\n        v98 = v498;\n        v99 = v496;\n        if (*(char *)(a6 + 23) == 0) {\n            goto lab_0x406b70;\n        } else {\n            goto lab_0x405823;\n        }\n    }\n  lab_0x407040:;\n    int64_t v508 = v68 & -1 - v66; // 0x40705f\n    int64_t v509 = 0x100000000 * function_40ab10(str3, 193, v508);\n    int64_t v510 = v509 >> 32; // 0x40706e\n    int32_t * v511 = __errno_location(); // 0x407074\n    int32_t v512 = *v511; // 0x40707f\n    char v513 = v509 < 0;\n    char v514 = v513; // 0x40709b\n    int64_t v515 = v510; // 0x40709b\n    int32_t v516 = v512; // 0x40709b\n    int32_t v517; // 0x405650\n    int64_t v518; // 0x405650\n    if (v509 < 0 != (v512 == 17)) {\n        goto lab_0x408748;\n    } else {\n        char v519 = *v4; // 0x4070a1\n        v518 = v519;\n        v517 = 17;\n        if (v519 == 0) {\n            int32_t v520 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x4086f6\n            v514 = v513;\n            v515 = v510;\n            v516 = 17;\n            if (v520 != 0) {\n                goto lab_0x408748;\n            } else {\n                // 0x4086ff\n                v514 = v513;\n                v515 = v510;\n                v516 = 17;\n                if ((owner & 0xf000) != 0xa000) {\n                    goto lab_0x408748;\n                } else {\n                    // 0x408711\n                    if (*(char *)(a6 + 48) == 0) {\n                        // 0x40946a\n                        function_40dd80(4, str3);\n                        char * format12 = dcgettext(NULL, \"not writing through dangling symlink %s\", 5); // 0x409491\n                        error(0, (int32_t)\"not writing through dangling symlink %s\" ^ (int32_t)\"not writing through dangling symlink %s\", format12);\n                        v27 = v509 < 0 == v512 == 17;\n                        v28 = 0;\n                        v29 = (int64_t)format12;\n                        v30 = v79;\n                        v31 = 0;\n                        v32 = a1;\n                        v33 = v10;\n                        goto lab_0x407107;\n                    } else {\n                        int64_t v521 = 0x100000000 * function_40ab10(str3, 65, v508);\n                        v514 = v521 < 0;\n                        v515 = v521 >> 32;\n                        v516 = *v511;\n                        goto lab_0x408748;\n                    }\n                }\n            }\n        } else {\n            goto lab_0x4070ba;\n        }\n    }\n  lab_0x407a67:\n    // 0x407a67\n    v6 = str7;\n    free((int64_t *)str7);\n    char v522 = *(char *)(a6 + 37); // 0x407a6f\n    v51 = v423;\n    if (v522 != 0) {\n        goto lab_0x406acd;\n    } else {\n        char v523 = *v404; // 0x407a82\n        if (v523 != 0) {\n            int64_t v524 = v522; // 0x407a74\n            int64_t v525 = owner; // 0x408670\n            v6 = str3;\n            if (lchown((char *)str3, owner, owner) == 0) {\n                int64_t v526 = v523; // 0x40882e\n                v38 = v524;\n                v40 = v41;\n                v42 = v72;\n                v43 = v526;\n                v44 = v526;\n                v45 = v525;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                goto lab_0x405c05;\n            } else {\n                // 0x40869f\n                v6 = a6;\n                int64_t v527 = function_405400(a6); // 0x4086a2\n                int64_t v528 = 0x100000000000000 * v527 >> 56; // 0x4086a7\n                v38 = v524;\n                v40 = v41;\n                v42 = v72;\n                v43 = v528;\n                v44 = v528;\n                v45 = v525;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                if ((char)v527 == 0) {\n                    char * format13 = dcgettext(NULL, \"failed to preserve ownership for %s\", 5); // 0x409042\n                    int64_t v529 = (int64_t)format13; // 0x409042\n                    int32_t * err_num7 = __errno_location(); // 0x40904a\n                    v6 = 0;\n                    error(0, *err_num7, format13);\n                    char v530 = *(char *)(a6 + 36); // 0x409064\n                    v35 = v529;\n                    v36 = v10;\n                    if (v530 != 0) {\n                        goto lab_0x4065d0;\n                    } else {\n                        int64_t v531 = v523; // 0x40907f\n                        v38 = v530;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = v531;\n                        v44 = v531;\n                        v45 = v529;\n                        v46 = v79;\n                        v47 = 0;\n                        v48 = a1;\n                        v49 = v10;\n                        goto lab_0x405c05;\n                    }\n                } else {\n                    goto lab_0x405c05;\n                }\n            }\n        } else {\n            // 0x407a90\n            v38 = v523;\n            v40 = v41;\n            v42 = v72;\n            v43 = 1;\n            v44 = 1;\n            v45 = v423;\n            v46 = v79;\n            v47 = v523;\n            v48 = a1;\n            v49 = v10;\n            goto lab_0x405c05;\n        }\n    }\n  lab_0x4063a4:\n    // 0x4063a4\n    v491 = v494;\n    if ((v493 & -1 - owner) == 0) {\n        // 0x405f31\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405e5d;\n  lab_0x408748:;\n    unsigned char v532 = v514 & (char)(v516 == 21); // 0x408758\n    if (v532 == 0) {\n        // 0x408dea\n        v518 = 1;\n        v517 = v516;\n        v15 = 1;\n        v67 = v66;\n        v65 = v515;\n        v62 = v61;\n        if ((int32_t)v515 < 0) {\n            goto lab_0x4070ba;\n        } else {\n            goto lab_0x4082cd;\n        }\n    } else {\n        int64_t v533 = v532;\n        v6 = str3;\n        v518 = v533;\n        v517 = 21;\n        if ((char)str3 != 0) {\n            int64_t v534 = str3; // 0x408788\n            int64_t v535 = -1; // 0x408788\n            int64_t v536 = 0; // 0x408788\n            while (v535 != 0) {\n                int64_t v537 = v534;\n                v534 = v537 + (v425 ? -1 : 1);\n                v6 = v534;\n                v535--;\n                v536 = v535;\n                if (*(char *)v537 == 0) {\n                    // break -> \n                    break;\n                }\n                v536 = 0;\n            }\n            v518 = v533;\n            v517 = (int32_t)(*(char *)(str3 - 3 - v536) != 47) | 20;\n        }\n        goto lab_0x4070ba;\n    }\n  lab_0x406fef:;\n    int32_t * v538 = __errno_location(); // 0x406fef\n    if (*(char *)(a6 + 22) == 0) {\n        int32_t v539 = *v538; // 0x408a4c\n        v518 = 0;\n        v517 = v539;\n        if (v539 != 2) {\n            goto lab_0x4070ba;\n        } else {\n            // 0x408a56\n            v66 = 0;\n            v61 = v63;\n            v518 = 0;\n            v517 = v539;\n            if (*v4 == 0) {\n                goto lab_0x407040;\n            } else {\n                goto lab_0x4070ba;\n            }\n        }\n    } else {\n        // 0x407002\n        if (unlink((char *)str3) != 0) {\n            // 0x40928a\n            function_40dd80(4, str3);\n            v6 = 0;\n            char * v540 = dcgettext(NULL, \"cannot remove %s\", 5); // 0x4092ae\n            err_num5 = *v538;\n            v64 = v72;\n            format11 = v540;\n            goto lab_0x4070f0;\n        } else {\n            // 0x407016\n            if (*(char *)(a6 + 46) != 0) {\n                // 0x4091eb\n                function_40dd80(4, str3);\n                __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n            }\n            char v541 = *(char *)(a6 + 33); // 0x407021\n            int64_t v542 = (int64_t)v41;\n            int32_t v543 = v542;\n            v66 = v543;\n            v61 = v542 & 0xffffffff;\n            if (v541 != 0) {\n                int64_t v544 = function_405210(a1, str3, v68, 1, a6); // 0x40912d\n                v66 = v543;\n                v61 = 1;\n                if ((char)v544 != 0) {\n                    goto lab_0x407040;\n                } else {\n                    // 0x40913d\n                    v27 = v541;\n                    v28 = 0;\n                    v29 = v68;\n                    v30 = v79;\n                    v31 = v544 & 0xffffffff;\n                    v32 = a1;\n                    v33 = v10;\n                    goto lab_0x407107;\n                }\n            } else {\n                goto lab_0x407040;\n            }\n        }\n    }\n  lab_0x4082cd:\n    // 0x4082cd\n    v6 = 1;\n    fd3 = v65;\n    int32_t v545 = __fxstat(1, fd3, (struct stat *)&v86); // 0x4082e9\n    int64_t v546; // 0x405650\n    int64_t v547; // 0x405650\n    int64_t v548; // 0x405650\n    int64_t v549; // 0x405650\n    int64_t v550; // 0x405650\n    int64_t v551; // 0x405650\n    int64_t v552; // 0x406f45\n    int64_t v553; // 0x4082d4\n    if (v545 != 0) {\n        // 0x4089b5\n        function_40dd80(4, str3);\n        char * format14 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x4089d9\n        error(0, *__errno_location(), format14);\n        fd = fd3;\n        v16 = v15;\n        v18 = 0;\n        v20 = (int64_t)format14;\n        v22 = v79;\n        v23 = 0;\n        v25 = a1;\n        v26 = v10;\n        goto lab_0x408600;\n    } else {\n        // 0x4082fc\n        v552 = fd2;\n        v553 = v65 & 0xffffffff;\n        v551 = 0;\n        v549 = v62;\n        v550 = &v86;\n        v548 = v79;\n        v546 = a1;\n        v547 = v10;\n        if (v57 == 0) {\n            goto lab_0x40853f;\n        } else {\n            int32_t * v554 = (int32_t *)(a6 + 52); // 0x408309\n            if (*v554 != 0) {\n                // 0x408f90\n                v6 = v553;\n                v551 = 0;\n                v549 = v62;\n                v550 = v552;\n                v548 = v79;\n                v546 = a1;\n                v547 = v10;\n                if (ioctl(fd3, 0x40049409) == 0) {\n                    goto lab_0x40853f;\n                } else {\n                    // 0x408fb0\n                    if (*v554 != 2) {\n                        goto lab_0x408314;\n                    } else {\n                        // 0x408fbb\n                        function_40dca0(1, 4, a1);\n                        function_40dca0(0, 4, str3);\n                        char * format15 = dcgettext(NULL, \"failed to clone %s from %s\", 5); // 0x408ff6\n                        error(0, *__errno_location(), format15);\n                        fd = fd3;\n                        v16 = v15;\n                        v18 = 0;\n                        v20 = 0x100000000 * (int64_t)format15 >> 32;\n                        v22 = v79;\n                        v23 = 0;\n                        v25 = a1;\n                        v26 = v10;\n                        goto lab_0x408600;\n                    }\n                }\n            } else {\n                goto lab_0x408314;\n            }\n        }\n    }\n  lab_0x4070ba:\n    // 0x4070ba\n    function_40dd80(4, str3);\n    v6 = 0;\n    err_num5 = v517;\n    v64 = v518;\n    format11 = dcgettext(NULL, \"cannot create regular file %s\", 5);\n    goto lab_0x4070f0;\n  lab_0x40819d:\n    // 0x40819d\n    free((int64_t *)str7);\n    function_40dd80(4, str3);\n    char * format16 = dcgettext(NULL, \"cannot create symbolic link %s\", 5); // 0x4081c5\n    v6 = 0;\n    error(0, 0x1000000 * v426 >> 24, format16);\n    v35 = (int64_t)format16;\n    v36 = v10;\n    goto lab_0x4065d0;\n  lab_0x408600:\n    // 0x408600\n    v27 = v16;\n    v28 = v18;\n    v29 = v20;\n    v30 = v22;\n    v31 = v23 % 256;\n    v32 = v25;\n    v33 = v26;\n    if (close(fd) < 0) {\n        // 0x408622\n        function_40dd80(4, str3);\n        char * format = dcgettext(NULL, \"failed to close %s\", 5); // 0x408646\n        error(0, *__errno_location(), format);\n        v27 = v16;\n        v28 = v18;\n        v29 = (int64_t)format;\n        v30 = v22;\n        v31 = 0;\n        v32 = v25;\n        v33 = v26;\n    }\n    goto lab_0x407107;\n  lab_0x40853f:;\n    int64_t v556 = v550; // 0x408544\n    if (*(char *)(a6 + 31) != 0) {\n        // 0x408844\n        v6 = v553;\n        length2 = v1;\n        int64_t v557 = function_40f460(v553, str3, (int64_t *)&length2, v549); // 0x408890\n        v556 = &length2;\n        if ((int32_t)v557 == 0) {\n            goto lab_0x40854a;\n        } else {\n            // 0x40889d\n            function_40dd80(4, str3);\n            char * format18 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x4088c1\n            int64_t v558 = (int64_t)format18; // 0x4088c1\n            int32_t * err_num9 = __errno_location(); // 0x4088c9\n            v6 = 0;\n            error(0, *err_num9, format18);\n            v556 = v558;\n            fd = fd3;\n            v16 = v15;\n            v18 = v551;\n            v20 = v558;\n            v22 = v548;\n            v23 = 0;\n            v25 = v546;\n            v26 = v547;\n            if (*(char *)(a6 + 36) == 0) {\n                goto lab_0x40854a;\n            } else {\n                goto lab_0x408600;\n            }\n        }\n    } else {\n        goto lab_0x40854a;\n    }\n  lab_0x40854a:;\n    int64_t v559 = v556; // 0x40854f\n    if (*v404 == 0) {\n        goto lab_0x4085af;\n    } else {\n        // 0x408551\n        v559 = v556;\n        if (true == owner == v363) {\n            goto lab_0x4085af;\n        } else {\n            // 0x40856d\n            v6 = a6;\n            int64_t v560 = function_405430(a6, str3, v553, v192, (char)v15, &v86); // 0x408593\n            v559 = v553;\n            fd = fd3;\n            v16 = v15;\n            v18 = v551;\n            v20 = v553;\n            v22 = v548;\n            v23 = 0;\n            v25 = v546;\n            v26 = v547;\n            if ((int32_t)v560 == -1) {\n                goto lab_0x408600;\n            } else {\n                goto lab_0x4085af;\n            }\n        }\n    }\n  lab_0x408314:;\n    int32_t v561 = getpagesize(); // 0x408314\n    char * v562; // 0x405650\n    int64_t v563 = (int64_t)v562; // 0x40831c\n    int64_t v564 = v563; // 0x408345\n    char * v565; // 0x405650\n    if (v562 != (char *)0x2000000000000000 && v563 >= 0x2000000000000000) {\n        // 0x408347\n        v565 = (char *)0x20000;\n        v564 = v563 < 0x2000000000000001 ? v563 : 512;\n    }\n    // 0x40837a\n    posix_fadvise(fd2, 0, 0, POSIX_FADV_SEQUENTIAL);\n    uint32_t v566 = owner & 0xf000; // 0x408395\n    v89 = v566;\n    int64_t v567 = v545; // 0x4083a3\n    if (v566 == 0x8000) {\n        int64_t v568 = v364 - (int64_t)((v365 & 0xfffffffffffffe00) / 512); // 0x4083b6\n        v567 = v568 < 0 != (v364 & (v568 ^ -0x8000000000000000)) < 0;\n    }\n    uint64_t v569 = (int64_t)v561; // 0x408319\n    int64_t v570; // 0x405650\n    int64_t v571; // 0x405650\n    int64_t v572; // 0x405650\n    int64_t v573; // 0x405650\n    int64_t v574; // 0x405650\n    int64_t v575; // 0x405650\n    int64_t v576; // 0x405650\n    int64_t v577; // 0x405650\n    int64_t v578; // 0x405650\n    int64_t v579; // 0x405650\n    int64_t v580; // 0x405650\n    int32_t * v581; // 0x408f20\n    int64_t v582; // 0x405650\n    if ((owner & 0xf000) == 0x8000) {\n        // 0x408f20\n        v581 = (int32_t *)(a6 + 12);\n        int32_t v583 = *v581; // 0x408f20\n        if (v583 == 3) {\n            int64_t v584 = (int64_t)v565;\n            int64_t v585 = function_4100e0(v584 + v569); // 0x409158\n            uint64_t v586 = v569 - 1 + v585; // 0x409164\n            int64_t v587 = 0x100000000 * v585 >> 32; // 0x409167\n            int64_t v588 = v586 % v569;\n            int64_t v589 = v586 - v588; // 0x409174\n            v575 = v587;\n            v580 = v589;\n            v582 = v588;\n            if ((int32_t)v567 != 0) {\n                goto lab_0x408f74;\n            } else {\n                // 0x40918b\n                v89 = *v581 == 3;\n                v570 = v584;\n                v578 = v564;\n                v576 = v587;\n                v579 = v589;\n                v577 = &length2;\n                v574 = v588;\n                v573 = v79;\n                v571 = a1;\n                v572 = v10;\n                goto lab_0x4084e7;\n            }\n        } else {\n            if (v567 % 2 == 0 || v583 != 2) {\n                goto lab_0x4083eb;\n            } else {\n                int64_t v590 = function_4100e0((int64_t)v565 + v569); // 0x408f4e\n                uint64_t v591 = v569 - 1 + v590; // 0x408f5a\n                v582 = v591 % v569;\n                v575 = 0x100000000 * v590 >> 32;\n                v580 = v591 - v582;\n                goto lab_0x408f74;\n            }\n        }\n    } else {\n        goto lab_0x4083eb;\n    }\n  lab_0x4085af:;\n    int64_t v592 = v559; // 0x4085b4\n    if ((char)owner > -1 == (*(char *)(a6 + 39) != 0)) {\n        // 0x408e9f\n        v592 = v559;\n        if (geteuid() != 0) {\n            // 0x408eac\n            v6 = v553;\n            v592 = 384;\n            if ((int32_t)function_4049d0(v553, str3, 384) == 0) {\n                // 0x408ecb\n                v6 = v553;\n                int64_t v593 = v68 & -1 - v67; // 0x408ee0\n                function_4049d0(v553, str3, v593);\n                v592 = v593;\n            }\n        }\n    }\n    // 0x4085c3\n    int64_t v594; // 0x405650\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        int64_t v595 = function_409d90(v546, v552, str3); // 0x408a2b\n        fd = fd3;\n        v16 = v15;\n        v18 = v551;\n        v20 = str3;\n        v22 = v548;\n        v23 = 1;\n        v25 = v546;\n        v26 = v547;\n        if ((int32_t)v595 == 0) {\n            goto lab_0x408600;\n        } else {\n            goto lab_0x408a3e;\n        }\n    } else {\n        // 0x4085d7\n        if (*v401 != 0) {\n            // 0x408e03\n            v594 = (int64_t)*(int32_t *)(a6 + 16);\n            goto lab_0x408e07;\n        } else {\n            // 0x4085e2\n            if (*(char *)(a6 + 32) != 0) {\n                // 0x40935b\n                v594 = function_405620(v6) & 438 ^ 438;\n                goto lab_0x408e07;\n            } else {\n                // 0x4085ed\n                fd = fd3;\n                v16 = v15;\n                v18 = v551;\n                v20 = v592;\n                v22 = v548;\n                v23 = 1;\n                v25 = v546;\n                v26 = v547;\n                if (v67 != 0) {\n                    int64_t v596 = v6; // 0x4092cd\n                    fd = fd3;\n                    int64_t v597; // 0x405650\n                    v16 = v597;\n                    int64_t v598; // 0x405650\n                    v18 = v598;\n                    int64_t v599; // 0x405650\n                    v20 = v599;\n                    int64_t v600; // 0x405650\n                    v22 = v600;\n                    v23 = 1;\n                    int64_t v601; // 0x405650\n                    v25 = v601;\n                    int64_t v602; // 0x405650\n                    v26 = v602;\n                    int32_t v603; // 0x405650\n                    if ((v603 & -1 - (int32_t)function_405620(v596)) == 0) {\n                        goto lab_0x408600;\n                    } else {\n                        int64_t v604 = v68; // 0x4092e8\n                        int64_t v605 = function_4049d0(v553, str3, v604); // 0x4092fb\n                        fd = fd3;\n                        v16 = v597;\n                        v18 = v598;\n                        v20 = v604;\n                        v22 = v600;\n                        v23 = 1;\n                        v25 = v601;\n                        v26 = v602;\n                        if ((int32_t)v605 == 0) {\n                            goto lab_0x408600;\n                        } else {\n                            // 0x409310\n                            function_40dd80(4, str3);\n                            char * format19 = dcgettext(NULL, \"preserving permissions for %s\", 5); // 0x409334\n                            int32_t * v606 = __errno_location(); // 0x40933c\n                            int32_t err_num10 = *v606; // 0x40934d\n                            error(0, err_num10, format19);\n                            goto lab_0x408a3e;\n                        }\n                    }\n                } else {\n                    goto lab_0x408600;\n                }\n            }\n        }\n    }\n  lab_0x4083eb:;\n    int64_t v607 = (int64_t)v565; // 0x4083f2\n    int64_t v608 = 0x7fffffffffffffff - v569; // 0x40840d\n    uint64_t v609 = function_40a640(v2 < 0x2000000000000001 ? v2 : 0x20000, v607, v608); // 0x408434\n    v89 = 0;\n    uint64_t v610 = v607 - 1 + v609; // 0x408460\n    int64_t v611 = v610 - v610 % v609; // 0x40846b\n    int64_t v612 = v611 - 1 < 0x100000000 * v608 >> 32 ? v611 : v609;\n    int64_t v613 = function_4100e0(v612 + v569); // 0x40848f\n    uint64_t v614 = v569 - 1 + v613; // 0x40849b\n    int64_t v615 = 0x100000000 * v613 >> 32; // 0x40849e\n    int64_t v616 = v614 % v569;\n    int64_t v617 = v614 - v616; // 0x4084ab\n    char * v618 = (char *)v612; // 0x4084bc\n    int32_t v619 = 1; // 0x4084bc\n    int64_t v620 = v615; // 0x4084bc\n    int64_t v621 = v617; // 0x4084bc\n    char v622 = 0; // 0x4084bc\n    int64_t v623 = v616; // 0x4084bc\n    if ((int32_t)v567 != 0) {\n        goto lab_0x408a89;\n    } else {\n        // 0x4084c2\n        v89 = *(int32_t *)(a6 + 12) == 3;\n        v570 = v612;\n        v578 = 0;\n        v576 = v615;\n        v579 = v617;\n        v577 = &length2;\n        v574 = v616;\n        v573 = v79;\n        v571 = a1;\n        v572 = v10;\n        goto lab_0x4084e7;\n    }\n  lab_0x408a89:\n    // 0x408a89\n    v17 = v620;\n    int32_t v624 = v619;\n    int64_t v625 = v365; // 0x408a90\n    int64_t v626 = &length2; // 0x408aa3\n    int32_t length = v365; // 0x408aaa\n    char v627 = v58; // 0x408ab1\n    function_4097a0(v627, (int64_t *)&length2);\n    v21 = 0x100000000 * a7 >> 32;\n    int64_t v628 = v624 == 3 ? v564 : 0;\n    int64_t v629 = (int64_t)v618;\n    v24 = 0x100000000000000 * a1 >> 56;\n    int64_t v630 = 0; // 0x408ae5\n    int64_t v631 = 0; // 0x408ae5\n    int64_t v632 = v57;\n    int64_t v633 = v623;\n    int64_t v634 = 0;\n    char v635; // 0x405650\n    char v636 = v635;\n    v6 = v626;\n    int64_t v637; // 0x405650\n    int64_t v638; // 0x405650\n    int64_t v639; // 0x405650\n    int64_t v640; // 0x405650\n    char v641; // bp-688, 0x405650\n    int64_t v642; // 0x405650\n    int64_t v643; // 0x405650\n    while ((char)function_4097d0(v626) != 0) {\n        // 0x408b0a\n        int64_t v644; // 0x405650\n        v14 = v644;\n        int64_t v645; // 0x405650\n        uint64_t v646 = v645;\n        int64_t v647 = v630; // 0x408b12\n        int64_t v648 = v631; // 0x408b12\n        char v649 = v636; // 0x408b12\n        int64_t v650 = v634; // 0x408b12\n        int64_t v651 = v633; // 0x408b12\n        int64_t v652 = v630; // 0x408b12\n        int64_t v653 = v631; // 0x408b12\n        int64_t v654 = v632; // 0x408b12\n        if (v646 != 0) {\n            int64_t v655 = 0;\n            int64_t v656 = 24 * v655 + v14; // 0x408bde\n            int64_t v657 = *(int64_t *)v656; // 0x408be2\n            int64_t v658 = *(int64_t *)(v656 + 8); // 0x408be5\n            int64_t v659 = v657; // 0x408bf0\n            int64_t v660 = v658; // 0x408bf0\n            int64_t v661; // 0x408bf2\n            if (v658 + v657 > v625) {\n                // 0x408bf2\n                v661 = v657 - v625;\n                v659 = v661 < 0 == ((v661 ^ v657) & (v657 ^ v625)) < 0 == (v661 != 0) ? v625 : v657;\n                v660 = v625 - v659;\n            }\n            int64_t v662 = v660;\n            int64_t offset = v659;\n            int64_t v663 = offset - v647 - v648; // 0x408c08\n            int64_t v664 = 0; // 0x408c0b\n            int64_t v665 = v628; // 0x408c0b\n            int64_t v666; // 0x408c58\n            if (v663 != 0) {\n                // 0x408c11\n                if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                    // 0x409227\n                    v6 = 4;\n                    function_40dd80(4, v24);\n                    v643 = (int64_t)\"cannot lseek %s\";\n                    goto lab_0x409261;\n                }\n                if (v624 == 1) {\n                    // 0x408c95\n                    v6 = v553;\n                    v664 = 0;\n                    v665 = 0;\n                    if ((char)function_4048e0(v553, v663) == 0) {\n                        // 0x4093d4\n                        v6 = 0;\n                        function_40de50(0, 3, str3);\n                        v643 = (int64_t)\"%s: write failed\";\n                        goto lab_0x409261;\n                    }\n                } else {\n                    // 0x408c43\n                    v666 = function_404d20(fd3, str3, (char)(v624 == 3), v663);\n                    v664 = v666 & 0xffffffff;\n                    v665 = v628;\n                    if ((char)v666 == 0) {\n                        // 0x408c68\n                        v19 = v624 == 3;\n                        goto lab_0x408c84;\n                    }\n                }\n            }\n            int64_t v667 = v664;\n            char v668; // bp-689, 0x405650\n            *(int64_t *)(v190 - 16) = (int64_t)&v668;\n            v89 = 1;\n            *(int64_t *)(v190 - 24) = (int64_t)&v641;\n            *(int64_t *)(v190 - 32) = v662;\n            *(int64_t *)(v190 - 40) = str3;\n            *(int64_t *)(v190 - 48) = v24;\n            int64_t v669 = function_404de0(v627, v553, v621, v629, v665, 1, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76); // 0x408b87\n            v19 = v621;\n            if ((char)v669 == 0) {\n                goto lab_0x408c84;\n            }\n            int64_t v670 = offset + (int64_t)v641; // 0x408b9f\n            int64_t v671 = v625; // 0x408bb3\n            char v672 = 1; // 0x408bb3\n            int64_t v673 = v621; // 0x408bb3\n            while (v670 != v625) {\n                int64_t v674 = v655 + 1 & 0xffffffff; // 0x408bb9\n                v647 = offset;\n                int64_t v675 = v674; // 0x408bcd\n                v648 = v662;\n                v671 = v670;\n                v672 = v636;\n                v673 = v662;\n                if (v674 >= v646) {\n                    // break -> 0x408cba\n                    break;\n                }\n                v655 = v675;\n                v656 = 24 * v655 + v14;\n                v657 = *(int64_t *)v656;\n                v658 = *(int64_t *)(v656 + 8);\n                v659 = v657;\n                v660 = v658;\n                if (v658 + v657 > v625) {\n                    // 0x408bf2\n                    v661 = v657 - v625;\n                    v659 = v661 < 0 == ((v661 ^ v657) & (v657 ^ v625)) < 0 == (v661 != 0) ? v625 : v657;\n                    v660 = v625 - v659;\n                }\n                // 0x408bff\n                v662 = v660;\n                offset = v659;\n                v663 = offset - v647 - v648;\n                v664 = 0;\n                v665 = v628;\n                if (v663 != 0) {\n                    // 0x408c11\n                    if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                        // 0x409227\n                        v6 = 4;\n                        function_40dd80(4, v24);\n                        v643 = (int64_t)\"cannot lseek %s\";\n                        goto lab_0x409261;\n                    }\n                    if (v624 == 1) {\n                        // 0x408c95\n                        v6 = v553;\n                        v664 = 0;\n                        v665 = 0;\n                        if ((char)function_4048e0(v553, v663) == 0) {\n                            // 0x4093d4\n                            v6 = 0;\n                            function_40de50(0, 3, str3);\n                            v643 = (int64_t)\"%s: write failed\";\n                            goto lab_0x409261;\n                        }\n                    } else {\n                        // 0x408c43\n                        v666 = function_404d20(fd3, str3, (char)(v624 == 3), v663);\n                        v664 = v666 & 0xffffffff;\n                        v665 = v628;\n                        if ((char)v666 == 0) {\n                            // 0x408c68\n                            v19 = v624 == 3;\n                            goto lab_0x408c84;\n                        }\n                    }\n                }\n                // 0x408b45\n                v667 = v664;\n                *(int64_t *)(v190 - 16) = (int64_t)&v668;\n                v89 = 1;\n                *(int64_t *)(v190 - 24) = (int64_t)&v641;\n                *(int64_t *)(v190 - 32) = v662;\n                *(int64_t *)(v190 - 40) = str3;\n                *(int64_t *)(v190 - 48) = v24;\n                v669 = function_404de0(v627, v553, v621, v629, v665, 1, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76);\n                v19 = v621;\n                if ((char)v669 == 0) {\n                    goto lab_0x408c84;\n                }\n                // 0x408b98\n                v670 = offset + (int64_t)v641;\n                v671 = v625;\n                v672 = 1;\n                v673 = v621;\n            }\n            // 0x408cba\n            v649 = v672;\n            v650 = v671;\n            v651 = v673;\n            v652 = offset;\n            v653 = v662;\n            v654 = v641 == 0 ? v667 : (int64_t)v668;\n        }\n        int64_t v676 = v654;\n        int64_t v677 = v651;\n        int64_t v678 = v650;\n        v6 = v14;\n        free((int64_t *)v14);\n        v645 = 0;\n        v644 = 0;\n        v630 = v652;\n        v631 = v653;\n        if (v649 != 0) {\n            // 0x408cf7\n            v642 = v676;\n            v639 = v678;\n            v640 = v677;\n            v638 = v21 & 0xffffffff;\n            v637 = v10 % 256;\n            goto lab_0x408d1a;\n        }\n        v632 = v676;\n        v633 = v677;\n        v634 = v678;\n        v636 = 0;\n        v6 = v626;\n    }\n    int64_t v679 = v10 % 256; // 0x409384\n    int64_t v680 = v21 & 0xffffffff; // 0x409393\n    v642 = v632;\n    v639 = v634;\n    v640 = v633;\n    v638 = v680;\n    v637 = v679;\n    int64_t v681; // 0x405650\n    int64_t v682; // 0x405650\n    int64_t v683; // 0x405650\n    int64_t v684; // 0x405650\n    int64_t v685; // 0x405650\n    if (v636 != 0) {\n        goto lab_0x408d1a;\n    } else {\n        char v686; // 0x405650\n        if (v686 == 0) {\n            // 0x409419\n            v6 = 0;\n            function_40de50(0, 3, v24);\n            v681 = (int64_t)\"%s: failed to get extents info\";\n            v685 = v17;\n            v684 = v680;\n            v682 = v24;\n            v683 = v679;\n            goto lab_0x408dc1;\n        } else {\n            // 0x4093a8\n            v89 = *(int32_t *)(a6 + 12) == 3;\n            v570 = v629;\n            v578 = v622 != 0 ? v564 : 0;\n            v576 = v17;\n            v579 = v621;\n            v577 = v626;\n            v574 = v633;\n            v573 = v680;\n            v571 = v24;\n            v572 = v679;\n            goto lab_0x4084e7;\n        }\n    }\n  lab_0x408a3e:\n    // 0x408a3e\n    fd = fd3;\n    v16 = v15;\n    v18 = v551;\n    v20 = str3;\n    v22 = v548;\n    v23 = (int64_t)(*(char *)(a6 + 36) ^ 1);\n    v25 = v546;\n    v26 = v547;\n    goto lab_0x408600;\n  lab_0x408f74:\n    // 0x408f74\n    v618 = v565;\n    v619 = *v581;\n    v620 = v575;\n    v621 = v580;\n    v622 = v57;\n    v623 = v582;\n    goto lab_0x408a89;\n  lab_0x408d1a:;\n    int64_t v687 = length; // 0x408d1a\n    v551 = v17;\n    v549 = v639;\n    v550 = v640;\n    v548 = v638;\n    v546 = v24;\n    v547 = v637;\n    int64_t v688; // 0x405650\n    int64_t v689; // 0x405650\n    int64_t v690; // 0x405650\n    int64_t v691; // 0x405650\n    if (v639 >= v687 == v642 % 256 == 0) {\n        goto lab_0x40853f;\n    } else {\n        int64_t v692 = v687 - v639; // 0x408d1a\n        v6 = v553;\n        if (v624 == 1) {\n            // 0x40943e\n            v551 = v17;\n            v549 = v639;\n            v550 = v640;\n            v548 = v638;\n            v546 = v24;\n            v547 = v637;\n            v691 = v17;\n            v690 = v638;\n            v688 = v24;\n            v689 = v637;\n            if ((char)function_4048e0(v553, v692) != 0) {\n                goto lab_0x40853f;\n            } else {\n                goto lab_0x4091c4;\n            }\n        } else {\n            // 0x408d41\n            v691 = v17;\n            v690 = v638;\n            v688 = v24;\n            v689 = v637;\n            if (ftruncate(fd3, length) != 0) {\n                goto lab_0x4091c4;\n            } else {\n                // 0x408d69\n                v551 = v17;\n                v549 = v639;\n                v550 = v640;\n                v548 = v638;\n                v546 = v24;\n                v547 = v637;\n                if (v624 == 3 == v692 < 0 == ((v692 ^ v687) & (v639 ^ v687)) < 0 == (v692 != 0)) {\n                    // 0x408d7f\n                    v6 = v553;\n                    if ((int32_t)function_404990(v553, v639, v692) >= 0) {\n                        goto lab_0x40853f;\n                    } else {\n                        // 0x408d9f\n                        v6 = 4;\n                        function_40dd80(4, str3);\n                        v681 = (int64_t)\"error deallocating %s\";\n                        v685 = v17;\n                        v684 = v638;\n                        v682 = v24;\n                        v683 = v637;\n                        goto lab_0x408dc1;\n                    }\n                } else {\n                    goto lab_0x40853f;\n                }\n            }\n        }\n    }\n  lab_0x4084e7:\n    // 0x4084e7\n    *(int64_t *)(v190 - 8) = v574;\n    *(int64_t *)(v190 - 16) = (int64_t)&v641;\n    *(int64_t *)(v190 - 24) = v577;\n    v6 = v552;\n    *(int64_t *)(v190 - 32) = -1;\n    *(int64_t *)(v190 - 40) = str3;\n    *(int64_t *)(v190 - 48) = v571;\n    int64_t v693 = function_404de0((char)fd2, v553, v579, v570, v578, v89, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76, (int64_t)&g76); // 0x408521\n    fd = fd3;\n    v16 = v15;\n    v18 = v576;\n    v20 = v579;\n    v22 = v573;\n    v23 = 0;\n    v25 = v571;\n    v26 = v572;\n    if ((char)v693 == 0) {\n        goto lab_0x408600;\n    } else {\n        // 0x408532\n        v551 = v576;\n        v549 = v570;\n        v550 = v579;\n        v548 = v573;\n        v546 = v571;\n        v547 = v572;\n        if (v641 != 0) {\n            // 0x4091aa\n            v6 = v553;\n            v551 = v576;\n            v549 = v570;\n            v550 = v579;\n            v548 = v573;\n            v546 = v571;\n            v547 = v572;\n            v691 = v576;\n            v690 = v573;\n            v688 = v571;\n            v689 = v572;\n            if (ftruncate(fd3, length2) >= 0) {\n                goto lab_0x40853f;\n            } else {\n                goto lab_0x4091c4;\n            }\n        } else {\n            goto lab_0x40853f;\n        }\n    }\n  lab_0x408e07:\n    // 0x408e07\n    fd = fd3;\n    v16 = v15;\n    v18 = v551;\n    v20 = v594;\n    v22 = v548;\n    v23 = (int32_t)function_409e20(str3) == 0;\n    v25 = v546;\n    v26 = v547;\n    goto lab_0x408600;\n  lab_0x408dc1:;\n    char * format20 = dcgettext(NULL, (char *)v681, 5); // 0x408dc3\n    error(0, *__errno_location(), format20);\n    fd = fd3;\n    v16 = v15;\n    v18 = v685;\n    v20 = (int64_t)format20;\n    v22 = v684;\n    v23 = 0;\n    v25 = v682;\n    v26 = v683;\n    goto lab_0x408600;\n  lab_0x4091c4:\n    // 0x4091c4\n    v6 = 4;\n    function_40dd80(4, str3);\n    v681 = (int64_t)\"failed to extend %s\";\n    v685 = v691;\n    v684 = v690;\n    v682 = v688;\n    v683 = v689;\n    goto lab_0x408dc1;\n  lab_0x409261:;\n    char * format21 = dcgettext(NULL, (char *)v643, 5); // 0x409263\n    error(0, *__errno_location(), format21);\n    v19 = (int64_t)format21;\n    goto lab_0x408c84;\n}\n"
        },
        {
            "funcName": "function_4094d0",
            "funcStartAddr": "4094d0",
            "funcEndAddr": "4095fc",
            "decompiledFuncCode": "int64_t function_4094d0(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t * a5, int64_t * a6) {\n    if (a4 == 0) {\n        // 0x4095a1\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x4095ba\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x4095d3\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    if ((uint32_t)(int32_t)a4 >= 4) {\n        // 0x4095d3\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    int32_t v1 = *(int32_t *)(a4 + 12); // 0x4094e6\n    if (v1 >= 4) {\n        // 0x4095ba\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x4095d3\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    uint32_t v2 = *(int32_t *)(a4 + 52); // 0x4094f7\n    if (v2 >= 3) {\n        // 0x409588\n        __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n        // 0x4095a1\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x4095ba\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x4095d3\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    // 0x409505\n    if (*(char *)(a4 + 23) != 0) {\n        // 0x409550\n        if (*(char *)(a4 + 44) == 0) {\n            goto lab_0x40950b;\n        } else {\n            // 0x409556\n            __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 2916, \"valid_options\");\n            goto lab_0x40956f;\n        }\n    } else {\n        goto lab_0x40950b;\n    }\n  lab_0x40950b:\n    if (v1 != 2 != (v2 == 2)) {\n        char v3 = 0; // bp-9, 0x409516\n        g50 = a1;\n        g49 = a2;\n        int64_t result = function_405650(a1, a2, (char)a3, 0, 0, a4, 1, (int64_t)&v3, (int64_t)a5, (int64_t)a6); // 0x409540\n        return result;\n    }\n    goto lab_0x40956f;\n  lab_0x40956f:\n    // 0x40956f\n    __assert_fail(\"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\", \"src/copy.c\", 2919, \"valid_options\");\n    // 0x409588\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n    // 0x4095a1\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n    // 0x4095ba\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n    // 0x4095d3\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n    return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n}\n"
        },
        {
            "funcName": "function_409600",
            "funcStartAddr": "409600",
            "funcEndAddr": "40961c",
            "decompiledFuncCode": "int64_t function_409600(int64_t a1, int64_t a2) {\n    if (a1 == a2) {\n        // 0x409610\n        return *(int64_t *)(a1 + 8) & -256 | 1;\n    }\n    // 0x40960a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409620",
            "funcStartAddr": "409620",
            "funcEndAddr": "409636",
            "decompiledFuncCode": "int64_t function_409620(int64_t a1) {\n    // 0x409620\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)a1);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_409640",
            "funcStartAddr": "409640",
            "funcEndAddr": "409685",
            "decompiledFuncCode": "int64_t function_409640(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40c0a0(g51); // 0x409661\n    int64_t result = 0; // 0x409669\n    if (v1 != 0) {\n        // 0x40966b\n        free((int64_t *)*(int64_t *)(v1 + 16));\n        free((int64_t *)v1);\n        result = &g76;\n    }\n    // 0x40967f\n    return result;\n}\n"
        },
        {
            "funcName": "function_409690",
            "funcStartAddr": "409690",
            "funcEndAddr": "4096c7",
            "decompiledFuncCode": "int64_t function_409690(int64_t a1, int64_t a2) {\n    int64_t v1 = a1; // bp-40, 0x409694\n    int64_t v2 = function_40b650(g51, &v1); // 0x4096a7\n    if (v2 == 0) {\n        // 0x4096c0\n        return 0;\n    }\n    // 0x4096b1\n    return *(int64_t *)(v2 + 16);\n}\n"
        },
        {
            "funcName": "function_4096d0",
            "funcStartAddr": "4096d0",
            "funcEndAddr": "409746",
            "decompiledFuncCode": "int64_t function_4096d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_4100e0(24); // 0x4096e8\n    int64_t v2 = function_410310(a1); // 0x4096f3\n    int64_t * v3 = (int64_t *)v1; // 0x409702\n    *v3 = a2;\n    int64_t * v4 = (int64_t *)(v1 + 16); // 0x409705\n    *v4 = v2;\n    *(int64_t *)(v1 + 8) = a3;\n    int64_t v5 = function_40c060(g51, v1); // 0x40970d\n    if (v5 == 0) {\n        // 0x409741\n        function_410330(g51);\n        // UNREACHABLE\n    }\n    int64_t result = 0; // 0x40971f\n    if (v1 != v5) {\n        // 0x409721\n        free((int64_t *)*v4);\n        free(v3);\n        result = *(int64_t *)(v5 + 16);\n    }\n    // 0x409736\n    return result;\n}\n"
        },
        {
            "funcName": "function_409750",
            "funcStartAddr": "409750",
            "funcEndAddr": "409786",
            "decompiledFuncCode": "int64_t function_409750(int64_t a1, int64_t a2) {\n    int64_t result = function_40b8c0(103, 0, 0x4095f0, 0x409600, 0x409620); // 0x40976b\n    g51 = result;\n    if (result != 0) {\n        // 0x40977c\n        return result;\n    }\n    // 0x409781\n    function_410330(103);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409790",
            "funcStartAddr": "409790",
            "funcEndAddr": "40979c",
            "decompiledFuncCode": "int64_t function_409790(void) {\n    // 0x409790\n    return function_40bb00(g51);\n}\n"
        },
        {
            "funcName": "function_4097a0",
            "funcStartAddr": "4097a0",
            "funcEndAddr": "4097c8",
            "decompiledFuncCode": "int64_t function_4097a0(char a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    *(int32_t *)a2 = (int32_t)a1;\n    *(int64_t *)(v1 + 40) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int64_t *)(v1 + 24) = 0;\n    *(int16_t *)(v1 + 32) = 0;\n    *(int32_t *)(v1 + 16) = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4097d0",
            "funcStartAddr": "4097d0",
            "funcEndAddr": "409ab8",
            "decompiledFuncCode": "int64_t function_4097d0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 40); // 0x4097f1\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x4097f5\n    int64_t v3; // bp-4120, 0x4097d0\n    int64_t v4 = &v3; // 0x4097fc\n    int32_t v5; // 0x4097d0\n    int64_t v6 = v5;\n    int64_t * v7 = (int64_t *)(a1 + 24);\n    int64_t v8 = v5;\n    char * v9 = (char *)(a1 + 33);\n    int64_t v10; // bp-4152, 0x4097d0\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = *v2;\n    int64_t v11 = 0; // 0x40983f\n    int64_t v12 = *v1; // 0x40983f\n    int64_t result; // 0x4097d0\n    int64_t fd; // 0x4097d0\n    if (ioctl((int32_t)fd, -0x3fdf99f5) < 0) {\n      lab_0x4099f0_2:\n        // 0x4099f0\n        result = 0;\n        if (*v2 == 0) {\n            // 0x4099fa\n            *(char *)(a1 + 32) = 1;\n            result = 0;\n        }\n      lab_0x4099d9:\n        // 0x4099d9\n        return result;\n    }\n    int64_t v13; // 0x4097d0\n    int64_t v14; // 0x4097d0\n    int64_t v15; // 0x4097d0\n    int64_t v16; // 0x4097d0\n    int64_t v17; // 0x4097d0\n    int64_t v18; // 0x4097d0\n    int64_t v19; // 0x4097d0\n    int64_t fd2; // 0x4097d0\n    int64_t v20; // 0x4097d0\n    while (true) {\n      lab_0x409845:\n        if (v5 == 0) {\n            // break -> 0x409a63\n            break;\n        }\n        uint64_t v21 = *v7; // 0x409854\n        if (v21 > -1 - v6) {\n            // 0x409a7c\n            __assert_fail(\"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", \"src/extent-scan.c\", 126, \"extent_scan_read\");\n            return linkat(0x2f637273, (char *)0x2e6e6163732d746e, 0x63730063, \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", 0x3e2d6e61);\n        }\n        int64_t v22 = v11;\n        int64_t v23 = *v1; // 0x40986a\n        fd2 = v23;\n        uint64_t v24 = v21 + v6; // 0x40986f\n        *v7 = v24;\n        uint128_t v25 = 24 * (int128_t)v24; // 0x40987d\n        if ((int64_t)v25 < 0) {\n            // 0x409a77\n            function_410330(fd2);\n            // UNREACHABLE\n        }\n        if (v25 % 0x1f0000000000000001 != 0) {\n            // 0x409a77\n            function_410330(fd2);\n            // UNREACHABLE\n        }\n        int64_t v26 = function_410140(fd2, 24 * v24); // 0x4098a0\n        *v1 = v26;\n        int64_t v27 = v26 + v12 - v23; // 0x4098af\n        v18 = v27;\n        v15 = v22;\n        if (v3 > 0x7fffffffffffffff - v8) {\n            goto lab_0x409946;\n        } else {\n            // 0x4098d0\n            fd2 = 0;\n            v13 = 0;\n            v16 = v8;\n            v19 = v4;\n            v20 = v3;\n            v17 = v27;\n            v14 = v22;\n            goto lab_0x4098d5;\n        }\n    }\n    // 0x409a63\n    *v9 = 1;\n    // 0x4099d9\n    return v6 & 0xffffff00 | (int64_t)(*v2 != 0);\n  lab_0x409946:\n    // 0x409946\n    fd2 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\";\n    __assert_fail(\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\", \"src/extent-scan.c\", 141, \"extent_scan_read\");\n    int64_t v28 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\"; // 0x40995f\n    int64_t v29 = &g76; // 0x40995f\n    int64_t v30 = (int64_t)\"extent_scan_read\"; // 0x40995f\n    int64_t v31 = 141; // 0x40995f\n    int64_t v32 = v18; // 0x40995f\n    int64_t v33 = v15; // 0x40995f\n    goto lab_0x409960;\n  lab_0x409960:;\n    int64_t v34 = v33;\n    int64_t v35 = v31;\n    int64_t v36 = v30;\n    int64_t v37 = v29;\n    uint64_t v38 = *v2; // 0x409960\n    int64_t v39 = v37; // 0x409968\n    int64_t v40 = v36; // 0x409968\n    int64_t v41 = v35; // 0x409968\n    int64_t v42 = v32; // 0x409968\n    int64_t v43 = v38; // 0x409968\n    int64_t v44 = v34; // 0x409968\n    int64_t v45; // 0x4097d0\n    int64_t v46; // 0x4097d0\n    int32_t v47; // 0x4097d0\n    int64_t v48; // 0x4097d0\n    int64_t v49; // 0x4097d0\n    if (v38 > v35) {\n        goto lab_0x409902;\n    } else {\n        // 0x40996a\n        v45 = v28;\n        v48 = v37;\n        v49 = v35;\n        v47 = *(int32_t *)(v36 + 40);\n        v46 = v34;\n        goto lab_0x40996e;\n    }\n  lab_0x4098d5:;\n    int64_t v50 = v14;\n    int64_t v51 = v17;\n    int64_t v52 = v20;\n    int64_t v53 = v19;\n    int64_t v54 = v16;\n    int64_t v55 = v13;\n    v28 = v55;\n    v29 = v54;\n    v30 = v53;\n    v31 = v52;\n    v32 = v51;\n    v33 = v50;\n    int64_t v56; // 0x4097d0\n    int64_t v57; // 0x4097d0\n    if ((int32_t)v50 == 0) {\n        goto lab_0x409960;\n    } else {\n        int32_t v58 = *(int32_t *)(v53 + 40); // 0x4098de\n        int64_t * v59 = (int64_t *)(v51 + 8); // 0x4098e2\n        int64_t v60 = *v59; // 0x4098e2\n        int64_t v61 = *(int64_t *)v51 + v60; // 0x4098ec\n        int32_t * v62 = (int32_t *)(v51 + 16); // 0x4098f3\n        if (*v62 != (v58 & -2) || v52 != v61) {\n            // 0x4098fd\n            v39 = v54;\n            v40 = v53;\n            v41 = v52;\n            v42 = v51;\n            v43 = v61;\n            v44 = v50;\n            v45 = v55;\n            v48 = v54;\n            v49 = v52;\n            v47 = v58;\n            v46 = v50;\n            if (v61 > v52) {\n                goto lab_0x409902;\n            } else {\n                goto lab_0x40996e;\n            }\n        } else {\n            // 0x409a11\n            *v62 = v58;\n            fd2 = fd2 + 1 & 0xffffffff;\n            *v59 = v60 + v54;\n            v57 = v51;\n            v56 = v50;\n            goto lab_0x40991e;\n        }\n    }\n  lab_0x409902:\n    // 0x409902\n    if (v43 - v41 < v39) {\n        goto lab_0x4099f0_2;\n    }\n    // 0x409911\n    *(int64_t *)v40 = v43;\n    *(int64_t *)(v40 + 16) = v41 + v39 - v43;\n    v57 = v42;\n    v56 = v44;\n    goto lab_0x40991e;\n  lab_0x40991e:;\n    int64_t v63 = v56;\n    int64_t v64 = v57;\n    int64_t v65 = fd2; // 0x409921\n    int64_t v66 = v64; // 0x409921\n    int64_t v67 = v63; // 0x409921\n    int64_t v68; // 0x4097d0\n    int64_t v69; // 0x4097d0\n    int64_t v70; // 0x4097d0\n    if (v5 <= (int32_t)fd2) {\n        // 0x40991e\n        v68 = v64 + 16;\n        v70 = v64;\n        v69 = v63;\n        goto lab_0x409995;\n    } else {\n        goto lab_0x409923;\n    }\n  lab_0x40996e:;\n    int64_t v71 = v45 + 1; // 0x409971\n    fd2 = v71 & 0xffffffff;\n    int64_t v72 = v46 + 1 & 0xffffffff; // 0x409974\n    int64_t v73 = *v1 + 24 * (v46 & 0xffffffff); // 0x409981\n    *(int64_t *)v73 = v49;\n    *(int64_t *)(v73 + 8) = v48;\n    int64_t v74 = v73 + 16;\n    *(int32_t *)v74 = v47;\n    v68 = v74;\n    v70 = v73;\n    v69 = v72;\n    if (v5 > (int32_t)v71) {\n        // 0x40996e\n        v65 = fd2;\n        v66 = v73;\n        v67 = v72;\n        goto lab_0x409923;\n    } else {\n        goto lab_0x409995;\n    }\n  lab_0x409923:;\n    int64_t v75 = 56 * (v65 & 0xffffffff) + v4; // 0x409933\n    int64_t v76 = *(int64_t *)(v75 + 16); // 0x409937\n    uint64_t v77 = *(int64_t *)v75; // 0x40993b\n    v13 = v65;\n    v16 = v76;\n    v19 = v75;\n    v20 = v77;\n    v17 = v66;\n    v14 = v67;\n    v18 = v66;\n    v15 = v67;\n    if (v77 > 0x7fffffffffffffff - v76) {\n        goto lab_0x409946;\n    } else {\n        goto lab_0x4098d5;\n    }\n  lab_0x409995:\n    // 0x409995\n    v11 = v69;\n    if (*(char *)v68 % 2 != 0) {\n        // 0x409a50\n        *v9 = 1;\n        // 0x409a56\n        *v7 = v11 & 0xffffffff;\n        result = 1;\n        goto lab_0x4099d9;\n    }\n    char v78 = *v9; // 0x40999f\n    uint32_t v79 = (int32_t)v11; // 0x4099a5\n    if (v79 >= 73) {\n        if (v78 != 0) {\n            // 0x409a56\n            *v7 = v11 & 0xffffffff;\n            result = 1;\n            goto lab_0x4099d9;\n        } else {\n            int64_t v80 = v11 + 0xffffffff & 0xffffffff; // 0x4099b3\n            *v7 = v80;\n            int64_t v81 = *v1 + 24 * v80;\n            *v2 = *(int64_t *)(v81 - 24) + *(int64_t *)(v81 - 16);\n            result = 1;\n            goto lab_0x4099d9;\n        }\n    }\n    // 0x409a24\n    v12 = v70;\n    *v7 = v11 & 0xffffffff;\n    if (v78 != 0) {\n        // 0x4099d9\n        return 1;\n    }\n    int64_t v82 = *(int64_t *)v12 + *(int64_t *)(v12 + 8); // 0x409a34\n    *v2 = v82;\n    if (v79 == 72) {\n        // 0x4099d9\n        return 1;\n    }\n    // 0x409a30\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = v82;\n    if (ioctl(*(int32_t *)&fd2, -0x3fdf99f5) < 0) {\n        goto lab_0x4099f0_2;\n    }\n    goto lab_0x409845;\n}\n"
        },
        {
            "funcName": "function_409ac0",
            "funcStartAddr": "409ac0",
            "funcEndAddr": "409b24",
            "decompiledFuncCode": "int64_t function_409ac0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = function_40aa00(a1, v1) - a1; // 0x409acf\n    uint64_t size = v2 + 9; // 0x409ad2\n    int64_t result = v1; // 0x409ae0\n    if (size >= 257) {\n        int64_t * mem = malloc((int32_t)size); // 0x409ae2\n        result = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x409b14\n            return 0;\n        }\n    }\n    int64_t * v3 = mempcpy((int64_t *)result, (int64_t *)a1, (int32_t)v2); // 0x409af8\n    *v3 = 0x5858585858587543;\n    *(char *)((int64_t)v3 + 8) = 0;\n    // 0x409b14\n    return result;\n}\n"
        },
        {
            "funcName": "function_409b30",
            "funcStartAddr": "409b30",
            "funcEndAddr": "409b41",
            "decompiledFuncCode": "int64_t function_409b30(int64_t path2, int64_t a2) {\n    uint32_t path1 = *(int32_t *)(a2 + 8); // 0x409b36\n    return symlinkat((char *)(int64_t)path1, path1, (char *)path2);\n}\n"
        },
        {
            "funcName": "function_409b50",
            "funcStartAddr": "409b50",
            "funcEndAddr": "409c85",
            "decompiledFuncCode": "int64_t function_409b50(int64_t fd, int64_t path1, int64_t a3, int64_t a4, int32_t flag, int64_t a6) {\n    int32_t fd2 = a3; // 0x409b74\n    char * path2 = (char *)a4; // 0x409b74\n    uint32_t v1 = linkat((int32_t)fd, (char *)path1, fd2, path2, flag); // 0x409b74\n    int64_t result = v1; // 0x409b7e\n    if ((char)a6 != 1 || v1 == 0) {\n        // 0x409b94\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x409b8a\n    if (*v2 != 17) {\n        // 0x409b94\n        return result;\n    }\n    // 0x409bb0\n    int64_t v3; // bp-312, 0x409b50\n    int64_t v4 = function_409ac0(a4, &v3); // 0x409bbd\n    if (v4 == 0) {\n        // 0x409b94\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * fd >> 32; // bp-344, 0x409be3\n    int64_t v6 = function_40e910(v4, 0, &v5, 0x409aa0, 6); // 0x409bf6\n    int64_t v7 = 0x100000000 * (int64_t)v2 >> 32; // 0x409bfb\n    int32_t v8; // 0x409b50\n    if ((int32_t)v6 == 0) {\n        char * path = (char *)v4; // 0x409c4f\n        int32_t v9 = 0; // 0x409c5e\n        if (renameat(fd2, path, fd2, path2) != 0) {\n            // 0x409c60\n            v9 = *(int32_t *)v7;\n        }\n        // 0x409c63\n        unlinkat(fd2, path, 0);\n        v8 = v9;\n    } else {\n        // 0x409c04\n        v8 = *(int32_t *)v7;\n    }\n    // 0x409c07\n    if (v4 != (int64_t)&v3) {\n        // 0x409c11\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x409c2b\n    if (v8 != 0) {\n        // 0x409c31\n        *(int32_t *)v7 = v8;\n        result2 = 0xffffffff;\n    }\n    // 0x409b94\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409c90",
            "funcStartAddr": "409c90",
            "funcEndAddr": "409d90",
            "decompiledFuncCode": "int64_t function_409c90(int64_t path1, int64_t a2, int64_t a3, char a4) {\n    int32_t fd = a2; // 0x409cac\n    char * path2 = (char *)a3; // 0x409cac\n    uint32_t v1 = symlinkat((char *)path1, fd, path2); // 0x409cac\n    int64_t result = v1; // 0x409cb1\n    if (a4 != 1 || v1 == 0) {\n        // 0x409cca\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x409cbd\n    if (*v2 != 17) {\n        // 0x409cca\n        return result;\n    }\n    // 0x409ce0\n    int64_t v3; // bp-312, 0x409c90\n    int64_t v4 = function_409ac0(a3, &v3); // 0x409ceb\n    if (v4 == 0) {\n        // 0x409cca\n        return 0xffffffff;\n    }\n    int64_t v5 = &v3; // 0x409ce0\n    int64_t v6 = path1; // bp-328, 0x409d0f\n    int32_t v7; // 0x409c90\n    if ((int32_t)function_40e910(v4, 0, &v6, 0x409b30, 6) == 0) {\n        char * path = (char *)v4; // 0x409d4a\n        if (renameat(fd, path, fd, path2) == 0) {\n            // 0x409d53\n            if (v4 != v5) {\n                // 0x409d58\n                free((int64_t *)v4);\n            }\n            // 0x409cca\n            return 1;\n        }\n        // 0x409d68\n        unlinkat(fd, path, 0);\n        v7 = *v2;\n    } else {\n        // 0x409d20\n        v7 = *v2;\n    }\n    // 0x409d23\n    if (v4 != v5) {\n        // 0x409d28\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x409d33\n    if (v7 != 0) {\n        // 0x409d79\n        *v2 = v7;\n        result2 = 0xffffffff;\n    }\n    // 0x409cca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409e1a",
            "decompiledFuncCode": "int64_t function_409d90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409d90\n    int64_t v1; // 0x409d90\n    int64_t v2 = function_40c3f0(a1, a2, a3, v1, v1); // 0x409d9a\n    int64_t result = v2 & 0xffffffff; // 0x409d9f\n    int32_t v3 = v2; // 0x409da1\n    if (v3 == -2) {\n        // 0x409df0\n        error(0, *__errno_location(), \"%s\", (char *)function_40dfd0(a1));\n        return result;\n    }\n    if (v3 == -1) {\n        // 0x409dab\n        function_40dfd0(a3);\n        error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    }\n    // 0x409de0\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e7c",
            "decompiledFuncCode": "int64_t function_409e20(int64_t a1) {\n    // 0x409e20\n    int64_t v1; // 0x409e20\n    int64_t v2 = function_40c430(a1, v1, (int32_t)v1); // 0x409e27\n    int64_t result = v2 & 0xffffffff; // 0x409e2c\n    if ((int32_t)v2 == 0) {\n        // 0x409e32\n        return result;\n    }\n    // 0x409e40\n    function_40dfd0(a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"setting permissions for %s\", 5));\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e80",
            "funcStartAddr": "409e80",
            "funcEndAddr": "409f6f",
            "decompiledFuncCode": "int64_t function_409e80(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x409eb9\n    int64_t * mem = malloc((int32_t)size); // 0x409ec3\n    int64_t result = 0; // 0x409ece\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x409ed9\n        if (v1 < 0) {\n            // 0x409f38\n            if (*__errno_location() != 34) {\n                // 0x409f42\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x409ed9\n        int64_t v3; // 0x409e80\n        if (buf_size > v2) {\n            // 0x409f50\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x409eeb\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x409ef8\n            int64_t * mem2 = malloc((int32_t)size2); // 0x409efe\n            if (mem2 == NULL) {\n                // 0x409f0b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x409f38\n                if (*__errno_location() != 34) {\n                    // 0x409f42\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x409ee6\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x409f50\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x409eeb\n            free(buf);\n        }\n        // 0x409f20\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x409f60\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x409f0b_2:\n    // 0x409f0b\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f70",
            "funcStartAddr": "409f70",
            "funcEndAddr": "40a03e",
            "decompiledFuncCode": "int64_t function_409f70(int64_t path, int64_t a2) {\n    int64_t v1 = function_40aa00(path, a2); // 0x409f84\n    uint64_t result = function_40aa60(v1); // 0x409f8f\n    if (result < 15) {\n        // 0x409f9a\n        return result;\n    }\n    int16_t * v2 = (int16_t *)v1; // 0x409fb5\n    *v2 = 46;\n    int32_t * v3 = __errno_location(); // 0x409fc1\n    *v3 = 0;\n    int32_t v4 = pathconf((char *)path, _PC_NAME_MAX); // 0x409fd7\n    int64_t result2 = v4; // 0x409fd7\n    int64_t v5; // 0x409f70\n    if (v4 < 0) {\n        // 0x40a030\n        v5 = 255;\n        if (*v3 != 0) {\n            goto lab_0x409fe4;\n        } else {\n            // 0x409fe1\n            v5 = result2;\n            goto lab_0x409fe4;\n        }\n    } else {\n        // 0x409fe1\n        v5 = result2;\n        goto lab_0x409fe4;\n    }\n  lab_0x409fe4:;\n    uint64_t v6 = v5;\n    if (result <= v6) {\n        // 0x409f9a\n        return result2;\n    }\n    int64_t v7 = a2 + path; // 0x409fee\n    uint64_t result3 = v7 - v1; // 0x409ff5\n    *(char *)(result3 >= v6 ? v1 - 1 + v6 : v7) = 126;\n    *(char *)((result3 >= v6 ? v6 : result3 + 1) + v1) = 0;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a040",
            "funcStartAddr": "40a040",
            "funcEndAddr": "40a094",
            "decompiledFuncCode": "int64_t function_40a040(int64_t a1) {\n    int64_t result = a1; // 0x40a047\n    int64_t result2; // 0x40a040\n    if (a1 == 0) {\n        char * env_val = getenv(\"SIMPLE_BACKUP_SUFFIX\"); // 0x40a085\n        result = (int64_t)env_val;\n        result2 = result;\n        if (env_val == NULL) {\n            // 0x40a04e\n            g52 = (char *)&g3;\n            return result;\n        }\n    }\n    char * v1 = (char *)result; // 0x40a049\n    if (*v1 == 0) {\n        // 0x40a04e\n        g52 = (char *)&g3;\n        return result2;\n    }\n    // 0x40a060\n    int64_t v2; // 0x40a040\n    int64_t result3 = function_40aa00(result, v2); // 0x40a063\n    if (result3 != result) {\n        // 0x40a04e\n        g52 = (char *)&g3;\n        return result3;\n    }\n    // 0x40a06d\n    g52 = v1;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a0a0",
            "funcStartAddr": "40a0a0",
            "funcEndAddr": "40a561",
            "decompiledFuncCode": "int64_t function_40a0a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t str = function_40aa00(a1, a2); // 0x40a0be\n    int32_t len = strlen((char *)str); // 0x40a0c9\n    int64_t v1 = (int64_t)g52; // 0x40a0d1\n    int64_t str2 = v1; // 0x40a0e3\n    if (g52 == NULL) {\n        // 0x40a550\n        function_40a040(v1);\n        str2 = (int64_t)g52;\n    }\n    int64_t v2 = str - a1; // 0x40a0ce\n    int64_t v3 = len + (int32_t)v2; // 0x40a0ee\n    uint64_t v4 = (int64_t)strlen((char *)str2) + 1; // 0x40a0f3\n    int64_t v5 = v3 + 1; // 0x40a0fb\n    int32_t size = (int32_t)((v4 >= 9 ? v4 : 9) + v5); // 0x40a120\n    int64_t * mem = malloc(size); // 0x40a120\n    int64_t result = (int64_t)mem; // 0x40a120\n    if (mem == NULL) {\n        // 0x40a3fd\n        return result;\n    }\n    int32_t v6 = v4; // 0x40a0ff\n    int64_t v7 = v3 + 2;\n    int64_t v8 = 0x100000000 * a2 >> 32;\n    int64_t dirp2 = 0;\n    int64_t v9 = v2; // 0x40a0a0\n    int64_t result2 = result;\n    struct __dirstream * v10; // 0x40a0a0\n    int64_t v11; // 0x40a0a0\n    int64_t v12; // 0x40a0a0\n    int64_t v13; // 0x40a0a0\n    int64_t v14; // 0x40a0a0\n    int64_t v15; // 0x40a0a0\n    int64_t v16; // 0x40a0a0\n    int64_t v17; // 0x40a0a0\n    int64_t v18; // 0x40a0a0\n    int64_t v19; // 0x40a0a0\n    int32_t v20; // 0x40a146\n    int64_t v21; // 0x40a158\n    while (true) {\n      lab_0x40a134:\n        // 0x40a134\n        v15 = result2;\n        v14 = v9;\n        int64_t v22 = dirp2;\n        v18 = v8;\n        memcpy((int64_t *)v15, (int64_t *)a1, (int32_t)v5);\n        v20 = v18;\n        if (v20 == 1) {\n            // 0x40a420\n            memcpy((int64_t *)(v15 + v3), (int64_t *)g52, v6);\n            v19 = v18;\n            v13 = v22;\n            v17 = v15;\n            goto lab_0x40a38b;\n        } else {\n            int64_t v23 = v15 + v14; // 0x40a151\n            v21 = function_40aa60(v23);\n            if (v22 == 0) {\n                int16_t * v24 = (int16_t *)v23; // 0x40a48d\n                int16_t v25 = *v24; // 0x40a48d\n                *v24 = 46;\n                int64_t v26 = function_40a880(); // 0x40a49b\n                int64_t v27 = v21 + v23; // 0x40a4a0\n                if (v26 == 0) {\n                    // 0x40a500\n                    __errno_location();\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v12 = 0;\n                    v16 = v15;\n                    goto lab_0x40a370;\n                } else {\n                    // 0x40a4ac\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v10 = (struct __dirstream *)v26;\n                    v11 = v26;\n                    goto lab_0x40a171;\n                }\n            } else {\n                struct __dirstream * dirp = (struct __dirstream *)v22;\n                rewinddir(dirp);\n                v10 = dirp;\n                v11 = v22;\n                goto lab_0x40a171;\n            }\n        }\n    }\n  lab_0x40a538_2:\n    // 0x40a538\n    if (dirp2 != 0) {\n        // 0x40a541\n        closedir((struct __dirstream *)dirp2);\n    }\n    // 0x40a3fd\n    return result2;\n  lab_0x40a370:;\n    int64_t v28 = v16;\n    v19 = v18;\n    v13 = v12;\n    v17 = v28;\n    int64_t v29 = v28; // 0x40a0a0\n    int64_t v30 = v12; // 0x40a0a0\n    int64_t v31 = v28; // 0x40a0a0\n    int64_t v32 = v12; // 0x40a0a0\n    int64_t v33 = v18; // 0x40a0a0\n    int64_t * v34; // 0x40a0a0\n    int64_t v35; // 0x40a0a0\n    switch ((int32_t)v35) {\n        case 2: {\n            goto lab_0x40a440;\n        }\n        case 3: {\n            // 0x40a4c8\n            v34 = (int64_t *)v28;\n          lab_0x40a4c8:\n            // 0x40a4c8\n            free(v34);\n            *__errno_location() = 12;\n            // 0x40a3fd\n            return 0;\n        }\n        case 1: {\n            goto lab_0x40a470;\n        }\n        default: {\n            goto lab_0x40a38b;\n        }\n    }\n  lab_0x40a2ea:;\n    // 0x40a2ea\n    int64_t v36; // 0x40a0a0\n    int64_t v37 = v36;\n    int32_t v38; // 0x40a0a0\n    int32_t v39 = v38;\n    int64_t v40 = v37 + v3; // 0x40a2fe\n    *(int16_t *)v40 = 0x7e2e;\n    int64_t v41 = v40 + 2; // 0x40a304\n    *(char *)v41 = 48;\n    uint64_t v42; // 0x40a0a0\n    int64_t str4; // 0x40a1dd\n    int64_t v43; // 0x40a274\n    int64_t v44 = v42 - 1 + (int64_t)memcpy((int64_t *)(v41 + v43), (int64_t *)str4, (int32_t)v42 + 2); // 0x40a329\n    char * v45 = (char *)v44;\n    char v46 = *v45; // 0x40a329\n    int64_t v47 = v44; // 0x40a334\n    char * v48 = v45; // 0x40a334\n    char v49 = v46; // 0x40a334\n    if (v46 == 57) {\n        *(char *)v47 = 48;\n        int64_t v50 = v47 - 1; // 0x40a343\n        char * v51 = (char *)v50;\n        char v52 = *v51; // 0x40a347\n        v47 = v50;\n        v48 = v51;\n        v49 = v52;\n        while (v52 == 57) {\n            // 0x40a340\n            *(char *)v47 = 48;\n            v50 = v47 - 1;\n            v51 = (char *)v50;\n            v52 = *v51;\n            v47 = v50;\n            v48 = v51;\n            v49 = v52;\n        }\n    }\n    // 0x40a34f\n    *v48 = v49 + 1;\n    struct __dirstream * dirp3; // 0x40a0a0\n    struct dirent * v53 = readdir(dirp3); // 0x40a35a\n    int64_t v54; // 0x40a0a0\n    v12 = v54;\n    v16 = v37;\n    if (v53 == NULL) {\n        // break (via goto) -> 0x40a370\n        goto lab_0x40a370;\n    }\n    // 0x40a1a9\n    int64_t v55; // 0x40a281\n    int32_t v56 = v55;\n    int64_t str3 = (int64_t)v53 + 19; // 0x40a1a9\n    int32_t v57 = v56; // 0x40a1ba\n    int32_t v58 = v39; // 0x40a1ba\n    int64_t v59 = v43; // 0x40a1ba\n    int64_t v60 = v37; // 0x40a1ba\n    uint64_t v61; // 0x40a189\n    if (v61 > (int64_t)strlen((char *)str3)) {\n        // break -> 0x40a198\n        goto lab_0x40a198_2;\n    }\n    // 0x40a1bc\n    int32_t n; // 0x40a0a0\n    int32_t memcmp_rc = memcmp((int64_t *)(v37 + v14), (int64_t *)str3, n); // 0x40a1cf\n    v57 = v56;\n    v58 = v39;\n    v59 = v43;\n    v60 = v37;\n    int32_t v62 = v56; // 0x40a1d6\n    int32_t v63 = v39; // 0x40a1d6\n    int64_t v64 = v43; // 0x40a1d6\n    int64_t v65 = v37; // 0x40a1d6\n    int64_t v66 = str3; // 0x40a1d6\n    if (memcmp_rc != 0) {\n        // break -> 0x40a198\n        goto lab_0x40a198_2;\n    }\n    goto lab_0x40a1d8;\n  lab_0x40a2bd:;\n    // 0x40a2bd\n    int64_t v91; // 0x40a0a0\n    int32_t v92 = v91;\n    int64_t v67; // 0x40a0a0\n    int64_t * v93 = (int64_t *)v67;\n    int64_t * mem2 = realloc(v93, v92); // 0x40a2cf\n    v38 = v92;\n    v36 = (int64_t)mem2;\n    v34 = v93;\n    if (mem2 == NULL) {\n        goto lab_0x40a4c8;\n    }\n    goto lab_0x40a2ea;\n  lab_0x40a38b:\n    // 0x40a38b\n    result2 = v17;\n    dirp2 = v13;\n    if ((char)a3 == 0) {\n        // break -> 0x40a538\n        goto lab_0x40a538_2;\n    }\n    // 0x40a396\n    v8 = v19;\n    int64_t v94; // 0x40a0a0\n    int64_t v95; // 0x40a0a0\n    if (dirp2 == 0) {\n        goto lab_0x40a410;\n    } else {\n        int32_t v96 = dirfd((struct __dirstream *)dirp2); // 0x40a39e\n        v94 = result2 + v14;\n        v95 = v96;\n        v9 = v14;\n        if (v96 < 0) {\n            goto lab_0x40a410;\n        } else {\n            goto lab_0x40a3ad;\n        }\n    }\n  lab_0x40a410:\n    // 0x40a410\n    v94 = result2;\n    v95 = 0xffffff9c;\n    v9 = 0;\n    goto lab_0x40a3ad;\n  lab_0x40a171:\n    // 0x40a171\n    v54 = v11;\n    dirp3 = v10;\n    struct dirent * v101 = readdir(dirp3); // 0x40a19b\n    v29 = v15;\n    v30 = v54;\n    if (v101 == NULL) {\n        goto lab_0x40a440;\n    } else {\n        // 0x40a1a9\n        v61 = v21 + 4;\n        n = (int32_t)v21 + 2;\n        int64_t v70 = n;\n        struct dirent * v102 = v101; // 0x40a19b\n        int64_t v103 = v15;\n        int64_t v104 = 2;\n        int32_t v105 = size;\n        int32_t v106 = 1;\n        while (true) {\n            int32_t v107 = v106;\n            int32_t v108 = v105;\n            int64_t v109 = v104;\n            int64_t v110 = v103;\n            int64_t str5 = (int64_t)v102 + 19; // 0x40a1a9\n            v57 = v107;\n            v58 = v108;\n            v59 = v109;\n            v60 = v110;\n            if (v61 <= (int64_t)strlen((char *)str5)) {\n                int32_t memcmp_rc3 = memcmp((int64_t *)(v110 + v14), (int64_t *)str5, n); // 0x40a1cf\n                v57 = v107;\n                v58 = v108;\n                v59 = v109;\n                v60 = v110;\n                v62 = v107;\n                v63 = v108;\n                v64 = v109;\n                v65 = v110;\n                v66 = str5;\n                if (memcmp_rc3 == 0) {\n                    while (true) {\n                      lab_0x40a1d8:\n                        // 0x40a1d8\n                        v67 = v65;\n                        int64_t v68 = v64;\n                        int32_t v69 = v63;\n                        int32_t n2 = v62;\n                        str4 = v66 + v70;\n                        char v71 = *(char *)str4; // 0x40a1e0\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (v71 >= 58) {\n                            // break -> 0x40a198\n                            break;\n                        }\n                        int64_t v72 = str4 + 1; // 0x40a1eb\n                        char v73 = *(char *)v72; // 0x40a1eb\n                        int64_t v74 = v71 == 57; // 0x40a1f6\n                        int64_t v75 = (int64_t)v73 & 0xffffffff; // 0x40a1fa\n                        int64_t v76 = v75; // 0x40a202\n                        int64_t v77 = v74; // 0x40a202\n                        int64_t v78 = v75; // 0x40a202\n                        int64_t v79 = 1; // 0x40a202\n                        int64_t v80 = v74; // 0x40a202\n                        if (v73 == 57 || (int32_t)v73 < 57) {\n                            int64_t v81 = 2; // 0x40a20d\n                            char v82 = *(char *)(v81 + str4); // 0x40a211\n                            int64_t v83 = v77 & (int64_t)((char)v76 == 57);\n                            int64_t v84 = (int64_t)v82 & 0xffffffff; // 0x40a218\n                            int64_t v85 = v81; // 0x40a220\n                            v77 = v83;\n                            v78 = v84;\n                            v79 = v81;\n                            v80 = v83;\n                            while (v82 == 57 || (int32_t)v82 < 57) {\n                                // 0x40a208\n                                v81 = v85 + 1;\n                                v82 = *(char *)(v81 + str4);\n                                v83 = v77 & (int64_t)((char)v84 == 57);\n                                v84 = (int64_t)v82 & 0xffffffff;\n                                v85 = v81;\n                                v77 = v83;\n                                v78 = v84;\n                                v79 = v81;\n                                v80 = v83;\n                            }\n                        }\n                        // 0x40a222\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if ((char)v78 != 126) {\n                            // break -> 0x40a198\n                            break;\n                        }\n                        // 0x40a22a\n                        v42 = v79;\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (*(char *)(v42 + v72) != 0) {\n                            // break -> 0x40a198\n                            break;\n                        }\n                        int64_t v86 = v80;\n                        uint64_t v87 = (int64_t)n2; // 0x40a235\n                        int64_t v88 = v86; // 0x40a23d\n                        if (v42 <= v87) {\n                            // 0x40a23f\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            if (v42 != v87) {\n                                // break -> 0x40a198\n                                break;\n                            }\n                            int32_t memcmp_rc2 = memcmp((int64_t *)(v7 + v67), (int64_t *)str4, n2); // 0x40a25c\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            v88 = v86 % 256;\n                            if (memcmp_rc2 >= 0 == (memcmp_rc2 != 0)) {\n                                // break -> 0x40a198\n                                break;\n                            }\n                        }\n                        // 0x40a274\n                        v43 = v88 % 256;\n                        v55 = v43 + v42;\n                        int64_t v89 = v3 + 4 + v55; // 0x40a28a\n                        v38 = v69;\n                        v36 = v67;\n                        if (v89 > (int64_t)v69) {\n                            int64_t v90 = 2 * v89; // 0x40a2a6\n                            if (v90 < 0) {\n                                // 0x40a4e8\n                                v91 = v89;\n                                goto lab_0x40a2bd;\n                            } else {\n                                // 0x40a2af\n                                v91 = v90;\n                                if (v89 < 0) {\n                                    // 0x40a4e8\n                                    v91 = v89;\n                                    goto lab_0x40a2bd;\n                                } else {\n                                    goto lab_0x40a2bd;\n                                }\n                            }\n                        } else {\n                            goto lab_0x40a2ea;\n                        }\n                    }\n                }\n            }\n          lab_0x40a198_2:\n            // 0x40a198\n            v103 = v60;\n            v104 = v59;\n            v105 = v58;\n            v106 = v57;\n            v102 = readdir(dirp3);\n            v12 = v54;\n            v16 = v103;\n            if (v102 == NULL) {\n                // break -> 0x40a370\n                break;\n            }\n        }\n        goto lab_0x40a370;\n    }\n  lab_0x40a3ad:\n    // 0x40a3ad\n    if ((int32_t)function_40dff0(0xffffff9c, a1, v95, v94, (int64_t)((int32_t)v8 != 1)) == 0) {\n        // break -> 0x40a538\n        goto lab_0x40a538_2;\n    }\n    int32_t * v97 = __errno_location(); // 0x40a3d0\n    int32_t v98 = *v97; // 0x40a3d5\n    if (v98 != 17) {\n        if (dirp2 != 0) {\n            // 0x40a3e8\n            closedir((struct __dirstream *)dirp2);\n        }\n        // 0x40a3f0\n        free((int64_t *)result2);\n        *v97 = v98;\n        // 0x40a3fd\n        return 0;\n    }\n    goto lab_0x40a134;\n  lab_0x40a440:;\n    int64_t v99 = v30;\n    int64_t v100 = v29;\n    v31 = v100;\n    v32 = v99;\n    v33 = v18;\n    if (v20 == 2) {\n        // 0x40a447\n        memcpy((int64_t *)(v100 + v3), (int64_t *)g52, v6);\n        v31 = v100;\n        v32 = v99;\n        v33 = 1;\n    }\n    goto lab_0x40a470;\n  lab_0x40a470:\n    // 0x40a470\n    function_409f70(v31, v3);\n    v19 = v33;\n    v13 = v32;\n    v17 = v31;\n    goto lab_0x40a38b;\n}\n"
        },
        {
            "funcName": "function_40a570",
            "funcStartAddr": "40a570",
            "funcEndAddr": "40a57a",
            "decompiledFuncCode": "int64_t function_40a570(int64_t a1, int32_t a2) {\n    // 0x40a570\n    return function_40a0a0(a1, (int64_t)a2, 1);\n}\n"
        },
        {
            "funcName": "function_40a580",
            "funcStartAddr": "40a580",
            "funcEndAddr": "40a5ac",
            "decompiledFuncCode": "int64_t function_40a580(void) {\n    // 0x40a580\n    int64_t v1; // 0x40a580\n    int64_t v2 = function_413ac0(v1, v1, g5, (int64_t *)&g4, 4, g37); // 0x40a59b\n    return (int64_t)*(int32_t *)(4 * v2 + (int64_t)&g4);\n}\n"
        },
        {
            "funcName": "function_40a5b0",
            "funcStartAddr": "40a5b0",
            "funcEndAddr": "40a5ca",
            "decompiledFuncCode": "int64_t function_40a5b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t result = function_40a0a0(a1, a2, 0); // 0x40a5b6\n    if (result != 0) {\n        // 0x40a5c0\n        return result;\n    }\n    // 0x40a5c5\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a5d0",
            "funcStartAddr": "40a5d0",
            "funcEndAddr": "40a5e2",
            "decompiledFuncCode": "int64_t function_40a5d0(int64_t a1, int64_t a2) {\n    // 0x40a5d0\n    if (a2 == 0) {\n        // 0x40a5da\n        return 2;\n    }\n    int64_t v1; // 0x40a5d0\n    if ((char)v1 != 0) {\n        // 0x40a5e0\n        return function_40a580();\n    }\n    // 0x40a5da\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a5f0",
            "funcStartAddr": "40a5f0",
            "funcEndAddr": "40a631",
            "decompiledFuncCode": "int64_t function_40a5f0(int64_t a1, int64_t a2) {\n    // 0x40a5f0\n    if (a2 != 0) {\n        int64_t v1; // 0x40a5f0\n        if ((char)v1 != 0) {\n            // 0x40a62c\n            return function_40a580();\n        }\n    }\n    char * env_val = getenv(\"VERSION_CONTROL\"); // 0x40a603\n    if (env_val == NULL) {\n        // 0x40a612\n        return 2;\n    }\n    // 0x40a60d\n    if (*env_val != 0) {\n        // 0x40a62c\n        return function_40a580();\n    }\n    // 0x40a612\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a640",
            "funcStartAddr": "40a640",
            "funcEndAddr": "40a6b0",
            "decompiledFuncCode": "int64_t function_40a640(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint64_t v1; // 0x40a640\n    if (a1 == 0) {\n        // 0x40a654\n        v1 = a2 != 0 ? a2 : 0x2000;\n        // 0x40a65e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a668\n    if (a2 == 0) {\n        // 0x40a654\n        v1 = a1;\n        // 0x40a65e\n        return v1 > a3 ? a3 : v1;\n    }\n    uint64_t v2 = a2;\n    int64_t v3 = a1 % v2;\n    int64_t v4 = v2; // 0x40a67b\n    while (v3 != 0) {\n        // 0x40a673\n        v2 = v3;\n        v3 = v4 % v2;\n        v4 = v2;\n    }\n    uint64_t v5 = a1 / v2; // 0x40a682\n    uint64_t result = v5 * a2; // 0x40a688\n    if (result > a3) {\n        // 0x40a654\n        v1 = a1;\n        // 0x40a65e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a694\n    if (result / a2 == v5) {\n        // 0x40a65e\n        return result;\n    }\n    // 0x40a654\n    v1 = a1;\n    // 0x40a65e\n    return v1 > a3 ? a3 : v1;\n}\n"
        },
        {
            "funcName": "function_40a6b0",
            "funcStartAddr": "40a6b0",
            "funcEndAddr": "40a6b8",
            "decompiledFuncCode": "int64_t function_40a6b0(int64_t a1) {\n    // 0x40a6b0\n    g53 = a1;\n    int64_t result; // 0x40a6b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a6c0",
            "funcStartAddr": "40a6c0",
            "funcEndAddr": "40a7bd",
            "decompiledFuncCode": "int64_t function_40a6c0(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g40; // 0x40a6c4\n    int64_t v2; // 0x40a6c0\n    if (function_4105e0(v1) != 0) {\n        int64_t v3 = function_410610(v1, 0, 1); // 0x40a77a\n        int64_t v4 = (int64_t)g40; // 0x40a77f\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_4105a0(v4, 0); // 0x40a6f8\n            int64_t v6 = (int64_t)g40; // 0x40a6fd\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x40a78e;\n            } else {\n                // 0x40a70c\n                function_413b80(v6);\n                goto lab_0x40a718;\n            }\n        } else {\n            goto lab_0x40a78e;\n        }\n    } else {\n        // 0x40a6dc\n        if ((int32_t)function_413b80(v1) == 0) {\n            // 0x40a6e8\n            return function_40a7e0();\n        }\n        goto lab_0x40a718;\n    }\n  lab_0x40a78e:\n    // 0x40a78e\n    if ((int32_t)function_413b80(v2) == 0) {\n        // 0x40a79b\n        return function_40a7e0();\n    }\n    goto lab_0x40a718;\n  lab_0x40a718:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x40a724\n    int32_t * err_num = __errno_location(); // 0x40a733\n    if (g53 == 0) {\n        // 0x40a7a8\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x40a740\n        error(0, *err_num, \"%s: %s\", (char *)function_40de20((int64_t)g53), v7);\n    }\n    // 0x40a75f\n    function_40a7e0();\n    _exit(g28);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a7c0",
            "funcStartAddr": "40a7c0",
            "funcEndAddr": "40a7c8",
            "decompiledFuncCode": "int64_t function_40a7c0(int64_t a1) {\n    // 0x40a7c0\n    g55 = a1;\n    int64_t result; // 0x40a7c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a7d0",
            "funcStartAddr": "40a7d0",
            "funcEndAddr": "40a7d8",
            "decompiledFuncCode": "int64_t function_40a7d0(int64_t a1) {\n    // 0x40a7d0\n    g54 = a1;\n    int64_t result; // 0x40a7d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a7e0",
            "funcStartAddr": "40a7e0",
            "funcEndAddr": "40a87e",
            "decompiledFuncCode": "int64_t function_40a7e0(void) {\n    // 0x40a7e0\n    int32_t * err_num; // 0x40a7f6\n    if ((int32_t)function_413b80((int64_t)g39) == 0) {\n        goto lab_0x40a80c;\n    } else {\n        // 0x40a7f6\n        err_num = __errno_location();\n        if (g54 == 0) {\n            goto lab_0x40a823;\n        } else {\n            // 0x40a807\n            if (*err_num != 32) {\n                goto lab_0x40a823;\n            } else {\n                goto lab_0x40a80c;\n            }\n        }\n    }\n  lab_0x40a80c:;\n    int64_t result = function_413b80((int64_t)g42); // 0x40a813\n    if ((int32_t)result == 0) {\n        // 0x40a81c\n        return result;\n    }\n    // 0x40a85e\n    _exit(g28);\n    // UNREACHABLE\n  lab_0x40a823:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40a82f\n    if (g55 == 0) {\n        // 0x40a869\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x40a843\n        error(0, *err_num, \"%s: %s\", (char *)function_40de20((int64_t)g55), v1);\n    }\n    // 0x40a85e\n    _exit(g28);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a880",
            "funcStartAddr": "40a880",
            "funcEndAddr": "40a916",
            "decompiledFuncCode": "int64_t function_40a880(void) {\n    // 0x40a880\n    int64_t name; // 0x40a880\n    struct __dirstream * dirp = opendir((char *)name); // 0x40a888\n    if (dirp == NULL) {\n        // 0x40a8a2\n        return (int64_t)dirp;\n    }\n    uint32_t v1 = dirfd(dirp); // 0x40a898\n    if (v1 >= 3) {\n        // 0x40a8a2\n        return (int64_t)dirp;\n    }\n    int64_t v2 = function_410460((int64_t)v1, 1030, 3, name); // 0x40a8be\n    int32_t * v3 = __errno_location(); // 0x40a8c6\n    int32_t fd = v2; // 0x40a8ce\n    if (fd < 0) {\n        // 0x40a8d9\n        closedir(dirp);\n        return 0;\n    }\n    struct __dirstream * v4 = fdopendir(fd); // 0x40a8fb\n    if (v4 == NULL) {\n        // 0x40a90c\n        close(fd);\n    }\n    // 0x40a8d9\n    closedir(dirp);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_40a920",
            "funcStartAddr": "40a920",
            "funcEndAddr": "40a938",
            "decompiledFuncCode": "int64_t function_40a920(void) {\n    // 0x40a920\n    int64_t v1; // 0x40a920\n    int64_t result = function_40a9a0(v1); // 0x40a924\n    if (result != 0) {\n        // 0x40a92e\n        return result;\n    }\n    // 0x40a933\n    function_410330(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a940",
            "funcStartAddr": "40a940",
            "funcEndAddr": "40a99d",
            "decompiledFuncCode": "int64_t function_40a940(int64_t a1) {\n    // 0x40a940\n    int64_t v1; // 0x40a940\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40a94e\n    int64_t v3 = function_40aa00(a1, v1); // 0x40a952\n    int64_t result = v3 - a1; // 0x40a95a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x40a983\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x40a970\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x40a983\n            break;\n        }\n        result2--;\n    }\n    // 0x40a983\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a9a0",
            "funcStartAddr": "40a9a0",
            "funcEndAddr": "40a9fa",
            "decompiledFuncCode": "int64_t function_40a9a0(int64_t a1) {\n    // 0x40a9a0\n    int64_t v1; // 0x40a9a0\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x40a9bf\n    if (mem == NULL) {\n        // 0x40a9e6\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x40a9d5\n    int64_t v3; // 0x40a9a0\n    if (v2 == 0) {\n        // 0x40a9f0\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x40a9d5\n    *(char *)(v3 + result) = 0;\n    // 0x40a9e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40aa00",
            "funcStartAddr": "40aa00",
            "funcEndAddr": "40aa5b",
            "decompiledFuncCode": "int64_t function_40aa00(int64_t a1, int64_t a2) {\n    // 0x40aa00\n    int64_t v1; // 0x40aa00\n    char v2 = v1;\n    int64_t v3 = a1; // 0x40aa09\n    int64_t v4 = a1; // 0x40aa09\n    char v5 = v2; // 0x40aa09\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x40aa14\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x40aa10\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40aa1e\n    if (v5 == 0) {\n      lab_0x40aa5a:\n        // 0x40aa5a\n        return result;\n    }\n    int64_t v7 = v4; // 0x40aa48\n    int64_t v8 = 0; // 0x40aa48\n    int64_t v9; // 0x40aa00\n    int64_t v10; // 0x40aa4a\n    char v11; // 0x40aa4e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x40aa45\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40aa4a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40aa45\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40aa3a\n    char v14 = *(char *)v13; // 0x40aa3e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40aa45\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40aa4a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x40aa45\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x40aa30\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40aa5a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40aa60",
            "funcStartAddr": "40aa60",
            "funcEndAddr": "40aa8b",
            "decompiledFuncCode": "int64_t function_40aa60(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x40aa64\n    int64_t result = len; // 0x40aa64\n    if (len < 2) {\n        // 0x40aa7a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x40aa78\n    while (*(char *)(v1 + str) == 47) {\n        // 0x40aa80\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40aa7a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40aa7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40aa90",
            "funcStartAddr": "40aa90",
            "funcEndAddr": "40aac3",
            "decompiledFuncCode": "int64_t function_40aa90(int64_t a1) {\n    // 0x40aa90\n    int64_t v1; // 0x40aa90\n    int64_t v2 = function_40aa00(a1, v1); // 0x40aa99\n    int64_t v3 = *(char *)v2 == 0 ? a1 : v2; // 0x40aaa4\n    int64_t v4 = function_40aa60(v3); // 0x40aaab\n    char * v5 = (char *)(v3 + v4); // 0x40aab3\n    *v5 = 0;\n    return v4 & -256 | (int64_t)(*v5 != 0);\n}\n"
        },
        {
            "funcName": "function_40aad0",
            "funcStartAddr": "40aad0",
            "funcEndAddr": "40aad5",
            "decompiledFuncCode": "int64_t function_40aad0(char fd, int32_t offset, int32_t length, int64_t advice) {\n    // 0x40aad0\n    return posix_fadvise((int32_t)fd, offset, length, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40aae0",
            "funcStartAddr": "40aae0",
            "funcEndAddr": "40ab01",
            "decompiledFuncCode": "int64_t function_40aae0(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x40aae0\n    if (stream == 0) {\n        // 0x40ab00\n        int64_t result; // 0x40aae0\n        return result;\n    }\n    // 0x40aae5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40ab10",
            "funcStartAddr": "40ab10",
            "funcEndAddr": "40ab5a",
            "decompiledFuncCode": "int64_t function_40ab10(int64_t path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x40ab23\n    return function_40eaf0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40ab60",
            "funcStartAddr": "40ab60",
            "funcEndAddr": "40abe6",
            "decompiledFuncCode": "int64_t function_40ab60(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40abd0\n        int64_t result; // 0x40ab60\n        return result;\n    }\n    int64_t result2 = function_4100e0(24); // 0x40ab7d\n    *(int64_t *)result2 = function_410310(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(a3 + 8);\n    *(int64_t *)(result2 + 16) = a3;\n    int64_t v1 = function_40c060(a1, result2); // 0x40aba6\n    if (v1 == 0) {\n        // 0x40abe1\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x40abb0\n    if (result2 == v1) {\n        // 0x40abd0\n        return result2;\n    }\n    // 0x40abb5\n    return function_40c330(result2);\n}\n"
        },
        {
            "funcName": "function_40abf0",
            "funcStartAddr": "40abf0",
            "funcEndAddr": "40ac2b",
            "decompiledFuncCode": "int64_t function_40abf0(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40ac28\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x40abfd\n    int64_t v2 = function_40b650(a1, &v1); // 0x40ac11\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_40ac30",
            "funcStartAddr": "40ac30",
            "funcEndAddr": "40ad14",
            "decompiledFuncCode": "int64_t function_40ac30(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t v2 = *(int32_t *)(v1 + 24); // 0x40ac30\n    switch (((v2 & 0xf000) - 0x1000) / 0x1000) {\n        case 7: {\n            // 0x40ac90\n            if (*(int64_t *)(v1 + 48) != 0) {\n                // 0x40aca8\n                return (int64_t)dcgettext(NULL, \"regular file\", 5);\n            }\n            // break -> 0x40ac97\n            break;\n        }\n        case 3: {\n            // 0x40acc8\n            return (int64_t)dcgettext(NULL, \"directory\", 5);\n        }\n        case 9: {\n            // 0x40ace8\n            return (int64_t)dcgettext(NULL, \"symbolic link\", 5);\n        }\n        case 5: {\n            // 0x40acf8\n            return (int64_t)dcgettext(NULL, \"block special file\", 5);\n        }\n        case 1: {\n            // 0x40acb8\n            return (int64_t)dcgettext(NULL, \"character special file\", 5);\n        }\n        case 0: {\n            // 0x40ad08\n            return (int64_t)dcgettext(NULL, \"fifo\", 5);\n        }\n        case 11: {\n            // 0x40acd8\n            return (int64_t)dcgettext(NULL, \"socket\", 5);\n        }\n        default: {\n            // 0x40ac7a\n            return (int64_t)dcgettext(NULL, \"weird file\", 5);\n        }\n    }\n    // 0x40ac97\n    return (int64_t)dcgettext(NULL, \"regular empty file\", 5);\n}\n"
        },
        {
            "funcName": "function_40ad20",
            "funcStartAddr": "40ad20",
            "funcEndAddr": "40ae93",
            "decompiledFuncCode": "int64_t function_40ad20(int32_t a1, int64_t * a2) {\n    int32_t v1 = a1 & 0xf000; // 0x40ad27\n    char v2 = 45; // 0x40ad20\n    int64_t v3; // 0x40ad20\n    int64_t v4; // 0x40ad20\n    uint64_t v5; // 0x40ad20\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x40ad89\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x40ad89:\n            // 0x40ad89\n            v4 = (int64_t)a2;\n            v5 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(v4 + 1) = (v5 & 256) == 0 ? 45 : 114;\n            int64_t v6 = v5 & 128; // 0x40ada2\n            char v7 = v6; // 0x40adaa\n            *(char *)(v4 + 2) = (v7 - ((char)(v6 == 0) | v7) & -74) + 119;\n            int64_t v8 = v5 & 64; // 0x40adb7\n            int64_t v9 = v8 - (v8 | (int64_t)(v8 == 0)); // 0x40adbd\n            if ((v5 & 2048) == 0) {\n                // 0x40ae60\n                v3 = (v9 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x40adcb\n                v3 = (v9 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x40add1\n            break;\n        }\n        case 5: {\n            // 0x40ad89\n            v2 = 98;\n            // branch (via goto) -> 0x40ad89\n            goto lab_0x40ad89;\n        }\n        case 1: {\n            // 0x40ad89\n            v2 = 99;\n            // branch (via goto) -> 0x40ad89\n            goto lab_0x40ad89;\n        }\n        case 9: {\n            // 0x40ad89\n            v2 = 108;\n            // branch (via goto) -> 0x40ad89\n            goto lab_0x40ad89;\n        }\n        case 0: {\n            // 0x40ad89\n            v2 = 112;\n            // branch (via goto) -> 0x40ad89\n            goto lab_0x40ad89;\n        }\n        default: {\n            // 0x40ad76\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x40ad89\n            goto lab_0x40ad89;\n        }\n    }\n    // 0x40add1\n    *(char *)(v4 + 3) = (char)v3;\n    int64_t v10 = v5 & 32; // 0x40add6\n    char v11 = v10; // 0x40addc\n    *(char *)(v4 + 4) = (v11 - ((char)(v10 == 0) | v11) & -69) + 114;\n    int64_t v12 = v5 & 16; // 0x40ade9\n    char v13 = v12; // 0x40adef\n    *(char *)(v4 + 5) = (v13 - ((char)(v12 == 0) | v13) & -74) + 119;\n    int64_t v14 = v5 & 8; // 0x40adfc\n    int64_t v15 = v14 - (v14 | (int64_t)(v14 == 0)); // 0x40ae02\n    int64_t v16; // 0x40ad20\n    if ((v5 & 1024) == 0) {\n        // 0x40ae70\n        v16 = (v15 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x40ae0c\n        v16 = (v15 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x40ae12\n    *(char *)(v4 + 6) = (char)v16;\n    int64_t v17 = v5 & 4; // 0x40ae17\n    char v18 = v17; // 0x40ae1d\n    *(char *)(v4 + 7) = (v18 - ((char)(v17 == 0) | v18) & -69) + 114;\n    int64_t v19 = v5 & 2; // 0x40ae2a\n    char v20 = v19; // 0x40ae30\n    *(char *)(v4 + 8) = (v20 - ((char)(v19 == 0) | v20) & -74) + 119;\n    char v21 = v5 % 2 == 0; // 0x40ae43\n    if ((v5 & 512) == 0) {\n        // 0x40ae80\n        *(char *)(v4 + 9) = (v21 & -75) + 120;\n        *(int16_t *)(v4 + 10) = 32;\n        return 32;\n    }\n    // 0x40ae4d\n    *(char *)(v4 + 9) = (v21 & -32) + 116;\n    *(int16_t *)(v4 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_40aea0",
            "funcStartAddr": "40aea0",
            "funcEndAddr": "40aea8",
            "decompiledFuncCode": "int64_t function_40aea0(int64_t a1) {\n    // 0x40aea0\n    int64_t v1; // 0x40aea0\n    return function_40ad20(*(int32_t *)(a1 + 24), (int64_t *)v1);\n}\n"
        },
        {
            "funcName": "function_40aeb0",
            "funcStartAddr": "40aeb0",
            "funcEndAddr": "40aec8",
            "decompiledFuncCode": "int64_t function_40aeb0(void) {\n    // 0x40aeb0\n    int64_t v1; // 0x40aeb0\n    int64_t result = function_40aed0(v1, v1, v1); // 0x40aeb4\n    if (result != 0) {\n        // 0x40aebe\n        return result;\n    }\n    // 0x40aec3\n    function_410330(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40aed0",
            "funcStartAddr": "40aed0",
            "funcEndAddr": "40afa9",
            "decompiledFuncCode": "int64_t function_40aed0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_40aa00(a1, a2); // 0x40aee8\n    int64_t v2 = function_40aa60(v1); // 0x40aef3\n    int64_t v3 = 0; // 0x40af07\n    if (v2 != 0) {\n        // 0x40af09\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x40af20\n    int64_t v4 = a2; // 0x40af20\n    int64_t v5; // 0x40aed0\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x40af98\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x40af01\n    int32_t len = strlen((char *)str); // 0x40af25\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x40af35\n    if (mem == NULL) {\n        // 0x40af81\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40af4b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x40af57\n    if (a3 != 0) {\n        // 0x40af60\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x40af73\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x40af81\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_40afb0",
            "funcStartAddr": "40afb0",
            "funcEndAddr": "40b026",
            "decompiledFuncCode": "int64_t function_40afb0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40afb0\n    if (a3 == 0) {\n        // 0x40aff4\n        return 0;\n    }\n    int64_t v1 = a3; // 0x40afcb\n    int64_t v2 = a2; // 0x40afcb\n    int64_t result = 0;\n    int64_t v3 = function_40e290(a1 & 0xffffffff, v2, v1); // 0x40afe9\n    int64_t result2 = result; // 0x40aff2\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x40b008\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x40afd5\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x40aff4\n            break;\n        }\n        result = v4;\n        v3 = function_40e290(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x40aff4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b030",
            "funcStartAddr": "40b030",
            "funcEndAddr": "40b0c3",
            "decompiledFuncCode": "int64_t function_40b030(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40b047\n    if (v1 == -1) {\n        // 0x40b0bf\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40b04f\n    int64_t v3; // 0x40b030\n    while (true) {\n      lab_0x40b058:\n        // 0x40b058\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40b0b0;\n        } else {\n            goto lab_0x40b0b5;\n        }\n    }\n  lab_0x40b0bf_2:;\n    // 0x40b0bf\n    int64_t result; // 0x40b030\n    return result;\n  lab_0x40b0b5:;\n    int64_t v4 = v3 + 2; // 0x40b0b5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40b0bf\n        goto lab_0x40b0bf_2;\n    }\n    goto lab_0x40b058;\n  lab_0x40b0b0:\n    // 0x40b0b0\n    result = v3;\n    goto lab_0x40b0b5;\n}\n"
        },
        {
            "funcName": "function_40b0d0",
            "funcStartAddr": "40b0d0",
            "funcEndAddr": "40b0e0",
            "decompiledFuncCode": "int64_t function_40b0d0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40b0d0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40b0e0",
            "funcStartAddr": "40b0e0",
            "funcEndAddr": "40b0e7",
            "decompiledFuncCode": "int64_t function_40b0e0(int64_t a1, int64_t a2) {\n    // 0x40b0e0\n    int64_t v1; // 0x40b0e0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40b0f0",
            "funcStartAddr": "40b0f0",
            "funcEndAddr": "40b111",
            "decompiledFuncCode": "int64_t function_40b0f0(int64_t a1, int64_t a2) {\n    // 0x40b0f0\n    int64_t v1; // 0x40b0f0\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x40b108\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b120",
            "funcStartAddr": "40b120",
            "funcEndAddr": "40b239",
            "decompiledFuncCode": "int64_t function_40b120(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40b0f0(a1, a2); // 0x40b134\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40b13c\n    int64_t result2 = *v2; // 0x40b13c\n    if (result2 == 0) {\n        // 0x40b1ce\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40b164\n            if (v3 == 0) {\n                // 0x40b1ce\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40b171\n            int64_t v5 = v3; // 0x40b177\n            int64_t v6 = v1; // 0x40b177\n            int64_t result = v4; // 0x40b177\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40b1ac_2:\n                // 0x40b1ac\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40b1b1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40b1c0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40b1ce\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40b184\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40b191\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40b1ac_2;\n                }\n                // 0x40b199\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40b1ac_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40b1ce\n            return 0;\n        }\n    }\n    // 0x40b1e3\n    if ((char)a4 == 0) {\n        // 0x40b1ce\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40b1e8\n    if (v12 == 0) {\n        // 0x40b230\n        *v2 = 0;\n        // 0x40b1ce\n        return result2;\n    }\n    // 0x40b1f1\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40b1ff\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b240",
            "funcStartAddr": "40b240",
            "funcEndAddr": "40b2be",
            "decompiledFuncCode": "int64_t function_40b240(uint64_t a1) {\n    if (a1 == (int64_t)&g7) {\n        // 0x40b2bd\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40b24b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g7) {\n        // 0x40b2aa\n        *(int64_t *)a1 = (int64_t)&g7;\n        return 0;\n    }\n    // 0x40b259\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40b274\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x40b281\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40b289\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40b2bd\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40b2c0",
            "funcStartAddr": "40b2c0",
            "funcEndAddr": "40b40a",
            "decompiledFuncCode": "int64_t function_40b2c0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40b2da\n    uint64_t v2 = *v1; // 0x40b2da\n    if (v2 <= a2) {\n        // 0x40b3c4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40b2c0\n    int64_t v8 = a2; // 0x40b2c0\n    int64_t v9; // 0x40b2c0\n    int64_t result; // 0x40b2c0\n    int64_t v10; // 0x40b2c0\n    while (true) {\n      lab_0x40b2f6_2:\n        // 0x40b2f6\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40b2f6\n        int64_t v12 = *v11; // 0x40b2f6\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40b2e8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40b2ff\n            int64_t v14 = *v13; // 0x40b2ff\n            int64_t v15 = v14; // 0x40b307\n            int64_t v16 = v12; // 0x40b307\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40b324\n                    int64_t v19 = *v18; // 0x40b324\n                    int64_t v20 = function_40b0f0(v3, v19); // 0x40b32d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40b332\n                    int64_t v22 = *v21; // 0x40b332\n                    int64_t * v23 = (int64_t *)v20; // 0x40b336\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40b310\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b35f\n                            break;\n                        }\n                    } else {\n                        // 0x40b33c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b35f\n                            break;\n                        }\n                    }\n                    // 0x40b324\n                    v15 = v22;\n                }\n                // 0x40b35f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40b363\n                v9 = *v1;\n                goto lab_0x40b2e8;\n            } else {\n                int64_t v26 = function_40b0f0(v3, v25); // 0x40b37b\n                int64_t * v27 = (int64_t *)v26; // 0x40b380\n                if (*v27 == 0) {\n                    // 0x40b3e0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40b389\n                    int64_t * v29; // 0x40b2c0\n                    int64_t v30; // 0x40b2c0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40b3ef\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40b3c4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40b3ef\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40b39a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40b3a9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40b3b1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40b3ba\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40b3c4\n                    break;\n                }\n                goto lab_0x40b2f6_2;\n            }\n        }\n    }\n    // 0x40b3c4\n    return result;\n  lab_0x40b2e8:;\n    int64_t v36 = v10 + 16; // 0x40b2e8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40b2f6_2;\n    // 0x40b2f6\n    goto lab_0x40b2f6_2;\n}\n"
        },
        {
            "funcName": "function_40b410",
            "funcStartAddr": "40b410",
            "funcEndAddr": "40b415",
            "decompiledFuncCode": "int64_t function_40b410(int64_t a1) {\n    // 0x40b410\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40b420",
            "funcStartAddr": "40b420",
            "funcEndAddr": "40b425",
            "decompiledFuncCode": "int64_t function_40b420(int64_t a1) {\n    // 0x40b420\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40b430",
            "funcStartAddr": "40b430",
            "funcEndAddr": "40b435",
            "decompiledFuncCode": "int64_t function_40b430(int64_t a1) {\n    // 0x40b430\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40b440",
            "funcStartAddr": "40b440",
            "funcEndAddr": "40b48f",
            "decompiledFuncCode": "int64_t function_40b440(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b443\n    int64_t result = 0; // 0x40b44c\n    if (v1 <= a1) {\n      lab_0x40b48d:\n        // 0x40b48d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40b450\n    while (*(int64_t *)v3 == 0) {\n        // 0x40b450\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40b45f\n    int64_t v6 = v5; // 0x40b46b\n    int64_t v7 = 1; // 0x40b46b\n    int64_t v8; // 0x40b440\n    int64_t v9; // 0x40b470\n    int64_t v10; // 0x40b474\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40b470\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40b480\n    int64_t v12 = v3 + 16; // 0x40b484\n    while (v12 < v1) {\n        // 0x40b459\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40b450\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40b45f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40b470\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40b47d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40b48d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b490",
            "funcStartAddr": "40b490",
            "funcEndAddr": "40b4f7",
            "decompiledFuncCode": "int64_t function_40b490(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b493\n    int64_t v2 = a1; // 0x40b49f\n    int64_t v3 = 0; // 0x40b49f\n    int64_t v4 = 0; // 0x40b49f\n    int64_t v5 = 0; // 0x40b49f\n    int64_t v6 = 0; // 0x40b49f\n    int64_t v7; // 0x40b490\n    int64_t v8; // 0x40b490\n    int64_t v9; // 0x40b490\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40b4b1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40b4a8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40b4b7\n                int64_t v13 = v10 + 1; // 0x40b4bb\n                int64_t v14 = v11 + 1; // 0x40b4bf\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40b4c6\n                int64_t v16 = v14; // 0x40b4c6\n                if (v12 == 0) {\n                    goto lab_0x40b4a8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40b4d0\n                    int64_t v18 = v16 + 1; // 0x40b4d4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40b4d0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40b4dd\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40b4e6\n                        break;\n                    }\n                    goto lab_0x40b4b1_2;\n                }\n            }\n        }\n    }\n  lab_0x40b4e6:\n    // 0x40b4e6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40b4ef\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40b4ee\n    return 0;\n  lab_0x40b4a8:;\n    int64_t v20 = v8 + 16; // 0x40b4a8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40b4e6\n        goto lab_0x40b4e6;\n    }\n    goto lab_0x40b4b1_2;\n    // 0x40b4b1\n    goto lab_0x40b4b1_2;\n}\n"
        },
        {
            "funcName": "function_40b500",
            "funcStartAddr": "40b500",
            "funcEndAddr": "40b648",
            "decompiledFuncCode": "int64_t function_40b500(uint64_t a1, int64_t a2) {\n    // 0x40b500\n    int128_t v1; // 0x40b500\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40b513\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40b517\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40b51e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40b530\n            while (*(int64_t *)v7 == 0) {\n                // 0x40b530\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40b56d\n                    goto lab_0x40b56d;\n                }\n            }\n        }\n    }\n  lab_0x40b56d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40b57c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40b500\n    int128_t v10; // 0x40b500\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40b613\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40b61c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40b5b3;\n        } else {\n            goto lab_0x40b629;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40b5a6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40b629;\n        } else {\n            goto lab_0x40b5b3;\n        }\n    }\n  lab_0x40b5b3:\n    // 0x40b5b3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40b5b7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40b5b7\n    goto lab_0x40b5bc;\n  lab_0x40b629:\n    // 0x40b629\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40b63a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40b5bc;\n  lab_0x40b5bc:\n    // 0x40b5bc\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40b650",
            "funcStartAddr": "40b650",
            "funcEndAddr": "40b6a3",
            "decompiledFuncCode": "int64_t function_40b650(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_40b0f0(a1, result); // 0x40b65a\n    int64_t v2 = *(int64_t *)v1; // 0x40b65f\n    if (v2 == 0) {\n        // 0x40b68d\n        return 0;\n    }\n    // 0x40b673\n    if (v2 == result) {\n        // 0x40b68d\n        return result;\n    }\n    int64_t v3 = v1; // 0x40b684\n    int64_t result2 = v2; // 0x40b682\n    while ((char)v1 == 0) {\n        // 0x40b684\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40b68d\n            break;\n        }\n        // 0x40b670\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40b68d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40b68d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b6b0",
            "funcStartAddr": "40b6b0",
            "funcEndAddr": "40b6f8",
            "decompiledFuncCode": "int64_t function_40b6b0(uint64_t a1) {\n    int64_t result = 0; // 0x40b6b5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40b6c7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b6be\n    if (v1 <= a1) {\n        // 0x40b6c7\n        return result;\n    }\n    int64_t v2 = a1; // 0x40b6c5\n    int64_t v3 = *(int64_t *)v2; // 0x40b6d9\n    result = v3;\n    while (v3 == 0) {\n        // 0x40b6d0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40b6c7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40b6c7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b700",
            "funcStartAddr": "40b700",
            "funcEndAddr": "40b76a",
            "decompiledFuncCode": "int64_t function_40b700(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40b0f0(a1, a2); // 0x40b70c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40b728\n    while (*(int64_t *)v2 != a2) {\n        // 0x40b720\n        if (v3 == 0) {\n            goto lab_0x40b736;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40b760\n        return *(int64_t *)v3;\n    }\n  lab_0x40b736:;\n    int64_t v4 = v1 + 16; // 0x40b748\n    int64_t result = 0; // 0x40b74f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40b740\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40b753\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40b753\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b770",
            "funcStartAddr": "40b770",
            "funcEndAddr": "40b7d4",
            "decompiledFuncCode": "int64_t function_40b770(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40b776\n    int64_t result = 0; // 0x40b77a\n    if (*v1 <= a1) {\n      lab_0x40b791:\n        // 0x40b791\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40b77f\n    int64_t v4 = v2; // 0x40b785\n    int64_t v5; // 0x40b770\n    int64_t v6; // 0x40b770\n    int64_t v7; // 0x40b7b8\n    int64_t v8; // 0x40b7c1\n    int64_t v9; // 0x40b7a1\n    int64_t v10; // 0x40b7a5\n    if (v3 != 0) {\n        // 0x40b798\n        if (v2 >= a3) {\n            // break -> 0x40b791\n            break;\n        }\n        // 0x40b79d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40b7b5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40b7b0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40b7b5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40b787\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40b77f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40b798\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40b791\n                break;\n            }\n            // 0x40b79d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40b7b5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40b7b0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40b7b5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40b787\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40b791\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b7e0",
            "funcStartAddr": "40b7e0",
            "funcEndAddr": "40b858",
            "decompiledFuncCode": "int64_t function_40b7e0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b7f1\n    int64_t result = 0; // 0x40b7f5\n    if (v1 <= a1) {\n      lab_0x40b814:\n        // 0x40b814\n        return result;\n    }\n    int64_t v2 = a1; // 0x40b80a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40b808\n    int64_t v5 = v2; // 0x40b808\n    int64_t v6 = v3; // 0x40b808\n    int64_t v7; // 0x40b7e0\n    int64_t v8; // 0x40b838\n    int64_t v9; // 0x40b83c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40b838\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40b848\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40b838\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40b802\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40b838\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40b848\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40b838\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40b80a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40b814\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b860",
            "funcStartAddr": "40b860",
            "funcEndAddr": "40b891",
            "decompiledFuncCode": "int64_t function_40b860(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40b867\n    if (v1 == 0) {\n        // 0x40b88d\n        return 0;\n    }\n    int64_t result = 0; // 0x40b867\n    v2++;\n    char v3 = *(char *)v2; // 0x40b883\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40b88d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b8a0",
            "funcStartAddr": "40b8a0",
            "funcEndAddr": "40b8c0",
            "decompiledFuncCode": "int64_t function_40b8a0(int64_t a1) {\n    // 0x40b8a0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40b8c0",
            "funcStartAddr": "40b8c0",
            "funcEndAddr": "40ba4a",
            "decompiledFuncCode": "int64_t function_40b8c0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40b8c0\n    int128_t v1; // 0x40b8c0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40b8fa\n    int64_t result = (int64_t)mem; // 0x40b8fa\n    if (mem == NULL) {\n        // 0x40b9aa\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40b90b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40b8c0\n    int128_t v6; // 0x40b8c0\n    if (a2 == 0) {\n        // 0x40b9c0\n        *v4 = (int64_t)&g7;\n        int64_t v7 = function_40b240(v3); // 0x40b9c8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40b9cd\n        if ((char)v7 == 0) {\n            // 0x40b9a0\n            free(mem);\n            // 0x40b9aa\n            return 0;\n        }\n        // 0x40b9d9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40ba23;\n        } else {\n            goto lab_0x40b9de;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40b240(v3) == 0) {\n            // 0x40b9a0\n            free(mem);\n            // 0x40b9aa\n            return 0;\n        }\n        // 0x40b925\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40b030(a1); // 0x40b933\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40b9a0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40b9a0\n                free(mem);\n                // 0x40b9aa\n                return 0;\n            }\n            // 0x40b951\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40b9a0\n                free(mem);\n                // 0x40b9aa\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40b962\n            int64_t v10 = (int64_t)mem2; // 0x40b962\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40b9a0\n                free(mem);\n                // 0x40b9aa\n                return 0;\n            }\n            // 0x40b96f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40b0d0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40b0e0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40b9aa\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40ba18\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40b9de;\n        } else {\n            goto lab_0x40ba23;\n        }\n    }\n  lab_0x40ba23:\n    // 0x40ba23\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40ba33\n    int128_t v13 = v6; // 0x40ba3c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40ba3c\n    goto lab_0x40b9e7;\n  lab_0x40b9de:\n    // 0x40b9de\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40b9e7;\n  lab_0x40b9e7:\n    // 0x40b9e7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40b9a0\n    free(mem);\n    // 0x40b9aa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40ba50",
            "funcStartAddr": "40ba50",
            "funcEndAddr": "40baf8",
            "decompiledFuncCode": "int64_t function_40ba50(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40ba5a\n    uint64_t v2 = *v1; // 0x40ba5a\n    int64_t result; // 0x40ba50\n    if (v2 <= a1) {\n      lab_0x40bae3:\n        // 0x40bae3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40ba68\n    while (*v6 == 0) {\n        // 0x40ba68\n        v7 = v5 + 16;\n        int64_t v8; // 0x40ba50\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40bae3\n            goto lab_0x40bae3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40ba79\n    int64_t v10 = *v9; // 0x40ba79\n    int64_t v11 = *v3; // 0x40ba7e\n    int64_t v12 = v11; // 0x40ba85\n    int64_t v13 = v10; // 0x40ba85\n    int64_t result2 = v11; // 0x40ba85\n    int64_t * v14; // 0x40ba9e\n    int64_t v15; // 0x40ba9e\n    int64_t v16; // 0x40ba9a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40ba95\n            v16 = *v3;\n        }\n        // 0x40ba9e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40ba90\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40ba95\n                v16 = *v3;\n            }\n            // 0x40ba9e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40babd\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40bad0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40badd\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40ba6c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40ba68\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40bae3\n                goto lab_0x40bae3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40ba79\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40ba95\n                v16 = *v3;\n            }\n            // 0x40ba9e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40ba90\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40ba95\n                    v16 = *v3;\n                }\n                // 0x40ba9e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40babd\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40bae3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bb00",
            "funcStartAddr": "40bb00",
            "funcEndAddr": "40bbd6",
            "decompiledFuncCode": "int64_t function_40bb00(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40bb0f\n    uint64_t v2 = *v1; // 0x40bb0f\n    int64_t v3 = a1; // 0x40bb13\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40bb63;\n    } else {\n        // 0x40bb15\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40bb63;\n        } else {\n            // 0x40bb1c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40bb31\n                int64_t v6; // 0x40bb28\n                while (v5 == 0) {\n                    // 0x40bb28\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40bb63\n                        goto lab_0x40bb63;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40bb48\n                int64_t v8 = v7; // 0x40bb4f\n                int64_t v9 = v5; // 0x40bb4f\n                int64_t v10; // 0x40bb00\n                int64_t v11; // 0x40bb48\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40bb40\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40bb43\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40bb56\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40bb31\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40bb28\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40bb63\n                            goto lab_0x40bb63;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40bb43\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40bb40\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40bb43\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40bb51\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40bb63;\n            } else {\n                goto lab_0x40bb9c;\n            }\n        }\n    }\n  lab_0x40bb63:\n    // 0x40bb63\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40bb70\n        int64_t v14 = v13; // 0x40bb77\n        int64_t v15 = v2; // 0x40bb77\n        int64_t v16; // 0x40bb80\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40bb80\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40bb91\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40bb91\n        int64_t v18 = v15; // 0x40bb9a\n        int64_t v19 = v17; // 0x40bb9a\n        while (v15 > v17) {\n            // 0x40bb70\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40bb80\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40bb91\n                v15 = *v1;\n            }\n            // 0x40bb91\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40bb9c;\n  lab_0x40bb9c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40bb9c\n    if (v20 == 0) {\n        // 0x40bbc1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g76;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40bbb0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40bbbf\n    while (v21 != 0) {\n        // 0x40bbb0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40bbc1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_40bbe0",
            "funcStartAddr": "40bbe0",
            "funcEndAddr": "40bdda",
            "decompiledFuncCode": "int64_t function_40bbe0(int64_t a1, uint64_t a2) {\n    // 0x40bbe0\n    int128_t v1; // 0x40bbe0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40bbeb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40bbe0\n        if (a2 < 0) {\n            // 0x40bd60\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40bd70\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40bc00\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40bc09\n        __asm_comiss(__asm_divss_6(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40bd52\n        return 0;\n    }\n    uint64_t nmemb = function_40b030(a2); // 0x40bc43\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40bd52\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40bc7b\n    if (*v6 == nmemb) {\n        // 0x40bd52\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40bc8d\n    int64_t v7 = (int64_t)mem; // 0x40bc8d\n    int64_t v8 = v7; // bp-104, 0x40bc92\n    if (mem == NULL) {\n        // 0x40bd52\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40bcea\n    int64_t v10 = *v9; // 0x40bcea\n    int64_t v11 = function_40b2c0(&v8, a1, 0); // 0x40bcf3\n    int64_t result = v11 & 0xffffffff; // 0x40bcf8\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40bcb4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40bd16\n        function_40b2c0(v13, v12, 1);\n        function_40b2c0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40bda0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40bd52\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bde0",
            "funcStartAddr": "40bde0",
            "funcEndAddr": "40c054",
            "decompiledFuncCode": "int64_t function_40bde0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40bde0\n    int128_t v1; // 0x40bde0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40bde0\n    int64_t v5 = function_40b120(a1, a2, &v4, 0); // 0x40be01\n    if (v5 != 0) {\n        // 0x40be0e\n        if (a3 != NULL) {\n            // 0x40be15\n            *a3 = v5;\n        }\n        // 0x40be19\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40be28\n    uint64_t v7 = *v6; // 0x40be28\n    int64_t v8; // 0x40bde0\n    int64_t v9; // 0x40bde0\n    int64_t v10; // 0x40bde0\n    int128_t v11; // 0x40bde0\n    int128_t v12; // 0x40bde0\n    int64_t v13; // 0x40bde0\n    if (v7 < 0) {\n        // 0x40beb0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40bec0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40bec4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40bec9\n        int128_t v17 = __asm_addss(v15, v15); // 0x40becd\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40be4b;\n        } else {\n            goto lab_0x40beda;\n        }\n    } else {\n        // 0x40be31\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40be35\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40be39\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40be3e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40beda;\n        } else {\n            goto lab_0x40be4b;\n        }\n    }\n  lab_0x40be4b:\n    // 0x40be4b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40be54\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40be5c\n    int128_t v23 = v11; // 0x40be5c\n    if (v13 == 0) {\n        goto lab_0x40be62;\n    } else {\n        goto lab_0x40bf01;\n    }\n  lab_0x40beda:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40bee7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40beea\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40bef3\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40be62;\n    } else {\n        goto lab_0x40bf01;\n    }\n  lab_0x40be62:;\n    int64_t * v28 = (int64_t *)v4; // 0x40be67\n    if (*v28 == 0) {\n        // 0x40bf78\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40bf81\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40be72\n    int64_t v31 = *v30; // 0x40be72\n    int64_t * v32; // 0x40bde0\n    int64_t v33; // 0x40bde0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40bf9d\n        if (mem == NULL) {\n            // 0x40be19\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40bf9d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40be87\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40be9d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40bf01:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40bf01\n    function_40b240(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40bf0a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40bf0e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40bf12\n    int128_t v44; // 0x40bde0\n    if (v42 < 0) {\n        // 0x40bfd0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40bfe0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40bf20\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40bf29\n    int128_t v47; // 0x40bde0\n    int64_t v48; // 0x40bde0\n    if (v46 < 0) {\n        // 0x40bfb0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40bfbd\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40bfc0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40bf32\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40bf36\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40bf3b\n    __asm_comiss_2(v47, __asm_mulss_5(__asm_movaps_4(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40bf4b\n        int128_t v53 = v52; // 0x40bf54\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40bff0\n            v53 = __asm_mulss_5(v52, v43);\n        }\n        // 0x40bf5a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40be19\n        return 0xffffffff;\n    }\n    goto lab_0x40be62;\n}\n"
        },
        {
            "funcName": "function_40c060",
            "funcStartAddr": "40c060",
            "funcEndAddr": "40c09b",
            "decompiledFuncCode": "int64_t function_40c060(int64_t a1, int64_t a2) {\n    // 0x40c060\n    int64_t v1; // bp-16, 0x40c060\n    int64_t v2; // 0x40c060\n    int32_t v3 = function_40bde0(a1, a2, &v1, v2); // 0x40c072\n    if (v3 == -1) {\n        // 0x40c080\n        return 0;\n    }\n    // 0x40c077\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40c0a0",
            "funcStartAddr": "40c0a0",
            "funcEndAddr": "40c277",
            "decompiledFuncCode": "int64_t function_40c0a0(int64_t a1) {\n    // 0x40c0a0\n    int128_t v1; // 0x40c0a0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40c0a0\n    int64_t v5; // 0x40c0a0\n    int64_t result = function_40b120(a1, v5, &v4, 1); // 0x40c0b5\n    if (result == 0) {\n        // 0x40c0d2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40c0c7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40c0d2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40c0e0\n    uint64_t v8 = *v7 - 1; // 0x40c0e4\n    *v7 = v8;\n    int64_t v9; // 0x40c0a0\n    int64_t v10; // 0x40c0a0\n    int64_t v11; // 0x40c0a0\n    int128_t v12; // 0x40c0a0\n    int128_t v13; // 0x40c0a0\n    int64_t v14; // 0x40c0a0\n    if (v8 < 0) {\n        // 0x40c1d0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40c1e0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40c1e4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40c1e9\n        int128_t v18 = __asm_addss(v16, v16); // 0x40c1ed\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40c10c;\n        } else {\n            goto lab_0x40c1fa;\n        }\n    } else {\n        // 0x40c0f2\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40c0f6\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40c0fa\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40c0ff\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40c1fa;\n        } else {\n            goto lab_0x40c10c;\n        }\n    }\n  lab_0x40c10c:\n    // 0x40c10c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40c110\n    int64_t v23 = v14; // 0x40c110\n    int128_t v24 = v12; // 0x40c110\n    int64_t v25 = v10; // 0x40c110\n    int128_t v26 = v22; // 0x40c110\n    goto lab_0x40c115;\n  lab_0x40c1fa:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40c207\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40c20a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40c115;\n  lab_0x40c115:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40c115\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40c0d2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40c11e\n    function_40b240(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40c127\n    int64_t v31 = *(int64_t *)v29; // 0x40c12b\n    int128_t v32; // 0x40c0a0\n    if (v30 < 0) {\n        // 0x40c240\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40c250\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40c138\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40c141\n    int128_t v35; // 0x40c0a0\n    int64_t v36; // 0x40c0a0\n    if (v34 < 0) {\n        // 0x40c220\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40c22d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40c230\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40c14e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40c152\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40c157\n    __asm_comiss_2(__asm_mulss_5(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40c0d2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40c168\n    int128_t v41 = v40; // 0x40c171\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40c173\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40c178\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40c268\n    if ((char)function_40bbe0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40c0d2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40c19a\n    if (*v43 != 0) {\n        int64_t v44; // 0x40c0a0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40c1a8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40c1b9\n    *v43 = 0;\n    // 0x40c0d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c280",
            "funcStartAddr": "40c280",
            "funcEndAddr": "40c2a7",
            "decompiledFuncCode": "int64_t function_40c280(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c280\n    return (*(int64_t *)(a1 + 8) ^ function_413d10(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_40c2b0",
            "funcStartAddr": "40c2b0",
            "funcEndAddr": "40c2bd",
            "decompiledFuncCode": "int64_t function_40c2b0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c2b0\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_40c2c0",
            "funcStartAddr": "40c2c0",
            "funcEndAddr": "40c2e5",
            "decompiledFuncCode": "int64_t function_40c2c0(int64_t a1, int64_t a2) {\n    // 0x40c2c0\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x40c2ca\n        return 0;\n    }\n    // 0x40c2da\n    return function_40e2f0(a1, a2);\n}\n"
        },
        {
            "funcName": "function_40c2f0",
            "funcStartAddr": "40c2f0",
            "funcEndAddr": "40c323",
            "decompiledFuncCode": "int64_t function_40c2f0(int64_t str, int64_t str2) {\n    // 0x40c2f0\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40c2fc\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40c314\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_40c330",
            "funcStartAddr": "40c330",
            "funcEndAddr": "40c345",
            "decompiledFuncCode": "int64_t function_40c330(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40c337\n    free(v1);\n    free(v1);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_40c350",
            "funcStartAddr": "40c350",
            "funcEndAddr": "40c3e9",
            "decompiledFuncCode": "int64_t function_40c350(int64_t str) {\n    // 0x40c350\n    if (str == 0) {\n        // 0x40c3c9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g42);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40c35e\n    int64_t result = (int64_t)found_char_pos; // 0x40c35e\n    if (found_char_pos == NULL) {\n        // 0x40c3b9\n        g56 = str;\n        g41 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x40c368\n    if (v1 - str < 7) {\n        // 0x40c3b9\n        g56 = str;\n        g41 = str;\n        return result;\n    }\n    // 0x40c378\n    bool v2; // 0x40c350\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x40c350\n    int64_t v5 = result - 6; // 0x40c350\n    int64_t v6 = 7; // 0x40c386\n    unsigned char v7 = *(char *)v5; // 0x40c386\n    char v8 = *(char *)v4; // 0x40c386\n    char v9 = v8; // 0x40c386\n    bool v10 = false; // 0x40c386\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x40c390\n    int64_t v13 = v1; // 0x40c390\n    int64_t v14 = 3; // 0x40c390\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x40c3b9\n        g56 = str;\n        g41 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x40c3a2\n    char v16 = *(char *)v12; // 0x40c3a2\n    char v17 = v16; // 0x40c3a2\n    bool v18 = false; // 0x40c3a2\n    while (v15 == v16) {\n        // 0x40c392\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40c3ac\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40c3ae\n        v20 = result + 4;\n        g38 = v20;\n    }\n    // 0x40c3b9\n    g56 = v20;\n    g41 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c3f0",
            "funcStartAddr": "40c3f0",
            "funcEndAddr": "40c42f",
            "decompiledFuncCode": "int64_t function_40c3f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40c3f0\n    int64_t v1; // bp-28, 0x40c3f0\n    int64_t v2 = function_413790(a1, a2, a5 & 0xffffffff, &v1); // 0x40c403\n    int64_t result = 0xfffffffe; // 0x40c40a\n    if ((int32_t)v2 == 0) {\n        // 0x40c40c\n        result = function_4137c0(&v1, a3, a4 & 0xffffffff);\n    }\n    // 0x40c41b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c430",
            "funcStartAddr": "40c430",
            "funcEndAddr": "40c44c",
            "decompiledFuncCode": "int64_t function_40c430(int64_t a1, int64_t a2, int32_t a3) {\n    int32_t v1 = a3; // bp-12, 0x40c434\n    return function_4137c0((int64_t *)&v1, a1, a2 & 0xffffffff);\n}\n"
        },
        {
            "funcName": "function_40c450",
            "funcStartAddr": "40c450",
            "funcEndAddr": "40c542",
            "decompiledFuncCode": "int64_t function_40c450(int64_t * a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x40c464\n    if ((int64_t *)v1 != a1) {\n        // 0x40c471\n        return (int64_t)v1;\n    }\n    int64_t v2 = function_413e10(); // 0x40c480\n    char v3 = *(char *)v2 & -33;\n    int64_t result; // 0x40c536\n    if (v3 == 85) {\n        // 0x40c490\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x40c528\n            result = (int32_t)a2 != 9 ? (int64_t)&g16 : (int64_t)&g8;\n            return result;\n        }\n        char v4 = *v1; // 0x40c4be\n        int64_t result2 = v4 != 96 ? (int64_t)&g9 : (int64_t)&g12; // 0x40c4cb\n        // 0x40c471\n        return result2;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x40c528\n        result = (int32_t)a2 != 9 ? (int64_t)&g16 : (int64_t)&g8;\n        return result;\n    }\n    char v5 = *v1; // 0x40c50d\n    int64_t result3 = v5 != 96 ? (int64_t)&g10 : (int64_t)&g11; // 0x40c51a\n    // 0x40c471\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40c550",
            "funcStartAddr": "40c550",
            "funcEndAddr": "40c5a7",
            "decompiledFuncCode": "int64_t function_40c550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x40c550\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c5a7",
            "funcStartAddr": "40c5a7",
            "funcEndAddr": "40d771",
            "decompiledFuncCode": "int64_t function_40c5a7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x40c5f1\n    int64_t v3 = 0; // 0x40c5f1\n    int64_t v4; // 0x40c5a7\n    int64_t v5; // 0x40c5a7\n    int64_t v6; // 0x40c5a7\n    int64_t v7; // 0x40c5a7\n    int64_t v8; // 0x40c5a7\n    int64_t v9; // 0x40c5a7\n    int64_t v10; // 0x40c5a7\n    int64_t v11; // 0x40c5a7\n    int64_t v12; // 0x40c5a7\n    int64_t v13; // 0x40c5a7\n    int64_t v14; // 0x40c5a7\n    int64_t v15; // 0x40c5a7\n    int64_t v16; // 0x40c5a7\n    int64_t v17; // 0x40c5a7\n    int64_t v18; // 0x40c5a7\n    int64_t result; // 0x40c5a7\n    int64_t v19; // 0x40c5a7\n    int32_t wc; // bp+132, 0x40c5a7\n    int64_t ps; // bp+136, 0x40c5a7\n    char v20; // 0x40cb60\n    int64_t v21; // 0x40cb60\n    int64_t v22; // 0x40cf08\n    int64_t v23; // 0x40c5a7\n    int64_t v24; // 0x40cf27\n    int32_t v25; // 0x40c5a7\n    while (true) {\n      lab_0x40c5f8_2:\n        // 0x40c5f8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x40c5a7\n        int64_t v27; // 0x40c62c\n        while (true) {\n          lab_0x40c5f8:\n            // 0x40c5f8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x40c603\n            if (v15 == -1) {\n                // 0x40c605\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x40c613\n            if (v28) {\n                // break (via goto) -> 0x40cd78\n                goto lab_0x40cd78;\n            }\n            // 0x40c61c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g75 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40cc0b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x40c751;\n                    }\n                    // 0x40d02d\n                    v26 = v5 + 1;\n                    goto lab_0x40c5f8;\n                }\n                case 7: {\n                    goto lab_0x40c751;\n                }\n                case 8: {\n                    goto lab_0x40c751;\n                }\n                case 9: {\n                    goto lab_0x40c96a_2;\n                }\n                case 10: {\n                    goto lab_0x40c96a_2;\n                }\n                case 11: {\n                    goto lab_0x40c751;\n                }\n                case 12: {\n                    goto lab_0x40c751;\n                }\n                case 13: {\n                    goto lab_0x40c96a_2;\n                }\n                case 32: {\n                    goto lab_0x40c96a_2;\n                }\n                case 33: {\n                    goto lab_0x40c96a_2;\n                }\n                case 34: {\n                    goto lab_0x40c96a_2;\n                }\n                case 35: {\n                    goto lab_0x40c71d;\n                }\n                case 36: {\n                    goto lab_0x40c96a_2;\n                }\n                case 37: {\n                    goto lab_0x40c751;\n                }\n                case 38: {\n                    goto lab_0x40c96a_2;\n                }\n                case 39: {\n                    goto lab_0x40c96a_2;\n                }\n                case 40: {\n                    goto lab_0x40c96a_2;\n                }\n                case 41: {\n                    goto lab_0x40c96a_2;\n                }\n                case 42: {\n                    goto lab_0x40c96a_2;\n                }\n                case 43: {\n                    goto lab_0x40c751;\n                }\n                case 44: {\n                    goto lab_0x40c751;\n                }\n                case 45: {\n                    goto lab_0x40c751;\n                }\n                case 46: {\n                    goto lab_0x40c751;\n                }\n                case 47: {\n                    goto lab_0x40c751;\n                }\n                case 48: {\n                    goto lab_0x40c751;\n                }\n                case 49: {\n                    goto lab_0x40c751;\n                }\n                case 50: {\n                    goto lab_0x40c751;\n                }\n                case 51: {\n                    goto lab_0x40c751;\n                }\n                case 52: {\n                    goto lab_0x40c751;\n                }\n                case 53: {\n                    goto lab_0x40c751;\n                }\n                case 54: {\n                    goto lab_0x40c751;\n                }\n                case 55: {\n                    goto lab_0x40c751;\n                }\n                case 56: {\n                    goto lab_0x40c751;\n                }\n                case 57: {\n                    goto lab_0x40c751;\n                }\n                case 58: {\n                    goto lab_0x40c751;\n                }\n                case 59: {\n                    goto lab_0x40c96a_2;\n                }\n                case 60: {\n                    goto lab_0x40c96a_2;\n                }\n                case 61: {\n                    goto lab_0x40c96a_2;\n                }\n                case 62: {\n                    goto lab_0x40c96a_2;\n                }\n                case 63: {\n                    goto lab_0x40c96a_2;\n                }\n                case 65: {\n                    goto lab_0x40c751;\n                }\n                case 66: {\n                    goto lab_0x40c751;\n                }\n                case 67: {\n                    goto lab_0x40c751;\n                }\n                case 68: {\n                    goto lab_0x40c751;\n                }\n                case 69: {\n                    goto lab_0x40c751;\n                }\n                case 70: {\n                    goto lab_0x40c751;\n                }\n                case 71: {\n                    goto lab_0x40c751;\n                }\n                case 72: {\n                    goto lab_0x40c751;\n                }\n                case 73: {\n                    goto lab_0x40c751;\n                }\n                case 74: {\n                    goto lab_0x40c751;\n                }\n                case 75: {\n                    goto lab_0x40c751;\n                }\n                case 76: {\n                    goto lab_0x40c751;\n                }\n                case 77: {\n                    goto lab_0x40c751;\n                }\n                case 78: {\n                    goto lab_0x40c751;\n                }\n                case 79: {\n                    goto lab_0x40c751;\n                }\n                case 80: {\n                    goto lab_0x40c751;\n                }\n                case 81: {\n                    goto lab_0x40c751;\n                }\n                case 82: {\n                    goto lab_0x40c751;\n                }\n                case 83: {\n                    goto lab_0x40c751;\n                }\n                case 84: {\n                    goto lab_0x40c751;\n                }\n                case 85: {\n                    goto lab_0x40c751;\n                }\n                case 86: {\n                    goto lab_0x40c751;\n                }\n                case 87: {\n                    goto lab_0x40c751;\n                }\n                case 88: {\n                    goto lab_0x40c751;\n                }\n                case 89: {\n                    goto lab_0x40c751;\n                }\n                case 90: {\n                    goto lab_0x40c751;\n                }\n                case 91: {\n                    goto lab_0x40c96a_2;\n                }\n                case 92: {\n                    goto lab_0x40c96a_2;\n                }\n                case 93: {\n                    goto lab_0x40c751;\n                }\n                case 94: {\n                    goto lab_0x40c96a_2;\n                }\n                case 95: {\n                    goto lab_0x40c751;\n                }\n                case 96: {\n                    goto lab_0x40c96a_2;\n                }\n                case 97: {\n                    goto lab_0x40c751;\n                }\n                case 98: {\n                    goto lab_0x40c751;\n                }\n                case 99: {\n                    goto lab_0x40c751;\n                }\n                case 100: {\n                    goto lab_0x40c751;\n                }\n                case 101: {\n                    goto lab_0x40c751;\n                }\n                case 102: {\n                    goto lab_0x40c751;\n                }\n                case 103: {\n                    goto lab_0x40c751;\n                }\n                case 104: {\n                    goto lab_0x40c751;\n                }\n                case 105: {\n                    goto lab_0x40c751;\n                }\n                case 106: {\n                    goto lab_0x40c751;\n                }\n                case 107: {\n                    goto lab_0x40c751;\n                }\n                case 108: {\n                    goto lab_0x40c751;\n                }\n                case 109: {\n                    goto lab_0x40c751;\n                }\n                case 110: {\n                    goto lab_0x40c751;\n                }\n                case 111: {\n                    goto lab_0x40c751;\n                }\n                case 112: {\n                    goto lab_0x40c751;\n                }\n                case 113: {\n                    goto lab_0x40c751;\n                }\n                case 114: {\n                    goto lab_0x40c751;\n                }\n                case 115: {\n                    goto lab_0x40c751;\n                }\n                case 116: {\n                    goto lab_0x40c751;\n                }\n                case 117: {\n                    goto lab_0x40c751;\n                }\n                case 118: {\n                    goto lab_0x40c751;\n                }\n                case 119: {\n                    goto lab_0x40c751;\n                }\n                case 120: {\n                    goto lab_0x40c751;\n                }\n                case 121: {\n                    goto lab_0x40c751;\n                }\n                case 122: {\n                    goto lab_0x40c751;\n                }\n                case 123: {\n                    goto lab_0x40c6f5;\n                }\n                case 124: {\n                    goto lab_0x40c96a_2;\n                }\n                case 125: {\n                    goto lab_0x40c6f5;\n                }\n                case 126: {\n                    goto lab_0x40c71d;\n                }\n                default: {\n                    goto lab_0x40caf5;\n                }\n            }\n        }\n      lab_0x40caf5:\n        if (v23 != 1) {\n            // 0x40ce60\n            ps = 0;\n            int64_t len = v15; // 0x40ce70\n            if (v15 == -1) {\n                // 0x40ce72\n                len = strlen((char *)str);\n            }\n            // 0x40ce9e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40ceff:\n                // 0x40ceff\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x40cf04\n                int64_t v30 = v29 + str;\n                v24 = function_413710(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40d47a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40d47a_2;\n                    }\n                    case -2: {\n                        // 0x40d55d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x40d597\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40d59a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x40d5a7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x40d5a0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40d47a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40d47a_2;\n                    }\n                    case 1: {\n                        goto lab_0x40ced0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40cf7c\n                        char v34 = *(char *)v33; // 0x40cf8d\n                        unsigned char v35; // 0x40c5a7\n                        if (v34 < 125) {\n                            // 0x40cf98\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40cfaf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40c96a_2;\n                            }\n                        }\n                        // 0x40cf80\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40cf8d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x40cf98\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40cfaf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40c96a_2;\n                                }\n                            }\n                            // 0x40cf80\n                            v33++;\n                        }\n                        goto lab_0x40ced0;\n                    }\n                }\n            }\n            goto lab_0x40d47a_2;\n        } else {\n            // 0x40cb44\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x40c751;\n        }\n    }\n  lab_0x40cd78:\n    // 0x40cd78\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40d67a\n        if (v8 > result) {\n            // 0x40d683\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x40c9a7\n        return result;\n    }\n    goto lab_0x40c96a_2;\n  lab_0x40c751:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x40c760\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40c96a_2;\n        }\n    }\n    int64_t v42 = result; // 0x40c861\n    char v43 = v20; // 0x40c861\n    int64_t v44 = v58; // 0x40c861\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x40c861\n    int64_t v46 = v56; // 0x40c861\n    goto lab_0x40c7dd;\n  lab_0x40c96a_2:;\n    // 0x40c9a7\n    char * v36; // 0x40c5a7\n    return function_40c550(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40d47a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x40c751;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x40d04e\n        int64_t v41 = v5 + 1; // 0x40d131\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x40d138\n        char v48 = v20; // 0x40d138\n        int64_t v49 = result; // 0x40d138\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x40d101\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x40d105\n            int64_t v52 = v50 + 1; // 0x40d10a\n            int64_t v53 = v47 + 1; // 0x40d131\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40d0fc\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x40d101\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x40d105\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40c7dd;\n    }\n  lab_0x40ced0:\n    // 0x40ced0\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40ceef\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40cef2\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40d47a\n        goto lab_0x40d47a_2;\n    }\n    goto lab_0x40ceff;\n  lab_0x40c71d:\n    // 0x40c71d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40c96a_2;\n    }\n    goto lab_0x40c751;\n  lab_0x40c6f5:;\n    bool v61 = v15 == 1; // 0x40c700\n    if (v15 == -1) {\n        // 0x40c702\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40c70e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x40c751;\n    } else {\n        goto lab_0x40c71d;\n    }\n  lab_0x40c7dd:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x40c7e2\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x40c7e6\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x40c5f8_2;\n}\n"
        },
        {
            "funcName": "function_40d780",
            "funcStartAddr": "40d780",
            "funcEndAddr": "40d91e",
            "decompiledFuncCode": "int64_t function_40d780(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40d782\n    int32_t * v3 = __errno_location(); // 0x40d79c\n    int64_t v4 = (int64_t)g30; // 0x40d7a1\n    int32_t v5 = *v3; // 0x40d7ab\n    int64_t v6 = v4; // 0x40d7c1\n    if (v2 >= (int64_t)*(int32_t *)&g33) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x40d919\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x40d7d0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x40d7d7\n        int64_t v9; // 0x40d780\n        if (g30 == &g31) {\n            int64_t v10 = function_410140(0, v8); // 0x40d8fa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g31); // 0x40d8ff\n            *(int64_t *)&g30 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_410140(v4, v8); // 0x40d7eb\n            *(int64_t *)&g30 = v12;\n            v9 = v12;\n        }\n        // 0x40d7fa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g33; // 0x40d7fa\n        int32_t v14 = v7; // 0x40d801\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g33 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x40d831\n    int64_t v17 = v15 + 8; // 0x40d834\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40d83b\n    int64_t * v19 = (int64_t *)v16; // 0x40d83e\n    uint64_t v20 = *v19; // 0x40d83e\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x40d841\n    int64_t result = *v21; // 0x40d841\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40d84c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x40d855\n    int64_t v24; // 0x40d780\n    uint64_t v25 = function_40c550(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x40d864\n    if (v20 > v25) {\n        // 0x40d8db\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x40d877\n    *v19 = v26;\n    if (result != (int64_t)&g57) {\n        // 0x40d887\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4100e0(v26); // 0x40d8a1\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40d8bb\n    int64_t v28 = *v23; // 0x40d8be\n    int64_t v29; // 0x40d780\n    function_40c550(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40d8db\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d920",
            "funcStartAddr": "40d920",
            "funcEndAddr": "40d954",
            "decompiledFuncCode": "int64_t function_40d920(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40d927\n    int64_t result = function_4102e0(a1 == 0 ? (int64_t)&g58 : a1, 56); // 0x40d946\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d960",
            "funcStartAddr": "40d960",
            "funcEndAddr": "40d96f",
            "decompiledFuncCode": "int64_t function_40d960(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g58 : a1); // 0x40d96c\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d970",
            "funcStartAddr": "40d970",
            "funcEndAddr": "40d97f",
            "decompiledFuncCode": "int64_t function_40d970(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g58 : a1; // 0x40d978\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g58;\n}\n"
        },
        {
            "funcName": "function_40d980",
            "funcStartAddr": "40d980",
            "funcEndAddr": "40d9b3",
            "decompiledFuncCode": "int64_t function_40d980(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g58 + 8 : a1 + 8; // 0x40d999\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40d99e\n    uint32_t v3 = *v2; // 0x40d99e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x40d9a2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_40d9c0",
            "funcStartAddr": "40d9c0",
            "funcEndAddr": "40d9d3",
            "decompiledFuncCode": "int64_t function_40d9c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g58 + 4 : a1 + 4); // 0x40d9cc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_40d9e0",
            "funcStartAddr": "40d9e0",
            "funcEndAddr": "40da0b",
            "decompiledFuncCode": "int64_t function_40d9e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g58 : a1; // 0x40d9e8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x40da05\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40d9fc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g58;\n}\n"
        },
        {
            "funcName": "function_40da10",
            "funcStartAddr": "40da10",
            "funcEndAddr": "40da82",
            "decompiledFuncCode": "int64_t function_40da10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g58 : a5; // 0x40da32\n    int32_t * v2 = __errno_location(); // 0x40da3b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x40da54\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x40da58\n    uint32_t v5 = *(int32_t *)v1; // 0x40da5b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x40da61\n    int64_t result = function_40c550(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40da6a\n    return result;\n}\n"
        },
        {
            "funcName": "function_40da90",
            "funcStartAddr": "40da90",
            "funcEndAddr": "40db71",
            "decompiledFuncCode": "int64_t function_40da90(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g58 : a4; // 0x40dab2\n    int32_t * v2 = __errno_location(); // 0x40dab8\n    int64_t v3 = v1 + 8; // 0x40dacf\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x40dad7\n    int32_t * v5 = (int32_t *)v1; // 0x40dada\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x40dae8\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40daeb\n    int64_t v8 = function_40c550(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x40daf5\n    int64_t v9 = v8 + 1; // 0x40dafa\n    int64_t result = function_4100e0(v9); // 0x40db0f\n    function_40c550(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x40db54\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40db5d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40db80",
            "funcStartAddr": "40db80",
            "funcEndAddr": "40db8a",
            "decompiledFuncCode": "int64_t function_40db80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40db80\n    return function_40da90(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_40db90",
            "funcStartAddr": "40db90",
            "funcEndAddr": "40dc25",
            "decompiledFuncCode": "int64_t function_40db90(void) {\n    uint32_t v1 = *(int32_t *)&g33; // 0x40db90\n    int64_t v2 = v1; // 0x40db90\n    int64_t v3 = v2; // 0x40dba4\n    if (v1 >= 2) {\n        int64_t v4 = &g33;\n        int64_t v5 = v4 + 16; // 0x40dbc3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g76;\n        while (v5 != (int64_t)g30 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x40dbc0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g76;\n        }\n    }\n    int64_t v6 = v3; // 0x40dbdd\n    if (g31 != 0x61d960) {\n        // 0x40dbdf\n        free((int64_t *)g31);\n        g31 = 256;\n        *(int64_t *)&g32 = (int64_t)&g57;\n        v6 = &g76;\n    }\n    int64_t result = v6; // 0x40dc01\n    if (g30 != &g31) {\n        // 0x40dc03\n        free(g30);\n        *(int64_t *)&g30 = (int64_t)&g31;\n        result = &g76;\n    }\n    // 0x40dc16\n    *(int32_t *)&g33 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dc30",
            "funcStartAddr": "40dc30",
            "funcEndAddr": "40dc41",
            "decompiledFuncCode": "int64_t function_40dc30(void) {\n    // 0x40dc30\n    int64_t v1; // 0x40dc30\n    return function_40d780(v1, v1, -1, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_40dc50",
            "funcStartAddr": "40dc50",
            "funcEndAddr": "40dc5a",
            "decompiledFuncCode": "int64_t function_40dc50(void) {\n    // 0x40dc50\n    int64_t v1; // 0x40dc50\n    return function_40d780(v1, v1, v1, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_40dc60",
            "funcStartAddr": "40dc60",
            "funcEndAddr": "40dc76",
            "decompiledFuncCode": "int64_t function_40dc60(int64_t a1) {\n    // 0x40dc60\n    return function_40d780(0, a1, -1, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_40dc80",
            "funcStartAddr": "40dc80",
            "funcEndAddr": "40dc92",
            "decompiledFuncCode": "int64_t function_40dc80(int64_t a1, int64_t a2) {\n    // 0x40dc80\n    return function_40d780(0, a1, a2, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_40dca0",
            "funcStartAddr": "40dca0",
            "funcEndAddr": "40dd08",
            "decompiledFuncCode": "int64_t function_40dca0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40dcb0\n    return function_40d780(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40dd10",
            "funcStartAddr": "40dd10",
            "funcEndAddr": "40dd74",
            "decompiledFuncCode": "int64_t function_40dd10(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40dd20\n    return function_40d780((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_40dd80",
            "funcStartAddr": "40dd80",
            "funcEndAddr": "40dd8c",
            "decompiledFuncCode": "int64_t function_40dd80(int64_t a1, int64_t a2) {\n    // 0x40dd80\n    return function_40dca0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_40dd90",
            "funcStartAddr": "40dd90",
            "funcEndAddr": "40dd9f",
            "decompiledFuncCode": "int64_t function_40dd90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40dd90\n    return function_40dd10(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_40dda0",
            "funcStartAddr": "40dda0",
            "funcEndAddr": "40de10",
            "decompiledFuncCode": "int64_t function_40dda0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g58); // 0x40ddad\n    int128_t v2 = __asm_movdqa(g59); // 0x40ddb5\n    int128_t v3 = __asm_movdqa(g60); // 0x40ddbd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x40ddd2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x40dde8\n    uint32_t v6 = *v5; // 0x40dde8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40dded\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_40d780(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_40de10",
            "funcStartAddr": "40de10",
            "funcEndAddr": "40de1d",
            "decompiledFuncCode": "int64_t function_40de10(int64_t a1, int64_t a2) {\n    // 0x40de10\n    return function_40dda0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_40de20",
            "funcStartAddr": "40de20",
            "funcEndAddr": "40de31",
            "decompiledFuncCode": "int64_t function_40de20(int64_t a1) {\n    // 0x40de20\n    return function_40dda0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_40de40",
            "funcStartAddr": "40de40",
            "funcEndAddr": "40de4a",
            "decompiledFuncCode": "int64_t function_40de40(void) {\n    // 0x40de40\n    int64_t v1; // 0x40de40\n    return function_40dda0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_40de50",
            "funcStartAddr": "40de50",
            "funcEndAddr": "40debe",
            "decompiledFuncCode": "int64_t function_40de50(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40de6a\n    return function_40d780((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40dec0",
            "funcStartAddr": "40dec0",
            "funcEndAddr": "40df2c",
            "decompiledFuncCode": "int64_t function_40dec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g58); // 0x40dec7\n    int128_t v2 = __asm_movdqa(g59); // 0x40decf\n    int128_t v3 = __asm_movdqa(g60); // 0x40ded7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x40def9\n    if (a2 == 0 || a3 == 0) {\n        // 0x40df27\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40df0a\n    return function_40d780(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_40df30",
            "funcStartAddr": "40df30",
            "funcEndAddr": "40df39",
            "decompiledFuncCode": "int64_t function_40df30(void) {\n    // 0x40df30\n    int64_t v1; // 0x40df30\n    return function_40dec0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_40df40",
            "funcStartAddr": "40df40",
            "funcEndAddr": "40df57",
            "decompiledFuncCode": "int64_t function_40df40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40df40\n    return function_40dec0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_40df60",
            "funcStartAddr": "40df60",
            "funcEndAddr": "40df73",
            "decompiledFuncCode": "int64_t function_40df60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40df60\n    return function_40dec0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40df80",
            "funcStartAddr": "40df80",
            "funcEndAddr": "40df8a",
            "decompiledFuncCode": "int64_t function_40df80(void) {\n    // 0x40df80\n    int64_t v1; // 0x40df80\n    return function_40d780(v1, v1, v1, &g29);\n}\n"
        },
        {
            "funcName": "function_40df90",
            "funcStartAddr": "40df90",
            "funcEndAddr": "40dfa2",
            "decompiledFuncCode": "int64_t function_40df90(int64_t a1, int64_t a2) {\n    // 0x40df90\n    return function_40d780(0, a1, a2, &g29);\n}\n"
        },
        {
            "funcName": "function_40dfb0",
            "funcStartAddr": "40dfb0",
            "funcEndAddr": "40dfc1",
            "decompiledFuncCode": "int64_t function_40dfb0(int64_t a1, int64_t a2) {\n    // 0x40dfb0\n    return function_40d780(a1, a2, -1, &g29);\n}\n"
        },
        {
            "funcName": "function_40dfd0",
            "funcStartAddr": "40dfd0",
            "funcEndAddr": "40dfe6",
            "decompiledFuncCode": "int64_t function_40dfd0(int64_t a1) {\n    // 0x40dfd0\n    return function_40d780(0, a1, -1, &g29);\n}\n"
        },
        {
            "funcName": "function_40dff0",
            "funcStartAddr": "40dff0",
            "funcEndAddr": "40e232",
            "decompiledFuncCode": "int64_t function_40dff0(int64_t fd, int64_t a2, int64_t fd2, int64_t a4, int64_t a5) {\n    int32_t result = syscall(SYS_vmsplice); // 0x40e024\n    if (result >= 0) {\n        // 0x40e06b\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40e033\n    int32_t v2 = *v1; // 0x40e03f\n    if (v2 != 95 && (v2 - 22 & -17) != 0) {\n        // 0x40e06b\n        return result;\n    }\n    int64_t v3 = (int64_t)v1; // 0x40e033\n    char * str2; // 0x40dff0\n    char v4; // 0x40dff0\n    int64_t v5; // 0x40dff0\n    int64_t v6; // bp-200, 0x40dff0\n    if ((int32_t)a5 == 0) {\n        // 0x40e056\n        str2 = (char *)a4;\n        v5 = v3;\n        v4 = !((v2 == 95 | (v2 - 22 & -17) == 0));\n    } else {\n        if ((a5 & 0xfffffffe) != 0) {\n            // 0x40e05f\n            *v1 = 95;\n            // 0x40e06b\n            return -1;\n        }\n        char * v7 = (char *)a4;\n        int32_t v8 = __fxstatat(1, (int32_t)fd2, v7, (struct stat *)&v6, 256); // 0x40e09e\n        int64_t v9 = 0x100000000 * v3 >> 32; // 0x40e0a3\n        int32_t * v10 = (int32_t *)v9;\n        if (v8 == 0) {\n            // 0x40e200\n            *v10 = 17;\n            // 0x40e06b\n            return -1;\n        }\n        int32_t v11 = *v10; // 0x40e0b0\n        if (v11 == 75) {\n            // 0x40e200\n            *v10 = 17;\n            // 0x40e06b\n            return -1;\n        }\n        // 0x40e0bc\n        str2 = v7;\n        v5 = v9;\n        v4 = 1;\n        if (v11 != 2) {\n            // 0x40e06b\n            return -1;\n        }\n    }\n    char * str = (char *)a2; // 0x40e0d8\n    int32_t len = strlen(str); // 0x40e0d8\n    int32_t len2 = strlen(str2); // 0x40e0e3\n    if (len == 0 || len2 == 0) {\n        // 0x40e06b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40e0ff\n    if (*(char *)(a2 - 1 + (int64_t)len) != 47) {\n        // 0x40e106\n        if (*(char *)(a4 - 1 + (int64_t)len2) != 47) {\n            // 0x40e06b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n    }\n    // 0x40e112\n    int64_t v12; // bp-344, 0x40dff0\n    if (__fxstatat(1, (int32_t)fd, str, (struct stat *)&v12, 256) != 0) {\n        // 0x40e06b\n        return -1;\n    }\n    int64_t v13 = 0x100000000 * v5 >> 32; // 0x40e139\n    int32_t v14; // 0x40dff0\n    if (v4 != 0) {\n        if ((v14 & 0xf000) == 0x4000) {\n            // 0x40e06b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n        // 0x40e154\n        *(int32_t *)v13 = 2;\n        // 0x40e06b\n        return -1;\n    }\n    // 0x40e1a0\n    if (__fxstatat(1, (int32_t)fd2, str2, (struct stat *)&v6, 256) != 0) {\n        // 0x40e1cc\n        if (*(int32_t *)v13 != 2 || (v14 & 0xf000) != 0x4000) {\n            // 0x40e06b\n            return -1;\n        }\n        // 0x40e06b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    if ((v14 & 0xf000) != 0x4000) {\n        // 0x40e17f\n        *(int32_t *)v13 = 20;\n        // 0x40e06b\n        return -1;\n    }\n    if ((v14 & 0xf000) == 0x4000) {\n        // 0x40e06b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40e221\n    *(int32_t *)v13 = 21;\n    // 0x40e06b\n    return -1;\n}\n"
        },
        {
            "funcName": "function_40e240",
            "funcStartAddr": "40e240",
            "funcEndAddr": "40e28b",
            "decompiledFuncCode": "int64_t function_40e240(int64_t * a1) {\n    // 0x40e240\n    int64_t v1; // bp-152, 0x40e240\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x40e280\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e290",
            "funcStartAddr": "40e290",
            "funcEndAddr": "40e2ee",
            "decompiledFuncCode": "int64_t function_40e290(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x40e2b1\n    while (result < 0) {\n        // 0x40e2be\n        if (*__errno_location() != 4) {\n            // break -> 0x40e2ca\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e2f0",
            "funcStartAddr": "40e2f0",
            "funcEndAddr": "40e420",
            "decompiledFuncCode": "int64_t function_40e2f0(int64_t a1, int64_t a2) {\n    int64_t str = function_40aa00(a1, a2); // 0x40e309\n    int64_t str2 = function_40aa00(a2, a2); // 0x40e314\n    int64_t n = function_40aa60(str); // 0x40e31f\n    if (n != function_40aa60(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x40e334\n        return 0;\n    }\n    int64_t v1 = function_40a920(); // 0x40e365\n    int64_t v2 = function_40a920(); // 0x40e370\n    char * v3 = (char *)v1; // 0x40e383\n    int64_t v4; // bp-344, 0x40e2f0\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x40e400\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x40e39c\n    int64_t v6; // bp-200, 0x40e2f0\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x40e3e0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x40e3b4\n    // 0x40e3b6\n    v7 = v4 == v6;\n    // 0x40e3c5\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x40e334\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e420",
            "funcStartAddr": "40e420",
            "funcEndAddr": "40e436",
            "decompiledFuncCode": "int64_t function_40e420(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 8); // 0x40e425\n    uint64_t v2 = *(int64_t *)(a1 + 8); // 0x40e429\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_40e440",
            "funcStartAddr": "40e440",
            "funcEndAddr": "40e44b",
            "decompiledFuncCode": "int64_t function_40e440(int64_t str, int64_t str2) {\n    // 0x40e440\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_40e450",
            "funcStartAddr": "40e450",
            "funcEndAddr": "40e7e4",
            "decompiledFuncCode": "int64_t function_40e450(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)((8 * a2 & 0x7fffffff8) + (int64_t)&g13); // 0x40e460\n    if (a1 == 0) {\n        // 0x40e619\n        return 0;\n    }\n    int32_t * v2 = __errno_location(); // 0x40e482\n    *v2 = 0;\n    struct __dirstream * dirp = (struct __dirstream *)a1; // 0x40e4b6\n    struct dirent * v3 = readdir(dirp); // 0x40e4b6\n    int64_t nmemb = 0; // 0x40e4c1\n    int64_t v4 = 0; // 0x40e4c1\n    int64_t v5 = 0; // 0x40e4c1\n    int64_t v6 = 0; // 0x40e4c1\n    int64_t v7 = 0; // 0x40e4c1\n    struct dirent * v8; // 0x40e450\n    int64_t v9; // 0x40e450\n    int64_t v10; // 0x40e450\n    int64_t v11; // 0x40e450\n    int64_t v12; // 0x40e450\n    char v13; // 0x40e450\n    int64_t v14; // 0x40e450\n    if (v3 != NULL) {\n        struct dirent * v15 = v3; // 0x40e4b6\n        int32_t v16 = 0;\n        v9 = 0;\n        v11 = 0;\n        struct dirent * v17 = v15; // 0x40e4b6\n        int64_t v18 = 0; // 0x40e6b9\n        int64_t v19 = 0;\n        int64_t v20 = 0;\n        struct dirent * v21; // 0x40e450\n        int64_t v22; // 0x40e450\n        int64_t v23; // 0x40e450\n        int64_t v24; // 0x40e450\n        int64_t v25; // 0x40e4c7\n        char * str; // 0x40e450\n        char v26; // 0x40e4cb\n        uint64_t v27; // 0x40e502\n        int64_t v28; // 0x40e63b\n        int64_t v29; // 0x40e69a\n        uint64_t v30; // 0x40e66a\n        while (true) {\n            // 0x40e4c7\n            v14 = v20;\n            v10 = v19;\n            v12 = v18;\n            v8 = v17;\n            while (true) {\n                // 0x40e4c7\n                v21 = v8;\n                v24 = (int64_t)v21;\n                v25 = v24 + 19;\n                str = (char *)v25;\n                v26 = *str;\n                v13 = v26;\n                if (v26 != 46) {\n                    goto lab_0x40e4a8;\n                } else {\n                    // 0x40e4d3\n                    switch (*(char *)(v24 + 20)) {\n                        case 46: {\n                            // 0x40e568\n                            v13 = *(char *)(v24 + 21);\n                            goto lab_0x40e4a8;\n                        }\n                        case 0: {\n                            goto lab_0x40e4ac;\n                        }\n                        default: {\n                            goto lab_0x40e4e5_2;\n                        }\n                    }\n                }\n            }\n            // 0x40e4e5\n            v27 = (int64_t)strlen(str) + 1;\n            if (v1 != 0) {\n                // break -> 0x40e50c\n                break;\n            }\n            // 0x40e630\n            v28 = v27 + v12;\n            v23 = v14;\n            v29 = v10;\n            if (v14 - v12 <= v27) {\n                if (v28 < v12) {\n                    // 0x40e788\n                    function_410330(v25);\n                    // UNREACHABLE\n                }\n                if (v10 == 0) {\n                    // 0x40e77a\n                    v22 = 128;\n                    if (v28 != 0) {\n                        // 0x40e782\n                        v22 = v28;\n                        if (v28 < 0) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if ((int32_t)v28 <= 0xffffffff) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40e678\n                    v30 = 0x100000000 * v28 >> 32;\n                    v22 = v30 + 1 + v30 / 2;\n                }\n                // 0x40e688\n                v23 = v22;\n                v29 = function_410140(v10, v23);\n            }\n            // 0x40e6ac\n            v19 = v29;\n            v20 = v23;\n            memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n            v18 = 0x100000000 * v28 >> 32;\n            *v2 = 0;\n            v17 = readdir(dirp);\n            nmemb = v9;\n            v4 = v11;\n            v5 = v20;\n            v6 = v19;\n            v7 = v18;\n            if (v17 == NULL) {\n                // break (via goto) -> 0x40e578\n                goto lab_0x40e578_2;\n            }\n        }\n        int32_t v31 = (int32_t)v9 + 1; // 0x40e51b\n        int32_t v32 = v16; // 0x40e520\n        int32_t v33 = v31; // 0x40e520\n        int64_t v34 = v11; // 0x40e520\n        int64_t v35; // 0x40e450\n        int32_t v36; // 0x40e450\n        int32_t v37; // 0x40e450\n        int64_t v38; // 0x40e6fb\n        if (v9 == (int64_t)v16) {\n            if (v11 == 0) {\n                // 0x40e79e\n                v36 = 8;\n                v37 = 1;\n                v35 = 128;\n                if (v9 != 0) {\n                    // 0x40e7a3\n                    v36 = v16;\n                    v37 = v31;\n                    v35 = 16 * v9;\n                    if (v9 > -1 != v9 < 0x1000000000000000) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                if (v9 >= 0x555555555555555) {\n                    // 0x40e788\n                    function_410330(v25);\n                    // UNREACHABLE\n                }\n                // 0x40e6f5\n                v38 = v9 / 2 + (int64_t)v31;\n                v36 = v38;\n                v37 = v31;\n                v35 = 16 * v38;\n            }\n            // 0x40e70c\n            v33 = v37;\n            v32 = v36;\n            v34 = function_410140(v11, v35);\n        }\n        int64_t v39 = v34;\n        int32_t v40 = v32;\n        int64_t v41 = v39 + 16 * v9; // 0x40e537\n        *(int64_t *)v41 = function_410310(v25);\n        int64_t v42 = v27 + v12; // 0x40e550\n        *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n        int64_t v43 = v33; // 0x40e558\n        *v2 = 0;\n        v15 = readdir(dirp);\n        int64_t v44 = v10; // 0x40e4c1\n        int64_t v45 = v14; // 0x40e4c1\n        nmemb = v43;\n        v4 = v39;\n        v5 = v14;\n        v6 = v10;\n        v7 = v42;\n        while (v15 != NULL) {\n            // 0x40e4c7\n            v16 = v40;\n            v9 = v43;\n            v11 = v39;\n            v17 = v15;\n            v18 = v42;\n            v19 = v44;\n            v20 = v45;\n            while (true) {\n                // 0x40e4c7\n                v14 = v20;\n                v10 = v19;\n                v12 = v18;\n                v8 = v17;\n                while (true) {\n                    // 0x40e4c7\n                    v21 = v8;\n                    v24 = (int64_t)v21;\n                    v25 = v24 + 19;\n                    str = (char *)v25;\n                    v26 = *str;\n                    v13 = v26;\n                    if (v26 != 46) {\n                        goto lab_0x40e4a8;\n                    } else {\n                        // 0x40e4d3\n                        switch (*(char *)(v24 + 20)) {\n                            case 46: {\n                                // 0x40e568\n                                v13 = *(char *)(v24 + 21);\n                                goto lab_0x40e4a8;\n                            }\n                            case 0: {\n                                goto lab_0x40e4ac;\n                            }\n                            default: {\n                                goto lab_0x40e4e5_2;\n                            }\n                        }\n                    }\n                }\n                // 0x40e4e5\n                v27 = (int64_t)strlen(str) + 1;\n                if (v1 != 0) {\n                    // break -> 0x40e50c\n                    break;\n                }\n                // 0x40e630\n                v28 = v27 + v12;\n                v23 = v14;\n                v29 = v10;\n                if (v14 - v12 <= v27) {\n                    if (v28 < v12) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    if (v10 == 0) {\n                        // 0x40e77a\n                        v22 = 128;\n                        if (v28 != 0) {\n                            // 0x40e782\n                            v22 = v28;\n                            if (v28 < 0) {\n                                // 0x40e788\n                                function_410330(v25);\n                                // UNREACHABLE\n                            }\n                        }\n                    } else {\n                        if ((int32_t)v28 <= 0xffffffff) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                        // 0x40e678\n                        v30 = 0x100000000 * v28 >> 32;\n                        v22 = v30 + 1 + v30 / 2;\n                    }\n                    // 0x40e688\n                    v23 = v22;\n                    v29 = function_410140(v10, v23);\n                }\n                // 0x40e6ac\n                v19 = v29;\n                v20 = v23;\n                memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n                v18 = 0x100000000 * v28 >> 32;\n                *v2 = 0;\n                v17 = readdir(dirp);\n                nmemb = v9;\n                v4 = v11;\n                v5 = v20;\n                v6 = v19;\n                v7 = v18;\n                if (v17 == NULL) {\n                    // break (via goto) -> 0x40e578\n                    goto lab_0x40e578_2;\n                }\n            }\n            // 0x40e50c\n            v31 = (int32_t)v9 + 1;\n            v32 = v16;\n            v33 = v31;\n            v34 = v11;\n            if (v9 == (int64_t)v16) {\n                if (v11 == 0) {\n                    // 0x40e79e\n                    v36 = 8;\n                    v37 = 1;\n                    v35 = 128;\n                    if (v9 != 0) {\n                        // 0x40e7a3\n                        v36 = v16;\n                        v37 = v31;\n                        v35 = 16 * v9;\n                        if (v9 > -1 != v9 < 0x1000000000000000) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if (v9 >= 0x555555555555555) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40e6f5\n                    v38 = v9 / 2 + (int64_t)v31;\n                    v36 = v38;\n                    v37 = v31;\n                    v35 = 16 * v38;\n                }\n                // 0x40e70c\n                v33 = v37;\n                v32 = v36;\n                v34 = function_410140(v11, v35);\n            }\n            // 0x40e526\n            v39 = v34;\n            v40 = v32;\n            v41 = v39 + 16 * v9;\n            *(int64_t *)v41 = function_410310(v25);\n            v42 = v27 + v12;\n            *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n            v43 = v33;\n            *v2 = 0;\n            v15 = readdir(dirp);\n            v44 = v10;\n            v45 = v14;\n            nmemb = v43;\n            v4 = v39;\n            v5 = v14;\n            v6 = v10;\n            v7 = v42;\n        }\n    }\n  lab_0x40e578_2:;\n    int32_t v46 = *v2; // 0x40e578\n    if (v46 != 0) {\n        // 0x40e757\n        free((int64_t *)v4);\n        free((int64_t *)v6);\n        *v2 = v46;\n        // 0x40e619\n        return 0;\n    }\n    // 0x40e583\n    int64_t result; // 0x40e450\n    int64_t v47; // 0x40e450\n    if (v1 == 0) {\n        // 0x40e6c8\n        if (v5 == v7) {\n            int64_t v48 = function_410140(v6, v5 + 1); // 0x40e746\n            v47 = v48 + v5;\n            result = v48;\n        } else {\n            // 0x40e6cf\n            v47 = v7 + v6;\n            result = v6;\n        }\n    } else {\n        int64_t v49 = v7 + 1; // 0x40e58f\n        int64_t * v50; // 0x40e450\n        int64_t v51; // 0x40e450\n        int64_t v52; // 0x40e450\n        if (nmemb != 0) {\n            int64_t * base = (int64_t *)v4;\n            qsort(base, (int32_t)nmemb, 16, (int32_t (*)(int64_t *, int64_t *))v1);\n            int64_t v53 = function_4100e0(v49); // 0x40e5d4\n            int64_t v54 = v4; // 0x40e5dc\n            int64_t v55 = 0; // 0x40e5dc\n            int64_t str2 = v55 + v53; // 0x40e5e0\n            int64_t * str3 = (int64_t *)v54; // 0x40e5e5\n            v54 += 16;\n            char * v56 = stpcpy((char *)str2, (char *)*str3); // 0x40e5ef\n            int64_t v57 = v55 + 1 + (int64_t)v56 - str2; // 0x40e5fb\n            free((int64_t *)*str3);\n            v55 = v57;\n            while (v54 != v4 + 16 * nmemb) {\n                // 0x40e5e0\n                str2 = v55 + v53;\n                str3 = (int64_t *)v54;\n                v54 += 16;\n                v56 = stpcpy((char *)str2, (char *)*str3);\n                v57 = v55 + 1 + (int64_t)v56 - str2;\n                free((int64_t *)*str3);\n                v55 = v57;\n            }\n            // 0x40e60a\n            v50 = base;\n            v51 = v53;\n            v52 = v57 + v53;\n        } else {\n            int64_t v58 = function_4100e0(v49); // 0x40e59b\n            v50 = (int64_t *)v4;\n            v51 = v58;\n            v52 = v58;\n        }\n        // 0x40e60d\n        free(v50);\n        v47 = v52;\n        result = v51;\n    }\n    // 0x40e615\n    *(char *)v47 = 0;\n    // 0x40e619\n    return result;\n  lab_0x40e4a8:\n    // 0x40e4a8\n    if (v13 != 0) {\n        // break -> 0x40e4e5\n        goto lab_0x40e4e5_2;\n    }\n    goto lab_0x40e4ac;\n  lab_0x40e4ac:\n    // 0x40e4ac\n    *v2 = 0;\n    struct dirent * v59 = readdir(dirp); // 0x40e4b6\n    v8 = v59;\n    nmemb = v9;\n    v4 = v11;\n    v5 = v14;\n    v6 = v10;\n    v7 = v12;\n    if (v59 == NULL) {\n        // break (via goto) -> 0x40e578\n        goto lab_0x40e578_2;\n    }\n    goto lab_0x40e4c7;\n}\n"
        },
        {
            "funcName": "function_40e7f0",
            "funcStartAddr": "40e7f0",
            "funcEndAddr": "40e858",
            "decompiledFuncCode": "int64_t function_40e7f0(int64_t a1, int64_t a2) {\n    int64_t dirp = function_40a880(); // 0x40e7f6\n    if (dirp == 0) {\n        // 0x40e81c\n        return 0;\n    }\n    int64_t result = function_40e450(dirp, a2 & 0xffffffff); // 0x40e808\n    if (closedir((struct __dirstream *)dirp) == 0) {\n        // 0x40e81c\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40e838\n    free((int64_t *)result);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40e860",
            "funcStartAddr": "40e860",
            "funcEndAddr": "40e8b4",
            "decompiledFuncCode": "int64_t function_40e860(int64_t a1) {\n    // 0x40e860\n    int64_t v1; // bp-152, 0x40e860\n    int32_t v2 = __lxstat(1, (char *)a1, (struct stat *)&v1); // 0x40e873\n    int32_t * v3 = __errno_location(); // 0x40e87a\n    if (v2 == 0) {\n        // 0x40e8a0\n        *v3 = 17;\n        return 0xffffffff;\n    }\n    int32_t v4 = *v3; // 0x40e883\n    if (v4 != 75) {\n        // 0x40e88a\n        return v4 != 2 ? 0xffffffff : 0;\n    }\n    // 0x40e8a0\n    *v3 = 17;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e8c0",
            "funcStartAddr": "40e8c0",
            "funcEndAddr": "40e8ca",
            "decompiledFuncCode": "int64_t function_40e8c0(void) {\n    // 0x40e8c0\n    int64_t path; // 0x40e8c0\n    return mkdir((char *)path, 448);\n}\n"
        },
        {
            "funcName": "function_40e8d0",
            "funcStartAddr": "40e8d0",
            "funcEndAddr": "40e8e6",
            "decompiledFuncCode": "int64_t function_40e8d0(void) {\n    // 0x40e8d0\n    int64_t path; // 0x40e8d0\n    return open((char *)path, (int32_t)path & -196 | 194);\n}\n"
        },
        {
            "funcName": "function_40e8f0",
            "funcStartAddr": "40e8f0",
            "funcEndAddr": "40e8f1",
            "decompiledFuncCode": "int64_t function_40e8f0(void) {\n    // 0x40e8f0\n    int64_t result; // 0x40e8f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e910",
            "funcStartAddr": "40e910",
            "funcEndAddr": "40ea6d",
            "decompiledFuncCode": "int64_t function_40e910(int64_t str, int32_t a2, int64_t * a3, int64_t a4, uint64_t a5) {\n    int32_t * v1 = __errno_location(); // 0x40e935\n    int32_t v2 = *v1; // 0x40e940\n    uint64_t len = (int64_t)strlen((char *)str); // 0x40e946\n    uint64_t v3 = (int64_t)a2 + a5; // 0x40e94e\n    if (v3 > len) {\n        // 0x40ea58\n        *v1 = 22;\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int64_t str2 = len - v3 + str;\n    if ((int64_t)strspn((char *)str2, \"X\") < a5) {\n        // 0x40ea58\n        *v1 = 22;\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int64_t v4 = function_414400(); // 0x40e984\n    if (v4 == 0) {\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int32_t v5 = 0x3a2f8; // 0x40e9a6\n    int64_t v6; // 0x40e910\n    int64_t v7; // 0x40e9c8\n    int64_t v8; // 0x40e9cc\n    char v9; // 0x40e9d1\n    if (a5 != 0) {\n        v7 = str2 + 1;\n        v8 = function_414440(v4, 61);\n        v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n        *(char *)str2 = v9;\n        v6 = v7;\n        while (v7 != str2 + a5) {\n            // 0x40e9c0\n            v7 = v6 + 1;\n            v8 = function_414440(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)v6 = v9;\n            v6 = v7;\n        }\n    }\n    int32_t v10; // 0x40e910\n    int64_t v11; // 0x40e910\n    int64_t result; // 0x40e910\n    while ((int32_t)a4 < 0) {\n        int32_t v12 = *v1; // 0x40e9f8\n        v10 = v12;\n        v11 = 0xffffffff;\n        if (v12 != 17) {\n            goto lab_0x40ea25;\n        }\n        // 0x40ea00\n        v5--;\n        if (v5 == 0) {\n            // 0x40ea06\n            function_414560(v4);\n            *v1 = 17;\n            result = 0xffffffff;\n            return result;\n        }\n        if (a5 != 0) {\n            v7 = str2 + 1;\n            v8 = function_414440(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)str2 = v9;\n            v6 = v7;\n            while (v7 != str2 + a5) {\n                // 0x40e9c0\n                v7 = v6 + 1;\n                v8 = function_414440(v4, 61);\n                v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n                *(char *)v6 = v9;\n                v6 = v7;\n            }\n        }\n    }\n    // 0x40ea1c\n    *v1 = v2;\n    v10 = v2;\n    v11 = a4 & 0xffffffff;\n  lab_0x40ea25:\n    // 0x40ea25\n    function_414560(v4);\n    *v1 = v10;\n    result = v11;\n  lab_0x40ea40:\n    // 0x40ea40\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ea70",
            "funcStartAddr": "40ea70",
            "funcEndAddr": "40eaeb",
            "decompiledFuncCode": "int64_t function_40ea70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a3 >> 32; // bp-12, 0x40ea74\n    if ((int32_t)a4 < 3) {\n        int64_t v2 = *(int64_t *)((8 * a4 & 0x7fffffff8) + (int64_t)&g14); // 0x40ea84\n        int64_t v3; // 0x40ea70\n        return function_40e910(a1, (int32_t)a2, &v1, v2, v3);\n    }\n    // 0x40eacc\n    function_40e8f0();\n    function_40e8f0();\n    return function_40e910(a1, (int32_t)a2, (int64_t *)a3, a4, 6);\n}\n"
        },
        {
            "funcName": "function_40eaf0",
            "funcStartAddr": "40eaf0",
            "funcEndAddr": "40eb3e",
            "decompiledFuncCode": "int64_t function_40eaf0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40eafc\n    if (fd >= 3) {\n        // 0x40eb01\n        return a1 & 0xffffffff;\n    }\n    // 0x40eb10\n    int64_t v1; // 0x40eaf0\n    int64_t v2 = function_414fd0(a1, v1); // 0x40eb10\n    int32_t * v3 = __errno_location(); // 0x40eb18\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40eb40",
            "funcStartAddr": "40eb40",
            "funcEndAddr": "40eb4c",
            "decompiledFuncCode": "int64_t function_40eb40(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40eb40\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_40eb50",
            "funcStartAddr": "40eb50",
            "funcEndAddr": "40eb5a",
            "decompiledFuncCode": "int64_t function_40eb50(int64_t a1, int64_t a2) {\n    // 0x40eb50\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40eb60",
            "funcStartAddr": "40eb60",
            "funcEndAddr": "40f2c9",
            "decompiledFuncCode": "int64_t function_40eb60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a3 + 96); // 0x40eb73\n    int64_t v2 = *(int64_t *)(a2 + 88); // 0x40eb77\n    int64_t v3 = *(int64_t *)(a3 + 88); // 0x40eb7b\n    int64_t v4 = *(int64_t *)(a2 + 96); // 0x40eb7f\n    int64_t v5 = v1 & 0xffffffff; // 0x40eb83\n    uint32_t v6 = (int32_t)a4 % 2; // 0x40eb86\n    int64_t v7 = v3; // 0x40eb89\n    int64_t v8 = v5; // 0x40eb89\n    int64_t v9; // 0x40eb60\n    int64_t v10; // bp-248, 0x40eb60\n    int32_t v11; // 0x40eb60\n    int32_t v12; // 0x40eb96\n    int32_t v13; // 0x40eb60\n    int64_t result; // 0x40eb86\n    int64_t v14; // 0x40ecc7\n    if (v6 == 0) {\n        goto lab_0x40ec50;\n    } else {\n        // 0x40eb8f\n        v12 = v4;\n        v13 = v1;\n        if (v2 == v3 == v12 == v13) {\n            // 0x40ec67\n            return 0;\n        }\n        // 0x40ebac\n        if (v3 - 1 > v2) {\n            // 0x40ec67\n            return 0xffffffff;\n        }\n        // 0x40ebb9\n        result = v6;\n        if (v2 - 1 > v3) {\n            // 0x40ec67\n            return result;\n        }\n        // 0x40ebc7\n        v14 = g62;\n        if (g62 == 0) {\n            // 0x40ecb0\n            v14 = function_40b8c0(16, 0, 0x40eb40, 0x40eb50, 0x402650);\n            g62 = v14;\n            if (v14 != 0) {\n                goto lab_0x40ebe1;\n            } else {\n                // 0x40ecdf\n                v11 = 0x77359400;\n                v9 = &v10;\n                goto lab_0x40ecfc;\n            }\n        } else {\n            goto lab_0x40ebe1;\n        }\n    }\n  lab_0x40ec50:\n    // 0x40ec50\n    if (v7 > v2) {\n        // 0x40ec67\n        return 0xffffffff;\n    }\n    // 0x40ec55\n    if (v7 != v2) {\n        // 0x40ec67\n        return 1;\n    }\n    int64_t result2 = 0xffffffff; // 0x40ec5f\n    if (v8 <= v4) {\n        int32_t v15 = v8; // 0x40ec5c\n        int32_t v16 = v15 - (int32_t)v4; // 0x40ec5c\n        result2 = v16 < 0 != ((v16 ^ v15) & (int32_t)(v8 ^ v4)) < 0;\n    }\n    // 0x40ec67\n    return result2;\n  lab_0x40ebe1:;\n    int64_t v17 = v14; // 0x40ebeb\n    int64_t v18 = g61; // 0x40ebeb\n    int32_t v19; // 0x40eb60\n    if (g61 == 0) {\n        int64_t * mem = malloc(16); // 0x40f14a\n        int64_t v20 = (int64_t)mem; // 0x40f14a\n        g61 = v20;\n        if (mem == NULL) {\n            // 0x40f22f\n            v19 = g62;\n            goto lab_0x40f190;\n        } else {\n            // 0x40f162\n            *(int32_t *)(v20 + 8) = 0x77359400;\n            *(char *)(v20 + 12) = 0;\n            v17 = 0x100000000 * v14 >> 32;\n            v18 = v20;\n            goto lab_0x40ebf1;\n        }\n    } else {\n        goto lab_0x40ebf1;\n    }\n  lab_0x40ebf1:;\n    int64_t v21 = v18;\n    *(int64_t *)v21 = v21;\n    int64_t v22 = function_40c060(v17, v21); // 0x40ebff\n    int64_t v23; // 0x40eb60\n    if (v22 == 0) {\n        // 0x40f180\n        v19 = g62;\n        if (g62 == 0) {\n            // 0x40ecdf\n            v11 = 0x77359400;\n            v9 = &v10;\n            goto lab_0x40ecfc;\n        } else {\n            goto lab_0x40f190;\n        }\n    } else {\n        // 0x40ec10\n        v23 = v22;\n        if (g61 == v22) {\n            // 0x40f1c8\n            g61 = 0;\n            v23 = v22;\n        }\n        goto lab_0x40ec1d;\n    }\n  lab_0x40ecfc:;\n    int64_t v24 = *(int64_t *)(a2 + 80); // 0x40ed07\n    int64_t v25 = *(int64_t *)(a2 + 112); // 0x40ed0b\n    int32_t v26 = v24; // 0x40ed11\n    int32_t v27 = ((int32_t)(0x66666667 * (0x100000000 * v24 >> 32) / 0x100000000) >> 2) - (v26 >> 31); // 0x40ed21\n    int32_t v28 = v25; // 0x40ed25\n    int32_t v29 = ((int32_t)(0x66666667 * (0x100000000 * v25 >> 32) / 0x100000000) >> 2) - (v28 >> 31); // 0x40ed3c\n    int64_t v30 = 0x100000000 * v4 >> 32; // 0x40ed51\n    int32_t v31 = ((int32_t)(0x66666667 * v30 / 0x100000000) >> 2) - (v12 >> 31); // 0x40ed5c\n    int64_t v32 = result; // 0x40ed6d\n    int64_t v33 = v3; // 0x40ed6d\n    int64_t v34 = v9; // 0x40ed6d\n    int64_t v35 = v5; // 0x40ed6d\n    int64_t v36; // 0x40eb60\n    int64_t v37; // 0x40eb60\n    int64_t v38; // 0x40eb60\n    int64_t v39; // 0x40eb60\n    int64_t v40; // 0x40ed83\n    if ((-10 * v27 + v26 || -10 * v31 + v12 || -10 * v29 + v28) != 0) {\n        goto lab_0x40f130;\n    } else {\n        // 0x40ed73\n        v40 = *(int64_t *)(a2 + 72);\n        if (v11 < 11) {\n            // 0x40f263\n            *(int32_t *)(v9 + 8) = 10;\n            v38 = v3;\n            v39 = v3;\n            v36 = 10;\n            v37 = v9;\n        } else {\n            if ((v27 % 10 || v31 % 10 || v29 % 10) != 0) {\n                // 0x40f253\n                *(int32_t *)(v9 + 8) = 10;\n                v38 = v3;\n                v39 = v3;\n                v36 = 10;\n                v37 = v9;\n            } else {\n                int32_t v41 = v27; // 0x40ee19\n                int32_t v42 = v29; // 0x40ee19\n                int32_t v43 = v31; // 0x40ee19\n                int32_t v44 = 8; // 0x40ee19\n                int64_t v45 = 100; // 0x40ee31\n                int64_t v46 = v45 & 0xfffffffc; // 0x40ee31\n                while (v46 < (int64_t)v11) {\n                    int32_t v47 = v43;\n                    int32_t v48 = v42;\n                    int32_t v49 = v41;\n                    v41 = v49 / 10;\n                    v42 = v48 / 10;\n                    v43 = v47 / 10;\n                    if ((-10 * v48 / 100 + v42 || -10 * v49 / 100 + v41 || -10 * v47 / 100 + v43) != 0) {\n                        // break -> 0x40f1e0\n                        break;\n                    }\n                    // 0x40eeb2\n                    v44--;\n                    if (v44 == 0) {\n                        int64_t v50 = 0x100000000 * v3 >> 32; // 0x40eec6\n                        int64_t v51 = 0x100000000000000 * v9 >> 56; // 0x40eed7\n                        int32_t * v52 = (int32_t *)(v51 + 8);\n                        if ((v40 | v2 | *(int64_t *)(a2 + 104)) % 2 == 0) {\n                            // 0x40f210\n                            *v52 = 0x77359400;\n                            v38 = v50 & -2;\n                            v39 = v50;\n                            v36 = 0x77359400;\n                            v37 = v51;\n                            goto lab_0x40eef5;\n                        } else {\n                            // 0x40eee4\n                            *v52 = 0x3b9aca00;\n                            v38 = v50;\n                            v39 = v50;\n                            v36 = 0x3b9aca00;\n                            v37 = v51;\n                            goto lab_0x40eef5;\n                        }\n                    }\n                    v45 = 10 * v46;\n                    v46 = v45 & 0xfffffffc;\n                }\n                int32_t v53 = v45; // 0x40f1e0\n                int64_t v54 = 0x100000000 * v3 >> 32; // 0x40f1e7\n                int64_t v55 = 0x100000000000000 * v9 >> 56; // 0x40f1ec\n                *(int32_t *)(v55 + 8) = v53;\n                v38 = v54 & (int64_t)(v53 == 0x77359400) - 1;\n                v39 = v54;\n                v36 = v46;\n                v37 = v55;\n            }\n        }\n        goto lab_0x40eef5;\n    }\n  lab_0x40f130:\n    // 0x40f130\n    *(int32_t *)(v34 + 8) = (int32_t)v32;\n    *(char *)(v34 + 12) = 1;\n    v7 = v33;\n    v8 = v35;\n    goto lab_0x40ec50;\n  lab_0x40f190:;\n    int64_t v56 = &v10; // 0x40f19a\n    v10 = v56;\n    int64_t v57 = function_40b650((int64_t)v19, &v10); // 0x40f1aa\n    v23 = v57;\n    v11 = 0x77359400;\n    v9 = 0x100000000 * v56 >> 32;\n    if (v57 != 0) {\n        goto lab_0x40ec1d;\n    } else {\n        goto lab_0x40ecfc;\n    }\n  lab_0x40ec1d:;\n    uint32_t v58 = *(int32_t *)(v23 + 8); // 0x40ec1d\n    v11 = v58;\n    v9 = v23;\n    if (*(char *)(v23 + 12) == 0) {\n        goto lab_0x40ecfc;\n    } else {\n        // 0x40ec30\n        v7 = v3 & (int64_t)(v58 == 0x77359400) - 1;\n        v8 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (int64_t)v58 & 0xffffffff;\n        goto lab_0x40ec50;\n    }\n  lab_0x40eef5:\n    // 0x40eef5\n    if (v2 > v39 || v4 >= v1 == v2 == v3) {\n        // 0x40ec67\n        return result;\n    }\n    // 0x40ef0d\n    if (v2 < v38) {\n        // 0x40ec67\n        return 0xffffffff;\n    }\n    // 0x40ef16\n    if (v2 == v38) {\n        // 0x40ec84\n        if ((v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % v36 & 0xffffffff) > v4) {\n            // 0x40ec67\n            return 0xffffffff;\n        }\n    }\n    int64_t v59 = v40; // bp-232, 0x40ef30\n    int32_t * v60 = (int32_t *)(a2 + 24); // 0x40ef63\n    int64_t v61; // 0x40eb60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x40f23b\n        v61 = function_40f8b0(a1, &v59, 0x38e38e39 * v36 / 0x200000000);\n    } else {\n        // 0x40ef8a\n        v61 = function_40f8a0(a1, &v59);\n    }\n    // 0x40ef9d\n    if ((int32_t)v61 != 0) {\n        // 0x40ec67\n        return 0xfffffffe;\n    }\n    char * v62 = (char *)a1;\n    int64_t v63; // bp-200, 0x40eb60\n    int32_t v64; // 0x40eb60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x40f279\n        v64 = __lxstat(1, v62, (struct stat *)&v63);\n    } else {\n        // 0x40efdb\n        v64 = __xstat(1, v62, (struct stat *)&v63);\n    }\n    // 0x40efec\n    int32_t v65; // 0x40eb60\n    uint64_t v66 = (int64_t)v65; // 0x40efec\n    int64_t v67 = v65; // 0x40eff4\n    int64_t v68 = v30 ^ v67 | v2 ^ v66 | (int64_t)v64; // 0x40f011\n    if (v68 != 0) {\n        int64_t * v69 = (int64_t *)(0x100000000000000 * (int64_t)&v59 >> 56);\n        if ((*v60 & 0xf000) == 0xa000) {\n            // 0x40f2a3\n            function_40f8b0(a1, v69, v68);\n        } else {\n            // 0x40f050\n            function_40f8a0(a1, v69);\n        }\n        // 0x40f063\n        if (v64 != 0) {\n            // 0x40ec67\n            return 0xfffffffe;\n        }\n    }\n    int64_t v70 = 0x3b9aca00 * (v66 % 2) + v67; // 0x40f090\n    int32_t v71 = v70; // 0x40f098\n    int64_t v72 = -1; // 0x40f0a9\n    int64_t v73 = result; // 0x40f0a9\n    if (10 * (((int32_t)(0x66666667 * (0x100000000 * v70 >> 32) / 0x100000000) >> 2) - (v71 >> 31)) == v71) {\n        // 0x40f0af\n        v72 = -1;\n        v73 = 10;\n        if (v36 != 10) {\n            int64_t v74 = 10; // 0x40f0d3\n            int32_t v75 = 9; // 0x40f107\n            int64_t v76 = v70 & 0xffffffff;\n            int32_t v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31); // 0x40f0e8\n            int64_t v78 = v74; // 0x40f101\n            while (v77 % 10 == 0) {\n                // 0x40f107\n                v75--;\n                v72 = -2;\n                v73 = 0x77359400;\n                if (v75 == 0) {\n                    goto lab_0x40f118;\n                }\n                int64_t v79 = 10 * v74; // 0x40f0d3\n                v74 = v79 & 0xfffffffc;\n                v78 = v74;\n                if ((int32_t)v79 == (int32_t)v36) {\n                    // break -> 0x40f28f\n                    break;\n                }\n                v76 = v77;\n                v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31);\n                v78 = v74;\n            }\n            // 0x40f28f\n            v72 = (int64_t)((int32_t)v78 == 0x77359400) - 1;\n            v73 = v78;\n        }\n    }\n  lab_0x40f118:\n    // 0x40f118\n    v32 = v73;\n    v33 = v72 & v39;\n    v34 = 0x100000000000000 * v37 >> 56;\n    v35 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (v73 & 0xffffffff) & 0xffffffff;\n    goto lab_0x40f130;\n}\n"
        },
        {
            "funcName": "function_40f2d0",
            "funcStartAddr": "40f2d0",
            "funcEndAddr": "40f39e",
            "decompiledFuncCode": "int64_t function_40f2d0(int64_t * a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = (int64_t)a1;\n    int64_t * v3 = (int64_t *)(v1 + 8); // 0x40f2dc\n    int64_t * v4 = (int64_t *)(v1 + 24); // 0x40f2e0\n    int64_t v5 = *v4; // 0x40f2e0\n    int64_t v6; // 0x40f2d0\n    switch (*v3) {\n        case 0x3ffffffe: {\n            // 0x40f320\n            if (v5 == 0x3ffffffe) {\n                // 0x40f30f\n                return 1;\n            }\n            // 0x40f32e\n            *a2 = *(int64_t *)(v2 + 72);\n            *v3 = *(int64_t *)(v2 + 80);\n            v6 = v5;\n            goto lab_0x40f33d;\n        }\n        case 0x3fffffff: {\n            if (v5 == 0x3fffffff) {\n                // 0x40f390\n                *a2 = 0;\n                // 0x40f30f\n                return 0;\n            }\n            // 0x40f371\n            function_413c70(v1);\n            int64_t v7 = *v4; // 0x40f379\n            v6 = v7;\n            if (v7 == 0x3ffffffe) {\n                goto lab_0x40f2fd;\n            } else {\n                goto lab_0x40f33d;\n            }\n        }\n        default: {\n            // 0x40f2f4\n            v6 = v5;\n            if (v5 != 0x3ffffffe) {\n                goto lab_0x40f33d;\n            } else {\n                goto lab_0x40f2fd;\n            }\n        }\n    }\n  lab_0x40f33d:\n    // 0x40f33d\n    if (v6 == 0x3fffffff) {\n        // 0x40f348\n        function_413c70(v1 + 16);\n        return 0;\n    }\n    // 0x40f30f\n    return 0;\n  lab_0x40f2fd:\n    // 0x40f2fd\n    *(int64_t *)(v1 + 16) = *(int64_t *)(v2 + 88);\n    *v4 = *(int64_t *)(v2 + 96);\n    // 0x40f30f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40f3a0",
            "funcStartAddr": "40f3a0",
            "funcEndAddr": "40f449",
            "decompiledFuncCode": "int64_t function_40f3a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40f3a0\n    uint64_t v2 = v1 - 0x3ffffffe; // 0x40f3a4\n    if (v1 >= 0x3b9aca00 && v1 != 0x3fffffff && v2 != 0) {\n        // 0x40f430\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    uint64_t v3 = *(int64_t *)(a1 + 24); // 0x40f3ba\n    uint64_t v4 = v3 - 0x3ffffffe; // 0x40f3be\n    if (v3 >= 0x3b9aca00 && v3 != 0x3fffffff && v4 != 0) {\n        // 0x40f430\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    int64_t v5 = 0; // 0x40f3dd\n    int64_t v6 = 0; // 0x40f3dd\n    if (v2 < 2) {\n        // 0x40f3df\n        *(int64_t *)a1 = 0;\n        v5 = v1 == 0x3ffffffe;\n        v6 = 1;\n    }\n    int64_t v7 = v5; // 0x40f3fc\n    int64_t v8 = v6; // 0x40f3fc\n    if (v4 < 2) {\n        // 0x40f3fe\n        *(int64_t *)(a1 + 16) = 0;\n        v7 = v5 + (int64_t)(v3 == 0x3ffffffe);\n        v8 = 1;\n    }\n    // 0x40f41a\n    return v8 + (int64_t)((int32_t)v7 == 1) & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40f450",
            "funcStartAddr": "40f450",
            "funcEndAddr": "40f45a",
            "decompiledFuncCode": "int64_t function_40f450(void) {\n    struct timespec v1; // 0x40f455\n    struct timespec times[2]; // 0x40f455\n    // 0x40f450\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    int64_t fd; // 0x40f450\n    v1.e0 = fd;\n    times[0] = v1;\n    return utimensat((int32_t)fd, (char *)fd, times, AT_SYMLINK_NOFOLLOW);\n}\n"
        },
        {
            "funcName": "function_40f460",
            "funcStartAddr": "40f460",
            "funcEndAddr": "40f89e",
            "decompiledFuncCode": "int64_t function_40f460(int64_t a1, int64_t path, int64_t * a3, int64_t a4) {\n    struct timeval v1; // 0x40f5d0\n    struct timeval v2[2]; // 0x40f5d0\n    struct timeval v3; // 0x40f642\n    struct timeval v4[2]; // 0x40f642\n    struct timespec v5; // 0x40f6fd\n    struct timespec times[2]; // 0x40f6fd\n    struct timespec v6; // 0x40f4da\n    struct timespec times2[2]; // 0x40f4da\n    struct timeval v7; // 0x40f7f0\n    struct timeval v8[2]; // 0x40f7f0\n    int64_t v9 = (int64_t)a3;\n    int64_t v10; // 0x40f460\n    int64_t v11; // bp-288, 0x40f460\n    if (a3 == NULL) {\n        // 0x40f650\n        v11 = 0;\n        v10 = 0;\n    } else {\n        int128_t v12 = *(int128_t *)&v9; // 0x40f47d\n        int128_t v13 = __asm_movdqu(v12); // 0x40f47d\n        int64_t v14 = v12;\n        int128_t v15 = __asm_movdqu(*(int128_t *)(v14 + 16)); // 0x40f481\n        int64_t v16; // bp-280, 0x40f460\n        int64_t v17 = &v16; // 0x40f486\n        v11 = v17;\n        v16 = __asm_movaps(v13);\n        __asm_movaps(v15);\n        int64_t v18 = function_40f3a0(v17, path, v14, a4); // 0x40f49a\n        v10 = v18 & 0xffffffff;\n        if ((int32_t)v18 < 0) {\n            // 0x40f618\n            return -1;\n        }\n    }\n    int32_t fd = a1; // 0x40f4aa\n    if (fd < 0 == path == 0) {\n        // 0x40f848\n        *__errno_location() = 9;\n        // 0x40f618\n        return -1;\n    }\n    // 0x40f4b7\n    int32_t result; // 0x40f460\n    int64_t v19; // bp-184, 0x40f460\n    bool v20; // 0x40f460\n    if (g64 < 0) {\n        goto lab_0x40f4f5;\n    } else {\n        int64_t v21; // 0x40f460\n        if (v10 == 2) {\n            // 0x40f668\n            v9 = &v19;\n            int32_t v22; // 0x40f460\n            if (fd < 0) {\n                // 0x40f800\n                v22 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x40f675\n                v22 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x40f686\n            if (v22 != 0) {\n                // 0x40f618\n                return -1;\n            }\n            // 0x40f68e\n            if (*(int64_t *)(v11 + 8) == 0x3ffffffe) {\n                // 0x40f820\n                v21 = v11;\n            } else {\n                // 0x40f6a1\n                v21 = v11;\n                if (*(int64_t *)(v11 + 24) == 0x3ffffffe) {\n                    // 0x40f6b5\n                    v21 = v11;\n                }\n            }\n        } else {\n            // 0x40f4cb\n            v21 = v11;\n        }\n        // 0x40f4d0\n        if (fd < 0) {\n            // 0x40f6f0\n            v5 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v5.e0 = v21;\n            times[0] = v5;\n            int32_t v23 = utimensat(-100, (char *)path, times, 0); // 0x40f6fd\n            v20 = v23 == 0;\n            result = v23;\n            if (v23 >= 0 == (v23 != 0)) {\n                goto lab_0x40f4ea;\n            } else {\n                goto lab_0x40f70d;\n            }\n        } else {\n            // 0x40f4d8\n            v6 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v6.e0 = v21;\n            times2[0] = v6;\n            int32_t v24 = futimens(fd, times2); // 0x40f4da\n            v20 = v24 == 0;\n            result = v24;\n            if (v24 < 1) {\n                goto lab_0x40f70d;\n            } else {\n                goto lab_0x40f4ea;\n            }\n        }\n    }\n  lab_0x40f4f5:\n    // 0x40f4f5\n    g64 = -1;\n    g63 = -1;\n    int64_t v25; // 0x40f460\n    switch ((int32_t)v25) {\n        case 0: {\n            goto lab_0x40f560;\n        }\n        case 3: {\n            goto lab_0x40f53a;\n        }\n        default: {\n            // 0x40f514\n            v9 = &v19;\n            int32_t v26; // 0x40f460\n            if (fd < 0) {\n                // 0x40f6d8\n                v26 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x40f521\n                v26 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x40f532\n            if (v26 != 0) {\n                // 0x40f618\n                return -1;\n            }\n            goto lab_0x40f53a;\n        }\n    }\n  lab_0x40f560:;\n    // 0x40f560\n    int64_t v27; // 0x40f460\n    int64_t v28; // 0x40f460\n    if (v11 == 0) {\n        goto lab_0x40f630;\n    } else {\n        // 0x40f56e\n        int64_t v29; // bp-248, 0x40f460\n        int64_t v30 = &v29; // 0x40f575\n        v29 = *(int64_t *)v11;\n        v9 = v30;\n        v27 = v30;\n        v28 = v30;\n        if (fd < 0) {\n            goto lab_0x40f63a;\n        } else {\n            goto lab_0x40f5cc;\n        }\n    }\n  lab_0x40f53a:\n    // 0x40f53a\n    if (v11 == 0) {\n        goto lab_0x40f630;\n    } else {\n        // 0x40f546\n        if ((char)function_40f2d0(&v19, &v11) != 0) {\n            // 0x40f618\n            return 0;\n        }\n        goto lab_0x40f560;\n    }\n  lab_0x40f630:\n    // 0x40f630\n    v9 = 0;\n    v27 = 0;\n    v28 = 0;\n    if (fd >= 0) {\n        goto lab_0x40f5cc;\n    } else {\n        goto lab_0x40f63a;\n    }\n  lab_0x40f4ea:\n    // 0x40f4ea\n    *__errno_location() = 38;\n    goto lab_0x40f4f5;\n  lab_0x40f70d:\n    // 0x40f70d\n    if (v20 || *__errno_location() != 38) {\n        // 0x40f713\n        g64 = 1;\n        // 0x40f618\n        return result;\n    }\n    goto lab_0x40f4f5;\n  lab_0x40f5cc:\n    // 0x40f5cc\n    v1 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v27;\n    v2[0] = v1;\n    int64_t v31; // bp-216, 0x40f460\n    if (futimesat(fd, NULL, v2) != 0) {\n        // 0x40f5e0\n        if (path == 0) {\n            // 0x40f618\n            int32_t v32; // 0x40f460\n            uint32_t result2 = v32;\n            return result2;\n        }\n        struct utimbuf * times3 = NULL; // 0x40f5f5\n        if (v11 != 0) {\n            // 0x40f5f7\n            v31 = *(int64_t *)v11;\n            times3 = (struct utimbuf *)&v31;\n        }\n        // 0x40f618\n        return utime((char *)path, times3);\n    }\n    // 0x40f728\n    if (v27 == 0) {\n        // 0x40f618\n        return 0;\n    }\n    int64_t v33 = *(int64_t *)(v27 + 8); // 0x40f731\n    int64_t v34 = v33 - 0x7a11f; // 0x40f731\n    int64_t v35 = *(int64_t *)(v27 + 24); // 0x40f73d\n    int64_t v36 = v35 - 0x7a11f; // 0x40f73d\n    if (v34 < 0 == (0x7a11e - v33 & v33) < 0 != v34 != 0 && v36 < 0 == (0x7a11e - v35 & v35) < 0 != v36 != 0 || __fxstat(1, fd, (struct stat *)&v19) != 0) {\n        // 0x40f618\n        return 0;\n    }\n    int64_t v37 = v27 + 16; // 0x40f778\n    int64_t v38 = *(int64_t *)v37; // 0x40f778\n    int128_t v39 = __asm_movdqa(*(int128_t *)v27); // 0x40f784\n    int64_t v40 = *(int64_t *)v27; // 0x40f78a\n    int128_t v41 = __asm_movdqa(*(int128_t *)v37); // 0x40f78e\n    v31 = __asm_movaps(v39);\n    __asm_movaps(v41);\n    int64_t v42; // 0x40f460\n    if (v42 == 0 != (v34 < 0 == (0x7a11e - v33 & v33) < 0 == (v34 != 0) == v42 == v40 + 1)) {\n        // 0x40f878\n        if (v42 == 0 != (v36 < 0 == (0x7a11e - v35 & v35) < 0 == (v36 != 0) == v42 - v38 == 1)) {\n            // 0x40f618\n            return 0;\n        }\n    }\n    // 0x40f7e7\n    v7 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v7.e0 = &v31;\n    v8[0] = v7;\n    futimesat(fd, NULL, v8);\n    // 0x40f618\n    return 0;\n  lab_0x40f63a:\n    // 0x40f63a\n    v3 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v3.e0 = v28;\n    v4[0] = v3;\n    // 0x40f618\n    return futimesat(-100, (char *)path, v4);\n}\n"
        },
        {
            "funcName": "function_40f8a0",
            "funcStartAddr": "40f8a0",
            "funcEndAddr": "40f8b0",
            "decompiledFuncCode": "int64_t function_40f8a0(int64_t a1, int64_t * a2) {\n    // 0x40f8a0\n    int64_t v1; // 0x40f8a0\n    return function_40f460(0xffffffff, a1, a2, v1);\n}\n"
        },
        {
            "funcName": "function_40f8b0",
            "funcStartAddr": "40f8b0",
            "funcEndAddr": "40faf8",
            "decompiledFuncCode": "int64_t function_40f8b0(int64_t path, int64_t * a2, int64_t a3) {\n    struct timespec v1; // 0x40f918\n    struct timespec times[2]; // 0x40f918\n    int64_t v2 = (int64_t)a2;\n    int64_t v3; // 0x40f8b0\n    int64_t v4; // 0x40f8b0\n    int64_t v5; // 0x40f8b0\n    int64_t v6; // 0x40f8b0\n    int64_t v7; // bp-168, 0x40f8b0\n    int64_t v8; // bp-208, 0x40f8b0\n    if (a2 == NULL) {\n        int32_t v9 = g63; // 0x40f9a0\n        v8 = 0;\n        v6 = 0;\n        v3 = 0;\n        if (v9 >= 0) {\n            goto lab_0x40f90b;\n        } else {\n            // 0x40f9bb\n            g63 = -1;\n            v5 = v9;\n            goto lab_0x40f9c5;\n        }\n    } else {\n        int128_t v10 = *(int128_t *)&v2; // 0x40f8c7\n        int128_t v11 = __asm_movdqu(v10); // 0x40f8c7\n        int64_t v12 = v10;\n        int128_t v13 = __asm_movdqu(*(int128_t *)(v12 + 16)); // 0x40f8cb\n        int64_t v14; // bp-200, 0x40f8b0\n        int64_t v15 = &v14; // 0x40f8d0\n        v8 = v15;\n        v14 = __asm_movaps(v11);\n        __asm_movaps(v13);\n        int64_t v16; // 0x40f8b0\n        int64_t v17 = function_40f3a0(v15, v12, a3, v16); // 0x40f8e4\n        int32_t v18 = v17; // 0x40f8eb\n        if (v18 < 0) {\n            // 0x40f992\n            return 0xffffffff;\n        }\n        int64_t v19 = v17 & 0xffffffff; // 0x40f8e9\n        v4 = v19;\n        if (g63 < 0) {\n            goto lab_0x40f932;\n        } else {\n            if (v18 == 2) {\n                // 0x40fa50\n                if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                    // 0x40f992\n                    return 0xffffffff;\n                }\n                // 0x40fa6a\n                if (*(int64_t *)(v8 + 8) == 0x3ffffffe) {\n                    // 0x40fab0\n                    v6 = v8;\n                    v3 = 3;\n                } else {\n                    // 0x40fa79\n                    v6 = v8;\n                    v3 = 3;\n                    if (*(int64_t *)(v8 + 24) == 0x3ffffffe) {\n                        // 0x40fa8c\n                        v6 = v8;\n                        v3 = 3;\n                    }\n                }\n            } else {\n                // 0x40f906\n                v6 = v8;\n                v3 = v19;\n            }\n            goto lab_0x40f90b;\n        }\n    }\n  lab_0x40f90b:\n    // 0x40f90b\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v6;\n    times[0] = v1;\n    uint32_t result = utimensat(-100, (char *)path, times, AT_SYMLINK_NOFOLLOW); // 0x40f918\n    int64_t v20; // 0x40f8b0\n    if (result < 1) {\n        if (result == 0) {\n            // 0x40f9f6\n            g64 = 1;\n            g63 = 1;\n            return result;\n        }\n        int32_t v21 = *__errno_location(); // 0x40fad5\n        v20 = 256;\n        v4 = v3;\n        if (v21 != 38) {\n            // 0x40f9f6\n            g64 = 1;\n            g63 = 1;\n            return result;\n        }\n    } else {\n        // 0x40f927\n        *__errno_location() = 38;\n        v20 = 256;\n        v4 = v3;\n    }\n    goto lab_0x40f932;\n  lab_0x40f932:\n    // 0x40f932\n    g63 = -1;\n    int32_t v22 = v4; // 0x40f93c\n    v5 = v20;\n    int64_t v23; // 0x40f8b0\n    if (v22 == 0) {\n        goto lab_0x40f9c5;\n    } else {\n        if (v22 != 3) {\n            // 0x40fa20\n            if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                // 0x40f992\n                return 0xffffffff;\n            }\n            // 0x40fa36\n            v23 = v20;\n            if (v8 != 0) {\n                goto lab_0x40f955;\n            } else {\n                goto lab_0x40f96a;\n            }\n        } else {\n            // 0x40f94d\n            v23 = v20;\n            if (v8 == 0) {\n                goto lab_0x40f96a;\n            } else {\n                goto lab_0x40f955;\n            }\n        }\n    }\n  lab_0x40f9c5:;\n    int32_t v24 = __lxstat(1, (char *)path, (struct stat *)&v7); // 0x40f9d2\n    v23 = v5;\n    if (v24 != 0) {\n        // 0x40f992\n        return 0xffffffff;\n    }\n    goto lab_0x40f96a;\n  lab_0x40f96a:;\n    int64_t result2; // 0x40f8b0\n    int32_t v25; // 0x40f8b0\n    if ((v25 & 0xf000) == 0xa000) {\n        // 0x40fae8\n        *__errno_location() = 38;\n        result2 = 0xffffffff;\n    } else {\n        // 0x40f97e\n        result2 = function_40f460(0xffffffff, path, (int64_t *)v8, v23) & 0xffffffff;\n    }\n    // 0x40f992\n    return result2;\n  lab_0x40f955:;\n    int64_t v26 = function_40f2d0(&v7, &v8); // 0x40f961\n    v23 = v20;\n    if ((char)v26 != 0) {\n        // 0x40f992\n        return 0;\n    }\n    goto lab_0x40f96a;\n}\n"
        },
        {
            "funcName": "function_40fb00",
            "funcStartAddr": "40fb00",
            "funcEndAddr": "40fedd",
            "decompiledFuncCode": "int64_t function_40fb00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x40fb98\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40fb1c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x40fb36\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40fb7b\n    if (a6 < 10) {\n        // 0x40fb8a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x40fc82\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_40fee0",
            "funcStartAddr": "40fee0",
            "funcEndAddr": "40ff00",
            "decompiledFuncCode": "int64_t function_40fee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40fee0\n    if (a5 == 0) {\n        // 0x40fefb\n        return function_40fb00(a1, a2, a3, a4, a5, 0, (int64_t)&g76);\n    }\n    int64_t v1 = 0; // 0x40fee7\n    v1++;\n    int64_t v2 = v1; // 0x40fef9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x40fef0\n        v1++;\n        v2 = v1;\n    }\n    // 0x40fefb\n    return function_40fb00(a1, a2, a3, a4, a5, v2, (int64_t)&g76);\n}\n"
        },
        {
            "funcName": "function_40ff00",
            "funcStartAddr": "40ff00",
            "funcEndAddr": "40ff60",
            "decompiledFuncCode": "int64_t function_40ff00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x40ff00\n    int64_t v3 = &v2; // 0x40ff00\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x40ff33\n    int64_t v6; // 0x40ff1d\n    int64_t * v7; // 0x40ff3b\n    int64_t v8; // 0x40ff3b\n    int64_t v9; // 0x40ff47\n    if (v5 < 48) {\n        // 0x40ff10\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x40ff53\n            break;\n        }\n    } else {\n        // 0x40ff3b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x40ff53\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x40ff31\n    while (v4 != 9) {\n        // 0x40ff29\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x40ff10\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x40ff53\n                break;\n            }\n        } else {\n            // 0x40ff3b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x40ff53\n                break;\n            }\n        }\n        // 0x40ff29\n        v10 = 10;\n    }\n    // 0x40ff53\n    return function_40fb00(a1, a2, a3, a4, v3, v10, (int64_t)&g76);\n}\n"
        },
        {
            "funcName": "function_40ff60",
            "funcStartAddr": "40ff60",
            "funcEndAddr": "41001c",
            "decompiledFuncCode": "int64_t function_40ff60(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x40ff60\n    int64_t v1; // bp-168, 0x40ff60\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x40ff60\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x40ff60\n    int64_t v8; // 0x40ff60\n    int64_t v9; // bp-56, 0x40ff60\n    int64_t v10; // 0x40ffc5\n    int64_t v11; // 0x40ffe9\n    if ((int32_t)v6 < 48) {\n        // 0x40ffb0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x410000\n            break;\n        }\n    } else {\n        // 0x40ffe2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x410000\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40ffda\n    int64_t v13 = 10; // 0x40ffda\n    while (v5 != 9) {\n        // 0x40ffdc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x40ffb0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x410000\n                break;\n            }\n        } else {\n            // 0x40ffe2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x410000\n                break;\n            }\n        }\n        // 0x40ffd2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x410000\n    int64_t v14; // bp-136, 0x40ff60\n    int64_t result = function_40fb00(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g76); // 0x41000f\n    return result;\n}\n"
        },
        {
            "funcName": "function_410020",
            "funcStartAddr": "410020",
            "funcEndAddr": "410094",
            "decompiledFuncCode": "int64_t function_410020(int64_t a1) {\n    // 0x410020\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x410083\n    return fputs_unlocked(v1, g39);\n}\n"
        },
        {
            "funcName": "function_4100a0",
            "funcStartAddr": "4100a0",
            "funcEndAddr": "4100d8",
            "decompiledFuncCode": "int64_t function_4100a0(void) {\n    // 0x4100a0\n    if (g66 != 0) {\n        // 0x4100a9\n        return g65;\n    }\n    int32_t v1 = geteuid(); // 0x4100bc\n    g66 = 1;\n    g65 = v1 == 0;\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_4100e0",
            "funcStartAddr": "4100e0",
            "funcEndAddr": "4100fa",
            "decompiledFuncCode": "int64_t function_4100e0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4100e4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4100f3\n        return (int64_t)mem;\n    }\n    // 0x4100f5\n    function_410330(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410100",
            "funcStartAddr": "410100",
            "funcEndAddr": "410121",
            "decompiledFuncCode": "int64_t function_410100(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x410103\n    int64_t v2 = v1; // 0x410103\n    if (v2 < 0) {\n        // 0x41011b\n        function_410330(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x410119\n        return function_4100e0(v2);\n    }\n    // 0x41011b\n    function_410330(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410130",
            "funcStartAddr": "410130",
            "funcEndAddr": "410132",
            "decompiledFuncCode": "int64_t function_410130(void) {\n    // 0x410130\n    int64_t v1; // 0x410130\n    return function_4100e0(v1);\n}\n"
        },
        {
            "funcName": "function_410140",
            "funcStartAddr": "410140",
            "funcEndAddr": "410176",
            "decompiledFuncCode": "int64_t function_410140(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x410168\n        free(v1);\n        return (int32_t)&g76 ^ (int32_t)&g76;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x410151\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x410160\n        return (int64_t)mem;\n    }\n    // 0x410171\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410180",
            "funcStartAddr": "410180",
            "funcEndAddr": "4101a1",
            "decompiledFuncCode": "int64_t function_410180(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x410183\n    int64_t v2 = v1; // 0x410183\n    if (v2 < 0) {\n        // 0x41019b\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x410199\n        return function_410140(a1, v2);\n    }\n    // 0x41019b\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4101b0",
            "funcStartAddr": "4101b0",
            "funcEndAddr": "410236",
            "decompiledFuncCode": "int64_t function_4101b0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x41020b\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_410140(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4101f3\n    if (a2 == 0) {\n        // 0x410218\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4101f8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x41020b\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x4101da\n    *(int64_t *)a2 = v2;\n    return function_410140(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_410240",
            "funcStartAddr": "410240",
            "funcEndAddr": "410290",
            "decompiledFuncCode": "int64_t function_410240(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x410240\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x41028a\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        // 0x410262\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_410140(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x410275\n        *(int64_t *)a2 = 128;\n        return function_410140(0, 128);\n    }\n    // 0x410288\n    if (a2 < 0) {\n        // 0x41028a\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x410262\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_410140(a1, v1);\n}\n"
        },
        {
            "funcName": "function_410290",
            "funcStartAddr": "410290",
            "funcEndAddr": "4102a7",
            "decompiledFuncCode": "int64_t function_410290(int64_t a1, int64_t a2) {\n    // 0x410290\n    return (int64_t)memset((int64_t *)function_4100e0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4102b0",
            "funcStartAddr": "4102b0",
            "funcEndAddr": "4102de",
            "decompiledFuncCode": "int64_t function_4102b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4102b7\n    if ((int64_t)v1 < 0) {\n        // 0x4102d9\n        function_410330(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4102d9\n        function_410330(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4102ca\n    if (mem != NULL) {\n        // 0x4102d4\n        return (int64_t)mem;\n    }\n    // 0x4102d9\n    function_410330(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4102e0",
            "funcStartAddr": "4102e0",
            "funcEndAddr": "410308",
            "decompiledFuncCode": "int64_t function_4102e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4100e0(a2); // 0x4102ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_410310",
            "funcStartAddr": "410310",
            "funcEndAddr": "410323",
            "decompiledFuncCode": "int64_t function_410310(int64_t str) {\n    // 0x410310\n    return function_4102e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_410330",
            "funcStartAddr": "410330",
            "funcEndAddr": "410361",
            "decompiledFuncCode": "int64_t function_410330(int64_t a1) {\n    // 0x410330\n    error(g28, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410370",
            "funcStartAddr": "410370",
            "funcEndAddr": "4103e9",
            "decompiledFuncCode": "int64_t function_410370(int64_t a1, int32_t a2) {\n    // 0x410370\n    int64_t v1; // 0x410370\n    int64_t result = fts_open(a1, a2 | 512, v1); // 0x41037a\n    if (result != 0) {\n        // 0x410384\n        return result;\n    }\n    // 0x410390\n    if (*__errno_location() != 22) {\n        // 0x41039a\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x4103a0\n    __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n    // 0x410384\n    return result;\n}\n"
        },
        {
            "funcName": "function_4103f0",
            "funcStartAddr": "4103f0",
            "funcEndAddr": "410459",
            "decompiledFuncCode": "int64_t function_4103f0(void) {\n    char * v1 = NULL; // bp-24, 0x41040b\n    int64_t v2 = 0; // bp-16, 0x410413\n    int32_t v3 = __getdelim(&v1, (int32_t *)&v2, 10, g40); // 0x41041c\n    if (v3 < 1) {\n        // 0x41043e\n        free((int64_t *)v1);\n        return 0;\n    }\n    int64_t v4 = (int64_t)v1; // 0x410426\n    char * v5 = (char *)((int64_t)v3 - 1 + v4); // 0x41042f\n    int64_t response = v4; // 0x410432\n    if (*v5 == 10) {\n        // 0x410450\n        *v5 = 0;\n        response = (int64_t)v1;\n    }\n    int32_t v6 = rpmatch((char *)response); // 0x410434\n    // 0x41043e\n    free((int64_t *)v1);\n    return v6 >= 0 == (v6 != 0);\n}\n"
        },
        {
            "funcName": "function_410460",
            "funcStartAddr": "410460",
            "funcEndAddr": "410595",
            "decompiledFuncCode": "int64_t function_410460(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x410490\n    if (cmd != 1030) {\n        // 0x410540\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x41049c\n    int64_t v2; // 0x410460\n    if (g67 < 0) {\n        int64_t v3 = function_410460(fd, 0, v1, a4); // 0x4104e4\n        int64_t v4 = v3 & 0xffffffff; // 0x4104e9\n        if ((int32_t)v3 < 0) {\n            // 0x4104d0\n            return v4 & 0xffffffff;\n        }\n        // 0x4104ef\n        v2 = v4;\n        if (g67 != -1) {\n            // 0x4104d0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4104b7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4104c6\n            g67 = 1;\n            // 0x4104d0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_410460(fd & 0xffffffff, 0, v1, a4); // 0x410577\n        int64_t v7 = v6 & 0xffffffff; // 0x41057c\n        if ((int32_t)v6 < 0) {\n            // 0x4104d0\n            return v7 & 0xffffffff;\n        }\n        // 0x410586\n        g67 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4104ff\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x41050a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4104d0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x410522\n    close(fd2);\n    // 0x4104d0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4105a0",
            "funcStartAddr": "4105a0",
            "funcEndAddr": "4105e0",
            "decompiledFuncCode": "int64_t function_4105a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4105ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4105ba\n        return fflush(stream);\n    }\n    // 0x4105c8\n    function_410610(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4105e0",
            "funcStartAddr": "4105e0",
            "funcEndAddr": "410608",
            "decompiledFuncCode": "int64_t function_4105e0(int64_t a1) {\n    // 0x4105e0\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x410607\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x4105f0\n    int64_t result = v1; // 0x4105fa\n    if ((a1 & 256) != 0) {\n        // 0x4105fc\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x410607\n    return result;\n}\n"
        },
        {
            "funcName": "function_410610",
            "funcStartAddr": "410610",
            "funcEndAddr": "410667",
            "decompiledFuncCode": "int64_t function_410610(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x410610\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x41061a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x41064b\n    int64_t result = -1; // 0x410654\n    if (v1 != -1) {\n        // 0x410656\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x410662\n    return result;\n}\n"
        },
        {
            "funcName": "function_410670",
            "funcStartAddr": "410670",
            "funcEndAddr": "41068a",
            "decompiledFuncCode": "int64_t function_410670(int64_t a1, int64_t a2) {\n    // 0x410670\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x410680\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x41067c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_410690",
            "funcStartAddr": "410690",
            "funcEndAddr": "41069d",
            "decompiledFuncCode": "int64_t function_410690(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x410690\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_4106a0",
            "funcStartAddr": "4106a0",
            "funcEndAddr": "4106ac",
            "decompiledFuncCode": "int64_t function_4106a0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4106a0\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_4106b0",
            "funcStartAddr": "4106b0",
            "funcEndAddr": "4106ba",
            "decompiledFuncCode": "int64_t function_4106b0(int64_t a1, int64_t a2) {\n    // 0x4106b0\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_4106c0",
            "funcStartAddr": "4106c0",
            "funcEndAddr": "4106e2",
            "decompiledFuncCode": "int64_t function_4106c0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x4106cb\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x4106d2\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_4106f0",
            "funcStartAddr": "4106f0",
            "funcEndAddr": "41089a",
            "decompiledFuncCode": "int64_t function_4106f0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x4106f6\n    int64_t v2 = a1 + 72; // 0x4106fe\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x4106fe\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x410701\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x410706\n    int64_t v6 = *v5; // 0x410706\n    int32_t v7; // 0x4106f0\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x410710;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x410710;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x41076b\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x4107c0\n                    v7 = *__errno_location();\n                    goto lab_0x4107c7;\n                } else {\n                    goto lab_0x410787;\n                }\n            }\n        }\n    } else {\n        goto lab_0x410710;\n    }\n  lab_0x410710:;\n    struct stat * v9 = (struct stat *)v1; // 0x410718\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x410787;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x410721\n        int32_t v11 = *v10; // 0x410729\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x410734\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x41074d\n                *v10 = 0;\n                return 13;\n            }\n            // 0x410870\n            v7 = *v10;\n        }\n        goto lab_0x4107c7;\n    }\n  lab_0x410787:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x41078d\n    int64_t v13; // 0x4106f0\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x410800\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x41080d\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x410814\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x410822\n            break;\n        }\n        case -0x6000: {\n            // 0x4107b3\n            return 12;\n        }\n        default: {\n            // 0x4107b3\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x410822\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x4107b3\n        return 1;\n    }\n    // 0x410838\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x4107b3\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x410841\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x4107b3\n        return 1;\n    }\n    // 0x4107b3\n    return *v4 == 0 ? 1 : 5;\n  lab_0x4107c7:\n    // 0x4107c7\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x4107d0\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_4108a0",
            "funcStartAddr": "4108a0",
            "funcEndAddr": "41099d",
            "decompiledFuncCode": "int64_t function_4108a0(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x4108b3\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x4108b7\n    int64_t v3 = *v2; // 0x4108b7\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x4108bb\n    int64_t base = v3; // 0x4108bf\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x4108cb\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x410971\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x4108e0\n        if (mem == NULL) {\n            // 0x410971\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x4108f1\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x4108fb\n    int64_t v7 = result; // 0x4108fb\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x410900\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x410911\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x410921\n    int64_t result2 = *(int64_t *)v8; // 0x410928\n    if (nmemb == 1) {\n        // 0x41095a\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x410943\n    int64_t * v10 = (int64_t *)v9; // 0x410943\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x41094f\n    int64_t v12 = v11; // 0x410953\n    int64_t v13 = v9; // 0x410953\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x410943\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x41095a\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4109a0",
            "funcStartAddr": "4109a0",
            "funcEndAddr": "410a2a",
            "decompiledFuncCode": "int64_t function_4109a0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x4109be\n    int64_t result = (int64_t)mem; // 0x4109be\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x4109cb\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x410a1c\n    return result;\n}\n"
        },
        {
            "funcName": "function_410a30",
            "funcStartAddr": "410a30",
            "funcEndAddr": "410a71",
            "decompiledFuncCode": "int64_t function_410a30(int64_t a1) {\n    // 0x410a30\n    if (a1 == 0) {\n        // 0x410a62\n        int64_t result; // 0x410a30\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x410a40\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x410a44\n    if (dirp != 0) {\n        // 0x410a4d\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x410a52\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x410a4d\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x410a52\n        free((int64_t *)v2);\n    }\n    // 0x410a62\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_410a80",
            "funcStartAddr": "410a80",
            "funcEndAddr": "410ab9",
            "decompiledFuncCode": "int64_t function_410a80(int64_t a1) {\n    int64_t result = function_413d70(a1); // 0x410a9f\n    if ((char)result != 0) {\n        // 0x410aa8\n        return result;\n    }\n    int32_t fd = function_413dc0(a1); // 0x410a98\n    if (fd >= 0) {\n        // 0x410ab0\n        close(fd);\n    }\n    int64_t result2 = function_413d70(a1); // 0x410a9f\n    while ((char)result2 == 0) {\n        // 0x410a90\n        fd = function_413dc0(a1);\n        if (fd >= 0) {\n            // 0x410ab0\n            close(fd);\n        }\n        // 0x410a9c\n        result2 = function_413d70(a1);\n    }\n    // 0x410aa8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_410ac0",
            "funcStartAddr": "410ac0",
            "funcEndAddr": "410bd1",
            "decompiledFuncCode": "int64_t function_410ac0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x410ac8\n    int64_t v2 = *v1; // 0x410ac8\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x410b02\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x410ad6\n    int64_t v4 = *v3; // 0x410ad6\n    int64_t v5 = v4; // 0x410ae0\n    int64_t result; // bp-152, 0x410ac0\n    if (v4 == 0) {\n        // 0x410b70\n        v5 = function_40b8c0(13, 0, 0x4106a0, 0x4106b0, 0x402650);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x410b9c\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x410b02\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x410ae6\n    result = *v6;\n    int64_t v7 = function_40b650(v5, &result); // 0x410af4\n    if (v7 != 0) {\n        // 0x410b02\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x410b10\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x410b02\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x410b2c\n    if (mem == NULL) {\n        // 0x410b02\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x410b2c\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_40c060(v5, v8) != 0) {\n        // 0x410b58\n        return result;\n    }\n    // 0x410bc0\n    free(mem);\n    // 0x410b02\n    return result;\n}\n"
        },
        {
            "funcName": "function_410be0",
            "funcStartAddr": "410be0",
            "funcEndAddr": "410c44",
            "decompiledFuncCode": "int64_t function_410be0(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_410ac0(a1, a2); // 0x410be4\n    if (v1 == 0x9fa0) {\n        // 0x410c16\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x410c20\n        if (v1 != 0) {\n            // 0x410c27\n            return v1 != 0x6969;\n        }\n        // 0x410c16\n        return 0;\n    }\n    // 0x410bf3\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x410c16\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x410c16\n            return 2;\n        }\n    }\n    // 0x410c16\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_410c50",
            "funcStartAddr": "410c50",
            "funcEndAddr": "410cb6",
            "decompiledFuncCode": "int64_t function_410c50(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x410c5b\n    int32_t fd = *v1; // 0x410c5b\n    int32_t v2 = a2; // 0x410c5e\n    if (fd == v2 == (fd != -100)) {\n        // 0x410cb1\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x410c6b\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x410c75\n            *v1 = v2;\n            int64_t result; // 0x410c50\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x410ca2\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_413d80(a1 + 96, fd); // 0x410c84\n    uint32_t fd2 = (int32_t)result3; // 0x410c89\n    if (fd2 < 0) {\n        // 0x410c75\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x410c8f\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_410cc0",
            "funcStartAddr": "410cc0",
            "funcEndAddr": "410d1a",
            "decompiledFuncCode": "int64_t function_410cc0(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x410cc9\n    uint32_t v2 = v1 & 4; // 0x410cce\n    if (v2 != 0) {\n        // 0x410cf2\n        function_410a80(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x410cc0\n    if ((v1 & 512) == 0) {\n        // 0x410d08\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x410cd8\n        function_410c50(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x410cf2\n    function_410a80(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_410d20",
            "funcStartAddr": "410d20",
            "funcEndAddr": "410d8b",
            "decompiledFuncCode": "int64_t function_410d20(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x410d2a\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x410d58\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x410d37\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x410d3d\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x410d3d\n    if (mem != NULL) {\n        // 0x410d47\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x410d78\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g76 ^ (int32_t)&g76;\n}\n"
        },
        {
            "funcName": "function_410d90",
            "funcStartAddr": "410d90",
            "funcEndAddr": "410deb",
            "decompiledFuncCode": "int64_t function_410d90(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_40b8c0(31, 0, 0x410690, 0x410670, 0x402650); // 0x410db3\n        *(int64_t *)a2 = v1;\n        // 0x410dc1\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x410dcd\n    int64_t v2 = (int64_t)mem; // 0x410dcd\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x410dc1\n        return 0;\n    }\n    // 0x410ddf\n    function_413be0(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_410df0",
            "funcStartAddr": "410df0",
            "funcEndAddr": "410e34",
            "decompiledFuncCode": "int64_t function_410df0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x410e0a\n    if ((a2 & 512) == 0) {\n        // 0x410e28\n        return function_40ab10(a3, (int32_t)v1, v1);\n    }\n    // 0x410e18\n    return function_414380((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_410e40",
            "funcStartAddr": "410e40",
            "funcEndAddr": "411006",
            "decompiledFuncCode": "int64_t function_410e40(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x410e4f\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x410e5c\n    uint32_t v4 = *v3; // 0x410e5c\n    int64_t v5 = v4; // 0x410e5c\n    int32_t v6 = v4 & 4; // 0x410e63\n    int64_t v7; // 0x410e40\n    int64_t v8; // 0x410e40\n    int64_t v9; // 0x410e40\n    int64_t v10; // 0x410e40\n    int64_t v11; // 0x410e40\n    if (a4 == 0) {\n        goto lab_0x410ee0;\n    } else {\n        // 0x410e6b\n        bool v12; // 0x410e40\n        int64_t v13 = v12 ? -1 : 1; // 0x410e78\n        int64_t v14 = (int64_t)\"..\"; // 0x410e40\n        int64_t v15 = v1; // 0x410e40\n        int64_t v16 = 3; // 0x410e78\n        unsigned char v17 = *(char *)v15; // 0x410e78\n        char v18 = *(char *)v14; // 0x410e78\n        char v19 = v18; // 0x410e78\n        bool v20 = false; // 0x410e78\n        while (v17 == v18) {\n            // 0x410e6b\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x410ee0;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x410f50;\n            } else {\n                // 0x410e8b\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x410ef2;\n                } else {\n                    // 0x410e93\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x410f7e;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x410ea0\n                        int64_t v23 = function_413d70(v22); // 0x410eac\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x410f7e;\n                        } else {\n                            int64_t v24 = function_413dc0(v22); // 0x410ec4\n                            if ((int32_t)v24 < 0) {\n                                // 0x410fc8\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x410f7e;\n                            } else {\n                                // 0x410ed4\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x410ef2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x410ee0:\n    if (v6 != 0) {\n        goto lab_0x410f50;\n    } else {\n        // 0x410ee4\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x410f7e;\n        } else {\n            goto lab_0x410ef2;\n        }\n    }\n  lab_0x410f50:\n    // 0x410f50\n    if ((v5 & 512) == 0) {\n        // 0x410f5f\n        return 0;\n    }\n    int32_t fd = a3; // 0x410f59\n    if (fd >= 0) {\n        // 0x410fb8\n        close(fd);\n        // 0x410f5f\n        return 0;\n    }\n    // 0x410f5f\n    return 0;\n  lab_0x410f7e:;\n    int64_t v25 = function_410df0(*(int32_t *)(a1 + 44), v8, v1); // 0x410f88\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x410f5f\n        return 0xffffffff;\n    }\n    goto lab_0x410ef2;\n  lab_0x410ef2:;\n    int32_t fd2 = v7; // 0x410ef7\n    int64_t v26; // bp-200, 0x410e40\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x410eff\n    int64_t v28 = 0xffffffff; // 0x410f08\n    if (v27 != 0) {\n        goto lab_0x410f33;\n    } else {\n        // 0x410f0a\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x410f23;\n        } else {\n            // 0x410f15\n            int64_t v29; // 0x410e40\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x410fa0\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x410fd8\n                    function_410c50(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x410f5f\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x410fa7\n                v28 = fchdir(fd2);\n                goto lab_0x410f33;\n            } else {\n                goto lab_0x410f23;\n            }\n        }\n    }\n  lab_0x410f33:\n    // 0x410f33\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x410f37\n        close(fd2);\n    }\n    // 0x410f5f\n    return v28 & 0xffffffff;\n  lab_0x410f23:\n    // 0x410f23\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x410f33;\n}\n"
        },
        {
            "funcName": "function_411010",
            "funcStartAddr": "411010",
            "funcEndAddr": "4110bf",
            "decompiledFuncCode": "int64_t function_411010(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_413bf0(a2, a3 + 120); // 0x411098\n        if ((char)result == 0) {\n            // 0x411081\n            return 1;\n        }\n        // 0x4110a1\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x411027\n    if (mem == NULL) {\n        // 0x411081\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x411027\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_40c060(a2, v1); // 0x411056\n    if (v2 == v1) {\n        // 0x411081\n        return 1;\n    }\n    // 0x411063\n    free(mem);\n    int64_t result2 = 0; // 0x41106e\n    if (v2 != 0) {\n        // 0x411070\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x411081\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4110c0",
            "funcStartAddr": "4110c0",
            "funcEndAddr": "411156",
            "decompiledFuncCode": "int64_t function_4110c0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x411100\n        free((int64_t *)function_40c0a0(a2));\n        return &g76;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x4110cf\n    if (result == 0) {\n        // 0x4110f9\n        return 0;\n    }\n    // 0x4110d8\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x4110f9\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x41113c\n    int64_t result2 = result; // 0x411140\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x411142\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x4110f9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411160",
            "funcStartAddr": "411160",
            "funcEndAddr": "411b13",
            "decompiledFuncCode": "int64_t function_411160(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x411174\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x411178\n    int64_t dirp = *dirp2; // 0x411178\n    int64_t v2; // 0x411160\n    int32_t * v3; // 0x411160\n    int64_t v4; // 0x411160\n    int64_t v5; // 0x411160\n    int64_t v6; // 0x411160\n    int64_t v7; // 0x411160\n    int64_t v8; // 0x411160\n    int64_t v9; // 0x411160\n    char v10; // 0x411160\n    int64_t v11; // 0x411160\n    int64_t v12; // 0x411160\n    int64_t v13; // 0x411596\n    int64_t v14; // 0x411160\n    int64_t v15; // 0x4115d5\n    int32_t * v16; // 0x411160\n    int64_t v17; // 0x4115e2\n    int32_t v18; // 0x4115e6\n    if (dirp == 0) {\n        // 0x411550\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x411550\n        uint64_t v20 = (int64_t)v19; // 0x411550\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x41155b\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x411730\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x41156f\n        int64_t v22 = 0xffffff9c; // 0x411588\n        if ((v20 & 516) == 512) {\n            // 0x41158a\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x41158e\n        v13 = function_414380(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x41159d\n        if (fd < 0) {\n            goto lab_0x4118d2;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x4115a7\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x4118bc\n                close(fd);\n                goto lab_0x4118d2;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x4115b5\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x41196c\n                    *v26 = (int16_t)function_4106f0(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x4115c5\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x411920\n                        function_4110c0(v27, v28, a1);\n                        function_4106f0(a1, a1, 0);\n                        int64_t v29 = function_411010(*v16, v28, a1); // 0x411946\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x411953\n                            *__errno_location() = 12;\n                          lab_0x411712:\n                            // 0x411712\n                            return 0;\n                        }\n                    }\n                }\n                // 0x4115d5\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x411910;\n                } else {\n                    // 0x4115f6\n                    if ((*v16 & 56) == 24) {\n                        // 0x411742\n                    } else {\n                        // 0x411606\n                        goto lab_0x411615;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x41118a\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x4119ed\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x411712\n                return 0;\n            }\n            goto lab_0x411a09;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x4118f8\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x4111b4;\n            } else {\n                goto lab_0x4111ab;\n            }\n        }\n    }\n  lab_0x4116c0_2:;\n    // 0x4116c0\n    int64_t v32; // 0x4112e4\n    free((int64_t *)v32);\n    int64_t v33; // 0x411160\n    function_410a30(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x411160\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x41143c_2:;\n    // 0x41143c\n    int64_t v35; // 0x411160\n    int64_t v36 = v35; // 0x411449\n    int64_t v37; // 0x411160\n    int64_t v38 = v37; // 0x411449\n    int64_t v39; // 0x411160\n    int64_t v40 = v39; // 0x411449\n    char * v41; // 0x411160\n    char * v42 = v41; // 0x411449\n    int64_t v43 = v35; // 0x411449\n    int64_t result2 = v37; // 0x411449\n    int64_t v44 = v39; // 0x411449\n    char v45; // 0x411160\n    if (v45 == 0) {\n        goto lab_0x411791;\n    } else {\n        goto lab_0x41144f;\n    }\n  lab_0x4112cc:;\n    // 0x4112cc\n    char * str; // 0x411160\n    uint64_t len = (int64_t)strlen(str); // 0x4112d3\n    int64_t v46; // 0x411160\n    v32 = function_4109a0(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x4116c0_2;\n    }\n    // 0x4112f5\n    int64_t v47; // 0x411160\n    int64_t v48 = v47; // 0x4112fa\n    char v49; // 0x411160\n    char v50 = v49; // 0x4112fa\n    int64_t v51; // 0x411160\n    int64_t v52 = v51; // 0x4112fa\n    int64_t v53 = a1; // 0x4112fa\n    int64_t v54; // 0x411160\n    int64_t v55; // 0x411160\n    int64_t v56; // 0x411202\n    int64_t * v57; // 0x411202\n    int64_t v58; // 0x411160\n    int64_t * v59; // 0x411160\n    if (v51 <= len) {\n        char v60 = function_410d20(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x4116c0_2;\n        }\n        int64_t v61 = *v59; // 0x4113c0\n        char v62 = v49; // 0x4113c9\n        int64_t v63 = v47; // 0x4113c9\n        if (v61 != *v59) {\n            // 0x4113cf\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x4113e3\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x411303\n    int32_t * v65; // 0x41129a\n    if (v64 < len) {\n        // 0x411ac0\n        free((int64_t *)v32);\n        function_410a30(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x411712;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x411313\n    int64_t * v68; // 0x411217\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x4112ab\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x411333\n    int32_t v71; // 0x411160\n    if ((v70 & 4) != 0) {\n        // 0x411400\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x41140d\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x41133e\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x411160\n    int64_t v75; // 0x411160\n    int64_t v76; // 0x411160\n    int64_t v77; // 0x411160\n    int64_t v78; // 0x41135c\n    int64_t v79; // 0x41135c\n    int64_t v80; // 0x411160\n    int64_t v81; // 0x4112ab\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x411528\n        *(int16_t *)(v32 + 112) = (int16_t)function_4106f0(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x411257;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x411352\n        int64_t v83 = v82; // 0x41135a\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x411368;\n            } else {\n                int64_t v85 = v84; // 0x4114f0\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g15); // 0x4116a8\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x41150f\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x411250;\n            }\n        } else {\n            goto lab_0x411368;\n        }\n    }\n  lab_0x411257:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x411160\n    v39 = v88 + 1;\n    int64_t v89; // 0x411160\n    int64_t v90; // 0x411160\n    int64_t v91; // 0x411160\n    int64_t v92; // 0x411160\n    int64_t v93; // 0x411160\n    int64_t v94; // 0x411160\n    char v95; // 0x411160\n    int64_t v96; // 0x411160\n    if (v33 == 0) {\n        // 0x411428\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x41143c_2;\n        }\n    } else {\n        // 0x41126b\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x41143c_2;\n        }\n    }\n    goto lab_0x411283;\n  lab_0x411368:\n    // 0x411368\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g15); // 0x41137b\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x411160\n        v75 = v167;\n    } else {\n        // 0x411240\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x411250;\n  lab_0x411283:;\n    int64_t v97 = *dirp2; // 0x41128d\n    int64_t dirp3 = v97; // 0x411294\n    int64_t v98 = v91; // 0x411294\n    int64_t v99 = v90; // 0x411294\n    int64_t v100 = v93; // 0x411294\n    int64_t v101 = v89; // 0x411294\n    int64_t v102 = v92; // 0x411294\n    char v103 = v95; // 0x411294\n    int64_t v104 = v96; // 0x411294\n    int64_t v105 = v96; // 0x411294\n    char v106 = v95; // 0x411294\n    int64_t v107 = v93; // 0x411294\n    int64_t v108 = v90; // 0x411294\n    if (v97 == 0) {\n        goto lab_0x411786;\n    }\n    goto lab_0x41129a;\n  lab_0x411250:\n    // 0x411250\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x411257;\n  lab_0x4118d2:\n    // 0x4118d2\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x411712\n        return 0;\n    }\n    goto lab_0x411a09;\n  lab_0x411a09:\n    // 0x411a09\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x411712\n    return 0;\n  lab_0x4111ab:\n    // 0x4111ab\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x4111b4;\n  lab_0x411910:\n    // 0x411910\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x4111b4;\n  lab_0x4111b4:;\n    int64_t v111 = *(int64_t *)v4; // 0x4111b4\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x4111ca\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x4111eb\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x4111f2\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x411202\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x41128d\n    if (v115 == 0) {\n        // 0x411202\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x411791;\n    } else {\n        // 0x41129a\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x41129a:\n            // 0x41129a\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x411870\n                break;\n            }\n            // 0x4112bc\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x4112cc;\n            } else {\n                // 0x4112c2\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x4114d0\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x411283;\n                    } else {\n                        // 0x4114d6\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x4112cc;\n                        } else {\n                            goto lab_0x411283;\n                        }\n                    }\n                } else {\n                    goto lab_0x4112cc;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x411870\n        if (v116 != 0) {\n            // 0x411880\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x41189d\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x4118aa\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x411786:\n        // 0x411786\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x41144f;\n        } else {\n            goto lab_0x411791;\n        }\n    }\n  lab_0x411615:;\n    int64_t v117 = v13 & 0xffffffff; // 0x41159b\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x41161a\n    int16_t * v121; // 0x411160\n    int16_t v122; // 0x411160\n    int64_t v123; // 0x411160\n    int64_t v124; // 0x411160\n    int64_t v125; // 0x411160\n    int64_t v126; // 0x411160\n    int64_t v127; // 0x411160\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_410460(v117, 1030, 3, v5); // 0x411991\n        int64_t v129 = v128 & 0xffffffff; // 0x411996\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x411620;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x4119a5\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x41164d;\n            } else {\n                // 0x4119ba\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x41168f;\n            }\n        }\n    } else {\n        goto lab_0x411620;\n    }\n  lab_0x411791:\n    // 0x411791\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x41179d\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x4117b6\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x411828;\n    } else {\n        // 0x4117c5\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x411808\n            int64_t v133; // 0x411160\n            if (*v68 != 0) {\n                int64_t v134 = function_410e40(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x4119de\n                v133 = v134;\n            } else {\n                // 0x411813\n                v133 = function_410cc0(a1);\n            }\n            // 0x411820\n            if ((int32_t)v133 != 0) {\n                // 0x411a24\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x411a33\n                *v135 = *v135 | 0x4000;\n                function_410a30(result2);\n                // 0x411712\n                return 0;\n            }\n            goto lab_0x411828;\n        } else {\n            goto lab_0x4117d1;\n        }\n    }\n  lab_0x41144f:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x41144f\n    int64_t v137 = *v59; // 0x411453\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x411460\n        int64_t v139 = *v138; // 0x411460\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x411470\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x41147b\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x41147f\n        int64_t v142 = v141; // 0x411486\n        while (v141 != 0) {\n            // 0x411460\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x411470\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x41147b\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x411488\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x41149e\n        int64_t v144 = *v143; // 0x41149e\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x4114ae\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x4114b9\n        *v145 = v137;\n        int64_t v147 = v146; // 0x4114c4\n        if (v146 == 0) {\n            // 0x4114c6\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x411490\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x4114ae\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x4114b9\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x4114c6\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x411490\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x411791;\n  lab_0x411620:;\n    int64_t v149 = function_410e40(a1, a1, v120, 0); // 0x41162a\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x411160\n    int16_t v151; // 0x411160\n    int64_t v152; // 0x411160\n    int64_t dirp6; // 0x411160\n    int64_t v153; // 0x411160\n    if ((int32_t)v149 == 0) {\n        goto lab_0x4111ab;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x41163c\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x411662;\n        } else {\n            goto lab_0x41164d;\n        }\n    }\n  lab_0x411828:\n    // 0x411828\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x411838\n            function_410a30(result2);\n            // 0x411712\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x411a98\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x411838\n                function_410a30(result2);\n                // 0x411712\n                return 0;\n            }\n        }\n        // 0x411ab1\n        *v157 = 6;\n        // 0x411838\n        function_410a30(result2);\n        // 0x411712\n        return 0;\n    }\n    goto lab_0x4117d1;\n  lab_0x4117d1:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x4117d1\n    int64_t v159 = *v158; // 0x4117d1\n    int64_t v160 = v159; // 0x4117dc\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x4117e7\n            uint64_t v161; // 0x411160\n            int64_t v162; // 0x411160\n            return function_4108a0(a1, v162, v161);\n        }\n        // 0x411a4e\n        int64_t v163; // 0x411160\n        switch (function_410ac0(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x411850\n                v160 = *v158;\n                // break -> 0x411858\n                break;\n            }\n            default: {\n                // 0x411a6e\n                *v158 = 0x4106c0;\n                int64_t result = function_4108a0(a1, result2, v44); // 0x411a81\n                *v158 = 0;\n                // 0x411712\n                return result;\n            }\n        }\n    }\n    // 0x411858\n    if (v44 == 1 || v160 == 0) {\n        // 0x411712\n        return result2;\n    }\n    // 0x4117e7\n    return function_4108a0(a1, result2, v44);\n  lab_0x41164d:\n    // 0x41164d\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x411662;\n  lab_0x411662:\n    // 0x411662\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x41166c\n    int64_t v165 = v164; // 0x41166c\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x411680\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x411684\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x41168f;\n  lab_0x41168f:\n    // 0x41168f\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x4111b4;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "411b20",
            "funcEndAddr": "411eb9",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x411dc0\n        *__errno_location() = 22;\n        // 0x411dad\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x411b68\n    int64_t result = (int64_t)mem; // 0x411b68\n    if (mem == NULL) {\n        // 0x411dad\n        return result;\n    }\n    // 0x411b79\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x411e00\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x411b87\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x411b8e\n    *v2 = -100;\n    int64_t v3 = a1; // 0x411ba4\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x411ba8\n    int64_t v5 = v4 < len ? len : v4; // 0x411bb0\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x411bb8\n    while (str != 0) {\n        // 0x411ba8\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x411bc0\n    int64_t v7 = result + 32; // 0x411bd9\n    char v8 = function_410d20(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x411be2\n    if (v8 == 0) {\n        // 0x411deb\n        free(mem);\n        // 0x411dad\n        return 0;\n    }\n    int64_t v9; // 0x411b20\n    int64_t v10; // 0x411b20\n    int64_t v11; // 0x411b20\n    char v12; // 0x411b20\n    char * v13; // 0x411b20\n    char * v14; // 0x411c0d\n    if (v7 == 0) {\n        // 0x411e10\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x411c33;\n        } else {\n            goto lab_0x411d5c;\n        }\n    } else {\n        int64_t v15 = function_4109a0(result, (int64_t)&g18, 0); // 0x411c05\n        if (v15 == 0) {\n            goto lab_0x411de2;\n        } else {\n            // 0x411c1b\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x411c40;\n            } else {\n                goto lab_0x411c33;\n            }\n        }\n    }\n  lab_0x411cd8:;\n    // 0x411cd8\n    int64_t v16; // 0x411b20\n    int64_t v17; // 0x411c79\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x411b20\n    int64_t v19 = v18; // 0x411cdc\n    int64_t v20 = v17; // 0x411cdc\n    goto lab_0x411cdf;\n  lab_0x411cdf:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x411b20\n    int64_t v23 = v22 + 1; // 0x411cdf\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x411ce3\n    int64_t v25 = v19; // 0x411ceb\n    int64_t v26 = v23; // 0x411ceb\n    int64_t v27 = v21; // 0x411ceb\n    int64_t v28 = v24; // 0x411ceb\n    if (v24 == 0) {\n        // 0x411d40\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x411d5c;\n        } else {\n            // 0x411d4b\n            v13 = v14;\n            v9 = function_4108a0(result, v21, v23);\n            goto lab_0x411d5c;\n        }\n    }\n    goto lab_0x411ced;\n  lab_0x411e70:\n    // 0x411e70\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x411cdf;\n  lab_0x411c33:\n    // 0x411c33\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x411c40;\n  lab_0x411d5c:;\n    int64_t v35 = function_4109a0(result, (int64_t)&g18, 0); // 0x411d66\n    *mem = v35;\n    char * v33 = v13; // 0x411d71\n    int64_t v34 = v9; // 0x411d71\n    if (v35 != 0) {\n        // 0x411d73\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x411d7c\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_410d90(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x411d90\n            if ((v37 & 516) == 0) {\n                int32_t v38 = function_410df0(*v2, (int64_t)v37, (int64_t)\".\"); // 0x411ea5\n                *(int32_t *)(result + 40) = v38;\n                if (v38 < 0) {\n                    int32_t v39 = *v36; // 0x411eb0\n                    *v36 = v39 | 4;\n                }\n            }\n            // 0x411d9f\n            function_413d50(result + 96, 0xffffffff);\n            // 0x411dad\n            return result;\n        }\n    }\n    goto lab_0x411dd0;\n  lab_0x411de2:\n    // 0x411de2\n    free((int64_t *)*(int64_t *)v7);\n    // 0x411deb\n    free(mem);\n    // 0x411dad\n    return 0;\n  lab_0x411c40:\n    // 0x411c40\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x411d5c;\n    } else {\n        // 0x411ced\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x411ced:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x411cf0\n            int64_t v29 = len2; // 0x411cf0\n            int64_t v30 = v29; // 0x411cf9\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x411d0a\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x411d2c\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x411c70\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x411c70\n            v17 = function_4109a0(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x411dd0\n                break;\n            }\n            // 0x411c8a\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x411e30\n                *(int16_t *)(v17 + 112) = (int16_t)function_4106f0(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x411cd8;\n                } else {\n                    // 0x411e4b\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x411e70;\n                    } else {\n                        goto lab_0x411cdf;\n                    }\n                }\n            } else {\n                // 0x411cba\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x411e68\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x411e70;\n                } else {\n                    goto lab_0x411cd8;\n                }\n            }\n        }\n        goto lab_0x411dd0;\n    }\n  lab_0x411dd0:\n    // 0x411dd0\n    function_410a30(v34);\n    free((int64_t *)v33);\n    goto lab_0x411de2;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "411ec0",
            "funcEndAddr": "412039",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x411ed4\n        int64_t v2 = a1; // 0x411ed4\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x411eef\n                int64_t v5; // 0x411ec0\n                if (v4 != 0) {\n                    // 0x411ee0\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x411f0b\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x411ef8\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x411f0b\n                        break;\n                    }\n                }\n                // 0x411eef\n                v1 = v5;\n            }\n        }\n        // 0x411f0b\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x411f13\n    if (v7 != 0) {\n        // 0x411f1c\n        function_410a30(v7);\n    }\n    // 0x411f21\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x411f33\n    int32_t v9 = *v8; // 0x411f33\n    int32_t * v10; // 0x411ec0\n    int32_t v11; // 0x411ec0\n    if ((v9 & 512) == 0) {\n        // 0x411f90\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x411f44;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x411f94\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x411ff0\n                int32_t v13 = *v12; // 0x411ffb\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x411f44;\n                } else {\n                    goto lab_0x412012;\n                }\n            } else {\n                // 0x411fa0\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x411f44;\n                } else {\n                    // 0x411fac\n                    v10 = __errno_location();\n                    goto lab_0x412012;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x411f3b\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x411fc0\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x411fcd\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x411f44;\n    }\n  lab_0x411f44:\n    // 0x411f44\n    function_410a80(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x411f4d\n    if (v14 != 0) {\n        // 0x411f56\n        function_40bb00(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x411f5b\n    if ((*v8 & 258) == 0) {\n        // 0x411fe0\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x411f6d\n            function_40bb00(v15);\n        }\n    }\n    // 0x411f72\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x411f7c\n    if (v11 != 0) {\n        // 0x412028\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x411f82\n    return result;\n  lab_0x412012:\n    // 0x412012\n    v11 = *v10;\n    goto lab_0x411f44;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "412040",
            "funcEndAddr": "412799",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x412040\n    if (result == 0) {\n        // 0x41216a\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x412054\n    uint32_t v2 = *v1; // 0x412054\n    if ((v2 & 0x4000) != 0) {\n        // 0x41216a\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x412060\n    int16_t v4 = *v3; // 0x412060\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x412430\n        *(int16_t *)(result + 112) = (int16_t)function_4106f0(result, result, 0);\n        // 0x41216a\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x41207a\n    int16_t v6 = *v5; // 0x41207a\n    int64_t v7; // 0x412040\n    int64_t v8; // 0x412040\n    int64_t v9; // 0x412040\n    int64_t v10; // 0x412040\n    int64_t v11; // 0x412040\n    int64_t v12; // 0x412040\n    int64_t v13; // 0x412040\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_4106f0(result, result, 1); // 0x4123da\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x4126c0\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x4126c0\n                    int32_t v17 = *(int32_t *)(result + 44); // 0x412733\n                    int32_t v18 = function_410df0(v17, v16, (int64_t)\".\"); // 0x412742\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x41276e\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x41216a\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x412749\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = (int64_t)\".\";\n                    v12 = v16;\n                    goto lab_0x412377;\n                } else {\n                    // 0x4126cb\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x41238e;\n                }\n            } else {\n                // 0x4123e8\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x41216a\n                    return result;\n                }\n                goto lab_0x412400;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x4120c0;\n            } else {\n                goto lab_0x412197;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x4120c0;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x412197;\n            } else {\n                goto lab_0x412232;\n            }\n        }\n    }\n  lab_0x4120c0:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x4120c0\n    int64_t result2; // 0x412040\n    int64_t v24; // 0x412040\n    int64_t v25; // 0x412290\n    while (v23 != 0) {\n        // 0x412098\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x412280\n            if ((int32_t)function_410cc0(result) != 0) {\n                // 0x41261f\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x412290\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x412290\n                if ((*v1 & 258) == 0) {\n                    // 0x41262d\n                    free((int64_t *)v26);\n                    goto lab_0x4122ae;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x4122ae;\n                    } else {\n                        // 0x4122a9\n                        function_40bb00(v26);\n                        goto lab_0x4122ae;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x4120af\n        if (v28 != 4) {\n            // 0x412330\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_4106f0(result, v23, 1); // 0x412654\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x412654\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x4126d7\n                    if ((v31 & 4) != 0) {\n                        // 0x41265e\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x41233a;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x4126e6\n                        int32_t v33 = function_410df0(v32, (int64_t)v31, (int64_t)\".\"); // 0x4126f5\n                        *(int32_t *)(v23 + 68) = v33;\n                        if (v33 < 0) {\n                            int32_t v34 = *__errno_location(); // 0x41278b\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v34;\n                            // 0x41265e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x41233a;\n                        } else {\n                            int16_t * v35 = (int16_t *)(v23 + 114); // 0x412700\n                            *v35 = *v35 | 2;\n                            // 0x41265e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x41233a;\n                        }\n                    }\n                } else {\n                    // 0x41265e\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x41233a;\n                }\n            } else {\n                goto lab_0x41233a;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v36 = (int64_t *)(v22 + 8); // 0x4120c9\n    int64_t v37 = *v36; // 0x4120c9\n    int64_t result6 = v37; // 0x4120d2\n    if (*(int64_t *)(v37 + 24) != 0) {\n        // 0x4125e0\n        *v21 = v37;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v37 + 72)) = 0;\n        int64_t v38 = function_411160(result, 3); // 0x4125f9\n        if (v38 != 0) {\n            // 0x41268f\n            free((int64_t *)v22);\n            v24 = v38;\n            goto lab_0x41233a;\n        } else {\n            // 0x41260a\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x41216a\n                return 0;\n            }\n            // 0x412616\n            result6 = *v36;\n            goto lab_0x4120d8;\n        }\n    } else {\n        goto lab_0x4120d8;\n    }\n  lab_0x412197:;\n    int64_t v39 = v2; // 0x412054\n    if ((v39 & 64) == 0) {\n        goto lab_0x4121ab;\n    } else {\n        // 0x41219c\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x412232;\n        } else {\n            goto lab_0x4121ab;\n        }\n    }\n  lab_0x4120d8:\n    // 0x4120d8\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v40 = (int64_t *)(result6 + 88); // 0x4120e4\n    if (*v40 == -1) {\n        // 0x4124ff\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x41216a\n        return 0;\n    }\n    // 0x4120ef\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v40 == 0) {\n        // 0x41252f\n        if ((int32_t)function_410cc0(result) == 0) {\n            goto lab_0x412126;\n        } else {\n            goto lab_0x41253f;\n        }\n    } else {\n        uint16_t v41 = *(int16_t *)(result6 + 114); // 0x412112\n        if ((v41 & 2) != 0) {\n            int32_t v42 = *v1; // 0x4124b5\n            int32_t * v43 = (int32_t *)(result6 + 68); // 0x4124ba\n            uint32_t fd = *v43; // 0x4124ba\n            int32_t fd2 = fd; // 0x4124bf\n            if ((v42 & 4) == 0) {\n                if ((v42 & 512) == 0) {\n                    // 0x41269c\n                    if (fchdir(fd) != 0) {\n                        // 0x4126a5\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x4126b8\n                    fd2 = *v43;\n                } else {\n                    // 0x4124ca\n                    function_410c50(result, (int64_t)fd, 1);\n                    fd2 = *v43;\n                }\n            }\n            // 0x4124dc\n            close(fd2);\n            goto lab_0x412126;\n        } else {\n            if (v41 % 2 == 0) {\n                int64_t v44 = *(int64_t *)(result6 + 8); // 0x41266c\n                if ((int32_t)function_410e40(result, v44, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x412126;\n                } else {\n                    goto lab_0x41253f;\n                }\n            } else {\n                goto lab_0x412126;\n            }\n        }\n    }\n  lab_0x412232:\n    // 0x412232\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x412637\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v45 = (int64_t *)(result + 8); // 0x41223c\n    int64_t v46 = *v45; // 0x41223c\n    if (v46 != 0) {\n        // 0x412246\n        function_410a30(v46);\n        *v45 = 0;\n    }\n    // 0x412254\n    *v5 = 6;\n    function_4110c0(*v1, result + 88, result);\n    // 0x41216a\n    return result;\n  lab_0x412400:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x41240b\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x41216a\n        return result3;\n    }\n    int64_t v47 = *(int64_t *)(result5 + 8); // 0x412567\n    int64_t * v48 = (int64_t *)(v47 + 104); // 0x41256b\n    int64_t v49; // 0x412040\n    int64_t v50; // 0x412040\n    if (*v48 != 0) {\n        goto lab_0x412583;\n    } else {\n        // 0x412572\n        if ((*v1 & 24) == 24) {\n            // 0x412719\n            if ((int32_t)function_410be0(v47, v13, v11) != 2) {\n                goto lab_0x412583;\n            } else {\n                // 0x41272a\n                v49 = (int64_t)*(int16_t *)(result5 + 112);\n                v50 = result5;\n                goto lab_0x412381;\n            }\n        } else {\n            goto lab_0x412583;\n        }\n    }\n  lab_0x4121ab:;\n    int64_t * v51 = (int64_t *)(result + 8); // 0x4121ab\n    int64_t v52 = *v51; // 0x4121ab\n    int64_t v53; // 0x412040\n    if (v52 == 0) {\n        goto lab_0x412459;\n    } else {\n        if ((v39 & 0x2000) != 0) {\n            // 0x412443\n            *v1 = v2 & -0x2001;\n            function_410a30(v52);\n            *v51 = 0;\n            goto lab_0x412459;\n        } else {\n            int64_t v54 = *(int64_t *)(result + 48); // 0x4121c2\n            if ((int32_t)function_410e40(result, result, 0xffffffff, (int32_t)v54) == 0) {\n                // 0x4124e6\n                v53 = *v51;\n            } else {\n                int32_t * v55 = __errno_location(); // 0x4121de\n                int64_t v56 = *v51; // 0x4121e3\n                int16_t * v57 = (int16_t *)(result + 114); // 0x4121ea\n                *v57 = *v57 | 1;\n                *(int32_t *)(result + 64) = *v55;\n                v53 = 0;\n                if (v56 != 0) {\n                    *(int64_t *)(v56 + 48) = *(int64_t *)(*(int64_t *)(v56 + 8) + 48);\n                    int64_t v58 = *(int64_t *)(v56 + 16); // 0x41220c\n                    int64_t v59 = v58; // 0x412213\n                    v53 = v56;\n                    while (v58 != 0) {\n                        int64_t v60 = *(int64_t *)(*(int64_t *)(v59 + 8) + 48); // 0x412204\n                        *(int64_t *)(v59 + 48) = v60;\n                        v58 = *(int64_t *)(v59 + 16);\n                        v59 = v58;\n                        v53 = v56;\n                    }\n                }\n            }\n            goto lab_0x412215;\n        }\n    }\n  lab_0x412377:;\n    uint16_t v61 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v49 = v61;\n    v50 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v61 == 11) {\n        goto lab_0x412400;\n    } else {\n        goto lab_0x412381;\n    }\n  lab_0x41238e:;\n    int64_t v62 = v8; // 0x412393\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x41239e;\n    } else {\n        goto lab_0x412395;\n    }\n  lab_0x412583:;\n    int64_t v63 = function_4106f0(result, result5, 0); // 0x41258b\n    int16_t v64 = v63; // 0x412596\n    *(int16_t *)(result5 + 112) = v64;\n    v49 = v63;\n    v50 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x412381;\n    } else {\n        // 0x4125ac\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x41270a\n            result3 = result5;\n            if (v64 != 1) {\n                int64_t v65 = result3;\n                result2 = v65;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x412395;\n        } else {\n            uint64_t v66 = *v48 - 1; // 0x4125bb\n            if (v66 < 0xfffffffffffffffe) {\n                // 0x41275a\n                *v48 = v66;\n            }\n            // 0x4125c9\n            v62 = result5;\n            if (v64 != 1) {\n                // 0x41216a\n                return result5;\n            }\n            goto lab_0x41239e;\n        }\n    }\n  lab_0x412459:;\n    int64_t v67 = function_411160(result, 3); // 0x412461\n    *v51 = v67;\n    v53 = v67;\n    if (v67 == 0) {\n        int32_t v68 = *v1; // 0x412477\n        if ((v68 & 0x4000) != 0) {\n            // 0x41216a\n            return 0;\n        }\n        // 0x412488\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x4124a3\n            function_4110c0(v68, result + 88, result);\n            result2 = result;\n          lab_0x41216a:\n            // 0x41216a\n            return result2;\n        }\n        // 0x412491\n        if (*v5 != 4) {\n            // 0x412498\n            *v5 = 7;\n        }\n        // 0x4124a3\n        function_4110c0(v68, result + 88, result);\n        // 0x41216a\n        return result;\n    }\n    goto lab_0x412215;\n  lab_0x41233a:;\n    int64_t v69 = *(int64_t *)(v24 + 8); // 0x41233a\n    int64_t v70 = *(int64_t *)(v69 + 72); // 0x41233e\n    char v71 = *(char *)(v70 - 1 + *(int64_t *)(v69 + 56)); // 0x41234a\n    int64_t v72 = *(int64_t *)(result + 32) + v70 + (int64_t)(v71 == 47); // 0x412353\n    *(char *)v72 = 47;\n    int64_t v73 = *(int64_t *)(v24 + 96) + 1; // 0x412363\n    int64_t v74 = v24 + 264; // 0x412367\n    memmove((int64_t *)(v72 + 1), (int64_t *)v74, (int32_t)v73);\n    v7 = v24;\n    v10 = v73;\n    v12 = v74;\n    goto lab_0x412377;\n  lab_0x412126:;\n    int64_t v75 = (int64_t)*v1; // 0x41212b\n    int64_t v76 = v75; // 0x412130\n    int32_t * v77; // 0x412040\n    int64_t v78; // 0x412040\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x412158;\n    } else {\n        // 0x412126\n        v77 = (int32_t *)(result6 + 64);\n        v78 = v75;\n        goto lab_0x412132;\n    }\n  lab_0x41253f:;\n    int32_t v79 = *__errno_location(); // 0x412544\n    int32_t * v80 = (int32_t *)(result6 + 64);\n    *v80 = v79;\n    uint32_t v81 = *v1 | 0x4000; // 0x412549\n    *v1 = v81;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x41216a\n        return 0;\n    }\n    // 0x41255d\n    v77 = v80;\n    v78 = v81;\n    goto lab_0x412132;\n  lab_0x412381:\n    // 0x412381\n    result2 = v50;\n    v8 = v50;\n    if ((int16_t)v49 != 1) {\n        // 0x41216a\n        return result2;\n    }\n    goto lab_0x41238e;\n  lab_0x41239e:;\n    int64_t v93 = function_411010(*v1, result + 88, v62); // 0x4123ae\n    result2 = v62;\n    if ((char)v93 == 0) {\n        // 0x4123bb\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x41216a\n    return result2;\n  lab_0x412395:\n    // 0x412395\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v62 = v8;\n    goto lab_0x41239e;\n  lab_0x412215:\n    // 0x412215\n    *v51 = 0;\n    v24 = v53;\n    goto lab_0x41233a;\n  lab_0x412158:\n    // 0x412158\n    if ((v76 & 0x4000) != 0) {\n        // 0x41216a\n        return 0;\n    }\n    // 0x41216a\n    return result6;\n  lab_0x412132:\n    // 0x412132\n    if (*v77 != 0) {\n        // 0x412521\n        int64_t v82; // 0x412040\n        *(int16_t *)(v82 + 112) = 7;\n        int64_t v83; // 0x412040\n        v76 = v83;\n    } else {\n        // 0x41213d\n        *(int16_t *)(result6 + 112) = 6;\n        function_4110c0((int32_t)v78, result + 88, result6);\n        v76 = (int64_t)*v1;\n    }\n    goto lab_0x412158;\n  lab_0x4122ae:;\n    int64_t * v84 = (int64_t *)(v23 + 96); // 0x4122ae\n    int64_t v85 = *v84; // 0x4122ae\n    int64_t str = v23 + 264; // 0x4122b2\n    int64_t * v86 = (int64_t *)(result + 32); // 0x4122b9\n    *(int64_t *)(v23 + 72) = v85;\n    int64_t v87 = v85 + 1; // 0x4122c5\n    int64_t * v88 = (int64_t *)str; // 0x4122c9\n    memmove((int64_t *)*v86, v88, (int32_t)v87);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4122d6\n    int64_t v89 = v87; // 0x4122de\n    int64_t v90; // 0x4122d6\n    if (found_char_pos == NULL) {\n        goto lab_0x41230b;\n    } else {\n        // 0x4122e0\n        v90 = (int64_t)found_char_pos;\n        if (str == v90) {\n            // 0x4124f0\n            v89 = v87;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x41230b;\n            } else {\n                goto lab_0x4122e9;\n            }\n        } else {\n            goto lab_0x4122e9;\n        }\n    }\n  lab_0x41230b:;\n    int64_t v91 = *v86; // 0x41230b\n    *(int64_t *)(v23 + 56) = v91;\n    *(int64_t *)(v23 + 48) = v91;\n    function_410d90(*v1, v25);\n    v7 = v23;\n    v10 = v89;\n    v12 = v25;\n    goto lab_0x412377;\n  lab_0x4122e9:;\n    int64_t str2 = v90 + 1; // 0x4122e9\n    int64_t len = strlen((char *)str2); // 0x4122f0\n    int64_t v92 = len + 1; // 0x4122fe\n    memmove(v88, (int64_t *)str2, (int32_t)v92);\n    *v84 = len;\n    v89 = v92;\n    goto lab_0x41230b;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "4127a0",
            "funcEndAddr": "4127c9",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x4127a5\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x4127b0\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "4127d0",
            "funcEndAddr": "41293d",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x4127dd\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x4128c8\n        *v1 = 22;\n        return 0;\n    }\n    // 0x4127f1\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x4127fa\n    if ((*v2 & 64) != 0) {\n        // 0x41286f\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x412804\n    if (v3 == 9) {\n        // 0x4128f0\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x412814\n    if (v3 != 1) {\n        // 0x41286f\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x41281c\n    int64_t v5 = *v4; // 0x41281c\n    if (v5 != 0) {\n        // 0x412825\n        function_410a30(v5);\n    }\n    int64_t v6 = 1; // 0x412836\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x412838\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x412845\n    int64_t result; // 0x412866\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x412860\n        result = function_411160(a1, v6);\n        *v4 = result;\n        // 0x41286f\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x412857\n    if ((v8 & 4) != 0) {\n        // 0x412860\n        result = function_411160(a1, v6);\n        *v4 = result;\n        // 0x41286f\n        return result;\n    }\n    int64_t v9 = function_410df0(*(int32_t *)(a1 + 44), (int64_t)v8, (int64_t)\".\"); // 0x412888\n    int32_t fd = v9; // 0x41288f\n    if (fd < 0) {\n        // 0x412918\n        *v4 = 0;\n        // 0x41286f\n        return 0;\n    }\n    // 0x412897\n    *v4 = function_411160(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x412900\n        function_410c50(a1, v9 & 0xffffffff, 1);\n        // 0x41286f\n        return *v4;\n    }\n    // 0x4128ac\n    if (fchdir(fd) == 0) {\n        // 0x4128b7\n        close(fd);\n        // 0x41286f\n        return *v4;\n    }\n    // 0x412927\n    close(fd);\n    // 0x41286f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_412940",
            "funcStartAddr": "412940",
            "funcEndAddr": "412a1f",
            "decompiledFuncCode": "int64_t function_412940(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x41294c\n    uint32_t v2 = *v1; // 0x41294c\n    int64_t v3 = a2 & 0xffffffff; // 0x412951\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x412954\n    uint64_t v5 = (int64_t)*v4; // 0x412954\n    int64_t v6; // 0x4129c2\n    if (v3 <= v5) {\n      lab_0x4129bc_2:\n        // 0x4129bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x412942\n    int64_t v8 = v2; // 0x412940\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4129bc\n        goto lab_0x4129bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x412978\n    int64_t v17; // 0x412986\n    int64_t * v18; // 0x4129a0\n    int64_t * v19; // 0x4129a3\n    int64_t v20; // 0x4129ae\n    int64_t v21; // 0x412986\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x412983\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4129a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4129b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4129bc\n            goto lab_0x4129bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4129bc\n            goto lab_0x4129bc_2;\n        }\n        // 0x412972\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4129fb\n    int64_t * v23 = (int64_t *)v22; // 0x412a00\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x412a03\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x412a00\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x412a17\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x41296d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4129bc\n            goto lab_0x4129bc_2;\n        }\n        // 0x412972\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x412983\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4129a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4129b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4129bc\n                goto lab_0x4129bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4129bc\n                goto lab_0x4129bc_2;\n            }\n            // 0x412972\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4129e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x412a00\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x412a17\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4129bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_412a20",
            "funcStartAddr": "412a20",
            "funcEndAddr": "41303c",
            "decompiledFuncCode": "int64_t function_412a20(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x412a3f\n    int64_t v2 = *v1; // 0x412a3f\n    char * str2 = (char *)v2; // 0x412a4c\n    char c = *str2; // 0x412a4c\n    int64_t v3 = v2; // 0x412a78\n    int64_t v4 = 0; // 0x412a20\n    int32_t v5; // 0x412a20\n    int64_t v6; // 0x412a20\n    int64_t v7; // 0x412a20\n    int64_t v8; // 0x412a20\n    int64_t v9; // 0x412a20\n    int64_t v10; // 0x412a20\n    int64_t v11; // 0x412a20\n    int64_t v12; // 0x412a20\n    int64_t v13; // 0x412a20\n    int64_t str3; // 0x412a20\n    int64_t v14; // 0x412a20\n    int64_t v15; // 0x412a20\n    int64_t v16; // 0x412a20\n    int64_t v17; // 0x412a20\n    int32_t v18; // 0x412a20\n    int32_t v19; // 0x412a20\n    int32_t v20; // 0x412a20\n    int32_t v21; // 0x412a20\n    int32_t v22; // 0x412a20\n    int32_t v23; // 0x412a20\n    int32_t v24; // 0x412a20\n    int32_t v25; // 0x412a20\n    int32_t v26; // 0x412a20\n    int32_t v27; // 0x412a20\n    int32_t v28; // 0x412a20\n    int32_t v29; // 0x412a20\n    int64_t nmemb; // 0x412a20\n    int64_t v30; // 0x412a20\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x412a7c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x412a78\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x412a88\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x412a8e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x412a58\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x412abc\n                int64_t v34; // 0x412a20\n                int64_t v35; // 0x412a20\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x412ac5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x412c40;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x412ad6\n                int64_t v37 = *(int64_t *)v36; // 0x412ada\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x412ab0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x412ac5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x412c40;\n                        }\n                    }\n                    // 0x412ad6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x412b26:\n                    // 0x412b26\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x412b80;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x412cf0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x412b80;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x412ca0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x412b4a;\n                                } else {\n                                    // 0x412cac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x412b4a;\n                                    } else {\n                                        // 0x412cba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x412b4a;\n                                        } else {\n                                            goto lab_0x412b80;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x412b4a;\n                            }\n                        }\n                    }\n                }\n              lab_0x412b91:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x412d66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x412f12\n                            flockfile(g42);\n                            int64_t v41 = *v1; // 0x412f32\n                            __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x412f7f\n                            int64_t v43 = (int64_t)g42;\n                            int64_t v44 = v43; // 0x412f99\n                            int64_t v45; // 0x412f9b\n                            if (*(char *)v42 != 0) {\n                                // 0x412f9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g42;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x412f93\n                            while (v17 + nmemb != v42) {\n                                // 0x412f95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x412f9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g42;\n                                }\n                                // 0x412f88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x412fc0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g42);\n                            v40 = *v1;\n                        } else {\n                            // 0x412d74\n                            __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x412ecf\n                        free((int64_t *)v17);\n                    }\n                    // 0x412dc9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x412de0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x412c8e\n                    return 63;\n                }\n                // 0x412bb0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x412c34\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x412c40:;\n                    int32_t * v49 = (int32_t *)a7; // 0x412c50\n                    uint32_t v50 = *v49; // 0x412c50\n                    int64_t v51 = v50; // 0x412c50\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x412c5a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x412c63\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x412e8f\n                                __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x412e3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x412c8e\n                            return 63;\n                        }\n                        // 0x412cd8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x412fef\n                                    __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x412eed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x412f00\n                                // 0x412c8e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x412dfe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x412e12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x412c7b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x412c7e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x412c82\n                    int64_t result = v59; // 0x412c88\n                    if (v58 != 0) {\n                        // 0x412c8a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x412c8e\n                    return result;\n                }\n            } else {\n                // 0x412a8e\n                v5 = v32;\n            }\n            // break -> 0x412bb5\n            break;\n        }\n    }\n    // 0x412bb5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x412bcd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x412bd7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x412c8e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x412d19\n        __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x412c06\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x412c16\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x412b80:\n    // 0x412b80\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x412b80\n    int64_t v63 = *(int64_t *)v62; // 0x412b84\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x412b91\n        goto lab_0x412b91;\n    }\n    goto lab_0x412b26;\n  lab_0x412b4a:\n    // 0x412b4a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x412a20\n    int32_t v65; // 0x412a20\n    int32_t v66; // 0x412a20\n    if (v27 != 0) {\n        goto lab_0x412b80;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x412d00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x412b80;\n            } else {\n                goto lab_0x412b71;\n            }\n        } else {\n            // 0x412b65\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x412e5c\n                int64_t v67 = (int64_t)mem; // 0x412e5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x412b80;\n                } else {\n                    // 0x412e6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x412b71;\n                }\n            } else {\n                goto lab_0x412b71;\n            }\n        }\n    }\n  lab_0x412b71:\n    // 0x412b71\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x412b80;\n}\n"
        },
        {
            "funcName": "function_413040",
            "funcStartAddr": "413040",
            "funcEndAddr": "413606",
            "decompiledFuncCode": "int64_t function_413040(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x413061\n    if (v3 < 1) {\n        // 0x41321e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x41305d\n    int32_t v5 = *(int32_t *)a7; // 0x413069\n    uint64_t v6 = a1 & 0xffffffff; // 0x41306b\n    int64_t v7 = v2; // 0x413070\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x413073\n    *v8 = 0;\n    int64_t v9; // 0x413040\n    int64_t v10; // 0x413040\n    int64_t v11; // 0x413040\n    int64_t v12; // 0x413040\n    int64_t str; // 0x413040\n    int64_t v13; // 0x413040\n    int64_t v14; // 0x413040\n    int64_t v15; // 0x413040\n    int64_t v16; // 0x413040\n    int64_t v17; // 0x413040\n    int32_t v18; // 0x413040\n    char v19; // 0x413040\n    if (v5 == 0) {\n        // 0x413258\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x41308a;\n    } else {\n        // 0x413083\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4130d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4130d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x413198;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4130e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4130f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4131ac;\n                } else {\n                    goto lab_0x413108;\n                }\n            }\n        } else {\n            goto lab_0x41308a;\n        }\n    }\n  lab_0x41308a:\n    // 0x41308a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x413090\n    *v24 = 0;\n    int64_t v25; // 0x413040\n    int64_t v26; // 0x413040\n    int64_t v27; // 0x413040\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x413180\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x41318d;\n        }\n        case 43: {\n            // 0x413490\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x41318d;\n        }\n        default: {\n            // 0x4130ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x41340f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x413528\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x41318d;\n                } else {\n                    // 0x41341d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4130ba;\n                }\n            } else {\n                goto lab_0x4130ba;\n            }\n        }\n    }\n  lab_0x413198:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x41319f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x413108;\n    } else {\n        goto lab_0x4131ac;\n    }\n  lab_0x4130ba:\n    // 0x4130ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x41318d;\n  lab_0x41318d:\n    // 0x41318d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x413198;\n  lab_0x413108:;\n    uint32_t v30 = *(int32_t *)a7; // 0x413108\n    int64_t v31 = v30; // 0x413108\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x41310a\n    if ((int64_t)*v32 > v31) {\n        // 0x41310f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x413112\n    if (*v33 > v30) {\n        // 0x413117\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x41311a\n    int64_t v35 = v31; // 0x41311e\n    int64_t v36 = v15; // 0x41311e\n    int64_t v37; // 0x413040\n    int64_t v38; // 0x413040\n    int64_t v39; // 0x413040\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x413288\n        int64_t v41 = v40; // 0x413288\n        v2 = v41;\n        int64_t v42; // 0x413040\n        if (*v33 == v40) {\n            // 0x413470\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x413478\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x413294\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x413298\n                function_412940(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4132a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4132b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4132ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4132d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4132d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4132de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4132e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4132e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4132c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4132c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4132d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4132de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4132e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4132e6;\n                    }\n                }\n                // 0x4132c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x413488\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4132e6;\n    } else {\n        goto lab_0x413124;\n    }\n  lab_0x4131ac:\n    // 0x4131ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4131af\n    int64_t v51 = v12; // 0x4131af\n    int64_t v52 = v14; // 0x4131af\n    if (*(char *)v10 == 0) {\n        goto lab_0x413108;\n    } else {\n        goto lab_0x4131b5;\n    }\n  lab_0x413124:;\n    int32_t v53 = v35; // 0x413124\n    int64_t v54; // 0x413040\n    int64_t v55; // 0x413040\n    int64_t v56; // 0x413040\n    int64_t v57; // 0x413040\n    int64_t v58; // 0x413040\n    int64_t v59; // 0x413040\n    char * v60; // 0x413040\n    int64_t v61; // 0x413040\n    int64_t v62; // 0x413139\n    int64_t v63; // 0x413040\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x413273\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x413276;\n    } else {\n        // 0x41312c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x413040\n        int64_t v66 = v65 ? -1 : 1; // 0x413140\n        int64_t v67 = (int64_t)\"--\"; // 0x413040\n        int64_t v68 = v62; // 0x413040\n        int64_t v69 = 3; // 0x413140\n        unsigned char v70 = *(char *)v68; // 0x413140\n        char v71 = *(char *)v67; // 0x413140\n        char v72 = v71; // 0x413140\n        bool v73 = false; // 0x413140\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x413230\n            if (*(char *)v62 == 45) {\n                // 0x4132f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4132f0\n                if (c == 0) {\n                    goto lab_0x41323a;\n                } else {\n                    // 0x4132fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x413380;\n                    } else {\n                        if (c == 45) {\n                            // 0x413563\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4133d5;\n                        } else {\n                            // 0x41330e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x413380;\n                            } else {\n                                // 0x413313\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x413334;\n                                } else {\n                                    // 0x41331a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x413380;\n                                    } else {\n                                        goto lab_0x413334;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x41323a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x413150\n            v2 = v75;\n            int32_t v76 = *v32; // 0x413153\n            int64_t v77 = v35 + 1; // 0x413156\n            int32_t v78 = v77; // 0x413159\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4134c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x413167\n                    function_412940(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x413175\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x413276;\n        }\n    }\n  lab_0x4131b5:;\n    // 0x4131b5\n    int64_t v79; // bp-104, 0x413040\n    int64_t v80 = &v79; // 0x41304a\n    int64_t v81 = v50 + 1; // 0x4131b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4131bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4131c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4131c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4131c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4131d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4131d6\n    int32_t c2 = v84; // 0x4131d6\n    char * found_char_pos = strchr(str2, c2); // 0x4131d6\n    int64_t v87 = *v82; // 0x4131db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4131e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4131f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4134e0\n            __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4134ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x41321e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4131d6\n    char v91 = *(char *)(v90 + 1); // 0x41320b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4131c5\n        if (v91 != 58) {\n            // 0x41321e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x413434\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x413538\n                *v8 = 0;\n            } else {\n                // 0x41351c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x41345e\n            *v83 = 0;\n            // 0x41321e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x41343e\n        if (v93 != 0) {\n            // 0x4134d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x41345e\n            *v83 = 0;\n            // 0x41321e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x413451\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x41345e\n            *v83 = 0;\n            // 0x41321e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x41359a\n            __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x41354a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x413551\n        // 0x41345e\n        *v83 = 0;\n        // 0x41321e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4133a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4133ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4135d0\n                __fprintf_chk(g42, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x413581\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x413588\n            // 0x41321e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4133b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4133ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4133d5;\n  lab_0x4132e6:\n    // 0x4132e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x413124;\n  lab_0x4133d5:;\n    int64_t v99 = function_412a20(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4133f3\n    // 0x41321e\n    return v99 & 0xffffffff;\n  lab_0x413276:;\n    int32_t v100 = v55; // 0x413276\n    if (v100 != (int32_t)v59) {\n        // 0x41327a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x41321e\n    return 0xffffffff;\n  lab_0x41323a:\n    // 0x41323a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x413241\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x41321e\n    return v99 & 0xffffffff;\n  lab_0x413380:\n    // 0x413380\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4131b5;\n  lab_0x413334:\n    // 0x413334\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_412a20(v6, a2, str, a4, a5, v57, v1, v11, &g17); // 0x41335a\n    if ((int32_t)v101 != -1) {\n        // 0x41321e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x41336f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x413380;\n}\n"
        },
        {
            "funcName": "function_413610",
            "funcStartAddr": "413610",
            "funcEndAddr": "413666",
            "decompiledFuncCode": "int64_t function_413610(int64_t a1) {\n    // 0x413610\n    *(int32_t *)&g68 = g36;\n    *(int32_t *)&g69 = g35;\n    int64_t v1; // 0x413610\n    int64_t result = function_413040(v1, v1, v1, v1, v1, v1, &g68, a1 & 0xffffffff); // 0x413636\n    g36 = *(int32_t *)&g68;\n    g73 = (char *)g71;\n    *(int32_t *)&g34 = g70;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413670",
            "funcStartAddr": "413670",
            "funcEndAddr": "413688",
            "decompiledFuncCode": "int64_t function_413670(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x413670\n    return function_413610(1);\n}\n"
        },
        {
            "funcName": "function_413690",
            "funcStartAddr": "413690",
            "funcEndAddr": "4136a3",
            "decompiledFuncCode": "int64_t function_413690(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x413690\n    return function_413610(0);\n}\n"
        },
        {
            "funcName": "function_4136b0",
            "funcStartAddr": "4136b0",
            "funcEndAddr": "4136c5",
            "decompiledFuncCode": "int64_t function_4136b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4136b0\n    return function_413040(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4136d0",
            "funcStartAddr": "4136d0",
            "funcEndAddr": "4136e6",
            "decompiledFuncCode": "int64_t function_4136d0(void) {\n    // 0x4136d0\n    return function_413610(0);\n}\n"
        },
        {
            "funcName": "function_4136f0",
            "funcStartAddr": "4136f0",
            "funcEndAddr": "413708",
            "decompiledFuncCode": "int64_t function_4136f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4136f0\n    return function_413040(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_413710",
            "funcStartAddr": "413710",
            "funcEndAddr": "41378a",
            "decompiledFuncCode": "int64_t function_413710(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x41371b\n    int64_t v2 = (int64_t)&g18; // 0x41371b\n    int32_t * pwc; // 0x413710\n    int64_t v3; // 0x413710\n    int64_t n; // 0x413710\n    if (a2 == 0) {\n        goto lab_0x413762;\n    } else {\n        // 0x41371d\n        if (a3 == 0) {\n            // 0x413748\n            return -2;\n        }\n        // 0x413729\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x413762;\n        } else {\n            goto lab_0x413734;\n        }\n    }\n  lab_0x413762:\n    // 0x413762\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x413710\n    pwc = (int32_t *)&v4;\n    goto lab_0x413734;\n  lab_0x413734:;\n    char * wstr = (char *)v3; // 0x41373a\n    int64_t ps; // 0x413710\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x41373a\n    int64_t result = v5; // 0x41373a\n    if (v5 < 0xfffffffe) {\n        // 0x413748\n        return result;\n    }\n    int64_t result2 = result; // 0x413779\n    if ((char)function_413cb0(0, v3) == 0) {\n        // 0x41377b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x413748\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413790",
            "funcStartAddr": "413790",
            "funcEndAddr": "413795",
            "decompiledFuncCode": "int64_t function_413790(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x413790\n    *(int32_t *)a4 = (int32_t)a3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4137a0",
            "funcStartAddr": "4137a0",
            "funcEndAddr": "4137b5",
            "decompiledFuncCode": "int64_t function_4137a0(int64_t path, int64_t a2, int32_t mode) {\n    int32_t fd = a2; // 0x4137a4\n    if (fd == -1) {\n        // 0x4137b0\n        return chmod((char *)path, mode);\n    }\n    // 0x4137a9\n    return fchmod(fd, mode);\n}\n"
        },
        {
            "funcName": "function_4137c0",
            "funcStartAddr": "4137c0",
            "funcEndAddr": "4137e2",
            "decompiledFuncCode": "int64_t function_4137c0(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x4137c0\n    int64_t v1; // 0x4137c0\n    int64_t result = (int32_t)function_4137a0(a2, a3 & 0xffffffff, (int32_t)v1) != 0 ? 0xffffffff : 0; // 0x4137df\n    return result;\n}\n"
        },
        {
            "funcName": "function_4137f0",
            "funcStartAddr": "4137f0",
            "funcEndAddr": "4137fa",
            "decompiledFuncCode": "int64_t function_4137f0(void) {\n    // 0x4137f0\n    return function_4036b0(1);\n}\n"
        },
        {
            "funcName": "function_413800",
            "funcStartAddr": "413800",
            "funcEndAddr": "413916",
            "decompiledFuncCode": "int64_t function_413800(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x413821\n    int32_t len = strlen(str); // 0x413821\n    if (a2 == 0) {\n        // 0x4138ed\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x413887\n    int64_t v4 = a3; // 0x413800\n    int64_t v5 = a2; // 0x41388e\n    int64_t str4; // 0x413800\n    int64_t v6; // 0x413800\n    int32_t v7; // 0x413800\n    int32_t v8; // 0x413800\n    int32_t v9; // 0x413800\n    int64_t v10; // 0x413800\n    int64_t result; // 0x413800\n    int32_t v11; // 0x413883\n    char * str2; // 0x4138a2\n    while (true) {\n        // 0x413897\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x4138ab\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x4138ed\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x4138bf\n                break;\n            }\n            // 0x413850\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x41385e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x413887\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x4138c3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x4138ca\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x413897\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x413897\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x4138ab\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x4138ed\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x4138bf\n                    break;\n                }\n                // 0x413850\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x41385e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x413887\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x4138bf\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x4138d8:\n    // 0x4138ed\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_413920",
            "funcStartAddr": "413920",
            "funcEndAddr": "413991",
            "decompiledFuncCode": "int64_t function_413920(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x413920\n    if (a3 == -1) {\n        // 0x413980\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x413935\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x413944\n    function_40dfb0(1, a1);\n    function_40dca0(0, 8, a2);\n    error(0, 0, format);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_4139a0",
            "funcStartAddr": "4139a0",
            "funcEndAddr": "413ab8",
            "decompiledFuncCode": "int64_t function_4139a0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x4139cd\n    fputs_unlocked(v1, g42);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x413a40\n        int64_t v5; // 0x413a47\n        int64_t v6; // 0x413a67\n        while (v3 != 0) {\n            // 0x413a2b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x4139f0\n                break;\n            }\n            // 0x413a3d\n            v4 = v3 + 1;\n            v5 = function_40dfd0(v2);\n            __fprintf_chk(g42, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x413a70\n                goto lab_0x413a70;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x4139f3\n        int64_t v8 = function_40dfd0(v2); // 0x4139fd\n        __fprintf_chk(g42, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x413a1d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x413a2b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x4139f0\n                    break;\n                }\n                // 0x413a3d\n                v4 = v3 + 1;\n                v5 = function_40dfd0(v2);\n                __fprintf_chk(g42, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x413a70\n                    goto lab_0x413a70;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x4139f0\n            v7 = v3 + 1;\n            v8 = function_40dfd0(v2);\n            __fprintf_chk(g42, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x413a70:;\n    int64_t v10 = (int64_t)g42; // 0x413a70\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x413a77\n    uint64_t result = *v11; // 0x413a77\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x413aa0\n        return __overflow(g42, 10);\n    }\n    // 0x413a81\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413ac0",
            "funcStartAddr": "413ac0",
            "funcEndAddr": "413b30",
            "decompiledFuncCode": "int64_t function_413ac0(int64_t a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_413800(a2, v2, v1, a5); // 0x413aec\n    int64_t result = v3; // 0x413af4\n    if (v3 < 0) {\n        // 0x413b08\n        function_413920(a1, a2, v3);\n        function_4139a0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x413af6\n    return result;\n}\n"
        },
        {
            "funcName": "function_413b30",
            "funcStartAddr": "413b30",
            "funcEndAddr": "413b7d",
            "decompiledFuncCode": "int64_t function_413b30(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x413b30\n    if (result == 0) {\n        // 0x413b71\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x413b68\n    int32_t n = a4; // 0x413b68\n    int64_t v1 = result; // 0x413b6f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x413b71\n        return result;\n    }\n    int64_t str3 = str2; // 0x413b6f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x413b50\n    int64_t result2 = 0; // 0x413b5d\n    while (v2 != 0) {\n        // 0x413b5f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x413b71\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x413b71\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413b80",
            "funcStartAddr": "413b80",
            "funcEndAddr": "413bdd",
            "decompiledFuncCode": "int64_t function_413b80(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x413b87\n    int64_t v2; // 0x413b80\n    int64_t result = function_414fe0(a1, v2); // 0x413b98\n    if ((v2 & 32) != 0) {\n        // 0x413bc0\n        if ((int32_t)result == 0) {\n            // 0x413bc4\n            *__errno_location() = 0;\n        }\n        // 0x413bba\n        return 0xffffffff;\n    }\n    // 0x413ba1\n    if ((int32_t)result == 0) {\n        // 0x413bba\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x413ba8\n    if (v1 == 0) {\n        // 0x413baa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x413bba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413be0",
            "funcStartAddr": "413be0",
            "funcEndAddr": "413bf0",
            "decompiledFuncCode": "int64_t function_413be0(int64_t a1) {\n    // 0x413be0\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x413be0\n    return result;\n}\n"
        },
        {
            "funcName": "function_413bf0",
            "funcStartAddr": "413bf0",
            "funcEndAddr": "413c70",
            "decompiledFuncCode": "int64_t function_413bf0(int64_t a1, int64_t a2) {\n    // 0x413bf0\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x413c52\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g76;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x413bf9\n    int64_t v2 = *v1; // 0x413bf9\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x413bfd\n    if (v2 == 0) {\n        // 0x413c20\n        *v1 = 1;\n        // 0x413c28\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x413c38\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x413c18\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x413c0b\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x413c18\n        return 0;\n    }\n    // 0x413c47\n    if (v4 == 0) {\n        // 0x413c18\n        return 1;\n    }\n    // 0x413c28\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_413c70",
            "funcStartAddr": "413c70",
            "funcEndAddr": "413caa",
            "decompiledFuncCode": "int64_t function_413c70(int64_t tp) {\n    int64_t result = 0; // 0x413c84\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x413c86\n        int64_t tp2; // bp-24, 0x413c70\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *(int64_t *)tp = tp2;\n        int128_t v1; // 0x413c70\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)(tp + 8) = result;\n    }\n    // 0x413ca4\n    return result;\n}\n"
        },
        {
            "funcName": "function_413cb0",
            "funcStartAddr": "413cb0",
            "funcEndAddr": "413d0e",
            "decompiledFuncCode": "int64_t function_413cb0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x413cb6\n    if (locale == NULL) {\n        // 0x413ce3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x413cb6\n    bool v2; // 0x413cb0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g19; // 0x413cb0\n    int64_t v5 = v1; // 0x413cb0\n    int64_t v6 = 2; // 0x413cd5\n    unsigned char v7 = *(char *)v5; // 0x413cd5\n    char v8 = *(char *)v4; // 0x413cd5\n    char v9 = v8; // 0x413cd5\n    bool v10 = false; // 0x413cd5\n    while (v7 == v8) {\n        // 0x413cc8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x413ce1\n    int64_t v13 = v1; // 0x413ce1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x413ce3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x413ce1\n    unsigned char v15 = *(char *)v13; // 0x413cfd\n    char v16 = *(char *)v12; // 0x413cfd\n    char v17 = v16; // 0x413cfd\n    bool v18 = false; // 0x413cfd\n    while (v15 == v16) {\n        // 0x413cf0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_413d10",
            "funcStartAddr": "413d10",
            "funcEndAddr": "413d46",
            "decompiledFuncCode": "int64_t function_413d10(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x413d16\n    if (v1 == 0) {\n        // 0x413d40\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x413d28\n    char v5 = *(char *)v2; // 0x413d2b\n    while (v5 != 0) {\n        // 0x413d20\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x413d33\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_413d50",
            "funcStartAddr": "413d50",
            "funcEndAddr": "413d6b",
            "decompiledFuncCode": "int64_t function_413d50(int64_t a1, int64_t a2) {\n    // 0x413d50\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x413d5c\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x413d50\n    return result;\n}\n"
        },
        {
            "funcName": "function_413d70",
            "funcStartAddr": "413d70",
            "funcEndAddr": "413d75",
            "decompiledFuncCode": "int64_t function_413d70(int64_t a1) {\n    // 0x413d70\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_413d80",
            "funcStartAddr": "413d80",
            "funcEndAddr": "413db5",
            "decompiledFuncCode": "int64_t function_413d80(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x413d80\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x413d84\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x413d8d\n    uint32_t v4 = (*v2 + v3) % 4; // 0x413d8f\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x413d98\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x413d9e\n    int32_t v7 = *v6; // 0x413d9e\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x413da8\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x413db0\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_413dc0",
            "funcStartAddr": "413dc0",
            "funcEndAddr": "413e01",
            "decompiledFuncCode": "int64_t function_413dc0(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x413dc4\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x413dce\n    uint32_t v3 = *v2; // 0x413dce\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x413ddb\n    int64_t result = (int64_t)*v4; // 0x413ddb\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x413df8\n        *v1 = 1;\n        return result;\n    }\n    // 0x413de4\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413e10",
            "funcStartAddr": "413e10",
            "funcEndAddr": "414372",
            "decompiledFuncCode": "int64_t function_413e10(void) {\n    char * v1 = nl_langinfo(14); // 0x413e26\n    char * v2 = g72; // 0x413e2b\n    char * v3; // 0x413e10\n    int64_t v4; // 0x413e10\n    int64_t v5; // 0x413e10\n    int64_t v6; // 0x413e10\n    int64_t v7; // 0x413e10\n    int32_t size; // 0x413e10\n    int32_t size2; // 0x413e10\n    int32_t len; // 0x413ee2\n    int64_t v8; // 0x413ee2\n    char * env_val; // 0x413ecd\n    if (v2 == NULL) {\n        // 0x413ec8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x413f35;\n        } else {\n            // 0x413eda\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x413f35;\n            } else {\n                // 0x413edf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x413ecd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x414365\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x413f35;\n                    } else {\n                        // 0x4142d9\n                        size2 = len + 14;\n                        goto lab_0x413efb;\n                    }\n                } else {\n                    goto lab_0x413efb;\n                }\n            }\n        }\n    } else {\n        // 0x413e10\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x413e4a;\n    }\n  lab_0x41417c:;\n    // 0x41417c\n    struct _IO_FILE * stream; // 0x413fbb\n    int32_t v10 = __uflow(stream); // 0x41417f\n    int64_t v11; // 0x413e10\n    int64_t v12 = v11; // 0x414189\n    int64_t v13; // 0x413e10\n    int64_t v14 = v13; // 0x414189\n    int32_t v15 = v10; // 0x414189\n    int64_t v16; // 0x413e10\n    int64_t v17 = v16; // 0x414189\n    int64_t v18 = v11; // 0x414189\n    int64_t v19 = v13; // 0x414189\n    int64_t v20 = v16; // 0x414189\n    if (v10 == -1) {\n        // break -> 0x41418f\n        goto lab_0x41418f;\n    }\n    goto lab_0x414009;\n  lab_0x413ffe:;\n    // 0x413ffe\n    int64_t v90; // 0x413e10\n    int64_t * v32; // 0x413ff0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x413e10\n    v12 = v89;\n    int64_t v91; // 0x413e10\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x413e10\n    v17 = v92;\n    goto lab_0x414009;\n  lab_0x414009:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x413e10\n    int32_t v25; // bp-120, 0x413e10\n    int32_t v26; // bp-184, 0x413e10\n    int64_t v27; // 0x413fbb\n    int64_t v28; // 0x413fd8\n    int64_t v29; // 0x413fdd\n    int64_t * v30; // 0x413ff4\n    switch (c) {\n        case 32: {\n            goto lab_0x413ff0;\n        }\n        case 10: {\n            goto lab_0x413ff0;\n        }\n        case 9: {\n            goto lab_0x413ff0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4141e1\n            int32_t v33; // 0x413e10\n            char v34; // 0x413e10\n            int32_t v35; // 0x4141ee\n            if (v31 < *v30) {\n                // 0x4141c0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4141eb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4141e1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4141c0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4141eb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4141d0\n                v36 = v33;\n            }\n            // 0x4142bf\n            if (v36 == -1) {\n                // break -> 0x41418f\n                break;\n            }\n            goto lab_0x413ff0;\n        }\n        default: {\n            // 0x41401f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x41418f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x414048\n            int64_t v39 = v37 + 4; // 0x41404a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x414056\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x414058\n            while (v41 == 0) {\n                // 0x414048\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x414076\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x414082\n            int64_t v45 = v43 + 4; // 0x414084\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x414090\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x414092\n            while (v47 == 0) {\n                // 0x414082\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x41407f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4140a8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4140b8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4140bc\n            int64_t v52 = v51 + v48; // 0x4140c5\n            int64_t * mem; // 0x413e10\n            int64_t v53; // 0x413e10\n            int64_t v54; // 0x413e10\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4141fb\n                int64_t v56 = v55 + 3; // 0x414207\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4140e1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4140f0\n            if (mem == NULL) {\n                // 0x41431c\n                free((int64_t *)v21);\n                function_414fe0(v27, v53);\n                v24 = (int64_t)&g18;\n                goto lab_0x413f94;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x414108\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x414112\n            uint32_t v62 = (int32_t)v59; // 0x414115\n            int64_t v63; // 0x413e10\n            if (v62 >= 8) {\n                // 0x414224\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x41423e\n                int64_t v66 = v61 - v65; // 0x414242\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x41424d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x41425e\n                    int64_t v70 = v69 & 0xffffffff; // 0x41425e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x41425b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4142ef\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x414127\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x41412b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x41413b\n            int64_t v74 = v60 - 1; // 0x41413f\n            uint32_t v75 = (int32_t)v73; // 0x414144\n            int64_t v76; // 0x413e10\n            if (v75 >= 8) {\n                // 0x414272\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x41427c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x41428c\n                int64_t v80 = v74 - v79; // 0x414290\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x41429b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4142ab\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4142a9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x414306\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41430e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x414156\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x41415a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x414353\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x41416e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x413ffe;\n            } else {\n                goto lab_0x41417c;\n            }\n        }\n    }\n  lab_0x413ff0:;\n    int64_t v93 = v23; // 0x413e10\n    int64_t v94 = v22; // 0x413e10\n    int64_t v95 = v21; // 0x413e10\n    goto lab_0x413ff0_2;\n  lab_0x413f35:;\n    int64_t * mem3 = malloc(size); // 0x413f35\n    int64_t v97 = (int64_t)&g18; // 0x413f40\n    int64_t v98; // 0x413e10\n    int64_t path; // 0x413e10\n    if (mem3 == NULL) {\n        goto lab_0x413f12;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x413f35\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x413f56;\n    }\n  lab_0x413e4a:;\n    int64_t str = v1 == NULL ? (int64_t)&g18 : (int64_t)v1; // 0x413e3d\n    char v100 = *v3; // 0x413e4a\n    int64_t v101; // 0x413e10\n    if (v100 == 0) {\n        // 0x413ea4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x413e10\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x413e10\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x413e90\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x413e97;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x413e60\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x413e6d\n        char v107 = *(char *)v106; // 0x413e72\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x413ea4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x413e7b\n    v104 = v103 + 1;\n  lab_0x413e97:\n    // 0x413ea4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x413f12:;\n    char * v108 = (char *)v97;\n    g72 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x413e4a;\n  lab_0x413f56:;\n    int64_t v109 = v98 + path; // 0x413f56\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x413f82\n    v24 = (int64_t)&g18;\n    if (fd >= 0) {\n        // 0x413fb1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4142e2\n            close(fd);\n            v24 = (int64_t)&g18;\n        } else {\n            // 0x413fd5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x413ff0_2:;\n                uint64_t v96 = *v32; // 0x413ff0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x41417c;\n                } else {\n                    goto lab_0x413ffe;\n                }\n            }\n          lab_0x41418f:\n            // 0x41418f\n            function_414fe0(v27, v19);\n            v24 = (int64_t)&g18;\n            if (v18 != 0) {\n                // 0x4141ae\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x413f94;\n  lab_0x413efb:;\n    int64_t * mem4 = malloc(size2); // 0x413efb\n    v97 = (int64_t)&g18;\n    if (mem4 != NULL) {\n        // 0x413fa1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x413f56;\n    } else {\n        goto lab_0x413f12;\n    }\n  lab_0x413f94:\n    // 0x413f94\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x413f12;\n}\n"
        },
        {
            "funcName": "function_414380",
            "funcStartAddr": "414380",
            "funcEndAddr": "4143ca",
            "decompiledFuncCode": "int64_t function_414380(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x414392\n    return function_40eaf0((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_4143d0",
            "funcStartAddr": "4143d0",
            "funcEndAddr": "4143f3",
            "decompiledFuncCode": "int64_t function_4143d0(int64_t a1) {\n    int64_t result = function_4100e0(24); // 0x4143d9\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_414400",
            "funcStartAddr": "414400",
            "funcEndAddr": "41442f",
            "decompiledFuncCode": "int64_t function_414400(void) {\n    // 0x414400\n    int64_t v1; // 0x414400\n    int64_t v2 = function_414620(v1, v1, v1); // 0x414401\n    int64_t result = 0; // 0x41440e\n    if (v2 != 0) {\n        // 0x414410\n        result = function_4100e0(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x41442d\n    return result;\n}\n"
        },
        {
            "funcName": "function_414430",
            "funcStartAddr": "414430",
            "funcEndAddr": "414434",
            "decompiledFuncCode": "int64_t function_414430(int64_t result) {\n    // 0x414430\n    return result;\n}\n"
        },
        {
            "funcName": "function_414440",
            "funcStartAddr": "414440",
            "funcEndAddr": "414535",
            "decompiledFuncCode": "int64_t function_414440(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x414447\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x41445b\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x41445f\n    int64_t v4 = *v3; // 0x414463\n    int64_t result = *v2; // 0x414463\n    int64_t v5; // 0x414440\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x4144a0\n        int64_t v9; // 0x414440\n        int64_t v10; // 0x414440\n        if (v7 >= a2) {\n            // 0x414468\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x4144ff\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x4144b4\n            int64_t v12 = 256 * v8 | 255; // 0x4144b8\n            v8 = v12;\n            int64_t v13 = v11; // 0x4144c1\n            while (v12 < a2) {\n                // 0x4144b0\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x4144c3\n            int64_t v14; // bp-64, 0x414440\n            function_414930(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x4144d5\n            int64_t v16 = 256 * v7 | 255; // 0x4144e7\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x4144ee\n            v15++;\n            int64_t v18 = v16; // 0x4144f4\n            int64_t v19 = v17; // 0x4144f4\n            while (v16 < a2) {\n                // 0x4144d8\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x4144f6\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x4144ff\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x414476\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x414528\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x4144ff\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x41450f:\n    // 0x41450f\n    return result;\n}\n"
        },
        {
            "funcName": "function_414540",
            "funcStartAddr": "414540",
            "funcEndAddr": "41455e",
            "decompiledFuncCode": "int64_t function_414540(int64_t a1) {\n    // 0x414540\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_414560",
            "funcStartAddr": "414560",
            "funcEndAddr": "4145b1",
            "decompiledFuncCode": "int64_t function_414560(int64_t a1) {\n    int64_t v1 = function_414a90(a1); // 0x414570\n    int32_t * v2 = __errno_location(); // 0x414578\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4145c0",
            "funcStartAddr": "4145c0",
            "funcEndAddr": "41461d",
            "decompiledFuncCode": "int64_t function_4145c0(int64_t a1) {\n    // 0x4145c0\n    function_40dfd0(a1);\n    int32_t * err_num = __errno_location(); // 0x4145d7\n    char * format; // 0x4145c0\n    if (*err_num == 0) {\n        // 0x41460f\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x4145e9\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x4145f5\n    error(g28, *err_num, format);\n    return &g76;\n}\n"
        },
        {
            "funcName": "function_414620",
            "funcStartAddr": "414620",
            "funcEndAddr": "41490f",
            "decompiledFuncCode": "int64_t function_414620(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_4100e0(0x1038); // 0x41473d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x4145c0;\n        *(int64_t *)(result + 16) = 0;\n        // 0x414692\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_415060(a1, \"rb\"); // 0x414647\n        int64_t result2 = 0; // 0x414652\n        if (stream != 0) {\n            // 0x414658\n            result2 = function_4100e0(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x414674\n            *(int64_t *)(result2 + 8) = 0x4145c0;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x414692\n        return result2;\n    }\n    int64_t result3 = function_4100e0(0x1038); // 0x4146ad\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x4146c3\n    *(int64_t *)(result3 + 8) = 0x4145c0;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x4146e1\n    int64_t v2; // 0x414620\n    int128_t pid2; // bp-72, 0x414620\n    if (fd < 0) {\n        // 0x414768\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x414787\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x41470b\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x414728\n            function_414d90(v1);\n            // 0x414692\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x414896\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x4148a2\n        uint64_t v7 = v6 + v4; // 0x4148a8\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x414728\n            function_414d90(v1);\n            // 0x414692\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x4148d1\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x4148dd\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x4148f5\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x414728\n            function_414d90(v1);\n            // 0x414692\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x41479d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x4147a4\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x4147c0\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x4147be\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x4147cf\n    if (v16 >= 2048) {\n        // 0x414728\n        function_414d90(v1);\n        // 0x414692\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x4147ea\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x4147f1\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x41480f\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x41480d\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x41481e\n    if (v21 >= 2048) {\n        // 0x414728\n        function_414d90(v1);\n        // 0x414692\n        return result3;\n    }\n    // 0x41482e\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x414846\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x41484d\n    if (v23 == 0) {\n        // 0x414728\n        function_414d90(v1);\n        // 0x414692\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x41485f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x41485d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x414728\n    function_414d90(v1);\n    // 0x414692\n    return result3;\n}\n"
        },
        {
            "funcName": "function_414910",
            "funcStartAddr": "414910",
            "funcEndAddr": "414915",
            "decompiledFuncCode": "int64_t function_414910(int64_t a1, int64_t a2) {\n    // 0x414910\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x414910\n    return result;\n}\n"
        },
        {
            "funcName": "function_414920",
            "funcStartAddr": "414920",
            "funcEndAddr": "414925",
            "decompiledFuncCode": "int64_t function_414920(int64_t a1, int64_t a2) {\n    // 0x414920\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x414920\n    return result;\n}\n"
        },
        {
            "funcName": "function_414930",
            "funcStartAddr": "414930",
            "funcEndAddr": "414a8c",
            "decompiledFuncCode": "int64_t function_414930(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x41494f\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x41498a\n        int64_t v3 = a3 - result; // 0x414995\n        if (v3 == 0) {\n            // 0x41499a\n            return result;\n        }\n        int64_t v4 = v3; // 0x414995\n        int64_t v5 = result + v1; // 0x414992\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x414964\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x41498a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x41499a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x4149b0\n    int64_t v9 = a3; // 0x4149c2\n    int64_t * v10; // 0x414930\n    int64_t v11; // 0x414930\n    int64_t v12; // 0x414930\n    int64_t v13; // 0x414930\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x4149d3\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x4149ea\n            function_414ae0(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x414a45;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_414ae0(32, v17); // 0x414a1d\n            int64_t v19 = v18 - 2048; // 0x414a22\n            if (v19 == 0) {\n                // 0x414a68\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x414a34\n        function_414ae0(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x414a80\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x414a45:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x414a4e\n    *(int64_t *)24 = v11 - v13;\n    // 0x41499a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_414a90",
            "funcStartAddr": "414a90",
            "funcEndAddr": "414ad9",
            "decompiledFuncCode": "int64_t function_414a90(int64_t a1) {\n    // 0x414a90\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x414ad0\n        return 0;\n    }\n    // 0x414aba\n    return function_414fe0(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_414ae0",
            "funcStartAddr": "414ae0",
            "funcEndAddr": "414d85",
            "decompiledFuncCode": "int64_t function_414ae0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x414ae0\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x414ae7\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x414af6\n    int64_t v4 = *v1 + 1; // 0x414b00\n    *v1 = v4;\n    int64_t v5 = a2; // 0x414b11\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x414b22\n    int64_t v9 = *v8; // 0x414b22\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x414b28\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x414b43\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x414b62\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x414b68\n    int64_t v14 = *v13; // 0x414b68\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x414b6c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x414b90\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x414ba5\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x414bac\n    int64_t v19 = *v18; // 0x414bac\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x414bb0\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x414bcb\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x414bdd\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x414be8\n    int64_t v24 = *v23; // 0x414be8\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x414bf9\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x414c10\n    int64_t v27 = v7 + 32; // 0x414c13\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x414c2d\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x414b18\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x414c4b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x414c5a\n    int64_t v33 = *v32; // 0x414c5a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x414c60\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x414c85\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x414c96\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x414c9d\n    int64_t v38 = *v37; // 0x414c9d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x414ca4\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x414cc8\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x414cdd\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x414ce4\n    int64_t v43 = *v42; // 0x414ce4\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x414ce8\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x414d03\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x414d15\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x414d20\n    int64_t v48 = *v47; // 0x414d20\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x414d31\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x414d48\n    int64_t result = v31 + 32; // 0x414d4b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x414d65\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x414c50\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x414d75\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_414d90",
            "funcStartAddr": "414d90",
            "funcEndAddr": "414fc4",
            "decompiledFuncCode": "int64_t function_414d90(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x414dd7\n    int64_t v2 = a1; // 0x414df3\n    int64_t * v3 = (int64_t *)v2; // 0x414df8\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x414dfb\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x414dfb\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x414dff\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x414dff\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x414e03\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x414e0a\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x414e0e\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x414e1b\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x414e1e\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x414e25\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x414e32\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x414e35\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x414e3c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x414e49\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x414e4c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x414e53\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x414e60\n    int64_t v21 = v5 - v20; // 0x414e66\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x414e70\n    uint64_t v23 = v11 - v22; // 0x414e79\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x414e84\n    int64_t v25 = v14 - v24; // 0x414e8e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x414e9d\n    int64_t v27 = v23 + v25; // 0x414ea3\n    int64_t v28 = v17 - v26; // 0x414ea6\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x414eb1\n    int64_t v30 = v28 + v25; // 0x414eb4\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x414eca\n    while (v1 != v2) {\n        // 0x414df8\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x414ed0\n    uint64_t v33 = *v32 + v28; // 0x414ed0\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x414ed4\n    int64_t v35 = *v34 + v29; // 0x414ed4\n    int64_t * v36 = (int64_t *)v31; // 0x414ed8\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x414ede\n    int64_t v38 = *v36 + v20 - v35; // 0x414ee2\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x414ee9\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x414eed\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x414ef1\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x414ef7\n    uint64_t v43 = *v39 + v22 - v41; // 0x414efe\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x414f05\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x414f09\n    int64_t v46 = *v42 + v24 - v45; // 0x414f12\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x414f19\n    uint64_t v48 = *v44 + v26 - v47; // 0x414f22\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x414f29\n    int64_t v50 = v35 - v49; // 0x414f32\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x414f3c\n    uint64_t v52 = v41 - v51; // 0x414f45\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x414f50\n    int64_t result = v52 + v50; // 0x414f53\n    int64_t v54 = v45 - v53; // 0x414f5a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x414f65\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x414f69\n    int64_t v57 = v54 + v52; // 0x414f6f\n    int64_t v58 = v47 - v56; // 0x414f72\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x414f7d\n    int64_t v60 = v58 + v54; // 0x414f80\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x414ed0\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x414f9c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_414fd0",
            "funcStartAddr": "414fd0",
            "funcEndAddr": "414fde",
            "decompiledFuncCode": "int64_t function_414fd0(int64_t a1, int64_t a2) {\n    // 0x414fd0\n    int64_t v1; // 0x414fd0\n    return function_410460(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_414fe0",
            "funcStartAddr": "414fe0",
            "funcEndAddr": "41505b",
            "decompiledFuncCode": "int64_t function_414fe0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x414fe7\n    if (fileno(stream) < 0) {\n        // 0x415047\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x414ffa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x41502b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x415047\n            return fclose(stream);\n        }\n    }\n    // 0x414ffc\n    if ((int32_t)function_4105a0(a1, v1) == 0) {\n        // 0x415047\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x415008\n    int32_t v3 = *v2; // 0x415010\n    int64_t result = fclose(stream); // 0x41501e\n    if (v3 != 0) {\n        // 0x415050\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x415020\n    return result;\n}\n"
        },
        {
            "funcName": "function_415060",
            "funcStartAddr": "415060",
            "funcEndAddr": "4150f3",
            "decompiledFuncCode": "int64_t function_415060(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x415067\n    int64_t result = (int64_t)file; // 0x415067\n    if (file == NULL) {\n        // 0x415081\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x415077\n    if (v1 >= 3) {\n        // 0x415081\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_414fd0((int64_t)v1, v2); // 0x41509a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x4150d8\n        function_414fe0(result, v2);\n        // 0x415081\n        return 0;\n    }\n    // 0x41509e\n    if ((int32_t)function_414fe0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x4150b0\n        if (v4 != NULL) {\n            // 0x415081\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x4150bd\n    close(fd);\n    // 0x415081\n    return 0;\n}\n"
        },
        {
            "funcName": "function_415100",
            "funcStartAddr": "415100",
            "funcEndAddr": "41515d",
            "decompiledFuncCode": "int64_t function_415100(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x415100\n    return function_4025e0();\n}\n"
        },
        {
            "funcName": "function_415160",
            "funcStartAddr": "415160",
            "funcEndAddr": "415161",
            "decompiledFuncCode": "int64_t function_415160(void) {\n    // 0x415160\n    int64_t result; // 0x415160\n    return result;\n}\n"
        },
        {
            "funcName": "function_415170",
            "funcStartAddr": "415170",
            "funcEndAddr": "415188",
            "decompiledFuncCode": "int64_t function_415170(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x415170\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g24);\n}\n"
        },
        {
            "funcName": "function_415188",
            "funcStartAddr": "415188",
            "funcEndAddr": "4151a8",
            "decompiledFuncCode": "int64_t function_415188(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g20; // 0x415192\n    while (*(int64_t *)v1 != -1) {\n        // 0x415193\n        v1 -= 8;\n    }\n    // 0x4151a4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mv.elf"
}