{
    "funcInfo": [
        {
            "funcName": "function_401650",
            "funcStartAddr": "401650",
            "funcEndAddr": "401655",
            "decompiledFuncCode": "int64_t function_401650(void) {\n    // 0x401650\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401655",
            "funcStartAddr": "401655",
            "funcEndAddr": "40165a",
            "decompiledFuncCode": "int64_t function_401655(void) {\n    // 0x401655\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40165a",
            "funcStartAddr": "40165a",
            "funcEndAddr": "40165f",
            "decompiledFuncCode": "int64_t function_40165a(void) {\n    // 0x40165a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40165f",
            "funcStartAddr": "40165f",
            "funcEndAddr": "401664",
            "decompiledFuncCode": "int64_t function_40165f(void) {\n    // 0x40165f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401664",
            "funcStartAddr": "401664",
            "funcEndAddr": "401669",
            "decompiledFuncCode": "int64_t function_401664(void) {\n    // 0x401664\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401669",
            "funcStartAddr": "401669",
            "funcEndAddr": "40166e",
            "decompiledFuncCode": "int64_t function_401669(void) {\n    // 0x401669\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40166e",
            "funcStartAddr": "40166e",
            "funcEndAddr": "401673",
            "decompiledFuncCode": "int64_t function_40166e(void) {\n    // 0x40166e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401680",
            "funcStartAddr": "401680",
            "funcEndAddr": "401a70",
            "decompiledFuncCode": "int64_t function_401680(int64_t a1, int64_t a2) {\n    // 0x401680\n    function_401ef0(a2);\n    int64_t v1; // 0x401680\n    if ((int32_t)function_4049a0(0x401e50, a2, v1) != 0) {\n        // 0x4019e0\n        error(1, *__errno_location(), dcgettext(NULL, \"The atexit library function failed\", 5));\n    }\n    if ((int32_t)a1 != 2) {\n        // 0x401a0f\n        function_401b50((int64_t)g24);\n        // 0x40195c\n        return 2;\n    }\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x4016b9\n    int64_t v3 = *v2; // 0x4016b9\n    bool v4; // 0x401680\n    int64_t v5 = v4 ? -1 : 1; // 0x4016ca\n    int64_t v6 = (int64_t)\"--help\"; // 0x401680\n    int64_t v7 = v3; // 0x401680\n    int64_t v8 = 7; // 0x4016ca\n    unsigned char v9 = *(char *)v7; // 0x4016ca\n    char v10 = *(char *)v6; // 0x4016ca\n    char v11 = v10; // 0x4016ca\n    bool v12 = false; // 0x4016ca\n    while (v9 == v10) {\n        v8--;\n        v6 += v5;\n        v7 += v5;\n        v11 = v9;\n        v12 = true;\n        if (v8 == 0) {\n            // break -> \n            break;\n        }\n        v9 = *(char *)v7;\n        v10 = *(char *)v6;\n        v11 = v10;\n        v12 = false;\n    }\n    unsigned char v13 = v11;\n    int64_t v14 = (int64_t)!((v9 < v13 | v12)) - (int64_t)(v9 < v13); // 0x4016cf\n    if ((int32_t)v14 == 0) {\n        // 0x401a25\n        function_401b50((int64_t)g21);\n        // 0x40195c\n        return v14 & 0xffffffff;\n    }\n    char * str = (char *)v3; // 0x4016e4\n    if (strcmp(str, \"--version\") == 0) {\n        // 0x40194a\n        function_401db0(\"code\");\n        // 0x40195c\n        return 0;\n    }\n    struct _IO_FILE * file = fopen(str, \"r\"); // 0x4016f9\n    if (file == NULL) {\n        // 0x401a3e\n        fprintf(g24, \"%s: \", \"r\");\n        function_4041e0(*v2);\n        // 0x40195c\n        return 1;\n    }\n    int64_t v15 = 1026; // bp-48, 0x40170a\n    int64_t v16 = function_403eb0(1026); // bp-56, 0x401722\n    int64_t v17 = function_403eb0(1026); // 0x401727\n    *(char *)v17 = 0;\n    if (fgets((char *)&g27, 257, file) == NULL) {\n        // 0x401a67\n        return function_401bb0(*v2);\n    }\n    // 0x40174d\n    if (fwrite((int64_t *)&g27, 1, 256, g21) != 256) {\n        // 0x401998\n        function_401be0((int64_t)&g27);\n        // UNREACHABLE\n    }\n    // 0x401774\n    if (fclose(file) == -1) {\n        // 0x401a67\n        return function_401bb0(*v2);\n    }\n    int32_t v18 = __getdelim((char **)&v16, (int32_t *)&v15, 10, g22); // 0x4017a6\n    int64_t v19 = v17; // 0x4017ad\n    int64_t v20 = v16; // 0x4017ad\n    if (v18 < 1) {\n      lab_0x4019c7:\n        // 0x4019c7\n        free((int64_t *)v20);\n        free((int64_t *)v19);\n        // 0x40195c\n        return (int32_t)&g37 ^ (int32_t)&g37;\n    }\n    // 0x4017b3\n    char v21; // bp-58, 0x401680\n    int64_t v22 = &v21;\n    int32_t v23 = v18; // 0x4017a6\n    int64_t v24 = 1026; // 0x40192e\n    int64_t v25 = v17;\n    int64_t v26 = 0;\n    int64_t v27; // 0x401680\n    int64_t v28; // 0x401680\n    int64_t v29; // 0x401680\n    int64_t v30; // 0x401680\n    char v31; // 0x401680\n    int64_t v32; // 0x401680\n    int64_t v33; // 0x401680\n    while (true) {\n      lab_0x4017b3:;\n        int64_t v34 = v26;\n        v27 = v25;\n        v33 = v24;\n        *(char *)(v16 - 1 + (int64_t)v23) = 0;\n        char v35 = *(char *)v16; // 0x4017c4\n        char v36 = v35; // 0x4017c9\n        int64_t v37 = v16; // 0x4017c9\n        if (v35 != 0) {\n            int64_t v38 = v37;\n            if (v36 >= 127) {\n                // 0x4017d7\n                *(char *)v38 = 63;\n            }\n            int64_t v39 = v38 + 1; // 0x4017da\n            char v40 = *(char *)v39; // 0x4017de\n            while (v40 != 0) {\n                // 0x4017d0\n                v38 = v39;\n                if (v40 >= 127) {\n                    // 0x4017d7\n                    *(char *)v38 = 63;\n                }\n                // 0x4017da\n                v39 = v38 + 1;\n                v40 = *(char *)v39;\n            }\n            char v41 = *(char *)v27; // 0x4017ea\n            int64_t v42 = v16; // 0x4017f1\n            int64_t v43 = v27; // 0x4017f1\n            if (!((v41 == 0 | *(char *)v16 != v41))) {\n                int64_t v44 = v43 + 1; // 0x40180c\n                int64_t v45 = v42 + 1; // 0x401810\n                char v46 = *(char *)v44; // 0x401814\n                v42 = v45;\n                v43 = v44;\n                while (!((v46 == 0 | *(char *)v45 != v46))) {\n                    // 0x40180c\n                    v44 = v43 + 1;\n                    v45 = v42 + 1;\n                    v46 = *(char *)v44;\n                    v42 = v45;\n                    v43 = v44;\n                }\n            }\n        }\n        // 0x40181f\n        v26 = 0;\n        int64_t v47 = v26 - v34 + 14; // 0x40182c\n        int64_t v48 = v47 & 0xffffffff; // 0x40182c\n        uint32_t v49 = (int32_t)v47; // 0x40182f\n        if (v49 < 29) {\n            // 0x401988\n            v32 = v48;\n            if (_IO_putc(v49, g21) == -1) {\n                // break -> 0x401998\n                break;\n            }\n        } else {\n            // 0x401838\n            v32 = 30;\n            if (_IO_putc(30, g21) == 1) {\n                // break -> 0x401998\n                break;\n            }\n            int64_t v50 = (int64_t)g21;\n            int64_t v51 = function_401d50(v50, v48, 1); // 0x401859\n            v32 = v50;\n            if ((char)v51 == 0) {\n                // break -> 0x401998\n                break;\n            }\n        }\n        int64_t v52 = v16 + (0x100000000 * v26 >> 32); // 0x40186e\n        char v53 = *(char *)v52; // 0x401871\n        v31 = v53;\n        v28 = v52;\n        v30 = v16;\n        if (v53 != 0) {\n            char v54; // 0x401680\n            while (true) {\n              lab_0x401880:\n                // 0x401880\n                v29 = v28;\n                v54 = v31;\n                char v55 = *(char *)(v29 + 1); // 0x401880\n                if (v55 == 0) {\n                    // break -> 0x4019a0\n                    break;\n                }\n                char str2 = v54; // bp-59, 0x40188e\n                char v56 = *(char *)&g27; // 0x401893\n                v21 = v55;\n                if (v56 != 0) {\n                    int64_t v57 = (int64_t)&g27 + 1; // 0x4018b0\n                    char v58 = *(char *)v57; // 0x4018b7\n                    int64_t v59; // 0x401680\n                    char v60; // 0x401680\n                    int64_t v61; // 0x401680\n                    int64_t v62; // 0x401680\n                    int64_t v63; // 0x401680\n                    int64_t v64; // 0x4018d5\n                    char v65; // 0x4018d9\n                    int64_t v66; // 0x4018dd\n                    uint64_t v67; // 0x4018fa\n                    int64_t v68; // 0x4018b0\n                    char v69; // 0x4018b7\n                    int32_t v70; // 0x401906\n                    if (v54 == v56 == v55 == v58) {\n                        v62 = v61;\n                        v64 = v22;\n                        v63 = v62;\n                        v64++;\n                        v65 = *(char *)v64;\n                        v66 = v63 + 1;\n                        if (v65 == 0) {\n                            // 0x4018e6\n                            v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                            if (v67 % 2 != 0) {\n                                // 0x401970\n                                fputs(&str2, g21);\n                                goto lab_0x401918;\n                            } else {\n                                // 0x401906\n                                v70 = v67;\n                                _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                goto lab_0x401918;\n                            }\n                        }\n                        // 0x4018d0\n                        v63 = v66;\n                        while (*(char *)v66 == v65) {\n                            // 0x4018d5\n                            v64++;\n                            v65 = *(char *)v64;\n                            v66 = v63 + 1;\n                            if (v65 == 0) {\n                                // 0x4018e6\n                                v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                if (v67 % 2 != 0) {\n                                    // 0x401970\n                                    fputs(&str2, g21);\n                                    goto lab_0x401918;\n                                } else {\n                                    // 0x401906\n                                    v70 = v67;\n                                    _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                    goto lab_0x401918;\n                                }\n                            }\n                            // 0x4018d0\n                            v63 = v66;\n                        }\n                        // 0x4018b0\n                        v68 = v62 + 1;\n                        v69 = *(char *)v68;\n                        v59 = v68;\n                        v60 = v69;\n                        v61 = v68;\n                        while (v54 == v55 == v55 == v69) {\n                            // 0x4018c1\n                            v62 = v61;\n                            v64 = v22;\n                            v63 = v62;\n                            v64++;\n                            v65 = *(char *)v64;\n                            v66 = v63 + 1;\n                            if (v65 == 0) {\n                                // 0x4018e6\n                                v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                if (v67 % 2 != 0) {\n                                    // 0x401970\n                                    fputs(&str2, g21);\n                                    goto lab_0x401918;\n                                } else {\n                                    // 0x401906\n                                    v70 = v67;\n                                    _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                    goto lab_0x401918;\n                                }\n                            }\n                            // 0x4018d0\n                            v63 = v66;\n                            while (*(char *)v66 == v65) {\n                                // 0x4018d5\n                                v64++;\n                                v65 = *(char *)v64;\n                                v66 = v63 + 1;\n                                if (v65 == 0) {\n                                    // 0x4018e6\n                                    v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                    if (v67 % 2 != 0) {\n                                        // 0x401970\n                                        fputs(&str2, g21);\n                                        goto lab_0x401918;\n                                    } else {\n                                        // 0x401906\n                                        v70 = v67;\n                                        _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                        goto lab_0x401918;\n                                    }\n                                }\n                                // 0x4018d0\n                                v63 = v66;\n                            }\n                            // 0x4018b0\n                            v68 = v62 + 1;\n                            v69 = *(char *)v68;\n                            v59 = v68;\n                            v60 = v69;\n                            v61 = v68;\n                        }\n                    }\n                    char v71 = v58;\n                    int64_t v72 = v57; // 0x4018aa\n                    while (v71 != 0) {\n                        // 0x4018b0\n                        v57 = v72 + 1;\n                        v58 = *(char *)v57;\n                        v59 = v57;\n                        v60 = v58;\n                        v61 = v57;\n                        if (v54 == v71 == v55 == v58) {\n                            v62 = v61;\n                            v64 = v22;\n                            v64++;\n                            v65 = *(char *)v64;\n                            v66 = v62 + 1;\n                            if (v65 == 0) {\n                                // 0x4018e6\n                                v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                if (v67 % 2 != 0) {\n                                    // 0x401970\n                                    fputs(&str2, g21);\n                                    goto lab_0x401918;\n                                } else {\n                                    // 0x401906\n                                    v70 = v67;\n                                    _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                    goto lab_0x401918;\n                                }\n                            }\n                            // 0x4018d0\n                            v63 = v66;\n                            while (*(char *)v66 == v65) {\n                                // 0x4018d5\n                                v64++;\n                                v65 = *(char *)v64;\n                                v66 = v63 + 1;\n                                if (v65 == 0) {\n                                    // 0x4018e6\n                                    v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                    if (v67 % 2 != 0) {\n                                        // 0x401970\n                                        fputs(&str2, g21);\n                                        goto lab_0x401918;\n                                    } else {\n                                        // 0x401906\n                                        v70 = v67;\n                                        _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                        goto lab_0x401918;\n                                    }\n                                }\n                                // 0x4018d0\n                                v63 = v66;\n                            }\n                            // 0x4018b0\n                            v68 = v62 + 1;\n                            v69 = *(char *)v68;\n                            v59 = v68;\n                            v60 = v69;\n                            while (v54 == v55 == v55 == v69) {\n                                // 0x4018c1\n                                v62 = v68;\n                                v64 = v22;\n                                v64++;\n                                v65 = *(char *)v64;\n                                v66 = v62 + 1;\n                                if (v65 == 0) {\n                                    // 0x4018e6\n                                    v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                    if (v67 % 2 != 0) {\n                                        // 0x401970\n                                        fputs(&str2, g21);\n                                        goto lab_0x401918;\n                                    } else {\n                                        // 0x401906\n                                        v70 = v67;\n                                        _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                        goto lab_0x401918;\n                                    }\n                                }\n                                // 0x4018d0\n                                v63 = v66;\n                                while (*(char *)v66 == v65) {\n                                    // 0x4018d5\n                                    v64++;\n                                    v65 = *(char *)v64;\n                                    v66 = v63 + 1;\n                                    if (v65 == 0) {\n                                        // 0x4018e6\n                                        v67 = v66 - (int64_t)strlen(&str2) - (int64_t)&g27;\n                                        if (v67 % 2 != 0) {\n                                            // 0x401970\n                                            fputs(&str2, g21);\n                                            goto lab_0x401918;\n                                        } else {\n                                            // 0x401906\n                                            v70 = v67;\n                                            _IO_putc((int32_t)(v70 < 0) + v70 >> 1 | 128, g21);\n                                            goto lab_0x401918;\n                                        }\n                                    }\n                                    // 0x4018d0\n                                    v63 = v66;\n                                }\n                                // 0x4018b0\n                                v68 = v62 + 1;\n                                v69 = *(char *)v68;\n                                v59 = v68;\n                                v60 = v69;\n                            }\n                        }\n                        // 0x4018a8\n                        v71 = v60;\n                        v72 = v59;\n                    }\n                }\n                // 0x401970\n                fputs(&str2, g21);\n                goto lab_0x401918;\n            }\n            // 0x4019a0\n            _IO_putc((int32_t)v54, g21);\n            v30 = v16;\n        }\n        goto lab_0x40192e;\n    }\n    // 0x401998\n    function_401be0(v32);\n    // UNREACHABLE\n  lab_0x401918:;\n    int64_t v73 = v29 + 2; // 0x401918\n    char v74 = *(char *)v73; // 0x40191c\n    v31 = v74;\n    v28 = v73;\n    if (v74 == 0) {\n        // 0x401929\n        v30 = v16;\n        goto lab_0x40192e;\n    }\n    goto lab_0x401880;\n  lab_0x40192e:\n    // 0x40192e\n    v25 = v30;\n    v24 = v15;\n    v16 = v27;\n    v15 = v33;\n    v23 = __getdelim((char **)&v16, (int32_t *)&v15, 10, g22);\n    v19 = v25;\n    v20 = v16;\n    if (v23 < 1) {\n        goto lab_0x4019c7;\n    }\n    goto lab_0x4017b3;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a70",
            "funcEndAddr": "401a9b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a70\n    int64_t v1; // 0x401a70\n    __libc_start_main(0x401680, (int32_t)a4, (char **)&v1, (void (*)())0x404930, (void (*)())0x404990, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a9b",
            "funcStartAddr": "401a9b",
            "funcEndAddr": "401aba",
            "decompiledFuncCode": "int64_t function_401a9b(void) {\n    // 0x401a9b\n    return 0x607238;\n}\n"
        },
        {
            "funcName": "function_401aba",
            "funcStartAddr": "401aba",
            "funcEndAddr": "401af1",
            "decompiledFuncCode": "int64_t function_401aba(void) {\n    // 0x401aba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401af1",
            "funcStartAddr": "401af1",
            "funcEndAddr": "401b48",
            "decompiledFuncCode": "int64_t function_401af1(void) {\n    // 0x401af1\n    if (g25 != 0) {\n        // 0x401b47\n        int64_t result; // 0x401af1\n        return result;\n    }\n    int64_t v1 = g26; // 0x401b24\n    int64_t result2; // 0x401b36\n    if (g26 >= ((int64_t)&g10 - (int64_t)&g9 >> 3) - 1) {\n        // 0x401b36\n        result2 = function_401a9b();\n        g25 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g10 - (int64_t)&g9 >> 3) - 1) {\n        // 0x401b26\n        v1++;\n    }\n    // 0x401b1a\n    g26 = v1;\n    // 0x401b36\n    result2 = function_401a9b();\n    g25 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401b48",
            "funcStartAddr": "401b48",
            "funcEndAddr": "401b4d",
            "decompiledFuncCode": "int64_t function_401b48(void) {\n    // 0x401b48\n    return function_401aba();\n}\n"
        },
        {
            "funcName": "function_401b50",
            "funcStartAddr": "401b50",
            "funcEndAddr": "401ba6",
            "decompiledFuncCode": "int64_t function_401b50(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x401b7f\n    fprintf(stream, dcgettext(NULL, \"Usage: %s [--version | --help]\\nor     %s most_common_bigrams < file-list > locate-database\\n\", 5));\n    return fputs(dcgettext(NULL, \"\\nReport bugs to <bug-findutils@gnu.org>.\\n\", 5), stream);\n}\n"
        },
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401bd4",
            "decompiledFuncCode": "int64_t function_401bb0(int64_t a1) {\n    // 0x401bb0\n    error(1, *__errno_location(), \"%s\", (char *)a1);\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be0",
            "funcStartAddr": "401be0",
            "funcEndAddr": "401c10",
            "decompiledFuncCode": "int64_t function_401be0(int64_t a1) {\n    // 0x401be0\n    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c10",
            "funcStartAddr": "401c10",
            "funcEndAddr": "401d48",
            "decompiledFuncCode": "int64_t function_401c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x401c26\n    clearerr(stream);\n    int64_t data; // bp-44, 0x401c10\n    if (fread(&data, 4, 1, stream) != 1) {\n        // 0x401cd6\n        function_4035c0(0, 8, a2);\n        if (feof(stream) == 0) {\n            // 0x401d1e\n            error(1, *__errno_location(), dcgettext(NULL, \"error reading a word from %s\", 5));\n        } else {\n            // 0x401cf9\n            error(1, (int32_t)\"unexpected EOF in %s\" ^ (int32_t)\"unexpected EOF in %s\", dcgettext(NULL, \"unexpected EOF in %s\", 5));\n        }\n        // 0x401d19\n        abort();\n        // UNREACHABLE\n    }\n    // 0x401c4c\n    int64_t v1; // 0x401c10\n    int32_t v2 = v1;\n    int64_t result = llvm_bswap_i32((int32_t)data); // 0x401c55\n    if (v2 != 0) {\n        // 0x401cb6\n        return (v2 == 2 ? result : data) & 0xffffffff;\n    }\n    int64_t result2 = data & 0xffffffff; // 0x401c4c\n    if (result2 > a4) {\n        // 0x401c60\n        if (result <= a4) {\n            // 0x401c65\n            function_4035c0(0, 8, a2);\n            error(0, (int32_t)\"WARNING: locate database %s was built with a different byte order\" ^ (int32_t)\"WARNING: locate database %s was built with a different byte order\", dcgettext(NULL, \"WARNING: locate database %s was built with a different byte order\", 5));\n            *(int32_t *)a5 = 2;\n            return result;\n        }\n    } else {\n        // 0x401cc8\n        if (result > a4) {\n            // 0x401ccd\n            *(int32_t *)a5 = 1;\n        }\n    }\n    // 0x401cb6\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401d50",
            "funcStartAddr": "401d50",
            "funcEndAddr": "401db0",
            "decompiledFuncCode": "int64_t function_401d50(int64_t stream, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x401d54\n    int64_t data = v1; // bp-12, 0x401d54\n    int32_t v2 = a3; // 0x401d58\n    if (v2 == 0) {\n        // 0x401d8e\n        __assert_fail(\"endian_state_flag != GetwordEndianStateInitial\", \"word_io.c\", 167, \"putword\");\n        return &g37;\n    }\n    if (v2 == 2) {\n        // 0x401d61\n        data = llvm_bswap_i32((int32_t)v1);\n    }\n    int32_t items_written = fwrite(&data, 4, 1, (struct _IO_FILE *)stream); // 0x401d7d\n    return (int64_t)(items_written & -256) | (int64_t)(items_written == 1);\n}\n"
        },
        {
            "funcName": "function_401db0",
            "funcStartAddr": "401db0",
            "funcEndAddr": "401e2a",
            "decompiledFuncCode": "int64_t function_401db0(char * a1) {\n    // 0x401db0\n    int64_t v1; // 0x401db0\n    function_404110((int64_t)g24, v1);\n    char * v2 = dcgettext(NULL, \"Kevin Dalley\", 5); // 0x401dcf\n    char * v3 = dcgettext(NULL, \"James Youngman\", 5); // 0x401de3\n    function_403d80((int64_t)g21, (int64_t)a1, \"GNU findutils\", (int64_t)g13, (int64_t)dcgettext(NULL, \"Eric B. Decker\", 5), (int64_t)v3);\n    return (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_401e30",
            "funcStartAddr": "401e30",
            "funcEndAddr": "401e38",
            "decompiledFuncCode": "int64_t function_401e30(int64_t a1) {\n    // 0x401e30\n    g29 = a1;\n    int64_t result; // 0x401e30\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e40",
            "funcStartAddr": "401e40",
            "funcEndAddr": "401e48",
            "decompiledFuncCode": "int64_t function_401e40(int64_t a1) {\n    // 0x401e40\n    g28 = a1;\n    int64_t result; // 0x401e40\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e50",
            "funcStartAddr": "401e50",
            "funcEndAddr": "401eee",
            "decompiledFuncCode": "int64_t function_401e50(void) {\n    // 0x401e50\n    int32_t * err_num; // 0x401e66\n    if ((int32_t)function_404350((int64_t)g21) == 0) {\n        goto lab_0x401e7c;\n    } else {\n        // 0x401e66\n        err_num = __errno_location();\n        if (g28 == 0) {\n            goto lab_0x401e93;\n        } else {\n            // 0x401e77\n            if (*err_num != 32) {\n                goto lab_0x401e93;\n            } else {\n                goto lab_0x401e7c;\n            }\n        }\n    }\n  lab_0x401e7c:;\n    int64_t result = function_404350((int64_t)g24); // 0x401e83\n    if ((int32_t)result == 0) {\n        // 0x401e8c\n        return result;\n    }\n    // 0x401ece\n    _exit(g14);\n    // UNREACHABLE\n  lab_0x401e93:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401e9f\n    if (g29 == 0) {\n        // 0x401ed9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401eb3\n        error(0, *err_num, \"%s: %s\", (char *)function_403740((int64_t)g29), v1);\n    }\n    // 0x401ece\n    _exit(g14);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ef0",
            "funcStartAddr": "401ef0",
            "funcEndAddr": "401f89",
            "decompiledFuncCode": "int64_t function_401ef0(int64_t str) {\n    // 0x401ef0\n    if (str == 0) {\n        // 0x401f69\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g24);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401efe\n    int64_t result = (int64_t)found_char_pos; // 0x401efe\n    if (found_char_pos == NULL) {\n        // 0x401f59\n        g30 = str;\n        g23 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401f08\n    if (v1 - str < 7) {\n        // 0x401f59\n        g30 = str;\n        g23 = str;\n        return result;\n    }\n    // 0x401f18\n    bool v2; // 0x401ef0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401ef0\n    int64_t v5 = result - 6; // 0x401ef0\n    int64_t v6 = 7; // 0x401f26\n    unsigned char v7 = *(char *)v5; // 0x401f26\n    char v8 = *(char *)v4; // 0x401f26\n    char v9 = v8; // 0x401f26\n    bool v10 = false; // 0x401f26\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401f30\n    int64_t v13 = v1; // 0x401f30\n    int64_t v14 = 3; // 0x401f30\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401f59\n        g30 = str;\n        g23 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401f42\n    char v16 = *(char *)v12; // 0x401f42\n    char v17 = v16; // 0x401f42\n    bool v18 = false; // 0x401f42\n    while (v15 == v16) {\n        // 0x401f32\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401f4c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401f4e\n        v20 = result + 4;\n        g20 = v20;\n    }\n    // 0x401f59\n    g30 = v20;\n    g23 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f90",
            "funcStartAddr": "401f90",
            "funcEndAddr": "402082",
            "decompiledFuncCode": "int64_t function_401f90(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401fa4\n    int64_t result = (int64_t)v1; // 0x401fa4\n    if (result != a1) {\n        // 0x401fb1\n        return result;\n    }\n    int64_t v2 = function_4043c0(); // 0x401fc0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402076\n    if (v3 == 85) {\n        // 0x401fd0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402068\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g6 : (int64_t)&g1;\n            return result2;\n        }\n        char v4 = *v1; // 0x401ffe\n        int64_t result3 = v4 != 96 ? (int64_t)&g2 : (int64_t)&g5; // 0x40200b\n        // 0x401fb1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402068\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g6 : (int64_t)&g1;\n        return result2;\n    }\n    char v5 = *v1; // 0x40204d\n    int64_t result4 = v5 != 96 ? (int64_t)&g3 : (int64_t)&g4; // 0x40205a\n    // 0x401fb1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402090",
            "funcStartAddr": "402090",
            "funcEndAddr": "4020e9",
            "decompiledFuncCode": "int64_t function_402090(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402090\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4020da\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020f0",
            "funcStartAddr": "4020f0",
            "funcEndAddr": "403093",
            "decompiledFuncCode": "int64_t function_4020f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t str) {\n    // 0x4020f0\n    int32_t v1; // 0x4020f0\n    uint32_t v2 = v1;\n    int64_t v3 = str + 1;\n    int64_t v4 = 0; // 0x40212d\n    int64_t v5 = 0; // 0x40212d\n    int64_t v6; // 0x4020f0\n    int64_t v7; // 0x4020f0\n    int64_t v8; // 0x4020f0\n    int64_t v9; // 0x4020f0\n    int64_t v10; // 0x4020f0\n    int64_t v11; // 0x4020f0\n    int64_t v12; // 0x4020f0\n    int64_t v13; // 0x4020f0\n    int64_t v14; // 0x4020f0\n    int64_t v15; // 0x4020f0\n    int64_t v16; // 0x4020f0\n    int64_t v17; // 0x4020f0\n    int64_t v18; // 0x4020f0\n    int64_t v19; // 0x4020f0\n    int64_t v20; // 0x4020f0\n    int64_t v21; // 0x4020f0\n    int64_t v22; // 0x4020f0\n    int64_t v23; // 0x4020f0\n    int64_t v24; // 0x4020f0\n    int64_t result; // 0x4020f0\n    int64_t v25; // 0x4020f0\n    int64_t v26; // 0x4020f0\n    int64_t v27; // 0x4020f0\n    int32_t wc; // bp+116, 0x4020f0\n    int64_t ps; // bp+120, 0x4020f0\n    char v28; // 0x402820\n    int64_t v29; // 0x402820\n    int64_t v30; // 0x402c52\n    int64_t v31; // 0x402c6b\n    int64_t v32; // 0x4020f0\n    while (true) {\n      lab_0x402130_2:\n        // 0x402130\n        v20 = v19;\n        v14 = v13;\n        v8 = v7;\n        result = v4;\n        int64_t v33 = v5; // 0x4020f0\n        int64_t v34; // 0x402164\n        while (true) {\n          lab_0x402130:\n            // 0x402130\n            v12 = v33;\n            bool v35 = v8 == v12; // 0x40213b\n            if (v8 == -1) {\n                // 0x40213d\n                v35 = *(char *)(v12 + str) == 0;\n            }\n            // 0x40214b\n            if (v35) {\n                // break (via goto) -> 0x402b40\n                goto lab_0x402b40;\n            }\n            // 0x402154\n            v34 = v12 + str;\n            v28 = *(char *)v34;\n            v29 = v28;\n            g36 = v29;\n            v9 = v8;\n            v18 = v14;\n            v24 = v20;\n            v6 = v8;\n            v16 = v14;\n            v22 = v20;\n            switch (v28) {\n                case 0: {\n                    if (v2 % 2 == 0) {\n                        // 0x402931\n                        v11 = v8;\n                        v17 = v14;\n                        v23 = v20;\n                        v10 = v8;\n                        v15 = v14;\n                        v21 = v20;\n                        if (v32 == 0) {\n                            goto lab_0x4027a2;\n                        } else {\n                            goto lab_0x402249;\n                        }\n                    }\n                    // 0x402d50\n                    v33 = v12 + 1;\n                    goto lab_0x402130;\n                }\n                case 7: {\n                    goto lab_0x4024f8;\n                }\n                case 8: {\n                    goto lab_0x4024f8;\n                }\n                case 9: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 10: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 11: {\n                    goto lab_0x4024f8;\n                }\n                case 12: {\n                    goto lab_0x4024f8;\n                }\n                case 13: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 32: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 33: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 34: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 35: {\n                    goto lab_0x4024e1;\n                }\n                case 36: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 37: {\n                    goto lab_0x4024f8;\n                }\n                case 38: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 39: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 40: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 41: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 42: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 43: {\n                    goto lab_0x4024f8;\n                }\n                case 44: {\n                    goto lab_0x4024f8;\n                }\n                case 45: {\n                    goto lab_0x4024f8;\n                }\n                case 46: {\n                    goto lab_0x4024f8;\n                }\n                case 47: {\n                    goto lab_0x4024f8;\n                }\n                case 48: {\n                    goto lab_0x4024f8;\n                }\n                case 49: {\n                    goto lab_0x4024f8;\n                }\n                case 50: {\n                    goto lab_0x4024f8;\n                }\n                case 51: {\n                    goto lab_0x4024f8;\n                }\n                case 52: {\n                    goto lab_0x4024f8;\n                }\n                case 53: {\n                    goto lab_0x4024f8;\n                }\n                case 54: {\n                    goto lab_0x4024f8;\n                }\n                case 55: {\n                    goto lab_0x4024f8;\n                }\n                case 56: {\n                    goto lab_0x4024f8;\n                }\n                case 57: {\n                    goto lab_0x4024f8;\n                }\n                case 58: {\n                    goto lab_0x4024f8;\n                }\n                case 59: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 60: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 61: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 62: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 63: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 65: {\n                    goto lab_0x4024f8;\n                }\n                case 66: {\n                    goto lab_0x4024f8;\n                }\n                case 67: {\n                    goto lab_0x4024f8;\n                }\n                case 68: {\n                    goto lab_0x4024f8;\n                }\n                case 69: {\n                    goto lab_0x4024f8;\n                }\n                case 70: {\n                    goto lab_0x4024f8;\n                }\n                case 71: {\n                    goto lab_0x4024f8;\n                }\n                case 72: {\n                    goto lab_0x4024f8;\n                }\n                case 73: {\n                    goto lab_0x4024f8;\n                }\n                case 74: {\n                    goto lab_0x4024f8;\n                }\n                case 75: {\n                    goto lab_0x4024f8;\n                }\n                case 76: {\n                    goto lab_0x4024f8;\n                }\n                case 77: {\n                    goto lab_0x4024f8;\n                }\n                case 78: {\n                    goto lab_0x4024f8;\n                }\n                case 79: {\n                    goto lab_0x4024f8;\n                }\n                case 80: {\n                    goto lab_0x4024f8;\n                }\n                case 81: {\n                    goto lab_0x4024f8;\n                }\n                case 82: {\n                    goto lab_0x4024f8;\n                }\n                case 83: {\n                    goto lab_0x4024f8;\n                }\n                case 84: {\n                    goto lab_0x4024f8;\n                }\n                case 85: {\n                    goto lab_0x4024f8;\n                }\n                case 86: {\n                    goto lab_0x4024f8;\n                }\n                case 87: {\n                    goto lab_0x4024f8;\n                }\n                case 88: {\n                    goto lab_0x4024f8;\n                }\n                case 89: {\n                    goto lab_0x4024f8;\n                }\n                case 90: {\n                    goto lab_0x4024f8;\n                }\n                case 91: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 92: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 93: {\n                    goto lab_0x4024f8;\n                }\n                case 94: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 95: {\n                    goto lab_0x4024f8;\n                }\n                case 96: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 97: {\n                    goto lab_0x4024f8;\n                }\n                case 98: {\n                    goto lab_0x4024f8;\n                }\n                case 99: {\n                    goto lab_0x4024f8;\n                }\n                case 100: {\n                    goto lab_0x4024f8;\n                }\n                case 101: {\n                    goto lab_0x4024f8;\n                }\n                case 102: {\n                    goto lab_0x4024f8;\n                }\n                case 103: {\n                    goto lab_0x4024f8;\n                }\n                case 104: {\n                    goto lab_0x4024f8;\n                }\n                case 105: {\n                    goto lab_0x4024f8;\n                }\n                case 106: {\n                    goto lab_0x4024f8;\n                }\n                case 107: {\n                    goto lab_0x4024f8;\n                }\n                case 108: {\n                    goto lab_0x4024f8;\n                }\n                case 109: {\n                    goto lab_0x4024f8;\n                }\n                case 110: {\n                    goto lab_0x4024f8;\n                }\n                case 111: {\n                    goto lab_0x4024f8;\n                }\n                case 112: {\n                    goto lab_0x4024f8;\n                }\n                case 113: {\n                    goto lab_0x4024f8;\n                }\n                case 114: {\n                    goto lab_0x4024f8;\n                }\n                case 115: {\n                    goto lab_0x4024f8;\n                }\n                case 116: {\n                    goto lab_0x4024f8;\n                }\n                case 117: {\n                    goto lab_0x4024f8;\n                }\n                case 118: {\n                    goto lab_0x4024f8;\n                }\n                case 119: {\n                    goto lab_0x4024f8;\n                }\n                case 120: {\n                    goto lab_0x4024f8;\n                }\n                case 121: {\n                    goto lab_0x4024f8;\n                }\n                case 122: {\n                    goto lab_0x4024f8;\n                }\n                case 123: {\n                    goto lab_0x4024bd;\n                }\n                case 124: {\n                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 125: {\n                    goto lab_0x4024bd;\n                }\n                case 126: {\n                    goto lab_0x4024e1;\n                }\n                default: {\n                    goto lab_0x4027bd;\n                }\n            }\n        }\n      lab_0x4027bd:\n        if (v32 != 1) {\n            // 0x402bb0\n            ps = 0;\n            int64_t len = v8; // 0x402bbd\n            if (v8 == -1) {\n                // 0x402bbf\n                len = strlen((char *)str);\n            }\n            // 0x402beb\n            v30 = 0x100000000 * len >> 32;\n            v25 = 0;\n            while (true) {\n              lab_0x402c48:\n                // 0x402c48\n                v26 = v25;\n                uint64_t v36 = v26 + v12; // 0x402c4d\n                int64_t v37 = v36 + str;\n                v31 = function_4041b0(&wc, v37, v30 - v36);\n                v27 = v26;\n                switch (v31) {\n                    case 0: {\n                        goto lab_0x402f50_2;\n                    }\n                    case -1: {\n                        goto lab_0x402f50_2;\n                    }\n                    case -2: {\n                        // 0x402f93\n                        v27 = v26;\n                        if (v30 > v36) {\n                            // 0x402fce\n                            v27 = v26;\n                            int64_t v38 = v26; // 0x402fd1\n                            if (*(char *)v37 != 0) {\n                                int64_t v39 = v38 + 1; // 0x402fdf\n                                v27 = v39;\n                                while (v30 > v39 + v12) {\n                                    // 0x402fd8\n                                    v27 = v39;\n                                    v38 = v39;\n                                    if (*(char *)(v39 + v34) == 0) {\n                                        // break -> 0x402f50\n                                        break;\n                                    }\n                                    v39 = v38 + 1;\n                                    v27 = v39;\n                                }\n                            }\n                        }\n                        goto lab_0x402f50_2;\n                    }\n                    case 1: {\n                        goto lab_0x402c20;\n                    }\n                    default: {\n                        int64_t v40 = v36 + v3; // 0x402cba\n                        char v41 = *(char *)v40; // 0x402ccd\n                        unsigned char v42; // 0x4020f0\n                        if (v41 < 125) {\n                            // 0x402cd8\n                            v42 = (v41 + 37) % 64;\n                            if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                // 0x402cf2\n                                v6 = v30;\n                                v16 = 0x100000000 * v14 >> 32;\n                                v22 = 0x100000000 * v20 >> 32;\n                                return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                            }\n                        }\n                        // 0x402cc0\n                        v40++;\n                        while (v37 + v31 != v40) {\n                            // 0x402ccd\n                            v41 = *(char *)v40;\n                            if (v41 < 125) {\n                                // 0x402cd8\n                                v42 = (v41 + 37) % 64;\n                                if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                    // 0x402cf2\n                                    v6 = v30;\n                                    v16 = 0x100000000 * v14 >> 32;\n                                    v22 = 0x100000000 * v20 >> 32;\n                                    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n                                }\n                            }\n                            // 0x402cc0\n                            v40++;\n                        }\n                        goto lab_0x402c20;\n                    }\n                }\n            }\n            goto lab_0x402f50_2;\n        } else {\n            // 0x402808\n            __ctype_b_loc();\n            v9 = 0x100000000000000 * v8 >> 56;\n            v18 = v14;\n            v24 = v20;\n            goto lab_0x4024f8;\n        }\n    }\n  lab_0x402b40:\n    // 0x402b40\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (result != 0) {\n        // 0x402b95\n        if (result < v14) {\n            // 0x402b9e\n            *(char *)(v20 + result) = 0;\n        }\n        // 0x4028bc\n        return result;\n    }\n    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n  lab_0x402882_2:\n    // 0x4028bc\n    return function_402090(v22, v16, str, v6, 2, v2 & -3);\n  lab_0x402f50_2:;\n    uint64_t v43 = v27;\n    int64_t v44 = 0x100000000 * v14 >> 32;\n    int64_t v45 = 0x100000000 * v20 >> 32;\n    v9 = v30;\n    v18 = v44;\n    v24 = v45;\n    int64_t v46; // 0x4020f0\n    int64_t v47; // 0x4020f0\n    int64_t v48; // 0x4020f0\n    int64_t v49; // 0x4020f0\n    if (v43 < 2) {\n        goto lab_0x4024f8;\n    } else {\n        uint64_t v50 = v43 + v12; // 0x402d5e\n        int64_t v51 = v12 + 1; // 0x402e54\n        v49 = result;\n        v46 = v30;\n        v5 = v51;\n        v47 = v44;\n        v48 = v45;\n        int64_t v52 = v51; // 0x402e5b\n        int64_t v53 = result; // 0x402e5b\n        char v54 = v28; // 0x402e5b\n        if (v51 < v50) {\n            uint64_t v55 = v53;\n            if (v55 < v44) {\n                // 0x402e24\n                *(char *)(v55 + v45) = v54;\n            }\n            char v56 = *(char *)(v52 + str); // 0x402e28\n            int64_t v57 = v55 + 1; // 0x402e2d\n            int64_t v58 = v52 + 1; // 0x402e54\n            v49 = v57;\n            v46 = v30;\n            v5 = v58;\n            v47 = v44;\n            v48 = v45;\n            v52 = v58;\n            while (v58 < v50) {\n                // 0x402e1f\n                v55 = v57;\n                if (v55 < v44) {\n                    // 0x402e24\n                    *(char *)(v55 + v45) = v56;\n                }\n                // 0x402e28\n                v56 = *(char *)(v52 + str);\n                v57 = v55 + 1;\n                v58 = v52 + 1;\n                v49 = v57;\n                v46 = v30;\n                v5 = v58;\n                v47 = v44;\n                v48 = v45;\n                v52 = v58;\n            }\n        }\n        goto lab_0x4022c7;\n    }\n  lab_0x402c20:\n    // 0x402c20\n    iswprint(wc);\n    int64_t v59 = v31 + v26; // 0x402c38\n    int32_t v60 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402c3b\n    v25 = v59;\n    v27 = v59;\n    if (v60 != 0) {\n        // break -> 0x402f50\n        goto lab_0x402f50_2;\n    }\n    goto lab_0x402c48;\n  lab_0x4024f8:\n    // 0x4024f8\n    v11 = v9;\n    v17 = v18;\n    v23 = v24;\n    v10 = v9;\n    v15 = v18;\n    v21 = v24;\n    if (v32 == 0) {\n        goto lab_0x4027a2;\n    } else {\n        goto lab_0x402249;\n    }\n  lab_0x4024e1:\n    // 0x4024e1\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (v12 == 0) {\n        goto lab_0x402882_2;\n    }\n    goto lab_0x4024f8;\n  lab_0x4024bd:;\n    bool v61 = v8 == 1; // 0x4024c8\n    if (v8 == -1) {\n        // 0x4024ca\n        v61 = *(char *)v3 == 0;\n    }\n    // 0x4024d6\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    if (!v61) {\n        goto lab_0x4024f8;\n    } else {\n        goto lab_0x4024e1;\n    }\n  lab_0x4027a2:\n    // 0x4027a2\n    v49 = result;\n    v46 = v10;\n    v5 = v12 + 1;\n    v47 = v15;\n    v48 = v21;\n    goto lab_0x4022c7;\n  lab_0x402249:\n    // 0x402249\n    v10 = v11;\n    v15 = v17;\n    v21 = v23;\n    v6 = v11;\n    v16 = v17;\n    v22 = v23;\n    if ((*(int32_t *)((v29 / 8 & 28) + v32) & 1 << (int32_t)(v28 % 32)) != 0) {\n        goto lab_0x402882_2;\n    }\n    goto lab_0x4027a2;\n  lab_0x4022c7:\n    // 0x4022c7\n    if (v49 < v47) {\n        // 0x4022cc\n        char v62; // 0x4020f0\n        int64_t v63; // 0x4020f0\n        uint64_t v64; // 0x4020f0\n        *(char *)(v63 + v64) = v62;\n    }\n    // 0x4022d0\n    v4 = v49 + 1;\n    v7 = v46;\n    v13 = v47;\n    v19 = v48;\n    goto lab_0x402130_2;\n}\n"
        },
        {
            "funcName": "function_4030a0",
            "funcStartAddr": "4030a0",
            "funcEndAddr": "40323b",
            "decompiledFuncCode": "int64_t function_4030a0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x4030a2\n    int32_t * v3 = __errno_location(); // 0x4030bc\n    int64_t v4 = (int64_t)g16; // 0x4030c1\n    int32_t v5 = *v3; // 0x4030cb\n    int64_t v6 = v4; // 0x4030e1\n    if (*(int32_t *)0x607230 <= (int32_t)v2) {\n        int64_t v7 = v2 + 1; // 0x4030e3\n        int64_t v8 = 16 * v7 & 0xffffffff0; // 0x4030ed\n        int64_t v9; // 0x4030a0\n        if (g16 == &g17) {\n            int64_t v10 = function_403f00(0, v8); // 0x403217\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g17); // 0x40321c\n            *(int64_t *)&g16 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_403f00(v4, v8); // 0x403106\n            *(int64_t *)&g16 = v12;\n            v9 = v12;\n        }\n        // 0x40311a\n        v6 = v9;\n        uint32_t v13 = *(int32_t *)&g19; // 0x40311a\n        int32_t v14 = v7;\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g19 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x40314b\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403155\n    int64_t * v17 = (int64_t *)v15; // 0x403158\n    uint64_t v18 = *v17; // 0x403158\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x40315b\n    int64_t result = *v19; // 0x40315b\n    int64_t v20; // 0x4030a0\n    uint64_t v21 = function_402090(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x40317e\n    if (v18 > v21) {\n        // 0x4031f5\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403191\n    *v17 = v22;\n    if (result != (int64_t)&g31) {\n        // 0x4031a1\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_403eb0(v22); // 0x4031bb\n    *v19 = result2;\n    int64_t v23; // 0x4030a0\n    function_402090(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4031f5\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403240",
            "funcStartAddr": "403240",
            "funcEndAddr": "403274",
            "decompiledFuncCode": "int64_t function_403240(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403247\n    int64_t result = function_404070(a1 == 0 ? (int64_t)&g32 : a1, 56); // 0x403266\n    return result;\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "40328f",
            "decompiledFuncCode": "int64_t function_403280(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g32 : a1); // 0x40328c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "40329f",
            "decompiledFuncCode": "int64_t function_403290(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 : a1; // 0x403298\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g32;\n}\n"
        },
        {
            "funcName": "function_4032a0",
            "funcStartAddr": "4032a0",
            "funcEndAddr": "4032d3",
            "decompiledFuncCode": "int64_t function_4032a0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 + 8 : a1 + 8; // 0x4032b9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4032be\n    uint32_t v3 = *v2; // 0x4032be\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4032c2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4032e0",
            "funcStartAddr": "4032e0",
            "funcEndAddr": "4032f3",
            "decompiledFuncCode": "int64_t function_4032e0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g32 + 4 : a1 + 4); // 0x4032ec\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403300",
            "funcStartAddr": "403300",
            "funcEndAddr": "40332b",
            "decompiledFuncCode": "int64_t function_403300(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 : a1; // 0x403308\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403325\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40331c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g32;\n}\n"
        },
        {
            "funcName": "function_403330",
            "funcStartAddr": "403330",
            "funcEndAddr": "4033a2",
            "decompiledFuncCode": "int64_t function_403330(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g32 : a5; // 0x403352\n    int32_t * v2 = __errno_location(); // 0x40335b\n    uint32_t v3 = *(int32_t *)v1; // 0x40337b\n    int64_t result = function_402090(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40338a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033b0",
            "funcStartAddr": "4033b0",
            "funcEndAddr": "403491",
            "decompiledFuncCode": "int64_t function_4033b0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g32 : a4; // 0x4033d2\n    int32_t * v2 = __errno_location(); // 0x4033d8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4033f7\n    int32_t * v4 = (int32_t *)v1; // 0x4033fa\n    int64_t v5 = function_402090(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403415\n    int64_t v6 = v5 + 1; // 0x40341a\n    int64_t result = function_403eb0(v6); // 0x40342f\n    function_402090(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403474\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40347d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034a0",
            "funcStartAddr": "4034a0",
            "funcEndAddr": "4034aa",
            "decompiledFuncCode": "int64_t function_4034a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4034a0\n    return function_4033b0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4034b0",
            "funcStartAddr": "4034b0",
            "funcEndAddr": "403545",
            "decompiledFuncCode": "int64_t function_4034b0(void) {\n    uint32_t v1 = *(int32_t *)&g19; // 0x4034b0\n    int64_t v2 = v1; // 0x4034b0\n    int64_t v3 = v2; // 0x4034c4\n    if (v1 >= 2) {\n        int64_t v4 = &g19;\n        int64_t v5 = v4 + 16; // 0x4034e3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g37;\n        while (v5 != (int64_t)g16 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4034e0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g37;\n        }\n    }\n    int64_t v6 = v3; // 0x4034fd\n    if (g17 != 0x6073a0) {\n        // 0x4034ff\n        free((int64_t *)g17);\n        g17 = 256;\n        *(int64_t *)&g18 = (int64_t)&g31;\n        v6 = &g37;\n    }\n    int64_t result = v6; // 0x403521\n    if (g16 != &g17) {\n        // 0x403523\n        free(g16);\n        *(int64_t *)&g16 = (int64_t)&g17;\n        result = &g37;\n    }\n    // 0x403536\n    *(int32_t *)&g19 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403550",
            "funcStartAddr": "403550",
            "funcEndAddr": "403561",
            "decompiledFuncCode": "int64_t function_403550(void) {\n    // 0x403550\n    int64_t v1; // 0x403550\n    return function_4030a0(v1, v1, -1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403570",
            "funcStartAddr": "403570",
            "funcEndAddr": "40357a",
            "decompiledFuncCode": "int64_t function_403570(void) {\n    // 0x403570\n    int64_t v1; // 0x403570\n    return function_4030a0(v1, v1, v1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403580",
            "funcStartAddr": "403580",
            "funcEndAddr": "403596",
            "decompiledFuncCode": "int64_t function_403580(int64_t a1) {\n    // 0x403580\n    return function_4030a0(0, a1, -1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_4035a0",
            "funcStartAddr": "4035a0",
            "funcEndAddr": "4035b2",
            "decompiledFuncCode": "int64_t function_4035a0(int64_t a1, int64_t a2) {\n    // 0x4035a0\n    return function_4030a0(0, a1, a2, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "403628",
            "decompiledFuncCode": "int64_t function_4035c0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4035d0\n    return function_4030a0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403630",
            "funcStartAddr": "403630",
            "funcEndAddr": "403694",
            "decompiledFuncCode": "int64_t function_403630(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403640\n    return function_4030a0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4036a0",
            "funcStartAddr": "4036a0",
            "funcEndAddr": "4036ac",
            "decompiledFuncCode": "int64_t function_4036a0(int64_t a1, int64_t a2) {\n    // 0x4036a0\n    return function_4035c0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "4036bf",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4036b0\n    return function_403630(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "403730",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g32); // 0x4036cd\n    int128_t v2 = __asm_movdqa(g33); // 0x4036d5\n    int128_t v3 = __asm_movdqa(g34); // 0x4036dd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4036f2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403708\n    uint32_t v6 = *v5; // 0x403708\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40370d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4030a0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "40373d",
            "decompiledFuncCode": "int64_t function_403730(int64_t a1, int64_t a2) {\n    // 0x403730\n    return function_4036c0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403740",
            "funcStartAddr": "403740",
            "funcEndAddr": "403751",
            "decompiledFuncCode": "int64_t function_403740(int64_t a1) {\n    // 0x403740\n    return function_4036c0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "40376a",
            "decompiledFuncCode": "int64_t function_403760(void) {\n    // 0x403760\n    int64_t v1; // 0x403760\n    return function_4036c0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "4037de",
            "decompiledFuncCode": "int64_t function_403770(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40378a\n    return function_4030a0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4037e0",
            "funcStartAddr": "4037e0",
            "funcEndAddr": "40384c",
            "decompiledFuncCode": "int64_t function_4037e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g32); // 0x4037e7\n    int128_t v2 = __asm_movdqa(g33); // 0x4037ef\n    int128_t v3 = __asm_movdqa(g34); // 0x4037f7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403819\n    if (a2 == 0 || a3 == 0) {\n        // 0x403847\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40382a\n    return function_4030a0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403850",
            "funcStartAddr": "403850",
            "funcEndAddr": "403859",
            "decompiledFuncCode": "int64_t function_403850(void) {\n    // 0x403850\n    int64_t v1; // 0x403850\n    return function_4037e0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "403877",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403860\n    return function_4037e0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "403893",
            "decompiledFuncCode": "int64_t function_403880(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403880\n    return function_4037e0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4038a0",
            "funcStartAddr": "4038a0",
            "funcEndAddr": "4038aa",
            "decompiledFuncCode": "int64_t function_4038a0(void) {\n    // 0x4038a0\n    int64_t v1; // 0x4038a0\n    return function_4030a0(v1, v1, v1, &g15);\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "4038c2",
            "decompiledFuncCode": "int64_t function_4038b0(int64_t a1, int64_t a2) {\n    // 0x4038b0\n    return function_4030a0(0, a1, a2, &g15);\n}\n"
        },
        {
            "funcName": "function_4038d0",
            "funcStartAddr": "4038d0",
            "funcEndAddr": "4038e1",
            "decompiledFuncCode": "int64_t function_4038d0(void) {\n    // 0x4038d0\n    int64_t v1; // 0x4038d0\n    return function_4030a0(v1, v1, -1, &g15);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403906",
            "decompiledFuncCode": "int64_t function_4038f0(int64_t a1) {\n    // 0x4038f0\n    return function_4030a0(0, a1, -1, &g15);\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "403cf5",
            "decompiledFuncCode": "int64_t function_403910(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7, int64_t a8) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4039a0\n        fprintf(stream, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40392c\n        fprintf(stream, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403941\n    fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2015);\n    int32_t fputs_rc = fputs(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), stream); // 0x403980\n    if (a6 < 10) {\n        // 0x40398f\n        return fputs_rc;\n    }\n    char * format = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403a72\n    return fprintf(stream, format);\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d20",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // 0x403d07\n    int64_t result; // 0x403d1b\n    if (a5 == 0) {\n        // 0x403d1b\n        result = function_403910(a1, a2, a3, a4, a5, 0, (int64_t)&g37, (int64_t)&g37);\n        return result;\n    }\n    v1++;\n    int64_t v2 = v1; // 0x403d19\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403d10\n        v1++;\n        v2 = v1;\n    }\n    // 0x403d1b\n    result = function_403910(a1, a2, a3, a4, a5, v2, (int64_t)&g37, (int64_t)&g37);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d20",
            "funcStartAddr": "403d20",
            "funcEndAddr": "403d80",
            "decompiledFuncCode": "int64_t function_403d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403d20\n    int64_t v3 = &v2; // 0x403d20\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x403d53\n    int64_t v6; // 0x403d3d\n    int64_t * v7; // 0x403d5b\n    int64_t v8; // 0x403d5b\n    int64_t v9; // 0x403d67\n    if (v5 < 48) {\n        // 0x403d30\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x403d73\n            break;\n        }\n    } else {\n        // 0x403d5b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x403d73\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x403d51\n    while (v4 != 9) {\n        // 0x403d49\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403d30\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x403d73\n                break;\n            }\n        } else {\n            // 0x403d5b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x403d73\n                break;\n            }\n        }\n        // 0x403d49\n        v10 = 10;\n    }\n    int64_t result = function_403910(a1, a2, a3, a4, v3, v10, (int64_t)&g37, (int64_t)&g37); // 0x403d76\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "403e3c",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1, int64_t a2, char * a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403d80\n    int64_t v1; // bp-168, 0x403d80\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403d80\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403d80\n    int64_t v8; // 0x403d80\n    int64_t v9; // bp-56, 0x403d80\n    int64_t v10; // 0x403de5\n    int64_t v11; // 0x403e09\n    if ((int32_t)v6 < 48) {\n        // 0x403dd0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403e20\n            break;\n        }\n    } else {\n        // 0x403e02\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403e20\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403dfa\n    int64_t v13 = 10; // 0x403dfa\n    while (v5 != 9) {\n        // 0x403dfc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403dd0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403e20\n                break;\n            }\n        } else {\n            // 0x403e02\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403e20\n                break;\n            }\n        }\n        // 0x403df2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403e20\n    int64_t v14; // bp-136, 0x403d80\n    int64_t result = function_403910(a1, a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g37, (int64_t)&g37); // 0x403e2f\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "403eaa",
            "decompiledFuncCode": "int64_t function_403e40(int64_t a1) {\n    // 0x403e40\n    printf(dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    printf(dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * str = dcgettext(NULL, \"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\", 5); // 0x403e99\n    return fputs(str, g21);\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403eca",
            "decompiledFuncCode": "int64_t function_403eb0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x403eb4\n    if (size != 0 != (mem == NULL)) {\n        // 0x403ec3\n        return (int64_t)mem;\n    }\n    // 0x403ec5\n    function_4040d0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403ee3",
            "decompiledFuncCode": "int64_t function_403ed0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x403ed3\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403ed8\n        return function_403eb0((int64_t)v1);\n    }\n    // 0x403edd\n    function_4040d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ef0",
            "funcStartAddr": "403ef0",
            "funcEndAddr": "403ef2",
            "decompiledFuncCode": "int64_t function_403ef0(void) {\n    // 0x403ef0\n    int64_t v1; // 0x403ef0\n    return function_403eb0(v1);\n}\n"
        },
        {
            "funcName": "function_403f00",
            "funcStartAddr": "403f00",
            "funcEndAddr": "403f36",
            "decompiledFuncCode": "int64_t function_403f00(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x403f28\n        free(v1);\n        return (int32_t)&g37 ^ (int32_t)&g37;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x403f11\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x403f20\n        return (int64_t)mem;\n    }\n    // 0x403f31\n    function_4040d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f40",
            "funcStartAddr": "403f40",
            "funcEndAddr": "403f53",
            "decompiledFuncCode": "int64_t function_403f40(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x403f43\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403f48\n        return function_403f00(a1, (int64_t)v1);\n    }\n    // 0x403f4d\n    function_4040d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "403fd6",
            "decompiledFuncCode": "int64_t function_403f60(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1; // 0x403f60\n    if (a1 != 0) {\n        if (0xaaaaaaaaaaaaaaaa / a3 <= a2) {\n            // 0x403fd0\n            function_4040d0(a1);\n            // UNREACHABLE\n        }\n        // 0x403f8a\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_403f00(a1, v1 * a3);\n    }\n    // 0x403fa0\n    if (a2 == 0) {\n        int64_t v2 = 128 / a3 + (int64_t)(a3 >= 129); // 0x403fbd\n        *(int64_t *)a2 = v2;\n        return function_403f00(0, v2 * a3);\n    }\n    // 0x403f8a\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_403f00(a1, v1 * a3);\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "40402d",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1, uint64_t a2) {\n    if (a1 == 0) {\n        int64_t v1 = a2 == 0 ? 128 : a2; // 0x404018\n        *(int64_t *)a2 = v1;\n        return function_403f00(0, v1);\n    }\n    if (a2 >= 0xaaaaaaaaaaaaaaaa) {\n        // 0x404027\n        function_4040d0(a1);\n        // UNREACHABLE\n    }\n    int64_t v2 = a2 + 1 + a2 / 2; // 0x403ffd\n    *(int64_t *)a2 = v2;\n    return function_403f00(a1, v2);\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "404047",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, int64_t a2) {\n    // 0x404030\n    return (int64_t)memset((int64_t *)function_403eb0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404068",
            "decompiledFuncCode": "int64_t function_404050(void) {\n    // 0x404050\n    int64_t nmemb; // 0x404050\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)nmemb); // 0x404054\n    if (mem != NULL) {\n        // 0x40405e\n        return (int64_t)mem;\n    }\n    // 0x404063\n    function_4040d0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404098",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1, int64_t a2) {\n    int64_t v1 = function_403eb0(a2); // 0x40407f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040ce",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t str) {\n    int64_t v1 = (int64_t)strlen((char *)str) + 1; // 0x4040ae\n    int64_t v2 = function_403eb0(v1); // 0x4040b5\n    return (int64_t)memcpy((int64_t *)v2, (int64_t *)str, (int32_t)v1);\n}\n"
        },
        {
            "funcName": "function_4040d0",
            "funcStartAddr": "4040d0",
            "funcEndAddr": "404101",
            "decompiledFuncCode": "int64_t function_4040d0(int64_t a1) {\n    // 0x4040d0\n    error(g14, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "404150",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40412a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40412a\n        return fflush(stream);\n    }\n    // 0x404138\n    function_404150(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "4041a7",
            "decompiledFuncCode": "int64_t function_404150(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404150\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40415a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40418b\n    int64_t result = -1; // 0x404194\n    if (v1 != -1) {\n        // 0x404196\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4041a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "4041d9",
            "decompiledFuncCode": "int64_t function_4041b0(int32_t * pwc, int64_t wstr2, int64_t n) {\n    // 0x4041b0\n    int64_t ps; // 0x4041b0\n    int32_t result; // 0x4041d4\n    if (wstr2 == 0) {\n        int64_t wstr = (int64_t)&g7;\n        result = mbrtowc((int32_t *)0, (char *)wstr, (int32_t)1, (struct _TYPEDEF___mbstate_t *)ps);\n        return result;\n    }\n    // 0x4041b5\n    if (n == 0) {\n        // 0x4041ba\n        return -2;\n    }\n    // 0x4041d4\n    result = mbrtowc((int32_t *)(int64_t)pwc, (char *)wstr2, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "404253",
            "decompiledFuncCode": "int64_t function_4041e0(int64_t a1) {\n    int32_t v1 = *__errno_location(); // 0x4041f8\n    int64_t v2; // bp-264, 0x4041e0\n    function_404260(v1, &v2, 256);\n    if (a1 == 0) {\n        // 0x404219\n        return fprintf(g24, \"%s\\n\", &v2);\n    }\n    if ((char)(int64_t)g24 != 0) {\n        // 0x404238\n        return fprintf(g24, \"%s: %s\\n\", (char *)a1, &v2);\n    }\n    // 0x404219\n    return fprintf(g24, \"%s\\n\", &v2);\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "40434c",
            "decompiledFuncCode": "int64_t function_404260(uint32_t err_num, int64_t * buf, uint64_t a3) {\n    int64_t v1 = (int64_t)buf;\n    int64_t v2 = v1;\n    if (a3 < 2) {\n        // 0x404320\n        if (a3 != 0) {\n            // 0x40432b\n            *(char *)buf = 0;\n        }\n        // 0x4042ab\n        return 34;\n    }\n    int64_t v3 = err_num;\n    *(char *)buf = 0;\n    int32_t * v4 = __errno_location(); // 0x404283\n    int32_t v5 = *v4; // 0x404293\n    int64_t v6 = __xpg_strerror_r(v3, v1, a3); // 0x404296\n    int64_t v7; // 0x404260\n    if ((int32_t)v6 < 0) {\n        int64_t v8 = (int64_t)*v4; // 0x4042c3\n        v7 = v8;\n        if ((char)v1 != 0) {\n            // 0x4042a7\n            *v4 = v5;\n            // 0x4042ab\n            return v8 & 0xffffffff;\n        }\n    } else {\n        int64_t v9 = v6 & 0xffffffff; // 0x40429b\n        v7 = v9;\n        if ((char)v1 != 0) {\n            // 0x4042a7\n            *v4 = v5;\n            // 0x4042ab\n            return v9 & 0xffffffff;\n        }\n    }\n    int32_t buf_len = a3; // 0x4042d1\n    char * str = strerror_r(err_num, (char *)buf, buf_len); // 0x4042d1\n    int32_t len = strlen(str); // 0x4042de\n    v2 = (int64_t)str;\n    if ((int64_t)len < a3) {\n        // 0x4042ed\n        memcpy(buf, (int64_t *)str, len + 1);\n    } else {\n        // 0x404338\n        memcpy(buf, (int64_t *)str, buf_len - 1);\n        *(char *)(a3 - 1 + v1) = 0;\n    }\n    // 0x4042f9\n    if (v7 != 22) {\n        // 0x4042a7\n        *v4 = v5;\n        // 0x4042ab\n        return v7 & 0xffffffff;\n    }\n    // 0x4042ff\n    if (*(char *)&v2 == 0) {\n        // 0x404304\n        snprintf((char *)buf, buf_len, \"Unknown error %d\", v3);\n    }\n    // 0x4042a7\n    *v4 = v5;\n    // 0x4042ab\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404350",
            "funcStartAddr": "404350",
            "funcEndAddr": "4043b5",
            "decompiledFuncCode": "int64_t function_404350(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404357\n    int32_t v1 = __fpending(stream); // 0x404357\n    int32_t is_ferror = ferror(stream); // 0x404362\n    int32_t v2 = fclose(stream); // 0x40436c\n    if (is_ferror != 0) {\n        // 0x404398\n        if (v2 == 0) {\n            // 0x40439c\n            *__errno_location() = 0;\n        }\n        // 0x40438e\n        return 0xffffffff;\n    }\n    // 0x404375\n    if (v2 == 0) {\n        // 0x40438e\n        return 0;\n    }\n    int64_t result = 0xffffffff; // 0x40437c\n    if (v1 == 0) {\n        // 0x40437e\n        result = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40438e\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "404922",
            "decompiledFuncCode": "int64_t function_4043c0(void) {\n    char * v1 = nl_langinfo(14); // 0x4043d6\n    char * v2 = g35; // 0x4043db\n    char * v3; // 0x4043c0\n    int64_t v4; // 0x4043c0\n    int64_t v5; // 0x4043c0\n    int64_t v6; // 0x4043c0\n    int64_t v7; // 0x4043c0\n    int32_t size; // 0x4043c0\n    int32_t size2; // 0x4043c0\n    int32_t len; // 0x404492\n    int64_t v8; // 0x404492\n    char * env_val; // 0x40447d\n    if (v2 == NULL) {\n        // 0x404478\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 116;\n        v4 = 102;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 101;\n        if (env_val == NULL) {\n            goto lab_0x4044e5;\n        } else {\n            // 0x40448a\n            size = 116;\n            v4 = 102;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 101;\n            if (*env_val == 0) {\n                goto lab_0x4044e5;\n            } else {\n                // 0x40448f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40447d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x404915\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4044e5;\n                    } else {\n                        // 0x404889\n                        size2 = len + 14;\n                        goto lab_0x4044ab;\n                    }\n                } else {\n                    goto lab_0x4044ab;\n                }\n            }\n        }\n    } else {\n        // 0x4043c0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4043fa;\n    }\n  lab_0x40472c:;\n    // 0x40472c\n    int64_t v10; // 0x4043c0\n    int64_t v11 = v10;\n    int64_t v12; // 0x4043c0\n    int64_t v13 = v12;\n    struct _IO_FILE * stream; // 0x40456b\n    int32_t v14 = __uflow(stream); // 0x40472f\n    int64_t v15 = v13; // 0x404739\n    int32_t v16 = v14; // 0x404739\n    int64_t v17 = v11; // 0x404739\n    int64_t v18 = v13; // 0x404739\n    int64_t v19 = v11; // 0x404739\n    if (v14 == -1) {\n        // break -> 0x40473f\n        goto lab_0x40473f;\n    }\n    goto lab_0x4045b9;\n  lab_0x4045ae:;\n    // 0x4045ae\n    int64_t v116; // 0x4043c0\n    int64_t v137 = v116;\n    int64_t v115; // 0x4043c0\n    int64_t v138 = v115;\n    int64_t v114; // 0x4043c0\n    int64_t v139 = v114;\n    int64_t * v30; // 0x4045a0\n    *v30 = v138 + 1;\n    unsigned char v140 = *(char *)v138; // 0x4045b6\n    v15 = v139;\n    v16 = v140;\n    v17 = v137;\n    goto lab_0x4045b9;\n  lab_0x4045b9:;\n    int64_t v20 = v17;\n    int32_t c = v16;\n    int64_t v21 = v15;\n    int64_t v22; // 0x4043c0\n    int32_t v23; // bp-120, 0x4043c0\n    int32_t v24; // bp-184, 0x4043c0\n    int64_t v25; // 0x4043c0\n    int64_t v26; // 0x404588\n    int64_t v27; // 0x40458d\n    int64_t * v28; // 0x4045a4\n    switch (c) {\n        case 32: {\n            // 0x4045a0\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x4045a0_2;\n        }\n        case 10: {\n            // 0x4045a0\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x4045a0_2;\n        }\n        case 9: {\n            // 0x4045a0\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x4045a0_2;\n        }\n        case 35: {\n            uint64_t v29 = *v30; // 0x404791\n            uint64_t v31 = *v28; // 0x404795\n            int32_t v32; // 0x4043c0\n            char v33; // 0x4043c0\n            unsigned char v34; // 0x404778\n            int32_t v35; // 0x40479e\n            if (v29 < v31) {\n                // 0x404770\n                *v30 = v29 + 1;\n                v34 = *(char *)v29;\n                v32 = v34;\n                v33 = 1;\n            } else {\n                // 0x40479b\n                v35 = __uflow(stream);\n                v32 = v35;\n                v33 = v35 != -1;\n            }\n            char v36 = v33;\n            int32_t v37 = v32;\n            while (v37 != 10 && v36 != 0) {\n                // 0x404791\n                v29 = *v30;\n                v31 = *v28;\n                if (v29 < v31) {\n                    // 0x404770\n                    *v30 = v29 + 1;\n                    v34 = *(char *)v29;\n                    v32 = v34;\n                    v33 = 1;\n                } else {\n                    // 0x40479b\n                    v35 = __uflow(stream);\n                    v32 = v35;\n                    v33 = v35 != -1;\n                }\n                // 0x404780\n                v36 = v33;\n                v37 = v32;\n            }\n            // 0x40486f\n            v18 = v21;\n            v19 = v20;\n            if (v37 == -1) {\n                // break -> 0x40473f\n                break;\n            }\n            // 0x4045a0\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x4045a0_2;\n        }\n        default: {\n            // 0x4045cf\n            ungetc(c, stream);\n            int32_t items_assigned = fscanf(stream, \"%50s %50s\", &v24, &v23); // 0x4045e7\n            int64_t v38 = v27; // 0x4045ef\n            v18 = v21;\n            v19 = v20;\n            if (items_assigned < 2) {\n                // break -> 0x40473f\n                break;\n            }\n            int64_t v39 = v38;\n            int32_t v40 = *(int32_t *)v39; // 0x4045f8\n            int64_t v41 = v39 + 4; // 0x4045fa\n            int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x404606\n            uint32_t v43 = v42 & -0x7f7f7f80; // 0x404608\n            v38 = v41;\n            while (v43 == 0) {\n                // 0x4045f8\n                v39 = v38;\n                v40 = *(int32_t *)v39;\n                v41 = v39 + 4;\n                v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n                v43 = v42 & -0x7f7f7f80;\n                v38 = v41;\n            }\n            int32_t v44 = (v42 & 0x8080) == 0 ? v43 / 0x10000 : v43; // 0x404619\n            int64_t v45 = v39 + 6; // 0x40461c\n            unsigned char v46 = (char)v44; // 0x404626\n            int64_t v47 = -1 - v46 < v46 ? 4 : 3; // 0x40462b\n            int64_t v48 = v26; // 0x40462f\n            int64_t v49 = v48;\n            int32_t v50 = *(int32_t *)v49; // 0x404632\n            int64_t v51 = v49 + 4; // 0x404634\n            int32_t v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80); // 0x404640\n            uint32_t v53 = v52 & -0x7f7f7f80; // 0x404642\n            v48 = v51;\n            while (v53 == 0) {\n                // 0x404632\n                v49 = v48;\n                v50 = *(int32_t *)v49;\n                v51 = v49 + 4;\n                v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80);\n                v53 = v52 & -0x7f7f7f80;\n                v48 = v51;\n            }\n            int64_t v54 = (v42 & 0x8080) == 0 ? v45 : v41; // 0x404620\n            int64_t v55 = v54 - v47 - v27; // 0x40462f\n            int32_t v56 = (v52 & 0x8080) == 0 ? v53 / 0x10000 : v53; // 0x404658\n            int64_t v57 = (v52 & 0x8080) == 0 ? v49 + 6 : v51; // 0x40465f\n            unsigned char v58 = (char)v56; // 0x404665\n            int64_t v59 = -1 - v58 < v58 ? 4 : 3; // 0x404668\n            int64_t v60 = v57 - v59 - v26; // 0x40466c\n            int64_t v61 = v60 + v55; // 0x404675\n            int64_t * v62; // 0x4043c0\n            int64_t v63; // 0x4043c0\n            if (v21 != 0) {\n                int64_t v64 = v61 + v21; // 0x4047ab\n                int64_t * mem = realloc((int64_t *)v20, (int32_t)v64 + 3); // 0x4047c0\n                v63 = v64;\n                v62 = mem;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v61 + 3); // 0x404691\n                v63 = v61;\n                v62 = mem2;\n            }\n            int64_t * v65 = v62;\n            if (v65 == NULL) {\n                // 0x4048cc\n                free((int64_t *)v20);\n                fclose(stream);\n                goto lab_0x404544;\n            }\n            int64_t v66 = v63;\n            int64_t v67 = (int64_t)v65;\n            int64_t v68 = v66 + 2;\n            int64_t v69 = v55 + 1; // 0x4046b8\n            int64_t v70 = v68 - v60 + v67;\n            int64_t v71 = -2 - v55 + v70; // 0x4046c2\n            uint32_t v72 = (int32_t)v69; // 0x4046c5\n            if (v72 >= 8) {\n                int32_t v73 = v24; // 0x4047d4\n                *(int64_t *)v71 = (int64_t)v73;\n                int64_t v74 = (v69 & 0xffffffff) - 8;\n                int64_t v75 = *(int64_t *)(v74 + v27); // 0x4047dd\n                *(int64_t *)(v71 + v74) = v75;\n                int64_t v76 = v71 + 8 & -8; // 0x4047ee\n                int64_t v77 = v71 - v76; // 0x4047f2\n                uint32_t v78 = (int32_t)(v77 + v69); // 0x4047fd\n                if (v78 >= 8) {\n                    int64_t v79 = v27 - v77; // 0x4047f7\n                    uint32_t v80 = v78 & -8; // 0x404819\n                    int64_t v81 = 0; // 0x4043c0\n                    int64_t v82 = v81;\n                    int64_t v83 = v82 + 8; // 0x40480e\n                    int64_t v84 = *(int64_t *)(v79 + v82); // 0x404811\n                    *(int64_t *)(v82 + v76) = v84;\n                    v81 = v83 & 0xffffffff;\n                    while (v80 > (int32_t)v83) {\n                        // 0x40480b\n                        v82 = v81;\n                        v83 = v82 + 8;\n                        v84 = *(int64_t *)(v79 + v82);\n                        *(int64_t *)(v82 + v76) = v84;\n                        v81 = v83 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v69 & 4) != 0) {\n                    int32_t v85 = v24; // 0x40489f\n                    *(int32_t *)v71 = v85;\n                    int64_t v86 = (v69 & 0xffffffff) - 4;\n                    int32_t v87 = *(int32_t *)(v86 + v27); // 0x4048a7\n                    *(int32_t *)(v71 + v86) = v87;\n                } else {\n                    if (v72 != 0) {\n                        int32_t v88 = v24; // 0x4046db\n                        *(char *)v71 = (char)v88;\n                        if ((v69 & 2) != 0) {\n                            int64_t v89 = (v69 & 0xffffffff) - 2;\n                            int16_t v90 = *(int16_t *)(v89 + v27); // 0x4048f2\n                            *(int16_t *)(v71 + v89) = v90;\n                        }\n                    }\n                }\n            }\n            int64_t v91 = v60 + 1; // 0x4046eb\n            int64_t v92 = v70 - 1; // 0x4046ef\n            uint32_t v93 = (int32_t)v91; // 0x4046f4\n            if (v93 >= 8) {\n                int32_t v94 = v23; // 0x404822\n                *(int64_t *)v92 = (int64_t)v94;\n                int64_t v95 = (v91 & 0xffffffff) - 8;\n                int64_t v96 = *(int64_t *)(v95 + v26); // 0x40482e\n                *(int64_t *)(v92 + v95) = v96;\n                int64_t v97 = v70 + 7 & -8; // 0x40483c\n                int64_t v98 = v92 - v97; // 0x404840\n                uint32_t v99 = (int32_t)(v98 + v91); // 0x40484b\n                if (v99 >= 8) {\n                    int64_t v100 = v26 - v98; // 0x404845\n                    uint32_t v101 = v99 & -8; // 0x404866\n                    int64_t v102 = 0; // 0x4043c0\n                    int64_t v103 = v102;\n                    int64_t v104 = v103 + 8; // 0x40485b\n                    int64_t v105 = *(int64_t *)(v100 + v103); // 0x40485e\n                    *(int64_t *)(v103 + v97) = v105;\n                    v102 = v104 & 0xffffffff;\n                    while (v101 > (int32_t)v104) {\n                        // 0x404859\n                        v103 = v102;\n                        v104 = v103 + 8;\n                        v105 = *(int64_t *)(v100 + v103);\n                        *(int64_t *)(v103 + v97) = v105;\n                        v102 = v104 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v91 & 4) != 0) {\n                    int32_t v106 = v23; // 0x4048b6\n                    *(int32_t *)v92 = v106;\n                    int64_t v107 = (v91 & 0xffffffff) - 4;\n                    int32_t v108 = *(int32_t *)(v107 + v26); // 0x4048be\n                    *(int32_t *)(v92 + v107) = v108;\n                } else {\n                    if (v93 != 0) {\n                        int32_t v109 = v23; // 0x40470a\n                        *(char *)v92 = (char)v109;\n                        if ((v91 & 2) != 0) {\n                            int64_t v110 = (v91 & 0xffffffff) - 2;\n                            int16_t v111 = *(int16_t *)(v110 + v26); // 0x404905\n                            *(int16_t *)(v92 + v110) = v111;\n                        }\n                    }\n                }\n            }\n            uint64_t v112 = *v30; // 0x40471e\n            uint64_t v113 = *v28; // 0x404722\n            v114 = v68;\n            v115 = v112;\n            v116 = v67;\n            v12 = v68;\n            v10 = v67;\n            if (v112 < v113) {\n                goto lab_0x4045ae;\n            } else {\n                goto lab_0x40472c;\n            }\n        }\n    }\n  lab_0x4044e5:;\n    int64_t * mem3 = malloc(size); // 0x4044e5\n    int64_t v117 = (int64_t)&g7; // 0x4044f0\n    int64_t v118; // 0x4043c0\n    int64_t path; // 0x4043c0\n    if (mem3 == NULL) {\n        goto lab_0x4044c2;\n    } else {\n        int64_t v119 = (int64_t)mem3; // 0x4044e5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v119) = 47;\n        path = v119;\n        v118 = v4;\n        goto lab_0x404506;\n    }\n  lab_0x4043fa:;\n    int64_t str = v1 == NULL ? (int64_t)&g7 : (int64_t)v1; // 0x4043ed\n    char v120 = *v3; // 0x4043fa\n    int64_t v121; // 0x4043c0\n    if (v120 == 0) {\n        // 0x404454\n        v121 = str;\n        return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n    }\n    char v122 = v120; // 0x4043c0\n    int64_t v123 = v7;\n    char * str2 = (char *)v123;\n    int64_t v124; // 0x4043c0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v125 = v123 + 1;\n        if (v122 == 42) {\n            // 0x404440\n            v124 = v125;\n            if (*(char *)v125 == 0) {\n                goto lab_0x404447;\n            }\n        }\n        int64_t str3 = v125 + (int64_t)strlen(str2); // 0x404410\n        int64_t v126 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40441d\n        char v127 = *(char *)v126; // 0x404422\n        v122 = v127;\n        if (v127 == 0) {\n            // 0x404454\n            v121 = str;\n            return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n        }\n        v123 = v126;\n        str2 = (char *)v123;\n    }\n    // 0x40442b\n    v124 = v123 + 1;\n  lab_0x404447:\n    // 0x404454\n    v121 = v124 + (int64_t)strlen(str2);\n    return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n  lab_0x4044c2:;\n    char * v128 = (char *)v117;\n    g35 = v128;\n    v3 = v128;\n    v7 = v117;\n    goto lab_0x4043fa;\n  lab_0x404506:;\n    int64_t v129 = v118 + path; // 0x404506\n    *(int64_t *)v129 = 0x2e74657372616863;\n    *(int16_t *)(v129 + 12) = 115;\n    *(int32_t *)(v129 + 8) = 0x61696c61;\n    if (open((char *)path, O_RDONLY) >= 0) {\n        // 0x404561\n        int32_t fd; // 0x404532\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x404892\n            close(fd);\n        } else {\n            int64_t v130 = (int64_t)stream; // 0x40456b\n            v26 = &v23;\n            v27 = &v24;\n            v30 = (int64_t *)(v130 + 8);\n            v28 = (int64_t *)(v130 + 16);\n            v25 = 0;\n            v22 = 0;\n            while (true) {\n              lab_0x4045a0_2:;\n                int64_t v131 = v22;\n                int64_t v132 = v25;\n                uint64_t v133 = *v30; // 0x4045a0\n                uint64_t v134 = *v28; // 0x4045a4\n                v114 = v132;\n                v115 = v133;\n                v116 = v131;\n                v12 = v132;\n                v10 = v131;\n                if (v133 >= v134) {\n                    goto lab_0x40472c;\n                } else {\n                    goto lab_0x4045ae;\n                }\n            }\n          lab_0x40473f:;\n            int64_t v135 = v18;\n            fclose(stream);\n            if (v135 != 0) {\n                int64_t v136 = v19;\n                *(char *)(v136 + v135) = 0;\n            }\n        }\n    }\n    goto lab_0x404544;\n  lab_0x4044ab:;\n    int64_t * mem4 = malloc(size2); // 0x4044ab\n    v117 = (int64_t)&g7;\n    if (mem4 != NULL) {\n        // 0x404551\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v118 = v8;\n        goto lab_0x404506;\n    } else {\n        goto lab_0x4044c2;\n    }\n  lab_0x404544:\n    // 0x404544\n    free((int64_t *)path);\n    v117 = (int64_t)&g7;\n    goto lab_0x4044c2;\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "40498d",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404930\n    return function_4012d0();\n}\n"
        },
        {
            "funcName": "function_404990",
            "funcStartAddr": "404990",
            "funcEndAddr": "404991",
            "decompiledFuncCode": "int64_t function_404990(void) {\n    // 0x404990\n    int64_t result; // 0x404990\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "4049b8",
            "decompiledFuncCode": "int64_t function_4049a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4049a0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g12);\n}\n"
        },
        {
            "funcName": "function_4049b8",
            "funcStartAddr": "4049b8",
            "funcEndAddr": "4049d8",
            "decompiledFuncCode": "int64_t function_4049b8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g8; // 0x4049c2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4049c3\n        v1 -= 8;\n    }\n    // 0x4049d4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_code.elf"
}