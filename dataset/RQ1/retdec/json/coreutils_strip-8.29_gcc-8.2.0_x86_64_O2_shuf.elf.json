{
    "funcInfo": [
        {
            "funcName": "function_401d60",
            "funcStartAddr": "401d60",
            "funcEndAddr": "401d65",
            "decompiledFuncCode": "int64_t function_401d60(void) {\n    // 0x401d60\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d65",
            "funcStartAddr": "401d65",
            "funcEndAddr": "401d6a",
            "decompiledFuncCode": "int64_t function_401d65(void) {\n    // 0x401d65\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d6a",
            "funcStartAddr": "401d6a",
            "funcEndAddr": "401d6f",
            "decompiledFuncCode": "int64_t function_401d6a(void) {\n    // 0x401d6a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d6f",
            "funcStartAddr": "401d6f",
            "funcEndAddr": "401d74",
            "decompiledFuncCode": "int64_t function_401d6f(void) {\n    // 0x401d6f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d74",
            "funcStartAddr": "401d74",
            "funcEndAddr": "401d79",
            "decompiledFuncCode": "int64_t function_401d74(void) {\n    // 0x401d74\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d79",
            "funcStartAddr": "401d79",
            "funcEndAddr": "401d7e",
            "decompiledFuncCode": "int64_t function_401d79(void) {\n    // 0x401d79\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d7e",
            "funcStartAddr": "401d7e",
            "funcEndAddr": "401d83",
            "decompiledFuncCode": "int64_t function_401d7e(void) {\n    // 0x401d7e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d83",
            "funcStartAddr": "401d83",
            "funcEndAddr": "401d88",
            "decompiledFuncCode": "int64_t function_401d83(void) {\n    // 0x401d83\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d88",
            "funcStartAddr": "401d88",
            "funcEndAddr": "401d8d",
            "decompiledFuncCode": "int64_t function_401d88(void) {\n    // 0x401d88\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d8d",
            "funcStartAddr": "401d8d",
            "funcEndAddr": "401d92",
            "decompiledFuncCode": "int64_t function_401d8d(void) {\n    // 0x401d8d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d92",
            "funcStartAddr": "401d92",
            "funcEndAddr": "401d97",
            "decompiledFuncCode": "int64_t function_401d92(void) {\n    // 0x401d92\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401da0",
            "funcStartAddr": "401da0",
            "funcEndAddr": "402b75",
            "decompiledFuncCode": "int64_t function_401da0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401dba\n    function_403430(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401da0\n    function_409f90(0x403000, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    char v3 = 0; // 0x401e23\n    char v4 = 10; // 0x401e23\n    char * v5 = NULL; // 0x401e23\n    int64_t v6 = -1; // 0x401e23\n    int64_t v7 = 0; // 0x401e23\n    char v8 = 0; // 0x401e23\n    int64_t v9 = 0; // 0x401e23\n    int64_t v10 = 0; // 0x401e23\n    int64_t v11 = -1; // 0x401e23\n    int64_t v12; // 0x401da0\n    int64_t str; // 0x401da0\n    int64_t v13; // 0x401da0\n    int64_t v14; // 0x401da0\n    int64_t v15; // 0x401da0\n    int64_t v16; // 0x401da0\n    int64_t v17; // 0x401da0\n    int64_t v18; // 0x401da0\n    int64_t v19; // 0x401da0\n    int64_t v20; // 0x401da0\n    int64_t v21; // 0x401da0\n    int64_t v22; // 0x401da0\n    int64_t v23; // bp-200, 0x401da0\n    char v24; // 0x401da0\n    char v25; // 0x401da0\n    char v26; // 0x401da0\n    char v27; // 0x401da0\n    char v28; // 0x401da0\n    char v29; // 0x401da0\n    int64_t v30; // 0x401da0\n    int64_t v31; // 0x401da0\n    char * str2; // 0x401da0\n    int64_t v32; // 0x401da0\n    int64_t v33; // 0x401f09\n    while (true) {\n      lab_0x401e28_2:;\n        int64_t v34 = v15;\n        v13 = v11;\n        str = v10;\n        v12 = v9;\n        int64_t v35 = v17;\n        v29 = v28;\n        v25 = v8;\n        v30 = v7;\n        v32 = v6;\n        str2 = v5;\n        v26 = v4;\n        v24 = v3;\n        int32_t v36 = function_4082a0(v1, a2, \"ei:n:o:rz\", &g3, 0, v35);\n        v22 = (int64_t)\"ei:n:o:rz\";\n        v20 = v1;\n        switch (v36) {\n            case -1: {\n                goto lab_0x4020a7;\n            }\n            case 110: {\n                int64_t v37 = function_406b20((int64_t)g48, 0, 10, &v23, 0, v35); // 0x402046\n                int32_t v38 = v37; // 0x40204b\n                if (v38 != 0) {\n                    // 0x40206a\n                    v3 = v24;\n                    v4 = v26;\n                    v5 = str2;\n                    v6 = v32;\n                    v7 = v30;\n                    v8 = v25;\n                    v27 = v29;\n                    v16 = v35;\n                    v9 = v12;\n                    v10 = str;\n                    v11 = v13;\n                    v14 = v34;\n                    if (v38 != 1) {\n                        int64_t v39 = function_405050((int64_t)g48); // 0x40207a\n                        char * format = dcgettext(NULL, \"invalid line count: %s\", 5); // 0x40208e\n                        error(1, (int32_t)\"invalid line count: %s\" ^ (int32_t)\"invalid line count: %s\", format);\n                        v22 = (int64_t)format;\n                        v20 = v39;\n                        goto lab_0x4020a7;\n                    }\n                } else {\n                    uint64_t v40 = v23; // 0x402054\n                    v3 = v24;\n                    v4 = v26;\n                    v5 = str2;\n                    v6 = v32 > v40 ? v40 : v32;\n                    v7 = v30;\n                    v8 = v25;\n                    v27 = v29;\n                    v16 = v35;\n                    v9 = v12;\n                    v10 = str;\n                    v11 = v13;\n                    v14 = v34;\n                }\n                goto lab_0x401e28;\n            }\n            default: {\n                if (v36 > 110) {\n                    // 0x401e53\n                    v3 = 1;\n                    v4 = v26;\n                    v5 = str2;\n                    v6 = v32;\n                    v7 = v30;\n                    v8 = v25;\n                    v27 = v29;\n                    v16 = v35;\n                    v9 = v12;\n                    v10 = str;\n                    v11 = v13;\n                    v14 = v34;\n                    if (v36 != 114) {\n                        if (v36 > 114) {\n                            // 0x401e5e\n                            v3 = v24;\n                            v4 = 0;\n                            v5 = str2;\n                            v6 = v32;\n                            v7 = v30;\n                            v8 = v25;\n                            v27 = v29;\n                            v16 = v35;\n                            v9 = v12;\n                            v10 = str;\n                            v11 = v13;\n                            v14 = v34;\n                            if (v36 != 122) {\n                                if (v36 != 128) {\n                                    // 0x4029dc\n                                    function_402c60(1);\n                                    // UNREACHABLE\n                                }\n                                int64_t v41 = (int64_t)g48; // 0x401e9b\n                                v3 = v24;\n                                v4 = v26;\n                                v5 = str2;\n                                v6 = v32;\n                                v7 = v30;\n                                v8 = v25;\n                                v27 = v29;\n                                v16 = v35;\n                                v9 = v12;\n                                v10 = v41;\n                                v11 = v13;\n                                v14 = v41;\n                                if (str != 0) {\n                                    // 0x401ea7\n                                    v3 = v24;\n                                    v4 = v26;\n                                    v5 = str2;\n                                    v6 = v32;\n                                    v7 = v30;\n                                    v8 = v25;\n                                    v27 = v29;\n                                    v16 = v35;\n                                    v9 = v12;\n                                    v10 = v41;\n                                    v11 = v13;\n                                    v14 = v41;\n                                    if (strcmp((char *)str, g48) != 0) {\n                                        // 0x402b4e\n                                        error(1, (int32_t)\"multiple random sources specified\" ^ (int32_t)\"multiple random sources specified\", dcgettext(NULL, \"multiple random sources specified\", 5));\n                                        v21 = 1;\n                                        goto lab_0x402b70;\n                                    }\n                                }\n                            }\n                        } else {\n                            if (v36 != 111) {\n                                // 0x4029dc\n                                function_402c60(1);\n                                // UNREACHABLE\n                            }\n                            int64_t v42 = (int64_t)g48; // 0x401ed6\n                            v3 = v24;\n                            v4 = v26;\n                            v5 = g48;\n                            v6 = v32;\n                            v7 = v30;\n                            v8 = v25;\n                            v27 = v29;\n                            v16 = v35;\n                            v9 = v12;\n                            v10 = str;\n                            v11 = v13;\n                            v14 = v42;\n                            if (str2 != NULL) {\n                                int32_t strcmp_rc = strcmp(str2, g48); // 0x401ee8\n                                v3 = v24;\n                                v4 = v26;\n                                v5 = g48;\n                                v6 = v32;\n                                v7 = v30;\n                                v8 = v25;\n                                v27 = v29;\n                                v16 = v35;\n                                v9 = v12;\n                                v10 = str;\n                                v11 = v13;\n                                v14 = v42;\n                                v19 = a2;\n                                if (strcmp_rc != 0) {\n                                    goto lab_0x402a3d;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v36 == -130) {\n                        // 0x4029e6\n                        function_402c60(0);\n                        // UNREACHABLE\n                    }\n                    if (v36 <= 0xffffff7e) {\n                        if (v36 == -131) {\n                            // 0x401feb\n                            function_406650((int64_t)g29, \"shuf\", \"GNU coreutils\", (int64_t)g18, \"Paul Eggert\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x4029dc;\n                    }\n                    // 0x401e81\n                    v3 = v24;\n                    v4 = v26;\n                    v5 = str2;\n                    v6 = v32;\n                    v7 = v30;\n                    v8 = v25;\n                    v27 = v29;\n                    v16 = v35;\n                    v9 = 1;\n                    v10 = str;\n                    v11 = v13;\n                    v14 = v34;\n                    if (v36 != 101) {\n                        if (v36 != 105) {\n                          lab_0x4029dc:\n                            // 0x4029dc\n                            function_402c60(1);\n                            // UNREACHABLE\n                        }\n                        char * found_char_pos = strchr(g48, 45); // 0x401f18\n                        v18 = a2;\n                        if (v25 != 0) {\n                            goto lab_0x402a1b;\n                        }\n                        if (found_char_pos == NULL) {\n                            // 0x40235f\n                            v33 = (int64_t)g48;\n                            char * v43 = dcgettext(NULL, \"invalid input range\", 5); // 0x40236b\n                            function_406af0(v33, (int32_t)\"invalid input range\" ^ (int32_t)\"invalid input range\", -1, (int64_t *)&g10, (int64_t)v43, 0);\n                            v31 = v30;\n                            goto lab_0x402389;\n                        }\n                        int64_t v44 = (int64_t)found_char_pos; // 0x401f18\n                        *found_char_pos = 0;\n                        char * v45 = dcgettext(NULL, \"invalid input range\", 5); // 0x401f4b\n                        int64_t v46 = function_406af0((int64_t)g48, (int32_t)\"invalid input range\" ^ (int32_t)\"invalid input range\", -1, (int64_t *)&g10, (int64_t)v45, 0); // 0x401f6b\n                        *found_char_pos = 45;\n                        char * v47 = dcgettext(NULL, \"invalid input range\", 5); // 0x401f83\n                        int64_t v48 = function_406af0(v44 + 1, (int32_t)\"invalid input range\" ^ (int32_t)\"invalid input range\", -1, (int64_t *)&g10, (int64_t)v47, 0); // 0x401fa0\n                        v3 = v24;\n                        v4 = v26;\n                        v5 = str2;\n                        v6 = v32;\n                        v7 = v48;\n                        v8 = 1;\n                        v27 = 0;\n                        v16 = 0;\n                        v9 = v12;\n                        v10 = str;\n                        v11 = v46;\n                        v14 = v44;\n                        v31 = v48;\n                        v33 = v46;\n                        if (v48 - v46 == -1 != v48 < v46) {\n                            goto lab_0x402389;\n                        }\n                    }\n                }\n                goto lab_0x401e28;\n            }\n        }\n    }\n  lab_0x4025db_3:;\n    char * format2 = dcgettext(NULL, \"write error\", 5); // 0x4025bd\n    uint32_t err_num = *__errno_location(); // 0x4025d2\n    error(1, err_num, format2);\n    int64_t v49; // 0x401da0\n    char * v50 = (char *)v49;\n    char * v51 = v50; // 0x4025de\n    int64_t v52; // 0x401da0\n    int64_t v53 = v52; // 0x4025de\n    int64_t v54; // 0x401da0\n    int64_t v55 = v54; // 0x4025de\n    int64_t v56; // 0x401da0\n    int64_t v57 = v56; // 0x4025de\n    int64_t v58 = v49; // 0x4025de\n    int64_t v59; // 0x401da0\n    int64_t v60 = v59; // 0x4025de\n    char * v61; // 0x401da0\n    char * v62 = v61; // 0x4025de\n    char v63; // 0x401da0\n    char v64 = v63; // 0x4025de\n    int64_t v65; // 0x401da0\n    int64_t v66 = v65; // 0x4025de\n    int64_t v67; // 0x401da0\n    int64_t v68 = v67; // 0x4025de\n    char v69; // 0x401da0\n    char v70 = v69; // 0x4025de\n    char v71; // 0x401da0\n    char v72 = v71; // 0x4025de\n    char * v73; // 0x401da0\n    char * v74 = v73; // 0x4025de\n    char v75; // 0x401da0\n    char v76 = v75; // 0x4025de\n    char v77 = v75; // 0x4025de\n    char * v78 = v73; // 0x4025de\n    char v79 = v71; // 0x4025de\n    char v80 = v69; // 0x4025de\n    int64_t v81 = v67; // 0x4025de\n    int64_t v82 = v65; // 0x4025de\n    char v83 = v63; // 0x4025de\n    char * v84 = v61; // 0x4025de\n    int64_t v85; // 0x401da0\n    int64_t v86 = v85; // 0x4025de\n    int64_t v87 = err_num; // 0x4025de\n    int64_t v88 = 0; // 0x4025de\n    char * v89 = v50; // 0x4025de\n    int64_t v90 = v56; // 0x4025de\n    int64_t v91 = v54; // 0x4025de\n    int64_t v92 = v52; // 0x4025de\n    if (v59 == 0) {\n        goto lab_0x402664;\n    } else {\n        goto lab_0x4025e4_2;\n    }\n  lab_0x40265c:\n    // 0x40265c\n    function_403420(&v23);\n    char v93; // 0x401da0\n    v77 = v93;\n    char * v94; // 0x401da0\n    v78 = v94;\n    char v95; // 0x401da0\n    v79 = v95;\n    char v96; // 0x401da0\n    v80 = v96;\n    int64_t v97; // 0x401da0\n    v81 = v97;\n    int64_t v98; // 0x401da0\n    v82 = v98;\n    char v99; // 0x4025fb\n    v83 = v99;\n    char * v100; // 0x401da0\n    v84 = v100;\n    int64_t v101; // 0x4025e4\n    v86 = v101;\n    int64_t v102; // 0x401da0\n    v87 = v102;\n    int64_t v103; // 0x401da0\n    v88 = v103;\n    char * v104; // 0x401da0\n    v89 = v104;\n    int64_t v105; // 0x401da0\n    v90 = v105;\n    int64_t v106; // 0x401da0\n    v91 = v106;\n    int64_t v107; // 0x401da0\n    v92 = v107;\n    goto lab_0x402664;\n  lab_0x402389:;\n    int64_t v407 = function_405050((int64_t)g48); // 0x402390\n    error(1, *__errno_location(), \"%s: %s\", dcgettext(NULL, \"invalid input range\", 5), (char *)v407);\n    int64_t v183 = v31; // 0x4023c5\n    int64_t v184 = v407; // 0x4023c5\n    int64_t v185 = v407; // 0x4023c5\n    int64_t v186 = v33; // 0x4023c5\n    goto lab_0x4023ca;\n  lab_0x402664:;\n    int64_t v108 = v86;\n    int64_t v109 = v108; // 0x402669\n    int64_t v110; // 0x401da0\n    int64_t v111; // 0x401da0\n    int64_t v112; // 0x401da0\n    int64_t v113; // 0x401da0\n    int64_t v114; // 0x401da0\n    int64_t v115; // 0x401da0\n    int64_t v116; // 0x401da0\n    int64_t v117; // 0x401da0\n    int64_t v118; // 0x401da0\n    int64_t v119; // 0x401da0\n    int64_t v120; // 0x401da0\n    int64_t v121; // 0x401da0\n    int64_t v122; // 0x401da0\n    char v123; // 0x401da0\n    char v124; // 0x401da0\n    char v125; // 0x401da0\n    char v126; // 0x401da0\n    char v127; // 0x401da0\n    char v128; // 0x401da0\n    char v129; // 0x401da0\n    char v130; // 0x401da0\n    char * v131; // 0x401da0\n    char * v132; // 0x401da0\n    char * v133; // 0x401da0\n    char v134; // 0x401da0\n    char v135; // 0x401da0\n    char v136; // 0x401da0\n    int64_t v137; // 0x401da0\n    int64_t v138; // 0x401da0\n    int64_t v139; // 0x401da0\n    char * v140; // 0x401da0\n    char * v141; // 0x401da0\n    char * v142; // 0x401da0\n    int64_t v143; // 0x401da0\n    int64_t v144; // 0x401da0\n    int64_t v145; // 0x401da0\n    if ((*v89 & 32) != 0) {\n        goto lab_0x402a84;\n    } else {\n        uint64_t v146 = v92;\n        int64_t v147 = v88;\n        char * v148 = v84;\n        char v149 = v83;\n        int64_t v150 = v82;\n        uint64_t v151 = v81;\n        char v152 = v80;\n        char v153 = v79;\n        char * v154 = v78;\n        char v155 = v77;\n        int64_t v156 = v151 > v146 ? v146 : v151; // 0x40267e\n        v129 = v155;\n        v142 = v154;\n        v127 = v153;\n        v124 = v152;\n        v145 = v156;\n        v139 = v150;\n        v136 = v149;\n        v132 = v148;\n        v121 = v108;\n        v118 = v147;\n        v115 = v156;\n        if ((int32_t)function_407390((int64_t)g30, v87) != 0) {\n            goto lab_0x402534;\n        } else {\n            // 0x402694\n            v130 = v155;\n            v141 = v154;\n            v126 = v153;\n            v123 = v152;\n            v144 = v156;\n            v138 = v150;\n            v135 = v149;\n            v131 = v148;\n            v120 = 0;\n            v117 = v147;\n            v112 = v91;\n            v114 = v156;\n            v128 = v155;\n            v140 = v154;\n            v125 = v153;\n            v143 = v156;\n            v137 = v150;\n            v134 = v149;\n            v133 = v148;\n            v122 = 1;\n            v119 = 0;\n            v116 = v147;\n            v110 = v90;\n            v111 = v91;\n            v113 = v156;\n            if (v152 != 0) {\n                goto lab_0x40247b;\n            } else {\n                goto lab_0x4026ab;\n            }\n        }\n    }\n  lab_0x4025e4_2:\n    // 0x4025e4\n    v93 = v76;\n    v94 = v74;\n    v95 = v72;\n    v96 = v70;\n    v97 = v68;\n    v98 = v66;\n    v100 = v62;\n    v103 = v60;\n    v102 = v58;\n    v106 = v55;\n    v104 = v51;\n    v101 = &v23;\n    function_4032e0(&v23);\n    v99 = v57;\n    v105 = 0x100000000000000 * v57 >> 56;\n    int64_t v157 = v53;\n    uint64_t v158 = function_4050e0((int64_t)v100, v157); // 0x40261f\n    while (function_4032f0(v97 > v158 ? 24 * v158 + v105 : v101, v102, v64) != 0) {\n        int64_t v159 = v157 + 1; // 0x40260a\n        v107 = 1;\n        if (v157 == 0) {\n            goto lab_0x40265c;\n        }\n        v157 = v159;\n        v158 = function_4050e0((int64_t)v100, v157);\n    }\n    // 0x402649\n    v107 = v157;\n    int64_t v160 = v101; // 0x402656\n    if (v157 == 0) {\n        goto lab_0x402a5f;\n    } else {\n        goto lab_0x40265c;\n    }\n  lab_0x4020a7:;\n    int32_t v161 = *(int32_t *)0x60f2dc; // 0x4020a7\n    int32_t v162 = (int32_t)v20 - v161; // 0x4020ae\n    int64_t v163 = v162; // 0x4020ae\n    int64_t v164 = 8 * (int64_t)v161 + a2; // 0x4020b0\n    int64_t v165; // 0x401da0\n    int64_t v166; // 0x401da0\n    int64_t v167; // 0x401da0\n    int64_t v168; // 0x401da0\n    int64_t v169; // 0x401da0\n    int64_t v170; // 0x401da0\n    int64_t v171; // 0x401da0\n    int64_t v172; // 0x401da0\n    int64_t v173; // 0x401da0\n    int64_t v174; // 0x401da0\n    int64_t v175; // 0x401da0\n    char v176; // 0x401da0\n    char v177; // 0x401da0\n    int64_t v178; // 0x401da0\n    int64_t v179; // 0x4020ed\n    int64_t v180; // 0x4020f1\n    int64_t str3; // 0x4020fe\n    if (v12 == 0) {\n        if (v25 == 0) {\n            // 0x4020d5\n            v171 = 8;\n            v174 = v164;\n            if (v162 > 1) {\n                goto lab_0x402afc;\n            } else {\n                uint32_t v181 = v162 - 1; // 0x4020ed\n                v179 = v181;\n                v180 = (int64_t)g30;\n                if (v181 != 0) {\n                    goto lab_0x40273e;\n                } else {\n                    int64_t * v182 = (int64_t *)v164; // 0x4020fe\n                    str3 = *v182;\n                    if (strcmp((char *)str3, \"-\") == 0) {\n                        goto lab_0x40273e;\n                    } else {\n                        if (v32 != 0) {\n                            // 0x402965\n                            if (function_403130(str3, (int64_t *)\"r\", v180) == 0) {\n                                // 0x4029ed\n                                error(1, *__errno_location(), \"%s\", (char *)function_404ed0(0, 3, *v182));\n                                v18 = v164;\n                              lab_0x402a1b:\n                                // 0x402a1b\n                                error(1, (int32_t)\"multiple -i options specified\" ^ (int32_t)\"multiple -i options specified\", dcgettext(NULL, \"multiple -i options specified\", 5));\n                                v19 = v18;\n                              lab_0x402a3d:\n                                // 0x402a3d\n                                error(1, (int32_t)\"multiple output files specified\" ^ (int32_t)\"multiple output files specified\", dcgettext(NULL, \"multiple output files specified\", 5));\n                                v160 = v19;\n                                goto lab_0x402a5f;\n                            } else {\n                                // 0x40297a\n                                function_4030b0((int64_t)g30, 2, v180);\n                                v167 = str3;\n                                if (v24 == 0 == (v32 != -1)) {\n                                    goto lab_0x40276e;\n                                } else {\n                                    // 0x40299e\n                                    v173 = &v23;\n                                    goto lab_0x4027ca;\n                                }\n                            }\n                        } else {\n                            // 0x402123\n                            function_4030b0(v180, 2, v22);\n                            v172 = v164;\n                            v168 = str3;\n                            if (v24 != 0) {\n                                // 0x40299e\n                                v173 = &v23;\n                                goto lab_0x4027ca;\n                            } else {\n                                goto lab_0x40213b;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            // 0x402227\n            v171 = 0;\n            v174 = v164;\n            if (v162 >= 0 == (v162 != 0)) {\n                goto lab_0x402afc;\n            } else {\n                // 0x40222f\n                v176 = v25;\n                v165 = 0;\n                v178 = v30;\n                v177 = v29;\n                v175 = 0;\n                v170 = v163;\n                v166 = v13;\n                v169 = v30 + 1 - v13;\n                goto lab_0x40223d;\n            }\n        }\n    } else {\n        // 0x4020c1\n        v183 = v30;\n        v184 = v164;\n        v185 = v163;\n        v186 = v13;\n        if (v25 != 0) {\n            // 0x4029bd\n            error(0, (int32_t)\"cannot combine -e and -i options\" ^ (int32_t)\"cannot combine -e and -i options\", dcgettext(NULL, \"cannot combine -e and -i options\", 5));\n            // 0x4029dc\n            function_402c60(1);\n            // UNREACHABLE\n        }\n        goto lab_0x4023ca;\n    }\n  lab_0x401e28:\n    // 0x401e28\n    v28 = v27;\n    v17 = v16;\n    v15 = v14;\n    goto lab_0x401e28_2;\n  lab_0x4023ca:;\n    int64_t v187 = 0x100000000 * v185;\n    int64_t v188 = v187 >> 32; // 0x4023ca\n    int64_t v189 = v188; // 0x4023f3\n    if (v185 > 0) {\n        int64_t v190 = v188; // 0x4023eb\n        int64_t v191 = 0;\n        int64_t v192 = v191 + 1; // 0x4023e2\n        int64_t v193 = *(int64_t *)(8 * v191 + v184); // 0x4023e6\n        int64_t v194 = -1;\n        int64_t v195 = 0; // 0x4023e6\n        int64_t v196; // 0x401da0\n        bool v197; // 0x401da0\n        int64_t v198; // 0x4023e6\n        while (v194 != 0) {\n            v196 = v193;\n            v198 = v194 - 1;\n            v193 = v196 + (v197 ? -1 : 1);\n            v195 = v198;\n            if (*(char *)v196 == 0) {\n                // break -> 0x4023f0\n                break;\n            }\n            v194 = v198;\n            v195 = 0;\n        }\n        // 0x4023f0\n        v190 = v190 - 1 + -1 - v195;\n        v189 = v190;\n        while (v192 != v185) {\n            // 0x4023da\n            v191 = v192;\n            v192 = v191 + 1;\n            v193 = *(int64_t *)(8 * v191 + v184);\n            v194 = -1;\n            v195 = 0;\n            while (v194 != 0) {\n                v196 = v193;\n                v198 = v194 - 1;\n                v193 = v196 + (v197 ? -1 : 1);\n                v195 = v198;\n                if (*(char *)v196 == 0) {\n                    // break -> 0x4023f0\n                    break;\n                }\n                v194 = v198;\n                v195 = 0;\n            }\n            // 0x4023f0\n            v190 = v190 - 1 + -1 - v195;\n            v189 = v190;\n        }\n    }\n    int64_t str4 = function_406790(v189); // 0x4023ff\n    int64_t v199 = v185 & 0xffffffff; // 0x402404\n    int64_t v200 = 0; // 0x402449\n    int64_t v201 = str4; // 0x402449\n    if (v199 != 0) {\n        int64_t * str5 = (int64_t *)(8 * v200 + v184); // 0x40242b\n        char * v202 = stpcpy((char *)str4, (char *)*str5); // 0x402432\n        *str5 = str4;\n        int64_t v203 = v200 + 1; // 0x40243b\n        *v202 = v26;\n        int64_t v204 = (int64_t)v202 + 1; // 0x402442\n        int64_t str6 = v204; // 0x402449\n        v200 = v203;\n        v201 = v204;\n        while (v203 != v199) {\n            // 0x40242b\n            str5 = (int64_t *)(8 * v200 + v184);\n            v202 = stpcpy((char *)str6, (char *)*str5);\n            *str5 = str6;\n            v203 = v200 + 1;\n            *v202 = v26;\n            v204 = (int64_t)v202 + 1;\n            str6 = v204;\n            v200 = v203;\n            v201 = v204;\n        }\n    }\n    // 0x40244b\n    *(int64_t *)((v187 >> 29) + v184) = v201;\n    v176 = v25;\n    v165 = v12;\n    v178 = v183;\n    v177 = v12;\n    v175 = v184;\n    v170 = v199;\n    v166 = v186;\n    v169 = v188;\n    goto lab_0x40223d;\n  lab_0x402afc:\n    // 0x402afc\n    function_405050(*(int64_t *)(v174 + v171));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    function_402c60(1);\n    // UNREACHABLE\n  lab_0x40223d:;\n    char v205 = 0; // 0x402242\n    char v206 = v26; // 0x402242\n    char * v207 = str2; // 0x402242\n    char v208 = v176; // 0x402242\n    int64_t v209 = v32; // 0x402242\n    int64_t v210 = v178; // 0x402242\n    char v211 = v177; // 0x402242\n    int64_t v212 = v175; // 0x402242\n    int64_t v213 = v170; // 0x402242\n    int64_t v214 = v165; // 0x402242\n    int64_t v215 = str; // 0x402242\n    int64_t v216 = v166; // 0x402242\n    int64_t v217 = v169; // 0x402242\n    int64_t v218; // 0x401da0\n    int64_t v219; // 0x401da0\n    int64_t v220; // 0x401da0\n    int64_t v221; // 0x401da0\n    int64_t v222; // 0x401da0\n    int64_t v223; // 0x401da0\n    char v224; // 0x401da0\n    char v225; // 0x401da0\n    char v226; // 0x401da0\n    char v227; // 0x401da0\n    int64_t v228; // 0x401da0\n    char * v229; // 0x401da0\n    int64_t v230; // 0x401da0\n    if (v24 == 0) {\n        goto lab_0x40228b;\n    } else {\n        int64_t v231 = function_4050a0(); // 0x40224b\n        v224 = v24;\n        v226 = v26;\n        v229 = str2;\n        v225 = v176;\n        v230 = v32;\n        v228 = v178;\n        v227 = v177;\n        v223 = v175;\n        v222 = v170;\n        v218 = v165;\n        v219 = str;\n        v220 = v166;\n        v221 = v169;\n        if (v231 != 0) {\n            char * v232 = (char *)v231; // 0x402250\n            v130 = v26;\n            v141 = str2;\n            v126 = v176;\n            v123 = v24;\n            v144 = v32;\n            v138 = v178;\n            v135 = v177;\n            v131 = v232;\n            v120 = v175;\n            v117 = v170;\n            v112 = v166;\n            v114 = v169;\n            if ((v176 || (char)v165) == 0) {\n                // 0x402b35\n                v130 = v26;\n                v141 = str2;\n                v126 = v176;\n                v123 = v24;\n                v144 = v32;\n                v138 = v178;\n                v135 = v177;\n                v131 = v232;\n                v120 = v175;\n                v117 = v170;\n                v112 = v166;\n                v114 = v169;\n                v129 = v26;\n                v142 = str2;\n                v127 = v176;\n                v124 = v24;\n                v145 = v32;\n                v139 = v178;\n                v136 = v177;\n                v132 = v232;\n                v121 = v175;\n                v118 = v170;\n                v115 = v169;\n                if ((int32_t)function_407390((int64_t)g30, -1) == 0) {\n                    goto lab_0x40247b;\n                } else {\n                    goto lab_0x402534;\n                }\n            } else {\n                goto lab_0x40247b;\n            }\n        } else {\n            goto lab_0x40225e;\n        }\n    }\n  lab_0x40273e:\n    // 0x40273e\n    function_4030b0(v180, 2, v22);\n    if (v24 != 0 || v32 == -1) {\n        // 0x40299e\n        v173 = &v23;\n        goto lab_0x4027ca;\n    } else {\n        // 0x402762\n        v172 = v164;\n        v168 = str3;\n        v167 = str3;\n        if (v32 == 0) {\n            goto lab_0x40213b;\n        } else {\n            goto lab_0x40276e;\n        }\n    }\n  lab_0x40228b:;\n    int64_t v233 = v217;\n    int64_t v234 = v216;\n    int64_t v235 = v214;\n    int64_t v236 = v213;\n    int64_t v237 = v212;\n    char v238 = v211;\n    int64_t v239 = v210;\n    uint64_t v240 = v209;\n    char v241 = v208;\n    char * v242 = v207;\n    char v243 = v206;\n    char v244 = v205;\n    int64_t v245 = v240 > v233 ? v233 : v240; // 0x402296\n    int64_t v246 = function_405280(v245, v233); // 0x4022a2\n    int64_t v247 = function_4050a0(); // 0x4022ad\n    v224 = v244;\n    v226 = v243;\n    v229 = v242;\n    v225 = v241;\n    v230 = v245;\n    v228 = v239;\n    v227 = v238;\n    v223 = v237;\n    v222 = v236;\n    v218 = v235;\n    v219 = v215;\n    v220 = v234;\n    v221 = v233;\n    int64_t v248; // 0x401da0\n    int64_t v249; // 0x401da0\n    int64_t v250; // 0x401da0\n    int64_t v251; // 0x401da0\n    int64_t v252; // 0x401da0\n    int64_t v253; // 0x401da0\n    int64_t v254; // 0x401da0\n    int64_t v255; // 0x401da0\n    int64_t v256; // 0x401da0\n    char v257; // 0x401da0\n    char v258; // 0x401da0\n    char v259; // 0x401da0\n    char v260; // 0x401da0\n    char v261; // 0x401da0\n    char v262; // 0x401da0\n    char * v263; // 0x401da0\n    char * v264; // 0x401da0\n    char v265; // 0x401da0\n    char v266; // 0x401da0\n    int64_t v267; // 0x401da0\n    int64_t v268; // 0x401da0\n    char * v269; // 0x401da0\n    char * v270; // 0x401da0\n    int64_t v271; // 0x401da0\n    int64_t v272; // 0x401da0\n    if (v247 == 0) {\n        goto lab_0x40225e;\n    } else {\n        char * v273 = (char *)v247; // 0x4022b2\n        if ((v241 || (char)v235) == 0) {\n            // 0x402514\n            v129 = v243;\n            v142 = v242;\n            v127 = v241;\n            v124 = 0;\n            v145 = v245;\n            v139 = v239;\n            v136 = v238;\n            v132 = v273;\n            v121 = v237;\n            v118 = v236;\n            v115 = v233;\n            v128 = v243;\n            v140 = v242;\n            v125 = v241;\n            v143 = v245;\n            v137 = v239;\n            v134 = v238;\n            v133 = v273;\n            v122 = 0;\n            v119 = v237;\n            v116 = v236;\n            v110 = 0;\n            v111 = v234;\n            v113 = v233;\n            if ((int32_t)function_407390((int64_t)g30, v246) == 0) {\n                goto lab_0x4026ab;\n            } else {\n                goto lab_0x402534;\n            }\n        } else {\n            int64_t v274 = function_4052b0(v247, v245, v233); // 0x4022d6\n            v261 = v243;\n            v270 = NULL;\n            v260 = v241;\n            v257 = v244;\n            v272 = v245;\n            v268 = v239;\n            v266 = v238;\n            v263 = v273;\n            v256 = v274;\n            v255 = v237;\n            v253 = v236;\n            v249 = v234;\n            v251 = v233;\n            if (v242 == NULL) {\n                goto lab_0x402305;\n            } else {\n                int64_t v275 = (int64_t)v242;\n                int64_t v276 = function_403130(v275, &g2, (int64_t)g29); // 0x4022f7\n                v261 = v243;\n                v270 = v242;\n                v260 = v241;\n                v257 = v244;\n                v272 = v245;\n                v268 = v239;\n                v266 = v238;\n                v263 = v273;\n                v256 = v274;\n                v255 = v237;\n                v253 = v236;\n                v249 = v234;\n                v251 = v233;\n                v248 = v275;\n                v262 = v243;\n                v269 = v242;\n                v259 = v241;\n                v258 = v244;\n                v271 = v245;\n                v267 = v239;\n                v265 = v238;\n                v264 = v273;\n                v254 = v237;\n                v252 = v236;\n                v250 = v233;\n                if (v276 == 0) {\n                    goto lab_0x4028ee;\n                } else {\n                    goto lab_0x402305;\n                }\n            }\n        }\n    }\n  lab_0x40225e:\n    // 0x40225e\n    error(1, *__errno_location(), \"%s\", (char *)function_404ed0(0, 3, v219));\n    v205 = v224;\n    v206 = v226;\n    v207 = v229;\n    v208 = v225;\n    v209 = v230;\n    v210 = v228;\n    v211 = v227;\n    v212 = v223;\n    v213 = v222;\n    v214 = v218;\n    v215 = v219;\n    v216 = v220;\n    v217 = v221;\n    goto lab_0x40228b;\n  lab_0x4027ca:;\n    int64_t v277 = function_405fa0((int64_t)g30, &v23); // 0x4027dd\n    int64_t v278 = v173; // 0x4027e8\n    if (v277 == 0) {\n        goto lab_0x402ad0;\n    } else {\n        int64_t v279 = 0; // 0x4027f6\n        if (v23 != 0) {\n            int64_t v280 = v23 + v277;\n            v279 = v23;\n            if (v26 != *(char *)(v280 - 1)) {\n                // 0x402803\n                v23++;\n                *(char *)v280 = v26;\n                v279 = v23;\n            }\n        }\n        uint64_t v281 = v279 + v277; // 0x402817\n        int64_t v282 = v26;\n        int64_t v283 = 0; // 0x402849\n        int64_t v284 = 1; // 0x402849\n        if (v281 > v277) {\n            int64_t v285 = v277;\n            int64_t v286 = 1;\n            int64_t v287 = function_4083a0(v285, v282, v281 - v285) + 1; // 0x40283b\n            int64_t v288 = v286 + 1; // 0x402842\n            while (v281 > v287) {\n                // 0x40282e\n                v285 = v287;\n                v286 = v288;\n                v287 = function_4083a0(v285, v282, v281 - v285) + 1;\n                v288 = v286 + 1;\n            }\n            // 0x40284b\n            if (v288 % 0x1000000000000001 != 0) {\n                // 0x402b70\n                function_4069e0(v287);\n                // UNREACHABLE\n            }\n            // 0x402874\n            v283 = v286;\n            v284 = v288;\n            v21 = v287;\n            if (v288 > 0x1fffffffffffffff) {\n              lab_0x402b70:\n                // 0x402b70\n                function_4069e0(v21);\n                // UNREACHABLE\n            }\n        }\n        int64_t v289 = function_406790(8 * v284); // 0x40288a\n        *(int64_t *)v289 = v277;\n        int64_t v290 = 8 * v283; // 0x4028a9\n        if (v290 != 0) {\n            int64_t v291 = v277;\n            int64_t v292 = v289 + 8; // 0x4028c0\n            int64_t v293 = function_4083a0(v291, v282, v281 - v291) + 1; // 0x4028cc\n            *(int64_t *)v292 = v293;\n            int64_t v294 = v292; // 0x4028d7\n            while (v292 != v289 + v290) {\n                // 0x4028ba\n                v291 = v293;\n                v292 = v294 + 8;\n                v293 = function_4083a0(v291, v282, v281 - v291) + 1;\n                *(int64_t *)v292 = v293;\n                v294 = v292;\n            }\n        }\n        // 0x4028d9\n        v176 = 0;\n        v165 = 0;\n        v178 = v30;\n        v177 = v289;\n        v175 = 0x100000000000000 * v289 >> 56;\n        v170 = v179;\n        v166 = v13;\n        v169 = v283;\n        goto lab_0x40223d;\n    }\n  lab_0x40213b:;\n    int64_t v295 = function_4050a0(); // 0x402142\n    v224 = v24;\n    v226 = v26;\n    v229 = str2;\n    v225 = 0;\n    v230 = v32;\n    v228 = v30;\n    v227 = v29;\n    v223 = v172;\n    v222 = v179;\n    v218 = 0;\n    v219 = str;\n    v220 = v13;\n    v221 = v168;\n    if (v295 == 0) {\n        goto lab_0x40225e;\n    } else {\n        char * v296 = (char *)v295; // 0x402147\n        int64_t v297 = (int64_t)g30; // 0x402164\n        int64_t v298 = v32 < 1024 ? v32 : 1024; // 0x40217a\n        int64_t v299 = function_406960(v298, 24); // 0x402184\n        int64_t v300 = 0; // 0x402194\n        int64_t v301 = v299; // 0x402194\n        int64_t v302 = v298; // 0x402194\n        v77 = v26;\n        v78 = str2;\n        v79 = 0;\n        v80 = v24;\n        v81 = 0;\n        v82 = v30;\n        v83 = v26;\n        v84 = v296;\n        v86 = v172;\n        v87 = 24;\n        v88 = 0;\n        v89 = g30;\n        v90 = v299;\n        v91 = v13;\n        v92 = 0;\n        if (v32 != 0) {\n            while (true) {\n                int64_t v303 = v301;\n                int64_t v304 = 24 * v300; // 0x40219a\n                int64_t v305 = v304 + v303; // 0x4021a5\n                int64_t v306 = function_4032f0(v305, v297, v26); // 0x4021aa\n                v77 = v26;\n                v78 = str2;\n                v79 = 0;\n                v80 = v24;\n                v81 = v32;\n                v82 = v30;\n                v83 = v26;\n                v84 = v296;\n                v86 = v304;\n                v87 = v297;\n                v88 = 0;\n                v89 = g30;\n                v90 = v303;\n                v91 = v13;\n                v92 = v300;\n                if (v306 == 0) {\n                    // break (via goto) -> 0x402664\n                    goto lab_0x402664;\n                }\n                int64_t v307 = v300 + 1; // 0x4021bb\n                while (v307 < v302) {\n                    // 0x40218f\n                    v51 = g30;\n                    v53 = v32;\n                    v55 = v13;\n                    v57 = v303;\n                    v58 = v297;\n                    v60 = v306;\n                    v62 = v296;\n                    v64 = v26;\n                    v66 = v30;\n                    v68 = v32;\n                    v70 = v24;\n                    v72 = 0;\n                    v74 = str2;\n                    v76 = v26;\n                    if (v32 == v307) {\n                        goto lab_0x4025e4_2;\n                    }\n                    v304 = 24 * v307;\n                    v305 = v304 + v303;\n                    v306 = function_4032f0(v305, v297, v26);\n                    v77 = v26;\n                    v78 = str2;\n                    v79 = 0;\n                    v80 = v24;\n                    v81 = v32;\n                    v82 = v30;\n                    v83 = v26;\n                    v84 = v296;\n                    v86 = v304;\n                    v87 = v297;\n                    v88 = 0;\n                    v89 = g30;\n                    v90 = v303;\n                    v91 = v13;\n                    v92 = v307;\n                    if (v306 == 0) {\n                        // break (via goto) -> 0x402664\n                        goto lab_0x402664;\n                    }\n                    // 0x4021bb\n                    v307++;\n                }\n                int64_t v308 = v302 + 1024; // 0x4021c9\n                uint128_t v309 = 24 * (int128_t)v308; // 0x4021d8\n                int64_t v310 = v309; // 0x4021d8\n                v21 = v305;\n                if (v310 < 0) {\n                    // 0x402b70\n                    function_4069e0(v21);\n                    // UNREACHABLE\n                }\n                // 0x4021ea\n                v21 = v305;\n                if (v309 % 0x1f0000000000000001 != 0) {\n                    // 0x402b70\n                    function_4069e0(v21);\n                    // UNREACHABLE\n                }\n                int64_t v311 = function_4067f0(v303, v310); // 0x4021f9\n                memset((int64_t *)(v304 + 24 + v311), 0, 0x6000);\n                v300 = v307;\n                v301 = v311;\n                v302 = v308;\n                v51 = g30;\n                v53 = v32;\n                v55 = v13;\n                v57 = v311;\n                v58 = v297;\n                v60 = v306;\n                v62 = v296;\n                v64 = v26;\n                v66 = v30;\n                v68 = v32;\n                v70 = v24;\n                v72 = 0;\n                v74 = str2;\n                v76 = v26;\n                if (v32 == v307) {\n                    goto lab_0x4025e4_2;\n                }\n            }\n        }\n        goto lab_0x402664;\n    }\n  lab_0x40276e:;\n    int64_t v312 = &v23; // 0x40276e\n    int32_t v313 = __fxstat(1, 0, (struct stat *)&v23); // 0x40277d\n    v172 = v312;\n    v168 = v167;\n    if (v313 != 0) {\n        goto lab_0x40213b;\n    } else {\n        // 0x40278a\n        v172 = v312;\n        v168 = v167;\n        int32_t v314; // 0x401da0\n        if ((v314 & 0xd000) != 0x8000) {\n            goto lab_0x40213b;\n        } else {\n            int32_t v315 = lseek(0, 0, SEEK_CUR); // 0x4027ac\n            v172 = v312;\n            v168 = v167;\n            if (v315 < 0) {\n                goto lab_0x40213b;\n            } else {\n                // 0x4027ba\n                v172 = v312;\n                v168 = v167;\n                v173 = v312;\n                if (v2 - (int64_t)v315 > 0x800000) {\n                    goto lab_0x40213b;\n                } else {\n                    goto lab_0x4027ca;\n                }\n            }\n        }\n    }\n  lab_0x40247b:;\n    int64_t v316 = v114;\n    int64_t v317 = v112;\n    int64_t v318 = v117;\n    int64_t v319 = v120;\n    char * v320 = v131;\n    char v321 = v135;\n    int64_t v322 = v138;\n    int64_t v323 = v144;\n    char v324 = v123;\n    char v325 = v126;\n    char * v326 = v141;\n    char v327 = v130;\n    if (v326 == NULL) {\n        goto lab_0x4024a2;\n    } else {\n        int64_t v328 = (int64_t)v326;\n        int64_t v329 = function_403130(v328, &g2, (int64_t)g29); // 0x402494\n        v248 = v328;\n        v262 = v327;\n        v269 = v326;\n        v259 = v325;\n        v258 = v324;\n        v271 = v323;\n        v267 = v322;\n        v265 = v321;\n        v264 = v320;\n        v254 = v319;\n        v252 = v318;\n        v250 = v316;\n        if (v329 == 0) {\n            goto lab_0x4028ee;\n        } else {\n            goto lab_0x4024a2;\n        }\n    }\n  lab_0x402ad0:\n    // 0x402ad0\n    error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n    v171 = 0;\n    v174 = v278;\n    goto lab_0x402afc;\n  lab_0x4026ab:;\n    int64_t v330 = v113;\n    int64_t v331 = v111;\n    int64_t v332 = v110;\n    int64_t v333 = v116;\n    int64_t v334 = v119;\n    int64_t v335 = v122;\n    char * v336 = v133;\n    char v337 = v134;\n    int64_t v338 = v137;\n    int64_t v339 = v143;\n    char v340 = v125;\n    char * v341 = v140;\n    char v342 = v128;\n    char v343 = v335; // 0x4026b8\n    int64_t v344 = function_4052b0((int64_t)v336, v339, v330); // 0x4026bc\n    if (v341 == NULL) {\n        goto lab_0x4026f9;\n    } else {\n        int64_t v345 = (int64_t)v341;\n        int64_t v346 = function_403130(v345, &g2, (int64_t)g29); // 0x4026e6\n        v248 = v345;\n        v262 = v342;\n        v269 = v341;\n        v259 = v340;\n        v258 = v343;\n        v271 = v339;\n        v267 = v338;\n        v265 = v337;\n        v264 = v336;\n        v254 = v334;\n        v252 = v333;\n        v250 = v330;\n        if (v346 == 0) {\n            goto lab_0x4028ee;\n        } else {\n            goto lab_0x4026f9;\n        }\n    }\n  lab_0x402534:\n    // 0x402534\n    error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n    char v347 = v129; // 0x402559\n    char * v348 = v142; // 0x402559\n    char v349 = v127; // 0x402559\n    char v350 = v124; // 0x402559\n    int64_t v351 = v145; // 0x402559\n    int64_t v352 = v139; // 0x402559\n    char v353 = v136; // 0x402559\n    char * v354 = v132; // 0x402559\n    int64_t v355 = v121; // 0x402559\n    int64_t v356 = v118; // 0x402559\n    int64_t v357 = v115; // 0x402559\n    goto lab_0x40255e;\n  lab_0x402305:;\n    int64_t v383 = v251;\n    int64_t v384 = v253;\n    int64_t v385 = v256;\n    char * v386 = v263;\n    char v387 = v266;\n    int64_t v388 = v268;\n    int64_t v389 = v272;\n    char v390 = v257;\n    char v391 = v260;\n    char * v392 = v270;\n    char v393 = v261;\n    char v371 = v393; // 0x40230a\n    char * v372 = v392; // 0x40230a\n    char v373 = 0; // 0x40230a\n    char v374 = v390; // 0x40230a\n    int64_t v365 = v389; // 0x40230a\n    int64_t v375 = v388; // 0x40230a\n    char v376 = v387; // 0x40230a\n    char * v377 = v386; // 0x40230a\n    int64_t v368 = v385; // 0x40230a\n    int64_t v369 = v255; // 0x40230a\n    int64_t v378 = v384; // 0x40230a\n    int64_t v379 = v383; // 0x40230a\n    if (v391 == 0) {\n        goto lab_0x40291d;\n    } else {\n        // 0x402310\n        if (v389 == 0) {\n            // 0x40234b\n            return 0;\n        }\n        int64_t v394 = 0;\n        int64_t v395 = *(int64_t *)(8 * v394 + v385); // 0x40231f\n        int32_t v396 = __printf_chk(1, \"%lu%c\", (int32_t)(v395 + v249), v393); // 0x402335\n        v75 = v393;\n        v73 = v392;\n        v71 = v391;\n        v69 = v390;\n        v67 = v389;\n        v65 = v388;\n        v63 = v387;\n        v61 = v386;\n        v85 = v394;\n        v59 = v384;\n        v49 = v393;\n        v56 = v389;\n        v54 = v249;\n        v52 = v383;\n        while (v396 >= 0) {\n            int64_t v397 = v394 + 1; // 0x402342\n            if (v397 == v389) {\n                // 0x40234b\n                return 0;\n            }\n            v394 = v397;\n            v395 = *(int64_t *)(8 * v394 + v385);\n            v396 = __printf_chk(1, \"%lu%c\", (int32_t)(v395 + v249), v393);\n            v75 = v393;\n            v73 = v392;\n            v71 = v391;\n            v69 = v390;\n            v67 = v389;\n            v65 = v388;\n            v63 = v387;\n            v61 = v386;\n            v85 = v394;\n            v59 = v384;\n            v49 = v393;\n            v56 = v389;\n            v54 = v249;\n            v52 = v383;\n        }\n        goto lab_0x4025db_3;\n    }\n  lab_0x4024a2:\n    if (v323 == 0) {\n        // 0x40234b\n        return 0;\n    }\n    int64_t v382 = v319; // 0x4024b1\n    if (v316 == 0) {\n        goto lab_0x402aae;\n    } else {\n        // 0x4024b7\n        v347 = v327;\n        v348 = v326;\n        v349 = 0;\n        v350 = v324;\n        v351 = v323;\n        v352 = v322;\n        v353 = v321;\n        v354 = v320;\n        v355 = v319;\n        v356 = v318;\n        v357 = v316;\n        if (v325 != 0) {\n            int64_t v398 = (int64_t)v320; // 0x4024d4\n            int64_t v399 = v322 - v317; // 0x4024d9\n            int64_t v400 = 0;\n            int32_t v401 = __printf_chk(1, \"%lu%c\", (int32_t)(function_4050e0(v398, v399) + v317), v327); // 0x4024f9\n            v75 = v327;\n            v73 = v326;\n            v71 = v325;\n            v69 = v324;\n            v67 = v323;\n            v65 = v322;\n            v63 = v321;\n            v61 = v320;\n            v85 = v399;\n            v59 = v318;\n            v49 = v400;\n            v56 = v398;\n            v54 = v317;\n            v52 = v323;\n            if (v401 < 0) {\n                goto lab_0x4025db_3;\n            }\n            int64_t v402 = v400 + 1; // 0x402506\n            while (v402 != v323) {\n                // 0x4024dc\n                v400 = v402;\n                v401 = __printf_chk(1, \"%lu%c\", (int32_t)(function_4050e0(v398, v399) + v317), v327);\n                v75 = v327;\n                v73 = v326;\n                v71 = v325;\n                v69 = v324;\n                v67 = v323;\n                v65 = v322;\n                v63 = v321;\n                v61 = v320;\n                v85 = v399;\n                v59 = v318;\n                v49 = v400;\n                v56 = v398;\n                v54 = v317;\n                v52 = v323;\n                if (v401 < 0) {\n                    goto lab_0x4025db_3;\n                }\n                // 0x402506\n                v402 = v400 + 1;\n            }\n            // 0x40234b\n            return 0;\n        }\n        goto lab_0x40255e;\n    }\n  lab_0x402a5f:\n    // 0x402a5f\n    error(1, EOVERFLOW, dcgettext(NULL, \"too many input lines\", 5));\n    v109 = v160;\n    goto lab_0x402a84;\n  lab_0x4026f9:\n    // 0x4026f9\n    v261 = v342;\n    v270 = v341;\n    v260 = v340;\n    v257 = v343;\n    v272 = v339;\n    v268 = v338;\n    v266 = v337;\n    v263 = v336;\n    v256 = v344;\n    v255 = v334;\n    v253 = v333;\n    v249 = v331;\n    v251 = v330;\n    if (v335 != 0) {\n        // 0x402734\n        if (v330 == 0) {\n            // 0x40234b\n            return 0;\n        }\n        int64_t v403 = 0;\n        int64_t v404 = 24 * *(int64_t *)(8 * v403 + v344) + v332; // 0x402716\n        int64_t * n3 = (int64_t *)(v404 + 8); // 0x402719\n        int64_t data3 = *(int64_t *)(v404 + 16); // 0x40271d\n        int32_t v405 = fwrite_unlocked((int64_t *)data3, 1, (int32_t)*n3, g29); // 0x402721\n        v75 = v342;\n        v73 = v341;\n        v71 = v340;\n        v69 = v343;\n        v67 = v339;\n        v65 = v338;\n        v63 = v337;\n        v61 = v336;\n        v85 = v404;\n        v59 = v333;\n        v49 = v403;\n        v56 = v332;\n        v54 = v331;\n        v52 = v330;\n        while (*n3 == (int64_t)v405) {\n            int64_t v406 = v403 + 1; // 0x402730\n            if (v330 == v406) {\n                // 0x40234b\n                return 0;\n            }\n            v403 = v406;\n            v404 = 24 * *(int64_t *)(8 * v403 + v344) + v332;\n            n3 = (int64_t *)(v404 + 8);\n            data3 = *(int64_t *)(v404 + 16);\n            v405 = fwrite_unlocked((int64_t *)data3, 1, (int32_t)*n3, g29);\n            v75 = v342;\n            v73 = v341;\n            v71 = v340;\n            v69 = v343;\n            v67 = v339;\n            v65 = v338;\n            v63 = v337;\n            v61 = v336;\n            v85 = v404;\n            v59 = v333;\n            v49 = v403;\n            v56 = v332;\n            v54 = v331;\n            v52 = v330;\n        }\n        goto lab_0x4025db_3;\n    } else {\n        goto lab_0x402305;\n    }\n  lab_0x40255e:;\n    int64_t v358 = v351;\n    int64_t v359 = v357 - 1; // 0x40255e\n    int64_t v360 = (int64_t)v354; // 0x40256a\n    int64_t v361 = 0;\n    int64_t v362 = 8 * function_4050e0(v360, v359) + v355; // 0x402595\n    int64_t data = *(int64_t *)v362; // 0x40259a\n    int64_t n = *(int64_t *)(v362 + 8) - data; // 0x4025a1\n    v75 = v347;\n    v73 = v348;\n    v71 = v349;\n    v69 = v350;\n    v67 = v358;\n    v65 = v352;\n    v63 = v353;\n    v61 = v354;\n    v85 = v355;\n    v59 = v356;\n    v49 = v359;\n    v56 = v361;\n    v54 = v360;\n    v52 = v358;\n    if (n != (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g29)) {\n        goto lab_0x4025db_3;\n    }\n    int64_t v363 = v361 + 1; // 0x402571\n    while (v358 != v363) {\n        // 0x40257e\n        v361 = v363;\n        v362 = 8 * function_4050e0(v360, v359) + v355;\n        data = *(int64_t *)v362;\n        n = *(int64_t *)(v362 + 8) - data;\n        v75 = v347;\n        v73 = v348;\n        v71 = v349;\n        v69 = v350;\n        v67 = v358;\n        v65 = v352;\n        v63 = v353;\n        v61 = v354;\n        v85 = v355;\n        v59 = v356;\n        v49 = v359;\n        v56 = v361;\n        v54 = v360;\n        v52 = v358;\n        if (n != (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g29)) {\n            goto lab_0x4025db_3;\n        }\n        // 0x402571\n        v363 = v361 + 1;\n    }\n    // 0x40234b\n    return 0;\n  lab_0x40291d:;\n    int64_t v364 = v365;\n    if (v364 == 0) {\n        // 0x40234b\n        return 0;\n    }\n    int64_t v366 = 0;\n    int64_t v367 = 8 * *(int64_t *)(8 * v366 + v368) + v369; // 0x402944\n    int64_t data2 = *(int64_t *)v367; // 0x402949\n    int64_t n2 = *(int64_t *)(v367 + 8) - data2; // 0x402950\n    int32_t v370 = fwrite_unlocked((int64_t *)data2, 1, (int32_t)n2, g29); // 0x402956\n    v75 = v371;\n    v73 = v372;\n    v71 = v373;\n    v69 = v374;\n    v67 = v364;\n    v65 = v375;\n    v63 = v376;\n    v61 = v377;\n    v85 = v369;\n    v59 = v378;\n    v49 = n2;\n    v56 = v366;\n    v54 = v364;\n    v52 = v379;\n    if (n2 != (int64_t)v370) {\n        goto lab_0x4025db_3;\n    }\n    int64_t v380 = v366 + 1; // 0x402927\n    while (v380 != v364) {\n        // 0x402934\n        v366 = v380;\n        v367 = 8 * *(int64_t *)(8 * v366 + v368) + v369;\n        data2 = *(int64_t *)v367;\n        n2 = *(int64_t *)(v367 + 8) - data2;\n        v370 = fwrite_unlocked((int64_t *)data2, 1, (int32_t)n2, g29);\n        v75 = v371;\n        v73 = v372;\n        v71 = v373;\n        v69 = v374;\n        v67 = v364;\n        v65 = v375;\n        v63 = v376;\n        v61 = v377;\n        v85 = v369;\n        v59 = v378;\n        v49 = n2;\n        v56 = v366;\n        v54 = v364;\n        v52 = v379;\n        if (n2 != (int64_t)v370) {\n            goto lab_0x4025db_3;\n        }\n        // 0x402927\n        v380 = v366 + 1;\n    }\n    // 0x40234b\n    return 0;\n  lab_0x4028ee:;\n    int64_t v381 = function_404ed0(0, 3, v248); // 0x4028fa\n    error(1, *__errno_location(), \"%s\", (char *)v381);\n    v371 = v262;\n    v372 = v269;\n    v373 = v259;\n    v374 = v258;\n    v365 = v271;\n    v375 = v267;\n    v376 = v265;\n    v377 = v264;\n    v368 = v381;\n    v369 = v254;\n    v378 = v252;\n    v379 = v250;\n    goto lab_0x40291d;\n  lab_0x402aae:\n    // 0x402aae\n    error(1, (int32_t)\"no lines to repeat\" ^ (int32_t)\"no lines to repeat\", dcgettext(NULL, \"no lines to repeat\", 5));\n    v278 = v382;\n    goto lab_0x402ad0;\n  lab_0x402a84:\n    // 0x402a84\n    error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n    v382 = v109;\n    goto lab_0x402aae;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402b80",
            "funcEndAddr": "402bab",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402b80\n    int64_t v1; // 0x402b80\n    __libc_start_main(0x401da0, (int32_t)a4, (char **)&v1, (void (*)())0x409f20, (void (*)())0x409f80, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402bab",
            "funcStartAddr": "402bab",
            "funcEndAddr": "402bca",
            "decompiledFuncCode": "int64_t function_402bab(void) {\n    // 0x402bab\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_402bca",
            "funcStartAddr": "402bca",
            "funcEndAddr": "402c01",
            "decompiledFuncCode": "int64_t function_402bca(void) {\n    // 0x402bca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402c01",
            "funcStartAddr": "402c01",
            "funcEndAddr": "402c58",
            "decompiledFuncCode": "int64_t function_402c01(void) {\n    // 0x402c01\n    if (g33 != 0) {\n        // 0x402c57\n        int64_t result; // 0x402c01\n        return result;\n    }\n    int64_t v1 = g34; // 0x402c34\n    int64_t result2; // 0x402c46\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402c46\n        result2 = function_402bab();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402c36\n        v1++;\n    }\n    // 0x402c2a\n    g34 = v1;\n    // 0x402c46\n    result2 = function_402bab();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402c58",
            "funcStartAddr": "402c58",
            "funcEndAddr": "402c5d",
            "decompiledFuncCode": "int64_t function_402c58(void) {\n    // 0x402c58\n    return function_402bca();\n}\n"
        },
        {
            "funcName": "function_402c60",
            "funcStartAddr": "402c60",
            "funcEndAddr": "402fdd",
            "decompiledFuncCode": "int64_t function_402c60(int64_t a1) {\n    int32_t status = a1; // 0x402c76\n    if (status != 0) {\n        // 0x402c7a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402c9f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402ca6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]\\n  or:  %s -e [OPTION]... [ARG]...\\n  or:  %s -i LO-HI [OPTION]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Write a random permutation of the input lines to standard output.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -e, --echo                treat each ARG as an input line\\n  -i, --input-range=LO-HI   treat each number LO through HI as an input line\\n  -n, --head-count=COUNT    output at most COUNT lines\\n  -o, --output=FILE         write result to FILE instead of standard output\\n      --random-source=FILE  get random bytes from FILE\\n  -r, --repeat              output lines can be repeated\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated     line delimiter is NUL, not newline\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402dbf\n    bool v2; // 0x402c60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402e40\n    int64_t v6 = *(int64_t *)v5; // 0x402e44\n    int64_t v7 = 5; // 0x402e4a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"shuf\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402e56\n        char v11 = *(char *)v9; // 0x402e56\n        char v12 = v11; // 0x402e56\n        bool v13 = false; // 0x402e56\n        while (v10 == v11) {\n            // 0x402e4c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402e56\n            int64_t v15 = v8 + v3; // 0x402e56\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402e62\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x402e62\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402f74;\n        } else {\n            // 0x402f5e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402fb3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ec4;\n            } else {\n                goto lab_0x402f74;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402ec4;\n        } else {\n            // 0x402eaa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402fb3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ec4;\n            } else {\n                goto lab_0x402ec4;\n            }\n        }\n    }\n  lab_0x402f74:\n    // 0x402f74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c9f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402ec4:\n    // 0x402ec4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c9f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402fe0",
            "funcStartAddr": "402fe0",
            "funcEndAddr": "402fe8",
            "decompiledFuncCode": "int64_t function_402fe0(int64_t a1) {\n    // 0x402fe0\n    g36 = a1;\n    int64_t result; // 0x402fe0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ff0",
            "funcStartAddr": "402ff0",
            "funcEndAddr": "402ff8",
            "decompiledFuncCode": "int64_t function_402ff0(int64_t a1) {\n    // 0x402ff0\n    g35 = a1;\n    int64_t result; // 0x402ff0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403000",
            "funcStartAddr": "403000",
            "funcEndAddr": "40309e",
            "decompiledFuncCode": "int64_t function_403000(void) {\n    // 0x403000\n    int32_t * err_num; // 0x403016\n    if ((int32_t)function_4084b0((int64_t)g29) == 0) {\n        goto lab_0x40302c;\n    } else {\n        // 0x403016\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x403043;\n        } else {\n            // 0x403027\n            if (*err_num != 32) {\n                goto lab_0x403043;\n            } else {\n                goto lab_0x40302c;\n            }\n        }\n    }\n  lab_0x40302c:;\n    int64_t result = function_4084b0((int64_t)g32); // 0x403033\n    if ((int32_t)result == 0) {\n        // 0x40303c\n        return result;\n    }\n    // 0x40307e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x403043:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40304f\n    if (g36 == 0) {\n        // 0x403089\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403063\n        error(0, *err_num, \"%s: %s\", (char *)function_404ea0((int64_t)g36), v1);\n    }\n    // 0x40307e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4030a0",
            "funcStartAddr": "4030a0",
            "funcEndAddr": "4030a5",
            "decompiledFuncCode": "int64_t function_4030a0(void) {\n    // 0x4030a0\n    int64_t fd; // 0x4030a0\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_4030b0",
            "funcStartAddr": "4030b0",
            "funcEndAddr": "4030d1",
            "decompiledFuncCode": "int64_t function_4030b0(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x4030b0\n    if (stream == 0) {\n        // 0x4030d0\n        int64_t result; // 0x4030b0\n        return result;\n    }\n    // 0x4030b5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4030e0",
            "funcStartAddr": "4030e0",
            "funcEndAddr": "40312b",
            "decompiledFuncCode": "int64_t function_4030e0(int32_t a1, int64_t a2) {\n    int32_t fd = open(\"/dev/null\", O_RDONLY); // 0x4030f6\n    if (fd == a1) {\n        // 0x403105\n        return 1;\n    }\n    // 0x4030ff\n    if (fd < 0) {\n        // 0x403105\n        return 0;\n    }\n    // 0x403110\n    close(fd);\n    *__errno_location() = 9;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403130",
            "funcStartAddr": "403130",
            "funcEndAddr": "4032df",
            "decompiledFuncCode": "int64_t function_403130(int64_t a1, int64_t * a2, int64_t stream) {\n    int32_t v1 = fileno((struct _IO_FILE *)stream); // 0x40314c\n    int32_t * v2 = __errno_location(); // 0x403153\n    int64_t v3 = 0; // 0x403130\n    int64_t v4 = 0; // 0x403130\n    int64_t v5 = 0; // 0x403130\n    int64_t v6 = 0; // 0x403130\n    int64_t v7 = 0; // 0x403130\n    switch (v1) {\n        case 1: {\n            goto lab_0x4031a0;\n        }\n        case 2: {\n            goto lab_0x40318a;\n        }\n        case 0: {\n            goto lab_0x4031dc;\n        }\n        default: {\n            // 0x403175\n            v3 = dup2(2, 2) != 2;\n            goto lab_0x40318a;\n        }\n    }\n  lab_0x4031a0:;\n    // 0x4031a0\n    int64_t v8; // 0x403130\n    int64_t v9; // 0x403130\n    int64_t v10; // 0x403130\n    int64_t v11; // 0x403130\n    int64_t v12; // 0x403130\n    int64_t v13; // 0x403130\n    int64_t v14; // 0x4031b4\n    if (dup2(0, 0) == 0) {\n        // 0x403220\n        v10 = 0;\n        v8 = 0;\n        v14 = 0;\n        if (v4 == 0) {\n            goto lab_0x4031c4;\n        } else {\n            goto lab_0x403228;\n        }\n    } else {\n        int64_t v15 = function_4030e0(0, 0); // 0x4031af\n        v12 = v3;\n        v11 = v4;\n        v9 = 1;\n        v13 = 0;\n        if ((char)v15 == 0) {\n            goto lab_0x4031ef;\n        } else {\n            // 0x4031bf\n            v14 = v15 & 0xffffffff;\n            v10 = v4;\n            v8 = v14;\n            if (v4 != 0) {\n                goto lab_0x403228;\n            } else {\n                goto lab_0x4031c4;\n            }\n        }\n    }\n  lab_0x40318a:\n    // 0x40318a\n    v4 = dup2(1, 1) != 1;\n    goto lab_0x4031a0;\n  lab_0x4031dc:\n    // 0x4031dc\n    v12 = v5;\n    v11 = v6;\n    v9 = v7;\n    v13 = function_407450(a1, (int64_t)a2);\n    goto lab_0x4031ef;\n  lab_0x4031ef:;\n    int64_t v16 = (int64_t)*v2; // 0x4031ef\n    int64_t v17 = v11; // 0x4031f4\n    int64_t v18 = v13; // 0x4031f4\n    int64_t v19 = v9; // 0x4031f4\n    int64_t v20 = v16; // 0x4031f4\n    int64_t v21 = v11; // 0x4031f4\n    int64_t v22 = v13; // 0x4031f4\n    int64_t v23 = v9; // 0x4031f4\n    int64_t v24 = v16; // 0x4031f4\n    if ((char)v12 != 0) {\n        goto lab_0x403296;\n    } else {\n        goto lab_0x4031fa;\n    }\n  lab_0x4031c4:\n    // 0x4031c4\n    v5 = v3;\n    v6 = v10;\n    v7 = v8;\n    if ((char)v3 == 0) {\n        goto lab_0x4031dc;\n    } else {\n        int64_t v25 = function_4030e0(2, 0); // 0x4031cd\n        v5 = v25 & 0xffffffff;\n        v6 = v10;\n        v7 = v8;\n        if ((char)v25 == 0) {\n            // 0x403290\n            v21 = v10;\n            v22 = 0;\n            v23 = v8;\n            v24 = (int64_t)*v2;\n            goto lab_0x403296;\n        } else {\n            goto lab_0x4031dc;\n        }\n    }\n  lab_0x403228:;\n    int64_t v26 = function_4030e0(1, 0); // 0x40322d\n    v10 = v26 & 0xffffffff;\n    v8 = v14;\n    int64_t v27; // 0x403130\n    int64_t v28; // 0x403130\n    int64_t v29; // 0x403130\n    if ((char)v26 != 0) {\n        goto lab_0x4031c4;\n    } else {\n        int64_t v30 = (int64_t)*v2; // 0x403238\n        v27 = 0;\n        v28 = v14;\n        v29 = v30;\n        if ((char)v3 != 0) {\n            // 0x4032d0\n            close(2);\n            v27 = 0;\n            v28 = v14;\n            v29 = v30;\n        }\n        goto lab_0x403250;\n    }\n  lab_0x403296:\n    // 0x403296\n    close(2);\n    v17 = v21;\n    v18 = v22;\n    v19 = v23;\n    v20 = v24;\n    goto lab_0x4031fa;\n  lab_0x4031fa:\n    // 0x4031fa\n    v27 = v18;\n    v28 = v19;\n    v29 = v20;\n    int64_t result; // 0x403130\n    int64_t v31; // 0x403130\n    int64_t v32; // 0x403130\n    int64_t v33; // 0x403130\n    if ((char)v17 != 0) {\n        goto lab_0x403250;\n    } else {\n        // 0x4031ff\n        result = v18;\n        v32 = v20;\n        v31 = v18;\n        v33 = v20;\n        if ((char)v19 != 0) {\n            goto lab_0x40325f;\n        } else {\n            goto lab_0x403204;\n        }\n    }\n  lab_0x403250:\n    // 0x403250\n    close(1);\n    result = v27;\n    v32 = v29;\n    v31 = v27;\n    v33 = v29;\n    if ((char)v28 == 0) {\n        goto lab_0x403204;\n    } else {\n        goto lab_0x40325f;\n    }\n  lab_0x403204:;\n    int64_t result2 = 0; // 0x403207\n    int64_t v34 = v32; // 0x403207\n    if (result != 0) {\n        // 0x403209\n        return result;\n    }\n    goto lab_0x40326b;\n  lab_0x40325f:\n    // 0x40325f\n    close(0);\n    result2 = v31;\n    v34 = v33;\n    if (v31 != 0) {\n        // 0x403209\n        int64_t v35; // 0x403130\n        int64_t result3 = v35;\n        return result3;\n    }\n    goto lab_0x40326b;\n  lab_0x40326b:\n    // 0x40326b\n    *v2 = (int32_t)v34;\n    // 0x403209\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4032e0",
            "funcStartAddr": "4032e0",
            "funcEndAddr": "4032f0",
            "decompiledFuncCode": "int64_t function_4032e0(int64_t * a1) {\n    // 0x4032e0\n    int128_t v1; // 0x4032e0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x4032e0\n    *(int64_t *)((int64_t)a1 + 16) = 0;\n    int64_t v4; // 0x4032e0\n    __asm_movups(*(int128_t *)&v4, v3);\n    int64_t result; // 0x4032e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032f0",
            "funcStartAddr": "4032f0",
            "funcEndAddr": "40340b",
            "decompiledFuncCode": "int64_t function_4032f0(int64_t result, int64_t a2, char a3) {\n    int64_t * v1 = (int64_t *)(result + 16); // 0x403308\n    int64_t v2 = *v1; // 0x403308\n    int64_t v3 = v2 + result; // 0x403318\n    if ((v3 & 16) != 0) {\n        // 0x4033c8\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x403354\n    int64_t v5 = v3; // 0x4032f0\n    int64_t v6 = v2;\n    int64_t v7 = v2; // 0x403345\n    int64_t v8; // 0x4032f0\n    int64_t v9; // 0x4032f0\n    int64_t v10; // 0x4032f0\n    int64_t v11; // 0x4032f0\n    int64_t v12; // 0x4032f0\n    int64_t v13; // 0x4032f0\n    int64_t v14; // 0x4032f0\n    while (true) {\n      lab_0x403354:\n        // 0x403354\n        v9 = v7;\n        v8 = v6;\n        int64_t v15 = v5;\n        uint64_t v16 = *v4; // 0x403354\n        if (v16 < *(int64_t *)(a2 + 16)) {\n            // 0x403330\n            *v4 = v16 + 1;\n            v14 = v15;\n            v11 = (int64_t)*(char *)v16;\n            goto lab_0x40333b;\n        } else {\n            uint32_t v17 = __uflow((struct _IO_FILE *)a2); // 0x403365\n            int64_t v18 = 0x100000000000000 * v15 >> 56; // 0x40336a\n            v14 = v18;\n            v11 = v17;\n            if (v17 != -1) {\n                goto lab_0x40333b;\n            } else {\n                if (v8 == v9) {\n                    // break -> 0x4033c8\n                    break;\n                }\n                if ((v15 & 32) != 0) {\n                    // break -> 0x4033c8\n                    break;\n                }\n                // 0x40337f\n                v10 = v9;\n                if (*(char *)(v9 - 1) == a3) {\n                  lab_0x4033ec:\n                    // 0x4033ec\n                    *(int64_t *)(result + 8) = v10 - v8;\n                    return result;\n                }\n                // 0x40338a\n                v13 = a3;\n                v12 = (int64_t)a3 & 0xffffffff;\n                if (v9 != v18) {\n                    // 0x4033e0\n                    *(char *)v9 = a3;\n                    v10 = v9 + 1;\n                    goto lab_0x4033ec;\n                }\n                goto lab_0x403397;\n            }\n        }\n    }\n    // 0x4033c8\n    return 0;\n  lab_0x40333b:\n    // 0x40333b\n    v5 = v14;\n    int64_t v19 = v9; // 0x403340\n    int64_t v20 = v11; // 0x403340\n    int64_t v21 = v11; // 0x403340\n    int64_t v22 = v8; // 0x403340\n    v13 = v11;\n    v12 = v11;\n    if (v9 == v14) {\n        goto lab_0x403397;\n    } else {\n        goto lab_0x403345;\n    }\n  lab_0x403397:;\n    int64_t v23 = function_4068f0(v8, result); // 0x4033a4\n    int64_t v24 = v23 + v8; // 0x4033b4\n    *v1 = v23;\n    v5 = v24;\n    v19 = v24;\n    v20 = v13 % 256;\n    v21 = v12;\n    v22 = v23;\n    goto lab_0x403345;\n  lab_0x403345:\n    // 0x403345\n    v6 = v22;\n    v7 = v19 + 1;\n    *(char *)v19 = (char)v20;\n    v10 = v7;\n    int64_t v25 = v6; // 0x40334e\n    if ((int32_t)v21 == (int32_t)a3) {\n        // 0x4033ec\n        *(int64_t *)(result + 8) = v10 - v25;\n        return result;\n    }\n    goto lab_0x403354;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "40341a",
            "decompiledFuncCode": "int64_t function_403410(void) {\n    // 0x403410\n    int64_t v1; // 0x403410\n    return function_4032f0(v1, v1, 10);\n}\n"
        },
        {
            "funcName": "function_403420",
            "funcStartAddr": "403420",
            "funcEndAddr": "403429",
            "decompiledFuncCode": "int64_t function_403420(int64_t * a1) {\n    // 0x403420\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 16));\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "4034c9",
            "decompiledFuncCode": "int64_t function_403430(int64_t str) {\n    // 0x403430\n    if (str == 0) {\n        // 0x4034a9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40343e\n    int64_t result = (int64_t)found_char_pos; // 0x40343e\n    if (found_char_pos == NULL) {\n        // 0x403499\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403448\n    if (v1 - str < 7) {\n        // 0x403499\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x403458\n    bool v2; // 0x403430\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403430\n    int64_t v5 = result - 6; // 0x403430\n    int64_t v6 = 7; // 0x403466\n    unsigned char v7 = *(char *)v5; // 0x403466\n    char v8 = *(char *)v4; // 0x403466\n    char v9 = v8; // 0x403466\n    bool v10 = false; // 0x403466\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403470\n    int64_t v13 = v1; // 0x403470\n    int64_t v14 = 3; // 0x403470\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403499\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403482\n    char v16 = *(char *)v12; // 0x403482\n    char v17 = v16; // 0x403482\n    bool v18 = false; // 0x403482\n    while (v15 == v16) {\n        // 0x403472\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40348c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40348e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x403499\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034d0",
            "funcStartAddr": "4034d0",
            "funcEndAddr": "4035c2",
            "decompiledFuncCode": "int64_t function_4034d0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4034e4\n    int64_t result = (int64_t)v1; // 0x4034e4\n    if (result != a1) {\n        // 0x4034f1\n        return result;\n    }\n    int64_t v2 = function_409860(); // 0x403500\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4035b6\n    if (v3 == 85) {\n        // 0x403510\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4035a8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x40353e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x40354b\n        // 0x4034f1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4035a8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40358d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40359a\n    // 0x4034f1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4035d0",
            "funcStartAddr": "4035d0",
            "funcEndAddr": "403627",
            "decompiledFuncCode": "int64_t function_4035d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4035d0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403618\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403627",
            "funcStartAddr": "403627",
            "funcEndAddr": "4047f1",
            "decompiledFuncCode": "int64_t function_403627(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403671\n    int64_t v3 = 0; // 0x403671\n    int64_t v4; // 0x403627\n    int64_t v5; // 0x403627\n    int64_t v6; // 0x403627\n    int64_t v7; // 0x403627\n    int64_t v8; // 0x403627\n    int64_t v9; // 0x403627\n    int64_t v10; // 0x403627\n    int64_t v11; // 0x403627\n    int64_t v12; // 0x403627\n    int64_t v13; // 0x403627\n    int64_t v14; // 0x403627\n    int64_t v15; // 0x403627\n    int64_t v16; // 0x403627\n    int64_t v17; // 0x403627\n    int64_t v18; // 0x403627\n    int64_t result; // 0x403627\n    int64_t v19; // 0x403627\n    int32_t wc; // bp+132, 0x403627\n    int64_t ps; // bp+136, 0x403627\n    char v20; // 0x403be0\n    int64_t v21; // 0x403be0\n    int64_t v22; // 0x403f88\n    int64_t v23; // 0x403627\n    int64_t v24; // 0x403fa7\n    int32_t v25; // 0x403627\n    while (true) {\n      lab_0x403678_2:\n        // 0x403678\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403627\n        int64_t v27; // 0x4036ac\n        while (true) {\n          lab_0x403678:\n            // 0x403678\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403683\n            if (v15 == -1) {\n                // 0x403685\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403693\n            if (v28) {\n                // break (via goto) -> 0x403df8\n                goto lab_0x403df8;\n            }\n            // 0x40369c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g53 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403c8b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4037d1;\n                    }\n                    // 0x4040ad\n                    v26 = v5 + 1;\n                    goto lab_0x403678;\n                }\n                case 7: {\n                    goto lab_0x4037d1;\n                }\n                case 8: {\n                    goto lab_0x4037d1;\n                }\n                case 9: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4037d1;\n                }\n                case 12: {\n                    goto lab_0x4037d1;\n                }\n                case 13: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40379d;\n                }\n                case 36: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4037d1;\n                }\n                case 38: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4037d1;\n                }\n                case 44: {\n                    goto lab_0x4037d1;\n                }\n                case 45: {\n                    goto lab_0x4037d1;\n                }\n                case 46: {\n                    goto lab_0x4037d1;\n                }\n                case 47: {\n                    goto lab_0x4037d1;\n                }\n                case 48: {\n                    goto lab_0x4037d1;\n                }\n                case 49: {\n                    goto lab_0x4037d1;\n                }\n                case 50: {\n                    goto lab_0x4037d1;\n                }\n                case 51: {\n                    goto lab_0x4037d1;\n                }\n                case 52: {\n                    goto lab_0x4037d1;\n                }\n                case 53: {\n                    goto lab_0x4037d1;\n                }\n                case 54: {\n                    goto lab_0x4037d1;\n                }\n                case 55: {\n                    goto lab_0x4037d1;\n                }\n                case 56: {\n                    goto lab_0x4037d1;\n                }\n                case 57: {\n                    goto lab_0x4037d1;\n                }\n                case 58: {\n                    goto lab_0x4037d1;\n                }\n                case 59: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4037d1;\n                }\n                case 66: {\n                    goto lab_0x4037d1;\n                }\n                case 67: {\n                    goto lab_0x4037d1;\n                }\n                case 68: {\n                    goto lab_0x4037d1;\n                }\n                case 69: {\n                    goto lab_0x4037d1;\n                }\n                case 70: {\n                    goto lab_0x4037d1;\n                }\n                case 71: {\n                    goto lab_0x4037d1;\n                }\n                case 72: {\n                    goto lab_0x4037d1;\n                }\n                case 73: {\n                    goto lab_0x4037d1;\n                }\n                case 74: {\n                    goto lab_0x4037d1;\n                }\n                case 75: {\n                    goto lab_0x4037d1;\n                }\n                case 76: {\n                    goto lab_0x4037d1;\n                }\n                case 77: {\n                    goto lab_0x4037d1;\n                }\n                case 78: {\n                    goto lab_0x4037d1;\n                }\n                case 79: {\n                    goto lab_0x4037d1;\n                }\n                case 80: {\n                    goto lab_0x4037d1;\n                }\n                case 81: {\n                    goto lab_0x4037d1;\n                }\n                case 82: {\n                    goto lab_0x4037d1;\n                }\n                case 83: {\n                    goto lab_0x4037d1;\n                }\n                case 84: {\n                    goto lab_0x4037d1;\n                }\n                case 85: {\n                    goto lab_0x4037d1;\n                }\n                case 86: {\n                    goto lab_0x4037d1;\n                }\n                case 87: {\n                    goto lab_0x4037d1;\n                }\n                case 88: {\n                    goto lab_0x4037d1;\n                }\n                case 89: {\n                    goto lab_0x4037d1;\n                }\n                case 90: {\n                    goto lab_0x4037d1;\n                }\n                case 91: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4037d1;\n                }\n                case 94: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4037d1;\n                }\n                case 96: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4037d1;\n                }\n                case 98: {\n                    goto lab_0x4037d1;\n                }\n                case 99: {\n                    goto lab_0x4037d1;\n                }\n                case 100: {\n                    goto lab_0x4037d1;\n                }\n                case 101: {\n                    goto lab_0x4037d1;\n                }\n                case 102: {\n                    goto lab_0x4037d1;\n                }\n                case 103: {\n                    goto lab_0x4037d1;\n                }\n                case 104: {\n                    goto lab_0x4037d1;\n                }\n                case 105: {\n                    goto lab_0x4037d1;\n                }\n                case 106: {\n                    goto lab_0x4037d1;\n                }\n                case 107: {\n                    goto lab_0x4037d1;\n                }\n                case 108: {\n                    goto lab_0x4037d1;\n                }\n                case 109: {\n                    goto lab_0x4037d1;\n                }\n                case 110: {\n                    goto lab_0x4037d1;\n                }\n                case 111: {\n                    goto lab_0x4037d1;\n                }\n                case 112: {\n                    goto lab_0x4037d1;\n                }\n                case 113: {\n                    goto lab_0x4037d1;\n                }\n                case 114: {\n                    goto lab_0x4037d1;\n                }\n                case 115: {\n                    goto lab_0x4037d1;\n                }\n                case 116: {\n                    goto lab_0x4037d1;\n                }\n                case 117: {\n                    goto lab_0x4037d1;\n                }\n                case 118: {\n                    goto lab_0x4037d1;\n                }\n                case 119: {\n                    goto lab_0x4037d1;\n                }\n                case 120: {\n                    goto lab_0x4037d1;\n                }\n                case 121: {\n                    goto lab_0x4037d1;\n                }\n                case 122: {\n                    goto lab_0x4037d1;\n                }\n                case 123: {\n                    goto lab_0x403775;\n                }\n                case 124: {\n                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403775;\n                }\n                case 126: {\n                    goto lab_0x40379d;\n                }\n                default: {\n                    goto lab_0x403b75;\n                }\n            }\n        }\n      lab_0x403b75:\n        if (v23 != 1) {\n            // 0x403ee0\n            ps = 0;\n            int64_t len = v15; // 0x403ef0\n            if (v15 == -1) {\n                // 0x403ef2\n                len = strlen((char *)str);\n            }\n            // 0x403f1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403f7f:\n                // 0x403f7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403f84\n                int64_t v30 = v29 + str;\n                v24 = function_408320(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4044fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4044fa_2;\n                    }\n                    case -2: {\n                        // 0x4045dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404617\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40461a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404627\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404620\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4044fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4044fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x403f50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403ffc\n                        char v34 = *(char *)v33; // 0x40400d\n                        unsigned char v35; // 0x403627\n                        if (v34 < 125) {\n                            // 0x404018\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40402f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404000\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40400d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404018\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40402f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404000\n                            v33++;\n                        }\n                        goto lab_0x403f50;\n                    }\n                }\n            }\n            goto lab_0x4044fa_2;\n        } else {\n            // 0x403bc4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4037d1;\n        }\n    }\n  lab_0x403df8:\n    // 0x403df8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4046fa\n        if (v8 > result) {\n            // 0x404703\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403a27\n        return result;\n    }\n    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4037d1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4037e0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4039ea_2;\n        }\n    }\n    int64_t v39 = result; // 0x4038e1\n    char v40 = v20; // 0x4038e1\n    int64_t v41 = v38; // 0x4038e1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4038e1\n    int64_t v43 = v36; // 0x4038e1\n    goto lab_0x40385d;\n  lab_0x4039ea_2:\n    // 0x403a27\n    return function_4035d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4044fa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4037d1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4040ce\n        int64_t v50 = v5 + 1; // 0x4041b1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4041b8\n        char v52 = v20; // 0x4041b8\n        int64_t v53 = result; // 0x4041b8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404181\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404185\n            int64_t v56 = v54 + 1; // 0x40418a\n            int64_t v57 = v51 + 1; // 0x4041b1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40417c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404181\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404185\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40385d;\n    }\n  lab_0x403f50:\n    // 0x403f50\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403f6f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403f72\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4044fa\n        goto lab_0x4044fa_2;\n    }\n    goto lab_0x403f7f;\n  lab_0x40379d:\n    // 0x40379d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4039ea_2;\n    }\n    goto lab_0x4037d1;\n  lab_0x403775:;\n    bool v60 = v15 == 1; // 0x403780\n    if (v15 == -1) {\n        // 0x403782\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40378e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4037d1;\n    } else {\n        goto lab_0x40379d;\n    }\n  lab_0x40385d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403862\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403866\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403678_2;\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "40499e",
            "decompiledFuncCode": "int64_t function_404800(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404802\n    int32_t * v3 = __errno_location(); // 0x40481c\n    int64_t v4 = (int64_t)g21; // 0x404821\n    int32_t v5 = *v3; // 0x40482b\n    int64_t v6 = v4; // 0x404841\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404999\n            function_4069e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404850\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404857\n        int64_t v9; // 0x404800\n        if (g21 == &g22) {\n            int64_t v10 = function_4067f0(0, v8); // 0x40497a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x40497f\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4067f0(v4, v8); // 0x40486b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x40487a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x40487a\n        int32_t v14 = v7; // 0x404881\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4048b1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4048bb\n    int64_t * v17 = (int64_t *)v15; // 0x4048be\n    uint64_t v18 = *v17; // 0x4048be\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4048c1\n    int64_t result = *v19; // 0x4048c1\n    int64_t v20; // 0x404800\n    uint64_t v21 = function_4035d0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4048e4\n    if (v18 > v21) {\n        // 0x40495b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4048f7\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x404907\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406790(v22); // 0x404921\n    *v19 = result2;\n    int64_t v23; // 0x404800\n    function_4035d0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40495b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "4049d4",
            "decompiledFuncCode": "int64_t function_4049a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4049a7\n    int64_t result = function_406990(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x4049c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "4049ef",
            "decompiledFuncCode": "int64_t function_4049e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x4049ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "4049ff",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x4049f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a33",
            "decompiledFuncCode": "int64_t function_404a00(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x404a19\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x404a1e\n    uint32_t v3 = *v2; // 0x404a1e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404a22\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a53",
            "decompiledFuncCode": "int64_t function_404a40(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x404a4c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404a8b",
            "decompiledFuncCode": "int64_t function_404a60(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x404a68\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404a85\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404a7c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404b02",
            "decompiledFuncCode": "int64_t function_404a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x404ab2\n    int32_t * v2 = __errno_location(); // 0x404abb\n    uint32_t v3 = *(int32_t *)v1; // 0x404adb\n    int64_t result = function_4035d0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404aea\n    return result;\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404bf1",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x404b32\n    int32_t * v2 = __errno_location(); // 0x404b38\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404b57\n    int32_t * v4 = (int32_t *)v1; // 0x404b5a\n    int64_t v5 = function_4035d0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404b75\n    int64_t v6 = v5 + 1; // 0x404b7a\n    int64_t result = function_406790(v6); // 0x404b8f\n    function_4035d0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404bd4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404bdd\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c0a",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c00\n    return function_404b10(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404ca5",
            "decompiledFuncCode": "int64_t function_404c10(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x404c10\n    int64_t v2 = v1; // 0x404c10\n    int64_t v3 = v2; // 0x404c24\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404c43\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g54;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404c40\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g54;\n        }\n    }\n    int64_t v6 = v3; // 0x404c5d\n    if (g22 != 0x60f340) {\n        // 0x404c5f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g38;\n        v6 = &g54;\n    }\n    int64_t result = v6; // 0x404c81\n    if (g21 != &g22) {\n        // 0x404c83\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g54;\n    }\n    // 0x404c96\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cc1",
            "decompiledFuncCode": "int64_t function_404cb0(void) {\n    // 0x404cb0\n    int64_t v1; // 0x404cb0\n    return function_404800(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404cda",
            "decompiledFuncCode": "int64_t function_404cd0(void) {\n    // 0x404cd0\n    int64_t v1; // 0x404cd0\n    return function_404800(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cf6",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1) {\n    // 0x404ce0\n    return function_404800(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d12",
            "decompiledFuncCode": "int64_t function_404d00(int64_t a1, int64_t a2) {\n    // 0x404d00\n    return function_404800(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_404d20",
            "funcStartAddr": "404d20",
            "funcEndAddr": "404d88",
            "decompiledFuncCode": "int64_t function_404d20(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404d30\n    return function_404800((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404df4",
            "decompiledFuncCode": "int64_t function_404d90(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404da0\n    return function_404800((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e0c",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2) {\n    // 0x404e00\n    return function_404d20(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404e1f",
            "decompiledFuncCode": "int64_t function_404e10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404e10\n    return function_404d90(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e90",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x404e2d\n    int128_t v2 = __asm_movdqa(g40); // 0x404e35\n    int128_t v3 = __asm_movdqa(g41); // 0x404e3d\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x404e52\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404e68\n    uint32_t v6 = *v5; // 0x404e68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404e6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404800(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404e9d",
            "decompiledFuncCode": "int64_t function_404e90(int64_t a1, int64_t a2) {\n    // 0x404e90\n    return function_404e20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404eb1",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t a1) {\n    // 0x404ea0\n    return function_404e20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404ec0",
            "funcStartAddr": "404ec0",
            "funcEndAddr": "404eca",
            "decompiledFuncCode": "int64_t function_404ec0(void) {\n    // 0x404ec0\n    int64_t v1; // 0x404ec0\n    return function_404e20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "404f3e",
            "decompiledFuncCode": "int64_t function_404ed0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404eea\n    return function_404800((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404f40",
            "funcStartAddr": "404f40",
            "funcEndAddr": "404fac",
            "decompiledFuncCode": "int64_t function_404f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x404f47\n    int128_t v2 = __asm_movdqa(g40); // 0x404f4f\n    int128_t v3 = __asm_movdqa(g41); // 0x404f57\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x404f79\n    if (a2 == 0 || a3 == 0) {\n        // 0x404fa7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404f8a\n    return function_404800(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "404fb9",
            "decompiledFuncCode": "int64_t function_404fb0(void) {\n    // 0x404fb0\n    int64_t v1; // 0x404fb0\n    return function_404f40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "404fd7",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404fc0\n    return function_404f40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404ff3",
            "decompiledFuncCode": "int64_t function_404fe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404fe0\n    return function_404f40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "40500a",
            "decompiledFuncCode": "int64_t function_405000(void) {\n    // 0x405000\n    int64_t v1; // 0x405000\n    return function_404800(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "405022",
            "decompiledFuncCode": "int64_t function_405010(int64_t a1, int64_t a2) {\n    // 0x405010\n    return function_404800(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405041",
            "decompiledFuncCode": "int64_t function_405030(void) {\n    // 0x405030\n    int64_t v1; // 0x405030\n    return function_404800(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "405066",
            "decompiledFuncCode": "int64_t function_405050(int64_t a1) {\n    // 0x405050\n    return function_404800(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_405070",
            "funcStartAddr": "405070",
            "funcEndAddr": "405093",
            "decompiledFuncCode": "int64_t function_405070(int64_t a1) {\n    int64_t result = function_406790(24); // 0x405079\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050cf",
            "decompiledFuncCode": "int64_t function_4050a0(void) {\n    // 0x4050a0\n    int64_t v1; // 0x4050a0\n    int64_t v2 = function_4055f0(v1, v1, v1); // 0x4050a1\n    int64_t result = 0; // 0x4050ae\n    if (v2 != 0) {\n        // 0x4050b0\n        result = function_406790(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x4050cd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "4050d4",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t result) {\n    // 0x4050d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "4051d5",
            "decompiledFuncCode": "int64_t function_4050e0(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x4050e7\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x4050fb\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x4050ff\n    int64_t v4 = *v3; // 0x405103\n    int64_t result = *v2; // 0x405103\n    int64_t v5; // 0x4050e0\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x405140\n        int64_t v9; // 0x4050e0\n        int64_t v10; // 0x4050e0\n        if (v7 >= a2) {\n            // 0x405108\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x40519f\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x405154\n            int64_t v12 = 256 * v8 | 255; // 0x405158\n            v8 = v12;\n            int64_t v13 = v11; // 0x405161\n            while (v12 < a2) {\n                // 0x405150\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x405163\n            int64_t v14; // bp-64, 0x4050e0\n            function_405900(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x405175\n            int64_t v16 = 256 * v7 | 255; // 0x405187\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x40518e\n            v15++;\n            int64_t v18 = v16; // 0x405194\n            int64_t v19 = v17; // 0x405194\n            while (v16 < a2) {\n                // 0x405178\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x405196\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x40519f\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x405116\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x4051c8\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x40519f\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x4051af:\n    // 0x4051af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "4051fe",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1) {\n    // 0x4051e0\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_405200",
            "funcStartAddr": "405200",
            "funcEndAddr": "405251",
            "decompiledFuncCode": "int64_t function_405200(int64_t a1) {\n    int64_t v1 = function_405a60(a1); // 0x405210\n    int32_t * v2 = __errno_location(); // 0x405218\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "40526c",
            "decompiledFuncCode": "int64_t function_405260(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405260\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "40527a",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1, int64_t a2) {\n    // 0x405270\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "4052a6",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 - 1; // 0x405283\n    uint64_t v2 = v1; // 0x405287\n    if (v1 == 0) {\n        // 0x4052a5\n        return 0;\n    }\n    int64_t v3 = 0; // 0x405287\n    v3++;\n    while (v2 >= 2) {\n        // 0x405290\n        v2 /= 2;\n        v3++;\n    }\n    // 0x4052a5\n    return (v3 * a1 + 7) / 8;\n}\n"
        },
        {
            "funcName": "function_4052b0",
            "funcStartAddr": "4052b0",
            "funcEndAddr": "405584",
            "decompiledFuncCode": "int64_t function_4052b0(int64_t a1, uint64_t a2, uint64_t a3) {\n    // 0x4052b0\n    if (a2 == 0) {\n        // 0x4052ee\n        return 0;\n    }\n    if (a2 == 1) {\n        int64_t result = function_406790(8); // 0x4052d7\n        *(int64_t *)result = function_4050e0(a1, a3 - 1);\n        // 0x4052ee\n        return result;\n    }\n    int64_t v1; // 0x4052b0\n    int64_t v2; // 0x4052b0\n    int64_t v3; // 0x4052b0\n    bool v4; // 0x4052b0\n    if (a3 < 0x20000) {\n        int64_t v5 = function_406790(8 * a3); // 0x4054b8\n        v1 = v5;\n        v4 = true;\n        v3 = 0;\n        v2 = v5;\n        if (a3 != 0) {\n            goto lab_0x405352;\n        } else {\n            goto lab_0x405376;\n        }\n    } else {\n        if (a3 / a2 < 32) {\n            int64_t v6 = 8 * a3; // 0x405334\n            if (v6 < 0 || a3 >= 0x2000000000000000) {\n                // 0x40557f\n                function_4069e0(v6);\n                // UNREACHABLE\n            }\n            // 0x40534a\n            v1 = function_406790(v6);\n            goto lab_0x405352;\n        } else {\n            int64_t v7 = 2 * a2; // 0x405518\n            int64_t v8 = function_408ea0(v7, 0, 0x405260, 0x405270, 0x401900); // 0x40552e\n            if (v8 == 0) {\n                // 0x40557f\n                function_4069e0(v7);\n                // UNREACHABLE\n            }\n            int64_t v9 = 8 * a2; // 0x40554a\n            if (v9 < 0 || a2 >= 0x2000000000000000) {\n                // 0x40557f\n                function_4069e0(v9);\n                // UNREACHABLE\n            }\n            // 0x405558\n            v4 = false;\n            v3 = v8;\n            v2 = function_406790(v9);\n            goto lab_0x405376;\n        }\n    }\n  lab_0x405352:;\n    int64_t v10 = 0;\n    *(int64_t *)(8 * v10 + v1) = v10;\n    int64_t v11 = v10 + 1; // 0x40535c\n    v4 = true;\n    v3 = 0;\n    v2 = v1;\n    while (v11 < a3) {\n        // 0x405358\n        v10 = v11;\n        *(int64_t *)(8 * v10 + v1) = v10;\n        v11 = v10 + 1;\n        v4 = true;\n        v3 = 0;\n        v2 = v1;\n    }\n    goto lab_0x405376;\n  lab_0x405376:;\n    int64_t v12 = 0; // 0x405381\n    int64_t result2; // 0x4052b0\n    while (true) {\n        int64_t v13 = v12;\n        int64_t v14 = function_4050e0(a1, -1 - v13 + a3) + v13; // 0x4053bb\n        int64_t v15; // 0x4052b0\n        if (v4) {\n            int64_t * v16 = (int64_t *)(8 * v13 + v2); // 0x40538c\n            int64_t * v17 = (int64_t *)(8 * v14 + v2); // 0x405390\n            *v16 = *v17;\n            int64_t v18 = v13 + 1; // 0x405397\n            *v17 = *v16;\n            v15 = v18;\n            if (v18 >= a2) {\n                // break -> 0x40547d\n                break;\n            }\n        } else {\n            int64_t v19 = function_409680(v3); // 0x4053db\n            int64_t v20 = function_409680(v3); // 0x4053fb\n            int64_t v21 = v19; // 0x405406\n            if (v19 == 0) {\n                // 0x4054f0\n                v21 = function_406790(16);\n                *(int64_t *)(v21 + 8) = v13;\n                *(int64_t *)v21 = v13;\n            }\n            // 0x40540c\n            int64_t * v22; // 0x4052b0\n            int64_t v23; // 0x4052b0\n            int64_t v24; // 0x4052b0\n            if (v20 == 0) {\n                int64_t v25 = function_406790(16); // 0x4054d5\n                int64_t * v26 = (int64_t *)(v25 + 8);\n                *v26 = v14;\n                *(int64_t *)v25 = v14;\n                v22 = v26;\n                v24 = v25;\n                v23 = v14;\n            } else {\n                int64_t * v27 = (int64_t *)(v20 + 8);\n                v22 = v27;\n                v24 = v20;\n                v23 = *v27;\n            }\n            int64_t * v28 = (int64_t *)(v21 + 8); // 0x405419\n            *v28 = v23;\n            *v22 = *v28;\n            if (function_409640(v3, v21) == 0 || function_409640(v3, v24) == 0) {\n                // 0x40557f\n                function_4069e0(v3);\n                // UNREACHABLE\n            }\n            // 0x40545c\n            *(int64_t *)(8 * v13 + v2) = *v28;\n            int64_t v29 = v13 + 1; // 0x405464\n            v15 = v29;\n            if (v29 >= a2) {\n                // 0x405570\n                function_4090e0(v3);\n                result2 = v2;\n                goto lab_0x4052ee;\n            }\n        }\n        // 0x4053a7\n        v12 = v15;\n    }\n    int64_t v30 = 8 * a2; // 0x40548a\n    if (v30 < 0 || a2 >= 0x2000000000000000) {\n        // 0x40557f\n        function_4069e0(a1);\n        // UNREACHABLE\n    }\n    // 0x4054a0\n    result2 = function_4067f0(v2, v30);\n  lab_0x4052ee:\n    // 0x4052ee\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055ed",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1) {\n    // 0x405590\n    function_405050(a1);\n    int32_t * err_num = __errno_location(); // 0x4055a7\n    char * format; // 0x405590\n    if (*err_num == 0) {\n        // 0x4055df\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x4055b9\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x4055c5\n    error(g19, *err_num, format);\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "4058df",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_406790(0x1038); // 0x40570d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x405590;\n        *(int64_t *)(result + 16) = 0;\n        // 0x405662\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_408510(a1, \"rb\"); // 0x405617\n        int64_t result2 = 0; // 0x405622\n        if (stream != 0) {\n            // 0x405628\n            result2 = function_406790(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x405644\n            *(int64_t *)(result2 + 8) = 0x405590;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x405662\n        return result2;\n    }\n    int64_t result3 = function_406790(0x1038); // 0x40567d\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x405693\n    *(int64_t *)(result3 + 8) = 0x405590;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x4056b1\n    int64_t v2; // 0x4055f0\n    int128_t pid2; // bp-72, 0x4055f0\n    if (fd < 0) {\n        // 0x405738\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x405757\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x4056db\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x4056f8\n            function_405d60(v1);\n            // 0x405662\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x405866\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x405872\n        uint64_t v7 = v6 + v4; // 0x405878\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x4056f8\n            function_405d60(v1);\n            // 0x405662\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x4058a1\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x4058ad\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x4058c5\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x4056f8\n            function_405d60(v1);\n            // 0x405662\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x40576d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x405774\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x405790\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x40578e\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x40579f\n    if (v16 >= 2048) {\n        // 0x4056f8\n        function_405d60(v1);\n        // 0x405662\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x4057ba\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x4057c1\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x4057df\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x4057dd\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x4057ee\n    if (v21 >= 2048) {\n        // 0x4056f8\n        function_405d60(v1);\n        // 0x405662\n        return result3;\n    }\n    // 0x4057fe\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x405816\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x40581d\n    if (v23 == 0) {\n        // 0x4056f8\n        function_405d60(v1);\n        // 0x405662\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x40582f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x40582d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x4056f8\n    function_405d60(v1);\n    // 0x405662\n    return result3;\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058e5",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t a1, int64_t a2) {\n    // 0x4058e0\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x4058e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "4058f5",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2) {\n    // 0x4058f0\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x4058f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405900",
            "funcStartAddr": "405900",
            "funcEndAddr": "405a5c",
            "decompiledFuncCode": "int64_t function_405900(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x40591f\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x40595a\n        int64_t v3 = a3 - result; // 0x405965\n        if (v3 == 0) {\n            // 0x40596a\n            return result;\n        }\n        int64_t v4 = v3; // 0x405965\n        int64_t v5 = result + v1; // 0x405962\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x405934\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x40595a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x40596a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x405980\n    int64_t v9 = a3; // 0x405992\n    int64_t * v10; // 0x405900\n    int64_t v11; // 0x405900\n    int64_t v12; // 0x405900\n    int64_t v13; // 0x405900\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x4059a3\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x4059ba\n            function_405ab0(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x405a15;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_405ab0(32, v17); // 0x4059ed\n            int64_t v19 = v18 - 2048; // 0x4059f2\n            if (v19 == 0) {\n                // 0x405a38\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x405a04\n        function_405ab0(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x405a50\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x405a15:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x405a1e\n    *(int64_t *)24 = v11 - v13;\n    // 0x40596a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405aa9",
            "decompiledFuncCode": "int64_t function_405a60(int64_t a1) {\n    // 0x405a60\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x405aa0\n        return 0;\n    }\n    // 0x405a8a\n    return function_407390(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_405ab0",
            "funcStartAddr": "405ab0",
            "funcEndAddr": "405d55",
            "decompiledFuncCode": "int64_t function_405ab0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x405ab0\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x405ab7\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x405ac6\n    int64_t v4 = *v1 + 1; // 0x405ad0\n    *v1 = v4;\n    int64_t v5 = a2; // 0x405ae1\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x405af2\n    int64_t v9 = *v8; // 0x405af2\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x405af8\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x405b13\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x405b32\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x405b38\n    int64_t v14 = *v13; // 0x405b38\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x405b3c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x405b60\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x405b75\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x405b7c\n    int64_t v19 = *v18; // 0x405b7c\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x405b80\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x405b9b\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x405bad\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x405bb8\n    int64_t v24 = *v23; // 0x405bb8\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x405bc9\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x405be0\n    int64_t v27 = v7 + 32; // 0x405be3\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x405bfd\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x405ae8\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x405c1b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x405c2a\n    int64_t v33 = *v32; // 0x405c2a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x405c30\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x405c55\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x405c66\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x405c6d\n    int64_t v38 = *v37; // 0x405c6d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x405c74\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x405c98\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x405cad\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x405cb4\n    int64_t v43 = *v42; // 0x405cb4\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x405cb8\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x405cd3\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x405ce5\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x405cf0\n    int64_t v48 = *v47; // 0x405cf0\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x405d01\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x405d18\n    int64_t result = v31 + 32; // 0x405d1b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x405d35\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x405c20\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x405d45\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d60",
            "funcStartAddr": "405d60",
            "funcEndAddr": "405f94",
            "decompiledFuncCode": "int64_t function_405d60(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x405da7\n    int64_t v2 = a1; // 0x405dc3\n    int64_t * v3 = (int64_t *)v2; // 0x405dc8\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x405dcb\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x405dcb\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x405dcf\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x405dcf\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x405dd3\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x405dda\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x405dde\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x405deb\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x405dee\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x405df5\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x405e02\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x405e05\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x405e0c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x405e19\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x405e1c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x405e23\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x405e30\n    int64_t v21 = v5 - v20; // 0x405e36\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x405e40\n    uint64_t v23 = v11 - v22; // 0x405e49\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x405e54\n    int64_t v25 = v14 - v24; // 0x405e5e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x405e6d\n    int64_t v27 = v23 + v25; // 0x405e73\n    int64_t v28 = v17 - v26; // 0x405e76\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x405e81\n    int64_t v30 = v28 + v25; // 0x405e84\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x405e9a\n    while (v1 != v2) {\n        // 0x405dc8\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x405ea0\n    uint64_t v33 = *v32 + v28; // 0x405ea0\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x405ea4\n    int64_t v35 = *v34 + v29; // 0x405ea4\n    int64_t * v36 = (int64_t *)v31; // 0x405ea8\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x405eae\n    int64_t v38 = *v36 + v20 - v35; // 0x405eb2\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x405eb9\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x405ebd\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x405ec1\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x405ec7\n    uint64_t v43 = *v39 + v22 - v41; // 0x405ece\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x405ed5\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x405ed9\n    int64_t v46 = *v42 + v24 - v45; // 0x405ee2\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x405ee9\n    uint64_t v48 = *v44 + v26 - v47; // 0x405ef2\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x405ef9\n    int64_t v50 = v35 - v49; // 0x405f02\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x405f0c\n    uint64_t v52 = v41 - v51; // 0x405f15\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x405f20\n    int64_t result = v52 + v50; // 0x405f23\n    int64_t v54 = v45 - v53; // 0x405f2a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x405f35\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x405f39\n    int64_t v57 = v54 + v52; // 0x405f3f\n    int64_t v58 = v47 - v56; // 0x405f42\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x405f4d\n    int64_t v60 = v58 + v54; // 0x405f50\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x405ea0\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x405f6c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405fa0",
            "funcStartAddr": "405fa0",
            "funcEndAddr": "406133",
            "decompiledFuncCode": "int64_t function_405fa0(int64_t a1, int64_t * a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405fb9\n    int64_t v1; // bp-200, 0x405fa0\n    int32_t v2 = __fxstat(1, fileno(stream), (struct stat *)&v1); // 0x405fca\n    int64_t v3 = 0x2000; // 0x405fd1\n    int32_t v4; // 0x405fa0\n    if ((v4 & 0xf000) == 0x8000 == v2 > -1) {\n        int32_t v5 = ftello(stream); // 0x4060f3\n        int64_t v6 = v5; // 0x4060f3\n        v3 = 0x2000;\n        int64_t v7; // 0x405fa0\n        if (v5 > -1 == v7 > v6) {\n            // 0x40610f\n            v3 = v7 + 1 - v6;\n        }\n    }\n    int32_t size = v3;\n    int64_t * mem = malloc(size); // 0x405fef\n    int64_t result = (int64_t)mem; // 0x405fef\n    if (mem == NULL) {\n        // 0x406099\n        return result;\n    }\n    int64_t items_read = fread(mem, 1, size, stream); // 0x40605b\n    int64_t v8 = v3; // 0x406066\n    int64_t v9 = v3; // 0x406066\n    int64_t v10 = result; // 0x406066\n    int64_t v11 = items_read; // 0x406066\n    int64_t * v12; // 0x405fa0\n    int32_t * v13; // 0x405fa0\n    int32_t v14; // 0x405fa0\n    if (v3 != items_read) {\n      lab_0x406068:;\n        int32_t * v15 = __errno_location(); // 0x406068\n        if (ferror(stream) == 0) {\n            int64_t result2 = v10; // 0x406086\n            if (v9 - 1 > v11) {\n                int64_t * mem2 = realloc((int64_t *)v10, (int32_t)v11 + 1); // 0x406122\n                result2 = mem2 != NULL ? (int64_t)mem2 : v10;\n            }\n            // 0x40608c\n            *(char *)(result2 + v11) = 0;\n            *a2 = v11;\n            // 0x406099\n            return result2;\n        }\n        // 0x406068\n        v12 = (int64_t *)v10;\n        v13 = v15;\n        v14 = *v15;\n        goto lab_0x4060bb;\n      lab_0x4060bb:\n        // 0x4060bb\n        free(v12);\n        *v13 = v14;\n        // 0x406099\n        return 0;\n    }\n    int64_t v16 = v3; // 0x40602f\n    int64_t v17 = result;\n    while (v16 != -1) {\n        uint64_t v18 = v16 / 2; // 0x406020\n        v16 += v18;\n        int64_t * v19 = (int64_t *)v17;\n        int64_t * mem3 = realloc(v19, (int32_t)v16); // 0x406039\n        if (mem3 == NULL) {\n            int32_t * v20 = __errno_location(); // 0x4060b0\n            v12 = v19;\n            v13 = v20;\n            v14 = *v20;\n            goto lab_0x4060bb;\n        }\n        int64_t v21 = (int64_t)mem3;\n        int64_t nmemb = v16 - v8; // 0x406055\n        int64_t items_read2 = fread((int64_t *)(v8 + v21), 1, (int32_t)nmemb, stream); // 0x40605b\n        v8 += items_read2;\n        v9 = v16;\n        v10 = v21;\n        v11 = v8;\n        if (nmemb != items_read2) {\n            goto lab_0x406068;\n        }\n        v17 = v21;\n    }\n    int32_t * v22 = __errno_location(); // 0x4060d0\n    free((int64_t *)v17);\n    *v22 = 12;\n    // 0x406099\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406140",
            "funcStartAddr": "406140",
            "funcEndAddr": "4061c5",
            "decompiledFuncCode": "int64_t function_406140(int64_t file_path, int64_t a2, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x406150\n    if (file == NULL) {\n        // 0x406182\n        return 0;\n    }\n    int64_t v1 = (int64_t)file; // 0x406150\n    int64_t result = function_405fa0(v1, (int64_t *)a2); // 0x406163\n    int32_t * v2 = __errno_location(); // 0x40616b\n    if ((int32_t)function_407390(v1, a2) == 0) {\n        // 0x406182\n        return result;\n    }\n    int32_t v3 = *v2; // 0x4061a3\n    if (result != 0) {\n        // 0x4061a5\n        v3 = *v2;\n        free((int64_t *)result);\n    }\n    // 0x4061b1\n    *v2 = v3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "4061da",
            "decompiledFuncCode": "int64_t function_4061d0(void) {\n    // 0x4061d0\n    int64_t v1; // 0x4061d0\n    return function_406140(v1, v1, (int64_t *)\"r\");\n}\n"
        },
        {
            "funcName": "function_4061e0",
            "funcStartAddr": "4061e0",
            "funcEndAddr": "4061ea",
            "decompiledFuncCode": "int64_t function_4061e0(void) {\n    // 0x4061e0\n    int64_t v1; // 0x4061e0\n    return function_406140(v1, v1, (int64_t *)\"rb\");\n}\n"
        },
        {
            "funcName": "function_4061f0",
            "funcStartAddr": "4061f0",
            "funcEndAddr": "4065cd",
            "decompiledFuncCode": "int64_t function_4061f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x406288\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40620c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x406226\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40626b\n    if (a6 < 10) {\n        // 0x40627a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x406372\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4065d0",
            "funcStartAddr": "4065d0",
            "funcEndAddr": "4065f0",
            "decompiledFuncCode": "int64_t function_4065d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4065d0\n    if (a5 == 0) {\n        // 0x4065eb\n        return function_4061f0(a1, a2, a3, a4, a5, 0, (int64_t)&g54);\n    }\n    int64_t v1 = 0; // 0x4065d7\n    v1++;\n    int64_t v2 = v1; // 0x4065e9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4065e0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4065eb\n    return function_4061f0(a1, a2, a3, a4, a5, v2, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_4065f0",
            "funcStartAddr": "4065f0",
            "funcEndAddr": "406650",
            "decompiledFuncCode": "int64_t function_4065f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4065f0\n    int64_t v3 = &v2; // 0x4065f0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406623\n    int64_t v6; // 0x40660d\n    int64_t * v7; // 0x40662b\n    int64_t v8; // 0x40662b\n    int64_t v9; // 0x406637\n    if (v5 < 48) {\n        // 0x406600\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406643\n            break;\n        }\n    } else {\n        // 0x40662b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406643\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406621\n    while (v4 != 9) {\n        // 0x406619\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406600\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406643\n                break;\n            }\n        } else {\n            // 0x40662b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406643\n                break;\n            }\n        }\n        // 0x406619\n        v10 = 10;\n    }\n    // 0x406643\n    return function_4061f0(a1, a2, a3, a4, v3, v10, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_406650",
            "funcStartAddr": "406650",
            "funcEndAddr": "40670c",
            "decompiledFuncCode": "int64_t function_406650(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x406650\n    int64_t v1; // bp-168, 0x406650\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406650\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406650\n    int64_t v8; // 0x406650\n    int64_t v9; // bp-56, 0x406650\n    int64_t v10; // 0x4066b5\n    int64_t v11; // 0x4066d9\n    if ((int32_t)v6 < 48) {\n        // 0x4066a0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4066f0\n            break;\n        }\n    } else {\n        // 0x4066d2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4066f0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4066ca\n    int64_t v13 = 10; // 0x4066ca\n    while (v5 != 9) {\n        // 0x4066cc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4066a0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4066f0\n                break;\n            }\n        } else {\n            // 0x4066d2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4066f0\n                break;\n            }\n        }\n        // 0x4066c2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4066f0\n    int64_t v14; // bp-136, 0x406650\n    int64_t result = function_4061f0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g54); // 0x4066ff\n    return result;\n}\n"
        },
        {
            "funcName": "function_406710",
            "funcStartAddr": "406710",
            "funcEndAddr": "406784",
            "decompiledFuncCode": "int64_t function_406710(int64_t a1) {\n    // 0x406710\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406773\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_406790",
            "funcStartAddr": "406790",
            "funcEndAddr": "4067aa",
            "decompiledFuncCode": "int64_t function_406790(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406794\n    if (size != 0 != (mem == NULL)) {\n        // 0x4067a3\n        return (int64_t)mem;\n    }\n    // 0x4067a5\n    function_4069e0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4067b0",
            "funcStartAddr": "4067b0",
            "funcEndAddr": "4067d1",
            "decompiledFuncCode": "int64_t function_4067b0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4067b3\n    int64_t v2 = v1; // 0x4067b3\n    if (v2 < 0) {\n        // 0x4067cb\n        function_4069e0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4067c9\n        return function_406790(v2);\n    }\n    // 0x4067cb\n    function_4069e0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4067e0",
            "funcStartAddr": "4067e0",
            "funcEndAddr": "4067e2",
            "decompiledFuncCode": "int64_t function_4067e0(void) {\n    // 0x4067e0\n    int64_t v1; // 0x4067e0\n    return function_406790(v1);\n}\n"
        },
        {
            "funcName": "function_4067f0",
            "funcStartAddr": "4067f0",
            "funcEndAddr": "406826",
            "decompiledFuncCode": "int64_t function_4067f0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406818\n        free(v1);\n        return (int32_t)&g54 ^ (int32_t)&g54;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406801\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406810\n        return (int64_t)mem;\n    }\n    // 0x406821\n    function_4069e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406830",
            "funcStartAddr": "406830",
            "funcEndAddr": "406851",
            "decompiledFuncCode": "int64_t function_406830(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406833\n    int64_t v2 = v1; // 0x406833\n    if (v2 < 0) {\n        // 0x40684b\n        function_4069e0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406849\n        return function_4067f0(a1, v2);\n    }\n    // 0x40684b\n    function_4069e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406860",
            "funcStartAddr": "406860",
            "funcEndAddr": "4068e6",
            "decompiledFuncCode": "int64_t function_406860(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4068bb\n            function_4069e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4067f0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4068a3\n    if (a2 == 0) {\n        // 0x4068c8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4068a8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4068bb\n        function_4069e0(a1);\n        // UNREACHABLE\n    }\n    // 0x40688a\n    *(int64_t *)a2 = v2;\n    return function_4067f0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4068f0",
            "funcStartAddr": "4068f0",
            "funcEndAddr": "406940",
            "decompiledFuncCode": "int64_t function_4068f0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4068f0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40693a\n            function_4069e0(a1);\n            // UNREACHABLE\n        }\n        // 0x406912\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4067f0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406925\n        *(int64_t *)a2 = 128;\n        return function_4067f0(0, 128);\n    }\n    // 0x406938\n    if (a2 < 0) {\n        // 0x40693a\n        function_4069e0(a1);\n        // UNREACHABLE\n    }\n    // 0x406912\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4067f0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406940",
            "funcStartAddr": "406940",
            "funcEndAddr": "406957",
            "decompiledFuncCode": "int64_t function_406940(int64_t a1, int64_t a2) {\n    // 0x406940\n    return (int64_t)memset((int64_t *)function_406790(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406960",
            "funcStartAddr": "406960",
            "funcEndAddr": "40698e",
            "decompiledFuncCode": "int64_t function_406960(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406967\n    if ((int64_t)v1 < 0) {\n        // 0x406989\n        function_4069e0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406989\n        function_4069e0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40697a\n    if (mem != NULL) {\n        // 0x406984\n        return (int64_t)mem;\n    }\n    // 0x406989\n    function_4069e0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "4069b8",
            "decompiledFuncCode": "int64_t function_406990(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406790(a2); // 0x40699f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4069c0",
            "funcStartAddr": "4069c0",
            "funcEndAddr": "4069d3",
            "decompiledFuncCode": "int64_t function_4069c0(int64_t str) {\n    // 0x4069c0\n    return function_406990(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4069e0",
            "funcStartAddr": "4069e0",
            "funcEndAddr": "406a11",
            "decompiledFuncCode": "int64_t function_4069e0(int64_t a1) {\n    // 0x4069e0\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406a20",
            "funcStartAddr": "406a20",
            "funcEndAddr": "406af0",
            "decompiledFuncCode": "int64_t function_406a20(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x406a20\n    int64_t result2; // bp-64, 0x406a20\n    int32_t v1 = function_406f50(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x406a4c\n    int32_t * v2; // 0x406a20\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x406aca\n        if (v1 == 1) {\n            // 0x406ae8\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x406ad7\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x406adc\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x406a50\n        if (result >= a3 && result <= a4) {\n            // 0x406ab2\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x406a5f\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_405050(a1); // 0x406a7c\n    int32_t v6 = *v2; // 0x406a81\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x406a97\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x406ab2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406af0",
            "funcStartAddr": "406af0",
            "funcEndAddr": "406b11",
            "decompiledFuncCode": "int64_t function_406af0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x406af0\n    int64_t result; // 0x406af0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406b20",
            "funcStartAddr": "406b20",
            "funcEndAddr": "406f50",
            "decompiledFuncCode": "int64_t function_406b20(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int32_t a5, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x406b2e\n    if (base >= 37) {\n        // 0x406f2b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g54;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x406b52\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x406b82\n    int64_t v3 = str; // 0x406b87\n    char v4 = c; // 0x406b87\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x406b7c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x406b78\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x406b89\n    if (v4 == 45) {\n        // 0x406bc3\n        return 4;\n    }\n    int64_t str2 = a5;\n    int64_t v6; // bp-64, 0x406b20\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x406b4e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x406b94\n    int64_t * v7 = (int64_t *)endptr; // 0x406b99\n    int64_t v8 = *v7; // 0x406b99\n    char v9; // 0x406b20\n    int64_t v10; // 0x406b20\n    int64_t v11; // 0x406b20\n    int64_t v12; // 0x406b20\n    int64_t v13; // 0x406b20\n    int64_t v14; // 0x406b20\n    int64_t v15; // 0x406b20\n    if (v8 == str) {\n        // 0x406bf0\n        if (c == 0 || a5 == 0) {\n            // 0x406bc3\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x406c11\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x406bc3\n            return 4;\n        }\n        goto lab_0x406c1f;\n    } else {\n        int32_t v16 = *v1; // 0x406ba4\n        int64_t v17 = 0; // 0x406baa\n        if (v16 != 0) {\n            // 0x406bd8\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x406bc3\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x406b94\n        v13 = v18;\n        v10 = v17;\n        if (a5 == 0) {\n            goto lab_0x406bc0;\n        } else {\n            char c2 = *(char *)v8; // 0x406bb3\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x406d13\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x406c1f;\n                } else {\n                    goto lab_0x406d25;\n                }\n            } else {\n                goto lab_0x406bc0;\n            }\n        }\n    }\n  lab_0x406c1f:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x406c27\n    int64_t v21 = 1; // 0x406c27\n    int64_t v22; // 0x406b20\n    int64_t v23; // 0x406b20\n    int64_t v24; // 0x406b20\n    int64_t v25; // 0x406b20\n    int64_t v26; // 0x406b20\n    int64_t v27; // 0x406b20\n    int64_t v28; // 0x406b20\n    int64_t v29; // 0x406b20\n    int64_t v30; // 0x406b20\n    int64_t v31; // 0x406b20\n    int64_t v32; // 0x406b20\n    int64_t v33; // 0x406b20\n    int64_t v34; // 0x406b20\n    int64_t v35; // 0x406b20\n    int64_t v36; // 0x406b20\n    int64_t v37; // 0x406b20\n    int64_t v38; // 0x406b20\n    int64_t v39; // 0x406b20\n    int64_t v40; // 0x406b20\n    int64_t v41; // 0x406b20\n    if (v19 < 48) {\n        // 0x406c29\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x406c8a;\n        } else {\n            // 0x406c3c\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x406c8a;\n            } else {\n                // 0x406c58\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x406c8a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x406eb9\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x406c8a;\n                    }\n                    default: {\n                        // 0x406c6d\n                        g49 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x406e2b;\n                            }\n                            case 70: {\n                                goto lab_0x406d25;\n                            }\n                            case 71: {\n                                goto lab_0x406e63;\n                            }\n                            case 72: {\n                                goto lab_0x406d25;\n                            }\n                            case 73: {\n                                goto lab_0x406d25;\n                            }\n                            case 74: {\n                                goto lab_0x406d25;\n                            }\n                            case 75: {\n                                goto lab_0x406cec;\n                            }\n                            case 76: {\n                                goto lab_0x406d25;\n                            }\n                            case 77: {\n                                goto lab_0x406cae;\n                            }\n                            case 78: {\n                                goto lab_0x406d25;\n                            }\n                            case 79: {\n                                goto lab_0x406d25;\n                            }\n                            case 80: {\n                                goto lab_0x406df8;\n                            }\n                            case 81: {\n                                goto lab_0x406d25;\n                            }\n                            case 82: {\n                                goto lab_0x406d25;\n                            }\n                            case 83: {\n                                goto lab_0x406d25;\n                            }\n                            case 84: {\n                                goto lab_0x406dc8;\n                            }\n                            case 85: {\n                                goto lab_0x406d25;\n                            }\n                            case 86: {\n                                goto lab_0x406d25;\n                            }\n                            case 87: {\n                                goto lab_0x406d25;\n                            }\n                            case 88: {\n                                goto lab_0x406d25;\n                            }\n                            case 89: {\n                                goto lab_0x406d96;\n                            }\n                            case 90: {\n                                goto lab_0x406d5b;\n                            }\n                            case 91: {\n                                goto lab_0x406d25;\n                            }\n                            case 92: {\n                                goto lab_0x406d25;\n                            }\n                            case 93: {\n                                goto lab_0x406d25;\n                            }\n                            case 94: {\n                                goto lab_0x406d25;\n                            }\n                            case 95: {\n                                goto lab_0x406d25;\n                            }\n                            case 96: {\n                                goto lab_0x406d25;\n                            }\n                            case 97: {\n                                goto lab_0x406d25;\n                            }\n                            case 98: {\n                                goto lab_0x406d3f;\n                            }\n                            case 99: {\n                                goto lab_0x406cc8;\n                            }\n                            case 100: {\n                                goto lab_0x406d25;\n                            }\n                            case 101: {\n                                goto lab_0x406d25;\n                            }\n                            case 102: {\n                                goto lab_0x406d25;\n                            }\n                            case 103: {\n                                goto lab_0x406e63;\n                            }\n                            case 104: {\n                                goto lab_0x406d25;\n                            }\n                            case 105: {\n                                goto lab_0x406d25;\n                            }\n                            case 106: {\n                                goto lab_0x406d25;\n                            }\n                            case 107: {\n                                goto lab_0x406cec;\n                            }\n                            case 108: {\n                                goto lab_0x406d25;\n                            }\n                            case 109: {\n                                goto lab_0x406cae;\n                            }\n                            case 110: {\n                                goto lab_0x406d25;\n                            }\n                            case 111: {\n                                goto lab_0x406d25;\n                            }\n                            case 112: {\n                                goto lab_0x406d25;\n                            }\n                            case 113: {\n                                goto lab_0x406d25;\n                            }\n                            case 114: {\n                                goto lab_0x406d25;\n                            }\n                            case 115: {\n                                goto lab_0x406d25;\n                            }\n                            case 116: {\n                                goto lab_0x406dc8;\n                            }\n                            default: {\n                                goto lab_0x406c8a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x406c8a;\n    }\n  lab_0x406bc0:\n    // 0x406bc0\n    *a4 = v13;\n    // 0x406bc3\n    return v10 & 0xffffffff;\n  lab_0x406c8a:\n    // 0x406c8a\n    g50 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x406b20\n    switch (v9) {\n        case 66: {\n            // 0x406e84\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x406cf7;\n            } else {\n                // 0x406e91\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406cc8;\n            }\n        }\n        case 69: {\n            goto lab_0x406e2b;\n        }\n        case 71: {\n            goto lab_0x406e63;\n        }\n        case 75: {\n            goto lab_0x406cec;\n        }\n        case 77: {\n            goto lab_0x406cae;\n        }\n        case 80: {\n            goto lab_0x406df8;\n        }\n        case 84: {\n            goto lab_0x406dc8;\n        }\n        case 89: {\n            goto lab_0x406d96;\n        }\n        case 90: {\n            goto lab_0x406d5b;\n        }\n        case 98: {\n            goto lab_0x406d3f;\n        }\n        case 99: {\n            goto lab_0x406cc8;\n        }\n        case 103: {\n            goto lab_0x406e63;\n        }\n        case 107: {\n            goto lab_0x406cec;\n        }\n        case 109: {\n            goto lab_0x406cae;\n        }\n        case 116: {\n            goto lab_0x406dc8;\n        }\n        case 119: {\n            // 0x406d30\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x406cf7;\n            } else {\n                // 0x406d35\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406cc8;\n            }\n        }\n        default: {\n            goto lab_0x406d25;\n        }\n    }\n  lab_0x406e2b:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x406e43\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x406e4f\n    int64_t v48 = v45; // 0x406e52\n    int64_t v49 = v34; // 0x406e52\n    int64_t v50 = v46; // 0x406e52\n    int32_t v51 = v47; // 0x406e52\n    int64_t v52 = v46; // 0x406e52\n    while (v47 != 0) {\n        // 0x406e40\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x406d84;\n  lab_0x406e63:\n    // 0x406e63\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x406e6e\n        int128_t v53; // 0x406e69\n        uint128_t v54; // 0x406e69\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x406e6e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x406b20\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x406e73\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x406e78\n                v23 = v57;\n                int64_t v58; // 0x406b20\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x406cc8;\n  lab_0x406cec:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x406cef\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x406cc8;\n    } else {\n        goto lab_0x406cf7;\n    }\n  lab_0x406cae:;\n    int128_t v62 = v24; // 0x406cb4\n    uint128_t v63 = v62 * (int128_t)v14; // 0x406cb4\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x406cf7;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x406cb9\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x406cf7;\n        } else {\n            // 0x406cbe\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x406cc8;\n        }\n    }\n  lab_0x406df8:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x406e0b\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x406e17\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x406e1a\n    int64_t v70 = v67; // 0x406e1a\n    while (v68 != 0) {\n        // 0x406e08\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x406d84;\n  lab_0x406dc8:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x406ddb\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x406de7\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x406dea\n    int64_t v76 = v73; // 0x406dea\n    while (v74 != 0) {\n        // 0x406dd8\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x406d84;\n  lab_0x406d96:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x406dab\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x406db7\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x406dba\n    int64_t v82 = v79; // 0x406dba\n    while (v80 != 0) {\n        // 0x406da8\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x406d84;\n  lab_0x406d5b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x406d73\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x406d7f\n    int32_t v87 = v86; // 0x406d82\n    int64_t v88 = v85; // 0x406d82\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x406d70\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x406d84;\n  lab_0x406d3f:\n    // 0x406d3f\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x406cf7;\n    } else {\n        // 0x406d48\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x406cc8;\n    }\n  lab_0x406cc8:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x406ccd\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x406bc0;\n  lab_0x406d25:\n    // 0x406d25\n    *a4 = v15;\n    // 0x406bc3\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x406cf7:\n    // 0x406cf7\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x406cc8;\n  lab_0x406d84:\n    // 0x406d84\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x406cc8;\n}\n"
        },
        {
            "funcName": "function_406f50",
            "funcStartAddr": "406f50",
            "funcEndAddr": "407390",
            "decompiledFuncCode": "int64_t function_406f50(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x406f5e\n    if (v1 >= 37) {\n        // 0x40736b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g54;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x406f82\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x406fb2\n    int64_t v4 = a1; // 0x406fb7\n    char v5 = c; // 0x406fb7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x406fac\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x406fa8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x406fb9\n    if (v5 == 45) {\n        // 0x406ff5\n        return 4;\n    }\n    // 0x406fbe\n    int64_t v7; // bp-64, 0x406f50\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x406f7e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x406fc6\n    int64_t * v10 = (int64_t *)v8; // 0x406fcb\n    int64_t v11 = *v10; // 0x406fcb\n    char v12; // 0x406f50\n    int64_t v13; // 0x406f50\n    int64_t v14; // 0x406f50\n    int64_t v15; // 0x406f50\n    int64_t v16; // 0x406f50\n    int64_t v17; // 0x406f50\n    int64_t v18; // 0x406f50\n    if (v11 == a1) {\n        // 0x407028\n        if (c == 0 || str == 0) {\n            // 0x406ff5\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x407049\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x406ff5\n            return 4;\n        }\n        goto lab_0x407057;\n    } else {\n        int32_t v19 = *v2; // 0x406fd6\n        int64_t v20 = 0; // 0x406fdc\n        if (v19 != 0) {\n            // 0x407010\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x406ff5\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x406fc6\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x406ff2;\n        } else {\n            char c2 = *(char *)v11; // 0x406fe5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x407153\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407057;\n                } else {\n                    goto lab_0x407165;\n                }\n            } else {\n                goto lab_0x406ff2;\n            }\n        }\n    }\n  lab_0x407057:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40705f\n    int64_t v24 = 1; // 0x40705f\n    int64_t v25; // 0x406f50\n    int64_t v26; // 0x406f50\n    int64_t v27; // 0x406f50\n    int64_t v28; // 0x406f50\n    int64_t v29; // 0x406f50\n    int64_t v30; // 0x406f50\n    int64_t v31; // 0x406f50\n    int64_t v32; // 0x406f50\n    int64_t v33; // 0x406f50\n    int64_t v34; // 0x406f50\n    int64_t v35; // 0x406f50\n    int64_t v36; // 0x406f50\n    int64_t v37; // 0x406f50\n    int64_t v38; // 0x406f50\n    int64_t v39; // 0x406f50\n    int64_t v40; // 0x406f50\n    int64_t v41; // 0x406f50\n    int64_t v42; // 0x406f50\n    int64_t v43; // 0x406f50\n    int64_t v44; // 0x406f50\n    if (v22 < 48) {\n        // 0x407061\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4070ca;\n        } else {\n            // 0x407074\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4070ca;\n            } else {\n                // 0x407090\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x4070ca;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x4072f9\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x4070ca;\n                    }\n                    default: {\n                        // 0x4070a5\n                        g51 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40726b;\n                            }\n                            case 70: {\n                                goto lab_0x407165;\n                            }\n                            case 71: {\n                                goto lab_0x4072a3;\n                            }\n                            case 72: {\n                                goto lab_0x407165;\n                            }\n                            case 73: {\n                                goto lab_0x407165;\n                            }\n                            case 74: {\n                                goto lab_0x407165;\n                            }\n                            case 75: {\n                                goto lab_0x40712c;\n                            }\n                            case 76: {\n                                goto lab_0x407165;\n                            }\n                            case 77: {\n                                goto lab_0x4070ee;\n                            }\n                            case 78: {\n                                goto lab_0x407165;\n                            }\n                            case 79: {\n                                goto lab_0x407165;\n                            }\n                            case 80: {\n                                goto lab_0x407238;\n                            }\n                            case 81: {\n                                goto lab_0x407165;\n                            }\n                            case 82: {\n                                goto lab_0x407165;\n                            }\n                            case 83: {\n                                goto lab_0x407165;\n                            }\n                            case 84: {\n                                goto lab_0x407208;\n                            }\n                            case 85: {\n                                goto lab_0x407165;\n                            }\n                            case 86: {\n                                goto lab_0x407165;\n                            }\n                            case 87: {\n                                goto lab_0x407165;\n                            }\n                            case 88: {\n                                goto lab_0x407165;\n                            }\n                            case 89: {\n                                goto lab_0x4071d6;\n                            }\n                            case 90: {\n                                goto lab_0x40719b;\n                            }\n                            case 91: {\n                                goto lab_0x407165;\n                            }\n                            case 92: {\n                                goto lab_0x407165;\n                            }\n                            case 93: {\n                                goto lab_0x407165;\n                            }\n                            case 94: {\n                                goto lab_0x407165;\n                            }\n                            case 95: {\n                                goto lab_0x407165;\n                            }\n                            case 96: {\n                                goto lab_0x407165;\n                            }\n                            case 97: {\n                                goto lab_0x407165;\n                            }\n                            case 98: {\n                                goto lab_0x40717f;\n                            }\n                            case 99: {\n                                goto lab_0x407108;\n                            }\n                            case 100: {\n                                goto lab_0x407165;\n                            }\n                            case 101: {\n                                goto lab_0x407165;\n                            }\n                            case 102: {\n                                goto lab_0x407165;\n                            }\n                            case 103: {\n                                goto lab_0x4072a3;\n                            }\n                            case 104: {\n                                goto lab_0x407165;\n                            }\n                            case 105: {\n                                goto lab_0x407165;\n                            }\n                            case 106: {\n                                goto lab_0x407165;\n                            }\n                            case 107: {\n                                goto lab_0x40712c;\n                            }\n                            case 108: {\n                                goto lab_0x407165;\n                            }\n                            case 109: {\n                                goto lab_0x4070ee;\n                            }\n                            case 110: {\n                                goto lab_0x407165;\n                            }\n                            case 111: {\n                                goto lab_0x407165;\n                            }\n                            case 112: {\n                                goto lab_0x407165;\n                            }\n                            case 113: {\n                                goto lab_0x407165;\n                            }\n                            case 114: {\n                                goto lab_0x407165;\n                            }\n                            case 115: {\n                                goto lab_0x407165;\n                            }\n                            case 116: {\n                                goto lab_0x407208;\n                            }\n                            default: {\n                                goto lab_0x4070ca;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4070ca;\n    }\n  lab_0x406ff2:\n    // 0x406ff2\n    *a4 = v16;\n    // 0x406ff5\n    return v13 & 0xffffffff;\n  lab_0x4070ca:\n    // 0x4070ca\n    g52 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x406f50\n    switch (v12) {\n        case 66: {\n            // 0x4072c4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x407137;\n            } else {\n                // 0x4072d1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407108;\n            }\n        }\n        case 69: {\n            goto lab_0x40726b;\n        }\n        case 71: {\n            goto lab_0x4072a3;\n        }\n        case 75: {\n            goto lab_0x40712c;\n        }\n        case 77: {\n            goto lab_0x4070ee;\n        }\n        case 80: {\n            goto lab_0x407238;\n        }\n        case 84: {\n            goto lab_0x407208;\n        }\n        case 89: {\n            goto lab_0x4071d6;\n        }\n        case 90: {\n            goto lab_0x40719b;\n        }\n        case 98: {\n            goto lab_0x40717f;\n        }\n        case 99: {\n            goto lab_0x407108;\n        }\n        case 103: {\n            goto lab_0x4072a3;\n        }\n        case 107: {\n            goto lab_0x40712c;\n        }\n        case 109: {\n            goto lab_0x4070ee;\n        }\n        case 116: {\n            goto lab_0x407208;\n        }\n        case 119: {\n            // 0x407170\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x407137;\n            } else {\n                // 0x407175\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407108;\n            }\n        }\n        default: {\n            goto lab_0x407165;\n        }\n    }\n  lab_0x40726b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x407283\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x40728f\n    int64_t v51 = v48; // 0x407292\n    int64_t v52 = v37; // 0x407292\n    int64_t v53 = v49; // 0x407292\n    int32_t v54 = v50; // 0x407292\n    int64_t v55 = v49; // 0x407292\n    while (v50 != 0) {\n        // 0x407280\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x4071c4;\n  lab_0x4072a3:\n    // 0x4072a3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4072ae\n        int128_t v56; // 0x4072a9\n        uint128_t v57; // 0x4072a9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4072ae\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x406f50\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x4072b3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x4072b8\n                v26 = v60;\n                int64_t v61; // 0x406f50\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x407108;\n  lab_0x40712c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40712f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x407108;\n    } else {\n        goto lab_0x407137;\n    }\n  lab_0x4070ee:;\n    int128_t v65 = v27; // 0x4070f4\n    uint128_t v66 = v65 * (int128_t)v17; // 0x4070f4\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x407137;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x4070f9\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x407137;\n        } else {\n            // 0x4070fe\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x407108;\n        }\n    }\n  lab_0x407238:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40724b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x407257\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40725a\n    int64_t v73 = v70; // 0x40725a\n    while (v71 != 0) {\n        // 0x407248\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x4071c4;\n  lab_0x407208:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40721b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x407227\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40722a\n    int64_t v79 = v76; // 0x40722a\n    while (v77 != 0) {\n        // 0x407218\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x4071c4;\n  lab_0x4071d6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x4071eb\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x4071f7\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x4071fa\n    int64_t v85 = v82; // 0x4071fa\n    while (v83 != 0) {\n        // 0x4071e8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x4071c4;\n  lab_0x40719b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x4071b3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x4071bf\n    int32_t v90 = v89; // 0x4071c2\n    int64_t v91 = v88; // 0x4071c2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x4071b0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x4071c4;\n  lab_0x40717f:\n    // 0x40717f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x407137;\n    } else {\n        // 0x407188\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x407108;\n    }\n  lab_0x407108:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40710d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x406ff2;\n  lab_0x407165:\n    // 0x407165\n    *a4 = v18;\n    // 0x406ff5\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407137:\n    // 0x407137\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x407108;\n  lab_0x4071c4:\n    // 0x4071c4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x407108;\n}\n"
        },
        {
            "funcName": "function_407390",
            "funcStartAddr": "407390",
            "funcEndAddr": "40740b",
            "decompiledFuncCode": "int64_t function_407390(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407397\n    if (fileno(stream) < 0) {\n        // 0x4073f7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4073aa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4073db\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4073f7\n            return fclose(stream);\n        }\n    }\n    // 0x4073ac\n    if ((int32_t)function_407410(a1, v1) == 0) {\n        // 0x4073f7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4073b8\n    int32_t v3 = *v2; // 0x4073c0\n    int64_t result = fclose(stream); // 0x4073ce\n    if (v3 != 0) {\n        // 0x407400\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4073d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407410",
            "funcStartAddr": "407410",
            "funcEndAddr": "407450",
            "decompiledFuncCode": "int64_t function_407410(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40742a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40742a\n        return fflush(stream);\n    }\n    // 0x407438\n    function_4074f0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407450",
            "funcStartAddr": "407450",
            "funcEndAddr": "4074ee",
            "decompiledFuncCode": "int64_t function_407450(int64_t a1, int64_t a2) {\n    char * file_path = (char *)a1; // 0x40745e\n    char * mode = (char *)a2; // 0x40745e\n    int64_t stream; // 0x407450\n    struct _IO_FILE * file = freopen(file_path, mode, (struct _IO_FILE *)stream); // 0x40745e\n    if (a1 == 0 || file == NULL) {\n        // 0x407488\n        return (int64_t)file;\n    }\n    int32_t fd2 = fileno(file); // 0x407473\n    if (dup2(fd2, fd2) >= 0 || *__errno_location() != 9) {\n        // 0x407488\n        return (int64_t)file;\n    }\n    int32_t fd = open(\"/dev/null\", O_CLOEXEC); // 0x4074ae\n    if (fd == fd2) {\n        // 0x4074d1\n        return (int64_t)freopen(file_path, mode, file);\n    }\n    int32_t v1 = dup2(fd, fd2); // 0x4074c0\n    close(fd);\n    if (v1 < 0) {\n        // 0x407488\n        return (int64_t)file;\n    }\n    // 0x4074d1\n    return (int64_t)freopen(file_path, mode, file);\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "407547",
            "decompiledFuncCode": "int64_t function_4074f0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4074f0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4074fa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40752b\n    int64_t result = -1; // 0x407534\n    if (v1 != -1) {\n        // 0x407536\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407542\n    return result;\n}\n"
        },
        {
            "funcName": "function_407550",
            "funcStartAddr": "407550",
            "funcEndAddr": "40762f",
            "decompiledFuncCode": "int64_t function_407550(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40755c\n    uint32_t v2 = *v1; // 0x40755c\n    int64_t v3 = a2 & 0xffffffff; // 0x407561\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407564\n    uint64_t v5 = (int64_t)*v4; // 0x407564\n    int64_t v6; // 0x4075d2\n    if (v3 <= v5) {\n      lab_0x4075cc_2:\n        // 0x4075cc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407552\n    int64_t v8 = v2; // 0x407550\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4075cc\n        goto lab_0x4075cc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407588\n    int64_t v17; // 0x407596\n    int64_t * v18; // 0x4075b0\n    int64_t * v19; // 0x4075b3\n    int64_t v20; // 0x4075be\n    int64_t v21; // 0x407596\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407593\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4075b0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4075c7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4075cc\n            goto lab_0x4075cc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4075cc\n            goto lab_0x4075cc_2;\n        }\n        // 0x407582\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40760b\n    int64_t * v23 = (int64_t *)v22; // 0x407610\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x407613\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x407610\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x407627\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40757d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4075cc\n            goto lab_0x4075cc_2;\n        }\n        // 0x407582\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407593\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4075b0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4075c7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4075cc\n                goto lab_0x4075cc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4075cc\n                goto lab_0x4075cc_2;\n            }\n            // 0x407582\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4075f0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x407610\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x407627\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4075cc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407630",
            "funcStartAddr": "407630",
            "funcEndAddr": "407c4c",
            "decompiledFuncCode": "int64_t function_407630(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40764f\n    int64_t v2 = *v1; // 0x40764f\n    char * str2 = (char *)v2; // 0x40765c\n    char c = *str2; // 0x40765c\n    int64_t v3 = v2; // 0x407688\n    int64_t v4 = 0; // 0x407630\n    int32_t v5; // 0x407630\n    int64_t v6; // 0x407630\n    int64_t v7; // 0x407630\n    int64_t v8; // 0x407630\n    int64_t v9; // 0x407630\n    int64_t v10; // 0x407630\n    int64_t v11; // 0x407630\n    int64_t v12; // 0x407630\n    int64_t v13; // 0x407630\n    int64_t str3; // 0x407630\n    int64_t v14; // 0x407630\n    int64_t v15; // 0x407630\n    int64_t v16; // 0x407630\n    int64_t v17; // 0x407630\n    int32_t v18; // 0x407630\n    int32_t v19; // 0x407630\n    int32_t v20; // 0x407630\n    int32_t v21; // 0x407630\n    int32_t v22; // 0x407630\n    int32_t v23; // 0x407630\n    int32_t v24; // 0x407630\n    int32_t v25; // 0x407630\n    int32_t v26; // 0x407630\n    int32_t v27; // 0x407630\n    int32_t v28; // 0x407630\n    int32_t v29; // 0x407630\n    int64_t nmemb; // 0x407630\n    int64_t v30; // 0x407630\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40768c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407688\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407698\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40769e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407668\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4076cc\n                int64_t v34; // 0x407630\n                int64_t v35; // 0x407630\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4076d5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x407850;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4076e6\n                int64_t v37 = *(int64_t *)v36; // 0x4076ea\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4076c0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4076d5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x407850;\n                        }\n                    }\n                    // 0x4076e6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x407736:\n                    // 0x407736\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407790;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x407900\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407790;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4078b0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40775a;\n                                } else {\n                                    // 0x4078bc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40775a;\n                                    } else {\n                                        // 0x4078ca\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40775a;\n                                        } else {\n                                            goto lab_0x407790;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40775a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4077a1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x407976\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x407b22\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x407b42\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x407b8f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x407ba9\n                            int64_t v45; // 0x407bab\n                            if (*(char *)v42 != 0) {\n                                // 0x407bab\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x407ba3\n                            while (v17 + nmemb != v42) {\n                                // 0x407ba5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x407bab\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x407b98\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x407bd0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x407984\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x407adf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4079d9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4079f0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40789e\n                    return 63;\n                }\n                // 0x4077c0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x407844\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x407850:;\n                    int32_t * v49 = (int32_t *)a7; // 0x407860\n                    uint32_t v50 = *v49; // 0x407860\n                    int64_t v51 = v50; // 0x407860\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40786a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x407873\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x407a9f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x407a4a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40789e\n                            return 63;\n                        }\n                        // 0x4078e8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x407bff\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x407afd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x407b10\n                                // 0x40789e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x407a0e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x407a22\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40788b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40788e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407892\n                    int64_t result = v59; // 0x407898\n                    if (v58 != 0) {\n                        // 0x40789a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40789e\n                    return result;\n                }\n            } else {\n                // 0x40769e\n                v5 = v32;\n            }\n            // break -> 0x4077c5\n            break;\n        }\n    }\n    // 0x4077c5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4077dd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4077e7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40789e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x407929\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x407816\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x407826\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407790:\n    // 0x407790\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407790\n    int64_t v63 = *(int64_t *)v62; // 0x407794\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4077a1\n        goto lab_0x4077a1;\n    }\n    goto lab_0x407736;\n  lab_0x40775a:\n    // 0x40775a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x407630\n    int32_t v65; // 0x407630\n    int32_t v66; // 0x407630\n    if (v27 != 0) {\n        goto lab_0x407790;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x407910\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407790;\n            } else {\n                goto lab_0x407781;\n            }\n        } else {\n            // 0x407775\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x407a6c\n                int64_t v67 = (int64_t)mem; // 0x407a6c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407790;\n                } else {\n                    // 0x407a7f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407781;\n                }\n            } else {\n                goto lab_0x407781;\n            }\n        }\n    }\n  lab_0x407781:\n    // 0x407781\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407790;\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "408216",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407c71\n    if (v3 < 1) {\n        // 0x407e2e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x407c6d\n    int32_t v5 = *(int32_t *)a7; // 0x407c79\n    uint64_t v6 = a1 & 0xffffffff; // 0x407c7b\n    int64_t v7 = v2; // 0x407c80\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x407c83\n    *v8 = 0;\n    int64_t v9; // 0x407c50\n    int64_t v10; // 0x407c50\n    int64_t v11; // 0x407c50\n    int64_t v12; // 0x407c50\n    int64_t str; // 0x407c50\n    int64_t v13; // 0x407c50\n    int64_t v14; // 0x407c50\n    int64_t v15; // 0x407c50\n    int64_t v16; // 0x407c50\n    int64_t v17; // 0x407c50\n    int32_t v18; // 0x407c50\n    char v19; // 0x407c50\n    if (v5 == 0) {\n        // 0x407e68\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x407c9a;\n    } else {\n        // 0x407c93\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x407ce0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x407ce3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x407da8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x407cf6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x407d06\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x407dbc;\n                } else {\n                    goto lab_0x407d18;\n                }\n            }\n        } else {\n            goto lab_0x407c9a;\n        }\n    }\n  lab_0x407c9a:\n    // 0x407c9a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x407ca0\n    *v24 = 0;\n    int64_t v25; // 0x407c50\n    int64_t v26; // 0x407c50\n    int64_t v27; // 0x407c50\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x407d90\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407d9d;\n        }\n        case 43: {\n            // 0x4080a0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x407d9d;\n        }\n        default: {\n            // 0x407cbc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40801f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408138\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x407d9d;\n                } else {\n                    // 0x40802d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x407cca;\n                }\n            } else {\n                goto lab_0x407cca;\n            }\n        }\n    }\n  lab_0x407da8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x407daf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x407d18;\n    } else {\n        goto lab_0x407dbc;\n    }\n  lab_0x407cca:\n    // 0x407cca\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x407d9d;\n  lab_0x407d9d:\n    // 0x407d9d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x407da8;\n  lab_0x407d18:;\n    uint32_t v30 = *(int32_t *)a7; // 0x407d18\n    int64_t v31 = v30; // 0x407d18\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x407d1a\n    if ((int64_t)*v32 > v31) {\n        // 0x407d1f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x407d22\n    if (*v33 > v30) {\n        // 0x407d27\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x407d2a\n    int64_t v35 = v31; // 0x407d2e\n    int64_t v36 = v15; // 0x407d2e\n    int64_t v37; // 0x407c50\n    int64_t v38; // 0x407c50\n    int64_t v39; // 0x407c50\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x407e98\n        int64_t v41 = v40; // 0x407e98\n        v2 = v41;\n        int64_t v42; // 0x407c50\n        if (*v33 == v40) {\n            // 0x408080\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408088\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x407ea4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407ea8\n                function_407550(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x407eb8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x407ec1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x407eca\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407ee1\n            int64_t v47 = v45 & 0xffffffff; // 0x407ee5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x407eee\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x407ef4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x407ef6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x407ed0\n            int64_t v49 = v48 & 0xffffffff; // 0x407ed0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407ee1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x407eee\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x407ef4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x407ef6;\n                    }\n                }\n                // 0x407ed0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408098\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x407ef6;\n    } else {\n        goto lab_0x407d34;\n    }\n  lab_0x407dbc:\n    // 0x407dbc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x407dbf\n    int64_t v51 = v12; // 0x407dbf\n    int64_t v52 = v14; // 0x407dbf\n    if (*(char *)v10 == 0) {\n        goto lab_0x407d18;\n    } else {\n        goto lab_0x407dc5;\n    }\n  lab_0x407d34:;\n    int32_t v53 = v35; // 0x407d34\n    int64_t v54; // 0x407c50\n    int64_t v55; // 0x407c50\n    int64_t v56; // 0x407c50\n    int64_t v57; // 0x407c50\n    int64_t v58; // 0x407c50\n    int64_t v59; // 0x407c50\n    char * v60; // 0x407c50\n    int64_t v61; // 0x407c50\n    int64_t v62; // 0x407d49\n    int64_t v63; // 0x407c50\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407e83\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407e86;\n    } else {\n        // 0x407d3c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407c50\n        int64_t v66 = v65 ? -1 : 1; // 0x407d50\n        int64_t v67 = (int64_t)\"--\"; // 0x407c50\n        int64_t v68 = v62; // 0x407c50\n        int64_t v69 = 3; // 0x407d50\n        unsigned char v70 = *(char *)v68; // 0x407d50\n        char v71 = *(char *)v67; // 0x407d50\n        char v72 = v71; // 0x407d50\n        bool v73 = false; // 0x407d50\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x407e40\n            if (*(char *)v62 == 45) {\n                // 0x407f00\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x407f00\n                if (c == 0) {\n                    goto lab_0x407e4a;\n                } else {\n                    // 0x407f0d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x407f90;\n                    } else {\n                        if (c == 45) {\n                            // 0x408173\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x407fe5;\n                        } else {\n                            // 0x407f1e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x407f90;\n                            } else {\n                                // 0x407f23\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x407f44;\n                                } else {\n                                    // 0x407f2a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x407f90;\n                                    } else {\n                                        goto lab_0x407f44;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x407e4a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407d60\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407d63\n            int64_t v77 = v35 + 1; // 0x407d66\n            int32_t v78 = v77; // 0x407d69\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4080d0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407d77\n                    function_407550(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407d85\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407e86;\n        }\n    }\n  lab_0x407dc5:;\n    // 0x407dc5\n    int64_t v79; // bp-104, 0x407c50\n    int64_t v80 = &v79; // 0x407c5a\n    int64_t v81 = v50 + 1; // 0x407dc5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x407dcc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x407dd1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x407dd5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x407dd9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407de1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407de6\n    int32_t c2 = v84; // 0x407de6\n    char * found_char_pos = strchr(str2, c2); // 0x407de6\n    int64_t v87 = *v82; // 0x407deb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x407df5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x407e00\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4080f0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4080bd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x407e2e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407de6\n    char v91 = *(char *)(v90 + 1); // 0x407e1b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x407dd5\n        if (v91 != 58) {\n            // 0x407e2e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408044\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408148\n                *v8 = 0;\n            } else {\n                // 0x40812c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40806e\n            *v83 = 0;\n            // 0x407e2e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40804e\n        if (v93 != 0) {\n            // 0x4080e0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40806e\n            *v83 = 0;\n            // 0x407e2e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408061\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40806e\n            *v83 = 0;\n            // 0x407e2e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4081aa\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40815a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408161\n        // 0x40806e\n        *v83 = 0;\n        // 0x407e2e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x407fb9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x407fbb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4081e0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408191\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408198\n            // 0x407e2e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x407fc6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x407fca\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x407fe5;\n  lab_0x407ef6:\n    // 0x407ef6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x407d34;\n  lab_0x407fe5:;\n    int64_t v99 = function_407630(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408003\n    // 0x407e2e\n    return v99 & 0xffffffff;\n  lab_0x407e86:;\n    int32_t v100 = v55; // 0x407e86\n    if (v100 != (int32_t)v59) {\n        // 0x407e8a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x407e2e\n    return 0xffffffff;\n  lab_0x407e4a:\n    // 0x407e4a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407e51\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x407e2e\n    return v99 & 0xffffffff;\n  lab_0x407f90:\n    // 0x407f90\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x407dc5;\n  lab_0x407f44:\n    // 0x407f44\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_407630(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x407f6a\n    if ((int32_t)v101 != -1) {\n        // 0x407e2e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x407f7f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x407f90;\n}\n"
        },
        {
            "funcName": "function_408220",
            "funcStartAddr": "408220",
            "funcEndAddr": "408276",
            "decompiledFuncCode": "int64_t function_408220(int64_t a1) {\n    // 0x408220\n    *(int32_t *)&g42 = g27;\n    *(int32_t *)&g43 = g26;\n    int64_t v1; // 0x408220\n    int64_t result = function_407c50(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x408246\n    g27 = *(int32_t *)&g42;\n    g48 = (char *)g45;\n    *(int32_t *)&g25 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408280",
            "funcStartAddr": "408280",
            "funcEndAddr": "408298",
            "decompiledFuncCode": "int64_t function_408280(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408280\n    return function_408220(1);\n}\n"
        },
        {
            "funcName": "function_4082a0",
            "funcStartAddr": "4082a0",
            "funcEndAddr": "4082b3",
            "decompiledFuncCode": "int64_t function_4082a0(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x4082a0\n    return function_408220(0);\n}\n"
        },
        {
            "funcName": "function_4082c0",
            "funcStartAddr": "4082c0",
            "funcEndAddr": "4082d5",
            "decompiledFuncCode": "int64_t function_4082c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4082c0\n    return function_407c50(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4082e0",
            "funcStartAddr": "4082e0",
            "funcEndAddr": "4082f6",
            "decompiledFuncCode": "int64_t function_4082e0(void) {\n    // 0x4082e0\n    return function_408220(0);\n}\n"
        },
        {
            "funcName": "function_408300",
            "funcStartAddr": "408300",
            "funcEndAddr": "408318",
            "decompiledFuncCode": "int64_t function_408300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408300\n    return function_407c50(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408320",
            "funcStartAddr": "408320",
            "funcEndAddr": "40839a",
            "decompiledFuncCode": "int64_t function_408320(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40832b\n    int64_t v2 = (int64_t)&g10; // 0x40832b\n    int32_t * pwc; // 0x408320\n    int64_t v3; // 0x408320\n    int64_t n; // 0x408320\n    if (a2 == 0) {\n        goto lab_0x408372;\n    } else {\n        // 0x40832d\n        if (a3 == 0) {\n            // 0x408358\n            return -2;\n        }\n        // 0x408339\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408372;\n        } else {\n            goto lab_0x408344;\n        }\n    }\n  lab_0x408372:\n    // 0x408372\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408320\n    pwc = (int32_t *)&v4;\n    goto lab_0x408344;\n  lab_0x408344:;\n    char * wstr = (char *)v3; // 0x40834a\n    int64_t ps; // 0x408320\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40834a\n    int64_t result = v5; // 0x40834a\n    if (v5 < 0xfffffffe) {\n        // 0x408358\n        return result;\n    }\n    int64_t result2 = result; // 0x408389\n    if ((char)function_4085b0(0, v3) == 0) {\n        // 0x40838b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408358\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4083a0",
            "funcStartAddr": "4083a0",
            "funcEndAddr": "4084a4",
            "decompiledFuncCode": "int64_t function_4083a0(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x4083a0\n    if (a3 == 0) {\n        // 0x4083d9\n        return 0;\n    }\n    int64_t v1 = result; // 0x4083ac\n    int64_t v2 = a3; // 0x4083ac\n    int64_t result2; // 0x4083a0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x4083ae\n        int64_t v4 = result; // 0x4083b1\n        if ((char)result == v3) {\n            // 0x4083d9\n            return result;\n        }\n        int64_t v5 = a3; // 0x4083b1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x4083c0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x4083e0;\n            }\n            // 0x4083c6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x4083d9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x4083d9\n        return result2;\n    }\n  lab_0x4083e0:;\n    int64_t result3 = v1; // 0x40840d\n    int64_t v6 = v2; // 0x40840d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x4083ef\n        int64_t v8 = 0x10000 * v7 | v7; // 0x4083fc\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x408406\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x408426\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x408455\n            int64_t v12 = v1 + 8; // 0x408459\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x408443\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40846c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x408463\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x4083d9\n                return 0;\n            }\n        }\n    }\n  lab_0x40846c:;\n    char v14 = a2; // 0x40846c\n    if (*(char *)result3 == v14) {\n        // 0x4083d9\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x408480\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x4083d9\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x4083d9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "40850d",
            "decompiledFuncCode": "int64_t function_4084b0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4084b7\n    int64_t v2; // 0x4084b0\n    int64_t result = function_407390(a1, v2); // 0x4084c8\n    if ((v2 & 32) != 0) {\n        // 0x4084f0\n        if ((int32_t)result == 0) {\n            // 0x4084f4\n            *__errno_location() = 0;\n        }\n        // 0x4084ea\n        return 0xffffffff;\n    }\n    // 0x4084d1\n    if ((int32_t)result == 0) {\n        // 0x4084ea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4084d8\n    if (v1 == 0) {\n        // 0x4084da\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4084ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408510",
            "funcStartAddr": "408510",
            "funcEndAddr": "4085a3",
            "decompiledFuncCode": "int64_t function_408510(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x408517\n    int64_t result = (int64_t)file; // 0x408517\n    if (file == NULL) {\n        // 0x408531\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x408527\n    if (v1 >= 3) {\n        // 0x408531\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_409dd0((int64_t)v1, v2); // 0x40854a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x408588\n        function_407390(result, v2);\n        // 0x408531\n        return 0;\n    }\n    // 0x40854e\n    if ((int32_t)function_407390(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x408560\n        if (v4 != NULL) {\n            // 0x408531\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x40856d\n    close(fd);\n    // 0x408531\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4085b0",
            "funcStartAddr": "4085b0",
            "funcEndAddr": "40860e",
            "decompiledFuncCode": "int64_t function_4085b0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4085b6\n    if (locale == NULL) {\n        // 0x4085e3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4085b6\n    bool v2; // 0x4085b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4085b0\n    int64_t v5 = v1; // 0x4085b0\n    int64_t v6 = 2; // 0x4085d5\n    unsigned char v7 = *(char *)v5; // 0x4085d5\n    char v8 = *(char *)v4; // 0x4085d5\n    char v9 = v8; // 0x4085d5\n    bool v10 = false; // 0x4085d5\n    while (v7 == v8) {\n        // 0x4085c8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4085e1\n    int64_t v13 = v1; // 0x4085e1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4085e3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4085e1\n    unsigned char v15 = *(char *)v13; // 0x4085fd\n    char v16 = *(char *)v12; // 0x4085fd\n    char v17 = v16; // 0x4085fd\n    bool v18 = false; // 0x4085fd\n    while (v15 == v16) {\n        // 0x4085f0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_408610",
            "funcStartAddr": "408610",
            "funcEndAddr": "4086a3",
            "decompiledFuncCode": "int64_t function_408610(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x408627\n    if (v1 == -1) {\n        // 0x40869f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40862f\n    int64_t v3; // 0x408610\n    while (true) {\n      lab_0x408638:\n        // 0x408638\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x408690;\n        } else {\n            goto lab_0x408695;\n        }\n    }\n  lab_0x40869f_2:;\n    // 0x40869f\n    int64_t result; // 0x408610\n    return result;\n  lab_0x408695:;\n    int64_t v4 = v3 + 2; // 0x408695\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40869f\n        goto lab_0x40869f_2;\n    }\n    goto lab_0x408638;\n  lab_0x408690:\n    // 0x408690\n    result = v3;\n    goto lab_0x408695;\n}\n"
        },
        {
            "funcName": "function_4086b0",
            "funcStartAddr": "4086b0",
            "funcEndAddr": "4086c0",
            "decompiledFuncCode": "int64_t function_4086b0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4086b0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_4086c0",
            "funcStartAddr": "4086c0",
            "funcEndAddr": "4086c7",
            "decompiledFuncCode": "int64_t function_4086c0(int64_t a1, int64_t a2) {\n    // 0x4086c0\n    int64_t v1; // 0x4086c0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_4086d0",
            "funcStartAddr": "4086d0",
            "funcEndAddr": "4086f1",
            "decompiledFuncCode": "int64_t function_4086d0(int64_t a1, int64_t a2) {\n    // 0x4086d0\n    int64_t v1; // 0x4086d0\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_408700",
            "funcStartAddr": "408700",
            "funcEndAddr": "408819",
            "decompiledFuncCode": "int64_t function_408700(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_4086d0(a1, a2); // 0x408714\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40871c\n    int64_t result2 = *v2; // 0x40871c\n    if (result2 == 0) {\n        // 0x4087ae\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x408744\n            if (v3 == 0) {\n                // 0x4087ae\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x408751\n            int64_t v5 = v3; // 0x408757\n            int64_t v6 = v1; // 0x408757\n            int64_t result = v4; // 0x408757\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40878c_2:\n                // 0x40878c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x408791\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x4087a0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x4087ae\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x408764\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x408771\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40878c_2;\n                }\n                // 0x408779\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40878c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x4087ae\n            return 0;\n        }\n    }\n    // 0x4087c3\n    if ((char)a4 == 0) {\n        // 0x4087ae\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x4087c8\n    if (v12 == 0) {\n        // 0x408810\n        *v2 = 0;\n        // 0x4087ae\n        return result2;\n    }\n    // 0x4087d1\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x4087df\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408820",
            "funcStartAddr": "408820",
            "funcEndAddr": "40889e",
            "decompiledFuncCode": "int64_t function_408820(uint64_t a1) {\n    if (a1 == (int64_t)&g12) {\n        // 0x40889d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40882b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g12) {\n        // 0x40888a\n        *(int64_t *)a1 = (int64_t)&g12;\n        return 0;\n    }\n    // 0x408839\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x408854\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x408861\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x408869\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40889d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4088a0",
            "funcStartAddr": "4088a0",
            "funcEndAddr": "4089ea",
            "decompiledFuncCode": "int64_t function_4088a0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x4088ba\n    uint64_t v2 = *v1; // 0x4088ba\n    if (v2 <= a2) {\n        // 0x4089a4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x4088a0\n    int64_t v8 = a2; // 0x4088a0\n    int64_t v9; // 0x4088a0\n    int64_t result; // 0x4088a0\n    int64_t v10; // 0x4088a0\n    while (true) {\n      lab_0x4088d6_2:\n        // 0x4088d6\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x4088d6\n        int64_t v12 = *v11; // 0x4088d6\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x4088c8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x4088df\n            int64_t v14 = *v13; // 0x4088df\n            int64_t v15 = v14; // 0x4088e7\n            int64_t v16 = v12; // 0x4088e7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x408904\n                    int64_t v19 = *v18; // 0x408904\n                    int64_t v20 = function_4086d0(v3, v19); // 0x40890d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x408912\n                    int64_t v22 = *v21; // 0x408912\n                    int64_t * v23 = (int64_t *)v20; // 0x408916\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x4088f0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40893f\n                            break;\n                        }\n                    } else {\n                        // 0x40891c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40893f\n                            break;\n                        }\n                    }\n                    // 0x408904\n                    v15 = v22;\n                }\n                // 0x40893f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x408943\n                v9 = *v1;\n                goto lab_0x4088c8;\n            } else {\n                int64_t v26 = function_4086d0(v3, v25); // 0x40895b\n                int64_t * v27 = (int64_t *)v26; // 0x408960\n                if (*v27 == 0) {\n                    // 0x4089c0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x408969\n                    int64_t * v29; // 0x4088a0\n                    int64_t v30; // 0x4088a0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x4089cf\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x4089a4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x4089cf\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40897a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x408989\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x408991\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40899a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x4089a4\n                    break;\n                }\n                goto lab_0x4088d6_2;\n            }\n        }\n    }\n    // 0x4089a4\n    return result;\n  lab_0x4088c8:;\n    int64_t v36 = v10 + 16; // 0x4088c8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x4088d6_2;\n    // 0x4088d6\n    goto lab_0x4088d6_2;\n}\n"
        },
        {
            "funcName": "function_4089f0",
            "funcStartAddr": "4089f0",
            "funcEndAddr": "4089f5",
            "decompiledFuncCode": "int64_t function_4089f0(int64_t a1) {\n    // 0x4089f0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a05",
            "decompiledFuncCode": "int64_t function_408a00(int64_t a1) {\n    // 0x408a00\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_408a10",
            "funcStartAddr": "408a10",
            "funcEndAddr": "408a15",
            "decompiledFuncCode": "int64_t function_408a10(int64_t a1) {\n    // 0x408a10\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_408a20",
            "funcStartAddr": "408a20",
            "funcEndAddr": "408a6f",
            "decompiledFuncCode": "int64_t function_408a20(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408a23\n    int64_t result = 0; // 0x408a2c\n    if (v1 <= a1) {\n      lab_0x408a6d:\n        // 0x408a6d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x408a30\n    while (*(int64_t *)v3 == 0) {\n        // 0x408a30\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x408a3f\n    int64_t v6 = v5; // 0x408a4b\n    int64_t v7 = 1; // 0x408a4b\n    int64_t v8; // 0x408a20\n    int64_t v9; // 0x408a50\n    int64_t v10; // 0x408a54\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x408a50\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x408a60\n    int64_t v12 = v3 + 16; // 0x408a64\n    while (v12 < v1) {\n        // 0x408a39\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x408a30\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x408a3f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x408a50\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x408a5d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x408a6d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408a70",
            "funcStartAddr": "408a70",
            "funcEndAddr": "408ad7",
            "decompiledFuncCode": "int64_t function_408a70(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408a73\n    int64_t v2 = a1; // 0x408a7f\n    int64_t v3 = 0; // 0x408a7f\n    int64_t v4 = 0; // 0x408a7f\n    int64_t v5 = 0; // 0x408a7f\n    int64_t v6 = 0; // 0x408a7f\n    int64_t v7; // 0x408a70\n    int64_t v8; // 0x408a70\n    int64_t v9; // 0x408a70\n    if (v1 > a1) {\n        while (true) {\n          lab_0x408a91_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x408a88;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x408a97\n                int64_t v13 = v10 + 1; // 0x408a9b\n                int64_t v14 = v11 + 1; // 0x408a9f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x408aa6\n                int64_t v16 = v14; // 0x408aa6\n                if (v12 == 0) {\n                    goto lab_0x408a88;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x408ab0\n                    int64_t v18 = v16 + 1; // 0x408ab4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x408ab0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x408abd\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x408ac6\n                        break;\n                    }\n                    goto lab_0x408a91_2;\n                }\n            }\n        }\n    }\n  lab_0x408ac6:\n    // 0x408ac6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x408acf\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x408ace\n    return 0;\n  lab_0x408a88:;\n    int64_t v20 = v8 + 16; // 0x408a88\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x408ac6\n        goto lab_0x408ac6;\n    }\n    goto lab_0x408a91_2;\n    // 0x408a91\n    goto lab_0x408a91_2;\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408c28",
            "decompiledFuncCode": "int64_t function_408ae0(uint64_t a1, int64_t a2) {\n    // 0x408ae0\n    int128_t v1; // 0x408ae0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x408af3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x408af7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x408afe\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x408b10\n            while (*(int64_t *)v7 == 0) {\n                // 0x408b10\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x408b4d\n                    goto lab_0x408b4d;\n                }\n            }\n        }\n    }\n  lab_0x408b4d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x408b5c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x408ae0\n    int128_t v10; // 0x408ae0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x408bf3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x408bfc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x408b93;\n        } else {\n            goto lab_0x408c09;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x408b86\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x408c09;\n        } else {\n            goto lab_0x408b93;\n        }\n    }\n  lab_0x408b93:\n    // 0x408b93\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x408b97\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x408b97\n    goto lab_0x408b9c;\n  lab_0x408c09:\n    // 0x408c09\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x408c1a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x408b9c;\n  lab_0x408b9c:\n    // 0x408b9c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_408c30",
            "funcStartAddr": "408c30",
            "funcEndAddr": "408c83",
            "decompiledFuncCode": "int64_t function_408c30(int64_t a1, int64_t result) {\n    int64_t v1 = function_4086d0(a1, result); // 0x408c3a\n    int64_t v2 = *(int64_t *)v1; // 0x408c3f\n    if (v2 == 0) {\n        // 0x408c6d\n        return 0;\n    }\n    // 0x408c53\n    if (v2 == result) {\n        // 0x408c6d\n        return result;\n    }\n    int64_t v3 = v1; // 0x408c64\n    int64_t result2 = v2; // 0x408c62\n    while ((char)v1 == 0) {\n        // 0x408c64\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x408c6d\n            break;\n        }\n        // 0x408c50\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x408c6d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x408c6d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408c90",
            "funcStartAddr": "408c90",
            "funcEndAddr": "408cd8",
            "decompiledFuncCode": "int64_t function_408c90(uint64_t a1) {\n    int64_t result = 0; // 0x408c95\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x408ca7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408c9e\n    if (v1 <= a1) {\n        // 0x408ca7\n        return result;\n    }\n    int64_t v2 = a1; // 0x408ca5\n    int64_t v3 = *(int64_t *)v2; // 0x408cb9\n    result = v3;\n    while (v3 == 0) {\n        // 0x408cb0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x408ca7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x408ca7\n    return result;\n}\n"
        },
        {
            "funcName": "function_408ce0",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408d4a",
            "decompiledFuncCode": "int64_t function_408ce0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4086d0(a1, a2); // 0x408cec\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x408d08\n    while (*(int64_t *)v2 != a2) {\n        // 0x408d00\n        if (v3 == 0) {\n            goto lab_0x408d16;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x408d40\n        return *(int64_t *)v3;\n    }\n  lab_0x408d16:;\n    int64_t v4 = v1 + 16; // 0x408d28\n    int64_t result = 0; // 0x408d2f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x408d20\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x408d33\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x408d33\n    return result;\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "408db4",
            "decompiledFuncCode": "int64_t function_408d50(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408d56\n    int64_t result = 0; // 0x408d5a\n    if (*v1 <= a1) {\n      lab_0x408d71:\n        // 0x408d71\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x408d5f\n    int64_t v4 = v2; // 0x408d65\n    int64_t v5; // 0x408d50\n    int64_t v6; // 0x408d50\n    int64_t v7; // 0x408d98\n    int64_t v8; // 0x408da1\n    int64_t v9; // 0x408d81\n    int64_t v10; // 0x408d85\n    if (v3 != 0) {\n        // 0x408d78\n        if (v2 >= a3) {\n            // break -> 0x408d71\n            break;\n        }\n        // 0x408d7d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x408d95\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x408d90\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x408d95\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x408d67\n    result = v11;\n    while (*v1 > v12) {\n        // 0x408d5f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x408d78\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x408d71\n                break;\n            }\n            // 0x408d7d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x408d95\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x408d90\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x408d95\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x408d67\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x408d71\n    return result;\n}\n"
        },
        {
            "funcName": "function_408dc0",
            "funcStartAddr": "408dc0",
            "funcEndAddr": "408e38",
            "decompiledFuncCode": "int64_t function_408dc0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x408dd1\n    int64_t result = 0; // 0x408dd5\n    if (v1 <= a1) {\n      lab_0x408df4:\n        // 0x408df4\n        return result;\n    }\n    int64_t v2 = a1; // 0x408dea\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x408de8\n    int64_t v5 = v2; // 0x408de8\n    int64_t v6 = v3; // 0x408de8\n    int64_t v7; // 0x408dc0\n    int64_t v8; // 0x408e18\n    int64_t v9; // 0x408e1c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x408e18\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x408e28\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x408e18\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x408de2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x408e18\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x408e28\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x408e18\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x408dea\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x408df4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408e40",
            "funcStartAddr": "408e40",
            "funcEndAddr": "408e71",
            "decompiledFuncCode": "int64_t function_408e40(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x408e47\n    if (v1 == 0) {\n        // 0x408e6d\n        return 0;\n    }\n    int64_t result = 0; // 0x408e47\n    v2++;\n    char v3 = *(char *)v2; // 0x408e63\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x408e6d\n    return result;\n}\n"
        },
        {
            "funcName": "function_408e80",
            "funcStartAddr": "408e80",
            "funcEndAddr": "408ea0",
            "decompiledFuncCode": "int64_t function_408e80(int64_t a1) {\n    // 0x408e80\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_408ea0",
            "funcStartAddr": "408ea0",
            "funcEndAddr": "40902a",
            "decompiledFuncCode": "int64_t function_408ea0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x408ea0\n    int128_t v1; // 0x408ea0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x408eda\n    int64_t result = (int64_t)mem; // 0x408eda\n    if (mem == NULL) {\n        // 0x408f8a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x408eeb\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x408ea0\n    int128_t v6; // 0x408ea0\n    if (a2 == 0) {\n        // 0x408fa0\n        *v4 = (int64_t)&g12;\n        int64_t v7 = function_408820(v3); // 0x408fa8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x408fad\n        if ((char)v7 == 0) {\n            // 0x408f80\n            free(mem);\n            // 0x408f8a\n            return 0;\n        }\n        // 0x408fb9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x409003;\n        } else {\n            goto lab_0x408fbe;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_408820(v3) == 0) {\n            // 0x408f80\n            free(mem);\n            // 0x408f8a\n            return 0;\n        }\n        // 0x408f05\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_408610(a1); // 0x408f13\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x408f80\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x408f80\n                free(mem);\n                // 0x408f8a\n                return 0;\n            }\n            // 0x408f31\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x408f80\n                free(mem);\n                // 0x408f8a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x408f42\n            int64_t v10 = (int64_t)mem2; // 0x408f42\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x408f80\n                free(mem);\n                // 0x408f8a\n                return 0;\n            }\n            // 0x408f4f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x4086b0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x4086c0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x408f8a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x408ff8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x408fbe;\n        } else {\n            goto lab_0x409003;\n        }\n    }\n  lab_0x409003:\n    // 0x409003\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x409013\n    int128_t v13 = v6; // 0x40901c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40901c\n    goto lab_0x408fc7;\n  lab_0x408fbe:\n    // 0x408fbe\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x408fc7;\n  lab_0x408fc7:\n    // 0x408fc7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x408f80\n    free(mem);\n    // 0x408f8a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409030",
            "funcStartAddr": "409030",
            "funcEndAddr": "4090d8",
            "decompiledFuncCode": "int64_t function_409030(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40903a\n    uint64_t v2 = *v1; // 0x40903a\n    int64_t result; // 0x409030\n    if (v2 <= a1) {\n      lab_0x4090c3:\n        // 0x4090c3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x409048\n    while (*v6 == 0) {\n        // 0x409048\n        v7 = v5 + 16;\n        int64_t v8; // 0x409030\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x4090c3\n            goto lab_0x4090c3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x409059\n    int64_t v10 = *v9; // 0x409059\n    int64_t v11 = *v3; // 0x40905e\n    int64_t v12 = v11; // 0x409065\n    int64_t v13 = v10; // 0x409065\n    int64_t result2 = v11; // 0x409065\n    int64_t * v14; // 0x40907e\n    int64_t v15; // 0x40907e\n    int64_t v16; // 0x40907a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x409075\n            v16 = *v3;\n        }\n        // 0x40907e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x409070\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409075\n                v16 = *v3;\n            }\n            // 0x40907e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40909d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x4090b0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x4090bd\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40904c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x409048\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x4090c3\n                goto lab_0x4090c3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x409059\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409075\n                v16 = *v3;\n            }\n            // 0x40907e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x409070\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x409075\n                    v16 = *v3;\n                }\n                // 0x40907e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40909d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x4090c3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4090e0",
            "funcStartAddr": "4090e0",
            "funcEndAddr": "4091b6",
            "decompiledFuncCode": "int64_t function_4090e0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4090ef\n    uint64_t v2 = *v1; // 0x4090ef\n    int64_t v3 = a1; // 0x4090f3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x409143;\n    } else {\n        // 0x4090f5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x409143;\n        } else {\n            // 0x4090fc\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x409111\n                int64_t v6; // 0x409108\n                while (v5 == 0) {\n                    // 0x409108\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x409143\n                        goto lab_0x409143;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x409128\n                int64_t v8 = v7; // 0x40912f\n                int64_t v9 = v5; // 0x40912f\n                int64_t v10; // 0x4090e0\n                int64_t v11; // 0x409128\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x409120\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x409123\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x409136\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x409111\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x409108\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x409143\n                            goto lab_0x409143;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x409123\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x409120\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x409123\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x409131\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x409143;\n            } else {\n                goto lab_0x40917c;\n            }\n        }\n    }\n  lab_0x409143:\n    // 0x409143\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x409150\n        int64_t v14 = v13; // 0x409157\n        int64_t v15 = v2; // 0x409157\n        int64_t v16; // 0x409160\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x409160\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x409171\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x409171\n        int64_t v18 = v15; // 0x40917a\n        int64_t v19 = v17; // 0x40917a\n        while (v15 > v17) {\n            // 0x409150\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x409160\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x409171\n                v15 = *v1;\n            }\n            // 0x409171\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40917c;\n  lab_0x40917c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40917c\n    if (v20 == 0) {\n        // 0x4091a1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g54;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x409190\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40919f\n    while (v21 != 0) {\n        // 0x409190\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x4091a1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_4091c0",
            "funcStartAddr": "4091c0",
            "funcEndAddr": "4093ba",
            "decompiledFuncCode": "int64_t function_4091c0(int64_t a1, uint64_t a2) {\n    // 0x4091c0\n    int128_t v1; // 0x4091c0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x4091cb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x4091c0\n        if (a2 < 0) {\n            // 0x409340\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x409350\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x4091e0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x4091e9\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x409332\n        return 0;\n    }\n    uint64_t nmemb = function_408610(a2); // 0x409223\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x409332\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40925b\n    if (*v6 == nmemb) {\n        // 0x409332\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40926d\n    int64_t v7 = (int64_t)mem; // 0x40926d\n    int64_t v8 = v7; // bp-104, 0x409272\n    if (mem == NULL) {\n        // 0x409332\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x4092ca\n    int64_t v10 = *v9; // 0x4092ca\n    int64_t v11 = function_4088a0(&v8, a1, 0); // 0x4092d3\n    int64_t result = v11 & 0xffffffff; // 0x4092d8\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x409294\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x4092f6\n        function_4088a0(v13, v12, 1);\n        function_4088a0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x409380\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x409332\n    return result;\n}\n"
        },
        {
            "funcName": "function_4093c0",
            "funcStartAddr": "4093c0",
            "funcEndAddr": "409634",
            "decompiledFuncCode": "int64_t function_4093c0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x4093c0\n    int128_t v1; // 0x4093c0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x4093c0\n    int64_t v5 = function_408700(a1, a2, &v4, 0); // 0x4093e1\n    if (v5 != 0) {\n        // 0x4093ee\n        if (a3 != NULL) {\n            // 0x4093f5\n            *a3 = v5;\n        }\n        // 0x4093f9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x409408\n    uint64_t v7 = *v6; // 0x409408\n    int64_t v8; // 0x4093c0\n    int64_t v9; // 0x4093c0\n    int64_t v10; // 0x4093c0\n    int128_t v11; // 0x4093c0\n    int128_t v12; // 0x4093c0\n    int64_t v13; // 0x4093c0\n    if (v7 < 0) {\n        // 0x409490\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x4094a0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x4094a4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x4094a9\n        int128_t v17 = __asm_addss(v15, v15); // 0x4094ad\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40942b;\n        } else {\n            goto lab_0x4094ba;\n        }\n    } else {\n        // 0x409411\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x409415\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x409419\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40941e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x4094ba;\n        } else {\n            goto lab_0x40942b;\n        }\n    }\n  lab_0x40942b:\n    // 0x40942b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x409434\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40943c\n    int128_t v23 = v11; // 0x40943c\n    if (v13 == 0) {\n        goto lab_0x409442;\n    } else {\n        goto lab_0x4094e1;\n    }\n  lab_0x4094ba:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x4094c7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x4094ca\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x4094d3\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x409442;\n    } else {\n        goto lab_0x4094e1;\n    }\n  lab_0x409442:;\n    int64_t * v28 = (int64_t *)v4; // 0x409447\n    if (*v28 == 0) {\n        // 0x409558\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x409561\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x409452\n    int64_t v31 = *v30; // 0x409452\n    int64_t * v32; // 0x4093c0\n    int64_t v33; // 0x4093c0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40957d\n        if (mem == NULL) {\n            // 0x4093f9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40957d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x409467\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40947d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x4094e1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x4094e1\n    function_408820(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x4094ea\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x4094ee\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x4094f2\n    int128_t v44; // 0x4093c0\n    if (v42 < 0) {\n        // 0x4095b0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x4095c0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x409500\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x409509\n    int128_t v47; // 0x4093c0\n    int64_t v48; // 0x4093c0\n    if (v46 < 0) {\n        // 0x409590\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40959d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x4095a0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x409512\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x409516\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40951b\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40952b\n        int128_t v53 = v52; // 0x409534\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x4095d0\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x40953a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x4093f9\n        return 0xffffffff;\n    }\n    goto lab_0x409442;\n}\n"
        },
        {
            "funcName": "function_409640",
            "funcStartAddr": "409640",
            "funcEndAddr": "40967b",
            "decompiledFuncCode": "int64_t function_409640(int64_t a1, int64_t a2) {\n    // 0x409640\n    int64_t v1; // bp-16, 0x409640\n    int64_t v2; // 0x409640\n    int32_t v3 = function_4093c0(a1, a2, &v1, v2); // 0x409652\n    if (v3 == -1) {\n        // 0x409660\n        return 0;\n    }\n    // 0x409657\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_409680",
            "funcStartAddr": "409680",
            "funcEndAddr": "409857",
            "decompiledFuncCode": "int64_t function_409680(int64_t a1) {\n    // 0x409680\n    int128_t v1; // 0x409680\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x409680\n    int64_t v5; // 0x409680\n    int64_t result = function_408700(a1, v5, &v4, 1); // 0x409695\n    if (result == 0) {\n        // 0x4096b2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x4096a7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x4096b2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x4096c0\n    uint64_t v8 = *v7 - 1; // 0x4096c4\n    *v7 = v8;\n    int64_t v9; // 0x409680\n    int64_t v10; // 0x409680\n    int64_t v11; // 0x409680\n    int128_t v12; // 0x409680\n    int128_t v13; // 0x409680\n    int64_t v14; // 0x409680\n    if (v8 < 0) {\n        // 0x4097b0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x4097c0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x4097c4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x4097c9\n        int128_t v18 = __asm_addss(v16, v16); // 0x4097cd\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x4096ec;\n        } else {\n            goto lab_0x4097da;\n        }\n    } else {\n        // 0x4096d2\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x4096d6\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x4096da\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x4096df\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x4097da;\n        } else {\n            goto lab_0x4096ec;\n        }\n    }\n  lab_0x4096ec:\n    // 0x4096ec\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x4096f0\n    int64_t v23 = v14; // 0x4096f0\n    int128_t v24 = v12; // 0x4096f0\n    int64_t v25 = v10; // 0x4096f0\n    int128_t v26 = v22; // 0x4096f0\n    goto lab_0x4096f5;\n  lab_0x4097da:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x4097e7\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x4097ea\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x4096f5;\n  lab_0x4096f5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x4096f5\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x4096b2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x4096fe\n    function_408820(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x409707\n    int64_t v31 = *(int64_t *)v29; // 0x40970b\n    int128_t v32; // 0x409680\n    if (v30 < 0) {\n        // 0x409820\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x409830\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x409718\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x409721\n    int128_t v35; // 0x409680\n    int64_t v36; // 0x409680\n    if (v34 < 0) {\n        // 0x409800\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40980d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x409810\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40972e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x409732\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x409737\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x4096b2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x409748\n    int128_t v41 = v40; // 0x409751\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x409753\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x409758\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x409848\n    if ((char)function_4091c0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x4096b2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40977a\n    if (*v43 != 0) {\n        int64_t v44; // 0x409680\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x409788\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x409799\n    *v43 = 0;\n    // 0x4096b2\n    return result;\n}\n"
        },
        {
            "funcName": "function_409860",
            "funcStartAddr": "409860",
            "funcEndAddr": "409dc2",
            "decompiledFuncCode": "int64_t function_409860(void) {\n    char * v1 = nl_langinfo(14); // 0x409876\n    char * v2 = g46; // 0x40987b\n    char * v3; // 0x409860\n    int64_t v4; // 0x409860\n    int64_t v5; // 0x409860\n    int64_t v6; // 0x409860\n    int64_t v7; // 0x409860\n    int32_t size; // 0x409860\n    int32_t size2; // 0x409860\n    int32_t len; // 0x409932\n    int64_t v8; // 0x409932\n    char * env_val; // 0x40991d\n    if (v2 == NULL) {\n        // 0x409918\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409985;\n        } else {\n            // 0x40992a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409985;\n            } else {\n                // 0x40992f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40991d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409db5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409985;\n                    } else {\n                        // 0x409d29\n                        size2 = len + 14;\n                        goto lab_0x40994b;\n                    }\n                } else {\n                    goto lab_0x40994b;\n                }\n            }\n        }\n    } else {\n        // 0x409860\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40989a;\n    }\n  lab_0x409bcc:;\n    // 0x409bcc\n    struct _IO_FILE * stream; // 0x409a0b\n    int32_t v10 = __uflow(stream); // 0x409bcf\n    int64_t v11; // 0x409860\n    int64_t v12 = v11; // 0x409bd9\n    int64_t v13; // 0x409860\n    int64_t v14 = v13; // 0x409bd9\n    int32_t v15 = v10; // 0x409bd9\n    int64_t v16; // 0x409860\n    int64_t v17 = v16; // 0x409bd9\n    int64_t v18 = v11; // 0x409bd9\n    int64_t v19 = v13; // 0x409bd9\n    int64_t v20 = v16; // 0x409bd9\n    if (v10 == -1) {\n        // break -> 0x409bdf\n        goto lab_0x409bdf;\n    }\n    goto lab_0x409a59;\n  lab_0x409a4e:;\n    // 0x409a4e\n    int64_t v90; // 0x409860\n    int64_t * v32; // 0x409a40\n    *v32 = v90 + 1;\n    int64_t v89; // 0x409860\n    v12 = v89;\n    int64_t v91; // 0x409860\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x409860\n    v17 = v92;\n    goto lab_0x409a59;\n  lab_0x409a59:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x409860\n    int32_t v25; // bp-120, 0x409860\n    int32_t v26; // bp-184, 0x409860\n    int64_t v27; // 0x409a0b\n    int64_t v28; // 0x409a28\n    int64_t v29; // 0x409a2d\n    int64_t * v30; // 0x409a44\n    switch (c) {\n        case 32: {\n            goto lab_0x409a40;\n        }\n        case 10: {\n            goto lab_0x409a40;\n        }\n        case 9: {\n            goto lab_0x409a40;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409c31\n            int32_t v33; // 0x409860\n            char v34; // 0x409860\n            int32_t v35; // 0x409c3e\n            if (v31 < *v30) {\n                // 0x409c10\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x409c3b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409c31\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409c10\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x409c3b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409c20\n                v36 = v33;\n            }\n            // 0x409d0f\n            if (v36 == -1) {\n                // break -> 0x409bdf\n                break;\n            }\n            goto lab_0x409a40;\n        }\n        default: {\n            // 0x409a6f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x409bdf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409a98\n            int64_t v39 = v37 + 4; // 0x409a9a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409aa6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409aa8\n            while (v41 == 0) {\n                // 0x409a98\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409ac6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409ad2\n            int64_t v45 = v43 + 4; // 0x409ad4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409ae0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409ae2\n            while (v47 == 0) {\n                // 0x409ad2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x409acf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409af8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409b08\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x409b0c\n            int64_t v52 = v51 + v48; // 0x409b15\n            int64_t * mem; // 0x409860\n            int64_t v53; // 0x409860\n            int64_t v54; // 0x409860\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x409c4b\n                int64_t v56 = v55 + 3; // 0x409c57\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409b31\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409b40\n            if (mem == NULL) {\n                // 0x409d6c\n                free((int64_t *)v21);\n                function_407390(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x4099e4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409b58\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409b62\n            uint32_t v62 = (int32_t)v59; // 0x409b65\n            int64_t v63; // 0x409860\n            if (v62 >= 8) {\n                // 0x409c74\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x409c8e\n                int64_t v66 = v61 - v65; // 0x409c92\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x409c9d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x409cae\n                    int64_t v70 = v69 & 0xffffffff; // 0x409cae\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x409cab\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x409d3f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409b77\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x409b7b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x409b8b\n            int64_t v74 = v60 - 1; // 0x409b8f\n            uint32_t v75 = (int32_t)v73; // 0x409b94\n            int64_t v76; // 0x409860\n            if (v75 >= 8) {\n                // 0x409cc2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x409ccc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x409cdc\n                int64_t v80 = v74 - v79; // 0x409ce0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x409ceb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x409cfb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409cf9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409d56\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x409d5e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409ba6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x409baa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409da3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x409bbe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x409a4e;\n            } else {\n                goto lab_0x409bcc;\n            }\n        }\n    }\n  lab_0x409a40:;\n    int64_t v93 = v23; // 0x409860\n    int64_t v94 = v22; // 0x409860\n    int64_t v95 = v21; // 0x409860\n    goto lab_0x409a40_2;\n  lab_0x409985:;\n    int64_t * mem3 = malloc(size); // 0x409985\n    int64_t v97 = (int64_t)&g10; // 0x409990\n    int64_t v98; // 0x409860\n    int64_t path; // 0x409860\n    if (mem3 == NULL) {\n        goto lab_0x409962;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409985\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4099a6;\n    }\n  lab_0x40989a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40988d\n    char v100 = *v3; // 0x40989a\n    int64_t v101; // 0x409860\n    if (v100 == 0) {\n        // 0x4098f4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x409860\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x409860\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4098e0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4098e7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4098b0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4098bd\n        char v107 = *(char *)v106; // 0x4098c2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4098f4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4098cb\n    v104 = v103 + 1;\n  lab_0x4098e7:\n    // 0x4098f4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409962:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40989a;\n  lab_0x4099a6:;\n    int64_t v109 = v98 + path; // 0x4099a6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4099d2\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x409a01\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409d32\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x409a25\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409a40_2:;\n                uint64_t v96 = *v32; // 0x409a40\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x409bcc;\n                } else {\n                    goto lab_0x409a4e;\n                }\n            }\n          lab_0x409bdf:\n            // 0x409bdf\n            function_407390(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x409bfe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4099e4;\n  lab_0x40994b:;\n    int64_t * mem4 = malloc(size2); // 0x40994b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x4099f1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4099a6;\n    } else {\n        goto lab_0x409962;\n    }\n  lab_0x4099e4:\n    // 0x4099e4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409962;\n}\n"
        },
        {
            "funcName": "function_409dd0",
            "funcStartAddr": "409dd0",
            "funcEndAddr": "409dde",
            "decompiledFuncCode": "int64_t function_409dd0(int64_t a1, int64_t a2) {\n    // 0x409dd0\n    int64_t v1; // 0x409dd0\n    return function_409de0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_409de0",
            "funcStartAddr": "409de0",
            "funcEndAddr": "409f15",
            "decompiledFuncCode": "int64_t function_409de0(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x409ec0\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x409e1c\n    int64_t v2; // 0x409de0\n    if (g47 < 0) {\n        int64_t v3 = function_409de0(fd, 0, v1, a4); // 0x409e64\n        int64_t v4 = v3 & 0xffffffff; // 0x409e69\n        if ((int32_t)v3 < 0) {\n            // 0x409e50\n            return v4 & 0xffffffff;\n        }\n        // 0x409e6f\n        v2 = v4;\n        if (g47 != -1) {\n            // 0x409e50\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x409e37\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x409e46\n            g47 = 1;\n            // 0x409e50\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_409de0(fd & 0xffffffff, 0, v1, a4); // 0x409ef7\n        int64_t v7 = v6 & 0xffffffff; // 0x409efc\n        if ((int32_t)v6 < 0) {\n            // 0x409e50\n            return v7 & 0xffffffff;\n        }\n        // 0x409f06\n        g47 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x409e7f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x409e8a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x409e50\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x409ea2\n    close(fd2);\n    // 0x409e50\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409f20",
            "funcStartAddr": "409f20",
            "funcEndAddr": "409f7d",
            "decompiledFuncCode": "int64_t function_409f20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409f20\n    return function_4018a0();\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409f81",
            "decompiledFuncCode": "int64_t function_409f80(void) {\n    // 0x409f80\n    int64_t result; // 0x409f80\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f90",
            "funcStartAddr": "409f90",
            "funcEndAddr": "409fa8",
            "decompiledFuncCode": "int64_t function_409f90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409f90\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409fa8",
            "funcStartAddr": "409fa8",
            "funcEndAddr": "409fc8",
            "decompiledFuncCode": "int64_t function_409fa8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x409fb2\n    while (*(int64_t *)v1 != -1) {\n        // 0x409fb3\n        v1 -= 8;\n    }\n    // 0x409fc4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shuf.elf"
}