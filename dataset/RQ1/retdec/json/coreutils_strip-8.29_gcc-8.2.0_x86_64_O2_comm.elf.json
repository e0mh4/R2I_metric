{
    "funcInfo": [
        {
            "funcName": "function_401710",
            "funcStartAddr": "401710",
            "funcEndAddr": "401715",
            "decompiledFuncCode": "int64_t function_401710(void) {\n    // 0x401710\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401715",
            "funcStartAddr": "401715",
            "funcEndAddr": "40171a",
            "decompiledFuncCode": "int64_t function_401715(void) {\n    // 0x401715\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40171a",
            "funcStartAddr": "40171a",
            "funcEndAddr": "40171f",
            "decompiledFuncCode": "int64_t function_40171a(void) {\n    // 0x40171a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40171f",
            "funcStartAddr": "40171f",
            "funcEndAddr": "401724",
            "decompiledFuncCode": "int64_t function_40171f(void) {\n    // 0x40171f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401724",
            "funcStartAddr": "401724",
            "funcEndAddr": "401729",
            "decompiledFuncCode": "int64_t function_401724(void) {\n    // 0x401724\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401729",
            "funcStartAddr": "401729",
            "funcEndAddr": "40172e",
            "decompiledFuncCode": "int64_t function_401729(void) {\n    // 0x401729\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401730",
            "funcStartAddr": "401730",
            "funcEndAddr": "401a68",
            "decompiledFuncCode": "int64_t function_401730(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40173c\n    function_402a40(a2);\n    setlocale(LC_ALL, (char *)&g3);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g46 = function_402800(3, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    function_406910(0x402680, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g45 = 1;\n    g44 = 1;\n    g43 = 1;\n    g42 = 0;\n    *(int16_t *)&g40 = 0;\n    g38 = 0;\n    g39 = 0;\n    int64_t v3; // 0x401730\n    while (true) {\n      lab_0x4017d0_2:;\n        // 0x4017d0\n        int64_t v4; // 0x401730\n        int32_t v5 = function_405ff0(v2 & 0xffffffff, a2, \"123z\", &g4, 0, v4);\n        switch (v5) {\n            case -1: {\n                goto lab_0x40196f;\n            }\n            case 51: {\n                // 0x401950\n                g43 = 0;\n                goto lab_0x4017d0_2;\n            }\n            default: {\n                if (v5 > 51) {\n                    if (v5 == 129) {\n                        // 0x401960\n                        g38 = 2;\n                    } else {\n                        if (v5 > 129) {\n                            if (v5 != 130) {\n                                if (v5 != 131) {\n                                    // 0x4019fb\n                                    function_402220(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x4018db\n                                g39 = 1;\n                            } else {\n                                // 0x40186f\n                                if (g37 != 0) {\n                                    // 0x401880\n                                    if (strcmp((char *)g18, g60) != 0) {\n                                        // 0x401a05\n                                        error(1, (int32_t)\"multiple output delimiters specified\" ^ (int32_t)\"multiple output delimiters specified\", dcgettext(NULL, \"multiple output delimiters specified\", 5));\n                                        v3 = &g62;\n                                        goto lab_0x401a27;\n                                    }\n                                }\n                                int64_t v6 = (int64_t)g60; // 0x401877\n                                *(int64_t *)&g18 = v6;\n                                int64_t v7 = v6; // 0x4018a8\n                                int64_t v8 = 1; // 0x4018a8\n                                if (*g60 != 0) {\n                                    int64_t v9 = -1; // 0x4018b2\n                                    int64_t v10 = 0; // 0x4018b2\n                                    while (v9 != 0) {\n                                        int64_t v11 = v7;\n                                        v9--;\n                                        bool v12; // 0x401730\n                                        v7 = v11 + (v12 ? -1 : 1);\n                                        v10 = v9;\n                                        if (*(char *)v11 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v10 = 0;\n                                    }\n                                    v8 = -2 - v10;\n                                }\n                                // 0x4018be\n                                g37 = v8;\n                            }\n                        } else {\n                            if (v5 != 122) {\n                                if (v5 != 128) {\n                                    // 0x4019fb\n                                    function_402220(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401853\n                                g38 = 1;\n                            } else {\n                                // 0x40180d\n                                g19 = 0;\n                            }\n                        }\n                    }\n                } else {\n                    if (v5 == -130) {\n                        // 0x4019c5\n                        function_402220(0);\n                        // UNREACHABLE\n                    }\n                    if (v5 <= 0xffffff7e) {\n                        if (v5 == -131) {\n                            // 0x401913\n                            function_404af0((int64_t)g31, \"comm\", \"GNU coreutils\", (int64_t)g20, \"Richard M. Stallman\", \"David MacKenzie\");\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x4019fb;\n                    }\n                    if (v5 != 49) {\n                        if (v5 != 50) {\n                            // 0x4019fb\n                            function_402220(1);\n                            // UNREACHABLE\n                        }\n                        // 0x4018f9\n                        g44 = 0;\n                    } else {\n                        // 0x40183a\n                        g45 = 0;\n                    }\n                }\n                goto lab_0x4017d0_2;\n            }\n        }\n    }\n  lab_0x40196f:\n    // 0x40196f\n    if (g37 == 0) {\n        // 0x401979\n        g37 = 1;\n    }\n    int32_t v13 = *(int32_t *)0x60a27c; // 0x401984\n    int64_t v14 = v13; // 0x401984\n    uint32_t v15 = (int32_t)v2 - v13; // 0x40198d\n    v3 = v14;\n    if (v15 >= 2) {\n        int64_t v16 = 8 * v14 + a2;\n        if (v15 == 2) {\n            // 0x40199d\n            function_401ca0(v16);\n            return g40 != 0 ? 1 : (int64_t)g41;\n        }\n        // 0x4019cc\n        function_404660(*(int64_t *)(v16 + 16));\n        // 0x4019e3\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n      lab_0x4019fb:\n        // 0x4019fb\n        function_402220(1);\n        // UNREACHABLE\n    }\n    goto lab_0x401a27;\n  lab_0x401a27:\n    // 0x401a27\n    if (v3 >= v2) {\n        // 0x401a2b\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x4019fb\n        function_402220(1);\n        // UNREACHABLE\n    }\n    // 0x401a4c\n    function_404660(*(int64_t *)(a2 - 8 + (v1 >> 29)));\n    // 0x4019e3\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand after %s\", 5));\n    // 0x4019fb\n    function_402220(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a70",
            "funcEndAddr": "401a9b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a70\n    int64_t v1; // 0x401a70\n    __libc_start_main(0x401730, (int32_t)a4, (char **)&v1, (void (*)())0x4068a0, (void (*)())0x406900, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a9b",
            "funcStartAddr": "401a9b",
            "funcEndAddr": "401aba",
            "decompiledFuncCode": "int64_t function_401a9b(void) {\n    // 0x401a9b\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_401aba",
            "funcStartAddr": "401aba",
            "funcEndAddr": "401af1",
            "decompiledFuncCode": "int64_t function_401aba(void) {\n    // 0x401aba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401af1",
            "funcStartAddr": "401af1",
            "funcEndAddr": "401b48",
            "decompiledFuncCode": "int64_t function_401af1(void) {\n    // 0x401af1\n    if (g35 != 0) {\n        // 0x401b47\n        int64_t result; // 0x401af1\n        return result;\n    }\n    int64_t v1 = g36; // 0x401b24\n    int64_t result2; // 0x401b36\n    if (g36 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401b36\n        result2 = function_401a9b();\n        g35 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401b26\n        v1++;\n    }\n    // 0x401b1a\n    g36 = v1;\n    // 0x401b36\n    result2 = function_401a9b();\n    g35 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401b48",
            "funcStartAddr": "401b48",
            "funcEndAddr": "401b4d",
            "decompiledFuncCode": "int64_t function_401b48(void) {\n    // 0x401b48\n    return function_401aba();\n}\n"
        },
        {
            "funcName": "function_401b50",
            "funcStartAddr": "401b50",
            "funcEndAddr": "401c09",
            "decompiledFuncCode": "int64_t function_401b50(int64_t n, int64_t data, int64_t stream, int64_t a4) {\n    // 0x401b50\n    int64_t result; // 0x401b50\n    int32_t result2; // 0x401b84\n    switch ((int32_t)a4) {\n        case 2: {\n            // 0x401bd0\n            if (g44 == 0) {\n                // 0x401bd9\n                return result;\n            }\n            // 0x401be0\n            if (g45 == 0) {\n                // 0x401b70\n                result2 = fwrite_unlocked((int64_t *)data, 1, (int32_t)n, (struct _IO_FILE *)stream);\n                return result2;\n            }\n            // break -> 0x401be9\n            break;\n        }\n        case 3: {\n            // 0x401b90\n            if (g43 == 0) {\n                // 0x401bd9\n                return result;\n            }\n            int64_t data2 = data; // 0x401ba0\n            int64_t n2 = n; // 0x401ba0\n            if (g45 != 0) {\n                // 0x401ba2\n                fwrite_unlocked(g18, 1, g37, (struct _IO_FILE *)stream);\n                data2 = 1;\n                n2 = (int64_t)g18;\n            }\n            // 0x401bbd\n            if (g44 == 0) {\n                // 0x401b70\n                result2 = fwrite_unlocked((int64_t *)data2, 1, (int32_t)n2, (struct _IO_FILE *)stream);\n                return result2;\n            }\n            // break -> 0x401be9\n            break;\n        }\n        default: {\n            // 0x401b67\n            if (g45 == 0) {\n                // 0x401bd9\n                return result;\n            }\n            // 0x401b70\n            result2 = fwrite_unlocked((int64_t *)data, 1, (int32_t)n, (struct _IO_FILE *)stream);\n            return result2;\n        }\n    }\n    // 0x401be9\n    fwrite_unlocked(g18, 1, g37, (struct _IO_FILE *)stream);\n    // 0x401b70\n    result2 = fwrite_unlocked((int64_t *)1, 1, (int32_t)(int64_t)g18, (struct _IO_FILE *)stream);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401c10",
            "funcStartAddr": "401c10",
            "funcEndAddr": "401c97",
            "decompiledFuncCode": "int64_t function_401c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)((0x100000000 * a5 - 0x100000000 >> 32) + 0x60a2c5); // 0x401c1d\n    int64_t result; // 0x401c10\n    if (*v1 != 0) {\n        // 0x401c88\n        return result;\n    }\n    int64_t v2 = a1 - 1; // 0x401c38\n    int64_t v3 = a3 - 1; // 0x401c3f\n    int64_t v4; // 0x401c10\n    if (g46 != 0) {\n        // 0x401c90\n        v4 = function_404f80(a1, v2, a3, v3);\n    } else {\n        // 0x401c4c\n        v4 = function_402a00(a1, v2, a3, v3);\n    }\n    // 0x401c51\n    result = v4;\n    if ((int32_t)v4 >= 1) {\n        // 0x401c55\n        error((int32_t)(g38 == 1), (int32_t)\"file %d is not in sorted order\" ^ (int32_t)\"file %d is not in sorted order\", dcgettext(NULL, \"file %d is not in sorted order\", 5));\n        *v1 = 1;\n        result = &g62;\n    }\n    // 0x401c88\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ca0",
            "funcStartAddr": "401ca0",
            "funcEndAddr": "402220",
            "decompiledFuncCode": "int64_t function_401ca0(int64_t a1) {\n    // 0x401ca0\n    char * v1; // bp-520, 0x401ca0\n    int64_t v2 = (int64_t)&v1; // 0x401cb0\n    bool v3; // 0x401ca0\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5; // bp-152, 0x401ca0\n    int64_t v6 = &v5; // 0x401cc4\n    int64_t v7 = 0; // 0x401cc4\n    int64_t v8; // bp-344, 0x401ca0\n    int64_t v9 = &v8; // 0x401cc4\n    int64_t v10 = a1; // 0x401cc4\n    v1 = (char *)v7;\n    int64_t v11 = v6 - 96; // 0x401ce3\n    int64_t v12; // bp-312, 0x401ca0\n    int64_t v13 = 32 * v7 + (int64_t)&v12; // 0x401ce3\n    function_4028b0(v11);\n    *(int64_t *)v13 = v11;\n    v11 += 24;\n    v13 += 8;\n    while (v6 != v11) {\n        // 0x401ce7\n        function_4028b0(v11);\n        *(int64_t *)v13 = v11;\n        v11 += 24;\n        v13 += 8;\n    }\n    int64_t * v14 = (int64_t *)v10;\n    int64_t v15 = *v14; // 0x401d00\n    *(int32_t *)v9 = 0;\n    *(int32_t *)(v9 + 4) = 0;\n    *(int32_t *)(v9 + 8) = 0;\n    int64_t v16 = 2; // 0x401d2f\n    int64_t v17 = v15;\n    int64_t v18 = (int64_t)&g12;\n    unsigned char v19 = *(char *)v17; // 0x401d2f\n    char v20 = *(char *)v18; // 0x401d2f\n    char v21 = v20; // 0x401d2f\n    bool v22 = false; // 0x401d2f\n    int64_t v23; // 0x401ca0\n    int64_t v24; // 0x401ca0\n    while (v19 == v20) {\n        v16--;\n        v23 = v18 + v4;\n        v24 = v17 + v4;\n        v21 = v19;\n        v22 = true;\n        if (v16 == 0) {\n            // break -> \n            break;\n        }\n        v17 = v24;\n        v18 = v23;\n        v19 = *(char *)v17;\n        v20 = *(char *)v18;\n        v21 = v20;\n        v22 = false;\n    }\n    unsigned char v25 = v21;\n    int64_t v26 = (int64_t)g32; // 0x401d38\n    if ((v19 >= v25 && !v22) != v19 < v25) {\n        // 0x40209f\n        v26 = function_402760(v15, (int64_t *)\"r\");\n    }\n    int64_t v27 = 8 * v7; // 0x401d3e\n    *(int64_t *)(v27 + v2 + 64) = v26;\n    int64_t * v28 = v14; // 0x401d46\n    int64_t * v29; // 0x401ca0\n    while (v26 != 0) {\n        // 0x401d4c\n        function_402730(v26, 2, v15);\n        int64_t v30 = *(int64_t *)((0x100000000 * (int64_t)v1 >> 27) + v2 + 208); // 0x401d6b\n        *(int64_t *)(v27 + v2 + 48) = function_4028c0(v30, v26, g19);\n        v29 = v14;\n        if ((*(int32_t *)v26 & 32) != 0) {\n            goto lab_0x4021c3;\n        }\n        // 0x401d89\n        v10 += 8;\n        if (v7 == 1) {\n            // 0x401dc8\n            goto lab_0x401dc8_2;\n        }\n        // 0x401d9b\n        v6 += 96;\n        v7 = 1;\n        v9 += 12;\n        v1 = (char *)v7;\n        v11 = v6 - 96;\n        v13 = 32 * v7 + (int64_t)&v12;\n        function_4028b0(v11);\n        *(int64_t *)v13 = v11;\n        v11 += 24;\n        v13 += 8;\n        while (v6 != v11) {\n            // 0x401ce7\n            function_4028b0(v11);\n            *(int64_t *)v13 = v11;\n            v11 += 24;\n            v13 += 8;\n        }\n        // 0x401d00\n        v14 = (int64_t *)v10;\n        v15 = *v14;\n        *(int32_t *)v9 = 0;\n        *(int32_t *)(v9 + 4) = 0;\n        *(int32_t *)(v9 + 8) = 0;\n        v16 = 2;\n        v17 = v15;\n        v18 = (int64_t)&g12;\n        v19 = *(char *)v17;\n        v20 = *(char *)v18;\n        v21 = v20;\n        v22 = false;\n        while (v19 == v20) {\n            v16--;\n            v23 = v18 + v4;\n            v24 = v17 + v4;\n            v21 = v19;\n            v22 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = v24;\n            v18 = v23;\n            v19 = *(char *)v17;\n            v20 = *(char *)v18;\n            v21 = v20;\n            v22 = false;\n        }\n        v25 = v21;\n        v26 = (int64_t)g32;\n        if ((v19 >= v25 && !v22) != v19 < v25) {\n            // 0x40209f\n            v26 = function_402760(v15, (int64_t *)\"r\");\n        }\n        // 0x401d3e\n        v27 = 8 * v7;\n        *(int64_t *)(v27 + v2 + 64) = v26;\n        v28 = v14;\n    }\n    goto lab_0x4021f0;\n  lab_0x4021c3:\n    // 0x4021c3\n    error(1, *__errno_location(), \"%s\", (char *)function_4044e0(0, 3, *v29));\n    v28 = v29;\n    goto lab_0x4021f0;\n  lab_0x4021f0:\n    // 0x4021f0\n    error(1, *__errno_location(), \"%s\", (char *)function_4044e0(0, 3, *v28));\n    return &g62;\n  lab_0x401dc8_2:;\n    // 0x401dc8\n    int64_t v31; // 0x401ca0\n    int64_t v32 = v31;\n    int64_t v33; // 0x401ca0\n    int64_t v34 = v33;\n    int64_t v35; // 0x401ca0\n    int64_t v36 = v35;\n    int32_t v37; // 0x401ca0\n    int64_t v38; // 0x401ca0\n    int64_t v39; // 0x401ca0\n    int64_t v40; // 0x401ca0\n    int64_t v41; // 0x401ca0\n    int64_t v42; // 0x401ca0\n    char v43; // 0x401ca0\n    char v44; // 0x401ca0\n    int16_t v45; // bp-376, 0x401ca0\n    int32_t v46; // 0x401ca0\n    int64_t v47; // 0x401ca0\n    int32_t v48; // 0x401ca0\n    int64_t v49; // 0x401ca0\n    if (v49 == 0) {\n        if (v48 == 0) {\n            int64_t v50 = v38;\n            int64_t v51 = v42;\n            int32_t v52; // 0x401d80\n            v46 = v52;\n            v39 = v50;\n            int64_t v53; // 0x401ca0\n            if ((int32_t)function_405040(v53, v51) != 0) {\n                goto lab_0x40218b;\n            } else {\n                // 0x402072\n                int32_t v54; // 0x401ca0\n                int64_t v55 = function_405040((int64_t)v54, v51); // 0x402077\n                v46 = 1;\n                v39 = v50;\n                if ((int32_t)v55 == 0) {\n                    char v56 = g39; // 0x402084\n                    int64_t v57 = v55; // 0x40208b\n                    int64_t result; // 0x401ca0\n                    if (v56 == 0) {\n                        // 0x40208d\n                        result = v57;\n                        return result;\n                    }\n                    char v58 = g19; // 0x4020c0\n                    char * v59 = dcgettext(NULL, \"total\", 5); // 0x4020c8\n                    int64_t * v60 = g18; // 0x4020da\n                    int64_t v61 = function_402860(v32, &v45); // 0x4020e4\n                    int64_t * v62 = g18; // 0x4020f3\n                    v1 = (char *)v62;\n                    int64_t v63; // bp-408, 0x401ca0\n                    int64_t v64 = function_402860(v34, (int16_t *)&v63); // 0x402101\n                    int64_t * v65 = g18; // 0x402110\n                    int64_t v66; // bp-440, 0x401ca0\n                    int64_t v67 = function_402860(v36, (int16_t *)&v66); // 0x40211a\n                    char * v68 = v1; // 0x40213a\n                    v57 = __printf_chk(1, \"%s%s%s%s%s%s%s%c\", (char *)v67, v65, (char *)v64, v68, (char *)v61, v60, v59, v58);\n                    // 0x40208d\n                    result = v57;\n                    return result;\n                }\n                goto lab_0x40218b;\n            }\n        } else {\n            // 0x401fc1\n            v45 = 0;\n            struct _IO_FILE * v69 = g31; // 0x401fc9\n            g42 = 1;\n            v40 = (int64_t)v69;\n            goto lab_0x401fd7;\n        }\n    } else {\n        // 0x401ddb\n        v44 = v43;\n        v45 = 0;\n        if (v48 == 0) {\n            goto lab_0x402000;\n        } else {\n            char v70 = g46; // 0x401dee\n            int64_t * v71; // 0x401ca0\n            uint64_t v72 = *v71; // 0x401df5\n            int64_t * v73; // 0x401ca0\n            int64_t str2 = *v73; // 0x401df9\n            int64_t * v74; // 0x401ca0\n            uint64_t v75 = *v74; // 0x401dfd\n            int64_t * v76; // 0x401ca0\n            int64_t str = *v76; // 0x401e01\n            if (v70 != 0) {\n                // 0x402048\n                v47 = function_404f80(str, v75 - 1, str2, v72 - 1);\n                goto lab_0x401e35;\n            } else {\n                int64_t v77 = v72 > v75 ? v75 : v72; // 0x401e11\n                int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)v77 - 1); // 0x401e19\n                if (memcmp_rc != 0) {\n                    struct _IO_FILE * v78 = g31; // 0x402030\n                    v37 = memcmp_rc;\n                    v41 = (int64_t)v78;\n                    goto lab_0x402037;\n                } else {\n                    if (v72 > v75) {\n                        goto lab_0x402000;\n                    } else {\n                        // 0x401e2f\n                        v47 = v72 != v75;\n                        goto lab_0x401e35;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402000:\n    // 0x402000\n    g42 = 1;\n    struct _IO_FILE * v79 = g31; // 0x402007\n    int64_t v80 = (int64_t)v79; // 0x402007\n    goto lab_0x40200e;\n  lab_0x40218b:;\n    int64_t v167 = v39;\n    int32_t v168 = v46;\n    int64_t v169 = *(int64_t *)((int64_t)(8 * v168) + a1); // 0x40219c\n    int64_t v170 = function_4044e0(0, 3, v169); // 0x4021a0\n    int32_t * v171 = __errno_location(); // 0x4021a8\n    int32_t err_num2 = *v171; // 0x4021ba\n    error(1, err_num2, \"%s\", (char *)v170);\n    v29 = (int64_t *)v167;\n    goto lab_0x4021c3;\n  lab_0x401fd7:;\n    int64_t v172 = v40;\n    int64_t v151; // 0x401ca0\n    int64_t v152; // 0x401ca0\n    function_401b50(v151, v152, v172, 2);\n    int64_t v140 = v32; // 0x401ca0\n    char v141 = 1; // 0x401ca0\n    int64_t v142 = v34 + 1; // 0x401ca0\n    int64_t v143 = v36; // 0x401ca0\n    int64_t v144 = 0; // 0x401ca0\n    int64_t v96; // 0x401cc4\n    int64_t v145 = v96; // 0x401ca0\n    int64_t v146 = v152; // 0x401ca0\n    goto lab_0x401e85;\n  lab_0x40200e:;\n    int64_t v81 = v80;\n    int64_t v82; // 0x401ca0\n    int64_t v83; // 0x401ca0\n    function_401b50(v82, v83, v81, 1);\n    int64_t v84 = v36 + 1; // 0x402026\n    char v85 = v44; // 0x402026\n    int64_t v86 = v32; // 0x402026\n    goto lab_0x401e71;\n  lab_0x401e85:;\n    int64_t v160 = v146;\n    int64_t v164 = v145;\n    int64_t v165 = v144;\n    int64_t v157 = v143;\n    int64_t v158 = v142;\n    char v166 = v141;\n    int64_t v159 = v140;\n    char v156 = v166; // 0x401ca0\n    int64_t v154 = v165; // 0x401ca0\n    int64_t v162 = v164; // 0x401ca0\n    goto lab_0x401e85_2;\n  lab_0x401e71:;\n    int64_t v87 = v86;\n    char v88 = v85;\n    int64_t v89 = v84;\n    v45 = 1;\n    int64_t v90 = v87; // 0x401ca0\n    char v91 = v88; // 0x401ca0\n    int64_t v92 = v34; // 0x401ca0\n    int64_t v93 = v89; // 0x401ca0\n    int64_t v94 = 0; // 0x401ca0\n    int64_t v95 = v96; // 0x401ca0\n    int64_t v97 = 1; // 0x401ca0\n    goto lab_0x401eaa;\n  lab_0x401e35:;\n    int64_t v147 = v47;\n    struct _IO_FILE * v148 = g31; // 0x401e35\n    int64_t v149 = (int64_t)v148; // 0x401e35\n    int32_t v150 = v147;\n    v37 = v150;\n    v41 = v149;\n    if (v150 != 0) {\n        goto lab_0x402037;\n    } else {\n        // 0x401e44\n        function_401b50(v151, v152, v149, 3);\n        v84 = v36;\n        v85 = 1;\n        v86 = v32 + 1;\n        goto lab_0x401e71;\n    }\n  lab_0x401e85_2:;\n    int64_t v153 = v154;\n    char v155 = v156;\n    v35 = v157;\n    v33 = v158;\n    v43 = v155;\n    v31 = v159;\n    v42 = v160;\n    v38 = 1;\n    if (v153 == 1) {\n        goto lab_0x401dc8_2;\n    } else {\n        int64_t v161 = v162;\n        int64_t v163 = v161 + 12; // 0x401e85\n        v156 = 0;\n        v154 = 1;\n        v162 = v163;\n        v90 = v159;\n        v91 = v155;\n        v92 = v158;\n        v93 = v157;\n        v94 = 1;\n        v95 = v163;\n        v97 = 2;\n        if (v155 == 0) {\n            goto lab_0x401e85_2;\n        } else {\n            goto lab_0x401eaa;\n        }\n    }\n  lab_0x401eaa:;\n    int64_t v98 = v97;\n    int64_t v99 = v95;\n    int64_t v100 = v94;\n    int64_t v101 = v93;\n    int64_t v102 = v92;\n    char v103 = v91;\n    int64_t v104 = v90;\n    int32_t * v105 = (int32_t *)v99; // 0x401eaa\n    int32_t v106 = *v105; // 0x401eaa\n    int64_t v107 = v106; // 0x401eaa\n    int32_t * v108 = (int32_t *)(v99 + 4); // 0x401eae\n    int32_t v109 = *v108; // 0x401eae\n    int64_t v110 = 4 * v100; // 0x401eb1\n    int64_t v111 = 8 * v100; // 0x401eb9\n    int64_t v112; // 0x401ca0\n    int64_t v113 = *(int64_t *)(v111 + v112); // 0x401eb9\n    char v114 = g19; // 0x401ebe\n    v1 = (char *)v110;\n    *(int32_t *)(v99 + 8) = v109;\n    uint32_t v115 = (v106 + 1) % 4; // 0x401ed1\n    *v108 = v106;\n    *v105 = v115;\n    int64_t v116; // 0x401ca0\n    int64_t v117 = *(int64_t *)(8 * (v110 | (int64_t)v115) + v116); // 0x401ee7\n    int64_t v118 = function_4028c0(v117, v113, v114); // 0x401eef\n    char * v119 = v1; // 0x401ef4\n    int64_t v120; // 0x401ca0\n    *(int64_t *)(v111 + v120) = v118;\n    int64_t v121; // 0x401ca0\n    if (v118 == 0) {\n        int64_t v122 = *(int64_t *)(8 * ((int64_t)v119 + (int64_t)v109) + v116); // 0x401f63\n        int64_t v123 = v122 + 16; // 0x401f6b\n        int64_t v124 = *(int64_t *)v123; // 0x401f6b\n        v121 = v113;\n        if (v124 == 0) {\n            goto lab_0x401f48;\n        } else {\n            int32_t v125 = g38; // 0x401f72\n            v121 = v113;\n            if (v125 == 2) {\n                goto lab_0x401f48;\n            } else {\n                char v126 = g42; // 0x401f82\n                v121 = v113;\n                if (v125 != 1 == v126 == 0) {\n                    goto lab_0x401f48;\n                } else {\n                    int64_t v127 = *(int64_t *)(8 * (v110 + v107) + v116); // 0x401f9e\n                    function_401c10(v122 + 8, v123, v127 + 8, v127 + 16, v98);\n                    v121 = v123;\n                    goto lab_0x401f48;\n                }\n            }\n        }\n    } else {\n        int32_t v128 = g38; // 0x401f07\n        v121 = v113;\n        if (v128 == 2) {\n            goto lab_0x401f48;\n        } else {\n            char v129 = g42; // 0x401f17\n            v121 = v113;\n            if (v128 != 1 == v129 == 0) {\n                goto lab_0x401f48;\n            } else {\n                int64_t v130 = *(int64_t *)(8 * (v110 + v107) + v116); // 0x401f2f\n                int64_t v131 = v130 + 16; // 0x401f3b\n                function_401c10(v130 + 8, v131, v118 + 8, v118 + 16, v98);\n                v121 = v131;\n                goto lab_0x401f48;\n            }\n        }\n    }\n  lab_0x402037:;\n    int64_t v132 = v41;\n    int32_t v133 = v37;\n    g42 = 1;\n    v40 = v132;\n    v80 = v132;\n    if (v133 < 1) {\n        goto lab_0x40200e;\n    } else {\n        goto lab_0x401fd7;\n    }\n  lab_0x401f48:;\n    char v134 = *(char *)v113; // 0x401f48\n    if ((v134 & 32) != 0) {\n        int64_t v135 = *(int64_t *)(v111 + a1); // 0x40215c\n        int64_t v136 = function_4044e0(0, 3, v135); // 0x402160\n        int32_t * v137 = __errno_location(); // 0x402168\n        int32_t err_num = *v137; // 0x40217a\n        error(1, err_num, \"%s\", (char *)v136);\n        v46 = 1;\n        v39 = v100;\n        goto lab_0x40218b;\n    } else {\n        int64_t v138 = v121;\n        int64_t v139; // 0x401ca0\n        *(char *)(v100 | v139) = 0;\n        v140 = v104;\n        v141 = v103;\n        v142 = v102;\n        v143 = v101;\n        v144 = v100;\n        v145 = v99;\n        v146 = v138;\n        goto lab_0x401e85;\n    }\n}\n"
        },
        {
            "funcName": "function_402220",
            "funcStartAddr": "402220",
            "funcEndAddr": "402655",
            "decompiledFuncCode": "int64_t function_402220(int32_t status) {\n    // 0x402220\n    if (status != 0) {\n        // 0x40223a\n        __fprintf_chk(g34, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40225f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402266\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE1 FILE2\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Compare sorted files FILE1 and FILE2 line by line.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nWhen FILE1 or FILE2 (not both) is -, read standard input.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no options, produce three-column output.  Column one contains\\nlines unique to FILE1, column two contains lines unique to FILE2,\\nand column three contains lines common to both files.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -1              suppress column 1 (lines unique to FILE1)\\n  -2              suppress column 2 (lines unique to FILE2)\\n  -3              suppress column 3 (lines that appear in both files)\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\n  --check-order     check that the input is correctly sorted, even\\n                      if all input lines are pairable\\n  --nocheck-order   do not check that the input is correctly sorted\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  --output-delimiter=STR  separate columns with STR\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  --total           output a summary\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nNote, comparisons honor the rules specified by 'LC_COLLATE'.\\n\", 5), g31);\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  %s -12 file1 file2  Print only lines present in both file1 and file2.\\n  %s -3 file1 file2  Print lines in file1 not in file2, and vice versa.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402432\n    bool v2; // 0x402220\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4024b8\n    int64_t v6 = *(int64_t *)v5; // 0x4024bc\n    int64_t v7 = 5; // 0x4024c2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"comm\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4024ce\n        char v11 = *(char *)v9; // 0x4024ce\n        char v12 = v11; // 0x4024ce\n        bool v13 = false; // 0x4024ce\n        while (v10 == v11) {\n            // 0x4024c4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4024ce\n            int64_t v15 = v8 + v3; // 0x4024ce\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4024da\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x4024da\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4025ec;\n        } else {\n            // 0x4025d6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40262b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40253c;\n            } else {\n                goto lab_0x4025ec;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40253c;\n        } else {\n            // 0x402522\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40262b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40253c;\n            } else {\n                goto lab_0x40253c;\n            }\n        }\n    }\n  lab_0x4025ec:\n    // 0x4025ec\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40257c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40225f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40253c:\n    // 0x40253c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40257c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40225f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402660",
            "funcStartAddr": "402660",
            "funcEndAddr": "402668",
            "decompiledFuncCode": "int64_t function_402660(int64_t a1) {\n    // 0x402660\n    g48 = a1;\n    int64_t result; // 0x402660\n    return result;\n}\n"
        },
        {
            "funcName": "function_402670",
            "funcStartAddr": "402670",
            "funcEndAddr": "402678",
            "decompiledFuncCode": "int64_t function_402670(int64_t a1) {\n    // 0x402670\n    g47 = a1;\n    int64_t result; // 0x402670\n    return result;\n}\n"
        },
        {
            "funcName": "function_402680",
            "funcStartAddr": "402680",
            "funcEndAddr": "40271e",
            "decompiledFuncCode": "int64_t function_402680(void) {\n    // 0x402680\n    int32_t * err_num; // 0x402696\n    if ((int32_t)function_4060f0((int64_t)g31) == 0) {\n        goto lab_0x4026ac;\n    } else {\n        // 0x402696\n        err_num = __errno_location();\n        if (g47 == 0) {\n            goto lab_0x4026c3;\n        } else {\n            // 0x4026a7\n            if (*err_num != 32) {\n                goto lab_0x4026c3;\n            } else {\n                goto lab_0x4026ac;\n            }\n        }\n    }\n  lab_0x4026ac:;\n    int64_t result = function_4060f0((int64_t)g34); // 0x4026b3\n    if ((int32_t)result == 0) {\n        // 0x4026bc\n        return result;\n    }\n    // 0x4026fe\n    _exit(g21);\n    // UNREACHABLE\n  lab_0x4026c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4026cf\n    if (g48 == 0) {\n        // 0x402709\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4026e3\n        error(0, *err_num, \"%s: %s\", (char *)function_4044b0((int64_t)g48), v1);\n    }\n    // 0x4026fe\n    _exit(g21);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402720",
            "funcStartAddr": "402720",
            "funcEndAddr": "402725",
            "decompiledFuncCode": "int64_t function_402720(void) {\n    // 0x402720\n    int64_t fd; // 0x402720\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402730",
            "funcStartAddr": "402730",
            "funcEndAddr": "402751",
            "decompiledFuncCode": "int64_t function_402730(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402730\n    if (stream == 0) {\n        // 0x402750\n        int64_t result; // 0x402730\n        return result;\n    }\n    // 0x402735\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402760",
            "funcStartAddr": "402760",
            "funcEndAddr": "4027f3",
            "decompiledFuncCode": "int64_t function_402760(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x402767\n    int64_t result = (int64_t)file; // 0x402767\n    if (file == NULL) {\n        // 0x402781\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x402777\n    if (v1 >= 3) {\n        // 0x402781\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_404680((int64_t)v1, v2); // 0x40279a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x4027d8\n        function_405040(result, v2);\n        // 0x402781\n        return 0;\n    }\n    // 0x40279e\n    if ((int32_t)function_405040(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x4027b0\n        if (v4 != NULL) {\n            // 0x402781\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x4027bd\n    close(fd);\n    // 0x402781\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402800",
            "funcStartAddr": "402800",
            "funcEndAddr": "40285e",
            "decompiledFuncCode": "int64_t function_402800(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x402806\n    if (locale == NULL) {\n        // 0x402833\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x402806\n    bool v2; // 0x402800\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g5; // 0x402800\n    int64_t v5 = v1; // 0x402800\n    int64_t v6 = 2; // 0x402825\n    unsigned char v7 = *(char *)v5; // 0x402825\n    char v8 = *(char *)v4; // 0x402825\n    char v9 = v8; // 0x402825\n    bool v10 = false; // 0x402825\n    while (v7 == v8) {\n        // 0x402818\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x402831\n    int64_t v13 = v1; // 0x402831\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x402833\n        return 0;\n    }\n    int64_t v14 = 6; // 0x402831\n    unsigned char v15 = *(char *)v13; // 0x40284d\n    char v16 = *(char *)v12; // 0x40284d\n    char v17 = v16; // 0x40284d\n    bool v18 = false; // 0x40284d\n    while (v15 == v16) {\n        // 0x402840\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_402860",
            "funcStartAddr": "402860",
            "funcEndAddr": "4028a8",
            "decompiledFuncCode": "int64_t function_402860(uint64_t a1, int16_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x402860\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x402872\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40287b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x4028a4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028b0",
            "funcStartAddr": "4028b0",
            "funcEndAddr": "4028c0",
            "decompiledFuncCode": "int64_t function_4028b0(int64_t a1) {\n    // 0x4028b0\n    int128_t v1; // 0x4028b0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x4028b0\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t v4; // 0x4028b0\n    __asm_movups(*(int128_t *)&v4, v3);\n    int64_t result; // 0x4028b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028c0",
            "funcStartAddr": "4028c0",
            "funcEndAddr": "4029db",
            "decompiledFuncCode": "int64_t function_4028c0(int64_t result, int64_t a2, char a3) {\n    int64_t * v1 = (int64_t *)(result + 16); // 0x4028d8\n    int64_t v2 = *v1; // 0x4028d8\n    int64_t v3 = v2 + result; // 0x4028e8\n    if ((v3 & 16) != 0) {\n        // 0x402998\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x402924\n    int64_t v5 = v3; // 0x4028c0\n    int64_t v6 = v2;\n    int64_t v7 = v2; // 0x402915\n    int64_t v8; // 0x4028c0\n    int64_t v9; // 0x4028c0\n    int64_t v10; // 0x4028c0\n    int64_t v11; // 0x4028c0\n    int64_t v12; // 0x4028c0\n    int64_t v13; // 0x4028c0\n    int64_t v14; // 0x4028c0\n    while (true) {\n      lab_0x402924:\n        // 0x402924\n        v9 = v7;\n        v8 = v6;\n        int64_t v15 = v5;\n        uint64_t v16 = *v4; // 0x402924\n        if (v16 < *(int64_t *)(a2 + 16)) {\n            // 0x402900\n            *v4 = v16 + 1;\n            v14 = v15;\n            v11 = (int64_t)*(char *)v16;\n            goto lab_0x40290b;\n        } else {\n            uint32_t v17 = __uflow((struct _IO_FILE *)a2); // 0x402935\n            int64_t v18 = 0x100000000000000 * v15 >> 56; // 0x40293a\n            v14 = v18;\n            v11 = v17;\n            if (v17 != -1) {\n                goto lab_0x40290b;\n            } else {\n                if (v8 == v9) {\n                    // break -> 0x402998\n                    break;\n                }\n                if ((v15 & 32) != 0) {\n                    // break -> 0x402998\n                    break;\n                }\n                // 0x40294f\n                v10 = v9;\n                if (*(char *)(v9 - 1) == a3) {\n                  lab_0x4029bc:\n                    // 0x4029bc\n                    *(int64_t *)(result + 8) = v10 - v8;\n                    return result;\n                }\n                // 0x40295a\n                v13 = a3;\n                v12 = (int64_t)a3 & 0xffffffff;\n                if (v9 != v18) {\n                    // 0x4029b0\n                    *(char *)v9 = a3;\n                    v10 = v9 + 1;\n                    goto lab_0x4029bc;\n                }\n                goto lab_0x402967;\n            }\n        }\n    }\n    // 0x402998\n    return 0;\n  lab_0x40290b:\n    // 0x40290b\n    v5 = v14;\n    int64_t v19 = v9; // 0x402910\n    int64_t v20 = v11; // 0x402910\n    int64_t v21 = v11; // 0x402910\n    int64_t v22 = v8; // 0x402910\n    v13 = v11;\n    v12 = v11;\n    if (v9 == v14) {\n        goto lab_0x402967;\n    } else {\n        goto lab_0x402915;\n    }\n  lab_0x402967:;\n    int64_t v23 = function_404d90(v8, result); // 0x402974\n    int64_t v24 = v23 + v8; // 0x402984\n    *v1 = v23;\n    v5 = v24;\n    v19 = v24;\n    v20 = v13 % 256;\n    v21 = v12;\n    v22 = v23;\n    goto lab_0x402915;\n  lab_0x402915:\n    // 0x402915\n    v6 = v22;\n    v7 = v19 + 1;\n    *(char *)v19 = (char)v20;\n    v10 = v7;\n    int64_t v25 = v6; // 0x40291e\n    if ((int32_t)v21 == (int32_t)a3) {\n        // 0x4029bc\n        *(int64_t *)(result + 8) = v10 - v25;\n        return result;\n    }\n    goto lab_0x402924;\n}\n"
        },
        {
            "funcName": "function_4029e0",
            "funcStartAddr": "4029e0",
            "funcEndAddr": "4029ea",
            "decompiledFuncCode": "int64_t function_4029e0(void) {\n    // 0x4029e0\n    int64_t v1; // 0x4029e0\n    return function_4028c0(v1, v1, 10);\n}\n"
        },
        {
            "funcName": "function_4029f0",
            "funcStartAddr": "4029f0",
            "funcEndAddr": "4029f9",
            "decompiledFuncCode": "int64_t function_4029f0(int64_t a1) {\n    // 0x4029f0\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a3f",
            "decompiledFuncCode": "int64_t function_402a00(int64_t str, uint64_t a2, int64_t str2, uint64_t a4) {\n    int64_t n = a2 > a4 ? a4 : a2; // 0x402a15\n    int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n); // 0x402a19\n    if (memcmp_rc != 0) {\n        // 0x402a2d\n        return memcmp_rc;\n    }\n    int64_t result = 0xffffffff; // 0x402a25\n    if (a2 >= a4) {\n        // 0x402a27\n        result = a2 > a4;\n    }\n    // 0x402a2d\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402ad9",
            "decompiledFuncCode": "int64_t function_402a40(int64_t str) {\n    // 0x402a40\n    if (str == 0) {\n        // 0x402ab9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g34);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402a4e\n    int64_t result = (int64_t)found_char_pos; // 0x402a4e\n    if (found_char_pos == NULL) {\n        // 0x402aa9\n        g49 = str;\n        g33 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402a58\n    if (v1 - str < 7) {\n        // 0x402aa9\n        g49 = str;\n        g33 = str;\n        return result;\n    }\n    // 0x402a68\n    bool v2; // 0x402a40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402a40\n    int64_t v5 = result - 6; // 0x402a40\n    int64_t v6 = 7; // 0x402a76\n    unsigned char v7 = *(char *)v5; // 0x402a76\n    char v8 = *(char *)v4; // 0x402a76\n    char v9 = v8; // 0x402a76\n    bool v10 = false; // 0x402a76\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402a80\n    int64_t v13 = v1; // 0x402a80\n    int64_t v14 = 3; // 0x402a80\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402aa9\n        g49 = str;\n        g33 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402a92\n    char v16 = *(char *)v12; // 0x402a92\n    char v17 = v16; // 0x402a92\n    bool v18 = false; // 0x402a92\n    while (v15 == v16) {\n        // 0x402a82\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402a9c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402a9e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x402aa9\n    g49 = v20;\n    g33 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ae0",
            "funcStartAddr": "402ae0",
            "funcEndAddr": "402bd2",
            "decompiledFuncCode": "int64_t function_402ae0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402af4\n    int64_t result = (int64_t)v1; // 0x402af4\n    if (result != a1) {\n        // 0x402b01\n        return result;\n    }\n    int64_t v2 = function_406150(); // 0x402b10\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402bc6\n    if (v3 == 85) {\n        // 0x402b20\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402bb8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x402b4e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x402b5b\n        // 0x402b01\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402bb8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x402b9d\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x402baa\n    // 0x402b01\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402be0",
            "funcStartAddr": "402be0",
            "funcEndAddr": "402c37",
            "decompiledFuncCode": "int64_t function_402be0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402be0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402c28\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c37",
            "funcStartAddr": "402c37",
            "funcEndAddr": "403e01",
            "decompiledFuncCode": "int64_t function_402c37(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402c81\n    int64_t v3 = 0; // 0x402c81\n    int64_t v4; // 0x402c37\n    int64_t v5; // 0x402c37\n    int64_t v6; // 0x402c37\n    int64_t v7; // 0x402c37\n    int64_t v8; // 0x402c37\n    int64_t v9; // 0x402c37\n    int64_t v10; // 0x402c37\n    int64_t v11; // 0x402c37\n    int64_t v12; // 0x402c37\n    int64_t v13; // 0x402c37\n    int64_t v14; // 0x402c37\n    int64_t v15; // 0x402c37\n    int64_t v16; // 0x402c37\n    int64_t v17; // 0x402c37\n    int64_t v18; // 0x402c37\n    int64_t result; // 0x402c37\n    int64_t v19; // 0x402c37\n    int32_t wc; // bp+132, 0x402c37\n    int64_t ps; // bp+136, 0x402c37\n    char v20; // 0x4031f0\n    int64_t v21; // 0x4031f0\n    int64_t v22; // 0x403598\n    int64_t v23; // 0x402c37\n    int64_t v24; // 0x4035b7\n    int32_t v25; // 0x402c37\n    while (true) {\n      lab_0x402c88_2:\n        // 0x402c88\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402c37\n        int64_t v27; // 0x402cbc\n        while (true) {\n          lab_0x402c88:\n            // 0x402c88\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402c93\n            if (v15 == -1) {\n                // 0x402c95\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402ca3\n            if (v28) {\n                // break (via goto) -> 0x403408\n                goto lab_0x403408;\n            }\n            // 0x402cac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g61 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40329b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402de1;\n                    }\n                    // 0x4036bd\n                    v26 = v5 + 1;\n                    goto lab_0x402c88;\n                }\n                case 7: {\n                    goto lab_0x402de1;\n                }\n                case 8: {\n                    goto lab_0x402de1;\n                }\n                case 9: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402de1;\n                }\n                case 12: {\n                    goto lab_0x402de1;\n                }\n                case 13: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402dad;\n                }\n                case 36: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402de1;\n                }\n                case 38: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402de1;\n                }\n                case 44: {\n                    goto lab_0x402de1;\n                }\n                case 45: {\n                    goto lab_0x402de1;\n                }\n                case 46: {\n                    goto lab_0x402de1;\n                }\n                case 47: {\n                    goto lab_0x402de1;\n                }\n                case 48: {\n                    goto lab_0x402de1;\n                }\n                case 49: {\n                    goto lab_0x402de1;\n                }\n                case 50: {\n                    goto lab_0x402de1;\n                }\n                case 51: {\n                    goto lab_0x402de1;\n                }\n                case 52: {\n                    goto lab_0x402de1;\n                }\n                case 53: {\n                    goto lab_0x402de1;\n                }\n                case 54: {\n                    goto lab_0x402de1;\n                }\n                case 55: {\n                    goto lab_0x402de1;\n                }\n                case 56: {\n                    goto lab_0x402de1;\n                }\n                case 57: {\n                    goto lab_0x402de1;\n                }\n                case 58: {\n                    goto lab_0x402de1;\n                }\n                case 59: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402de1;\n                }\n                case 66: {\n                    goto lab_0x402de1;\n                }\n                case 67: {\n                    goto lab_0x402de1;\n                }\n                case 68: {\n                    goto lab_0x402de1;\n                }\n                case 69: {\n                    goto lab_0x402de1;\n                }\n                case 70: {\n                    goto lab_0x402de1;\n                }\n                case 71: {\n                    goto lab_0x402de1;\n                }\n                case 72: {\n                    goto lab_0x402de1;\n                }\n                case 73: {\n                    goto lab_0x402de1;\n                }\n                case 74: {\n                    goto lab_0x402de1;\n                }\n                case 75: {\n                    goto lab_0x402de1;\n                }\n                case 76: {\n                    goto lab_0x402de1;\n                }\n                case 77: {\n                    goto lab_0x402de1;\n                }\n                case 78: {\n                    goto lab_0x402de1;\n                }\n                case 79: {\n                    goto lab_0x402de1;\n                }\n                case 80: {\n                    goto lab_0x402de1;\n                }\n                case 81: {\n                    goto lab_0x402de1;\n                }\n                case 82: {\n                    goto lab_0x402de1;\n                }\n                case 83: {\n                    goto lab_0x402de1;\n                }\n                case 84: {\n                    goto lab_0x402de1;\n                }\n                case 85: {\n                    goto lab_0x402de1;\n                }\n                case 86: {\n                    goto lab_0x402de1;\n                }\n                case 87: {\n                    goto lab_0x402de1;\n                }\n                case 88: {\n                    goto lab_0x402de1;\n                }\n                case 89: {\n                    goto lab_0x402de1;\n                }\n                case 90: {\n                    goto lab_0x402de1;\n                }\n                case 91: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402de1;\n                }\n                case 94: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402de1;\n                }\n                case 96: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402de1;\n                }\n                case 98: {\n                    goto lab_0x402de1;\n                }\n                case 99: {\n                    goto lab_0x402de1;\n                }\n                case 100: {\n                    goto lab_0x402de1;\n                }\n                case 101: {\n                    goto lab_0x402de1;\n                }\n                case 102: {\n                    goto lab_0x402de1;\n                }\n                case 103: {\n                    goto lab_0x402de1;\n                }\n                case 104: {\n                    goto lab_0x402de1;\n                }\n                case 105: {\n                    goto lab_0x402de1;\n                }\n                case 106: {\n                    goto lab_0x402de1;\n                }\n                case 107: {\n                    goto lab_0x402de1;\n                }\n                case 108: {\n                    goto lab_0x402de1;\n                }\n                case 109: {\n                    goto lab_0x402de1;\n                }\n                case 110: {\n                    goto lab_0x402de1;\n                }\n                case 111: {\n                    goto lab_0x402de1;\n                }\n                case 112: {\n                    goto lab_0x402de1;\n                }\n                case 113: {\n                    goto lab_0x402de1;\n                }\n                case 114: {\n                    goto lab_0x402de1;\n                }\n                case 115: {\n                    goto lab_0x402de1;\n                }\n                case 116: {\n                    goto lab_0x402de1;\n                }\n                case 117: {\n                    goto lab_0x402de1;\n                }\n                case 118: {\n                    goto lab_0x402de1;\n                }\n                case 119: {\n                    goto lab_0x402de1;\n                }\n                case 120: {\n                    goto lab_0x402de1;\n                }\n                case 121: {\n                    goto lab_0x402de1;\n                }\n                case 122: {\n                    goto lab_0x402de1;\n                }\n                case 123: {\n                    goto lab_0x402d85;\n                }\n                case 124: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402d85;\n                }\n                case 126: {\n                    goto lab_0x402dad;\n                }\n                default: {\n                    goto lab_0x403185;\n                }\n            }\n        }\n      lab_0x403185:\n        if (v23 != 1) {\n            // 0x4034f0\n            ps = 0;\n            int64_t len = v15; // 0x403500\n            if (v15 == -1) {\n                // 0x403502\n                len = strlen((char *)str);\n            }\n            // 0x40352e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40358f:\n                // 0x40358f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403594\n                int64_t v30 = v29 + str;\n                v24 = function_406070(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403b0a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403b0a_2;\n                    }\n                    case -2: {\n                        // 0x403bed\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403c27\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403c2a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403c37\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403c30\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403b0a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403b0a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403560;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40360c\n                        char v34 = *(char *)v33; // 0x40361d\n                        unsigned char v35; // 0x402c37\n                        if (v34 < 125) {\n                            // 0x403628\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40363f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403610\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40361d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403628\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40363f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403610\n                            v33++;\n                        }\n                        goto lab_0x403560;\n                    }\n                }\n            }\n            goto lab_0x403b0a_2;\n        } else {\n            // 0x4031d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402de1;\n        }\n    }\n  lab_0x403408:\n    // 0x403408\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403d0a\n        if (v8 > result) {\n            // 0x403d13\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403037\n        return result;\n    }\n    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402de1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402df0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402ffa_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ef1\n    char v40 = v20; // 0x402ef1\n    int64_t v41 = v38; // 0x402ef1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ef1\n    int64_t v43 = v36; // 0x402ef1\n    goto lab_0x402e6d;\n  lab_0x402ffa_2:\n    // 0x403037\n    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403b0a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402de1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4036de\n        int64_t v50 = v5 + 1; // 0x4037c1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4037c8\n        char v52 = v20; // 0x4037c8\n        int64_t v53 = result; // 0x4037c8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403791\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403795\n            int64_t v56 = v54 + 1; // 0x40379a\n            int64_t v57 = v51 + 1; // 0x4037c1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40378c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403791\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403795\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402e6d;\n    }\n  lab_0x403560:\n    // 0x403560\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40357f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403582\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403b0a\n        goto lab_0x403b0a_2;\n    }\n    goto lab_0x40358f;\n  lab_0x402dad:\n    // 0x402dad\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402ffa_2;\n    }\n    goto lab_0x402de1;\n  lab_0x402d85:;\n    bool v60 = v15 == 1; // 0x402d90\n    if (v15 == -1) {\n        // 0x402d92\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402d9e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402de1;\n    } else {\n        goto lab_0x402dad;\n    }\n  lab_0x402e6d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402e72\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402e76\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402c88_2;\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403fae",
            "decompiledFuncCode": "int64_t function_403e10(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403e12\n    int32_t * v3 = __errno_location(); // 0x403e2c\n    int64_t v4 = (int64_t)g23; // 0x403e31\n    int32_t v5 = *v3; // 0x403e3b\n    int64_t v6 = v4; // 0x403e51\n    if (v2 >= (int64_t)*(int32_t *)&g26) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403fa9\n            function_404e80(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403e60\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403e67\n        int64_t v9; // 0x403e10\n        if (g23 == &g24) {\n            int64_t v10 = function_404c90(0, v8); // 0x403f8a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g24); // 0x403f8f\n            *(int64_t *)&g23 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404c90(v4, v8); // 0x403e7b\n            *(int64_t *)&g23 = v12;\n            v9 = v12;\n        }\n        // 0x403e8a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g26; // 0x403e8a\n        int32_t v14 = v7; // 0x403e91\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g26 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403ec1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403ecb\n    int64_t * v17 = (int64_t *)v15; // 0x403ece\n    uint64_t v18 = *v17; // 0x403ece\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403ed1\n    int64_t result = *v19; // 0x403ed1\n    int64_t v20; // 0x403e10\n    uint64_t v21 = function_402be0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ef4\n    if (v18 > v21) {\n        // 0x403f6b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403f07\n    *v17 = v22;\n    if (result != (int64_t)&g50) {\n        // 0x403f17\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404c30(v22); // 0x403f31\n    *v19 = result2;\n    int64_t v23; // 0x403e10\n    function_402be0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403f6b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403fb0",
            "funcStartAddr": "403fb0",
            "funcEndAddr": "403fe4",
            "decompiledFuncCode": "int64_t function_403fb0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403fb7\n    int64_t result = function_404e30(a1 == 0 ? (int64_t)&g51 : a1, 56); // 0x403fd6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ff0",
            "funcStartAddr": "403ff0",
            "funcEndAddr": "403fff",
            "decompiledFuncCode": "int64_t function_403ff0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g51 : a1); // 0x403ffc\n    return result;\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "40400f",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 : a1; // 0x404008\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g51;\n}\n"
        },
        {
            "funcName": "function_404010",
            "funcStartAddr": "404010",
            "funcEndAddr": "404043",
            "decompiledFuncCode": "int64_t function_404010(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 + 8 : a1 + 8; // 0x404029\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40402e\n    uint32_t v3 = *v2; // 0x40402e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404032\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404063",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g51 + 4 : a1 + 4); // 0x40405c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "40409b",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 : a1; // 0x404078\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404095\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40408c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g51;\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "404112",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g51 : a5; // 0x4040c2\n    int32_t * v2 = __errno_location(); // 0x4040cb\n    uint32_t v3 = *(int32_t *)v1; // 0x4040eb\n    int64_t result = function_402be0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4040fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404201",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g51 : a4; // 0x404142\n    int32_t * v2 = __errno_location(); // 0x404148\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404167\n    int32_t * v4 = (int32_t *)v1; // 0x40416a\n    int64_t v5 = function_402be0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404185\n    int64_t v6 = v5 + 1; // 0x40418a\n    int64_t result = function_404c30(v6); // 0x40419f\n    function_402be0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4041e4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4041ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "40421a",
            "decompiledFuncCode": "int64_t function_404210(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404210\n    return function_404120(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404220",
            "funcStartAddr": "404220",
            "funcEndAddr": "4042b5",
            "decompiledFuncCode": "int64_t function_404220(void) {\n    uint32_t v1 = *(int32_t *)&g26; // 0x404220\n    int64_t v2 = v1; // 0x404220\n    int64_t v3 = v2; // 0x404234\n    if (v1 >= 2) {\n        int64_t v4 = &g26;\n        int64_t v5 = v4 + 16; // 0x404253\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g62;\n        while (v5 != (int64_t)g23 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404250\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g62;\n        }\n    }\n    int64_t v6 = v3; // 0x40426d\n    if (g24 != 0x60a300) {\n        // 0x40426f\n        free((int64_t *)g24);\n        g24 = 256;\n        *(int64_t *)&g25 = (int64_t)&g50;\n        v6 = &g62;\n    }\n    int64_t result = v6; // 0x404291\n    if (g23 != &g24) {\n        // 0x404293\n        free(g23);\n        *(int64_t *)&g23 = (int64_t)&g24;\n        result = &g62;\n    }\n    // 0x4042a6\n    *(int32_t *)&g26 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042d1",
            "decompiledFuncCode": "int64_t function_4042c0(void) {\n    // 0x4042c0\n    int64_t v1; // 0x4042c0\n    return function_403e10(v1, v1, -1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "4042ea",
            "decompiledFuncCode": "int64_t function_4042e0(void) {\n    // 0x4042e0\n    int64_t v1; // 0x4042e0\n    return function_403e10(v1, v1, v1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "404306",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1) {\n    // 0x4042f0\n    return function_403e10(0, a1, -1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "404322",
            "decompiledFuncCode": "int64_t function_404310(int64_t a1, int64_t a2) {\n    // 0x404310\n    return function_403e10(0, a1, a2, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "404398",
            "decompiledFuncCode": "int64_t function_404330(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404340\n    return function_403e10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "404404",
            "decompiledFuncCode": "int64_t function_4043a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4043b0\n    return function_403e10((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "40441c",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2) {\n    // 0x404410\n    return function_404330(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404420",
            "funcStartAddr": "404420",
            "funcEndAddr": "40442f",
            "decompiledFuncCode": "int64_t function_404420(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404420\n    return function_4043a0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "4044a0",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g51); // 0x40443d\n    int128_t v2 = __asm_movdqa(g52); // 0x404445\n    int128_t v3 = __asm_movdqa(g53); // 0x40444d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404462\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404478\n    uint32_t v6 = *v5; // 0x404478\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40447d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403e10(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "4044ad",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1, int64_t a2) {\n    // 0x4044a0\n    return function_404430(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4044b0",
            "funcStartAddr": "4044b0",
            "funcEndAddr": "4044c1",
            "decompiledFuncCode": "int64_t function_4044b0(int64_t a1) {\n    // 0x4044b0\n    return function_404430(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "4044da",
            "decompiledFuncCode": "int64_t function_4044d0(void) {\n    // 0x4044d0\n    int64_t v1; // 0x4044d0\n    return function_404430(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "40454e",
            "decompiledFuncCode": "int64_t function_4044e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4044fa\n    return function_403e10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "4045bc",
            "decompiledFuncCode": "int64_t function_404550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g51); // 0x404557\n    int128_t v2 = __asm_movdqa(g52); // 0x40455f\n    int128_t v3 = __asm_movdqa(g53); // 0x404567\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404589\n    if (a2 == 0 || a3 == 0) {\n        // 0x4045b7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40459a\n    return function_403e10(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4045c0",
            "funcStartAddr": "4045c0",
            "funcEndAddr": "4045c9",
            "decompiledFuncCode": "int64_t function_4045c0(void) {\n    // 0x4045c0\n    int64_t v1; // 0x4045c0\n    return function_404550(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045e7",
            "decompiledFuncCode": "int64_t function_4045d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4045d0\n    return function_404550(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "404603",
            "decompiledFuncCode": "int64_t function_4045f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4045f0\n    return function_404550(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "40461a",
            "decompiledFuncCode": "int64_t function_404610(void) {\n    // 0x404610\n    int64_t v1; // 0x404610\n    return function_403e10(v1, v1, v1, &g22);\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404632",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1, int64_t a2) {\n    // 0x404620\n    return function_403e10(0, a1, a2, &g22);\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404651",
            "decompiledFuncCode": "int64_t function_404640(void) {\n    // 0x404640\n    int64_t v1; // 0x404640\n    return function_403e10(v1, v1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "404676",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1) {\n    // 0x404660\n    return function_403e10(0, a1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "40468e",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1, int64_t a2) {\n    // 0x404680\n    int64_t v1; // 0x404680\n    return function_4050c0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_404690",
            "funcStartAddr": "404690",
            "funcEndAddr": "404a6d",
            "decompiledFuncCode": "int64_t function_404690(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404728\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4046ac\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4046c6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40470b\n    if (a6 < 10) {\n        // 0x40471a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404812\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404a90",
            "decompiledFuncCode": "int64_t function_404a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404a70\n    if (a5 == 0) {\n        // 0x404a8b\n        return function_404690(a1, a2, a3, a4, a5, 0, (int64_t)&g62);\n    }\n    int64_t v1 = 0; // 0x404a77\n    v1++;\n    int64_t v2 = v1; // 0x404a89\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404a80\n        v1++;\n        v2 = v1;\n    }\n    // 0x404a8b\n    return function_404690(a1, a2, a3, a4, a5, v2, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404af0",
            "decompiledFuncCode": "int64_t function_404a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404a90\n    int64_t v3 = &v2; // 0x404a90\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404ac3\n    int64_t v6; // 0x404aad\n    int64_t * v7; // 0x404acb\n    int64_t v8; // 0x404acb\n    int64_t v9; // 0x404ad7\n    if (v5 < 48) {\n        // 0x404aa0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404ae3\n            break;\n        }\n    } else {\n        // 0x404acb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404ae3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404ac1\n    while (v4 != 9) {\n        // 0x404ab9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404aa0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404ae3\n                break;\n            }\n        } else {\n            // 0x404acb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404ae3\n                break;\n            }\n        }\n        // 0x404ab9\n        v10 = 10;\n    }\n    // 0x404ae3\n    return function_404690(a1, a2, a3, a4, v3, v10, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404bac",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404af0\n    int64_t v1; // bp-168, 0x404af0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404af0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404af0\n    int64_t v8; // 0x404af0\n    int64_t v9; // bp-56, 0x404af0\n    int64_t v10; // 0x404b55\n    int64_t v11; // 0x404b79\n    if ((int32_t)v6 < 48) {\n        // 0x404b40\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404b90\n            break;\n        }\n    } else {\n        // 0x404b72\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404b90\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404b6a\n    int64_t v13 = 10; // 0x404b6a\n    while (v5 != 9) {\n        // 0x404b6c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404b40\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404b90\n                break;\n            }\n        } else {\n            // 0x404b72\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404b90\n                break;\n            }\n        }\n        // 0x404b62\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404b90\n    int64_t v14; // bp-136, 0x404af0\n    int64_t result = function_404690(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g62); // 0x404b9f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404c24",
            "decompiledFuncCode": "int64_t function_404bb0(int64_t a1) {\n    // 0x404bb0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404c13\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404c4a",
            "decompiledFuncCode": "int64_t function_404c30(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404c34\n    if (size != 0 != (mem == NULL)) {\n        // 0x404c43\n        return (int64_t)mem;\n    }\n    // 0x404c45\n    function_404e80(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c50",
            "funcStartAddr": "404c50",
            "funcEndAddr": "404c71",
            "decompiledFuncCode": "int64_t function_404c50(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404c53\n    int64_t v2 = v1; // 0x404c53\n    if (v2 < 0) {\n        // 0x404c6b\n        function_404e80(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404c69\n        return function_404c30(v2);\n    }\n    // 0x404c6b\n    function_404e80(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404c82",
            "decompiledFuncCode": "int64_t function_404c80(void) {\n    // 0x404c80\n    int64_t v1; // 0x404c80\n    return function_404c30(v1);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404cc6",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404cb8\n        free(v1);\n        return (int32_t)&g62 ^ (int32_t)&g62;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404ca1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404cb0\n        return (int64_t)mem;\n    }\n    // 0x404cc1\n    function_404e80(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404cf1",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404cd3\n    int64_t v2 = v1; // 0x404cd3\n    if (v2 < 0) {\n        // 0x404ceb\n        function_404e80(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404ce9\n        return function_404c90(a1, v2);\n    }\n    // 0x404ceb\n    function_404e80(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d86",
            "decompiledFuncCode": "int64_t function_404d00(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404d5b\n            function_404e80(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404c90(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404d43\n    if (a2 == 0) {\n        // 0x404d68\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404d48\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404d5b\n        function_404e80(a1);\n        // UNREACHABLE\n    }\n    // 0x404d2a\n    *(int64_t *)a2 = v2;\n    return function_404c90(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404de0",
            "decompiledFuncCode": "int64_t function_404d90(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404d90\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404dda\n            function_404e80(a1);\n            // UNREACHABLE\n        }\n        // 0x404db2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404c90(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404dc5\n        *(int64_t *)a2 = 128;\n        return function_404c90(0, 128);\n    }\n    // 0x404dd8\n    if (a2 < 0) {\n        // 0x404dda\n        function_404e80(a1);\n        // UNREACHABLE\n    }\n    // 0x404db2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404c90(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "404df7",
            "decompiledFuncCode": "int64_t function_404de0(int64_t a1, int64_t a2) {\n    // 0x404de0\n    return (int64_t)memset((int64_t *)function_404c30(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e2e",
            "decompiledFuncCode": "int64_t function_404e00(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404e07\n    if ((int64_t)v1 < 0) {\n        // 0x404e29\n        function_404e80(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404e29\n        function_404e80(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404e1a\n    if (mem != NULL) {\n        // 0x404e24\n        return (int64_t)mem;\n    }\n    // 0x404e29\n    function_404e80(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e30",
            "funcStartAddr": "404e30",
            "funcEndAddr": "404e58",
            "decompiledFuncCode": "int64_t function_404e30(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404c30(a2); // 0x404e3f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404e73",
            "decompiledFuncCode": "int64_t function_404e60(int64_t str) {\n    // 0x404e60\n    return function_404e30(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404e80",
            "funcStartAddr": "404e80",
            "funcEndAddr": "404eb1",
            "decompiledFuncCode": "int64_t function_404e80(int64_t a1) {\n    // 0x404e80\n    error(g21, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ec0",
            "funcStartAddr": "404ec0",
            "funcEndAddr": "404f74",
            "decompiledFuncCode": "int64_t function_404ec0(int64_t err_num, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x404ec0\n    error(0, (int32_t)err_num, dcgettext(NULL, \"string comparison failed\", 5));\n    error(0, (int32_t)\"Set LC_ALL='C' to work around the problem.\" ^ (int32_t)\"Set LC_ALL='C' to work around the problem.\", dcgettext(NULL, \"Set LC_ALL='C' to work around the problem.\", 5));\n    function_4043a0(1, 8, a4, a5);\n    function_4043a0(0, 8, a2, a3);\n    error(g21, (int32_t)\"The strings compared were %s and %s.\" ^ (int32_t)\"The strings compared were %s and %s.\", dcgettext(NULL, \"The strings compared were %s and %s.\", 5));\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404fd5",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_406780(a1, a2, a3, a4); // 0x404f94\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "405037",
            "decompiledFuncCode": "int64_t function_404fe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_406830(a1, a2, a3, a4); // 0x404ff4\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "4050bb",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405047\n    if (fileno(stream) < 0) {\n        // 0x4050a7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40505a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40508b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4050a7\n            return fclose(stream);\n        }\n    }\n    // 0x40505c\n    if ((int32_t)function_405200(a1, v1) == 0) {\n        // 0x4050a7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405068\n    int32_t v3 = *v2; // 0x405070\n    int64_t result = fclose(stream); // 0x40507e\n    if (v3 != 0) {\n        // 0x4050b0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405080\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4051f5",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x4051a0\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x4050fc\n    int64_t v2; // 0x4050c0\n    if (g54 < 0) {\n        int64_t v3 = function_4050c0(fd, 0, v1, a4); // 0x405144\n        int64_t v4 = v3 & 0xffffffff; // 0x405149\n        if ((int32_t)v3 < 0) {\n            // 0x405130\n            return v4 & 0xffffffff;\n        }\n        // 0x40514f\n        v2 = v4;\n        if (g54 != -1) {\n            // 0x405130\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x405117\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x405126\n            g54 = 1;\n            // 0x405130\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_4050c0(fd & 0xffffffff, 0, v1, a4); // 0x4051d7\n        int64_t v7 = v6 & 0xffffffff; // 0x4051dc\n        if ((int32_t)v6 < 0) {\n            // 0x405130\n            return v7 & 0xffffffff;\n        }\n        // 0x4051e6\n        g54 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40515f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40516a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x405130\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x405182\n    close(fd2);\n    // 0x405130\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405200",
            "funcStartAddr": "405200",
            "funcEndAddr": "405240",
            "decompiledFuncCode": "int64_t function_405200(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40521a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40521a\n        return fflush(stream);\n    }\n    // 0x405228\n    function_405240(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405297",
            "decompiledFuncCode": "int64_t function_405240(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405240\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40524a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40527b\n    int64_t result = -1; // 0x405284\n    if (v1 != -1) {\n        // 0x405286\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405292\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052a0",
            "funcStartAddr": "4052a0",
            "funcEndAddr": "40537f",
            "decompiledFuncCode": "int64_t function_4052a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4052ac\n    uint32_t v2 = *v1; // 0x4052ac\n    int64_t v3 = a2 & 0xffffffff; // 0x4052b1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4052b4\n    uint64_t v5 = (int64_t)*v4; // 0x4052b4\n    int64_t v6; // 0x405322\n    if (v3 <= v5) {\n      lab_0x40531c_2:\n        // 0x40531c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4052a2\n    int64_t v8 = v2; // 0x4052a0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40531c\n        goto lab_0x40531c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4052d8\n    int64_t v17; // 0x4052e6\n    int64_t * v18; // 0x405300\n    int64_t * v19; // 0x405303\n    int64_t v20; // 0x40530e\n    int64_t v21; // 0x4052e6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4052e3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405300\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405317\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40531c\n            goto lab_0x40531c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40531c\n            goto lab_0x40531c_2;\n        }\n        // 0x4052d2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40535b\n    int64_t * v23 = (int64_t *)v22; // 0x405360\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405363\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405360\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405377\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4052cd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40531c\n            goto lab_0x40531c_2;\n        }\n        // 0x4052d2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4052e3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405300\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405317\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40531c\n                goto lab_0x40531c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40531c\n                goto lab_0x40531c_2;\n            }\n            // 0x4052d2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405340\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405360\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405377\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40531c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "40599c",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40539f\n    int64_t v2 = *v1; // 0x40539f\n    char * str2 = (char *)v2; // 0x4053ac\n    char c = *str2; // 0x4053ac\n    int64_t v3 = v2; // 0x4053d8\n    int64_t v4 = 0; // 0x405380\n    int32_t v5; // 0x405380\n    int64_t v6; // 0x405380\n    int64_t v7; // 0x405380\n    int64_t v8; // 0x405380\n    int64_t v9; // 0x405380\n    int64_t v10; // 0x405380\n    int64_t v11; // 0x405380\n    int64_t v12; // 0x405380\n    int64_t v13; // 0x405380\n    int64_t str3; // 0x405380\n    int64_t v14; // 0x405380\n    int64_t v15; // 0x405380\n    int64_t v16; // 0x405380\n    int64_t v17; // 0x405380\n    int32_t v18; // 0x405380\n    int32_t v19; // 0x405380\n    int32_t v20; // 0x405380\n    int32_t v21; // 0x405380\n    int32_t v22; // 0x405380\n    int32_t v23; // 0x405380\n    int32_t v24; // 0x405380\n    int32_t v25; // 0x405380\n    int32_t v26; // 0x405380\n    int32_t v27; // 0x405380\n    int32_t v28; // 0x405380\n    int32_t v29; // 0x405380\n    int64_t nmemb; // 0x405380\n    int64_t v30; // 0x405380\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4053dc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4053d8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4053e8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4053ee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4053b8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40541c\n                int64_t v34; // 0x405380\n                int64_t v35; // 0x405380\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405425\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4055a0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405436\n                int64_t v37 = *(int64_t *)v36; // 0x40543a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405410\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405425\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4055a0;\n                        }\n                    }\n                    // 0x405436\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405486:\n                    // 0x405486\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4054e0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405650\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4054e0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405600\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4054aa;\n                                } else {\n                                    // 0x40560c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4054aa;\n                                    } else {\n                                        // 0x40561a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4054aa;\n                                        } else {\n                                            goto lab_0x4054e0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4054aa;\n                            }\n                        }\n                    }\n                }\n              lab_0x4054f1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4056c6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405872\n                            flockfile(g34);\n                            int64_t v41 = *v1; // 0x405892\n                            __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4058df\n                            int64_t v43 = (int64_t)g34;\n                            int64_t v44 = v43; // 0x4058f9\n                            int64_t v45; // 0x4058fb\n                            if (*(char *)v42 != 0) {\n                                // 0x4058fb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g34;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4058f3\n                            while (v17 + nmemb != v42) {\n                                // 0x4058f5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4058fb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g34;\n                                }\n                                // 0x4058e8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405920\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g34);\n                            v40 = *v1;\n                        } else {\n                            // 0x4056d4\n                            __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40582f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405729\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405740\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4055ee\n                    return 63;\n                }\n                // 0x405510\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405594\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4055a0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4055b0\n                    uint32_t v50 = *v49; // 0x4055b0\n                    int64_t v51 = v50; // 0x4055b0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4055ba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4055c3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4057ef\n                                __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40579a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4055ee\n                            return 63;\n                        }\n                        // 0x405638\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40594f\n                                    __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40584d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405860\n                                // 0x4055ee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40575e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405772\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4055db\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4055de\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4055e2\n                    int64_t result = v59; // 0x4055e8\n                    if (v58 != 0) {\n                        // 0x4055ea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4055ee\n                    return result;\n                }\n            } else {\n                // 0x4053ee\n                v5 = v32;\n            }\n            // break -> 0x405515\n            break;\n        }\n    }\n    // 0x405515\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40552d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405537\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4055ee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405679\n        __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405566\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405576\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4054e0:\n    // 0x4054e0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4054e0\n    int64_t v63 = *(int64_t *)v62; // 0x4054e4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4054f1\n        goto lab_0x4054f1;\n    }\n    goto lab_0x405486;\n  lab_0x4054aa:\n    // 0x4054aa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405380\n    int32_t v65; // 0x405380\n    int32_t v66; // 0x405380\n    if (v27 != 0) {\n        goto lab_0x4054e0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405660\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4054e0;\n            } else {\n                goto lab_0x4054d1;\n            }\n        } else {\n            // 0x4054c5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4057bc\n                int64_t v67 = (int64_t)mem; // 0x4057bc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4054e0;\n                } else {\n                    // 0x4057cf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4054d1;\n                }\n            } else {\n                goto lab_0x4054d1;\n            }\n        }\n    }\n  lab_0x4054d1:\n    // 0x4054d1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4054e0;\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405f66",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4059c1\n    if (v3 < 1) {\n        // 0x405b7e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4059bd\n    int32_t v5 = *(int32_t *)a7; // 0x4059c9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4059cb\n    int64_t v7 = v2; // 0x4059d0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4059d3\n    *v8 = 0;\n    int64_t v9; // 0x4059a0\n    int64_t v10; // 0x4059a0\n    int64_t v11; // 0x4059a0\n    int64_t v12; // 0x4059a0\n    int64_t str; // 0x4059a0\n    int64_t v13; // 0x4059a0\n    int64_t v14; // 0x4059a0\n    int64_t v15; // 0x4059a0\n    int64_t v16; // 0x4059a0\n    int64_t v17; // 0x4059a0\n    int32_t v18; // 0x4059a0\n    char v19; // 0x4059a0\n    if (v5 == 0) {\n        // 0x405bb8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4059ea;\n    } else {\n        // 0x4059e3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405a30\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405a33\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405af8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405a46\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405a56\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405b0c;\n                } else {\n                    goto lab_0x405a68;\n                }\n            }\n        } else {\n            goto lab_0x4059ea;\n        }\n    }\n  lab_0x4059ea:\n    // 0x4059ea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4059f0\n    *v24 = 0;\n    int64_t v25; // 0x4059a0\n    int64_t v26; // 0x4059a0\n    int64_t v27; // 0x4059a0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405ae0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405aed;\n        }\n        case 43: {\n            // 0x405df0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405aed;\n        }\n        default: {\n            // 0x405a0c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405d6f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405e88\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405aed;\n                } else {\n                    // 0x405d7d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405a1a;\n                }\n            } else {\n                goto lab_0x405a1a;\n            }\n        }\n    }\n  lab_0x405af8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405aff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405a68;\n    } else {\n        goto lab_0x405b0c;\n    }\n  lab_0x405a1a:\n    // 0x405a1a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405aed;\n  lab_0x405aed:\n    // 0x405aed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405af8;\n  lab_0x405a68:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405a68\n    int64_t v31 = v30; // 0x405a68\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405a6a\n    if ((int64_t)*v32 > v31) {\n        // 0x405a6f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405a72\n    if (*v33 > v30) {\n        // 0x405a77\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405a7a\n    int64_t v35 = v31; // 0x405a7e\n    int64_t v36 = v15; // 0x405a7e\n    int64_t v37; // 0x4059a0\n    int64_t v38; // 0x4059a0\n    int64_t v39; // 0x4059a0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405be8\n        int64_t v41 = v40; // 0x405be8\n        v2 = v41;\n        int64_t v42; // 0x4059a0\n        if (*v33 == v40) {\n            // 0x405dd0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405dd8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405bf4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405bf8\n                function_4052a0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405c08\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405c11\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405c1a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405c31\n            int64_t v47 = v45 & 0xffffffff; // 0x405c35\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405c3e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405c44\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405c46;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405c20\n            int64_t v49 = v48 & 0xffffffff; // 0x405c20\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405c31\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405c3e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405c44\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405c46;\n                    }\n                }\n                // 0x405c20\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405de8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405c46;\n    } else {\n        goto lab_0x405a84;\n    }\n  lab_0x405b0c:\n    // 0x405b0c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405b0f\n    int64_t v51 = v12; // 0x405b0f\n    int64_t v52 = v14; // 0x405b0f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405a68;\n    } else {\n        goto lab_0x405b15;\n    }\n  lab_0x405a84:;\n    int32_t v53 = v35; // 0x405a84\n    int64_t v54; // 0x4059a0\n    int64_t v55; // 0x4059a0\n    int64_t v56; // 0x4059a0\n    int64_t v57; // 0x4059a0\n    int64_t v58; // 0x4059a0\n    int64_t v59; // 0x4059a0\n    char * v60; // 0x4059a0\n    int64_t v61; // 0x4059a0\n    int64_t v62; // 0x405a99\n    int64_t v63; // 0x4059a0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405bd3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405bd6;\n    } else {\n        // 0x405a8c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4059a0\n        int64_t v66 = v65 ? -1 : 1; // 0x405aa0\n        int64_t v67 = (int64_t)\"--\"; // 0x4059a0\n        int64_t v68 = v62; // 0x4059a0\n        int64_t v69 = 3; // 0x405aa0\n        unsigned char v70 = *(char *)v68; // 0x405aa0\n        char v71 = *(char *)v67; // 0x405aa0\n        char v72 = v71; // 0x405aa0\n        bool v73 = false; // 0x405aa0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405b90\n            if (*(char *)v62 == 45) {\n                // 0x405c50\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405c50\n                if (c == 0) {\n                    goto lab_0x405b9a;\n                } else {\n                    // 0x405c5d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405ce0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405ec3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405d35;\n                        } else {\n                            // 0x405c6e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405ce0;\n                            } else {\n                                // 0x405c73\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405c94;\n                                } else {\n                                    // 0x405c7a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405ce0;\n                                    } else {\n                                        goto lab_0x405c94;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405b9a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405ab0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405ab3\n            int64_t v77 = v35 + 1; // 0x405ab6\n            int32_t v78 = v77; // 0x405ab9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405e20\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405ac7\n                    function_4052a0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405ad5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405bd6;\n        }\n    }\n  lab_0x405b15:;\n    // 0x405b15\n    int64_t v79; // bp-104, 0x4059a0\n    int64_t v80 = &v79; // 0x4059aa\n    int64_t v81 = v50 + 1; // 0x405b15\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405b1c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405b21\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405b25\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405b29\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405b31\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405b36\n    int32_t c2 = v84; // 0x405b36\n    char * found_char_pos = strchr(str2, c2); // 0x405b36\n    int64_t v87 = *v82; // 0x405b3b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405b45\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405b50\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405e40\n            __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405e0d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405b7e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405b36\n    char v91 = *(char *)(v90 + 1); // 0x405b6b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405b25\n        if (v91 != 58) {\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405d94\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405e98\n                *v8 = 0;\n            } else {\n                // 0x405e7c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405d9e\n        if (v93 != 0) {\n            // 0x405e30\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405db1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405dbe\n            *v83 = 0;\n            // 0x405b7e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405efa\n            __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405eaa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405eb1\n        // 0x405dbe\n        *v83 = 0;\n        // 0x405b7e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405d09\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405d0b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405f30\n                __fprintf_chk(g34, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405ee1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405ee8\n            // 0x405b7e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405d16\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405d1a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405d35;\n  lab_0x405c46:\n    // 0x405c46\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405a84;\n  lab_0x405d35:;\n    int64_t v99 = function_405380(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405d53\n    // 0x405b7e\n    return v99 & 0xffffffff;\n  lab_0x405bd6:;\n    int32_t v100 = v55; // 0x405bd6\n    if (v100 != (int32_t)v59) {\n        // 0x405bda\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405b7e\n    return 0xffffffff;\n  lab_0x405b9a:\n    // 0x405b9a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405ba1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405b7e\n    return v99 & 0xffffffff;\n  lab_0x405ce0:\n    // 0x405ce0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405b15;\n  lab_0x405c94:\n    // 0x405c94\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405380(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g12); // 0x405cba\n    if ((int32_t)v101 != -1) {\n        // 0x405b7e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405ccf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405ce0;\n}\n"
        },
        {
            "funcName": "function_405f70",
            "funcStartAddr": "405f70",
            "funcEndAddr": "405fc6",
            "decompiledFuncCode": "int64_t function_405f70(int64_t a1) {\n    // 0x405f70\n    *(int32_t *)&g55 = g29;\n    *(int32_t *)&g56 = g28;\n    int64_t v1; // 0x405f70\n    int64_t result = function_4059a0(v1, v1, v1, v1, v1, v1, &g55, a1 & 0xffffffff); // 0x405f96\n    g29 = *(int32_t *)&g55;\n    g60 = (char *)g58;\n    *(int32_t *)&g27 = g57;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fe8",
            "decompiledFuncCode": "int64_t function_405fd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405fd0\n    return function_405f70(1);\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "406003",
            "decompiledFuncCode": "int64_t function_405ff0(int64_t a1, int64_t a2, char * a3, char (**a4)[12], int32_t a5, int64_t a6) {\n    // 0x405ff0\n    return function_405f70(0);\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "406025",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406010\n    return function_4059a0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406046",
            "decompiledFuncCode": "int64_t function_406030(void) {\n    // 0x406030\n    return function_405f70(0);\n}\n"
        },
        {
            "funcName": "function_406050",
            "funcStartAddr": "406050",
            "funcEndAddr": "406068",
            "decompiledFuncCode": "int64_t function_406050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406050\n    return function_4059a0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "4060ea",
            "decompiledFuncCode": "int64_t function_406070(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40607b\n    int64_t v2 = (int64_t)&g3; // 0x40607b\n    int32_t * pwc; // 0x406070\n    int64_t v3; // 0x406070\n    int64_t n; // 0x406070\n    if (a2 == 0) {\n        goto lab_0x4060c2;\n    } else {\n        // 0x40607d\n        if (a3 == 0) {\n            // 0x4060a8\n            return -2;\n        }\n        // 0x406089\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4060c2;\n        } else {\n            goto lab_0x406094;\n        }\n    }\n  lab_0x4060c2:\n    // 0x4060c2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406070\n    pwc = (int32_t *)&v4;\n    goto lab_0x406094;\n  lab_0x406094:;\n    char * wstr = (char *)v3; // 0x40609a\n    int64_t ps; // 0x406070\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40609a\n    int64_t result = v5; // 0x40609a\n    if (v5 < 0xfffffffe) {\n        // 0x4060a8\n        return result;\n    }\n    int64_t result2 = result; // 0x4060d9\n    if ((char)function_402800(0, v3) == 0) {\n        // 0x4060db\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4060a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4060f0",
            "funcStartAddr": "4060f0",
            "funcEndAddr": "40614d",
            "decompiledFuncCode": "int64_t function_4060f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4060f7\n    int64_t v2; // 0x4060f0\n    int64_t result = function_405040(a1, v2); // 0x406108\n    if ((v2 & 32) != 0) {\n        // 0x406130\n        if ((int32_t)result == 0) {\n            // 0x406134\n            *__errno_location() = 0;\n        }\n        // 0x40612a\n        return 0xffffffff;\n    }\n    // 0x406111\n    if ((int32_t)result == 0) {\n        // 0x40612a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406118\n    if (v1 == 0) {\n        // 0x40611a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40612a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406150",
            "funcStartAddr": "406150",
            "funcEndAddr": "4066b2",
            "decompiledFuncCode": "int64_t function_406150(void) {\n    char * v1 = nl_langinfo(14); // 0x406166\n    char * v2 = g59; // 0x40616b\n    char * v3; // 0x406150\n    int64_t v4; // 0x406150\n    int64_t v5; // 0x406150\n    int64_t v6; // 0x406150\n    int64_t v7; // 0x406150\n    int32_t size; // 0x406150\n    int32_t size2; // 0x406150\n    int32_t len; // 0x406222\n    int64_t v8; // 0x406222\n    char * env_val; // 0x40620d\n    if (v2 == NULL) {\n        // 0x406208\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406275;\n        } else {\n            // 0x40621a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406275;\n            } else {\n                // 0x40621f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40620d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4066a5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406275;\n                    } else {\n                        // 0x406619\n                        size2 = len + 14;\n                        goto lab_0x40623b;\n                    }\n                } else {\n                    goto lab_0x40623b;\n                }\n            }\n        }\n    } else {\n        // 0x406150\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40618a;\n    }\n  lab_0x4064bc:;\n    // 0x4064bc\n    struct _IO_FILE * stream; // 0x4062fb\n    int32_t v10 = __uflow(stream); // 0x4064bf\n    int64_t v11; // 0x406150\n    int64_t v12 = v11; // 0x4064c9\n    int64_t v13; // 0x406150\n    int64_t v14 = v13; // 0x4064c9\n    int32_t v15 = v10; // 0x4064c9\n    int64_t v16; // 0x406150\n    int64_t v17 = v16; // 0x4064c9\n    int64_t v18 = v11; // 0x4064c9\n    int64_t v19 = v13; // 0x4064c9\n    int64_t v20 = v16; // 0x4064c9\n    if (v10 == -1) {\n        // break -> 0x4064cf\n        goto lab_0x4064cf;\n    }\n    goto lab_0x406349;\n  lab_0x40633e:;\n    // 0x40633e\n    int64_t v90; // 0x406150\n    int64_t * v32; // 0x406330\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406150\n    v12 = v89;\n    int64_t v91; // 0x406150\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406150\n    v17 = v92;\n    goto lab_0x406349;\n  lab_0x406349:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406150\n    int32_t v25; // bp-120, 0x406150\n    int32_t v26; // bp-184, 0x406150\n    int64_t v27; // 0x4062fb\n    int64_t v28; // 0x406318\n    int64_t v29; // 0x40631d\n    int64_t * v30; // 0x406334\n    switch (c) {\n        case 32: {\n            goto lab_0x406330;\n        }\n        case 10: {\n            goto lab_0x406330;\n        }\n        case 9: {\n            goto lab_0x406330;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406521\n            int32_t v33; // 0x406150\n            char v34; // 0x406150\n            int32_t v35; // 0x40652e\n            if (v31 < *v30) {\n                // 0x406500\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40652b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406521\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406500\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40652b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406510\n                v36 = v33;\n            }\n            // 0x4065ff\n            if (v36 == -1) {\n                // break -> 0x4064cf\n                break;\n            }\n            goto lab_0x406330;\n        }\n        default: {\n            // 0x40635f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4064cf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406388\n            int64_t v39 = v37 + 4; // 0x40638a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406396\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406398\n            while (v41 == 0) {\n                // 0x406388\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4063b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4063c2\n            int64_t v45 = v43 + 4; // 0x4063c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4063d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4063d2\n            while (v47 == 0) {\n                // 0x4063c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4063bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4063e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4063f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4063fc\n            int64_t v52 = v51 + v48; // 0x406405\n            int64_t * mem; // 0x406150\n            int64_t v53; // 0x406150\n            int64_t v54; // 0x406150\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40653b\n                int64_t v56 = v55 + 3; // 0x406547\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406421\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406430\n            if (mem == NULL) {\n                // 0x40665c\n                free((int64_t *)v21);\n                function_405040(v27, v53);\n                v24 = (int64_t)&g3;\n                goto lab_0x4062d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406448\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406452\n            uint32_t v62 = (int32_t)v59; // 0x406455\n            int64_t v63; // 0x406150\n            if (v62 >= 8) {\n                // 0x406564\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40657e\n                int64_t v66 = v61 - v65; // 0x406582\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40658d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40659e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40659e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40659b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40662f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406467\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40646b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40647b\n            int64_t v74 = v60 - 1; // 0x40647f\n            uint32_t v75 = (int32_t)v73; // 0x406484\n            int64_t v76; // 0x406150\n            if (v75 >= 8) {\n                // 0x4065b2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4065bc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4065cc\n                int64_t v80 = v74 - v79; // 0x4065d0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4065db\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4065eb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4065e9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406646\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40664e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406496\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40649a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406693\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4064ae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40633e;\n            } else {\n                goto lab_0x4064bc;\n            }\n        }\n    }\n  lab_0x406330:;\n    int64_t v93 = v23; // 0x406150\n    int64_t v94 = v22; // 0x406150\n    int64_t v95 = v21; // 0x406150\n    goto lab_0x406330_2;\n  lab_0x406275:;\n    int64_t * mem3 = malloc(size); // 0x406275\n    int64_t v97 = (int64_t)&g3; // 0x406280\n    int64_t v98; // 0x406150\n    int64_t path; // 0x406150\n    if (mem3 == NULL) {\n        goto lab_0x406252;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406275\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406296;\n    }\n  lab_0x40618a:;\n    int64_t str = v1 == NULL ? (int64_t)&g3 : (int64_t)v1; // 0x40617d\n    char v100 = *v3; // 0x40618a\n    int64_t v101; // 0x406150\n    if (v100 == 0) {\n        // 0x4061e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406150\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406150\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4061d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4061d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4061a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4061ad\n        char v107 = *(char *)v106; // 0x4061b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4061e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4061bb\n    v104 = v103 + 1;\n  lab_0x4061d7:\n    // 0x4061e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406252:;\n    char * v108 = (char *)v97;\n    g59 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40618a;\n  lab_0x406296:;\n    int64_t v109 = v98 + path; // 0x406296\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4062c2\n    v24 = (int64_t)&g3;\n    if (fd >= 0) {\n        // 0x4062f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406622\n            close(fd);\n            v24 = (int64_t)&g3;\n        } else {\n            // 0x406315\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406330_2:;\n                uint64_t v96 = *v32; // 0x406330\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4064bc;\n                } else {\n                    goto lab_0x40633e;\n                }\n            }\n          lab_0x4064cf:\n            // 0x4064cf\n            function_405040(v27, v19);\n            v24 = (int64_t)&g3;\n            if (v18 != 0) {\n                // 0x4064ee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4062d4;\n  lab_0x40623b:;\n    int64_t * mem4 = malloc(size2); // 0x40623b\n    v97 = (int64_t)&g3;\n    if (mem4 != NULL) {\n        // 0x4062e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406296;\n    } else {\n        goto lab_0x406252;\n    }\n  lab_0x4062d4:\n    // 0x4062d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406252;\n}\n"
        },
        {
            "funcName": "function_4066c0",
            "funcStartAddr": "4066c0",
            "funcEndAddr": "406774",
            "decompiledFuncCode": "int64_t function_4066c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x4066da\n    int64_t v2 = a3; // 0x4066e2\n    int64_t v3 = a1; // 0x4066e2\n    int64_t v4 = a4; // 0x4066e2\n    int64_t v5 = a2; // 0x4066e2\n    *v1 = 0;\n    char * str = (char *)v3; // 0x406720\n    char * str2 = (char *)v2; // 0x406720\n    int32_t strcoll_rc = strcoll(str, str2); // 0x406720\n    while (strcoll_rc == 0) {\n        int64_t v6 = (int64_t)strlen(str) + 1; // 0x4066f3\n        int64_t v7 = (int64_t)strlen(str2) + 1; // 0x4066ff\n        v4 -= v7;\n        v5 -= v6;\n        if (v5 == 0) {\n            // 0x406740\n            return v4 != 0 ? 0xffffffff : 0;\n        }\n        // 0x40670e\n        v2 += v7;\n        v3 += v6;\n        if (v4 == 0) {\n            // 0x406760\n            return 1;\n        }\n        *v1 = 0;\n        str = (char *)v3;\n        str2 = (char *)v2;\n        strcoll_rc = strcoll(str, str2);\n    }\n    // 0x406729\n    return strcoll_rc;\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "406821",
            "decompiledFuncCode": "int64_t function_406780(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n == a4) {\n        // 0x40679f\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x406810\n            *__errno_location() = 0;\n            // 0x4067fc\n            return 0;\n        }\n    }\n    char * v1 = (char *)(n + str); // 0x4067c1\n    char * v2 = (char *)(a4 + str2); // 0x4067c5\n    *v1 = 0;\n    *v2 = 0;\n    int64_t v3 = function_4066c0(str, n + 1, str2, a4 + 1); // 0x4067e3\n    // 0x4067fc\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406830",
            "funcStartAddr": "406830",
            "funcEndAddr": "406893",
            "decompiledFuncCode": "int64_t function_406830(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n != a4 || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x406878\n        return function_4066c0(str, n, str2, a4);\n    }\n    // 0x40685a\n    *__errno_location() = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4068a0",
            "funcStartAddr": "4068a0",
            "funcEndAddr": "4068fd",
            "decompiledFuncCode": "int64_t function_4068a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4068a0\n    return function_401370();\n}\n"
        },
        {
            "funcName": "function_406900",
            "funcStartAddr": "406900",
            "funcEndAddr": "406901",
            "decompiledFuncCode": "int64_t function_406900(void) {\n    // 0x406900\n    int64_t result; // 0x406900\n    return result;\n}\n"
        },
        {
            "funcName": "function_406910",
            "funcStartAddr": "406910",
            "funcEndAddr": "406928",
            "decompiledFuncCode": "int64_t function_406910(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406910\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_406928",
            "funcStartAddr": "406928",
            "funcEndAddr": "406948",
            "decompiledFuncCode": "int64_t function_406928(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x406932\n    while (*(int64_t *)v1 != -1) {\n        // 0x406933\n        v1 -= 8;\n    }\n    // 0x406944\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_comm.elf"
}