{
    "funcInfo": [
        {
            "funcName": "function_4017b0",
            "funcStartAddr": "4017b0",
            "funcEndAddr": "4017b5",
            "decompiledFuncCode": "int64_t function_4017b0(void) {\n    // 0x4017b0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017b5",
            "funcStartAddr": "4017b5",
            "funcEndAddr": "4017ba",
            "decompiledFuncCode": "int64_t function_4017b5(void) {\n    // 0x4017b5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017ba",
            "funcStartAddr": "4017ba",
            "funcEndAddr": "4017bf",
            "decompiledFuncCode": "int64_t function_4017ba(void) {\n    // 0x4017ba\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017bf",
            "funcStartAddr": "4017bf",
            "funcEndAddr": "4017c4",
            "decompiledFuncCode": "int64_t function_4017bf(void) {\n    // 0x4017bf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c4",
            "funcStartAddr": "4017c4",
            "funcEndAddr": "4017c9",
            "decompiledFuncCode": "int64_t function_4017c4(void) {\n    // 0x4017c4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c9",
            "funcStartAddr": "4017c9",
            "funcEndAddr": "4017ce",
            "decompiledFuncCode": "int64_t function_4017c9(void) {\n    // 0x4017c9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d0",
            "funcStartAddr": "4017d0",
            "funcEndAddr": "4018d7",
            "decompiledFuncCode": "int64_t function_4017d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x4017d5\n    function_402060(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x4017d0\n    function_405cf0(0x401eb0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_401f50(v1, a2, \"users\", \"GNU coreutils\", (int64_t)g19, 0x401b90);\n    int64_t v3 = function_405220(v1, a2, (int64_t *)&g12, &g2, 0, 0x401b90); // 0x40185e\n    if ((int32_t)v3 != -1) {\n        // 0x4018cd\n        function_401b90(1);\n        // UNREACHABLE\n    }\n    int32_t v4 = *(int32_t *)0x60925c; // 0x401868\n    int32_t v5 = (int32_t)a1 - v4; // 0x40186f\n    if (v5 == 0) {\n        // 0x40188d\n        function_4019d0((int64_t)\"/var/run/utmp\", 1);\n        // 0x401884\n        return 0;\n    }\n    int64_t v6 = 8 * (int64_t)v4 + a2;\n    if (v5 == 1) {\n        // 0x401878\n        function_4019d0(*(int64_t *)v6, 0);\n        // 0x401884\n        return 0;\n    }\n    // 0x40189e\n    function_403c80(*(int64_t *)(v6 + 8));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x4018cd\n    function_401b90(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4018e0",
            "funcEndAddr": "40190b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4018e0\n    int64_t v1; // 0x4018e0\n    __libc_start_main(0x4017d0, (int32_t)a4, (char **)&v1, (void (*)())0x405c80, (void (*)())0x405ce0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40190b",
            "funcStartAddr": "40190b",
            "funcEndAddr": "40192a",
            "decompiledFuncCode": "int64_t function_40190b(void) {\n    // 0x40190b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_40192a",
            "funcStartAddr": "40192a",
            "funcEndAddr": "401961",
            "decompiledFuncCode": "int64_t function_40192a(void) {\n    // 0x40192a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401961",
            "funcStartAddr": "401961",
            "funcEndAddr": "4019b8",
            "decompiledFuncCode": "int64_t function_401961(void) {\n    // 0x401961\n    if (g33 != 0) {\n        // 0x4019b7\n        int64_t result; // 0x401961\n        return result;\n    }\n    int64_t v1 = g34; // 0x401994\n    int64_t result2; // 0x4019a6\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x4019a6\n        result2 = function_40190b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401996\n        v1++;\n    }\n    // 0x40198a\n    g34 = v1;\n    // 0x4019a6\n    result2 = function_40190b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4019b8",
            "funcStartAddr": "4019b8",
            "funcEndAddr": "4019bd",
            "decompiledFuncCode": "int64_t function_4019b8(void) {\n    // 0x4019b8\n    return function_40192a();\n}\n"
        },
        {
            "funcName": "function_4019c0",
            "funcStartAddr": "4019c0",
            "funcEndAddr": "4019cb",
            "decompiledFuncCode": "int64_t function_4019c0(int64_t str, int64_t str2) {\n    // 0x4019c0\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_4019d0",
            "funcStartAddr": "4019d0",
            "funcEndAddr": "401b82",
            "decompiledFuncCode": "int64_t function_4019d0(int64_t a1, uint32_t a2) {\n    // 0x4019d0\n    int64_t v1; // bp-64, 0x4019d0\n    int32_t v2; // bp-72, 0x4019d0\n    int64_t v3 = function_405380(a1, (int64_t *)&v2, &v1, (int64_t)a2); // 0x4019eb\n    if ((int32_t)v3 != 0) {\n        // 0x401b50\n        error(1, *__errno_location(), \"%s\", (char *)function_403b00(0, 3, a1));\n        // 0x401b7d\n        function_404490(1);\n        // UNREACHABLE\n    }\n    int64_t v4 = v2; // 0x4019f8\n    int64_t v5 = 8 * v4; // 0x401a0e\n    if (v2 < 0) {\n        // 0x401b7d\n        function_404490(v5);\n        // UNREACHABLE\n    }\n    int64_t v6 = function_404240(v5); // 0x401a24\n    int64_t v7 = v4; // 0x401a33\n    if (v2 == 0) {\n        int64_t * base = (int64_t *)v6;\n        qsort(base, 0, 8, (int32_t (*)(int64_t *, int64_t *))0x4019c0);\n        // 0x401af2\n        free(base);\n        free((int64_t *)v1);\n        return &g49;\n    }\n    int64_t v8 = 0;\n    int64_t v9 = v8; // 0x401a45\n    if (*(char *)(v1 + 44) != 0) {\n        // 0x401a47\n        v9 = v8;\n        if (*(int16_t *)v1 == 7) {\n            // 0x401b18\n            *(int64_t *)(8 * v8 + v6) = function_405320(v1);\n            v9 = v8 + 1;\n        }\n    }\n    // 0x401a53\n    v7--;\n    int64_t nmemb = v9;\n    int64_t v10 = v1 + 384; // 0x401a62\n    while (v7 != 0) {\n        int64_t v11 = v10;\n        v8 = nmemb;\n        v9 = v8;\n        if (*(char *)(v11 + 44) != 0) {\n            // 0x401a47\n            v9 = v8;\n            if (*(int16_t *)v11 == 7) {\n                // 0x401b18\n                *(int64_t *)(8 * v8 + v6) = function_405320(v11);\n                v9 = v8 + 1;\n            }\n        }\n        // 0x401a53\n        v7--;\n        nmemb = v9;\n        v10 = v11 + 384;\n    }\n    int64_t * base2 = (int64_t *)v6;\n    qsort(base2, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))0x4019c0);\n    if (nmemb == 0) {\n        // 0x401af2\n        free(base2);\n        free((int64_t *)v1);\n        return &g49;\n    }\n    uint64_t v12 = nmemb - 1; // 0x401a7e\n    uint64_t v13 = 0;\n    fputs_unlocked((char *)*(int64_t *)(8 * v13 + v6), g30);\n    int64_t v14 = (int64_t)g30; // 0x401aac\n    int64_t * v15 = (int64_t *)(v14 + 40); // 0x401abb\n    uint64_t v16 = *v15; // 0x401abb\n    if (v16 >= *(int64_t *)(v14 + 48)) {\n        // 0x401b30\n        __overflow(g30, v13 < v12 ? 32 : 10);\n    } else {\n        // 0x401ac5\n        *v15 = v16 + 1;\n        *(char *)v16 = v13 < v12 ? 32 : 10;\n    }\n    int64_t v17 = v13 + 1; // 0x401ad0\n    while (v17 != nmemb) {\n        // 0x401a88\n        v13 = v17;\n        fputs_unlocked((char *)*(int64_t *)(8 * v13 + v6), g30);\n        v14 = (int64_t)g30;\n        v15 = (int64_t *)(v14 + 40);\n        v16 = *v15;\n        if (v16 >= *(int64_t *)(v14 + 48)) {\n            // 0x401b30\n            __overflow(g30, v13 < v12 ? 32 : 10);\n        } else {\n            // 0x401ac5\n            *v15 = v16 + 1;\n            *(char *)v16 = v13 < v12 ? 32 : 10;\n        }\n        // 0x401ad0\n        v17 = v13 + 1;\n    }\n    int64_t v18 = v6 + 8; // 0x401ae4\n    free((int64_t *)*(int64_t *)v6);\n    while (v18 != 8 * v17 + v6) {\n        int64_t v19 = v18;\n        v18 = v19 + 8;\n        free((int64_t *)*(int64_t *)v19);\n    }\n    // 0x401af2\n    free(base2);\n    free((int64_t *)v1);\n    return &g49;\n}\n"
        },
        {
            "funcName": "function_401b90",
            "funcStartAddr": "401b90",
            "funcEndAddr": "401e85",
            "decompiledFuncCode": "int64_t function_401b90(int64_t a1) {\n    int32_t status = a1; // 0x401ba6\n    if (status != 0) {\n        // 0x401baa\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401bcf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401bd6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"Output who is currently logged in according to FILE.\\nIf FILE is not specified, use %s.  %s as FILE is common.\\n\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x401c64\n    bool v2; // 0x401b90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401ce8\n    int64_t v6 = *(int64_t *)v5; // 0x401cec\n    int64_t v7 = 6; // 0x401cf2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"users\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401cfe\n        char v11 = *(char *)v9; // 0x401cfe\n        char v12 = v11; // 0x401cfe\n        bool v13 = false; // 0x401cfe\n        while (v10 == v11) {\n            // 0x401cf4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401cfe\n            int64_t v15 = v8 + v3; // 0x401cfe\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401d0a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x401d0a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401e1c;\n        } else {\n            // 0x401e06\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e5b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401d6c;\n            } else {\n                goto lab_0x401e1c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401d6c;\n        } else {\n            // 0x401d52\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e5b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401d6c;\n            } else {\n                goto lab_0x401d6c;\n            }\n        }\n    }\n  lab_0x401e1c:\n    // 0x401e1c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401dac\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401bcf\n    exit(status);\n    // UNREACHABLE\n  lab_0x401d6c:\n    // 0x401d6c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401dac\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401bcf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e90",
            "funcStartAddr": "401e90",
            "funcEndAddr": "401e98",
            "decompiledFuncCode": "int64_t function_401e90(int64_t a1) {\n    // 0x401e90\n    g36 = a1;\n    int64_t result; // 0x401e90\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ea0",
            "funcStartAddr": "401ea0",
            "funcEndAddr": "401ea8",
            "decompiledFuncCode": "int64_t function_401ea0(int64_t a1) {\n    // 0x401ea0\n    g35 = a1;\n    int64_t result; // 0x401ea0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401eb0",
            "funcStartAddr": "401eb0",
            "funcEndAddr": "401f4e",
            "decompiledFuncCode": "int64_t function_401eb0(void) {\n    // 0x401eb0\n    int64_t v1; // 0x401eb0\n    if ((int32_t)v1 == 0) {\n        // 0x401eec\n        int64_t result; // 0x401eb0\n        return result;\n    }\n    int32_t * err_num = __errno_location(); // 0x401ec6\n    if (g35 != 0) {\n        // 0x401ed7\n        if (*err_num == 32) {\n            int64_t result2 = (int64_t)err_num; // 0x401ec6\n            if ((int32_t)result2 == 0) {\n                // 0x401eec\n                return result2;\n            }\n            // 0x401f2e\n            _exit(g20);\n            // UNREACHABLE\n        }\n    }\n    char * v2 = dcgettext(NULL, \"write error\", 5); // 0x401eff\n    if (g36 == 0) {\n        // 0x401f39\n        error(0, *err_num, \"%s\", v2);\n    } else {\n        // 0x401f13\n        error(0, *err_num, \"%s: %s\", (char *)function_403ad0((int64_t)g36), v2);\n    }\n    // 0x401f2e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f50",
            "funcStartAddr": "401f50",
            "funcEndAddr": "402052",
            "decompiledFuncCode": "int64_t function_401f50(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x401f50\n    int64_t v1; // 0x401f50\n    if ((char)v1 != 0) {\n        // 0x401f63\n        int128_t v2; // 0x401f50\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g27; // 0x401f9a\n    g27 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x401faf\n        g27 = v3;\n        g28 = 0;\n        int64_t result; // 0x401f50\n        return result;\n    }\n    int64_t result2 = function_405220(a1, a2, &g3, (int64_t *)&g4, 0, a6); // 0x401fe9\n    int32_t v4 = result2; // 0x401fee\n    switch (v4) {\n        default: {\n            // 0x401ff8\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x40201a\n                function_4040a0((int64_t)g30, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x401faf\n            g27 = v3;\n            g28 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_402060",
            "funcStartAddr": "402060",
            "funcEndAddr": "4020f9",
            "decompiledFuncCode": "int64_t function_402060(int64_t str) {\n    // 0x402060\n    if (str == 0) {\n        // 0x4020d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40206e\n    int64_t result = (int64_t)found_char_pos; // 0x40206e\n    if (found_char_pos == NULL) {\n        // 0x4020c9\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402078\n    if (v1 - str < 7) {\n        // 0x4020c9\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x402088\n    bool v2; // 0x402060\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402060\n    int64_t v5 = result - 6; // 0x402060\n    int64_t v6 = 7; // 0x402096\n    unsigned char v7 = *(char *)v5; // 0x402096\n    char v8 = *(char *)v4; // 0x402096\n    char v9 = v8; // 0x402096\n    bool v10 = false; // 0x402096\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4020a0\n    int64_t v13 = v1; // 0x4020a0\n    int64_t v14 = 3; // 0x4020a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4020c9\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4020b2\n    char v16 = *(char *)v12; // 0x4020b2\n    char v17 = v16; // 0x4020b2\n    bool v18 = false; // 0x4020b2\n    while (v15 == v16) {\n        // 0x4020a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4020bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4020be\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x4020c9\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402100",
            "funcStartAddr": "402100",
            "funcEndAddr": "4021f2",
            "decompiledFuncCode": "int64_t function_402100(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402114\n    int64_t result = (int64_t)v1; // 0x402114\n    if (result != a1) {\n        // 0x402121\n        return result;\n    }\n    int64_t v2 = function_4055f0(); // 0x402130\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4021e6\n    if (v3 == 85) {\n        // 0x402140\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4021d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x40216e\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40217b\n        // 0x402121\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4021d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x4021bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x4021ca\n    // 0x402121\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402200",
            "funcStartAddr": "402200",
            "funcEndAddr": "402257",
            "decompiledFuncCode": "int64_t function_402200(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402200\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402248\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402257",
            "funcStartAddr": "402257",
            "funcEndAddr": "403421",
            "decompiledFuncCode": "int64_t function_402257(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4022a1\n    int64_t v3 = 0; // 0x4022a1\n    int64_t v4; // 0x402257\n    int64_t v5; // 0x402257\n    int64_t v6; // 0x402257\n    int64_t v7; // 0x402257\n    int64_t v8; // 0x402257\n    int64_t v9; // 0x402257\n    int64_t v10; // 0x402257\n    int64_t v11; // 0x402257\n    int64_t v12; // 0x402257\n    int64_t v13; // 0x402257\n    int64_t v14; // 0x402257\n    int64_t v15; // 0x402257\n    int64_t v16; // 0x402257\n    int64_t v17; // 0x402257\n    int64_t v18; // 0x402257\n    int64_t result; // 0x402257\n    int64_t v19; // 0x402257\n    int32_t wc; // bp+132, 0x402257\n    int64_t ps; // bp+136, 0x402257\n    char v20; // 0x402810\n    int64_t v21; // 0x402810\n    int64_t v22; // 0x402bb8\n    int64_t v23; // 0x402257\n    int64_t v24; // 0x402bd7\n    int32_t v25; // 0x402257\n    while (true) {\n      lab_0x4022a8_2:\n        // 0x4022a8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402257\n        int64_t v27; // 0x4022dc\n        while (true) {\n          lab_0x4022a8:\n            // 0x4022a8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4022b3\n            if (v15 == -1) {\n                // 0x4022b5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4022c3\n            if (v28) {\n                // break (via goto) -> 0x402a28\n                goto lab_0x402a28;\n            }\n            // 0x4022cc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4028bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402401;\n                    }\n                    // 0x402cdd\n                    v26 = v5 + 1;\n                    goto lab_0x4022a8;\n                }\n                case 7: {\n                    goto lab_0x402401;\n                }\n                case 8: {\n                    goto lab_0x402401;\n                }\n                case 9: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402401;\n                }\n                case 12: {\n                    goto lab_0x402401;\n                }\n                case 13: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4023cd;\n                }\n                case 36: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402401;\n                }\n                case 38: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402401;\n                }\n                case 44: {\n                    goto lab_0x402401;\n                }\n                case 45: {\n                    goto lab_0x402401;\n                }\n                case 46: {\n                    goto lab_0x402401;\n                }\n                case 47: {\n                    goto lab_0x402401;\n                }\n                case 48: {\n                    goto lab_0x402401;\n                }\n                case 49: {\n                    goto lab_0x402401;\n                }\n                case 50: {\n                    goto lab_0x402401;\n                }\n                case 51: {\n                    goto lab_0x402401;\n                }\n                case 52: {\n                    goto lab_0x402401;\n                }\n                case 53: {\n                    goto lab_0x402401;\n                }\n                case 54: {\n                    goto lab_0x402401;\n                }\n                case 55: {\n                    goto lab_0x402401;\n                }\n                case 56: {\n                    goto lab_0x402401;\n                }\n                case 57: {\n                    goto lab_0x402401;\n                }\n                case 58: {\n                    goto lab_0x402401;\n                }\n                case 59: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402401;\n                }\n                case 66: {\n                    goto lab_0x402401;\n                }\n                case 67: {\n                    goto lab_0x402401;\n                }\n                case 68: {\n                    goto lab_0x402401;\n                }\n                case 69: {\n                    goto lab_0x402401;\n                }\n                case 70: {\n                    goto lab_0x402401;\n                }\n                case 71: {\n                    goto lab_0x402401;\n                }\n                case 72: {\n                    goto lab_0x402401;\n                }\n                case 73: {\n                    goto lab_0x402401;\n                }\n                case 74: {\n                    goto lab_0x402401;\n                }\n                case 75: {\n                    goto lab_0x402401;\n                }\n                case 76: {\n                    goto lab_0x402401;\n                }\n                case 77: {\n                    goto lab_0x402401;\n                }\n                case 78: {\n                    goto lab_0x402401;\n                }\n                case 79: {\n                    goto lab_0x402401;\n                }\n                case 80: {\n                    goto lab_0x402401;\n                }\n                case 81: {\n                    goto lab_0x402401;\n                }\n                case 82: {\n                    goto lab_0x402401;\n                }\n                case 83: {\n                    goto lab_0x402401;\n                }\n                case 84: {\n                    goto lab_0x402401;\n                }\n                case 85: {\n                    goto lab_0x402401;\n                }\n                case 86: {\n                    goto lab_0x402401;\n                }\n                case 87: {\n                    goto lab_0x402401;\n                }\n                case 88: {\n                    goto lab_0x402401;\n                }\n                case 89: {\n                    goto lab_0x402401;\n                }\n                case 90: {\n                    goto lab_0x402401;\n                }\n                case 91: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402401;\n                }\n                case 94: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402401;\n                }\n                case 96: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402401;\n                }\n                case 98: {\n                    goto lab_0x402401;\n                }\n                case 99: {\n                    goto lab_0x402401;\n                }\n                case 100: {\n                    goto lab_0x402401;\n                }\n                case 101: {\n                    goto lab_0x402401;\n                }\n                case 102: {\n                    goto lab_0x402401;\n                }\n                case 103: {\n                    goto lab_0x402401;\n                }\n                case 104: {\n                    goto lab_0x402401;\n                }\n                case 105: {\n                    goto lab_0x402401;\n                }\n                case 106: {\n                    goto lab_0x402401;\n                }\n                case 107: {\n                    goto lab_0x402401;\n                }\n                case 108: {\n                    goto lab_0x402401;\n                }\n                case 109: {\n                    goto lab_0x402401;\n                }\n                case 110: {\n                    goto lab_0x402401;\n                }\n                case 111: {\n                    goto lab_0x402401;\n                }\n                case 112: {\n                    goto lab_0x402401;\n                }\n                case 113: {\n                    goto lab_0x402401;\n                }\n                case 114: {\n                    goto lab_0x402401;\n                }\n                case 115: {\n                    goto lab_0x402401;\n                }\n                case 116: {\n                    goto lab_0x402401;\n                }\n                case 117: {\n                    goto lab_0x402401;\n                }\n                case 118: {\n                    goto lab_0x402401;\n                }\n                case 119: {\n                    goto lab_0x402401;\n                }\n                case 120: {\n                    goto lab_0x402401;\n                }\n                case 121: {\n                    goto lab_0x402401;\n                }\n                case 122: {\n                    goto lab_0x402401;\n                }\n                case 123: {\n                    goto lab_0x4023a5;\n                }\n                case 124: {\n                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4023a5;\n                }\n                case 126: {\n                    goto lab_0x4023cd;\n                }\n                default: {\n                    goto lab_0x4027a5;\n                }\n            }\n        }\n      lab_0x4027a5:\n        if (v23 != 1) {\n            // 0x402b10\n            ps = 0;\n            int64_t len = v15; // 0x402b20\n            if (v15 == -1) {\n                // 0x402b22\n                len = strlen((char *)str);\n            }\n            // 0x402b4e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402baf:\n                // 0x402baf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402bb4\n                int64_t v30 = v29 + str;\n                v24 = function_4052a0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40312a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40312a_2;\n                    }\n                    case -2: {\n                        // 0x40320d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403247\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40324a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403257\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403250\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40312a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40312a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402b80;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402c2c\n                        char v34 = *(char *)v33; // 0x402c3d\n                        unsigned char v35; // 0x402257\n                        if (v34 < 125) {\n                            // 0x402c48\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402c5f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402c30\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402c3d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402c48\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402c5f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402c30\n                            v33++;\n                        }\n                        goto lab_0x402b80;\n                    }\n                }\n            }\n            goto lab_0x40312a_2;\n        } else {\n            // 0x4027f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402401;\n        }\n    }\n  lab_0x402a28:\n    // 0x402a28\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40332a\n        if (v8 > result) {\n            // 0x403333\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402657\n        return result;\n    }\n    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402401:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402410\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40261a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402511\n    char v40 = v20; // 0x402511\n    int64_t v41 = v38; // 0x402511\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402511\n    int64_t v43 = v36; // 0x402511\n    goto lab_0x40248d;\n  lab_0x40261a_2:\n    // 0x402657\n    return function_402200(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40312a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402401;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402cfe\n        int64_t v50 = v5 + 1; // 0x402de1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402de8\n        char v52 = v20; // 0x402de8\n        int64_t v53 = result; // 0x402de8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402db1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402db5\n            int64_t v56 = v54 + 1; // 0x402dba\n            int64_t v57 = v51 + 1; // 0x402de1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402dac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402db1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402db5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40248d;\n    }\n  lab_0x402b80:\n    // 0x402b80\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402b9f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402ba2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40312a\n        goto lab_0x40312a_2;\n    }\n    goto lab_0x402baf;\n  lab_0x4023cd:\n    // 0x4023cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40261a_2;\n    }\n    goto lab_0x402401;\n  lab_0x4023a5:;\n    bool v60 = v15 == 1; // 0x4023b0\n    if (v15 == -1) {\n        // 0x4023b2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4023be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402401;\n    } else {\n        goto lab_0x4023cd;\n    }\n  lab_0x40248d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402492\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402496\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4022a8_2;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "4035ce",
            "decompiledFuncCode": "int64_t function_403430(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403432\n    int32_t * v3 = __errno_location(); // 0x40344c\n    int64_t v4 = (int64_t)g22; // 0x403451\n    int32_t v5 = *v3; // 0x40345b\n    int64_t v6 = v4; // 0x403471\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4035c9\n            function_404490(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403480\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403487\n        int64_t v9; // 0x403430\n        if (g22 == &g23) {\n            int64_t v10 = function_4042a0(0, v8); // 0x4035aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x4035af\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4042a0(v4, v8); // 0x40349b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x4034aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x4034aa\n        int32_t v14 = v7; // 0x4034b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4034e1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4034eb\n    int64_t * v17 = (int64_t *)v15; // 0x4034ee\n    uint64_t v18 = *v17; // 0x4034ee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4034f1\n    int64_t result = *v19; // 0x4034f1\n    int64_t v20; // 0x403430\n    uint64_t v21 = function_402200(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403514\n    if (v18 > v21) {\n        // 0x40358b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403527\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x403537\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404240(v22); // 0x403551\n    *v19 = result2;\n    int64_t v23; // 0x403430\n    function_402200(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40358b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4035d0",
            "funcStartAddr": "4035d0",
            "funcEndAddr": "403604",
            "decompiledFuncCode": "int64_t function_4035d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4035d7\n    int64_t result = function_404440(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x4035f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403610",
            "funcStartAddr": "403610",
            "funcEndAddr": "40361f",
            "decompiledFuncCode": "int64_t function_403610(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x40361c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "40362f",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403628\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403630",
            "funcStartAddr": "403630",
            "funcEndAddr": "403663",
            "decompiledFuncCode": "int64_t function_403630(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x403649\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40364e\n    uint32_t v3 = *v2; // 0x40364e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403652\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403670",
            "funcStartAddr": "403670",
            "funcEndAddr": "403683",
            "decompiledFuncCode": "int64_t function_403670(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x40367c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403690",
            "funcStartAddr": "403690",
            "funcEndAddr": "4036bb",
            "decompiledFuncCode": "int64_t function_403690(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403698\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4036b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4036ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "403732",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x4036e2\n    int32_t * v2 = __errno_location(); // 0x4036eb\n    uint32_t v3 = *(int32_t *)v1; // 0x40370b\n    int64_t result = function_402200(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40371a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403740",
            "funcStartAddr": "403740",
            "funcEndAddr": "403821",
            "decompiledFuncCode": "int64_t function_403740(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x403762\n    int32_t * v2 = __errno_location(); // 0x403768\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403787\n    int32_t * v4 = (int32_t *)v1; // 0x40378a\n    int64_t v5 = function_402200(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4037a5\n    int64_t v6 = v5 + 1; // 0x4037aa\n    int64_t result = function_404240(v6); // 0x4037bf\n    function_402200(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403804\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40380d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403830",
            "funcStartAddr": "403830",
            "funcEndAddr": "40383a",
            "decompiledFuncCode": "int64_t function_403830(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403830\n    return function_403740(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403840",
            "funcStartAddr": "403840",
            "funcEndAddr": "4038d5",
            "decompiledFuncCode": "int64_t function_403840(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x403840\n    int64_t v2 = v1; // 0x403840\n    int64_t v3 = v2; // 0x403854\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403873\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403870\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x40388d\n    if (g23 != 0x6092c0) {\n        // 0x40388f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g38;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x4038b1\n    if (g22 != &g23) {\n        // 0x4038b3\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g49;\n    }\n    // 0x4038c6\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038e0",
            "funcStartAddr": "4038e0",
            "funcEndAddr": "4038f1",
            "decompiledFuncCode": "int64_t function_4038e0(void) {\n    // 0x4038e0\n    int64_t v1; // 0x4038e0\n    return function_403430(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403900",
            "funcStartAddr": "403900",
            "funcEndAddr": "40390a",
            "decompiledFuncCode": "int64_t function_403900(void) {\n    // 0x403900\n    int64_t v1; // 0x403900\n    return function_403430(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "403926",
            "decompiledFuncCode": "int64_t function_403910(int64_t a1) {\n    // 0x403910\n    return function_403430(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403942",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1, int64_t a2) {\n    // 0x403930\n    return function_403430(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403950",
            "funcStartAddr": "403950",
            "funcEndAddr": "4039b8",
            "decompiledFuncCode": "int64_t function_403950(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403960\n    return function_403430((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4039c0",
            "funcStartAddr": "4039c0",
            "funcEndAddr": "403a24",
            "decompiledFuncCode": "int64_t function_4039c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4039d0\n    return function_403430((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403a3c",
            "decompiledFuncCode": "int64_t function_403a30(int64_t a1, int64_t a2) {\n    // 0x403a30\n    return function_403950(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403a4f",
            "decompiledFuncCode": "int64_t function_403a40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403a40\n    return function_4039c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403ac0",
            "decompiledFuncCode": "int64_t function_403a50(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403a5d\n    int128_t v2 = __asm_movdqa(g40); // 0x403a65\n    int128_t v3 = __asm_movdqa(g41); // 0x403a6d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403a82\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403a98\n    uint32_t v6 = *v5; // 0x403a98\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403a9d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403430(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403acd",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1, int64_t a2) {\n    // 0x403ac0\n    return function_403a50(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403ad0",
            "funcStartAddr": "403ad0",
            "funcEndAddr": "403ae1",
            "decompiledFuncCode": "int64_t function_403ad0(int64_t a1) {\n    // 0x403ad0\n    return function_403a50(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403afa",
            "decompiledFuncCode": "int64_t function_403af0(void) {\n    // 0x403af0\n    int64_t v1; // 0x403af0\n    return function_403a50(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b6e",
            "decompiledFuncCode": "int64_t function_403b00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403b1a\n    return function_403430((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403b70",
            "funcStartAddr": "403b70",
            "funcEndAddr": "403bdc",
            "decompiledFuncCode": "int64_t function_403b70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403b77\n    int128_t v2 = __asm_movdqa(g40); // 0x403b7f\n    int128_t v3 = __asm_movdqa(g41); // 0x403b87\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403ba9\n    if (a2 == 0 || a3 == 0) {\n        // 0x403bd7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403bba\n    return function_403430(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403be0",
            "funcStartAddr": "403be0",
            "funcEndAddr": "403be9",
            "decompiledFuncCode": "int64_t function_403be0(void) {\n    // 0x403be0\n    int64_t v1; // 0x403be0\n    return function_403b70(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403bf0",
            "funcStartAddr": "403bf0",
            "funcEndAddr": "403c07",
            "decompiledFuncCode": "int64_t function_403bf0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403bf0\n    return function_403b70(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403c10",
            "funcStartAddr": "403c10",
            "funcEndAddr": "403c23",
            "decompiledFuncCode": "int64_t function_403c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403c10\n    return function_403b70(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403c3a",
            "decompiledFuncCode": "int64_t function_403c30(void) {\n    // 0x403c30\n    int64_t v1; // 0x403c30\n    return function_403430(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_403c40",
            "funcStartAddr": "403c40",
            "funcEndAddr": "403c52",
            "decompiledFuncCode": "int64_t function_403c40(int64_t a1, int64_t a2) {\n    // 0x403c40\n    return function_403430(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_403c60",
            "funcStartAddr": "403c60",
            "funcEndAddr": "403c71",
            "decompiledFuncCode": "int64_t function_403c60(void) {\n    // 0x403c60\n    int64_t v1; // 0x403c60\n    return function_403430(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403c80",
            "funcStartAddr": "403c80",
            "funcEndAddr": "403c96",
            "decompiledFuncCode": "int64_t function_403c80(int64_t a1) {\n    // 0x403c80\n    return function_403430(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403ca0",
            "funcStartAddr": "403ca0",
            "funcEndAddr": "40407d",
            "decompiledFuncCode": "int64_t function_403ca0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403d38\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403cbc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403cd6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403d1b\n    if (a6 < 10) {\n        // 0x403d2a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403e22\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404080",
            "funcStartAddr": "404080",
            "funcEndAddr": "4040a0",
            "decompiledFuncCode": "int64_t function_404080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404080\n    if (a5 == 0) {\n        // 0x40409b\n        return function_403ca0(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x404087\n    v1++;\n    int64_t v2 = v1; // 0x404099\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404090\n        v1++;\n        v2 = v1;\n    }\n    // 0x40409b\n    return function_403ca0(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "404100",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x4040a0\n    int64_t v4 = &v3; // 0x4040a0\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x4040d3\n    int64_t v7; // 0x4040bd\n    int64_t * v8; // 0x4040db\n    int64_t v9; // 0x4040db\n    int64_t v10; // 0x4040e7\n    if (v6 < 48) {\n        // 0x4040b0\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x4040f3\n            break;\n        }\n    } else {\n        // 0x4040db\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x4040f3\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x4040d1\n    while (v5 != 9) {\n        // 0x4040c9\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x4040b0\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x4040f3\n                break;\n            }\n        } else {\n            // 0x4040db\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x4040f3\n                break;\n            }\n        }\n        // 0x4040c9\n        v11 = 10;\n    }\n    // 0x4040f3\n    return function_403ca0(a1, a2, a3, a4, v4, v11, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "4041bc",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404100\n    int64_t v1; // bp-168, 0x404100\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404100\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404100\n    int64_t v8; // 0x404100\n    int64_t v9; // bp-56, 0x404100\n    int64_t v10; // 0x404165\n    int64_t v11; // 0x404189\n    if ((int32_t)v6 < 48) {\n        // 0x404150\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4041a0\n            break;\n        }\n    } else {\n        // 0x404182\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4041a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40417a\n    int64_t v13 = 10; // 0x40417a\n    while (v5 != 9) {\n        // 0x40417c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404150\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4041a0\n                break;\n            }\n        } else {\n            // 0x404182\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4041a0\n                break;\n            }\n        }\n        // 0x404172\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4041a0\n    int64_t v14; // bp-136, 0x404100\n    int64_t result = function_403ca0(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x4041af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "404234",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1) {\n    // 0x4041c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404223\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40425a",
            "decompiledFuncCode": "int64_t function_404240(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404244\n    if (size != 0 != (mem == NULL)) {\n        // 0x404253\n        return (int64_t)mem;\n    }\n    // 0x404255\n    function_404490(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404281",
            "decompiledFuncCode": "int64_t function_404260(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404263\n    int64_t v2 = v1; // 0x404263\n    if (v2 < 0) {\n        // 0x40427b\n        function_404490(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404279\n        return function_404240(v2);\n    }\n    // 0x40427b\n    function_404490(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "404292",
            "decompiledFuncCode": "int64_t function_404290(void) {\n    // 0x404290\n    int64_t v1; // 0x404290\n    return function_404240(v1);\n}\n"
        },
        {
            "funcName": "function_4042a0",
            "funcStartAddr": "4042a0",
            "funcEndAddr": "4042d6",
            "decompiledFuncCode": "int64_t function_4042a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4042c8\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4042b1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4042c0\n        return (int64_t)mem;\n    }\n    // 0x4042d1\n    function_404490(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "404301",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4042e3\n    int64_t v2 = v1; // 0x4042e3\n    if (v2 < 0) {\n        // 0x4042fb\n        function_404490(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4042f9\n        return function_4042a0(a1, v2);\n    }\n    // 0x4042fb\n    function_404490(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "404396",
            "decompiledFuncCode": "int64_t function_404310(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40436b\n            function_404490(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4042a0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404353\n    if (a2 == 0) {\n        // 0x404378\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404358\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40436b\n        function_404490(a1);\n        // UNREACHABLE\n    }\n    // 0x40433a\n    *(int64_t *)a2 = v2;\n    return function_4042a0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043f0",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4043a0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4043ea\n            function_404490(a1);\n            // UNREACHABLE\n        }\n        // 0x4043c2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4042a0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4043d5\n        *(int64_t *)a2 = 128;\n        return function_4042a0(0, 128);\n    }\n    // 0x4043e8\n    if (a2 < 0) {\n        // 0x4043ea\n        function_404490(a1);\n        // UNREACHABLE\n    }\n    // 0x4043c2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4042a0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404407",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2) {\n    // 0x4043f0\n    return (int64_t)memset((int64_t *)function_404240(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "40443e",
            "decompiledFuncCode": "int64_t function_404410(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404417\n    if ((int64_t)v1 < 0) {\n        // 0x404439\n        function_404490(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404439\n        function_404490(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40442a\n    if (mem != NULL) {\n        // 0x404434\n        return (int64_t)mem;\n    }\n    // 0x404439\n    function_404490(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404468",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404240(a2); // 0x40444f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404470",
            "funcStartAddr": "404470",
            "funcEndAddr": "404483",
            "decompiledFuncCode": "int64_t function_404470(int64_t str) {\n    // 0x404470\n    return function_404440(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "4044c1",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1) {\n    // 0x404490\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "4045af",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4044dc\n    uint32_t v2 = *v1; // 0x4044dc\n    int64_t v3 = a2 & 0xffffffff; // 0x4044e1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4044e4\n    uint64_t v5 = (int64_t)*v4; // 0x4044e4\n    int64_t v6; // 0x404552\n    if (v3 <= v5) {\n      lab_0x40454c_2:\n        // 0x40454c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4044d2\n    int64_t v8 = v2; // 0x4044d0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40454c\n        goto lab_0x40454c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404508\n    int64_t v17; // 0x404516\n    int64_t * v18; // 0x404530\n    int64_t * v19; // 0x404533\n    int64_t v20; // 0x40453e\n    int64_t v21; // 0x404516\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404513\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404530\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404547\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40454c\n            goto lab_0x40454c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40454c\n            goto lab_0x40454c_2;\n        }\n        // 0x404502\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40458b\n    int64_t * v23 = (int64_t *)v22; // 0x404590\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404593\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404590\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4045a7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4044fd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40454c\n            goto lab_0x40454c_2;\n        }\n        // 0x404502\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404513\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404530\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404547\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40454c\n                goto lab_0x40454c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40454c\n                goto lab_0x40454c_2;\n            }\n            // 0x404502\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404570\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404590\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4045a7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40454c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "404bcc",
            "decompiledFuncCode": "int64_t function_4045b0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4045cf\n    int64_t v2 = *v1; // 0x4045cf\n    char * str2 = (char *)v2; // 0x4045dc\n    char c = *str2; // 0x4045dc\n    int64_t v3 = v2; // 0x404608\n    int64_t v4 = 0; // 0x4045b0\n    int32_t v5; // 0x4045b0\n    int64_t v6; // 0x4045b0\n    int64_t v7; // 0x4045b0\n    int64_t v8; // 0x4045b0\n    int64_t v9; // 0x4045b0\n    int64_t v10; // 0x4045b0\n    int64_t v11; // 0x4045b0\n    int64_t v12; // 0x4045b0\n    int64_t v13; // 0x4045b0\n    int64_t str3; // 0x4045b0\n    int64_t v14; // 0x4045b0\n    int64_t v15; // 0x4045b0\n    int64_t v16; // 0x4045b0\n    int64_t v17; // 0x4045b0\n    int32_t v18; // 0x4045b0\n    int32_t v19; // 0x4045b0\n    int32_t v20; // 0x4045b0\n    int32_t v21; // 0x4045b0\n    int32_t v22; // 0x4045b0\n    int32_t v23; // 0x4045b0\n    int32_t v24; // 0x4045b0\n    int32_t v25; // 0x4045b0\n    int32_t v26; // 0x4045b0\n    int32_t v27; // 0x4045b0\n    int32_t v28; // 0x4045b0\n    int32_t v29; // 0x4045b0\n    int64_t nmemb; // 0x4045b0\n    int64_t v30; // 0x4045b0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40460c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404608\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404618\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40461e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4045e8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40464c\n                int64_t v34; // 0x4045b0\n                int64_t v35; // 0x4045b0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404655\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4047d0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404666\n                int64_t v37 = *(int64_t *)v36; // 0x40466a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404640\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404655\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4047d0;\n                        }\n                    }\n                    // 0x404666\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4046b6:\n                    // 0x4046b6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404710;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404880\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404710;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404830\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4046da;\n                                } else {\n                                    // 0x40483c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4046da;\n                                    } else {\n                                        // 0x40484a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4046da;\n                                        } else {\n                                            goto lab_0x404710;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4046da;\n                            }\n                        }\n                    }\n                }\n              lab_0x404721:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4048f6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404aa2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x404ac2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404b0f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x404b29\n                            int64_t v45; // 0x404b2b\n                            if (*(char *)v42 != 0) {\n                                // 0x404b2b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404b23\n                            while (v17 + nmemb != v42) {\n                                // 0x404b25\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404b2b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x404b18\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404b50\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404904\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404a5f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404959\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404970\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40481e\n                    return 63;\n                }\n                // 0x404740\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4047c4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4047d0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4047e0\n                    uint32_t v50 = *v49; // 0x4047e0\n                    int64_t v51 = v50; // 0x4047e0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4047ea\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4047f3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404a1f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4049ca\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40481e\n                            return 63;\n                        }\n                        // 0x404868\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404b7f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404a7d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404a90\n                                // 0x40481e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40498e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4049a2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40480b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40480e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404812\n                    int64_t result = v59; // 0x404818\n                    if (v58 != 0) {\n                        // 0x40481a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40481e\n                    return result;\n                }\n            } else {\n                // 0x40461e\n                v5 = v32;\n            }\n            // break -> 0x404745\n            break;\n        }\n    }\n    // 0x404745\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40475d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404767\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40481e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4048a9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404796\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4047a6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404710:\n    // 0x404710\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404710\n    int64_t v63 = *(int64_t *)v62; // 0x404714\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404721\n        goto lab_0x404721;\n    }\n    goto lab_0x4046b6;\n  lab_0x4046da:\n    // 0x4046da\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4045b0\n    int32_t v65; // 0x4045b0\n    int32_t v66; // 0x4045b0\n    if (v27 != 0) {\n        goto lab_0x404710;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404890\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404710;\n            } else {\n                goto lab_0x404701;\n            }\n        } else {\n            // 0x4046f5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4049ec\n                int64_t v67 = (int64_t)mem; // 0x4049ec\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404710;\n                } else {\n                    // 0x4049ff\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404701;\n                }\n            } else {\n                goto lab_0x404701;\n            }\n        }\n    }\n  lab_0x404701:\n    // 0x404701\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404710;\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "405196",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404bf1\n    if (v3 < 1) {\n        // 0x404dae\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404bed\n    int32_t v5 = *(int32_t *)a7; // 0x404bf9\n    uint64_t v6 = a1 & 0xffffffff; // 0x404bfb\n    int64_t v7 = v2; // 0x404c00\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404c03\n    *v8 = 0;\n    int64_t v9; // 0x404bd0\n    int64_t v10; // 0x404bd0\n    int64_t v11; // 0x404bd0\n    int64_t v12; // 0x404bd0\n    int64_t str; // 0x404bd0\n    int64_t v13; // 0x404bd0\n    int64_t v14; // 0x404bd0\n    int64_t v15; // 0x404bd0\n    int64_t v16; // 0x404bd0\n    int64_t v17; // 0x404bd0\n    int32_t v18; // 0x404bd0\n    char v19; // 0x404bd0\n    if (v5 == 0) {\n        // 0x404de8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404c1a;\n    } else {\n        // 0x404c13\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404c60\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404c63\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404d28;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404c76\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404c86\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404d3c;\n                } else {\n                    goto lab_0x404c98;\n                }\n            }\n        } else {\n            goto lab_0x404c1a;\n        }\n    }\n  lab_0x404c1a:\n    // 0x404c1a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404c20\n    *v24 = 0;\n    int64_t v25; // 0x404bd0\n    int64_t v26; // 0x404bd0\n    int64_t v27; // 0x404bd0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404d10\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404d1d;\n        }\n        case 43: {\n            // 0x405020\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404d1d;\n        }\n        default: {\n            // 0x404c3c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404f9f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4050b8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404d1d;\n                } else {\n                    // 0x404fad\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404c4a;\n                }\n            } else {\n                goto lab_0x404c4a;\n            }\n        }\n    }\n  lab_0x404d28:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404d2f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404c98;\n    } else {\n        goto lab_0x404d3c;\n    }\n  lab_0x404c4a:\n    // 0x404c4a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404d1d;\n  lab_0x404d1d:\n    // 0x404d1d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404d28;\n  lab_0x404c98:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404c98\n    int64_t v31 = v30; // 0x404c98\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404c9a\n    if ((int64_t)*v32 > v31) {\n        // 0x404c9f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404ca2\n    if (*v33 > v30) {\n        // 0x404ca7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404caa\n    int64_t v35 = v31; // 0x404cae\n    int64_t v36 = v15; // 0x404cae\n    int64_t v37; // 0x404bd0\n    int64_t v38; // 0x404bd0\n    int64_t v39; // 0x404bd0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404e18\n        int64_t v41 = v40; // 0x404e18\n        v2 = v41;\n        int64_t v42; // 0x404bd0\n        if (*v33 == v40) {\n            // 0x405000\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405008\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404e24\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404e38\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404e41\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404e4a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404e61\n            int64_t v47 = v45 & 0xffffffff; // 0x404e65\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404e6e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404e74\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404e76;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404e50\n            int64_t v49 = v48 & 0xffffffff; // 0x404e50\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404e61\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404e6e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404e74\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404e76;\n                    }\n                }\n                // 0x404e50\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405018\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404e76;\n    } else {\n        goto lab_0x404cb4;\n    }\n  lab_0x404d3c:\n    // 0x404d3c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404d3f\n    int64_t v51 = v12; // 0x404d3f\n    int64_t v52 = v14; // 0x404d3f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404c98;\n    } else {\n        goto lab_0x404d45;\n    }\n  lab_0x404cb4:;\n    int32_t v53 = v35; // 0x404cb4\n    int64_t v54; // 0x404bd0\n    int64_t v55; // 0x404bd0\n    int64_t v56; // 0x404bd0\n    int64_t v57; // 0x404bd0\n    int64_t v58; // 0x404bd0\n    int64_t v59; // 0x404bd0\n    char * v60; // 0x404bd0\n    int64_t v61; // 0x404bd0\n    int64_t v62; // 0x404cc9\n    int64_t v63; // 0x404bd0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404e03\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404e06;\n    } else {\n        // 0x404cbc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404bd0\n        int64_t v66 = v65 ? -1 : 1; // 0x404cd0\n        int64_t v67 = (int64_t)\"--\"; // 0x404bd0\n        int64_t v68 = v62; // 0x404bd0\n        int64_t v69 = 3; // 0x404cd0\n        unsigned char v70 = *(char *)v68; // 0x404cd0\n        char v71 = *(char *)v67; // 0x404cd0\n        char v72 = v71; // 0x404cd0\n        bool v73 = false; // 0x404cd0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404dc0\n            if (*(char *)v62 == 45) {\n                // 0x404e80\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404e80\n                if (c == 0) {\n                    goto lab_0x404dca;\n                } else {\n                    // 0x404e8d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404f10;\n                    } else {\n                        if (c == 45) {\n                            // 0x4050f3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404f65;\n                        } else {\n                            // 0x404e9e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404f10;\n                            } else {\n                                // 0x404ea3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404ec4;\n                                } else {\n                                    // 0x404eaa\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404f10;\n                                    } else {\n                                        goto lab_0x404ec4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404dca;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404ce0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404ce3\n            int64_t v77 = v35 + 1; // 0x404ce6\n            int32_t v78 = v77; // 0x404ce9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405050\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404cf7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404d05\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404e06;\n        }\n    }\n  lab_0x404d45:;\n    // 0x404d45\n    int64_t v79; // bp-104, 0x404bd0\n    int64_t v80 = &v79; // 0x404bda\n    int64_t v81 = v50 + 1; // 0x404d45\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404d4c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404d51\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404d55\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404d59\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404d61\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404d66\n    int32_t c2 = v84; // 0x404d66\n    char * found_char_pos = strchr(str2, c2); // 0x404d66\n    int64_t v87 = *v82; // 0x404d6b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404d75\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404d80\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405070\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40503d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404dae\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404d66\n    char v91 = *(char *)(v90 + 1); // 0x404d9b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404d55\n        if (v91 != 58) {\n            // 0x404dae\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404fc4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4050c8\n                *v8 = 0;\n            } else {\n                // 0x4050ac\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404fee\n            *v83 = 0;\n            // 0x404dae\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404fce\n        if (v93 != 0) {\n            // 0x405060\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404fee\n            *v83 = 0;\n            // 0x404dae\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404fe1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404fee\n            *v83 = 0;\n            // 0x404dae\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40512a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4050da\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4050e1\n        // 0x404fee\n        *v83 = 0;\n        // 0x404dae\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404f39\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404f3b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405160\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405111\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405118\n            // 0x404dae\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404f46\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404f4a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404f65;\n  lab_0x404e76:\n    // 0x404e76\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404cb4;\n  lab_0x404f65:;\n    int64_t v99 = function_4045b0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404f83\n    // 0x404dae\n    return v99 & 0xffffffff;\n  lab_0x404e06:;\n    int32_t v100 = v55; // 0x404e06\n    if (v100 != (int32_t)v59) {\n        // 0x404e0a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404dae\n    return 0xffffffff;\n  lab_0x404dca:\n    // 0x404dca\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404dd1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404dae\n    return v99 & 0xffffffff;\n  lab_0x404f10:\n    // 0x404f10\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404d45;\n  lab_0x404ec4:\n    // 0x404ec4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4045b0(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x404eea\n    if ((int32_t)v101 != -1) {\n        // 0x404dae\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404eff\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404f10;\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051f6",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1) {\n    // 0x4051a0\n    *(int32_t *)&g42 = g28;\n    *(int32_t *)&g43 = g27;\n    int64_t v1; // 0x4051a0\n    int64_t result = function_404bd0(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x4051c6\n    g28 = *(int32_t *)&g42;\n    g47 = g45;\n    *(int32_t *)&g26 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405200",
            "funcStartAddr": "405200",
            "funcEndAddr": "405218",
            "decompiledFuncCode": "int64_t function_405200(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405200\n    return function_4051a0(1);\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "405233",
            "decompiledFuncCode": "int64_t function_405220(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x405220\n    return function_4051a0(0);\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405255",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405240\n    return function_404bd0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "405276",
            "decompiledFuncCode": "int64_t function_405260(void) {\n    // 0x405260\n    return function_4051a0(0);\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "405298",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405280\n    return function_404bd0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4052a0",
            "funcStartAddr": "4052a0",
            "funcEndAddr": "40531a",
            "decompiledFuncCode": "int64_t function_4052a0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4052ab\n    int64_t v2 = (int64_t)&g12; // 0x4052ab\n    int32_t * pwc; // 0x4052a0\n    int64_t v3; // 0x4052a0\n    int64_t n; // 0x4052a0\n    if (a2 == 0) {\n        goto lab_0x4052f2;\n    } else {\n        // 0x4052ad\n        if (a3 == 0) {\n            // 0x4052d8\n            return -2;\n        }\n        // 0x4052b9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4052f2;\n        } else {\n            goto lab_0x4052c4;\n        }\n    }\n  lab_0x4052f2:\n    // 0x4052f2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4052a0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4052c4;\n  lab_0x4052c4:;\n    char * wstr = (char *)v3; // 0x4052ca\n    int64_t ps; // 0x4052a0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4052ca\n    int64_t result = v5; // 0x4052ca\n    if (v5 < 0xfffffffe) {\n        // 0x4052d8\n        return result;\n    }\n    int64_t result2 = result; // 0x405309\n    if ((char)function_405590(0, v3) == 0) {\n        // 0x40530b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4052d8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "40537e",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1) {\n    uint64_t result = function_404240(33); // 0x40532e\n    char * str = (char *)result; // 0x405342\n    strncpy(str, (char *)(a1 + 44), 32);\n    *(char *)(result + 32) = 0;\n    int64_t v1 = result + (int64_t)strlen(str); // 0x405353\n    if (result >= v1) {\n        // 0x405361\n        return result;\n    }\n    int64_t v2 = v1; // 0x405359\n    v2--;\n    char * v3 = (char *)v2; // 0x40535b\n    while (*v3 == 32) {\n        // 0x405370\n        *v3 = 0;\n        if (result == v2) {\n            // break -> 0x405361\n            break;\n        }\n        v2--;\n        v3 = (char *)v2;\n    }\n    // 0x405361\n    return result;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "405528",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1, int64_t * a2, int64_t * a3, uint64_t a4) {\n    // 0x405380\n    utmpxname((char *)a1);\n    setutxent();\n    struct utmpx * v1 = getutxent(); // 0x4053b7\n    int64_t v2 = 0; // 0x4053c2\n    int64_t v3 = 0; // 0x4053c2\n    int64_t v4; // 0x405380\n    int64_t v5; // 0x405380\n    int64_t v6; // 0x405380\n    struct utmpx * v7; // 0x405380\n    struct utmpx * v8; // 0x405380\n    int64_t v9; // 0x405380\n    int64_t v10; // 0x405380\n    int64_t v11; // 0x405380\n    uint64_t v12; // 0x405380\n    int64_t v13; // 0x405380\n    int64_t v14; // 0x405380\n    int64_t v15; // 0x405380\n    int64_t v16; // 0x405380\n    int64_t v17; // 0x405380\n    if (v1 != NULL) {\n        struct utmpx * v18 = v1; // 0x4053b7\n        int64_t v19 = 0; // 0x405380\n        int64_t v20 = a1;\n        int64_t v21 = 0; // 0x405380\n        int64_t v22 = 0; // 0x405380\n        while (true) {\n            // 0x4053c4\n            v11 = v22;\n            v9 = v21;\n            v14 = v20;\n            v4 = v19;\n            v7 = v18;\n            while (true) {\n              lab_0x4053c4:\n                // 0x4053c4\n                v8 = v7;\n                v5 = v4;\n                v15 = v14;\n                v10 = v9;\n                v12 = v11;\n                v6 = (int64_t)v8;\n                if (*(char *)(v6 + 44) == 0) {\n                    goto lab_0x4053d6;\n                } else {\n                    // 0x4053cb\n                    if (v8->e0 == 7) {\n                        // 0x405460\n                        v16 = v15;\n                        if (a4 % 2 == 0) {\n                            goto lab_0x4053db;\n                        } else {\n                            uint32_t pid = *(int32_t *)(v6 + 4); // 0x405469\n                            int64_t v23 = pid; // 0x405469\n                            v16 = v23;\n                            if (pid < 1) {\n                                goto lab_0x4053db;\n                            } else {\n                                // 0x405475\n                                v16 = v23;\n                                if (kill(pid, 0) >= 0) {\n                                    goto lab_0x4053db;\n                                } else {\n                                    int32_t v24 = *__errno_location(); // 0x405489\n                                    v13 = v23;\n                                    if (v24 == 3) {\n                                        // break -> 0x4053b7\n                                        break;\n                                    }\n                                    // 0x405492\n                                    v17 = v23;\n                                    if (v12 != v10) {\n                                        goto lab_0x4053e4;\n                                    } else {\n                                        goto lab_0x4054a0;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x4053d6;\n                    }\n                }\n            }\n          lab_0x4053b7:\n            // 0x4053b7\n            v20 = v13;\n            v18 = getutxent();\n            v19 = v5;\n            v21 = v10;\n            v22 = v12;\n            v2 = v12;\n            v3 = v5;\n            if (v18 == NULL) {\n                // break -> 0x405435\n                break;\n            }\n        }\n    }\n  lab_0x405435:\n    // 0x405435\n    endutxent();\n    *a2 = v2;\n    *a3 = v3;\n    return 0;\n  lab_0x4053d6:\n    // 0x4053d6\n    v13 = v15;\n    v16 = v15;\n    if ((a4 & 2) != 0) {\n        // break -> 0x4053b7\n        goto lab_0x4053b7;\n    }\n    goto lab_0x4053db;\n  lab_0x4053db:\n    // 0x4053db\n    v17 = v16;\n    if (v12 == v10) {\n        goto lab_0x4054a0;\n    } else {\n        goto lab_0x4053e4;\n    }\n  lab_0x4054a0:;\n    int64_t v25 = v17;\n    int64_t v26; // 0x405380\n    int64_t v27; // 0x405380\n    int64_t v28; // 0x405380\n    if (v5 == 0) {\n        // 0x4054e4\n        v27 = 1;\n        v26 = 1;\n        v28 = 384;\n        if (v12 != 0) {\n            uint128_t v29 = 384 * (int128_t)v12; // 0x4054f1\n            if ((int64_t)v29 < 0) {\n                // 0x405523\n                function_404490(v25);\n                // UNREACHABLE\n            }\n            if (v29 % 0x1ff0000000000000001 != 0) {\n                // 0x405523\n                function_404490(v25);\n                // UNREACHABLE\n            }\n            // 0x405504\n            v27 = v12 + 1;\n            v26 = v10;\n            v28 = 384 * v12;\n        }\n    } else {\n        if (v12 >= 0x38e38e38e38e38) {\n            // 0x405523\n            function_404490(v25);\n            // UNREACHABLE\n        }\n        int64_t v30 = v12 + 1; // 0x4054b7\n        int64_t v31 = v12 / 2 + v30; // 0x4054be\n        v27 = v30;\n        v26 = v31;\n        v28 = 384 * v31;\n    }\n    int64_t v32 = v27; // 0x4054df\n    int64_t v33 = v26; // 0x4054df\n    int64_t v34 = function_4042a0(v5, v28); // 0x4054df\n    goto lab_0x4053e8;\n  lab_0x4053e4:\n    // 0x4053e4\n    v32 = v12 + 1;\n    v33 = v10;\n    v34 = v5;\n    goto lab_0x4053e8;\n  lab_0x4053e8:;\n    int64_t v35 = v34 + 384 * v12; // 0x4053f6\n    *(int64_t *)v35 = *(int64_t *)v8;\n    int64_t v36 = v35 + 8 & -8; // 0x405407\n    *(int64_t *)(v35 + 376) = *(int64_t *)(v6 + 376);\n    int64_t v37 = v35 - v36; // 0x405412\n    uint64_t v38 = (v37 + 384) / 8 % 0x20000000; // 0x405423\n    __asm_rep_movsq_memcpy((char *)v36, (char *)(v6 - v37), v38);\n    struct utmpx * v39 = getutxent(); // 0x405428\n    v11 = v32;\n    v9 = v33;\n    bool v40; // 0x405380\n    v14 = v38 * (v40 ? -8 : 8) + v36;\n    v4 = v34;\n    v7 = v39;\n    v2 = v32;\n    v3 = v34;\n    if (v39 == NULL) {\n        // break (via goto) -> 0x405435\n        goto lab_0x405435;\n    }\n    goto lab_0x4053c4;\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "40558d",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405537\n    int64_t v2; // 0x405530\n    int64_t result = function_405b60(a1, v2); // 0x405548\n    if ((v2 & 32) != 0) {\n        // 0x405570\n        if ((int32_t)result == 0) {\n            // 0x405574\n            *__errno_location() = 0;\n        }\n        // 0x40556a\n        return 0xffffffff;\n    }\n    // 0x405551\n    if ((int32_t)result == 0) {\n        // 0x40556a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405558\n    if (v1 == 0) {\n        // 0x40555a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40556a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055ee",
            "decompiledFuncCode": "int64_t function_405590(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405596\n    if (locale == NULL) {\n        // 0x4055c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405596\n    bool v2; // 0x405590\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x405590\n    int64_t v5 = v1; // 0x405590\n    int64_t v6 = 2; // 0x4055b5\n    unsigned char v7 = *(char *)v5; // 0x4055b5\n    char v8 = *(char *)v4; // 0x4055b5\n    char v9 = v8; // 0x4055b5\n    bool v10 = false; // 0x4055b5\n    while (v7 == v8) {\n        // 0x4055a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4055c1\n    int64_t v13 = v1; // 0x4055c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4055c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4055c1\n    unsigned char v15 = *(char *)v13; // 0x4055dd\n    char v16 = *(char *)v12; // 0x4055dd\n    char v17 = v16; // 0x4055dd\n    bool v18 = false; // 0x4055dd\n    while (v15 == v16) {\n        // 0x4055d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "405b52",
            "decompiledFuncCode": "int64_t function_4055f0(void) {\n    char * v1 = nl_langinfo(14); // 0x405606\n    char * v2 = g46; // 0x40560b\n    char * v3; // 0x4055f0\n    int64_t v4; // 0x4055f0\n    int64_t v5; // 0x4055f0\n    int64_t v6; // 0x4055f0\n    int64_t v7; // 0x4055f0\n    int32_t size; // 0x4055f0\n    int32_t size2; // 0x4055f0\n    int32_t len; // 0x4056c2\n    int64_t v8; // 0x4056c2\n    char * env_val; // 0x4056ad\n    if (v2 == NULL) {\n        // 0x4056a8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405715;\n        } else {\n            // 0x4056ba\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405715;\n            } else {\n                // 0x4056bf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4056ad\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405b45\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405715;\n                    } else {\n                        // 0x405ab9\n                        size2 = len + 14;\n                        goto lab_0x4056db;\n                    }\n                } else {\n                    goto lab_0x4056db;\n                }\n            }\n        }\n    } else {\n        // 0x4055f0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40562a;\n    }\n  lab_0x40595c:;\n    // 0x40595c\n    struct _IO_FILE * stream; // 0x40579b\n    int32_t v10 = __uflow(stream); // 0x40595f\n    int64_t v11; // 0x4055f0\n    int64_t v12 = v11; // 0x405969\n    int64_t v13; // 0x4055f0\n    int64_t v14 = v13; // 0x405969\n    int32_t v15 = v10; // 0x405969\n    int64_t v16; // 0x4055f0\n    int64_t v17 = v16; // 0x405969\n    int64_t v18 = v11; // 0x405969\n    int64_t v19 = v13; // 0x405969\n    int64_t v20 = v16; // 0x405969\n    if (v10 == -1) {\n        // break -> 0x40596f\n        goto lab_0x40596f;\n    }\n    goto lab_0x4057e9;\n  lab_0x4057de:;\n    // 0x4057de\n    int64_t v90; // 0x4055f0\n    int64_t * v32; // 0x4057d0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4055f0\n    v12 = v89;\n    int64_t v91; // 0x4055f0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4055f0\n    v17 = v92;\n    goto lab_0x4057e9;\n  lab_0x4057e9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4055f0\n    int32_t v25; // bp-120, 0x4055f0\n    int32_t v26; // bp-184, 0x4055f0\n    int64_t v27; // 0x40579b\n    int64_t v28; // 0x4057b8\n    int64_t v29; // 0x4057bd\n    int64_t * v30; // 0x4057d4\n    switch (c) {\n        case 32: {\n            goto lab_0x4057d0;\n        }\n        case 10: {\n            goto lab_0x4057d0;\n        }\n        case 9: {\n            goto lab_0x4057d0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4059c1\n            int32_t v33; // 0x4055f0\n            char v34; // 0x4055f0\n            int32_t v35; // 0x4059ce\n            if (v31 < *v30) {\n                // 0x4059a0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4059cb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4059c1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4059a0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4059cb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4059b0\n                v36 = v33;\n            }\n            // 0x405a9f\n            if (v36 == -1) {\n                // break -> 0x40596f\n                break;\n            }\n            goto lab_0x4057d0;\n        }\n        default: {\n            // 0x4057ff\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40596f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405828\n            int64_t v39 = v37 + 4; // 0x40582a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405836\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405838\n            while (v41 == 0) {\n                // 0x405828\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405856\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405862\n            int64_t v45 = v43 + 4; // 0x405864\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405870\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405872\n            while (v47 == 0) {\n                // 0x405862\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40585f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405888\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405898\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40589c\n            int64_t v52 = v51 + v48; // 0x4058a5\n            int64_t * mem; // 0x4055f0\n            int64_t v53; // 0x4055f0\n            int64_t v54; // 0x4055f0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4059db\n                int64_t v56 = v55 + 3; // 0x4059e7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4058c1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4058d0\n            if (mem == NULL) {\n                // 0x405afc\n                free((int64_t *)v21);\n                function_405b60(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x405774;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4058e8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4058f2\n            uint32_t v62 = (int32_t)v59; // 0x4058f5\n            int64_t v63; // 0x4055f0\n            if (v62 >= 8) {\n                // 0x405a04\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405a1e\n                int64_t v66 = v61 - v65; // 0x405a22\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405a2d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405a3e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405a3e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405a3b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405acf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405907\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40590b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40591b\n            int64_t v74 = v60 - 1; // 0x40591f\n            uint32_t v75 = (int32_t)v73; // 0x405924\n            int64_t v76; // 0x4055f0\n            if (v75 >= 8) {\n                // 0x405a52\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405a5c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405a6c\n                int64_t v80 = v74 - v79; // 0x405a70\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405a7b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405a8b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405a89\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405ae6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405aee\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405936\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40593a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405b33\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40594e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4057de;\n            } else {\n                goto lab_0x40595c;\n            }\n        }\n    }\n  lab_0x4057d0:;\n    int64_t v93 = v23; // 0x4055f0\n    int64_t v94 = v22; // 0x4055f0\n    int64_t v95 = v21; // 0x4055f0\n    goto lab_0x4057d0_2;\n  lab_0x405715:;\n    int64_t * mem3 = malloc(size); // 0x405715\n    int64_t v97 = (int64_t)&g12; // 0x405720\n    int64_t v98; // 0x4055f0\n    int64_t path; // 0x4055f0\n    if (mem3 == NULL) {\n        goto lab_0x4056f2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405715\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405736;\n    }\n  lab_0x40562a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x40561d\n    char v100 = *v3; // 0x40562a\n    int64_t v101; // 0x4055f0\n    if (v100 == 0) {\n        // 0x405684\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4055f0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4055f0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405670\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405677;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405640\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40564d\n        char v107 = *(char *)v106; // 0x405652\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405684\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40565b\n    v104 = v103 + 1;\n  lab_0x405677:\n    // 0x405684\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4056f2:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40562a;\n  lab_0x405736:;\n    int64_t v109 = v98 + path; // 0x405736\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405762\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405791\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405ac2\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x4057b5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4057d0_2:;\n                uint64_t v96 = *v32; // 0x4057d0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40595c;\n                } else {\n                    goto lab_0x4057de;\n                }\n            }\n          lab_0x40596f:\n            // 0x40596f\n            function_405b60(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40598e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405774;\n  lab_0x4056db:;\n    int64_t * mem4 = malloc(size2); // 0x4056db\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405781\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405736;\n    } else {\n        goto lab_0x4056f2;\n    }\n  lab_0x405774:\n    // 0x405774\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4056f2;\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405bdb",
            "decompiledFuncCode": "int64_t function_405b60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405b67\n    if (fileno(stream) < 0) {\n        // 0x405bc7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405b7a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405bab\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405bc7\n            return fclose(stream);\n        }\n    }\n    // 0x405b7c\n    if ((int32_t)function_405be0(a1, v1) == 0) {\n        // 0x405bc7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405b88\n    int32_t v3 = *v2; // 0x405b90\n    int64_t result = fclose(stream); // 0x405b9e\n    if (v3 != 0) {\n        // 0x405bd0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405ba0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405be0",
            "funcStartAddr": "405be0",
            "funcEndAddr": "405c20",
            "decompiledFuncCode": "int64_t function_405be0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405bfa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405bfa\n        return fflush(stream);\n    }\n    // 0x405c08\n    function_405c20(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405c20",
            "funcStartAddr": "405c20",
            "funcEndAddr": "405c77",
            "decompiledFuncCode": "int64_t function_405c20(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405c20\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405c2a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405c5b\n    int64_t result = -1; // 0x405c64\n    if (v1 != -1) {\n        // 0x405c66\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405c72\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c80",
            "funcStartAddr": "405c80",
            "funcEndAddr": "405cdd",
            "decompiledFuncCode": "int64_t function_405c80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405c80\n    return function_4013e8();\n}\n"
        },
        {
            "funcName": "function_405ce0",
            "funcStartAddr": "405ce0",
            "funcEndAddr": "405ce1",
            "decompiledFuncCode": "int64_t function_405ce0(void) {\n    // 0x405ce0\n    int64_t result; // 0x405ce0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405d08",
            "decompiledFuncCode": "int64_t function_405cf0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405cf0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_405d08",
            "funcStartAddr": "405d08",
            "funcEndAddr": "405d28",
            "decompiledFuncCode": "int64_t function_405d08(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x405d12\n    while (*(int64_t *)v1 != -1) {\n        // 0x405d13\n        v1 -= 8;\n    }\n    // 0x405d24\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_users.elf"
}