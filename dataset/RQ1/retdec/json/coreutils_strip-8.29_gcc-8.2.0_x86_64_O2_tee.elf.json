{
    "funcInfo": [
        {
            "funcName": "function_4018c0",
            "funcStartAddr": "4018c0",
            "funcEndAddr": "4018c5",
            "decompiledFuncCode": "int64_t function_4018c0(void) {\n    // 0x4018c0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018c5",
            "funcStartAddr": "4018c5",
            "funcEndAddr": "4018ca",
            "decompiledFuncCode": "int64_t function_4018c5(void) {\n    // 0x4018c5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018ca",
            "funcStartAddr": "4018ca",
            "funcEndAddr": "4018cf",
            "decompiledFuncCode": "int64_t function_4018ca(void) {\n    // 0x4018ca\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018cf",
            "funcStartAddr": "4018cf",
            "funcEndAddr": "4018d4",
            "decompiledFuncCode": "int64_t function_4018cf(void) {\n    // 0x4018cf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018d4",
            "funcStartAddr": "4018d4",
            "funcEndAddr": "4018d9",
            "decompiledFuncCode": "int64_t function_4018d4(void) {\n    // 0x4018d4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018d9",
            "funcStartAddr": "4018d9",
            "funcEndAddr": "4018de",
            "decompiledFuncCode": "int64_t function_4018d9(void) {\n    // 0x4018d9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018e0",
            "funcStartAddr": "4018e0",
            "funcEndAddr": "401ad0",
            "decompiledFuncCode": "int64_t function_4018e0(int64_t a1, int64_t a2) {\n    // 0x4018e0\n    function_4027c0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x4018e0\n    function_406390(0x402640, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    g39 = 0;\n    g38 = 0;\n    while (true) {\n        // 0x401933\n        while (true) {\n          lab_0x401933_2:;\n            // 0x401933\n            int64_t v2; // 0x4018e0\n            uint32_t v3 = (int32_t)function_405bf0(a1 & 0xffffffff, a2, \"aip\", &g4, 0, v2);\n            switch (v3) {\n                case -1: {\n                    goto lab_0x401a33;\n                }\n                case 97: {\n                    // 0x401a18\n                    g39 = 1;\n                    goto lab_0x401933_2;\n                }\n                default: {\n                    if (v3 <= 97) {\n                        if (v3 == -131) {\n                            // 0x40197b\n                            function_404870((int64_t)g30, \"tee\", \"GNU coreutils\", (int64_t)g19, \"Mike Parker\", \"Richard M. Stallman\");\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v3 == -130) {\n                            // 0x401a0b\n                            function_401f50(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x401a92;\n                    }\n                    if (v3 != 105) {\n                        if (v3 != 112) {\n                          lab_0x401a92:\n                            // 0x401a92\n                            function_401f50(1);\n                            // UNREACHABLE\n                        }\n                        // 0x4019c1\n                        if (g53 != 0) {\n                            // break -> 0x4019cd\n                            break;\n                        }\n                        // 0x401a24\n                        g37 = 2;\n                    } else {\n                        // 0x401963\n                        g38 = 1;\n                    }\n                    goto lab_0x401933_2;\n                }\n            }\n        }\n    }\n  lab_0x401a33:\n    // 0x401a33\n    if (g38 != 0) {\n        // 0x401a70\n        signal(SIGINT, SIG_IGN);\n    }\n    // 0x401a3c\n    if (g37 != 0) {\n        // 0x401a81\n        signal(SIGPIPE, SIG_IGN);\n    }\n    int32_t v4 = *(int32_t *)0x60a29c; // 0x401a45\n    uint64_t v5 = function_401bb0((int32_t)a1 - v4, 8 * (int64_t)v4 + a2, v4, (int64_t)&g4); // 0x401a54\n    if (close(0) == 0) {\n        // 0x401a66\n        return v5 % 256 ^ 1;\n    }\n    // 0x401a9c\n    error(1, *__errno_location(), \"%s\", dcgettext(NULL, \"standard input\", 5));\n    return &g55;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401ad0",
            "funcEndAddr": "401afb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401ad0\n    int64_t v1; // 0x401ad0\n    __libc_start_main(0x4018e0, (int32_t)a4, (char **)&v1, (void (*)())0x406320, (void (*)())0x406380, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401afb",
            "funcStartAddr": "401afb",
            "funcEndAddr": "401b1a",
            "decompiledFuncCode": "int64_t function_401afb(void) {\n    // 0x401afb\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_401b1a",
            "funcStartAddr": "401b1a",
            "funcEndAddr": "401b51",
            "decompiledFuncCode": "int64_t function_401b1a(void) {\n    // 0x401b1a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401b51",
            "funcStartAddr": "401b51",
            "funcEndAddr": "401ba8",
            "decompiledFuncCode": "int64_t function_401b51(void) {\n    // 0x401b51\n    if (g34 != 0) {\n        // 0x401ba7\n        int64_t result; // 0x401b51\n        return result;\n    }\n    int64_t v1 = g35; // 0x401b84\n    int64_t result2; // 0x401b96\n    if (g35 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401b96\n        result2 = function_401afb();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401b86\n        v1++;\n    }\n    // 0x401b7a\n    g35 = v1;\n    // 0x401b96\n    result2 = function_401afb();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ba8",
            "funcStartAddr": "401ba8",
            "funcEndAddr": "401bad",
            "decompiledFuncCode": "int64_t function_401ba8(void) {\n    // 0x401ba8\n    return function_401b1a();\n}\n"
        },
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401f49",
            "decompiledFuncCode": "int64_t function_401bb0(int32_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    // 0x401bb0\n    function_4026f0(g31, 2, &g1);\n    int32_t v1 = a1 + 1; // 0x401bf5\n    int64_t v2 = 8 * (int64_t)v1; // 0x401c05\n    if (v1 < 0) {\n        // 0x401f44\n        function_404c00(v2);\n        // UNREACHABLE\n    }\n    int64_t v3 = function_4049b0(v2); // 0x401c1b\n    int64_t v4 = a2 - 8; // 0x401c39\n    int64_t * v5 = (int64_t *)v3; // 0x401c49\n    *v5 = (int64_t)g30;\n    *(int64_t *)v4 = (int64_t)dcgettext(NULL, \"standard output\", 5);\n    setvbuf(g30, (char *)((int32_t)\"standard output\" ^ (int32_t)\"standard output\"), 2, 0);\n    int64_t v6 = 8 * (int64_t)a1;\n    int32_t v7 = 1; // 0x401c70\n    int64_t v8 = 1; // 0x401c70\n    int64_t v9; // 0x401bb0\n    int64_t v10; // 0x401bb0\n    int32_t v11; // 0x401bb0\n    if (a1 < 1) {\n        goto lab_0x401d20;\n    } else {\n        int64_t v12 = g39 != 0 ? (int64_t)&g1 : (int64_t)&g2; // 0x401bd4\n        int64_t v13 = a2 + 8 + (v6 + 0x7fffffff8 & 0x7fffffff8); // 0x401c84\n        int32_t v14 = 1; // 0x401c91\n        int64_t v15 = 1; // 0x401c91\n        int64_t v16 = a2; // 0x401c91\n        int64_t v17 = v3; // 0x401c91\n        while (true) {\n            int32_t v18 = v14;\n            int64_t v19 = v16;\n            int64_t v20 = v15;\n            int64_t v21 = v17 + 8;\n            int64_t * v22 = (int64_t *)v19;\n            int64_t stream = function_402720(*v22, v12); // 0x401cc1\n            *(int64_t *)v21 = stream;\n            while (stream != 0) {\n                int64_t v23 = v19 + 8; // 0x401ca4\n                int64_t v24 = v20 + 1; // 0x401ca8\n                setvbuf((struct _IO_FILE *)stream, NULL, 2, 0);\n                v11 = v18;\n                v9 = v24;\n                v10 = 0;\n                if (v13 == v23) {\n                    // break (via goto) -> 0x401d1b\n                    goto lab_0x401d1b;\n                }\n                v19 = v23;\n                v20 = v24;\n                v21 += 8;\n                v22 = (int64_t *)v19;\n                stream = function_402720(*v22, v12);\n                *(int64_t *)v21 = stream;\n            }\n            int64_t v25 = function_404260(0, 3, *v22); // 0x401cda\n            uint32_t err_num = *__errno_location(); // 0x401cef\n            v16 = v19 + 8;\n            error((int32_t)((int32_t)&g36 < 1 | (int32_t)&g36 == 1), err_num, \"%s\", (char *)v25);\n            v14 = 0;\n            v15 = v20;\n            v17 = v21;\n            if (v13 == v16) {\n                // 0x401d1b\n                v11 = 0;\n                v9 = v20;\n                v10 = err_num;\n                goto lab_0x401d1b;\n            }\n        }\n    }\n  lab_0x401d5b_2:;\n    // 0x401d5b\n    int32_t v26; // 0x401bb0\n    int32_t v27 = v26; // 0x401d5f\n    int64_t v28; // 0x401bb0\n    int64_t v29 = v28; // 0x401d5f\n    int32_t size; // 0x401d3c\n    if (size == -1) {\n        char * format = dcgettext(NULL, \"read error\", 5); // 0x401f08\n        uint32_t err_num2 = *__errno_location(); // 0x401f1a\n        error(0, err_num2, format);\n        v27 = 0;\n        v29 = err_num2;\n        goto lab_0x401d65;\n    } else {\n        goto lab_0x401d65;\n    }\n  lab_0x401e8f:;\n    // 0x401e8f\n    int64_t v30; // 0x401bb0\n    int64_t v31 = v30 + 8; // 0x401e8f\n    int32_t v32; // 0x401bb0\n    int32_t v33 = v32; // 0x401e9a\n    int64_t v34; // 0x401bb0\n    int64_t v35 = v34; // 0x401e9a\n    int64_t v36; // 0x401bb0\n    int64_t v37 = v36; // 0x401e9a\n    int32_t v38 = v32; // 0x401e9a\n    int64_t v39 = v34; // 0x401e9a\n    int64_t v40 = v36; // 0x401e9a\n    int64_t v41; // 0x401bb0\n    int64_t v42 = v41 + 8; // 0x401e9a\n    int64_t v43 = v31; // 0x401e9a\n    if (v31 == v6 + a2) {\n        // break -> 0x401e00\n        goto lab_0x401e00;\n    }\n    goto lab_0x401ea0;\n  lab_0x401e30:;\n    int64_t v47; // 0x401ea0\n    struct _IO_FILE * stream2; // 0x401eb8\n    int64_t v50; // 0x401ecb\n    if (v47 == v50) {\n        // 0x401e35\n        clearerr_unlocked(stream2);\n    }\n    int64_t v53 = function_404260(0, 3, *(int64_t *)v30); // 0x401e53\n    uint32_t err_num3; // 0x401ec8\n    error((int32_t)((int32_t)&g36 < 1 | (int32_t)&g36 == 1), err_num3, \"%s\", (char *)v53);\n    int32_t v51 = 0; // 0x401e87\n    int64_t v52 = err_num3; // 0x401e87\n    goto lab_0x401e8b;\n  lab_0x401e8b:;\n    // 0x401e8b\n    int64_t * v46; // 0x401ea0\n    *v46 = 0;\n    v32 = v51;\n    int64_t v44; // 0x401bb0\n    v34 = v44 - 1;\n    v36 = v52;\n    goto lab_0x401e8f;\n  lab_0x401d1b:\n    // 0x401d1b\n    v8 = v9;\n    v7 = v11;\n    int32_t v54 = v7; // 0x401d1e\n    int64_t v55 = v10; // 0x401d1e\n    if (v8 == 0) {\n        goto lab_0x401d6d;\n    } else {\n        goto lab_0x401d20;\n    }\n  lab_0x401d20:;\n    // 0x401d20\n    int64_t data; // bp-8248, 0x401bb0\n    int64_t v56 = &data;\n    int32_t v57 = v7; // 0x401d2d\n    int64_t v58 = v8; // 0x401d2d\n    while (true) {\n        int64_t v59 = v58;\n        int32_t v60 = v57;\n        size = read(0, &data, 0x2000);\n        if (size >= 0) {\n            // 0x401e10\n            v27 = v60;\n            v29 = v56;\n            if (size == 0) {\n                // break -> 0x401d65\n                break;\n            }\n            int64_t v49 = size; // 0x401d3c\n            v33 = v60;\n            v35 = v59;\n            v37 = v56;\n            v38 = v60;\n            v39 = v59;\n            v40 = v56;\n            v42 = v3;\n            v43 = v4;\n            if (a1 >= 0) {\n                while (true) {\n                  lab_0x401ea0:\n                    // 0x401ea0\n                    v30 = v43;\n                    v41 = v42;\n                    v44 = v39;\n                    int32_t v45 = v38;\n                    v46 = (int64_t *)v41;\n                    v47 = *v46;\n                    v32 = v45;\n                    v34 = v44;\n                    v36 = v40;\n                    if (v47 == 0) {\n                        goto lab_0x401e8f;\n                    } else {\n                        // 0x401ea8\n                        stream2 = (struct _IO_FILE *)v47;\n                        int32_t v48 = fwrite_unlocked(&data, size, 1, stream2); // 0x401eb8\n                        v32 = v45;\n                        v34 = v44;\n                        v36 = v49;\n                        if (v48 == 1) {\n                            goto lab_0x401e8f;\n                        } else {\n                            // 0x401ec3\n                            err_num3 = *__errno_location();\n                            v50 = (int64_t)g30;\n                            if (err_num3 != 32) {\n                                goto lab_0x401e30;\n                            } else {\n                                // 0x401edc\n                                if ((g37 & -3) == 1) {\n                                    goto lab_0x401e30;\n                                } else {\n                                    // 0x401eee\n                                    v51 = v45;\n                                    v52 = v49;\n                                    if (v47 == v50) {\n                                        // 0x401f3a\n                                        clearerr_unlocked(stream2);\n                                        v51 = v45;\n                                        v52 = v49;\n                                    }\n                                    goto lab_0x401e8b;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            int32_t v61 = *__errno_location(); // 0x401d52\n            v26 = v60;\n            v28 = v56;\n            v33 = v60;\n            v35 = v59;\n            v37 = v56;\n            if (v61 != 4) {\n                goto lab_0x401d5b_2;\n            }\n        }\n      lab_0x401e00:\n        // 0x401e00\n        v57 = v33;\n        v58 = v35;\n        v26 = v33;\n        v28 = v37;\n        if (v35 == 0) {\n            goto lab_0x401d5b_2;\n        }\n    }\n    goto lab_0x401d65;\n  lab_0x401d65:\n    // 0x401d65\n    v54 = v27;\n    v55 = v29;\n    int32_t v62 = v27; // 0x401d6b\n    if (a1 < 1) {\n      lab_0x401dd8:\n        // 0x401dd8\n        free(v5);\n        return v62 % 256;\n    }\n    goto lab_0x401d6d;\n  lab_0x401d6d:;\n    int64_t v63 = a1;\n    int64_t v64 = 1; // 0x401d78\n    int64_t v65; // 0x401bb0\n    int64_t v66; // 0x401d87\n    int64_t v67; // 0x401d87\n    while (true) {\n        // 0x401d82\n        v65 = v64;\n        v66 = 8 * v65;\n        v67 = *(int64_t *)(v66 + v3);\n        if (v67 != 0) {\n            // 0x401d90\n            if ((int32_t)function_404c40(v67, v55) != 0) {\n                // break -> 0x401d99\n                break;\n            }\n        }\n        // 0x401d78\n        v64 = v65 + 1;\n        v62 = v54;\n        if (v64 > v63) {\n            // break (via goto) -> 0x401dd8\n            goto lab_0x401dd8;\n        }\n    }\n    int64_t v68 = v65 + 1; // 0x401daa\n    int64_t v69 = function_404260(0, 3, *(int64_t *)(v66 + v4)); // 0x401dae\n    uint32_t err_num4 = *__errno_location(); // 0x401dc5\n    error(0, err_num4, \"%s\", (char *)v69);\n    int64_t v70 = err_num4; // 0x401dd6\n    while (v68 <= v63) {\n        // 0x401d82\n        v64 = v68;\n        while (true) {\n            // 0x401d82\n            v65 = v64;\n            v66 = 8 * v65;\n            v67 = *(int64_t *)(v66 + v3);\n            if (v67 != 0) {\n                // 0x401d90\n                if ((int32_t)function_404c40(v67, v70) != 0) {\n                    // break -> 0x401d99\n                    break;\n                }\n            }\n            // 0x401d78\n            v64 = v65 + 1;\n            v62 = 0;\n            if (v64 > v63) {\n                // break (via goto) -> 0x401dd8\n                goto lab_0x401dd8;\n            }\n        }\n        // 0x401d99\n        v68 = v65 + 1;\n        v69 = function_404260(0, 3, *(int64_t *)(v66 + v4));\n        err_num4 = *__errno_location();\n        error(0, err_num4, \"%s\", (char *)v69);\n        v70 = err_num4;\n    }\n    // 0x401dd8\n    free(v5);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401f50",
            "funcStartAddr": "401f50",
            "funcEndAddr": "402285",
            "decompiledFuncCode": "int64_t function_401f50(int32_t status) {\n    // 0x401f50\n    if (status != 0) {\n        // 0x401f6a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401f8f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401f96\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Copy standard input to each FILE, and also to standard output.\\n\\n  -a, --append              append to the given FILEs, do not overwrite\\n  -i, --ignore-interrupts   ignore interrupt signals\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -p                        diagnose errors writing to non pipes\\n      --output-error[=MODE]   set behavior on write error.  See MODE below\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nMODE determines behavior with write errors on the outputs:\\n  'warn'         diagnose errors writing to any output\\n  'warn-nopipe'  diagnose errors writing to any output not a pipe\\n  'exit'         exit on error writing to any output\\n  'exit-nopipe'  exit on error writing to any output not a pipe\\nThe default MODE for the -p option is 'warn-nopipe'.\\nThe default operation when --output-error is not specified, is to\\nexit immediately on error writing to a pipe, and diagnose errors\\nwriting to non pipe outputs.\\n\", 5), g30);\n    int64_t v1 = &g3; // bp-136, 0x402063\n    bool v2; // 0x401f50\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4020e8\n    int64_t v6 = *(int64_t *)v5; // 0x4020ec\n    int64_t v7 = 4; // 0x4020f2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"tee\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4020fe\n        char v11 = *(char *)v9; // 0x4020fe\n        char v12 = v11; // 0x4020fe\n        bool v13 = false; // 0x4020fe\n        while (v10 == v11) {\n            // 0x4020f4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4020fe\n            int64_t v15 = v8 + v3; // 0x4020fe\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40210a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x40210a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40221c;\n        } else {\n            // 0x402206\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40225b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40216c;\n            } else {\n                goto lab_0x40221c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40216c;\n        } else {\n            // 0x402152\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40225b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40216c;\n            } else {\n                goto lab_0x40216c;\n            }\n        }\n    }\n  lab_0x40221c:\n    // 0x40221c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4021ac\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401f8f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40216c:\n    // 0x40216c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4021ac\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401f8f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402290",
            "funcStartAddr": "402290",
            "funcEndAddr": "40229a",
            "decompiledFuncCode": "int64_t function_402290(void) {\n    // 0x402290\n    return function_401f50(1);\n}\n"
        },
        {
            "funcName": "function_4022a0",
            "funcStartAddr": "4022a0",
            "funcEndAddr": "4023b6",
            "decompiledFuncCode": "int64_t function_4022a0(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x4022c1\n    int32_t len = strlen(str); // 0x4022c1\n    if (a2 == 0) {\n        // 0x40238d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x402327\n    int64_t v4 = a3; // 0x4022a0\n    int64_t v5 = a2; // 0x40232e\n    int64_t str4; // 0x4022a0\n    int64_t v6; // 0x4022a0\n    int32_t v7; // 0x4022a0\n    int32_t v8; // 0x4022a0\n    int32_t v9; // 0x4022a0\n    int64_t v10; // 0x4022a0\n    int64_t result; // 0x4022a0\n    int32_t v11; // 0x402323\n    char * str2; // 0x402342\n    while (true) {\n        // 0x402337\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40234b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40238d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x40235f\n                break;\n            }\n            // 0x4022f0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x4022fe\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x402327\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x402363\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x40236a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x402337\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x402337\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40234b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40238d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x40235f\n                    break;\n                }\n                // 0x4022f0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x4022fe\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x402327\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x40235f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x402378:\n    // 0x40238d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_4023c0",
            "funcStartAddr": "4023c0",
            "funcEndAddr": "402431",
            "decompiledFuncCode": "int64_t function_4023c0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x4023c0\n    if (a3 == -1) {\n        // 0x402420\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x4023d5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x4023e4\n    function_4043c0(1, a1);\n    function_4040b0(0, 8, a2);\n    error(0, 0, format);\n    return &g55;\n}\n"
        },
        {
            "funcName": "function_402440",
            "funcStartAddr": "402440",
            "funcEndAddr": "402558",
            "decompiledFuncCode": "int64_t function_402440(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40246d\n    fputs_unlocked(v1, g33);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x4024e0\n        int64_t v5; // 0x4024e7\n        int64_t v6; // 0x402507\n        while (v3 != 0) {\n            // 0x4024cb\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x402490\n                break;\n            }\n            // 0x4024dd\n            v4 = v3 + 1;\n            v5 = function_4043e0(v2);\n            __fprintf_chk(g33, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x402510\n                goto lab_0x402510;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x402493\n        int64_t v8 = function_4043e0(v2); // 0x40249d\n        __fprintf_chk(g33, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x4024bd\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x4024cb\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x402490\n                    break;\n                }\n                // 0x4024dd\n                v4 = v3 + 1;\n                v5 = function_4043e0(v2);\n                __fprintf_chk(g33, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x402510\n                    goto lab_0x402510;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x402490\n            v7 = v3 + 1;\n            v8 = function_4043e0(v2);\n            __fprintf_chk(g33, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x402510:;\n    int64_t v10 = (int64_t)g33; // 0x402510\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x402517\n    uint64_t result = *v11; // 0x402517\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x402540\n        return __overflow(g33, 10);\n    }\n    // 0x402521\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402560",
            "funcStartAddr": "402560",
            "funcEndAddr": "4025d0",
            "decompiledFuncCode": "int64_t function_402560(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_4022a0(a2, v2, v1, a5); // 0x40258c\n    int64_t result = v3; // 0x402594\n    if (v3 < 0) {\n        // 0x4025a8\n        function_4023c0((int64_t)a1, a2, v3);\n        function_402440(v2, v1, a5);\n        result = -1;\n    }\n    // 0x402596\n    return result;\n}\n"
        },
        {
            "funcName": "function_4025d0",
            "funcStartAddr": "4025d0",
            "funcEndAddr": "40261d",
            "decompiledFuncCode": "int64_t function_4025d0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x4025d0\n    if (result == 0) {\n        // 0x402611\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x402608\n    int32_t n = a4; // 0x402608\n    int64_t v1 = result; // 0x40260f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x402611\n        return result;\n    }\n    int64_t str3 = str2; // 0x40260f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x4025f0\n    int64_t result2 = 0; // 0x4025fd\n    while (v2 != 0) {\n        // 0x4025ff\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x402611\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x402611\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402620",
            "funcStartAddr": "402620",
            "funcEndAddr": "402628",
            "decompiledFuncCode": "int64_t function_402620(int64_t a1) {\n    // 0x402620\n    g41 = a1;\n    int64_t result; // 0x402620\n    return result;\n}\n"
        },
        {
            "funcName": "function_402630",
            "funcStartAddr": "402630",
            "funcEndAddr": "402638",
            "decompiledFuncCode": "int64_t function_402630(int64_t a1) {\n    // 0x402630\n    g40 = a1;\n    int64_t result; // 0x402630\n    return result;\n}\n"
        },
        {
            "funcName": "function_402640",
            "funcStartAddr": "402640",
            "funcEndAddr": "4026de",
            "decompiledFuncCode": "int64_t function_402640(void) {\n    // 0x402640\n    int32_t * err_num; // 0x402656\n    if ((int32_t)function_405cf0((int64_t)g30) == 0) {\n        goto lab_0x40266c;\n    } else {\n        // 0x402656\n        err_num = __errno_location();\n        if (g40 == 0) {\n            goto lab_0x402683;\n        } else {\n            // 0x402667\n            if (*err_num != 32) {\n                goto lab_0x402683;\n            } else {\n                goto lab_0x40266c;\n            }\n        }\n    }\n  lab_0x40266c:;\n    int64_t result = function_405cf0((int64_t)g33); // 0x402673\n    if ((int32_t)result == 0) {\n        // 0x40267c\n        return result;\n    }\n    // 0x4026be\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x402683:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40268f\n    if (g41 == 0) {\n        // 0x4026c9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4026a3\n        error(0, *err_num, \"%s: %s\", (char *)function_404230((int64_t)g41), v1);\n    }\n    // 0x4026be\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4026e0",
            "funcStartAddr": "4026e0",
            "funcEndAddr": "4026e5",
            "decompiledFuncCode": "int64_t function_4026e0(void) {\n    // 0x4026e0\n    int64_t fd; // 0x4026e0\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_4026f0",
            "funcStartAddr": "4026f0",
            "funcEndAddr": "402711",
            "decompiledFuncCode": "int64_t function_4026f0(int64_t stream, int64_t advice, int64_t * a3) {\n    // 0x4026f0\n    if (stream == 0) {\n        // 0x402710\n        int64_t result; // 0x4026f0\n        return result;\n    }\n    // 0x4026f5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402720",
            "funcStartAddr": "402720",
            "funcEndAddr": "4027b3",
            "decompiledFuncCode": "int64_t function_402720(int64_t file_path, int64_t a2) {\n    char * mode = (char *)a2; // 0x402727\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x402727\n    int64_t result = (int64_t)file; // 0x402727\n    if (file == NULL) {\n        // 0x402741\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x402737\n    if (v1 >= 3) {\n        // 0x402741\n        return result;\n    }\n    int32_t fd = function_404400((int64_t)v1, a2); // 0x40275a\n    if (fd < 0) {\n        int32_t * v2 = __errno_location(); // 0x402798\n        function_404c40(result, a2);\n        // 0x402741\n        return 0;\n    }\n    // 0x40275e\n    if ((int32_t)function_404c40(result, a2) == 0) {\n        struct _IO_FILE * v3 = fdopen(fd, mode); // 0x402770\n        if (v3 != NULL) {\n            // 0x402741\n            return (int64_t)v3;\n        }\n    }\n    int32_t * v4 = __errno_location(); // 0x40277d\n    close(fd);\n    // 0x402741\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4027c0",
            "funcStartAddr": "4027c0",
            "funcEndAddr": "402859",
            "decompiledFuncCode": "int64_t function_4027c0(int64_t str) {\n    // 0x4027c0\n    if (str == 0) {\n        // 0x402839\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4027ce\n    int64_t result = (int64_t)found_char_pos; // 0x4027ce\n    if (found_char_pos == NULL) {\n        // 0x402829\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4027d8\n    if (v1 - str < 7) {\n        // 0x402829\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x4027e8\n    bool v2; // 0x4027c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4027c0\n    int64_t v5 = result - 6; // 0x4027c0\n    int64_t v6 = 7; // 0x4027f6\n    unsigned char v7 = *(char *)v5; // 0x4027f6\n    char v8 = *(char *)v4; // 0x4027f6\n    char v9 = v8; // 0x4027f6\n    bool v10 = false; // 0x4027f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402800\n    int64_t v13 = v1; // 0x402800\n    int64_t v14 = 3; // 0x402800\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402829\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402812\n    char v16 = *(char *)v12; // 0x402812\n    char v17 = v16; // 0x402812\n    bool v18 = false; // 0x402812\n    while (v15 == v16) {\n        // 0x402802\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40281c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40281e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x402829\n    g42 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402860",
            "funcStartAddr": "402860",
            "funcEndAddr": "402952",
            "decompiledFuncCode": "int64_t function_402860(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402874\n    int64_t result = (int64_t)v1; // 0x402874\n    if (result != a1) {\n        // 0x402881\n        return result;\n    }\n    int64_t v2 = function_405db0(); // 0x402890\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402946\n    if (v3 == 85) {\n        // 0x4028a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402938\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4028ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x4028db\n        // 0x402881\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402938\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40291d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40292a\n    // 0x402881\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402960",
            "funcStartAddr": "402960",
            "funcEndAddr": "4029b7",
            "decompiledFuncCode": "int64_t function_402960(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402960\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4029a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4029b7",
            "funcStartAddr": "4029b7",
            "funcEndAddr": "403b81",
            "decompiledFuncCode": "int64_t function_4029b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402a01\n    int64_t v3 = 0; // 0x402a01\n    int64_t v4; // 0x4029b7\n    int64_t v5; // 0x4029b7\n    int64_t v6; // 0x4029b7\n    int64_t v7; // 0x4029b7\n    int64_t v8; // 0x4029b7\n    int64_t v9; // 0x4029b7\n    int64_t v10; // 0x4029b7\n    int64_t v11; // 0x4029b7\n    int64_t v12; // 0x4029b7\n    int64_t v13; // 0x4029b7\n    int64_t v14; // 0x4029b7\n    int64_t v15; // 0x4029b7\n    int64_t v16; // 0x4029b7\n    int64_t v17; // 0x4029b7\n    int64_t v18; // 0x4029b7\n    int64_t result; // 0x4029b7\n    int64_t v19; // 0x4029b7\n    int32_t wc; // bp+132, 0x4029b7\n    int64_t ps; // bp+136, 0x4029b7\n    char v20; // 0x402f70\n    int64_t v21; // 0x402f70\n    int64_t v22; // 0x403318\n    int64_t v23; // 0x4029b7\n    int64_t v24; // 0x403337\n    int32_t v25; // 0x4029b7\n    while (true) {\n      lab_0x402a08_2:\n        // 0x402a08\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4029b7\n        int64_t v27; // 0x402a3c\n        while (true) {\n          lab_0x402a08:\n            // 0x402a08\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402a13\n            if (v15 == -1) {\n                // 0x402a15\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402a23\n            if (v28) {\n                // break (via goto) -> 0x403188\n                goto lab_0x403188;\n            }\n            // 0x402a2c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g54 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40301b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402b61;\n                    }\n                    // 0x40343d\n                    v26 = v5 + 1;\n                    goto lab_0x402a08;\n                }\n                case 7: {\n                    goto lab_0x402b61;\n                }\n                case 8: {\n                    goto lab_0x402b61;\n                }\n                case 9: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402b61;\n                }\n                case 12: {\n                    goto lab_0x402b61;\n                }\n                case 13: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402b2d;\n                }\n                case 36: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402b61;\n                }\n                case 38: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402b61;\n                }\n                case 44: {\n                    goto lab_0x402b61;\n                }\n                case 45: {\n                    goto lab_0x402b61;\n                }\n                case 46: {\n                    goto lab_0x402b61;\n                }\n                case 47: {\n                    goto lab_0x402b61;\n                }\n                case 48: {\n                    goto lab_0x402b61;\n                }\n                case 49: {\n                    goto lab_0x402b61;\n                }\n                case 50: {\n                    goto lab_0x402b61;\n                }\n                case 51: {\n                    goto lab_0x402b61;\n                }\n                case 52: {\n                    goto lab_0x402b61;\n                }\n                case 53: {\n                    goto lab_0x402b61;\n                }\n                case 54: {\n                    goto lab_0x402b61;\n                }\n                case 55: {\n                    goto lab_0x402b61;\n                }\n                case 56: {\n                    goto lab_0x402b61;\n                }\n                case 57: {\n                    goto lab_0x402b61;\n                }\n                case 58: {\n                    goto lab_0x402b61;\n                }\n                case 59: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402b61;\n                }\n                case 66: {\n                    goto lab_0x402b61;\n                }\n                case 67: {\n                    goto lab_0x402b61;\n                }\n                case 68: {\n                    goto lab_0x402b61;\n                }\n                case 69: {\n                    goto lab_0x402b61;\n                }\n                case 70: {\n                    goto lab_0x402b61;\n                }\n                case 71: {\n                    goto lab_0x402b61;\n                }\n                case 72: {\n                    goto lab_0x402b61;\n                }\n                case 73: {\n                    goto lab_0x402b61;\n                }\n                case 74: {\n                    goto lab_0x402b61;\n                }\n                case 75: {\n                    goto lab_0x402b61;\n                }\n                case 76: {\n                    goto lab_0x402b61;\n                }\n                case 77: {\n                    goto lab_0x402b61;\n                }\n                case 78: {\n                    goto lab_0x402b61;\n                }\n                case 79: {\n                    goto lab_0x402b61;\n                }\n                case 80: {\n                    goto lab_0x402b61;\n                }\n                case 81: {\n                    goto lab_0x402b61;\n                }\n                case 82: {\n                    goto lab_0x402b61;\n                }\n                case 83: {\n                    goto lab_0x402b61;\n                }\n                case 84: {\n                    goto lab_0x402b61;\n                }\n                case 85: {\n                    goto lab_0x402b61;\n                }\n                case 86: {\n                    goto lab_0x402b61;\n                }\n                case 87: {\n                    goto lab_0x402b61;\n                }\n                case 88: {\n                    goto lab_0x402b61;\n                }\n                case 89: {\n                    goto lab_0x402b61;\n                }\n                case 90: {\n                    goto lab_0x402b61;\n                }\n                case 91: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402b61;\n                }\n                case 94: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402b61;\n                }\n                case 96: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402b61;\n                }\n                case 98: {\n                    goto lab_0x402b61;\n                }\n                case 99: {\n                    goto lab_0x402b61;\n                }\n                case 100: {\n                    goto lab_0x402b61;\n                }\n                case 101: {\n                    goto lab_0x402b61;\n                }\n                case 102: {\n                    goto lab_0x402b61;\n                }\n                case 103: {\n                    goto lab_0x402b61;\n                }\n                case 104: {\n                    goto lab_0x402b61;\n                }\n                case 105: {\n                    goto lab_0x402b61;\n                }\n                case 106: {\n                    goto lab_0x402b61;\n                }\n                case 107: {\n                    goto lab_0x402b61;\n                }\n                case 108: {\n                    goto lab_0x402b61;\n                }\n                case 109: {\n                    goto lab_0x402b61;\n                }\n                case 110: {\n                    goto lab_0x402b61;\n                }\n                case 111: {\n                    goto lab_0x402b61;\n                }\n                case 112: {\n                    goto lab_0x402b61;\n                }\n                case 113: {\n                    goto lab_0x402b61;\n                }\n                case 114: {\n                    goto lab_0x402b61;\n                }\n                case 115: {\n                    goto lab_0x402b61;\n                }\n                case 116: {\n                    goto lab_0x402b61;\n                }\n                case 117: {\n                    goto lab_0x402b61;\n                }\n                case 118: {\n                    goto lab_0x402b61;\n                }\n                case 119: {\n                    goto lab_0x402b61;\n                }\n                case 120: {\n                    goto lab_0x402b61;\n                }\n                case 121: {\n                    goto lab_0x402b61;\n                }\n                case 122: {\n                    goto lab_0x402b61;\n                }\n                case 123: {\n                    goto lab_0x402b05;\n                }\n                case 124: {\n                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402b05;\n                }\n                case 126: {\n                    goto lab_0x402b2d;\n                }\n                default: {\n                    goto lab_0x402f05;\n                }\n            }\n        }\n      lab_0x402f05:\n        if (v23 != 1) {\n            // 0x403270\n            ps = 0;\n            int64_t len = v15; // 0x403280\n            if (v15 == -1) {\n                // 0x403282\n                len = strlen((char *)str);\n            }\n            // 0x4032ae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40330f:\n                // 0x40330f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403314\n                int64_t v30 = v29 + str;\n                v24 = function_405c70(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40388a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40388a_2;\n                    }\n                    case -2: {\n                        // 0x40396d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4039a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4039aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4039b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4039b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40388a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40388a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4032e0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40338c\n                        char v34 = *(char *)v33; // 0x40339d\n                        unsigned char v35; // 0x4029b7\n                        if (v34 < 125) {\n                            // 0x4033a8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4033bf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403390\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40339d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4033a8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4033bf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403390\n                            v33++;\n                        }\n                        goto lab_0x4032e0;\n                    }\n                }\n            }\n            goto lab_0x40388a_2;\n        } else {\n            // 0x402f54\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402b61;\n        }\n    }\n  lab_0x403188:\n    // 0x403188\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403a8a\n        if (v8 > result) {\n            // 0x403a93\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402db7\n        return result;\n    }\n    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402b61:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402b70\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402d7a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402c71\n    char v40 = v20; // 0x402c71\n    int64_t v41 = v38; // 0x402c71\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402c71\n    int64_t v43 = v36; // 0x402c71\n    goto lab_0x402bed;\n  lab_0x402d7a_2:\n    // 0x402db7\n    return function_402960(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40388a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402b61;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40345e\n        int64_t v50 = v5 + 1; // 0x403541\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403548\n        char v52 = v20; // 0x403548\n        int64_t v53 = result; // 0x403548\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403511\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403515\n            int64_t v56 = v54 + 1; // 0x40351a\n            int64_t v57 = v51 + 1; // 0x403541\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40350c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403511\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403515\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402bed;\n    }\n  lab_0x4032e0:\n    // 0x4032e0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4032ff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403302\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40388a\n        goto lab_0x40388a_2;\n    }\n    goto lab_0x40330f;\n  lab_0x402b2d:\n    // 0x402b2d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402d7a_2;\n    }\n    goto lab_0x402b61;\n  lab_0x402b05:;\n    bool v60 = v15 == 1; // 0x402b10\n    if (v15 == -1) {\n        // 0x402b12\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402b1e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402b61;\n    } else {\n        goto lab_0x402b2d;\n    }\n  lab_0x402bed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402bf2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402bf6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402a08_2;\n}\n"
        },
        {
            "funcName": "function_403b90",
            "funcStartAddr": "403b90",
            "funcEndAddr": "403d2e",
            "decompiledFuncCode": "int64_t function_403b90(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403b92\n    int32_t * v3 = __errno_location(); // 0x403bac\n    int64_t v4 = (int64_t)g22; // 0x403bb1\n    int32_t v5 = *v3; // 0x403bbb\n    int64_t v6 = v4; // 0x403bd1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403d29\n            function_404c00(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403be0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403be7\n        int64_t v9; // 0x403b90\n        if (g22 == &g23) {\n            int64_t v10 = function_404a10(0, v8); // 0x403d0a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x403d0f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404a10(v4, v8); // 0x403bfb\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x403c0a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x403c0a\n        int32_t v14 = v7; // 0x403c11\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403c41\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403c4b\n    int64_t * v17 = (int64_t *)v15; // 0x403c4e\n    uint64_t v18 = *v17; // 0x403c4e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403c51\n    int64_t result = *v19; // 0x403c51\n    int64_t v20; // 0x403b90\n    uint64_t v21 = function_402960(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403c74\n    if (v18 > v21) {\n        // 0x403ceb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403c87\n    *v17 = v22;\n    if (result != (int64_t)&g43) {\n        // 0x403c97\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4049b0(v22); // 0x403cb1\n    *v19 = result2;\n    int64_t v23; // 0x403b90\n    function_402960(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403ceb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403d30",
            "funcStartAddr": "403d30",
            "funcEndAddr": "403d64",
            "decompiledFuncCode": "int64_t function_403d30(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403d37\n    int64_t result = function_404bb0(a1 == 0 ? (int64_t)&g44 : a1, 56); // 0x403d56\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d7f",
            "decompiledFuncCode": "int64_t function_403d70(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g44 : a1); // 0x403d7c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "403d8f",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x403d88\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403dc3",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 + 8 : a1 + 8; // 0x403da9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403dae\n    uint32_t v3 = *v2; // 0x403dae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403db2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403dd0",
            "funcStartAddr": "403dd0",
            "funcEndAddr": "403de3",
            "decompiledFuncCode": "int64_t function_403dd0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g44 + 4 : a1 + 4); // 0x403ddc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403df0",
            "funcStartAddr": "403df0",
            "funcEndAddr": "403e1b",
            "decompiledFuncCode": "int64_t function_403df0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x403df8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403e15\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403e0c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e92",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g44 : a5; // 0x403e42\n    int32_t * v2 = __errno_location(); // 0x403e4b\n    uint32_t v3 = *(int32_t *)v1; // 0x403e6b\n    int64_t result = function_402960(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403e7a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ea0",
            "funcStartAddr": "403ea0",
            "funcEndAddr": "403f81",
            "decompiledFuncCode": "int64_t function_403ea0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g44 : a4; // 0x403ec2\n    int32_t * v2 = __errno_location(); // 0x403ec8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403ee7\n    int32_t * v4 = (int32_t *)v1; // 0x403eea\n    int64_t v5 = function_402960(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403f05\n    int64_t v6 = v5 + 1; // 0x403f0a\n    int64_t result = function_4049b0(v6); // 0x403f1f\n    function_402960(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403f64\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403f6d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "403f9a",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403f90\n    return function_403ea0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "404035",
            "decompiledFuncCode": "int64_t function_403fa0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x403fa0\n    int64_t v2 = v1; // 0x403fa0\n    int64_t v3 = v2; // 0x403fb4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403fd3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g55;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403fd0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g55;\n        }\n    }\n    int64_t v6 = v3; // 0x403fed\n    if (g23 != 0x60a300) {\n        // 0x403fef\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g43;\n        v6 = &g55;\n    }\n    int64_t result = v6; // 0x404011\n    if (g22 != &g23) {\n        // 0x404013\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g55;\n    }\n    // 0x404026\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "404051",
            "decompiledFuncCode": "int64_t function_404040(void) {\n    // 0x404040\n    int64_t v1; // 0x404040\n    return function_403b90(v1, v1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "40406a",
            "decompiledFuncCode": "int64_t function_404060(void) {\n    // 0x404060\n    int64_t v1; // 0x404060\n    return function_403b90(v1, v1, v1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404086",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1) {\n    // 0x404070\n    return function_403b90(0, a1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "4040a2",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, int64_t a2) {\n    // 0x404090\n    return function_403b90(0, a1, a2, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_4040b0",
            "funcStartAddr": "4040b0",
            "funcEndAddr": "404118",
            "decompiledFuncCode": "int64_t function_4040b0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4040c0\n    return function_403b90((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404184",
            "decompiledFuncCode": "int64_t function_404120(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404130\n    return function_403b90((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404190",
            "funcStartAddr": "404190",
            "funcEndAddr": "40419c",
            "decompiledFuncCode": "int64_t function_404190(int64_t a1, int64_t a2) {\n    // 0x404190\n    return function_4040b0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041af",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4041a0\n    return function_404120(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "404220",
            "decompiledFuncCode": "int64_t function_4041b0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x4041bd\n    int128_t v2 = __asm_movdqa(g45); // 0x4041c5\n    int128_t v3 = __asm_movdqa(g46); // 0x4041cd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4041e2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4041f8\n    uint32_t v6 = *v5; // 0x4041f8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4041fd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403b90(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404220",
            "funcStartAddr": "404220",
            "funcEndAddr": "40422d",
            "decompiledFuncCode": "int64_t function_404220(int64_t a1, int64_t a2) {\n    // 0x404220\n    return function_4041b0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "404241",
            "decompiledFuncCode": "int64_t function_404230(int64_t a1) {\n    // 0x404230\n    return function_4041b0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40425a",
            "decompiledFuncCode": "int64_t function_404250(void) {\n    // 0x404250\n    int64_t v1; // 0x404250\n    return function_4041b0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "4042ce",
            "decompiledFuncCode": "int64_t function_404260(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40427a\n    return function_403b90((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "40433c",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x4042d7\n    int128_t v2 = __asm_movdqa(g45); // 0x4042df\n    int128_t v3 = __asm_movdqa(g46); // 0x4042e7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404309\n    if (a2 == 0 || a3 == 0) {\n        // 0x404337\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40431a\n    return function_403b90(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404340",
            "funcStartAddr": "404340",
            "funcEndAddr": "404349",
            "decompiledFuncCode": "int64_t function_404340(void) {\n    // 0x404340\n    int64_t v1; // 0x404340\n    return function_4042d0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404350",
            "funcStartAddr": "404350",
            "funcEndAddr": "404367",
            "decompiledFuncCode": "int64_t function_404350(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404350\n    return function_4042d0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "404383",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404370\n    return function_4042d0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404390",
            "funcStartAddr": "404390",
            "funcEndAddr": "40439a",
            "decompiledFuncCode": "int64_t function_404390(void) {\n    // 0x404390\n    int64_t v1; // 0x404390\n    return function_403b90(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043b2",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, int64_t a2) {\n    // 0x4043a0\n    return function_403b90(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043d1",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1, int64_t a2) {\n    // 0x4043c0\n    return function_403b90(a1, a2, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "4043f6",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1) {\n    // 0x4043e0\n    return function_403b90(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "40440e",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2) {\n    // 0x404400\n    int64_t v1; // 0x404400\n    return function_404cc0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "4047ed",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4044a8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40442c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404446\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40448b\n    if (a6 < 10) {\n        // 0x40449a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404592\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "404810",
            "decompiledFuncCode": "int64_t function_4047f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4047f0\n    if (a5 == 0) {\n        // 0x40480b\n        return function_404410(a1, a2, a3, a4, a5, 0, (int64_t)&g55);\n    }\n    int64_t v1 = 0; // 0x4047f7\n    v1++;\n    int64_t v2 = v1; // 0x404809\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404800\n        v1++;\n        v2 = v1;\n    }\n    // 0x40480b\n    return function_404410(a1, a2, a3, a4, a5, v2, (int64_t)&g55);\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "404870",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404810\n    int64_t v3 = &v2; // 0x404810\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404843\n    int64_t v6; // 0x40482d\n    int64_t * v7; // 0x40484b\n    int64_t v8; // 0x40484b\n    int64_t v9; // 0x404857\n    if (v5 < 48) {\n        // 0x404820\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404863\n            break;\n        }\n    } else {\n        // 0x40484b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404863\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404841\n    while (v4 != 9) {\n        // 0x404839\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404820\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404863\n                break;\n            }\n        } else {\n            // 0x40484b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404863\n                break;\n            }\n        }\n        // 0x404839\n        v10 = 10;\n    }\n    // 0x404863\n    return function_404410(a1, a2, a3, a4, v3, v10, (int64_t)&g55);\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "40492c",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404870\n    int64_t v1; // bp-168, 0x404870\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404870\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404870\n    int64_t v8; // 0x404870\n    int64_t v9; // bp-56, 0x404870\n    int64_t v10; // 0x4048d5\n    int64_t v11; // 0x4048f9\n    if ((int32_t)v6 < 48) {\n        // 0x4048c0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404910\n            break;\n        }\n    } else {\n        // 0x4048f2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404910\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4048ea\n    int64_t v13 = 10; // 0x4048ea\n    while (v5 != 9) {\n        // 0x4048ec\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4048c0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404910\n                break;\n            }\n        } else {\n            // 0x4048f2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404910\n                break;\n            }\n        }\n        // 0x4048e2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404910\n    int64_t v14; // bp-136, 0x404870\n    int64_t result = function_404410(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g55); // 0x40491f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "4049a4",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1) {\n    // 0x404930\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404993\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_4049b0",
            "funcStartAddr": "4049b0",
            "funcEndAddr": "4049ca",
            "decompiledFuncCode": "int64_t function_4049b0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4049b4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4049c3\n        return (int64_t)mem;\n    }\n    // 0x4049c5\n    function_404c00(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049f1",
            "decompiledFuncCode": "int64_t function_4049d0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4049d3\n    int64_t v2 = v1; // 0x4049d3\n    if (v2 < 0) {\n        // 0x4049eb\n        function_404c00(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4049e9\n        return function_4049b0(v2);\n    }\n    // 0x4049eb\n    function_404c00(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a02",
            "decompiledFuncCode": "int64_t function_404a00(void) {\n    // 0x404a00\n    int64_t v1; // 0x404a00\n    return function_4049b0(v1);\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "404a46",
            "decompiledFuncCode": "int64_t function_404a10(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404a38\n        free(v1);\n        return (int32_t)&g55 ^ (int32_t)&g55;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404a21\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404a30\n        return (int64_t)mem;\n    }\n    // 0x404a41\n    function_404c00(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a50",
            "funcStartAddr": "404a50",
            "funcEndAddr": "404a71",
            "decompiledFuncCode": "int64_t function_404a50(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404a53\n    int64_t v2 = v1; // 0x404a53\n    if (v2 < 0) {\n        // 0x404a6b\n        function_404c00(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a69\n        return function_404a10(a1, v2);\n    }\n    // 0x404a6b\n    function_404c00(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404b06",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404adb\n            function_404c00(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a10(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404ac3\n    if (a2 == 0) {\n        // 0x404ae8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404ac8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404adb\n        function_404c00(a1);\n        // UNREACHABLE\n    }\n    // 0x404aaa\n    *(int64_t *)a2 = v2;\n    return function_404a10(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b60",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404b10\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404b5a\n            function_404c00(a1);\n            // UNREACHABLE\n        }\n        // 0x404b32\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a10(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404b45\n        *(int64_t *)a2 = 128;\n        return function_404a10(0, 128);\n    }\n    // 0x404b58\n    if (a2 < 0) {\n        // 0x404b5a\n        function_404c00(a1);\n        // UNREACHABLE\n    }\n    // 0x404b32\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404a10(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404b60",
            "funcStartAddr": "404b60",
            "funcEndAddr": "404b77",
            "decompiledFuncCode": "int64_t function_404b60(int64_t a1, int64_t a2) {\n    // 0x404b60\n    return (int64_t)memset((int64_t *)function_4049b0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404bae",
            "decompiledFuncCode": "int64_t function_404b80(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404b87\n    if ((int64_t)v1 < 0) {\n        // 0x404ba9\n        function_404c00(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404ba9\n        function_404c00(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404b9a\n    if (mem != NULL) {\n        // 0x404ba4\n        return (int64_t)mem;\n    }\n    // 0x404ba9\n    function_404c00(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404bd8",
            "decompiledFuncCode": "int64_t function_404bb0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4049b0(a2); // 0x404bbf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404be0",
            "funcStartAddr": "404be0",
            "funcEndAddr": "404bf3",
            "decompiledFuncCode": "int64_t function_404be0(int64_t str) {\n    // 0x404be0\n    return function_404bb0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c31",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1) {\n    // 0x404c00\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404cbb",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404c47\n    if (fileno(stream) < 0) {\n        // 0x404ca7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x404c5a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x404c8b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x404ca7\n            return fclose(stream);\n        }\n    }\n    // 0x404c5c\n    if ((int32_t)function_404e00(a1, v1) == 0) {\n        // 0x404ca7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x404c68\n    int32_t v3 = *v2; // 0x404c70\n    int64_t result = fclose(stream); // 0x404c7e\n    if (v3 != 0) {\n        // 0x404cb0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x404c80\n    return result;\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404df5",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x404da0\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x404cfc\n    int64_t v2; // 0x404cc0\n    if (g47 < 0) {\n        int64_t v3 = function_404cc0(fd, 0, v1, a4); // 0x404d44\n        int64_t v4 = v3 & 0xffffffff; // 0x404d49\n        if ((int32_t)v3 < 0) {\n            // 0x404d30\n            return v4 & 0xffffffff;\n        }\n        // 0x404d4f\n        v2 = v4;\n        if (g47 != -1) {\n            // 0x404d30\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x404d17\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x404d26\n            g47 = 1;\n            // 0x404d30\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_404cc0(fd & 0xffffffff, 0, v1, a4); // 0x404dd7\n        int64_t v7 = v6 & 0xffffffff; // 0x404ddc\n        if ((int32_t)v6 < 0) {\n            // 0x404d30\n            return v7 & 0xffffffff;\n        }\n        // 0x404de6\n        g47 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x404d5f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x404d6a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x404d30\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x404d82\n    close(fd2);\n    // 0x404d30\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e40",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x404e1a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x404e1a\n        return fflush(stream);\n    }\n    // 0x404e28\n    function_404e40(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404e97",
            "decompiledFuncCode": "int64_t function_404e40(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404e40\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x404e4a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x404e7b\n    int64_t result = -1; // 0x404e84\n    if (v1 != -1) {\n        // 0x404e86\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x404e92\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404f7f",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404eac\n    uint32_t v2 = *v1; // 0x404eac\n    int64_t v3 = a2 & 0xffffffff; // 0x404eb1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404eb4\n    uint64_t v5 = (int64_t)*v4; // 0x404eb4\n    int64_t v6; // 0x404f22\n    if (v3 <= v5) {\n      lab_0x404f1c_2:\n        // 0x404f1c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404ea2\n    int64_t v8 = v2; // 0x404ea0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x404f1c\n        goto lab_0x404f1c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404ed8\n    int64_t v17; // 0x404ee6\n    int64_t * v18; // 0x404f00\n    int64_t * v19; // 0x404f03\n    int64_t v20; // 0x404f0e\n    int64_t v21; // 0x404ee6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404ee3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404f00\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404f17\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x404f1c\n            goto lab_0x404f1c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404f1c\n            goto lab_0x404f1c_2;\n        }\n        // 0x404ed2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x404f5b\n    int64_t * v23 = (int64_t *)v22; // 0x404f60\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404f63\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404f60\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404f77\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x404ecd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404f1c\n            goto lab_0x404f1c_2;\n        }\n        // 0x404ed2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404ee3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404f00\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404f17\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x404f1c\n                goto lab_0x404f1c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x404f1c\n                goto lab_0x404f1c_2;\n            }\n            // 0x404ed2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404f40\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404f60\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404f77\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x404f1c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "40559c",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404f9f\n    int64_t v2 = *v1; // 0x404f9f\n    char * str2 = (char *)v2; // 0x404fac\n    char c = *str2; // 0x404fac\n    int64_t v3 = v2; // 0x404fd8\n    int64_t v4 = 0; // 0x404f80\n    int32_t v5; // 0x404f80\n    int64_t v6; // 0x404f80\n    int64_t v7; // 0x404f80\n    int64_t v8; // 0x404f80\n    int64_t v9; // 0x404f80\n    int64_t v10; // 0x404f80\n    int64_t v11; // 0x404f80\n    int64_t v12; // 0x404f80\n    int64_t v13; // 0x404f80\n    int64_t str3; // 0x404f80\n    int64_t v14; // 0x404f80\n    int64_t v15; // 0x404f80\n    int64_t v16; // 0x404f80\n    int64_t v17; // 0x404f80\n    int32_t v18; // 0x404f80\n    int32_t v19; // 0x404f80\n    int32_t v20; // 0x404f80\n    int32_t v21; // 0x404f80\n    int32_t v22; // 0x404f80\n    int32_t v23; // 0x404f80\n    int32_t v24; // 0x404f80\n    int32_t v25; // 0x404f80\n    int32_t v26; // 0x404f80\n    int32_t v27; // 0x404f80\n    int32_t v28; // 0x404f80\n    int32_t v29; // 0x404f80\n    int64_t nmemb; // 0x404f80\n    int64_t v30; // 0x404f80\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404fdc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404fd8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404fe8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404fee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404fb8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40501c\n                int64_t v34; // 0x404f80\n                int64_t v35; // 0x404f80\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405025\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4051a0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405036\n                int64_t v37 = *(int64_t *)v36; // 0x40503a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405010\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405025\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4051a0;\n                        }\n                    }\n                    // 0x405036\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405086:\n                    // 0x405086\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4050e0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405250\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4050e0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405200\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4050aa;\n                                } else {\n                                    // 0x40520c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4050aa;\n                                    } else {\n                                        // 0x40521a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4050aa;\n                                        } else {\n                                            goto lab_0x4050e0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4050aa;\n                            }\n                        }\n                    }\n                }\n              lab_0x4050f1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4052c6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405472\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x405492\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4054df\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x4054f9\n                            int64_t v45; // 0x4054fb\n                            if (*(char *)v42 != 0) {\n                                // 0x4054fb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4054f3\n                            while (v17 + nmemb != v42) {\n                                // 0x4054f5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4054fb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x4054e8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405520\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x4052d4\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40542f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405329\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405340\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4051ee\n                    return 63;\n                }\n                // 0x405110\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405194\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4051a0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4051b0\n                    uint32_t v50 = *v49; // 0x4051b0\n                    int64_t v51 = v50; // 0x4051b0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4051ba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4051c3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4053ef\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40539a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4051ee\n                            return 63;\n                        }\n                        // 0x405238\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40554f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40544d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405460\n                                // 0x4051ee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40535e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405372\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4051db\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4051de\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4051e2\n                    int64_t result = v59; // 0x4051e8\n                    if (v58 != 0) {\n                        // 0x4051ea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4051ee\n                    return result;\n                }\n            } else {\n                // 0x404fee\n                v5 = v32;\n            }\n            // break -> 0x405115\n            break;\n        }\n    }\n    // 0x405115\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40512d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405137\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4051ee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405279\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405166\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405176\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4050e0:\n    // 0x4050e0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4050e0\n    int64_t v63 = *(int64_t *)v62; // 0x4050e4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4050f1\n        goto lab_0x4050f1;\n    }\n    goto lab_0x405086;\n  lab_0x4050aa:\n    // 0x4050aa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404f80\n    int32_t v65; // 0x404f80\n    int32_t v66; // 0x404f80\n    if (v27 != 0) {\n        goto lab_0x4050e0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405260\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4050e0;\n            } else {\n                goto lab_0x4050d1;\n            }\n        } else {\n            // 0x4050c5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4053bc\n                int64_t v67 = (int64_t)mem; // 0x4053bc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4050e0;\n                } else {\n                    // 0x4053cf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4050d1;\n                }\n            } else {\n                goto lab_0x4050d1;\n            }\n        }\n    }\n  lab_0x4050d1:\n    // 0x4050d1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4050e0;\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "405b66",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4055c1\n    if (v3 < 1) {\n        // 0x40577e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4055bd\n    int32_t v5 = *(int32_t *)a7; // 0x4055c9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4055cb\n    int64_t v7 = v2; // 0x4055d0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4055d3\n    *v8 = 0;\n    int64_t v9; // 0x4055a0\n    int64_t v10; // 0x4055a0\n    int64_t v11; // 0x4055a0\n    int64_t v12; // 0x4055a0\n    int64_t str; // 0x4055a0\n    int64_t v13; // 0x4055a0\n    int64_t v14; // 0x4055a0\n    int64_t v15; // 0x4055a0\n    int64_t v16; // 0x4055a0\n    int64_t v17; // 0x4055a0\n    int32_t v18; // 0x4055a0\n    char v19; // 0x4055a0\n    if (v5 == 0) {\n        // 0x4057b8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4055ea;\n    } else {\n        // 0x4055e3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405630\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405633\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4056f8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405646\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405656\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40570c;\n                } else {\n                    goto lab_0x405668;\n                }\n            }\n        } else {\n            goto lab_0x4055ea;\n        }\n    }\n  lab_0x4055ea:\n    // 0x4055ea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4055f0\n    *v24 = 0;\n    int64_t v25; // 0x4055a0\n    int64_t v26; // 0x4055a0\n    int64_t v27; // 0x4055a0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4056e0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4056ed;\n        }\n        case 43: {\n            // 0x4059f0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4056ed;\n        }\n        default: {\n            // 0x40560c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40596f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405a88\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4056ed;\n                } else {\n                    // 0x40597d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40561a;\n                }\n            } else {\n                goto lab_0x40561a;\n            }\n        }\n    }\n  lab_0x4056f8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4056ff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405668;\n    } else {\n        goto lab_0x40570c;\n    }\n  lab_0x40561a:\n    // 0x40561a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4056ed;\n  lab_0x4056ed:\n    // 0x4056ed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4056f8;\n  lab_0x405668:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405668\n    int64_t v31 = v30; // 0x405668\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40566a\n    if ((int64_t)*v32 > v31) {\n        // 0x40566f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405672\n    if (*v33 > v30) {\n        // 0x405677\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40567a\n    int64_t v35 = v31; // 0x40567e\n    int64_t v36 = v15; // 0x40567e\n    int64_t v37; // 0x4055a0\n    int64_t v38; // 0x4055a0\n    int64_t v39; // 0x4055a0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4057e8\n        int64_t v41 = v40; // 0x4057e8\n        v2 = v41;\n        int64_t v42; // 0x4055a0\n        if (*v33 == v40) {\n            // 0x4059d0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4059d8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4057f4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4057f8\n                function_404ea0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405808\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405811\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40581a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405831\n            int64_t v47 = v45 & 0xffffffff; // 0x405835\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40583e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405844\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405846;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405820\n            int64_t v49 = v48 & 0xffffffff; // 0x405820\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405831\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40583e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405844\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405846;\n                    }\n                }\n                // 0x405820\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4059e8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405846;\n    } else {\n        goto lab_0x405684;\n    }\n  lab_0x40570c:\n    // 0x40570c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40570f\n    int64_t v51 = v12; // 0x40570f\n    int64_t v52 = v14; // 0x40570f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405668;\n    } else {\n        goto lab_0x405715;\n    }\n  lab_0x405684:;\n    int32_t v53 = v35; // 0x405684\n    int64_t v54; // 0x4055a0\n    int64_t v55; // 0x4055a0\n    int64_t v56; // 0x4055a0\n    int64_t v57; // 0x4055a0\n    int64_t v58; // 0x4055a0\n    int64_t v59; // 0x4055a0\n    char * v60; // 0x4055a0\n    int64_t v61; // 0x4055a0\n    int64_t v62; // 0x405699\n    int64_t v63; // 0x4055a0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4057d3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4057d6;\n    } else {\n        // 0x40568c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4055a0\n        int64_t v66 = v65 ? -1 : 1; // 0x4056a0\n        int64_t v67 = (int64_t)\"--\"; // 0x4055a0\n        int64_t v68 = v62; // 0x4055a0\n        int64_t v69 = 3; // 0x4056a0\n        unsigned char v70 = *(char *)v68; // 0x4056a0\n        char v71 = *(char *)v67; // 0x4056a0\n        char v72 = v71; // 0x4056a0\n        bool v73 = false; // 0x4056a0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405790\n            if (*(char *)v62 == 45) {\n                // 0x405850\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405850\n                if (c == 0) {\n                    goto lab_0x40579a;\n                } else {\n                    // 0x40585d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4058e0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405ac3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405935;\n                        } else {\n                            // 0x40586e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4058e0;\n                            } else {\n                                // 0x405873\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405894;\n                                } else {\n                                    // 0x40587a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4058e0;\n                                    } else {\n                                        goto lab_0x405894;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40579a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4056b0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4056b3\n            int64_t v77 = v35 + 1; // 0x4056b6\n            int32_t v78 = v77; // 0x4056b9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405a20\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4056c7\n                    function_404ea0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4056d5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4057d6;\n        }\n    }\n  lab_0x405715:;\n    // 0x405715\n    int64_t v79; // bp-104, 0x4055a0\n    int64_t v80 = &v79; // 0x4055aa\n    int64_t v81 = v50 + 1; // 0x405715\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40571c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405721\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405725\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405729\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405731\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405736\n    int32_t c2 = v84; // 0x405736\n    char * found_char_pos = strchr(str2, c2); // 0x405736\n    int64_t v87 = *v82; // 0x40573b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405745\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405750\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405a40\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405a0d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40577e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405736\n    char v91 = *(char *)(v90 + 1); // 0x40576b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405725\n        if (v91 != 58) {\n            // 0x40577e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405994\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405a98\n                *v8 = 0;\n            } else {\n                // 0x405a7c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4059be\n            *v83 = 0;\n            // 0x40577e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40599e\n        if (v93 != 0) {\n            // 0x405a30\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4059be\n            *v83 = 0;\n            // 0x40577e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4059b1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4059be\n            *v83 = 0;\n            // 0x40577e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405afa\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405aaa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405ab1\n        // 0x4059be\n        *v83 = 0;\n        // 0x40577e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405909\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40590b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405b30\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405ae1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405ae8\n            // 0x40577e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405916\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40591a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405935;\n  lab_0x405846:\n    // 0x405846\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405684;\n  lab_0x405935:;\n    int64_t v99 = function_404f80(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405953\n    // 0x40577e\n    return v99 & 0xffffffff;\n  lab_0x4057d6:;\n    int32_t v100 = v55; // 0x4057d6\n    if (v100 != (int32_t)v59) {\n        // 0x4057da\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40577e\n    return 0xffffffff;\n  lab_0x40579a:\n    // 0x40579a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4057a1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40577e\n    return v99 & 0xffffffff;\n  lab_0x4058e0:\n    // 0x4058e0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405715;\n  lab_0x405894:\n    // 0x405894\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404f80(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x4058ba\n    if ((int32_t)v101 != -1) {\n        // 0x40577e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4058cf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4058e0;\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405bc6",
            "decompiledFuncCode": "int64_t function_405b70(int64_t a1) {\n    // 0x405b70\n    *(int32_t *)&g48 = g28;\n    *(int32_t *)&g49 = g27;\n    int64_t v1; // 0x405b70\n    int64_t result = function_4055a0(v1, v1, v1, v1, v1, v1, &g48, a1 & 0xffffffff); // 0x405b96\n    g28 = *(int32_t *)&g48;\n    g53 = g51;\n    *(int32_t *)&g26 = g50;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405be8",
            "decompiledFuncCode": "int64_t function_405bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405bd0\n    return function_405b70(1);\n}\n"
        },
        {
            "funcName": "function_405bf0",
            "funcStartAddr": "405bf0",
            "funcEndAddr": "405c03",
            "decompiledFuncCode": "int64_t function_405bf0(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x405bf0\n    return function_405b70(0);\n}\n"
        },
        {
            "funcName": "function_405c10",
            "funcStartAddr": "405c10",
            "funcEndAddr": "405c25",
            "decompiledFuncCode": "int64_t function_405c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405c10\n    return function_4055a0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405c30",
            "funcStartAddr": "405c30",
            "funcEndAddr": "405c46",
            "decompiledFuncCode": "int64_t function_405c30(void) {\n    // 0x405c30\n    return function_405b70(0);\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405c68",
            "decompiledFuncCode": "int64_t function_405c50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405c50\n    return function_4055a0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405cea",
            "decompiledFuncCode": "int64_t function_405c70(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405c7b\n    int64_t v2 = (int64_t)&g12; // 0x405c7b\n    int32_t * pwc; // 0x405c70\n    int64_t v3; // 0x405c70\n    int64_t n; // 0x405c70\n    if (a2 == 0) {\n        goto lab_0x405cc2;\n    } else {\n        // 0x405c7d\n        if (a3 == 0) {\n            // 0x405ca8\n            return -2;\n        }\n        // 0x405c89\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405cc2;\n        } else {\n            goto lab_0x405c94;\n        }\n    }\n  lab_0x405cc2:\n    // 0x405cc2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405c70\n    pwc = (int32_t *)&v4;\n    goto lab_0x405c94;\n  lab_0x405c94:;\n    char * wstr = (char *)v3; // 0x405c9a\n    int64_t ps; // 0x405c70\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405c9a\n    int64_t result = v5; // 0x405c9a\n    if (v5 < 0xfffffffe) {\n        // 0x405ca8\n        return result;\n    }\n    int64_t result2 = result; // 0x405cd9\n    if ((char)function_405d50(0, v3) == 0) {\n        // 0x405cdb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405ca8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405d4d",
            "decompiledFuncCode": "int64_t function_405cf0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405cf7\n    int64_t v2; // 0x405cf0\n    int64_t result = function_404c40(a1, v2); // 0x405d08\n    if ((v2 & 32) != 0) {\n        // 0x405d30\n        if ((int32_t)result == 0) {\n            // 0x405d34\n            *__errno_location() = 0;\n        }\n        // 0x405d2a\n        return 0xffffffff;\n    }\n    // 0x405d11\n    if ((int32_t)result == 0) {\n        // 0x405d2a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405d18\n    if (v1 == 0) {\n        // 0x405d1a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405d2a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d50",
            "funcStartAddr": "405d50",
            "funcEndAddr": "405dae",
            "decompiledFuncCode": "int64_t function_405d50(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405d56\n    if (locale == NULL) {\n        // 0x405d83\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405d56\n    bool v2; // 0x405d50\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x405d50\n    int64_t v5 = v1; // 0x405d50\n    int64_t v6 = 2; // 0x405d75\n    unsigned char v7 = *(char *)v5; // 0x405d75\n    char v8 = *(char *)v4; // 0x405d75\n    char v9 = v8; // 0x405d75\n    bool v10 = false; // 0x405d75\n    while (v7 == v8) {\n        // 0x405d68\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405d81\n    int64_t v13 = v1; // 0x405d81\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405d83\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405d81\n    unsigned char v15 = *(char *)v13; // 0x405d9d\n    char v16 = *(char *)v12; // 0x405d9d\n    char v17 = v16; // 0x405d9d\n    bool v18 = false; // 0x405d9d\n    while (v15 == v16) {\n        // 0x405d90\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405db0",
            "funcStartAddr": "405db0",
            "funcEndAddr": "406312",
            "decompiledFuncCode": "int64_t function_405db0(void) {\n    char * v1 = nl_langinfo(14); // 0x405dc6\n    char * v2 = g52; // 0x405dcb\n    char * v3; // 0x405db0\n    int64_t v4; // 0x405db0\n    int64_t v5; // 0x405db0\n    int64_t v6; // 0x405db0\n    int64_t v7; // 0x405db0\n    int32_t size; // 0x405db0\n    int32_t size2; // 0x405db0\n    int32_t len; // 0x405e82\n    int64_t v8; // 0x405e82\n    char * env_val; // 0x405e6d\n    if (v2 == NULL) {\n        // 0x405e68\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405ed5;\n        } else {\n            // 0x405e7a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405ed5;\n            } else {\n                // 0x405e7f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405e6d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406305\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405ed5;\n                    } else {\n                        // 0x406279\n                        size2 = len + 14;\n                        goto lab_0x405e9b;\n                    }\n                } else {\n                    goto lab_0x405e9b;\n                }\n            }\n        }\n    } else {\n        // 0x405db0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405dea;\n    }\n  lab_0x40611c:;\n    // 0x40611c\n    struct _IO_FILE * stream; // 0x405f5b\n    int32_t v10 = __uflow(stream); // 0x40611f\n    int64_t v11; // 0x405db0\n    int64_t v12 = v11; // 0x406129\n    int64_t v13; // 0x405db0\n    int64_t v14 = v13; // 0x406129\n    int32_t v15 = v10; // 0x406129\n    int64_t v16; // 0x405db0\n    int64_t v17 = v16; // 0x406129\n    int64_t v18 = v11; // 0x406129\n    int64_t v19 = v13; // 0x406129\n    int64_t v20 = v16; // 0x406129\n    if (v10 == -1) {\n        // break -> 0x40612f\n        goto lab_0x40612f;\n    }\n    goto lab_0x405fa9;\n  lab_0x405f9e:;\n    // 0x405f9e\n    int64_t v90; // 0x405db0\n    int64_t * v32; // 0x405f90\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405db0\n    v12 = v89;\n    int64_t v91; // 0x405db0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405db0\n    v17 = v92;\n    goto lab_0x405fa9;\n  lab_0x405fa9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405db0\n    int32_t v25; // bp-120, 0x405db0\n    int32_t v26; // bp-184, 0x405db0\n    int64_t v27; // 0x405f5b\n    int64_t v28; // 0x405f78\n    int64_t v29; // 0x405f7d\n    int64_t * v30; // 0x405f94\n    switch (c) {\n        case 32: {\n            goto lab_0x405f90;\n        }\n        case 10: {\n            goto lab_0x405f90;\n        }\n        case 9: {\n            goto lab_0x405f90;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406181\n            int32_t v33; // 0x405db0\n            char v34; // 0x405db0\n            int32_t v35; // 0x40618e\n            if (v31 < *v30) {\n                // 0x406160\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40618b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406181\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406160\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40618b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406170\n                v36 = v33;\n            }\n            // 0x40625f\n            if (v36 == -1) {\n                // break -> 0x40612f\n                break;\n            }\n            goto lab_0x405f90;\n        }\n        default: {\n            // 0x405fbf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40612f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405fe8\n            int64_t v39 = v37 + 4; // 0x405fea\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405ff6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405ff8\n            while (v41 == 0) {\n                // 0x405fe8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406016\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406022\n            int64_t v45 = v43 + 4; // 0x406024\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406030\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406032\n            while (v47 == 0) {\n                // 0x406022\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40601f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406048\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406058\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40605c\n            int64_t v52 = v51 + v48; // 0x406065\n            int64_t * mem; // 0x405db0\n            int64_t v53; // 0x405db0\n            int64_t v54; // 0x405db0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40619b\n                int64_t v56 = v55 + 3; // 0x4061a7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406081\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406090\n            if (mem == NULL) {\n                // 0x4062bc\n                free((int64_t *)v21);\n                function_404c40(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x405f34;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4060a8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4060b2\n            uint32_t v62 = (int32_t)v59; // 0x4060b5\n            int64_t v63; // 0x405db0\n            if (v62 >= 8) {\n                // 0x4061c4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4061de\n                int64_t v66 = v61 - v65; // 0x4061e2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4061ed\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4061fe\n                    int64_t v70 = v69 & 0xffffffff; // 0x4061fe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4061fb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40628f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4060c7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4060cb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4060db\n            int64_t v74 = v60 - 1; // 0x4060df\n            uint32_t v75 = (int32_t)v73; // 0x4060e4\n            int64_t v76; // 0x405db0\n            if (v75 >= 8) {\n                // 0x406212\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40621c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40622c\n                int64_t v80 = v74 - v79; // 0x406230\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40623b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40624b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406249\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4062a6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4062ae\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4060f6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4060fa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4062f3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40610e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405f9e;\n            } else {\n                goto lab_0x40611c;\n            }\n        }\n    }\n  lab_0x405f90:;\n    int64_t v93 = v23; // 0x405db0\n    int64_t v94 = v22; // 0x405db0\n    int64_t v95 = v21; // 0x405db0\n    goto lab_0x405f90_2;\n  lab_0x405ed5:;\n    int64_t * mem3 = malloc(size); // 0x405ed5\n    int64_t v97 = (int64_t)&g12; // 0x405ee0\n    int64_t v98; // 0x405db0\n    int64_t path; // 0x405db0\n    if (mem3 == NULL) {\n        goto lab_0x405eb2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405ed5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405ef6;\n    }\n  lab_0x405dea:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x405ddd\n    char v100 = *v3; // 0x405dea\n    int64_t v101; // 0x405db0\n    if (v100 == 0) {\n        // 0x405e44\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405db0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405db0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405e30\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405e37;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405e00\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405e0d\n        char v107 = *(char *)v106; // 0x405e12\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405e44\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405e1b\n    v104 = v103 + 1;\n  lab_0x405e37:\n    // 0x405e44\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405eb2:;\n    char * v108 = (char *)v97;\n    g52 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405dea;\n  lab_0x405ef6:;\n    int64_t v109 = v98 + path; // 0x405ef6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405f22\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405f51\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406282\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405f75\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405f90_2:;\n                uint64_t v96 = *v32; // 0x405f90\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40611c;\n                } else {\n                    goto lab_0x405f9e;\n                }\n            }\n          lab_0x40612f:\n            // 0x40612f\n            function_404c40(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40614e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405f34;\n  lab_0x405e9b:;\n    int64_t * mem4 = malloc(size2); // 0x405e9b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405f41\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405ef6;\n    } else {\n        goto lab_0x405eb2;\n    }\n  lab_0x405f34:\n    // 0x405f34\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405eb2;\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "40637d",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406320\n    return function_4014e8();\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "406381",
            "decompiledFuncCode": "int64_t function_406380(void) {\n    // 0x406380\n    int64_t result; // 0x406380\n    return result;\n}\n"
        },
        {
            "funcName": "function_406390",
            "funcStartAddr": "406390",
            "funcEndAddr": "4063a8",
            "decompiledFuncCode": "int64_t function_406390(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406390\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_4063a8",
            "funcStartAddr": "4063a8",
            "funcEndAddr": "4063c8",
            "decompiledFuncCode": "int64_t function_4063a8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x4063b2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4063b3\n        v1 -= 8;\n    }\n    // 0x4063c4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tee.elf"
}