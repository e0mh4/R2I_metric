{
    "funcInfo": [
        {
            "funcName": "function_401a70",
            "funcStartAddr": "401a70",
            "funcEndAddr": "401a75",
            "decompiledFuncCode": "int64_t function_401a70(void) {\n    // 0x401a70\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a75",
            "funcStartAddr": "401a75",
            "funcEndAddr": "401a7a",
            "decompiledFuncCode": "int64_t function_401a75(void) {\n    // 0x401a75\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a7a",
            "funcStartAddr": "401a7a",
            "funcEndAddr": "401a7f",
            "decompiledFuncCode": "int64_t function_401a7a(void) {\n    // 0x401a7a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a7f",
            "funcStartAddr": "401a7f",
            "funcEndAddr": "401a84",
            "decompiledFuncCode": "int64_t function_401a7f(void) {\n    // 0x401a7f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a84",
            "funcStartAddr": "401a84",
            "funcEndAddr": "401a89",
            "decompiledFuncCode": "int64_t function_401a84(void) {\n    // 0x401a84\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a89",
            "funcStartAddr": "401a89",
            "funcEndAddr": "401a8e",
            "decompiledFuncCode": "int64_t function_401a89(void) {\n    // 0x401a89\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a8e",
            "funcStartAddr": "401a8e",
            "funcEndAddr": "401a93",
            "decompiledFuncCode": "int64_t function_401a8e(void) {\n    // 0x401a8e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a93",
            "funcStartAddr": "401a93",
            "funcEndAddr": "401a98",
            "decompiledFuncCode": "int64_t function_401a93(void) {\n    // 0x401a93\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401aa0",
            "funcStartAddr": "401aa0",
            "funcEndAddr": "402596",
            "decompiledFuncCode": "int64_t function_401aa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401aaa\n    int64_t v2; // bp-104, 0x401aa0\n    int64_t v3 = &v2; // 0x401abe\n    function_404a50(a2);\n    setlocale(LC_ALL, (char *)&g18);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_40bd50(0x404940, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g33 = 0;\n    bool v4; // 0x401aa0\n    int64_t v5 = v4 ? -1 : 1;\n    int32_t v6 = 1; // 0x401b22\n    int64_t v7 = 0; // 0x401b22\n    char v8 = 0; // 0x401b22\n    char v9 = 0; // 0x401b22\n    int64_t v10 = 0; // 0x401b22\n    int64_t v11 = 0; // 0x401b22\n    int64_t v12 = 0; // 0x401b22\n    int64_t v13; // 0x401aa0\n    int64_t v14; // 0x401aa0\n    int64_t v15; // 0x401aa0\n    int64_t v16; // 0x401aa0\n    int64_t v17; // 0x401aa0\n    int32_t v18; // 0x401aa0\n    char v19; // 0x401aa0\n    char v20; // 0x401aa0\n    char v21; // 0x401aa0\n    char v22; // 0x401aa0\n    int64_t v23; // 0x401aa0\n    int64_t v24; // 0x401aa0\n    while (true) {\n        // 0x401b27\n        v17 = v10;\n        v18 = v6;\n        int32_t v25 = a1 - v11; // 0x401b3e\n        v23 = v7;\n        v21 = v8;\n        v19 = v9;\n        v13 = v12;\n        v15 = 1;\n        uint32_t v26; // 0x401aa0\n        while (true) {\n          lab_0x401b27:\n            // 0x401b27\n            v16 = v15;\n            v12 = v13;\n            v9 = v19;\n            v8 = v21;\n            v7 = v23;\n            int64_t v27 = function_4089e0(v25, 8 * v17 + a2, \"-agF:\", &g7, 0, a6); // 0x401b3e\n            v26 = (int32_t)v27;\n            switch (v26) {\n                case -1: {\n                    goto lab_0x401c9d;\n                }\n                case 70: {\n                    if (v7 != 0) {\n                        goto lab_0x402407;\n                    }\n                    // 0x401c8c\n                    v24 = g72;\n                    v22 = v8;\n                    v20 = v9;\n                    v14 = v12;\n                    goto lab_0x401b74;\n                }\n                default: {\n                    if (v26 <= 70) {\n                        // break -> 0x401bc0\n                        break;\n                    }\n                    // 0x401b57\n                    v24 = v7;\n                    v22 = v8;\n                    v20 = 1;\n                    v14 = 1;\n                    if (v26 != 97) {\n                        // 0x401b60\n                        v24 = v7;\n                        v22 = 1;\n                        v20 = v9;\n                        v14 = 2;\n                        if (v26 != 103) {\n                            goto lab_0x401c0b;\n                        }\n                    }\n                    goto lab_0x401b74;\n                }\n            }\n        }\n        if (v26 == -131) {\n            // 0x401bc7\n        }\n        if (v26 == -130) {\n            // 0x4023c7\n            function_402d90(0);\n        }\n      lab_0x401c0b:;\n        int32_t v28 = (int32_t)v16 + (int32_t)v11; // 0x401c0b\n        v11 = v28;\n        v10 = v28;\n        int64_t str = *(int64_t *)(8 * v10 + a2); // 0x401c1b\n        int64_t v29 = 7; // 0x401c22\n        int64_t v30 = str;\n        int64_t v31 = (int64_t)\"-drain\";\n        unsigned char v32 = *(char *)v30; // 0x401c22\n        char v33 = *(char *)v31; // 0x401c22\n        char v34 = v33; // 0x401c22\n        bool v35 = false; // 0x401c22\n        while (v32 == v33) {\n            v29--;\n            int64_t v36 = v31 + v5; // 0x401c22\n            int64_t v37 = v30 + v5; // 0x401c22\n            v34 = v32;\n            v35 = true;\n            if (v29 == 0) {\n                // break -> \n                break;\n            }\n            v30 = v37;\n            v31 = v36;\n            v32 = *(char *)v30;\n            v33 = *(char *)v31;\n            v34 = v33;\n            v35 = false;\n        }\n        unsigned char v38 = v34;\n        v6 = v18;\n        if ((v32 >= v38 && !v35) != v32 < v38) {\n            // 0x401c2d\n            v6 = strcmp((char *)str, \"drain\") != 0 ? 0 : 0x1000000 * v18 >> 24;\n        }\n        // 0x401c4d\n        g34 = 0;\n    }\n  lab_0x401c9d:;\n    int64_t * v39; // 0x401aa0\n    int64_t v40; // 0x401aa0\n    int64_t * v41; // 0x401aa0\n    int64_t v42; // 0x401aa0\n    int64_t v43; // 0x401aa0\n    int64_t * v44; // 0x401aa0\n    int64_t v45; // 0x401aa0\n    int64_t v46; // 0x401aa0\n    int64_t v47; // 0x401aa0\n    int64_t v48; // 0x401aa0\n    int64_t v49; // 0x401aa0\n    int64_t v50; // 0x401aa0\n    int64_t v51; // 0x401aa0\n    int64_t v52; // 0x401aa0\n    int64_t v53; // 0x401aa0\n    int64_t v54; // 0x401aa0\n    int64_t v55; // 0x401aa0\n    int64_t v56; // 0x401aa0\n    int64_t v57; // bp-57, 0x401aa0\n    int64_t v58; // bp-58, 0x401aa0\n    char v59; // 0x401cac\n    if ((v9 & v8) != 0) {\n        // 0x4023e5\n        error(1, (int32_t)\"the options for verbose and stty-readable output styles are\\nmutually exclusive\" ^ (int32_t)\"the options for verbose and stty-readable output styles are\\nmutually exclusive\", dcgettext(NULL, \"the options for verbose and stty-readable output styles are\\nmutually exclusive\", 5));\n      lab_0x402407:\n        // 0x402407\n        error(1, (int32_t)\"only one device may be specified\" ^ (int32_t)\"only one device may be specified\", dcgettext(NULL, \"only one device may be specified\", 5));\n        goto lab_0x402429;\n    } else {\n        // 0x401cac\n        v59 = v18;\n        if (v59 != 0) {\n            // 0x401dcd\n            v47 = 0;\n            v50 = a6;\n            if (v7 != 0) {\n                goto lab_0x401d02;\n            } else {\n                // 0x401dd9\n                dcgettext(NULL, \"standard input\", 5);\n                int32_t v60 = tcgetattr(0, (struct termios *)&g48); // 0x401df6\n                v55 = v8;\n                v56 = 5;\n                v48 = 0;\n                v51 = a6;\n                if (v60 != 0) {\n                    goto lab_0x401ff5;\n                } else {\n                    goto lab_0x401e03;\n                }\n            }\n        } else {\n            // 0x401cb7\n            v49 = 0;\n            v53 = a6;\n            if ((v9 || v8) == 0) {\n                if (v7 == 0) {\n                    int64_t v61 = v3 + 16;\n                    int64_t v62 = v3 - 8;\n                    int64_t v63 = v3 - 16;\n                    v44 = (int64_t *)v63;\n                    v43 = v63;\n                    v42 = v3 + 46;\n                    v41 = (int64_t *)v62;\n                    v40 = v62;\n                    v39 = (int64_t *)v61;\n                    v46 = v61;\n                    v45 = v3 + 47;\n                    v54 = a2;\n                    v52 = a6;\n                    goto lab_0x401f9e;\n                } else {\n                    // 0x401cd9\n                    function_403bd0(1, v7, a2, v1, &g56, &v57, &v58);\n                    v47 = &g56;\n                    v50 = &v57;\n                    goto lab_0x401d02;\n                }\n            } else {\n                goto lab_0x402458;\n            }\n        }\n    }\n  lab_0x401b74:;\n    int64_t v64 = (int64_t)*(int32_t *)0x6132bc; // 0x401b74\n    int64_t v65 = v16; // 0x401b7d\n    if (v16 < v64) {\n        int64_t v66 = (0x100000000 * v16 >> 32) + v17; // 0x401b86\n        int64_t v67 = 8 * v66 + a2; // 0x401b9c\n        *(int64_t *)v67 = 0;\n        v67 += 8;\n        v65 = v64;\n        while (v67 != a2 + 8 + 8 * (((v16 ^ 0xffffffff) + v64 & 0xffffffff) + v66)) {\n            // 0x401ba0\n            *(int64_t *)v67 = 0;\n            v67 += 8;\n            v65 = v64;\n        }\n    }\n    // 0x401bb0\n    v23 = v24;\n    v21 = v22;\n    v19 = v20;\n    v13 = v14;\n    v15 = v65 & 0xffffffff;\n    goto lab_0x401b27;\n  lab_0x402429:;\n    int64_t v68 = function_4064f0(0, 3, *(int64_t *)(v3 + 16)); // 0x402435\n    error(1, *__errno_location(), \"%s\", (char *)v68);\n    v49 = 0;\n    v53 = a6;\n    goto lab_0x402458;\n  lab_0x402458:\n    // 0x402458\n    error(1, (int32_t)\"when specifying an output style, modes may not be set\" ^ (int32_t)\"when specifying an output style, modes may not be set\", dcgettext(NULL, \"when specifying an output style, modes may not be set\", 5));\n    int64_t v69 = v49; // 0x402475\n    int64_t v70 = v53; // 0x402475\n    goto lab_0x40247a;\n  lab_0x401d02:;\n    // 0x401d02\n    int64_t v158; // 0x401aa0\n    int64_t v160; // 0x401aa0\n    int64_t v162; // 0x401aa0\n    int64_t v164; // 0x401aa0\n    int64_t v167; // 0x401aa0\n    int64_t * v72; // 0x401aa0\n    int64_t v156; // 0x401aa0\n    int64_t v73; // 0x401aa0\n    int64_t v74; // 0x401aa0\n    int64_t v165; // 0x401aa0\n    int64_t v169; // 0x401aa0\n    if ((int32_t)function_4049e0(0, v7, 2048, 0) < 0) {\n        // 0x401d02\n        v72 = (int64_t *)(v3 + 16);\n        v73 = v47;\n        v74 = v50;\n        goto lab_0x4024bb;\n    } else {\n        int64_t v197 = function_407b50(0, 3, 2048, 0); // 0x401d26\n        v69 = v47;\n        v70 = v50;\n        if ((int32_t)v197 == -1) {\n            goto lab_0x40247a;\n        } else {\n            int64_t v198 = v197 & 0xfffff7ff; // 0x401d3e\n            v69 = v47;\n            v70 = v50;\n            if ((int32_t)function_407b50(0, 4, v198, 0) < 0) {\n                goto lab_0x40247a;\n            } else {\n                // 0x401d4f\n                if (tcgetattr(0, (struct termios *)&g48) != 0) {\n                    goto lab_0x401ff5;\n                } else {\n                    // 0x401d63\n                    v55 = 0;\n                    v56 = v198;\n                    v48 = v47;\n                    v51 = v50;\n                    if ((v9 || v8 || v59) == 0) {\n                        // 0x401d7d\n                        v167 = v3 + 16;\n                        v164 = v3 - 16;\n                        v162 = v3 - 8;\n                        v160 = v3 + 46;\n                        v158 = v3 + 47;\n                        v169 = a2;\n                        v165 = &v58;\n                        v156 = &v57;\n                        goto lab_0x401d87;\n                    } else {\n                        goto lab_0x401e03;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40247a:;\n    int64_t * v71 = (int64_t *)(v3 + 16);\n    function_4064f0(0, 3, *v71);\n    error(1, *__errno_location(), dcgettext(NULL, \"%s: couldn't reset non-blocking mode\", 5));\n    v72 = v71;\n    v73 = v69;\n    v74 = v70;\n    goto lab_0x4024bb;\n  lab_0x401ff5:;\n    int64_t v180 = function_4064f0(0, 3, *(int64_t *)(v3 + 16)); // 0x402001\n    error(1, *__errno_location(), \"%s\", (char *)v180);\n    goto lab_0x402024;\n  lab_0x401e03:;\n    int64_t v181 = function_4026e0(); // 0x401e03\n    g57 = 0;\n    g58 = v181;\n    int64_t v117; // 0x401aa0\n    int64_t v153; // 0x401aa0\n    int64_t v154; // 0x401aa0\n    int64_t v118; // 0x401aa0\n    int64_t v116; // 0x401aa0\n    int64_t v152; // 0x401aa0\n    int64_t v151; // 0x401aa0\n    switch ((int32_t)v12) {\n        case 1: {\n            // 0x4021df\n            int64_t v182; // 0x401aa0\n            int64_t v183 = v182;\n            int64_t v184; // 0x401aa0\n            int64_t v185; // 0x401aa0\n            function_402930((int64_t *)&g48, 1, v185, v184);\n            function_402ca0(1, v183);\n            char v186 = g52; // 0x4021fd\n            int64_t v187; // 0x401aa0\n            int64_t v188; // 0x401aa0\n            function_4027c0(\"line = %d;\", v186, v185, v184, v187, v188);\n            struct _IO_FILE * v189 = g36; // 0x402210\n            int64_t v190 = (int64_t)v189; // 0x402210\n            int64_t * v191 = (int64_t *)(v190 + 40); // 0x402217\n            uint64_t v192 = *v191; // 0x402217\n            uint64_t v193 = *(int64_t *)(v190 + 48); // 0x40221b\n            if (v192 >= v193) {\n                goto lab_0x4024ea;\n            } else {\n                // 0x402225\n                *v191 = v192 + 1;\n                *(char *)v192 = 10;\n                goto lab_0x402230;\n            }\n        }\n        case 2: {\n            goto lab_0x402024;\n        }\n        default: {\n            // 0x401e2c\n            function_402930((int64_t *)&g48, 1, v56, v55);\n            function_4027c0(\"line = %d;\", g52, v56, v55, v48, v51);\n            int64_t v194 = (int64_t)g36; // 0x401e4e\n            int64_t * v195 = (int64_t *)(v194 + 40); // 0x401e55\n            uint64_t v196 = *v195; // 0x401e55\n            v152 = v55;\n            v151 = v194;\n            v153 = v48;\n            v154 = v51;\n            if (v196 >= *(int64_t *)(v194 + 48)) {\n                goto lab_0x402587;\n            } else {\n                // 0x401e63\n                *v195 = v196 + 1;\n                *(char *)v196 = 10;\n                v116 = v55;\n                v117 = v48;\n                v118 = v51;\n                goto lab_0x401e6e;\n            }\n        }\n    }\n  lab_0x4024bb:;\n    int64_t v75 = function_4064f0(0, 3, *v72); // 0x4024c7\n    error(1, *__errno_location(), \"%s\", (char *)v75);\n    goto lab_0x4024ea;\n  lab_0x402024:\n    // 0x402024\n    __printf_chk(1, \"%lx:%lx:%lx:%lx\", *(int32_t *)&g48, g49, g50, g51);\n    int64_t v173 = 0; // 0x40204c\n    int64_t v174 = v173 + 1; // 0x40205d\n    __printf_chk(1, \":%lx\", (int32_t)*(char *)(v173 + 0x613371));\n    v173 = v174;\n    while (v174 != 32) {\n        // 0x402051\n        v174 = v173 + 1;\n        __printf_chk(1, \":%lx\", (int32_t)*(char *)(v173 + 0x613371));\n        v173 = v174;\n    }\n    int64_t v175 = (int64_t)g36; // 0x402073\n    int64_t * v176 = (int64_t *)(v175 + 40); // 0x40207a\n    uint64_t v177 = *v176; // 0x40207a\n    if (v177 >= *(int64_t *)(v175 + 48)) {\n        // 0x402549\n        __overflow(g36, 10);\n    } else {\n        // 0x402088\n        *v176 = v177 + 1;\n        *(char *)v177 = 10;\n    }\n    // 0x401dbc\n    return 0;\n  lab_0x401f9e:;\n    int64_t v178 = (int64_t)dcgettext(NULL, \"standard input\", 5); // 0x401faa\n    *v39 = v178;\n    *v41 = v52;\n    *v44 = v42;\n    function_403bd0(1, v178, v54, v1, &g56, (int64_t *)v45, (int64_t *)&g73);\n    int32_t v179 = tcgetattr(0, (struct termios *)&g48); // 0x401fe4\n    v167 = v46;\n    v164 = v43;\n    v162 = v40;\n    v160 = v42;\n    v158 = v45;\n    v169 = v54;\n    v165 = v42;\n    v156 = v45;\n    if (v179 == 0) {\n        goto lab_0x401d87;\n    } else {\n        goto lab_0x401ff5;\n    }\n  lab_0x4024ea:\n    // 0x4024ea\n    __overflow((struct _IO_FILE *)1, 10);\n    goto lab_0x402230;\n  lab_0x402587:\n    // 0x402587\n    __overflow((struct _IO_FILE *)v151, 10);\n    v116 = v152;\n    v117 = v153;\n    v118 = v154;\n    goto lab_0x401e6e;\n  lab_0x401d87:;\n    int64_t v155 = v156;\n    char * v157 = (char *)v158; // 0x401d87\n    *v157 = 0;\n    char * v159 = (char *)v160; // 0x401d97\n    *v159 = 0;\n    int64_t * v161 = (int64_t *)v162;\n    *v161 = (int64_t)&g48;\n    int64_t * v163 = (int64_t *)v164;\n    *v163 = v165;\n    int64_t * v166 = (int64_t *)v167;\n    int64_t v168 = *v166; // 0x401da4\n    function_403bd0(0, v168, v169, v1, (int64_t *)&g48, (int64_t *)v155, (int64_t *)&g73);\n    if (*v159 == 0) {\n        // 0x401dbc\n        return 0;\n    }\n    int64_t v170 = *v161; // 0x401daf\n    if (tcsetattr(0, g25, (struct termios *)&g48) != 0) {\n        int64_t v171 = function_4064f0(0, 3, *v166); // 0x402564\n        error(1, *__errno_location(), \"%s\", (char *)v171);\n        v152 = v171;\n        v151 = 1;\n        v153 = v170;\n        v154 = v155;\n        goto lab_0x402587;\n    } else {\n        // 0x401f08\n        if (tcgetattr(0, (struct termios *)&g46) != 0) {\n            goto lab_0x402429;\n        } else {\n            // 0x401f1c\n            if (memcmp((int64_t *)&g48, (int64_t *)&g46, 60) == 0) {\n                // 0x401dbc\n                return 0;\n            }\n            // 0x401f38\n            g47 &= -0x100f0001;\n            if (*v157 == 0) {\n                // 0x401f49\n                if (memcmp((int64_t *)&g48, (int64_t *)&g46, 60) == 0) {\n                    // 0x401dbc\n                    return 0;\n                }\n            }\n            int64_t v172 = function_4064f0(0, 3, *v166); // 0x401f71\n            error(1, (int32_t)\"%s: unable to perform all requested operations\" ^ (int32_t)\"%s: unable to perform all requested operations\", dcgettext(NULL, \"%s: unable to perform all requested operations\", 5));\n            v44 = v163;\n            v43 = v164;\n            v42 = v160;\n            v41 = v161;\n            v40 = v162;\n            v39 = v166;\n            v46 = v167;\n            v45 = v158;\n            v54 = v172;\n            v52 = v155;\n            goto lab_0x401f9e;\n        }\n    }\n  lab_0x402230:\n    // 0x402230\n    g57 = 0;\n    int32_t strcmp_rc = strcmp(\"intr\", \"min\"); // 0x40226a\n    char * str2 = \"intr\"; // 0x402271\n    if (strcmp_rc != 0) {\n        int64_t v76 = (int64_t)&g8;\n        int64_t v77; // 0x401aa0\n        int64_t v78; // 0x402284\n        unsigned char v79; // 0x402288\n        if (strcmp(str2, \"flush\") != 0) {\n            // 0x402284\n            v78 = *(int64_t *)(v76 + 16);\n            v79 = *(char *)(v78 + (int64_t)&g53);\n            v77 = (int64_t)\"<undef>\";\n            if (v79 != 0) {\n                // 0x402241\n                v77 = function_402b00((int64_t)v79);\n            }\n            // 0x402249\n            function_4027c0(\"%s = %s;\", (char)(int64_t)\"intr\", v77, v75, v73, v74);\n        }\n        int64_t v80 = v76 + 24; // 0x40225b\n        int64_t v81 = *(int64_t *)v80; // 0x40225f\n        char * str3 = (char *)v81; // 0x40226a\n        int32_t strcmp_rc2 = strcmp(str3, \"min\"); // 0x40226a\n        str2 = str3;\n        int64_t v82 = v81; // 0x402271\n        while (strcmp_rc2 != 0) {\n            // 0x402273\n            v76 = v80;\n            if (strcmp(str2, \"flush\") != 0) {\n                // 0x402284\n                v78 = *(int64_t *)(v76 + 16);\n                v79 = *(char *)(v78 + (int64_t)&g53);\n                v77 = (int64_t)\"<undef>\";\n                if (v79 != 0) {\n                    // 0x402241\n                    v77 = function_402b00((int64_t)v79);\n                }\n                // 0x402249\n                function_4027c0(\"%s = %s;\", (char)v82, v77, v75, v73, v74);\n            }\n            // 0x40225b\n            v80 = v76 + 24;\n            v81 = *(int64_t *)v80;\n            str3 = (char *)v81;\n            strcmp_rc2 = strcmp(str3, \"min\");\n            str2 = str3;\n            v82 = v81;\n        }\n    }\n    // 0x40229a\n    function_4027c0(\"min = %lu; time = %lu;\", g55, (int64_t)g54, v75, v73, v74);\n    if (g57 != 0) {\n        int64_t v83 = (int64_t)g36; // 0x4022bb\n        int64_t * v84 = (int64_t *)(v83 + 40); // 0x4022c2\n        uint64_t v85 = *v84; // 0x4022c2\n        if (v85 >= *(int64_t *)(v83 + 48)) {\n            // 0x4024f9\n            __overflow(g36, 10);\n        } else {\n            // 0x4022d0\n            *v84 = v85 + 1;\n            *(char *)v85 = 10;\n        }\n    }\n    // 0x4022db\n    g57 = 0;\n    int64_t v86 = (int64_t)&g10;\n    int64_t v87 = 0;\n    char * v88 = (char *)(v86 + 12); // 0x4022fd\n    int64_t v89 = v87; // 0x402301\n    int64_t * v90; // 0x401aa0\n    int64_t v91; // 0x401aa0\n    int64_t v92; // 0x401aa0\n    int64_t v93; // 0x401aa0\n    int32_t * v94; // 0x402303\n    uint32_t v95; // 0x402303\n    int64_t v96; // 0x40233e\n    int64_t v97; // 0x402343\n    int64_t v98; // 0x40230b\n    int64_t * v99; // 0x402312\n    uint64_t v100; // 0x402312\n    int64_t v101; // 0x40234c\n    int64_t v102; // 0x402359\n    int32_t v103; // 0x402334\n    if ((*v88 & 8) == 0) {\n        // 0x402303\n        v90 = (int64_t *)&g10;\n        v94 = (int32_t *)(v86 + 8);\n        v95 = *v94;\n        v103 = v95;\n        v91 = v87;\n        if (v95 != (int32_t)v87) {\n            // 0x40230b\n            v98 = (int64_t)g36;\n            v99 = (int64_t *)(v98 + 40);\n            v100 = *v99;\n            if (v100 >= *(int64_t *)(v98 + 48)) {\n                // 0x40238f\n                __overflow(g36, 10);\n            } else {\n                // 0x40231c\n                *v99 = v100 + 1;\n                *(char *)v100 = 10;\n            }\n            // 0x402327\n            g57 = 0;\n            v103 = *v94;\n            v91 = v95;\n        }\n        // 0x402337\n        v92 = v91;\n        v96 = function_402750(v103);\n        v97 = *(int64_t *)(v86 + 24);\n        v101 = v97;\n        if (v97 == 0) {\n            // 0x40234c\n            v101 = *(int64_t *)(v86 + 16);\n        }\n        if (v96 == 0) {\n            // 0x402508\n            __assert_fail(\"bitsp\", \"src/stty.c\", 2038, \"display_all\");\n            // 0x402521\n            __assert_fail(\"bitsp\", \"src/stty.c\", 1954, \"display_changed\");\n            v93 = (int64_t)\"bitsp\";\n            goto lab_0x40253a;\n        }\n        // 0x402359\n        v102 = (int64_t)(*(int32_t *)v96 & (int32_t)v101);\n        if (*(int64_t *)(v86 + 16) == v102) {\n            // 0x40237b\n            function_4027c0(\"%s\", (char)*v90, v102, v75, v73, v74);\n            v89 = v92;\n        } else {\n            // 0x402361\n            v89 = v92;\n            if ((*v88 & 4) != 0) {\n                // 0x402367\n                function_4027c0(\"-%s\", (char)*v90, v102, v75, v73, v74);\n                v89 = v92;\n            }\n        }\n    }\n    int64_t v104 = v86 + 32; // 0x4022ef\n    int64_t * v105 = (int64_t *)v104; // 0x4022f3\n    while (*v105 != 0) {\n        // 0x4022fd\n        v86 = v104;\n        v87 = v89;\n        v88 = (char *)(v86 + 12);\n        v89 = v87;\n        if ((*v88 & 8) == 0) {\n            // 0x402303\n            v90 = v105;\n            v94 = (int32_t *)(v86 + 8);\n            v95 = *v94;\n            v103 = v95;\n            v91 = v87;\n            if (v95 != (int32_t)v87) {\n                // 0x40230b\n                v98 = (int64_t)g36;\n                v99 = (int64_t *)(v98 + 40);\n                v100 = *v99;\n                if (v100 >= *(int64_t *)(v98 + 48)) {\n                    // 0x40238f\n                    __overflow(g36, 10);\n                } else {\n                    // 0x40231c\n                    *v99 = v100 + 1;\n                    *(char *)v100 = 10;\n                }\n                // 0x402327\n                g57 = 0;\n                v103 = *v94;\n                v91 = v95;\n            }\n            // 0x402337\n            v92 = v91;\n            v96 = function_402750(v103);\n            v97 = *(int64_t *)(v86 + 24);\n            v101 = v97;\n            if (v97 == 0) {\n                // 0x40234c\n                v101 = *(int64_t *)(v86 + 16);\n            }\n            if (v96 == 0) {\n                // 0x402508\n                __assert_fail(\"bitsp\", \"src/stty.c\", 2038, \"display_all\");\n                // 0x402521\n                __assert_fail(\"bitsp\", \"src/stty.c\", 1954, \"display_changed\");\n                v93 = (int64_t)\"bitsp\";\n                goto lab_0x40253a;\n            }\n            // 0x402359\n            v102 = (int64_t)(*(int32_t *)v96 & (int32_t)v101);\n            if (*(int64_t *)(v86 + 16) == v102) {\n                // 0x40237b\n                function_4027c0(\"%s\", (char)*v90, v102, v75, v73, v74);\n                v89 = v92;\n            } else {\n                // 0x402361\n                v89 = v92;\n                if ((*v88 & 4) != 0) {\n                    // 0x402367\n                    function_4027c0(\"-%s\", (char)*v90, v102, v75, v73, v74);\n                    v89 = v92;\n                }\n            }\n        }\n        // 0x4022ef\n        v104 = v86 + 32;\n        v105 = (int64_t *)v104;\n    }\n    goto lab_0x4021b0;\n  lab_0x401e6e:\n    // 0x401e6e\n    g57 = 0;\n    int32_t strcmp_rc3 = strcmp(\"intr\", \"min\"); // 0x401eb2\n    char * str4 = \"intr\"; // 0x401eb9\n    int64_t v109 = (int64_t)&g8; // 0x401eb9\n    int64_t v110 = 1; // 0x401eb9\n    if (strcmp_rc3 != 0) {\n        int64_t v111 = 1;\n        int64_t v112 = *(int64_t *)(v109 + 16); // 0x401ebf\n        unsigned char v113 = *(char *)(v112 + (int64_t)&g53); // 0x401ec3\n        int64_t v114 = v111; // 0x401ecf\n        int64_t v115; // 0x401aa0\n        if (v113 != *(char *)(v109 + 8)) {\n            // 0x401ed1\n            v114 = v111;\n            if (strcmp(str4, \"flush\") != 0) {\n                // 0x401ee2\n                v115 = (int64_t)\"<undef>\";\n                if (v113 != 0) {\n                    // 0x401e85\n                    v115 = function_402b00((int64_t)v113);\n                }\n                // 0x401e8e\n                function_4027c0(\"%s = %s;\", (char)(int64_t)\"intr\", v115, v116, v117, v118);\n                v114 = 0;\n            }\n        }\n        int64_t v119 = v109 + 24; // 0x401ea3\n        int64_t v120 = *(int64_t *)v119; // 0x401ea7\n        char * str5 = (char *)v120; // 0x401eb2\n        int32_t strcmp_rc4 = strcmp(str5, \"min\"); // 0x401eb2\n        str4 = str5;\n        int64_t v121 = v120; // 0x401eb9\n        v109 = v119;\n        v110 = v114;\n        while (strcmp_rc4 != 0) {\n            // 0x401ebf\n            v111 = v114;\n            v112 = *(int64_t *)(v109 + 16);\n            v113 = *(char *)(v112 + (int64_t)&g53);\n            v114 = v111;\n            if (v113 != *(char *)(v109 + 8)) {\n                // 0x401ed1\n                v114 = v111;\n                if (strcmp(str4, \"flush\") != 0) {\n                    // 0x401ee2\n                    v115 = (int64_t)\"<undef>\";\n                    if (v113 != 0) {\n                        // 0x401e85\n                        v115 = function_402b00((int64_t)v113);\n                    }\n                    // 0x401e8e\n                    function_4027c0(\"%s = %s;\", (char)v121, v115, v116, v117, v118);\n                    v114 = 0;\n                }\n            }\n            // 0x401ea3\n            v119 = v109 + 24;\n            v120 = *(int64_t *)v119;\n            str5 = (char *)v120;\n            strcmp_rc4 = strcmp(str5, \"min\");\n            str4 = str5;\n            v121 = v120;\n            v109 = v119;\n            v110 = v114;\n        }\n    }\n    // 0x402098\n    if ((*(char *)&g51 & 2) == 0) {\n        // 0x4023aa\n        function_4027c0(\"min = %lu; time = %lu;\\n\", g55, (int64_t)g54, v116, v117, v118);\n    } else {\n        // 0x4020a5\n        if ((char)v110 == 0) {\n            int64_t v122 = (int64_t)g36; // 0x4020aa\n            int64_t * v123 = (int64_t *)(v122 + 40); // 0x4020b1\n            uint64_t v124 = *v123; // 0x4020b1\n            if (v124 >= *(int64_t *)(v122 + 48)) {\n                // 0x4023ce\n                __overflow(g36, 10);\n            } else {\n                // 0x4020bf\n                *v123 = v124 + 1;\n                *(char *)v124 = 10;\n            }\n        }\n    }\n    // 0x4020ca\n    g57 = 0;\n    int64_t v125 = (int64_t)&g10;\n    int64_t v126 = 0;\n    int64_t v127 = 1;\n    char * v128 = (char *)(v125 + 12); // 0x4020fd\n    int64_t v129 = v126; // 0x402101\n    int64_t v130 = v127; // 0x402101\n    int32_t v131; // 0x401aa0\n    int64_t * v132; // 0x401aa0\n    int64_t v133; // 0x401aa0\n    int64_t v134; // 0x401aa0\n    int64_t v135; // 0x401aa0\n    int32_t * v136; // 0x402105\n    int32_t v137; // 0x402105\n    int64_t v138; // 0x402149\n    int64_t v139; // 0x40214e\n    int64_t v140; // 0x402157\n    int64_t v141; // 0x402139\n    int64_t v142; // 0x40210f\n    int64_t * v143; // 0x402116\n    uint64_t v144; // 0x402116\n    char v145; // 0x402164\n    int64_t v146; // 0x402168\n    unsigned char v147; // 0x402174\n    if ((*v128 & 8) == 0) {\n        // 0x402103\n        v132 = (int64_t *)&g10;\n        v136 = (int32_t *)(v125 + 8);\n        v137 = *v136;\n        v141 = v126 & 0xffffffff;\n        v133 = v127;\n        if (v137 != (int32_t)v126) {\n            // 0x40210a\n            v131 = v137;\n            if ((char)v127 == 0) {\n                // 0x40210f\n                v142 = (int64_t)g36;\n                v143 = (int64_t *)(v142 + 40);\n                v144 = *v143;\n                if (v144 >= *(int64_t *)(v142 + 48)) {\n                    // 0x40239b\n                    __overflow(g36, 10);\n                } else {\n                    // 0x402124\n                    *v143 = v144 + 1;\n                    *(char *)v144 = 10;\n                }\n                // 0x40212f\n                g57 = 0;\n                v131 = *v136;\n            }\n            // 0x402139\n            v141 = v131;\n            v133 = 1;\n        }\n        // 0x402144\n        v134 = v133;\n        v135 = v141;\n        v138 = function_402750((int32_t)v141);\n        v139 = *(int64_t *)(v125 + 24);\n        v140 = v139;\n        if (v139 == 0) {\n            // 0x402157\n            v140 = *(int64_t *)(v125 + 16);\n        }\n        if (v138 == 0) {\n            // 0x402521\n            __assert_fail(\"bitsp\", \"src/stty.c\", 1954, \"display_changed\");\n            v93 = (int64_t)\"bitsp\";\n            goto lab_0x40253a;\n        }\n        // 0x402164\n        v145 = *v128;\n        v146 = (int64_t)(*(int32_t *)v138 & (int32_t)v140);\n        if (*(int64_t *)(v125 + 16) != v146) {\n            // 0x4020e3\n            v129 = v135;\n            v130 = v134;\n            if ((v145 & 5) == 5) {\n                // 0x402194\n                function_4027c0(\"-%s\", (char)*v132, v146, 5, v117, v118);\n                v129 = v135;\n                v130 = 0;\n            }\n        } else {\n            // 0x402174\n            v147 = v145 & 2;\n            v129 = v135;\n            v130 = v134;\n            if (v147 != 0) {\n                // 0x40217d\n                function_4027c0(\"%s\", (char)*v132, v146, (int64_t)v147, v117, v118);\n                v129 = v135;\n                v130 = 0;\n            }\n        }\n    }\n    int64_t v148 = v130;\n    int64_t v149 = v125 + 32; // 0x4020ef\n    int64_t * v150 = (int64_t *)v149; // 0x4020f3\n    while (*v150 != 0) {\n        // 0x4020fd\n        v125 = v149;\n        v126 = v129;\n        v127 = v148;\n        v128 = (char *)(v125 + 12);\n        v129 = v126;\n        v130 = v127;\n        if ((*v128 & 8) == 0) {\n            // 0x402103\n            v132 = v150;\n            v136 = (int32_t *)(v125 + 8);\n            v137 = *v136;\n            v141 = v126 & 0xffffffff;\n            v133 = v127;\n            if (v137 != (int32_t)v126) {\n                // 0x40210a\n                v131 = v137;\n                if ((char)v127 == 0) {\n                    // 0x40210f\n                    v142 = (int64_t)g36;\n                    v143 = (int64_t *)(v142 + 40);\n                    v144 = *v143;\n                    if (v144 >= *(int64_t *)(v142 + 48)) {\n                        // 0x40239b\n                        __overflow(g36, 10);\n                    } else {\n                        // 0x402124\n                        *v143 = v144 + 1;\n                        *(char *)v144 = 10;\n                    }\n                    // 0x40212f\n                    g57 = 0;\n                    v131 = *v136;\n                }\n                // 0x402139\n                v141 = v131;\n                v133 = 1;\n            }\n            // 0x402144\n            v134 = v133;\n            v135 = v141;\n            v138 = function_402750((int32_t)v141);\n            v139 = *(int64_t *)(v125 + 24);\n            v140 = v139;\n            if (v139 == 0) {\n                // 0x402157\n                v140 = *(int64_t *)(v125 + 16);\n            }\n            if (v138 == 0) {\n                // 0x402521\n                __assert_fail(\"bitsp\", \"src/stty.c\", 1954, \"display_changed\");\n                v93 = (int64_t)\"bitsp\";\n                goto lab_0x40253a;\n            }\n            // 0x402164\n            v145 = *v128;\n            v146 = (int64_t)(*(int32_t *)v138 & (int32_t)v140);\n            if (*(int64_t *)(v125 + 16) != v146) {\n                // 0x4020e3\n                v129 = v135;\n                v130 = v134;\n                if ((v145 & 5) == 5) {\n                    // 0x402194\n                    function_4027c0(\"-%s\", (char)*v132, v146, 5, v117, v118);\n                    v129 = v135;\n                    v130 = 0;\n                }\n            } else {\n                // 0x402174\n                v147 = v145 & 2;\n                v129 = v135;\n                v130 = v134;\n                if (v147 != 0) {\n                    // 0x40217d\n                    function_4027c0(\"%s\", (char)*v132, v146, (int64_t)v147, v117, v118);\n                    v129 = v135;\n                    v130 = 0;\n                }\n            }\n        }\n        // 0x4020ef\n        v148 = v130;\n        v149 = v125 + 32;\n        v150 = (int64_t *)v149;\n    }\n    if ((char)v148 != 0) {\n        // 0x4021d0\n        g57 = 0;\n        // 0x401dbc\n        return 0;\n    }\n    goto lab_0x4021b0;\n  lab_0x4021b0:;\n    int64_t v106 = (int64_t)g36; // 0x4021b0\n    int64_t * v107 = (int64_t *)(v106 + 40); // 0x4021b7\n    uint64_t v108 = *v107; // 0x4021b7\n    v93 = v106;\n    if (v108 >= *(int64_t *)(v106 + 48)) {\n      lab_0x40253a:\n        // 0x40253a\n        __overflow((struct _IO_FILE *)v93, 10);\n        // 0x4021d0\n        g57 = 0;\n        // 0x401dbc\n        return 0;\n    }\n    // 0x4021c5\n    *v107 = v108 + 1;\n    *(char *)v108 = 10;\n    // 0x4021d0\n    g57 = 0;\n    // 0x401dbc\n    return 0;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4025a0",
            "funcEndAddr": "4025cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4025a0\n    int64_t v1; // 0x4025a0\n    __libc_start_main(0x401aa0, (int32_t)a4, (char **)&v1, (void (*)())0x40bce0, (void (*)())0x40bd40, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4025cb",
            "funcStartAddr": "4025cb",
            "funcEndAddr": "4025ea",
            "decompiledFuncCode": "int64_t function_4025cb(void) {\n    // 0x4025cb\n    return &g35;\n}\n"
        },
        {
            "funcName": "function_4025ea",
            "funcStartAddr": "4025ea",
            "funcEndAddr": "402621",
            "decompiledFuncCode": "int64_t function_4025ea(void) {\n    // 0x4025ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402621",
            "funcStartAddr": "402621",
            "funcEndAddr": "402678",
            "decompiledFuncCode": "int64_t function_402621(void) {\n    // 0x402621\n    if (g39 != 0) {\n        // 0x402677\n        int64_t result; // 0x402621\n        return result;\n    }\n    int64_t v1 = g40; // 0x402654\n    int64_t result2; // 0x402666\n    if (g40 >= ((int64_t)&g22 - (int64_t)&g21 >> 3) - 1) {\n        // 0x402666\n        result2 = function_4025cb();\n        g39 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g22 - (int64_t)&g21 >> 3) - 1) {\n        // 0x402656\n        v1++;\n    }\n    // 0x40264a\n    g40 = v1;\n    // 0x402666\n    result2 = function_4025cb();\n    g39 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402678",
            "funcStartAddr": "402678",
            "funcEndAddr": "40267d",
            "decompiledFuncCode": "int64_t function_402678(void) {\n    // 0x402678\n    return function_4025ea();\n}\n"
        },
        {
            "funcName": "function_402680",
            "funcStartAddr": "402680",
            "funcEndAddr": "4026da",
            "decompiledFuncCode": "int64_t function_402680(int64_t str) {\n    int64_t v1 = (int64_t)&g5; // 0x402693\n    int64_t str2 = (int64_t)&g2; // 0x402693\n    int64_t v2 = 0;\n    while (strcmp((char *)str, (char *)str2) != 0) {\n        // 0x402698\n        str2 = *(int64_t *)v1;\n        v1 += 24;\n        if (str2 == 0) {\n            // 0x4026d0\n            return 0xffffffff;\n        }\n        v2 = v2 + 1 & 0xffffffff;\n    }\n    int64_t v3 = 0x100000000 * v2;\n    uint32_t result = *(int32_t *)(8 * ((v3 >> 32) + (v3 >> 31)) + (int64_t)&g3); // 0x4026c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4026e0",
            "funcStartAddr": "4026e0",
            "funcEndAddr": "40274b",
            "decompiledFuncCode": "int64_t function_4026e0(void) {\n    // 0x4026e0\n    int16_t v1; // 0x4026e0\n    uint16_t result = v1;\n    if (ioctl(1, 0x5413) == 0) {\n        // 0x4026fe\n        if (result != 0) {\n            // 0x402746\n            return result;\n        }\n    }\n    char * env_val = getenv(\"COLUMNS\"); // 0x40270d\n    if (env_val == NULL) {\n        // 0x402746\n        return 80;\n    }\n    // 0x402717\n    int64_t result2; // bp-24, 0x4026e0\n    int64_t v2 = function_406fc0((int64_t)env_val, 0, 0, &result2, (int64_t *)&g18); // 0x402727\n    if ((int32_t)v2 != 0) {\n        // 0x402746\n        return 80;\n    }\n    // 0x402730\n    if (result2 < 0x80000000) {\n        // 0x402746\n        return result2;\n    }\n    // 0x402746\n    return 80;\n}\n"
        },
        {
            "funcName": "function_402750",
            "funcStartAddr": "402750",
            "funcEndAddr": "402766",
            "decompiledFuncCode": "int64_t function_402750(uint32_t a1) {\n    // 0x402750\n    if (a1 < 5) {\n        // 0x40275d\n        int64_t result; // 0x402750\n        return result;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402770",
            "funcStartAddr": "402770",
            "funcEndAddr": "402777",
            "decompiledFuncCode": "int64_t function_402770(void) {\n    // 0x402770\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402780",
            "funcStartAddr": "402780",
            "funcEndAddr": "402789",
            "decompiledFuncCode": "int64_t function_402780(int64_t a1, int64_t a2) {\n    // 0x402780\n    return a2 + 12;\n}\n"
        },
        {
            "funcName": "function_402790",
            "funcStartAddr": "402790",
            "funcEndAddr": "402799",
            "decompiledFuncCode": "int64_t function_402790(int64_t a1, int64_t a2) {\n    // 0x402790\n    return a2 + 8;\n}\n"
        },
        {
            "funcName": "function_4027a0",
            "funcStartAddr": "4027a0",
            "funcEndAddr": "4027a8",
            "decompiledFuncCode": "int64_t function_4027a0(int64_t a1, int64_t result) {\n    // 0x4027a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4027b0",
            "funcStartAddr": "4027b0",
            "funcEndAddr": "4027b9",
            "decompiledFuncCode": "int64_t function_4027b0(int64_t a1, int64_t a2) {\n    // 0x4027b0\n    return a2 + 4;\n}\n"
        },
        {
            "funcName": "function_4027c0",
            "funcStartAddr": "4027c0",
            "funcEndAddr": "402924",
            "decompiledFuncCode": "int64_t function_4027c0(char * a1, char a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4027c0\n    int64_t v1; // 0x4027c0\n    if ((char)v1 != 0) {\n        // 0x4027e5\n        int128_t v2; // 0x4027c0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 8; // bp-208, 0x402839\n    char * v4; // bp-216, 0x4027c0\n    int64_t v5 = function_408ae0((int64_t *)&v4, (int64_t)a1, &v3); // 0x40284e\n    int32_t v6 = v5; // 0x402855\n    if (v6 < 0) {\n        // 0x40291f\n        function_406e80((int64_t)&v4);\n        // UNREACHABLE\n    }\n    int32_t v7 = g57; // 0x40285d\n    int64_t v8 = (int64_t)g36; // 0x402863\n    int64_t v9 = v8; // 0x40286c\n    if (v7 >= 1) {\n        int64_t * v10 = (int64_t *)(v8 + 40); // 0x402874\n        uint64_t v11 = *v10; // 0x402874\n        uint64_t v12 = *(int64_t *)(v8 + 48); // 0x402878\n        if ((v5 & 0xffffffff) > (int64_t)(g58 - v7)) {\n            if (v11 >= v12) {\n                // 0x402910\n                __overflow(g36, 10);\n            } else {\n                // 0x40288b\n                *v10 = v11 + 1;\n                *(char *)v11 = 10;\n            }\n            // 0x402896\n            g57 = 0;\n            v9 = (int64_t)g36;\n        } else {\n            int32_t v13; // 0x4027c0\n            if (v11 >= v12) {\n                // 0x4028f8\n                __overflow(g36, 32);\n                v13 = g57;\n            } else {\n                // 0x4028d5\n                *v10 = v11 + 1;\n                *(char *)v11 = 32;\n                v13 = v7;\n            }\n            // 0x4028e0\n            g57 = v13 + 1;\n            v9 = (int64_t)g36;\n        }\n    }\n    // 0x4028a7\n    fputs_unlocked(v4, (struct _IO_FILE *)v9);\n    free((int64_t *)v4);\n    g57 += v6;\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_402930",
            "funcStartAddr": "402930",
            "funcEndAddr": "402aab",
            "decompiledFuncCode": "int64_t function_402930(int64_t * termios_p, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402930\n    int64_t v1; // 0x402930\n    int64_t v2; // 0x402930\n    int64_t v3; // 0x402930\n    if (cfgetispeed((struct termios *)termios_p) == 0) {\n        goto lab_0x40295a;\n    } else {\n        // 0x402942\n        if (cfgetispeed((struct termios *)termios_p) != cfgetospeed((struct termios *)termios_p)) {\n            int32_t v4 = cfgetospeed((struct termios *)termios_p); // 0x4029cb\n            int64_t v5 = &g6; // 0x402930\n            v2 = a4;\n            v3 = 0;\n            v1 = 0x100000000;\n            switch (v4) {\n                case 0: {\n                    goto lab_0x402a04;\n                }\n                case 1: {\n                    goto lab_0x402a90;\n                }\n                default: {\n                    int64_t v6 = 2; // 0x4029f9\n                    int64_t v7 = v6 & 0xffffffff; // 0x4029f9\n                    v2 = v7;\n                    v3 = 0;\n                    while (*(int64_t *)(v5 + 16) != 0) {\n                        int64_t v8 = v5 + 24; // 0x4029e8\n                        v5 = v8;\n                        if (*(int32_t *)v8 == v4) {\n                            // 0x4029e8\n                            v1 = 0x100000000 * v6;\n                            goto lab_0x402a90;\n                        }\n                        v6 = v7 + 1;\n                        v7 = v6 & 0xffffffff;\n                        v2 = v7;\n                        v3 = 0;\n                    }\n                    goto lab_0x402a04;\n                }\n            }\n        } else {\n            goto lab_0x40295a;\n        }\n    }\n  lab_0x40295a:;\n    int32_t v9 = cfgetospeed((struct termios *)termios_p); // 0x40295d\n    int64_t v10 = a3; // 0x402930\n    int64_t v11 = 0; // 0x402930\n    int64_t v12 = a4; // 0x402930\n    switch (v9) {\n        case 0: {\n            goto lab_0x402999;\n        }\n        case 1: {\n            goto lab_0x402a60;\n        }\n        default: {\n            int64_t v13; // 0x402930\n            int64_t v14 = *(int64_t *)(v13 + 16); // 0x40298d\n            int64_t v15; // 0x402930\n            v10 = v15;\n            v11 = v14;\n            int64_t v16; // 0x402930\n            v12 = v16 + 1 & 0xffffffff;\n            while (v14 != 0) {\n                // 0x402980\n                int64_t v17; // 0x402930\n                int64_t v18 = v17 + 24; // 0x402980\n                int32_t v19 = *(int32_t *)v17; // 0x402984\n                v15 = v18;\n                v13 = v17;\n                int64_t v20; // 0x402991\n                v16 = v20;\n                if (v19 == v9) {\n                    // 0x402980\n                    goto lab_0x402a60;\n                }\n                int64_t v21 = v16;\n                int64_t v22 = v13;\n                v17 = v15;\n                v14 = *(int64_t *)(v22 + 16);\n                int64_t v23 = v21 + 1; // 0x402991\n                v20 = v23 & 0xffffffff;\n                v10 = v17;\n                v11 = v14;\n                v12 = v20;\n            }\n            goto lab_0x402999;\n        }\n    }\n  lab_0x402999:;\n    char v24 = a2;\n    char * v25 = v24 == 0 ? \"%lu\\n\" : \"speed %lu baud;\"; // 0x4029ab\n    char v26 = v24; // 0x4029ab\n    int64_t v27; // 0x402930\n    int64_t result = function_4027c0(v25, (char)v11, v10, v12, v27, v27); // 0x4029ab\n    goto lab_0x4029b0;\n  lab_0x402a60:;\n    int64_t v44 = 0x100000000;\n    int64_t v45 = v44 >> 32; // 0x402a60\n    int64_t v46 = *(int64_t *)(8 * (v45 + (v44 >> 31)) + (int64_t)&g4); // 0x402a67\n    v10 = (int64_t)&g6 + 24;\n    v11 = v46;\n    v12 = v45;\n    goto lab_0x402999;\n  lab_0x4029b0:\n    // 0x4029b0\n    if (v26 == 0) {\n        // 0x4029b4\n        g57 = 0;\n    }\n    // 0x4029be\n    return result;\n  lab_0x402a04:;\n    int32_t v28 = cfgetispeed((struct termios *)termios_p); // 0x402a07\n    int64_t v29 = &g6; // 0x402930\n    int64_t v30 = 1; // 0x402930\n    int64_t v31 = v2; // 0x402930\n    char v32 = 0; // 0x402930\n    int64_t v33 = 0x100000000; // 0x402930\n    int64_t v34 = (int64_t)&g6 + 24; // 0x402930\n    switch (v28) {\n        case 0: {\n            goto lab_0x402a37;\n        }\n        case 1: {\n            goto lab_0x402a78;\n        }\n        default: {\n            int64_t v35 = (int64_t)&g6 + 24;\n            v31 = v35;\n            v32 = 0;\n            while (*(int64_t *)(v29 + 16) != 0) {\n                int64_t v36 = v30 + 1; // 0x402a2d\n                int64_t v37 = v35 + 24; // 0x402a20\n                v29 = v35;\n                v30 = v36 & 0xffffffff;\n                if (*(int32_t *)v35 == v28) {\n                    // 0x402a20\n                    v33 = 0x100000000 * v36;\n                    v34 = v37;\n                    goto lab_0x402a78;\n                }\n                v35 = v37;\n                v31 = v35;\n                v32 = 0;\n            }\n            goto lab_0x402a37;\n        }\n    }\n  lab_0x402a90:;\n    int64_t v38 = v1 >> 32; // 0x402a90\n    int64_t v39 = *(int64_t *)(8 * (v38 + (v1 >> 31)) + (int64_t)&g4); // 0x402a97\n    v2 = v38;\n    v3 = v39;\n    goto lab_0x402a04;\n  lab_0x402a37:;\n    char v40 = a2;\n    char * v41 = v40 == 0 ? \"%lu %lu\\n\" : \"ispeed %lu baud; ospeed %lu baud;\"; // 0x402a4c\n    v26 = v40;\n    result = function_4027c0(v41, v32, v3, v31, v27, v27);\n    goto lab_0x4029b0;\n  lab_0x402a78:;\n    int64_t v42 = v33;\n    int64_t v43 = *(int64_t *)(8 * ((v42 >> 32) + (v42 >> 31)) + (int64_t)&g4); // 0x402a7f\n    v31 = v34;\n    v32 = v43;\n    goto lab_0x402a37;\n}\n"
        },
        {
            "funcName": "function_402ab0",
            "funcStartAddr": "402ab0",
            "funcEndAddr": "402af2",
            "decompiledFuncCode": "int64_t function_402ab0(int64_t a1, int64_t a2) {\n    // 0x402ab0\n    return function_406ec0(a1, (int32_t)\"invalid integer argument\" ^ (int32_t)\"invalid integer argument\", 0, a2, \"bB\", (int64_t)dcgettext(NULL, \"invalid integer argument\", 5), 0);\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402bce",
            "decompiledFuncCode": "int64_t function_402b00(int64_t a1) {\n    unsigned char v1 = (char)a1; // 0x402b00\n    if (v1 < 32) {\n        // 0x402b60\n        *(char *)&g41 = 94;\n        *(char *)&g42 = v1 + 64;\n        *(char *)&g43 = 0;\n        return &g41;\n    }\n    if (v1 < 127) {\n        // 0x402b0c\n        *(char *)&g41 = v1;\n        // 0x402b18\n        *(char *)(int64_t)&g42 = 0;\n        return &g41;\n    }\n    if (v1 == 127) {\n        // 0x402b80\n        *(int16_t *)&g41 = 0x3f5e;\n        // 0x402b18\n        *(char *)(int64_t)&g43 = 0;\n        return &g41;\n    }\n    // 0x402b2e\n    *(int16_t *)&g41 = 0x2d4d;\n    if (v1 < 160) {\n        // 0x402b98\n        *(char *)&g43 = 94;\n        *(char *)&g44 = v1 - 64;\n        // 0x402b18\n        *(char *)(int64_t)&g45 = 0;\n        return &g41;\n    }\n    int64_t v2; // 0x402b00\n    if (v1 == -1) {\n        // 0x402bb8\n        *(int16_t *)&g43 = 0x3f5e;\n        v2 = &g45;\n    } else {\n        // 0x402b46\n        *(char *)&g43 = v1 ^ -128;\n        v2 = &g44;\n    }\n    // 0x402b18\n    *(char *)v2 = 0;\n    return &g41;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402ca0",
            "decompiledFuncCode": "int64_t function_402bd0(int64_t a1, int32_t a2, int64_t a3) {\n    // 0x402bd0\n    if (ioctl(0, 0x5413) != 0) {\n        int32_t * err_num = __errno_location(); // 0x402bf8\n        if (*err_num != 22) {\n            // 0x402c42\n            error(1, *err_num, \"%s\", (char *)function_4064f0(0, 3, a3));\n            // 0x402c69\n            error(1, *__errno_location(), \"%s\", (char *)function_4064f0(0, 3, a3));\n            return &g73;\n        }\n    }\n    int32_t result = ioctl(0, 0x5414); // 0x402c2e\n    if (result == 0) {\n        // 0x402c37\n        return result;\n    }\n    // 0x402c69\n    error(1, *__errno_location(), \"%s\", (char *)function_4064f0(0, 3, a3));\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_402ca0",
            "funcStartAddr": "402ca0",
            "funcEndAddr": "402d90",
            "decompiledFuncCode": "int64_t function_402ca0(int64_t a1, int64_t a2) {\n    // 0x402ca0\n    if (ioctl(0, 0x5413) == 0) {\n        // 0x402ce0\n        int16_t v1; // 0x402ca0\n        int64_t v2 = v1; // 0x402ce0\n        char v3 = v1;\n        int64_t v4; // 0x402ca0\n        if ((char)a1 != 0) {\n            // 0x402d10\n            return function_4027c0(\"rows %d; columns %d;\", v3, v2, v4, v4, v4);\n        }\n        int64_t result = function_4027c0(\"%d %d\\n\", v3, v2, v4, v4, v4); // 0x402cf5\n        g57 = 0;\n        return result;\n    }\n    int32_t * err_num = __errno_location(); // 0x402cc4\n    char * format; // 0x402d6a\n    if (*err_num != 22) {\n        // 0x402d25\n        error(1, *err_num, \"%s\", (char *)function_4064f0(0, 3, a2));\n        // 0x402d4c\n        function_4064f0(0, 3, a2);\n        format = dcgettext(NULL, \"%s: no size information for this device\", 5);\n        error(1, (int32_t)\"%s: no size information for this device\" ^ (int32_t)\"%s: no size information for this device\", format);\n        return &g73;\n    }\n    if ((char)a1 != 0) {\n        // 0x402cd5\n        return (int64_t)err_num;\n    }\n    // 0x402d4c\n    function_4064f0(0, 3, a2);\n    format = dcgettext(NULL, \"%s: no size information for this device\", 5);\n    error(1, (int32_t)\"%s: no size information for this device\" ^ (int32_t)\"%s: no size information for this device\", format);\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_402d90",
            "funcStartAddr": "402d90",
            "funcEndAddr": "403bc1",
            "decompiledFuncCode": "int64_t function_402d90(int32_t status) {\n    // 0x402d90\n    if (status != 0) {\n        // 0x402daa\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402dcf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402dd6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print or change terminal characteristics.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"  -a, --all          print all current settings in human-readable form\\n  -g, --save         print all current settings in a stty-readable form\\n  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nOptional - before SETTING indicates negation.  An * marks non-POSIX\\nsettings.  The underlying system defines which settings are available.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nSpecial characters:\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * discard CHAR  CHAR will toggle discarding of output\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n   eol CHAR      CHAR will end the line\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * eol2 CHAR     alternate CHAR for ending the line\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   erase CHAR    CHAR will erase the last character typed\\n   intr CHAR     CHAR will send an interrupt signal\\n   kill CHAR     CHAR will erase the current line\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * lnext CHAR    CHAR will enter the next character quoted\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   quit CHAR     CHAR will send a quit signal\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * rprnt CHAR    CHAR will redraw the current line\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   start CHAR    CHAR will restart the output after stopping it\\n   stop CHAR     CHAR will stop the output\\n   susp CHAR     CHAR will send a terminal stop signal\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * swtch CHAR    CHAR will switch to a different shell layer\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * werase CHAR   CHAR will erase the last word typed\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\", 5), g36);\n    if (g25 == 1) {\n        // 0x403aff\n        dcgettext(NULL, \"on\", 5);\n    } else {\n        // 0x4030a5\n        dcgettext(NULL, \"off\", 5);\n    }\n    // 0x4030b4\n    __printf_chk(1, dcgettext(NULL, \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"   ispeed N      set the input speed to N\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * line N        use line discipline N\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   min N         with -icanon, set N characters minimum for a completed read\\n   ospeed N      set the output speed to N\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * rows N        tell the kernel that the terminal has N rows\\n * size          print the number of rows and columns according to the kernel\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   speed         print the terminal speed\\n   time N        with -icanon, set read timeout of N tenths of a second\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nControl settings:\\n   [-]clocal     disable modem control signals\\n   [-]cread      allow input to be received\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]crtscts    enable RTS/CTS handshaking\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   csN           set character size to N bits, N in [5..8]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]cstopb     use two stop bits per character (one with '-')\\n   [-]hup        send a hangup signal when the last process closes the tty\\n   [-]hupcl      same as [-]hup\\n   [-]parenb     generate parity bit in output and expect parity bit in input\\n   [-]parodd     set odd parity (or even parity with '-')\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nInput settings:\\n   [-]brkint     breaks cause an interrupt signal\\n   [-]icrnl      translate carriage return to newline\\n   [-]ignbrk     ignore break characters\\n   [-]igncr      ignore carriage return\\n   [-]ignpar     ignore characters with parity errors\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]inlcr      translate newline to carriage return\\n   [-]inpck      enable input parity checking\\n   [-]istrip     clear high (8th) bit of input characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]iutf8      assume input characters are UTF-8 encoded\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]iuclc      translate uppercase characters to lowercase\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]ixany      let any character restart output, not only start character\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]ixoff      enable sending of start/stop characters\\n   [-]ixon       enable XON/XOFF flow control\\n   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n   [-]tandem     same as [-]ixoff\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nOutput settings:\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * bsN           backspace delay style, N in [0..1]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * crN           carriage return delay style, N in [0..3]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * ffN           form feed delay style, N in [0..1]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * nlN           newline delay style, N in [0..1]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]ocrnl      translate carriage return to newline\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]olcuc      translate lowercase characters to uppercase\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]onlcr      translate newline to carriage return-newline\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]onlret     newline performs a carriage return\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]onocr      do not print carriage returns in the first column\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]opost      postprocess output\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * tabN          horizontal tab delay style, N in [0..3]\\n * tabs          same as tab0\\n * -tabs         same as tab3\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * vtN           vertical tab delay style, N in [0..1]\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n * -crtkill      kill all line by obeying the echoctl and echok settings\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]ctlecho    echo control characters in hat notation ('^c')\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]echo       echo input characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]echoctl    same as [-]ctlecho\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]echoke     same as [-]crtkill\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   [-]echonl     echo newline even if not echoing other characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]echoprt    echo erased characters backward, between '\\\\' and '/'\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]flusho     discard output\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"   [-]isig       enable interrupt, quit, and suspend special characters\\n   [-]noflsh     disable flushing after interrupt and quit special characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]prterase   same as [-]echoprt\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]tostop     stop background jobs that try to write to the terminal\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]xcase      with icanon, escape with '\\\\' for uppercase characters\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nCombination settings:\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]LCASE      same as [-]lcase\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n                 icanon, eof and eol characters to their default values\\n   -cooked       same as raw\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"   crt           same as %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \" * [-]decctlq    same as [-]ixany\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   ek            erase and kill characters to their default values\\n   evenp         same as parenb -parodd cs7\\n   -evenp        same as -parenb cs8\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \" * [-]lcase      same as xcase iuclc olcuc\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"   nl            same as %s\\n   -nl           same as %s\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"   oddp          same as parenb parodd cs7\\n   -oddp         same as -parenb cs8\\n   [-]parity     same as [-]evenp\\n   pass8         same as -parenb -istrip cs8\\n   -pass8        same as parenb istrip cs7\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n                 -isig%s min 1 time 0\\n   -raw          same as cooked\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n                 icanon iexten echo echoe echok -echonl -noflsh\\n                 %s\\n                 %s\\n                 %s,\\n                 all special characters to their default values\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nHandle the tty line connected to standard input.  Without arguments,\\nprints baud rate, line discipline, and deviations from stty sane.  In\\nsettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n127; special values ^- or undef used to disable special characters.\\n\", 5), g36);\n    int64_t v1 = &g1; // bp-136, 0x403990\n    bool v2; // 0x402d90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403a10\n    int64_t v6 = *(int64_t *)v5; // 0x403a14\n    int64_t v7 = 5; // 0x403a1a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"stty\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403a26\n        char v11 = *(char *)v9; // 0x403a26\n        char v12 = v11; // 0x403a26\n        bool v13 = false; // 0x403a26\n        while (v10 == v11) {\n            // 0x403a1c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403a26\n            int64_t v15 = v8 + v3; // 0x403a26\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403a32\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x403a32\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403b87;\n        } else {\n            // 0x403b71\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403b18\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403a94;\n            } else {\n                goto lab_0x403b87;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403a94;\n        } else {\n            // 0x403a7a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403b18\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403a94;\n            } else {\n                goto lab_0x403a94;\n            }\n        }\n    }\n  lab_0x403b87:\n    // 0x403b87\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403ad4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402dcf\n    exit(status);\n    // UNREACHABLE\n  lab_0x403a94:\n    // 0x403a94\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403ad4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402dcf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "404913",
            "decompiledFuncCode": "int64_t function_403bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * termios_p, int64_t * a6, int64_t * a7) {\n    int64_t v1 = (int64_t)termios_p;\n    int64_t v2 = v1;\n    int64_t result; // 0x403bd0\n    if ((int32_t)a4 < 2) {\n        // 0x403d47\n        return result;\n    }\n    int64_t v3 = (int64_t)a7;\n    uint64_t v4 = 0x100000000 * a4 >> 32; // 0x403bfb\n    bool v5; // 0x403bd0\n    int64_t v6 = v5 ? -1 : 1;\n    int32_t * v7 = (int32_t *)(v1 + 8);\n    int32_t * v8 = (int32_t *)(v1 + 4);\n    int16_t * v9 = (int16_t *)(v1 + 19);\n    int32_t * v10 = (int32_t *)(v1 + 12);\n    int64_t v11 = v1 + 17;\n    int32_t v12 = -(int32_t)v4;\n    int64_t v13 = 1; // 0x403c08\n    int64_t v14; // 0x403bd0\n    int64_t v15; // 0x403bd0\n    int64_t v16; // 0x403bd0\n    int64_t v17; // 0x403bd0\n    int64_t v18; // 0x403bd0\n    int64_t v19; // 0x403bd0\n    int64_t v20; // 0x403bd0\n    int64_t v21; // 0x403bd0\n    int64_t v22; // 0x403bd0\n    int64_t v23; // 0x403c2f\n    char v24; // 0x403c4c\n    char * str; // 0x403bd0\n    char * str2; // 0x403bd0\n    while (true) {\n      lab_0x403c2c_2:\n        // 0x403c2c\n        v19 = v13;\n        int64_t v25 = 0x100000000 * v19;\n        int64_t v26 = v25 >> 32; // 0x403c2c\n        v23 = v25 >> 29;\n        int64_t v27 = *(int64_t *)(v23 + a3); // 0x403c40\n        v17 = v26;\n        v18 = v19;\n        if (v27 == 0) {\n            goto lab_0x403c1f;\n        } else {\n            // 0x403c49\n            v24 = *(char *)v27;\n            v22 = v27 + (int64_t)(v24 == 45);\n            int64_t v28 = 6; // 0x403c68\n            int64_t v29 = v22;\n            int64_t v30 = (int64_t)\"drain\";\n            unsigned char v31 = *(char *)v29; // 0x403c68\n            char v32 = *(char *)v30; // 0x403c68\n            char v33 = v32; // 0x403c68\n            bool v34 = false; // 0x403c68\n            while (v31 == v32) {\n                v28--;\n                int64_t v35 = v30 + v6; // 0x403c68\n                int64_t v36 = v29 + v6; // 0x403c68\n                v33 = v31;\n                v34 = true;\n                if (v28 == 0) {\n                    // break -> \n                    break;\n                }\n                v29 = v36;\n                v30 = v35;\n                v31 = *(char *)v29;\n                v32 = *(char *)v30;\n                v33 = v32;\n                v34 = false;\n            }\n            unsigned char v37 = v33;\n            uint64_t v38 = (int64_t)!((v31 < v37 | v34)) - (int64_t)(v31 < v37); // 0x403c6d\n            if ((char)v38 == 0) {\n                // 0x403c10\n                g25 = v24 != 45;\n                v17 = v38 % 256 | v26 & -256;\n                v18 = v19;\n                goto lab_0x403c1f;\n            } else {\n                // 0x403c9b\n                str = (char *)v22;\n                int64_t v39 = 0;\n                str2 = (char *)(int64_t)\"parenb\";\n                while (strcmp(str, str2) != 0) {\n                    int64_t v40 = v39 + 1; // 0x403c80\n                    int64_t v41 = *(int64_t *)(32 * v40 + (int64_t)&g10); // 0x403c8b\n                    if (v41 == 0) {\n                        // 0x403d60\n                        v14 = 0;\n                        v15 = (int64_t)\"intr\";\n                        v16 = (int64_t)&g9;\n                        if (v24 == 45) {\n                            // 0x40421b\n                            function_406670(v22 - 1);\n                            v21 = (int64_t)\"invalid argument %s\";\n                            goto lab_0x40440f;\n                        } else {\n                            goto lab_0x403d95;\n                        }\n                    }\n                    v39 = v40;\n                    str2 = (char *)v41;\n                }\n                int64_t v42 = 0x100000000 * v39 >> 27; // 0x403cad\n                char v43 = *(char *)(v42 + (int64_t)&g10 + 12); // 0x403cb8\n                if ((v43 & 16) == 0) {\n                    if (v24 != 45) {\n                        int64_t v44 = function_402750(*(int32_t *)(v42 + (int64_t)&g10 + 8)); // 0x403f9d\n                        if (v44 == 0) {\n                            // 0x40404a\n                            if (strcmp(str2, \"evenp\") == 0) {\n                                goto lab_0x4041e7;\n                            } else {\n                                // 0x40405f\n                                if (strcmp(str2, \"parity\") == 0) {\n                                    goto lab_0x4041e7;\n                                } else {\n                                    // 0x404074\n                                    if (strcmp(str2, \"oddp\") == 0) {\n                                        // 0x404316\n                                        *v7 = *v7 & -817 | 800;\n                                        v20 = v19;\n                                        goto lab_0x403eb1;\n                                    } else {\n                                        goto lab_0x404089;\n                                    }\n                                }\n                            }\n                        } else {\n                            int32_t v45 = *(int32_t *)(v42 + (int64_t)&g10 + 24); // 0x403fab\n                            int32_t * v46 = (int32_t *)v44; // 0x403fb2\n                            int32_t v47 = *(int32_t *)(v42 + (int64_t)&g10 + 16); // 0x403fb4\n                            *v46 = *v46 & -1 - v45 | v47;\n                            *(char *)a7 = 1;\n                            v17 = v3;\n                            v18 = v19;\n                            goto lab_0x403c1f;\n                        }\n                    } else {\n                        if ((v43 & 4) == 0) {\n                            // 0x404210\n                            *(char *)a7 = 1;\n                            // 0x40421b\n                            function_406670(v22 - 1);\n                            v21 = (int64_t)\"invalid argument %s\";\n                            goto lab_0x40440f;\n                        }\n                        int64_t v48 = function_402750(*(int32_t *)(v42 + (int64_t)&g10 + 8)); // 0x403ee3\n                        if (v48 == 0) {\n                            // 0x404267\n                            if (strcmp(str2, \"evenp\") != 0) {\n                                // 0x40435b\n                                if (strcmp(str2, \"parity\") == 0) {\n                                    goto lab_0x40427c;\n                                } else {\n                                    // 0x404370\n                                    if (strcmp(str2, \"oddp\") == 0) {\n                                        goto lab_0x40427c;\n                                    } else {\n                                        goto lab_0x404089;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40427c;\n                            }\n                        } else {\n                            int64_t v49 = *(int64_t *)(v42 + (int64_t)&g10 + 16); // 0x403ef1\n                            int32_t v50 = *(int32_t *)(v42 + (int64_t)&g10 + 24); // 0x403ef6\n                            int32_t * v51 = (int32_t *)v48; // 0x403efd\n                            *v51 = *v51 & -1 - (v50 | (int32_t)v49);\n                            *(char *)a7 = 1;\n                            v17 = v3;\n                            v18 = v19;\n                            goto lab_0x403c1f;\n                        }\n                    }\n                } else {\n                    goto lab_0x403cc6;\n                }\n            }\n        }\n    }\n  lab_0x403d47_2:\n    // 0x403d47\n    return result;\n  lab_0x4044f4:;\n    // 0x4044f4\n    int64_t v52; // 0x403bd0\n    int64_t v53 = v52;\n    unsigned char v54 = *(char *)(v53 + 12); // 0x4044f4\n    if ((v54 & 16) != 0) {\n        goto lab_0x4044e6;\n    } else {\n        uint64_t v55 = (int64_t)v54; // 0x4044f4\n        if (v55 % 2 != 0) {\n            int64_t v56 = function_402750(*(int32_t *)(v53 + 8)); // 0x4044cc\n            if (v56 == 0) {\n                // 0x4046aa\n                __assert_fail(\"bitsp\", \"src/stty.c\", 2251, \"sane_mode\");\n            } else {\n                int32_t * v57 = (int32_t *)v56; // 0x4044df\n                int32_t v58 = *(int32_t *)(v53 + 16); // 0x4044e1\n                *v57 = *v57 & -1 - *(int32_t *)(v53 + 24) | v58;\n                goto lab_0x4044e6;\n            }\n        } else {\n            if ((v55 & 2) == 0) {\n                goto lab_0x4044e6;\n            } else {\n                int64_t v59 = function_402750(*(int32_t *)(v53 + 8)); // 0x40450c\n                if (v59 == 0) {\n                    // 0x4046c3\n                    __assert_fail(\"bitsp\", \"src/stty.c\", 2257, \"sane_mode\");\n                } else {\n                    int32_t v60 = *(int32_t *)(v53 + 24); // 0x40451e\n                    int32_t * v61 = (int32_t *)v59; // 0x404523\n                    *v61 = *v61 & -1 - (v60 | (int32_t)*(int64_t *)(v53 + 16));\n                    goto lab_0x4044e6;\n                }\n            }\n        }\n    }\n  lab_0x403c1f:;\n    int64_t v62 = v18 + 1 & 0xffffffff; // 0x403c1f\n    v13 = v62;\n    result = v17;\n    if (v4 <= v62) {\n        return result;\n    }\n    goto lab_0x403c2c_2;\n  lab_0x403c2c:\n    // 0x403c2c\n    goto lab_0x403c2c_2;\n  lab_0x403cc6:;\n    int64_t v63 = 7; // 0x403bd0\n    int64_t v64 = v22;\n    int64_t v65 = (int64_t)\"ispeed\";\n    unsigned char v66 = *(char *)v64; // 0x403cd3\n    char v67 = *(char *)v65; // 0x403cd3\n    char v68 = v67; // 0x403cd3\n    bool v69 = false; // 0x403cd3\n    while (v66 == v67) {\n        int64_t v70 = v63 - 1; // 0x403cd3\n        int64_t v71 = v65 + v6; // 0x403cd3\n        int64_t v72 = v64 + v6; // 0x403cd3\n        v63 = v70;\n        v68 = v66;\n        v69 = true;\n        if (v70 == 0) {\n            // break -> \n            break;\n        }\n        v64 = v72;\n        v65 = v71;\n        v66 = *(char *)v64;\n        v67 = *(char *)v65;\n        v68 = v67;\n        v69 = false;\n    }\n    unsigned char v73 = v68;\n    int64_t v74 = v22; // 0x403cdc\n    int64_t v75 = 7; // 0x403cdc\n    int64_t v76; // 0x403bd0\n    int64_t speed2; // 0x403bd0\n    if ((v66 >= v73 && !v69) != v66 < v73) {\n        int64_t v77 = v74;\n        int64_t v78 = (int64_t)\"ospeed\";\n        unsigned char v79 = *(char *)v77; // 0x403e55\n        char v80 = *(char *)v78; // 0x403e55\n        char v81 = v80; // 0x403e55\n        bool v82 = false; // 0x403e55\n        while (v79 == v80) {\n            int64_t v83 = v75 - 1; // 0x403e55\n            int64_t v84 = v78 + v6; // 0x403e55\n            v74 = v77 + v6;\n            v75 = v83;\n            v81 = v79;\n            v82 = true;\n            if (v83 == 0) {\n                // break -> \n                break;\n            }\n            v77 = v74;\n            v78 = v84;\n            v79 = *(char *)v77;\n            v80 = *(char *)v78;\n            v81 = v80;\n            v82 = false;\n        }\n        unsigned char v85 = v81;\n        int64_t v86 = v22; // 0x403e5e\n        int64_t v87 = 5; // 0x403e5e\n        if ((v79 >= v85 && !v82) != v79 < v85) {\n            int64_t v88 = v86;\n            int64_t v89 = (int64_t)\"rows\";\n            unsigned char v90 = *(char *)v88; // 0x403f1d\n            char v91 = *(char *)v89; // 0x403f1d\n            char v92 = v91; // 0x403f1d\n            bool v93 = false; // 0x403f1d\n            while (v90 == v91) {\n                int64_t v94 = v87 - 1; // 0x403f1d\n                int64_t v95 = v89 + v6; // 0x403f1d\n                v86 = v88 + v6;\n                v87 = v94;\n                v92 = v90;\n                v93 = true;\n                if (v94 == 0) {\n                    // break -> \n                    break;\n                }\n                v88 = v86;\n                v89 = v95;\n                v90 = *(char *)v88;\n                v91 = *(char *)v89;\n                v92 = v91;\n                v93 = false;\n            }\n            unsigned char v96 = v92;\n            int64_t v97 = v22; // 0x403f26\n            if ((v90 >= v96 && !v93) != v90 < v96) {\n                int64_t v98 = v97;\n                int64_t v99 = (int64_t)\"cols\";\n                unsigned char v100 = *(char *)v98; // 0x403fd8\n                char v101 = *(char *)v99; // 0x403fd8\n                int64_t v102 = 4; // 0x403fd8\n                char v103 = v101; // 0x403fd8\n                bool v104 = false; // 0x403fd8\n                while (v100 == v101) {\n                    int64_t v105 = v99 + v6; // 0x403fd8\n                    v97 = v98 + v6;\n                    int64_t v106 = v102; // 0x403fd8\n                    v103 = v100;\n                    v104 = true;\n                    if (v102 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v98 = v97;\n                    v99 = v105;\n                    v100 = *(char *)v98;\n                    v101 = *(char *)v99;\n                    v102 = v106 - 1;\n                    v103 = v101;\n                    v104 = false;\n                }\n                unsigned char v107 = v103;\n                if ((v100 >= v107 && !v104) == v100 < v107) {\n                    goto lab_0x403ff8;\n                } else {\n                    // 0x403fe3\n                    if (strcmp(str, \"columns\") != 0) {\n                        // 0x404140\n                        if (strcmp(str, \"size\") == 0) {\n                            // 0x404236\n                            v17 = 0;\n                            v18 = v19;\n                            if ((char)a1 == 0) {\n                                int64_t v108 = function_4026e0(); // 0x404241\n                                g57 = 0;\n                                g58 = v108;\n                                v17 = function_402ca0(0, a2);\n                                v18 = v19;\n                            }\n                            goto lab_0x403c1f;\n                        } else {\n                            // 0x404155\n                            if (strcmp(str, \"line\") != 0) {\n                                // 0x404298\n                                if (strcmp(str, \"speed\") == 0) {\n                                    // 0x404334\n                                    v17 = 0;\n                                    v18 = v19;\n                                    if ((char)a1 == 0) {\n                                        // 0x40433f\n                                        g58 = function_4026e0();\n                                        int64_t v109; // 0x403c3c\n                                        v17 = function_402930(termios_p, 0, v109, v102);\n                                        v18 = v19;\n                                    }\n                                    goto lab_0x403c1f;\n                                } else {\n                                    int64_t v110 = function_402680(v22); // 0x4042b0\n                                    int32_t speed = v110; // 0x4042b8\n                                    if (speed == -1) {\n                                        int32_t * v111 = __errno_location(); // 0x404547\n                                        int64_t v112 = v22; // 0x404552\n                                        int64_t v113 = 0; // 0x404552\n                                        int64_t str3 = v112;\n                                        *v111 = 0;\n                                        char * endptr; // bp-80, 0x403bd0\n                                        int32_t str_as_ul = strtoul((char *)str3, &endptr, 16); // 0x404569\n                                        int32_t v114 = *v111; // 0x40456e\n                                        if (v114 != 0) {\n                                            // 0x404631\n                                            function_406670(v22);\n                                            v21 = (int64_t)\"invalid argument %s\";\n                                            goto lab_0x40440f;\n                                        }\n                                        char * v115 = endptr; // 0x404578\n                                        int64_t v116 = (int64_t)v115; // 0x404578\n                                        char v117 = *v115; // 0x40457d\n                                        if (str3 == v116 || str_as_ul > -1 != (v117 == 58)) {\n                                            // 0x404631\n                                            function_406670(v22);\n                                            v21 = (int64_t)\"invalid argument %s\";\n                                            goto lab_0x40440f;\n                                        }\n                                        int64_t v118 = v113;\n                                        int64_t v119; // 0x403bd0\n                                        *(int32_t *)(v119 + 4 * v118) = str_as_ul;\n                                        int64_t str4 = v116 + 1; // 0x4045a3\n                                        v112 = str4;\n                                        v113 = v118 + 1;\n                                        while (v118 != 3) {\n                                            // 0x404555\n                                            str3 = v112;\n                                            *v111 = 0;\n                                            str_as_ul = strtoul((char *)str3, &endptr, 16);\n                                            v114 = *v111;\n                                            if (v114 != 0) {\n                                                // 0x404631\n                                                function_406670(v22);\n                                                v21 = (int64_t)\"invalid argument %s\";\n                                                goto lab_0x40440f;\n                                            }\n                                            // 0x404578\n                                            v115 = endptr;\n                                            v116 = (int64_t)v115;\n                                            v117 = *v115;\n                                            if (str3 == v116 || str_as_ul > -1 != (v117 == 58)) {\n                                                // 0x404631\n                                                function_406670(v22);\n                                                v21 = (int64_t)\"invalid argument %s\";\n                                                goto lab_0x40440f;\n                                            }\n                                            // 0x40459a\n                                            v118 = v113;\n                                            *(int32_t *)(v119 + 4 * v118) = str_as_ul;\n                                            str4 = v116 + 1;\n                                            v112 = str4;\n                                            v113 = v118 + 1;\n                                        }\n                                        // 0x4045ad\n                                        *v111 = 0;\n                                        int32_t str_as_ul2 = strtoul((char *)str4, &endptr, 16); // 0x40460b\n                                        int32_t v120 = *v111; // 0x404610\n                                        int32_t v121 = str_as_ul2; // 0x404614\n                                        char v122 = 58; // 0x404614\n                                        int64_t v123 = 0; // 0x404614\n                                        int64_t v124 = str4; // 0x404614\n                                        if (v120 != 0) {\n                                            // 0x404631\n                                            function_406670(v22);\n                                            v21 = (int64_t)\"invalid argument %s\";\n                                            goto lab_0x40440f;\n                                        }\n                                        char v125 = v122;\n                                        char * v126 = endptr; // 0x404616\n                                        char v127 = *v126; // 0x40461b\n                                        if (v127 != v125) {\n                                            // 0x404631\n                                            function_406670(v22);\n                                            v21 = (int64_t)\"invalid argument %s\";\n                                            goto lab_0x40440f;\n                                        }\n                                        int64_t v128 = v124;\n                                        uint32_t v129 = v121;\n                                        int64_t v130 = (int64_t)v126; // 0x404616\n                                        if (v129 < 256 != v128 != v130) {\n                                            // 0x404631\n                                            function_406670(v22);\n                                            v21 = (int64_t)\"invalid argument %s\";\n                                            goto lab_0x40440f;\n                                        }\n                                        int64_t v131 = v123;\n                                        *(char *)(v131 + v11) = (char)v129;\n                                        v20 = v19;\n                                        while (v131 != 31) {\n                                            int64_t v132 = v131 + 1; // 0x4045dc\n                                            int64_t str5 = v130 + 1; // 0x4045d3\n                                            char v133 = v132 != 31 ? 58 : (char)(v128 == v130);\n                                            *v111 = 0;\n                                            int32_t str_as_ul3 = strtoul((char *)str5, &endptr, 16); // 0x40460b\n                                            int32_t v134 = *v111; // 0x404610\n                                            v121 = str_as_ul3;\n                                            v122 = v133;\n                                            v123 = v132;\n                                            v124 = str5;\n                                            if (v134 != 0) {\n                                                // 0x404631\n                                                function_406670(v22);\n                                                v21 = (int64_t)\"invalid argument %s\";\n                                                goto lab_0x40440f;\n                                            }\n                                            v125 = v122;\n                                            v126 = endptr;\n                                            v127 = *v126;\n                                            if (v127 != v125) {\n                                                // 0x404631\n                                                function_406670(v22);\n                                                v21 = (int64_t)\"invalid argument %s\";\n                                                goto lab_0x40440f;\n                                            }\n                                            // 0x404620\n                                            v128 = v124;\n                                            v129 = v121;\n                                            v130 = (int64_t)v126;\n                                            if (v129 < 256 != v128 != v130) {\n                                                // 0x404631\n                                                function_406670(v22);\n                                                v21 = (int64_t)\"invalid argument %s\";\n                                                goto lab_0x40440f;\n                                            }\n                                            // 0x4045ce\n                                            v131 = v123;\n                                            *(char *)(v131 + v11) = (char)v129;\n                                            v20 = v19;\n                                        }\n                                        goto lab_0x403eb1;\n                                    } else {\n                                        // 0x4042c1\n                                        v17 = v110;\n                                        v18 = v19;\n                                        if ((char)a1 != 0) {\n                                            goto lab_0x403c1f;\n                                        } else {\n                                            // 0x4042cc\n                                            cfsetispeed((struct termios *)termios_p, speed);\n                                            v76 = v19;\n                                            speed2 = v110 & 0xffffffff;\n                                            goto lab_0x403ea4;\n                                        }\n                                    }\n                                }\n                            } else {\n                                if (-1 - (int32_t)v19 == v12) {\n                                    // 0x4043fa\n                                    function_406670(v22);\n                                    v21 = (int64_t)\"missing argument to %s\";\n                                    goto lab_0x40440f;\n                                }\n                                // 0x404179\n                                int64_t v135; // bp-136, 0x403bd0\n                                int64_t v136 = v135; // 0x404179\n                                int64_t * v137 = (int64_t *)(v23 + 8 + v136); // 0x404187\n                                int64_t v138 = *v137; // 0x404187\n                                if (v138 == 0) {\n                                    // 0x4043fa\n                                    function_406670(v22);\n                                    v21 = (int64_t)\"missing argument to %s\";\n                                    goto lab_0x40440f;\n                                }\n                                int64_t v139 = v19 + 1 & 0xffffffff; // 0x404198\n                                uint64_t v140 = function_402ab0(v138, -1); // 0x40419b\n                                char * v141; // 0x403bd0\n                                *v141 = (char)v140;\n                                v20 = v139;\n                                if (v140 >= 256) {\n                                    int64_t v142 = *v137; // 0x4041b4\n                                    function_406670(v142);\n                                    error(0, (int32_t)\"invalid line discipline %s\" ^ (int32_t)\"invalid line discipline %s\", dcgettext(NULL, \"invalid line discipline %s\", 5));\n                                    v20 = v139;\n                                }\n                                goto lab_0x403eb1;\n                            }\n                        }\n                    } else {\n                        goto lab_0x403ff8;\n                    }\n                }\n            } else {\n                if (-1 - (int32_t)v19 == v12) {\n                    // 0x4043fa\n                    function_406670(v22);\n                    v21 = (int64_t)\"missing argument to %s\";\n                    goto lab_0x40440f;\n                }\n                int64_t v143 = *(int64_t *)(v23 + 8 + a3); // 0x403f44\n                if (v143 == 0) {\n                    // 0x4043fa\n                    function_406670(v22);\n                    v21 = (int64_t)\"missing argument to %s\";\n                    goto lab_0x40440f;\n                }\n                int64_t v144 = v19 + 1 & 0xffffffff; // 0x403f52\n                v17 = a3;\n                v18 = v144;\n                if ((char)a1 == 0) {\n                    // 0x403f60\n                    v17 = function_402bd0(function_402ab0(v143, 0x7fffffff) & 0xffffffff, -1, a2);\n                    v18 = v144;\n                }\n                goto lab_0x403c1f;\n            }\n        } else {\n            if (-1 - (int32_t)v19 == v12) {\n                // 0x4043fa\n                function_406670(v22);\n                v21 = (int64_t)\"missing argument to %s\";\n                goto lab_0x40440f;\n            }\n            int64_t v145 = *(int64_t *)(v23 + 8 + a3); // 0x403e7c\n            if (v145 == 0) {\n                // 0x4043fa\n                function_406670(v22);\n                v21 = (int64_t)\"missing argument to %s\";\n                goto lab_0x40440f;\n            }\n            int64_t v146 = v19 + 1 & 0xffffffff; // 0x403e8a\n            v17 = a3;\n            v18 = v146;\n            if ((char)a1 != 0) {\n                goto lab_0x403c1f;\n            } else {\n                // 0x403e98\n                v76 = v146;\n                speed2 = function_402680(v145);\n                goto lab_0x403ea4;\n            }\n        }\n    } else {\n        if (-1 - (int32_t)v19 == v12) {\n            // 0x4043fa\n            function_406670(v22);\n            v21 = (int64_t)\"missing argument to %s\";\n            goto lab_0x40440f;\n        }\n        int64_t v147 = *(int64_t *)(v23 + 8 + a3); // 0x403cfa\n        if (v147 == 0) {\n            // 0x4043fa\n            function_406670(v22);\n            v21 = (int64_t)\"missing argument to %s\";\n            goto lab_0x40440f;\n        }\n        // 0x403d08\n        v17 = a3;\n        v18 = v19 + 1 & 0xffffffff;\n        if ((char)a1 != 0) {\n            goto lab_0x403c1f;\n        } else {\n            int64_t v148 = v19 + 2 & 0xffffffff; // 0x403d20\n            cfsetispeed((struct termios *)termios_p, (int32_t)function_402680(v147));\n            *(char *)a6 = 1;\n            *(char *)a7 = 1;\n            v13 = v148;\n            result = v3;\n            if (v4 <= v148) {\n                // break -> 0x403d47\n                goto lab_0x403d47_2;\n            }\n            goto lab_0x403c2c;\n        }\n    }\n  lab_0x4041e7:\n    // 0x4041e7\n    *v7 = *v7 & -817 | 288;\n    *(char *)a7 = 1;\n    v17 = v3;\n    v18 = v19;\n    goto lab_0x403c1f;\n  lab_0x40427c:\n    // 0x40427c\n    *v7 = *v7 & -305 | 48;\n    v20 = v19;\n    goto lab_0x403eb1;\n  lab_0x403eb1:\n    // 0x403eb1\n    *(char *)a7 = 1;\n    v17 = v3;\n    v18 = v20;\n    goto lab_0x403c1f;\n  lab_0x403ff8:\n    if (-1 - (int32_t)v19 == v12) {\n        // 0x4043fa\n        function_406670(v22);\n        v21 = (int64_t)\"missing argument to %s\";\n        goto lab_0x40440f;\n    }\n    int64_t v149 = *(int64_t *)(v23 + 8 + a3); // 0x404010\n    if (v149 == 0) {\n        // 0x4043fa\n        function_406670(v22);\n        v21 = (int64_t)\"missing argument to %s\";\n        goto lab_0x40440f;\n    }\n    int64_t v150 = v19 + 1 & 0xffffffff; // 0x40401e\n    v17 = a3;\n    v18 = v150;\n    if ((char)a1 == 0) {\n        // 0x40402c\n        v17 = function_402bd0(0xffffffff, (int32_t)function_402ab0(v149, 0x7fffffff), a2);\n        v18 = v150;\n    }\n    goto lab_0x403c1f;\n  lab_0x403ea4:\n    // 0x403ea4\n    cfsetospeed((struct termios *)termios_p, (int32_t)speed2);\n    *(char *)a6 = 1;\n    v20 = v76;\n    goto lab_0x403eb1;\n  lab_0x404089:\n    // 0x404089\n    if (strcmp(str2, \"nl\") != 0) {\n        // 0x4042e6\n        if (strcmp(str2, \"ek\") != 0) {\n            int32_t strcmp_rc = strcmp(str2, \"sane\"); // 0x40439d\n            int64_t v151 = (int64_t)&g8; // 0x4043a4\n            if (strcmp_rc == 0) {\n                while (true) {\n                    int64_t v152 = v151 + 24; // 0x4044b2\n                    int64_t v153 = *(int64_t *)(v151 + 16); // 0x4044a5\n                    *(char *)(v153 + v11) = *(char *)(v151 + 8);\n                    v151 = v152;\n                    v52 = (int64_t)&g10;\n                    if (*(int64_t *)v152 == 0) {\n                        goto lab_0x4044f4;\n                    }\n                }\n                goto lab_0x403eb1;\n            } else {\n                // 0x4043aa\n                if (strcmp(str2, \"cbreak\") != 0) {\n                    // 0x40444c\n                    if (strcmp(str2, \"pass8\") != 0) {\n                        // 0x40464b\n                        if (strcmp(str2, \"litout\") != 0) {\n                            // 0x4046fa\n                            if (strcmp(str2, \"raw\") == 0) {\n                                goto lab_0x404752;\n                            } else {\n                                // 0x40470b\n                                if (strcmp(str2, \"cooked\") == 0) {\n                                    goto lab_0x404752;\n                                } else {\n                                    // 0x40471c\n                                    if (strcmp(str2, \"decctlq\") != 0) {\n                                        // 0x4047cf\n                                        if (strcmp(str2, \"tabs\") != 0) {\n                                            // 0x404803\n                                            if (strcmp(str2, \"lcase\") == 0) {\n                                                goto lab_0x4048b6;\n                                            } else {\n                                                // 0x404818\n                                                if (strcmp(str2, \"LCASE\") == 0) {\n                                                    goto lab_0x4048b6;\n                                                } else {\n                                                    // 0x40482d\n                                                    if (strcmp(str2, \"crt\") != 0) {\n                                                        // 0x404875\n                                                        v20 = v19;\n                                                        if (strcmp(str2, \"dec\") != 0) {\n                                                            goto lab_0x403eb1;\n                                                        } else {\n                                                            // 0x40488a\n                                                            *(int32_t *)termios_p = *(int32_t *)&v2 & -2049;\n                                                            *(char *)v11 = 3;\n                                                            *v9 = 0x157f;\n                                                            *v10 = *v10 | 2576;\n                                                            *(char *)a7 = 1;\n                                                            v17 = v3;\n                                                            v18 = v19;\n                                                            goto lab_0x403c1f;\n                                                        }\n                                                    } else {\n                                                        // 0x40483e\n                                                        *v10 = *v10 | 2576;\n                                                        *(char *)a7 = 1;\n                                                        v17 = v3;\n                                                        v18 = v19;\n                                                        goto lab_0x403c1f;\n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            int32_t v154 = *v8; // 0x4047e5\n                                            if (v24 != 45) {\n                                                // 0x40485a\n                                                *v8 = v154 & -0x1801;\n                                                *(char *)a7 = 1;\n                                                v17 = v3;\n                                                v18 = v19;\n                                            } else {\n                                                // 0x4047ed\n                                                *v8 = v154 | 0x1800;\n                                                *(char *)a7 = 1;\n                                                v17 = v3;\n                                                v18 = v19;\n                                            }\n                                            goto lab_0x403c1f;\n                                        }\n                                    } else {\n                                        int32_t v155 = *(int32_t *)&v2; // 0x404736\n                                        if (v24 != 45) {\n                                            // 0x4047b5\n                                            *(int32_t *)termios_p = v155 & -2049;\n                                            *(char *)a7 = 1;\n                                            v17 = v3;\n                                            v18 = v19;\n                                        } else {\n                                            // 0x40473d\n                                            *(int32_t *)termios_p = v155 | 2048;\n                                            *(char *)a7 = 1;\n                                            v17 = v3;\n                                            v18 = v19;\n                                        }\n                                        goto lab_0x403c1f;\n                                    }\n                                }\n                            }\n                        } else {\n                            int32_t v156 = *v7 & -305; // 0x404685\n                            int32_t v157 = v156; // 0x40468d\n                            if (v24 != 45) {\n                                // 0x4046dc\n                                *v7 = v157 | 48;\n                                *termios_p = v2 & -0x100000021;\n                                *(char *)a7 = 1;\n                                v17 = v3;\n                                v18 = v19;\n                                goto lab_0x403c1f;\n                            } else {\n                                // 0x40468f\n                                *termios_p = v2 | 0x100000020;\n                                *v7 = v156 | 288;\n                                *(char *)a7 = 1;\n                                v17 = v3;\n                                v18 = v19;\n                                goto lab_0x403c1f;\n                            }\n                        }\n                    } else {\n                        int32_t v158 = *(int32_t *)&v2; // 0x404469\n                        int32_t v159 = *v7 & -305; // 0x40446f\n                        if (v24 != 45) {\n                            // 0x404527\n                            *v7 = v159 | 48;\n                            *(int32_t *)termios_p = v158 & -33;\n                            *(char *)a7 = 1;\n                            v17 = v3;\n                            v18 = v19;\n                        } else {\n                            // 0x40447d\n                            *v7 = v159 | 288;\n                            *(int32_t *)termios_p = v158 | 32;\n                            *(char *)a7 = 1;\n                            v17 = v3;\n                            v18 = v19;\n                        }\n                        goto lab_0x403c1f;\n                    }\n                } else {\n                    int32_t v160 = *v10; // 0x4043c4\n                    if (v24 != 45) {\n                        // 0x404431\n                        *v10 = v160 & -3;\n                        *(char *)a7 = 1;\n                        v17 = v3;\n                        v18 = v19;\n                    } else {\n                        // 0x4043cc\n                        *v10 = v160 | 2;\n                        *(char *)a7 = 1;\n                        v17 = v3;\n                        v18 = v19;\n                    }\n                    goto lab_0x403c1f;\n                }\n            }\n        } else {\n            // 0x4042fb\n            *v9 = 0x157f;\n            *(char *)a7 = 1;\n            v17 = v3;\n            v18 = v19;\n            goto lab_0x403c1f;\n        }\n    } else {\n        if (v24 != 45) {\n            // 0x4043e2\n            *termios_p = v2 & -0x400000101;\n            *(char *)a7 = 1;\n            v17 = v3;\n            v18 = v19;\n        } else {\n            // 0x4040be\n            *v8 = *v8 & -45 | 4;\n            *(int32_t *)termios_p = *(int32_t *)&v2 & -449 | 256;\n            *(char *)a7 = 1;\n            v17 = v3;\n            v18 = v19;\n        }\n        goto lab_0x403c1f;\n    }\n  lab_0x404752:;\n    char v161 = *str2; // 0x404752\n    if (v161 == 114) {\n        if (v24 != 45) {\n            goto lab_0x404763;\n        } else {\n            goto lab_0x404791;\n        }\n    } else {\n        if (v24 != 45 == v161 == 99) {\n            goto lab_0x404791;\n        } else {\n            goto lab_0x404763;\n        }\n    }\n  lab_0x404763:\n    // 0x404763\n    *(int32_t *)termios_p = 0;\n    *v8 = *v8 & -2;\n    *v10 = *v10 & -8;\n    *(int16_t *)(v1 + 22) = 256;\n    *(char *)a7 = 1;\n    v17 = v3;\n    v18 = v19;\n    goto lab_0x403c1f;\n  lab_0x404791:\n    // 0x404791\n    *v10 = *v10 | 3;\n    *termios_p = v2 | 0x100000526;\n    *(char *)a7 = 1;\n    v17 = v3;\n    v18 = v19;\n    goto lab_0x403c1f;\n  lab_0x4048b6:;\n    int32_t v162 = *v10; // 0x4048d4\n    if (v24 != 45) {\n        // 0x4048f5\n        *v10 = v162 | 4;\n        *termios_p = v2 | 0x200000200;\n        *(char *)a7 = 1;\n        v17 = v3;\n        v18 = v19;\n    } else {\n        // 0x4048dc\n        *termios_p = v2 & -0x200000201;\n        *v10 = v162 & -5;\n        *(char *)a7 = 1;\n        v17 = v3;\n        v18 = v19;\n    }\n    goto lab_0x403c1f;\n  lab_0x403d95:;\n    int64_t str6 = v15;\n    int64_t v163 = v14;\n    int64_t v164; // 0x403bd0\n    int64_t v165; // 0x403bd0\n    int64_t v166; // 0x403bd0\n    int64_t v167; // 0x403dbc\n    if (strcmp(str, (char *)str6) != 0) {\n        int64_t v168 = *(int64_t *)v16; // 0x403d84\n        v14 = v163 + 1 & 0xffffffff;\n        v15 = v168;\n        v16 += 24;\n        if (v168 == 0) {\n            goto lab_0x403cc6;\n        } else {\n            goto lab_0x403d95;\n        }\n    } else {\n        if (-1 - (int32_t)v19 == v12) {\n            // 0x4043fa\n            function_406670(v22);\n            v21 = (int64_t)\"missing argument to %s\";\n            goto lab_0x40440f;\n        } else {\n            // 0x403db3\n            v167 = *(int64_t *)(v23 + 8 + a3);\n            if (v167 == 0) {\n                // 0x4043fa\n                function_406670(v22);\n                v21 = (int64_t)\"missing argument to %s\";\n                goto lab_0x40440f;\n            } else {\n                // 0x403dca\n                v165 = (int64_t)\"min\";\n                v166 = str6;\n                v164 = 4;\n                goto lab_dec_label_pc_unknown;\n            }\n        }\n    }\n  lab_0x40440f:\n    // 0x40440f\n    error(0, 0, dcgettext(NULL, (char *)v21, 5));\n    function_402d90(1);\n    // UNREACHABLE\n  lab_dec_label_pc_unknown:;\n    int64_t v169 = v166;\n    int64_t v170 = v165;\n    unsigned char v171 = *(char *)v169; // 0x403dda\n    char v172 = *(char *)v170; // 0x403dda\n    char v173 = v172; // 0x403dda\n    bool v174 = false; // 0x403dda\n    if (v171 == v172) {\n        int64_t v175 = v164 - 1; // 0x403dda\n        v165 = v170 + v6;\n        v166 = v169 + v6;\n        v164 = v175;\n        v173 = v171;\n        v174 = true;\n        if (v175 == 0) {\n            goto lab_dec_label_pc_unknown_3;\n        } else {\n            goto lab_dec_label_pc_unknown;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_3;\n    }\n  lab_dec_label_pc_unknown_3:;\n    unsigned char v176 = v173;\n    int64_t v177 = (int64_t)\"time\"; // 0x403df2\n    int64_t v178 = str6; // 0x403df2\n    int64_t v179 = 5; // 0x403df2\n    int64_t v180; // 0x403bd0\n    if ((v171 >= v176 && !v174) == v171 < v176) {\n        // 0x403f7e\n        v180 = function_402ab0(v167, 255);\n        goto lab_0x403e25;\n    } else {\n        goto lab_0x403df8;\n    }\n  lab_0x403df8:;\n    int64_t v181 = v178;\n    int64_t v182 = v177;\n    unsigned char v183 = *(char *)v181; // 0x403e05\n    char v184 = *(char *)v182; // 0x403e05\n    char v185 = v184; // 0x403e05\n    bool v186 = false; // 0x403e05\n    if (v183 == v184) {\n        int64_t v187 = v179 - 1; // 0x403e05\n        v177 = v182 + v6;\n        v178 = v181 + v6;\n        v179 = v187;\n        v185 = v183;\n        v186 = true;\n        if (v187 == 0) {\n            goto lab_dec_label_pc_unknown_4;\n        } else {\n            goto lab_0x403df8;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_4;\n    }\n  lab_0x403e25:;\n    int64_t v188 = 0x100000000 * v163;\n    int64_t v189 = *(int64_t *)(8 * ((v188 >> 32) + (v188 >> 31)) + (int64_t)&g8 + 16); // 0x403e25\n    *(char *)(v189 + v11) = (char)v180;\n    *(char *)a7 = 1;\n    v17 = v3;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x403c1f;\n  lab_dec_label_pc_unknown_4:;\n    unsigned char v190 = v185;\n    if ((v183 >= v190 && !v186) == v183 < v190) {\n        // 0x403f7e\n        v180 = function_402ab0(v167, 255);\n        goto lab_0x403e25;\n    } else {\n        char * str7 = (char *)v167; // 0x403e14\n        unsigned char v191 = *str7; // 0x403e14\n        int64_t v192 = v191; // 0x403e14\n        v180 = v192;\n        if (v191 != 0) {\n            char v193 = *(char *)(v167 + 1); // 0x4040e2\n            v180 = v192;\n            if (v193 == 0) {\n                goto lab_0x403e25;\n            } else {\n                // 0x4040f0\n                v180 = 0;\n                if (strcmp(str7, \"^-\") == 0) {\n                    goto lab_0x403e25;\n                } else {\n                    // 0x404108\n                    v180 = 0;\n                    if (strcmp(str7, \"undef\") == 0) {\n                        goto lab_0x403e25;\n                    } else {\n                        if (v191 != 94) {\n                            // 0x403f7e\n                            v180 = function_402ab0(v167, 255);\n                            goto lab_0x403e25;\n                        } else {\n                            // 0x404127\n                            v180 = 127;\n                            if (v193 == 63) {\n                                goto lab_0x403e25;\n                            } else {\n                                // 0x404131\n                                v180 = v193 & -97;\n                                goto lab_0x403e25;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x403e25;\n        }\n    }\n  lab_0x4044e6:;\n    int64_t v194 = v53 + 32; // 0x4044e6\n    v20 = v19;\n    v52 = v194;\n    if (*(int64_t *)v194 == 0) {\n        goto lab_0x403eb1;\n    } else {\n        goto lab_0x4044f4;\n    }\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "404928",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1) {\n    // 0x404920\n    g60 = a1;\n    int64_t result; // 0x404920\n    return result;\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404938",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1) {\n    // 0x404930\n    g59 = a1;\n    int64_t result; // 0x404930\n    return result;\n}\n"
        },
        {
            "funcName": "function_404940",
            "funcStartAddr": "404940",
            "funcEndAddr": "4049de",
            "decompiledFuncCode": "int64_t function_404940(void) {\n    // 0x404940\n    int32_t * err_num; // 0x404956\n    if ((int32_t)function_408b40((int64_t)g36) == 0) {\n        goto lab_0x40496c;\n    } else {\n        // 0x404956\n        err_num = __errno_location();\n        if (g59 == 0) {\n            goto lab_0x404983;\n        } else {\n            // 0x404967\n            if (*err_num != 32) {\n                goto lab_0x404983;\n            } else {\n                goto lab_0x40496c;\n            }\n        }\n    }\n  lab_0x40496c:;\n    int64_t result = function_408b40((int64_t)g38); // 0x404973\n    if ((int32_t)result == 0) {\n        // 0x40497c\n        return result;\n    }\n    // 0x4049be\n    _exit(g26);\n    // UNREACHABLE\n  lab_0x404983:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40498f\n    if (g60 == 0) {\n        // 0x4049c9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4049a3\n        error(0, *err_num, \"%s: %s\", (char *)function_4064c0((int64_t)g60), v1);\n    }\n    // 0x4049be\n    _exit(g26);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "404a4a",
            "decompiledFuncCode": "int64_t function_4049e0(int32_t fd2, int64_t path, int64_t oflag, int32_t a4) {\n    int32_t fd = open((char *)path, (int32_t)oflag); // 0x4049f5\n    if (fd != fd2 != fd >= 0) {\n        // 0x404a04\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x404a1c\n    int32_t * v1 = __errno_location(); // 0x404a24\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a50",
            "funcStartAddr": "404a50",
            "funcEndAddr": "404ae9",
            "decompiledFuncCode": "int64_t function_404a50(int64_t str) {\n    // 0x404a50\n    if (str == 0) {\n        // 0x404ac9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g38);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x404a5e\n    int64_t result = (int64_t)found_char_pos; // 0x404a5e\n    if (found_char_pos == NULL) {\n        // 0x404ab9\n        g61 = str;\n        g37 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x404a68\n    if (v1 - str < 7) {\n        // 0x404ab9\n        g61 = str;\n        g37 = str;\n        return result;\n    }\n    // 0x404a78\n    bool v2; // 0x404a50\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x404a50\n    int64_t v5 = result - 6; // 0x404a50\n    int64_t v6 = 7; // 0x404a86\n    unsigned char v7 = *(char *)v5; // 0x404a86\n    char v8 = *(char *)v4; // 0x404a86\n    char v9 = v8; // 0x404a86\n    bool v10 = false; // 0x404a86\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x404a90\n    int64_t v13 = v1; // 0x404a90\n    int64_t v14 = 3; // 0x404a90\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x404ab9\n        g61 = str;\n        g37 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x404aa2\n    char v16 = *(char *)v12; // 0x404aa2\n    char v17 = v16; // 0x404aa2\n    bool v18 = false; // 0x404aa2\n    while (v15 == v16) {\n        // 0x404a92\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x404aac\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x404aae\n        v20 = result + 4;\n        g35 = v20;\n    }\n    // 0x404ab9\n    g61 = v20;\n    g37 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404be2",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x404b04\n    int64_t result = (int64_t)v1; // 0x404b04\n    if (result != a1) {\n        // 0x404b11\n        return result;\n    }\n    int64_t v2 = function_408c00(); // 0x404b20\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x404bd6\n    if (v3 == 85) {\n        // 0x404b30\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x404bc8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g16 : (int64_t)&g11;\n            return result2;\n        }\n        char v4 = *v1; // 0x404b5e\n        int64_t result3 = v4 != 96 ? (int64_t)&g12 : (int64_t)&g15; // 0x404b6b\n        // 0x404b11\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x404bc8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g16 : (int64_t)&g11;\n        return result2;\n    }\n    char v5 = *v1; // 0x404bad\n    int64_t result4 = v5 != 96 ? (int64_t)&g13 : (int64_t)&g14; // 0x404bba\n    // 0x404b11\n    return result4;\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c47",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x404bf0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404c47",
            "funcStartAddr": "404c47",
            "funcEndAddr": "405e11",
            "decompiledFuncCode": "int64_t function_404c47(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x404c91\n    int64_t v3 = 0; // 0x404c91\n    int64_t v4; // 0x404c47\n    int64_t v5; // 0x404c47\n    int64_t v6; // 0x404c47\n    int64_t v7; // 0x404c47\n    int64_t v8; // 0x404c47\n    int64_t v9; // 0x404c47\n    int64_t v10; // 0x404c47\n    int64_t v11; // 0x404c47\n    int64_t v12; // 0x404c47\n    int64_t v13; // 0x404c47\n    int64_t v14; // 0x404c47\n    int64_t v15; // 0x404c47\n    int64_t v16; // 0x404c47\n    int64_t v17; // 0x404c47\n    int64_t v18; // 0x404c47\n    int64_t result; // 0x404c47\n    int64_t v19; // 0x404c47\n    int32_t wc; // bp+132, 0x404c47\n    int64_t ps; // bp+136, 0x404c47\n    char v20; // 0x405200\n    int64_t v21; // 0x405200\n    int64_t v22; // 0x4055a8\n    int64_t v23; // 0x404c47\n    int64_t v24; // 0x4055c7\n    int32_t v25; // 0x404c47\n    while (true) {\n      lab_0x404c98_2:\n        // 0x404c98\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x404c47\n        int64_t v27; // 0x404ccc\n        while (true) {\n          lab_0x404c98:\n            // 0x404c98\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x404ca3\n            if (v15 == -1) {\n                // 0x404ca5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x404cb3\n            if (v28) {\n                // break (via goto) -> 0x405418\n                goto lab_0x405418;\n            }\n            // 0x404cbc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g81 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4052ab\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404df1;\n                    }\n                    // 0x4056cd\n                    v26 = v5 + 1;\n                    goto lab_0x404c98;\n                }\n                case 7: {\n                    goto lab_0x404df1;\n                }\n                case 8: {\n                    goto lab_0x404df1;\n                }\n                case 9: {\n                    goto lab_0x40500a_2;\n                }\n                case 10: {\n                    goto lab_0x40500a_2;\n                }\n                case 11: {\n                    goto lab_0x404df1;\n                }\n                case 12: {\n                    goto lab_0x404df1;\n                }\n                case 13: {\n                    goto lab_0x40500a_2;\n                }\n                case 32: {\n                    goto lab_0x40500a_2;\n                }\n                case 33: {\n                    goto lab_0x40500a_2;\n                }\n                case 34: {\n                    goto lab_0x40500a_2;\n                }\n                case 35: {\n                    goto lab_0x404dbd;\n                }\n                case 36: {\n                    goto lab_0x40500a_2;\n                }\n                case 37: {\n                    goto lab_0x404df1;\n                }\n                case 38: {\n                    goto lab_0x40500a_2;\n                }\n                case 39: {\n                    goto lab_0x40500a_2;\n                }\n                case 40: {\n                    goto lab_0x40500a_2;\n                }\n                case 41: {\n                    goto lab_0x40500a_2;\n                }\n                case 42: {\n                    goto lab_0x40500a_2;\n                }\n                case 43: {\n                    goto lab_0x404df1;\n                }\n                case 44: {\n                    goto lab_0x404df1;\n                }\n                case 45: {\n                    goto lab_0x404df1;\n                }\n                case 46: {\n                    goto lab_0x404df1;\n                }\n                case 47: {\n                    goto lab_0x404df1;\n                }\n                case 48: {\n                    goto lab_0x404df1;\n                }\n                case 49: {\n                    goto lab_0x404df1;\n                }\n                case 50: {\n                    goto lab_0x404df1;\n                }\n                case 51: {\n                    goto lab_0x404df1;\n                }\n                case 52: {\n                    goto lab_0x404df1;\n                }\n                case 53: {\n                    goto lab_0x404df1;\n                }\n                case 54: {\n                    goto lab_0x404df1;\n                }\n                case 55: {\n                    goto lab_0x404df1;\n                }\n                case 56: {\n                    goto lab_0x404df1;\n                }\n                case 57: {\n                    goto lab_0x404df1;\n                }\n                case 58: {\n                    goto lab_0x404df1;\n                }\n                case 59: {\n                    goto lab_0x40500a_2;\n                }\n                case 60: {\n                    goto lab_0x40500a_2;\n                }\n                case 61: {\n                    goto lab_0x40500a_2;\n                }\n                case 62: {\n                    goto lab_0x40500a_2;\n                }\n                case 63: {\n                    goto lab_0x40500a_2;\n                }\n                case 65: {\n                    goto lab_0x404df1;\n                }\n                case 66: {\n                    goto lab_0x404df1;\n                }\n                case 67: {\n                    goto lab_0x404df1;\n                }\n                case 68: {\n                    goto lab_0x404df1;\n                }\n                case 69: {\n                    goto lab_0x404df1;\n                }\n                case 70: {\n                    goto lab_0x404df1;\n                }\n                case 71: {\n                    goto lab_0x404df1;\n                }\n                case 72: {\n                    goto lab_0x404df1;\n                }\n                case 73: {\n                    goto lab_0x404df1;\n                }\n                case 74: {\n                    goto lab_0x404df1;\n                }\n                case 75: {\n                    goto lab_0x404df1;\n                }\n                case 76: {\n                    goto lab_0x404df1;\n                }\n                case 77: {\n                    goto lab_0x404df1;\n                }\n                case 78: {\n                    goto lab_0x404df1;\n                }\n                case 79: {\n                    goto lab_0x404df1;\n                }\n                case 80: {\n                    goto lab_0x404df1;\n                }\n                case 81: {\n                    goto lab_0x404df1;\n                }\n                case 82: {\n                    goto lab_0x404df1;\n                }\n                case 83: {\n                    goto lab_0x404df1;\n                }\n                case 84: {\n                    goto lab_0x404df1;\n                }\n                case 85: {\n                    goto lab_0x404df1;\n                }\n                case 86: {\n                    goto lab_0x404df1;\n                }\n                case 87: {\n                    goto lab_0x404df1;\n                }\n                case 88: {\n                    goto lab_0x404df1;\n                }\n                case 89: {\n                    goto lab_0x404df1;\n                }\n                case 90: {\n                    goto lab_0x404df1;\n                }\n                case 91: {\n                    goto lab_0x40500a_2;\n                }\n                case 92: {\n                    goto lab_0x40500a_2;\n                }\n                case 93: {\n                    goto lab_0x404df1;\n                }\n                case 94: {\n                    goto lab_0x40500a_2;\n                }\n                case 95: {\n                    goto lab_0x404df1;\n                }\n                case 96: {\n                    goto lab_0x40500a_2;\n                }\n                case 97: {\n                    goto lab_0x404df1;\n                }\n                case 98: {\n                    goto lab_0x404df1;\n                }\n                case 99: {\n                    goto lab_0x404df1;\n                }\n                case 100: {\n                    goto lab_0x404df1;\n                }\n                case 101: {\n                    goto lab_0x404df1;\n                }\n                case 102: {\n                    goto lab_0x404df1;\n                }\n                case 103: {\n                    goto lab_0x404df1;\n                }\n                case 104: {\n                    goto lab_0x404df1;\n                }\n                case 105: {\n                    goto lab_0x404df1;\n                }\n                case 106: {\n                    goto lab_0x404df1;\n                }\n                case 107: {\n                    goto lab_0x404df1;\n                }\n                case 108: {\n                    goto lab_0x404df1;\n                }\n                case 109: {\n                    goto lab_0x404df1;\n                }\n                case 110: {\n                    goto lab_0x404df1;\n                }\n                case 111: {\n                    goto lab_0x404df1;\n                }\n                case 112: {\n                    goto lab_0x404df1;\n                }\n                case 113: {\n                    goto lab_0x404df1;\n                }\n                case 114: {\n                    goto lab_0x404df1;\n                }\n                case 115: {\n                    goto lab_0x404df1;\n                }\n                case 116: {\n                    goto lab_0x404df1;\n                }\n                case 117: {\n                    goto lab_0x404df1;\n                }\n                case 118: {\n                    goto lab_0x404df1;\n                }\n                case 119: {\n                    goto lab_0x404df1;\n                }\n                case 120: {\n                    goto lab_0x404df1;\n                }\n                case 121: {\n                    goto lab_0x404df1;\n                }\n                case 122: {\n                    goto lab_0x404df1;\n                }\n                case 123: {\n                    goto lab_0x404d95;\n                }\n                case 124: {\n                    goto lab_0x40500a_2;\n                }\n                case 125: {\n                    goto lab_0x404d95;\n                }\n                case 126: {\n                    goto lab_0x404dbd;\n                }\n                default: {\n                    goto lab_0x405195;\n                }\n            }\n        }\n      lab_0x405195:\n        if (v23 != 1) {\n            // 0x405500\n            ps = 0;\n            int64_t len = v15; // 0x405510\n            if (v15 == -1) {\n                // 0x405512\n                len = strlen((char *)str);\n            }\n            // 0x40553e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40559f:\n                // 0x40559f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4055a4\n                int64_t v30 = v29 + str;\n                v24 = function_408a60(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x405b1a_2;\n                    }\n                    case -1: {\n                        goto lab_0x405b1a_2;\n                    }\n                    case -2: {\n                        // 0x405bfd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x405c37\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x405c3a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x405c47\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x405c40\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x405b1a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x405b1a_2;\n                    }\n                    case 1: {\n                        goto lab_0x405570;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40561c\n                        char v34 = *(char *)v33; // 0x40562d\n                        unsigned char v35; // 0x404c47\n                        if (v34 < 125) {\n                            // 0x405638\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40564f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40500a_2;\n                            }\n                        }\n                        // 0x405620\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40562d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x405638\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40564f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40500a_2;\n                                }\n                            }\n                            // 0x405620\n                            v33++;\n                        }\n                        goto lab_0x405570;\n                    }\n                }\n            }\n            goto lab_0x405b1a_2;\n        } else {\n            // 0x4051e4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404df1;\n        }\n    }\n  lab_0x405418:\n    // 0x405418\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x405d1a\n        if (v8 > result) {\n            // 0x405d23\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405047\n        return result;\n    }\n    goto lab_0x40500a_2;\n  lab_0x404df1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x404e00\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40500a_2;\n        }\n    }\n    int64_t v42 = result; // 0x404f01\n    char v43 = v20; // 0x404f01\n    int64_t v44 = v58; // 0x404f01\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x404f01\n    int64_t v46 = v56; // 0x404f01\n    goto lab_0x404e7d;\n  lab_0x40500a_2:;\n    // 0x405047\n    char * v36; // 0x404c47\n    return function_404bf0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x405b1a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x404df1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x4056ee\n        int64_t v41 = v5 + 1; // 0x4057d1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x4057d8\n        char v48 = v20; // 0x4057d8\n        int64_t v49 = result; // 0x4057d8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x4057a1\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x4057a5\n            int64_t v52 = v50 + 1; // 0x4057aa\n            int64_t v53 = v47 + 1; // 0x4057d1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40579c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x4057a1\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x4057a5\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x404e7d;\n    }\n  lab_0x405570:\n    // 0x405570\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40558f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405592\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x405b1a\n        goto lab_0x405b1a_2;\n    }\n    goto lab_0x40559f;\n  lab_0x404dbd:\n    // 0x404dbd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40500a_2;\n    }\n    goto lab_0x404df1;\n  lab_0x404d95:;\n    bool v61 = v15 == 1; // 0x404da0\n    if (v15 == -1) {\n        // 0x404da2\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x404dae\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x404df1;\n    } else {\n        goto lab_0x404dbd;\n    }\n  lab_0x404e7d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x404e82\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x404e86\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x404c98_2;\n}\n"
        },
        {
            "funcName": "function_405e20",
            "funcStartAddr": "405e20",
            "funcEndAddr": "405fbe",
            "decompiledFuncCode": "int64_t function_405e20(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405e22\n    int32_t * v3 = __errno_location(); // 0x405e3c\n    int64_t v4 = (int64_t)g28; // 0x405e41\n    int32_t v5 = *v3; // 0x405e4b\n    int64_t v6 = v4; // 0x405e61\n    if (v2 >= (int64_t)*(int32_t *)&g31) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x405fb9\n            function_406e80(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405e70\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405e77\n        int64_t v9; // 0x405e20\n        if (g28 == &g29) {\n            int64_t v10 = function_406c90(0, v8); // 0x405f9a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g29); // 0x405f9f\n            *(int64_t *)&g28 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406c90(v4, v8); // 0x405e8b\n            *(int64_t *)&g28 = v12;\n            v9 = v12;\n        }\n        // 0x405e9a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g31; // 0x405e9a\n        int32_t v14 = v7; // 0x405ea1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g31 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x405ed1\n    int64_t v17 = v15 + 8; // 0x405ed4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x405edb\n    int64_t * v19 = (int64_t *)v16; // 0x405ede\n    uint64_t v20 = *v19; // 0x405ede\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x405ee1\n    int64_t result = *v21; // 0x405ee1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x405eec\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x405ef5\n    int64_t v24; // 0x405e20\n    uint64_t v25 = function_404bf0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x405f04\n    if (v20 > v25) {\n        // 0x405f7b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x405f17\n    *v19 = v26;\n    if (result != (int64_t)&g62) {\n        // 0x405f27\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406c30(v26); // 0x405f41\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x405f5b\n    int64_t v28 = *v23; // 0x405f5e\n    int64_t v29; // 0x405e20\n    function_404bf0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x405f7b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "405ff4",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405fc7\n    int64_t result = function_406e30(a1 == 0 ? (int64_t)&g63 : a1, 56); // 0x405fe6\n    return result;\n}\n"
        },
        {
            "funcName": "function_406000",
            "funcStartAddr": "406000",
            "funcEndAddr": "40600f",
            "decompiledFuncCode": "int64_t function_406000(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g63 : a1); // 0x40600c\n    return result;\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "40601f",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 : a1; // 0x406018\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g63;\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406053",
            "decompiledFuncCode": "int64_t function_406020(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 + 8 : a1 + 8; // 0x406039\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40603e\n    uint32_t v3 = *v2; // 0x40603e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406042\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_406060",
            "funcStartAddr": "406060",
            "funcEndAddr": "406073",
            "decompiledFuncCode": "int64_t function_406060(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g63 + 4 : a1 + 4); // 0x40606c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_406080",
            "funcStartAddr": "406080",
            "funcEndAddr": "4060ab",
            "decompiledFuncCode": "int64_t function_406080(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 : a1; // 0x406088\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4060a5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40609c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g63;\n}\n"
        },
        {
            "funcName": "function_4060b0",
            "funcStartAddr": "4060b0",
            "funcEndAddr": "406122",
            "decompiledFuncCode": "int64_t function_4060b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g63 : a5; // 0x4060d2\n    int32_t * v2 = __errno_location(); // 0x4060db\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x4060f4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x4060f8\n    uint32_t v5 = *(int32_t *)v1; // 0x4060fb\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x406101\n    int64_t result = function_404bf0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40610a\n    return result;\n}\n"
        },
        {
            "funcName": "function_406130",
            "funcStartAddr": "406130",
            "funcEndAddr": "406211",
            "decompiledFuncCode": "int64_t function_406130(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g63 : a4; // 0x406152\n    int32_t * v2 = __errno_location(); // 0x406158\n    int64_t v3 = v1 + 8; // 0x40616f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x406177\n    int32_t * v5 = (int32_t *)v1; // 0x40617a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x406188\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40618b\n    int64_t v8 = function_404bf0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x406195\n    int64_t v9 = v8 + 1; // 0x40619a\n    int64_t result = function_406c30(v9); // 0x4061af\n    function_404bf0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x4061f4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x4061fd\n    return result;\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "40622a",
            "decompiledFuncCode": "int64_t function_406220(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406220\n    return function_406130(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_406230",
            "funcStartAddr": "406230",
            "funcEndAddr": "4062c5",
            "decompiledFuncCode": "int64_t function_406230(void) {\n    uint32_t v1 = *(int32_t *)&g31; // 0x406230\n    int64_t v2 = v1; // 0x406230\n    int64_t v3 = v2; // 0x406244\n    if (v1 >= 2) {\n        int64_t v4 = &g31;\n        int64_t v5 = v4 + 16; // 0x406263\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g73;\n        while (v5 != (int64_t)g28 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x406260\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g73;\n        }\n    }\n    int64_t v6 = v3; // 0x40627d\n    if (g29 != 0x613400) {\n        // 0x40627f\n        free((int64_t *)g29);\n        g29 = 256;\n        *(int64_t *)&g30 = (int64_t)&g62;\n        v6 = &g73;\n    }\n    int64_t result = v6; // 0x4062a1\n    if (g28 != &g29) {\n        // 0x4062a3\n        free(g28);\n        *(int64_t *)&g28 = (int64_t)&g29;\n        result = &g73;\n    }\n    // 0x4062b6\n    *(int32_t *)&g31 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4062d0",
            "funcStartAddr": "4062d0",
            "funcEndAddr": "4062e1",
            "decompiledFuncCode": "int64_t function_4062d0(void) {\n    // 0x4062d0\n    int64_t v1; // 0x4062d0\n    return function_405e20(v1, v1, -1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_4062f0",
            "funcStartAddr": "4062f0",
            "funcEndAddr": "4062fa",
            "decompiledFuncCode": "int64_t function_4062f0(void) {\n    // 0x4062f0\n    int64_t v1; // 0x4062f0\n    return function_405e20(v1, v1, v1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406316",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1) {\n    // 0x406300\n    return function_405e20(0, a1, -1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "406332",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2) {\n    // 0x406320\n    return function_405e20(0, a1, a2, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_406340",
            "funcStartAddr": "406340",
            "funcEndAddr": "4063a8",
            "decompiledFuncCode": "int64_t function_406340(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406350\n    return function_405e20((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4063b0",
            "funcStartAddr": "4063b0",
            "funcEndAddr": "406414",
            "decompiledFuncCode": "int64_t function_4063b0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4063c0\n    return function_405e20((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_406420",
            "funcStartAddr": "406420",
            "funcEndAddr": "40642c",
            "decompiledFuncCode": "int64_t function_406420(int64_t a1, int64_t a2) {\n    // 0x406420\n    return function_406340(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_406430",
            "funcStartAddr": "406430",
            "funcEndAddr": "40643f",
            "decompiledFuncCode": "int64_t function_406430(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406430\n    return function_4063b0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_406440",
            "funcStartAddr": "406440",
            "funcEndAddr": "4064b0",
            "decompiledFuncCode": "int64_t function_406440(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g63); // 0x40644d\n    int128_t v2 = __asm_movdqa(g64); // 0x406455\n    int128_t v3 = __asm_movdqa(g65); // 0x40645d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x406472\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x406488\n    uint32_t v6 = *v5; // 0x406488\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40648d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405e20(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "4064bd",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t a1, int64_t a2) {\n    // 0x4064b0\n    return function_406440(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4064c0",
            "funcStartAddr": "4064c0",
            "funcEndAddr": "4064d1",
            "decompiledFuncCode": "int64_t function_4064c0(int64_t a1) {\n    // 0x4064c0\n    return function_406440(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4064e0",
            "funcStartAddr": "4064e0",
            "funcEndAddr": "4064ea",
            "decompiledFuncCode": "int64_t function_4064e0(void) {\n    // 0x4064e0\n    int64_t v1; // 0x4064e0\n    return function_406440(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4064f0",
            "funcStartAddr": "4064f0",
            "funcEndAddr": "40655e",
            "decompiledFuncCode": "int64_t function_4064f0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40650a\n    return function_405e20((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406560",
            "funcStartAddr": "406560",
            "funcEndAddr": "4065cc",
            "decompiledFuncCode": "int64_t function_406560(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g63); // 0x406567\n    int128_t v2 = __asm_movdqa(g64); // 0x40656f\n    int128_t v3 = __asm_movdqa(g65); // 0x406577\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x406599\n    if (a2 == 0 || a3 == 0) {\n        // 0x4065c7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4065aa\n    return function_405e20(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4065d0",
            "funcStartAddr": "4065d0",
            "funcEndAddr": "4065d9",
            "decompiledFuncCode": "int64_t function_4065d0(void) {\n    // 0x4065d0\n    int64_t v1; // 0x4065d0\n    return function_406560(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4065e0",
            "funcStartAddr": "4065e0",
            "funcEndAddr": "4065f7",
            "decompiledFuncCode": "int64_t function_4065e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4065e0\n    return function_406560(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_406600",
            "funcStartAddr": "406600",
            "funcEndAddr": "406613",
            "decompiledFuncCode": "int64_t function_406600(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x406600\n    return function_406560(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_406620",
            "funcStartAddr": "406620",
            "funcEndAddr": "40662a",
            "decompiledFuncCode": "int64_t function_406620(void) {\n    // 0x406620\n    int64_t v1; // 0x406620\n    return function_405e20(v1, v1, v1, &g27);\n}\n"
        },
        {
            "funcName": "function_406630",
            "funcStartAddr": "406630",
            "funcEndAddr": "406642",
            "decompiledFuncCode": "int64_t function_406630(int64_t a1, int64_t a2) {\n    // 0x406630\n    return function_405e20(0, a1, a2, &g27);\n}\n"
        },
        {
            "funcName": "function_406650",
            "funcStartAddr": "406650",
            "funcEndAddr": "406661",
            "decompiledFuncCode": "int64_t function_406650(void) {\n    // 0x406650\n    int64_t v1; // 0x406650\n    return function_405e20(v1, v1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_406670",
            "funcStartAddr": "406670",
            "funcEndAddr": "406686",
            "decompiledFuncCode": "int64_t function_406670(int64_t a1) {\n    // 0x406670\n    return function_405e20(0, a1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "406a6d",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x406728\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4066ac\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4066c6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40670b\n    if (a6 < 10) {\n        // 0x40671a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x406812\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_406a70",
            "funcStartAddr": "406a70",
            "funcEndAddr": "406a90",
            "decompiledFuncCode": "int64_t function_406a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406a70\n    if (a5 == 0) {\n        // 0x406a8b\n        return function_406690(a1, a2, a3, a4, a5, 0, (int64_t)&g73);\n    }\n    int64_t v1 = 0; // 0x406a77\n    v1++;\n    int64_t v2 = v1; // 0x406a89\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406a80\n        v1++;\n        v2 = v1;\n    }\n    // 0x406a8b\n    return function_406690(a1, a2, a3, a4, a5, v2, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_406a90",
            "funcStartAddr": "406a90",
            "funcEndAddr": "406af0",
            "decompiledFuncCode": "int64_t function_406a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x406a90\n    int64_t v3 = &v2; // 0x406a90\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406ac3\n    int64_t v6; // 0x406aad\n    int64_t * v7; // 0x406acb\n    int64_t v8; // 0x406acb\n    int64_t v9; // 0x406ad7\n    if (v5 < 48) {\n        // 0x406aa0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406ae3\n            break;\n        }\n    } else {\n        // 0x406acb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406ae3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406ac1\n    while (v4 != 9) {\n        // 0x406ab9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406aa0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406ae3\n                break;\n            }\n        } else {\n            // 0x406acb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406ae3\n                break;\n            }\n        }\n        // 0x406ab9\n        v10 = 10;\n    }\n    // 0x406ae3\n    return function_406690(a1, a2, a3, a4, v3, v10, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_406af0",
            "funcStartAddr": "406af0",
            "funcEndAddr": "406bac",
            "decompiledFuncCode": "int64_t function_406af0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x406af0\n    int64_t v1; // bp-168, 0x406af0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406af0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406af0\n    int64_t v8; // 0x406af0\n    int64_t v9; // bp-56, 0x406af0\n    int64_t v10; // 0x406b55\n    int64_t v11; // 0x406b79\n    if ((int32_t)v6 < 48) {\n        // 0x406b40\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406b90\n            break;\n        }\n    } else {\n        // 0x406b72\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406b90\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x406b6a\n    int64_t v13 = 10; // 0x406b6a\n    while (v5 != 9) {\n        // 0x406b6c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x406b40\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406b90\n                break;\n            }\n        } else {\n            // 0x406b72\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406b90\n                break;\n            }\n        }\n        // 0x406b62\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406b90\n    int64_t v14; // bp-136, 0x406af0\n    int64_t result = function_406690(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g73); // 0x406b9f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406c24",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1) {\n    // 0x406bb0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406c13\n    return fputs_unlocked(v1, g36);\n}\n"
        },
        {
            "funcName": "function_406c30",
            "funcStartAddr": "406c30",
            "funcEndAddr": "406c4a",
            "decompiledFuncCode": "int64_t function_406c30(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406c34\n    if (size != 0 != (mem == NULL)) {\n        // 0x406c43\n        return (int64_t)mem;\n    }\n    // 0x406c45\n    function_406e80(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "406c71",
            "decompiledFuncCode": "int64_t function_406c50(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x406c53\n    int64_t v2 = v1; // 0x406c53\n    if (v2 < 0) {\n        // 0x406c6b\n        function_406e80(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406c69\n        return function_406c30(v2);\n    }\n    // 0x406c6b\n    function_406e80(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406c80",
            "funcStartAddr": "406c80",
            "funcEndAddr": "406c82",
            "decompiledFuncCode": "int64_t function_406c80(void) {\n    // 0x406c80\n    int64_t v1; // 0x406c80\n    return function_406c30(v1);\n}\n"
        },
        {
            "funcName": "function_406c90",
            "funcStartAddr": "406c90",
            "funcEndAddr": "406cc6",
            "decompiledFuncCode": "int64_t function_406c90(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406cb8\n        free(v1);\n        return (int32_t)&g73 ^ (int32_t)&g73;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406ca1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406cb0\n        return (int64_t)mem;\n    }\n    // 0x406cc1\n    function_406e80(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406cd0",
            "funcStartAddr": "406cd0",
            "funcEndAddr": "406cf1",
            "decompiledFuncCode": "int64_t function_406cd0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406cd3\n    int64_t v2 = v1; // 0x406cd3\n    if (v2 < 0) {\n        // 0x406ceb\n        function_406e80(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406ce9\n        return function_406c90(a1, v2);\n    }\n    // 0x406ceb\n    function_406e80(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406d00",
            "funcStartAddr": "406d00",
            "funcEndAddr": "406d86",
            "decompiledFuncCode": "int64_t function_406d00(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x406d5b\n            function_406e80(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406c90(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406d43\n    if (a2 == 0) {\n        // 0x406d68\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406d48\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x406d5b\n        function_406e80(a1);\n        // UNREACHABLE\n    }\n    // 0x406d2a\n    *(int64_t *)a2 = v2;\n    return function_406c90(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406d90",
            "funcStartAddr": "406d90",
            "funcEndAddr": "406de0",
            "decompiledFuncCode": "int64_t function_406d90(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406d90\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x406dda\n            function_406e80(a1);\n            // UNREACHABLE\n        }\n        // 0x406db2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406c90(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406dc5\n        *(int64_t *)a2 = 128;\n        return function_406c90(0, 128);\n    }\n    // 0x406dd8\n    if (a2 < 0) {\n        // 0x406dda\n        function_406e80(a1);\n        // UNREACHABLE\n    }\n    // 0x406db2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406c90(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406de0",
            "funcStartAddr": "406de0",
            "funcEndAddr": "406df7",
            "decompiledFuncCode": "int64_t function_406de0(int64_t a1, int64_t a2) {\n    // 0x406de0\n    return (int64_t)memset((int64_t *)function_406c30(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406e00",
            "funcStartAddr": "406e00",
            "funcEndAddr": "406e2e",
            "decompiledFuncCode": "int64_t function_406e00(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406e07\n    if ((int64_t)v1 < 0) {\n        // 0x406e29\n        function_406e80(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406e29\n        function_406e80(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x406e1a\n    if (mem != NULL) {\n        // 0x406e24\n        return (int64_t)mem;\n    }\n    // 0x406e29\n    function_406e80(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406e30",
            "funcStartAddr": "406e30",
            "funcEndAddr": "406e58",
            "decompiledFuncCode": "int64_t function_406e30(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406c30(a2); // 0x406e3f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406e60",
            "funcStartAddr": "406e60",
            "funcEndAddr": "406e73",
            "decompiledFuncCode": "int64_t function_406e60(int64_t str) {\n    // 0x406e60\n    return function_406e30(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406e80",
            "funcStartAddr": "406e80",
            "funcEndAddr": "406eb1",
            "decompiledFuncCode": "int64_t function_406e80(int64_t a1) {\n    // 0x406e80\n    error(g26, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "406f90",
            "decompiledFuncCode": "int64_t function_406ec0(int64_t a1, uint32_t a2, int32_t a3, uint64_t a4, char * a5, int64_t a6, int64_t a7) {\n    // 0x406ec0\n    int64_t result2; // bp-64, 0x406ec0\n    int64_t v1 = function_407710(a1, 0, (int64_t)a2, &result2, (int64_t)a5, a6); // 0x406ee7\n    int32_t v2 = v1; // 0x406eec\n    int32_t * v3; // 0x406ec0\n    if (v2 != 0) {\n        int32_t * v4 = __errno_location(); // 0x406f6a\n        if (v2 == 1) {\n            // 0x406f88\n            *v4 = 75;\n            v3 = v4;\n        } else {\n            // 0x406f77\n            v3 = v4;\n            if (v2 == 3) {\n                // 0x406f7c\n                *v4 = 0;\n                v3 = v4;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x406ef0\n        if (result >= (int64_t)a3 && result <= a4) {\n            // 0x406f52\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x406eff\n        *v5 = result < 0x40000000 ? 34 : 75;\n        v3 = v5;\n    }\n    int64_t v6 = function_406670(a1); // 0x406f1c\n    int32_t v7 = *v3; // 0x406f21\n    int32_t err_num = v7 == 22 ? 0 : v7; // 0x406f37\n    int32_t v8 = a7; // 0x406f3a\n    error(v8 == 0 ? 1 : v8, err_num, \"%s: %s\", (char *)a6, (char *)v6);\n    // 0x406f52\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406f90",
            "funcStartAddr": "406f90",
            "funcEndAddr": "406fb1",
            "decompiledFuncCode": "int64_t function_406f90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406f90\n    return function_406ec0(a1, 10, (int32_t)a2, a3, (char *)a4, a5, a6);\n}\n"
        },
        {
            "funcName": "function_406fc0",
            "funcStartAddr": "406fc0",
            "funcEndAddr": "407710",
            "decompiledFuncCode": "int64_t function_406fc0(int64_t a1, int32_t a2, uint32_t base, int64_t * a4, int64_t * str2) {\n    if (base >= 37) {\n        // 0x4076e9\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtol\");\n        return &g73;\n    }\n    // 0x406fdb\n    int64_t v1; // bp-64, 0x406fc0\n    int64_t endptr = a2 == 0 ? (int64_t)&v1 : (int64_t)a2; // 0x406fe8\n    int32_t * v2 = __errno_location(); // 0x406ff2\n    *v2 = 0;\n    char * str = (char *)a1;\n    int32_t str_as_l = strtol(str, (char **)endptr, base); // 0x407008\n    int64_t * v3 = (int64_t *)endptr; // 0x40700d\n    int64_t v4 = *v3; // 0x40700d\n    int64_t v5; // 0x406fc0\n    int64_t v6; // 0x406fc0\n    int64_t v7; // 0x406fc0\n    char v8; // 0x406fc0\n    int64_t v9; // 0x406fc0\n    int64_t v10; // 0x406fc0\n    int64_t v11; // 0x406fc0\n    if (v4 == a1) {\n        // 0x407068\n        if (str2 == NULL) {\n            // 0x40703c\n            return 4;\n        }\n        char c = *str; // 0x407071\n        if (c == 0) {\n            // 0x40703c\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x40708f\n        v10 = 1;\n        v6 = 0;\n        v8 = c;\n        if (found_char_pos == NULL) {\n            // 0x40703c\n            return 4;\n        }\n        goto lab_0x40709d;\n    } else {\n        int32_t v12 = *v2; // 0x407018\n        int64_t v13 = 0; // 0x40701e\n        if (v12 != 0) {\n            // 0x407050\n            v13 = 1;\n            if (v12 != 34) {\n                // 0x40703c\n                return 4;\n            }\n        }\n        int64_t v14 = str_as_l; // 0x407008\n        v9 = v14;\n        v5 = v13;\n        if (str2 == NULL) {\n            goto lab_0x407035;\n        } else {\n            char c2 = *(char *)v4; // 0x407028\n            v9 = v14;\n            v5 = v13;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x407137\n                v10 = v14;\n                v6 = v13;\n                v8 = c2;\n                v11 = v14;\n                v7 = v13;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40709d;\n                } else {\n                    goto lab_0x407145;\n                }\n            } else {\n                goto lab_0x407035;\n            }\n        }\n    }\n  lab_0x40709d:;\n    int64_t v15 = v6;\n    int64_t v16 = v10;\n    unsigned char v17 = v8 - 69;\n    int64_t v18 = 1024; // 0x4070a4\n    int64_t v19 = 1; // 0x4070a4\n    int64_t v20; // 0x406fc0\n    int64_t v21; // 0x406fc0\n    int64_t v22; // 0x406fc0\n    int64_t v23; // 0x406fc0\n    int64_t v24; // 0x406fc0\n    int64_t v25; // 0x406fc0\n    int64_t v26; // 0x406fc0\n    int64_t v27; // 0x406fc0\n    int64_t v28; // 0x406fc0\n    int64_t v29; // 0x406fc0\n    int64_t v30; // 0x406fc0\n    int64_t v31; // 0x406fc0\n    int64_t v32; // 0x406fc0\n    int64_t v33; // 0x406fc0\n    int64_t v34; // 0x406fc0\n    int64_t v35; // 0x406fc0\n    int64_t v36; // 0x406fc0\n    int64_t v37; // 0x406fc0\n    int64_t v38; // 0x406fc0\n    if (v17 < 48) {\n        // 0x4070d0\n        v18 = 1024;\n        v19 = 1;\n        if ((1 << (int64_t)((v8 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4070b0;\n        } else {\n            // 0x4070e4\n            v18 = 1024;\n            v19 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x4070b0;\n            } else {\n                // 0x4070f6\n                v18 = 1000;\n                v19 = 2;\n                switch (*(char *)(v4 + 1)) {\n                    case 68: {\n                        goto lab_0x4070b0;\n                    }\n                    case 105: {\n                        char v39 = *(char *)(v4 + 2); // 0x4076d2\n                        v18 = 1024;\n                        v19 = (v39 == 66 ? 2 : 1) + (int64_t)(v39 == 66);\n                        goto lab_0x4070b0;\n                    }\n                    default: {\n                        // 0x40710b\n                        g75 = v17;\n                        v18 = 1000;\n                        v19 = 2;\n                        v11 = v16;\n                        v7 = v15;\n                        v21 = v16;\n                        v28 = 1;\n                        v20 = v15;\n                        v22 = 1024;\n                        v29 = 1;\n                        v33 = -0x20000000000000;\n                        v34 = 1;\n                        v23 = 1024;\n                        v30 = 1;\n                        v36 = -0x20000000000000;\n                        v24 = 1024;\n                        v31 = 1;\n                        v38 = -0x20000000000000;\n                        v25 = 1024;\n                        v32 = 1;\n                        v37 = -0x20000000000000;\n                        v26 = 1024;\n                        v27 = 1;\n                        v35 = -0x20000000000000;\n                        switch (v8) {\n                            case 69: {\n                                goto lab_0x407398;\n                            }\n                            case 70: {\n                                goto lab_0x407145;\n                            }\n                            case 71: {\n                                goto lab_0x407400;\n                            }\n                            case 72: {\n                                goto lab_0x407145;\n                            }\n                            case 73: {\n                                goto lab_0x407145;\n                            }\n                            case 74: {\n                                goto lab_0x407145;\n                            }\n                            case 75: {\n                                goto lab_0x4071e5;\n                            }\n                            case 76: {\n                                goto lab_0x407145;\n                            }\n                            case 77: {\n                                goto lab_0x407228;\n                            }\n                            case 78: {\n                                goto lab_0x407145;\n                            }\n                            case 79: {\n                                goto lab_0x407145;\n                            }\n                            case 80: {\n                                goto lab_0x4072c8;\n                            }\n                            case 81: {\n                                goto lab_0x407145;\n                            }\n                            case 82: {\n                                goto lab_0x407145;\n                            }\n                            case 83: {\n                                goto lab_0x407145;\n                            }\n                            case 84: {\n                                goto lab_0x407330;\n                            }\n                            case 85: {\n                                goto lab_0x407145;\n                            }\n                            case 86: {\n                                goto lab_0x407145;\n                            }\n                            case 87: {\n                                goto lab_0x407145;\n                            }\n                            case 88: {\n                                goto lab_0x407145;\n                            }\n                            case 89: {\n                                goto lab_0x407468;\n                            }\n                            case 90: {\n                                goto lab_0x4074d0;\n                            }\n                            case 91: {\n                                goto lab_0x407145;\n                            }\n                            case 92: {\n                                goto lab_0x407145;\n                            }\n                            case 93: {\n                                goto lab_0x407145;\n                            }\n                            case 94: {\n                                goto lab_0x407145;\n                            }\n                            case 95: {\n                                goto lab_0x407145;\n                            }\n                            case 96: {\n                                goto lab_0x407145;\n                            }\n                            case 97: {\n                                goto lab_0x407145;\n                            }\n                            case 98: {\n                                goto lab_0x407295;\n                            }\n                            case 99: {\n                                goto lab_0x407188;\n                            }\n                            case 100: {\n                                goto lab_0x407145;\n                            }\n                            case 101: {\n                                goto lab_0x407145;\n                            }\n                            case 102: {\n                                goto lab_0x407145;\n                            }\n                            case 103: {\n                                goto lab_0x407400;\n                            }\n                            case 104: {\n                                goto lab_0x407145;\n                            }\n                            case 105: {\n                                goto lab_0x407145;\n                            }\n                            case 106: {\n                                goto lab_0x407145;\n                            }\n                            case 107: {\n                                goto lab_0x4071e5;\n                            }\n                            case 108: {\n                                goto lab_0x407145;\n                            }\n                            case 109: {\n                                goto lab_0x407228;\n                            }\n                            case 110: {\n                                goto lab_0x407145;\n                            }\n                            case 111: {\n                                goto lab_0x407145;\n                            }\n                            case 112: {\n                                goto lab_0x407145;\n                            }\n                            case 113: {\n                                goto lab_0x407145;\n                            }\n                            case 114: {\n                                goto lab_0x407145;\n                            }\n                            case 115: {\n                                goto lab_0x407145;\n                            }\n                            case 116: {\n                                goto lab_0x407330;\n                            }\n                            default: {\n                                goto lab_0x4070b0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4070b0;\n    }\n  lab_0x407035:\n    // 0x407035\n    *a4 = v9;\n    // 0x40703c\n    return v5 & 0xffffffff;\n  lab_0x4070b0:\n    // 0x4070b0\n    g74 = v8 - 66;\n    v11 = v16;\n    v7 = v15;\n    v21 = v16;\n    v28 = v19;\n    v20 = v15;\n    v34 = v19;\n    switch (v8) {\n        case 66: {\n            // 0x407181\n            v21 = 1024 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x407188;\n        }\n        case 69: {\n            // 0x407380\n            v25 = v18;\n            v32 = v19;\n            v37 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x407398;\n        }\n        case 71: {\n            goto lab_0x407400;\n        }\n        case 75: {\n            goto lab_0x4071e5;\n        }\n        case 77: {\n            goto lab_0x407210;\n        }\n        case 80: {\n            // 0x4072b0\n            v23 = v18;\n            v30 = v19;\n            v36 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x4072c8;\n        }\n        case 84: {\n            goto lab_0x407318;\n        }\n        case 89: {\n            // 0x407450\n            goto lab_0x407468;\n        }\n        case 90: {\n            // 0x4074b8\n            v26 = v18;\n            v27 = v19;\n            v35 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x4074d0;\n        }\n        case 98: {\n            goto lab_0x407295;\n        }\n        case 99: {\n            goto lab_0x407188;\n        }\n        case 103: {\n            goto lab_0x407400;\n        }\n        case 107: {\n            goto lab_0x4071e5;\n        }\n        case 109: {\n            goto lab_0x407210;\n        }\n        case 116: {\n            goto lab_0x407318;\n        }\n        case 119: {\n            // 0x4071c9\n            v21 = 2 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x407188;\n        }\n        default: {\n            goto lab_0x407145;\n        }\n    }\n    // 0x4073e8\n    goto lab_0x407400;\n    // 0x4071d0\n    goto lab_0x4071e5;\n  lab_0x407210:\n    // 0x407210\n    v22 = v18;\n    v29 = v19;\n    v33 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x407228;\n  lab_0x407318:\n    // 0x407318\n    v24 = v18;\n    v31 = v19;\n    v38 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x407330;\n  lab_0x407295:\n    // 0x407295\n    v21 = 512 * v16;\n    v28 = v34;\n    v20 = v15;\n    goto lab_0x407188;\n  lab_0x407188:;\n    int64_t v59 = v20;\n    int64_t v60 = v28 + v4; // 0x407188\n    *v3 = v60;\n    v9 = v21;\n    v5 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x407035;\n  lab_0x407145:\n    // 0x407145\n    *a4 = v11;\n    // 0x40703c\n    return (v7 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407398:;\n    uint64_t v61 = v25;\n    int64_t v62 = v16;\n    int64_t v63 = -0x8000000000000000; // 0x4073d1\n    int64_t v64 = 1; // 0x4073d1\n    if (v62 >= v37) {\n        // 0x4073b0\n        v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n        v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : 0;\n    }\n    int32_t v65 = 5; // 0x4073c5\n    int32_t v66 = v65; // 0x4073c8\n    int64_t v67 = v64; // 0x4073c8\n    int64_t v55 = v63; // 0x4073c8\n    int64_t v57 = v32; // 0x4073c8\n    int64_t v58 = v64; // 0x4073c8\n    while (v65 != 0) {\n        // 0x4073ce\n        v62 = v63;\n        v63 = -0x8000000000000000;\n        v64 = 1;\n        if (v62 >= v37) {\n            // 0x4073b0\n            v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n            v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : v67;\n        }\n        // 0x4073c5\n        v65 = v66 - 1;\n        v66 = v65;\n        v67 = v64;\n        v55 = v63;\n        v57 = v32;\n        v58 = v64;\n    }\n    goto lab_0x407600;\n  lab_0x407400:\n    // 0x407400\n    while (true) {\n        // 0x407436\n        int32_t v40; // 0x406fc0\n        int32_t v41 = v40;\n        int64_t v42; // 0x406fc0\n        int64_t v43 = v42;\n        int64_t v44 = -0x8000000000000000; // 0x407439\n        int64_t v45 = 1; // 0x407439\n        int64_t v46; // 0x406fc0\n        uint64_t v47; // 0x406fc0\n        if (v43 >= v47) {\n            int64_t v48 = v46;\n            uint64_t v49; // 0x406fc0\n            int64_t v50 = v43 > 0x7fffffffffffffff / v49 ? 0x7fffffffffffffff : v43 * v49;\n            int64_t v51 = v43 > 0x7fffffffffffffff / v49 ? 1 : v48;\n            v44 = v50;\n            v45 = v51;\n        }\n        int64_t v52 = v45;\n        int64_t v53 = v44;\n        int32_t v54 = v41 - 1; // 0x40742d\n        v42 = v53;\n        v40 = v54;\n        v46 = v52;\n        v55 = v53;\n        int64_t v56; // 0x406fc0\n        v57 = v56;\n        v58 = v52;\n        if (v54 == 0) {\n            // break -> 0x407600\n            break;\n        }\n    }\n    goto lab_0x407600;\n  lab_0x4071e5:;\n    int64_t v72 = 1;\n    v21 = -0x8000000000000000;\n    v28 = v72;\n    v20 = 1;\n    int64_t v69; // 0x406fc0\n    int64_t v70; // 0x406fc0\n    int64_t v71; // 0x406fc0\n    int64_t v68; // 0x406fc0\n    if (v16 < -0x20000000000000) {\n        goto lab_0x407188;\n    } else {\n        int64_t v73 = 1024;\n        v69 = 0x7fffffffffffffff / v73;\n        v71 = v73;\n        v70 = v16;\n        v68 = v72;\n        goto lab_0x4071fc;\n    }\n  lab_0x407228:\n    // 0x407228\n    v21 = -0x8000000000000000;\n    v28 = v29;\n    v20 = 1;\n    if (v16 < v33) {\n        goto lab_0x407188;\n    } else {\n        int64_t v74 = 0x7fffffffffffffff / v22;\n        v21 = 0x7fffffffffffffff;\n        v28 = v29;\n        v20 = 1;\n        if (v16 > v74) {\n            goto lab_0x407188;\n        } else {\n            int64_t v75 = v22 * v16; // 0x407248\n            v21 = -0x8000000000000000;\n            v28 = v29;\n            v20 = 1;\n            v69 = v74;\n            v71 = v22;\n            v70 = v75;\n            v68 = v29;\n            if (v75 < v33) {\n                goto lab_0x407188;\n            } else {\n                goto lab_0x4071fc;\n            }\n        }\n    }\n  lab_0x4072c8:;\n    uint64_t v76 = v23;\n    int64_t v77 = v16;\n    int64_t v78 = -0x8000000000000000; // 0x407301\n    int64_t v79 = 1; // 0x407301\n    if (v36 <= v77) {\n        // 0x4072e0\n        v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n        v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : 0;\n    }\n    int32_t v80 = 4; // 0x4072f5\n    int32_t v81 = v80; // 0x4072f8\n    int64_t v82 = v79; // 0x4072f8\n    v55 = v78;\n    v57 = v30;\n    v58 = v79;\n    while (v80 != 0) {\n        // 0x4072fe\n        v77 = v78;\n        v78 = -0x8000000000000000;\n        v79 = 1;\n        if (v36 <= v77) {\n            // 0x4072e0\n            v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n            v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : v82;\n        }\n        // 0x4072f5\n        v80 = v81 - 1;\n        v81 = v80;\n        v82 = v79;\n        v55 = v78;\n        v57 = v30;\n        v58 = v79;\n    }\n    goto lab_0x407600;\n  lab_0x407330:;\n    uint64_t v83 = v24;\n    int64_t v84 = v16;\n    int64_t v85 = -0x8000000000000000; // 0x407369\n    int64_t v86 = 1; // 0x407369\n    if (v38 <= v84) {\n        // 0x407348\n        v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n        v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : 0;\n    }\n    int32_t v87 = 3; // 0x40735d\n    int32_t v88 = v87; // 0x407360\n    int64_t v89 = v86; // 0x407360\n    v55 = v85;\n    v57 = v31;\n    v58 = v86;\n    while (v87 != 0) {\n        // 0x407366\n        v84 = v85;\n        v85 = -0x8000000000000000;\n        v86 = 1;\n        if (v38 <= v84) {\n            // 0x407348\n            v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n            v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : v89;\n        }\n        // 0x40735d\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v55 = v85;\n        v57 = v31;\n        v58 = v86;\n    }\n    goto lab_0x407600;\n  lab_0x407468:\n    // 0x407468\n    while (true) {\n        // 0x40749e\n        int32_t v90; // 0x406fc0\n        int32_t v91 = v90;\n        int64_t v92; // 0x406fc0\n        int64_t v93 = v92;\n        int64_t v94 = -0x8000000000000000; // 0x4074a1\n        int64_t v95 = 1; // 0x4074a1\n        int64_t v96; // 0x406fc0\n        uint64_t v97; // 0x406fc0\n        if (v97 <= v93) {\n            int64_t v98 = v96;\n            uint64_t v99; // 0x406fc0\n            int64_t v100 = v93 > 0x7fffffffffffffff / v99 ? 0x7fffffffffffffff : v93 * v99;\n            int64_t v101 = v93 > 0x7fffffffffffffff / v99 ? 1 : v98;\n            v94 = v100;\n            v95 = v101;\n        }\n        int64_t v102 = v95;\n        int64_t v103 = v94;\n        int32_t v104 = v91 - 1; // 0x407495\n        v92 = v103;\n        v90 = v104;\n        v96 = v102;\n        v55 = v103;\n        int64_t v105; // 0x406fc0\n        v57 = v105;\n        v58 = v102;\n        if (v104 == 0) {\n            // break -> 0x407600\n            break;\n        }\n    }\n    goto lab_0x407600;\n  lab_0x4074d0:;\n    uint64_t v106 = v26;\n    int64_t v107 = v16;\n    int64_t v108 = -0x8000000000000000; // 0x407509\n    int64_t v109 = 1; // 0x407509\n    if (v35 <= v107) {\n        // 0x4074e8\n        v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n        v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : 0;\n    }\n    int32_t v110 = 6; // 0x4074fd\n    int32_t v111 = v110; // 0x407500\n    int64_t v112 = v109; // 0x407500\n    v55 = v108;\n    v57 = v27;\n    v58 = v109;\n    while (v110 != 0) {\n        // 0x407506\n        v107 = v108;\n        v108 = -0x8000000000000000;\n        v109 = 1;\n        if (v35 <= v107) {\n            // 0x4074e8\n            v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n            v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : v112;\n        }\n        // 0x4074fd\n        v110 = v111 - 1;\n        v111 = v110;\n        v112 = v109;\n        v55 = v108;\n        v57 = v27;\n        v58 = v109;\n    }\n    goto lab_0x407600;\n  lab_0x407600:\n    // 0x407600\n    v21 = v55;\n    v28 = v57;\n    v20 = (v58 | v15) & 0xffffffff;\n    goto lab_0x407188;\n  lab_0x4071fc:\n    // 0x4071fc\n    v21 = 0x7fffffffffffffff;\n    v28 = v68;\n    v20 = 1;\n    if (v69 >= v70) {\n        // 0x407205\n        v21 = v70 * v71;\n        v28 = v68;\n        v20 = v15;\n    }\n    goto lab_0x407188;\n}\n"
        },
        {
            "funcName": "function_407710",
            "funcStartAddr": "407710",
            "funcEndAddr": "407b50",
            "decompiledFuncCode": "int64_t function_407710(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40771e\n    if (v1 >= 37) {\n        // 0x407b2b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g73;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x407742\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x407772\n    int64_t v4 = a1; // 0x407777\n    char v5 = c; // 0x407777\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x40776c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x407768\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x407779\n    if (v5 == 45) {\n        // 0x4077b5\n        return 4;\n    }\n    // 0x40777e\n    int64_t v7; // bp-64, 0x407710\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x40773e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x407786\n    int64_t * v10 = (int64_t *)v8; // 0x40778b\n    int64_t v11 = *v10; // 0x40778b\n    char v12; // 0x407710\n    int64_t v13; // 0x407710\n    int64_t v14; // 0x407710\n    int64_t v15; // 0x407710\n    int64_t v16; // 0x407710\n    int64_t v17; // 0x407710\n    int64_t v18; // 0x407710\n    if (v11 == a1) {\n        // 0x4077e8\n        if (c == 0 || str == 0) {\n            // 0x4077b5\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x407809\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x4077b5\n            return 4;\n        }\n        goto lab_0x407817;\n    } else {\n        int32_t v19 = *v2; // 0x407796\n        int64_t v20 = 0; // 0x40779c\n        if (v19 != 0) {\n            // 0x4077d0\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x4077b5\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x407786\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x4077b2;\n        } else {\n            char c2 = *(char *)v11; // 0x4077a5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x407913\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407817;\n                } else {\n                    goto lab_0x407925;\n                }\n            } else {\n                goto lab_0x4077b2;\n            }\n        }\n    }\n  lab_0x407817:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40781f\n    int64_t v24 = 1; // 0x40781f\n    int64_t v25; // 0x407710\n    int64_t v26; // 0x407710\n    int64_t v27; // 0x407710\n    int64_t v28; // 0x407710\n    int64_t v29; // 0x407710\n    int64_t v30; // 0x407710\n    int64_t v31; // 0x407710\n    int64_t v32; // 0x407710\n    int64_t v33; // 0x407710\n    int64_t v34; // 0x407710\n    int64_t v35; // 0x407710\n    int64_t v36; // 0x407710\n    int64_t v37; // 0x407710\n    int64_t v38; // 0x407710\n    int64_t v39; // 0x407710\n    int64_t v40; // 0x407710\n    int64_t v41; // 0x407710\n    int64_t v42; // 0x407710\n    int64_t v43; // 0x407710\n    int64_t v44; // 0x407710\n    if (v22 < 48) {\n        // 0x407821\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40788a;\n        } else {\n            // 0x407834\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40788a;\n            } else {\n                // 0x407850\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x40788a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x407ab9\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x40788a;\n                    }\n                    default: {\n                        // 0x407865\n                        g76 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x407a2b;\n                            }\n                            case 70: {\n                                goto lab_0x407925;\n                            }\n                            case 71: {\n                                goto lab_0x407a63;\n                            }\n                            case 72: {\n                                goto lab_0x407925;\n                            }\n                            case 73: {\n                                goto lab_0x407925;\n                            }\n                            case 74: {\n                                goto lab_0x407925;\n                            }\n                            case 75: {\n                                goto lab_0x4078ec;\n                            }\n                            case 76: {\n                                goto lab_0x407925;\n                            }\n                            case 77: {\n                                goto lab_0x4078ae;\n                            }\n                            case 78: {\n                                goto lab_0x407925;\n                            }\n                            case 79: {\n                                goto lab_0x407925;\n                            }\n                            case 80: {\n                                goto lab_0x4079f8;\n                            }\n                            case 81: {\n                                goto lab_0x407925;\n                            }\n                            case 82: {\n                                goto lab_0x407925;\n                            }\n                            case 83: {\n                                goto lab_0x407925;\n                            }\n                            case 84: {\n                                goto lab_0x4079c8;\n                            }\n                            case 85: {\n                                goto lab_0x407925;\n                            }\n                            case 86: {\n                                goto lab_0x407925;\n                            }\n                            case 87: {\n                                goto lab_0x407925;\n                            }\n                            case 88: {\n                                goto lab_0x407925;\n                            }\n                            case 89: {\n                                goto lab_0x407996;\n                            }\n                            case 90: {\n                                goto lab_0x40795b;\n                            }\n                            case 91: {\n                                goto lab_0x407925;\n                            }\n                            case 92: {\n                                goto lab_0x407925;\n                            }\n                            case 93: {\n                                goto lab_0x407925;\n                            }\n                            case 94: {\n                                goto lab_0x407925;\n                            }\n                            case 95: {\n                                goto lab_0x407925;\n                            }\n                            case 96: {\n                                goto lab_0x407925;\n                            }\n                            case 97: {\n                                goto lab_0x407925;\n                            }\n                            case 98: {\n                                goto lab_0x40793f;\n                            }\n                            case 99: {\n                                goto lab_0x4078c8;\n                            }\n                            case 100: {\n                                goto lab_0x407925;\n                            }\n                            case 101: {\n                                goto lab_0x407925;\n                            }\n                            case 102: {\n                                goto lab_0x407925;\n                            }\n                            case 103: {\n                                goto lab_0x407a63;\n                            }\n                            case 104: {\n                                goto lab_0x407925;\n                            }\n                            case 105: {\n                                goto lab_0x407925;\n                            }\n                            case 106: {\n                                goto lab_0x407925;\n                            }\n                            case 107: {\n                                goto lab_0x4078ec;\n                            }\n                            case 108: {\n                                goto lab_0x407925;\n                            }\n                            case 109: {\n                                goto lab_0x4078ae;\n                            }\n                            case 110: {\n                                goto lab_0x407925;\n                            }\n                            case 111: {\n                                goto lab_0x407925;\n                            }\n                            case 112: {\n                                goto lab_0x407925;\n                            }\n                            case 113: {\n                                goto lab_0x407925;\n                            }\n                            case 114: {\n                                goto lab_0x407925;\n                            }\n                            case 115: {\n                                goto lab_0x407925;\n                            }\n                            case 116: {\n                                goto lab_0x4079c8;\n                            }\n                            default: {\n                                goto lab_0x40788a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40788a;\n    }\n  lab_0x4077b2:\n    // 0x4077b2\n    *a4 = v16;\n    // 0x4077b5\n    return v13 & 0xffffffff;\n  lab_0x40788a:\n    // 0x40788a\n    g77 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x407710\n    switch (v12) {\n        case 66: {\n            // 0x407a84\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x4078f7;\n            } else {\n                // 0x407a91\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x4078c8;\n            }\n        }\n        case 69: {\n            goto lab_0x407a2b;\n        }\n        case 71: {\n            goto lab_0x407a63;\n        }\n        case 75: {\n            goto lab_0x4078ec;\n        }\n        case 77: {\n            goto lab_0x4078ae;\n        }\n        case 80: {\n            goto lab_0x4079f8;\n        }\n        case 84: {\n            goto lab_0x4079c8;\n        }\n        case 89: {\n            goto lab_0x407996;\n        }\n        case 90: {\n            goto lab_0x40795b;\n        }\n        case 98: {\n            goto lab_0x40793f;\n        }\n        case 99: {\n            goto lab_0x4078c8;\n        }\n        case 103: {\n            goto lab_0x407a63;\n        }\n        case 107: {\n            goto lab_0x4078ec;\n        }\n        case 109: {\n            goto lab_0x4078ae;\n        }\n        case 116: {\n            goto lab_0x4079c8;\n        }\n        case 119: {\n            // 0x407930\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x4078f7;\n            } else {\n                // 0x407935\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x4078c8;\n            }\n        }\n        default: {\n            goto lab_0x407925;\n        }\n    }\n  lab_0x407a2b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x407a43\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x407a4f\n    int64_t v51 = v48; // 0x407a52\n    int64_t v52 = v37; // 0x407a52\n    int64_t v53 = v49; // 0x407a52\n    int32_t v54 = v50; // 0x407a52\n    int64_t v55 = v49; // 0x407a52\n    while (v50 != 0) {\n        // 0x407a40\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x407984;\n  lab_0x407a63:\n    // 0x407a63\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x407a6e\n        int128_t v56; // 0x407a69\n        uint128_t v57; // 0x407a69\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x407a6e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x407710\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x407a73\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x407a78\n                v26 = v60;\n                int64_t v61; // 0x407710\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x4078c8;\n  lab_0x4078ec:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x4078ef\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x4078c8;\n    } else {\n        goto lab_0x4078f7;\n    }\n  lab_0x4078ae:;\n    int128_t v65 = v27; // 0x4078b4\n    uint128_t v66 = v65 * (int128_t)v17; // 0x4078b4\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x4078f7;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x4078b9\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x4078f7;\n        } else {\n            // 0x4078be\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x4078c8;\n        }\n    }\n  lab_0x4079f8:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x407a0b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x407a17\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x407a1a\n    int64_t v73 = v70; // 0x407a1a\n    while (v71 != 0) {\n        // 0x407a08\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x407984;\n  lab_0x4079c8:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x4079db\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x4079e7\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x4079ea\n    int64_t v79 = v76; // 0x4079ea\n    while (v77 != 0) {\n        // 0x4079d8\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x407984;\n  lab_0x407996:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x4079ab\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x4079b7\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x4079ba\n    int64_t v85 = v82; // 0x4079ba\n    while (v83 != 0) {\n        // 0x4079a8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x407984;\n  lab_0x40795b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x407973\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x40797f\n    int32_t v90 = v89; // 0x407982\n    int64_t v91 = v88; // 0x407982\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x407970\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x407984;\n  lab_0x40793f:\n    // 0x40793f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x4078f7;\n    } else {\n        // 0x407948\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x4078c8;\n    }\n  lab_0x4078c8:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x4078cd\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x4077b2;\n  lab_0x407925:\n    // 0x407925\n    *a4 = v18;\n    // 0x4077b5\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4078f7:\n    // 0x4078f7\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x4078c8;\n  lab_0x407984:\n    // 0x407984\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x4078c8;\n}\n"
        },
        {
            "funcName": "function_407b50",
            "funcStartAddr": "407b50",
            "funcEndAddr": "407c85",
            "decompiledFuncCode": "int64_t function_407b50(int32_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x407b80\n    if (cmd != 1030) {\n        // 0x407c30\n        return fcntl(fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x407b8c\n    int64_t v2; // 0x407b50\n    if (g66 < 0) {\n        int64_t v3 = function_407b50(fd, 0, v1, a4); // 0x407bd4\n        int64_t v4 = v3 & 0xffffffff; // 0x407bd9\n        if ((int32_t)v3 < 0) {\n            // 0x407bc0\n            return v4 & 0xffffffff;\n        }\n        // 0x407bdf\n        v2 = v4;\n        if (g66 != -1) {\n            // 0x407bc0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl(fd, cmd); // 0x407ba7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x407bb6\n            g66 = 1;\n            // 0x407bc0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_407b50(fd, 0, v1, a4); // 0x407c67\n        int64_t v7 = v6 & 0xffffffff; // 0x407c6c\n        if ((int32_t)v6 < 0) {\n            // 0x407bc0\n            return v7 & 0xffffffff;\n        }\n        // 0x407c76\n        g66 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x407bef\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x407bfa\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x407bc0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x407c12\n    close(fd2);\n    // 0x407bc0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407c90",
            "funcStartAddr": "407c90",
            "funcEndAddr": "407d6f",
            "decompiledFuncCode": "int64_t function_407c90(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x407c9c\n    uint32_t v2 = *v1; // 0x407c9c\n    int64_t v3 = a2 & 0xffffffff; // 0x407ca1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407ca4\n    uint64_t v5 = (int64_t)*v4; // 0x407ca4\n    int64_t v6; // 0x407d12\n    if (v3 <= v5) {\n      lab_0x407d0c_2:\n        // 0x407d0c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407c92\n    int64_t v8 = v2; // 0x407c90\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x407d0c\n        goto lab_0x407d0c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407cc8\n    int64_t v17; // 0x407cd6\n    int64_t * v18; // 0x407cf0\n    int64_t * v19; // 0x407cf3\n    int64_t v20; // 0x407cfe\n    int64_t v21; // 0x407cd6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407cd3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407cf0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407d07\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x407d0c\n            goto lab_0x407d0c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407d0c\n            goto lab_0x407d0c_2;\n        }\n        // 0x407cc2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x407d4b\n    int64_t * v23 = (int64_t *)v22; // 0x407d50\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x407d53\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x407d50\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x407d67\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x407cbd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407d0c\n            goto lab_0x407d0c_2;\n        }\n        // 0x407cc2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407cd3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407cf0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407d07\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x407d0c\n                goto lab_0x407d0c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x407d0c\n                goto lab_0x407d0c_2;\n            }\n            // 0x407cc2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x407d30\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x407d50\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x407d67\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x407d0c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "40838c",
            "decompiledFuncCode": "int64_t function_407d70(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x407d8f\n    int64_t v2 = *v1; // 0x407d8f\n    char * str2 = (char *)v2; // 0x407d9c\n    char c = *str2; // 0x407d9c\n    int64_t v3 = v2; // 0x407dc8\n    int64_t v4 = 0; // 0x407d70\n    int32_t v5; // 0x407d70\n    int64_t v6; // 0x407d70\n    int64_t v7; // 0x407d70\n    int64_t v8; // 0x407d70\n    int64_t v9; // 0x407d70\n    int64_t v10; // 0x407d70\n    int64_t v11; // 0x407d70\n    int64_t v12; // 0x407d70\n    int64_t v13; // 0x407d70\n    int64_t str3; // 0x407d70\n    int64_t v14; // 0x407d70\n    int64_t v15; // 0x407d70\n    int64_t v16; // 0x407d70\n    int64_t v17; // 0x407d70\n    int32_t v18; // 0x407d70\n    int32_t v19; // 0x407d70\n    int32_t v20; // 0x407d70\n    int32_t v21; // 0x407d70\n    int32_t v22; // 0x407d70\n    int32_t v23; // 0x407d70\n    int32_t v24; // 0x407d70\n    int32_t v25; // 0x407d70\n    int32_t v26; // 0x407d70\n    int32_t v27; // 0x407d70\n    int32_t v28; // 0x407d70\n    int32_t v29; // 0x407d70\n    int64_t nmemb; // 0x407d70\n    int64_t v30; // 0x407d70\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x407dcc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407dc8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407dd8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x407dde\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407da8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x407e0c\n                int64_t v34; // 0x407d70\n                int64_t v35; // 0x407d70\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407e15\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x407f90;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x407e26\n                int64_t v37 = *(int64_t *)v36; // 0x407e2a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407e00\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407e15\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x407f90;\n                        }\n                    }\n                    // 0x407e26\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x407e76:\n                    // 0x407e76\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407ed0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408040\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407ed0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x407ff0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x407e9a;\n                                } else {\n                                    // 0x407ffc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x407e9a;\n                                    } else {\n                                        // 0x40800a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x407e9a;\n                                        } else {\n                                            goto lab_0x407ed0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x407e9a;\n                            }\n                        }\n                    }\n                }\n              lab_0x407ee1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4080b6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408262\n                            flockfile(g38);\n                            int64_t v41 = *v1; // 0x408282\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4082cf\n                            int64_t v43 = (int64_t)g38;\n                            int64_t v44 = v43; // 0x4082e9\n                            int64_t v45; // 0x4082eb\n                            if (*(char *)v42 != 0) {\n                                // 0x4082eb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g38;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4082e3\n                            while (v17 + nmemb != v42) {\n                                // 0x4082e5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4082eb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g38;\n                                }\n                                // 0x4082d8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408310\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g38);\n                            v40 = *v1;\n                        } else {\n                            // 0x4080c4\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40821f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408119\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408130\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x407fde\n                    return 63;\n                }\n                // 0x407f00\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x407f84\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x407f90:;\n                    int32_t * v49 = (int32_t *)a7; // 0x407fa0\n                    uint32_t v50 = *v49; // 0x407fa0\n                    int64_t v51 = v50; // 0x407fa0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x407faa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x407fb3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4081df\n                                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40818a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x407fde\n                            return 63;\n                        }\n                        // 0x408028\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40833f\n                                    __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40823d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408250\n                                // 0x407fde\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40814e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408162\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x407fcb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x407fce\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407fd2\n                    int64_t result = v59; // 0x407fd8\n                    if (v58 != 0) {\n                        // 0x407fda\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x407fde\n                    return result;\n                }\n            } else {\n                // 0x407dde\n                v5 = v32;\n            }\n            // break -> 0x407f05\n            break;\n        }\n    }\n    // 0x407f05\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x407f1d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x407f27\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x407fde\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408069\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x407f56\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x407f66\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407ed0:\n    // 0x407ed0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407ed0\n    int64_t v63 = *(int64_t *)v62; // 0x407ed4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407ee1\n        goto lab_0x407ee1;\n    }\n    goto lab_0x407e76;\n  lab_0x407e9a:\n    // 0x407e9a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x407d70\n    int32_t v65; // 0x407d70\n    int32_t v66; // 0x407d70\n    if (v27 != 0) {\n        goto lab_0x407ed0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408050\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407ed0;\n            } else {\n                goto lab_0x407ec1;\n            }\n        } else {\n            // 0x407eb5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4081ac\n                int64_t v67 = (int64_t)mem; // 0x4081ac\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407ed0;\n                } else {\n                    // 0x4081bf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407ec1;\n                }\n            } else {\n                goto lab_0x407ec1;\n            }\n        }\n    }\n  lab_0x407ec1:\n    // 0x407ec1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407ed0;\n}\n"
        },
        {
            "funcName": "function_408390",
            "funcStartAddr": "408390",
            "funcEndAddr": "408956",
            "decompiledFuncCode": "int64_t function_408390(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4083b1\n    if (v3 < 1) {\n        // 0x40856e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4083ad\n    int32_t v5 = *(int32_t *)a7; // 0x4083b9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4083bb\n    int64_t v7 = v2; // 0x4083c0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4083c3\n    *v8 = 0;\n    int64_t v9; // 0x408390\n    int64_t v10; // 0x408390\n    int64_t v11; // 0x408390\n    int64_t v12; // 0x408390\n    int64_t str; // 0x408390\n    int64_t v13; // 0x408390\n    int64_t v14; // 0x408390\n    int64_t v15; // 0x408390\n    int64_t v16; // 0x408390\n    int64_t v17; // 0x408390\n    int32_t v18; // 0x408390\n    char v19; // 0x408390\n    if (v5 == 0) {\n        // 0x4085a8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4083da;\n    } else {\n        // 0x4083d3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x408420\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x408423\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4084e8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x408436\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x408446\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4084fc;\n                } else {\n                    goto lab_0x408458;\n                }\n            }\n        } else {\n            goto lab_0x4083da;\n        }\n    }\n  lab_0x4083da:\n    // 0x4083da\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4083e0\n    *v24 = 0;\n    int64_t v25; // 0x408390\n    int64_t v26; // 0x408390\n    int64_t v27; // 0x408390\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4084d0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4084dd;\n        }\n        case 43: {\n            // 0x4087e0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4084dd;\n        }\n        default: {\n            // 0x4083fc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40875f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408878\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4084dd;\n                } else {\n                    // 0x40876d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40840a;\n                }\n            } else {\n                goto lab_0x40840a;\n            }\n        }\n    }\n  lab_0x4084e8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4084ef\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x408458;\n    } else {\n        goto lab_0x4084fc;\n    }\n  lab_0x40840a:\n    // 0x40840a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4084dd;\n  lab_0x4084dd:\n    // 0x4084dd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4084e8;\n  lab_0x408458:;\n    uint32_t v30 = *(int32_t *)a7; // 0x408458\n    int64_t v31 = v30; // 0x408458\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40845a\n    if ((int64_t)*v32 > v31) {\n        // 0x40845f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x408462\n    if (*v33 > v30) {\n        // 0x408467\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40846a\n    int64_t v35 = v31; // 0x40846e\n    int64_t v36 = v15; // 0x40846e\n    int64_t v37; // 0x408390\n    int64_t v38; // 0x408390\n    int64_t v39; // 0x408390\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4085d8\n        int64_t v41 = v40; // 0x4085d8\n        v2 = v41;\n        int64_t v42; // 0x408390\n        if (*v33 == v40) {\n            // 0x4087c0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4087c8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4085e4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4085e8\n                function_407c90(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4085f8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x408601\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40860a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x408621\n            int64_t v47 = v45 & 0xffffffff; // 0x408625\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40862e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x408634\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x408636;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x408610\n            int64_t v49 = v48 & 0xffffffff; // 0x408610\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x408621\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40862e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x408634\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x408636;\n                    }\n                }\n                // 0x408610\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4087d8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x408636;\n    } else {\n        goto lab_0x408474;\n    }\n  lab_0x4084fc:\n    // 0x4084fc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4084ff\n    int64_t v51 = v12; // 0x4084ff\n    int64_t v52 = v14; // 0x4084ff\n    if (*(char *)v10 == 0) {\n        goto lab_0x408458;\n    } else {\n        goto lab_0x408505;\n    }\n  lab_0x408474:;\n    int32_t v53 = v35; // 0x408474\n    int64_t v54; // 0x408390\n    int64_t v55; // 0x408390\n    int64_t v56; // 0x408390\n    int64_t v57; // 0x408390\n    int64_t v58; // 0x408390\n    int64_t v59; // 0x408390\n    char * v60; // 0x408390\n    int64_t v61; // 0x408390\n    int64_t v62; // 0x408489\n    int64_t v63; // 0x408390\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4085c3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4085c6;\n    } else {\n        // 0x40847c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408390\n        int64_t v66 = v65 ? -1 : 1; // 0x408490\n        int64_t v67 = (int64_t)\"--\"; // 0x408390\n        int64_t v68 = v62; // 0x408390\n        int64_t v69 = 3; // 0x408490\n        unsigned char v70 = *(char *)v68; // 0x408490\n        char v71 = *(char *)v67; // 0x408490\n        char v72 = v71; // 0x408490\n        bool v73 = false; // 0x408490\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408580\n            if (*(char *)v62 == 45) {\n                // 0x408640\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x408640\n                if (c == 0) {\n                    goto lab_0x40858a;\n                } else {\n                    // 0x40864d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4086d0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4088b3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x408725;\n                        } else {\n                            // 0x40865e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4086d0;\n                            } else {\n                                // 0x408663\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408684;\n                                } else {\n                                    // 0x40866a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4086d0;\n                                    } else {\n                                        goto lab_0x408684;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40858a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4084a0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4084a3\n            int64_t v77 = v35 + 1; // 0x4084a6\n            int32_t v78 = v77; // 0x4084a9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408810\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4084b7\n                    function_407c90(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4084c5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4085c6;\n        }\n    }\n  lab_0x408505:;\n    // 0x408505\n    int64_t v79; // bp-104, 0x408390\n    int64_t v80 = &v79; // 0x40839a\n    int64_t v81 = v50 + 1; // 0x408505\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40850c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x408511\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x408515\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x408519\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x408521\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x408526\n    int32_t c2 = v84; // 0x408526\n    char * found_char_pos = strchr(str2, c2); // 0x408526\n    int64_t v87 = *v82; // 0x40852b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x408535\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408540\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x408830\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4087fd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40856e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x408526\n    char v91 = *(char *)(v90 + 1); // 0x40855b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x408515\n        if (v91 != 58) {\n            // 0x40856e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408784\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408888\n                *v8 = 0;\n            } else {\n                // 0x40886c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4087ae\n            *v83 = 0;\n            // 0x40856e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40878e\n        if (v93 != 0) {\n            // 0x408820\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4087ae\n            *v83 = 0;\n            // 0x40856e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4087a1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4087ae\n            *v83 = 0;\n            // 0x40856e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4088ea\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40889a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4088a1\n        // 0x4087ae\n        *v83 = 0;\n        // 0x40856e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4086f9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4086fb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x408920\n                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4088d1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4088d8\n            // 0x40856e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408706\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40870a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x408725;\n  lab_0x408636:\n    // 0x408636\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408474;\n  lab_0x408725:;\n    int64_t v99 = function_407d70(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408743\n    // 0x40856e\n    return v99 & 0xffffffff;\n  lab_0x4085c6:;\n    int32_t v100 = v55; // 0x4085c6\n    if (v100 != (int32_t)v59) {\n        // 0x4085ca\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40856e\n    return 0xffffffff;\n  lab_0x40858a:\n    // 0x40858a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408591\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40856e\n    return v99 & 0xffffffff;\n  lab_0x4086d0:\n    // 0x4086d0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x408505;\n  lab_0x408684:\n    // 0x408684\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_407d70(v6, a2, str, a4, a5, v57, v1, v11, &g17); // 0x4086aa\n    if ((int32_t)v101 != -1) {\n        // 0x40856e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4086bf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4086d0;\n}\n"
        },
        {
            "funcName": "function_408960",
            "funcStartAddr": "408960",
            "funcEndAddr": "4089b6",
            "decompiledFuncCode": "int64_t function_408960(int64_t a1) {\n    // 0x408960\n    *(int32_t *)&g67 = g34;\n    *(int32_t *)&g68 = g33;\n    int64_t v1; // 0x408960\n    int64_t result = function_408390(v1, v1, v1, v1, v1, v1, &g67, a1 & 0xffffffff); // 0x408986\n    g34 = *(int32_t *)&g67;\n    g72 = g70;\n    *(int32_t *)&g32 = g69;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4089c0",
            "funcStartAddr": "4089c0",
            "funcEndAddr": "4089d8",
            "decompiledFuncCode": "int64_t function_4089c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4089c0\n    return function_408960(1);\n}\n"
        },
        {
            "funcName": "function_4089e0",
            "funcStartAddr": "4089e0",
            "funcEndAddr": "4089f3",
            "decompiledFuncCode": "int64_t function_4089e0(int32_t a1, int64_t a2, char * a3, char (**a4)[4], int32_t a5, int64_t a6) {\n    // 0x4089e0\n    return function_408960(0);\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a15",
            "decompiledFuncCode": "int64_t function_408a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408a00\n    return function_408390(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408a20",
            "funcStartAddr": "408a20",
            "funcEndAddr": "408a36",
            "decompiledFuncCode": "int64_t function_408a20(void) {\n    // 0x408a20\n    return function_408960(0);\n}\n"
        },
        {
            "funcName": "function_408a40",
            "funcStartAddr": "408a40",
            "funcEndAddr": "408a58",
            "decompiledFuncCode": "int64_t function_408a40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408a40\n    return function_408390(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408a60",
            "funcStartAddr": "408a60",
            "funcEndAddr": "408ada",
            "decompiledFuncCode": "int64_t function_408a60(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x408a6b\n    int64_t v2 = (int64_t)&g18; // 0x408a6b\n    int32_t * pwc; // 0x408a60\n    int64_t v3; // 0x408a60\n    int64_t n; // 0x408a60\n    if (a2 == 0) {\n        goto lab_0x408ab2;\n    } else {\n        // 0x408a6d\n        if (a3 == 0) {\n            // 0x408a98\n            return -2;\n        }\n        // 0x408a79\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408ab2;\n        } else {\n            goto lab_0x408a84;\n        }\n    }\n  lab_0x408ab2:\n    // 0x408ab2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408a60\n    pwc = (int32_t *)&v4;\n    goto lab_0x408a84;\n  lab_0x408a84:;\n    char * wstr = (char *)v3; // 0x408a8a\n    int64_t ps; // 0x408a60\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x408a8a\n    int64_t result = v5; // 0x408a8a\n    if (v5 < 0xfffffffe) {\n        // 0x408a98\n        return result;\n    }\n    int64_t result2 = result; // 0x408ac9\n    if ((char)function_408ba0(0, v3) == 0) {\n        // 0x408acb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408a98\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408b39",
            "decompiledFuncCode": "int64_t function_408ae0(int64_t * a1, int64_t a2, int64_t * a3) {\n    // 0x408ae0\n    int32_t v1; // bp-16, 0x408ae0\n    int64_t v2; // 0x408ae0\n    int64_t v3 = function_409290(0, (int64_t *)&v1, a2, (int64_t)a3, v2, v2, v2, (int64_t)&g73); // 0x408af5\n    if (v3 == 0) {\n        // 0x408b12\n        return 0xffffffff;\n    }\n    // 0x408aff\n    int64_t result; // 0x408ae0\n    if (v1 > -1) {\n        // 0x408b0d\n        *a1 = v3;\n        result = v1;\n    } else {\n        // 0x408b18\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x408b12\n    return result;\n}\n"
        },
        {
            "funcName": "function_408b40",
            "funcStartAddr": "408b40",
            "funcEndAddr": "408b9d",
            "decompiledFuncCode": "int64_t function_408b40(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x408b47\n    int64_t v2; // 0x408b40\n    int64_t result = function_409170(a1, v2); // 0x408b58\n    if ((v2 & 32) != 0) {\n        // 0x408b80\n        if ((int32_t)result == 0) {\n            // 0x408b84\n            *__errno_location() = 0;\n        }\n        // 0x408b7a\n        return 0xffffffff;\n    }\n    // 0x408b61\n    if ((int32_t)result == 0) {\n        // 0x408b7a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x408b68\n    if (v1 == 0) {\n        // 0x408b6a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x408b7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408ba0",
            "funcStartAddr": "408ba0",
            "funcEndAddr": "408bfe",
            "decompiledFuncCode": "int64_t function_408ba0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x408ba6\n    if (locale == NULL) {\n        // 0x408bd3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x408ba6\n    bool v2; // 0x408ba0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g19; // 0x408ba0\n    int64_t v5 = v1; // 0x408ba0\n    int64_t v6 = 2; // 0x408bc5\n    unsigned char v7 = *(char *)v5; // 0x408bc5\n    char v8 = *(char *)v4; // 0x408bc5\n    char v9 = v8; // 0x408bc5\n    bool v10 = false; // 0x408bc5\n    while (v7 == v8) {\n        // 0x408bb8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x408bd1\n    int64_t v13 = v1; // 0x408bd1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x408bd3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x408bd1\n    unsigned char v15 = *(char *)v13; // 0x408bed\n    char v16 = *(char *)v12; // 0x408bed\n    char v17 = v16; // 0x408bed\n    bool v18 = false; // 0x408bed\n    while (v15 == v16) {\n        // 0x408be0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_408c00",
            "funcStartAddr": "408c00",
            "funcEndAddr": "409162",
            "decompiledFuncCode": "int64_t function_408c00(void) {\n    char * v1 = nl_langinfo(14); // 0x408c16\n    char * v2 = g71; // 0x408c1b\n    char * v3; // 0x408c00\n    int64_t v4; // 0x408c00\n    int64_t v5; // 0x408c00\n    int64_t v6; // 0x408c00\n    int64_t v7; // 0x408c00\n    int32_t size; // 0x408c00\n    int32_t size2; // 0x408c00\n    int32_t len; // 0x408cd2\n    int64_t v8; // 0x408cd2\n    char * env_val; // 0x408cbd\n    if (v2 == NULL) {\n        // 0x408cb8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x408d25;\n        } else {\n            // 0x408cca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x408d25;\n            } else {\n                // 0x408ccf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x408cbd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409155\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x408d25;\n                    } else {\n                        // 0x4090c9\n                        size2 = len + 14;\n                        goto lab_0x408ceb;\n                    }\n                } else {\n                    goto lab_0x408ceb;\n                }\n            }\n        }\n    } else {\n        // 0x408c00\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x408c3a;\n    }\n  lab_0x408f6c:;\n    // 0x408f6c\n    struct _IO_FILE * stream; // 0x408dab\n    int32_t v10 = __uflow(stream); // 0x408f6f\n    int64_t v11; // 0x408c00\n    int64_t v12 = v11; // 0x408f79\n    int64_t v13; // 0x408c00\n    int64_t v14 = v13; // 0x408f79\n    int32_t v15 = v10; // 0x408f79\n    int64_t v16; // 0x408c00\n    int64_t v17 = v16; // 0x408f79\n    int64_t v18 = v11; // 0x408f79\n    int64_t v19 = v13; // 0x408f79\n    int64_t v20 = v16; // 0x408f79\n    if (v10 == -1) {\n        // break -> 0x408f7f\n        goto lab_0x408f7f;\n    }\n    goto lab_0x408df9;\n  lab_0x408dee:;\n    // 0x408dee\n    int64_t v90; // 0x408c00\n    int64_t * v32; // 0x408de0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x408c00\n    v12 = v89;\n    int64_t v91; // 0x408c00\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x408c00\n    v17 = v92;\n    goto lab_0x408df9;\n  lab_0x408df9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x408c00\n    int32_t v25; // bp-120, 0x408c00\n    int32_t v26; // bp-184, 0x408c00\n    int64_t v27; // 0x408dab\n    int64_t v28; // 0x408dc8\n    int64_t v29; // 0x408dcd\n    int64_t * v30; // 0x408de4\n    switch (c) {\n        case 32: {\n            goto lab_0x408de0;\n        }\n        case 10: {\n            goto lab_0x408de0;\n        }\n        case 9: {\n            goto lab_0x408de0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x408fd1\n            int32_t v33; // 0x408c00\n            char v34; // 0x408c00\n            int32_t v35; // 0x408fde\n            if (v31 < *v30) {\n                // 0x408fb0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x408fdb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x408fd1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x408fb0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x408fdb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x408fc0\n                v36 = v33;\n            }\n            // 0x4090af\n            if (v36 == -1) {\n                // break -> 0x408f7f\n                break;\n            }\n            goto lab_0x408de0;\n        }\n        default: {\n            // 0x408e0f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x408f7f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x408e38\n            int64_t v39 = v37 + 4; // 0x408e3a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x408e46\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x408e48\n            while (v41 == 0) {\n                // 0x408e38\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x408e66\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x408e72\n            int64_t v45 = v43 + 4; // 0x408e74\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x408e80\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x408e82\n            while (v47 == 0) {\n                // 0x408e72\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x408e6f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x408e98\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x408ea8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x408eac\n            int64_t v52 = v51 + v48; // 0x408eb5\n            int64_t * mem; // 0x408c00\n            int64_t v53; // 0x408c00\n            int64_t v54; // 0x408c00\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x408feb\n                int64_t v56 = v55 + 3; // 0x408ff7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x408ed1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x408ee0\n            if (mem == NULL) {\n                // 0x40910c\n                free((int64_t *)v21);\n                function_409170(v27, v53);\n                v24 = (int64_t)&g18;\n                goto lab_0x408d84;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x408ef8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x408f02\n            uint32_t v62 = (int32_t)v59; // 0x408f05\n            int64_t v63; // 0x408c00\n            if (v62 >= 8) {\n                // 0x409014\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40902e\n                int64_t v66 = v61 - v65; // 0x409032\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40903d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40904e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40904e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40904b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4090df\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x408f17\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x408f1b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x408f2b\n            int64_t v74 = v60 - 1; // 0x408f2f\n            uint32_t v75 = (int32_t)v73; // 0x408f34\n            int64_t v76; // 0x408c00\n            if (v75 >= 8) {\n                // 0x409062\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40906c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40907c\n                int64_t v80 = v74 - v79; // 0x409080\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40908b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40909b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409099\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4090f6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4090fe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x408f46\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x408f4a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409143\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x408f5e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x408dee;\n            } else {\n                goto lab_0x408f6c;\n            }\n        }\n    }\n  lab_0x408de0:;\n    int64_t v93 = v23; // 0x408c00\n    int64_t v94 = v22; // 0x408c00\n    int64_t v95 = v21; // 0x408c00\n    goto lab_0x408de0_2;\n  lab_0x408d25:;\n    int64_t * mem3 = malloc(size); // 0x408d25\n    int64_t v97 = (int64_t)&g18; // 0x408d30\n    int64_t v98; // 0x408c00\n    int64_t path; // 0x408c00\n    if (mem3 == NULL) {\n        goto lab_0x408d02;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x408d25\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x408d46;\n    }\n  lab_0x408c3a:;\n    int64_t str = v1 == NULL ? (int64_t)&g18 : (int64_t)v1; // 0x408c2d\n    char v100 = *v3; // 0x408c3a\n    int64_t v101; // 0x408c00\n    if (v100 == 0) {\n        // 0x408c94\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x408c00\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x408c00\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x408c80\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x408c87;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x408c50\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x408c5d\n        char v107 = *(char *)v106; // 0x408c62\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x408c94\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x408c6b\n    v104 = v103 + 1;\n  lab_0x408c87:\n    // 0x408c94\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x408d02:;\n    char * v108 = (char *)v97;\n    g71 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x408c3a;\n  lab_0x408d46:;\n    int64_t v109 = v98 + path; // 0x408d46\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x408d72\n    v24 = (int64_t)&g18;\n    if (fd >= 0) {\n        // 0x408da1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4090d2\n            close(fd);\n            v24 = (int64_t)&g18;\n        } else {\n            // 0x408dc5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x408de0_2:;\n                uint64_t v96 = *v32; // 0x408de0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x408f6c;\n                } else {\n                    goto lab_0x408dee;\n                }\n            }\n          lab_0x408f7f:\n            // 0x408f7f\n            function_409170(v27, v19);\n            v24 = (int64_t)&g18;\n            if (v18 != 0) {\n                // 0x408f9e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x408d84;\n  lab_0x408ceb:;\n    int64_t * mem4 = malloc(size2); // 0x408ceb\n    v97 = (int64_t)&g18;\n    if (mem4 != NULL) {\n        // 0x408d91\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x408d46;\n    } else {\n        goto lab_0x408d02;\n    }\n  lab_0x408d84:\n    // 0x408d84\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x408d02;\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "4091eb",
            "decompiledFuncCode": "int64_t function_409170(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x409177\n    if (fileno(stream) < 0) {\n        // 0x4091d7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40918a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4091bb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4091d7\n            return fclose(stream);\n        }\n    }\n    // 0x40918c\n    if ((int32_t)function_4091f0(a1, v1) == 0) {\n        // 0x4091d7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x409198\n    int32_t v3 = *v2; // 0x4091a0\n    int64_t result = fclose(stream); // 0x4091ae\n    if (v3 != 0) {\n        // 0x4091e0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4091b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4091f0",
            "funcStartAddr": "4091f0",
            "funcEndAddr": "409230",
            "decompiledFuncCode": "int64_t function_4091f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40920a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40920a\n        return fflush(stream);\n    }\n    // 0x409218\n    function_409230(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_409230",
            "funcStartAddr": "409230",
            "funcEndAddr": "409287",
            "decompiledFuncCode": "int64_t function_409230(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x409230\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40923a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40926b\n    int64_t result = -1; // 0x409274\n    if (v1 != -1) {\n        // 0x409276\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x409282\n    return result;\n}\n"
        },
        {
            "funcName": "function_409290",
            "funcStartAddr": "409290",
            "funcEndAddr": "40ada9",
            "decompiledFuncCode": "int64_t function_409290(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x409290\n    int64_t v1; // bp-1416, 0x409290\n    int64_t v2; // bp-1656, 0x409290\n    if ((int32_t)function_40afd0(a3, &v1, &v2) < 0) {\n        // 0x409900\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40929b\n    int64_t v4; // bp-1384, 0x409290\n    int64_t v5; // bp-1640, 0x409290\n    int64_t v6; // 0x409290\n    if ((int32_t)function_40adb0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40a1e7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40a203\n            free((int64_t *)v6);\n        }\n        // 0x40a208\n        *__errno_location() = 22;\n        // 0x409900\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x4092fb\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x409303\n    uint64_t v9 = v8 + v6; // 0x409307\n    int64_t v10; // 0x409290\n    char * v11; // 0x409290\n    int64_t v12; // 0x409290\n    if (v9 < v8) {\n        // 0x4099b0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4098b9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x4099b0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x4098b9;\n        } else {\n            uint64_t size = v9 + 6; // 0x409317\n            if (size < 4000) {\n                // 0x409460\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x409290\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x409354;\n            } else {\n                if (size == -1) {\n                    // 0x4099b0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x4098b9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x409338\n                    if (mem == NULL) {\n                        // 0x4099b0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x4098b9;\n                    } else {\n                        // 0x40934d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x409354;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409880_2:;\n    // 0x409880\n    int64_t v14; // 0x409290\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x409888\n    int64_t v17 = v16; // 0x409896\n    int64_t v18 = v16; // 0x409896\n    int64_t v19 = v15; // 0x409896\n    int64_t v20; // 0x409378\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x409aa8;\n    } else {\n        goto lab_0x4098a1;\n    }\n  lab_0x4098b9:\n    // 0x4098b9\n    if (v6 != (int64_t)&v4) {\n        // 0x4098d0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4098ec\n        free((int64_t *)v6);\n    }\n    // 0x4098f1\n    *(int32_t *)v10 = 12;\n    // 0x409900\n    return 0;\n  lab_0x409354:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40938d\n    int64_t v23 = *v22; // 0x40938d\n    int64_t v24 = 0; // 0x409393\n    int64_t v25 = v20; // 0x409393\n    int64_t v26 = v21; // 0x409393\n    int64_t v27 = 0; // 0x409393\n    int64_t v28; // 0x409290\n    int64_t v29; // 0x409290\n    int64_t v30; // 0x409290\n    int64_t v31; // 0x409290\n    int64_t v32; // 0x409290\n    int64_t v33; // 0x409290\n    int64_t v34; // 0x409290\n    if (v23 == a3) {\n        goto lab_0x4099a3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x409399\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x4093ab;\n    }\n  lab_0x4099a3:;\n    int64_t v36 = v24; // 0x4099a6\n    float80_t v37; // 0x409290\n    float80_t v38 = v37; // 0x4099a6\n    float80_t v39; // 0x409290\n    float80_t v40 = v39; // 0x4099a6\n    int64_t v41 = v25; // 0x4099a6\n    int64_t v42 = v26; // 0x4099a6\n    int64_t v43 = v27; // 0x4099a6\n    int64_t v44; // 0x409290\n    int64_t v45 = v44; // 0x4099a6\n    goto lab_0x409508;\n  lab_0x409508:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x409290\n    int64_t v51; // 0x409290\n    int64_t v52; // 0x409290\n    int64_t v53; // 0x409290\n    int64_t v54; // 0x409290\n    int64_t v55; // 0x409290\n    int64_t v56; // 0x409290\n    int64_t v57; // 0x409290\n    int64_t dest_mem2; // 0x409290\n    int64_t dest_mem3; // 0x409290\n    int64_t v58; // 0x409290\n    float80_t v59; // 0x409290\n    float80_t v60; // 0x409290\n    float80_t v61; // 0x409290\n    float80_t v62; // 0x409290\n    float80_t v63; // 0x409290\n    uint64_t v64; // 0x40a636\n    char * v65; // 0x40951c\n    char v66; // 0x40951c\n    int64_t v67; // 0x409544\n    uint32_t v68; // 0x409548\n    int64_t v69; // 0x409925\n    char v70; // 0x409290\n    if (v1 == v49) {\n        // 0x40a630\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40ad9a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40a692;\n            } else {\n                goto lab_0x409880_2;\n            }\n        } else {\n            // 0x40a640\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40a692;\n            } else {\n                if (v47 != 0) {\n                    // 0x40ac5d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x409880_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40ac63\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40a65e;\n                        } else {\n                            goto lab_0x40ac6f;\n                        }\n                    }\n                } else {\n                    // 0x40a64e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40a65e;\n                    } else {\n                        goto lab_0x40ac6f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40951c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x409521\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40a0f0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x409880_2;\n                } else {\n                    goto lab_0x409982;\n                }\n            } else {\n                // 0x409932\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x409982;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40a220\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x409880_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40a226\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x409950;\n                            } else {\n                                goto lab_0x40a232;\n                            }\n                        }\n                    } else {\n                        // 0x409940\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x409950;\n                        } else {\n                            goto lab_0x40a232;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            // 0x409539\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g78 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x409eb0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409987;\n                }\n                case 19: {\n                    // 0x409ea0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409987;\n                }\n                case 20: {\n                    // 0x409e88\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409987;\n                }\n                case 21: {\n                    goto lab_0x409a70;\n                }\n                case 22: {\n                    goto lab_0x409a70;\n                }\n                default: {\n                    // 0x40955a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x409a00\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x409a1d;\n                        } else {\n                            // 0x409a07\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x409590;\n                            } else {\n                                goto lab_0x409a1d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x409590;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4093ab:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x409290\n    float80_t v77 = v76;\n    float80_t v78; // 0x409290\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x409290\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x4093ae\n    int64_t v89 = v85; // 0x4093ae\n    int64_t v90 = v84; // 0x4093ae\n    float80_t v91 = v79; // 0x4093ae\n    float80_t v92 = v77; // 0x4093ae\n    int64_t v93 = v75; // 0x4093ae\n    int64_t v94 = v80; // 0x4093ae\n    int64_t v95 = v81; // 0x4093ae\n    int64_t v96 = v82; // 0x4093ae\n    int64_t v97 = v87; // 0x4093ae\n    int64_t v98; // 0x409290\n    int64_t v99; // 0x409290\n    int64_t v100; // 0x409290\n    int64_t v101; // 0x409290\n    int64_t v102; // 0x409290\n    if (v82 >= v87) {\n        goto lab_0x4094f9;\n    } else {\n        if (v82 != 0) {\n            // 0x409490\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x409880_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x409496\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x4094ab;\n                } else {\n                    goto lab_0x40949e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4093d4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x4094be;\n                } else {\n                    goto lab_0x4093e0;\n                }\n            } else {\n                goto lab_0x40949e;\n            }\n        }\n    }\n  lab_0x4094f9:\n    // 0x4094f9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x409508;\n  lab_0x40a692:\n    // 0x40a692\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40a69a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40a6ab\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40a6b7\n    if (v12 != 0) {\n        // 0x40a6c3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40a6e2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40a6fe\n        free((int64_t *)v6);\n    }\n    // 0x40a703\n    *a2 = v46;\n    // 0x409900\n    return result;\n  lab_0x409a70:\n    // 0x409a70\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x409987;\n  lab_0x40949e:\n    // 0x40949e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        goto lab_0x4094ab;\n    }\n  lab_0x409aa8:\n    // 0x409aa8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x4098a1;\n  lab_0x4098a1:\n    if (v12 == 0) {\n        // 0x4099b0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4098b9;\n    } else {\n        // 0x4098b1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x4098b9;\n    }\n  lab_0x409982:\n    // 0x409982\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x409987;\n  lab_0x409590:;\n    int64_t v273 = (int64_t)v11; // 0x409590\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x409597\n    int64_t v275 = v273 + 1; // 0x40959b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x4095a4\n    if (v274 % 2 != 0) {\n        // 0x4095a6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x409597\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x4095b7\n    if ((v277 & 2) != 0) {\n        // 0x4095b9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4095c3\n    if ((v277 & 4) != 0) {\n        // 0x4095c5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4095cf\n    if ((v277 & 8) != 0) {\n        // 0x4095d1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x4095db\n    if ((v277 & 16) != 0) {\n        // 0x4095dd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x4095e7\n    if ((v277 & 64) != 0) {\n        // 0x4095e9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x4095f3\n    if ((v277 & 32) != 0) {\n        // 0x4095f5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x4095fd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x409601\n    int64_t v293 = v290; // 0x409608\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x409617\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40963a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40963e\n    int64_t v298 = v295; // 0x409645\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x409654\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40954a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x409680\n    int64_t v272; // 0x409290\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x409689\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x409a88;\n        } else {\n            if (v301 == 12) {\n                // 0x40a248\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x4096b0;\n            } else {\n                // 0x4096a0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x409a80\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x409a88;\n                } else {\n                    goto lab_0x4096b0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4096b0;\n    }\n  lab_0x409987:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x409987\n    int64_t v111 = v55 + 88; // 0x40998b\n    int64_t v112 = *(int64_t *)v111; // 0x40998f\n    int64_t v113 = v49 + 1; // 0x409992\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x409399\n        int64_t v115 = v114 + v105; // 0x40939f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x4099c8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x409880_2;\n            } else {\n                goto lab_0x4094f9;\n            }\n        } else {\n            goto lab_0x4093ab;\n        }\n    } else {\n        goto lab_0x4099a3;\n    }\n  lab_0x4094ab:;\n    int64_t v116 = v80 == v20; // 0x4094b2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x4093e0;\n    } else {\n        goto lab_0x4094be;\n    }\n  lab_0x4094be:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x409290\n    if (v102 != 0) {\n        goto lab_0x4093e0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4094da\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x409a95;\n        } else {\n            // 0x4094e8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x4094f9;\n        }\n    }\n  lab_0x4093e0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x4093f7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x409880_2;\n    } else {\n        // 0x40941d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x409445\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x4094f9;\n    }\n  lab_0x40a65e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40ac24\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x409880_2;\n        } else {\n            // 0x40ac35\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40ac4a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40a692;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40a681\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x409a95;\n        } else {\n            // 0x40a68f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40a692;\n        }\n    }\n  lab_0x40ac6f:\n    // 0x40ac6f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        goto lab_0x40a65e;\n    }\n  lab_0x409a1d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x409a1d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x409a21\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x409a25\n    int64_t v123 = 0; // 0x409a2c\n    int64_t v124 = v122; // 0x409a2c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x409a32\n        int64_t v126 = v120; // 0x409a3a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40a9c1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40a9d9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40a9eb\n            int64_t v131 = v128; // 0x40a9f4\n            int64_t v132 = v130; // 0x40a9f4\n            int64_t v133; // 0x409290\n            int64_t v134; // 0x40aa06\n            if (v130 < v129) {\n                // 0x40a9f6\n                if (v121 == v128) {\n                    // break -> 0x409810\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x4097fb\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x409810\n                        goto lab_0x409810;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40a9b8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40a9c1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40a9f6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x409810\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x4097fb\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x409810\n                            goto lab_0x409810;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40a9b8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x409a44\n            if (*(int32_t *)v135 != 5) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x409a50\n            int64_t v137 = v136; // 0x409a50\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x409a5d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x409810:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x409810\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x409814\n    int64_t v142; // 0x409290\n    int64_t v143; // 0x409290\n    int64_t v144; // 0x409290\n    if (v140 == v141) {\n        goto lab_0x409ec0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x409821\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40aa24\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40aa2d\n            if (v141 == v146) {\n                goto lab_0x409ede;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40aa53\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40aa5a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40aa73\n                int64_t v152 = v151; // 0x40aa7c\n                int64_t v153 = v149; // 0x40aa7c\n                int64_t v154; // 0x409290\n                int64_t v155; // 0x40aa87\n                if (v151 < v150) {\n                    // 0x40aa7e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x409880_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40aa9a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x409880_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40aa40\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40aa49\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40aa7e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x409880_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40aa9a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x409880_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40aa40\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40984c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x409833\n            if (*(int32_t *)v156 != 5) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x409840\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x409ec0;\n            } else {\n                goto lab_0x40984c;\n            }\n        }\n    }\n  lab_0x4096b0:\n    // 0x4096b0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x4096bd\n    int64_t v160 = 0; // 0x4096c5\n    if (v159 != -1) {\n        // 0x4096cb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x409fbc\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x4096ee\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x4096fc\n        if (*(int32_t *)v162 != 5) {\n            // 0x409fbc\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40970f\n        int64_t v164; // bp-8, 0x409290\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x409290\n    uint64_t v165; // 0x409726\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40a158\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x409784\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x409880_2;\n    } else {\n        // 0x409730\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x409784\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x409e60\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x409880_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x409e66\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x409752;\n                } else {\n                    goto lab_0x409e72;\n                }\n            }\n        } else {\n            // 0x409742\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x409752;\n            } else {\n                goto lab_0x409e72;\n            }\n        }\n    }\n  lab_0x409950:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40a179\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x409880_2;\n        } else {\n            // 0x40a191\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40a1a2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x409982;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x409971\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x409a95;\n        } else {\n            // 0x40997f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x409982;\n        }\n    }\n  lab_0x40a232:\n    // 0x40a232\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        goto lab_0x409950;\n    }\n  lab_0x409ec0:\n    // 0x409ec0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x409ede;\n  lab_0x409a88:\n    // 0x409a88\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x4096b0;\n  lab_0x409a95:\n    // 0x409a95\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x409aa8;\n  lab_0x409ede:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x409ee4\n    v14 = v48;\n    int64_t v170; // 0x409290\n    int64_t v171; // 0x409290\n    int64_t * v172; // 0x409290\n    int64_t v173; // 0x409290\n    int64_t v174; // bp-760, 0x409290\n    uint64_t size5; // 0x409ee8\n    if (v169 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        // 0x409ef9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x409f59;\n        } else {\n            // 0x409f05\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x409880_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x409f2d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x409880_2;\n                } else {\n                    goto lab_0x409f59;\n                }\n            }\n        }\n    }\n  lab_0x40984c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x409ede;\n    } else {\n        // 0x409855\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x409ede;\n        } else {\n            goto lab_0x409880_2;\n        }\n    }\n  lab_0x409752:\n    // 0x409752\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40a119\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40a134\n            if (v48 == v20 && v46 != 0) {\n                // 0x40a142\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x409784\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x409773\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x409784\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x409880_2;\n  lab_0x409e72:\n    // 0x409e72\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        goto lab_0x409752;\n    }\n  lab_0x409f59:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x409290\n    int64_t v181; // 0x409290\n    int64_t v182; // 0x409290\n    int64_t v183; // 0x409290\n    int64_t v184; // 0x409290\n    int64_t v185; // 0x409290\n    int64_t v186; // 0x409290\n    int64_t v187; // 0x409290\n    int64_t v188; // 0x409290\n    int64_t v189; // 0x409290\n    int64_t v190; // 0x409290\n    int64_t v191; // 0x409290\n    int64_t v192; // 0x409290\n    int64_t v193; // 0x409290\n    float80_t v194; // 0x409290\n    float80_t v195; // 0x409290\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40aad2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40aae0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40ac0d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40a419;\n    } else {\n        // 0x409f61\n        int64_t v198; // 0x409290\n        float80_t v199; // 0x409290\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40a721\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40a72e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40a58a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x409f8f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x409f98\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x409fbc\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40ab06\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40ab06\n                            v181 = v187 + 3;\n                            goto lab_0x40ac81;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40ac81;\n                            } else {\n                                goto lab_0x40ab42;\n                            }\n                        }\n                    } else {\n                        // 0x40a813\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40a407;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40a821\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40ad6a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40a868\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40a87b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40a87e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40a88c\n                                int64_t v209 = v187 + 1; // 0x40a8a9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40a8be\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40a8cb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40a419;\n                        }\n                    }\n                } else {\n                    // 0x40a5b8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40a5b8\n                        v180 = v187 + 1;\n                        goto lab_0x40ab67;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40ab67;\n                        } else {\n                            goto lab_0x40a5d8;\n                        }\n                    }\n                }\n            } else {\n                // 0x40a3f0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40a407;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40a93c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40a94d\n                    char v215 = *v213; // 0x40a954\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40a990\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40a99d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40a965\n                        v182 = v218;\n                        int64_t v219; // 0x40a957\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40a419;\n                }\n            }\n        } else {\n            float80_t v220; // 0x409290\n            if (v220 != 0.0L) {\n                // 0x409fbc\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40a60b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40a61a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40a8f3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40a419;\n        }\n    }\n  lab_0x40a419:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40a41c\n    int64_t v229 = v228; // 0x40a422\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40a424\n        int64_t v232 = v231 + v224; // 0x40a427\n        int64_t v233 = v232 - v225; // 0x40a42e\n        if ((v230 & 2) != 0) {\n            // 0x40a8d3\n            v229 = v233;\n            int64_t v234 = v224; // 0x40a8d6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40a8e0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40a8e0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40a745\n                int64_t v238 = v224; // 0x40a74b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40a759\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40a750\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40a765\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40a778\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40a451\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40a471\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40a468\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40a47a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40a488\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x409fbc\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40a4b8\n    int64_t dest_mem5 = v48; // 0x40a4c5\n    int64_t v250 = v248; // 0x40a4c5\n    int64_t v251 = v47; // 0x40a4c5\n    int64_t v252; // 0x409290\n    if (v47 - v46 > v248) {\n        goto lab_0x40a540;\n    } else {\n        if (v249 < v46) {\n            // 0x40a712\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x409880_2;\n            } else {\n                goto lab_0x40a540;\n            }\n        } else {\n            // 0x40a4d0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40a540;\n            } else {\n                if (v47 != 0) {\n                    // 0x40aaa8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x409880_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40aaae\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40a4ee;\n                        } else {\n                            goto lab_0x40aaba;\n                        }\n                    }\n                } else {\n                    // 0x40a4de\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40a4ee;\n                    } else {\n                        goto lab_0x40aaba;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a540:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40a551\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40a56d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x409987;\n  lab_0x40a407:\n    // 0x40a407\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40a419;\n  lab_0x40ab67:;\n    char * v257 = nl_langinfo(0x10000); // 0x40ab9a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40abab\n    char v259 = *v257; // 0x40abb2\n    int64_t v260 = v176 & 0xffffffff; // 0x40abb5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40abc3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40abf0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40abfd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40a5d8;\n  lab_0x40a5d8:\n    // 0x40a5d8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40a419;\n  lab_0x40a4ee:\n    // 0x40a4ee\n    if (v48 == 0 || v48 == v20) {\n        // 0x40a78b\n        int64_t size7; // 0x409290\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40a7a2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x409880_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40a7ae\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40a7d9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40a540;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40a51d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x409880_2;\n        } else {\n            // 0x40a52b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40a540;\n        }\n    }\n  lab_0x40aaba:\n    // 0x40aaba\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x409880_2;\n    } else {\n        goto lab_0x40a4ee;\n    }\n  lab_0x40ac81:;\n    int64_t v265 = v187 + 4; // 0x40ac81\n    char v266 = *nl_langinfo(0x10000); // 0x40accc\n    int64_t v267 = v176 & 0xffffffff; // 0x40accf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40acd6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40acfd\n        int64_t v270 = v265 + 1; // 0x40ad05\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40ab42;\n  lab_0x40ab42:\n    // 0x40ab42\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40a419;\n}\n"
        },
        {
            "funcName": "function_40adb0",
            "funcStartAddr": "40adb0",
            "funcEndAddr": "40afc9",
            "decompiledFuncCode": "int64_t function_40adb0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x40ae13\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40adc8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40add9\n    g79 = v5;\n    int64_t v6; // 0x40adb0\n    int64_t v7; // 0x40adb0\n    int64_t v8; // 0x40adb0\n    int64_t v9; // 0x40adb0\n    int64_t v10; // 0x40adb0\n    int64_t v11; // 0x40adb0\n    int64_t v12; // 0x40adb0\n    uint32_t v13; // 0x40aed0\n    int64_t * v14; // 0x40af00\n    int64_t v15; // 0x40af08\n    uint32_t v16; // 0x40af50\n    uint32_t v17; // 0x40af20\n    int64_t * v18; // 0x40aeb0\n    int64_t v19; // 0x40aeb0\n    int64_t * v20; // 0x40aec0\n    int64_t v21; // 0x40aec0\n    int64_t * v22; // 0x40ae98\n    int64_t v23; // 0x40ae98\n    int64_t * v24; // 0x40ae80\n    int64_t v25; // 0x40ae80\n    int64_t * v26; // 0x40afa0\n    uint32_t v27; // 0x40ae60\n    int64_t v28; // 0x40afa0\n    int64_t * v29; // 0x40af90\n    int64_t v30; // 0x40af90\n    uint32_t v31; // 0x40ae40\n    int64_t * v32; // 0x40afb8\n    int64_t v33; // 0x40afb8\n    int64_t v34; // 0x40af63\n    uint32_t v35; // 0x40ae20\n    int64_t v36; // 0x40af37\n    uint32_t v37; // 0x40ade8\n    int32_t * v38; // 0x40aed0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x40ae60\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x40ae67\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x40aeb0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x40ae73\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x40ae06\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x40ae40\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x40ae47\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x40aec0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x40ae53\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x40ae06\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x40ae20\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x40ae27\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x40ae98\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x40ae33\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x40ae06\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x40ade8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x40adf3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x40ae80\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40adff\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x40ae06\n            break;\n        }\n        case 11: {\n            // 0x40aed0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40aedf\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x40afa0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40aeec\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x40ae06\n            break;\n        }\n        case 12: {\n            // 0x40af00\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x40ae06\n            break;\n        }\n        case 15: {\n            // 0x40af50\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x40af57\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x40af90\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x40af63\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x40ae06\n            break;\n        }\n        case 16: {\n            // 0x40af20\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40af2b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x40afb8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x40af37\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x40ae06\n            break;\n        }\n        default: {\n            // 0x40ae13\n            return 0xffffffff;\n        }\n    }\n    // 0x40ae06\n    v3++;\n    int64_t v39 = v4 + 32; // 0x40ae11\n    while (v3 < v2) {\n        // 0x40add0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g79 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x40ae60\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x40ae67\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x40aeb0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x40ae73\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x40ae06\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x40ae40\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x40ae47\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x40aec0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x40ae53\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x40ae06\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x40ae20\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x40ae27\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x40ae98\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x40ae33\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x40ae06\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x40ade8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x40adf3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x40ae80\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40adff\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x40ae06\n                break;\n            }\n            case 11: {\n                // 0x40aed0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40aedf\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x40afa0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40aeec\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x40ae06\n                break;\n            }\n            case 12: {\n                // 0x40af00\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x40ae06\n                break;\n            }\n            case 15: {\n                // 0x40af50\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x40af57\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x40af90\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x40af63\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x40ae06\n                break;\n            }\n            case 16: {\n                // 0x40af20\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40af2b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x40afb8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x40af37\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x40ae06\n                break;\n            }\n            default: {\n                // 0x40ae13\n                return 0xffffffff;\n            }\n        }\n        // 0x40ae06\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x40ae13\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40afd0",
            "funcStartAddr": "40afd0",
            "funcEndAddr": "40bcd9",
            "decompiledFuncCode": "int64_t function_40afd0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x40afd2\n    int64_t v4 = v1 + 16; // 0x40afd6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x40b009\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40b01e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40b04b\n    int32_t v8 = 0; // 0x40b050\n    int64_t v9 = 0; // 0x40b050\n    int64_t v10 = v3; // 0x40b050\n    int64_t v11 = a1; // 0x40b050\n    int64_t v12 = 0; // 0x40b050\n    char v13; // 0x40afd0\n    int64_t v14; // 0x40afd0\n    int64_t v15; // 0x40afd0\n    int64_t v16; // 0x40afd0\n    int64_t v17; // 0x40afd0\n    int64_t v18; // 0x40afd0\n    int64_t v19; // 0x40afd0\n    int64_t v20; // 0x40afd0\n    int64_t v21; // 0x40afd0\n    int64_t v22; // 0x40afd0\n    int64_t v23; // 0x40afd0\n    int64_t v24; // 0x40afd0\n    int64_t v25; // 0x40afd0\n    int64_t v26; // 0x40afd0\n    int64_t v27; // 0x40afd0\n    int64_t v28; // 0x40afd0\n    int64_t v29; // 0x40afd0\n    int64_t v30; // 0x40afd0\n    int32_t v31; // 0x40afd0\n    int64_t v32; // 0x40afd0\n    int64_t v33; // 0x40b040\n    int64_t v34; // 0x40b090\n    int64_t * v35; // 0x40b0b3\n    int64_t v36; // 0x40b116\n    if (v7 != 0) {\n        // 0x40b040\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x40afd0\n        int64_t v38 = 7; // 0x40afd0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x40afd0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x40b040:\n            // 0x40b040\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x40b083\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x40b098\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x40b0d4\n                int64_t v43 = v42; // 0x40b0d4\n                int64_t v44 = v43; // 0x40b0dd\n                int64_t v45 = v33; // 0x40b0dd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x40b470\n                    char v47 = *(char *)v46; // 0x40b474\n                    int64_t v48 = v46; // 0x40b47d\n                    while (v47 < 58) {\n                        // 0x40b470\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40b47f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x40bb15\n                        char v52 = *(char *)v51; // 0x40bb15\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x40bb19\n                        int64_t v54 = v33; // 0x40bb2d\n                        int64_t v55 = v51; // 0x40bb2d\n                        char v56 = v52; // 0x40bb2d\n                        int64_t v57 = v53; // 0x40bb2d\n                        bool v58 = v52 < 58; // 0x40bb2d\n                        bool v59 = v52 < 58; // 0x40bb2d\n                        char v60 = v52; // 0x40bb2d\n                        int64_t v61 = v51; // 0x40bb2d\n                        int64_t v62; // 0x40bb42\n                        int64_t v63; // 0x40bb15\n                        char v64; // 0x40bb15\n                        int64_t v65; // 0x40bb19\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x40b798_9;\n                            }\n                            // 0x40bb13\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x40bb2f\n                                if (v64 >= 58) {\n                                    goto lab_0x40b798_9;\n                                }\n                                // 0x40bb13\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x40bae8\n                        while (v58) {\n                            // 0x40baee\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x40b798_9;\n                                }\n                                // 0x40bb13\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x40bb2f\n                                    if (v64 >= 58) {\n                                        goto lab_0x40b798_9;\n                                    }\n                                    // 0x40bb13\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x40bae4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x40bbed\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x40b798_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x40bbfe\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x40afd0\n                v36 = v45;\n                char v70; // 0x40afd0\n                while (true) {\n                    // 0x40b116\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x40b130\n                                *v41 = *v41 | 2;\n                                // break -> 0x40b110\n                                break;\n                            }\n                            case 43: {\n                                // 0x40b140\n                                *v41 = *v41 | 4;\n                                // break -> 0x40b110\n                                break;\n                            }\n                            case 32: {\n                                // 0x40b150\n                                *v41 = *v41 | 8;\n                                // break -> 0x40b110\n                                break;\n                            }\n                            case 35: {\n                                // 0x40b160\n                                *v41 = *v41 | 16;\n                                // break -> 0x40b110\n                                break;\n                            }\n                            case 48: {\n                                // 0x40b170\n                                *v41 = *v41 | 32;\n                                // break -> 0x40b110\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x40b178\n                                    break;\n                                }\n                                // 0x40b106\n                                *v41 = *v41 | 64;\n                                // break -> 0x40b110\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40b11f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x40b110\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x40afd0\n                int64_t * v72; // 0x40b0a1\n                int64_t * v73; // 0x40b0aa\n                if (v70 == 42) {\n                    // 0x40b1ed\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40b20d\n                    int64_t v75 = v74; // 0x40b20d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x40b211\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x40b217\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40b5ed\n                        char v80 = *(char *)v79; // 0x40b5f1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40b5ed\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40b5fd\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x40b601\n                        int64_t v82 = v36; // 0x40b601\n                        int64_t v83 = 0; // 0x40b601\n                        if (v80 != 36) {\n                            goto lab_0x40b21d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x40b632\n                            int64_t v89 = v85; // 0x40b632\n                            int64_t v90 = v87; // 0x40b632\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x40b637\n                            int64_t v95 = v92 + 1; // 0x40b63a\n                            char v96 = *(char *)v95; // 0x40b63a\n                            int64_t v97 = v96; // 0x40b63a\n                            while (v94 < v91) {\n                                // 0x40b651\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x40b798_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40b60b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x40b614\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x40b651\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x40b798_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40b60b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x40bc8b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x40b798_9;\n                            }\n                            // 0x40bc99\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40b22c;\n                        }\n                    } else {\n                        goto lab_0x40b21d;\n                    }\n                } else {\n                    // 0x40b17d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x40afd0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x40b89b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x40b8a0\n                        int64_t v102 = v71; // 0x40b8a9\n                        char * v103 = v100; // 0x40b8a9\n                        int64_t v104 = v36; // 0x40b8a9\n                        int64_t v105 = v71; // 0x40b8a9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x40b8b3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x40b8b3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x40b8b3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x40b8c2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x40b8e5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x40b188;\n                }\n            } else {\n                goto lab_0x40b048;\n            }\n        }\n    }\n  lab_0x40b052:\n    // 0x40b052\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x40b074\n    return 0;\n  lab_0x40b798_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x40b7a3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x40b7b5\n    if (v3 != v115) {\n        // 0x40b7c0\n        free((int64_t *)v115);\n    }\n    // 0x40b7c5\n    *__errno_location() = 22;\n    // 0x40b074\n    return 0xffffffff;\n  lab_0x40b970_5:;\n    // 0x40b970\n    int64_t v116; // 0x40afd0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x40b975\n    int64_t v119; // 0x40afd0\n    if (v4 == v117) {\n        goto lab_0x40b989_3;\n    } else {\n        // 0x40b977\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x40b989_3;\n    }\n  lab_0x40b989_3:;\n    int64_t v120 = *v5; // 0x40b989\n    int32_t * v121; // 0x40b999\n    if (v3 == v120) {\n        // 0x40b999\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x40b994\n    free((int64_t *)v120);\n    // 0x40b999\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x40b048:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40b04b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x40b052\n        goto lab_0x40b052;\n    }\n    goto lab_0x40b040;\n  lab_0x40b21d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40b21d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x40b5c3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x40b798_9;\n        }\n        // 0x40b5db\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40b22c;\n  lab_0x40b188:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40b18b\n    int64_t v147 = v339; // 0x40b18b\n    int64_t v145 = v338; // 0x40b18b\n    int64_t v143 = v337; // 0x40b18b\n    int64_t v186; // 0x40afd0\n    int64_t v190; // 0x40afd0\n    int64_t v189; // 0x40afd0\n    int64_t v188; // 0x40afd0\n    int64_t v187; // 0x40afd0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x40b290;\n    } else {\n        goto lab_0x40b191;\n    }\n  lab_0x40b22c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40b22c\n    int64_t v132 = v128; // 0x40b233\n    int64_t v133 = v16; // 0x40b233\n    int64_t v134 = v131; // 0x40b233\n    int64_t v135; // 0x40afd0\n    int64_t v136; // 0x40afd0\n    int64_t v137; // 0x40afd0\n    int64_t v138; // 0x40b4df\n    if (v16 > v127) {\n        goto lab_0x40b23c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x40b4d5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x40b970_5;\n        }\n        int64_t size = 32 * v138; // 0x40b4fe\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x40ba5c\n            if (mem == NULL) {\n                goto lab_0x40b989_3;\n            }\n            // 0x40ba7e\n            v135 = (int64_t)mem;\n            goto lab_0x40ba89;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40b51f\n            int64_t v140 = *v6; // 0x40b524\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x40b970_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40b51f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x40ba89;\n            } else {\n                goto lab_0x40b55d;\n            }\n        }\n    }\n  lab_0x40b191:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x40b198\n    int64_t v151 = v146; // 0x40b198\n    int64_t v152 = v144; // 0x40b198\n    uint64_t v153; // 0x40afd0\n    int64_t v154; // 0x40afd0\n    int64_t v155; // 0x40b1d7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40b1db\n        int64_t v158; // 0x40afd0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x40b340\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x40b1d3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x40b348\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x40b1d0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x40b1d3\n                    break;\n                }\n            }\n        } else {\n            // 0x40b1e0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x40b1d3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x40b348\n    int64_t v162 = v161 % 256; // 0x40b354\n    g80 = v162;\n    int64_t v163 = 17; // 0x40b357\n    int64_t v164 = v154; // 0x40b357\n    int64_t v165 = v154; // 0x40b357\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x40b3c1;\n        }\n        case 28: {\n            goto lab_0x40b712;\n        }\n        case 30: {\n            // 0x40b73e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x40b369;\n        }\n        case 32: {\n            goto lab_0x40b712;\n        }\n        case 33: {\n            goto lab_0x40b712;\n        }\n        case 34: {\n            goto lab_0x40b712;\n        }\n        case 46: {\n            // 0x40b72f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x40b369;\n        }\n        case 51: {\n            goto lab_0x40b74d;\n        }\n        case 60: {\n            goto lab_0x40b712;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x40b669\n            int32_t v167 = v166 - 7; // 0x40b669\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40b66f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x40b369;\n        }\n        case 63: {\n            goto lab_0x40b6c0;\n        }\n        case 64: {\n            goto lab_0x40b712;\n        }\n        case 65: {\n            goto lab_0x40b712;\n        }\n        case 66: {\n            goto lab_0x40b712;\n        }\n        case 68: {\n            goto lab_0x40b6c0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40b67f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x40b685\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40b68d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40b69b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40b6af\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x40b369;\n        }\n        case 74: {\n            goto lab_0x40b74d;\n        }\n        case 75: {\n            goto lab_0x40b369;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x40b360\n            int32_t v172 = v171 - 7; // 0x40b360\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x40b366\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x40b369;\n        }\n        case 80: {\n            goto lab_0x40b74d;\n        }\n        case 83: {\n            goto lab_0x40b74d;\n        }\n        default: {\n            goto lab_0x40b798_9;\n        }\n    }\n  lab_0x40b23c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x40b253\n        int64_t v178 = v176; // 0x40afd0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x40b248\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x40b248\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x40b261\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40b26d\n    int32_t v182 = *v181; // 0x40b26d\n    if (v182 != 0) {\n        // 0x40b8ee\n        if (v182 != 5) {\n            goto lab_0x40b798_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x40b8f7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x40b188;\n    } else {\n        // 0x40b277\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40b27d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x40b191;\n        } else {\n            goto lab_0x40b290;\n        }\n    }\n  lab_0x40b290:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x40b290\n    char v197 = *v196; // 0x40b290\n    int64_t * v198; // 0x40b0b8\n    *v198 = v192;\n    int64_t v199; // 0x40afd0\n    int64_t v200; // 0x40afd0\n    int64_t v201; // 0x40afd0\n    int64_t v202; // 0x40afd0\n    int64_t v203; // 0x40afd0\n    int64_t * v204; // 0x40b0c1\n    int64_t * v205; // 0x40b0ca\n    int64_t v206; // 0x40b2a9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x40b490\n        int64_t v208 = v193; // 0x40b499\n        char * v209; // 0x40afd0\n        int64_t v210; // 0x40afd0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x40b4a0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x40b4a4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x40b4a0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40b4ae\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x40b490\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x40b4c1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x40b191;\n    } else {\n        // 0x40b29f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40b2bf\n        int64_t v219 = v218; // 0x40b2bf\n        int64_t v220 = v219 + 0xffffffd0; // 0x40b2c3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x40b2c9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x40bb74\n            char v224 = *(char *)v223; // 0x40bb78\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x40bb74\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x40bb84\n            v201 = v223;\n            int64_t v225 = v219; // 0x40bb88\n            int64_t v226 = v206; // 0x40bb88\n            int64_t v227 = 0; // 0x40bb88\n            if (v224 != 36) {\n                goto lab_0x40b2cf;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x40bbb9\n                int64_t v233 = v229; // 0x40bbb9\n                int64_t v234 = v231; // 0x40bbb9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x40bbbe\n                int64_t v239 = v236 + 1; // 0x40bbc5\n                char v240 = *(char *)v239; // 0x40bbc9\n                int64_t v241 = v240; // 0x40bbc9\n                while (v238 < v235) {\n                    // 0x40bbd7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x40b798_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x40bb92\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x40bb9b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x40bbd7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x40b798_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x40bb92\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x40bca7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x40b798_9;\n                }\n                // 0x40bcb5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40b2de;\n            }\n        } else {\n            goto lab_0x40b2cf;\n        }\n    }\n  lab_0x40b3c1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x40b3c6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40b3ce\n    *a2 = v245;\n    int64_t v246; // 0x40afd0\n    int64_t v247; // 0x40afd0\n    int64_t dest_mem; // 0x40afd0\n    int64_t v248; // 0x40afd0\n    int64_t v249; // 0x40bcc3\n    if (v246 > v245) {\n        // 0x40b3da\n        goto lab_0x40b048;\n    } else {\n        if (v246 < 0) {\n            // 0x40bcc3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40b970_5;\n        }\n        int64_t v250 = 2 * v246; // 0x40b3f6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x40bcc3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40b970_5;\n        }\n        int64_t v251 = *v5; // 0x40b407\n        int64_t size2 = 176 * v246; // 0x40b419\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x40b569\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x40bacc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x40b999\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x40b977\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x40b989_3;\n            }\n            goto lab_0x40b584;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40b42b\n            if (mem4 == NULL) {\n                // 0x40bcc3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40b970_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40b42b\n            int64_t v254 = *v5; // 0x40b44d\n            int64_t v255 = *a2; // 0x40b451\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x40b584;\n            } else {\n                goto lab_0x40b45f;\n            }\n        }\n    }\n  lab_0x40b712:\n    // 0x40b712\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x40b727\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x40b369;\n  lab_0x40b74d:;\n    uint32_t v335 = (int32_t)v153; // 0x40b755\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40b75b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40b763\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x40b771\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40b77e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40b369;\n  lab_0x40b6c0:;\n    uint32_t v336 = (int32_t)v153; // 0x40b6c8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40b6ce\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40b6d6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x40b6e4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40b6f1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40b369;\n  lab_0x40b369:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x40afd0\n    int64_t v260; // 0x40afd0\n    int64_t * v261; // 0x40b0cf\n    if (v259 == -1) {\n        // 0x40b874\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x40b798_9;\n        }\n        // 0x40b88c\n        v260 = v148;\n    } else {\n        // 0x40b373\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x40b378\n    int64_t v264 = v258; // 0x40b37f\n    int64_t v265 = v162; // 0x40b37f\n    int64_t v266 = v263; // 0x40b37f\n    int64_t v267; // 0x40afd0\n    int64_t v268; // 0x40afd0\n    int64_t v269; // 0x40afd0\n    int64_t v270; // 0x40afd0\n    int64_t v271; // 0x40afd0\n    if (v142 > v262) {\n        goto lab_0x40b385;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x40b7e8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x40b7f2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x40b970_5;\n        }\n        int64_t size3 = 32 * v273; // 0x40b811\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x40b824\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x40b909\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x40b989_3;\n            }\n            goto lab_0x40b926;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x40b831\n            if (mem6 == NULL) {\n                // 0x40bcc3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40b970_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x40b831\n            int64_t v276 = v274 & 0xffffffff; // 0x40b836\n            int64_t v277 = *v6; // 0x40b861\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x40b926;\n            } else {\n                goto lab_0x40b86b;\n            }\n        }\n    }\n  lab_0x40b385:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40b39b\n        int64_t v282 = v279; // 0x40afd0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x40b390\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x40b390\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x40b3a9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x40b3b5\n    int32_t v286 = *v285; // 0x40b3b5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40b7da\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x40b798_9;\n        }\n    } else {\n        // 0x40b3bf\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x40b3c1;\n  lab_0x40ba89:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x40ba89\n    int64_t * v290; // 0x40afd0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40b55d;\n  lab_0x40b55d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40b23c;\n  lab_0x40b2cf:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40b2cf\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x40bb4a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x40b798_9;\n        }\n        // 0x40bb62\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40b2de;\n  lab_0x40b2de:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40b2de\n    int64_t v300 = v296; // 0x40b2e5\n    int64_t v301 = v191; // 0x40b2e5\n    int64_t v302 = v299; // 0x40b2e5\n    int64_t v303; // 0x40afd0\n    int64_t v304; // 0x40afd0\n    int64_t v305; // 0x40afd0\n    int64_t v306; // 0x40b9c2\n    if (v191 > v295) {\n        goto lab_0x40b2ee;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x40b9b8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x40b970_5;\n        }\n        int64_t size4 = 32 * v306; // 0x40b9dd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x40bc0e\n            if (mem7 == NULL) {\n                goto lab_0x40b989_3;\n            }\n            // 0x40bc30\n            v304 = (int64_t)mem7;\n            goto lab_0x40bc3b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x40b9fe\n            int64_t v308 = *v6; // 0x40ba03\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x40b970_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x40b9fe\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x40bc3b;\n            } else {\n                goto lab_0x40ba3c;\n            }\n        }\n    }\n  lab_0x40b584:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x40afd0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40b45f;\n  lab_0x40b45f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x40b048;\n  lab_0x40b926:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40b93c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40b86b;\n  lab_0x40b86b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x40b385;\n  lab_0x40b2ee:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x40b303\n        int64_t v324 = v322; // 0x40afd0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x40b2f8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x40b2f8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x40b311\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x40b31e\n    int32_t v328 = *v327; // 0x40b31e\n    if (v328 != 0) {\n        // 0x40ba45\n        if (v328 != 5) {\n            goto lab_0x40b798_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x40ba4e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x40b328\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x40b331\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x40b191;\n  lab_0x40bc3b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x40bc3b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x40ba3c;\n  lab_0x40ba3c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40b2ee;\n}\n"
        },
        {
            "funcName": "function_40bce0",
            "funcStartAddr": "40bce0",
            "funcEndAddr": "40bd3d",
            "decompiledFuncCode": "int64_t function_40bce0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bce0\n    return function_401630();\n}\n"
        },
        {
            "funcName": "function_40bd40",
            "funcStartAddr": "40bd40",
            "funcEndAddr": "40bd41",
            "decompiledFuncCode": "int64_t function_40bd40(void) {\n    // 0x40bd40\n    int64_t result; // 0x40bd40\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bd50",
            "funcStartAddr": "40bd50",
            "funcEndAddr": "40bd68",
            "decompiledFuncCode": "int64_t function_40bd50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bd50\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g24);\n}\n"
        },
        {
            "funcName": "function_40bd68",
            "funcStartAddr": "40bd68",
            "funcEndAddr": "40bd88",
            "decompiledFuncCode": "int64_t function_40bd68(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g20; // 0x40bd72\n    while (*(int64_t *)v1 != -1) {\n        // 0x40bd73\n        v1 -= 8;\n    }\n    // 0x40bd84\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stty.elf"
}