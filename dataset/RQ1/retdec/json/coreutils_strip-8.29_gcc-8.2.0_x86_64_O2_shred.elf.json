{
    "funcInfo": [
        {
            "funcName": "function_402070",
            "funcStartAddr": "402070",
            "funcEndAddr": "402075",
            "decompiledFuncCode": "int64_t function_402070(void) {\n    // 0x402070\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402075",
            "funcStartAddr": "402075",
            "funcEndAddr": "40207a",
            "decompiledFuncCode": "int64_t function_402075(void) {\n    // 0x402075\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40207a",
            "funcStartAddr": "40207a",
            "funcEndAddr": "40207f",
            "decompiledFuncCode": "int64_t function_40207a(void) {\n    // 0x40207a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40207f",
            "funcStartAddr": "40207f",
            "funcEndAddr": "402084",
            "decompiledFuncCode": "int64_t function_40207f(void) {\n    // 0x40207f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402084",
            "funcStartAddr": "402084",
            "funcEndAddr": "402089",
            "decompiledFuncCode": "int64_t function_402084(void) {\n    // 0x402084\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402089",
            "funcStartAddr": "402089",
            "funcEndAddr": "40208e",
            "decompiledFuncCode": "int64_t function_402089(void) {\n    // 0x402089\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40208e",
            "funcStartAddr": "40208e",
            "funcEndAddr": "402093",
            "decompiledFuncCode": "int64_t function_40208e(void) {\n    // 0x40208e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020a0",
            "funcStartAddr": "4020a0",
            "funcEndAddr": "402920",
            "decompiledFuncCode": "int64_t function_4020a0(int64_t a1, int64_t a2) {\n    // 0x4020a0\n    int128_t v1; // 0x4020a0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x4020a2\n    int64_t v4 = a1 & 0xffffffff; // 0x4020ba\n    int64_t v5; // bp-168, 0x4020a0\n    int64_t v6 = &v5; // 0x4020c0\n    __asm_movaps(v3);\n    __asm_movaps(v3);\n    function_4051c0(a2);\n    setlocale(LC_ALL, (char *)&g17);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v7; // 0x4020a0\n    function_40a210(0x4042c0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v7);\n    int64_t v8 = v6 + 80;\n    char * v9 = (char *)v8;\n    int32_t * v10 = (int32_t *)(v6 + 104);\n    char * v11 = (char *)(v6 + 108);\n    int64_t v12 = 0; // 0x40211a\n    int64_t str; // 0x4020a0\n    int64_t v13; // 0x4020a0\n    int64_t v14; // 0x4020a0\n    char * format; // 0x4028fe\n    while (true) {\n      lab_0x402120_2:\n        // 0x402120\n        str = v12;\n        int64_t v15 = v14;\n        int32_t v16 = function_4099c0(v4, a2, \"fn:s:uvxz\", &g4, 0, v15);\n        switch (v16) {\n            case -1: {\n                goto lab_0x402317;\n            }\n            case 115: {\n                int64_t v17 = (int64_t)dcgettext(NULL, \"invalid file size\", 5); // 0x4022c4\n                *(int64_t *)(v6 - 16) = 0;\n                int64_t v18 = function_4084d0((int64_t)g55, (int32_t)\"invalid file size\" ^ (int32_t)\"invalid file size\", 0, 0x7fffffffffffffff, \"cbBkKMGTPEZY0\", v17, (int64_t)&g59); // 0x4022e6\n                *(int64_t *)(v6 + 96) = v18;\n                v13 = v17;\n                v12 = str;\n                goto lab_0x402120;\n            }\n            default: {\n                if (v16 > 115) {\n                    if (v16 == 120) {\n                        // 0x402300\n                        char * v19; // 0x4020a0\n                        *v19 = 1;\n                        v13 = v15;\n                        v12 = str;\n                    } else {\n                        if (v16 > 120) {\n                            if (v16 != 122) {\n                                if (v16 != 128) {\n                                    // 0x40289b\n                                    function_403ac0(1);\n                                    // UNREACHABLE\n                                }\n                                char * str2 = g55; // 0x40228b\n                                int64_t v20 = (int64_t)str2; // 0x40228b\n                                v13 = v15;\n                                v12 = v20;\n                                if (str != 0) {\n                                    // 0x402297\n                                    v13 = v15;\n                                    v12 = v20;\n                                    if (strcmp((char *)str, str2) != 0) {\n                                        // 0x4028f2\n                                        format = dcgettext(NULL, \"multiple random sources specified\", 5);\n                                        error(1, (int32_t)\"multiple random sources specified\" ^ (int32_t)\"multiple random sources specified\", format);\n                                        return &g59;\n                                    }\n                                }\n                            } else {\n                                // 0x4021e1\n                                char * v21; // 0x4020a0\n                                *v21 = 1;\n                                v13 = v15;\n                                v12 = str;\n                            }\n                        } else {\n                            if (v16 != 117) {\n                                if (v16 != 118) {\n                                    // 0x40289b\n                                    function_403ac0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x4021c9\n                                *v11 = 1;\n                                v13 = v15;\n                                v12 = str;\n                            } else {\n                                char * v22 = g55; // 0x40215f\n                                if (v22 == NULL) {\n                                    // 0x40230a\n                                    *v10 = 3;\n                                    v13 = v15;\n                                    v12 = str;\n                                } else {\n                                    int32_t v23 = g25; // 0x40217f\n                                    int64_t v24 = v23; // 0x40217f\n                                    int64_t v25 = function_4041e0(\"--remove\", (int64_t)v22, g6, (int64_t *)&g5, 4, v24); // 0x40218b\n                                    int32_t v26 = *(int32_t *)(4 * v25 + (int64_t)&g5); // 0x402190\n                                    *v10 = v26;\n                                    v13 = v24;\n                                    v12 = str;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v16 == -130) {\n                        // 0x4028a5\n                        function_403ac0(0);\n                        // UNREACHABLE\n                    }\n                    if (v16 <= 0xffffff7e) {\n                        if (v16 == -131) {\n                            // 0x40224b\n                            function_408100((int64_t)g36, \"shred\", \"GNU coreutils\", (int64_t)g24, \"Colin Plumb\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x40289b;\n                    }\n                    if (v16 != 102) {\n                        if (v16 != 110) {\n                          lab_0x40289b:\n                            // 0x40289b\n                            function_403ac0(1);\n                            // UNREACHABLE\n                        }\n                        char * v27 = dcgettext(NULL, \"invalid number of passes\", 5); // 0x402205\n                        int64_t v28 = function_4085a0((int64_t)g55, (int32_t)\"invalid number of passes\" ^ (int32_t)\"invalid number of passes\", 0x3fffffffffffffff, (int64_t *)&g17, (int64_t)v27, 0); // 0x402228\n                        *(int64_t *)(v6 + 88) = v28;\n                        v13 = 0;\n                        v12 = str;\n                    } else {\n                        // 0x4021b6\n                        *v9 = 1;\n                        v13 = v15;\n                        v12 = str;\n                    }\n                }\n                goto lab_0x402120;\n            }\n        }\n    }\n  lab_0x402317:;\n    int32_t v29 = *(int32_t *)0x60f35c; // 0x402317\n    int32_t v30 = (int32_t)a1 - v29; // 0x402321\n    if (v30 == 0) {\n        // 0x40287c\n        error(0, (int32_t)\"missing file operand\" ^ (int32_t)\"missing file operand\", dcgettext(NULL, \"missing file operand\", 5));\n        // 0x40289b\n        function_403ac0(1);\n        // UNREACHABLE\n    }\n    int64_t v31 = function_406e30(); // 0x402331\n    g41 = v31;\n    int64_t v32 = str; // 0x402340\n    int32_t fd; // 0x4020a0\n    int64_t v33; // 0x4020a0\n    int64_t v34; // 0x4020a0\n    int64_t v35; // 0x4020a0\n    int64_t v36; // 0x4020a0\n    int64_t v37; // 0x4020a0\n    char v38; // 0x4020a0\n    char * v39; // 0x4020a0\n    int32_t * v40; // 0x402367\n    int64_t * v41; // 0x402371\n    int64_t * v42; // 0x4020a0\n    int64_t * v43; // 0x4020a0\n    int64_t * v44; // 0x4020a0\n    int32_t * v45; // 0x4020a0\n    char * v46; // 0x4020a0\n    int64_t * v47; // 0x4020a0\n    int64_t * v48; // 0x4020a0\n    int64_t * v49; // 0x4020a0\n    int64_t * v50; // 0x4020a0\n    int64_t v51; // 0x4023e2\n    int64_t path; // 0x4023e7\n    int64_t v52; // 0x4023f7\n    int32_t * err_num; // 0x402466\n    if (v31 != 0) {\n        // 0x402346\n        function_40a210(0x402a00, -1, (int64_t)\"fn:s:uvxz\");\n        if (v30 < 1) {\n            // 0x4024c9\n            *(char *)(v6 | 7) = 1;\n            // 0x4024ce\n            return 0;\n        }\n        int64_t v53 = v29; // 0x402317\n        v39 = (char *)(v6 | 7);\n        *v39 = 1;\n        v40 = (int32_t *)(v6 + 20);\n        *v40 = -1;\n        v41 = (int64_t *)(v6 + 8);\n        *v41 = a2 + 8 + 8 * ((int64_t)(v30 - 1) + v53);\n        bool v54; // 0x4020a0\n        int64_t v55 = v54 ? -1 : 1;\n        v42 = (int64_t *)(v6 + 48);\n        v43 = (int64_t *)(v6 + 64);\n        v44 = (int64_t *)(v6 + 24);\n        v45 = (int32_t *)(v6 + 16);\n        int64_t v56 = v6 + 32;\n        v46 = (char *)v56;\n        v47 = (int64_t *)(v6 + 56);\n        v48 = (int64_t *)(v6 + 72);\n        v49 = (int64_t *)(v6 + 40);\n        v50 = (int64_t *)v56;\n        v35 = 8 * v53 + a2;\n        while (true) {\n          lab_0x4023d0:\n            // 0x4023d0\n            v36 = v35;\n            int64_t * v57 = (int64_t *)v36; // 0x4023d0\n            int64_t v58 = *v57; // 0x4023d0\n            v51 = function_408470(function_406c60(0, 3, v58));\n            path = *v57;\n            v52 = g41;\n            int64_t v59 = path;\n            int64_t v60 = (int64_t)&g16;\n            unsigned char v61 = *(char *)v59; // 0x402401\n            char v62 = *(char *)v60; // 0x402401\n            int64_t v63 = 1; // 0x402401\n            char v64 = v62; // 0x402401\n            bool v65 = false; // 0x402401\n            while (v61 == v62) {\n                int64_t v66 = v60 + v55; // 0x402401\n                int64_t v67 = v59 + v55; // 0x402401\n                int64_t v68 = v63; // 0x402401\n                v64 = v61;\n                v65 = true;\n                if (v63 == 0) {\n                    // break -> \n                    break;\n                }\n                v59 = v67;\n                v60 = v66;\n                v61 = *(char *)v59;\n                v62 = *(char *)v60;\n                v63 = v68 - 1;\n                v64 = v62;\n                v65 = false;\n            }\n            unsigned char v69 = v64;\n            if ((v61 >= v69 && !v65) == v61 < v69) {\n                int64_t v70 = function_408a90(1, 3, v58, v63); // 0x40238a\n                int64_t v71; // 0x4020a0\n                if ((int32_t)v70 < 0) {\n                    // 0x40251a\n                    error(0, *__errno_location(), dcgettext(NULL, \"%s: fcntl failed\", 5));\n                    v71 = (int32_t)&g59 ^ (int32_t)&g59;\n                } else {\n                    if ((v70 & 1024) != 0) {\n                        // 0x4024a0\n                        error(0, (int32_t)\"%s: cannot shred append-only file descriptor\" ^ (int32_t)\"%s: cannot shred append-only file descriptor\", dcgettext(NULL, \"%s: cannot shred append-only file descriptor\", 5));\n                        v71 = (int32_t)&g59 ^ (int32_t)&g59;\n                    } else {\n                        // 0x4023a0\n                        v71 = function_4033d0(1, v51, v52, v8);\n                    }\n                }\n                // 0x4023b5\n                v38 = *v39 & (char)v71;\n                v37 = v51;\n                v34 = v36;\n                goto lab_0x4023b9;\n            } else {\n                int64_t v72 = function_4044d0(path, 257, v58); // 0x40241a\n                int32_t v73 = v72;\n                fd = v73;\n                v33 = v72;\n                if (v73 < 0) {\n                    // 0x402466\n                    err_num = __errno_location();\n                    if (*err_num == 13) {\n                        // 0x40254b\n                        if (*v9 == 0) {\n                            goto lab_0x402477;\n                        } else {\n                            // 0x402556\n                            if (chmod((char *)path, 128) != 0) {\n                                goto lab_0x402477;\n                            } else {\n                                int64_t v74 = function_4044d0(path, 257, v58); // 0x402573\n                                int32_t v75 = v74;\n                                fd = v75;\n                                v33 = v74;\n                                if (v75 >= 0) {\n                                    goto lab_0x402426;\n                                } else {\n                                    goto lab_0x402477;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x402477;\n                    }\n                } else {\n                    goto lab_0x402426;\n                }\n            }\n        }\n      lab_0x4024ce:\n        // 0x4024ce\n        return (int64_t)(*v39 ^ 1);\n    }\n    goto lab_0x4028c5;\n  lab_0x4023b9:\n    // 0x4023b9\n    *v39 = v38;\n    int64_t v76 = v34 + 8; // 0x4023bc\n    free((int64_t *)v37);\n    v35 = v76;\n    if (*v41 == v76) {\n        // break -> 0x4024ce\n        goto lab_0x4024ce;\n    }\n    goto lab_0x4023d0;\n  lab_0x402426:;\n    int64_t v77 = function_4033d0(v33 & 0xffffffff, v51, v52, v8); // 0x402434\n    int64_t v78; // 0x4020a0\n    int64_t v79; // 0x4020a0\n    int64_t v80; // 0x4020a0\n    if (close(fd) != 0) {\n        // 0x4024e8\n        error(0, *__errno_location(), dcgettext(NULL, \"%s: failed to close\", 5));\n        v80 = v51;\n        v78 = 0;\n        v79 = v36;\n    } else {\n        int64_t v81 = v77 & 0xffffffff; // 0x40243c\n        char v82 = v77; // 0x40244c\n        v80 = v51;\n        v78 = v81;\n        v79 = v36;\n        if (v82 != 0) {\n            // 0x402451\n            v80 = v51;\n            v78 = v81;\n            v79 = v36;\n            if (*v10 != 0) {\n                int64_t v83 = function_408470(path); // 0x40258b\n                *v42 = v83;\n                int64_t v84 = function_404440(v83, v51); // 0x40259b\n                int64_t v85 = function_404360(); // 0x4025a6\n                *v43 = v85;\n                *v44 = function_408470(function_406c60(0, 3, v85));\n                *v45 = *v40;\n                if (*v10 == 3) {\n                    // 0x402761\n                    *v45 = (int32_t)function_4044d0(*v43, 0x10900, v85);\n                }\n                // 0x4025df\n                if (*v11 != 0) {\n                    // 0x402708\n                    error(0, (int32_t)\"%s: removing\" ^ (int32_t)\"%s: removing\", dcgettext(NULL, \"%s: removing\", 5));\n                }\n                int64_t v86 = v51; // 0x4025ef\n                int64_t v87 = v81; // 0x4025ef\n                int64_t v88 = v36; // 0x4025ef\n                if (*v10 != 1) {\n                    int64_t v89 = function_4044a0(v84); // 0x4025f8\n                    int64_t v90 = *v42; // 0x4025fd\n                    *v46 = v82;\n                    *v47 = v51;\n                    *v48 = v36;\n                    *v49 = v84 + path - v90;\n                    int64_t v91 = v81; // 0x40262e\n                    if (v89 != 0) {\n                        int64_t * v92 = (int64_t *)v84; // 0x40263c\n                        int64_t v93 = v89; // 0x4020a0\n                        int64_t v94 = v81;\n                        while (true) {\n                            int64_t v95 = v94;\n                            int64_t v96 = v93 - 1;\n                            memset(v92, 48, (int32_t)v93);\n                            *(char *)(v93 + v84) = 0;\n                            int64_t v97; // 0x4020a0\n                            if ((int32_t)function_407a00(0xffffff9c, path, 0xffffff9c, v90, 1) == 0) {\n                              lab_0x40277b:;\n                                uint32_t v98 = *v45; // 0x40277b\n                                int64_t v99 = v95; // 0x402780\n                                if (v98 >= 0) {\n                                    // 0x402782\n                                    v99 = (int32_t)function_402a60(v98, *v44) != 0 ? 0 : v95 & 0xffffffff;\n                                }\n                                // 0x40279b\n                                if (*v11 != 0) {\n                                    // 0x4027a2\n                                    *v50 = *v46 == 0 ? path : *v47;\n                                    error(0, (int32_t)\"%s: renamed to %s\" ^ (int32_t)\"%s: renamed to %s\", dcgettext(NULL, \"%s: renamed to %s\", 5));\n                                    *v46 = 0;\n                                }\n                                // 0x4027e1\n                                memcpy((int64_t *)*v49, v92, (int32_t)v96 + 2);\n                                v97 = v99;\n                            } else {\n                                int64_t v100 = v96 + v84;\n                                char * c = (char *)v100;\n                                int32_t v101 = *__errno_location(); // 0x40266c\n                                v97 = v95;\n                                while (v101 == 17) {\n                                    char * found_char_pos = strchr(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.\", (int32_t)*c); // 0x40269d\n                                    int64_t v102 = v100; // 0x4026a5\n                                    if (found_char_pos == NULL) {\n                                        // 0x4028ac\n                                        __assert_fail(\"p\", \"src/shred.c\", 1034, \"incname\");\n                                        v32 = path;\n                                        goto lab_0x4028c5;\n                                    }\n                                    char * v103 = c;\n                                    char v104 = *(char *)((int64_t)found_char_pos + 1); // 0x4026ab\n                                    while (v104 == 0) {\n                                        int64_t v105 = v102;\n                                        *v103 = 48;\n                                        v97 = v95;\n                                        if (v84 == v105) {\n                                            // break (via goto) -> 0x4027f2\n                                            goto lab_0x4027f2;\n                                        }\n                                        // 0x402694\n                                        v102 = v105 - 1;\n                                        char * c2 = (char *)v102; // 0x402694\n                                        char * found_char_pos2 = strchr(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.\", (int32_t)*c2); // 0x40269d\n                                        if (found_char_pos2 == NULL) {\n                                            // 0x4028ac\n                                            __assert_fail(\"p\", \"src/shred.c\", 1034, \"incname\");\n                                            v32 = path;\n                                            goto lab_0x4028c5;\n                                        }\n                                        v103 = c2;\n                                        v104 = *(char *)((int64_t)found_char_pos2 + 1);\n                                    }\n                                    // 0x4026b3\n                                    *v103 = v104;\n                                    if ((int32_t)function_407a00(0xffffff9c, path, 0xffffff9c, v90, 1) == 0) {\n                                        goto lab_0x40277b;\n                                    }\n                                    v101 = *__errno_location();\n                                    v97 = v95;\n                                }\n                            }\n                          lab_0x4027f2:\n                            // 0x4027f2\n                            v94 = v97;\n                            v93 = v96;\n                            v91 = v94;\n                            if (v96 == 0) {\n                                // break -> 0x4026b8\n                                break;\n                            }\n                        }\n                    }\n                    // 0x4026b8\n                    v88 = *v48;\n                    v86 = *v47;\n                    v87 = v91;\n                }\n                // 0x4026c2\n                int64_t v106; // 0x4020a0\n                if (unlink((char *)path) != 0) {\n                    // 0x40272f\n                    error(0, *__errno_location(), dcgettext(NULL, \"%s: failed to remove\", 5));\n                    v106 = 0;\n                } else {\n                    int64_t v107 = v87;\n                    v106 = v107;\n                    if (*v11 != 0) {\n                        // 0x402855\n                        error(0, (int32_t)\"%s: removed\" ^ (int32_t)\"%s: removed\", dcgettext(NULL, \"%s: removed\", 5));\n                        v106 = v107;\n                    }\n                }\n                int64_t v108 = v106;\n                int32_t fd2 = *v45; // 0x4026d9\n                int64_t v109 = v108; // 0x4026df\n                if (fd2 >= 0) {\n                    // 0x4027fb\n                    v109 = (int32_t)function_402a60(fd2, *v44) != 0 ? 0 : v108 & 0xffffffff;\n                    if (close(fd2) != 0) {\n                        // 0x402821\n                        error(0, *__errno_location(), dcgettext(NULL, \"%s: failed to close\", 5));\n                        v109 = 0;\n                    }\n                }\n                // 0x4026e5\n                free((int64_t *)*v42);\n                free((int64_t *)*v43);\n                free((int64_t *)*v44);\n                v80 = v86;\n                v78 = v109;\n                v79 = v88;\n            }\n        }\n    }\n    goto lab_0x40245c;\n  lab_0x402477:\n    // 0x402477\n    error(0, *err_num, dcgettext(NULL, \"%s: failed to open for writing\", 5));\n    v80 = v51;\n    v78 = 0;\n    v79 = v36;\n    goto lab_0x40245c;\n  lab_0x40245c:\n    // 0x40245c\n    v38 = *v39 & (char)v78;\n    v37 = v80;\n    v34 = v79;\n    goto lab_0x4023b9;\n  lab_0x402120:\n    // 0x402120\n    v14 = v13;\n    goto lab_0x402120_2;\n  lab_0x4028c5:\n    // 0x4028c5\n    error(1, *__errno_location(), \"%s\", (char *)function_406c60(0, 3, v32));\n    // 0x4028f2\n    format = dcgettext(NULL, \"multiple random sources specified\", 5);\n    error(1, (int32_t)\"multiple random sources specified\" ^ (int32_t)\"multiple random sources specified\", format);\n    return &g59;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402920",
            "funcEndAddr": "40294b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402920\n    int64_t v1; // 0x402920\n    __libc_start_main(0x4020a0, (int32_t)a4, (char **)&v1, (void (*)())0x40a1a0, (void (*)())0x40a200, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40294b",
            "funcStartAddr": "40294b",
            "funcEndAddr": "40296a",
            "decompiledFuncCode": "int64_t function_40294b(void) {\n    // 0x40294b\n    return &g35;\n}\n"
        },
        {
            "funcName": "function_40296a",
            "funcStartAddr": "40296a",
            "funcEndAddr": "4029a1",
            "decompiledFuncCode": "int64_t function_40296a(void) {\n    // 0x40296a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4029a1",
            "funcStartAddr": "4029a1",
            "funcEndAddr": "4029f8",
            "decompiledFuncCode": "int64_t function_4029a1(void) {\n    // 0x4029a1\n    if (g39 != 0) {\n        // 0x4029f7\n        int64_t result; // 0x4029a1\n        return result;\n    }\n    int64_t v1 = g40; // 0x4029d4\n    int64_t result2; // 0x4029e6\n    if (g40 >= ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x4029e6\n        result2 = function_40294b();\n        g39 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x4029d6\n        v1++;\n    }\n    // 0x4029ca\n    g40 = v1;\n    // 0x4029e6\n    result2 = function_40294b();\n    g39 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4029f8",
            "funcStartAddr": "4029f8",
            "funcEndAddr": "4029fd",
            "decompiledFuncCode": "int64_t function_4029f8(void) {\n    // 0x4029f8\n    return function_40296a();\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a0c",
            "decompiledFuncCode": "int64_t function_402a00(void) {\n    // 0x402a00\n    return function_406f90(g41);\n}\n"
        },
        {
            "funcName": "function_402a10",
            "funcStartAddr": "402a10",
            "funcEndAddr": "402a5c",
            "decompiledFuncCode": "int64_t function_402a10(int64_t a1, int32_t a2) {\n    // 0x402a10\n    int64_t v1; // 0x402a10\n    int64_t result = function_408a90(a1, 3, v1, v1); // 0x402a21\n    int32_t v2 = result; // 0x402a26\n    if (v2 < 1) {\n        // 0x402a3e\n        return result;\n    }\n    int64_t v3 = result & 0xffffbfff;\n    int64_t v4 = v3 | 0x4000; // 0x402a2e\n    int64_t v5 = (char)a2 != 0 ? v4 : v3; // 0x402a37\n    if ((int32_t)v5 != v2) {\n        // 0x402a48\n        return function_408a90(a1 & 0xffffffff, 4, v5, v4);\n    }\n    // 0x402a3e\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a60",
            "funcStartAddr": "402a60",
            "funcEndAddr": "402b1d",
            "decompiledFuncCode": "int64_t function_402a60(int32_t fd, int64_t a2) {\n    // 0x402a60\n    if (fdatasync(fd) == 0) {\n        // 0x402ae3\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x402a78\n    int32_t err_num2 = *v1; // 0x402a7d\n    int64_t result; // 0x402a60\n    switch (err_num2) {\n        case 22: {\n        }\n        case 21: {\n        }\n        case 9: {\n            // 0x402ac0\n            if (fsync(fd) == 0) {\n                // 0x402ae3\n                return 0;\n            }\n            int32_t err_num = *v1; // 0x402acb\n            if (err_num > 22 == (err_num != 9)) {\n                // 0x402af0\n                error(0, err_num, dcgettext(NULL, \"%s: fsync failed\", 5));\n                *v1 = err_num;\n                result = 0xffffffff;\n            } else {\n                // 0x402adc\n                sync();\n                result = 0;\n            }\n            // break -> 0x402ae3\n            break;\n        }\n        default: {\n            // 0x402a8f\n            error(0, err_num2, dcgettext(NULL, \"%s: fdatasync failed\", 5));\n            *v1 = err_num2;\n            // 0x402ae3\n            return 0xffffffff;\n        }\n    }\n    // 0x402ae3\n    return result;\n}\n"
        },
        {
            "funcName": "function_402b20",
            "funcStartAddr": "402b20",
            "funcEndAddr": "4033c8",
            "decompiledFuncCode": "int64_t function_402b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint32_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    int32_t v1 = getpagesize(); // 0x402b51\n    int64_t v2; // 0x402b20\n    int64_t v3; // 0x402b20\n    if (a5 < 1) {\n        // 0x403000\n        v3 = 0x10000;\n        v2 = 0x10002;\n        goto lab_0x402b8e;\n    } else {\n        uint32_t v4 = a5 % 0x1000;\n        char v5 = a5 / 16; // 0x402b73\n        v3 = 0xf000;\n        v2 = 0xf000;\n        if (v5 == (char)a5 == (char)((0x1000 * v4 | v4) / 256) == v5) {\n            // 0x403000\n            v3 = 0x10000;\n            v2 = 0x10002;\n            goto lab_0x402b8e;\n        } else {\n            goto lab_0x402b8e;\n        }\n    }\n  lab_0x4032d0_2:;\n    int32_t err_num = (int32_t)\"%s: file too large\" ^ (int32_t)\"%s: file too large\"; // 0x4032eb\n    char * format = dcgettext(NULL, \"%s: file too large\", 5); // 0x4032eb\n    goto lab_0x402c18;\n  lab_0x402c21_3:;\n    // 0x402c26\n    int64_t v6; // 0x402b33\n    free((int64_t *)*(int64_t *)(v6 + 48));\n    // 0x402c30\n    return 0xffffffff;\n  lab_0x403287:;\n    // 0x403287\n    int64_t v7; // 0x402b20\n    int64_t v8 = v7;\n    int64_t v9; // 0x402b20\n    int64_t v10 = v9;\n    int64_t * v11; // 0x402b20\n    int64_t v12 = *v11; // 0x403287\n    char v13 = *(char *)v12; // 0x40328c\n    int64_t v14; // 0x402b20\n    int64_t * v15; // 0x402b20\n    int64_t * v16; // 0x402b20\n    if (v13 != 0) {\n        goto lab_0x4032a8;\n    } else {\n        int64_t time_val = time(NULL); // 0x403293\n        *v15 = time_val;\n        int64_t v17 = *v16; // 0x40329d\n        v14 = v8;\n        if (v17 > time_val) {\n            goto lab_0x402d37_3;\n        } else {\n            goto lab_0x4032a8;\n        }\n    }\n  lab_0x403060:;\n    // 0x403060\n    int64_t v18; // 0x402b20\n    int64_t v19 = v18; // 0x40306b\n    int32_t * v20; // 0x402b20\n    if (*v20 >= 0) {\n        goto lab_0x402d73;\n    } else {\n        goto lab_0x403071;\n    }\n  lab_0x402d73:;\n    // 0x402d73\n    int64_t v21; // 0x402b20\n    int64_t v22; // 0x402b20\n    int64_t v23; // 0x402b20\n    int64_t v24; // 0x402b20\n    int64_t v25; // 0x402b20\n    int64_t v26; // bp-2136, 0x402b20\n    int64_t v27; // 0x402bae\n    int32_t fd; // 0x402b20\n    int64_t v28; // 0x402b20\n    char * v29; // 0x402b20\n    while (true) {\n        // 0x402d94\n        uint64_t v30; // 0x402b20\n        int64_t * v31; // 0x402b20\n        int32_t err_num3; // 0x402dc3\n        while (true) {\n            // 0x402d94\n            int64_t v32; // 0x402b20\n            v22 = v32;\n            int32_t v33 = write(fd, (int64_t *)(v22 + v27), (int32_t)(v30 - v22)); // 0x402da1\n            int64_t v34; // 0x402b20\n            if (v33 >= 0 == (v33 != 0)) {\n                // 0x402d88\n                v34 = v22 + (int64_t)v33;\n            } else {\n                char * v35; // 0x402b20\n                if (v21 < 0) {\n                    if (v33 == 0) {\n                        // break (via goto) -> 0x40324f\n                        goto lab_0x40324f_2;\n                    }\n                    int32_t * v36 = __errno_location(); // 0x403021\n                    int32_t err_num2 = *v36; // 0x403026\n                    if (err_num2 == 28) {\n                        // break (via goto) -> 0x40324f\n                        goto lab_0x40324f_2;\n                    }\n                    char v37 = *v35; // 0x403033\n                    if (err_num2 == 22 != (v37 == 0)) {\n                        int64_t v38 = v26; // 0x403200\n                        function_405170(v38 + v22, v28);\n                        error(0, err_num2, dcgettext(NULL, \"%s: error writing at offset %s\", 5));\n                        goto lab_0x402c21_3;\n                    }\n                } else {\n                    int32_t * v39 = __errno_location(); // 0x402db4\n                    char v40 = *v35; // 0x402db9\n                    *v31 = (int64_t)v39;\n                    err_num3 = *v39;\n                    if (v40 == 0 != (err_num3 == 22)) {\n                        // break -> 0x402dd2\n                        break;\n                    }\n                }\n                // 0x403048\n                int64_t v41; // 0x402b28\n                function_402a10(v41, 0);\n                *v35 = 1;\n                v34 = v22;\n            }\n            int64_t v42 = v34;\n            v32 = v42;\n            v25 = v24;\n            v23 = v42;\n            if (v30 <= v42) {\n                // break (via goto) -> 0x402e61\n                goto lab_0x402e61;\n            }\n        }\n        int64_t v43 = v26; // 0x402dd2\n        int64_t v44 = function_405170(v43 + v22, v28); // 0x402de2\n        int64_t * v45; // 0x402b20\n        *v45 = v44;\n        error(0, err_num3, dcgettext(NULL, \"%s: error writing at offset %s\", 5));\n        if (err_num3 != 5) {\n            goto lab_0x402c21_3;\n        }\n        int64_t v46 = v22 | 511; // 0x402e23\n        if (v46 >= v30) {\n            goto lab_0x402c21_3;\n        }\n        int64_t v47 = v26; // 0x402e33\n        int64_t v48 = v46 + 1; // 0x402e37\n        if (lseek(fd, (int32_t)(v47 + v48), SEEK_SET) == -1) {\n            char * format2 = dcgettext(NULL, \"%s: lseek failed\", 5); // 0x40309c\n            int64_t v49 = *v31; // 0x4030ab\n            int32_t err_num4 = *(int32_t *)v49; // 0x4030b0\n            error(0, err_num4, format2);\n            goto lab_0x402c21_3;\n        }\n        // 0x402e53\n        *v29 = 1;\n        v25 = v46;\n        v23 = v48;\n        if (v30 <= v48) {\n            // break -> 0x402e61\n            break;\n        }\n    }\n  lab_0x402e61:;\n    uint64_t v50 = v23;\n    int64_t v51 = v26; // 0x402e64\n    if (0x7fffffffffffffff - v51 < v50) {\n        goto lab_0x4032d0_2;\n    }\n    int64_t v52 = v25;\n    int64_t v53 = v51 + v50; // 0x402e84\n    int64_t * v54; // 0x402b20\n    int64_t v55 = *v54; // 0x402e87\n    v26 = v53;\n    int64_t v56; // 0x402b20\n    int64_t v57; // 0x402b20\n    int64_t v58; // 0x402b20\n    int64_t v59; // 0x402b20\n    if (v55 != 0) {\n        // 0x402e9a\n        v9 = v52;\n        v7 = v21;\n        if (v21 == v53) {\n            goto lab_0x403287;\n        }\n        uint64_t time_val2 = (int64_t)time(NULL); // 0x402ea5\n        *v15 = time_val2;\n        uint64_t v60 = *v16; // 0x402eaf\n        if (v60 <= time_val2) {\n            int64_t v61 = v26; // 0x402eba\n            int64_t str2 = function_4045e0(v61, v59, 434, 1, 1, v52); // 0x402ed6\n            int64_t str = *v11; // 0x402edb\n            int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x402ee6\n            v58 = str2;\n            v56 = v21;\n            v57 = v53;\n            if (strcmp_rc != 0) {\n                goto lab_0x402ef3;\n            }\n        }\n    }\n    // 0x402d37\n    goto lab_0x402d37_2;\n  lab_0x403071:\n    // 0x403071\n    function_407360(*(int64_t *)(v6 + 56), v27, v19);\n    goto lab_0x402d73;\n  lab_0x402d37_3:;\n    int64_t v65 = v14; // 0x402b20\n    goto lab_0x402d37_4;\n  lab_0x4032a8:\n    // 0x4032a8\n    v58 = function_4045e0(v8, v59, 434, 1, 1, v10);\n    v56 = v8;\n    v57 = v8;\n  lab_0x402ef3:;\n    int64_t v71 = v56;\n    int64_t v72 = v58;\n    int64_t v73; // 0x402b20\n    int64_t * v74; // 0x402b20\n    int64_t * v75; // 0x402b20\n    int64_t v76; // 0x402b20\n    if (v71 < 0) {\n        char * format3 = dcgettext(NULL, \"%s: pass %lu/%lu (%s)...%s\", 5); // 0x403342\n        *v74 = v72;\n        *v75 = v76;\n        error(0, (int32_t)\"%s: pass %lu/%lu (%s)...%s\" ^ (int32_t)\"%s: pass %lu/%lu (%s)...%s\", format3);\n        v73 = v72;\n    } else {\n        uint64_t v77 = v57;\n        int64_t v78 = 100; // 0x402f02\n        if (v71 != 0) {\n            if (v77 < 0x28f5c28f5c28f5d) {\n                // 0x402f17\n                v78 = 100 * v77 / v71;\n            } else {\n                // 0x403378\n                v78 = v77 / (v71 >> 63);\n            }\n        }\n        int64_t v79 = v78;\n        int32_t * v80; // 0x402b20\n        *v80 = (int32_t)v79;\n        int64_t v81 = function_4045e0(v71, v28, 432, 1, 1, v79); // 0x402f4b\n        int64_t v82 = v71 == v77 ? v81 : v72; // 0x402f5d\n        char * format4 = dcgettext(NULL, \"%s: pass %lu/%lu (%s)...%s/%s %d%%\", 5); // 0x402f66\n        uint32_t v83 = *v80; // 0x402f6b\n        *v74 = (int64_t)v83;\n        *v75 = v81;\n        int64_t * v84; // 0x402b20\n        *v84 = v82;\n        int64_t * v85; // 0x402b20\n        *v85 = v76;\n        error(0, (int32_t)\"%s: pass %lu/%lu (%s)...%s/%s %d%%\" ^ (int32_t)\"%s: pass %lu/%lu (%s)...%s/%s %d%%\", format4);\n        v73 = v82;\n    }\n    int64_t v86 = v73;\n    char * v87; // 0x402b20\n    __strcpy_chk(v87, (char *)v86, 652);\n    int64_t v88 = *v15; // 0x402fb7\n    int64_t * v89; // 0x402b20\n    int64_t v90 = *v89; // 0x402fbc\n    *v16 = v88 + 5;\n    int64_t v91; // 0x402b20\n    if ((int32_t)function_402a60(fd, v90) == 0) {\n        // 0x4032f0\n        *v11 = v91;\n        v14 = v71;\n    } else {\n        int32_t * v92 = __errno_location(); // 0x402fda\n        int32_t v93 = *v92; // 0x402fdf\n        if (v93 != 5) {\n            goto lab_0x402c21_3;\n        }\n        // 0x402fe8\n        *v29 = 1;\n        *v11 = v91;\n        v14 = v71;\n    }\n    goto lab_0x402d37_3;\n  lab_0x402b8e:;\n    uint64_t v94 = (int64_t)v1; // 0x402b56\n    int64_t v95 = v94 - 1; // 0x402b8e\n    int64_t v96 = function_408240(v2 + v95); // 0x402b96\n    if (a4 >= 0 == (a4 != 0) != v3 > a4) {\n        // 0x403190\n        function_402a10(a1 & 0xffffffff, 1);\n    }\n    // 0x402bcb\n    v6 = &v26;\n    uint64_t v97 = v96 + v95; // 0x402b9d\n    v27 = v97 - v97 % v94;\n    fd = a1;\n    if ((*(int32_t *)(a2 + 24) & 0xf000) == 0x2000) {\n        // 0x4030c0\n        if (ioctl(fd, 0x40086d01) != 0) {\n            goto lab_0x402bde;\n        } else {\n            if (a5 >= 0) {\n                goto lab_0x402c5a;\n            } else {\n                goto lab_0x403108;\n            }\n        }\n    } else {\n        goto lab_0x402bde;\n    }\n  lab_0x402bde:;\n    int32_t v98 = lseek(fd, 0, SEEK_SET); // 0x402be5\n    int32_t * v99; // 0x402b20\n    if (v98 < 1) {\n        if (v98 != 0) {\n            // 0x4033bb\n            v99 = __errno_location();\n            goto lab_0x402bfd;\n        } else {\n            if (a5 < 0) {\n                goto lab_0x403108;\n            } else {\n                goto lab_0x402c5a;\n            }\n        }\n    } else {\n        int32_t * v100 = __errno_location(); // 0x402bef\n        *v100 = 22;\n        v99 = v100;\n        goto lab_0x402bfd;\n    }\n  lab_0x402c5a:;\n    uint64_t v101 = (int64_t)a5;\n    int16_t v102 = llvm_bswap_i16((int16_t)(0x1000 * v101 | v101 % 0x1000)); // 0x402c6e\n    int64_t v103 = v27 + 1; // 0x402c75\n    *(int16_t *)v103 = v102;\n    char * v104 = (char *)v27; // 0x402c79\n    *v104 = (char)(a5 / 16);\n    int64_t v105; // 0x402b20\n    int64_t v106; // 0x402b20\n    int64_t v107; // 0x402b20\n    int64_t v108; // 0x402b20\n    if (a4 < 0 || v2 <= a4) {\n        // 0x4031d0\n        v108 = v2;\n        v105 = v2;\n        goto lab_0x402c9d;\n    } else {\n        // 0x402c8d\n        v108 = a4;\n        v105 = a4;\n        v106 = a4;\n        v107 = 3;\n        if (a4 < 4 || (a4 & -2) == 4) {\n            goto lab_0x402cbf;\n        } else {\n            goto lab_0x402c9d;\n        }\n    }\n  lab_0x403108:;\n    int64_t v109 = 0x646e6172; // bp-2031, 0x40310e\n    if (a8 == 0) {\n        goto lab_0x402d18;\n    } else {\n        goto lab_0x403130;\n    }\n  lab_0x402bfd:;\n    char * v110 = dcgettext(NULL, \"%s: cannot rewind\", 5); // 0x402c09\n    err_num = *v99;\n    format = v110;\n    goto lab_0x402c18;\n  lab_0x402d18:\n    // 0x402d18\n    v26 = 0;\n    int64_t * v62 = (int64_t *)(v6 + 32);\n    v20 = (int32_t *)(v6 + 28);\n    v65 = a4;\n    while (true) {\n      lab_0x402d37_4:\n        // 0x402d37\n        v21 = v65;\n        while (true) {\n          lab_0x402d37_2:\n            // 0x402d37\n            if (v21 < 0) {\n                // 0x402d37\n                v18 = *v62;\n                goto lab_0x403060;\n            } else {\n                int64_t v63 = v21 - v26; // 0x402d47\n                uint64_t v64 = *v62; // 0x402d4a\n                v18 = v64;\n                if (v63 >= v64) {\n                    goto lab_0x403060;\n                } else {\n                    if (v21 < v26 || v63 == 0) {\n                        // break (via goto) -> 0x4032ff\n                        goto lab_0x4032ff;\n                    }\n                    // 0x402d67\n                    v19 = v63;\n                    if (*v20 < 0) {\n                        goto lab_0x403071;\n                    } else {\n                        goto lab_0x402d73;\n                    }\n                }\n            }\n        }\n      lab_0x40324f_2:;\n        int64_t v66 = v26; // 0x403259\n        if (0x7fffffffffffffff - v66 < v22) {\n            goto lab_0x4032d0_2;\n        }\n        // 0x403265\n        int64_t * v67; // 0x402b20\n        int64_t v68 = *v67; // 0x403265\n        int64_t v69 = v66 + v22; // 0x40326a\n        int64_t v70 = *v54; // 0x40326e\n        v26 = v69;\n        *(int64_t *)v68 = v69;\n        v9 = v24;\n        v7 = v69;\n        v14 = v69;\n        if (v70 == 0) {\n            goto lab_0x402d37_3;\n        } else {\n            goto lab_0x403287;\n        }\n    }\n  lab_0x4032ff:\n    // 0x4032ff\n    if ((int32_t)function_402a60(fd, *(int64_t *)(v6 + 16)) == 0) {\n        // 0x4033a7\n        free((int64_t *)*(int64_t *)(v6 + 48));\n        // 0x402c30\n        return (int64_t)*(char *)(v6 + 8);\n    }\n    int32_t * v111 = __errno_location(); // 0x403314\n    int64_t v112 = *(int64_t *)(v6 + 48); // 0x403319\n    if (*v111 == 5) {\n        // 0x403327\n        free((int64_t *)v112);\n        // 0x402c30\n        return 1;\n    }\n    // 0x402c26\n    free((int64_t *)v112);\n    // 0x402c30\n    return 0xffffffff;\n  lab_0x403130:\n    // 0x403130\n    error(0, (int32_t)\"%s: pass %lu/%lu (%s)...\" ^ (int32_t)\"%s: pass %lu/%lu (%s)...\", dcgettext(NULL, \"%s: pass %lu/%lu (%s)...\", 5));\n    time(NULL);\n    goto lab_0x402d18;\n  lab_0x402c18:\n    // 0x402c18\n    error(0, err_num, format);\n    goto lab_0x402c21_3;\n  lab_0x402c9d:;\n    int64_t v113 = 3;\n    int64_t v114 = 2 * v113; // 0x402cb2\n    memcpy((int64_t *)(v113 + v27), (int64_t *)v27, (int32_t)v113);\n    v106 = v105;\n    v107 = v114;\n    while (v114 <= v108 / 2) {\n        // 0x402ca8\n        v113 = v114;\n        v114 = 2 * v113;\n        memcpy((int64_t *)(v113 + v27), (int64_t *)v27, (int32_t)v113);\n        v106 = v105;\n        v107 = v114;\n    }\n    goto lab_0x402cbf;\n  lab_0x402cbf:;\n    uint64_t v115 = v107;\n    int32_t v116 = a5 & 0x1000; // 0x402cc3\n    if (v106 > v115) {\n        // 0x4031e0\n        memcpy((int64_t *)(v115 + v27), (int64_t *)v27, (int32_t)(v106 - v115));\n        if (v116 != 0) {\n            goto lab_0x4031b1;\n        } else {\n            goto lab_0x402cda;\n        }\n    } else {\n        if (v116 == 0 || v106 == 0) {\n            goto lab_0x402cda;\n        } else {\n            goto lab_0x4031b1;\n        }\n    }\n  lab_0x4031b1:;\n    int64_t v117 = 0; // 0x4031b3\n    char * v118 = (char *)(v117 + v27); // 0x4031b8\n    *v118 = *v118 ^ -128;\n    int64_t v119 = v117 + 512; // 0x4031bc\n    v117 = v119;\n    while (v119 < v106) {\n        // 0x4031b8\n        v118 = (char *)(v117 + v27);\n        *v118 = *v118 ^ -128;\n        v119 = v117 + 512;\n        v117 = v119;\n    }\n    goto lab_0x402cda;\n  lab_0x402cda:;\n    unsigned char v120 = *(char *)(v27 + 2); // 0x402cda\n    unsigned char v121 = *(char *)v103; // 0x402cf2\n    unsigned char v122 = *v104; // 0x402cf9\n    __sprintf_chk((char *)&v109, 1, 7, \"%02x%02x%02x\", (int32_t)v122, (int32_t)v121, (int32_t)v120);\n    if (a8 != 0) {\n        goto lab_0x403130;\n    } else {\n        goto lab_0x402d18;\n    }\n}\n"
        },
        {
            "funcName": "function_4033d0",
            "funcStartAddr": "4033d0",
            "funcEndAddr": "403ab5",
            "decompiledFuncCode": "int64_t function_4033d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4033d0\n    int64_t v1; // 0x4033d0\n    int64_t v2 = v1;\n    int64_t v3; // bp-296, 0x4033d0\n    int64_t v4 = &v3; // 0x4033df\n    int32_t fd = a1; // 0x403418\n    int64_t v5; // bp-200, 0x4033d0\n    if (__fxstat(1, fd, (struct stat *)&v5) != 0) {\n        // 0x4035a0\n        error(0, *__errno_location(), dcgettext(NULL, \"%s: fstat failed\", 5));\n        // 0x403589\n        return (int64_t)*(char *)(v4 + 67);\n    }\n    // 0x403425\n    int32_t v6; // 0x4033d0\n    int32_t v7 = v6 & 0xf000; // 0x403429\n    char * format; // 0x40356c\n    if (v7 == 0x2000) {\n        // 0x403910\n        if (isatty(fd) != 0) {\n            // 0x403560\n            format = dcgettext(NULL, \"%s: invalid file type\", 5);\n            error(0, (int32_t)\"%s: invalid file type\" ^ (int32_t)\"%s: invalid file type\", format);\n            // 0x403589\n            return (int64_t)*(char *)(v4 + 67);\n        }\n    }\n    if (v7 == 0xc000 || v7 == 0x1000) {\n        // 0x403560\n        format = dcgettext(NULL, \"%s: invalid file type\", 5);\n        error(0, (int32_t)\"%s: invalid file type\" ^ (int32_t)\"%s: invalid file type\", format);\n        // 0x403589\n        return (int64_t)*(char *)(v4 + 67);\n    }\n    int128_t v8; // 0x4033d0\n    if (v7 == 0x8000) {\n        if ((int64_t)v8 < 0) {\n            // 0x40393f\n            error(0, (int32_t)\"%s: file has negative size\" ^ (int32_t)\"%s: file has negative size\", dcgettext(NULL, \"%s: file has negative size\", 5));\n            // 0x403589\n            return (int64_t)*(char *)(v4 + 67);\n        }\n    }\n    int64_t * v9 = (int64_t *)(a4 + 8); // 0x403460\n    uint64_t v10 = *v9; // 0x403460\n    int64_t v11 = 4 * v10; // 0x40346e\n    if (v11 < 0) {\n        // 0x403ab0\n        function_408490(v11);\n        // UNREACHABLE\n    }\n    if (v10 >= 0x4000000000000000) {\n        // 0x403ab0\n        function_408490(v11);\n        // UNREACHABLE\n    }\n    int64_t v12 = a1 & 0xffffffff; // 0x4033d9\n    int64_t v13 = function_408240(v11); // 0x403484\n    int64_t v14 = *(int64_t *)(a4 + 16); // 0x40348c\n    int64_t * v15; // 0x4033d0\n    int64_t v16; // 0x4033d0\n    int64_t v17; // 0x4033d0\n    int64_t v18; // 0x4033d0\n    int64_t v19; // 0x4033d0\n    int64_t v20; // 0x4033d0\n    int64_t v21; // 0x4033d0\n    int64_t v22; // 0x4033d0\n    int64_t v23; // 0x4033d0\n    int64_t v24; // 0x4033d0\n    int64_t v25; // 0x4033d0\n    if (v14 == -1) {\n        if (v7 != 0x8000) {\n            // 0x4039a2\n            lseek(fd, 0, SEEK_END);\n            if (*v9 != 0) {\n                goto lab_0x4034d1;\n            } else {\n                int64_t v26 = function_406e60(a3); // 0x4039da\n                int64_t * v27 = (int64_t *)(v4 + 32); // 0x403795\n                v16 = *v27;\n                v15 = v27;\n                v23 = 0;\n                v22 = v12;\n                v18 = v13;\n                v20 = v26;\n                goto lab_0x403795;\n            }\n        } else {\n            int64_t v28 = *v9; // 0x403651\n            if (*(char *)(a4 + 29) != 0) {\n                // 0x4039ee\n                if (v28 != 0) {\n                    goto lab_0x4034d1;\n                } else {\n                    // 0x403a03\n                    v21 = v12;\n                    v17 = v13;\n                    v19 = function_406e60(a3);\n                    goto lab_0x403785;\n                }\n            } else {\n                int64_t v29 = v8; // 0x403645\n                int64_t v30 = v2 < 0x2000000000000001 ? v2 : 512; // 0x40368b\n                v25 = v28;\n                v24 = v29 == 0 | v30 <= v29 ? 0 : v29;\n                goto lab_0x4036d7;\n            }\n        }\n    } else {\n        int64_t v31 = *v9; // 0x40349f\n        if (v7 == 0x8000) {\n            int64_t v32 = v8; // 0x4035db\n            int64_t v33 = v2 < 0x2000000000000001 ? v2 : 512; // 0x403603\n            int64_t v34 = v33 - v14; // 0x403607\n            v25 = v31;\n            v24 = v32;\n            if ((v34 < 0 == ((v34 ^ v33) & (v14 ^ v33)) < 0 == (v34 != 0) ? v14 : v33) > v32) {\n                goto lab_0x4036d7;\n            } else {\n                // 0x403617\n                if (v31 == 0) {\n                    goto lab_0x40398b;\n                } else {\n                    goto lab_0x4034d1;\n                }\n            }\n        } else {\n            // 0x4034bc\n            if (v31 == 0) {\n                goto lab_0x40398b;\n            } else {\n                goto lab_0x4034d1;\n            }\n        }\n    }\n  lab_0x4036e8:;\n    int64_t v35 = function_406e60(a3); // 0x4036ed\n    int64_t v36; // 0x4033d0\n    v21 = v36;\n    v17 = v13;\n    v19 = v35;\n    int64_t v37; // 0x4033d0\n    int64_t v38; // 0x4033d0\n    int64_t v39; // 0x4033d0\n    int64_t v40; // 0x4033d0\n    int64_t v41; // 0x4033d0\n    if (v41 == 0) {\n        goto lab_0x403785;\n    } else {\n        // 0x403703\n        v40 = *v9;\n        v39 = v36;\n        v37 = v13;\n        v38 = v35;\n        goto lab_0x403714;\n    }\n  lab_0x40350b:;\n    // 0x40350b\n    int64_t v42; // 0x4033d0\n    int64_t v43 = v42;\n    int64_t v44 = -((0x100000000 * v43)) >> 32; // 0x40350d\n    uint64_t v45; // 0x4033d0\n    if (v45 <= v44) {\n        // break -> 0x403972\n        goto lab_0x403972;\n    }\n    // 0x403518\n    int64_t v46; // 0x4033d0\n    int64_t v47 = v46;\n    int64_t v48 = v44; // 0x40351b\n    int64_t v49; // 0x4033d0\n    int64_t v50 = v49; // 0x40351b\n    int64_t v51 = v47; // 0x40351b\n    int64_t v52; // 0x4033d0\n    int64_t v53 = v44 + v52; // 0x40351b\n    goto lab_0x40351e;\n  lab_0x40351e:;\n    int64_t v54 = v53;\n    int64_t v55 = v51;\n    int64_t v56 = v50;\n    int64_t v57 = v48;\n    uint32_t v58 = *(int32_t *)v55; // 0x40351e\n    int64_t v59 = v58; // 0x40351e\n    int64_t v60 = v45 - v57; // 0x40351e\n    int64_t v61 = v56; // 0x40351e\n    int64_t v62 = v55; // 0x40351e\n    int64_t v63 = v54; // 0x40351e\n    goto lab_0x403522;\n  lab_0x4034d1:;\n    // 0x4034d1\n    int64_t v70; // 0x4033d0\n    int64_t v71; // 0x4033d0\n    int64_t v72; // 0x4033d0\n    int64_t v74; // 0x4033d0\n    int64_t v69; // 0x4033d0\n    int64_t v73; // 0x4033d0\n    int64_t v75; // 0x4034ee\n    while (true) {\n      lab_0x403522:\n        // 0x403522\n        v52 = v63;\n        v49 = v61;\n        v45 = v60;\n        int64_t v64 = v59;\n        v42 = 0xfffffffe;\n        v46 = (int64_t)&g3;\n        if (v64 == 0) {\n            goto lab_0x40350b;\n        } else {\n            int64_t v65 = v62;\n            int64_t v66 = v65 + 4; // 0x403526\n            v42 = v64;\n            v46 = v66;\n            if ((int32_t)v64 < 0) {\n                goto lab_0x40350b;\n            } else {\n                int64_t v67 = 0x100000000 * v64;\n                int64_t v68 = v67 >> 32; // 0x40352e\n                if (v45 < v68) {\n                    // 0x4037d0\n                    v69 = v49;\n                    v70 = v45;\n                    v71 = v66;\n                    v72 = v68;\n                    if (v45 < 2 || v68 > 3 * v45) {\n                        // 0x403968\n                        v73 = v52 + v45;\n                        v74 = v75;\n                        goto lab_0x403858;\n                    } else {\n                        goto lab_0x40381a;\n                    }\n                }\n                int64_t v76 = v67 >> 30; // 0x40353a\n                v48 = v68;\n                v50 = v76 + (int64_t)memcpy((int64_t *)v49, (int64_t *)v66, (int32_t)v76);\n                v51 = v66 + v76;\n                v53 = v52;\n                goto lab_0x40351e;\n            }\n        }\n    }\n  lab_0x403972:\n    // 0x403972\n    v73 = v52 + v45;\n    v74 = v75;\n    goto lab_0x403858;\n  lab_0x4036d7:\n    // 0x4036d7\n    v41 = v24;\n    v36 = v12;\n    if (v25 != 0) {\n        goto lab_0x4034d1;\n    } else {\n        goto lab_0x4036e8;\n    }\n  lab_0x40398b:\n    // 0x40398b\n    v21 = v12;\n    v17 = v13;\n    v19 = function_406e60(a3);\n    goto lab_0x403785;\n  lab_0x403858:;\n    int64_t v77 = 0x100000000000000 * v73 >> 56; // 0x40385d\n    int64_t v78 = v74 & 0xffffffff;\n    int64_t v79 = v77 - 1; // 0x403871\n    int64_t v80; // 0x4033d0\n    int64_t v81 = v80 - v77;\n    uint64_t v82 = v79;\n    int64_t v83 = 0;\n    int32_t * v84 = (int32_t *)(4 * v83 + v13);\n    int32_t v85 = *v84; // 0x4038b1\n    int64_t v86; // 0x4033d0\n    int32_t * v87; // 0x4038ec\n    int64_t v88; // 0x4038f3\n    while (v82 > v79) {\n        // 0x4038bb\n        v87 = (int32_t *)(4 * (function_406e70(a3, v81 + -1 - v83) + v83) + v13);\n        *v84 = *v87;\n        v88 = v83 + 1;\n        *v87 = 0x1000000 * v85 >> 24;\n        v41 = v86;\n        v36 = v78;\n        if (v88 == v80) {\n            // break (via goto) -> 0x4036e8\n            goto lab_0x4036e8;\n        }\n        v82 -= v79;\n        v83 = v88;\n        v84 = (int32_t *)(4 * v83 + v13);\n        v85 = *v84;\n    }\n    // 0x403890\n    *(int32_t *)(4 * v81 + v13) = v85;\n    *v84 = -1;\n    int64_t v89 = v83 + 1; // 0x4038a5\n    v41 = v86;\n    v36 = v78;\n    int64_t v90 = v81 + 1; // 0x4038af\n    while (v89 != v80) {\n        int64_t v91 = v90;\n        v82 += v81;\n        v83 = v89;\n        v84 = (int32_t *)(4 * v83 + v13);\n        v85 = *v84;\n        while (v82 > v79) {\n            // 0x4038bb\n            v87 = (int32_t *)(4 * (function_406e70(a3, v91 + -1 - v83) + v83) + v13);\n            *v84 = *v87;\n            v88 = v83 + 1;\n            *v87 = 0x1000000 * v85 >> 24;\n            v41 = v86;\n            v36 = v78;\n            if (v88 == v80) {\n                // break (via goto) -> 0x4036e8\n                goto lab_0x4036e8;\n            }\n            v82 -= v79;\n            v83 = v88;\n            v84 = (int32_t *)(4 * v83 + v13);\n            v85 = *v84;\n        }\n        // 0x403890\n        *(int32_t *)(4 * v91 + v13) = v85;\n        *v84 = -1;\n        v89 = v83 + 1;\n        v41 = v86;\n        v36 = v78;\n        v90 = v91 + 1;\n    }\n    goto lab_0x4036e8;\n  lab_0x403795:\n    // 0x403795\n    *v15 = 0;\n    *(int64_t *)(v4 + 88) = v16;\n    v40 = v23;\n    v39 = v22;\n    v37 = v18;\n    v38 = v20;\n    goto lab_0x403714;\n  lab_0x403785:;\n    int64_t v118 = v17;\n    int64_t fd2 = v21;\n    int64_t * v119 = (int64_t *)(v4 + 32);\n    int64_t v120 = *v119; // 0x403785\n    if (v120 == 0) {\n        // 0x403a32\n        if (*(int32_t *)(a4 + 24) != 0) {\n            // 0x403a47\n            if (ftruncate((int32_t)fd2, 0) != 0) {\n                // 0x403a54\n                if ((*(int32_t *)(v4 + 120) & 0xf000) == 0x8000) {\n                    // 0x403a64\n                    error(0, *__errno_location(), dcgettext(NULL, \"%s: error truncating\", 5));\n                    // 0x4037bd\n                    free((int64_t *)v118);\n                    // 0x403589\n                    return (int64_t)*(char *)(v4 + 67);\n                }\n            }\n        }\n        // 0x403a39\n        *(char *)(v4 + 67) = *(char *)(v4 + 16);\n      lab_0x4037bd:\n        // 0x4037bd\n        free((int64_t *)v118);\n        // 0x403589\n        return (int64_t)*(char *)(v4 + 67);\n    }\n    // 0x403791\n    v16 = v120;\n    v15 = v119;\n    v23 = *v9;\n    v22 = fd2;\n    v18 = v118;\n    v20 = v19;\n    goto lab_0x403795;\n  lab_0x403714:\n    // 0x403714\n    *(int64_t *)(v4 + 8) = v37;\n    if (v40 != -(int64_t)*(char *)(a4 + 30)) {\n        int64_t * v92 = (int64_t *)(v4 - 8); // 0x403745\n        int64_t * v93 = (int64_t *)(v4 - 16); // 0x40374d\n        int64_t v94; // 0x4033d0\n        int64_t v95 = v94 & 0xffffffff; // 0x40374e\n        int64_t v96 = v4 + 88; // 0x403750\n        int64_t v97 = v4 + 96; // 0x403755\n        char * v98 = (char *)(v4 + 16);\n        int64_t v99 = 0; // 0x4033d0\n        int64_t v100; // 0x4033d0\n        int64_t v101 = v100; // 0x4033d0\n        uint64_t v102 = v101;\n        uint64_t v103 = v99;\n        int32_t v104 = 0; // 0x403736\n        int64_t * v105; // 0x403717\n        int64_t v106; // 0x403738\n        int32_t v107; // 0x40373d\n        if (v103 < v102) {\n            // 0x403738\n            v106 = *v105;\n            v107 = *(int32_t *)(v106 + 4 * v103);\n            v104 = v107;\n        }\n        int32_t v108 = v104;\n        int64_t v109 = v103 + 1; // 0x403741\n        int64_t v110; // 0x4033d0\n        *v92 = v110;\n        *v93 = v109;\n        int64_t v111; // 0x4033d0\n        int64_t v112; // 0x403722\n        int64_t v113 = function_402b20(v95, v97, v112, v96, v108, v111, (int64_t)&g59, (int64_t)&g59); // 0x40375a\n        int32_t v114 = v113; // 0x403761\n        if (v114 != 0) {\n            if (v114 < 0) {\n                // 0x4037b8\n                goto lab_0x4037bd;\n            }\n            // 0x403767\n            *v98 = 0;\n        }\n        int64_t v115 = *v9; // 0x40376c\n        char * v116; // 0x403770\n        unsigned char v117 = *v116; // 0x403770\n        v99 = v109;\n        v101 = v115;\n        while (v115 + (int64_t)v117 > v109) {\n            // 0x403730\n            v102 = v101;\n            v103 = v99;\n            v104 = 0;\n            if (v103 < v102) {\n                // 0x403738\n                v106 = *v105;\n                v107 = *(int32_t *)(v106 + 4 * v103);\n                v104 = v107;\n            }\n            // 0x403741\n            v108 = v104;\n            v109 = v103 + 1;\n            *v92 = v110;\n            *v93 = v109;\n            v113 = function_402b20(v95, v97, v112, v96, v108, v111, (int64_t)&g59, (int64_t)&g59);\n            v114 = v113;\n            if (v114 != 0) {\n                if (v114 < 0) {\n                    // 0x4037b8\n                    goto lab_0x4037bd;\n                }\n                // 0x403767\n                *v98 = 0;\n            }\n            // 0x40376c\n            v115 = *v9;\n            v117 = *v116;\n            v99 = v109;\n            v101 = v115;\n        }\n    }\n    // 0x40377d\n    v21 = v39;\n    v17 = v37;\n    v19 = v38;\n    goto lab_0x403785;\n  lab_0x40381a:;\n    int64_t v121 = v72;\n    int64_t v122 = v71;\n    int64_t v123 = v70;\n    int64_t v124 = v69;\n    int64_t v125; // 0x4033d0\n    int64_t v126; // 0x4033d0\n    int64_t v127; // 0x4033d0\n    if (v123 == v121) {\n        goto lab_0x403839;\n    } else {\n        int64_t v128 = v121 - 1; // 0x403823\n        uint64_t v129 = function_406e70(a3, v128); // 0x40382f\n        v127 = v124;\n        v126 = v128;\n        v125 = v123;\n        if (v123 > v129) {\n            goto lab_0x403839;\n        } else {\n            goto lab_0x403817;\n        }\n    }\n  lab_0x403839:;\n    int32_t v130 = *(int32_t *)v122; // 0x403839\n    *(int32_t *)v124 = v130;\n    int64_t v131 = v123 - 1; // 0x403843\n    v73 = v52;\n    v74 = a1;\n    if (v131 != 0) {\n        // 0x403810\n        v127 = v124 + 4;\n        v126 = v121 - 1;\n        v125 = v131;\n        goto lab_0x403817;\n    } else {\n        goto lab_0x403858;\n    }\n  lab_0x403817:;\n    int64_t v132 = v125;\n    int64_t v133 = v126;\n    int64_t v134 = v127;\n    v69 = v134;\n    v70 = v132;\n    v71 = v122 + 4;\n    v72 = v133;\n    goto lab_0x40381a;\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403f0d",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1) {\n    int32_t status = a1; // 0x403ad6\n    if (status != 0) {\n        // 0x403ada\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x403aff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403b06\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Overwrite the specified FILE(s) repeatedly, in order to make it harder\\nfor even very expensive hardware probing to recover the data.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf FILE is -, shred standard output.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"  -f, --force    change permissions to allow writing if necessary\\n  -n, --iterations=N  overwrite N times instead of the default (%d)\\n      --random-source=FILE  get random bytes from FILE\\n  -s, --size=N   shred this many bytes (suffixes like K, M, G accepted)\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"  -u             deallocate and remove file after overwriting\\n      --remove[=HOW]  like -u but give control on HOW to delete;  See below\\n  -v, --verbose  show progress\\n  -x, --exact    do not round file sizes up to the next full block;\\n                   this is the default for non-regular files\\n  -z, --zero     add a final overwrite with zeros to hide shredding\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nDelete FILE(s) if --remove (-u) is specified.  The default is not to remove\\nthe files because it is common to operate on device files like /dev/hda,\\nand those files usually should not be removed.\\nThe optional HOW parameter indicates how to remove a directory entry:\\n'unlink' => use a standard unlink call.\\n'wipe' => also first obfuscate bytes in the name.\\n'wipesync' => also sync each obfuscated byte to disk.\\nThe default mode is 'wipesync', but note it can be expensive.\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"CAUTION: Note that shred relies on a very important assumption:\\nthat the file system overwrites data in place.  This is the traditional\\nway to do things, but many modern file system designs do not satisfy this\\nassumption.  The following are examples of file systems on which shred is\\nnot effective, or is not guaranteed to be effective in all file system modes:\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"* log-structured or journaled file systems, such as those supplied with\\nAIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)\\n\\n* file systems that write redundant data and carry on even if some writes\\nfail, such as RAID-based file systems\\n\\n* file systems that make snapshots, such as Network Appliance's NFS server\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"* file systems that cache in temporary locations, such as NFS\\nversion 3 clients\\n\\n* compressed file systems\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"In the case of ext3 file systems, the above disclaimer applies\\n(and shred is thus of limited effectiveness) only in data=journal mode,\\nwhich journals file data in addition to just metadata.  In both the\\ndata=ordered (default) and data=writeback modes, shred works as usual.\\nExt3 journaling modes can be changed by adding the data=something option\\nto the mount options for a particular file system in the /etc/fstab file,\\nas documented in the mount man page (man mount).\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"In addition, file system backups and remote mirrors may contain copies\\nof the file that cannot be removed, and that will allow a shredded file\\nto be recovered later.\\n\", 5), g36);\n    int64_t v1 = &g2; // bp-136, 0x403ced\n    bool v2; // 0x403ac0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403d70\n    int64_t v6 = *(int64_t *)v5; // 0x403d74\n    int64_t v7 = 6; // 0x403d7a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"shred\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403d86\n        char v11 = *(char *)v9; // 0x403d86\n        char v12 = v11; // 0x403d86\n        bool v13 = false; // 0x403d86\n        while (v10 == v11) {\n            // 0x403d7c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403d86\n            int64_t v15 = v8 + v3; // 0x403d86\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403d92\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x403d92\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403ea4;\n        } else {\n            // 0x403e8e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403ee3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403df4;\n            } else {\n                goto lab_0x403ea4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403df4;\n        } else {\n            // 0x403dda\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403ee3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403df4;\n            } else {\n                goto lab_0x403df4;\n            }\n        }\n    }\n  lab_0x403ea4:\n    // 0x403ea4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403e34\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403aff\n    exit(status);\n    // UNREACHABLE\n  lab_0x403df4:\n    // 0x403df4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403e34\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403aff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "403f1a",
            "decompiledFuncCode": "int64_t function_403f10(void) {\n    // 0x403f10\n    return function_403ac0(1);\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "404036",
            "decompiledFuncCode": "int64_t function_403f20(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x403f41\n    int32_t len = strlen(str); // 0x403f41\n    if (a2 == 0) {\n        // 0x40400d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x403fa7\n    int64_t v4 = a3; // 0x403f20\n    int64_t v5 = a2; // 0x403fae\n    int64_t str4; // 0x403f20\n    int64_t v6; // 0x403f20\n    int32_t v7; // 0x403f20\n    int32_t v8; // 0x403f20\n    int32_t v9; // 0x403f20\n    int64_t v10; // 0x403f20\n    int64_t result; // 0x403f20\n    int32_t v11; // 0x403fa3\n    char * str2; // 0x403fc2\n    while (true) {\n        // 0x403fb7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x403fcb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40400d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x403fdf\n                break;\n            }\n            // 0x403f70\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x403f7e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x403fa7\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x403fe3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x403fea\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x403fb7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x403fb7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x403fcb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40400d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x403fdf\n                    break;\n                }\n                // 0x403f70\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x403f7e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x403fa7\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x403fdf\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x403ff8:\n    // 0x40400d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "4040b1",
            "decompiledFuncCode": "int64_t function_404040(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x404040\n    if (a3 == -1) {\n        // 0x4040a0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x404055\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x404064\n    function_406dc0(1, a1);\n    function_406ab0(0, 8, a2);\n    error(0, 0, format);\n    return &g59;\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4041d8",
            "decompiledFuncCode": "int64_t function_4040c0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x4040ed\n    fputs_unlocked(v1, g38);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x404160\n        int64_t v5; // 0x404167\n        int64_t v6; // 0x404187\n        while (v3 != 0) {\n            // 0x40414b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x404110\n                break;\n            }\n            // 0x40415d\n            v4 = v3 + 1;\n            v5 = function_406de0(v2);\n            __fprintf_chk(g38, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x404190\n                goto lab_0x404190;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x404113\n        int64_t v8 = function_406de0(v2); // 0x40411d\n        __fprintf_chk(g38, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40413d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40414b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x404110\n                    break;\n                }\n                // 0x40415d\n                v4 = v3 + 1;\n                v5 = function_406de0(v2);\n                __fprintf_chk(g38, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x404190\n                    goto lab_0x404190;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x404110\n            v7 = v3 + 1;\n            v8 = function_406de0(v2);\n            __fprintf_chk(g38, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x404190:;\n    int64_t v10 = (int64_t)g38; // 0x404190\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x404197\n    uint64_t result = *v11; // 0x404197\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x4041c0\n        return __overflow(g38, 10);\n    }\n    // 0x4041a1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "404250",
            "decompiledFuncCode": "int64_t function_4041e0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_403f20(a2, v2, v1, a5); // 0x40420c\n    int64_t result = v3; // 0x404214\n    if (v3 < 0) {\n        // 0x404228\n        function_404040((int64_t)a1, a2, v3);\n        function_4040c0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x404216\n    return result;\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40429d",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x404250\n    if (result == 0) {\n        // 0x404291\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x404288\n    int32_t n = a4; // 0x404288\n    int64_t v1 = result; // 0x40428f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x404291\n        return result;\n    }\n    int64_t str3 = str2; // 0x40428f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x404270\n    int64_t result2 = 0; // 0x40427d\n    while (v2 != 0) {\n        // 0x40427f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x404291\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x404291\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4042a0",
            "funcStartAddr": "4042a0",
            "funcEndAddr": "4042a8",
            "decompiledFuncCode": "int64_t function_4042a0(int64_t a1) {\n    // 0x4042a0\n    g43 = a1;\n    int64_t result; // 0x4042a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042b0",
            "funcStartAddr": "4042b0",
            "funcEndAddr": "4042b8",
            "decompiledFuncCode": "int64_t function_4042b0(int64_t a1) {\n    // 0x4042b0\n    g42 = a1;\n    int64_t result; // 0x4042b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "40435e",
            "decompiledFuncCode": "int64_t function_4042c0(void) {\n    // 0x4042c0\n    int32_t * err_num; // 0x4042d6\n    if ((int32_t)function_409ac0((int64_t)g36) == 0) {\n        goto lab_0x4042ec;\n    } else {\n        // 0x4042d6\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x404303;\n        } else {\n            // 0x4042e7\n            if (*err_num != 32) {\n                goto lab_0x404303;\n            } else {\n                goto lab_0x4042ec;\n            }\n        }\n    }\n  lab_0x4042ec:;\n    int64_t result = function_409ac0((int64_t)g38); // 0x4042f3\n    if ((int32_t)result == 0) {\n        // 0x4042fc\n        return result;\n    }\n    // 0x40433e\n    _exit(g26);\n    // UNREACHABLE\n  lab_0x404303:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40430f\n    if (g43 == 0) {\n        // 0x404349\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x404323\n        error(0, *err_num, \"%s: %s\", (char *)function_406c30((int64_t)g43), v1);\n    }\n    // 0x40433e\n    _exit(g26);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "404378",
            "decompiledFuncCode": "int64_t function_404360(void) {\n    // 0x404360\n    int64_t v1; // 0x404360\n    int64_t result = function_4043e0(v1); // 0x404364\n    if (result != 0) {\n        // 0x40436e\n        return result;\n    }\n    // 0x404373\n    function_408490(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "4043dd",
            "decompiledFuncCode": "int64_t function_404380(int64_t a1) {\n    // 0x404380\n    int64_t v1; // 0x404380\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40438e\n    int64_t v3 = function_404440(a1, v1); // 0x404392\n    int64_t result = v3 - a1; // 0x40439a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x4043c3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x4043b0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x4043c3\n            break;\n        }\n        result2--;\n    }\n    // 0x4043c3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "40443a",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1) {\n    // 0x4043e0\n    int64_t v1; // 0x4043e0\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x4043ff\n    if (mem == NULL) {\n        // 0x404426\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x404415\n    int64_t v3; // 0x4043e0\n    if (v2 == 0) {\n        // 0x404430\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x404415\n    *(char *)(v3 + result) = 0;\n    // 0x404426\n    return result;\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "40449b",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, int64_t a2) {\n    // 0x404440\n    int64_t v1; // 0x404440\n    char v2 = v1;\n    int64_t v3 = a1; // 0x404449\n    int64_t v4 = a1; // 0x404449\n    char v5 = v2; // 0x404449\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x404454\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x404450\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40445e\n    if (v5 == 0) {\n      lab_0x40449a:\n        // 0x40449a\n        return result;\n    }\n    int64_t v7 = v4; // 0x404488\n    int64_t v8 = 0; // 0x404488\n    int64_t v9; // 0x404440\n    int64_t v10; // 0x40448a\n    char v11; // 0x40448e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x404485\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40448a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x404485\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40447a\n    char v14 = *(char *)v13; // 0x40447e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x404485\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40448a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x404485\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x404470\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40449a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "4044cb",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4044a4\n    int64_t result = len; // 0x4044a4\n    if (len < 2) {\n        // 0x4044ba\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x4044b8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x4044c0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x4044ba\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x4044ba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "40451a",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t path, int64_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x4044e3\n    return function_407c50((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_404520",
            "funcStartAddr": "404520",
            "funcEndAddr": "4045d7",
            "decompiledFuncCode": "int64_t function_404520(int32_t a1, float80_t a2) {\n    // 0x404520\n    int3_t v1; // 0x404520\n    int3_t v2 = v1 - 1; // 0x404520\n    __frontend_reg_store_fpr(v2, 9223372036854775808.0L);\n    int3_t v3 = v1 - 2;\n    __frontend_reg_store_fpr(v3, a2);\n    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x40452a\n    float80_t v5 = __frontend_reg_load_fpr(v2); // 0x40452a\n    int64_t result; // 0x404520\n    if (v4 > v5 || v4 == v5) {\n        // 0x4045a0\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3) - __frontend_reg_load_fpr(v2));\n        float80_t v6 = __frontend_reg_load_fpr(v3); // 0x4045a6\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        __frontend_reg_store_fpr(v2, v6);\n        result = (int64_t)__frontend_reg_load_fpr(v3) ^ -0x8000000000000000;\n    } else {\n        // 0x40452e\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3));\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        result = __frontend_reg_load_fpr(v3);\n    }\n    // 0x404554\n    __frontend_reg_store_fpr(v3, (float80_t)result);\n    if (result < 0) {\n        // 0x404562\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + 18446744073709551616.0L);\n    }\n    int3_t v7 = v3;\n    if (a1 != 0) {\n        // 0x404598\n        __frontend_reg_store_fpr(v7 + 1, __frontend_reg_load_fpr(v7));\n        // 0x40459a\n        return result;\n    }\n    int3_t v8 = v7 + 1; // 0x40456c\n    float80_t v9 = __frontend_reg_load_fpr(v7); // 0x40456c\n    __frontend_reg_store_fpr(v7, __frontend_reg_load_fpr(v8));\n    __frontend_reg_store_fpr(v8, v9);\n    float80_t v10 = __frontend_reg_load_fpr(v7); // 0x40456e\n    float80_t v11 = __frontend_reg_load_fpr(v8); // 0x40456e\n    if (v10 != v11 == v10 == v11) {\n        // 0x404578\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    } else {\n        // 0x404572\n        if (v10 == v11) {\n            // 0x40459a\n            return result;\n        }\n        // 0x404574\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    }\n    int64_t result2 = result + 1; // 0x404580\n    __frontend_reg_store_fpr(v8, (float80_t)result2);\n    if (result2 >= 0) {\n        // 0x40459a\n        return result2;\n    }\n    // 0x4045d0\n    __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8) + 18446744073709551616.0L);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404fae",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = a3 & 32; // 0x4045e6\n    uint32_t v2 = (int32_t)a3 % 4; // 0x4045f0\n    int64_t v3; // bp-168, 0x4045e0\n    int64_t v4 = &v3; // 0x404600\n    int32_t v5 = v1; // 0x404607\n    uint32_t v6 = (v5 | 1024) - ((int32_t)(v1 == 0) | v5) & 2024; // 0x404615\n    int64_t v7 = 0x100000000 * a3 >> 32; // 0x40461a\n    struct lconv * locale_info = localeconv(); // 0x40462b\n    int64_t str = *(int64_t *)locale_info; // 0x404630\n    int64_t len = strlen((char *)str); // 0x404639\n    int64_t v8 = len >= 17 ? (int64_t)&g1 : str; // 0x404653\n    int64_t str2 = *(int64_t *)((int64_t)locale_info + 8); // 0x40465c\n    int64_t v9 = len >= 17 ? 1 : len; // 0x404661\n    uint32_t len2 = strlen((char *)str2); // 0x404672\n    int64_t v10 = a2 + 647; // 0x404689\n    v3 = v10;\n    int64_t v11; // 0x4045e0\n    int64_t v12; // 0x4045e0\n    int64_t v13; // 0x4045e0\n    int64_t v14; // 0x4045e0\n    int64_t v15; // 0x4045e0\n    int64_t v16; // 0x4045e0\n    int64_t v17; // 0x4045e0\n    int64_t v18; // 0x4045e0\n    int64_t v19; // 0x4045e0\n    if (a5 > a4) {\n        if (a4 == 0) {\n            goto lab_0x4046c5;\n        } else {\n            if (a5 % a4 != 0) {\n                goto lab_0x4046c5;\n            } else {\n                uint64_t v20 = a5 / a4; // 0x404930\n                int64_t v21 = a1 / v20; // 0x404944\n                uint64_t v22 = 10 * (a1 % v20); // 0x404950\n                uint64_t v23 = 2 * (v22 % v20); // 0x404959\n                int64_t v24 = v22 / v20 & 0xffffffff; // 0x40495c\n                int64_t v25 = v20 > v23 ? (int64_t)(v23 != 0) : v20 < v23 ? 3 : 2;\n                uint32_t v26 = (int32_t)v7 & 16; // 0x404975\n                v14 = v26;\n                v18 = v21;\n                v16 = v25;\n                v11 = v24;\n                v15 = 0;\n                v13 = 0xffffffff;\n                v19 = v21;\n                v17 = v25;\n                v12 = v24;\n                if (v26 == 0) {\n                    goto lab_0x404991;\n                } else {\n                    goto lab_0x40497e;\n                }\n            }\n        }\n    } else {\n        if (a4 % a5 != 0) {\n            goto lab_0x4046c5;\n        } else {\n            uint64_t v27 = a4 / a5; // 0x4046a2\n            int64_t v28 = v27 * a1; // 0x4046b2\n            if (v28 / v27 == a1) {\n                uint32_t v29 = (int32_t)v7 & 16; // 0x404c31\n                int64_t v30 = v29; // 0x404c31\n                v14 = v30;\n                v18 = v28;\n                v16 = 0;\n                v11 = 0;\n                v15 = v30;\n                v13 = 0xffffffff;\n                v19 = v28;\n                v17 = 0;\n                v12 = 0;\n                if (v29 != 0) {\n                    goto lab_0x40497e;\n                } else {\n                    goto lab_0x404991;\n                }\n            } else {\n                goto lab_0x4046c5;\n            }\n        }\n    }\n  lab_0x404991:;\n    int64_t v31 = v15; // 0x40499a\n    int64_t v32 = v13; // 0x40499a\n    int64_t v33 = v19; // 0x40499a\n    int64_t v34 = v17; // 0x40499a\n    int64_t v35 = v12; // 0x40499a\n    int64_t v36 = v10; // 0x40499a\n    int64_t v37; // 0x4045e0\n    int64_t v38; // 0x4045e0\n    int64_t v39; // 0x4045e0\n    int64_t v40; // 0x4045e0\n    int64_t v41; // 0x4045e0\n    int64_t v42; // 0x4045e0\n    int64_t v43; // 0x4045e0\n    if (v2 == 1) {\n        // 0x404cd0\n        v41 = v15;\n        v39 = v13;\n        v42 = v19;\n        v37 = v10;\n        v40 = v13;\n        v43 = v19;\n        v38 = v10;\n        if ((int32_t)(v19 % 2 != -v17) + (int32_t)v12 < 6) {\n            goto lab_0x4049d0;\n        } else {\n            goto lab_0x4049b1;\n        }\n    } else {\n        goto lab_0x4049a0;\n    }\n  lab_0x4046c5:;\n    // 0x4046c5\n    int3_t v44; // 0x4045e0\n    int3_t v45 = v44 - 1;\n    __frontend_reg_store_fpr(v45, (float80_t)a4);\n    int3_t v46; // 0x4045e0\n    int3_t v47; // 0x4045e0\n    if (a4 < 0) {\n        // 0x404910\n        __frontend_reg_store_fpr(v45, __frontend_reg_load_fpr(v45) + 18446744073709551616.0L);\n        v46 = v45;\n    } else {\n        // 0x4046c5\n        v46 = v44 - 2;\n        v47 = v45;\n    }\n    int3_t v48 = v47;\n    __frontend_reg_store_fpr(v46, (float80_t)a5);\n    float80_t v49 = __frontend_reg_load_fpr(v46);\n    int3_t v50; // 0x4045e0\n    int3_t v51; // 0x4045e0\n    int3_t v52; // 0x4045e0\n    int3_t v53; // 0x4045e0\n    if (a5 < 0) {\n        // 0x4048f0\n        __frontend_reg_store_fpr(v46, v49 + 18446744073709551616.0L);\n        int3_t v54 = v48 + 1;\n        __frontend_reg_store_fpr(v54, __frontend_reg_load_fpr(v54) / __frontend_reg_load_fpr(v48));\n        __frontend_reg_store_fpr(v48, (float80_t)a1);\n        v50 = v54;\n        v52 = v48;\n        v51 = v54;\n        v53 = v48;\n        if (a1 >= 0) {\n            goto lab_0x404702;\n        } else {\n            goto lab_0x4048d8;\n        }\n    } else {\n        // 0x4046ee\n        __frontend_reg_store_fpr(v48, __frontend_reg_load_fpr(v48) / v49);\n        __frontend_reg_store_fpr(v46, (float80_t)a1);\n        int3_t v55 = v46 + 1;\n        v50 = v55;\n        v52 = v46;\n        v51 = v55;\n        v53 = v46;\n        if (a1 < 0) {\n            goto lab_0x4048d8;\n        } else {\n            goto lab_0x404702;\n        }\n    }\n  lab_0x404702:;\n    int3_t v56 = v50;\n    float80_t v57 = __frontend_reg_load_fpr(v52); // 0x404702\n    __frontend_reg_store_fpr(v56, v57 * __frontend_reg_load_fpr(v56));\n    int3_t v58 = v56; // 0x404709\n    int3_t v59 = v56; // 0x404709\n    if ((a3 & 16) == 0) {\n        goto lab_0x404820;\n    } else {\n        goto lab_0x40470f;\n    }\n  lab_0x4048d8:;\n    int3_t v60 = v53;\n    __frontend_reg_store_fpr(v60, __frontend_reg_load_fpr(v60) + 18446744073709551616.0L);\n    int3_t v61 = v60 + 2; // 0x4048de\n    __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v51) * __frontend_reg_load_fpr(v61));\n    v58 = v61;\n    v59 = v61;\n    if ((a3 & 16) != 0) {\n        goto lab_0x40470f;\n    } else {\n        goto lab_0x404820;\n    }\n  lab_0x40497e:;\n    int64_t v62 = v14;\n    v15 = v62;\n    v13 = 0;\n    v19 = v18;\n    v17 = v16;\n    v12 = v11;\n    int64_t v63; // 0x4045e0\n    int64_t v64; // 0x4045e0\n    int64_t v65; // 0x4045e0\n    int64_t v66; // 0x4045e0\n    int64_t v67; // 0x4045e0\n    int64_t v68; // 0x4045e0\n    int64_t v69; // 0x404bb6\n    int64_t v70; // 0x404b9a\n    if (v18 < (int64_t)v6) {\n        goto lab_0x404991;\n    } else {\n        int64_t v71; // 0x4045e0\n        int32_t v72 = v71; // 0x404bb4\n        int64_t v73; // 0x4045e0\n        uint64_t v74; // 0x4045e0\n        v69 = v73 / v74;\n        int64_t v75; // 0x4045e0\n        uint64_t v76 = 10 * (v73 % v74) + v75 & 0xffffffff; // 0x404bc7\n        int64_t v77 = v76 / v74; // 0x404bc7\n        uint32_t v78 = 2 * (int32_t)(v76 % v74) + (v72 >> 1); // 0x404bc9\n        uint32_t v79 = v78 + v72; // 0x404bd2\n        int64_t v80 = v78 < v6 ? (int64_t)(v79 != 0) : v6 < v79 ? 3 : 2;\n        int64_t v81; // 0x4045e0\n        v70 = v81 + 1 & 0xffffffff;\n        while (v69 >= v74) {\n            // 0x404ba6\n            v15 = v62;\n            v13 = v70;\n            v19 = v69;\n            v17 = v80;\n            v12 = v77;\n            v81 = v70;\n            v73 = v69;\n            v71 = v80;\n            v75 = v77;\n            int64_t v82; // 0x404b9a\n            if ((int32_t)v82 == 8) {\n                goto lab_0x404991;\n            }\n            int64_t v83 = v75;\n            int64_t v84 = v71;\n            uint64_t v85 = v73;\n            int64_t v86 = v81;\n            v72 = v84;\n            v69 = v85 / v74;\n            v76 = 10 * (v85 % v74) + v83 & 0xffffffff;\n            v77 = v76 / v74;\n            v78 = 2 * (int32_t)(v76 % v74) + (v72 >> 1);\n            v79 = v78 + v72;\n            int64_t v87 = v6 < v79 ? 3 : 2;\n            v80 = v78 < v6 ? (int64_t)(v79 != 0) : v87;\n            v82 = v86 + 1;\n            v70 = v82 & 0xffffffff;\n        }\n        // 0x404d80\n        v15 = v62;\n        v13 = v70;\n        v19 = v69;\n        v17 = v80;\n        v12 = v77;\n        if (v69 < 10) {\n            bool v88; // 0x4045e0\n            if (v2 == 1) {\n                int32_t v89 = (int32_t)(v80 + v77 % 2) - 2; // 0x404e57\n                v88 = v89 >= 0 == (v89 != 0);\n            } else {\n                // 0x404d95\n                v88 = v2 == 0 == (v80 != 0);\n            }\n            // 0x404da7\n            if (v88) {\n                int64_t v90 = v77 + 1; // 0x404e40\n                v64 = v90 & 0xffffffff;\n                if ((int32_t)v90 == 10) {\n                    // 0x404eb3\n                    v68 = v69 + 1;\n                    v65 = 0;\n                    v67 = 10;\n                    v66 = 0;\n                    v63 = v10;\n                    if (v69 == 9) {\n                        goto lab_0x404e00;\n                    } else {\n                        goto lab_0x404db7;\n                    }\n                } else {\n                    goto lab_0x404e48;\n                }\n            } else {\n                // 0x404daf\n                v68 = v69;\n                v65 = v80;\n                v64 = v77;\n                if (v76 >= v74) {\n                    goto lab_0x404e48;\n                } else {\n                    goto lab_0x404db7;\n                }\n            }\n        } else {\n            goto lab_0x404991;\n        }\n    }\n  lab_0x404820:;\n    int3_t v91 = v59; // 0x404827\n    if (v2 != 1) {\n        int3_t v92 = v59 - 1; // 0x404829\n        __frontend_reg_store_fpr(v92, 1.84467e+19L);\n        float80_t v93 = __frontend_reg_load_fpr(v92); // 0x40482f\n        float80_t v94 = __frontend_reg_load_fpr(v59); // 0x40482f\n        v91 = v59;\n        if (v93 > v94) {\n            // 0x404bf0\n            function_404520(v2, __frontend_reg_load_fpr(v59));\n            v91 = v59 + 1;\n        }\n    }\n    // 0x404837\n    __frontend_reg_load_fpr(v91);\n    char * str3 = (char *)a2; // 0x404859\n    __sprintf_chk(str3, 1, -1, \"%.0Lf\");\n    int64_t len3 = strlen(str3); // 0x404866\n    int64_t v95 = len3; // 0x40486d\n    int64_t v96 = 0xffffffff; // 0x40486d\n    int64_t v97 = len3; // 0x40486d\n    goto lab_0x404870;\n  lab_0x40470f:;\n    int3_t v180 = v58;\n    int3_t v179 = v180 - 1; // 0x40470f\n    __frontend_reg_store_fpr(v179, (float80_t)v6);\n    int3_t v205 = v180 - 2; // 0x404715\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v179));\n    int3_t v206 = v180 - 3;\n    __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v205));\n    int64_t v207 = 1; // 0x404726\n    int64_t v164 = v207 & 0xffffffff; // 0x404726\n    __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v206) * __frontend_reg_load_fpr(v179));\n    float80_t v208 = __frontend_reg_load_fpr(v206); // 0x40472b\n    __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v180));\n    __frontend_reg_store_fpr(v180, v208);\n    while (__frontend_reg_load_fpr(v206) >= __frontend_reg_load_fpr(v180)) {\n        float80_t v209 = __frontend_reg_load_fpr(v206);\n        if ((int32_t)v207 == 8) {\n            // 0x404736\n            __frontend_reg_store_fpr(v179, v209);\n            __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v205));\n            goto lab_0x404744;\n        }\n        // 0x404720\n        __frontend_reg_store_fpr(v205, v209);\n        float80_t v210 = __frontend_reg_load_fpr(v205); // 0x404722\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v180));\n        __frontend_reg_store_fpr(v180, v210);\n        __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v205));\n        v207 = v164 + 1;\n        v164 = v207 & 0xffffffff;\n        __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v206) * __frontend_reg_load_fpr(v179));\n        v208 = __frontend_reg_load_fpr(v206);\n        __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v180));\n        __frontend_reg_store_fpr(v180, v208);\n    }\n    // 0x404740\n    __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v206));\n    __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v205));\n    goto lab_0x404744;\n  lab_0x4049a0:;\n    int64_t v211 = v36;\n    int64_t v212 = v33;\n    int64_t v213 = v32;\n    v40 = v213;\n    v43 = v212;\n    v38 = v211;\n    if (v2 != 0) {\n        goto lab_0x4049d0;\n    } else {\n        // 0x4049aa\n        v41 = v31;\n        v39 = v213;\n        v42 = v212;\n        v37 = v211;\n        v40 = v213;\n        v43 = v212;\n        v38 = v211;\n        if ((int32_t)(v35 + v34) < 1) {\n            goto lab_0x4049d0;\n        } else {\n            goto lab_0x4049b1;\n        }\n    }\n  lab_0x404870:;\n    int64_t v98 = *(int64_t *)(v4 + 8); // 0x404874\n    int64_t v99 = v3 - v95; // 0x40487c\n    memmove((int64_t *)v99, (int64_t *)v98, (int32_t)v95);\n    int64_t v100 = v96; // 0x404885\n    int64_t v101 = v99 + v97; // 0x404885\n    int64_t v102 = v99; // 0x404885\n    goto lab_0x40488a;\n  lab_0x404744:;\n    float80_t v178 = __frontend_reg_load_fpr(v179); // 0x404752\n    __frontend_reg_store_fpr(v180, v178 / __frontend_reg_load_fpr(v180));\n    uint64_t v181 = v9 + (v5 == 0 ? 3 : 2); // 0x404759\n    int3_t v143; // 0x4045e0\n    int3_t v173; // 0x4045e0\n    int3_t v147; // 0x4045e0\n    int64_t v144; // 0x4045e0\n    int3_t v175; // 0x4045e0\n    if (v2 == 1) {\n        // 0x404c80\n        __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v180));\n        __frontend_reg_load_fpr(v179);\n        float80_t v182 = __frontend_reg_load_fpr(v180); // 0x404ca4\n        char * str6 = (char *)a2; // 0x404ca8\n        __sprintf_chk(str6, 1, -1, \"%.1Lf\");\n        int64_t len6 = strlen(str6); // 0x404cb0\n        __frontend_reg_store_fpr(v180, v182);\n        v143 = v180;\n        v144 = len6;\n        if (v181 < len6) {\n            // 0x404cc0\n            __frontend_reg_store_fpr(v179, 10.0L);\n            float80_t v183 = __frontend_reg_load_fpr(v180); // 0x404cc6\n            __frontend_reg_store_fpr(v180, v183 * __frontend_reg_load_fpr(v179));\n            v147 = v179;\n            goto lab_0x4047e6;\n        } else {\n            goto lab_0x404c48;\n        }\n    } else {\n        // 0x404767\n        __frontend_reg_store_fpr(v179, 1.84467e+19L);\n        float80_t v184 = __frontend_reg_load_fpr(v179); // 0x40476d\n        float80_t v185 = __frontend_reg_load_fpr(v180); // 0x40476d\n        bool v186 = false; // 0x40476d\n        bool v187 = false; // 0x40476d\n        if (v184 <= v185) {\n            v186 = true;\n            v187 = false;\n            if (v184 >= v185) {\n                v186 = v184 != v185;\n                v187 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v180));\n        v173 = v179;\n        if (!v186 && !v187) {\n            // 0x404c08\n            __frontend_reg_load_fpr(v179);\n            float80_t v188 = __frontend_reg_load_fpr(v180); // 0x404c11\n            function_404520(v2, v188);\n            __frontend_reg_store_fpr(v180, v188);\n            v173 = v180;\n        }\n        float80_t v189 = __frontend_reg_load_fpr(v173); // 0x404777\n        v175 = v173 + 1;\n        __frontend_reg_load_fpr(v175);\n        char * str7 = (char *)a2; // 0x40479d\n        __sprintf_chk(str7, 1, -1, \"%.1Lf\");\n        int64_t len7 = strlen(str7); // 0x4047a5\n        __frontend_reg_store_fpr(v175, v189);\n        v143 = v175;\n        v144 = len7;\n        if (v181 < len7) {\n            // 0x4047b9\n            __frontend_reg_store_fpr(v173, 10.0L);\n            __frontend_reg_store_fpr(v175, __frontend_reg_load_fpr(v175) * __frontend_reg_load_fpr(v173));\n            goto lab_0x4047c1;\n        } else {\n            goto lab_0x404c48;\n        }\n    }\n  lab_0x4049d0:;\n    int64_t v190 = v38 - 1; // 0x4049e9\n    *(char *)v190 = (char)v43 + 48;\n    int64_t v191 = v190; // 0x404a0b\n    while (v43 >= 10) {\n        // 0x4049e3\n        v190 = v191 - 1;\n        *(char *)v190 = (char)v43 + 48;\n        v191 = v190;\n    }\n    int64_t v103 = v40; // 0x404a12\n    int64_t v104 = v190; // 0x404a12\n    int64_t v105 = v40; // 0x404a12\n    int64_t v106 = v38; // 0x404a12\n    int64_t v107 = v190; // 0x404a12\n    if ((a3 & 4) == 0) {\n        goto lab_0x404895;\n    } else {\n        goto lab_0x404a18;\n    }\n  lab_0x4049b1:;\n    int64_t v192 = v37;\n    int64_t v193 = v39;\n    int64_t v194 = v42 + 1; // 0x4049b1\n    v40 = v193;\n    v43 = v194;\n    v38 = v192;\n    if ((int32_t)v193 == 8 || (int32_t)v41 == 0 || v194 != (int64_t)v6) {\n        goto lab_0x4049d0;\n    } else {\n        int64_t v195 = v192; // 0x404d3e\n        if ((a3 & 8) == 0) {\n            // 0x404ec4\n            *(char *)(v192 - 1) = 48;\n            int64_t v196 = v192 + -1 - v9; // 0x404ecf\n            int64_t v197 = v9 & 0xffffffff; // 0x404ed2\n            uint32_t v198 = (int32_t)v9; // 0x404ed5\n            if (v198 >= 8) {\n                int64_t v199 = v196 + 8 & -8; // 0x404f20\n                *(int64_t *)v196 = *(int64_t *)v8;\n                *(int64_t *)(v196 + v197 - 8) = *(int64_t *)(v197 + v8 - 8);\n                int64_t v200 = v196 - v199; // 0x404f37\n                uint32_t v201 = (int32_t)(v200 + v9); // 0x404f43\n                v195 = v196;\n                if (v201 >= 8) {\n                    int64_t v202 = 0;\n                    int64_t v203 = v202 + 8; // 0x404f53\n                    *(int64_t *)(v202 + v199) = *(int64_t *)(v8 - v200 + v202);\n                    v195 = v196;\n                    while ((v201 & -8) > (int32_t)v203) {\n                        // 0x404f51\n                        v202 = v203 & 0xffffffff;\n                        v203 = v202 + 8;\n                        *(int64_t *)(v202 + v199) = *(int64_t *)(v8 - v200 + v202);\n                        v195 = v196;\n                    }\n                }\n            } else {\n                if ((v9 & 4) != 0) {\n                    // 0x404f7c\n                    *(int32_t *)v196 = *(int32_t *)v8;\n                    *(int32_t *)(v196 + v197 - 4) = *(int32_t *)(v197 + v8 - 4);\n                    v195 = v196;\n                } else {\n                    // 0x404ee5\n                    v195 = v196;\n                    if (v198 != 0) {\n                        // 0x404eed\n                        *(char *)v196 = *(char *)v8;\n                        v195 = v196;\n                        if ((v9 & 2) != 0) {\n                            // 0x404efc\n                            *(int16_t *)(v196 + v197 - 2) = *(int16_t *)(v197 + v8 - 2);\n                            v195 = v196;\n                        }\n                    }\n                }\n            }\n        }\n        int64_t v204 = v195 - 1; // 0x404d44\n        *(char *)v204 = 49;\n        v100 = v193 + 1 & 0xffffffff;\n        v101 = v195;\n        v102 = v204;\n        goto lab_0x40488a;\n    }\n  lab_0x40488a:\n    // 0x40488a\n    v103 = v100;\n    v104 = v102;\n    v105 = v100;\n    v106 = v101;\n    v107 = v102;\n    if ((*(char *)(v4 + 16) & 4) != 0) {\n        goto lab_0x404a18;\n    } else {\n        goto lab_0x404895;\n    }\n  lab_0x404895:;\n    int64_t result = v104;\n    int64_t v108 = v4 + 16; // 0x404895\n    char v109 = *(char *)v108; // 0x404895\n    if (v109 > -1) {\n        // 0x4048b8\n        *(char *)v3 = 0;\n        return result;\n    }\n    int64_t v110 = v103; // 0x40489f\n    int64_t v111; // 0x4045e0\n    int64_t v112; // 0x4045e0\n    int64_t v113; // 0x4045e0\n    int64_t v114; // 0x4045e0\n    if ((int32_t)v103 == -1) {\n        uint64_t v115 = *(int64_t *)(v4 + 24); // 0x404ae0\n        v110 = 0;\n        if (v115 < 2) {\n            goto lab_0x4048a5;\n        } else {\n            int64_t v116 = 1; // 0x404afd\n            int64_t v117 = 1;\n            v116 *= (int64_t)*(int32_t *)(v4 + 52);\n            int64_t v118 = v117; // 0x404b07\n            while (v115 > v116) {\n                int64_t v119 = v117 + 1; // 0x404b09\n                int64_t v120 = v119 & 0xffffffff; // 0x404b09\n                v118 = v120;\n                if ((int32_t)v119 == 8) {\n                    // break -> 0x404b11\n                    break;\n                }\n                v117 = v120;\n                v116 *= (int64_t)*(int32_t *)(v4 + 52);\n                v118 = v117;\n            }\n            int32_t v121 = *(int32_t *)v108; // 0x404b11\n            int64_t v122 = v121 & 256; // 0x404b17\n            v111 = v122;\n            v113 = v118;\n            v112 = v122;\n            v114 = v118;\n            if ((v121 & 64) == 0) {\n                goto lab_0x404b40;\n            } else {\n                goto lab_0x404b21;\n            }\n        }\n    } else {\n        goto lab_0x4048a5;\n    }\n  lab_0x404a18:;\n    int64_t str4 = len2 >= 17 ? (int64_t)&g17 : str2; // 0x404685\n    int32_t len4 = strlen((char *)str4); // 0x404a25\n    int64_t v123 = v106 - v107; // 0x404a2a\n    int64_t v124 = v4 + 64; // 0x404a38\n    int64_t * v125 = (int64_t *)(v4 + 32); // 0x404a3d\n    *v125 = (int64_t)len4;\n    int64_t * v126 = (int64_t *)v124; // 0x404a42\n    __memcpy_chk(v126, (int64_t *)v107, (int32_t)v123, 41);\n    int32_t * v127 = (int32_t *)(v4 + 20); // 0x404a47\n    *v127 = (int32_t)v105;\n    int64_t v128 = *v125; // 0x404a59\n    int64_t * v129 = (int64_t *)str4;\n    int32_t v130 = v128;\n    int64_t v131 = *(int64_t *)(v4 + 56);\n    int64_t v132 = v106;\n    uint64_t v133 = v123;\n    unsigned char v134 = *(char *)v131; // 0x404a60\n    int64_t v135 = -1; // 0x404a66\n    int64_t v136 = v131; // 0x404a66\n    if (v134 != 0) {\n        // 0x404a68\n        v135 = v134 >= 127 ? v133 : (int64_t)v134;\n        v136 = v131 + 1;\n    }\n    int64_t v137 = v135;\n    while (v133 >= v137) {\n        int64_t v138 = v132 - v137; // 0x404aa0\n        int64_t v139 = v133 - v137; // 0x404aa3\n        memcpy((int64_t *)v138, (int64_t *)(v139 + v124), (int32_t)v137);\n        if (v139 == 0) {\n            // 0x404f91\n            v103 = (int64_t)*v127;\n            v104 = v138;\n            goto lab_0x404895;\n        }\n        int64_t v140 = v138 - v128; // 0x404ac3\n        memcpy((int64_t *)v140, v129, v130);\n        v131 = v136;\n        v132 = v140;\n        v133 = v139;\n        v134 = *(char *)v131;\n        v135 = v137;\n        v136 = v131;\n        if (v134 != 0) {\n            // 0x404a68\n            v135 = v134 >= 127 ? v133 : (int64_t)v134;\n            v136 = v131 + 1;\n        }\n        // 0x404a79\n        v137 = v135;\n    }\n    int64_t v141 = v132 - v133; // 0x404a8d\n    memcpy((int64_t *)v141, v126, (int32_t)v133);\n    v103 = (int64_t)*v127;\n    v104 = v141;\n    goto lab_0x404895;\n  lab_0x404c48:;\n    int3_t v142 = v143;\n    if ((a3 & 8) == 0) {\n        // 0x404c68\n        __frontend_reg_store_fpr(v142, __frontend_reg_load_fpr(v142));\n        goto lab_0x404c6a;\n    } else {\n        // 0x404c4f\n        if (*(char *)(a2 - 1 + v144) == 48) {\n            int3_t v145 = v142 - 1; // 0x404e28\n            __frontend_reg_store_fpr(v145, 10.0L);\n            float80_t v146 = __frontend_reg_load_fpr(v142); // 0x404e33\n            __frontend_reg_store_fpr(v142, v146 * __frontend_reg_load_fpr(v145));\n            v147 = v145;\n            if (v2 != 1) {\n                goto lab_0x4047c1;\n            } else {\n                goto lab_0x4047e6;\n            }\n        } else {\n            // 0x404c5f\n            __frontend_reg_store_fpr(v142, __frontend_reg_load_fpr(v142));\n            goto lab_0x404c6a;\n        }\n    }\n  lab_0x4048a5:;\n    uint32_t v148 = *(int32_t *)v108 & 256; // 0x4048a9\n    if ((v148 || (int32_t)v110) == 0) {\n        // 0x4048b8\n        *(char *)v3 = 0;\n        return result;\n    }\n    int64_t v149 = v148; // 0x4048a9\n    v111 = v149;\n    v113 = v110;\n    int64_t v150 = v149; // 0x404d15\n    int64_t v151 = v110; // 0x404d15\n    if ((v109 & 64) == 0) {\n        goto lab_0x404b38;\n    } else {\n        goto lab_0x404b21;\n    }\n  lab_0x404e48:;\n    int64_t v152 = v69; // 0x404e4b\n    int64_t v153 = v64 + 48 & 0xffffffff; // 0x404e4b\n    goto lab_0x404dc7;\n  lab_0x404db7:\n    // 0x404db7\n    v152 = v68;\n    v153 = 48;\n    v67 = v68;\n    v66 = v65;\n    v63 = v10;\n    if ((a3 & 8) != 0) {\n        goto lab_0x404e00;\n    } else {\n        goto lab_0x404dc7;\n    }\n  lab_0x4047e6:;\n    int3_t v171 = v147 + 1; // 0x4047e6\n    __frontend_reg_store_fpr(v171, __frontend_reg_load_fpr(v171) / __frontend_reg_load_fpr(v147));\n    __frontend_reg_load_fpr(v171);\n    char * str5 = (char *)a2; // 0x40480a\n    __sprintf_chk(str5, 1, -1, \"%.0Lf\");\n    int64_t len5 = strlen(str5); // 0x404812\n    v95 = len5;\n    v96 = v164;\n    v97 = len5;\n    goto lab_0x404870;\n  lab_0x4047c1:;\n    int3_t v172 = v173 - 1; // 0x4047c1\n    __frontend_reg_store_fpr(v172, 1.84467e+19L);\n    float80_t v174 = __frontend_reg_load_fpr(v172); // 0x4047c7\n    v147 = v173;\n    if (v174 > __frontend_reg_load_fpr(v175)) {\n        float80_t v176 = __frontend_reg_load_fpr(v173); // 0x4047cb\n        function_404520(v2, __frontend_reg_load_fpr(v175));\n        __frontend_reg_store_fpr(v175, v176);\n        v147 = v175;\n    }\n    goto lab_0x4047e6;\n  lab_0x404b38:\n    // 0x404b38\n    v112 = v150;\n    v114 = v151;\n    int64_t v167; // 0x4045e0\n    if ((int32_t)v151 == 0) {\n        // 0x404f9d\n        v167 = v3;\n        if ((int32_t)v150 == 0) {\n            // 0x4048b8\n            *(char *)v3 = 0;\n            return result;\n        }\n        goto lab_0x404b7d;\n    } else {\n        goto lab_0x404b40;\n    }\n  lab_0x404b21:;\n    int64_t v177 = *(int64_t *)(v4 + 8); // 0x404b21\n    *(char *)(v177 + 647) = 32;\n    v3 = v177 + 648;\n    v150 = v111;\n    v151 = v113;\n    goto lab_0x404b38;\n  lab_0x404e00:\n    // 0x404e00\n    v31 = v62;\n    v32 = v70;\n    v33 = v67;\n    v34 = v66;\n    v35 = 0;\n    v36 = v63;\n    v40 = v70;\n    v43 = v67;\n    v38 = v63;\n    if (v2 == 1) {\n        goto lab_0x4049d0;\n    } else {\n        goto lab_0x4049a0;\n    }\n  lab_0x404dc7:;\n    int64_t v154 = a2 + 646; // 0x404dcc\n    *(char *)v154 = (char)v153;\n    int64_t v155 = v9 & 0xffffffff; // 0x404dd9\n    int64_t v156 = v154 - v9; // 0x404ddc\n    uint32_t v157 = (int32_t)v9; // 0x404ddf\n    if (v157 >= 8) {\n        int64_t v158 = v156 + 8 & -8; // 0x404e6c\n        *(int64_t *)v156 = *(int64_t *)v8;\n        *(int64_t *)(v155 + v156 - 8) = *(int64_t *)(v155 + v8 - 8);\n        int64_t v159 = v156 - v158; // 0x404e83\n        uint32_t v160 = (int32_t)(v159 + v9); // 0x404e8f\n        v67 = v152;\n        v66 = 0;\n        v63 = v156;\n        if (v160 >= 8) {\n            int64_t v161 = v8 - v159; // 0x404e86\n            int64_t v162 = 0;\n            int64_t v163 = v162 + 8; // 0x404e9f\n            *(int64_t *)(v162 + v158) = *(int64_t *)(v161 + v162);\n            v67 = v152;\n            v66 = 0;\n            v63 = v156;\n            while ((v160 & -8) > (int32_t)v163) {\n                // 0x404e9d\n                v162 = v163 & 0xffffffff;\n                v163 = v162 + 8;\n                *(int64_t *)(v162 + v158) = *(int64_t *)(v161 + v162);\n                v67 = v152;\n                v66 = 0;\n                v63 = v156;\n            }\n        }\n    } else {\n        if ((v9 & 4) != 0) {\n            // 0x404f67\n            *(int32_t *)v156 = *(int32_t *)v8;\n            *(int32_t *)(v155 + v156 - 4) = *(int32_t *)(v155 + v8 - 4);\n            v67 = v152;\n            v66 = 0;\n            v63 = v156;\n        } else {\n            // 0x404def\n            v67 = v152;\n            v66 = 0;\n            v63 = v156;\n            if (v157 != 0) {\n                // 0x404df3\n                *(char *)v156 = *(char *)v8;\n                v67 = v152;\n                v66 = 0;\n                v63 = v156;\n                if ((v9 & 2) != 0) {\n                    // 0x404e13\n                    *(int16_t *)(v155 + v156 - 2) = *(int16_t *)(v155 + v8 - 2);\n                    v67 = v152;\n                    v66 = 0;\n                    v63 = v156;\n                }\n            }\n        }\n    }\n    goto lab_0x404e00;\n  lab_0x404c6a:\n    // 0x404c6a\n    v95 = v144;\n    v96 = v164;\n    v97 = v144 + -1 - v9;\n    goto lab_0x404870;\n  lab_0x404b40:;\n    int32_t * v165 = (int32_t *)(v4 + 48); // 0x404b40\n    if (*v165 == 0 == (int32_t)v114 == 1) {\n        int64_t v166 = v3 + 1; // 0x404d64\n        *(char *)v3 = 107;\n        v167 = v166;\n        if ((int32_t)v112 == 0) {\n            // 0x404d73\n            v3 = v166;\n            // 0x4048b8\n            *(char *)v3 = 0;\n            return result;\n        }\n    } else {\n        int64_t v168 = v3; // 0x404b56\n        char v169 = *(char *)((0x100000000 * v114 >> 32) + (int64_t)&g9); // 0x404b5a\n        int64_t v170 = v168 + 1; // 0x404b61\n        *(char *)v168 = v169;\n        if ((int32_t)v112 == 0) {\n            // 0x404d73\n            v3 = v170;\n            // 0x4048b8\n            *(char *)v3 = 0;\n            return result;\n        }\n        // 0x404b6f\n        v167 = v170;\n        if (*v165 != 0) {\n            // 0x404d20\n            *(char *)v170 = 105;\n            v167 = v168 + 2;\n        }\n    }\n    goto lab_0x404b7d;\n  lab_0x404b7d:\n    // 0x404b7d\n    *(char *)v167 = 66;\n    v3 = v167 + 1;\n    // 0x4048b8\n    *(char *)v3 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "405167",
            "decompiledFuncCode": "int64_t function_404fb0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1; // 0x404fc6\n    if (a1 == 0) {\n        char * env_val = getenv(\"BLOCK_SIZE\"); // 0x4050d5\n        v1 = (int64_t)env_val;\n        if (env_val == NULL) {\n            char * env_val2 = getenv(\"BLOCKSIZE\"); // 0x4050eb\n            v1 = (int64_t)env_val2;\n            if (env_val2 == NULL) {\n                int64_t * v2 = (int64_t *)a3;\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405152\n                    *v2 = 1024;\n                    *(int32_t *)a2 = 0;\n                } else {\n                    // 0x40510b\n                    *v2 = 512;\n                    *(int32_t *)a2 = 0;\n                }\n                // 0x40500e\n                return 0;\n            }\n        }\n    }\n    char v3 = *(char *)v1; // 0x404fce\n    int64_t v4 = v1 + (int64_t)(v3 == 39);\n    int64_t v5 = v3 != 39 ? 0 : 4;\n    int64_t v6 = function_403f20(v4, (int64_t)&g8, (int64_t)&g7, 4); // 0x404fee\n    if ((int32_t)v6 >= 0) {\n        // 0x404ff7\n        *(int64_t *)a3 = 1;\n        int32_t v7 = *(int32_t *)((0x100000000 * v6 >> 30) + (int64_t)&g7); // 0x405001\n        *(int32_t *)a2 = v7 | (int32_t)v5;\n        // 0x40500e\n        return 0;\n    }\n    // 0x405020\n    int64_t v8; // bp-48, 0x404fb0\n    int64_t v9; // 0x404fb0\n    int64_t result = function_4085d0(v4, &v8, 0, a3, \"eEgGkKmMpPtTyYzZ0\", v9); // 0x405033\n    if ((int32_t)result != 0) {\n        // 0x405094\n        *(int32_t *)a2 = 0;\n        // 0x40509d\n        *(int64_t *)a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    int64_t v10 = (int64_t)*(char *)v4 + 0xffffffd0; // 0x40503f\n    int64_t v11 = v10 & 0xffffffff; // 0x40503f\n    int64_t v12 = v11; // 0x405045\n    int64_t v13 = v5; // 0x405045\n    int64_t v14; // 0x404fb0\n    if ((char)v10 < 10) {\n        goto lab_0x405094;\n    } else {\n        // 0x405047\n        v14 = v11;\n        if (v4 != v8) {\n            int64_t v15 = v4 + 1; // 0x405069\n            int64_t v16 = (int64_t)*(char *)v15 + 0xffffffd0; // 0x405070\n            while ((char)v16 >= 10) {\n                // 0x405060\n                if (v15 == v8) {\n                    // 0x405128\n                    v14 = v16 & 0xffffffff;\n                    goto lab_0x405128_2;\n                }\n                v15++;\n                v16 = (int64_t)*(char *)v15 + 0xffffffd0;\n            }\n            // 0x405094\n            v12 = v16 & 0xffffffff;\n            v13 = v5;\n            goto lab_0x405094;\n        } else {\n            goto lab_0x405128_2;\n        }\n    }\n  lab_0x405094:\n    // 0x405094\n    *(int32_t *)a2 = (int32_t)v13;\n    if (v12 == 0) {\n        // 0x40509d\n        *(int64_t *)a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    // 0x40500e\n    return result;\n  lab_0x405128_2:;\n    // 0x405128\n    int64_t v17; // 0x404fb0\n    if (*(char *)(v8 - 1) == 66) {\n        int64_t v18 = v5 | 384; // 0x405140\n        v12 = v14;\n        v13 = v18;\n        v17 = v18;\n        if (*(char *)(v8 - 2) != 105) {\n            goto lab_0x405094;\n        } else {\n            goto lab_0x405132;\n        }\n    } else {\n        // 0x40512e\n        v17 = v5 | 128;\n        goto lab_0x405132;\n    }\n  lab_0x405132:\n    // 0x405132\n    v12 = v14;\n    v13 = v17 & 0xffffffdf | 32;\n    goto lab_0x405094;\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "4051b8",
            "decompiledFuncCode": "int64_t function_405170(uint64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 20; // 0x405170\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x405182\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40518b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x4051b4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "405259",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t str) {\n    // 0x4051c0\n    if (str == 0) {\n        // 0x405239\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g38);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4051ce\n    int64_t result = (int64_t)found_char_pos; // 0x4051ce\n    if (found_char_pos == NULL) {\n        // 0x405229\n        g44 = str;\n        g37 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4051d8\n    if (v1 - str < 7) {\n        // 0x405229\n        g44 = str;\n        g37 = str;\n        return result;\n    }\n    // 0x4051e8\n    bool v2; // 0x4051c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4051c0\n    int64_t v5 = result - 6; // 0x4051c0\n    int64_t v6 = 7; // 0x4051f6\n    unsigned char v7 = *(char *)v5; // 0x4051f6\n    char v8 = *(char *)v4; // 0x4051f6\n    char v9 = v8; // 0x4051f6\n    bool v10 = false; // 0x4051f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x405200\n    int64_t v13 = v1; // 0x405200\n    int64_t v14 = 3; // 0x405200\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x405229\n        g44 = str;\n        g37 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x405212\n    char v16 = *(char *)v12; // 0x405212\n    char v17 = v16; // 0x405212\n    bool v18 = false; // 0x405212\n    while (v15 == v16) {\n        // 0x405202\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40521c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40521e\n        v20 = result + 4;\n        g35 = v20;\n    }\n    // 0x405229\n    g44 = v20;\n    g37 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "405352",
            "decompiledFuncCode": "int64_t function_405260(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x405274\n    int64_t result = (int64_t)v1; // 0x405274\n    if (result != a1) {\n        // 0x405281\n        return result;\n    }\n    int64_t v2 = function_409c20(); // 0x405290\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x405346\n    if (v3 == 85) {\n        // 0x4052a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x405338\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g15 : (int64_t)&g10;\n            return result2;\n        }\n        char v4 = *v1; // 0x4052ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g11 : (int64_t)&g14; // 0x4052db\n        // 0x405281\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x405338\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g15 : (int64_t)&g10;\n        return result2;\n    }\n    char v5 = *v1; // 0x40531d\n    int64_t result4 = v5 != 96 ? (int64_t)&g12 : (int64_t)&g13; // 0x40532a\n    // 0x405281\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "4053b7",
            "decompiledFuncCode": "int64_t function_405360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405360\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4053a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053b7",
            "funcStartAddr": "4053b7",
            "funcEndAddr": "406581",
            "decompiledFuncCode": "int64_t function_4053b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x405401\n    int64_t v3 = 0; // 0x405401\n    int64_t v4; // 0x4053b7\n    int64_t v5; // 0x4053b7\n    int64_t v6; // 0x4053b7\n    int64_t v7; // 0x4053b7\n    int64_t v8; // 0x4053b7\n    int64_t v9; // 0x4053b7\n    int64_t v10; // 0x4053b7\n    int64_t v11; // 0x4053b7\n    int64_t v12; // 0x4053b7\n    int64_t v13; // 0x4053b7\n    int64_t v14; // 0x4053b7\n    int64_t v15; // 0x4053b7\n    int64_t v16; // 0x4053b7\n    int64_t v17; // 0x4053b7\n    int64_t v18; // 0x4053b7\n    int64_t result; // 0x4053b7\n    int64_t v19; // 0x4053b7\n    int32_t wc; // bp+132, 0x4053b7\n    int64_t ps; // bp+136, 0x4053b7\n    char v20; // 0x405970\n    int64_t v21; // 0x405970\n    int64_t v22; // 0x405d18\n    int64_t v23; // 0x4053b7\n    int64_t v24; // 0x405d37\n    int32_t v25; // 0x4053b7\n    while (true) {\n      lab_0x405408_2:\n        // 0x405408\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4053b7\n        int64_t v27; // 0x40543c\n        while (true) {\n          lab_0x405408:\n            // 0x405408\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x405413\n            if (v15 == -1) {\n                // 0x405415\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405423\n            if (v28) {\n                // break (via goto) -> 0x405b88\n                goto lab_0x405b88;\n            }\n            // 0x40542c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g58 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x405a1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x405561;\n                    }\n                    // 0x405e3d\n                    v26 = v5 + 1;\n                    goto lab_0x405408;\n                }\n                case 7: {\n                    goto lab_0x405561;\n                }\n                case 8: {\n                    goto lab_0x405561;\n                }\n                case 9: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x405561;\n                }\n                case 12: {\n                    goto lab_0x405561;\n                }\n                case 13: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40552d;\n                }\n                case 36: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x405561;\n                }\n                case 38: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x405561;\n                }\n                case 44: {\n                    goto lab_0x405561;\n                }\n                case 45: {\n                    goto lab_0x405561;\n                }\n                case 46: {\n                    goto lab_0x405561;\n                }\n                case 47: {\n                    goto lab_0x405561;\n                }\n                case 48: {\n                    goto lab_0x405561;\n                }\n                case 49: {\n                    goto lab_0x405561;\n                }\n                case 50: {\n                    goto lab_0x405561;\n                }\n                case 51: {\n                    goto lab_0x405561;\n                }\n                case 52: {\n                    goto lab_0x405561;\n                }\n                case 53: {\n                    goto lab_0x405561;\n                }\n                case 54: {\n                    goto lab_0x405561;\n                }\n                case 55: {\n                    goto lab_0x405561;\n                }\n                case 56: {\n                    goto lab_0x405561;\n                }\n                case 57: {\n                    goto lab_0x405561;\n                }\n                case 58: {\n                    goto lab_0x405561;\n                }\n                case 59: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x405561;\n                }\n                case 66: {\n                    goto lab_0x405561;\n                }\n                case 67: {\n                    goto lab_0x405561;\n                }\n                case 68: {\n                    goto lab_0x405561;\n                }\n                case 69: {\n                    goto lab_0x405561;\n                }\n                case 70: {\n                    goto lab_0x405561;\n                }\n                case 71: {\n                    goto lab_0x405561;\n                }\n                case 72: {\n                    goto lab_0x405561;\n                }\n                case 73: {\n                    goto lab_0x405561;\n                }\n                case 74: {\n                    goto lab_0x405561;\n                }\n                case 75: {\n                    goto lab_0x405561;\n                }\n                case 76: {\n                    goto lab_0x405561;\n                }\n                case 77: {\n                    goto lab_0x405561;\n                }\n                case 78: {\n                    goto lab_0x405561;\n                }\n                case 79: {\n                    goto lab_0x405561;\n                }\n                case 80: {\n                    goto lab_0x405561;\n                }\n                case 81: {\n                    goto lab_0x405561;\n                }\n                case 82: {\n                    goto lab_0x405561;\n                }\n                case 83: {\n                    goto lab_0x405561;\n                }\n                case 84: {\n                    goto lab_0x405561;\n                }\n                case 85: {\n                    goto lab_0x405561;\n                }\n                case 86: {\n                    goto lab_0x405561;\n                }\n                case 87: {\n                    goto lab_0x405561;\n                }\n                case 88: {\n                    goto lab_0x405561;\n                }\n                case 89: {\n                    goto lab_0x405561;\n                }\n                case 90: {\n                    goto lab_0x405561;\n                }\n                case 91: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x405561;\n                }\n                case 94: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x405561;\n                }\n                case 96: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x405561;\n                }\n                case 98: {\n                    goto lab_0x405561;\n                }\n                case 99: {\n                    goto lab_0x405561;\n                }\n                case 100: {\n                    goto lab_0x405561;\n                }\n                case 101: {\n                    goto lab_0x405561;\n                }\n                case 102: {\n                    goto lab_0x405561;\n                }\n                case 103: {\n                    goto lab_0x405561;\n                }\n                case 104: {\n                    goto lab_0x405561;\n                }\n                case 105: {\n                    goto lab_0x405561;\n                }\n                case 106: {\n                    goto lab_0x405561;\n                }\n                case 107: {\n                    goto lab_0x405561;\n                }\n                case 108: {\n                    goto lab_0x405561;\n                }\n                case 109: {\n                    goto lab_0x405561;\n                }\n                case 110: {\n                    goto lab_0x405561;\n                }\n                case 111: {\n                    goto lab_0x405561;\n                }\n                case 112: {\n                    goto lab_0x405561;\n                }\n                case 113: {\n                    goto lab_0x405561;\n                }\n                case 114: {\n                    goto lab_0x405561;\n                }\n                case 115: {\n                    goto lab_0x405561;\n                }\n                case 116: {\n                    goto lab_0x405561;\n                }\n                case 117: {\n                    goto lab_0x405561;\n                }\n                case 118: {\n                    goto lab_0x405561;\n                }\n                case 119: {\n                    goto lab_0x405561;\n                }\n                case 120: {\n                    goto lab_0x405561;\n                }\n                case 121: {\n                    goto lab_0x405561;\n                }\n                case 122: {\n                    goto lab_0x405561;\n                }\n                case 123: {\n                    goto lab_0x405505;\n                }\n                case 124: {\n                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x405505;\n                }\n                case 126: {\n                    goto lab_0x40552d;\n                }\n                default: {\n                    goto lab_0x405905;\n                }\n            }\n        }\n      lab_0x405905:\n        if (v23 != 1) {\n            // 0x405c70\n            ps = 0;\n            int64_t len = v15; // 0x405c80\n            if (v15 == -1) {\n                // 0x405c82\n                len = strlen((char *)str);\n            }\n            // 0x405cae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x405d0f:\n                // 0x405d0f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x405d14\n                int64_t v30 = v29 + str;\n                v24 = function_409a40(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40628a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40628a_2;\n                    }\n                    case -2: {\n                        // 0x40636d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4063a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4063aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4063b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4063b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40628a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40628a_2;\n                    }\n                    case 1: {\n                        goto lab_0x405ce0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x405d8c\n                        char v34 = *(char *)v33; // 0x405d9d\n                        unsigned char v35; // 0x4053b7\n                        if (v34 < 125) {\n                            // 0x405da8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x405dbf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x405d90\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x405d9d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x405da8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x405dbf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x405d90\n                            v33++;\n                        }\n                        goto lab_0x405ce0;\n                    }\n                }\n            }\n            goto lab_0x40628a_2;\n        } else {\n            // 0x405954\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x405561;\n        }\n    }\n  lab_0x405b88:\n    // 0x405b88\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40648a\n        if (v8 > result) {\n            // 0x406493\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4057b7\n        return result;\n    }\n    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x405561:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x405570\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40577a_2;\n        }\n    }\n    int64_t v39 = result; // 0x405671\n    char v40 = v20; // 0x405671\n    int64_t v41 = v38; // 0x405671\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x405671\n    int64_t v43 = v36; // 0x405671\n    goto lab_0x4055ed;\n  lab_0x40577a_2:\n    // 0x4057b7\n    return function_405360(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40628a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x405561;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x405e5e\n        int64_t v50 = v5 + 1; // 0x405f41\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x405f48\n        char v52 = v20; // 0x405f48\n        int64_t v53 = result; // 0x405f48\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x405f11\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x405f15\n            int64_t v56 = v54 + 1; // 0x405f1a\n            int64_t v57 = v51 + 1; // 0x405f41\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x405f0c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x405f11\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x405f15\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4055ed;\n    }\n  lab_0x405ce0:\n    // 0x405ce0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x405cff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405d02\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40628a\n        goto lab_0x40628a_2;\n    }\n    goto lab_0x405d0f;\n  lab_0x40552d:\n    // 0x40552d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40577a_2;\n    }\n    goto lab_0x405561;\n  lab_0x405505:;\n    bool v60 = v15 == 1; // 0x405510\n    if (v15 == -1) {\n        // 0x405512\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40551e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x405561;\n    } else {\n        goto lab_0x40552d;\n    }\n  lab_0x4055ed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4055f2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4055f6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x405408_2;\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "40672e",
            "decompiledFuncCode": "int64_t function_406590(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x406592\n    int32_t * v3 = __errno_location(); // 0x4065ac\n    int64_t v4 = (int64_t)g28; // 0x4065b1\n    int32_t v5 = *v3; // 0x4065bb\n    int64_t v6 = v4; // 0x4065d1\n    if (v2 >= (int64_t)*(int32_t *)&g31) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406729\n            function_408490(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4065e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4065e7\n        int64_t v9; // 0x406590\n        if (g28 == &g29) {\n            int64_t v10 = function_4082a0(0, v8); // 0x40670a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g29); // 0x40670f\n            *(int64_t *)&g28 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4082a0(v4, v8); // 0x4065fb\n            *(int64_t *)&g28 = v12;\n            v9 = v12;\n        }\n        // 0x40660a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g31; // 0x40660a\n        int32_t v14 = v7; // 0x406611\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g31 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x406641\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40664b\n    int64_t * v17 = (int64_t *)v15; // 0x40664e\n    uint64_t v18 = *v17; // 0x40664e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x406651\n    int64_t result = *v19; // 0x406651\n    int64_t v20; // 0x406590\n    uint64_t v21 = function_405360(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x406674\n    if (v18 > v21) {\n        // 0x4066eb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x406687\n    *v17 = v22;\n    if (result != (int64_t)&g45) {\n        // 0x406697\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_408240(v22); // 0x4066b1\n    *v19 = result2;\n    int64_t v23; // 0x406590\n    function_405360(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4066eb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406730",
            "funcStartAddr": "406730",
            "funcEndAddr": "406764",
            "decompiledFuncCode": "int64_t function_406730(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x406737\n    int64_t result = function_408440(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x406756\n    return result;\n}\n"
        },
        {
            "funcName": "function_406770",
            "funcStartAddr": "406770",
            "funcEndAddr": "40677f",
            "decompiledFuncCode": "int64_t function_406770(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x40677c\n    return result;\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "40678f",
            "decompiledFuncCode": "int64_t function_406780(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x406788\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_406790",
            "funcStartAddr": "406790",
            "funcEndAddr": "4067c3",
            "decompiledFuncCode": "int64_t function_406790(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x4067a9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4067ae\n    uint32_t v3 = *v2; // 0x4067ae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4067b2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "4067e3",
            "decompiledFuncCode": "int64_t function_4067d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x4067dc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4067f0",
            "funcStartAddr": "4067f0",
            "funcEndAddr": "40681b",
            "decompiledFuncCode": "int64_t function_4067f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x4067f8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x406815\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40680c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_406820",
            "funcStartAddr": "406820",
            "funcEndAddr": "406892",
            "decompiledFuncCode": "int64_t function_406820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x406842\n    int32_t * v2 = __errno_location(); // 0x40684b\n    uint32_t v3 = *(int32_t *)v1; // 0x40686b\n    int64_t result = function_405360(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40687a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068a0",
            "funcStartAddr": "4068a0",
            "funcEndAddr": "406981",
            "decompiledFuncCode": "int64_t function_4068a0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x4068c2\n    int32_t * v2 = __errno_location(); // 0x4068c8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4068e7\n    int32_t * v4 = (int32_t *)v1; // 0x4068ea\n    int64_t v5 = function_405360(0, 0, a1, a2, (int64_t)*v4, v3); // 0x406905\n    int64_t v6 = v5 + 1; // 0x40690a\n    int64_t result = function_408240(v6); // 0x40691f\n    function_405360(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x406964\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40696d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "40699a",
            "decompiledFuncCode": "int64_t function_406990(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406990\n    return function_4068a0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4069a0",
            "funcStartAddr": "4069a0",
            "funcEndAddr": "406a35",
            "decompiledFuncCode": "int64_t function_4069a0(void) {\n    uint32_t v1 = *(int32_t *)&g31; // 0x4069a0\n    int64_t v2 = v1; // 0x4069a0\n    int64_t v3 = v2; // 0x4069b4\n    if (v1 >= 2) {\n        int64_t v4 = &g31;\n        int64_t v5 = v4 + 16; // 0x4069d3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g59;\n        while (v5 != (int64_t)g28 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4069d0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g59;\n        }\n    }\n    int64_t v6 = v3; // 0x4069ed\n    if (g29 != 0x60f3c0) {\n        // 0x4069ef\n        free((int64_t *)g29);\n        g29 = 256;\n        *(int64_t *)&g30 = (int64_t)&g45;\n        v6 = &g59;\n    }\n    int64_t result = v6; // 0x406a11\n    if (g28 != &g29) {\n        // 0x406a13\n        free(g28);\n        *(int64_t *)&g28 = (int64_t)&g29;\n        result = &g59;\n    }\n    // 0x406a26\n    *(int32_t *)&g31 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a40",
            "funcStartAddr": "406a40",
            "funcEndAddr": "406a51",
            "decompiledFuncCode": "int64_t function_406a40(void) {\n    // 0x406a40\n    int64_t v1; // 0x406a40\n    return function_406590(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_406a60",
            "funcStartAddr": "406a60",
            "funcEndAddr": "406a6a",
            "decompiledFuncCode": "int64_t function_406a60(void) {\n    // 0x406a60\n    int64_t v1; // 0x406a60\n    return function_406590(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_406a70",
            "funcStartAddr": "406a70",
            "funcEndAddr": "406a86",
            "decompiledFuncCode": "int64_t function_406a70(int64_t a1) {\n    // 0x406a70\n    return function_406590(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_406a90",
            "funcStartAddr": "406a90",
            "funcEndAddr": "406aa2",
            "decompiledFuncCode": "int64_t function_406a90(int64_t a1, int64_t a2) {\n    // 0x406a90\n    return function_406590(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_406ab0",
            "funcStartAddr": "406ab0",
            "funcEndAddr": "406b18",
            "decompiledFuncCode": "int64_t function_406ab0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406ac0\n    return function_406590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406b20",
            "funcStartAddr": "406b20",
            "funcEndAddr": "406b84",
            "decompiledFuncCode": "int64_t function_406b20(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406b30\n    return function_406590((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_406b90",
            "funcStartAddr": "406b90",
            "funcEndAddr": "406b9c",
            "decompiledFuncCode": "int64_t function_406b90(int64_t a1, int64_t a2) {\n    // 0x406b90\n    return function_406ab0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_406ba0",
            "funcStartAddr": "406ba0",
            "funcEndAddr": "406baf",
            "decompiledFuncCode": "int64_t function_406ba0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406ba0\n    return function_406b20(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406c20",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x406bbd\n    int128_t v2 = __asm_movdqa(g47); // 0x406bc5\n    int128_t v3 = __asm_movdqa(g48); // 0x406bcd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x406be2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x406bf8\n    uint32_t v6 = *v5; // 0x406bf8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x406bfd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_406590(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "406c2d",
            "decompiledFuncCode": "int64_t function_406c20(int64_t a1, int64_t a2) {\n    // 0x406c20\n    return function_406bb0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_406c30",
            "funcStartAddr": "406c30",
            "funcEndAddr": "406c41",
            "decompiledFuncCode": "int64_t function_406c30(int64_t a1) {\n    // 0x406c30\n    return function_406bb0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "406c5a",
            "decompiledFuncCode": "int64_t function_406c50(void) {\n    // 0x406c50\n    int64_t v1; // 0x406c50\n    return function_406bb0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_406c60",
            "funcStartAddr": "406c60",
            "funcEndAddr": "406cce",
            "decompiledFuncCode": "int64_t function_406c60(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406c7a\n    return function_406590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406cd0",
            "funcStartAddr": "406cd0",
            "funcEndAddr": "406d3c",
            "decompiledFuncCode": "int64_t function_406cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x406cd7\n    int128_t v2 = __asm_movdqa(g47); // 0x406cdf\n    int128_t v3 = __asm_movdqa(g48); // 0x406ce7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x406d09\n    if (a2 == 0 || a3 == 0) {\n        // 0x406d37\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406d1a\n    return function_406590(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "406d49",
            "decompiledFuncCode": "int64_t function_406d40(void) {\n    // 0x406d40\n    int64_t v1; // 0x406d40\n    return function_406cd0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_406d50",
            "funcStartAddr": "406d50",
            "funcEndAddr": "406d67",
            "decompiledFuncCode": "int64_t function_406d50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406d50\n    return function_406cd0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_406d70",
            "funcStartAddr": "406d70",
            "funcEndAddr": "406d83",
            "decompiledFuncCode": "int64_t function_406d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x406d70\n    return function_406cd0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_406d90",
            "funcStartAddr": "406d90",
            "funcEndAddr": "406d9a",
            "decompiledFuncCode": "int64_t function_406d90(void) {\n    // 0x406d90\n    int64_t v1; // 0x406d90\n    return function_406590(v1, v1, v1, &g27);\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406db2",
            "decompiledFuncCode": "int64_t function_406da0(int64_t a1, int64_t a2) {\n    // 0x406da0\n    return function_406590(0, a1, a2, &g27);\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "406dd1",
            "decompiledFuncCode": "int64_t function_406dc0(int64_t a1, int64_t a2) {\n    // 0x406dc0\n    return function_406590(a1, a2, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_406de0",
            "funcStartAddr": "406de0",
            "funcEndAddr": "406df6",
            "decompiledFuncCode": "int64_t function_406de0(int64_t a1) {\n    // 0x406de0\n    return function_406590(0, a1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_406e00",
            "funcStartAddr": "406e00",
            "funcEndAddr": "406e23",
            "decompiledFuncCode": "int64_t function_406e00(int64_t a1) {\n    int64_t result = function_408240(24); // 0x406e09\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e30",
            "funcStartAddr": "406e30",
            "funcEndAddr": "406e5f",
            "decompiledFuncCode": "int64_t function_406e30(void) {\n    // 0x406e30\n    int64_t v1; // 0x406e30\n    int64_t v2 = function_407050(v1, v1, v1); // 0x406e31\n    int64_t result = 0; // 0x406e3e\n    if (v2 != 0) {\n        // 0x406e40\n        result = function_408240(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x406e5d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e60",
            "funcStartAddr": "406e60",
            "funcEndAddr": "406e64",
            "decompiledFuncCode": "int64_t function_406e60(int64_t result) {\n    // 0x406e60\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e70",
            "funcStartAddr": "406e70",
            "funcEndAddr": "406f65",
            "decompiledFuncCode": "int64_t function_406e70(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x406e77\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x406e8b\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x406e8f\n    int64_t v4; // bp-64, 0x406e70\n    int64_t v5 = &v4;\n    int64_t v6 = *v3; // 0x406e93\n    int64_t result = *v2; // 0x406e93\n    int64_t v7; // 0x406e70\n    while (true) {\n        int64_t v8 = result;\n        int64_t v9 = v6;\n        int64_t v10 = v9; // 0x406ed0\n        int64_t v11; // 0x406e70\n        int64_t v12; // 0x406e70\n        if (v9 >= a2) {\n            // 0x406e98\n            v12 = v9;\n            v11 = v8;\n            v7 = v8;\n            if (v9 == a2) {\n                // break -> 0x406f2f\n                break;\n            }\n        } else {\n            int64_t v13 = 1; // 0x406ee4\n            int64_t v14 = 256 * v10 | 255; // 0x406ee8\n            v10 = v14;\n            int64_t v15 = v13; // 0x406ef1\n            while (v14 < a2) {\n                // 0x406ee0\n                v13 = v15 + 1;\n                v14 = 256 * v10 | 255;\n                v10 = v14;\n                v15 = v13;\n            }\n            // 0x406ef3\n            function_407360(a1, v5, v13);\n            int64_t v16 = v5; // 0x406f05\n            int64_t v17 = 256 * v9 | 255; // 0x406f17\n            int64_t v18 = 256 * v8 | (int64_t)*(char *)v16; // 0x406f1e\n            v16++;\n            int64_t v19 = v17; // 0x406f24\n            int64_t v20 = v18; // 0x406f24\n            while (v17 < a2) {\n                // 0x406f08\n                v17 = 256 * v19 | 255;\n                v18 = 256 * v20 | (int64_t)*(char *)v16;\n                v16++;\n                v19 = v17;\n                v20 = v18;\n            }\n            // 0x406f26\n            v12 = v17;\n            v11 = v18;\n            v7 = v18;\n            if (v17 == a2) {\n                // break -> 0x406f2f\n                break;\n            }\n        }\n        uint64_t v21 = v11;\n        uint64_t v22 = v12 - a2; // 0x406ea6\n        uint64_t v23 = v22 % v1;\n        result = v21 % v1;\n        v6 = v23 - 1;\n        if (v21 <= v12 - v23) {\n            // 0x406f58\n            *v2 = v21 / v1;\n            *v3 = v22 / v1;\n            return result;\n        }\n    }\n    // 0x406f2f\n    *v3 = 0;\n    *v2 = 0;\n    result = v7;\n  lab_0x406f3f:\n    // 0x406f3f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "406f8e",
            "decompiledFuncCode": "int64_t function_406f70(int64_t a1) {\n    // 0x406f70\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g59;\n}\n"
        },
        {
            "funcName": "function_406f90",
            "funcStartAddr": "406f90",
            "funcEndAddr": "406fe1",
            "decompiledFuncCode": "int64_t function_406f90(int64_t a1) {\n    int64_t v1 = function_4074c0(a1); // 0x406fa0\n    int32_t * v2 = __errno_location(); // 0x406fa8\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406ff0",
            "funcStartAddr": "406ff0",
            "funcEndAddr": "40704d",
            "decompiledFuncCode": "int64_t function_406ff0(int64_t a1) {\n    // 0x406ff0\n    function_406de0(a1);\n    int32_t * err_num = __errno_location(); // 0x407007\n    char * format; // 0x406ff0\n    if (*err_num == 0) {\n        // 0x40703f\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x407019\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x407025\n    error(g26, *err_num, format);\n    return &g59;\n}\n"
        },
        {
            "funcName": "function_407050",
            "funcStartAddr": "407050",
            "funcEndAddr": "40733f",
            "decompiledFuncCode": "int64_t function_407050(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_408240(0x1038); // 0x40716d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x406ff0;\n        *(int64_t *)(result + 16) = 0;\n        // 0x4070c2\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_409b20(a1, \"rb\"); // 0x407077\n        int64_t result2 = 0; // 0x407082\n        if (stream != 0) {\n            // 0x407088\n            result2 = function_408240(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x4070a4\n            *(int64_t *)(result2 + 8) = 0x406ff0;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x4070c2\n        return result2;\n    }\n    int64_t result3 = function_408240(0x1038); // 0x4070dd\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x4070f3\n    *(int64_t *)(result3 + 8) = 0x406ff0;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x407111\n    int64_t v2; // 0x407050\n    int128_t pid2; // bp-72, 0x407050\n    if (fd < 0) {\n        // 0x407198\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x4071b7\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x40713b\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x407158\n            function_4077c0(v1);\n            // 0x4070c2\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x4072c6\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x4072d2\n        uint64_t v7 = v6 + v4; // 0x4072d8\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x407158\n            function_4077c0(v1);\n            // 0x4070c2\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x407301\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x40730d\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x407325\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x407158\n            function_4077c0(v1);\n            // 0x4070c2\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x4071cd\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x4071d4\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x4071f0\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x4071ee\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x4071ff\n    if (v16 >= 2048) {\n        // 0x407158\n        function_4077c0(v1);\n        // 0x4070c2\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x40721a\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x407221\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x40723f\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x40723d\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x40724e\n    if (v21 >= 2048) {\n        // 0x407158\n        function_4077c0(v1);\n        // 0x4070c2\n        return result3;\n    }\n    // 0x40725e\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x407276\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x40727d\n    if (v23 == 0) {\n        // 0x407158\n        function_4077c0(v1);\n        // 0x4070c2\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x40728f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x40728d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x407158\n    function_4077c0(v1);\n    // 0x4070c2\n    return result3;\n}\n"
        },
        {
            "funcName": "function_407340",
            "funcStartAddr": "407340",
            "funcEndAddr": "407345",
            "decompiledFuncCode": "int64_t function_407340(int64_t a1, int64_t a2) {\n    // 0x407340\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x407340\n    return result;\n}\n"
        },
        {
            "funcName": "function_407350",
            "funcStartAddr": "407350",
            "funcEndAddr": "407355",
            "decompiledFuncCode": "int64_t function_407350(int64_t a1, int64_t a2) {\n    // 0x407350\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x407350\n    return result;\n}\n"
        },
        {
            "funcName": "function_407360",
            "funcStartAddr": "407360",
            "funcEndAddr": "4074bc",
            "decompiledFuncCode": "int64_t function_407360(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 != 0) {\n        int32_t * v1 = __errno_location(); // 0x40737f\n        int64_t result = fread_unlocked((int64_t *)a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x4073ba\n        int64_t v2 = a3 - result; // 0x4073c5\n        if (v2 == 0) {\n            // 0x4073ca\n            return result;\n        }\n        int64_t v3 = v2; // 0x4073c5\n        int64_t v4 = result + a2; // 0x4073c2\n        int64_t v5 = *(int64_t *)(a1 + 16); // 0x407394\n        *v1 = (a2 & 32) == 0 ? 0 : *v1;\n        int64_t result2 = fread_unlocked((int64_t *)v4, 1, (int32_t)v3, (struct _IO_FILE *)v5); // 0x4073ba\n        v3 -= result2;\n        while (v3 != 0) {\n            int64_t v6 = v4;\n            v4 = result2 + v6;\n            v5 = *(int64_t *)(a1 + 16);\n            *v1 = (v6 & 32) == 0 ? 0 : *v1;\n            result2 = fread_unlocked((int64_t *)v4, 1, (int32_t)v3, (struct _IO_FILE *)v5);\n            v3 -= result2;\n        }\n        // 0x4073ca\n        return result2;\n    }\n    int64_t v7 = *(int64_t *)24; // 0x4073e0\n    int64_t v8 = a3; // 0x4073f2\n    int64_t * v9; // 0x407360\n    int64_t v10; // 0x407360\n    int64_t v11; // 0x407360\n    int64_t v12; // 0x407360\n    if (v7 < a3) {\n        int64_t v13 = v7;\n        int64_t v14 = v13 + a2; // 0x407403\n        v8 -= v13;\n        memcpy((int64_t *)a2, (int64_t *)(0x1038 - v13), (int32_t)v13);\n        while (v14 % 8 != 0) {\n            // 0x40741a\n            function_407510(32, 2104);\n            v12 = v8;\n            v11 = v14;\n            v9 = (int64_t *)2104;\n            v10 = 2048;\n            if (v8 < 2049) {\n                goto lab_0x407475;\n            }\n            v13 = 2048;\n            int64_t v15 = v14;\n            v14 = v13 + v15;\n            v8 -= v13;\n            memcpy((int64_t *)v15, (int64_t *)(0x1038 - v13), (int32_t)v13);\n        }\n        int64_t v16 = v14;\n        int64_t v17 = v8;\n        while (v17 >= 2048) {\n            int64_t result3 = function_407510(32, v16); // 0x40744d\n            int64_t v18 = v17 - 2048; // 0x407452\n            if (v18 == 0) {\n                // 0x407498\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v16 += 2048;\n            v17 = v18;\n        }\n        // 0x407464\n        function_407510(32, 2104);\n        v12 = v17;\n        v11 = v16;\n        v9 = (int64_t *)2104;\n        v10 = 2048;\n    } else {\n        // 0x4074b0\n        v12 = a3;\n        v11 = a2;\n        v9 = (int64_t *)(0x1038 - v7);\n        v10 = v7;\n    }\n  lab_0x407475:;\n    int64_t * dest_mem = memcpy((int64_t *)v11, v9, (int32_t)v12); // 0x40747e\n    *(int64_t *)24 = v10 - v12;\n    // 0x4073ca\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_4074c0",
            "funcStartAddr": "4074c0",
            "funcEndAddr": "407509",
            "decompiledFuncCode": "int64_t function_4074c0(int64_t a1) {\n    // 0x4074c0\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    return a1 == 0 ? 0 : (int64_t)&g59;\n}\n"
        },
        {
            "funcName": "function_407510",
            "funcStartAddr": "407510",
            "funcEndAddr": "4077b5",
            "decompiledFuncCode": "int64_t function_407510(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x407510\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x407517\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x407526\n    int64_t v4 = *v1 + 1; // 0x407530\n    *v1 = v4;\n    int64_t v5 = a2; // 0x407541\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x407552\n    int64_t v9 = *v8; // 0x407552\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x407558\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x407573\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x407592\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x407598\n    int64_t v14 = *v13; // 0x407598\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x40759c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x4075c0\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x4075d5\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x4075dc\n    int64_t v19 = *v18; // 0x4075dc\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x4075e0\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x4075fb\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x40760d\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x407618\n    int64_t v24 = *v23; // 0x407618\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x407629\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x407640\n    int64_t v27 = v7 + 32; // 0x407643\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x40765d\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x407548\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x40767b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x40768a\n    int64_t v33 = *v32; // 0x40768a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x407690\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x4076b5\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x4076c6\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x4076cd\n    int64_t v38 = *v37; // 0x4076cd\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x4076d4\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x4076f8\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x40770d\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x407714\n    int64_t v43 = *v42; // 0x407714\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x407718\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x407733\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x407745\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x407750\n    int64_t v48 = *v47; // 0x407750\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x407761\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x407778\n    int64_t result = v31 + 32; // 0x40777b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x407795\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x407680\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x4077a5\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4077c0",
            "funcStartAddr": "4077c0",
            "funcEndAddr": "4079f4",
            "decompiledFuncCode": "int64_t function_4077c0(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x407807\n    int64_t v2 = a1; // 0x407823\n    int64_t * v3 = (int64_t *)v2; // 0x407828\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x40782b\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x40782b\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x40782f\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x40782f\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x407833\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x40783a\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x40783e\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x40784b\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x40784e\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x407855\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x407862\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x407865\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x40786c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x407879\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x40787c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x407883\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x407890\n    int64_t v21 = v5 - v20; // 0x407896\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x4078a0\n    uint64_t v23 = v11 - v22; // 0x4078a9\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x4078b4\n    int64_t v25 = v14 - v24; // 0x4078be\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x4078cd\n    int64_t v27 = v23 + v25; // 0x4078d3\n    int64_t v28 = v17 - v26; // 0x4078d6\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x4078e1\n    int64_t v30 = v28 + v25; // 0x4078e4\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x4078fa\n    while (v1 != v2) {\n        // 0x407828\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x407900\n    uint64_t v33 = *v32 + v28; // 0x407900\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x407904\n    int64_t v35 = *v34 + v29; // 0x407904\n    int64_t * v36 = (int64_t *)v31; // 0x407908\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x40790e\n    int64_t v38 = *v36 + v20 - v35; // 0x407912\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x407919\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x40791d\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x407921\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x407927\n    uint64_t v43 = *v39 + v22 - v41; // 0x40792e\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x407935\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x407939\n    int64_t v46 = *v42 + v24 - v45; // 0x407942\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x407949\n    uint64_t v48 = *v44 + v26 - v47; // 0x407952\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x407959\n    int64_t v50 = v35 - v49; // 0x407962\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x40796c\n    uint64_t v52 = v41 - v51; // 0x407975\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x407980\n    int64_t result = v52 + v50; // 0x407983\n    int64_t v54 = v45 - v53; // 0x40798a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x407995\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x407999\n    int64_t v57 = v54 + v52; // 0x40799f\n    int64_t v58 = v47 - v56; // 0x4079a2\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x4079ad\n    int64_t v60 = v58 + v54; // 0x4079b0\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x407900\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x4079cc\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407a00",
            "funcStartAddr": "407a00",
            "funcEndAddr": "407c42",
            "decompiledFuncCode": "int64_t function_407a00(int64_t fd, int64_t a2, int64_t fd2, int64_t a4, int64_t a5) {\n    int32_t result = syscall(SYS_vmsplice); // 0x407a34\n    if (result >= 0) {\n        // 0x407a7b\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x407a43\n    int32_t v2 = *v1; // 0x407a4f\n    if (v2 != 95 && (v2 - 22 & -17) != 0) {\n        // 0x407a7b\n        return result;\n    }\n    int64_t v3 = (int64_t)v1; // 0x407a43\n    char * str2; // 0x407a00\n    char v4; // 0x407a00\n    int64_t v5; // 0x407a00\n    int64_t v6; // bp-200, 0x407a00\n    if ((int32_t)a5 == 0) {\n        // 0x407a66\n        str2 = (char *)a4;\n        v5 = v3;\n        v4 = !((v2 == 95 | (v2 - 22 & -17) == 0));\n    } else {\n        if ((a5 & 0xfffffffe) != 0) {\n            // 0x407a6f\n            *v1 = 95;\n            // 0x407a7b\n            return -1;\n        }\n        char * v7 = (char *)a4;\n        int32_t v8 = __fxstatat(1, (int32_t)fd2, v7, (struct stat *)&v6, 256); // 0x407aae\n        int64_t v9 = 0x100000000 * v3 >> 32; // 0x407ab3\n        int32_t * v10 = (int32_t *)v9;\n        if (v8 == 0) {\n            // 0x407c10\n            *v10 = 17;\n            // 0x407a7b\n            return -1;\n        }\n        int32_t v11 = *v10; // 0x407ac0\n        if (v11 == 75) {\n            // 0x407c10\n            *v10 = 17;\n            // 0x407a7b\n            return -1;\n        }\n        // 0x407acc\n        str2 = v7;\n        v5 = v9;\n        v4 = 1;\n        if (v11 != 2) {\n            // 0x407a7b\n            return -1;\n        }\n    }\n    char * str = (char *)a2; // 0x407ae8\n    int32_t len = strlen(str); // 0x407ae8\n    int32_t len2 = strlen(str2); // 0x407af3\n    if (len == 0 || len2 == 0) {\n        // 0x407a7b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x407b0f\n    if (*(char *)(a2 - 1 + (int64_t)len) != 47) {\n        // 0x407b16\n        if (*(char *)(a4 - 1 + (int64_t)len2) != 47) {\n            // 0x407a7b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n    }\n    // 0x407b22\n    int64_t v12; // bp-344, 0x407a00\n    if (__fxstatat(1, (int32_t)fd, str, (struct stat *)&v12, 256) != 0) {\n        // 0x407a7b\n        return -1;\n    }\n    int64_t v13 = 0x100000000 * v5 >> 32; // 0x407b49\n    int32_t v14; // 0x407a00\n    if (v4 != 0) {\n        if ((v14 & 0xf000) == 0x4000) {\n            // 0x407a7b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n        // 0x407b64\n        *(int32_t *)v13 = 2;\n        // 0x407a7b\n        return -1;\n    }\n    // 0x407bb0\n    if (__fxstatat(1, (int32_t)fd2, str2, (struct stat *)&v6, 256) != 0) {\n        // 0x407bdc\n        if (*(int32_t *)v13 != 2 || (v14 & 0xf000) != 0x4000) {\n            // 0x407a7b\n            return -1;\n        }\n        // 0x407a7b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    if ((v14 & 0xf000) != 0x4000) {\n        // 0x407b8f\n        *(int32_t *)v13 = 20;\n        // 0x407a7b\n        return -1;\n    }\n    if ((v14 & 0xf000) == 0x4000) {\n        // 0x407a7b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x407c31\n    *(int32_t *)v13 = 21;\n    // 0x407a7b\n    return -1;\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "407c9e",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x407c5c\n    if (fd >= 3) {\n        // 0x407c61\n        return a1 & 0xffffffff;\n    }\n    // 0x407c70\n    int64_t v1; // 0x407c50\n    int64_t v2 = function_40a190(a1, v1); // 0x407c70\n    int32_t * v3 = __errno_location(); // 0x407c78\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407ca0",
            "funcStartAddr": "407ca0",
            "funcEndAddr": "40807d",
            "decompiledFuncCode": "int64_t function_407ca0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x407d38\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x407cbc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x407cd6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x407d1b\n    if (a6 < 10) {\n        // 0x407d2a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x407e22\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_408080",
            "funcStartAddr": "408080",
            "funcEndAddr": "4080a0",
            "decompiledFuncCode": "int64_t function_408080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408080\n    if (a5 == 0) {\n        // 0x40809b\n        return function_407ca0(a1, a2, a3, a4, a5, 0, (int64_t)&g59);\n    }\n    int64_t v1 = 0; // 0x408087\n    v1++;\n    int64_t v2 = v1; // 0x408099\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x408090\n        v1++;\n        v2 = v1;\n    }\n    // 0x40809b\n    return function_407ca0(a1, a2, a3, a4, a5, v2, (int64_t)&g59);\n}\n"
        },
        {
            "funcName": "function_4080a0",
            "funcStartAddr": "4080a0",
            "funcEndAddr": "408100",
            "decompiledFuncCode": "int64_t function_4080a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4080a0\n    int64_t v3 = &v2; // 0x4080a0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4080d3\n    int64_t v6; // 0x4080bd\n    int64_t * v7; // 0x4080db\n    int64_t v8; // 0x4080db\n    int64_t v9; // 0x4080e7\n    if (v5 < 48) {\n        // 0x4080b0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4080f3\n            break;\n        }\n    } else {\n        // 0x4080db\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4080f3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4080d1\n    while (v4 != 9) {\n        // 0x4080c9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4080b0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4080f3\n                break;\n            }\n        } else {\n            // 0x4080db\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4080f3\n                break;\n            }\n        }\n        // 0x4080c9\n        v10 = 10;\n    }\n    // 0x4080f3\n    return function_407ca0(a1, a2, a3, a4, v3, v10, (int64_t)&g59);\n}\n"
        },
        {
            "funcName": "function_408100",
            "funcStartAddr": "408100",
            "funcEndAddr": "4081bc",
            "decompiledFuncCode": "int64_t function_408100(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x408100\n    int64_t v1; // bp-168, 0x408100\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x408100\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x408100\n    int64_t v8; // 0x408100\n    int64_t v9; // bp-56, 0x408100\n    int64_t v10; // 0x408165\n    int64_t v11; // 0x408189\n    if ((int32_t)v6 < 48) {\n        // 0x408150\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4081a0\n            break;\n        }\n    } else {\n        // 0x408182\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4081a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40817a\n    int64_t v13 = 10; // 0x40817a\n    while (v5 != 9) {\n        // 0x40817c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x408150\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4081a0\n                break;\n            }\n        } else {\n            // 0x408182\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4081a0\n                break;\n            }\n        }\n        // 0x408172\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4081a0\n    int64_t v14; // bp-136, 0x408100\n    int64_t result = function_407ca0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g59); // 0x4081af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4081c0",
            "funcStartAddr": "4081c0",
            "funcEndAddr": "408234",
            "decompiledFuncCode": "int64_t function_4081c0(int64_t a1) {\n    // 0x4081c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x408223\n    return fputs_unlocked(v1, g36);\n}\n"
        },
        {
            "funcName": "function_408240",
            "funcStartAddr": "408240",
            "funcEndAddr": "40825a",
            "decompiledFuncCode": "int64_t function_408240(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x408244\n    if (size != 0 != (mem == NULL)) {\n        // 0x408253\n        return (int64_t)mem;\n    }\n    // 0x408255\n    function_408490(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408260",
            "funcStartAddr": "408260",
            "funcEndAddr": "408281",
            "decompiledFuncCode": "int64_t function_408260(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x408263\n    int64_t v2 = v1; // 0x408263\n    if (v2 < 0) {\n        // 0x40827b\n        function_408490(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408279\n        return function_408240(v2);\n    }\n    // 0x40827b\n    function_408490(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408290",
            "funcStartAddr": "408290",
            "funcEndAddr": "408292",
            "decompiledFuncCode": "int64_t function_408290(void) {\n    // 0x408290\n    int64_t v1; // 0x408290\n    return function_408240(v1);\n}\n"
        },
        {
            "funcName": "function_4082a0",
            "funcStartAddr": "4082a0",
            "funcEndAddr": "4082d6",
            "decompiledFuncCode": "int64_t function_4082a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4082c8\n        free(v1);\n        return (int32_t)&g59 ^ (int32_t)&g59;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4082b1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4082c0\n        return (int64_t)mem;\n    }\n    // 0x4082d1\n    function_408490(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4082e0",
            "funcStartAddr": "4082e0",
            "funcEndAddr": "408301",
            "decompiledFuncCode": "int64_t function_4082e0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4082e3\n    int64_t v2 = v1; // 0x4082e3\n    if (v2 < 0) {\n        // 0x4082fb\n        function_408490(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4082f9\n        return function_4082a0(a1, v2);\n    }\n    // 0x4082fb\n    function_408490(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408310",
            "funcStartAddr": "408310",
            "funcEndAddr": "408396",
            "decompiledFuncCode": "int64_t function_408310(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40836b\n            function_408490(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4082a0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x408353\n    if (a2 == 0) {\n        // 0x408378\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x408358\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40836b\n        function_408490(a1);\n        // UNREACHABLE\n    }\n    // 0x40833a\n    *(int64_t *)a2 = v2;\n    return function_4082a0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4083a0",
            "funcStartAddr": "4083a0",
            "funcEndAddr": "4083f0",
            "decompiledFuncCode": "int64_t function_4083a0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4083a0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4083ea\n            function_408490(a1);\n            // UNREACHABLE\n        }\n        // 0x4083c2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4082a0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4083d5\n        *(int64_t *)a2 = 128;\n        return function_4082a0(0, 128);\n    }\n    // 0x4083e8\n    if (a2 < 0) {\n        // 0x4083ea\n        function_408490(a1);\n        // UNREACHABLE\n    }\n    // 0x4083c2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4082a0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4083f0",
            "funcStartAddr": "4083f0",
            "funcEndAddr": "408407",
            "decompiledFuncCode": "int64_t function_4083f0(int64_t a1, int64_t a2) {\n    // 0x4083f0\n    return (int64_t)memset((int64_t *)function_408240(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_408410",
            "funcStartAddr": "408410",
            "funcEndAddr": "40843e",
            "decompiledFuncCode": "int64_t function_408410(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x408417\n    if ((int64_t)v1 < 0) {\n        // 0x408439\n        function_408490(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x408439\n        function_408490(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40842a\n    if (mem != NULL) {\n        // 0x408434\n        return (int64_t)mem;\n    }\n    // 0x408439\n    function_408490(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408440",
            "funcStartAddr": "408440",
            "funcEndAddr": "408468",
            "decompiledFuncCode": "int64_t function_408440(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408240(a2); // 0x40844f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_408470",
            "funcStartAddr": "408470",
            "funcEndAddr": "408483",
            "decompiledFuncCode": "int64_t function_408470(int64_t str) {\n    // 0x408470\n    return function_408440(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_408490",
            "funcStartAddr": "408490",
            "funcEndAddr": "4084c1",
            "decompiledFuncCode": "int64_t function_408490(int64_t a1) {\n    // 0x408490\n    error(g26, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4084d0",
            "funcStartAddr": "4084d0",
            "funcEndAddr": "4085a0",
            "decompiledFuncCode": "int64_t function_4084d0(int64_t a1, int32_t a2, int32_t a3, uint64_t a4, char * a5, int64_t a6, int64_t a7) {\n    // 0x4084d0\n    int64_t result2; // bp-64, 0x4084d0\n    int32_t v1 = function_4085d0(a1, NULL, a2, (int64_t)&result2, a5, a6); // 0x4084fc\n    int32_t * v2; // 0x4084d0\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x40857a\n        if (v1 == 1) {\n            // 0x408598\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x408587\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x40858c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x408500\n        if (result >= (int64_t)a3 && result <= a4) {\n            // 0x408562\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x40850f\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_406de0(a1); // 0x40852c\n    int32_t v6 = *v2; // 0x408531\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x408547\n    int32_t v7 = a7; // 0x40854a\n    error(v7 == 0 ? 1 : v7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x408562\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4085a0",
            "funcStartAddr": "4085a0",
            "funcEndAddr": "4085c1",
            "decompiledFuncCode": "int64_t function_4085a0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x4085a0\n    return function_4084d0(a1, 10, a2, a3, (char *)a4, a5, (int64_t)a6);\n}\n"
        },
        {
            "funcName": "function_4085d0",
            "funcStartAddr": "4085d0",
            "funcEndAddr": "408a8b",
            "decompiledFuncCode": "int64_t function_4085d0(int64_t a1, int64_t * a2, uint32_t a3, int64_t a4, char * str, int64_t a6) {\n    if (a3 >= 37) {\n        // 0x4089eb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        if (fileno((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\") < 0) {\n            // 0x408a77\n            return fclose((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\");\n        }\n        int64_t v1 = (int64_t)\"lib/xstrtol.c\"; // 0x408a2a\n        if (__freading((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\") != 0) {\n            int32_t fd = fileno((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\"); // 0x408a5b\n            v1 = 0;\n            if (lseek(fd, 0, SEEK_CUR) == -1) {\n                // 0x408a77\n                return fclose((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\");\n            }\n        }\n        // 0x408a2c\n        if ((int32_t)function_408bd0((int64_t)\"0 <= strtol_base && strtol_base <= 36\", v1) == 0) {\n            // 0x408a77\n            return fclose((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\");\n        }\n        int32_t * v2 = __errno_location(); // 0x408a38\n        int32_t v3 = *v2; // 0x408a40\n        int64_t result = fclose((struct _IO_FILE *)\"0 <= strtol_base && strtol_base <= 36\"); // 0x408a4e\n        if (v3 != 0) {\n            // 0x408a80\n            *v2 = v3;\n            result = 0xffffffff;\n        }\n        // 0x408a50\n        return result;\n    }\n    char c = a1;\n    int32_t * v4 = __errno_location(); // 0x408602\n    *v4 = 0;\n    int64_t v5 = (int64_t)*__ctype_b_loc() + 1; // 0x408632\n    int64_t v6 = a1; // 0x408637\n    char v7 = c; // 0x408637\n    if ((*(char *)(v5 + (2 * a1 & 510)) & 32) != 0) {\n        v6++;\n        unsigned char v8 = *(char *)v6; // 0x40862c\n        v7 = v8;\n        while ((*(char *)(2 * (int64_t)v8 + v5) & 32) != 0) {\n            // 0x408628\n            v6++;\n            v8 = *(char *)v6;\n            v7 = v8;\n        }\n    }\n    // 0x408639\n    if (v7 == 45) {\n        // 0x408675\n        return 4;\n    }\n    // 0x40863e\n    int64_t v9; // bp-64, 0x4085d0\n    int64_t * v10 = a2 == NULL ? &v9 : a2;\n    int32_t v11 = __strtoul_internal((char *)a1, (char **)v10, a3, 0); // 0x408646\n    int64_t v12 = *v10; // 0x40864b\n    char v13; // 0x4085d0\n    int64_t v14; // 0x4085d0\n    int64_t v15; // 0x4085d0\n    int64_t v16; // 0x4085d0\n    int64_t v17; // 0x4085d0\n    int64_t v18; // 0x4085d0\n    int64_t v19; // 0x4085d0\n    if (v12 == a1) {\n        // 0x4086a8\n        if (c == 0 || str == NULL) {\n            // 0x408675\n            return 4;\n        }\n        char * found_char_pos = strchr(str, (int32_t)c); // 0x4086c9\n        v18 = 1;\n        v15 = 0;\n        v13 = c;\n        if (found_char_pos == NULL) {\n            // 0x408675\n            return 4;\n        }\n        goto lab_0x4086d7;\n    } else {\n        int32_t v20 = *v4; // 0x408656\n        int64_t v21 = 0; // 0x40865c\n        if (v20 != 0) {\n            // 0x408690\n            v21 = 1;\n            if (v20 != 34) {\n                // 0x408675\n                return 4;\n            }\n        }\n        int64_t v22 = v11; // 0x408646\n        v17 = v22;\n        v14 = v21;\n        if (str == NULL) {\n            goto lab_0x408672;\n        } else {\n            char c2 = *(char *)v12; // 0x408665\n            v17 = v22;\n            v14 = v21;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr(str, (int32_t)c2); // 0x4087d3\n                v18 = v22;\n                v15 = v21;\n                v13 = c2;\n                v19 = v22;\n                v16 = v21;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4086d7;\n                } else {\n                    goto lab_0x4087e5;\n                }\n            } else {\n                goto lab_0x408672;\n            }\n        }\n    }\n  lab_0x4086d7:;\n    int64_t v23 = 0x100000000 * v12 >> 32;\n    unsigned char v24 = v13 - 69;\n    int64_t v25 = 1024; // 0x4086df\n    int64_t v26 = 1; // 0x4086df\n    int64_t v27; // 0x4085d0\n    int64_t v28; // 0x4085d0\n    int64_t v29; // 0x4085d0\n    int64_t v30; // 0x4085d0\n    int64_t v31; // 0x4085d0\n    int64_t v32; // 0x4085d0\n    int64_t v33; // 0x4085d0\n    int64_t v34; // 0x4085d0\n    int64_t v35; // 0x4085d0\n    int64_t v36; // 0x4085d0\n    int64_t v37; // 0x4085d0\n    int64_t v38; // 0x4085d0\n    int64_t v39; // 0x4085d0\n    int64_t v40; // 0x4085d0\n    int64_t v41; // 0x4085d0\n    int64_t v42; // 0x4085d0\n    int64_t v43; // 0x4085d0\n    int64_t v44; // 0x4085d0\n    int64_t v45; // 0x4085d0\n    int64_t v46; // 0x4085d0\n    if (v24 < 48) {\n        // 0x4086e1\n        v25 = 1024;\n        v26 = 1;\n        if ((1 << (int64_t)((v13 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40874a;\n        } else {\n            // 0x4086f4\n            v25 = 1024;\n            v26 = 1;\n            if (strchr(str, 48) == NULL) {\n                goto lab_0x40874a;\n            } else {\n                // 0x408710\n                v25 = 1000;\n                v26 = 2;\n                switch (*(char *)(v23 + 1)) {\n                    case 68: {\n                        goto lab_0x40874a;\n                    }\n                    case 105: {\n                        char v47 = *(char *)(v23 + 2); // 0x408979\n                        v25 = 1024;\n                        v26 = (v47 == 66 ? 2 : 1) + (int64_t)(v47 == 66);\n                        goto lab_0x40874a;\n                    }\n                    default: {\n                        // 0x408725\n                        g56 = v24;\n                        v25 = 1000;\n                        v26 = 2;\n                        v29 = 1024;\n                        v41 = 1;\n                        v28 = v18;\n                        v27 = v15;\n                        v42 = 1;\n                        v30 = 1024;\n                        v43 = 1;\n                        v19 = v18;\n                        v16 = v15;\n                        v44 = 1;\n                        v31 = 1024;\n                        v45 = 1;\n                        v32 = 1024;\n                        v46 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        v35 = 1024;\n                        v39 = 1;\n                        v36 = 1024;\n                        v40 = 1;\n                        switch (v13) {\n                            case 69: {\n                                goto lab_0x4088eb;\n                            }\n                            case 70: {\n                                goto lab_0x4087e5;\n                            }\n                            case 71: {\n                                goto lab_0x408923;\n                            }\n                            case 72: {\n                                goto lab_0x4087e5;\n                            }\n                            case 73: {\n                                goto lab_0x4087e5;\n                            }\n                            case 74: {\n                                goto lab_0x4087e5;\n                            }\n                            case 75: {\n                                goto lab_0x4087ac;\n                            }\n                            case 76: {\n                                goto lab_0x4087e5;\n                            }\n                            case 77: {\n                                goto lab_0x40876e;\n                            }\n                            case 78: {\n                                goto lab_0x4087e5;\n                            }\n                            case 79: {\n                                goto lab_0x4087e5;\n                            }\n                            case 80: {\n                                goto lab_0x4088b8;\n                            }\n                            case 81: {\n                                goto lab_0x4087e5;\n                            }\n                            case 82: {\n                                goto lab_0x4087e5;\n                            }\n                            case 83: {\n                                goto lab_0x4087e5;\n                            }\n                            case 84: {\n                                goto lab_0x408888;\n                            }\n                            case 85: {\n                                goto lab_0x4087e5;\n                            }\n                            case 86: {\n                                goto lab_0x4087e5;\n                            }\n                            case 87: {\n                                goto lab_0x4087e5;\n                            }\n                            case 88: {\n                                goto lab_0x4087e5;\n                            }\n                            case 89: {\n                                goto lab_0x408856;\n                            }\n                            case 90: {\n                                goto lab_0x40881b;\n                            }\n                            case 91: {\n                                goto lab_0x4087e5;\n                            }\n                            case 92: {\n                                goto lab_0x4087e5;\n                            }\n                            case 93: {\n                                goto lab_0x4087e5;\n                            }\n                            case 94: {\n                                goto lab_0x4087e5;\n                            }\n                            case 95: {\n                                goto lab_0x4087e5;\n                            }\n                            case 96: {\n                                goto lab_0x4087e5;\n                            }\n                            case 97: {\n                                goto lab_0x4087e5;\n                            }\n                            case 98: {\n                                goto lab_0x4087ff;\n                            }\n                            case 99: {\n                                goto lab_0x408788;\n                            }\n                            case 100: {\n                                goto lab_0x4087e5;\n                            }\n                            case 101: {\n                                goto lab_0x4087e5;\n                            }\n                            case 102: {\n                                goto lab_0x4087e5;\n                            }\n                            case 103: {\n                                goto lab_0x408923;\n                            }\n                            case 104: {\n                                goto lab_0x4087e5;\n                            }\n                            case 105: {\n                                goto lab_0x4087e5;\n                            }\n                            case 106: {\n                                goto lab_0x4087e5;\n                            }\n                            case 107: {\n                                goto lab_0x4087ac;\n                            }\n                            case 108: {\n                                goto lab_0x4087e5;\n                            }\n                            case 109: {\n                                goto lab_0x40876e;\n                            }\n                            case 110: {\n                                goto lab_0x4087e5;\n                            }\n                            case 111: {\n                                goto lab_0x4087e5;\n                            }\n                            case 112: {\n                                goto lab_0x4087e5;\n                            }\n                            case 113: {\n                                goto lab_0x4087e5;\n                            }\n                            case 114: {\n                                goto lab_0x4087e5;\n                            }\n                            case 115: {\n                                goto lab_0x4087e5;\n                            }\n                            case 116: {\n                                goto lab_0x408888;\n                            }\n                            default: {\n                                goto lab_0x40874a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40874a;\n    }\n  lab_0x408672:\n    // 0x408672\n    *(int64_t *)a4 = v17;\n    // 0x408675\n    return v14 & 0xffffffff;\n  lab_0x40874a:\n    // 0x40874a\n    g57 = v13 - 66;\n    v29 = v25;\n    v41 = v26;\n    v28 = v18;\n    v27 = v15;\n    v42 = v26;\n    v30 = v25;\n    v43 = v26;\n    v19 = v18;\n    v16 = v15;\n    v44 = v26;\n    v31 = v25;\n    v45 = v26;\n    v32 = v25;\n    v46 = v26;\n    v33 = v25;\n    v37 = v26;\n    v34 = v25;\n    v38 = v26;\n    v35 = v25;\n    v39 = v26;\n    v36 = v25;\n    v40 = v26;\n    int64_t v48; // 0x4085d0\n    switch (v13) {\n        case 66: {\n            // 0x408944\n            v48 = v26;\n            if (v18 >= 0x40000000000000) {\n                goto lab_0x4087b7;\n            } else {\n                // 0x408951\n                v28 = 1024 * v18;\n                v27 = v15;\n                v42 = v26;\n                goto lab_0x408788;\n            }\n        }\n        case 69: {\n            goto lab_0x4088eb;\n        }\n        case 71: {\n            goto lab_0x408923;\n        }\n        case 75: {\n            goto lab_0x4087ac;\n        }\n        case 77: {\n            goto lab_0x40876e;\n        }\n        case 80: {\n            goto lab_0x4088b8;\n        }\n        case 84: {\n            goto lab_0x408888;\n        }\n        case 89: {\n            goto lab_0x408856;\n        }\n        case 90: {\n            goto lab_0x40881b;\n        }\n        case 98: {\n            goto lab_0x4087ff;\n        }\n        case 99: {\n            goto lab_0x408788;\n        }\n        case 103: {\n            goto lab_0x408923;\n        }\n        case 107: {\n            goto lab_0x4087ac;\n        }\n        case 109: {\n            goto lab_0x40876e;\n        }\n        case 116: {\n            goto lab_0x408888;\n        }\n        case 119: {\n            // 0x4087f0\n            v48 = v26;\n            if (v18 < 0) {\n                goto lab_0x4087b7;\n            } else {\n                // 0x4087f5\n                v28 = 2 * v18;\n                v27 = v15;\n                v42 = v26;\n                goto lab_0x408788;\n            }\n        }\n        default: {\n            goto lab_0x4087e5;\n        }\n    }\n  lab_0x4088eb:;\n    uint128_t v49 = (int128_t)v18 * (int128_t)v35; // 0x408903\n    int64_t v50 = (int64_t)(v49 < 0xffffffffffffffff ? v49 : 0xffffffffffffffff);\n    int64_t v51 = v49 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v52 = 5; // 0x40890f\n    int64_t v53 = v50; // 0x408912\n    int64_t v54 = v39; // 0x408912\n    int64_t v55 = v51; // 0x408912\n    int32_t v56 = v52; // 0x408912\n    int64_t v57 = v51; // 0x408912\n    while (v52 != 0) {\n        // 0x408900\n        v49 = (int128_t)v50 * (int128_t)v35;\n        v50 = (int64_t)(v49 < 0xffffffffffffffff ? v49 : 0xffffffffffffffff);\n        v51 = v49 > 0xffffffffffffffff ? 1 : v57;\n        v52 = v56 - 1;\n        v53 = v50;\n        v54 = v39;\n        v55 = v51;\n        v56 = v52;\n        v57 = v51;\n    }\n    goto lab_0x408844;\n  lab_0x408923:\n    // 0x408923\n    v28 = -1;\n    v27 = 1;\n    v42 = v40;\n    if ((int128_t)v36 * (int128_t)v18 <= 0xffffffffffffffff) {\n        // 0x40892e\n        int128_t v58; // 0x408929\n        uint128_t v59; // 0x408929\n        uint128_t v60 = (v59 & 0xffffffffffffffff) * v58; // 0x40892e\n        v28 = -1;\n        v27 = 1;\n        int64_t v61; // 0x4085d0\n        v42 = v61;\n        if (v60 <= 0xffffffffffffffff) {\n            uint128_t v62 = (v60 & 0xffffffffffffffff) * v58; // 0x408933\n            v28 = -1;\n            v27 = 1;\n            v42 = v61;\n            if (v62 <= 0xffffffffffffffff) {\n                // 0x408938\n                v28 = v62;\n                int64_t v63; // 0x4085d0\n                v27 = v63 & 0xffffffff;\n                v42 = v61;\n            }\n        }\n    }\n    goto lab_0x408788;\n  lab_0x4087ac:;\n    uint128_t v66 = (int128_t)v30 * (int128_t)v18; // 0x4087af\n    v28 = v66;\n    v27 = v15;\n    v42 = v43;\n    v48 = v43;\n    if (v66 <= 0xffffffffffffffff) {\n        goto lab_0x408788;\n    } else {\n        goto lab_0x4087b7;\n    }\n  lab_0x40876e:;\n    int128_t v67 = v29; // 0x408774\n    uint128_t v68 = v67 * (int128_t)v18; // 0x408774\n    v48 = v41;\n    if (v68 > 0xffffffffffffffff) {\n        goto lab_0x4087b7;\n    } else {\n        uint128_t v69 = (v68 & 0xffffffffffffffff) * v67; // 0x408779\n        v48 = v41;\n        if (v69 > 0xffffffffffffffff) {\n            goto lab_0x4087b7;\n        } else {\n            // 0x40877e\n            v28 = v69;\n            v27 = v15;\n            v42 = v41;\n            goto lab_0x408788;\n        }\n    }\n  lab_0x4088b8:;\n    uint128_t v70 = (int128_t)v18 * (int128_t)v34; // 0x4088cb\n    int64_t v71 = (int64_t)(v70 < 0xffffffffffffffff ? v70 : 0xffffffffffffffff);\n    int64_t v72 = v70 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v73 = 4; // 0x4088d7\n    v53 = v71;\n    v54 = v38;\n    v55 = v72;\n    int32_t v74 = v73; // 0x4088da\n    int64_t v75 = v72; // 0x4088da\n    while (v73 != 0) {\n        // 0x4088c8\n        v70 = (int128_t)v71 * (int128_t)v34;\n        v71 = (int64_t)(v70 < 0xffffffffffffffff ? v70 : 0xffffffffffffffff);\n        v72 = v70 > 0xffffffffffffffff ? 1 : v75;\n        v73 = v74 - 1;\n        v53 = v71;\n        v54 = v38;\n        v55 = v72;\n        v74 = v73;\n        v75 = v72;\n    }\n    goto lab_0x408844;\n  lab_0x408888:;\n    uint128_t v76 = (int128_t)v18 * (int128_t)v33; // 0x40889b\n    int64_t v77 = (int64_t)(v76 < 0xffffffffffffffff ? v76 : 0xffffffffffffffff);\n    int64_t v78 = v76 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v79 = 3; // 0x4088a7\n    v53 = v77;\n    v54 = v37;\n    v55 = v78;\n    int32_t v80 = v79; // 0x4088aa\n    int64_t v81 = v78; // 0x4088aa\n    while (v79 != 0) {\n        // 0x408898\n        v76 = (int128_t)v77 * (int128_t)v33;\n        v77 = (int64_t)(v76 < 0xffffffffffffffff ? v76 : 0xffffffffffffffff);\n        v78 = v76 > 0xffffffffffffffff ? 1 : v81;\n        v79 = v80 - 1;\n        v53 = v77;\n        v54 = v37;\n        v55 = v78;\n        v80 = v79;\n        v81 = v78;\n    }\n    goto lab_0x408844;\n  lab_0x408856:;\n    uint128_t v82 = (int128_t)v18 * (int128_t)v32; // 0x40886b\n    int64_t v83 = (int64_t)(v82 < 0xffffffffffffffff ? v82 : 0xffffffffffffffff);\n    int64_t v84 = v82 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v85 = 7; // 0x408877\n    v53 = v83;\n    v54 = v46;\n    v55 = v84;\n    int32_t v86 = v85; // 0x40887a\n    int64_t v87 = v84; // 0x40887a\n    while (v85 != 0) {\n        // 0x408868\n        v82 = (int128_t)v83 * (int128_t)v32;\n        v83 = (int64_t)(v82 < 0xffffffffffffffff ? v82 : 0xffffffffffffffff);\n        v84 = v82 > 0xffffffffffffffff ? 1 : v87;\n        v85 = v86 - 1;\n        v53 = v83;\n        v54 = v46;\n        v55 = v84;\n        v86 = v85;\n        v87 = v84;\n    }\n    goto lab_0x408844;\n  lab_0x40881b:;\n    uint128_t v88 = (int128_t)v18 * (int128_t)v31; // 0x408833\n    int64_t v89 = (int64_t)(v88 < 0xffffffffffffffff ? v88 : 0xffffffffffffffff);\n    int64_t v90 = v88 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v91 = 6; // 0x40883f\n    int32_t v92 = v91; // 0x408842\n    int64_t v93 = v90; // 0x408842\n    v53 = v89;\n    v54 = v45;\n    v55 = v90;\n    while (v91 != 0) {\n        // 0x408830\n        v88 = (int128_t)v89 * (int128_t)v31;\n        v89 = (int64_t)(v88 < 0xffffffffffffffff ? v88 : 0xffffffffffffffff);\n        v90 = v88 > 0xffffffffffffffff ? 1 : v93;\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v53 = v89;\n        v54 = v45;\n        v55 = v90;\n    }\n    goto lab_0x408844;\n  lab_0x4087ff:\n    // 0x4087ff\n    v48 = v44;\n    if (v18 >= 0x80000000000000) {\n        goto lab_0x4087b7;\n    } else {\n        // 0x408808\n        v28 = 512 * v18;\n        v27 = v15;\n        v42 = v44;\n        goto lab_0x408788;\n    }\n  lab_0x408788:;\n    int64_t v64 = v27;\n    int64_t v65 = (0x100000000 * v42 >> 32) + v23; // 0x40878d\n    *v10 = v65;\n    v17 = v28;\n    v14 = (*(char *)v65 != 0 ? v64 | 2 : v64) & 0xffffffff;\n    goto lab_0x408672;\n  lab_0x4087e5:\n    // 0x4087e5\n    *(int64_t *)a4 = v19;\n    // 0x408675\n    return (v16 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4087b7:\n    // 0x4087b7\n    v28 = -1;\n    v27 = 1;\n    v42 = v48;\n    goto lab_0x408788;\n  lab_0x408844:\n    // 0x408844\n    v28 = v53;\n    v27 = (v55 | v15) & 0xffffffff;\n    v42 = v54;\n    goto lab_0x408788;\n}\n"
        },
        {
            "funcName": "function_408a90",
            "funcStartAddr": "408a90",
            "funcEndAddr": "408bc5",
            "decompiledFuncCode": "int64_t function_408a90(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x408ac0\n    if (cmd != 1030) {\n        // 0x408b70\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x408acc\n    int64_t v2; // 0x408a90\n    if (g49 < 0) {\n        int64_t v3 = function_408a90(fd, 0, v1, a4); // 0x408b14\n        int64_t v4 = v3 & 0xffffffff; // 0x408b19\n        if ((int32_t)v3 < 0) {\n            // 0x408b00\n            return v4 & 0xffffffff;\n        }\n        // 0x408b1f\n        v2 = v4;\n        if (g49 != -1) {\n            // 0x408b00\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x408ae7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x408af6\n            g49 = 1;\n            // 0x408b00\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_408a90(fd & 0xffffffff, 0, v1, a4); // 0x408ba7\n        int64_t v7 = v6 & 0xffffffff; // 0x408bac\n        if ((int32_t)v6 < 0) {\n            // 0x408b00\n            return v7 & 0xffffffff;\n        }\n        // 0x408bb6\n        g49 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x408b2f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x408b3a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x408b00\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x408b52\n    close(fd2);\n    // 0x408b00\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408bd0",
            "funcStartAddr": "408bd0",
            "funcEndAddr": "408c10",
            "decompiledFuncCode": "int64_t function_408bd0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x408bea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x408bea\n        return fflush(stream);\n    }\n    // 0x408bf8\n    function_408c10(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_408c10",
            "funcStartAddr": "408c10",
            "funcEndAddr": "408c67",
            "decompiledFuncCode": "int64_t function_408c10(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x408c10\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x408c1a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x408c4b\n    int64_t result = -1; // 0x408c54\n    if (v1 != -1) {\n        // 0x408c56\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408c62\n    return result;\n}\n"
        },
        {
            "funcName": "function_408c70",
            "funcStartAddr": "408c70",
            "funcEndAddr": "408d4f",
            "decompiledFuncCode": "int64_t function_408c70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x408c7c\n    uint32_t v2 = *v1; // 0x408c7c\n    int64_t v3 = a2 & 0xffffffff; // 0x408c81\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408c84\n    uint64_t v5 = (int64_t)*v4; // 0x408c84\n    int64_t v6; // 0x408cf2\n    if (v3 <= v5) {\n      lab_0x408cec_2:\n        // 0x408cec\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408c72\n    int64_t v8 = v2; // 0x408c70\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x408cec\n        goto lab_0x408cec_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408ca8\n    int64_t v17; // 0x408cb6\n    int64_t * v18; // 0x408cd0\n    int64_t * v19; // 0x408cd3\n    int64_t v20; // 0x408cde\n    int64_t v21; // 0x408cb6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408cb3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x408cd0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x408ce7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x408cec\n            goto lab_0x408cec_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408cec\n            goto lab_0x408cec_2;\n        }\n        // 0x408ca2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x408d2b\n    int64_t * v23 = (int64_t *)v22; // 0x408d30\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408d33\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408d30\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408d47\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x408c9d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408cec\n            goto lab_0x408cec_2;\n        }\n        // 0x408ca2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408cb3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x408cd0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x408ce7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x408cec\n                goto lab_0x408cec_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x408cec\n                goto lab_0x408cec_2;\n            }\n            // 0x408ca2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408d10\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408d30\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408d47\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x408cec\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "40936c",
            "decompiledFuncCode": "int64_t function_408d50(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x408d6f\n    int64_t v2 = *v1; // 0x408d6f\n    char * str2 = (char *)v2; // 0x408d7c\n    char c = *str2; // 0x408d7c\n    int64_t v3 = v2; // 0x408da8\n    int64_t v4 = 0; // 0x408d50\n    int32_t v5; // 0x408d50\n    int64_t v6; // 0x408d50\n    int64_t v7; // 0x408d50\n    int64_t v8; // 0x408d50\n    int64_t v9; // 0x408d50\n    int64_t v10; // 0x408d50\n    int64_t v11; // 0x408d50\n    int64_t v12; // 0x408d50\n    int64_t v13; // 0x408d50\n    int64_t str3; // 0x408d50\n    int64_t v14; // 0x408d50\n    int64_t v15; // 0x408d50\n    int64_t v16; // 0x408d50\n    int64_t v17; // 0x408d50\n    int32_t v18; // 0x408d50\n    int32_t v19; // 0x408d50\n    int32_t v20; // 0x408d50\n    int32_t v21; // 0x408d50\n    int32_t v22; // 0x408d50\n    int32_t v23; // 0x408d50\n    int32_t v24; // 0x408d50\n    int32_t v25; // 0x408d50\n    int32_t v26; // 0x408d50\n    int32_t v27; // 0x408d50\n    int32_t v28; // 0x408d50\n    int32_t v29; // 0x408d50\n    int64_t nmemb; // 0x408d50\n    int64_t v30; // 0x408d50\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x408dac\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408da8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408db8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x408dbe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408d88\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x408dec\n                int64_t v34; // 0x408d50\n                int64_t v35; // 0x408d50\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408df5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408f70;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408e06\n                int64_t v37 = *(int64_t *)v36; // 0x408e0a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408de0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408df5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408f70;\n                        }\n                    }\n                    // 0x408e06\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408e56:\n                    // 0x408e56\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408eb0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x409020\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408eb0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408fd0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x408e7a;\n                                } else {\n                                    // 0x408fdc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x408e7a;\n                                    } else {\n                                        // 0x408fea\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x408e7a;\n                                        } else {\n                                            goto lab_0x408eb0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x408e7a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408ec1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x409096\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x409242\n                            flockfile(g38);\n                            int64_t v41 = *v1; // 0x409262\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4092af\n                            int64_t v43 = (int64_t)g38;\n                            int64_t v44 = v43; // 0x4092c9\n                            int64_t v45; // 0x4092cb\n                            if (*(char *)v42 != 0) {\n                                // 0x4092cb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g38;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4092c3\n                            while (v17 + nmemb != v42) {\n                                // 0x4092c5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4092cb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g38;\n                                }\n                                // 0x4092b8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4092f0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g38);\n                            v40 = *v1;\n                        } else {\n                            // 0x4090a4\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4091ff\n                        free((int64_t *)v17);\n                    }\n                    // 0x4090f9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x409110\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x408fbe\n                    return 63;\n                }\n                // 0x408ee0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408f64\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408f70:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408f80\n                    uint32_t v50 = *v49; // 0x408f80\n                    int64_t v51 = v50; // 0x408f80\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x408f8a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408f93\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4091bf\n                                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40916a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x408fbe\n                            return 63;\n                        }\n                        // 0x409008\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40931f\n                                    __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40921d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x409230\n                                // 0x408fbe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40912e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x409142\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x408fab\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x408fae\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408fb2\n                    int64_t result = v59; // 0x408fb8\n                    if (v58 != 0) {\n                        // 0x408fba\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x408fbe\n                    return result;\n                }\n            } else {\n                // 0x408dbe\n                v5 = v32;\n            }\n            // break -> 0x408ee5\n            break;\n        }\n    }\n    // 0x408ee5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x408efd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408f07\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x408fbe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x409049\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408f36\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408f46\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408eb0:\n    // 0x408eb0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408eb0\n    int64_t v63 = *(int64_t *)v62; // 0x408eb4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408ec1\n        goto lab_0x408ec1;\n    }\n    goto lab_0x408e56;\n  lab_0x408e7a:\n    // 0x408e7a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408d50\n    int32_t v65; // 0x408d50\n    int32_t v66; // 0x408d50\n    if (v27 != 0) {\n        goto lab_0x408eb0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x409030\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408eb0;\n            } else {\n                goto lab_0x408ea1;\n            }\n        } else {\n            // 0x408e95\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40918c\n                int64_t v67 = (int64_t)mem; // 0x40918c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408eb0;\n                } else {\n                    // 0x40919f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408ea1;\n                }\n            } else {\n                goto lab_0x408ea1;\n            }\n        }\n    }\n  lab_0x408ea1:\n    // 0x408ea1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408eb0;\n}\n"
        },
        {
            "funcName": "function_409370",
            "funcStartAddr": "409370",
            "funcEndAddr": "409936",
            "decompiledFuncCode": "int64_t function_409370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409391\n    if (v3 < 1) {\n        // 0x40954e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40938d\n    int32_t v5 = *(int32_t *)a7; // 0x409399\n    uint64_t v6 = a1 & 0xffffffff; // 0x40939b\n    int64_t v7 = v2; // 0x4093a0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4093a3\n    *v8 = 0;\n    int64_t v9; // 0x409370\n    int64_t v10; // 0x409370\n    int64_t v11; // 0x409370\n    int64_t v12; // 0x409370\n    int64_t str; // 0x409370\n    int64_t v13; // 0x409370\n    int64_t v14; // 0x409370\n    int64_t v15; // 0x409370\n    int64_t v16; // 0x409370\n    int64_t v17; // 0x409370\n    int32_t v18; // 0x409370\n    char v19; // 0x409370\n    if (v5 == 0) {\n        // 0x409588\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4093ba;\n    } else {\n        // 0x4093b3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x409400\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x409403\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4094c8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x409416\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x409426\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4094dc;\n                } else {\n                    goto lab_0x409438;\n                }\n            }\n        } else {\n            goto lab_0x4093ba;\n        }\n    }\n  lab_0x4093ba:\n    // 0x4093ba\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4093c0\n    *v24 = 0;\n    int64_t v25; // 0x409370\n    int64_t v26; // 0x409370\n    int64_t v27; // 0x409370\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4094b0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4094bd;\n        }\n        case 43: {\n            // 0x4097c0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4094bd;\n        }\n        default: {\n            // 0x4093dc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40973f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409858\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4094bd;\n                } else {\n                    // 0x40974d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4093ea;\n                }\n            } else {\n                goto lab_0x4093ea;\n            }\n        }\n    }\n  lab_0x4094c8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4094cf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409438;\n    } else {\n        goto lab_0x4094dc;\n    }\n  lab_0x4093ea:\n    // 0x4093ea\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4094bd;\n  lab_0x4094bd:\n    // 0x4094bd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4094c8;\n  lab_0x409438:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409438\n    int64_t v31 = v30; // 0x409438\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40943a\n    if ((int64_t)*v32 > v31) {\n        // 0x40943f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409442\n    if (*v33 > v30) {\n        // 0x409447\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40944a\n    int64_t v35 = v31; // 0x40944e\n    int64_t v36 = v15; // 0x40944e\n    int64_t v37; // 0x409370\n    int64_t v38; // 0x409370\n    int64_t v39; // 0x409370\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4095b8\n        int64_t v41 = v40; // 0x4095b8\n        v2 = v41;\n        int64_t v42; // 0x409370\n        if (*v33 == v40) {\n            // 0x4097a0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4097a8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4095c4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4095c8\n                function_408c70(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4095d8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4095e1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4095ea\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x409601\n            int64_t v47 = v45 & 0xffffffff; // 0x409605\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40960e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x409614\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x409616;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4095f0\n            int64_t v49 = v48 & 0xffffffff; // 0x4095f0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x409601\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40960e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x409614\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x409616;\n                    }\n                }\n                // 0x4095f0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4097b8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x409616;\n    } else {\n        goto lab_0x409454;\n    }\n  lab_0x4094dc:\n    // 0x4094dc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4094df\n    int64_t v51 = v12; // 0x4094df\n    int64_t v52 = v14; // 0x4094df\n    if (*(char *)v10 == 0) {\n        goto lab_0x409438;\n    } else {\n        goto lab_0x4094e5;\n    }\n  lab_0x409454:;\n    int32_t v53 = v35; // 0x409454\n    int64_t v54; // 0x409370\n    int64_t v55; // 0x409370\n    int64_t v56; // 0x409370\n    int64_t v57; // 0x409370\n    int64_t v58; // 0x409370\n    int64_t v59; // 0x409370\n    char * v60; // 0x409370\n    int64_t v61; // 0x409370\n    int64_t v62; // 0x409469\n    int64_t v63; // 0x409370\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4095a3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4095a6;\n    } else {\n        // 0x40945c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409370\n        int64_t v66 = v65 ? -1 : 1; // 0x409470\n        int64_t v67 = (int64_t)\"--\"; // 0x409370\n        int64_t v68 = v62; // 0x409370\n        int64_t v69 = 3; // 0x409470\n        unsigned char v70 = *(char *)v68; // 0x409470\n        char v71 = *(char *)v67; // 0x409470\n        char v72 = v71; // 0x409470\n        bool v73 = false; // 0x409470\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409560\n            if (*(char *)v62 == 45) {\n                // 0x409620\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x409620\n                if (c == 0) {\n                    goto lab_0x40956a;\n                } else {\n                    // 0x40962d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4096b0;\n                    } else {\n                        if (c == 45) {\n                            // 0x409893\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x409705;\n                        } else {\n                            // 0x40963e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4096b0;\n                            } else {\n                                // 0x409643\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409664;\n                                } else {\n                                    // 0x40964a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4096b0;\n                                    } else {\n                                        goto lab_0x409664;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40956a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409480\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409483\n            int64_t v77 = v35 + 1; // 0x409486\n            int32_t v78 = v77; // 0x409489\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4097f0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409497\n                    function_408c70(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4094a5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4095a6;\n        }\n    }\n  lab_0x4094e5:;\n    // 0x4094e5\n    int64_t v79; // bp-104, 0x409370\n    int64_t v80 = &v79; // 0x40937a\n    int64_t v81 = v50 + 1; // 0x4094e5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4094ec\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4094f1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4094f5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4094f9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x409501\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x409506\n    int32_t c2 = v84; // 0x409506\n    char * found_char_pos = strchr(str2, c2); // 0x409506\n    int64_t v87 = *v82; // 0x40950b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x409515\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x409520\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x409810\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4097dd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40954e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x409506\n    char v91 = *(char *)(v90 + 1); // 0x40953b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4094f5\n        if (v91 != 58) {\n            // 0x40954e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409764\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409868\n                *v8 = 0;\n            } else {\n                // 0x40984c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40978e\n            *v83 = 0;\n            // 0x40954e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40976e\n        if (v93 != 0) {\n            // 0x409800\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40978e\n            *v83 = 0;\n            // 0x40954e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409781\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40978e\n            *v83 = 0;\n            // 0x40954e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4098ca\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40987a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x409881\n        // 0x40978e\n        *v83 = 0;\n        // 0x40954e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4096d9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4096db\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x409900\n                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4098b1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4098b8\n            // 0x40954e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4096e6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4096ea\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x409705;\n  lab_0x409616:\n    // 0x409616\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409454;\n  lab_0x409705:;\n    int64_t v99 = function_408d50(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x409723\n    // 0x40954e\n    return v99 & 0xffffffff;\n  lab_0x4095a6:;\n    int32_t v100 = v55; // 0x4095a6\n    if (v100 != (int32_t)v59) {\n        // 0x4095aa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40954e\n    return 0xffffffff;\n  lab_0x40956a:\n    // 0x40956a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409571\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40954e\n    return v99 & 0xffffffff;\n  lab_0x4096b0:\n    // 0x4096b0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4094e5;\n  lab_0x409664:\n    // 0x409664\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408d50(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g16); // 0x40968a\n    if ((int32_t)v101 != -1) {\n        // 0x40954e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40969f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4096b0;\n}\n"
        },
        {
            "funcName": "function_409940",
            "funcStartAddr": "409940",
            "funcEndAddr": "409996",
            "decompiledFuncCode": "int64_t function_409940(int64_t a1) {\n    // 0x409940\n    *(int32_t *)&g50 = g34;\n    *(int32_t *)&g51 = g33;\n    int64_t v1; // 0x409940\n    int64_t result = function_409370(v1, v1, v1, v1, v1, v1, &g50, a1 & 0xffffffff); // 0x409966\n    g34 = *(int32_t *)&g50;\n    g55 = (char *)g53;\n    *(int32_t *)&g32 = g52;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099a0",
            "funcStartAddr": "4099a0",
            "funcEndAddr": "4099b8",
            "decompiledFuncCode": "int64_t function_4099a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4099a0\n    return function_409940(1);\n}\n"
        },
        {
            "funcName": "function_4099c0",
            "funcStartAddr": "4099c0",
            "funcEndAddr": "4099d3",
            "decompiledFuncCode": "int64_t function_4099c0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x4099c0\n    return function_409940(0);\n}\n"
        },
        {
            "funcName": "function_4099e0",
            "funcStartAddr": "4099e0",
            "funcEndAddr": "4099f5",
            "decompiledFuncCode": "int64_t function_4099e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4099e0\n    return function_409370(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409a00",
            "funcStartAddr": "409a00",
            "funcEndAddr": "409a16",
            "decompiledFuncCode": "int64_t function_409a00(void) {\n    // 0x409a00\n    return function_409940(0);\n}\n"
        },
        {
            "funcName": "function_409a20",
            "funcStartAddr": "409a20",
            "funcEndAddr": "409a38",
            "decompiledFuncCode": "int64_t function_409a20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409a20\n    return function_409370(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409a40",
            "funcStartAddr": "409a40",
            "funcEndAddr": "409aba",
            "decompiledFuncCode": "int64_t function_409a40(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x409a4b\n    int64_t v2 = (int64_t)&g17; // 0x409a4b\n    int32_t * pwc; // 0x409a40\n    int64_t v3; // 0x409a40\n    int64_t n; // 0x409a40\n    if (a2 == 0) {\n        goto lab_0x409a92;\n    } else {\n        // 0x409a4d\n        if (a3 == 0) {\n            // 0x409a78\n            return -2;\n        }\n        // 0x409a59\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409a92;\n        } else {\n            goto lab_0x409a64;\n        }\n    }\n  lab_0x409a92:\n    // 0x409a92\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409a40\n    pwc = (int32_t *)&v4;\n    goto lab_0x409a64;\n  lab_0x409a64:;\n    char * wstr = (char *)v3; // 0x409a6a\n    int64_t ps; // 0x409a40\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x409a6a\n    int64_t result = v5; // 0x409a6a\n    if (v5 < 0xfffffffe) {\n        // 0x409a78\n        return result;\n    }\n    int64_t result2 = result; // 0x409aa9\n    if ((char)function_409bc0(0, v3) == 0) {\n        // 0x409aab\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409a78\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409ac0",
            "funcStartAddr": "409ac0",
            "funcEndAddr": "409b1d",
            "decompiledFuncCode": "int64_t function_409ac0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409ac7\n    int64_t v2; // 0x409ac0\n    if ((v2 & 32) == 0) {\n        // 0x409ae1\n        if (v1 == 0) {\n            // 0x409afa\n            return 0;\n        }\n        // 0x409afa\n        return 0xffffffff;\n    }\n    if (v1 != 0) {\n        // 0x409afa\n        return 0xffffffff;\n    }\n    // 0x409b04\n    *__errno_location() = 0;\n    // 0x409afa\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409b20",
            "funcStartAddr": "409b20",
            "funcEndAddr": "409bb3",
            "decompiledFuncCode": "int64_t function_409b20(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x409b27\n    int64_t result = (int64_t)file; // 0x409b27\n    if (file == NULL) {\n        // 0x409b41\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x409b37\n    if (v1 >= 3) {\n        // 0x409b41\n        return result;\n    }\n    int32_t fd = function_40a190((int64_t)v1, (int64_t)mode); // 0x409b5a\n    if (fd < 0) {\n        // 0x409b98\n        __errno_location();\n        // 0x409b41\n        return 0;\n    }\n    if (fd == 0) {\n        struct _IO_FILE * v2 = fdopen(fd, mode); // 0x409b70\n        if (v2 != NULL) {\n            // 0x409b41\n            return (int64_t)v2;\n        }\n    }\n    int32_t * v3 = __errno_location(); // 0x409b7d\n    close(fd);\n    // 0x409b41\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409bc0",
            "funcStartAddr": "409bc0",
            "funcEndAddr": "409c1e",
            "decompiledFuncCode": "int64_t function_409bc0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409bc6\n    if (locale == NULL) {\n        // 0x409bf3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409bc6\n    bool v2; // 0x409bc0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g18; // 0x409bc0\n    int64_t v5 = v1; // 0x409bc0\n    int64_t v6 = 2; // 0x409be5\n    unsigned char v7 = *(char *)v5; // 0x409be5\n    char v8 = *(char *)v4; // 0x409be5\n    char v9 = v8; // 0x409be5\n    bool v10 = false; // 0x409be5\n    while (v7 == v8) {\n        // 0x409bd8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409bf1\n    int64_t v13 = v1; // 0x409bf1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409bf3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409bf1\n    unsigned char v15 = *(char *)v13; // 0x409c0d\n    char v16 = *(char *)v12; // 0x409c0d\n    char v17 = v16; // 0x409c0d\n    bool v18 = false; // 0x409c0d\n    while (v15 == v16) {\n        // 0x409c00\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409c20",
            "funcStartAddr": "409c20",
            "funcEndAddr": "40a182",
            "decompiledFuncCode": "int64_t function_409c20(void) {\n    char * v1 = nl_langinfo(14); // 0x409c36\n    char * v2 = g54; // 0x409c3b\n    char * v3; // 0x409c20\n    int64_t v4; // 0x409c20\n    int64_t v5; // 0x409c20\n    int64_t v6; // 0x409c20\n    int64_t v7; // 0x409c20\n    int32_t size; // 0x409c20\n    int32_t size2; // 0x409c20\n    int32_t len; // 0x409cf2\n    int64_t v8; // 0x409cf2\n    char * env_val; // 0x409cdd\n    if (v2 == NULL) {\n        // 0x409cd8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409d45;\n        } else {\n            // 0x409cea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409d45;\n            } else {\n                // 0x409cef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x409cdd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40a175\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409d45;\n                    } else {\n                        // 0x40a0e9\n                        size2 = len + 14;\n                        goto lab_0x409d0b;\n                    }\n                } else {\n                    goto lab_0x409d0b;\n                }\n            }\n        }\n    } else {\n        // 0x409c20\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x409c5a;\n    }\n  lab_0x409f8c:;\n    // 0x409f8c\n    int64_t v10; // 0x409c20\n    int64_t v11 = v10;\n    int64_t v12; // 0x409c20\n    int64_t v13 = v12;\n    struct _IO_FILE * stream; // 0x409dcb\n    int32_t v14 = __uflow(stream); // 0x409f8f\n    int64_t v15 = v13; // 0x409f99\n    int32_t v16 = v14; // 0x409f99\n    int64_t v17 = v11; // 0x409f99\n    int64_t v18 = v13; // 0x409f99\n    int64_t v19 = v11; // 0x409f99\n    if (v14 == -1) {\n        // break -> 0x409f9f\n        goto lab_0x409f9f;\n    }\n    goto lab_0x409e19;\n  lab_0x409e0e:;\n    // 0x409e0e\n    int64_t v116; // 0x409c20\n    int64_t v137 = v116;\n    int64_t v115; // 0x409c20\n    int64_t v138 = v115;\n    int64_t v114; // 0x409c20\n    int64_t v139 = v114;\n    int64_t * v30; // 0x409e00\n    *v30 = v138 + 1;\n    unsigned char v140 = *(char *)v138; // 0x409e16\n    v15 = v139;\n    v16 = v140;\n    v17 = v137;\n    goto lab_0x409e19;\n  lab_0x409e19:;\n    int64_t v20 = v17;\n    int32_t c = v16;\n    int64_t v21 = v15;\n    int64_t v22; // 0x409c20\n    int32_t v23; // bp-120, 0x409c20\n    int32_t v24; // bp-184, 0x409c20\n    int64_t v25; // 0x409c20\n    int64_t v26; // 0x409de8\n    int64_t v27; // 0x409ded\n    int64_t * v28; // 0x409e04\n    switch (c) {\n        case 32: {\n            // 0x409e00\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x409e00_2;\n        }\n        case 10: {\n            // 0x409e00\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x409e00_2;\n        }\n        case 9: {\n            // 0x409e00\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x409e00_2;\n        }\n        case 35: {\n            uint64_t v29 = *v30; // 0x409ff1\n            uint64_t v31 = *v28; // 0x409ff5\n            int32_t v32; // 0x409c20\n            char v33; // 0x409c20\n            unsigned char v34; // 0x409fd8\n            int32_t v35; // 0x409ffe\n            if (v29 < v31) {\n                // 0x409fd0\n                *v30 = v29 + 1;\n                v34 = *(char *)v29;\n                v32 = v34;\n                v33 = 1;\n            } else {\n                // 0x409ffb\n                v35 = __uflow(stream);\n                v32 = v35;\n                v33 = v35 != -1;\n            }\n            char v36 = v33;\n            int32_t v37 = v32;\n            while (v37 != 10 && v36 != 0) {\n                // 0x409ff1\n                v29 = *v30;\n                v31 = *v28;\n                if (v29 < v31) {\n                    // 0x409fd0\n                    *v30 = v29 + 1;\n                    v34 = *(char *)v29;\n                    v32 = v34;\n                    v33 = 1;\n                } else {\n                    // 0x409ffb\n                    v35 = __uflow(stream);\n                    v32 = v35;\n                    v33 = v35 != -1;\n                }\n                // 0x409fe0\n                v36 = v33;\n                v37 = v32;\n            }\n            // 0x40a0cf\n            v18 = v21;\n            v19 = v20;\n            if (v37 == -1) {\n                // break -> 0x409f9f\n                break;\n            }\n            // 0x409e00\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x409e00_2;\n        }\n        default: {\n            // 0x409e2f\n            ungetc(c, stream);\n            int32_t items_assigned = fscanf(stream, \"%50s %50s\", &v24, &v23); // 0x409e47\n            int64_t v38 = v27; // 0x409e4f\n            v18 = v21;\n            v19 = v20;\n            if (items_assigned < 2) {\n                // break -> 0x409f9f\n                break;\n            }\n            int64_t v39 = v38;\n            int32_t v40 = *(int32_t *)v39; // 0x409e58\n            int64_t v41 = v39 + 4; // 0x409e5a\n            int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x409e66\n            uint32_t v43 = v42 & -0x7f7f7f80; // 0x409e68\n            v38 = v41;\n            while (v43 == 0) {\n                // 0x409e58\n                v39 = v38;\n                v40 = *(int32_t *)v39;\n                v41 = v39 + 4;\n                v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n                v43 = v42 & -0x7f7f7f80;\n                v38 = v41;\n            }\n            int32_t v44 = (v42 & 0x8080) == 0 ? v43 / 0x10000 : v43; // 0x409e79\n            int64_t v45 = v39 + 6; // 0x409e7c\n            unsigned char v46 = (char)v44; // 0x409e86\n            int64_t v47 = -1 - v46 < v46 ? 4 : 3; // 0x409e8b\n            int64_t v48 = v26; // 0x409e8f\n            int64_t v49 = v48;\n            int32_t v50 = *(int32_t *)v49; // 0x409e92\n            int64_t v51 = v49 + 4; // 0x409e94\n            int32_t v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80); // 0x409ea0\n            uint32_t v53 = v52 & -0x7f7f7f80; // 0x409ea2\n            v48 = v51;\n            while (v53 == 0) {\n                // 0x409e92\n                v49 = v48;\n                v50 = *(int32_t *)v49;\n                v51 = v49 + 4;\n                v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80);\n                v53 = v52 & -0x7f7f7f80;\n                v48 = v51;\n            }\n            int64_t v54 = (v42 & 0x8080) == 0 ? v45 : v41; // 0x409e80\n            int64_t v55 = v54 - v47 - v27; // 0x409e8f\n            int32_t v56 = (v52 & 0x8080) == 0 ? v53 / 0x10000 : v53; // 0x409eb8\n            int64_t v57 = (v52 & 0x8080) == 0 ? v49 + 6 : v51; // 0x409ebf\n            unsigned char v58 = (char)v56; // 0x409ec5\n            int64_t v59 = -1 - v58 < v58 ? 4 : 3; // 0x409ec8\n            int64_t v60 = v57 - v59 - v26; // 0x409ecc\n            int64_t v61 = v60 + v55; // 0x409ed5\n            int64_t * v62; // 0x409c20\n            int64_t v63; // 0x409c20\n            if (v21 != 0) {\n                int64_t v64 = v61 + v21; // 0x40a00b\n                int64_t * mem = realloc((int64_t *)v20, (int32_t)v64 + 3); // 0x40a020\n                v63 = v64;\n                v62 = mem;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v61 + 3); // 0x409ef1\n                v63 = v61;\n                v62 = mem2;\n            }\n            int64_t * v65 = v62;\n            if (v65 == NULL) {\n                // 0x40a12c\n                free((int64_t *)v20);\n                goto lab_0x409da4;\n            }\n            int64_t v66 = v63;\n            int64_t v67 = (int64_t)v65;\n            int64_t v68 = v66 + 2;\n            int64_t v69 = v55 + 1; // 0x409f18\n            int64_t v70 = v68 - v60 + v67;\n            int64_t v71 = -2 - v55 + v70; // 0x409f22\n            uint32_t v72 = (int32_t)v69; // 0x409f25\n            if (v72 >= 8) {\n                int32_t v73 = v24; // 0x40a034\n                *(int64_t *)v71 = (int64_t)v73;\n                int64_t v74 = (v69 & 0xffffffff) - 8;\n                int64_t v75 = *(int64_t *)(v74 + v27); // 0x40a03d\n                *(int64_t *)(v71 + v74) = v75;\n                int64_t v76 = v71 + 8 & -8; // 0x40a04e\n                int64_t v77 = v71 - v76; // 0x40a052\n                uint32_t v78 = (int32_t)(v77 + v69); // 0x40a05d\n                if (v78 >= 8) {\n                    int64_t v79 = v27 - v77; // 0x40a057\n                    uint32_t v80 = v78 & -8; // 0x40a079\n                    int64_t v81 = 0; // 0x409c20\n                    int64_t v82 = v81;\n                    int64_t v83 = v82 + 8; // 0x40a06e\n                    int64_t v84 = *(int64_t *)(v79 + v82); // 0x40a071\n                    *(int64_t *)(v82 + v76) = v84;\n                    v81 = v83 & 0xffffffff;\n                    while (v80 > (int32_t)v83) {\n                        // 0x40a06b\n                        v82 = v81;\n                        v83 = v82 + 8;\n                        v84 = *(int64_t *)(v79 + v82);\n                        *(int64_t *)(v82 + v76) = v84;\n                        v81 = v83 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v69 & 4) != 0) {\n                    int32_t v85 = v24; // 0x40a0ff\n                    *(int32_t *)v71 = v85;\n                    int64_t v86 = (v69 & 0xffffffff) - 4;\n                    int32_t v87 = *(int32_t *)(v86 + v27); // 0x40a107\n                    *(int32_t *)(v71 + v86) = v87;\n                } else {\n                    if (v72 != 0) {\n                        int32_t v88 = v24; // 0x409f3b\n                        *(char *)v71 = (char)v88;\n                        if ((v69 & 2) != 0) {\n                            int64_t v89 = (v69 & 0xffffffff) - 2;\n                            int16_t v90 = *(int16_t *)(v89 + v27); // 0x40a152\n                            *(int16_t *)(v71 + v89) = v90;\n                        }\n                    }\n                }\n            }\n            int64_t v91 = v60 + 1; // 0x409f4b\n            int64_t v92 = v70 - 1; // 0x409f4f\n            uint32_t v93 = (int32_t)v91; // 0x409f54\n            if (v93 >= 8) {\n                int32_t v94 = v23; // 0x40a082\n                *(int64_t *)v92 = (int64_t)v94;\n                int64_t v95 = (v91 & 0xffffffff) - 8;\n                int64_t v96 = *(int64_t *)(v95 + v26); // 0x40a08e\n                *(int64_t *)(v92 + v95) = v96;\n                int64_t v97 = v70 + 7 & -8; // 0x40a09c\n                int64_t v98 = v92 - v97; // 0x40a0a0\n                uint32_t v99 = (int32_t)(v98 + v91); // 0x40a0ab\n                if (v99 >= 8) {\n                    int64_t v100 = v26 - v98; // 0x40a0a5\n                    uint32_t v101 = v99 & -8; // 0x40a0c6\n                    int64_t v102 = 0; // 0x409c20\n                    int64_t v103 = v102;\n                    int64_t v104 = v103 + 8; // 0x40a0bb\n                    int64_t v105 = *(int64_t *)(v100 + v103); // 0x40a0be\n                    *(int64_t *)(v103 + v97) = v105;\n                    v102 = v104 & 0xffffffff;\n                    while (v101 > (int32_t)v104) {\n                        // 0x40a0b9\n                        v103 = v102;\n                        v104 = v103 + 8;\n                        v105 = *(int64_t *)(v100 + v103);\n                        *(int64_t *)(v103 + v97) = v105;\n                        v102 = v104 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v91 & 4) != 0) {\n                    int32_t v106 = v23; // 0x40a116\n                    *(int32_t *)v92 = v106;\n                    int64_t v107 = (v91 & 0xffffffff) - 4;\n                    int32_t v108 = *(int32_t *)(v107 + v26); // 0x40a11e\n                    *(int32_t *)(v92 + v107) = v108;\n                } else {\n                    if (v93 != 0) {\n                        int32_t v109 = v23; // 0x409f6a\n                        *(char *)v92 = (char)v109;\n                        if ((v91 & 2) != 0) {\n                            int64_t v110 = (v91 & 0xffffffff) - 2;\n                            int16_t v111 = *(int16_t *)(v110 + v26); // 0x40a165\n                            *(int16_t *)(v92 + v110) = v111;\n                        }\n                    }\n                }\n            }\n            uint64_t v112 = *v30; // 0x409f7e\n            uint64_t v113 = *v28; // 0x409f82\n            v114 = v68;\n            v115 = v112;\n            v116 = v67;\n            v12 = v68;\n            v10 = v67;\n            if (v112 < v113) {\n                goto lab_0x409e0e;\n            } else {\n                goto lab_0x409f8c;\n            }\n        }\n    }\n  lab_0x409d45:;\n    int64_t * mem3 = malloc(size); // 0x409d45\n    int64_t v117 = (int64_t)&g17; // 0x409d50\n    int64_t v118; // 0x409c20\n    int64_t path; // 0x409c20\n    if (mem3 == NULL) {\n        goto lab_0x409d22;\n    } else {\n        int64_t v119 = (int64_t)mem3; // 0x409d45\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v119) = 47;\n        path = v119;\n        v118 = v4;\n        goto lab_0x409d66;\n    }\n  lab_0x409c5a:;\n    int64_t str = v1 == NULL ? (int64_t)&g17 : (int64_t)v1; // 0x409c4d\n    char v120 = *v3; // 0x409c5a\n    int64_t v121; // 0x409c20\n    if (v120 == 0) {\n        // 0x409cb4\n        v121 = str;\n        return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n    }\n    char v122 = v120; // 0x409c20\n    int64_t v123 = v7;\n    char * str2 = (char *)v123;\n    int64_t v124; // 0x409c20\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v125 = v123 + 1;\n        if (v122 == 42) {\n            // 0x409ca0\n            v124 = v125;\n            if (*(char *)v125 == 0) {\n                goto lab_0x409ca7;\n            }\n        }\n        int64_t str3 = v125 + (int64_t)strlen(str2); // 0x409c70\n        int64_t v126 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x409c7d\n        char v127 = *(char *)v126; // 0x409c82\n        v122 = v127;\n        if (v127 == 0) {\n            // 0x409cb4\n            v121 = str;\n            return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n        }\n        v123 = v126;\n        str2 = (char *)v123;\n    }\n    // 0x409c8b\n    v124 = v123 + 1;\n  lab_0x409ca7:\n    // 0x409cb4\n    v121 = v124 + (int64_t)strlen(str2);\n    return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n  lab_0x409d22:;\n    char * v128 = (char *)v117;\n    g54 = v128;\n    v3 = v128;\n    v7 = v117;\n    goto lab_0x409c5a;\n  lab_0x409d66:;\n    int64_t v129 = v118 + path; // 0x409d66\n    *(int64_t *)v129 = 0x2e74657372616863;\n    *(int16_t *)(v129 + 12) = 115;\n    *(int32_t *)(v129 + 8) = 0x61696c61;\n    if (open((char *)path, O_RDONLY) >= 0) {\n        // 0x409dc1\n        int32_t fd; // 0x409d92\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40a0f2\n            close(fd);\n        } else {\n            int64_t v130 = (int64_t)stream; // 0x409dcb\n            v26 = &v23;\n            v27 = &v24;\n            v30 = (int64_t *)(v130 + 8);\n            v28 = (int64_t *)(v130 + 16);\n            v25 = 0;\n            v22 = 0;\n            while (true) {\n              lab_0x409e00_2:;\n                int64_t v131 = v22;\n                int64_t v132 = v25;\n                uint64_t v133 = *v30; // 0x409e00\n                uint64_t v134 = *v28; // 0x409e04\n                v114 = v132;\n                v115 = v133;\n                v116 = v131;\n                v12 = v132;\n                v10 = v131;\n                if (v133 >= v134) {\n                    goto lab_0x409f8c;\n                } else {\n                    goto lab_0x409e0e;\n                }\n            }\n          lab_0x409f9f:;\n            int64_t v135 = v18;\n            if (v135 != 0) {\n                int64_t v136 = v19;\n                *(char *)(v136 + v135) = 0;\n            }\n        }\n    }\n    goto lab_0x409da4;\n  lab_0x409d0b:;\n    int64_t * mem4 = malloc(size2); // 0x409d0b\n    v117 = (int64_t)&g17;\n    if (mem4 != NULL) {\n        // 0x409db1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v118 = v8;\n        goto lab_0x409d66;\n    } else {\n        goto lab_0x409d22;\n    }\n  lab_0x409da4:\n    // 0x409da4\n    free((int64_t *)path);\n    v117 = (int64_t)&g17;\n    goto lab_0x409d22;\n}\n"
        },
        {
            "funcName": "function_40a190",
            "funcStartAddr": "40a190",
            "funcEndAddr": "40a19e",
            "decompiledFuncCode": "int64_t function_40a190(int64_t a1, int64_t a2) {\n    // 0x40a190\n    int64_t v1; // 0x40a190\n    return function_408a90(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40a1a0",
            "funcStartAddr": "40a1a0",
            "funcEndAddr": "40a1fd",
            "decompiledFuncCode": "int64_t function_40a1a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a1a0\n    return function_401b08();\n}\n"
        },
        {
            "funcName": "function_40a200",
            "funcStartAddr": "40a200",
            "funcEndAddr": "40a201",
            "decompiledFuncCode": "int64_t function_40a200(void) {\n    // 0x40a200\n    int64_t result; // 0x40a200\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a210",
            "funcStartAddr": "40a210",
            "funcEndAddr": "40a228",
            "decompiledFuncCode": "int64_t function_40a210(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a210\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g23);\n}\n"
        },
        {
            "funcName": "function_40a228",
            "funcStartAddr": "40a228",
            "funcEndAddr": "40a248",
            "decompiledFuncCode": "int64_t function_40a228(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g19; // 0x40a232\n    while (*(int64_t *)v1 != -1) {\n        // 0x40a233\n        v1 -= 8;\n    }\n    // 0x40a244\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf"
}