{
    "funcInfo": [
        {
            "funcName": "function_401930",
            "funcStartAddr": "401930",
            "funcEndAddr": "401935",
            "decompiledFuncCode": "int64_t function_401930(void) {\n    // 0x401930\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401935",
            "funcStartAddr": "401935",
            "funcEndAddr": "40193a",
            "decompiledFuncCode": "int64_t function_401935(void) {\n    // 0x401935\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40193a",
            "funcStartAddr": "40193a",
            "funcEndAddr": "40193f",
            "decompiledFuncCode": "int64_t function_40193a(void) {\n    // 0x40193a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40193f",
            "funcStartAddr": "40193f",
            "funcEndAddr": "401944",
            "decompiledFuncCode": "int64_t function_40193f(void) {\n    // 0x40193f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401944",
            "funcStartAddr": "401944",
            "funcEndAddr": "401949",
            "decompiledFuncCode": "int64_t function_401944(void) {\n    // 0x401944\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401949",
            "funcStartAddr": "401949",
            "funcEndAddr": "40194e",
            "decompiledFuncCode": "int64_t function_401949(void) {\n    // 0x401949\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40194e",
            "funcStartAddr": "40194e",
            "funcEndAddr": "401953",
            "decompiledFuncCode": "int64_t function_40194e(void) {\n    // 0x40194e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401953",
            "funcStartAddr": "401953",
            "funcEndAddr": "401958",
            "decompiledFuncCode": "int64_t function_401953(void) {\n    // 0x401953\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401960",
            "funcStartAddr": "401960",
            "funcEndAddr": "40201d",
            "decompiledFuncCode": "int64_t function_401960(int64_t a1, int64_t a2) {\n    char * exec_argv[1]; // 0x401d74\n    // 0x401960\n    function_4027f0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g21 = 125;\n    int64_t v1; // 0x401960\n    function_409450(0x4024e0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    bool v2; // 0x401960\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4; // 0x401960\n    int64_t v5; // 0x401960\n    int64_t v6; // 0x4019de\n    uint32_t v7; // 0x401960\n    while (true) {\n      lab_0x4019cb:\n        // 0x4019cb\n        v5 = v4;\n        v6 = function_405eb0(a1 & 0xffffffff, a2, \"+i:o:e:\", &g4, 0, v5);\n        v7 = (int32_t)v6;\n        switch (v7) {\n            case -1: {\n                goto lab_0x401b81;\n            }\n            case 101: {\n                goto lab_0x401a39;\n            }\n            default: {\n                if (v7 <= 101) {\n                    if (v7 == -131) {\n                        // 0x4019fe\n                        function_404890((int64_t)g31, \"stdbuf\", \"GNU coreutils\", (int64_t)g20, \"Padraig Brady\", 0);\n                        exit(0);\n                        // UNREACHABLE\n                    }\n                    if (v7 == -130) {\n                        // 0x401b37\n                        function_402100(0);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x401b21;\n                }\n                switch (v7) {\n                    case 111: {\n                        goto lab_0x401a39;\n                    }\n                    case 105: {\n                        goto lab_0x401a39;\n                    }\n                    default: {\n                        goto lab_0x401b21;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401b81:;\n    int32_t v8 = *(int32_t *)0x60d27c; // 0x401b81\n    if ((int32_t)a1 - v8 < 1) {\n      lab_0x401b52:\n        // 0x401b52\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand\", 5));\n        // 0x401b21\n        function_402100(125);\n        // UNREACHABLE\n    }\n    int64_t v9 = 8 * (int64_t)v8 + a2; // 0x401b90\n    int64_t v10 = 0;\n    int64_t v11 = &g36;\n    int64_t v12 = *(int64_t *)(v11 + 16); // 0x401ba0\n    int64_t v13 = 0; // 0x401ba7\n    int64_t v14 = v10; // 0x401ba7\n    int64_t v15; // 0x401960\n    int64_t v16; // 0x401960\n    char * str; // bp-248, 0x401960\n    int64_t v17; // 0x401960\n    int32_t v18; // 0x401ba9\n    int64_t v19; // 0x401ba9\n    uint32_t v20; // 0x401baf\n    int64_t v21; // 0x401bbb\n    int32_t v22; // 0x401de1\n    int64_t v23; // 0x401df5\n    int32_t v24; // 0x401be1\n    int64_t v25; // 0x401bf5\n    if (v12 != 0) {\n        // 0x401ba9\n        v18 = *(int32_t *)(v11 + 8);\n        v19 = v18;\n        v20 = v18 + 128;\n        if (*(char *)v12 == 76) {\n            // 0x401dc8\n            v22 = v18;\n            if (v20 < 384) {\n                // 0x401dd0\n                v22 = *(int32_t *)((0x100000000 * v19 >> 30) + (int64_t)*__ctype_toupper_loc());\n            }\n            // 0x401de4\n            v23 = function_4050d0((int64_t *)&str, \"%s%c=L\", \"_STDBUF_\", v22, v10, v5);\n            v15 = v10;\n            v17 = v23;\n        } else {\n            // 0x401bbb\n            v21 = *(int64_t *)v11;\n            v24 = v18;\n            if (v20 < 384) {\n                // 0x401bc6\n                v24 = *(int32_t *)((0x100000000 * v19 >> 30) + (int64_t)*__ctype_toupper_loc());\n            }\n            // 0x401be4\n            v25 = function_4050d0((int64_t *)&str, \"%s%c=%lu\", \"_STDBUF_\", v24, v21, v5);\n            v15 = v21;\n            v17 = v25;\n        }\n        // 0x401bfa\n        if ((int32_t)v17 < 0) {\n            // 0x401f53\n            v16 = (int64_t)&str;\n            goto lab_0x401f53_2;\n        }\n        // 0x401c02\n        v13 = 1;\n        v14 = v15;\n        if (putenv(str) != 0) {\n            goto lab_0x401f91;\n        }\n    }\n    int64_t v26 = v14;\n    int64_t v27 = v13;\n    int64_t v28 = v11 + 24; // 0x401c19\n    while (v28 != (int64_t)&g39) {\n        // 0x401ba0\n        v11 = v28;\n        v12 = *(int64_t *)(v11 + 16);\n        v13 = v27;\n        v14 = v26;\n        if (v12 != 0) {\n            // 0x401ba9\n            v18 = *(int32_t *)(v11 + 8);\n            v19 = v18;\n            if (*(char *)v12 == 76) {\n                // 0x401dc8\n                v22 = v18;\n                if (v20 < 384) {\n                    // 0x401dd0\n                    v22 = *(int32_t *)((0x100000000 * v19 >> 30) + (int64_t)*__ctype_toupper_loc());\n                }\n                // 0x401de4\n                v23 = function_4050d0((int64_t *)&str, \"%s%c=L\", \"_STDBUF_\", v22, v10, v5);\n                v15 = v10;\n                v17 = v23;\n            } else {\n                // 0x401bbb\n                v21 = *(int64_t *)v11;\n                v24 = v18;\n                if (v18 < 256) {\n                    // 0x401bc6\n                    v24 = *(int32_t *)((0x100000000 * v19 >> 30) + (int64_t)*__ctype_toupper_loc());\n                }\n                // 0x401be4\n                v25 = function_4050d0((int64_t *)&str, \"%s%c=%lu\", \"_STDBUF_\", v24, v21, v5);\n            }\n            // 0x401bfa\n            if ((int32_t)v25 < 0) {\n                // 0x401f53\n                v16 = (int64_t)&str;\n                goto lab_0x401f53_2;\n            }\n            // 0x401c02\n            v13 = 1;\n            v14 = v21;\n            if (putenv(str) != 0) {\n                goto lab_0x401f91;\n            }\n        }\n        // 0x401c19\n        v26 = v14;\n        v27 = v13;\n        v28 = v11 + 24;\n    }\n    // 0x401c2a\n    if ((char)v27 == 0) {\n        // 0x401b52\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify a buffering mode option\", 5));\n        // 0x401b21\n        function_402100(125);\n        // UNREACHABLE\n    }\n    // 0x401c32\n    int64_t v29; // 0x401960\n    if (strchr(g42, 47) == NULL) {\n        int64_t v30 = function_404c60(); // 0x401e1d\n        int64_t v31; // 0x401960\n        if (v30 == 0) {\n            char * env_val = getenv(\"PATH\"); // 0x401e7d\n            v31 = (int64_t)env_val;\n            if (env_val != NULL) {\n                int64_t str2 = function_404c00(env_val); // 0x401e8d\n                char * next_token = strtok((char *)str2, \":\"); // 0x401e9d\n                v31 = str2;\n                if (next_token != NULL) {\n                    int64_t path = function_4026f0(); // 0x401ec6\n                    while (access((char *)path, X_OK) != 0) {\n                        // 0x401ea4\n                        free((int64_t *)path);\n                        v31 = str2;\n                        if (strtok(NULL, \":\") == NULL) {\n                            goto lab_0x401e39;\n                        }\n                        path = function_4026f0();\n                    }\n                    // 0x401ee2\n                    g39 = function_402580();\n                    free((int64_t *)path);\n                    v31 = str2;\n                }\n            }\n        } else {\n            // 0x401e2a\n            g39 = function_402580();\n            v31 = v30;\n        }\n      lab_0x401e39:\n        // 0x401e39\n        free((int64_t *)v31);\n        v29 = g39;\n    } else {\n        int64_t v32 = function_402580(); // 0x401c52\n        g39 = v32;\n        v29 = v32;\n    }\n    // 0x401c5e\n    if (v29 == 0) {\n        // 0x401e62\n        g39 = function_404c00(\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib/coreutils\");\n    }\n    char * env_val2 = getenv(\"LD_PRELOAD\"); // 0x401c76\n    int64_t v33 = g39; // bp-232, 0x401c9a\n    char * v34; // 0x401960\n    char * str3; // bp-200, 0x401960\n    char * v35; // bp-240, 0x401960\n    if (*(char *)g39 != 0) {\n        int64_t v36 = g39; // 0x401cbe\n        int64_t v37 = &v33; // 0x401cb5\n        while ((int32_t)function_4050d0((int64_t *)&v35, \"%s/%s\", (char *)v36, (int32_t)\"libstdbuf.so\", v26, v5) >= 0) {\n            int32_t v38 = __xstat(1, v35, (struct stat *)&str3); // 0x401d03\n            v34 = v35;\n            if (v38 == 0) {\n                goto lab_0x401d0c;\n            }\n            // 0x401cb0\n            v37 += 8;\n            free((int64_t *)v35);\n            v36 = *(int64_t *)v37;\n            if (v36 == 0) {\n                // 0x401f5f\n                function_404410((int64_t)\"libstdbuf.so\");\n                error(125, (int32_t)\"failed to find %s\" ^ (int32_t)\"failed to find %s\", dcgettext((char *)((int32_t)\"libstdbuf.so\" ^ (int32_t)\"libstdbuf.so\"), \"failed to find %s\", 5));\n                goto lab_0x401f91;\n            }\n            // 0x401cca\n            if (*(char *)v36 == 0) {\n                goto lab_0x401e04;\n            }\n        }\n        // 0x401f53\n        function_404c20((int64_t)&v35);\n        // UNREACHABLE\n    }\n  lab_0x401e04:;\n    char * v39 = (char *)function_404c00(\"libstdbuf.so\"); // 0x401e0e\n    v35 = v39;\n    v34 = v39;\n  lab_0x401d0c:;\n    int64_t v40 = (int64_t)v34; // 0x401d0c\n    int64_t v41; // 0x401960\n    if (env_val2 == NULL) {\n        int64_t v42 = function_4050d0((int64_t *)&str3, \"%s=%s\", \"LD_PRELOAD\", (int32_t)v40, v40, v5); // 0x401e58\n        v41 = v42;\n    } else {\n        int64_t v43 = function_4050d0((int64_t *)&str3, \"%s=%s:%s\", \"LD_PRELOAD\", (int32_t)(int64_t)env_val2, v40, v5); // 0x401d2c\n        v41 = v43;\n    }\n    // 0x401d31\n    v16 = (int64_t)&str3;\n    if ((int32_t)v41 < 0) {\n      lab_0x401f53_2:\n        // 0x401f53\n        function_404c20(v16);\n        // UNREACHABLE\n    }\n    // 0x401d39\n    free((int64_t *)v35);\n    int32_t v44 = putenv(str3); // 0x401d48\n    int32_t * err_num = __errno_location(); // 0x401d4f\n    if (v44 == 0) {\n        // 0x401d5f\n        free((int64_t *)g39);\n        int64_t * file = (int64_t *)v9; // 0x401d6d\n        exec_argv[0] = (char *)v9;\n        execvp((char *)*file, exec_argv);\n        function_404410(*file);\n        error(0, *err_num, dcgettext(NULL, \"failed to run command %s\", 5));\n        return *err_num == 2 ? 127 : 126;\n    }\n    // 0x401fda\n    function_404410((int64_t)str3);\n    error(125, *err_num, dcgettext(NULL, \"failed to update the environment with %s\", 5));\n    // 0x401b52\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"you must specify a buffering mode option\", 5));\n    // 0x401b21\n    function_402100(125);\n    // UNREACHABLE\n  lab_0x401f91:\n    // 0x401f91\n    function_404410((int64_t)str);\n    error(125, *__errno_location(), dcgettext(NULL, \"failed to update the environment with %s\", 5));\n    goto lab_0x401b52;\n  lab_0x401a39:;\n    uint32_t v45 = *(int32_t *)((4 * v6 + 0x3fffffe6c & 0x3fffffffc) + (int64_t)&g3); // 0x401a3c\n    if (v45 >= 3) {\n        // 0x401f3a\n        __assert_fail(\"0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)\", \"src/stdbuf.c\", 335, \"main\");\n        v16 = (int64_t)\"0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)\";\n        goto lab_0x401f53_2;\n    }\n    int64_t v46 = (int64_t)g52; // 0x401a4d\n    int64_t v47 = 24 * (int64_t)v45; // 0x401a58\n    *(int32_t *)(v47 + (int64_t)&g37) = v7;\n    unsigned char v48 = *g52; // 0x401a5f\n    int64_t v49 = v46; // 0x401a66\n    if (v48 < 33) {\n        unsigned char v50 = v48 % 64;\n        int64_t v51 = v46; // 0x401a71\n        v49 = v46;\n        if (v50 != 0 && (1 << (int64_t)v50 & 0x100003e00) != 0) {\n            int64_t v52 = v51 + 1;\n            char * v53 = (char *)v52; // 0x401a77\n            g52 = v53;\n            unsigned char v54 = *v53; // 0x401a7e\n            v49 = v52;\n            while (v54 < 33) {\n                unsigned char v55 = v54 % 64;\n                v51 = v52;\n                v49 = v52;\n                if (v55 == 0 || (1 << (int64_t)v55 & 0x100003e00) == 0) {\n                    // break -> 0x401a90\n                    break;\n                }\n                v52 = v51 + 1;\n                v53 = (char *)v52;\n                g52 = v53;\n                v54 = *v53;\n                v49 = v52;\n            }\n        }\n    }\n    int64_t v56 = v49;\n    *(int64_t *)(v47 + (int64_t)&g38) = v56;\n    if (v7 == 105) {\n        // 0x401b3e\n        if (*(char *)v56 == 76) {\n            // 0x401b52\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"line buffering stdin is meaningless\", 5));\n            // 0x401b21\n            function_402100(125);\n            // UNREACHABLE\n        }\n    }\n    int64_t v57 = 2; // 0x401960\n    int64_t v58 = v56;\n    int64_t v59 = (int64_t)&g2;\n    unsigned char v60 = *(char *)v58; // 0x401ab2\n    char v61 = *(char *)v59; // 0x401ab2\n    char v62 = v61; // 0x401ab2\n    bool v63 = false; // 0x401ab2\n    while (v60 == v61) {\n        int64_t v64 = v57 - 1; // 0x401ab2\n        int64_t v65 = v59 + v3; // 0x401ab2\n        int64_t v66 = v58 + v3; // 0x401ab2\n        v57 = v64;\n        v62 = v60;\n        v63 = true;\n        if (v64 == 0) {\n            // break -> \n            break;\n        }\n        v58 = v66;\n        v59 = v65;\n        v60 = *(char *)v58;\n        v61 = *(char *)v59;\n        v62 = v61;\n        v63 = false;\n    }\n    unsigned char v67 = v62;\n    int32_t * err_num2; // 0x401ae2\n    int32_t v68; // 0x401f00\n    if ((v60 >= v67 && !v63) != v60 < v67) {\n        int64_t v69 = function_404c90(v56, 0, 10, (int64_t *)&str3, \"EGkKMPTYZ0\", v56); // 0x401ad9\n        err_num2 = __errno_location();\n        int32_t v70 = v69;\n        if (v70 != 0) {\n            // 0x401efb\n            v68 = 75;\n            if (v70 == 1) {\n                goto lab_0x401f02;\n            } else {\n                // 0x401f00\n                v68 = *err_num2;\n                goto lab_0x401f02;\n            }\n        }\n        // 0x401af6\n        *err_num2 = 0;\n        *(int64_t *)(v47 + (int64_t)&g36) = (int64_t)str3;\n    }\n    // 0x4019cb\n    v4 = v56;\n    goto lab_0x4019cb;\n  lab_0x401f02:\n    // 0x401f02\n    *err_num2 = v68;\n    function_404410((int64_t)g52);\n    error(125, *err_num2, dcgettext(NULL, \"invalid mode %s\", 5));\n    // 0x401f3a\n    __assert_fail(\"0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)\", \"src/stdbuf.c\", 335, \"main\");\n    v16 = (int64_t)\"0 <= opt_fileno && opt_fileno < ARRAY_CARDINALITY (stdbuf)\";\n    goto lab_0x401f53_2;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402020",
            "funcEndAddr": "40204b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402020\n    int64_t v1; // 0x402020\n    __libc_start_main(0x401960, (int32_t)a4, (char **)&v1, (void (*)())0x4093e0, (void (*)())0x409440, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40204b",
            "funcStartAddr": "40204b",
            "funcEndAddr": "40206a",
            "decompiledFuncCode": "int64_t function_40204b(void) {\n    // 0x40204b\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_40206a",
            "funcStartAddr": "40206a",
            "funcEndAddr": "4020a1",
            "decompiledFuncCode": "int64_t function_40206a(void) {\n    // 0x40206a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4020a1",
            "funcStartAddr": "4020a1",
            "funcEndAddr": "4020f8",
            "decompiledFuncCode": "int64_t function_4020a1(void) {\n    // 0x4020a1\n    if (g34 != 0) {\n        // 0x4020f7\n        int64_t result; // 0x4020a1\n        return result;\n    }\n    int64_t v1 = g35; // 0x4020d4\n    int64_t result2; // 0x4020e6\n    if (g35 >= ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x4020e6\n        result2 = function_40204b();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x4020d6\n        v1++;\n    }\n    // 0x4020ca\n    g35 = v1;\n    // 0x4020e6\n    result2 = function_40204b();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4020f8",
            "funcStartAddr": "4020f8",
            "funcEndAddr": "4020fd",
            "decompiledFuncCode": "int64_t function_4020f8(void) {\n    // 0x4020f8\n    return function_40206a();\n}\n"
        },
        {
            "funcName": "function_402100",
            "funcStartAddr": "402100",
            "funcEndAddr": "4024bd",
            "decompiledFuncCode": "int64_t function_402100(int64_t a1) {\n    int32_t status = a1; // 0x402116\n    if (status != 0) {\n        // 0x40211a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40213f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402146\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s OPTION... COMMAND\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Run COMMAND, with modified buffering operations for its standard streams.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -i, --input=MODE   adjust standard input stream buffering\\n  -o, --output=MODE  adjust standard output stream buffering\\n  -e, --error=MODE   adjust standard error stream buffering\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf MODE is 'L' the corresponding stream will be line buffered.\\nThis option is invalid with standard input.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf MODE is '0' the corresponding stream will be unbuffered.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nOtherwise MODE is a number which may be followed by one of the following:\\nKB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.\\nIn this case the corresponding stream will be fully buffered with the buffer\\nsize set to MODE bytes.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nNOTE: If COMMAND adjusts the buffering of its standard streams ('tee' does\\nfor example) then that will override corresponding changes by 'stdbuf'.\\nAlso some filters (like 'dd' and 'cat' etc.) don't use streams for I/O,\\nand are thus unaffected by 'stdbuf' settings.\\n\", 5), g31);\n    int64_t v1 = &g1; // bp-136, 0x40229f\n    bool v2; // 0x402100\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402320\n    int64_t v6 = *(int64_t *)v5; // 0x402324\n    int64_t v7 = 7; // 0x40232a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"stdbuf\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402336\n        char v11 = *(char *)v9; // 0x402336\n        char v12 = v11; // 0x402336\n        bool v13 = false; // 0x402336\n        while (v10 == v11) {\n            // 0x40232c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402336\n            int64_t v15 = v8 + v3; // 0x402336\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402342\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x402342\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402454;\n        } else {\n            // 0x40243e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402493\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4023a4;\n            } else {\n                goto lab_0x402454;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4023a4;\n        } else {\n            // 0x40238a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402493\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4023a4;\n            } else {\n                goto lab_0x4023a4;\n            }\n        }\n    }\n  lab_0x402454:\n    // 0x402454\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4023e4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4023a4:\n    // 0x4023a4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4023e4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4024c0",
            "funcStartAddr": "4024c0",
            "funcEndAddr": "4024c8",
            "decompiledFuncCode": "int64_t function_4024c0(int64_t a1) {\n    // 0x4024c0\n    g41 = a1;\n    int64_t result; // 0x4024c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4024d0",
            "funcStartAddr": "4024d0",
            "funcEndAddr": "4024d8",
            "decompiledFuncCode": "int64_t function_4024d0(int64_t a1) {\n    // 0x4024d0\n    g40 = a1;\n    int64_t result; // 0x4024d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4024e0",
            "funcStartAddr": "4024e0",
            "funcEndAddr": "40257e",
            "decompiledFuncCode": "int64_t function_4024e0(void) {\n    // 0x4024e0\n    int32_t * err_num; // 0x4024f6\n    if ((int32_t)function_406240((int64_t)g31) == 0) {\n        goto lab_0x40250c;\n    } else {\n        // 0x4024f6\n        err_num = __errno_location();\n        if (g40 == 0) {\n            goto lab_0x402523;\n        } else {\n            // 0x402507\n            if (*err_num != 32) {\n                goto lab_0x402523;\n            } else {\n                goto lab_0x40250c;\n            }\n        }\n    }\n  lab_0x40250c:;\n    int64_t result = function_406240((int64_t)g33); // 0x402513\n    if ((int32_t)result == 0) {\n        // 0x40251c\n        return result;\n    }\n    // 0x40255e\n    _exit(g21);\n    // UNREACHABLE\n  lab_0x402523:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40252f\n    if (g41 == 0) {\n        // 0x402569\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402543\n        error(0, *err_num, \"%s: %s\", (char *)function_404260((int64_t)g41), v1);\n    }\n    // 0x40255e\n    _exit(g21);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402580",
            "funcStartAddr": "402580",
            "funcEndAddr": "402598",
            "decompiledFuncCode": "int64_t function_402580(void) {\n    // 0x402580\n    int64_t v1; // 0x402580\n    int64_t result = function_402600(v1); // 0x402584\n    if (result != 0) {\n        // 0x40258e\n        return result;\n    }\n    // 0x402593\n    function_404c20(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4025a0",
            "funcStartAddr": "4025a0",
            "funcEndAddr": "4025fd",
            "decompiledFuncCode": "int64_t function_4025a0(int64_t a1) {\n    // 0x4025a0\n    int64_t v1; // 0x4025a0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x4025ae\n    int64_t v3 = function_402660(a1, v1); // 0x4025b2\n    int64_t result = v3 - a1; // 0x4025ba\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x4025e3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x4025d0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x4025e3\n            break;\n        }\n        result2--;\n    }\n    // 0x4025e3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402600",
            "funcStartAddr": "402600",
            "funcEndAddr": "40265a",
            "decompiledFuncCode": "int64_t function_402600(int64_t a1) {\n    // 0x402600\n    int64_t v1; // 0x402600\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x40261f\n    if (mem == NULL) {\n        // 0x402646\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x402635\n    int64_t v3; // 0x402600\n    if (v2 == 0) {\n        // 0x402650\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x402635\n    *(char *)(v3 + result) = 0;\n    // 0x402646\n    return result;\n}\n"
        },
        {
            "funcName": "function_402660",
            "funcStartAddr": "402660",
            "funcEndAddr": "4026bb",
            "decompiledFuncCode": "int64_t function_402660(int64_t a1, int64_t a2) {\n    // 0x402660\n    int64_t v1; // 0x402660\n    char v2 = v1;\n    int64_t v3 = a1; // 0x402669\n    int64_t v4 = a1; // 0x402669\n    char v5 = v2; // 0x402669\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x402674\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x402670\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40267e\n    if (v5 == 0) {\n      lab_0x4026ba:\n        // 0x4026ba\n        return result;\n    }\n    int64_t v7 = v4; // 0x4026a8\n    int64_t v8 = 0; // 0x4026a8\n    int64_t v9; // 0x402660\n    int64_t v10; // 0x4026aa\n    char v11; // 0x4026ae\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x4026a5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x4026aa\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4026a5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40269a\n    char v14 = *(char *)v13; // 0x40269e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4026a5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x4026aa\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x4026a5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x402690\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x4026ba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4026c0",
            "funcStartAddr": "4026c0",
            "funcEndAddr": "4026eb",
            "decompiledFuncCode": "int64_t function_4026c0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4026c4\n    int64_t result = len; // 0x4026c4\n    if (len < 2) {\n        // 0x4026da\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x4026d8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x4026e0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x4026da\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x4026da\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4026f0",
            "funcStartAddr": "4026f0",
            "funcEndAddr": "402708",
            "decompiledFuncCode": "int64_t function_4026f0(void) {\n    // 0x4026f0\n    int64_t v1; // 0x4026f0\n    int64_t result = function_402710(v1, v1, v1); // 0x4026f4\n    if (result != 0) {\n        // 0x4026fe\n        return result;\n    }\n    // 0x402703\n    function_404c20(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402710",
            "funcStartAddr": "402710",
            "funcEndAddr": "4027e9",
            "decompiledFuncCode": "int64_t function_402710(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_402660(a1, a2); // 0x402728\n    int64_t v2 = function_4026c0(v1); // 0x402733\n    int64_t v3 = 0; // 0x402747\n    if (v2 != 0) {\n        // 0x402749\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x402760\n    int64_t v4 = a2; // 0x402760\n    int64_t v5; // 0x402710\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x4027d8\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x402741\n    int32_t len = strlen((char *)str); // 0x402765\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x402775\n    if (mem == NULL) {\n        // 0x4027c1\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40278b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x402797\n    if (a3 != 0) {\n        // 0x4027a0\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x4027b3\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x4027c1\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_4027f0",
            "funcStartAddr": "4027f0",
            "funcEndAddr": "402889",
            "decompiledFuncCode": "int64_t function_4027f0(int64_t str) {\n    // 0x4027f0\n    if (str == 0) {\n        // 0x402869\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4027fe\n    int64_t result = (int64_t)found_char_pos; // 0x4027fe\n    if (found_char_pos == NULL) {\n        // 0x402859\n        g42 = (char *)str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402808\n    if (v1 - str < 7) {\n        // 0x402859\n        g42 = (char *)str;\n        g32 = str;\n        return result;\n    }\n    // 0x402818\n    bool v2; // 0x4027f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4027f0\n    int64_t v5 = result - 6; // 0x4027f0\n    int64_t v6 = 7; // 0x402826\n    unsigned char v7 = *(char *)v5; // 0x402826\n    char v8 = *(char *)v4; // 0x402826\n    char v9 = v8; // 0x402826\n    bool v10 = false; // 0x402826\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402830\n    int64_t v13 = v1; // 0x402830\n    int64_t v14 = 3; // 0x402830\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402859\n        g42 = (char *)str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402842\n    char v16 = *(char *)v12; // 0x402842\n    char v17 = v16; // 0x402842\n    bool v18 = false; // 0x402842\n    while (v15 == v16) {\n        // 0x402832\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40284c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40284e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x402859\n    g42 = (char *)v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402890",
            "funcStartAddr": "402890",
            "funcEndAddr": "402982",
            "decompiledFuncCode": "int64_t function_402890(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4028a4\n    int64_t result = (int64_t)v1; // 0x4028a4\n    if (result != a1) {\n        // 0x4028b1\n        return result;\n    }\n    int64_t v2 = function_406300(); // 0x4028c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402976\n    if (v3 == 85) {\n        // 0x4028d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402968\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4028fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40290b\n        // 0x4028b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402968\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40294d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40295a\n    // 0x4028b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402990",
            "funcStartAddr": "402990",
            "funcEndAddr": "4029e7",
            "decompiledFuncCode": "int64_t function_402990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402990\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4029d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4029e7",
            "funcStartAddr": "4029e7",
            "funcEndAddr": "403bb1",
            "decompiledFuncCode": "int64_t function_4029e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402a31\n    int64_t v3 = 0; // 0x402a31\n    int64_t v4; // 0x4029e7\n    int64_t v5; // 0x4029e7\n    int64_t v6; // 0x4029e7\n    int64_t v7; // 0x4029e7\n    int64_t v8; // 0x4029e7\n    int64_t v9; // 0x4029e7\n    int64_t v10; // 0x4029e7\n    int64_t v11; // 0x4029e7\n    int64_t v12; // 0x4029e7\n    int64_t v13; // 0x4029e7\n    int64_t v14; // 0x4029e7\n    int64_t v15; // 0x4029e7\n    int64_t v16; // 0x4029e7\n    int64_t v17; // 0x4029e7\n    int64_t v18; // 0x4029e7\n    int64_t result; // 0x4029e7\n    int64_t v19; // 0x4029e7\n    int32_t wc; // bp+132, 0x4029e7\n    int64_t ps; // bp+136, 0x4029e7\n    char v20; // 0x402fa0\n    int64_t v21; // 0x402fa0\n    int64_t v22; // 0x403348\n    int64_t v23; // 0x4029e7\n    int64_t v24; // 0x403367\n    int32_t v25; // 0x4029e7\n    while (true) {\n      lab_0x402a38_2:\n        // 0x402a38\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4029e7\n        int64_t v27; // 0x402a6c\n        while (true) {\n          lab_0x402a38:\n            // 0x402a38\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402a43\n            if (v15 == -1) {\n                // 0x402a45\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402a53\n            if (v28) {\n                // break (via goto) -> 0x4031b8\n                goto lab_0x4031b8;\n            }\n            // 0x402a5c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g58 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40304b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402b91;\n                    }\n                    // 0x40346d\n                    v26 = v5 + 1;\n                    goto lab_0x402a38;\n                }\n                case 7: {\n                    goto lab_0x402b91;\n                }\n                case 8: {\n                    goto lab_0x402b91;\n                }\n                case 9: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402b91;\n                }\n                case 12: {\n                    goto lab_0x402b91;\n                }\n                case 13: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402b5d;\n                }\n                case 36: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402b91;\n                }\n                case 38: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402b91;\n                }\n                case 44: {\n                    goto lab_0x402b91;\n                }\n                case 45: {\n                    goto lab_0x402b91;\n                }\n                case 46: {\n                    goto lab_0x402b91;\n                }\n                case 47: {\n                    goto lab_0x402b91;\n                }\n                case 48: {\n                    goto lab_0x402b91;\n                }\n                case 49: {\n                    goto lab_0x402b91;\n                }\n                case 50: {\n                    goto lab_0x402b91;\n                }\n                case 51: {\n                    goto lab_0x402b91;\n                }\n                case 52: {\n                    goto lab_0x402b91;\n                }\n                case 53: {\n                    goto lab_0x402b91;\n                }\n                case 54: {\n                    goto lab_0x402b91;\n                }\n                case 55: {\n                    goto lab_0x402b91;\n                }\n                case 56: {\n                    goto lab_0x402b91;\n                }\n                case 57: {\n                    goto lab_0x402b91;\n                }\n                case 58: {\n                    goto lab_0x402b91;\n                }\n                case 59: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402b91;\n                }\n                case 66: {\n                    goto lab_0x402b91;\n                }\n                case 67: {\n                    goto lab_0x402b91;\n                }\n                case 68: {\n                    goto lab_0x402b91;\n                }\n                case 69: {\n                    goto lab_0x402b91;\n                }\n                case 70: {\n                    goto lab_0x402b91;\n                }\n                case 71: {\n                    goto lab_0x402b91;\n                }\n                case 72: {\n                    goto lab_0x402b91;\n                }\n                case 73: {\n                    goto lab_0x402b91;\n                }\n                case 74: {\n                    goto lab_0x402b91;\n                }\n                case 75: {\n                    goto lab_0x402b91;\n                }\n                case 76: {\n                    goto lab_0x402b91;\n                }\n                case 77: {\n                    goto lab_0x402b91;\n                }\n                case 78: {\n                    goto lab_0x402b91;\n                }\n                case 79: {\n                    goto lab_0x402b91;\n                }\n                case 80: {\n                    goto lab_0x402b91;\n                }\n                case 81: {\n                    goto lab_0x402b91;\n                }\n                case 82: {\n                    goto lab_0x402b91;\n                }\n                case 83: {\n                    goto lab_0x402b91;\n                }\n                case 84: {\n                    goto lab_0x402b91;\n                }\n                case 85: {\n                    goto lab_0x402b91;\n                }\n                case 86: {\n                    goto lab_0x402b91;\n                }\n                case 87: {\n                    goto lab_0x402b91;\n                }\n                case 88: {\n                    goto lab_0x402b91;\n                }\n                case 89: {\n                    goto lab_0x402b91;\n                }\n                case 90: {\n                    goto lab_0x402b91;\n                }\n                case 91: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402b91;\n                }\n                case 94: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402b91;\n                }\n                case 96: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402b91;\n                }\n                case 98: {\n                    goto lab_0x402b91;\n                }\n                case 99: {\n                    goto lab_0x402b91;\n                }\n                case 100: {\n                    goto lab_0x402b91;\n                }\n                case 101: {\n                    goto lab_0x402b91;\n                }\n                case 102: {\n                    goto lab_0x402b91;\n                }\n                case 103: {\n                    goto lab_0x402b91;\n                }\n                case 104: {\n                    goto lab_0x402b91;\n                }\n                case 105: {\n                    goto lab_0x402b91;\n                }\n                case 106: {\n                    goto lab_0x402b91;\n                }\n                case 107: {\n                    goto lab_0x402b91;\n                }\n                case 108: {\n                    goto lab_0x402b91;\n                }\n                case 109: {\n                    goto lab_0x402b91;\n                }\n                case 110: {\n                    goto lab_0x402b91;\n                }\n                case 111: {\n                    goto lab_0x402b91;\n                }\n                case 112: {\n                    goto lab_0x402b91;\n                }\n                case 113: {\n                    goto lab_0x402b91;\n                }\n                case 114: {\n                    goto lab_0x402b91;\n                }\n                case 115: {\n                    goto lab_0x402b91;\n                }\n                case 116: {\n                    goto lab_0x402b91;\n                }\n                case 117: {\n                    goto lab_0x402b91;\n                }\n                case 118: {\n                    goto lab_0x402b91;\n                }\n                case 119: {\n                    goto lab_0x402b91;\n                }\n                case 120: {\n                    goto lab_0x402b91;\n                }\n                case 121: {\n                    goto lab_0x402b91;\n                }\n                case 122: {\n                    goto lab_0x402b91;\n                }\n                case 123: {\n                    goto lab_0x402b35;\n                }\n                case 124: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402b35;\n                }\n                case 126: {\n                    goto lab_0x402b5d;\n                }\n                default: {\n                    goto lab_0x402f35;\n                }\n            }\n        }\n      lab_0x402f35:\n        if (v23 != 1) {\n            // 0x4032a0\n            ps = 0;\n            int64_t len = v15; // 0x4032b0\n            if (v15 == -1) {\n                // 0x4032b2\n                len = strlen((char *)str);\n            }\n            // 0x4032de\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40333f:\n                // 0x40333f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403344\n                int64_t v30 = v29 + str;\n                v24 = function_405f30(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4038ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4038ba_2;\n                    }\n                    case -2: {\n                        // 0x40399d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4039d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4039da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4039e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4039e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4038ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4038ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x403310;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4033bc\n                        char v34 = *(char *)v33; // 0x4033cd\n                        unsigned char v35; // 0x4029e7\n                        if (v34 < 125) {\n                            // 0x4033d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4033ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4033c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4033cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4033d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4033ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4033c0\n                            v33++;\n                        }\n                        goto lab_0x403310;\n                    }\n                }\n            }\n            goto lab_0x4038ba_2;\n        } else {\n            // 0x402f84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402b91;\n        }\n    }\n  lab_0x4031b8:\n    // 0x4031b8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403aba\n        if (v8 > result) {\n            // 0x403ac3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402de7\n        return result;\n    }\n    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402b91:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402ba0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402daa_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ca1\n    char v40 = v20; // 0x402ca1\n    int64_t v41 = v38; // 0x402ca1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ca1\n    int64_t v43 = v36; // 0x402ca1\n    goto lab_0x402c1d;\n  lab_0x402daa_2:\n    // 0x402de7\n    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4038ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402b91;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40348e\n        int64_t v50 = v5 + 1; // 0x403571\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403578\n        char v52 = v20; // 0x403578\n        int64_t v53 = result; // 0x403578\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403541\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403545\n            int64_t v56 = v54 + 1; // 0x40354a\n            int64_t v57 = v51 + 1; // 0x403571\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40353c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403541\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403545\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402c1d;\n    }\n  lab_0x403310:\n    // 0x403310\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40332f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403332\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4038ba\n        goto lab_0x4038ba_2;\n    }\n    goto lab_0x40333f;\n  lab_0x402b5d:\n    // 0x402b5d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402daa_2;\n    }\n    goto lab_0x402b91;\n  lab_0x402b35:;\n    bool v60 = v15 == 1; // 0x402b40\n    if (v15 == -1) {\n        // 0x402b42\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402b4e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402b91;\n    } else {\n        goto lab_0x402b5d;\n    }\n  lab_0x402c1d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402c22\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402c26\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402a38_2;\n}\n"
        },
        {
            "funcName": "function_403bc0",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403d5e",
            "decompiledFuncCode": "int64_t function_403bc0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403bc2\n    int32_t * v3 = __errno_location(); // 0x403bdc\n    int64_t v4 = (int64_t)g23; // 0x403be1\n    int32_t v5 = *v3; // 0x403beb\n    int64_t v6 = v4; // 0x403c01\n    if (v2 >= (int64_t)*(int32_t *)&g26) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403d59\n            function_404c20(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403c10\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403c17\n        int64_t v9; // 0x403bc0\n        if (g23 == &g24) {\n            int64_t v10 = function_404a30(0, v8); // 0x403d3a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g24); // 0x403d3f\n            *(int64_t *)&g23 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404a30(v4, v8); // 0x403c2b\n            *(int64_t *)&g23 = v12;\n            v9 = v12;\n        }\n        // 0x403c3a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g26; // 0x403c3a\n        int32_t v14 = v7; // 0x403c41\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g26 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403c71\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403c7b\n    int64_t * v17 = (int64_t *)v15; // 0x403c7e\n    uint64_t v18 = *v17; // 0x403c7e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403c81\n    int64_t result = *v19; // 0x403c81\n    int64_t v20; // 0x403bc0\n    uint64_t v21 = function_402990(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ca4\n    if (v18 > v21) {\n        // 0x403d1b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403cb7\n    *v17 = v22;\n    if (result != (int64_t)&g43) {\n        // 0x403cc7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4049d0(v22); // 0x403ce1\n    *v19 = result2;\n    int64_t v23; // 0x403bc0\n    function_402990(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403d1b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "403d94",
            "decompiledFuncCode": "int64_t function_403d60(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403d67\n    int64_t result = function_404bd0(a1 == 0 ? (int64_t)&g44 : a1, 56); // 0x403d86\n    return result;\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403daf",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g44 : a1); // 0x403dac\n    return result;\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "403dbf",
            "decompiledFuncCode": "int64_t function_403db0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x403db8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_403dc0",
            "funcStartAddr": "403dc0",
            "funcEndAddr": "403df3",
            "decompiledFuncCode": "int64_t function_403dc0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 + 8 : a1 + 8; // 0x403dd9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403dde\n    uint32_t v3 = *v2; // 0x403dde\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403de2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403e13",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g44 + 4 : a1 + 4); // 0x403e0c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e4b",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x403e28\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403e45\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403e3c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403ec2",
            "decompiledFuncCode": "int64_t function_403e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g44 : a5; // 0x403e72\n    int32_t * v2 = __errno_location(); // 0x403e7b\n    uint32_t v3 = *(int32_t *)v1; // 0x403e9b\n    int64_t result = function_402990(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403eaa\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403fb1",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g44 : a4; // 0x403ef2\n    int32_t * v2 = __errno_location(); // 0x403ef8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403f17\n    int32_t * v4 = (int32_t *)v1; // 0x403f1a\n    int64_t v5 = function_402990(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403f35\n    int64_t v6 = v5 + 1; // 0x403f3a\n    int64_t result = function_4049d0(v6); // 0x403f4f\n    function_402990(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403f94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403f9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "403fca",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403fc0\n    return function_403ed0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "404065",
            "decompiledFuncCode": "int64_t function_403fd0(void) {\n    uint32_t v1 = *(int32_t *)&g26; // 0x403fd0\n    int64_t v2 = v1; // 0x403fd0\n    int64_t v3 = v2; // 0x403fe4\n    if (v1 >= 2) {\n        int64_t v4 = &g26;\n        int64_t v5 = v4 + 16; // 0x404003\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g59;\n        while (v5 != (int64_t)g23 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404000\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g59;\n        }\n    }\n    int64_t v6 = v3; // 0x40401d\n    if (g24 != 0x60d340) {\n        // 0x40401f\n        free((int64_t *)g24);\n        g24 = 256;\n        *(int64_t *)&g25 = (int64_t)&g43;\n        v6 = &g59;\n    }\n    int64_t result = v6; // 0x404041\n    if (g23 != &g24) {\n        // 0x404043\n        free(g23);\n        *(int64_t *)&g23 = (int64_t)&g24;\n        result = &g59;\n    }\n    // 0x404056\n    *(int32_t *)&g26 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404081",
            "decompiledFuncCode": "int64_t function_404070(void) {\n    // 0x404070\n    int64_t v1; // 0x404070\n    return function_403bc0(v1, v1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "40409a",
            "decompiledFuncCode": "int64_t function_404090(void) {\n    // 0x404090\n    int64_t v1; // 0x404090\n    return function_403bc0(v1, v1, v1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040b6",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1) {\n    // 0x4040a0\n    return function_403bc0(0, a1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040d2",
            "decompiledFuncCode": "int64_t function_4040c0(int64_t a1, int64_t a2) {\n    // 0x4040c0\n    return function_403bc0(0, a1, a2, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "404148",
            "decompiledFuncCode": "int64_t function_4040e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4040f0\n    return function_403bc0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "4041b4",
            "decompiledFuncCode": "int64_t function_404150(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404160\n    return function_403bc0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041cc",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t a2) {\n    // 0x4041c0\n    return function_4040e0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4041d0",
            "funcStartAddr": "4041d0",
            "funcEndAddr": "4041df",
            "decompiledFuncCode": "int64_t function_4041d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4041d0\n    return function_404150(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "404250",
            "decompiledFuncCode": "int64_t function_4041e0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x4041ed\n    int128_t v2 = __asm_movdqa(g45); // 0x4041f5\n    int128_t v3 = __asm_movdqa(g46); // 0x4041fd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404212\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404228\n    uint32_t v6 = *v5; // 0x404228\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40422d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403bc0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40425d",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2) {\n    // 0x404250\n    return function_4041e0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404271",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1) {\n    // 0x404260\n    return function_4041e0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "40428a",
            "decompiledFuncCode": "int64_t function_404280(void) {\n    // 0x404280\n    int64_t v1; // 0x404280\n    return function_4041e0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042fe",
            "decompiledFuncCode": "int64_t function_404290(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4042aa\n    return function_403bc0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40436c",
            "decompiledFuncCode": "int64_t function_404300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x404307\n    int128_t v2 = __asm_movdqa(g45); // 0x40430f\n    int128_t v3 = __asm_movdqa(g46); // 0x404317\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404339\n    if (a2 == 0 || a3 == 0) {\n        // 0x404367\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40434a\n    return function_403bc0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "404379",
            "decompiledFuncCode": "int64_t function_404370(void) {\n    // 0x404370\n    int64_t v1; // 0x404370\n    return function_404300(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "404397",
            "decompiledFuncCode": "int64_t function_404380(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404380\n    return function_404300(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043b3",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4043a0\n    return function_404300(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043ca",
            "decompiledFuncCode": "int64_t function_4043c0(void) {\n    // 0x4043c0\n    int64_t v1; // 0x4043c0\n    return function_403bc0(v1, v1, v1, &g22);\n}\n"
        },
        {
            "funcName": "function_4043d0",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "4043e2",
            "decompiledFuncCode": "int64_t function_4043d0(int64_t a1, int64_t a2) {\n    // 0x4043d0\n    return function_403bc0(0, a1, a2, &g22);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404401",
            "decompiledFuncCode": "int64_t function_4043f0(void) {\n    // 0x4043f0\n    int64_t v1; // 0x4043f0\n    return function_403bc0(v1, v1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404426",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1) {\n    // 0x404410\n    return function_403bc0(0, a1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40480d",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4044c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40444c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404466\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4044ab\n    if (a6 < 10) {\n        // 0x4044ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4045b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "404830",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404810\n    if (a5 == 0) {\n        // 0x40482b\n        return function_404430(a1, a2, a3, a4, a5, 0, (int64_t)&g59);\n    }\n    int64_t v1 = 0; // 0x404817\n    v1++;\n    int64_t v2 = v1; // 0x404829\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404820\n        v1++;\n        v2 = v1;\n    }\n    // 0x40482b\n    return function_404430(a1, a2, a3, a4, a5, v2, (int64_t)&g59);\n}\n"
        },
        {
            "funcName": "function_404830",
            "funcStartAddr": "404830",
            "funcEndAddr": "404890",
            "decompiledFuncCode": "int64_t function_404830(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404830\n    int64_t v3 = &v2; // 0x404830\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404863\n    int64_t v6; // 0x40484d\n    int64_t * v7; // 0x40486b\n    int64_t v8; // 0x40486b\n    int64_t v9; // 0x404877\n    if (v5 < 48) {\n        // 0x404840\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404883\n            break;\n        }\n    } else {\n        // 0x40486b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404883\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404861\n    while (v4 != 9) {\n        // 0x404859\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404840\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404883\n                break;\n            }\n        } else {\n            // 0x40486b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404883\n                break;\n            }\n        }\n        // 0x404859\n        v10 = 10;\n    }\n    // 0x404883\n    return function_404430(a1, a2, a3, a4, v3, v10, (int64_t)&g59);\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "40494c",
            "decompiledFuncCode": "int64_t function_404890(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404890\n    int64_t v1; // bp-168, 0x404890\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404890\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404890\n    int64_t v8; // 0x404890\n    int64_t v9; // bp-56, 0x404890\n    int64_t v10; // 0x4048f5\n    int64_t v11; // 0x404919\n    if ((int32_t)v6 < 48) {\n        // 0x4048e0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404930\n            break;\n        }\n    } else {\n        // 0x404912\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404930\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40490a\n    int64_t v13 = 10; // 0x40490a\n    while (v5 != 9) {\n        // 0x40490c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4048e0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404930\n                break;\n            }\n        } else {\n            // 0x404912\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404930\n                break;\n            }\n        }\n        // 0x404902\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404930\n    int64_t v14; // bp-136, 0x404890\n    int64_t result = function_404430(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g59); // 0x40493f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "4049c4",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1) {\n    // 0x404950\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4049b3\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049ea",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4049d4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4049e3\n        return (int64_t)mem;\n    }\n    // 0x4049e5\n    function_404c20(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "404a11",
            "decompiledFuncCode": "int64_t function_4049f0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4049f3\n    int64_t v2 = v1; // 0x4049f3\n    if (v2 < 0) {\n        // 0x404a0b\n        function_404c20(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a09\n        return function_4049d0(v2);\n    }\n    // 0x404a0b\n    function_404c20(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a22",
            "decompiledFuncCode": "int64_t function_404a20(void) {\n    // 0x404a20\n    int64_t v1; // 0x404a20\n    return function_4049d0(v1);\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404a66",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404a58\n        free(v1);\n        return (int32_t)&g59 ^ (int32_t)&g59;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404a41\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404a50\n        return (int64_t)mem;\n    }\n    // 0x404a61\n    function_404c20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404a91",
            "decompiledFuncCode": "int64_t function_404a70(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404a73\n    int64_t v2 = v1; // 0x404a73\n    if (v2 < 0) {\n        // 0x404a8b\n        function_404c20(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a89\n        return function_404a30(a1, v2);\n    }\n    // 0x404a8b\n    function_404c20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404b26",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404afb\n            function_404c20(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a30(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404ae3\n    if (a2 == 0) {\n        // 0x404b08\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404ae8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404afb\n        function_404c20(a1);\n        // UNREACHABLE\n    }\n    // 0x404aca\n    *(int64_t *)a2 = v2;\n    return function_404a30(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404b30",
            "funcStartAddr": "404b30",
            "funcEndAddr": "404b80",
            "decompiledFuncCode": "int64_t function_404b30(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404b30\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404b7a\n            function_404c20(a1);\n            // UNREACHABLE\n        }\n        // 0x404b52\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a30(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404b65\n        *(int64_t *)a2 = 128;\n        return function_404a30(0, 128);\n    }\n    // 0x404b78\n    if (a2 < 0) {\n        // 0x404b7a\n        function_404c20(a1);\n        // UNREACHABLE\n    }\n    // 0x404b52\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404a30(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404b97",
            "decompiledFuncCode": "int64_t function_404b80(int64_t a1, int64_t a2) {\n    // 0x404b80\n    return (int64_t)memset((int64_t *)function_4049d0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404bce",
            "decompiledFuncCode": "int64_t function_404ba0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404ba7\n    if ((int64_t)v1 < 0) {\n        // 0x404bc9\n        function_404c20(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404bc9\n        function_404c20(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404bba\n    if (mem != NULL) {\n        // 0x404bc4\n        return (int64_t)mem;\n    }\n    // 0x404bc9\n    function_404c20(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404bf8",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4049d0(a2); // 0x404bdf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c13",
            "decompiledFuncCode": "int64_t function_404c00(char * str) {\n    // 0x404c00\n    return function_404bd0((int64_t)str, (int64_t)strlen(str) + 1);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c51",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1) {\n    // 0x404c20\n    error(g21, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c60",
            "funcStartAddr": "404c60",
            "funcEndAddr": "404c87",
            "decompiledFuncCode": "int64_t function_404c60(void) {\n    // 0x404c60\n    int64_t v1; // 0x404c60\n    int64_t result = function_406040(v1, v1, v1, v1, v1); // 0x404c61\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x404c6e\n        return result;\n    }\n    // 0x404c82\n    function_404c20(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "4050d0",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, char * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x404c9e\n    if (v1 >= 37) {\n        // 0x4050ab\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g59;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x404cc2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x404cf2\n    int64_t v4 = a1; // 0x404cf7\n    char v5 = c; // 0x404cf7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x404cec\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x404ce8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x404cf9\n    if (v5 == 45) {\n        // 0x404d35\n        return 4;\n    }\n    // 0x404cfe\n    int64_t v7; // bp-64, 0x404c90\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x404cbe\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x404d06\n    int64_t * v10 = (int64_t *)v8; // 0x404d0b\n    int64_t v11 = *v10; // 0x404d0b\n    char v12; // 0x404c90\n    int64_t v13; // 0x404c90\n    int64_t v14; // 0x404c90\n    int64_t v15; // 0x404c90\n    int64_t v16; // 0x404c90\n    int64_t v17; // 0x404c90\n    int64_t v18; // 0x404c90\n    if (v11 == a1) {\n        // 0x404d68\n        if (c == 0 || str == NULL) {\n            // 0x404d35\n            return 4;\n        }\n        char * found_char_pos = strchr(str, (int32_t)c); // 0x404d89\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x404d35\n            return 4;\n        }\n        goto lab_0x404d97;\n    } else {\n        int32_t v19 = *v2; // 0x404d16\n        int64_t v20 = 0; // 0x404d1c\n        if (v19 != 0) {\n            // 0x404d50\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x404d35\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x404d06\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x404d32;\n        } else {\n            char c2 = *(char *)v11; // 0x404d25\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr(str, (int32_t)c2); // 0x404e93\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x404d97;\n                } else {\n                    goto lab_0x404ea5;\n                }\n            } else {\n                goto lab_0x404d32;\n            }\n        }\n    }\n  lab_0x404d97:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x404d9f\n    int64_t v24 = 1; // 0x404d9f\n    int64_t v25; // 0x404c90\n    int64_t v26; // 0x404c90\n    int64_t v27; // 0x404c90\n    int64_t v28; // 0x404c90\n    int64_t v29; // 0x404c90\n    int64_t v30; // 0x404c90\n    int64_t v31; // 0x404c90\n    int64_t v32; // 0x404c90\n    int64_t v33; // 0x404c90\n    int64_t v34; // 0x404c90\n    int64_t v35; // 0x404c90\n    int64_t v36; // 0x404c90\n    int64_t v37; // 0x404c90\n    int64_t v38; // 0x404c90\n    int64_t v39; // 0x404c90\n    int64_t v40; // 0x404c90\n    int64_t v41; // 0x404c90\n    int64_t v42; // 0x404c90\n    int64_t v43; // 0x404c90\n    int64_t v44; // 0x404c90\n    if (v22 < 48) {\n        // 0x404da1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x404e0a;\n        } else {\n            // 0x404db4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr(str, 48) == NULL) {\n                goto lab_0x404e0a;\n            } else {\n                // 0x404dd0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x404e0a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x405039\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x404e0a;\n                    }\n                    default: {\n                        // 0x404de5\n                        g53 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x404fab;\n                            }\n                            case 70: {\n                                goto lab_0x404ea5;\n                            }\n                            case 71: {\n                                goto lab_0x404fe3;\n                            }\n                            case 72: {\n                                goto lab_0x404ea5;\n                            }\n                            case 73: {\n                                goto lab_0x404ea5;\n                            }\n                            case 74: {\n                                goto lab_0x404ea5;\n                            }\n                            case 75: {\n                                goto lab_0x404e6c;\n                            }\n                            case 76: {\n                                goto lab_0x404ea5;\n                            }\n                            case 77: {\n                                goto lab_0x404e2e;\n                            }\n                            case 78: {\n                                goto lab_0x404ea5;\n                            }\n                            case 79: {\n                                goto lab_0x404ea5;\n                            }\n                            case 80: {\n                                goto lab_0x404f78;\n                            }\n                            case 81: {\n                                goto lab_0x404ea5;\n                            }\n                            case 82: {\n                                goto lab_0x404ea5;\n                            }\n                            case 83: {\n                                goto lab_0x404ea5;\n                            }\n                            case 84: {\n                                goto lab_0x404f48;\n                            }\n                            case 85: {\n                                goto lab_0x404ea5;\n                            }\n                            case 86: {\n                                goto lab_0x404ea5;\n                            }\n                            case 87: {\n                                goto lab_0x404ea5;\n                            }\n                            case 88: {\n                                goto lab_0x404ea5;\n                            }\n                            case 89: {\n                                goto lab_0x404f16;\n                            }\n                            case 90: {\n                                goto lab_0x404edb;\n                            }\n                            case 91: {\n                                goto lab_0x404ea5;\n                            }\n                            case 92: {\n                                goto lab_0x404ea5;\n                            }\n                            case 93: {\n                                goto lab_0x404ea5;\n                            }\n                            case 94: {\n                                goto lab_0x404ea5;\n                            }\n                            case 95: {\n                                goto lab_0x404ea5;\n                            }\n                            case 96: {\n                                goto lab_0x404ea5;\n                            }\n                            case 97: {\n                                goto lab_0x404ea5;\n                            }\n                            case 98: {\n                                goto lab_0x404ebf;\n                            }\n                            case 99: {\n                                goto lab_0x404e48;\n                            }\n                            case 100: {\n                                goto lab_0x404ea5;\n                            }\n                            case 101: {\n                                goto lab_0x404ea5;\n                            }\n                            case 102: {\n                                goto lab_0x404ea5;\n                            }\n                            case 103: {\n                                goto lab_0x404fe3;\n                            }\n                            case 104: {\n                                goto lab_0x404ea5;\n                            }\n                            case 105: {\n                                goto lab_0x404ea5;\n                            }\n                            case 106: {\n                                goto lab_0x404ea5;\n                            }\n                            case 107: {\n                                goto lab_0x404e6c;\n                            }\n                            case 108: {\n                                goto lab_0x404ea5;\n                            }\n                            case 109: {\n                                goto lab_0x404e2e;\n                            }\n                            case 110: {\n                                goto lab_0x404ea5;\n                            }\n                            case 111: {\n                                goto lab_0x404ea5;\n                            }\n                            case 112: {\n                                goto lab_0x404ea5;\n                            }\n                            case 113: {\n                                goto lab_0x404ea5;\n                            }\n                            case 114: {\n                                goto lab_0x404ea5;\n                            }\n                            case 115: {\n                                goto lab_0x404ea5;\n                            }\n                            case 116: {\n                                goto lab_0x404f48;\n                            }\n                            default: {\n                                goto lab_0x404e0a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x404e0a;\n    }\n  lab_0x404d32:\n    // 0x404d32\n    *a4 = v16;\n    // 0x404d35\n    return v13 & 0xffffffff;\n  lab_0x404e0a:\n    // 0x404e0a\n    g54 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x404c90\n    switch (v12) {\n        case 66: {\n            // 0x405004\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x404e77;\n            } else {\n                // 0x405011\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404e48;\n            }\n        }\n        case 69: {\n            goto lab_0x404fab;\n        }\n        case 71: {\n            goto lab_0x404fe3;\n        }\n        case 75: {\n            goto lab_0x404e6c;\n        }\n        case 77: {\n            goto lab_0x404e2e;\n        }\n        case 80: {\n            goto lab_0x404f78;\n        }\n        case 84: {\n            goto lab_0x404f48;\n        }\n        case 89: {\n            goto lab_0x404f16;\n        }\n        case 90: {\n            goto lab_0x404edb;\n        }\n        case 98: {\n            goto lab_0x404ebf;\n        }\n        case 99: {\n            goto lab_0x404e48;\n        }\n        case 103: {\n            goto lab_0x404fe3;\n        }\n        case 107: {\n            goto lab_0x404e6c;\n        }\n        case 109: {\n            goto lab_0x404e2e;\n        }\n        case 116: {\n            goto lab_0x404f48;\n        }\n        case 119: {\n            // 0x404eb0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x404e77;\n            } else {\n                // 0x404eb5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404e48;\n            }\n        }\n        default: {\n            goto lab_0x404ea5;\n        }\n    }\n  lab_0x404fab:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x404fc3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x404fcf\n    int64_t v51 = v48; // 0x404fd2\n    int64_t v52 = v37; // 0x404fd2\n    int64_t v53 = v49; // 0x404fd2\n    int32_t v54 = v50; // 0x404fd2\n    int64_t v55 = v49; // 0x404fd2\n    while (v50 != 0) {\n        // 0x404fc0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x404f04;\n  lab_0x404fe3:\n    // 0x404fe3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x404fee\n        int128_t v56; // 0x404fe9\n        uint128_t v57; // 0x404fe9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x404fee\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x404c90\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x404ff3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x404ff8\n                v26 = v60;\n                int64_t v61; // 0x404c90\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x404e48;\n  lab_0x404e6c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x404e6f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x404e48;\n    } else {\n        goto lab_0x404e77;\n    }\n  lab_0x404e2e:;\n    int128_t v65 = v27; // 0x404e34\n    uint128_t v66 = v65 * (int128_t)v17; // 0x404e34\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x404e77;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x404e39\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x404e77;\n        } else {\n            // 0x404e3e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x404e48;\n        }\n    }\n  lab_0x404f78:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x404f8b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x404f97\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x404f9a\n    int64_t v73 = v70; // 0x404f9a\n    while (v71 != 0) {\n        // 0x404f88\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x404f04;\n  lab_0x404f48:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x404f5b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x404f67\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x404f6a\n    int64_t v79 = v76; // 0x404f6a\n    while (v77 != 0) {\n        // 0x404f58\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x404f04;\n  lab_0x404f16:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x404f2b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x404f37\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x404f3a\n    int64_t v85 = v82; // 0x404f3a\n    while (v83 != 0) {\n        // 0x404f28\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x404f04;\n  lab_0x404edb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x404ef3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x404eff\n    int32_t v90 = v89; // 0x404f02\n    int64_t v91 = v88; // 0x404f02\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x404ef0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x404f04;\n  lab_0x404ebf:\n    // 0x404ebf\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x404e77;\n    } else {\n        // 0x404ec8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x404e48;\n    }\n  lab_0x404e48:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x404e4d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x404d32;\n  lab_0x404ea5:\n    // 0x404ea5\n    *a4 = v18;\n    // 0x404d35\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x404e77:\n    // 0x404e77\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x404e48;\n  lab_0x404f04:\n    // 0x404f04\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x404e48;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "40515f",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t * a1, char * a2, char * a3, int32_t a4, int64_t a5, int64_t a6) {\n    // 0x4050d0\n    int64_t v1; // 0x4050d0\n    if ((char)v1 != 0) {\n        // 0x4050ef\n        int128_t v2; // 0x4050d0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 16; // bp-208, 0x405133\n    return function_405fb0((int64_t)a1, (int64_t)a2, &v3);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "40523f",
            "decompiledFuncCode": "int64_t function_405160(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40516c\n    uint32_t v2 = *v1; // 0x40516c\n    int64_t v3 = a2 & 0xffffffff; // 0x405171\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405174\n    uint64_t v5 = (int64_t)*v4; // 0x405174\n    int64_t v6; // 0x4051e2\n    if (v3 <= v5) {\n      lab_0x4051dc_2:\n        // 0x4051dc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405162\n    int64_t v8 = v2; // 0x405160\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4051dc\n        goto lab_0x4051dc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405198\n    int64_t v17; // 0x4051a6\n    int64_t * v18; // 0x4051c0\n    int64_t * v19; // 0x4051c3\n    int64_t v20; // 0x4051ce\n    int64_t v21; // 0x4051a6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4051a3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4051c0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4051d7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4051dc\n            goto lab_0x4051dc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4051dc\n            goto lab_0x4051dc_2;\n        }\n        // 0x405192\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40521b\n    int64_t * v23 = (int64_t *)v22; // 0x405220\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405223\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405220\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405237\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40518d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4051dc\n            goto lab_0x4051dc_2;\n        }\n        // 0x405192\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4051a3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4051c0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4051d7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4051dc\n                goto lab_0x4051dc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4051dc\n                goto lab_0x4051dc_2;\n            }\n            // 0x405192\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405200\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405220\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405237\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4051dc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "40585c",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40525f\n    int64_t v2 = *v1; // 0x40525f\n    char * str2 = (char *)v2; // 0x40526c\n    char c = *str2; // 0x40526c\n    int64_t v3 = v2; // 0x405298\n    int64_t v4 = 0; // 0x405240\n    int32_t v5; // 0x405240\n    int64_t v6; // 0x405240\n    int64_t v7; // 0x405240\n    int64_t v8; // 0x405240\n    int64_t v9; // 0x405240\n    int64_t v10; // 0x405240\n    int64_t v11; // 0x405240\n    int64_t v12; // 0x405240\n    int64_t v13; // 0x405240\n    int64_t str3; // 0x405240\n    int64_t v14; // 0x405240\n    int64_t v15; // 0x405240\n    int64_t v16; // 0x405240\n    int64_t v17; // 0x405240\n    int32_t v18; // 0x405240\n    int32_t v19; // 0x405240\n    int32_t v20; // 0x405240\n    int32_t v21; // 0x405240\n    int32_t v22; // 0x405240\n    int32_t v23; // 0x405240\n    int32_t v24; // 0x405240\n    int32_t v25; // 0x405240\n    int32_t v26; // 0x405240\n    int32_t v27; // 0x405240\n    int32_t v28; // 0x405240\n    int32_t v29; // 0x405240\n    int64_t nmemb; // 0x405240\n    int64_t v30; // 0x405240\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40529c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405298\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4052a8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4052ae\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405278\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4052dc\n                int64_t v34; // 0x405240\n                int64_t v35; // 0x405240\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4052e5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405460;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4052f6\n                int64_t v37 = *(int64_t *)v36; // 0x4052fa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4052d0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4052e5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405460;\n                        }\n                    }\n                    // 0x4052f6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405346:\n                    // 0x405346\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4053a0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405510\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4053a0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4054c0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40536a;\n                                } else {\n                                    // 0x4054cc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40536a;\n                                    } else {\n                                        // 0x4054da\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40536a;\n                                        } else {\n                                            goto lab_0x4053a0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40536a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4053b1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405586\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405732\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x405752\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40579f\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x4057b9\n                            int64_t v45; // 0x4057bb\n                            if (*(char *)v42 != 0) {\n                                // 0x4057bb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4057b3\n                            while (v17 + nmemb != v42) {\n                                // 0x4057b5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4057bb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x4057a8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4057e0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x405594\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4056ef\n                        free((int64_t *)v17);\n                    }\n                    // 0x4055e9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405600\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4054ae\n                    return 63;\n                }\n                // 0x4053d0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405454\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405460:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405470\n                    uint32_t v50 = *v49; // 0x405470\n                    int64_t v51 = v50; // 0x405470\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40547a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405483\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4056af\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40565a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4054ae\n                            return 63;\n                        }\n                        // 0x4054f8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40580f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40570d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405720\n                                // 0x4054ae\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40561e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405632\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40549b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40549e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4054a2\n                    int64_t result = v59; // 0x4054a8\n                    if (v58 != 0) {\n                        // 0x4054aa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4054ae\n                    return result;\n                }\n            } else {\n                // 0x4052ae\n                v5 = v32;\n            }\n            // break -> 0x4053d5\n            break;\n        }\n    }\n    // 0x4053d5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4053ed\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4053f7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4054ae\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405539\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405426\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405436\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4053a0:\n    // 0x4053a0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4053a0\n    int64_t v63 = *(int64_t *)v62; // 0x4053a4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4053b1\n        goto lab_0x4053b1;\n    }\n    goto lab_0x405346;\n  lab_0x40536a:\n    // 0x40536a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405240\n    int32_t v65; // 0x405240\n    int32_t v66; // 0x405240\n    if (v27 != 0) {\n        goto lab_0x4053a0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405520\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4053a0;\n            } else {\n                goto lab_0x405391;\n            }\n        } else {\n            // 0x405385\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40567c\n                int64_t v67 = (int64_t)mem; // 0x40567c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4053a0;\n                } else {\n                    // 0x40568f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405391;\n                }\n            } else {\n                goto lab_0x405391;\n            }\n        }\n    }\n  lab_0x405391:\n    // 0x405391\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4053a0;\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "405e26",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405881\n    if (v3 < 1) {\n        // 0x405a3e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40587d\n    int32_t v5 = *(int32_t *)a7; // 0x405889\n    uint64_t v6 = a1 & 0xffffffff; // 0x40588b\n    int64_t v7 = v2; // 0x405890\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405893\n    *v8 = 0;\n    int64_t v9; // 0x405860\n    int64_t v10; // 0x405860\n    int64_t v11; // 0x405860\n    int64_t v12; // 0x405860\n    int64_t str; // 0x405860\n    int64_t v13; // 0x405860\n    int64_t v14; // 0x405860\n    int64_t v15; // 0x405860\n    int64_t v16; // 0x405860\n    int64_t v17; // 0x405860\n    int32_t v18; // 0x405860\n    char v19; // 0x405860\n    if (v5 == 0) {\n        // 0x405a78\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4058aa;\n    } else {\n        // 0x4058a3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4058f0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4058f3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4059b8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405906\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405916\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4059cc;\n                } else {\n                    goto lab_0x405928;\n                }\n            }\n        } else {\n            goto lab_0x4058aa;\n        }\n    }\n  lab_0x4058aa:\n    // 0x4058aa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4058b0\n    *v24 = 0;\n    int64_t v25; // 0x405860\n    int64_t v26; // 0x405860\n    int64_t v27; // 0x405860\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4059a0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4059ad;\n        }\n        case 43: {\n            // 0x405cb0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4059ad;\n        }\n        default: {\n            // 0x4058cc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405c2f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405d48\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4059ad;\n                } else {\n                    // 0x405c3d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4058da;\n                }\n            } else {\n                goto lab_0x4058da;\n            }\n        }\n    }\n  lab_0x4059b8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4059bf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405928;\n    } else {\n        goto lab_0x4059cc;\n    }\n  lab_0x4058da:\n    // 0x4058da\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4059ad;\n  lab_0x4059ad:\n    // 0x4059ad\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4059b8;\n  lab_0x405928:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405928\n    int64_t v31 = v30; // 0x405928\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40592a\n    if ((int64_t)*v32 > v31) {\n        // 0x40592f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405932\n    if (*v33 > v30) {\n        // 0x405937\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40593a\n    int64_t v35 = v31; // 0x40593e\n    int64_t v36 = v15; // 0x40593e\n    int64_t v37; // 0x405860\n    int64_t v38; // 0x405860\n    int64_t v39; // 0x405860\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405aa8\n        int64_t v41 = v40; // 0x405aa8\n        v2 = v41;\n        int64_t v42; // 0x405860\n        if (*v33 == v40) {\n            // 0x405c90\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405c98\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405ab4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405ab8\n                function_405160(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405ac8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405ad1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405ada\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405af1\n            int64_t v47 = v45 & 0xffffffff; // 0x405af5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405afe\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405b04\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405b06;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405ae0\n            int64_t v49 = v48 & 0xffffffff; // 0x405ae0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405af1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405afe\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405b04\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405b06;\n                    }\n                }\n                // 0x405ae0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405ca8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405b06;\n    } else {\n        goto lab_0x405944;\n    }\n  lab_0x4059cc:\n    // 0x4059cc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4059cf\n    int64_t v51 = v12; // 0x4059cf\n    int64_t v52 = v14; // 0x4059cf\n    if (*(char *)v10 == 0) {\n        goto lab_0x405928;\n    } else {\n        goto lab_0x4059d5;\n    }\n  lab_0x405944:;\n    int32_t v53 = v35; // 0x405944\n    int64_t v54; // 0x405860\n    int64_t v55; // 0x405860\n    int64_t v56; // 0x405860\n    int64_t v57; // 0x405860\n    int64_t v58; // 0x405860\n    int64_t v59; // 0x405860\n    char * v60; // 0x405860\n    int64_t v61; // 0x405860\n    int64_t v62; // 0x405959\n    int64_t v63; // 0x405860\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405a93\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405a96;\n    } else {\n        // 0x40594c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405860\n        int64_t v66 = v65 ? -1 : 1; // 0x405960\n        int64_t v67 = (int64_t)\"--\"; // 0x405860\n        int64_t v68 = v62; // 0x405860\n        int64_t v69 = 3; // 0x405960\n        unsigned char v70 = *(char *)v68; // 0x405960\n        char v71 = *(char *)v67; // 0x405960\n        char v72 = v71; // 0x405960\n        bool v73 = false; // 0x405960\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405a50\n            if (*(char *)v62 == 45) {\n                // 0x405b10\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405b10\n                if (c == 0) {\n                    goto lab_0x405a5a;\n                } else {\n                    // 0x405b1d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405ba0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405d83\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405bf5;\n                        } else {\n                            // 0x405b2e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405ba0;\n                            } else {\n                                // 0x405b33\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405b54;\n                                } else {\n                                    // 0x405b3a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405ba0;\n                                    } else {\n                                        goto lab_0x405b54;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405a5a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405970\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405973\n            int64_t v77 = v35 + 1; // 0x405976\n            int32_t v78 = v77; // 0x405979\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405ce0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405987\n                    function_405160(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405995\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405a96;\n        }\n    }\n  lab_0x4059d5:;\n    // 0x4059d5\n    int64_t v79; // bp-104, 0x405860\n    int64_t v80 = &v79; // 0x40586a\n    int64_t v81 = v50 + 1; // 0x4059d5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4059dc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4059e1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4059e5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4059e9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4059f1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4059f6\n    int32_t c2 = v84; // 0x4059f6\n    char * found_char_pos = strchr(str2, c2); // 0x4059f6\n    int64_t v87 = *v82; // 0x4059fb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405a05\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405a10\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405d00\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405ccd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405a3e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4059f6\n    char v91 = *(char *)(v90 + 1); // 0x405a2b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4059e5\n        if (v91 != 58) {\n            // 0x405a3e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405c54\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405d58\n                *v8 = 0;\n            } else {\n                // 0x405d3c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405c7e\n            *v83 = 0;\n            // 0x405a3e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405c5e\n        if (v93 != 0) {\n            // 0x405cf0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405c7e\n            *v83 = 0;\n            // 0x405a3e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405c71\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405c7e\n            *v83 = 0;\n            // 0x405a3e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405dba\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405d6a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405d71\n        // 0x405c7e\n        *v83 = 0;\n        // 0x405a3e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405bc9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405bcb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405df0\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405da1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405da8\n            // 0x405a3e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405bd6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405bda\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405bf5;\n  lab_0x405b06:\n    // 0x405b06\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405944;\n  lab_0x405bf5:;\n    int64_t v99 = function_405240(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405c13\n    // 0x405a3e\n    return v99 & 0xffffffff;\n  lab_0x405a96:;\n    int32_t v100 = v55; // 0x405a96\n    if (v100 != (int32_t)v59) {\n        // 0x405a9a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405a3e\n    return 0xffffffff;\n  lab_0x405a5a:\n    // 0x405a5a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405a61\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405a3e\n    return v99 & 0xffffffff;\n  lab_0x405ba0:\n    // 0x405ba0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4059d5;\n  lab_0x405b54:\n    // 0x405b54\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405240(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x405b7a\n    if ((int32_t)v101 != -1) {\n        // 0x405a3e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405b8f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405ba0;\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405e86",
            "decompiledFuncCode": "int64_t function_405e30(int64_t a1) {\n    // 0x405e30\n    *(int32_t *)&g47 = g29;\n    *(int32_t *)&g48 = g28;\n    int64_t v1; // 0x405e30\n    int64_t result = function_405860(v1, v1, v1, v1, v1, v1, &g47, a1 & 0xffffffff); // 0x405e56\n    g29 = *(int32_t *)&g47;\n    g52 = (char *)g50;\n    *(int32_t *)&g27 = g49;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e90",
            "funcStartAddr": "405e90",
            "funcEndAddr": "405ea8",
            "decompiledFuncCode": "int64_t function_405e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405e90\n    return function_405e30(1);\n}\n"
        },
        {
            "funcName": "function_405eb0",
            "funcStartAddr": "405eb0",
            "funcEndAddr": "405ec3",
            "decompiledFuncCode": "int64_t function_405eb0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x405eb0\n    return function_405e30(0);\n}\n"
        },
        {
            "funcName": "function_405ed0",
            "funcStartAddr": "405ed0",
            "funcEndAddr": "405ee5",
            "decompiledFuncCode": "int64_t function_405ed0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ed0\n    return function_405860(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405ef0",
            "funcStartAddr": "405ef0",
            "funcEndAddr": "405f06",
            "decompiledFuncCode": "int64_t function_405ef0(void) {\n    // 0x405ef0\n    return function_405e30(0);\n}\n"
        },
        {
            "funcName": "function_405f10",
            "funcStartAddr": "405f10",
            "funcEndAddr": "405f28",
            "decompiledFuncCode": "int64_t function_405f10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f10\n    return function_405860(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405f30",
            "funcStartAddr": "405f30",
            "funcEndAddr": "405faa",
            "decompiledFuncCode": "int64_t function_405f30(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405f3b\n    int64_t v2 = (int64_t)&g12; // 0x405f3b\n    int32_t * pwc; // 0x405f30\n    int64_t v3; // 0x405f30\n    int64_t n; // 0x405f30\n    if (a2 == 0) {\n        goto lab_0x405f82;\n    } else {\n        // 0x405f3d\n        if (a3 == 0) {\n            // 0x405f68\n            return -2;\n        }\n        // 0x405f49\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405f82;\n        } else {\n            goto lab_0x405f54;\n        }\n    }\n  lab_0x405f82:\n    // 0x405f82\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405f30\n    pwc = (int32_t *)&v4;\n    goto lab_0x405f54;\n  lab_0x405f54:;\n    char * wstr = (char *)v3; // 0x405f5a\n    int64_t ps; // 0x405f30\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405f5a\n    int64_t result = v5; // 0x405f5a\n    if (v5 < 0xfffffffe) {\n        // 0x405f68\n        return result;\n    }\n    int64_t result2 = result; // 0x405f99\n    if ((char)function_4062a0(0, v3) == 0) {\n        // 0x405f9b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405f68\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "406009",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1, int64_t a2, int64_t * a3) {\n    // 0x405fb0\n    int32_t v1; // bp-16, 0x405fb0\n    int64_t v2; // 0x405fb0\n    int64_t v3 = function_406990(0, (int64_t *)&v1, a2, (int64_t)a3, v2, v2, v2, (int64_t)&g59); // 0x405fc5\n    if (v3 == 0) {\n        // 0x405fe2\n        return 0xffffffff;\n    }\n    // 0x405fcf\n    int64_t result; // 0x405fb0\n    if (v1 > -1) {\n        // 0x405fdd\n        *(int64_t *)a1 = v3;\n        result = v1;\n    } else {\n        // 0x405fe8\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x405fe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "406032",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, int64_t path, int64_t buf, int64_t buf_size) {\n    // 0x406010\n    return readlink((char *)path, (char *)buf, (int32_t)buf_size);\n}\n"
        },
        {
            "funcName": "function_406040",
            "funcStartAddr": "406040",
            "funcEndAddr": "40623b",
            "decompiledFuncCode": "int64_t function_406040(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x406040\n    int64_t v1; // bp-1080, 0x406040\n    int64_t v2 = &v1; // 0x406098\n    int64_t v3 = 1024; // 0x4060a0\n    int64_t v4 = v2; // 0x4060a0\n    int64_t result; // 0x406040\n    while (true) {\n        int64_t v5 = v4;\n        uint64_t v6 = v3;\n        int64_t v7 = function_406010(0xffffff9c, a1, v5, v6); // 0x4060c6\n        int64_t v8 = v7; // 0x4060cf\n        if (v7 < 0) {\n            int32_t * v9 = __errno_location(); // 0x406155\n            v8 = (int64_t)v9;\n            result = 0;\n            if (*v9 != 34) {\n                // break -> 0x406131\n                break;\n            }\n        }\n        if (v6 > v7) {\n            uint64_t v10 = v7 + 1; // 0x4061a5\n            *(char *)(v7 + v5) = 0;\n            if (v5 == v2) {\n                if (v8 == 0) {\n                    // 0x40622b\n                    *__errno_location() = 12;\n                    result = 0;\n                    return result;\n                } else {\n                    // 0x4061fe\n                    memcpy((int64_t *)v8, &v1, (int32_t)v10);\n                    result = v8;\n                    return result;\n                }\n            } else {\n                // 0x4061b3\n                result = v5;\n                if (v6 > v10) {\n                    int64_t v11 = *(int64_t *)((int64_t)&g14 + 8); // 0x4061c5\n                    return v11 == 0 ? v5 : v11;\n                }\n                return result;\n            }\n        }\n        if (v6 < 0x4000000000000001) {\n            // 0x4060a8\n            v3 = 2 * v6;\n        } else {\n            // 0x4060f4\n            v3 = -0x8000000000000000;\n            if (v6 < 0) {\n                // 0x406218\n                *__errno_location() = 36;\n                result = 0;\n                return result;\n            }\n        }\n        // 0x4060b9\n        v4 = 0x4000000000000000;\n    }\n  lab_0x406131:\n    // 0x406131\n    return result;\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "40629d",
            "decompiledFuncCode": "int64_t function_406240(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406247\n    int64_t v2; // 0x406240\n    int64_t result = function_406870(a1, v2); // 0x406258\n    if ((v2 & 32) != 0) {\n        // 0x406280\n        if ((int32_t)result == 0) {\n            // 0x406284\n            *__errno_location() = 0;\n        }\n        // 0x40627a\n        return 0xffffffff;\n    }\n    // 0x406261\n    if ((int32_t)result == 0) {\n        // 0x40627a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406268\n    if (v1 == 0) {\n        // 0x40626a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40627a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4062a0",
            "funcStartAddr": "4062a0",
            "funcEndAddr": "4062fe",
            "decompiledFuncCode": "int64_t function_4062a0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4062a6\n    if (locale == NULL) {\n        // 0x4062d3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4062a6\n    bool v2; // 0x4062a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x4062a0\n    int64_t v5 = v1; // 0x4062a0\n    int64_t v6 = 2; // 0x4062c5\n    unsigned char v7 = *(char *)v5; // 0x4062c5\n    char v8 = *(char *)v4; // 0x4062c5\n    char v9 = v8; // 0x4062c5\n    bool v10 = false; // 0x4062c5\n    while (v7 == v8) {\n        // 0x4062b8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4062d1\n    int64_t v13 = v1; // 0x4062d1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4062d3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4062d1\n    unsigned char v15 = *(char *)v13; // 0x4062ed\n    char v16 = *(char *)v12; // 0x4062ed\n    char v17 = v16; // 0x4062ed\n    bool v18 = false; // 0x4062ed\n    while (v15 == v16) {\n        // 0x4062e0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406862",
            "decompiledFuncCode": "int64_t function_406300(void) {\n    char * v1 = nl_langinfo(14); // 0x406316\n    char * v2 = g51; // 0x40631b\n    char * v3; // 0x406300\n    int64_t v4; // 0x406300\n    int64_t v5; // 0x406300\n    int64_t v6; // 0x406300\n    int64_t v7; // 0x406300\n    int32_t size; // 0x406300\n    int32_t size2; // 0x406300\n    int32_t len; // 0x4063d2\n    int64_t v8; // 0x4063d2\n    char * env_val; // 0x4063bd\n    if (v2 == NULL) {\n        // 0x4063b8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406425;\n        } else {\n            // 0x4063ca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406425;\n            } else {\n                // 0x4063cf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4063bd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406855\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406425;\n                    } else {\n                        // 0x4067c9\n                        size2 = len + 14;\n                        goto lab_0x4063eb;\n                    }\n                } else {\n                    goto lab_0x4063eb;\n                }\n            }\n        }\n    } else {\n        // 0x406300\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40633a;\n    }\n  lab_0x40666c:;\n    // 0x40666c\n    struct _IO_FILE * stream; // 0x4064ab\n    int32_t v10 = __uflow(stream); // 0x40666f\n    int64_t v11; // 0x406300\n    int64_t v12 = v11; // 0x406679\n    int64_t v13; // 0x406300\n    int64_t v14 = v13; // 0x406679\n    int32_t v15 = v10; // 0x406679\n    int64_t v16; // 0x406300\n    int64_t v17 = v16; // 0x406679\n    int64_t v18 = v11; // 0x406679\n    int64_t v19 = v13; // 0x406679\n    int64_t v20 = v16; // 0x406679\n    if (v10 == -1) {\n        // break -> 0x40667f\n        goto lab_0x40667f;\n    }\n    goto lab_0x4064f9;\n  lab_0x4064ee:;\n    // 0x4064ee\n    int64_t v90; // 0x406300\n    int64_t * v32; // 0x4064e0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406300\n    v12 = v89;\n    int64_t v91; // 0x406300\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406300\n    v17 = v92;\n    goto lab_0x4064f9;\n  lab_0x4064f9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406300\n    int32_t v25; // bp-120, 0x406300\n    int32_t v26; // bp-184, 0x406300\n    int64_t v27; // 0x4064ab\n    int64_t v28; // 0x4064c8\n    int64_t v29; // 0x4064cd\n    int64_t * v30; // 0x4064e4\n    switch (c) {\n        case 32: {\n            goto lab_0x4064e0;\n        }\n        case 10: {\n            goto lab_0x4064e0;\n        }\n        case 9: {\n            goto lab_0x4064e0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4066d1\n            int32_t v33; // 0x406300\n            char v34; // 0x406300\n            int32_t v35; // 0x4066de\n            if (v31 < *v30) {\n                // 0x4066b0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4066db\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4066d1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4066b0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4066db\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4066c0\n                v36 = v33;\n            }\n            // 0x4067af\n            if (v36 == -1) {\n                // break -> 0x40667f\n                break;\n            }\n            goto lab_0x4064e0;\n        }\n        default: {\n            // 0x40650f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40667f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406538\n            int64_t v39 = v37 + 4; // 0x40653a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406546\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406548\n            while (v41 == 0) {\n                // 0x406538\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406566\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406572\n            int64_t v45 = v43 + 4; // 0x406574\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406580\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406582\n            while (v47 == 0) {\n                // 0x406572\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40656f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406598\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4065a8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4065ac\n            int64_t v52 = v51 + v48; // 0x4065b5\n            int64_t * mem; // 0x406300\n            int64_t v53; // 0x406300\n            int64_t v54; // 0x406300\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4066eb\n                int64_t v56 = v55 + 3; // 0x4066f7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4065d1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4065e0\n            if (mem == NULL) {\n                // 0x40680c\n                free((int64_t *)v21);\n                function_406870(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x406484;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4065f8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406602\n            uint32_t v62 = (int32_t)v59; // 0x406605\n            int64_t v63; // 0x406300\n            if (v62 >= 8) {\n                // 0x406714\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40672e\n                int64_t v66 = v61 - v65; // 0x406732\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40673d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40674e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40674e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40674b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4067df\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406617\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40661b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40662b\n            int64_t v74 = v60 - 1; // 0x40662f\n            uint32_t v75 = (int32_t)v73; // 0x406634\n            int64_t v76; // 0x406300\n            if (v75 >= 8) {\n                // 0x406762\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40676c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40677c\n                int64_t v80 = v74 - v79; // 0x406780\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40678b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40679b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406799\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4067f6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4067fe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406646\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40664a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406843\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40665e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4064ee;\n            } else {\n                goto lab_0x40666c;\n            }\n        }\n    }\n  lab_0x4064e0:;\n    int64_t v93 = v23; // 0x406300\n    int64_t v94 = v22; // 0x406300\n    int64_t v95 = v21; // 0x406300\n    goto lab_0x4064e0_2;\n  lab_0x406425:;\n    int64_t * mem3 = malloc(size); // 0x406425\n    int64_t v97 = (int64_t)&g12; // 0x406430\n    int64_t v98; // 0x406300\n    int64_t path; // 0x406300\n    if (mem3 == NULL) {\n        goto lab_0x406402;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406425\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406446;\n    }\n  lab_0x40633a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x40632d\n    char v100 = *v3; // 0x40633a\n    int64_t v101; // 0x406300\n    if (v100 == 0) {\n        // 0x406394\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406300\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406300\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406380\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406387;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406350\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40635d\n        char v107 = *(char *)v106; // 0x406362\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406394\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40636b\n    v104 = v103 + 1;\n  lab_0x406387:\n    // 0x406394\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406402:;\n    char * v108 = (char *)v97;\n    g51 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40633a;\n  lab_0x406446:;\n    int64_t v109 = v98 + path; // 0x406446\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406472\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x4064a1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4067d2\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x4064c5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4064e0_2:;\n                uint64_t v96 = *v32; // 0x4064e0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40666c;\n                } else {\n                    goto lab_0x4064ee;\n                }\n            }\n          lab_0x40667f:\n            // 0x40667f\n            function_406870(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40669e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406484;\n  lab_0x4063eb:;\n    int64_t * mem4 = malloc(size2); // 0x4063eb\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x406491\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406446;\n    } else {\n        goto lab_0x406402;\n    }\n  lab_0x406484:\n    // 0x406484\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406402;\n}\n"
        },
        {
            "funcName": "function_406870",
            "funcStartAddr": "406870",
            "funcEndAddr": "4068eb",
            "decompiledFuncCode": "int64_t function_406870(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406877\n    if (fileno(stream) < 0) {\n        // 0x4068d7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40688a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4068bb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4068d7\n            return fclose(stream);\n        }\n    }\n    // 0x40688c\n    if ((int32_t)function_4068f0(a1, v1) == 0) {\n        // 0x4068d7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406898\n    int32_t v3 = *v2; // 0x4068a0\n    int64_t result = fclose(stream); // 0x4068ae\n    if (v3 != 0) {\n        // 0x4068e0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4068b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068f0",
            "funcStartAddr": "4068f0",
            "funcEndAddr": "406930",
            "decompiledFuncCode": "int64_t function_4068f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40690a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40690a\n        return fflush(stream);\n    }\n    // 0x406918\n    function_406930(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406930",
            "funcStartAddr": "406930",
            "funcEndAddr": "406987",
            "decompiledFuncCode": "int64_t function_406930(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406930\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40693a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40696b\n    int64_t result = -1; // 0x406974\n    if (v1 != -1) {\n        // 0x406976\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406982\n    return result;\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "4084a9",
            "decompiledFuncCode": "int64_t function_406990(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x406990\n    int64_t v1; // bp-1416, 0x406990\n    int64_t v2; // bp-1656, 0x406990\n    if ((int32_t)function_4086d0(a3, &v1, &v2) < 0) {\n        // 0x407000\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40699b\n    int64_t v4; // bp-1384, 0x406990\n    int64_t v5; // bp-1640, 0x406990\n    int64_t v6; // 0x406990\n    if ((int32_t)function_4084b0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x4078e7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x407903\n            free((int64_t *)v6);\n        }\n        // 0x407908\n        *__errno_location() = 22;\n        // 0x407000\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x4069fb\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x406a03\n    uint64_t v9 = v8 + v6; // 0x406a07\n    int64_t v10; // 0x406990\n    char * v11; // 0x406990\n    int64_t v12; // 0x406990\n    if (v9 < v8) {\n        // 0x4070b0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406fb9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x4070b0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x406fb9;\n        } else {\n            uint64_t size = v9 + 6; // 0x406a17\n            if (size < 4000) {\n                // 0x406b60\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x406990\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x406a54;\n            } else {\n                if (size == -1) {\n                    // 0x4070b0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x406fb9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x406a38\n                    if (mem == NULL) {\n                        // 0x4070b0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x406fb9;\n                    } else {\n                        // 0x406a4d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x406a54;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406f80_2:;\n    // 0x406f80\n    int64_t v14; // 0x406990\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x406f88\n    int64_t v17 = v16; // 0x406f96\n    int64_t v18 = v16; // 0x406f96\n    int64_t v19 = v15; // 0x406f96\n    int64_t v20; // 0x406a78\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x4071a8;\n    } else {\n        goto lab_0x406fa1;\n    }\n  lab_0x406fb9:\n    // 0x406fb9\n    if (v6 != (int64_t)&v4) {\n        // 0x406fd0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x406fec\n        free((int64_t *)v6);\n    }\n    // 0x406ff1\n    *(int32_t *)v10 = 12;\n    // 0x407000\n    return 0;\n  lab_0x406a54:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x406a8d\n    int64_t v23 = *v22; // 0x406a8d\n    int64_t v24 = 0; // 0x406a93\n    int64_t v25 = v20; // 0x406a93\n    int64_t v26 = v21; // 0x406a93\n    int64_t v27 = 0; // 0x406a93\n    int64_t v28; // 0x406990\n    int64_t v29; // 0x406990\n    int64_t v30; // 0x406990\n    int64_t v31; // 0x406990\n    int64_t v32; // 0x406990\n    int64_t v33; // 0x406990\n    int64_t v34; // 0x406990\n    if (v23 == a3) {\n        goto lab_0x4070a3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x406a99\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x406aab;\n    }\n  lab_0x4070a3:;\n    int64_t v36 = v24; // 0x4070a6\n    float80_t v37; // 0x406990\n    float80_t v38 = v37; // 0x4070a6\n    float80_t v39; // 0x406990\n    float80_t v40 = v39; // 0x4070a6\n    int64_t v41 = v25; // 0x4070a6\n    int64_t v42 = v26; // 0x4070a6\n    int64_t v43 = v27; // 0x4070a6\n    int64_t v44; // 0x406990\n    int64_t v45 = v44; // 0x4070a6\n    goto lab_0x406c08;\n  lab_0x406c08:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x406990\n    int64_t v51; // 0x406990\n    int64_t v52; // 0x406990\n    int64_t v53; // 0x406990\n    int64_t v54; // 0x406990\n    int64_t v55; // 0x406990\n    int64_t v56; // 0x406990\n    int64_t v57; // 0x406990\n    int64_t dest_mem2; // 0x406990\n    int64_t dest_mem3; // 0x406990\n    int64_t v58; // 0x406990\n    float80_t v59; // 0x406990\n    float80_t v60; // 0x406990\n    float80_t v61; // 0x406990\n    float80_t v62; // 0x406990\n    float80_t v63; // 0x406990\n    uint64_t v64; // 0x407d36\n    char * v65; // 0x406c1c\n    char v66; // 0x406c1c\n    int64_t v67; // 0x406c44\n    uint32_t v68; // 0x406c48\n    int64_t v69; // 0x407025\n    char v70; // 0x406990\n    if (v1 == v49) {\n        // 0x407d30\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40849a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x407d92;\n            } else {\n                goto lab_0x406f80_2;\n            }\n        } else {\n            // 0x407d40\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x407d92;\n            } else {\n                if (v47 != 0) {\n                    // 0x40835d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406f80_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x408363\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x407d5e;\n                        } else {\n                            goto lab_0x40836f;\n                        }\n                    }\n                } else {\n                    // 0x407d4e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x407d5e;\n                    } else {\n                        goto lab_0x40836f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x406c1c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x406c21\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x4077f0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x406f80_2;\n                } else {\n                    goto lab_0x407082;\n                }\n            } else {\n                // 0x407032\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x407082;\n                } else {\n                    if (v47 != 0) {\n                        // 0x407920\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x406f80_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x407926\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x407050;\n                            } else {\n                                goto lab_0x407932;\n                            }\n                        }\n                    } else {\n                        // 0x407040\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x407050;\n                        } else {\n                            goto lab_0x407932;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            // 0x406c39\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g55 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x4075b0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407087;\n                }\n                case 19: {\n                    // 0x4075a0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407087;\n                }\n                case 20: {\n                    // 0x407588\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407087;\n                }\n                case 21: {\n                    goto lab_0x407170;\n                }\n                case 22: {\n                    goto lab_0x407170;\n                }\n                default: {\n                    // 0x406c5a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x407100\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40711d;\n                        } else {\n                            // 0x407107\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x406c90;\n                            } else {\n                                goto lab_0x40711d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x406c90;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406aab:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x406990\n    float80_t v77 = v76;\n    float80_t v78; // 0x406990\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x406990\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x406aae\n    int64_t v89 = v85; // 0x406aae\n    int64_t v90 = v84; // 0x406aae\n    float80_t v91 = v79; // 0x406aae\n    float80_t v92 = v77; // 0x406aae\n    int64_t v93 = v75; // 0x406aae\n    int64_t v94 = v80; // 0x406aae\n    int64_t v95 = v81; // 0x406aae\n    int64_t v96 = v82; // 0x406aae\n    int64_t v97 = v87; // 0x406aae\n    int64_t v98; // 0x406990\n    int64_t v99; // 0x406990\n    int64_t v100; // 0x406990\n    int64_t v101; // 0x406990\n    int64_t v102; // 0x406990\n    if (v82 >= v87) {\n        goto lab_0x406bf9;\n    } else {\n        if (v82 != 0) {\n            // 0x406b90\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x406f80_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x406b96\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x406bab;\n                } else {\n                    goto lab_0x406b9e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x406ad4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x406bbe;\n                } else {\n                    goto lab_0x406ae0;\n                }\n            } else {\n                goto lab_0x406b9e;\n            }\n        }\n    }\n  lab_0x406bf9:\n    // 0x406bf9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x406c08;\n  lab_0x407d92:\n    // 0x407d92\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x407d9a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x407dab\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x407db7\n    if (v12 != 0) {\n        // 0x407dc3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x407de2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x407dfe\n        free((int64_t *)v6);\n    }\n    // 0x407e03\n    *a2 = v46;\n    // 0x407000\n    return result;\n  lab_0x407170:\n    // 0x407170\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x407087;\n  lab_0x406b9e:\n    // 0x406b9e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        goto lab_0x406bab;\n    }\n  lab_0x4071a8:\n    // 0x4071a8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x406fa1;\n  lab_0x406fa1:\n    if (v12 == 0) {\n        // 0x4070b0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406fb9;\n    } else {\n        // 0x406fb1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x406fb9;\n    }\n  lab_0x407082:\n    // 0x407082\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x407087;\n  lab_0x406c90:;\n    int64_t v273 = (int64_t)v11; // 0x406c90\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x406c97\n    int64_t v275 = v273 + 1; // 0x406c9b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x406ca4\n    if (v274 % 2 != 0) {\n        // 0x406ca6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x406c97\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x406cb7\n    if ((v277 & 2) != 0) {\n        // 0x406cb9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x406cc3\n    if ((v277 & 4) != 0) {\n        // 0x406cc5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x406ccf\n    if ((v277 & 8) != 0) {\n        // 0x406cd1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x406cdb\n    if ((v277 & 16) != 0) {\n        // 0x406cdd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x406ce7\n    if ((v277 & 64) != 0) {\n        // 0x406ce9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x406cf3\n    if ((v277 & 32) != 0) {\n        // 0x406cf5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x406cfd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x406d01\n    int64_t v293 = v290; // 0x406d08\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x406d17\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x406d3a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x406d3e\n    int64_t v298 = v295; // 0x406d45\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x406d54\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x406c4a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x406d80\n    int64_t v272; // 0x406990\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x406d89\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x407188;\n        } else {\n            if (v301 == 12) {\n                // 0x407948\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x406db0;\n            } else {\n                // 0x406da0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x407180\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x407188;\n                } else {\n                    goto lab_0x406db0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406db0;\n    }\n  lab_0x407087:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x407087\n    int64_t v111 = v55 + 88; // 0x40708b\n    int64_t v112 = *(int64_t *)v111; // 0x40708f\n    int64_t v113 = v49 + 1; // 0x407092\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x406a99\n        int64_t v115 = v114 + v105; // 0x406a9f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x4070c8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x406f80_2;\n            } else {\n                goto lab_0x406bf9;\n            }\n        } else {\n            goto lab_0x406aab;\n        }\n    } else {\n        goto lab_0x4070a3;\n    }\n  lab_0x406bab:;\n    int64_t v116 = v80 == v20; // 0x406bb2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x406ae0;\n    } else {\n        goto lab_0x406bbe;\n    }\n  lab_0x406bbe:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x406990\n    if (v102 != 0) {\n        goto lab_0x406ae0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x406bda\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x407195;\n        } else {\n            // 0x406be8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x406bf9;\n        }\n    }\n  lab_0x406ae0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x406af7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x406f80_2;\n    } else {\n        // 0x406b1d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x406b45\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x406bf9;\n    }\n  lab_0x407d5e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x408324\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x406f80_2;\n        } else {\n            // 0x408335\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40834a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x407d92;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x407d81\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x407195;\n        } else {\n            // 0x407d8f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x407d92;\n        }\n    }\n  lab_0x40836f:\n    // 0x40836f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        goto lab_0x407d5e;\n    }\n  lab_0x40711d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40711d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x407121\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x407125\n    int64_t v123 = 0; // 0x40712c\n    int64_t v124 = v122; // 0x40712c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x407132\n        int64_t v126 = v120; // 0x40713a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x4080c1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x4080d9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x4080eb\n            int64_t v131 = v128; // 0x4080f4\n            int64_t v132 = v130; // 0x4080f4\n            int64_t v133; // 0x406990\n            int64_t v134; // 0x408106\n            if (v130 < v129) {\n                // 0x4080f6\n                if (v121 == v128) {\n                    // break -> 0x406f10\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x406efb\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x406f10\n                        goto lab_0x406f10;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x4080b8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x4080c1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x4080f6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x406f10\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x406efb\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x406f10\n                            goto lab_0x406f10;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x4080b8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x407144\n            if (*(int32_t *)v135 != 5) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x407150\n            int64_t v137 = v136; // 0x407150\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40715d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x406f10:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x406f10\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x406f14\n    int64_t v142; // 0x406990\n    int64_t v143; // 0x406990\n    int64_t v144; // 0x406990\n    if (v140 == v141) {\n        goto lab_0x4075c0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x406f21\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x408124\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40812d\n            if (v141 == v146) {\n                goto lab_0x4075de;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x408153\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40815a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x408173\n                int64_t v152 = v151; // 0x40817c\n                int64_t v153 = v149; // 0x40817c\n                int64_t v154; // 0x406990\n                int64_t v155; // 0x408187\n                if (v151 < v150) {\n                    // 0x40817e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x406f80_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40819a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x406f80_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x408140\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x408149\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40817e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x406f80_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40819a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x406f80_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x408140\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x406f4c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x406f33\n            if (*(int32_t *)v156 != 5) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x406f40\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x4075c0;\n            } else {\n                goto lab_0x406f4c;\n            }\n        }\n    }\n  lab_0x406db0:\n    // 0x406db0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x406dbd\n    int64_t v160 = 0; // 0x406dc5\n    if (v159 != -1) {\n        // 0x406dcb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x4076bc\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x406dee\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x406dfc\n        if (*(int32_t *)v162 != 5) {\n            // 0x4076bc\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x406e0f\n        int64_t v164; // bp-8, 0x406990\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x406990\n    uint64_t v165; // 0x406e26\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x407858\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x406e84\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x406f80_2;\n    } else {\n        // 0x406e30\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x406e84\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x407560\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x406f80_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x407566\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x406e52;\n                } else {\n                    goto lab_0x407572;\n                }\n            }\n        } else {\n            // 0x406e42\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x406e52;\n            } else {\n                goto lab_0x407572;\n            }\n        }\n    }\n  lab_0x407050:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x407879\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x406f80_2;\n        } else {\n            // 0x407891\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x4078a2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x407082;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x407071\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x407195;\n        } else {\n            // 0x40707f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x407082;\n        }\n    }\n  lab_0x407932:\n    // 0x407932\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        goto lab_0x407050;\n    }\n  lab_0x4075c0:\n    // 0x4075c0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x4075de;\n  lab_0x407188:\n    // 0x407188\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x406db0;\n  lab_0x407195:\n    // 0x407195\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x4071a8;\n  lab_0x4075de:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x4075e4\n    v14 = v48;\n    int64_t v170; // 0x406990\n    int64_t v171; // 0x406990\n    int64_t * v172; // 0x406990\n    int64_t v173; // 0x406990\n    int64_t v174; // bp-760, 0x406990\n    uint64_t size5; // 0x4075e8\n    if (v169 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        // 0x4075f9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x407659;\n        } else {\n            // 0x407605\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x406f80_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40762d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x406f80_2;\n                } else {\n                    goto lab_0x407659;\n                }\n            }\n        }\n    }\n  lab_0x406f4c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x4075de;\n    } else {\n        // 0x406f55\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x4075de;\n        } else {\n            goto lab_0x406f80_2;\n        }\n    }\n  lab_0x406e52:\n    // 0x406e52\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x407819\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x407834\n            if (v48 == v20 && v46 != 0) {\n                // 0x407842\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x406e84\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x406e73\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x406e84\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x406f80_2;\n  lab_0x407572:\n    // 0x407572\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        goto lab_0x406e52;\n    }\n  lab_0x407659:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x406990\n    int64_t v181; // 0x406990\n    int64_t v182; // 0x406990\n    int64_t v183; // 0x406990\n    int64_t v184; // 0x406990\n    int64_t v185; // 0x406990\n    int64_t v186; // 0x406990\n    int64_t v187; // 0x406990\n    int64_t v188; // 0x406990\n    int64_t v189; // 0x406990\n    int64_t v190; // 0x406990\n    int64_t v191; // 0x406990\n    int64_t v192; // 0x406990\n    int64_t v193; // 0x406990\n    float80_t v194; // 0x406990\n    float80_t v195; // 0x406990\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x4081d2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x4081e0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40830d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x407b19;\n    } else {\n        // 0x407661\n        int64_t v198; // 0x406990\n        float80_t v199; // 0x406990\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x407e21\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x407e2e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x407c8a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40768f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x407698\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x4076bc\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x408206\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x408206\n                            v181 = v187 + 3;\n                            goto lab_0x408381;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x408381;\n                            } else {\n                                goto lab_0x408242;\n                            }\n                        }\n                    } else {\n                        // 0x407f13\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x407b07;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x407f21\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40846a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x407f68\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x407f7b\n                                int64_t v207 = v176 & 0xffffffff; // 0x407f7e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x407f8c\n                                int64_t v209 = v187 + 1; // 0x407fa9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x407fbe\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x407fcb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x407b19;\n                        }\n                    }\n                } else {\n                    // 0x407cb8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x407cb8\n                        v180 = v187 + 1;\n                        goto lab_0x408267;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x408267;\n                        } else {\n                            goto lab_0x407cd8;\n                        }\n                    }\n                }\n            } else {\n                // 0x407af0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x407b07;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40803c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40804d\n                    char v215 = *v213; // 0x408054\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x408090\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40809d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x408065\n                        v182 = v218;\n                        int64_t v219; // 0x408057\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x407b19;\n                }\n            }\n        } else {\n            float80_t v220; // 0x406990\n            if (v220 != 0.0L) {\n                // 0x4076bc\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x407d0b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x407d1a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x407ff3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x407b19;\n        }\n    }\n  lab_0x407b19:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x407b1c\n    int64_t v229 = v228; // 0x407b22\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x407b24\n        int64_t v232 = v231 + v224; // 0x407b27\n        int64_t v233 = v232 - v225; // 0x407b2e\n        if ((v230 & 2) != 0) {\n            // 0x407fd3\n            v229 = v233;\n            int64_t v234 = v224; // 0x407fd6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x407fe0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x407fe0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x407e45\n                int64_t v238 = v224; // 0x407e4b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x407e59\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x407e50\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x407e65\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x407e78\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x407b51\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x407b71\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x407b68\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x407b7a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x407b88\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x4076bc\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x407bb8\n    int64_t dest_mem5 = v48; // 0x407bc5\n    int64_t v250 = v248; // 0x407bc5\n    int64_t v251 = v47; // 0x407bc5\n    int64_t v252; // 0x406990\n    if (v47 - v46 > v248) {\n        goto lab_0x407c40;\n    } else {\n        if (v249 < v46) {\n            // 0x407e12\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x406f80_2;\n            } else {\n                goto lab_0x407c40;\n            }\n        } else {\n            // 0x407bd0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x407c40;\n            } else {\n                if (v47 != 0) {\n                    // 0x4081a8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406f80_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x4081ae\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x407bee;\n                        } else {\n                            goto lab_0x4081ba;\n                        }\n                    }\n                } else {\n                    // 0x407bde\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x407bee;\n                    } else {\n                        goto lab_0x4081ba;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x407c40:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x407c51\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x407c6d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x407087;\n  lab_0x407b07:\n    // 0x407b07\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x407b19;\n  lab_0x408267:;\n    char * v257 = nl_langinfo(0x10000); // 0x40829a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x4082ab\n    char v259 = *v257; // 0x4082b2\n    int64_t v260 = v176 & 0xffffffff; // 0x4082b5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x4082c3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x4082f0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x4082fd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x407cd8;\n  lab_0x407cd8:\n    // 0x407cd8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x407b19;\n  lab_0x407bee:\n    // 0x407bee\n    if (v48 == 0 || v48 == v20) {\n        // 0x407e8b\n        int64_t size7; // 0x406990\n        int64_t * mem12 = malloc((int32_t)size7); // 0x407ea2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x406f80_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x407eae\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407ed9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x407c40;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x407c1d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x406f80_2;\n        } else {\n            // 0x407c2b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x407c40;\n        }\n    }\n  lab_0x4081ba:\n    // 0x4081ba\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x406f80_2;\n    } else {\n        goto lab_0x407bee;\n    }\n  lab_0x408381:;\n    int64_t v265 = v187 + 4; // 0x408381\n    char v266 = *nl_langinfo(0x10000); // 0x4083cc\n    int64_t v267 = v176 & 0xffffffff; // 0x4083cf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x4083d6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x4083fd\n        int64_t v270 = v265 + 1; // 0x408405\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x408242;\n  lab_0x408242:\n    // 0x408242\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x407b19;\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "4086c9",
            "decompiledFuncCode": "int64_t function_4084b0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x408513\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x4084c8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x4084d9\n    g56 = v5;\n    int64_t v6; // 0x4084b0\n    int64_t v7; // 0x4084b0\n    int64_t v8; // 0x4084b0\n    int64_t v9; // 0x4084b0\n    int64_t v10; // 0x4084b0\n    int64_t v11; // 0x4084b0\n    int64_t v12; // 0x4084b0\n    uint32_t v13; // 0x4085d0\n    int64_t * v14; // 0x408600\n    int64_t v15; // 0x408608\n    uint32_t v16; // 0x408650\n    uint32_t v17; // 0x408620\n    int64_t * v18; // 0x4085b0\n    int64_t v19; // 0x4085b0\n    int64_t * v20; // 0x4085c0\n    int64_t v21; // 0x4085c0\n    int64_t * v22; // 0x408598\n    int64_t v23; // 0x408598\n    int64_t * v24; // 0x408580\n    int64_t v25; // 0x408580\n    int64_t * v26; // 0x4086a0\n    uint32_t v27; // 0x408560\n    int64_t v28; // 0x4086a0\n    int64_t * v29; // 0x408690\n    int64_t v30; // 0x408690\n    uint32_t v31; // 0x408540\n    int64_t * v32; // 0x4086b8\n    int64_t v33; // 0x4086b8\n    int64_t v34; // 0x408663\n    uint32_t v35; // 0x408520\n    int64_t v36; // 0x408637\n    uint32_t v37; // 0x4084e8\n    int32_t * v38; // 0x4085d0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x408560\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x408567\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x4085b0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x408573\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x408506\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x408540\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x408547\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x4085c0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x408553\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x408506\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x408520\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x408527\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x408598\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x408533\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x408506\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x4084e8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x4084f3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x408580\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x4084ff\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x408506\n            break;\n        }\n        case 11: {\n            // 0x4085d0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x4085df\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x4086a0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x4085ec\n            *(int64_t *)(v4 + 16) = __asm_movsd_4(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x408506\n            break;\n        }\n        case 12: {\n            // 0x408600\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x408506\n            break;\n        }\n        case 15: {\n            // 0x408650\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x408657\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x408690\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x408663\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x408506\n            break;\n        }\n        case 16: {\n            // 0x408620\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40862b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x4086b8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x408637\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x408506\n            break;\n        }\n        default: {\n            // 0x408513\n            return 0xffffffff;\n        }\n    }\n    // 0x408506\n    v3++;\n    int64_t v39 = v4 + 32; // 0x408511\n    while (v3 < v2) {\n        // 0x4084d0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g56 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x408560\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x408567\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x4085b0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x408573\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x408506\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x408540\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x408547\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x4085c0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x408553\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x408506\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x408520\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x408527\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x408598\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x408533\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x408506\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x4084e8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x4084f3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x408580\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x4084ff\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x408506\n                break;\n            }\n            case 11: {\n                // 0x4085d0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x4085df\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x4086a0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x4085ec\n                *(int64_t *)(v4 + 16) = __asm_movsd_4(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x408506\n                break;\n            }\n            case 12: {\n                // 0x408600\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x408506\n                break;\n            }\n            case 15: {\n                // 0x408650\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x408657\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x408690\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x408663\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x408506\n                break;\n            }\n            case 16: {\n                // 0x408620\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40862b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x4086b8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x408637\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x408506\n                break;\n            }\n            default: {\n                // 0x408513\n                return 0xffffffff;\n            }\n        }\n        // 0x408506\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x408513\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4086d0",
            "funcStartAddr": "4086d0",
            "funcEndAddr": "4093d9",
            "decompiledFuncCode": "int64_t function_4086d0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x4086d2\n    int64_t v4 = v1 + 16; // 0x4086d6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x408709\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40871e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40874b\n    int32_t v8 = 0; // 0x408750\n    int64_t v9 = 0; // 0x408750\n    int64_t v10 = v3; // 0x408750\n    int64_t v11 = a1; // 0x408750\n    int64_t v12 = 0; // 0x408750\n    char v13; // 0x4086d0\n    int64_t v14; // 0x4086d0\n    int64_t v15; // 0x4086d0\n    int64_t v16; // 0x4086d0\n    int64_t v17; // 0x4086d0\n    int64_t v18; // 0x4086d0\n    int64_t v19; // 0x4086d0\n    int64_t v20; // 0x4086d0\n    int64_t v21; // 0x4086d0\n    int64_t v22; // 0x4086d0\n    int64_t v23; // 0x4086d0\n    int64_t v24; // 0x4086d0\n    int64_t v25; // 0x4086d0\n    int64_t v26; // 0x4086d0\n    int64_t v27; // 0x4086d0\n    int64_t v28; // 0x4086d0\n    int64_t v29; // 0x4086d0\n    int64_t v30; // 0x4086d0\n    int32_t v31; // 0x4086d0\n    int64_t v32; // 0x4086d0\n    int64_t v33; // 0x408740\n    int64_t v34; // 0x408790\n    int64_t * v35; // 0x4087b3\n    int64_t v36; // 0x408816\n    if (v7 != 0) {\n        // 0x408740\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x4086d0\n        int64_t v38 = 7; // 0x4086d0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x4086d0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x408740:\n            // 0x408740\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x408783\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x408798\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x4087d4\n                int64_t v43 = v42; // 0x4087d4\n                int64_t v44 = v43; // 0x4087dd\n                int64_t v45 = v33; // 0x4087dd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x408b70\n                    char v47 = *(char *)v46; // 0x408b74\n                    int64_t v48 = v46; // 0x408b7d\n                    while (v47 < 58) {\n                        // 0x408b70\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x408b7f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x409215\n                        char v52 = *(char *)v51; // 0x409215\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x409219\n                        int64_t v54 = v33; // 0x40922d\n                        int64_t v55 = v51; // 0x40922d\n                        char v56 = v52; // 0x40922d\n                        int64_t v57 = v53; // 0x40922d\n                        bool v58 = v52 < 58; // 0x40922d\n                        bool v59 = v52 < 58; // 0x40922d\n                        char v60 = v52; // 0x40922d\n                        int64_t v61 = v51; // 0x40922d\n                        int64_t v62; // 0x409242\n                        int64_t v63; // 0x409215\n                        char v64; // 0x409215\n                        int64_t v65; // 0x409219\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x408e98_9;\n                            }\n                            // 0x409213\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x40922f\n                                if (v64 >= 58) {\n                                    goto lab_0x408e98_9;\n                                }\n                                // 0x409213\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x4091e8\n                        while (v58) {\n                            // 0x4091ee\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x408e98_9;\n                                }\n                                // 0x409213\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x40922f\n                                    if (v64 >= 58) {\n                                        goto lab_0x408e98_9;\n                                    }\n                                    // 0x409213\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x4091e4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x4092ed\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x408e98_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x4092fe\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x4086d0\n                v36 = v45;\n                char v70; // 0x4086d0\n                while (true) {\n                    // 0x408816\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x408830\n                                *v41 = *v41 | 2;\n                                // break -> 0x408810\n                                break;\n                            }\n                            case 43: {\n                                // 0x408840\n                                *v41 = *v41 | 4;\n                                // break -> 0x408810\n                                break;\n                            }\n                            case 32: {\n                                // 0x408850\n                                *v41 = *v41 | 8;\n                                // break -> 0x408810\n                                break;\n                            }\n                            case 35: {\n                                // 0x408860\n                                *v41 = *v41 | 16;\n                                // break -> 0x408810\n                                break;\n                            }\n                            case 48: {\n                                // 0x408870\n                                *v41 = *v41 | 32;\n                                // break -> 0x408810\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x408878\n                                    break;\n                                }\n                                // 0x408806\n                                *v41 = *v41 | 64;\n                                // break -> 0x408810\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40881f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x408810\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x4086d0\n                int64_t * v72; // 0x4087a1\n                int64_t * v73; // 0x4087aa\n                if (v70 == 42) {\n                    // 0x4088ed\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40890d\n                    int64_t v75 = v74; // 0x40890d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x408911\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x408917\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x408ced\n                        char v80 = *(char *)v79; // 0x408cf1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x408ced\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x408cfd\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x408d01\n                        int64_t v82 = v36; // 0x408d01\n                        int64_t v83 = 0; // 0x408d01\n                        if (v80 != 36) {\n                            goto lab_0x40891d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x408d32\n                            int64_t v89 = v85; // 0x408d32\n                            int64_t v90 = v87; // 0x408d32\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x408d37\n                            int64_t v95 = v92 + 1; // 0x408d3a\n                            char v96 = *(char *)v95; // 0x408d3a\n                            int64_t v97 = v96; // 0x408d3a\n                            while (v94 < v91) {\n                                // 0x408d51\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x408e98_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x408d0b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x408d14\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x408d51\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x408e98_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x408d0b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x40938b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x408e98_9;\n                            }\n                            // 0x409399\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40892c;\n                        }\n                    } else {\n                        goto lab_0x40891d;\n                    }\n                } else {\n                    // 0x40887d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x4086d0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x408f9b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x408fa0\n                        int64_t v102 = v71; // 0x408fa9\n                        char * v103 = v100; // 0x408fa9\n                        int64_t v104 = v36; // 0x408fa9\n                        int64_t v105 = v71; // 0x408fa9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x408fb3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x408fb3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x408fb3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x408fc2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x408fe5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x408888;\n                }\n            } else {\n                goto lab_0x408748;\n            }\n        }\n    }\n  lab_0x408752:\n    // 0x408752\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x408774\n    return 0;\n  lab_0x408e98_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x408ea3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x408eb5\n    if (v3 != v115) {\n        // 0x408ec0\n        free((int64_t *)v115);\n    }\n    // 0x408ec5\n    *__errno_location() = 22;\n    // 0x408774\n    return 0xffffffff;\n  lab_0x409070_5:;\n    // 0x409070\n    int64_t v116; // 0x4086d0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x409075\n    int64_t v119; // 0x4086d0\n    if (v4 == v117) {\n        goto lab_0x409089_3;\n    } else {\n        // 0x409077\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x409089_3;\n    }\n  lab_0x409089_3:;\n    int64_t v120 = *v5; // 0x409089\n    int32_t * v121; // 0x409099\n    if (v3 == v120) {\n        // 0x409099\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x409094\n    free((int64_t *)v120);\n    // 0x409099\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x408748:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40874b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x408752\n        goto lab_0x408752;\n    }\n    goto lab_0x408740;\n  lab_0x40891d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40891d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x408cc3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x408e98_9;\n        }\n        // 0x408cdb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40892c;\n  lab_0x408888:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40888b\n    int64_t v147 = v339; // 0x40888b\n    int64_t v145 = v338; // 0x40888b\n    int64_t v143 = v337; // 0x40888b\n    int64_t v186; // 0x4086d0\n    int64_t v190; // 0x4086d0\n    int64_t v189; // 0x4086d0\n    int64_t v188; // 0x4086d0\n    int64_t v187; // 0x4086d0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x408990;\n    } else {\n        goto lab_0x408891;\n    }\n  lab_0x40892c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40892c\n    int64_t v132 = v128; // 0x408933\n    int64_t v133 = v16; // 0x408933\n    int64_t v134 = v131; // 0x408933\n    int64_t v135; // 0x4086d0\n    int64_t v136; // 0x4086d0\n    int64_t v137; // 0x4086d0\n    int64_t v138; // 0x408bdf\n    if (v16 > v127) {\n        goto lab_0x40893c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x408bd5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x409070_5;\n        }\n        int64_t size = 32 * v138; // 0x408bfe\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x40915c\n            if (mem == NULL) {\n                goto lab_0x409089_3;\n            }\n            // 0x40917e\n            v135 = (int64_t)mem;\n            goto lab_0x409189;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x408c1f\n            int64_t v140 = *v6; // 0x408c24\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x409070_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x408c1f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x409189;\n            } else {\n                goto lab_0x408c5d;\n            }\n        }\n    }\n  lab_0x408891:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x408898\n    int64_t v151 = v146; // 0x408898\n    int64_t v152 = v144; // 0x408898\n    uint64_t v153; // 0x4086d0\n    int64_t v154; // 0x4086d0\n    int64_t v155; // 0x4088d7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x4088db\n        int64_t v158; // 0x4086d0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x408a40\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x4088d3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x408a48\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x4088d0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x4088d3\n                    break;\n                }\n            }\n        } else {\n            // 0x4088e0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x4088d3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x408a48\n    int64_t v162 = v161 % 256; // 0x408a54\n    g57 = v162;\n    int64_t v163 = 17; // 0x408a57\n    int64_t v164 = v154; // 0x408a57\n    int64_t v165 = v154; // 0x408a57\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x408ac1;\n        }\n        case 28: {\n            goto lab_0x408e12;\n        }\n        case 30: {\n            // 0x408e3e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x408a69;\n        }\n        case 32: {\n            goto lab_0x408e12;\n        }\n        case 33: {\n            goto lab_0x408e12;\n        }\n        case 34: {\n            goto lab_0x408e12;\n        }\n        case 46: {\n            // 0x408e2f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x408a69;\n        }\n        case 51: {\n            goto lab_0x408e4d;\n        }\n        case 60: {\n            goto lab_0x408e12;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x408d69\n            int32_t v167 = v166 - 7; // 0x408d69\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x408d6f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x408a69;\n        }\n        case 63: {\n            goto lab_0x408dc0;\n        }\n        case 64: {\n            goto lab_0x408e12;\n        }\n        case 65: {\n            goto lab_0x408e12;\n        }\n        case 66: {\n            goto lab_0x408e12;\n        }\n        case 68: {\n            goto lab_0x408dc0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x408d7f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x408d85\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x408d8d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x408d9b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x408daf\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x408a69;\n        }\n        case 74: {\n            goto lab_0x408e4d;\n        }\n        case 75: {\n            goto lab_0x408a69;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x408a60\n            int32_t v172 = v171 - 7; // 0x408a60\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x408a66\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x408a69;\n        }\n        case 80: {\n            goto lab_0x408e4d;\n        }\n        case 83: {\n            goto lab_0x408e4d;\n        }\n        default: {\n            goto lab_0x408e98_9;\n        }\n    }\n  lab_0x40893c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x408953\n        int64_t v178 = v176; // 0x4086d0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x408948\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x408948\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x408961\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40896d\n    int32_t v182 = *v181; // 0x40896d\n    if (v182 != 0) {\n        // 0x408fee\n        if (v182 != 5) {\n            goto lab_0x408e98_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x408ff7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x408888;\n    } else {\n        // 0x408977\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40897d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x408891;\n        } else {\n            goto lab_0x408990;\n        }\n    }\n  lab_0x408990:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x408990\n    char v197 = *v196; // 0x408990\n    int64_t * v198; // 0x4087b8\n    *v198 = v192;\n    int64_t v199; // 0x4086d0\n    int64_t v200; // 0x4086d0\n    int64_t v201; // 0x4086d0\n    int64_t v202; // 0x4086d0\n    int64_t v203; // 0x4086d0\n    int64_t * v204; // 0x4087c1\n    int64_t * v205; // 0x4087ca\n    int64_t v206; // 0x4089a9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x408b90\n        int64_t v208 = v193; // 0x408b99\n        char * v209; // 0x4086d0\n        int64_t v210; // 0x4086d0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x408ba0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x408ba4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x408ba0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x408bae\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x408b90\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x408bc1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x408891;\n    } else {\n        // 0x40899f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x4089bf\n        int64_t v219 = v218; // 0x4089bf\n        int64_t v220 = v219 + 0xffffffd0; // 0x4089c3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x4089c9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x409274\n            char v224 = *(char *)v223; // 0x409278\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x409274\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x409284\n            v201 = v223;\n            int64_t v225 = v219; // 0x409288\n            int64_t v226 = v206; // 0x409288\n            int64_t v227 = 0; // 0x409288\n            if (v224 != 36) {\n                goto lab_0x4089cf;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x4092b9\n                int64_t v233 = v229; // 0x4092b9\n                int64_t v234 = v231; // 0x4092b9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x4092be\n                int64_t v239 = v236 + 1; // 0x4092c5\n                char v240 = *(char *)v239; // 0x4092c9\n                int64_t v241 = v240; // 0x4092c9\n                while (v238 < v235) {\n                    // 0x4092d7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x408e98_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x409292\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x40929b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x4092d7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x408e98_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x409292\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x4093a7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x408e98_9;\n                }\n                // 0x4093b5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x4089de;\n            }\n        } else {\n            goto lab_0x4089cf;\n        }\n    }\n  lab_0x408ac1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x408ac6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x408ace\n    *a2 = v245;\n    int64_t v246; // 0x4086d0\n    int64_t v247; // 0x4086d0\n    int64_t dest_mem; // 0x4086d0\n    int64_t v248; // 0x4086d0\n    int64_t v249; // 0x4093c3\n    if (v246 > v245) {\n        // 0x408ada\n        goto lab_0x408748;\n    } else {\n        if (v246 < 0) {\n            // 0x4093c3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409070_5;\n        }\n        int64_t v250 = 2 * v246; // 0x408af6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x4093c3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409070_5;\n        }\n        int64_t v251 = *v5; // 0x408b07\n        int64_t size2 = 176 * v246; // 0x408b19\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x408c69\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x4091cc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x409099\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x409077\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x409089_3;\n            }\n            goto lab_0x408c84;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x408b2b\n            if (mem4 == NULL) {\n                // 0x4093c3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409070_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x408b2b\n            int64_t v254 = *v5; // 0x408b4d\n            int64_t v255 = *a2; // 0x408b51\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x408c84;\n            } else {\n                goto lab_0x408b5f;\n            }\n        }\n    }\n  lab_0x408e12:\n    // 0x408e12\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x408e27\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x408a69;\n  lab_0x408e4d:;\n    uint32_t v335 = (int32_t)v153; // 0x408e55\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x408e5b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x408e63\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x408e71\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x408e7e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408a69;\n  lab_0x408dc0:;\n    uint32_t v336 = (int32_t)v153; // 0x408dc8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x408dce\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x408dd6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x408de4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x408df1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408a69;\n  lab_0x408a69:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x4086d0\n    int64_t v260; // 0x4086d0\n    int64_t * v261; // 0x4087cf\n    if (v259 == -1) {\n        // 0x408f74\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x408e98_9;\n        }\n        // 0x408f8c\n        v260 = v148;\n    } else {\n        // 0x408a73\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x408a78\n    int64_t v264 = v258; // 0x408a7f\n    int64_t v265 = v162; // 0x408a7f\n    int64_t v266 = v263; // 0x408a7f\n    int64_t v267; // 0x4086d0\n    int64_t v268; // 0x4086d0\n    int64_t v269; // 0x4086d0\n    int64_t v270; // 0x4086d0\n    int64_t v271; // 0x4086d0\n    if (v142 > v262) {\n        goto lab_0x408a85;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x408ee8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x408ef2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x409070_5;\n        }\n        int64_t size3 = 32 * v273; // 0x408f11\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x408f24\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x409009\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x409089_3;\n            }\n            goto lab_0x409026;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x408f31\n            if (mem6 == NULL) {\n                // 0x4093c3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409070_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x408f31\n            int64_t v276 = v274 & 0xffffffff; // 0x408f36\n            int64_t v277 = *v6; // 0x408f61\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x409026;\n            } else {\n                goto lab_0x408f6b;\n            }\n        }\n    }\n  lab_0x408a85:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x408a9b\n        int64_t v282 = v279; // 0x4086d0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x408a90\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x408a90\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x408aa9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x408ab5\n    int32_t v286 = *v285; // 0x408ab5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x408eda\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x408e98_9;\n        }\n    } else {\n        // 0x408abf\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x408ac1;\n  lab_0x409189:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x409189\n    int64_t * v290; // 0x4086d0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x408c5d;\n  lab_0x408c5d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40893c;\n  lab_0x4089cf:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x4089cf\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x40924a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x408e98_9;\n        }\n        // 0x409262\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x4089de;\n  lab_0x4089de:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x4089de\n    int64_t v300 = v296; // 0x4089e5\n    int64_t v301 = v191; // 0x4089e5\n    int64_t v302 = v299; // 0x4089e5\n    int64_t v303; // 0x4086d0\n    int64_t v304; // 0x4086d0\n    int64_t v305; // 0x4086d0\n    int64_t v306; // 0x4090c2\n    if (v191 > v295) {\n        goto lab_0x4089ee;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x4090b8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x409070_5;\n        }\n        int64_t size4 = 32 * v306; // 0x4090dd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x40930e\n            if (mem7 == NULL) {\n                goto lab_0x409089_3;\n            }\n            // 0x409330\n            v304 = (int64_t)mem7;\n            goto lab_0x40933b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x4090fe\n            int64_t v308 = *v6; // 0x409103\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x409070_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x4090fe\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x40933b;\n            } else {\n                goto lab_0x40913c;\n            }\n        }\n    }\n  lab_0x408c84:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x4086d0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x408b5f;\n  lab_0x408b5f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x408748;\n  lab_0x409026:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40903c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x408f6b;\n  lab_0x408f6b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x408a85;\n  lab_0x4089ee:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x408a03\n        int64_t v324 = v322; // 0x4086d0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x4089f8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x4089f8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x408a11\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x408a1e\n    int32_t v328 = *v327; // 0x408a1e\n    if (v328 != 0) {\n        // 0x409145\n        if (v328 != 5) {\n            goto lab_0x408e98_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x40914e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x408a28\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x408a31\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x408891;\n  lab_0x40933b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x40933b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x40913c;\n  lab_0x40913c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x4089ee;\n}\n"
        },
        {
            "funcName": "function_4093e0",
            "funcStartAddr": "4093e0",
            "funcEndAddr": "40943d",
            "decompiledFuncCode": "int64_t function_4093e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4093e0\n    return function_401538();\n}\n"
        },
        {
            "funcName": "function_409440",
            "funcStartAddr": "409440",
            "funcEndAddr": "409441",
            "decompiledFuncCode": "int64_t function_409440(void) {\n    // 0x409440\n    int64_t result; // 0x409440\n    return result;\n}\n"
        },
        {
            "funcName": "function_409450",
            "funcStartAddr": "409450",
            "funcEndAddr": "409468",
            "decompiledFuncCode": "int64_t function_409450(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409450\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g19);\n}\n"
        },
        {
            "funcName": "function_409468",
            "funcStartAddr": "409468",
            "funcEndAddr": "409488",
            "decompiledFuncCode": "int64_t function_409468(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g15; // 0x409472\n    while (*(int64_t *)v1 != -1) {\n        // 0x409473\n        v1 -= 8;\n    }\n    // 0x409484\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stdbuf.elf"
}