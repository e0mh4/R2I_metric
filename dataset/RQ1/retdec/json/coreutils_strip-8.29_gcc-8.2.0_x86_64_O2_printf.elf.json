{
    "funcInfo": [
        {
            "funcName": "function_401770",
            "funcStartAddr": "401770",
            "funcEndAddr": "401775",
            "decompiledFuncCode": "int64_t function_401770(void) {\n    // 0x401770\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401775",
            "funcStartAddr": "401775",
            "funcEndAddr": "40177a",
            "decompiledFuncCode": "int64_t function_401775(void) {\n    // 0x401775\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40177a",
            "funcStartAddr": "40177a",
            "funcEndAddr": "40177f",
            "decompiledFuncCode": "int64_t function_40177a(void) {\n    // 0x40177a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40177f",
            "funcStartAddr": "40177f",
            "funcEndAddr": "401784",
            "decompiledFuncCode": "int64_t function_40177f(void) {\n    // 0x40177f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401784",
            "funcStartAddr": "401784",
            "funcEndAddr": "401789",
            "decompiledFuncCode": "int64_t function_401784(void) {\n    // 0x401784\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401789",
            "funcStartAddr": "401789",
            "funcEndAddr": "40178e",
            "decompiledFuncCode": "int64_t function_401789(void) {\n    // 0x401789\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40178e",
            "funcStartAddr": "40178e",
            "funcEndAddr": "401793",
            "decompiledFuncCode": "int64_t function_40178e(void) {\n    // 0x40178e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017a0",
            "funcStartAddr": "4017a0",
            "funcEndAddr": "40250d",
            "decompiledFuncCode": "int64_t function_4017a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4017a0\n    function_403130(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_408ed0(0x403090, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g29 = 0;\n    g28 = getenv(\"POSIXLY_CORRECT\") != NULL;\n    uint32_t v1 = (int32_t)a1; // 0x40180e\n    char * format; // 0x401828\n    if (v1 == 2) {\n        char * str = (char *)*(int64_t *)(a2 + 8); // 0x401df2\n        if (strcmp(str, \"--help\") == 0) {\n            // 0x402506\n            function_402c40(0);\n            // UNREACHABLE\n        }\n        // 0x401dff\n        if (strcmp(str, \"--version\") == 0) {\n            // 0x4023d5\n            function_405590((int64_t)g23, \"printf\", \"GNU coreutils\", (int64_t)g15, \"David MacKenzie\", 0);\n            // 0x401981\n            return 0;\n        }\n        // 0x401e17\n        if (strcmp(str, \"--\") == 0) {\n            // 0x40181c\n            format = dcgettext(NULL, \"missing operand\", 5);\n            error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n            function_402c40(1);\n            // UNREACHABLE\n        }\n    } else {\n        if (v1 <= 1) {\n            // 0x40181c\n            format = dcgettext(NULL, \"missing operand\", 5);\n            error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n            function_402c40(1);\n            // UNREACHABLE\n        }\n        // 0x401845\n        strcmp((char *)*(int64_t *)(a2 + 8), \"--\");\n    }\n    // 0x40185e\n    int64_t v2; // bp-440, 0x4017a0\n    int64_t v3 = &v2; // 0x4017af\n    int64_t * v4 = (int64_t *)(v3 + 32); // 0x401880\n    int64_t * v5 = (int64_t *)(v3 + 8);\n    int32_t * v6 = (int32_t *)(v3 + 20);\n    int64_t v7 = v3 + 40;\n    int32_t * v8 = (int32_t *)v7;\n    int32_t * v9 = (int32_t *)(v3 + 96);\n    int64_t v10 = v3 + 128;\n    int64_t v11 = v3 + 24;\n    char * v12 = (char *)v11;\n    char * v13 = (char *)(v3 + 216);\n    char * v14 = (char *)(v3 + 248);\n    char * v15 = (char *)(v3 + 245);\n    char * v16 = (char *)(v3 + 243);\n    char * v17 = (char *)(v3 + 239);\n    char * v18 = (char *)(v3 + 233);\n    char * v19 = (char *)(v3 + 197);\n    char * v20 = (char *)(v3 + 227);\n    int64_t v21 = v3 + 228;\n    char * v22 = (char *)(v3 + 193);\n    char * v23 = (char *)(v3 + 225);\n    int64_t v24 = v3 + 80;\n    char * v25 = (char *)v24;\n    int64_t * v26 = (int64_t *)v24;\n    int64_t * v27 = (int64_t *)v11;\n    char * v28 = (char *)(v3 + 103);\n    int64_t * v29 = (int64_t *)v7;\n    int64_t * v30 = (int64_t *)(v3 + 88);\n    int64_t v31 = v3 + 48;\n    int64_t * v32 = (int64_t *)v31;\n    int64_t * v33 = (int64_t *)(v3 + 104);\n    int64_t v34 = v3 + 64;\n    int64_t * v35 = (int64_t *)v34;\n    int64_t v36 = v3 + 120;\n    int64_t * v37 = (int64_t *)v36;\n    float80_t * v38 = (float80_t *)v34;\n    float80_t * v39 = (float80_t *)v31;\n    int64_t * v40 = (int64_t *)(v3 - 8);\n    int64_t v41 = v3 - 16;\n    int64_t * v42 = (int64_t *)v41;\n    float80_t * v43 = (float80_t *)v41;\n    int64_t v44 = a4; // 0x401877\n    int64_t v45 = a3; // 0x401877\n    int64_t v46 = a5; // 0x401877\n    int64_t v47 = a6; // 0x401877\n    int32_t v48; // 0x4017a0\n    int3_t v49; // 0x4017a0\n    int3_t v50; // 0x4017a0\n    int3_t v51; // 0x4017a0\n    int3_t v52; // 0x4017a0\n    int3_t v53; // 0x4017a0\n    int64_t v54; // 0x4017a0\n    int64_t v55; // 0x4017a0\n    int64_t v56; // 0x4017a0\n    int64_t v57; // 0x4017a0\n    int64_t v58; // 0x4017a0\n    int64_t v59; // 0x4017a0\n    int64_t v60; // 0x4017a0\n    int64_t v61; // 0x4017a0\n    int64_t v62; // 0x4017a0\n    int64_t v63; // 0x4017a0\n    int64_t v64; // 0x4017a0\n    int64_t v65; // 0x4017a0\n    int64_t v66; // 0x4017a0\n    int64_t v67; // 0x4017a0\n    int64_t v68; // 0x4017a0\n    int64_t v69; // 0x4017a0\n    int64_t v70; // 0x4017a0\n    int64_t v71; // 0x4017a0\n    int64_t v72; // 0x4017a0\n    int64_t v73; // 0x4017a0\n    int64_t v74; // 0x4017a0\n    int64_t v75; // 0x4017a0\n    int64_t v76; // 0x4017a0\n    int64_t v77; // 0x4017a0\n    int64_t v78; // 0x4017a0\n    int64_t v79; // 0x4017a0\n    int64_t v80; // 0x4017a0\n    int64_t v81; // 0x4017a0\n    int64_t v82; // 0x4017a0\n    int64_t v83; // 0x4017a0\n    int64_t v84; // 0x4017a0\n    int64_t v85; // 0x4017a0\n    int64_t v86; // 0x4017a0\n    int64_t v87; // 0x4017a0\n    int64_t v88; // 0x4017a0\n    int64_t v89; // 0x4017a0\n    int64_t v90; // 0x4017a0\n    int64_t v91; // 0x4017a0\n    int64_t v92; // 0x4017a0\n    int64_t v93; // 0x4017a0\n    int64_t v94; // 0x4017a0\n    int64_t v95; // 0x4017a0\n    int64_t v96; // 0x4017a0\n    int64_t v97; // 0x4017a0\n    int64_t v98; // 0x4017a0\n    int64_t v99; // 0x4017a0\n    int64_t v100; // 0x4017a0\n    int64_t v101; // 0x4017a0\n    int64_t v102; // 0x4017a0\n    int64_t v103; // 0x4017a0\n    int64_t v104; // 0x4017a0\n    int64_t v105; // 0x4017a0\n    int64_t v106; // 0x4017a0\n    int64_t v107; // 0x4017a0\n    int64_t v108; // 0x4017a0\n    int64_t v109; // 0x4017a0\n    int64_t v110; // 0x4017a0\n    int64_t v111; // 0x4017a0\n    int64_t v112; // 0x4017a0\n    int64_t v113; // 0x4017a0\n    int64_t v114; // 0x4017a0\n    int64_t v115; // 0x4017a0\n    int64_t v116; // 0x4017a0\n    int64_t v117; // 0x4017a0\n    int64_t v118; // 0x4017a0\n    int64_t v119; // 0x4017a0\n    int64_t v120; // 0x4017a0\n    int64_t v121; // 0x4017a0\n    int64_t v122; // 0x4017a0\n    int64_t v123; // 0x4017a0\n    int64_t v124; // 0x4017a0\n    int64_t v125; // 0x4017a0\n    int64_t v126; // 0x4017a0\n    int64_t v127; // 0x4017a0\n    int64_t v128; // 0x4017a0\n    int64_t v129; // 0x4017a0\n    int64_t v130; // 0x4017a0\n    int64_t v131; // 0x4017a0\n    int64_t v132; // 0x4017a0\n    int64_t v133; // 0x4017a0\n    int64_t v134; // 0x4017a0\n    int64_t v135; // 0x4017a0\n    int64_t v136; // 0x4017a0\n    int64_t v137; // 0x4017a0\n    int64_t v138; // 0x4017a0\n    char v139; // 0x4017a0\n    int64_t v140; // 0x4017a0\n    char v141; // 0x4017a0\n    int64_t v142; // 0x4017a0\n    int64_t v143; // 0x4017a0\n    int64_t v144; // 0x4017a0\n    int64_t v145; // 0x4017a0\n    char v146; // 0x4017a0\n    int64_t v147; // 0x4019a0\n    int64_t v148; // 0x4019ab\n    while (true) {\n        char v149 = *(char *)*v4; // 0x401885\n        if (v149 == 0) {\n            // break -> 0x401e31\n            break;\n        }\n        // 0x401891\n        *v8 = 0;\n        *v9 = 0;\n        int3_t v150; // 0x4017a0\n        v51 = v150;\n        v120 = v44;\n        v134 = v45;\n        v141 = v149;\n        v90 = v46;\n        v99 = v47;\n        v65 = *v4;\n        v70 = (int64_t)*v6;\n        v76 = *v5;\n        while (true) {\n          lab_0x4018ec:\n            // 0x4018ec\n            v77 = v76;\n            v71 = v70;\n            v66 = v65;\n            v100 = v99;\n            v91 = v90;\n            unsigned char v151 = v141;\n            v135 = v134;\n            v121 = v120;\n            v52 = v51;\n            if (v151 == 37) {\n                // 0x4019a0\n                v147 = v66 + 1;\n                unsigned char v152 = *(char *)v147; // 0x4019a0\n                v148 = v66 + 2;\n                switch (v152) {\n                    case 37: {\n                        int64_t v153 = (int64_t)g23; // 0x401a90\n                        int64_t * v154 = (int64_t *)(v153 + 40); // 0x401a97\n                        uint64_t v155 = *v154; // 0x401a97\n                        if (v155 >= *(int64_t *)(v153 + 48)) {\n                            // 0x401db0\n                            __overflow(g23, 37);\n                            v49 = v52;\n                            v117 = v121;\n                            v131 = v135;\n                            v111 = v147;\n                            v87 = v91;\n                            v97 = v100;\n                            v67 = v71;\n                            v73 = v77;\n                            v78 = v148;\n                        } else {\n                            int64_t v156 = v155 + 1; // 0x401aa5\n                            *v154 = v156;\n                            *(char *)v155 = 37;\n                            v49 = v52;\n                            v117 = v121;\n                            v131 = v156;\n                            v111 = v147;\n                            v87 = v91;\n                            v97 = v100;\n                            v67 = v71;\n                            v73 = v77;\n                            v78 = v148;\n                        }\n                        goto lab_0x4018e0;\n                    }\n                    case 98: {\n                        if ((int32_t)v71 == 0) {\n                            goto lab_0x4019cf;\n                        } else {\n                            // 0x401a2d\n                            if (*(char *)*(int64_t *)v77 != 0) {\n                                char v157; // 0x4017a0\n                                unsigned char v158 = v157;\n                                int64_t v159; // 0x4017a0\n                                int64_t v160 = v159;\n                                int64_t v161; // 0x4017a0\n                                int64_t v162 = v161;\n                                int64_t v163; // 0x4017a0\n                                int64_t v164; // 0x4017a0\n                                struct _IO_FILE * v165; // 0x401a40\n                                int64_t v166; // 0x401a40\n                                int64_t * v167; // 0x401a47\n                                uint64_t v168; // 0x401a47\n                                uint64_t v169; // 0x401a4b\n                                int64_t v170; // 0x401a55\n                                if (v158 != 92) {\n                                    // 0x401a40\n                                    v165 = g23;\n                                    v166 = (int64_t)v165;\n                                    v167 = (int64_t *)(v166 + 40);\n                                    v168 = *v167;\n                                    v169 = *(int64_t *)(v166 + 48);\n                                    if (v168 >= v169) {\n                                        // 0x401da0\n                                        __overflow(v165, (int32_t)v158);\n                                        v163 = v160;\n                                        v164 = v162;\n                                    } else {\n                                        // 0x401a55\n                                        v170 = v168 + 1;\n                                        *v167 = v170;\n                                        *(char *)v168 = v158;\n                                        v163 = v160;\n                                        v164 = v170;\n                                    }\n                                } else {\n                                    // 0x401a76\n                                    v163 = (0x100000000 * function_4025f0(v160, 1, v162, v121, v91, v100) >> 32) + v160;\n                                    v164 = v162;\n                                }\n                                int64_t v171 = v164;\n                                int64_t v172 = v163;\n                                int64_t v173 = v172 + 1; // 0x401a63\n                                char v174 = *(char *)v173; // 0x401a63\n                                v161 = v171;\n                                v159 = v173;\n                                v157 = v174;\n                                while (v174 != 0) {\n                                    // 0x401a70\n                                    v158 = v157;\n                                    v160 = v159;\n                                    v162 = v161;\n                                    if (v158 != 92) {\n                                        // 0x401a40\n                                        v165 = g23;\n                                        v166 = (int64_t)v165;\n                                        v167 = (int64_t *)(v166 + 40);\n                                        v168 = *v167;\n                                        v169 = *(int64_t *)(v166 + 48);\n                                        if (v168 >= v169) {\n                                            // 0x401da0\n                                            __overflow(v165, (int32_t)v158);\n                                            v163 = v160;\n                                            v164 = v162;\n                                        } else {\n                                            // 0x401a55\n                                            v170 = v168 + 1;\n                                            *v167 = v170;\n                                            *(char *)v168 = v158;\n                                            v163 = v160;\n                                            v164 = v170;\n                                        }\n                                    } else {\n                                        // 0x401a76\n                                        v163 = (0x100000000 * function_4025f0(v160, 1, v162, v121, v91, v100) >> 32) + v160;\n                                        v164 = v162;\n                                    }\n                                    // 0x401a63\n                                    v171 = v164;\n                                    v172 = v163;\n                                    v173 = v172 + 1;\n                                    v174 = *(char *)v173;\n                                    v161 = v171;\n                                    v159 = v173;\n                                    v157 = v174;\n                                }\n                            }\n                            goto lab_0x401a17;\n                        }\n                    }\n                    default: {\n                        if (v152 != 113) {\n                            int64_t v175 = v152; // 0x4019a0\n                            *v12 = 0;\n                            __asm_rep_stosq_memset((char *)v10, 0, 32);\n                            *v13 = 1;\n                            *(int16_t *)(v3 + 198) = 257;\n                            *v14 = 1;\n                            *v15 = 1;\n                            *v16 = 1;\n                            *v17 = 1;\n                            *v18 = 1;\n                            *v19 = 1;\n                            *v20 = 1;\n                            *(int32_t *)v21 = 0x1010101;\n                            *v22 = 1;\n                            *v23 = 1;\n                            v106 = v175 + 0xffffffe0;\n                            v122 = 1;\n                            v136 = 0;\n                            v113 = v147;\n                            v108 = v175;\n                            v142 = 1;\n                            v126 = 0;\n                            v92 = 1;\n                            v101 = 0;\n                            v54 = 1;\n                            v60 = 0;\n                            v81 = 0;\n                            while (true) {\n                              lab_0x401b68:\n                                // 0x401b68\n                                v82 = v81;\n                                v61 = v60;\n                                v55 = v54;\n                                v102 = v101;\n                                v93 = v92;\n                                v114 = v113;\n                                v123 = v122;\n                                g42 = v106 % 256;\n                                v56 = v55;\n                                v62 = v61;\n                                v83 = v82;\n                                v137 = v136;\n                                v143 = v142;\n                                v127 = v126;\n                                v94 = v93;\n                                v103 = v102;\n                                v57 = v55;\n                                v63 = v61;\n                                v84 = v82;\n                                v124 = v123;\n                                v138 = v136;\n                                v115 = v114;\n                                v109 = v108;\n                                v144 = v142;\n                                v128 = v126;\n                                v95 = v93;\n                                v104 = v102;\n                                v58 = v55;\n                                v64 = v61;\n                                v85 = v82;\n                                uint64_t v176; // 0x4017a0\n                                switch ((char)v176) {\n                                    case 0: {\n                                        goto lab_0x401b98;\n                                    }\n                                    case 3: {\n                                        // 0x401b78\n                                        *v12 = 1;\n                                        v56 = 0;\n                                        v62 = 1;\n                                        v83 = 1;\n                                        goto lab_0x401b8c;\n                                    }\n                                    case 7: {\n                                        goto lab_0x401d80;\n                                    }\n                                    case 11: {\n                                        goto lab_0x401b98;\n                                    }\n                                    case 13: {\n                                        goto lab_0x401b98;\n                                    }\n                                    case 16: {\n                                        goto lab_0x401b8c;\n                                    }\n                                    case 41: {\n                                        goto lab_0x401d80;\n                                    }\n                                    default: {\n                                        goto lab_0x401baa_2;\n                                    }\n                                }\n                            }\n                          lab_0x401baa_2:\n                            // 0x401baa\n                            v86 = v85;\n                            v59 = v58;\n                            v105 = v104;\n                            v96 = v95;\n                            v129 = v128;\n                            v145 = v144;\n                            v110 = v109;\n                            v116 = v115;\n                            int64_t v177 = v138;\n                            v125 = v124;\n                            v118 = v125;\n                            v132 = v177;\n                            v112 = v116;\n                            v107 = v110;\n                            v140 = v145;\n                            v130 = v129;\n                            v88 = v96;\n                            v68 = v71;\n                            v74 = v77;\n                            v80 = v86;\n                            if ((char)v105 == 0) {\n                                goto lab_0x4024f9;\n                            } else {\n                                // 0x401bb3\n                                v146 = v96;\n                                *v13 = v146;\n                                *v14 = v146;\n                                if ((char)v177 != 0) {\n                                    // 0x401bcb\n                                    *v16 = (char)v145;\n                                }\n                                goto lab_0x401dc0;\n                            }\n                        } else {\n                            if ((int32_t)v71 != 0) {\n                                // 0x4019f8\n                                fputs_unlocked((char *)function_404b00(3, *(int64_t *)v77), g23);\n                                goto lab_0x401a17;\n                            } else {\n                                goto lab_0x4019cf;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (v151 != 92) {\n                    int64_t v178 = (int64_t)g23; // 0x4018b8\n                    int64_t v179 = v66 + 1; // 0x4018bf\n                    int64_t * v180 = (int64_t *)(v178 + 40); // 0x4018c4\n                    uint64_t v181 = *v180; // 0x4018c4\n                    if (v181 >= *(int64_t *)(v178 + 48)) {\n                        // 0x4019e8\n                        __overflow(g23, (int32_t)v151);\n                        v49 = v52;\n                        v117 = v121;\n                        v131 = v135;\n                        v111 = v66;\n                        v87 = v91;\n                        v97 = v100;\n                        v67 = v71;\n                        v73 = v77;\n                        v78 = v179;\n                    } else {\n                        int64_t v182 = v181 + 1; // 0x4018d2\n                        *v180 = v182;\n                        *(char *)v181 = v151;\n                        v49 = v52;\n                        v117 = v121;\n                        v131 = v182;\n                        v111 = v66;\n                        v87 = v91;\n                        v97 = v100;\n                        v67 = v71;\n                        v73 = v77;\n                        v78 = v179;\n                    }\n                    goto lab_0x4018e0;\n                } else {\n                    int64_t v183 = v66 + 1 + (0x100000000 * function_4025f0(v66, 0, v135, v121, v91, v100) >> 32); // 0x40190c\n                    char v184 = *(char *)v183; // 0x40190c\n                    v50 = v52;\n                    v119 = v121;\n                    v133 = v135;\n                    v139 = v184;\n                    v89 = v91;\n                    v98 = v100;\n                    v69 = v71;\n                    v75 = v77;\n                    v79 = v183;\n                    v53 = v52;\n                    v46 = v91;\n                    v47 = v100;\n                    v72 = v71;\n                    if (v184 == 0) {\n                        // break -> 0x401919\n                        break;\n                    }\n                    goto lab_0x4018e9;\n                }\n            }\n        }\n      lab_0x401919:;\n        int32_t v185 = v72;\n        *v6 = v185;\n        int32_t v186 = *v6 - v185; // 0x401927\n        v45 = v186;\n        v44 = 8 * v45 + *v5;\n        *v5 = v44;\n        v48 = v185;\n        if (v186 < 1) {\n            goto lab_0x401943_2;\n        }\n        // 0x40193a\n        v150 = v53;\n        v48 = v185;\n        if (v185 >= 0 != v185 != 0) {\n            goto lab_0x401943_2;\n        }\n    }\n    // 0x401e31\n    v48 = *v6;\n  lab_0x401943_2:\n    // 0x401943\n    if (v48 != 0) {\n        // 0x401948\n        function_404d50(*(int64_t *)*v5);\n        error(0, (int32_t)\"warning: ignoring excess arguments, starting with %s\" ^ (int32_t)\"warning: ignoring excess arguments, starting with %s\", dcgettext(NULL, \"warning: ignoring excess arguments, starting with %s\", 5));\n    }\n  lab_0x40197a:\n    // 0x401981\n    return g29;\n  lab_0x401b98:;\n    int64_t v187 = v114 + 1; // 0x401b98\n    int64_t v188 = (int64_t)*(char *)v187; // 0x401b9c\n    int64_t v189 = v123 + 1; // 0x401b9f\n    int64_t v190 = v188 + 0xffffffe0; // 0x401ba3\n    v106 = v190;\n    v122 = v189;\n    v136 = v137;\n    v113 = v187;\n    v108 = v188;\n    v142 = v143;\n    v126 = v127;\n    v92 = v94;\n    v101 = v103;\n    v54 = v57;\n    v60 = v63;\n    v81 = v84;\n    v124 = v189;\n    v138 = v137;\n    v115 = v187;\n    v109 = v188;\n    v144 = v143;\n    v128 = v127;\n    v95 = v94;\n    v104 = v103;\n    v58 = v57;\n    v64 = v63;\n    v85 = v84;\n    if ((char)v190 >= 42) {\n        // break -> 0x401baa\n        goto lab_0x401baa_2;\n    }\n    goto lab_0x401b68;\n  lab_0x401d80:\n    // 0x401d80\n    v137 = 1;\n    v143 = 0;\n    v127 = 1;\n    v94 = 0;\n    v103 = 1;\n    v57 = v55;\n    v63 = v61;\n    v84 = v82;\n    goto lab_0x401b98;\n  lab_0x401b8c:\n    // 0x401b8c\n    v137 = 1;\n    v143 = 0;\n    v127 = 1;\n    v94 = v93;\n    v103 = v102;\n    v57 = v56;\n    v63 = v62;\n    v84 = v83;\n    goto lab_0x401b98;\n  lab_0x4018e0:;\n    char v191 = *(char *)(v111 + 1); // 0x4018e0\n    v50 = v49;\n    v119 = v117;\n    v133 = v131;\n    v139 = v191;\n    v89 = v87;\n    v98 = v97;\n    v69 = v67;\n    v75 = v73;\n    v79 = v78;\n    v53 = v49;\n    v46 = v87;\n    v47 = v97;\n    v72 = v67;\n    if (v191 == 0) {\n        // break -> 0x401919\n        goto lab_0x401919;\n    }\n    goto lab_0x4018e9;\n  lab_0x4019cf:;\n    char v413 = *(char *)v148; // 0x4019cf\n    v50 = v52;\n    v119 = v121;\n    v133 = v135;\n    v139 = v413;\n    v89 = v91;\n    v98 = v100;\n    v69 = 0;\n    v75 = v77;\n    v79 = v148;\n    if (v413 == 0) {\n        goto lab_0x40197a;\n    }\n    goto lab_0x4018e9;\n  lab_0x4018e9:\n    // 0x4018e9\n    v51 = v50;\n    v120 = v119;\n    v134 = v133;\n    v141 = v139;\n    v90 = v89;\n    v99 = v98;\n    v65 = v79;\n    v70 = v69;\n    v76 = v75;\n    goto lab_0x4018ec;\n  lab_0x4024f9:;\n    int64_t v192 = v80;\n    int64_t v193 = v74;\n    int64_t v194 = v68;\n    int64_t v195 = v88;\n    int64_t v196 = v140;\n    int64_t v197 = v107;\n    int64_t v198 = v112;\n    int64_t v199 = v118;\n    if ((char)v132 != 0) {\n        // 0x401bcb\n        *v16 = (char)v196;\n        if ((char)v105 != 0) {\n            // 0x401bcb\n            goto lab_0x401dc0;\n        } else {\n            goto lab_0x401bdc;\n        }\n    } else {\n        goto lab_0x401bdc;\n    }\n  lab_0x401a17:\n    // 0x401a17\n    v49 = v52;\n    v117 = v121;\n    v131 = v135;\n    v111 = v147;\n    v87 = v91;\n    v97 = v100;\n    v67 = v71 + 0xffffffff & 0xffffffff;\n    v73 = v77 + 8;\n    v78 = v148;\n    goto lab_0x4018e0;\n  lab_0x401bdc:;\n    int64_t v200 = v199; // 0x401bdf\n    int64_t v201 = v198; // 0x401bdf\n    int64_t v202 = v197; // 0x401bdf\n    int64_t v203 = v195; // 0x401bdf\n    int64_t v204 = v194; // 0x401bdf\n    int64_t v205 = v193; // 0x401bdf\n    int64_t v206 = v192; // 0x401bdf\n    char v207; // 0x4017a0\n    int64_t v208; // 0x4017a0\n    int64_t v209; // 0x4017a0\n    int64_t v210; // 0x4017a0\n    int64_t v211; // 0x4017a0\n    int64_t v212; // 0x4017a0\n    int64_t v213; // 0x4017a0\n    int64_t v214; // 0x4017a0\n    if ((char)v130 == 0) {\n        goto lab_0x401bfe;\n    } else {\n        // 0x401be1\n        *v20 = (char)v196;\n        v200 = v199;\n        v201 = v198;\n        v202 = v197;\n        v203 = v195;\n        v204 = v194;\n        v205 = v193;\n        v206 = v192;\n        if ((char)v105 == 0) {\n            goto lab_0x401bfe;\n        } else {\n            // 0x401be1\n            v207 = v195;\n            v214 = v199;\n            v213 = v198;\n            v212 = v197;\n            v211 = v195;\n            v208 = v194;\n            v209 = v193;\n            v210 = v192;\n            goto lab_0x401bee;\n        }\n    }\n  lab_0x401dc0:;\n    int64_t v215 = v86;\n    int64_t v216 = v77;\n    int64_t v217 = v71;\n    int64_t v218 = v96;\n    int64_t v219 = v145;\n    int64_t v220 = v110;\n    int64_t v221 = v116;\n    int64_t v222 = v125;\n    char v223 = v146;\n    *v17 = v223;\n    *v19 = v223;\n    *(char *)(v3 + 229) = v223;\n    v207 = v223;\n    v214 = v222;\n    v213 = v221;\n    v212 = v220;\n    v211 = v218;\n    v208 = v217;\n    v209 = v216;\n    v210 = v215;\n    if ((char)v129 != 0) {\n        // 0x401be1\n        *v20 = (char)v219;\n        v207 = v223;\n        v214 = v222;\n        v213 = v221;\n        v212 = v220;\n        v211 = v218;\n        v208 = v217;\n        v209 = v216;\n        v210 = v215;\n    }\n    goto lab_0x401bee;\n  lab_0x401bfe:;\n    int64_t v224 = v206;\n    int64_t v225 = v205;\n    int64_t v226 = v204;\n    int64_t v227 = v203;\n    int64_t v228 = v202;\n    int64_t v229 = v201;\n    int64_t v230 = v200;\n    if ((char)v64 != 0) {\n        // 0x401c03\n        *v15 = (char)v59;\n    }\n    if ((char)v224 != 0) {\n        // 0x401c10\n        *v18 = (char)v59;\n    }\n    // 0x401c18\n    if (*v12 != 0) {\n        // 0x401c1f\n        *(char *)v21 = (char)v59;\n    }\n    int64_t v231 = v229 + 1; // 0x401c27\n    int64_t * v232; // 0x4017a0\n    int64_t v233; // 0x4017a0\n    int64_t v234; // 0x4017a0\n    int64_t v235; // 0x4017a0\n    int64_t v236; // 0x4017a0\n    int64_t v237; // 0x4017a0\n    int64_t v238; // 0x4017a0\n    int64_t v239; // 0x4017a0\n    int64_t v240; // 0x4017a0\n    int64_t v241; // 0x4017a0\n    int64_t v242; // 0x4017a0\n    int64_t v243; // 0x4017a0\n    int64_t v244; // 0x4017a0\n    int64_t v245; // 0x4017a0\n    int64_t v246; // 0x4017a0\n    int64_t v247; // 0x4017a0\n    int64_t v248; // 0x4017a0\n    int64_t v249; // 0x4017a0\n    int64_t v250; // 0x4017a0\n    int64_t v251; // 0x4017a0\n    int64_t v252; // 0x4017a0\n    int64_t v253; // 0x4017a0\n    int64_t v254; // 0x4017a0\n    int64_t v255; // 0x4017a0\n    int64_t v256; // 0x4017a0\n    if ((char)v228 != 42) {\n        int32_t v257 = 0x1000000 * (int32_t)v228;\n        int64_t v258 = v229; // 0x40208d\n        if (v257 == 0x39000000 || v257 >> 24 < 57) {\n            int64_t v259 = v258;\n            int64_t v260 = v259 + 1; // 0x40209b\n            char v261 = *(char *)v260; // 0x40209b\n            while (v261 == 57 || (int32_t)v261 < 57) {\n                // 0x40209b\n                v259 = v260;\n                v260 = v259 + 1;\n                v261 = *(char *)v260;\n            }\n            int64_t v262 = v260 + v230 - v229; // 0x4020ad\n            int64_t v263 = v259 + 2; // 0x4020b5\n            *v25 = 0;\n            v253 = v262;\n            v251 = v260;\n            v255 = v260;\n            v234 = v226;\n            v240 = v225;\n            v242 = v263;\n            v254 = v262;\n            v249 = v260;\n            v246 = (int64_t)v261 & 0xffffffff;\n            v235 = v226;\n            v237 = v225;\n            v243 = v263;\n            if (v261 == 46) {\n                goto lab_0x401c64;\n            } else {\n                goto lab_0x4020cb;\n            }\n        } else {\n            // 0x402300\n            *v25 = 0;\n            v252 = v230;\n            v250 = v229;\n            v248 = v228;\n            v256 = v231;\n            v233 = v226;\n            v239 = v225;\n            v241 = v231;\n            goto lab_0x401c5a;\n        }\n    } else {\n        int64_t v264 = v230 + 1; // 0x401c35\n        if ((int32_t)v226 != 0) {\n            int64_t * v265 = (int64_t *)v225;\n            *v26 = v231;\n            *v27 = v264;\n            int64_t v266 = function_402bb0(*v265, v231, v264, v230); // 0x40214d\n            v232 = v265;\n            v247 = v228;\n            v245 = v227;\n            v236 = v226;\n            v238 = v225;\n            v244 = v224;\n            if (v266 < 0x80000000) {\n                // 0x402168\n                *v9 = (int32_t)v266;\n                int64_t v267 = *v26; // 0x402178\n                *v25 = 1;\n                v252 = *v27;\n                v250 = v267;\n                v248 = (int64_t)*(char *)v231;\n                v256 = v267;\n                v233 = v226 + 0xffffffff & 0xffffffff;\n                v239 = v225 + 8;\n                v241 = v229 + 2;\n                goto lab_0x401c5a;\n            } else {\n                goto lab_0x402499;\n            }\n        } else {\n            // 0x401c42\n            *v9 = 0;\n            *v25 = 1;\n            v252 = v264;\n            v250 = v231;\n            v248 = (int64_t)*(char *)v231;\n            v256 = v231;\n            v233 = v226;\n            v239 = v225;\n            v241 = v229 + 2;\n            goto lab_0x401c5a;\n        }\n    }\n  lab_0x401bee:\n    // 0x401bee\n    *v22 = v207;\n    *v23 = v207;\n    v200 = v214;\n    v201 = v213;\n    v202 = v212;\n    v203 = v211;\n    v204 = v208;\n    v205 = v209;\n    v206 = v210;\n    goto lab_0x401bfe;\n  lab_0x401c64:;\n    int64_t v268 = v242;\n    int64_t v269 = v240;\n    int64_t v270 = v234;\n    int64_t v271 = v255;\n    int64_t v272 = v251;\n    int64_t v273 = v253;\n    unsigned char v274 = *(char *)(v272 + 1); // 0x401c64\n    int64_t v275 = v274; // 0x401c64\n    *v20 = 0;\n    int64_t * v276; // 0x4017a0\n    int64_t v277; // 0x4017a0\n    int64_t v278; // 0x4017a0\n    int64_t v279; // 0x4017a0\n    int64_t v280; // 0x4017a0\n    int64_t v281; // 0x4017a0\n    int64_t v282; // 0x4017a0\n    int64_t v283; // 0x4017a0\n    int64_t v284; // 0x4017a0\n    int64_t v285; // 0x4017a0\n    int64_t v286; // 0x4017a0\n    int64_t v287; // 0x4017a0\n    int32_t v288; // 0x4017a0\n    int64_t v289; // 0x401c7a\n    if (v274 != 42) {\n        int64_t v290 = v268; // 0x402101\n        if (v274 == 57 || (int32_t)v274 < 57) {\n            int64_t v291 = v290;\n            int64_t v292 = v291 + 1; // 0x402117\n            char v293 = *(char *)v292; // 0x40211b\n            while (v293 == 57 || (int32_t)v293 < 57) {\n                // 0x402113\n                v291 = v292;\n                v292 = v291 + 1;\n                v293 = *(char *)v292;\n            }\n            int64_t v294 = v291 + 2; // 0x402113\n            *v28 = 0;\n            v287 = v273 - v268 + v294;\n            v286 = v292;\n            v285 = (int64_t)v293 & 0xffffffff;\n            v277 = v270;\n            v279 = v269;\n            v281 = v294;\n        } else {\n            // 0x4023c1\n            *v28 = 0;\n            v287 = v273 + 1;\n            v286 = v268;\n            v285 = v275;\n            v277 = v270;\n            v279 = v269;\n            v281 = v268 + 1;\n        }\n        goto lab_0x401cd8;\n    } else {\n        // 0x401c7a\n        v289 = v272 + 2;\n        int64_t v295 = v273 + 2; // 0x401c7e\n        if ((int32_t)v270 == 0) {\n            // 0x402198\n            *v28 = 1;\n            *v8 = 0;\n            v287 = v295;\n            v286 = v289;\n            v285 = (int64_t)*(char *)v289;\n            v277 = v270;\n            v279 = v269;\n            v281 = v272 + 3;\n            goto lab_0x401cd8;\n        } else {\n            int64_t * v296 = (int64_t *)v269;\n            *v29 = v289;\n            *v27 = v295;\n            int64_t v297 = function_402bb0(*v296, v271, v295, v289); // 0x401c98\n            v288 = -1;\n            if (v297 < 0) {\n                goto lab_0x401cc0;\n            } else {\n                // 0x401cb0\n                v276 = v296;\n                v284 = v275;\n                v283 = v227;\n                v278 = v270;\n                v280 = v269;\n                v282 = v268;\n                if (v297 > 0x7fffffff) {\n                    goto lab_0x4024c9;\n                } else {\n                    // 0x401cbc\n                    v288 = v297;\n                    goto lab_0x401cc0;\n                }\n            }\n        }\n    }\n  lab_0x4020cb:\n    // 0x4020cb\n    *v28 = 0;\n    v287 = v254;\n    v286 = v249;\n    v285 = v246;\n    v277 = v235;\n    v279 = v237;\n    v281 = v243;\n    goto lab_0x401cd8;\n  lab_0x401c5a:\n    // 0x401c5a\n    v253 = v252;\n    v251 = v250;\n    v255 = v256;\n    v234 = v233;\n    v240 = v239;\n    v242 = v241;\n    if ((char)v248 != 46) {\n        goto lab_0x4020cb;\n    } else {\n        goto lab_0x401c64;\n    }\n  lab_0x402499:\n    // 0x402499\n    function_404d50(*v232);\n    error(1, (int32_t)\"invalid field width: %s\" ^ (int32_t)\"invalid field width: %s\", dcgettext(NULL, \"invalid field width: %s\", 5));\n    v276 = v232;\n    v284 = v247;\n    v283 = v245;\n    v278 = v236;\n    v280 = v238;\n    v282 = v244;\n    goto lab_0x4024c9;\n  lab_0x401cd8:;\n    int64_t v298 = v281;\n    int64_t v299 = v279;\n    int64_t v300 = v277;\n    int64_t v301 = v285;\n    int64_t v302 = v286;\n    int64_t v303 = v287;\n    uint64_t v304 = v301 + 0xffffffb4; // 0x401cd8\n    int64_t v305 = v302; // 0x401cdd\n    int64_t v306 = v301; // 0x401cdd\n    int64_t v307 = v298; // 0x401cdd\n    if ((char)v304 < 47) {\n        int64_t v308 = v302; // 0x401ced\n        v305 = v302;\n        v306 = v301;\n        v307 = v298;\n        if ((1 << v304 % 64 & 0x410150000001) != 0) {\n            int64_t v309 = v308;\n            int64_t v310 = v309 + 1; // 0x401cf0\n            unsigned char v311 = *(char *)v310; // 0x401cf0\n            while (v311 < 123) {\n                // 0x401e40\n                v308 = v310;\n                if ((1 << (int64_t)((v311 + 52) % 64) & 0x410150000001) == 0) {\n                    // break -> 0x401d03\n                    break;\n                }\n                v309 = v308;\n                v310 = v309 + 1;\n                v311 = *(char *)v310;\n            }\n            // 0x401d03\n            v305 = v310;\n            v306 = v311;\n            v307 = v309 + 2;\n        }\n    }\n    int64_t v312 = v307;\n    int64_t v313 = v306;\n    int3_t v314; // 0x4017a0\n    int64_t v315; // 0x4017a0\n    int64_t v316; // 0x4017a0\n    int64_t v317; // 0x4017a0\n    int64_t v318; // 0x4017a0\n    int64_t v319; // 0x4017a0\n    int64_t v320; // 0x4017a0\n    int64_t v321; // 0x4017a0\n    int64_t v322; // 0x4017a0\n    int64_t v323; // 0x4017a0\n    int64_t v324; // 0x4017a0\n    int64_t v325; // 0x4017a0\n    int64_t v326; // 0x401ece\n    int64_t v327; // 0x401ed3\n    int64_t v328; // 0x401f0e\n    if (*(char *)(v313 % 256 + v10) == 0) {\n        // 0x40246e\n        error(1, (int32_t)\"%.*s: invalid conversion specification\" ^ (int32_t)\"%.*s: invalid conversion specification\", dcgettext(NULL, \"%.*s: invalid conversion specification\", 5));\n        v232 = (int64_t *)v299;\n        v247 = v313;\n        v245 = v66;\n        v236 = v300;\n        v238 = v299;\n        v244 = v312;\n        goto lab_0x402499;\n    } else {\n        int64_t v329 = (int64_t)&g9; // 0x401d25\n        v315 = v300;\n        v316 = v299;\n        if ((int32_t)v300 != 0) {\n            // 0x401d27\n            v329 = *(int64_t *)v299;\n            v315 = v300 + 0xffffffff & 0xffffffff;\n            v316 = v299 + 8;\n        }\n        int64_t v330 = v329;\n        uint64_t v331 = v313 + 0xffffffbf; // 0x401d32\n        int64_t v332 = v303 + 2; // 0x401d35\n        unsigned char v333 = (char)v331; // 0x401d39\n        if (v333 < 56) {\n            int64_t v334 = 1 << v331 % 64;\n            int64_t v335 = 1; // 0x401e75\n            int64_t v336 = (int64_t)\"ld\"; // 0x401e75\n            if ((v334 & 0x90410800800000) == 0) {\n                int64_t v337 = v334 & 0x7100000071; // 0x401e8b\n                v336 = v337 == 0 ? v66 : (int64_t)&g2;\n                v335 = v337 != 0;\n            }\n            // 0x401e9d\n            *v30 = v330;\n            *v32 = v335;\n            *v33 = v336;\n            *v35 = v303;\n            int64_t v338 = function_4056d0(v335 + v332); // 0x401eb4\n            int64_t v339 = *v35; // 0x401eb9\n            *v27 = v338;\n            int64_t v340 = (int64_t)mempcpy((int64_t *)v338, (int64_t *)v66, (int32_t)v339); // 0x401ec9\n            v326 = *v32;\n            v327 = *v30;\n            uint32_t v341 = (int32_t)v326; // 0x401ed8\n            int64_t v342 = v339; // 0x401edc\n            int64_t v343 = v66; // 0x401edc\n            int64_t v344 = v336; // 0x401edc\n            if (v341 != 0) {\n                int64_t v345 = *v33; // 0x401ede\n                int64_t v346 = 0;\n                int64_t v347 = v346 + 1; // 0x401ee7\n                int64_t v348 = v347 & 0xffffffff; // 0x401ee7\n                *(char *)(v346 + v340) = *(char *)(v346 + v345);\n                v342 = v348;\n                v343 = v346;\n                v344 = v345;\n                while ((int32_t)v347 < v341) {\n                    // 0x401ee5\n                    v346 = v348;\n                    v347 = v346 + 1;\n                    v348 = v347 & 0xffffffff;\n                    *(char *)(v346 + v340) = *(char *)(v346 + v345);\n                    v342 = v348;\n                    v343 = v346;\n                    v344 = v345;\n                }\n            }\n            // 0x401ef7\n            v319 = v344;\n            v325 = v343;\n            v324 = v342;\n            int64_t v349 = v326 + v340; // 0x401ef7\n            *(char *)v349 = (char)v313;\n            *(char *)(v349 + 1) = 0;\n            v328 = v331 % 256;\n            g43 = v328;\n            v314 = v52;\n            v321 = v326;\n            v323 = v324;\n            v317 = v327;\n            v320 = v319;\n            switch (v333) {\n                case 0: {\n                    goto lab_0x402010;\n                }\n                case 4: {\n                    goto lab_0x402010;\n                }\n                case 5: {\n                    goto lab_0x402010;\n                }\n                case 6: {\n                    goto lab_0x402010;\n                }\n                case 23: {\n                    goto lab_0x401fb0;\n                }\n                case 32: {\n                    goto lab_0x402010;\n                }\n                case 34: {\n                    int64_t v350 = (int64_t)*(char *)v327; // 0x401f8d\n                    if (*v25 != 0) {\n                        // 0x4022a9\n                        function_4059c0(*v27, (int64_t)*v9, v350, v326, v327, v319);\n                        v314 = v52;\n                        v321 = v326;\n                        v323 = v350;\n                        v317 = v327;\n                        v320 = v319;\n                    } else {\n                        // 0x401f97\n                        function_4059c0(*v27, v350 & 0xffffffff, v350, v326, v327, v319);\n                        v314 = v52;\n                        v321 = v326;\n                        v323 = v350;\n                        v317 = v327;\n                        v320 = v319;\n                    }\n                    goto lab_0x401d70;\n                }\n                case 35: {\n                    goto lab_0x401f50;\n                }\n                case 36: {\n                    goto lab_0x402010;\n                }\n                case 37: {\n                    goto lab_0x402010;\n                }\n                case 38: {\n                    goto lab_0x402010;\n                }\n                case 40: {\n                    goto lab_0x401f50;\n                }\n                case 46: {\n                    goto lab_0x401fb0;\n                }\n                case 50: {\n                    char v351 = *v28;\n                    if (*v25 != 0) {\n                        // 0x4022e1\n                        v322 = v327;\n                        v318 = v327;\n                        if (v351 != 0) {\n                            goto lab_0x402333;\n                        } else {\n                            // 0x4022e8\n                            function_4059c0(*v27, (int64_t)*v9, v327, v326, v327, v319);\n                            v314 = v52;\n                            v321 = v326;\n                            v323 = v327;\n                            v317 = v327;\n                            v320 = v319;\n                            goto lab_0x401d70;\n                        }\n                    } else {\n                        if (v351 != 0) {\n                            // 0x4023a1\n                            function_4059c0(*v27, (int64_t)*v8, v327, v326, v327, v319);\n                            v314 = v52;\n                            v321 = v326;\n                            v323 = v327;\n                            v317 = v327;\n                            v320 = v319;\n                        } else {\n                            // 0x401f36\n                            function_4059c0(*v27, v327, v324, v326, v327, v319);\n                            v314 = v52;\n                            v321 = v326;\n                            v323 = v324;\n                            v317 = v327;\n                            v320 = v319;\n                        }\n                        goto lab_0x401d70;\n                    }\n                }\n                case 52: {\n                    goto lab_0x401fb0;\n                }\n                case 55: {\n                    goto lab_0x401fb0;\n                }\n                default: {\n                    goto lab_0x401d70;\n                }\n            }\n        } else {\n            // 0x401d42\n            *v26 = v303;\n            int64_t v352 = function_4056d0(v332); // 0x401d47\n            int64_t v353 = *v26; // 0x401d4c\n            *v27 = v352;\n            int64_t * v354 = mempcpy((int64_t *)v352, (int64_t *)v66, (int32_t)v353); // 0x401d5c\n            *(char *)v354 = (char)v313;\n            *(char *)((int64_t)v354 + 1) = 0;\n            v314 = v52;\n            v321 = v331 & 0xffffffff;\n            v323 = v353;\n            v317 = v330;\n            v320 = v105;\n            goto lab_0x401d70;\n        }\n    }\n  lab_0x4024c9:;\n    int64_t v355 = function_404d50(*v276); // 0x4024cc\n    char * format2 = dcgettext(NULL, \"invalid precision: %s\", 5); // 0x4024e0\n    error(1, (int32_t)\"invalid precision: %s\" ^ (int32_t)\"invalid precision: %s\", format2);\n    v118 = v355;\n    v132 = (int64_t)format2;\n    v112 = v355;\n    v107 = v284;\n    v140 = (int32_t)\"invalid precision: %s\" ^ (int32_t)\"invalid precision: %s\";\n    v130 = 1;\n    v88 = v283;\n    v68 = v278;\n    v74 = v280;\n    v80 = v282;\n    goto lab_0x4024f9;\n  lab_0x401cc0:\n    // 0x401cc0\n    *v8 = v288;\n    *v28 = 1;\n    v287 = *v27;\n    v286 = *v29;\n    v285 = (int64_t)*(char *)v289;\n    v277 = v270 + 0xffffffff & 0xffffffff;\n    v279 = v269 + 8;\n    v281 = v272 + 3;\n    goto lab_0x401cd8;\n  lab_0x402010:;\n    char v356 = *(char *)v327; // 0x402010\n    int3_t v357; // 0x4017a0\n    int3_t v358; // 0x4017a0\n    int64_t v359; // 0x4017a0\n    int64_t v360; // 0x4017a0\n    int64_t v361; // 0x4017a0\n    int64_t v362; // 0x4017a0\n    int64_t v363; // 0x4017a0\n    int64_t v364; // 0x4017a0\n    int64_t v365; // 0x4017a0\n    int64_t v366; // 0x4017a0\n    int64_t v367; // 0x4017a0\n    if (v356 != 34 == (v356 != 39)) {\n        goto lab_0x402228;\n    } else {\n        unsigned char v368 = *(char *)(v327 + 1); // 0x402020\n        if (v368 == 0) {\n            goto lab_0x402228;\n        } else {\n            // 0x40202d\n            *(int16_t *)v31 = (int16_t)v368;\n            int3_t v369 = v52 - 1; // 0x402037\n            __frontend_reg_store_fpr(v369, (float80_t)v368);\n            int64_t v370 = v368; // 0x40203b\n            int64_t v371 = v326; // 0x40203b\n            int64_t v372 = v324; // 0x40203b\n            int64_t v373 = v325; // 0x40203b\n            int64_t v374 = v327; // 0x40203b\n            if (*(char *)(v327 + 2) != 0 == g28 == 0) {\n                // 0x402402\n                *v38 = __frontend_reg_load_fpr(v369);\n                *v32 = v327;\n                char * format3 = dcgettext(NULL, \"warning: %s: character(s) following character constant have been ignored\", 5); // 0x402417\n                v374 = *v32;\n                error(0, (int32_t)\"warning: %s: character(s) following character constant have been ignored\" ^ (int32_t)\"warning: %s: character(s) following character constant have been ignored\", format3);\n                __frontend_reg_store_fpr(v369, *v38);\n                v370 = &g49;\n                v371 = v374 + 2;\n                v372 = (int64_t)format3;\n                v373 = (int32_t)\"warning: %s: character(s) following character constant have been ignored\" ^ (int32_t)\"warning: %s: character(s) following character constant have been ignored\";\n            }\n            // 0x40204a\n            v357 = v369;\n            v362 = v371;\n            v364 = v372;\n            v366 = v373;\n            v359 = v374;\n            v358 = v369;\n            v361 = v370;\n            v363 = v371;\n            v365 = v372;\n            v367 = v373;\n            v360 = v374;\n            if (*v25 != 0) {\n                goto lab_0x402274;\n            } else {\n                goto lab_0x402055;\n            }\n        }\n    }\n  lab_0x401fb0:;\n    char v375 = *(char *)v327; // 0x401fb0\n    int64_t v376; // 0x4017a0\n    int64_t v377; // 0x4017a0\n    int64_t v378; // 0x4017a0\n    int64_t v379; // 0x4017a0\n    int64_t v380; // 0x4017a0\n    int64_t v381; // 0x4017a0\n    int64_t v382; // 0x4017a0\n    if (v375 != 34 == (v375 != 39)) {\n        goto lab_0x4021b8;\n    } else {\n        unsigned char v383 = *(char *)(v327 + 1); // 0x401fc0\n        if (v383 == 0) {\n            goto lab_0x4021b8;\n        } else {\n            int64_t v384 = v326; // 0x401fd3\n            int64_t v385 = v324; // 0x401fd3\n            int64_t v386 = v327; // 0x401fd3\n            if (*(char *)(v327 + 2) != 0 == g28 == 0) {\n                // 0x40243c\n                *v32 = v327;\n                char * format4 = dcgettext(NULL, \"warning: %s: character(s) following character constant have been ignored\", 5); // 0x40244d\n                v386 = *v32;\n                error(0, (int32_t)\"warning: %s: character(s) following character constant have been ignored\" ^ (int32_t)\"warning: %s: character(s) following character constant have been ignored\", format4);\n                v384 = v386 + 2;\n                v385 = (int64_t)format4;\n            }\n            int64_t v387 = v383; // 0x401fc0\n            v380 = v384;\n            v382 = v385;\n            v378 = v387;\n            v376 = v386;\n            v381 = v384;\n            v379 = v387;\n            v377 = v386;\n            if (*v25 != 0) {\n                goto lab_0x4021fe;\n            } else {\n                goto lab_0x401fed;\n            }\n        }\n    }\n  lab_0x401f50:;\n    int64_t v388 = function_402bb0(v327, v325, v324, v326); // 0x401f53\n    char v389 = *v28;\n    if (*v25 != 0) {\n        // 0x4022be\n        v322 = v388;\n        v318 = v327;\n        if (v389 != 0) {\n            goto lab_0x402333;\n        } else {\n            // 0x4022c9\n            function_4059c0(*v27, (int64_t)*v9, v388, v326, v327, v319);\n            v314 = v52;\n            v321 = v326;\n            v323 = v388;\n            v317 = v327;\n            v320 = v319;\n            goto lab_0x401d70;\n        }\n    } else {\n        if (v389 != 0) {\n            // 0x402384\n            function_4059c0(*v27, (int64_t)*v8, v388, v326, v327, v319);\n            v314 = v52;\n            v321 = v326;\n            v323 = v388;\n            v317 = v327;\n            v320 = v319;\n        } else {\n            // 0x401f6e\n            function_4059c0(*v27, v388, v324, v326, v327, v319);\n            v314 = v52;\n            v321 = v326;\n            v323 = v324;\n            v317 = v327;\n            v320 = v319;\n        }\n        goto lab_0x401d70;\n    }\n  lab_0x401d70:\n    // 0x401d70\n    free((int64_t *)*v27);\n    v49 = v314;\n    v117 = v321;\n    v131 = v323;\n    v111 = v305;\n    v87 = v317;\n    v97 = v320;\n    v67 = v315;\n    v73 = v316;\n    v78 = v312;\n    goto lab_0x4018e0;\n  lab_0x402228:\n    // 0x402228\n    *v32 = v327;\n    int32_t * v390 = __errno_location(); // 0x40222d\n    int64_t v391 = *v32; // 0x402232\n    *v390 = 0;\n    *v35 = v391;\n    function_402ff0(v391, v36, v324);\n    int64_t v392 = *v35; // 0x40224f\n    int64_t v393 = *v37; // 0x402254\n    *v39 = __frontend_reg_load_fpr(v52);\n    int64_t v394 = function_402b00(v392, v393); // 0x402260\n    __frontend_reg_store_fpr(v52, *v39);\n    v357 = v52;\n    v362 = v326;\n    v364 = v324;\n    v366 = v393;\n    v359 = v392;\n    v358 = v52;\n    v361 = v394;\n    v363 = v326;\n    v365 = v324;\n    v367 = v393;\n    v360 = v392;\n    if (*v25 == 0) {\n        goto lab_0x402055;\n    } else {\n        goto lab_0x402274;\n    }\n  lab_0x4021b8:\n    // 0x4021b8\n    *v32 = v327;\n    *__errno_location() = 0;\n    int64_t v395 = __strtoul_internal((char *)*v32, (char **)v36, 0, 0); // 0x4021d9\n    int64_t v396 = *v32; // 0x4021de\n    function_402b00(v396, *v37);\n    v380 = 0;\n    v382 = 0;\n    v378 = v395;\n    v376 = v396;\n    v381 = 0;\n    v379 = v395;\n    v377 = v396;\n    if (*v25 == 0) {\n        goto lab_0x401fed;\n    } else {\n        goto lab_0x4021fe;\n    }\n  lab_0x402055:;\n    int64_t v397 = v359;\n    int64_t v398 = v364;\n    int64_t v399 = v362;\n    int3_t v400 = v357;\n    if (*v28 != 0) {\n        // 0x402310\n        *v40 = v319;\n        *v42 = v319;\n        *v43 = __frontend_reg_load_fpr(v400);\n        function_4059c0(*v27, (int64_t)*v8, v398, v399, v397, v319);\n        v314 = v400 + 1;\n        v321 = v399;\n        v323 = v398;\n        v317 = v397;\n        v320 = v319;\n    } else {\n        // 0x402060\n        *v40 = v328;\n        *v42 = v328;\n        *v43 = __frontend_reg_load_fpr(v400);\n        function_4059c0(*v27, v366, v398, v399, v397, v319);\n        v314 = v400 + 1;\n        v321 = v399;\n        v323 = v398;\n        v317 = v397;\n        v320 = v319;\n    }\n    goto lab_0x401d70;\n  lab_0x402274:;\n    int64_t v401 = v360;\n    int64_t v402 = v363;\n    int3_t v403 = v358;\n    if (*v28 != 0) {\n        // 0x402364\n        *v40 = v361;\n        *v42 = v361;\n        uint32_t v404 = *v8; // 0x402366\n        uint32_t v405 = *v9; // 0x40236c\n        int64_t v406 = *v27; // 0x402370\n        *v43 = __frontend_reg_load_fpr(v403);\n        function_4059c0(v406, (int64_t)v405, (int64_t)v404, v402, v401, v319);\n        v314 = v403 + 1;\n        v321 = *v40;\n        v323 = *v42;\n        v317 = v401;\n        v320 = v319;\n    } else {\n        // 0x40227f\n        *v40 = v367;\n        *v42 = v367;\n        *v43 = __frontend_reg_load_fpr(v403);\n        function_4059c0(*v27, (int64_t)*v9, v365, v402, v401, v319);\n        v314 = v403 + 1;\n        v321 = v402;\n        v323 = v365;\n        v317 = *v40;\n        v320 = v319;\n    }\n    goto lab_0x401d70;\n  lab_0x401fed:;\n    int64_t v407 = v376;\n    int64_t v408 = v378;\n    int64_t v409 = v380;\n    if (*v28 != 0) {\n        // 0x40234c\n        function_4059c0(*v27, (int64_t)*v8, v408, v409, v407, v319);\n        v314 = v52;\n        v321 = v409;\n        v323 = v408;\n        v317 = v407;\n        v320 = v319;\n    } else {\n        // 0x401ff8\n        function_4059c0(*v27, v408, v382, v409, v407, v319);\n        v314 = v52;\n        v321 = v409;\n        v323 = v382;\n        v317 = v407;\n        v320 = v319;\n    }\n    goto lab_0x401d70;\n  lab_0x4021fe:;\n    int64_t v410 = v377;\n    int64_t v411 = v379;\n    v322 = v411;\n    v318 = v410;\n    if (*v28 != 0) {\n        goto lab_0x402333;\n    } else {\n        // 0x402209\n        function_4059c0(*v27, (int64_t)*v9, v411, v381, v410, v319);\n        v314 = v52;\n        v321 = v381;\n        v323 = v411;\n        v317 = v410;\n        v320 = v319;\n        goto lab_0x401d70;\n    }\n  lab_0x402333:;\n    int64_t v412 = (int64_t)*v8; // 0x402333\n    function_4059c0(*v27, (int64_t)*v9, v412, v322, v318, v319);\n    v314 = v52;\n    v321 = v322;\n    v323 = v412;\n    v317 = v318;\n    v320 = v319;\n    goto lab_0x401d70;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402510",
            "funcEndAddr": "40253b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402510\n    int64_t v1; // 0x402510\n    __libc_start_main(0x4017a0, (int32_t)a4, (char **)&v1, (void (*)())0x408e60, (void (*)())0x408ec0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40253b",
            "funcStartAddr": "40253b",
            "funcEndAddr": "40255a",
            "decompiledFuncCode": "int64_t function_40253b(void) {\n    // 0x40253b\n    return 0x60d258;\n}\n"
        },
        {
            "funcName": "function_40255a",
            "funcStartAddr": "40255a",
            "funcEndAddr": "402591",
            "decompiledFuncCode": "int64_t function_40255a(void) {\n    // 0x40255a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402591",
            "funcStartAddr": "402591",
            "funcEndAddr": "4025e8",
            "decompiledFuncCode": "int64_t function_402591(void) {\n    // 0x402591\n    if (g26 != 0) {\n        // 0x4025e7\n        int64_t result; // 0x402591\n        return result;\n    }\n    int64_t v1 = g27; // 0x4025c4\n    int64_t result2; // 0x4025d6\n    if (g27 >= ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x4025d6\n        result2 = function_40253b();\n        g26 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x4025c6\n        v1++;\n    }\n    // 0x4025ba\n    g27 = v1;\n    // 0x4025d6\n    result2 = function_40253b();\n    g26 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4025e8",
            "funcStartAddr": "4025e8",
            "funcEndAddr": "4025ed",
            "decompiledFuncCode": "int64_t function_4025e8(void) {\n    // 0x4025e8\n    return function_40255a();\n}\n"
        },
        {
            "funcName": "function_4025f0",
            "funcStartAddr": "4025f0",
            "funcEndAddr": "402b00",
            "decompiledFuncCode": "int64_t function_4025f0(int64_t a1, uint32_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 + 1; // 0x4025fd\n    char * v2 = (char *)v1; // 0x4025fd\n    unsigned char c = *v2; // 0x4025fd\n    int64_t v3; // 0x4025f0\n    int64_t v4; // 0x4025f0\n    if (c == 120) {\n        int16_t * v5 = *__ctype_b_loc(); // 0x4026ed\n        int32_t v6 = 0;\n        int64_t v7 = a1 + 2;\n        int64_t v8 = 0;\n        unsigned char v9 = *(char *)v7; // 0x4026f0\n        while ((*(char *)((int64_t)v5 + 1 + 2 * (int64_t)v9) & 16) != 0) {\n            int64_t v10 = v9; // 0x4026f0\n            int64_t v11; // 0x4025f0\n            if (v9 < 103) {\n                // 0x402712\n                v11 = v10 + 0xffffffa9;\n            } else {\n                // 0x402730\n                v11 = (v9 < 71 ? 0xffffffc9 : 0xffffffd0) + v10;\n            }\n            int64_t v12 = v11 + 16 * v8 & 0xffffffff; // 0x402715\n            int64_t v13 = v7 + 1; // 0x402718\n            v4 = v12;\n            v3 = v13;\n            if (v6 == 1) {\n                goto lab_0x402649;\n            }\n            v6 = 1;\n            v7 = v13;\n            v8 = v12;\n            v9 = *(char *)v7;\n        }\n        // 0x4029f0\n        v4 = v8;\n        v3 = v7;\n        if (v6 != 0) {\n            goto lab_0x402649;\n        } else {\n            goto lab_0x4029f8;\n        }\n    } else {\n        if ((c & -8) == 48) {\n            int64_t v14 = ((int64_t)(c == 48) & (int64_t)a2) + v1; // 0x402623\n            int64_t v15 = v14 + 3; // 0x402628\n            int64_t v16 = 0; // 0x402628\n            int64_t v17 = v14; // 0x402628\n            char v18 = *(char *)v17; // 0x40262c\n            v4 = v16;\n            v3 = v17;\n            while ((v18 & -8) == 48) {\n                // 0x40263c\n                v17++;\n                v16 = 8 * v16 + 0xffffffd0 + (int64_t)v18 & 0xffffffff;\n                v4 = v16;\n                v3 = v15;\n                if (v17 == v15) {\n                    // break -> 0x402649\n                    break;\n                }\n                v18 = *(char *)v17;\n                v4 = v16;\n                v3 = v17;\n            }\n            goto lab_0x402649;\n        } else {\n            if (c != 0) {\n                // 0x402748\n                if (strchr(\"\\\"\\\\abcefnrtv\", (int32_t)c) != NULL) {\n                    // 0x40275d\n                    g44 = c - 97;\n                    switch (c) {\n                        case 97: {\n                            int64_t v19 = (int64_t)g23; // 0x40298a\n                            int64_t * v20 = (int64_t *)(v19 + 40); // 0x402996\n                            uint64_t v21 = *v20; // 0x402996\n                            if (v21 >= *(int64_t *)(v19 + 48)) {\n                                // 0x402ab3\n                                __overflow(g23, 7);\n                            } else {\n                                // 0x4029a4\n                                *v20 = v21 + 1;\n                                *(char *)v21 = 7;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 98: {\n                            int64_t v22 = (int64_t)g23; // 0x402960\n                            int64_t * v23 = (int64_t *)(v22 + 40); // 0x40296c\n                            uint64_t v24 = *v23; // 0x40296c\n                            if (v24 >= *(int64_t *)(v22 + 48)) {\n                                // 0x402aa4\n                                __overflow(g23, 8);\n                            } else {\n                                // 0x40297a\n                                *v23 = v24 + 1;\n                                *(char *)v24 = 8;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 99: {\n                            // 0x40292f\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        case 101: {\n                            int64_t v25 = (int64_t)g23; // 0x402936\n                            int64_t * v26 = (int64_t *)(v25 + 40); // 0x402942\n                            uint64_t v27 = *v26; // 0x402942\n                            if (v27 >= *(int64_t *)(v25 + 48)) {\n                                // 0x402a77\n                                __overflow(g23, 27);\n                            } else {\n                                // 0x402950\n                                *v26 = v27 + 1;\n                                *(char *)v27 = 27;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 102: {\n                            int64_t v28 = (int64_t)g23; // 0x402905\n                            int64_t * v29 = (int64_t *)(v28 + 40); // 0x402911\n                            uint64_t v30 = *v29; // 0x402911\n                            if (v30 >= *(int64_t *)(v28 + 48)) {\n                                // 0x402a68\n                                __overflow(g23, 12);\n                            } else {\n                                // 0x40291f\n                                *v29 = v30 + 1;\n                                *(char *)v30 = 12;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 110: {\n                            int64_t v31 = (int64_t)g23; // 0x4028db\n                            int64_t * v32 = (int64_t *)(v31 + 40); // 0x4028e7\n                            uint64_t v33 = *v32; // 0x4028e7\n                            if (v33 >= *(int64_t *)(v31 + 48)) {\n                                // 0x402a59\n                                __overflow(g23, 10);\n                            } else {\n                                // 0x4028f5\n                                *v32 = v33 + 1;\n                                *(char *)v33 = 10;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 114: {\n                            int64_t v34 = (int64_t)g23; // 0x4028b1\n                            int64_t * v35 = (int64_t *)(v34 + 40); // 0x4028bd\n                            uint64_t v36 = *v35; // 0x4028bd\n                            if (v36 >= *(int64_t *)(v34 + 48)) {\n                                // 0x402a95\n                                __overflow(g23, 13);\n                            } else {\n                                // 0x4028cb\n                                *v35 = v36 + 1;\n                                *(char *)v36 = 13;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 116: {\n                            int64_t v37 = (int64_t)g23; // 0x402887\n                            int64_t * v38 = (int64_t *)(v37 + 40); // 0x402893\n                            uint64_t v39 = *v38; // 0x402893\n                            if (v39 >= *(int64_t *)(v37 + 48)) {\n                                // 0x402a86\n                                __overflow(g23, 9);\n                            } else {\n                                // 0x4028a1\n                                *v38 = v39 + 1;\n                                *(char *)v39 = 9;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        case 118: {\n                            int64_t v40 = (int64_t)g23; // 0x40285d\n                            int64_t * v41 = (int64_t *)(v40 + 40); // 0x402869\n                            uint64_t v42 = *v41; // 0x402869\n                            if (v42 >= *(int64_t *)(v40 + 48)) {\n                                // 0x402a4a\n                                __overflow(g23, 11);\n                            } else {\n                                // 0x402877\n                                *v41 = v42 + 1;\n                                *(char *)v42 = 11;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                        default: {\n                            int64_t v43 = (int64_t)g23; // 0x4029b4\n                            int64_t * v44 = (int64_t *)(v43 + 40); // 0x4029c0\n                            uint64_t v45 = *v44; // 0x4029c0\n                            if (v45 >= *(int64_t *)(v43 + 48)) {\n                                // 0x402a3c\n                                __overflow(g23, (int32_t)c);\n                            } else {\n                                // 0x4029ca\n                                *v44 = v45 + 1;\n                                *(char *)v45 = c;\n                            }\n                            // break -> 0x40266e\n                            break;\n                        }\n                    }\n                    // 0x40266e\n                    return 1;\n                }\n                if ((c & -33) != 85) {\n                    goto lab_0x402689;\n                } else {\n                    int64_t v46 = a1 + 2; // 0x40278c\n                    int16_t ** v47 = __ctype_b_loc(); // 0x402794\n                    int64_t v48 = 4 * (int64_t)(c != 117); // 0x402799\n                    int64_t v49 = a1 + 3 + (v48 | 3); // 0x4027a9\n                    unsigned char v50 = *(char *)v46; // 0x4027bf\n                    int64_t v51 = (int64_t)*v47 + 1; // 0x4027c9\n                    char v52 = v50; // 0x4027cf\n                    int64_t v53 = v46; // 0x4027cf\n                    int64_t v54 = 0; // 0x4027cf\n                    if ((*(char *)(2 * (int64_t)v50 + v51) & 16) != 0) {\n                        int64_t v55; // 0x4025f0\n                        while (true) {\n                            int64_t v56 = v53;\n                            char v57 = v52;\n                            int64_t v58 = v57;\n                            int64_t v59 = 16 * v54; // 0x4027d8\n                            int64_t v60; // 0x4025f0\n                            int64_t v61; // 0x4025f0\n                            if (v57 < 103) {\n                                int64_t v62 = v56 + 1; // 0x4027b3\n                                int64_t v63 = v59 + v58 + 0xffffffa9 & 0xffffffff; // 0x4027b7\n                                v61 = v63;\n                                v60 = v62;\n                                v55 = v63;\n                                if (v62 == v49) {\n                                    // break -> 0x4027fd\n                                    break;\n                                }\n                            } else {\n                                int64_t v64 = v56 + 1; // 0x4027ef\n                                int64_t v65 = v59 + v58 + (v57 < 71 ? 0xffffffc9 : 0xffffffd0) & 0xffffffff; // 0x4027f5\n                                v61 = v65;\n                                v60 = v64;\n                                v55 = v65;\n                                if (v64 == v49) {\n                                    // break -> 0x4027fd\n                                    break;\n                                }\n                            }\n                            unsigned char v66 = *(char *)v60; // 0x4027bf\n                            v52 = v66;\n                            v53 = v60;\n                            v54 = v61;\n                            if ((*(char *)(2 * (int64_t)v66 + v51) & 16) == 0) {\n                                goto lab_0x4029f8;\n                            }\n                        }\n                        uint32_t v67 = (int32_t)v55; // 0x4027fd\n                        char * format; // 0x402ad3\n                        if (v67 <= 159 && v67 != 36) {\n                            if ((v67 - 64 & -33) != 0) {\n                                // 0x402ac2\n                                format = dcgettext(NULL, \"invalid universal character name \\\\%c%0*x\", 5);\n                                error(1, (int32_t)\"invalid universal character name \\\\%c%0*x\" ^ (int32_t)\"invalid universal character name \\\\%c%0*x\", format);\n                                return &g49;\n                            }\n                        }\n                        if ((v55 & 0xfffff800) != 0xd800) {\n                            // 0x40282d\n                            function_405060((int64_t)g23, v55, 0);\n                            return v48 + 5;\n                        }\n                        // 0x402ac2\n                        format = dcgettext(NULL, \"invalid universal character name \\\\%c%0*x\", 5);\n                        error(1, (int32_t)\"invalid universal character name \\\\%c%0*x\" ^ (int32_t)\"invalid universal character name \\\\%c%0*x\", format);\n                        return &g49;\n                    }\n                    goto lab_0x4029f8;\n                }\n            } else {\n                goto lab_0x402689;\n            }\n        }\n    }\n  lab_0x402649:;\n    int64_t v68 = (int64_t)g23; // 0x402649\n    int64_t * v69 = (int64_t *)(v68 + 40); // 0x402656\n    uint64_t v70 = *v69; // 0x402656\n    if (v70 >= *(int64_t *)(v68 + 48)) {\n        // 0x402850\n        __overflow(g23, (int32_t)v4 % 256);\n    } else {\n        // 0x402664\n        *v69 = v70 + 1;\n        *(char *)v70 = (char)v4;\n    }\n    // 0x40266e\n    return 0xffffffff - a1 + v3 & 0xffffffff;\n  lab_0x4029f8:\n    // 0x4029f8\n    error(1, (int32_t)\"missing hexadecimal number in escape\" ^ (int32_t)\"missing hexadecimal number in escape\", dcgettext(NULL, \"missing hexadecimal number in escape\", 5));\n    // 0x402a20\n    __overflow((struct _IO_FILE *)1, 92);\n    goto lab_0x4026a9;\n  lab_0x402689:;\n    int64_t v75 = (int64_t)g23; // 0x402689\n    int64_t * v76 = (int64_t *)(v75 + 40); // 0x402690\n    uint64_t v77 = *v76; // 0x402690\n    if (v77 >= *(int64_t *)(v75 + 48)) {\n        // 0x402a20\n        __overflow((struct _IO_FILE *)v75, 92);\n        goto lab_0x4026a9;\n    } else {\n        // 0x40269e\n        *v76 = v77 + 1;\n        *(char *)v77 = 92;\n        goto lab_0x4026a9;\n    }\n  lab_0x4026a9:;\n    unsigned char v71 = *v2; // 0x4026a9\n    if (v71 == 0) {\n        // 0x40266e\n        return 0;\n    }\n    int64_t v72 = (int64_t)g23; // 0x4026b4\n    int64_t * v73 = (int64_t *)(v72 + 40); // 0x4026bb\n    uint64_t v74 = *v73; // 0x4026bb\n    if (v74 >= *(int64_t *)(v72 + 48)) {\n        // 0x402a2f\n        __overflow(g23, (int32_t)v71);\n    } else {\n        // 0x4026c9\n        *v73 = v74 + 1;\n        *(char *)v74 = v71;\n    }\n    // 0x40266e\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402ba4",
            "decompiledFuncCode": "int64_t function_402b00(int64_t a1, int64_t a2) {\n    int32_t * err_num = __errno_location(); // 0x402b0a\n    if (*err_num != 0) {\n        // 0x402b60\n        error(0, *err_num, \"%s\", (char *)function_404d50(a1));\n        g29 = 1;\n        return &g49;\n    }\n    int64_t result = (int64_t)err_num; // 0x402b19\n    int64_t v1; // 0x402b00\n    if ((char)v1 != 0) {\n        // 0x402b1b\n        function_404d50(a1);\n        int64_t v2 = a1 == a2 ? (int64_t)\"%s: expected a numeric value\" : (int64_t)\"%s: value not completely converted\";\n        error(0, 0, dcgettext(NULL, (char *)v2, 5));\n        g29 = 1;\n        result = &g49;\n    }\n    // 0x402b57\n    return result;\n}\n"
        },
        {
            "funcName": "function_402bb0",
            "funcStartAddr": "402bb0",
            "funcEndAddr": "402c3c",
            "decompiledFuncCode": "int64_t function_402bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    char v1 = a1;\n    if (v1 != 34 != v1 != 39) {\n        unsigned char v2 = *(char *)(a1 + 1); // 0x402bc4\n        if (v2 != 0) {\n            int64_t result = v2; // 0x402bc4\n            if (*(char *)(a1 + 2) == 0) {\n                // 0x402bf9\n                return result;\n            }\n            // 0x402c0e\n            if (g28 == 0) {\n                // 0x402c17\n                error(0, (int32_t)\"warning: %s: character(s) following character constant have been ignored\" ^ (int32_t)\"warning: %s: character(s) following character constant have been ignored\", dcgettext(NULL, \"warning: %s: character(s) following character constant have been ignored\", 5));\n            }\n            // 0x402bf9\n            return result;\n        }\n    }\n    // 0x402bcd\n    *__errno_location() = 0;\n    int64_t v3; // bp-32, 0x402bb0\n    int32_t result2 = __strtol_internal((char *)a1, (char **)&v3, 0, 0); // 0x402be4\n    function_402b00(a1, v3);\n    // 0x402bf9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402c40",
            "funcStartAddr": "402c40",
            "funcEndAddr": "402fe5",
            "decompiledFuncCode": "int64_t function_402c40(int64_t a1) {\n    int32_t status = a1; // 0x402c56\n    if (status != 0) {\n        // 0x402c5a\n        __fprintf_chk(g25, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402c7f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402c86\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s FORMAT [ARGUMENT]...\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:\\n\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"\\nFORMAT controls the output as in C printf.  Interpreted sequences are:\\n\\n  \\\\\\\"      double quote\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  \\\\\\\\      backslash\\n  \\\\a      alert (BEL)\\n  \\\\b      backspace\\n  \\\\c      produce no further output\\n  \\\\e      escape\\n  \\\\f      form feed\\n  \\\\n      new line\\n  \\\\r      carriage return\\n  \\\\t      horizontal tab\\n  \\\\v      vertical tab\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  \\\\NNN    byte with octal value NNN (1 to 3 digits)\\n  \\\\xHH    byte with hexadecimal value HH (1 to 2 digits)\\n  \\\\uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)\\n  \\\\UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  %%      a single %\\n  %b      ARGUMENT as a string with '\\\\' escapes interpreted,\\n          except that octal escapes are of the form \\\\0 or \\\\0NNN\\n  %q      ARGUMENT is printed in a format that can be reused as shell input,\\n          escaping non-printable characters with the proposed POSIX $'' syntax.\\n\\nand all C format specifications ending with one of diouxXfeEgGcs, with\\nARGUMENTs converted to proper type first.  Variable widths are handled.\\n\", 5), g23);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402dc1\n    bool v2; // 0x402c40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402e48\n    int64_t v6 = *(int64_t *)v5; // 0x402e4c\n    int64_t v7 = 7; // 0x402e52\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"printf\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402e5e\n        char v11 = *(char *)v9; // 0x402e5e\n        char v12 = v11; // 0x402e5e\n        bool v13 = false; // 0x402e5e\n        while (v10 == v11) {\n            // 0x402e54\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402e5e\n            int64_t v15 = v8 + v3; // 0x402e5e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402e6a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x402e6a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402f7c;\n        } else {\n            // 0x402f66\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402fbb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ecc;\n            } else {\n                goto lab_0x402f7c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402ecc;\n        } else {\n            // 0x402eb2\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402fbb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ecc;\n            } else {\n                goto lab_0x402ecc;\n            }\n        }\n    }\n  lab_0x402f7c:\n    // 0x402f7c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f0c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c7f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402ecc:\n    // 0x402ecc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f0c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c7f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402ff0",
            "funcStartAddr": "402ff0",
            "funcEndAddr": "403064",
            "decompiledFuncCode": "int64_t function_402ff0(int64_t a1, int64_t a2, int64_t a3) {\n    struct __locale_struct * v1 = g30;\n    float80_t v2; // 0x403020\n    if (v1 != NULL) {\n        // 0x403014\n        v2 = strtold_l((char *)a1, (char **)a2, v1);\n        return (float64_t)v2;\n    }\n    struct __locale_struct * v3 = newlocale(0x1fbf, \"C\", NULL); // 0x40304c\n    g30 = v3;\n    if (v3 != NULL) {\n        // 0x403014\n        v2 = strtold_l((char *)a1, (char **)a2, v3);\n        return (float64_t)v2;\n    }\n    if (a2 != 0) {\n        // 0x40302d\n        *(int64_t *)a2 = a1;\n    }\n    // 0x403032\n    return (int64_t)v3;\n}\n"
        },
        {
            "funcName": "function_403070",
            "funcStartAddr": "403070",
            "funcEndAddr": "403078",
            "decompiledFuncCode": "int64_t function_403070(int64_t a1) {\n    // 0x403070\n    g32 = a1;\n    int64_t result; // 0x403070\n    return result;\n}\n"
        },
        {
            "funcName": "function_403080",
            "funcStartAddr": "403080",
            "funcEndAddr": "403088",
            "decompiledFuncCode": "int64_t function_403080(int64_t a1) {\n    // 0x403080\n    g31 = a1;\n    int64_t result; // 0x403080\n    return result;\n}\n"
        },
        {
            "funcName": "function_403090",
            "funcStartAddr": "403090",
            "funcEndAddr": "40312e",
            "decompiledFuncCode": "int64_t function_403090(void) {\n    // 0x403090\n    int32_t * err_num; // 0x4030a6\n    if ((int32_t)function_405cb0((int64_t)g23) == 0) {\n        goto lab_0x4030bc;\n    } else {\n        // 0x4030a6\n        err_num = __errno_location();\n        if (g31 == 0) {\n            goto lab_0x4030d3;\n        } else {\n            // 0x4030b7\n            if (*err_num != 32) {\n                goto lab_0x4030d3;\n            } else {\n                goto lab_0x4030bc;\n            }\n        }\n    }\n  lab_0x4030bc:;\n    int64_t result = function_405cb0((int64_t)g25); // 0x4030c3\n    if ((int32_t)result == 0) {\n        // 0x4030cc\n        return result;\n    }\n    // 0x40310e\n    _exit(g16);\n    // UNREACHABLE\n  lab_0x4030d3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4030df\n    if (g32 == 0) {\n        // 0x403119\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4030f3\n        error(0, *err_num, \"%s: %s\", (char *)function_404ba0((int64_t)g32), v1);\n    }\n    // 0x40310e\n    _exit(g16);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403130",
            "funcStartAddr": "403130",
            "funcEndAddr": "4031c9",
            "decompiledFuncCode": "int64_t function_403130(int64_t str) {\n    // 0x403130\n    if (str == 0) {\n        // 0x4031a9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g25);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40313e\n    int64_t result = (int64_t)found_char_pos; // 0x40313e\n    if (found_char_pos == NULL) {\n        // 0x403199\n        g33 = str;\n        g24 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403148\n    if (v1 - str < 7) {\n        // 0x403199\n        g33 = str;\n        g24 = str;\n        return result;\n    }\n    // 0x403158\n    bool v2; // 0x403130\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403130\n    int64_t v5 = result - 6; // 0x403130\n    int64_t v6 = 7; // 0x403166\n    unsigned char v7 = *(char *)v5; // 0x403166\n    char v8 = *(char *)v4; // 0x403166\n    char v9 = v8; // 0x403166\n    bool v10 = false; // 0x403166\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403170\n    int64_t v13 = v1; // 0x403170\n    int64_t v14 = 3; // 0x403170\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403199\n        g33 = str;\n        g24 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403182\n    char v16 = *(char *)v12; // 0x403182\n    char v17 = v16; // 0x403182\n    bool v18 = false; // 0x403182\n    while (v15 == v16) {\n        // 0x403172\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40318c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40318e\n        v20 = result + 4;\n        g22 = v20;\n    }\n    // 0x403199\n    g33 = v20;\n    g24 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031d0",
            "funcStartAddr": "4031d0",
            "funcEndAddr": "4032c2",
            "decompiledFuncCode": "int64_t function_4031d0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4031e4\n    int64_t result = (int64_t)v1; // 0x4031e4\n    if (result != a1) {\n        // 0x4031f1\n        return result;\n    }\n    int64_t v2 = function_405d70(); // 0x403200\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4032b6\n    if (v3 == 85) {\n        // 0x403210\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4032a8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40323e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40324b\n        // 0x4031f1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4032a8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x40328d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40329a\n    // 0x4031f1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4032d0",
            "funcStartAddr": "4032d0",
            "funcEndAddr": "403327",
            "decompiledFuncCode": "int64_t function_4032d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4032d0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403318\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403327",
            "funcStartAddr": "403327",
            "funcEndAddr": "4044f1",
            "decompiledFuncCode": "int64_t function_403327(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403371\n    int64_t v3 = 0; // 0x403371\n    int64_t v4; // 0x403327\n    int64_t v5; // 0x403327\n    int64_t v6; // 0x403327\n    int64_t v7; // 0x403327\n    int64_t v8; // 0x403327\n    int64_t v9; // 0x403327\n    int64_t v10; // 0x403327\n    int64_t v11; // 0x403327\n    int64_t v12; // 0x403327\n    int64_t v13; // 0x403327\n    int64_t v14; // 0x403327\n    int64_t v15; // 0x403327\n    int64_t v16; // 0x403327\n    int64_t v17; // 0x403327\n    int64_t v18; // 0x403327\n    int64_t result; // 0x403327\n    int64_t v19; // 0x403327\n    int32_t wc; // bp+132, 0x403327\n    int64_t ps; // bp+136, 0x403327\n    char v20; // 0x4038e0\n    int64_t v21; // 0x4038e0\n    int64_t v22; // 0x403c88\n    int64_t v23; // 0x403327\n    int64_t v24; // 0x403ca7\n    int32_t v25; // 0x403327\n    while (true) {\n      lab_0x403378_2:\n        // 0x403378\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403327\n        int64_t v27; // 0x4033ac\n        while (true) {\n          lab_0x403378:\n            // 0x403378\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403383\n            if (v15 == -1) {\n                // 0x403385\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403393\n            if (v28) {\n                // break (via goto) -> 0x403af8\n                goto lab_0x403af8;\n            }\n            // 0x40339c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40398b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4034d1;\n                    }\n                    // 0x403dad\n                    v26 = v5 + 1;\n                    goto lab_0x403378;\n                }\n                case 7: {\n                    goto lab_0x4034d1;\n                }\n                case 8: {\n                    goto lab_0x4034d1;\n                }\n                case 9: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4034d1;\n                }\n                case 12: {\n                    goto lab_0x4034d1;\n                }\n                case 13: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40349d;\n                }\n                case 36: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4034d1;\n                }\n                case 38: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4034d1;\n                }\n                case 44: {\n                    goto lab_0x4034d1;\n                }\n                case 45: {\n                    goto lab_0x4034d1;\n                }\n                case 46: {\n                    goto lab_0x4034d1;\n                }\n                case 47: {\n                    goto lab_0x4034d1;\n                }\n                case 48: {\n                    goto lab_0x4034d1;\n                }\n                case 49: {\n                    goto lab_0x4034d1;\n                }\n                case 50: {\n                    goto lab_0x4034d1;\n                }\n                case 51: {\n                    goto lab_0x4034d1;\n                }\n                case 52: {\n                    goto lab_0x4034d1;\n                }\n                case 53: {\n                    goto lab_0x4034d1;\n                }\n                case 54: {\n                    goto lab_0x4034d1;\n                }\n                case 55: {\n                    goto lab_0x4034d1;\n                }\n                case 56: {\n                    goto lab_0x4034d1;\n                }\n                case 57: {\n                    goto lab_0x4034d1;\n                }\n                case 58: {\n                    goto lab_0x4034d1;\n                }\n                case 59: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4034d1;\n                }\n                case 66: {\n                    goto lab_0x4034d1;\n                }\n                case 67: {\n                    goto lab_0x4034d1;\n                }\n                case 68: {\n                    goto lab_0x4034d1;\n                }\n                case 69: {\n                    goto lab_0x4034d1;\n                }\n                case 70: {\n                    goto lab_0x4034d1;\n                }\n                case 71: {\n                    goto lab_0x4034d1;\n                }\n                case 72: {\n                    goto lab_0x4034d1;\n                }\n                case 73: {\n                    goto lab_0x4034d1;\n                }\n                case 74: {\n                    goto lab_0x4034d1;\n                }\n                case 75: {\n                    goto lab_0x4034d1;\n                }\n                case 76: {\n                    goto lab_0x4034d1;\n                }\n                case 77: {\n                    goto lab_0x4034d1;\n                }\n                case 78: {\n                    goto lab_0x4034d1;\n                }\n                case 79: {\n                    goto lab_0x4034d1;\n                }\n                case 80: {\n                    goto lab_0x4034d1;\n                }\n                case 81: {\n                    goto lab_0x4034d1;\n                }\n                case 82: {\n                    goto lab_0x4034d1;\n                }\n                case 83: {\n                    goto lab_0x4034d1;\n                }\n                case 84: {\n                    goto lab_0x4034d1;\n                }\n                case 85: {\n                    goto lab_0x4034d1;\n                }\n                case 86: {\n                    goto lab_0x4034d1;\n                }\n                case 87: {\n                    goto lab_0x4034d1;\n                }\n                case 88: {\n                    goto lab_0x4034d1;\n                }\n                case 89: {\n                    goto lab_0x4034d1;\n                }\n                case 90: {\n                    goto lab_0x4034d1;\n                }\n                case 91: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4034d1;\n                }\n                case 94: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4034d1;\n                }\n                case 96: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4034d1;\n                }\n                case 98: {\n                    goto lab_0x4034d1;\n                }\n                case 99: {\n                    goto lab_0x4034d1;\n                }\n                case 100: {\n                    goto lab_0x4034d1;\n                }\n                case 101: {\n                    goto lab_0x4034d1;\n                }\n                case 102: {\n                    goto lab_0x4034d1;\n                }\n                case 103: {\n                    goto lab_0x4034d1;\n                }\n                case 104: {\n                    goto lab_0x4034d1;\n                }\n                case 105: {\n                    goto lab_0x4034d1;\n                }\n                case 106: {\n                    goto lab_0x4034d1;\n                }\n                case 107: {\n                    goto lab_0x4034d1;\n                }\n                case 108: {\n                    goto lab_0x4034d1;\n                }\n                case 109: {\n                    goto lab_0x4034d1;\n                }\n                case 110: {\n                    goto lab_0x4034d1;\n                }\n                case 111: {\n                    goto lab_0x4034d1;\n                }\n                case 112: {\n                    goto lab_0x4034d1;\n                }\n                case 113: {\n                    goto lab_0x4034d1;\n                }\n                case 114: {\n                    goto lab_0x4034d1;\n                }\n                case 115: {\n                    goto lab_0x4034d1;\n                }\n                case 116: {\n                    goto lab_0x4034d1;\n                }\n                case 117: {\n                    goto lab_0x4034d1;\n                }\n                case 118: {\n                    goto lab_0x4034d1;\n                }\n                case 119: {\n                    goto lab_0x4034d1;\n                }\n                case 120: {\n                    goto lab_0x4034d1;\n                }\n                case 121: {\n                    goto lab_0x4034d1;\n                }\n                case 122: {\n                    goto lab_0x4034d1;\n                }\n                case 123: {\n                    goto lab_0x403475;\n                }\n                case 124: {\n                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403475;\n                }\n                case 126: {\n                    goto lab_0x40349d;\n                }\n                default: {\n                    goto lab_0x403875;\n                }\n            }\n        }\n      lab_0x403875:\n        if (v23 != 1) {\n            // 0x403be0\n            ps = 0;\n            int64_t len = v15; // 0x403bf0\n            if (v15 == -1) {\n                // 0x403bf2\n                len = strlen((char *)str);\n            }\n            // 0x403c1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403c7f:\n                // 0x403c7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403c84\n                int64_t v30 = v29 + str;\n                v24 = function_405b50(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4041fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4041fa_2;\n                    }\n                    case -2: {\n                        // 0x4042dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404317\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40431a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404327\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404320\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4041fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4041fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x403c50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403cfc\n                        char v34 = *(char *)v33; // 0x403d0d\n                        unsigned char v35; // 0x403327\n                        if (v34 < 125) {\n                            // 0x403d18\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403d2f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403d00\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403d0d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403d18\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403d2f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403d00\n                            v33++;\n                        }\n                        goto lab_0x403c50;\n                    }\n                }\n            }\n            goto lab_0x4041fa_2;\n        } else {\n            // 0x4038c4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4034d1;\n        }\n    }\n  lab_0x403af8:\n    // 0x403af8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4043fa\n        if (v8 > result) {\n            // 0x404403\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403727\n        return result;\n    }\n    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4034d1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4034e0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4036ea_2;\n        }\n    }\n    int64_t v39 = result; // 0x4035e1\n    char v40 = v20; // 0x4035e1\n    int64_t v41 = v38; // 0x4035e1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4035e1\n    int64_t v43 = v36; // 0x4035e1\n    goto lab_0x40355d;\n  lab_0x4036ea_2:\n    // 0x403727\n    return function_4032d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4041fa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4034d1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403dce\n        int64_t v50 = v5 + 1; // 0x403eb1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403eb8\n        char v52 = v20; // 0x403eb8\n        int64_t v53 = result; // 0x403eb8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403e81\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403e85\n            int64_t v56 = v54 + 1; // 0x403e8a\n            int64_t v57 = v51 + 1; // 0x403eb1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403e7c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403e81\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403e85\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40355d;\n    }\n  lab_0x403c50:\n    // 0x403c50\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403c6f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403c72\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4041fa\n        goto lab_0x4041fa_2;\n    }\n    goto lab_0x403c7f;\n  lab_0x40349d:\n    // 0x40349d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4036ea_2;\n    }\n    goto lab_0x4034d1;\n  lab_0x403475:;\n    bool v60 = v15 == 1; // 0x403480\n    if (v15 == -1) {\n        // 0x403482\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40348e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4034d1;\n    } else {\n        goto lab_0x40349d;\n    }\n  lab_0x40355d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403562\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403566\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403378_2;\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "40469e",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404502\n    int32_t * v3 = __errno_location(); // 0x40451c\n    int64_t v4 = (int64_t)g18; // 0x404521\n    int32_t v5 = *v3; // 0x40452b\n    int64_t v6 = v4; // 0x404541\n    if (v2 >= (int64_t)*(int32_t *)0x60d250) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404699\n            function_405920(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404550\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404557\n        int64_t v9; // 0x404500\n        if (g18 == &g19) {\n            int64_t v10 = function_405730(0, v8); // 0x40467a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g19); // 0x40467f\n            *(int64_t *)&g18 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405730(v4, v8); // 0x40456b\n            *(int64_t *)&g18 = v12;\n            v9 = v12;\n        }\n        // 0x40457a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g21; // 0x40457a\n        int32_t v14 = v7; // 0x404581\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g21 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4045b1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4045bb\n    int64_t * v17 = (int64_t *)v15; // 0x4045be\n    uint64_t v18 = *v17; // 0x4045be\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4045c1\n    int64_t result = *v19; // 0x4045c1\n    int64_t v20; // 0x404500\n    uint64_t v21 = function_4032d0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4045e4\n    if (v18 > v21) {\n        // 0x40465b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4045f7\n    *v17 = v22;\n    if (result != (int64_t)&g34) {\n        // 0x404607\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4056d0(v22); // 0x404621\n    *v19 = result2;\n    int64_t v23; // 0x404500\n    function_4032d0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40465b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "4046d4",
            "decompiledFuncCode": "int64_t function_4046a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4046a7\n    int64_t result = function_4058d0(a1 == 0 ? (int64_t)&g35 : a1, 56); // 0x4046c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "4046ef",
            "decompiledFuncCode": "int64_t function_4046e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g35 : a1); // 0x4046ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "4046ff",
            "decompiledFuncCode": "int64_t function_4046f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g35 : a1; // 0x4046f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g35;\n}\n"
        },
        {
            "funcName": "function_404700",
            "funcStartAddr": "404700",
            "funcEndAddr": "404733",
            "decompiledFuncCode": "int64_t function_404700(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g35 + 8 : a1 + 8; // 0x404719\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40471e\n    uint32_t v3 = *v2; // 0x40471e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404722\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404753",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g35 + 4 : a1 + 4); // 0x40474c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "40478b",
            "decompiledFuncCode": "int64_t function_404760(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g35 : a1; // 0x404768\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404785\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40477c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g35;\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "404802",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g35 : a5; // 0x4047b2\n    int32_t * v2 = __errno_location(); // 0x4047bb\n    uint32_t v3 = *(int32_t *)v1; // 0x4047db\n    int64_t result = function_4032d0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4047ea\n    return result;\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "4048f1",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g35 : a4; // 0x404832\n    int32_t * v2 = __errno_location(); // 0x404838\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404857\n    int32_t * v4 = (int32_t *)v1; // 0x40485a\n    int64_t v5 = function_4032d0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404875\n    int64_t v6 = v5 + 1; // 0x40487a\n    int64_t result = function_4056d0(v6); // 0x40488f\n    function_4032d0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4048d4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4048dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "40490a",
            "decompiledFuncCode": "int64_t function_404900(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404900\n    return function_404810(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "4049a5",
            "decompiledFuncCode": "int64_t function_404910(void) {\n    uint32_t v1 = *(int32_t *)&g21; // 0x404910\n    int64_t v2 = v1; // 0x404910\n    int64_t v3 = v2; // 0x404924\n    if (v1 >= 2) {\n        int64_t v4 = &g21;\n        int64_t v5 = v4 + 16; // 0x404943\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g18 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404940\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x40495d\n    if (g19 != 0x60d2c0) {\n        // 0x40495f\n        free((int64_t *)g19);\n        g19 = 256;\n        *(int64_t *)&g20 = (int64_t)&g34;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x404981\n    if (g18 != &g19) {\n        // 0x404983\n        free(g18);\n        *(int64_t *)&g18 = (int64_t)&g19;\n        result = &g49;\n    }\n    // 0x404996\n    *(int32_t *)&g21 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049b0",
            "funcStartAddr": "4049b0",
            "funcEndAddr": "4049c1",
            "decompiledFuncCode": "int64_t function_4049b0(void) {\n    // 0x4049b0\n    int64_t v1; // 0x4049b0\n    return function_404500(v1, v1, -1, (int64_t *)&g35);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049da",
            "decompiledFuncCode": "int64_t function_4049d0(void) {\n    // 0x4049d0\n    int64_t v1; // 0x4049d0\n    return function_404500(v1, v1, v1, (int64_t *)&g35);\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "4049f6",
            "decompiledFuncCode": "int64_t function_4049e0(int64_t a1) {\n    // 0x4049e0\n    return function_404500(0, a1, -1, (int64_t *)&g35);\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a12",
            "decompiledFuncCode": "int64_t function_404a00(int64_t a1, int64_t a2) {\n    // 0x404a00\n    return function_404500(0, a1, a2, (int64_t *)&g35);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a88",
            "decompiledFuncCode": "int64_t function_404a20(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404a30\n    return function_404500((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404af4",
            "decompiledFuncCode": "int64_t function_404a90(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404aa0\n    return function_404500((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404b00",
            "funcStartAddr": "404b00",
            "funcEndAddr": "404b0c",
            "decompiledFuncCode": "int64_t function_404b00(int64_t a1, int64_t a2) {\n    // 0x404b00\n    return function_404a20(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b1f",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404b10\n    return function_404a90(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404b20",
            "funcStartAddr": "404b20",
            "funcEndAddr": "404b90",
            "decompiledFuncCode": "int64_t function_404b20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g35); // 0x404b2d\n    int128_t v2 = __asm_movdqa(g36); // 0x404b35\n    int128_t v3 = __asm_movdqa(g37); // 0x404b3d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404b52\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404b68\n    uint32_t v6 = *v5; // 0x404b68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404b6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404500(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404b90",
            "funcStartAddr": "404b90",
            "funcEndAddr": "404b9d",
            "decompiledFuncCode": "int64_t function_404b90(int64_t a1, int64_t a2) {\n    // 0x404b90\n    return function_404b20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404bb1",
            "decompiledFuncCode": "int64_t function_404ba0(int64_t a1) {\n    // 0x404ba0\n    return function_404b20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404bc0",
            "funcStartAddr": "404bc0",
            "funcEndAddr": "404bca",
            "decompiledFuncCode": "int64_t function_404bc0(void) {\n    // 0x404bc0\n    int64_t v1; // 0x404bc0\n    return function_404b20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404c3e",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404bea\n    return function_404500(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404cac",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g35); // 0x404c47\n    int128_t v2 = __asm_movdqa(g36); // 0x404c4f\n    int128_t v3 = __asm_movdqa(g37); // 0x404c57\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404c79\n    if (a2 == 0 || a3 == 0) {\n        // 0x404ca7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404c8a\n    return function_404500(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cb9",
            "decompiledFuncCode": "int64_t function_404cb0(void) {\n    // 0x404cb0\n    int64_t v1; // 0x404cb0\n    return function_404c40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404cd7",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404cc0\n    return function_404c40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cf3",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404ce0\n    return function_404c40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d0a",
            "decompiledFuncCode": "int64_t function_404d00(void) {\n    // 0x404d00\n    int64_t v1; // 0x404d00\n    return function_404500(v1, v1, v1, &g17);\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d22",
            "decompiledFuncCode": "int64_t function_404d10(int64_t a1, int64_t a2) {\n    // 0x404d10\n    return function_404500(0, a1, a2, &g17);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d41",
            "decompiledFuncCode": "int64_t function_404d30(void) {\n    // 0x404d30\n    int64_t v1; // 0x404d30\n    return function_404500(v1, v1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d66",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1) {\n    // 0x404d50\n    return function_404500(0, a1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404d8b",
            "decompiledFuncCode": "int64_t function_404d70(int64_t data, int64_t nmemb, int64_t stream) {\n    // 0x404d70\n    fwrite((int64_t *)data, 1, (int32_t)nmemb, (struct _IO_FILE *)stream);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404ddd",
            "decompiledFuncCode": "int64_t function_404d90(int64_t a1, int64_t a2, int64_t a3) {\n    uint32_t v1 = (int32_t)a1; // 0x404d99\n    struct _IO_FILE * v2 = (struct _IO_FILE *)a3;\n    if (v1 < 0x10000) {\n        // 0x404da1\n        __fprintf_chk(v2, 1, \"\\\\u%04X\", v1);\n        return -1;\n    }\n    // 0x404dc0\n    __fprintf_chk(v2, 1, \"\\\\U%08X\", v1);\n    return -1;\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "404e65",
            "decompiledFuncCode": "int64_t function_404de0(int64_t a1, int64_t a2) {\n    if (a2 == 0) {\n        // 0x404e38\n        error(1, (int32_t)\"cannot convert U+%04X to local character set\" ^ (int32_t)\"cannot convert U+%04X to local character set\", dcgettext(NULL, \"cannot convert U+%04X to local character set\", 5));\n        return -1;\n    }\n    // 0x404df2\n    dcgettext(NULL, (char *)a2, 5);\n    error(1, (int32_t)\"cannot convert U+%04X to local character set: %s\" ^ (int32_t)\"cannot convert U+%04X to local character set: %s\", dcgettext(NULL, \"cannot convert U+%04X to local character set: %s\", 5));\n    return -1;\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "405060",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = g40; // 0x404e95\n    int64_t v1 = g39; // 0x404e95\n    if (g40 == 0) {\n        int64_t tocode = function_405d70(); // 0x404ee0\n        bool v2; // 0x404e70\n        int64_t v3 = v2 ? -1 : 1; // 0x404ef2\n        int64_t v4 = (int64_t)\"UTF-8\"; // 0x404e70\n        int64_t v5 = tocode; // 0x404e70\n        int64_t v6 = 6; // 0x404ef2\n        unsigned char v7 = *(char *)v5; // 0x404ef2\n        char v8 = *(char *)v4; // 0x404ef2\n        char v9 = v8; // 0x404ef2\n        bool v10 = false; // 0x404ef2\n        while (v7 == v8) {\n            v6--;\n            v4 += v3;\n            v5 += v3;\n            v9 = v7;\n            v10 = true;\n            if (v6 == 0) {\n                // break -> \n                break;\n            }\n            v7 = *(char *)v5;\n            v8 = *(char *)v4;\n            v9 = v8;\n            v10 = false;\n        }\n        unsigned char v11 = v9;\n        g39 = !((v7 < v11 | v10)) == v7 < v11;\n        result = tocode;\n        v1 = 1;\n        if ((v7 >= v11 && !v10) != v7 < v11) {\n            int64_t * v12 = iconv_open((char *)tocode, \"UTF-8\"); // 0x405028\n            int64_t v13 = (int64_t)v12; // 0x405028\n            g38 = v13;\n            int64_t v14 = v13; // 0x405038\n            if (v12 == (int64_t *)-1) {\n                // 0x405048\n                v14 = (int64_t)iconv_open(\"ASCII\", \"UTF-8\");\n                g38 = v14;\n            }\n            // 0x40503a\n            result = v14;\n            v1 = g39;\n        }\n        // 0x404f10\n        g40 = 1;\n    }\n    // 0x404e97\n    if ((int32_t)v1 == 0 == g38 == -1) {\n        // 0x404ecd\n        return result;\n    }\n    int64_t result3; // 0x404e70\n    int64_t v15; // 0x404e70\n    int64_t v16; // 0x404e70\n    int64_t v17; // bp-110, 0x404e70\n    if ((int32_t)a1 < 128) {\n        // 0x404eae\n        v17 = 0x100000000000000 * a1 >> 56;\n        result3 = result;\n        v15 = v1;\n        v16 = 1;\n    } else {\n        int64_t result2 = function_405080((char *)&v17, a1 & 0xffffffff, 6); // 0x404f2f\n        result3 = result2;\n        v15 = g39;\n        v16 = 0x100000000 * result2 >> 32;\n        if ((int32_t)result2 < 0) {\n            // 0x404ecd\n            return result2;\n        }\n    }\n    // 0x404ebc\n    if ((int32_t)v15 != 0) {\n        // 0x404ecd\n        return result3;\n    }\n    int64_t inbuf = &v17; // bp-104, 0x404f60\n    int64_t inbytesleft = v16; // bp-96, 0x404f76\n    int64_t v18; // bp-72, 0x404e70\n    int64_t outbuf = &v18; // bp-88, 0x404f8a\n    int64_t outbytesleft = 25; // bp-80, 0x404f8f\n    int32_t result4 = iconv((int64_t *)g38, (char **)&inbuf, (int32_t *)&inbytesleft, (char **)&outbuf, (int32_t *)&outbytesleft); // 0x404f98\n    if (result4 == -1 || inbytesleft != 0) {\n        // 0x404ecd\n        return result4;\n    }\n    int32_t result5 = iconv((int64_t *)g38, NULL, NULL, (char **)&outbuf, (int32_t *)&outbytesleft); // 0x404fc0\n    return result5;\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "40507f",
            "decompiledFuncCode": "int64_t function_405060(int64_t a1, int64_t a2, int32_t a3) {\n    // 0x405060\n    return function_404e70(a2 & 0xffffffff, 0x404d70, a3 == 0 ? 0x404d90 : 0x404de0, a1);\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "40512c",
            "decompiledFuncCode": "int64_t function_405080(char * a1, int64_t a2, int64_t a3) {\n    uint32_t v1 = (int32_t)a2; // 0x405080\n    if (v1 < 128) {\n        // 0x405120\n        return 0xfffffffe;\n    }\n    int64_t v2 = (int64_t)a1;\n    if (v1 < 2048) {\n        // 0x4050e0\n        if ((int32_t)a3 < 2) {\n            // 0x405120\n            return 0xfffffffe;\n        }\n        // 0x4050c8\n        *a1 = (char)(a2 / 64) | -64;\n        *(char *)(v2 + 1) = (char)a2 % 64 | -128;\n        return 2;\n    }\n    int64_t v3; // 0x405080\n    int64_t result; // 0x405080\n    if (v1 < 0x10000) {\n        // 0x405099\n        if ((a2 & 0xfffff800) == 0xd800) {\n            // 0x405120\n            return 0xffffffff;\n        }\n        // 0x4050aa\n        v3 = a2;\n        result = 3;\n        if ((int32_t)a3 < 3) {\n            // 0x405120\n            return 0xfffffffe;\n        }\n    } else {\n        // 0x4050f0\n        if (v1 >= 0x110000) {\n            // 0x405120\n            return 0xffffffff;\n        }\n        // 0x4050f8\n        if ((int32_t)a3 < 4) {\n            // 0x405120\n            return 0xfffffffe;\n        }\n        // 0x4050fd\n        *(char *)(v2 + 3) = (char)a2 % 64 | -128;\n        v3 = a2 / 64 & 0x3feffff | 0x10000;\n        result = 4;\n    }\n    // 0x4050b4\n    *(char *)(v2 + 2) = (char)v3 % 64 | -128;\n    uint64_t v4 = v3 / 64 & 0x3fff7ff | 2048;\n    *a1 = (char)(v4 / 64) | -64;\n    *(char *)(v2 + 1) = (char)v4 % 64 | -128;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "40550d",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4051c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40514c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405166\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4051ab\n    if (a6 < 10) {\n        // 0x4051ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4052b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "405530",
            "decompiledFuncCode": "int64_t function_405510(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405510\n    if (a5 == 0) {\n        // 0x40552b\n        return function_405130(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x405517\n    v1++;\n    int64_t v2 = v1; // 0x405529\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405520\n        v1++;\n        v2 = v1;\n    }\n    // 0x40552b\n    return function_405130(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "405590",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405530\n    int64_t v3 = &v2; // 0x405530\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405563\n    int64_t v6; // 0x40554d\n    int64_t * v7; // 0x40556b\n    int64_t v8; // 0x40556b\n    int64_t v9; // 0x405577\n    if (v5 < 48) {\n        // 0x405540\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405583\n            break;\n        }\n    } else {\n        // 0x40556b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405583\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405561\n    while (v4 != 9) {\n        // 0x405559\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405540\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405583\n                break;\n            }\n        } else {\n            // 0x40556b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405583\n                break;\n            }\n        }\n        // 0x405559\n        v10 = 10;\n    }\n    // 0x405583\n    return function_405130(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "40564c",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x405590\n    int64_t v1; // bp-168, 0x405590\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405590\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405590\n    int64_t v8; // 0x405590\n    int64_t v9; // bp-56, 0x405590\n    int64_t v10; // 0x4055f5\n    int64_t v11; // 0x405619\n    if ((int32_t)v6 < 48) {\n        // 0x4055e0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405630\n            break;\n        }\n    } else {\n        // 0x405612\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405630\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40560a\n    int64_t v13 = 10; // 0x40560a\n    while (v5 != 9) {\n        // 0x40560c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4055e0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405630\n                break;\n            }\n        } else {\n            // 0x405612\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405630\n                break;\n            }\n        }\n        // 0x405602\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405630\n    int64_t v14; // bp-136, 0x405590\n    int64_t result = function_405130(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x40563f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4056c4",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1) {\n    // 0x405650\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4056b3\n    return fputs_unlocked(v1, g23);\n}\n"
        },
        {
            "funcName": "function_4056d0",
            "funcStartAddr": "4056d0",
            "funcEndAddr": "4056ea",
            "decompiledFuncCode": "int64_t function_4056d0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4056d4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4056e3\n        return (int64_t)mem;\n    }\n    // 0x4056e5\n    function_405920(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "405711",
            "decompiledFuncCode": "int64_t function_4056f0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4056f3\n    int64_t v2 = v1; // 0x4056f3\n    if (v2 < 0) {\n        // 0x40570b\n        function_405920(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405709\n        return function_4056d0(v2);\n    }\n    // 0x40570b\n    function_405920(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405722",
            "decompiledFuncCode": "int64_t function_405720(void) {\n    // 0x405720\n    int64_t v1; // 0x405720\n    return function_4056d0(v1);\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "405766",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405758\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405741\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405750\n        return (int64_t)mem;\n    }\n    // 0x405761\n    function_405920(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "405791",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405773\n    int64_t v2 = v1; // 0x405773\n    if (v2 < 0) {\n        // 0x40578b\n        function_405920(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405789\n        return function_405730(a1, v2);\n    }\n    // 0x40578b\n    function_405920(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "405826",
            "decompiledFuncCode": "int64_t function_4057a0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4057fb\n            function_405920(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405730(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4057e3\n    if (a2 == 0) {\n        // 0x405808\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4057e8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4057fb\n        function_405920(a1);\n        // UNREACHABLE\n    }\n    // 0x4057ca\n    *(int64_t *)a2 = v2;\n    return function_405730(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405880",
            "decompiledFuncCode": "int64_t function_405830(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405830\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40587a\n            function_405920(a1);\n            // UNREACHABLE\n        }\n        // 0x405852\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405730(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405865\n        *(int64_t *)a2 = 128;\n        return function_405730(0, 128);\n    }\n    // 0x405878\n    if (a2 < 0) {\n        // 0x40587a\n        function_405920(a1);\n        // UNREACHABLE\n    }\n    // 0x405852\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405730(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "405897",
            "decompiledFuncCode": "int64_t function_405880(int64_t a1, int64_t a2) {\n    // 0x405880\n    return (int64_t)memset((int64_t *)function_4056d0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058ce",
            "decompiledFuncCode": "int64_t function_4058a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4058a7\n    if ((int64_t)v1 < 0) {\n        // 0x4058c9\n        function_405920(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4058c9\n        function_405920(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4058ba\n    if (mem != NULL) {\n        // 0x4058c4\n        return (int64_t)mem;\n    }\n    // 0x4058c9\n    function_405920(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058f8",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4056d0(a2); // 0x4058df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405900",
            "funcStartAddr": "405900",
            "funcEndAddr": "405913",
            "decompiledFuncCode": "int64_t function_405900(int64_t str) {\n    // 0x405900\n    return function_4058d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405920",
            "funcStartAddr": "405920",
            "funcEndAddr": "405951",
            "decompiledFuncCode": "int64_t function_405920(int64_t a1) {\n    // 0x405920\n    error(g16, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "4059bd",
            "decompiledFuncCode": "int64_t function_405960(void) {\n    // 0x405960\n    int64_t v1; // 0x405960\n    int64_t v2 = function_405c90(v1, v1); // 0x405966\n    if ((int32_t)v2 >= 0) {\n        // 0x405971\n        return v2 & 0xffffffff;\n    }\n    // 0x405980\n    if (ferror(g23) == 0) {\n        // 0x405990\n        error(g16, *__errno_location(), dcgettext(NULL, \"cannot perform formatted output\", 5));\n    }\n    // 0x405971\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "405a54",
            "decompiledFuncCode": "int64_t function_4059c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4059c0\n    int64_t v1; // 0x4059c0\n    if ((char)v1 != 0) {\n        // 0x4059e4\n        int128_t v2; // 0x4059c0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x405a1b\n    int64_t v3; // bp-184, 0x4059c0\n    return &v3;\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405ab9",
            "decompiledFuncCode": "int64_t function_405a60(int64_t stream) {\n    // 0x405a60\n    int64_t v1; // 0x405a60\n    int64_t v2 = function_405bd0(stream, v1, v1); // 0x405a69\n    if ((int32_t)v2 >= 0) {\n        // 0x405a74\n        return v2 & 0xffffffff;\n    }\n    // 0x405a80\n    if (ferror((struct _IO_FILE *)stream) == 0) {\n        // 0x405a8c\n        error(g16, *__errno_location(), dcgettext(NULL, \"cannot perform formatted output\", 5));\n    }\n    // 0x405a74\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405ac0",
            "funcStartAddr": "405ac0",
            "funcEndAddr": "405b4f",
            "decompiledFuncCode": "int64_t function_405ac0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ac0\n    int64_t v1; // 0x405ac0\n    if ((char)v1 != 0) {\n        // 0x405adf\n        int128_t v2; // 0x405ac0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x405b16\n    return function_405a60(a1);\n}\n"
        },
        {
            "funcName": "function_405b50",
            "funcStartAddr": "405b50",
            "funcEndAddr": "405bca",
            "decompiledFuncCode": "int64_t function_405b50(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405b5b\n    int64_t v2 = (int64_t)&g9; // 0x405b5b\n    int32_t * pwc; // 0x405b50\n    int64_t v3; // 0x405b50\n    int64_t n; // 0x405b50\n    if (a2 == 0) {\n        goto lab_0x405ba2;\n    } else {\n        // 0x405b5d\n        if (a3 == 0) {\n            // 0x405b88\n            return -2;\n        }\n        // 0x405b69\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405ba2;\n        } else {\n            goto lab_0x405b74;\n        }\n    }\n  lab_0x405ba2:\n    // 0x405ba2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405b50\n    pwc = (int32_t *)&v4;\n    goto lab_0x405b74;\n  lab_0x405b74:;\n    char * wstr = (char *)v3; // 0x405b7a\n    int64_t ps; // 0x405b50\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405b7a\n    int64_t result = v5; // 0x405b7a\n    if (v5 < 0xfffffffe) {\n        // 0x405b88\n        return result;\n    }\n    int64_t result2 = result; // 0x405bb9\n    if ((char)function_405d10(0, v3) == 0) {\n        // 0x405bbb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405b88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405c8d",
            "decompiledFuncCode": "int64_t function_405bd0(int64_t stream, int64_t a2, int64_t a3) {\n    int32_t v1 = 2000; // bp-2048, 0x405bf0\n    int64_t v2; // bp-2040, 0x405bd0\n    int64_t v3; // 0x405bd0\n    int64_t v4 = function_406410(&v2, (int64_t *)&v1, a2, a3, v3, v3, 2000, (int64_t)&g49); // 0x405bfc\n    if (v4 == 0) {\n        // 0x405c7e\n        function_406400(stream);\n        // 0x405c3c\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x405c01\n    int64_t * data = (int64_t *)v4; // 0x405c1c\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x405c50\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x405c5a\n            free(data);\n        }\n        // 0x405c3c\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x405c2b\n        free(data);\n    }\n    // 0x405c33\n    if (nmemb > -1) {\n        // 0x405c3c\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x405c73\n    *__errno_location() = 75;\n    // 0x405c7e\n    function_406400(stream);\n    // 0x405c3c\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405c90",
            "funcStartAddr": "405c90",
            "funcEndAddr": "405ca2",
            "decompiledFuncCode": "int64_t function_405c90(int64_t a1, int64_t a2) {\n    // 0x405c90\n    return function_405bd0((int64_t)g23, a1, a2);\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405d0d",
            "decompiledFuncCode": "int64_t function_405cb0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405cb7\n    int64_t v2; // 0x405cb0\n    int64_t result = function_4062e0(a1, v2); // 0x405cc8\n    if ((v2 & 32) != 0) {\n        // 0x405cf0\n        if ((int32_t)result == 0) {\n            // 0x405cf4\n            *__errno_location() = 0;\n        }\n        // 0x405cea\n        return 0xffffffff;\n    }\n    // 0x405cd1\n    if ((int32_t)result == 0) {\n        // 0x405cea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405cd8\n    if (v1 == 0) {\n        // 0x405cda\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405cea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405d6e",
            "decompiledFuncCode": "int64_t function_405d10(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405d16\n    if (locale == NULL) {\n        // 0x405d43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405d16\n    bool v2; // 0x405d10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"C\"; // 0x405d10\n    int64_t v5 = v1; // 0x405d10\n    int64_t v6 = 2; // 0x405d35\n    unsigned char v7 = *(char *)v5; // 0x405d35\n    char v8 = *(char *)v4; // 0x405d35\n    char v9 = v8; // 0x405d35\n    bool v10 = false; // 0x405d35\n    while (v7 == v8) {\n        // 0x405d28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405d41\n    int64_t v13 = v1; // 0x405d41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405d43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405d41\n    unsigned char v15 = *(char *)v13; // 0x405d5d\n    char v16 = *(char *)v12; // 0x405d5d\n    char v17 = v16; // 0x405d5d\n    bool v18 = false; // 0x405d5d\n    while (v15 == v16) {\n        // 0x405d50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "4062d2",
            "decompiledFuncCode": "int64_t function_405d70(void) {\n    char * v1 = nl_langinfo(14); // 0x405d86\n    char * v2 = g41; // 0x405d8b\n    char * v3; // 0x405d70\n    int64_t v4; // 0x405d70\n    int64_t v5; // 0x405d70\n    int64_t v6; // 0x405d70\n    int64_t v7; // 0x405d70\n    int32_t size; // 0x405d70\n    int32_t size2; // 0x405d70\n    int32_t len; // 0x405e42\n    int64_t v8; // 0x405e42\n    char * env_val; // 0x405e2d\n    if (v2 == NULL) {\n        // 0x405e28\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405e95;\n        } else {\n            // 0x405e3a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405e95;\n            } else {\n                // 0x405e3f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405e2d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4062c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405e95;\n                    } else {\n                        // 0x406239\n                        size2 = len + 14;\n                        goto lab_0x405e5b;\n                    }\n                } else {\n                    goto lab_0x405e5b;\n                }\n            }\n        }\n    } else {\n        // 0x405d70\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405daa;\n    }\n  lab_0x4060dc:;\n    // 0x4060dc\n    struct _IO_FILE * stream; // 0x405f1b\n    int32_t v10 = __uflow(stream); // 0x4060df\n    int64_t v11; // 0x405d70\n    int64_t v12 = v11; // 0x4060e9\n    int64_t v13; // 0x405d70\n    int64_t v14 = v13; // 0x4060e9\n    int32_t v15 = v10; // 0x4060e9\n    int64_t v16; // 0x405d70\n    int64_t v17 = v16; // 0x4060e9\n    int64_t v18 = v11; // 0x4060e9\n    int64_t v19 = v13; // 0x4060e9\n    int64_t v20 = v16; // 0x4060e9\n    if (v10 == -1) {\n        // break -> 0x4060ef\n        goto lab_0x4060ef;\n    }\n    goto lab_0x405f69;\n  lab_0x405f5e:;\n    // 0x405f5e\n    int64_t v90; // 0x405d70\n    int64_t * v32; // 0x405f50\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405d70\n    v12 = v89;\n    int64_t v91; // 0x405d70\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405d70\n    v17 = v92;\n    goto lab_0x405f69;\n  lab_0x405f69:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405d70\n    int32_t v25; // bp-120, 0x405d70\n    int32_t v26; // bp-184, 0x405d70\n    int64_t v27; // 0x405f1b\n    int64_t v28; // 0x405f38\n    int64_t v29; // 0x405f3d\n    int64_t * v30; // 0x405f54\n    switch (c) {\n        case 32: {\n            goto lab_0x405f50;\n        }\n        case 10: {\n            goto lab_0x405f50;\n        }\n        case 9: {\n            goto lab_0x405f50;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406141\n            int32_t v33; // 0x405d70\n            char v34; // 0x405d70\n            int32_t v35; // 0x40614e\n            if (v31 < *v30) {\n                // 0x406120\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40614b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406141\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406120\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40614b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406130\n                v36 = v33;\n            }\n            // 0x40621f\n            if (v36 == -1) {\n                // break -> 0x4060ef\n                break;\n            }\n            goto lab_0x405f50;\n        }\n        default: {\n            // 0x405f7f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4060ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405fa8\n            int64_t v39 = v37 + 4; // 0x405faa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405fb6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405fb8\n            while (v41 == 0) {\n                // 0x405fa8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405fd6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405fe2\n            int64_t v45 = v43 + 4; // 0x405fe4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405ff0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405ff2\n            while (v47 == 0) {\n                // 0x405fe2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405fdf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406008\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406018\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40601c\n            int64_t v52 = v51 + v48; // 0x406025\n            int64_t * mem; // 0x405d70\n            int64_t v53; // 0x405d70\n            int64_t v54; // 0x405d70\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40615b\n                int64_t v56 = v55 + 3; // 0x406167\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406041\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406050\n            if (mem == NULL) {\n                // 0x40627c\n                free((int64_t *)v21);\n                function_4062e0(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x405ef4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406068\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406072\n            uint32_t v62 = (int32_t)v59; // 0x406075\n            int64_t v63; // 0x405d70\n            if (v62 >= 8) {\n                // 0x406184\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40619e\n                int64_t v66 = v61 - v65; // 0x4061a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4061ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4061be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4061be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4061bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40624f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406087\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40608b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40609b\n            int64_t v74 = v60 - 1; // 0x40609f\n            uint32_t v75 = (int32_t)v73; // 0x4060a4\n            int64_t v76; // 0x405d70\n            if (v75 >= 8) {\n                // 0x4061d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4061dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4061ec\n                int64_t v80 = v74 - v79; // 0x4061f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4061fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40620b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406209\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406266\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40626e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4060b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4060ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4062b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4060ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405f5e;\n            } else {\n                goto lab_0x4060dc;\n            }\n        }\n    }\n  lab_0x405f50:;\n    int64_t v93 = v23; // 0x405d70\n    int64_t v94 = v22; // 0x405d70\n    int64_t v95 = v21; // 0x405d70\n    goto lab_0x405f50_2;\n  lab_0x405e95:;\n    int64_t * mem3 = malloc(size); // 0x405e95\n    int64_t v97 = (int64_t)&g9; // 0x405ea0\n    int64_t v98; // 0x405d70\n    int64_t path; // 0x405d70\n    if (mem3 == NULL) {\n        goto lab_0x405e72;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405e95\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405eb6;\n    }\n  lab_0x405daa:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x405d9d\n    char v100 = *v3; // 0x405daa\n    int64_t v101; // 0x405d70\n    if (v100 == 0) {\n        // 0x405e04\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405d70\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405d70\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405df0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405df7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405dc0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405dcd\n        char v107 = *(char *)v106; // 0x405dd2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405e04\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405ddb\n    v104 = v103 + 1;\n  lab_0x405df7:\n    // 0x405e04\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405e72:;\n    char * v108 = (char *)v97;\n    g41 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405daa;\n  lab_0x405eb6:;\n    int64_t v109 = v98 + path; // 0x405eb6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405ee2\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x405f11\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406242\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x405f35\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405f50_2:;\n                uint64_t v96 = *v32; // 0x405f50\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4060dc;\n                } else {\n                    goto lab_0x405f5e;\n                }\n            }\n          lab_0x4060ef:\n            // 0x4060ef\n            function_4062e0(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x40610e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405ef4;\n  lab_0x405e5b:;\n    int64_t * mem4 = malloc(size2); // 0x405e5b\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x405f01\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405eb6;\n    } else {\n        goto lab_0x405e72;\n    }\n  lab_0x405ef4:\n    // 0x405ef4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405e72;\n}\n"
        },
        {
            "funcName": "function_4062e0",
            "funcStartAddr": "4062e0",
            "funcEndAddr": "40635b",
            "decompiledFuncCode": "int64_t function_4062e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4062e7\n    if (fileno(stream) < 0) {\n        // 0x406347\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4062fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40632b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406347\n            return fclose(stream);\n        }\n    }\n    // 0x4062fc\n    if ((int32_t)function_406360(a1, v1) == 0) {\n        // 0x406347\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406308\n    int32_t v3 = *v2; // 0x406310\n    int64_t result = fclose(stream); // 0x40631e\n    if (v3 != 0) {\n        // 0x406350\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406320\n    return result;\n}\n"
        },
        {
            "funcName": "function_406360",
            "funcStartAddr": "406360",
            "funcEndAddr": "4063a0",
            "decompiledFuncCode": "int64_t function_406360(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40637a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40637a\n        return fflush(stream);\n    }\n    // 0x406388\n    function_4063a0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4063a0",
            "funcStartAddr": "4063a0",
            "funcEndAddr": "4063f7",
            "decompiledFuncCode": "int64_t function_4063a0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4063a0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4063aa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4063db\n    int64_t result = -1; // 0x4063e4\n    if (v1 != -1) {\n        // 0x4063e6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4063f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "406404",
            "decompiledFuncCode": "int64_t function_406400(int64_t a1) {\n    // 0x406400\n    int64_t result; // 0x406400\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406410",
            "funcStartAddr": "406410",
            "funcEndAddr": "407f29",
            "decompiledFuncCode": "int64_t function_406410(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x406410\n    int64_t v1; // bp-1416, 0x406410\n    int64_t v2; // bp-1656, 0x406410\n    if ((int32_t)function_408150(a3, &v1, &v2) < 0) {\n        // 0x406a80\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40641b\n    int64_t v4; // bp-1384, 0x406410\n    int64_t v5; // bp-1640, 0x406410\n    int64_t v6; // 0x406410\n    if ((int32_t)function_407f30(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x407367\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x407383\n            free((int64_t *)v6);\n        }\n        // 0x407388\n        *__errno_location() = 22;\n        // 0x406a80\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40647b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x406483\n    uint64_t v9 = v8 + v6; // 0x406487\n    int64_t v10; // 0x406410\n    char * v11; // 0x406410\n    int64_t v12; // 0x406410\n    if (v9 < v8) {\n        // 0x406b30\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406a39;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x406b30\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x406a39;\n        } else {\n            uint64_t size = v9 + 6; // 0x406497\n            if (size < 4000) {\n                // 0x4065e0\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x406410\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x4064d4;\n            } else {\n                if (size == -1) {\n                    // 0x406b30\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x406a39;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x4064b8\n                    if (mem == NULL) {\n                        // 0x406b30\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x406a39;\n                    } else {\n                        // 0x4064cd\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x4064d4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406a00_2:;\n    // 0x406a00\n    int64_t v14; // 0x406410\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x406a08\n    int64_t v17 = v16; // 0x406a16\n    int64_t v18 = v16; // 0x406a16\n    int64_t v19 = v15; // 0x406a16\n    int64_t v20; // 0x406410\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x406c28;\n    } else {\n        goto lab_0x406a21;\n    }\n  lab_0x406a39:\n    // 0x406a39\n    if (v6 != (int64_t)&v4) {\n        // 0x406a50\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x406a6c\n        free((int64_t *)v6);\n    }\n    // 0x406a71\n    *(int32_t *)v10 = 12;\n    // 0x406a80\n    return 0;\n  lab_0x4064d4:\n    // 0x4064d4\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x40650d\n    int64_t v23 = *v22; // 0x40650d\n    int64_t v24 = 0; // 0x406513\n    int64_t v25 = v20; // 0x406513\n    int64_t v26 = v21; // 0x406513\n    int64_t v27 = 0; // 0x406513\n    int64_t v28; // 0x406410\n    int64_t v29; // 0x406410\n    int64_t v30; // 0x406410\n    int64_t v31; // 0x406410\n    int64_t v32; // 0x406410\n    int64_t v33; // 0x406410\n    int64_t v34; // 0x406410\n    if (v23 == a3) {\n        goto lab_0x406b23;\n    } else {\n        int64_t v35 = v23 - a3; // 0x406519\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40652b;\n    }\n  lab_0x406b23:;\n    int64_t v36 = v24; // 0x406b26\n    float80_t v37; // 0x406410\n    float80_t v38 = v37; // 0x406b26\n    float80_t v39; // 0x406410\n    float80_t v40 = v39; // 0x406b26\n    int64_t v41 = v25; // 0x406b26\n    int64_t v42 = v26; // 0x406b26\n    int64_t v43 = v27; // 0x406b26\n    int64_t v44; // 0x406410\n    int64_t v45 = v44; // 0x406b26\n    goto lab_0x406688;\n  lab_0x406688:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x406410\n    int64_t v51; // 0x406410\n    int64_t v52; // 0x406410\n    int64_t v53; // 0x406410\n    int64_t v54; // 0x406410\n    int64_t v55; // 0x406410\n    int64_t v56; // 0x406410\n    int64_t v57; // 0x406410\n    int64_t dest_mem2; // 0x406410\n    int64_t dest_mem3; // 0x406410\n    int64_t v58; // 0x406410\n    float80_t v59; // 0x406410\n    float80_t v60; // 0x406410\n    float80_t v61; // 0x406410\n    float80_t v62; // 0x406410\n    float80_t v63; // 0x406410\n    uint64_t v64; // 0x4077b6\n    char * v65; // 0x40669c\n    char v66; // 0x40669c\n    int64_t v67; // 0x4066c4\n    uint32_t v68; // 0x4066c8\n    int64_t v69; // 0x406aa5\n    char v70; // 0x406410\n    if (v1 == v49) {\n        // 0x4077b0\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x407f1a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x407812;\n            } else {\n                goto lab_0x406a00_2;\n            }\n        } else {\n            // 0x4077c0\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x407812;\n            } else {\n                if (v47 != 0) {\n                    // 0x407ddd\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406a00_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x407de3\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x4077de;\n                        } else {\n                            goto lab_0x407def;\n                        }\n                    }\n                } else {\n                    // 0x4077ce\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x4077de;\n                    } else {\n                        goto lab_0x407def;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40669c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x4066a1\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x407270\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x406a00_2;\n                } else {\n                    goto lab_0x406b02;\n                }\n            } else {\n                // 0x406ab2\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x406b02;\n                } else {\n                    if (v47 != 0) {\n                        // 0x4073a0\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x406a00_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x4073a6\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x406ad0;\n                            } else {\n                                goto lab_0x4073b2;\n                            }\n                        }\n                    } else {\n                        // 0x406ac0\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x406ad0;\n                        } else {\n                            goto lab_0x4073b2;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x4066b9\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g45 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x407030\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b07;\n                }\n                case 19: {\n                    // 0x407020\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b07;\n                }\n                case 20: {\n                    // 0x407008\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x406b07;\n                }\n                case 21: {\n                    goto lab_0x406bf0;\n                }\n                case 22: {\n                    goto lab_0x406bf0;\n                }\n                default: {\n                    // 0x4066da\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x406b80\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x406b9d;\n                        } else {\n                            // 0x406b87\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x406710;\n                            } else {\n                                goto lab_0x406b9d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x406710;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40652b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x406410\n    float80_t v77 = v76;\n    float80_t v78; // 0x406410\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x406410\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40652e\n    int64_t v89 = v85; // 0x40652e\n    int64_t v90 = v84; // 0x40652e\n    float80_t v91 = v79; // 0x40652e\n    float80_t v92 = v77; // 0x40652e\n    int64_t v93 = v75; // 0x40652e\n    int64_t v94 = v80; // 0x40652e\n    int64_t v95 = v81; // 0x40652e\n    int64_t v96 = v82; // 0x40652e\n    int64_t v97 = v87; // 0x40652e\n    int64_t v98; // 0x406410\n    int64_t v99; // 0x406410\n    int64_t v100; // 0x406410\n    int64_t v101; // 0x406410\n    int64_t v102; // 0x406410\n    if (v82 >= v87) {\n        goto lab_0x406679;\n    } else {\n        if (v82 != 0) {\n            // 0x406610\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x406a00_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x406616\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40662b;\n                } else {\n                    goto lab_0x40661e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x406554\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40663e;\n                } else {\n                    goto lab_0x406560;\n                }\n            } else {\n                goto lab_0x40661e;\n            }\n        }\n    }\n  lab_0x406679:\n    // 0x406679\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x406688;\n  lab_0x407812:\n    // 0x407812\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40781a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40782b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x407837\n    if (v12 != 0) {\n        // 0x407843\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x407862\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40787e\n        free((int64_t *)v6);\n    }\n    // 0x407883\n    *a2 = v46;\n    // 0x406a80\n    return result;\n  lab_0x406bf0:\n    // 0x406bf0\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x406b07;\n  lab_0x40661e:\n    // 0x40661e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        goto lab_0x40662b;\n    }\n  lab_0x406c28:\n    // 0x406c28\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x406a21;\n  lab_0x406a21:\n    if (v12 == 0) {\n        // 0x406b30\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x406a39;\n    } else {\n        // 0x406a31\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x406a39;\n    }\n  lab_0x406b02:\n    // 0x406b02\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x406b07;\n  lab_0x406710:;\n    int64_t v273 = (int64_t)v11; // 0x406710\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x406717\n    int64_t v275 = v273 + 1; // 0x40671b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x406724\n    if (v274 % 2 != 0) {\n        // 0x406726\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x406717\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x406737\n    if ((v277 & 2) != 0) {\n        // 0x406739\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x406743\n    if ((v277 & 4) != 0) {\n        // 0x406745\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40674f\n    if ((v277 & 8) != 0) {\n        // 0x406751\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40675b\n    if ((v277 & 16) != 0) {\n        // 0x40675d\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x406767\n    if ((v277 & 64) != 0) {\n        // 0x406769\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x406773\n    if ((v277 & 32) != 0) {\n        // 0x406775\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40677d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x406781\n    int64_t v293 = v290; // 0x406788\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x406797\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x4067ba\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x4067be\n    int64_t v298 = v295; // 0x4067c5\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x4067d4\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x4066ca\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x406800\n    int64_t v272; // 0x406410\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x406809\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x406c08;\n        } else {\n            if (v301 == 12) {\n                // 0x4073c8\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x406830;\n            } else {\n                // 0x406820\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x406c00\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x406c08;\n                } else {\n                    goto lab_0x406830;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406830;\n    }\n  lab_0x406b07:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x406b07\n    int64_t v111 = v55 + 88; // 0x406b0b\n    int64_t v112 = *(int64_t *)v111; // 0x406b0f\n    int64_t v113 = v49 + 1; // 0x406b12\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x406519\n        int64_t v115 = v114 + v105; // 0x40651f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x406b48\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x406a00_2;\n            } else {\n                goto lab_0x406679;\n            }\n        } else {\n            goto lab_0x40652b;\n        }\n    } else {\n        goto lab_0x406b23;\n    }\n  lab_0x40662b:;\n    int64_t v116 = v80 == v20; // 0x406632\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x406560;\n    } else {\n        goto lab_0x40663e;\n    }\n  lab_0x40663e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x406410\n    if (v102 != 0) {\n        goto lab_0x406560;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40665a\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x406c15;\n        } else {\n            // 0x406668\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x406679;\n        }\n    }\n  lab_0x406560:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x406577\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x406a00_2;\n    } else {\n        // 0x40659d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x4065c5\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x406679;\n    }\n  lab_0x4077de:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x407da4\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x406a00_2;\n        } else {\n            // 0x407db5\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407dca\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x407812;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x407801\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x406c15;\n        } else {\n            // 0x40780f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x407812;\n        }\n    }\n  lab_0x407def:\n    // 0x407def\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        goto lab_0x4077de;\n    }\n  lab_0x406b9d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x406b9d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x406ba1\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x406ba5\n    int64_t v123 = 0; // 0x406bac\n    int64_t v124 = v122; // 0x406bac\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x406bb2\n        int64_t v126 = v120; // 0x406bba\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x407b41\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x407b59\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x407b6b\n            int64_t v131 = v128; // 0x407b74\n            int64_t v132 = v130; // 0x407b74\n            int64_t v133; // 0x406410\n            int64_t v134; // 0x407b86\n            if (v130 < v129) {\n                // 0x407b76\n                if (v121 == v128) {\n                    // break -> 0x406990\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40697b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x406990\n                        goto lab_0x406990;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x407b38\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x407b41\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x407b76\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x406990\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40697b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x406990\n                            goto lab_0x406990;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x407b38\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x406bc4\n            if (*(int32_t *)v135 != 5) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x406bd0\n            int64_t v137 = v136; // 0x406bd0\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x406bdd\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x406990:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x406990\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x406994\n    int64_t v142; // 0x406410\n    int64_t v143; // 0x406410\n    int64_t v144; // 0x406410\n    if (v140 == v141) {\n        goto lab_0x407040;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x4069a1\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x407ba4\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x407bad\n            if (v141 == v146) {\n                goto lab_0x40705e;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x407bd3\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x407bda\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x407bf3\n                int64_t v152 = v151; // 0x407bfc\n                int64_t v153 = v149; // 0x407bfc\n                int64_t v154; // 0x406410\n                int64_t v155; // 0x407c07\n                if (v151 < v150) {\n                    // 0x407bfe\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x406a00_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x407c1a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x406a00_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x407bc0\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x407bc9\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x407bfe\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x406a00_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x407c1a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x406a00_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x407bc0\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x4069cc;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x4069b3\n            if (*(int32_t *)v156 != 5) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x4069c0\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x407040;\n            } else {\n                goto lab_0x4069cc;\n            }\n        }\n    }\n  lab_0x406830:\n    // 0x406830\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40683d\n    int64_t v160 = 0; // 0x406845\n    if (v159 != -1) {\n        // 0x40684b\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40713c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40686e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40687c\n        if (*(int32_t *)v162 != 5) {\n            // 0x40713c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40688f\n        int64_t v164; // bp-8, 0x406410\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x406410\n    uint64_t v165; // 0x4068a6\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x4072d8\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x406904\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x406a00_2;\n    } else {\n        // 0x4068b0\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x406904\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x406fe0\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x406a00_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x406fe6\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x4068d2;\n                } else {\n                    goto lab_0x406ff2;\n                }\n            }\n        } else {\n            // 0x4068c2\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x4068d2;\n            } else {\n                goto lab_0x406ff2;\n            }\n        }\n    }\n  lab_0x406ad0:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x4072f9\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x406a00_2;\n        } else {\n            // 0x407311\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407322\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x406b02;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x406af1\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x406c15;\n        } else {\n            // 0x406aff\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x406b02;\n        }\n    }\n  lab_0x4073b2:\n    // 0x4073b2\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        goto lab_0x406ad0;\n    }\n  lab_0x407040:\n    // 0x407040\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40705e;\n  lab_0x406c08:\n    // 0x406c08\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x406830;\n  lab_0x406c15:\n    // 0x406c15\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x406c28;\n  lab_0x40705e:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x407064\n    v14 = v48;\n    int64_t v170; // 0x406410\n    int64_t v171; // 0x406410\n    int64_t * v172; // 0x406410\n    int64_t v173; // 0x406410\n    int64_t v174; // bp-760, 0x406410\n    uint64_t size5; // 0x407068\n    if (v169 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        // 0x407079\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x4070d9;\n        } else {\n            // 0x407085\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x406a00_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x4070ad\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x406a00_2;\n                } else {\n                    goto lab_0x4070d9;\n                }\n            }\n        }\n    }\n  lab_0x4069cc:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40705e;\n    } else {\n        // 0x4069d5\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40705e;\n        } else {\n            goto lab_0x406a00_2;\n        }\n    }\n  lab_0x4068d2:\n    // 0x4068d2\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x407299\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x4072b4\n            if (v48 == v20 && v46 != 0) {\n                // 0x4072c2\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x406904\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x4068f3\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x406904\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x406a00_2;\n  lab_0x406ff2:\n    // 0x406ff2\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        goto lab_0x4068d2;\n    }\n  lab_0x4070d9:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x406410\n    int64_t v181; // 0x406410\n    int64_t v182; // 0x406410\n    int64_t v183; // 0x406410\n    int64_t v184; // 0x406410\n    int64_t v185; // 0x406410\n    int64_t v186; // 0x406410\n    int64_t v187; // 0x406410\n    int64_t v188; // 0x406410\n    int64_t v189; // 0x406410\n    int64_t v190; // 0x406410\n    int64_t v191; // 0x406410\n    int64_t v192; // 0x406410\n    int64_t v193; // 0x406410\n    float80_t v194; // 0x406410\n    float80_t v195; // 0x406410\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x407c52\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x407c60\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x407d8d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x407599;\n    } else {\n        // 0x4070e1\n        int64_t v198; // 0x406410\n        float80_t v199; // 0x406410\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x4078a1\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x4078ae\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40770a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40710f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x407118\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40713c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x407c86\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x407c86\n                            v181 = v187 + 3;\n                            goto lab_0x407e01;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x407e01;\n                            } else {\n                                goto lab_0x407cc2;\n                            }\n                        }\n                    } else {\n                        // 0x407993\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x407587;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x4079a1\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x407eea\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x4079e8\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x4079fb\n                                int64_t v207 = v176 & 0xffffffff; // 0x4079fe\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x407a0c\n                                int64_t v209 = v187 + 1; // 0x407a29\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x407a3e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x407a4b\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x407599;\n                        }\n                    }\n                } else {\n                    // 0x407738\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x407738\n                        v180 = v187 + 1;\n                        goto lab_0x407ce7;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x407ce7;\n                        } else {\n                            goto lab_0x407758;\n                        }\n                    }\n                }\n            } else {\n                // 0x407570\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x407587;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x407abc\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x407acd\n                    char v215 = *v213; // 0x407ad4\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x407b10\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x407b1d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x407ae5\n                        v182 = v218;\n                        int64_t v219; // 0x407ad7\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x407599;\n                }\n            }\n        } else {\n            float80_t v220; // 0x406410\n            if (v220 != 0.0L) {\n                // 0x40713c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40778b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40779a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x407a73\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x407599;\n        }\n    }\n  lab_0x407599:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40759c\n    int64_t v229 = v228; // 0x4075a2\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x4075a4\n        int64_t v232 = v231 + v224; // 0x4075a7\n        int64_t v233 = v232 - v225; // 0x4075ae\n        if ((v230 & 2) != 0) {\n            // 0x407a53\n            v229 = v233;\n            int64_t v234 = v224; // 0x407a56\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x407a60\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x407a60\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x4078c5\n                int64_t v238 = v224; // 0x4078cb\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x4078d9\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x4078d0\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x4078e5\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x4078f8\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x4075d1\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x4075f1\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x4075e8\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x4075fa\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x407608\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40713c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x407638\n    int64_t dest_mem5 = v48; // 0x407645\n    int64_t v250 = v248; // 0x407645\n    int64_t v251 = v47; // 0x407645\n    int64_t v252; // 0x406410\n    if (v47 - v46 > v248) {\n        goto lab_0x4076c0;\n    } else {\n        if (v249 < v46) {\n            // 0x407892\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x406a00_2;\n            } else {\n                goto lab_0x4076c0;\n            }\n        } else {\n            // 0x407650\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x4076c0;\n            } else {\n                if (v47 != 0) {\n                    // 0x407c28\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x406a00_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x407c2e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40766e;\n                        } else {\n                            goto lab_0x407c3a;\n                        }\n                    }\n                } else {\n                    // 0x40765e\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40766e;\n                    } else {\n                        goto lab_0x407c3a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4076c0:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x4076d1\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x4076ed\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x406b07;\n  lab_0x407587:\n    // 0x407587\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x407599;\n  lab_0x407ce7:;\n    char * v257 = nl_langinfo(0x10000); // 0x407d1a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x407d2b\n    char v259 = *v257; // 0x407d32\n    int64_t v260 = v176 & 0xffffffff; // 0x407d35\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x407d43\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x407d70\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x407d7d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x407758;\n  lab_0x407758:\n    // 0x407758\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x407599;\n  lab_0x40766e:\n    // 0x40766e\n    if (v48 == 0 || v48 == v20) {\n        // 0x40790b\n        int64_t size7; // 0x406410\n        int64_t * mem12 = malloc((int32_t)size7); // 0x407922\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x406a00_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40792e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407959\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x4076c0;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40769d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x406a00_2;\n        } else {\n            // 0x4076ab\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x4076c0;\n        }\n    }\n  lab_0x407c3a:\n    // 0x407c3a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x406a00_2;\n    } else {\n        goto lab_0x40766e;\n    }\n  lab_0x407e01:;\n    int64_t v265 = v187 + 4; // 0x407e01\n    char v266 = *nl_langinfo(0x10000); // 0x407e4c\n    int64_t v267 = v176 & 0xffffffff; // 0x407e4f\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x407e56\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x407e7d\n        int64_t v270 = v265 + 1; // 0x407e85\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x407cc2;\n  lab_0x407cc2:\n    // 0x407cc2\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x407599;\n}\n"
        },
        {
            "funcName": "function_407f30",
            "funcStartAddr": "407f30",
            "funcEndAddr": "408149",
            "decompiledFuncCode": "int64_t function_407f30(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x407f93\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x407f48\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x407f59\n    g46 = v5;\n    int64_t v6; // 0x407f30\n    int64_t v7; // 0x407f30\n    int64_t v8; // 0x407f30\n    int64_t v9; // 0x407f30\n    int64_t v10; // 0x407f30\n    int64_t v11; // 0x407f30\n    int64_t v12; // 0x407f30\n    uint32_t v13; // 0x408050\n    int64_t * v14; // 0x408080\n    int64_t v15; // 0x408088\n    uint32_t v16; // 0x4080d0\n    uint32_t v17; // 0x4080a0\n    int64_t * v18; // 0x408030\n    int64_t v19; // 0x408030\n    int64_t * v20; // 0x408040\n    int64_t v21; // 0x408040\n    int64_t * v22; // 0x408018\n    int64_t v23; // 0x408018\n    int64_t * v24; // 0x408000\n    int64_t v25; // 0x408000\n    int64_t * v26; // 0x408120\n    uint32_t v27; // 0x407fe0\n    int64_t v28; // 0x408120\n    int64_t * v29; // 0x408110\n    int64_t v30; // 0x408110\n    uint32_t v31; // 0x407fc0\n    int64_t * v32; // 0x408138\n    int64_t v33; // 0x408138\n    int64_t v34; // 0x4080e3\n    uint32_t v35; // 0x407fa0\n    int64_t v36; // 0x4080b7\n    uint32_t v37; // 0x407f68\n    int32_t * v38; // 0x408050\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x407fe0\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x407fe7\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x408030\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x407ff3\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x407f86\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x407fc0\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x407fc7\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x408040\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x407fd3\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x407f86\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x407fa0\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x407fa7\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x408018\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x407fb3\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x407f86\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x407f68\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x407f73\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x408000\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x407f7f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x407f86\n            break;\n        }\n        case 11: {\n            // 0x408050\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40805f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x408120\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40806c\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x407f86\n            break;\n        }\n        case 12: {\n            // 0x408080\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x407f86\n            break;\n        }\n        case 15: {\n            // 0x4080d0\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x4080d7\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x408110\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x4080e3\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x407f86\n            break;\n        }\n        case 16: {\n            // 0x4080a0\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x4080ab\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x408138\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x4080b7\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x407f86\n            break;\n        }\n        default: {\n            // 0x407f93\n            return 0xffffffff;\n        }\n    }\n    // 0x407f86\n    v3++;\n    int64_t v39 = v4 + 32; // 0x407f91\n    while (v3 < v2) {\n        // 0x407f50\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g46 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x407fe0\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x407fe7\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x408030\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x407ff3\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x407f86\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x407fc0\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x407fc7\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x408040\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x407fd3\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x407f86\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x407fa0\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x407fa7\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x408018\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x407fb3\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x407f86\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x407f68\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x407f73\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x408000\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x407f7f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x407f86\n                break;\n            }\n            case 11: {\n                // 0x408050\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40805f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x408120\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40806c\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x407f86\n                break;\n            }\n            case 12: {\n                // 0x408080\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x407f86\n                break;\n            }\n            case 15: {\n                // 0x4080d0\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x4080d7\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x408110\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x4080e3\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x407f86\n                break;\n            }\n            case 16: {\n                // 0x4080a0\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x4080ab\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x408138\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x4080b7\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x407f86\n                break;\n            }\n            default: {\n                // 0x407f93\n                return 0xffffffff;\n            }\n        }\n        // 0x407f86\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x407f93\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408150",
            "funcStartAddr": "408150",
            "funcEndAddr": "408e59",
            "decompiledFuncCode": "int64_t function_408150(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x408152\n    int64_t v4 = v1 + 16; // 0x408156\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x408189\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40819e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x4081cb\n    int32_t v8 = 0; // 0x4081d0\n    int64_t v9 = 0; // 0x4081d0\n    int64_t v10 = v3; // 0x4081d0\n    int64_t v11 = a1; // 0x4081d0\n    int64_t v12 = 0; // 0x4081d0\n    char v13; // 0x408150\n    int64_t v14; // 0x408150\n    int64_t v15; // 0x408150\n    int64_t v16; // 0x408150\n    int64_t v17; // 0x408150\n    int64_t v18; // 0x408150\n    int64_t v19; // 0x408150\n    int64_t v20; // 0x408150\n    int64_t v21; // 0x408150\n    int64_t v22; // 0x408150\n    int64_t v23; // 0x408150\n    int64_t v24; // 0x408150\n    int64_t v25; // 0x408150\n    int64_t v26; // 0x408150\n    int64_t v27; // 0x408150\n    int64_t v28; // 0x408150\n    int64_t v29; // 0x408150\n    int64_t v30; // 0x408150\n    int32_t v31; // 0x408150\n    int64_t v32; // 0x408150\n    int64_t v33; // 0x4081c0\n    int64_t v34; // 0x408210\n    int64_t * v35; // 0x408233\n    int64_t v36; // 0x408296\n    if (v7 != 0) {\n        // 0x4081c0\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x408150\n        int64_t v38 = 7; // 0x408150\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x408150\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x4081c0:\n            // 0x4081c0\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x408203\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x408218\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x408254\n                int64_t v43 = v42; // 0x408254\n                int64_t v44 = v43; // 0x40825d\n                int64_t v45 = v33; // 0x40825d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x4085f0\n                    char v47 = *(char *)v46; // 0x4085f4\n                    int64_t v48 = v46; // 0x4085fd\n                    while (v47 < 58) {\n                        // 0x4085f0\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x4085ff\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x408c95\n                        char v52 = *(char *)v51; // 0x408c95\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x408c99\n                        int64_t v54 = v33; // 0x408cad\n                        int64_t v55 = v51; // 0x408cad\n                        char v56 = v52; // 0x408cad\n                        int64_t v57 = v53; // 0x408cad\n                        bool v58 = v52 < 58; // 0x408cad\n                        bool v59 = v52 < 58; // 0x408cad\n                        char v60 = v52; // 0x408cad\n                        int64_t v61 = v51; // 0x408cad\n                        int64_t v62; // 0x408cc2\n                        int64_t v63; // 0x408c95\n                        char v64; // 0x408c95\n                        int64_t v65; // 0x408c99\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x408918_9;\n                            }\n                            // 0x408c93\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x408caf\n                                if (v64 >= 58) {\n                                    goto lab_0x408918_9;\n                                }\n                                // 0x408c93\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x408c68\n                        while (v58) {\n                            // 0x408c6e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x408918_9;\n                                }\n                                // 0x408c93\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x408caf\n                                    if (v64 >= 58) {\n                                        goto lab_0x408918_9;\n                                    }\n                                    // 0x408c93\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x408c64\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x408d6d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x408918_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x408d7e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x408150\n                v36 = v45;\n                char v70; // 0x408150\n                while (true) {\n                    // 0x408296\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x4082b0\n                                *v41 = *v41 | 2;\n                                // break -> 0x408290\n                                break;\n                            }\n                            case 43: {\n                                // 0x4082c0\n                                *v41 = *v41 | 4;\n                                // break -> 0x408290\n                                break;\n                            }\n                            case 32: {\n                                // 0x4082d0\n                                *v41 = *v41 | 8;\n                                // break -> 0x408290\n                                break;\n                            }\n                            case 35: {\n                                // 0x4082e0\n                                *v41 = *v41 | 16;\n                                // break -> 0x408290\n                                break;\n                            }\n                            case 48: {\n                                // 0x4082f0\n                                *v41 = *v41 | 32;\n                                // break -> 0x408290\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x4082f8\n                                    break;\n                                }\n                                // 0x408286\n                                *v41 = *v41 | 64;\n                                // break -> 0x408290\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40829f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x408290\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x408150\n                int64_t * v72; // 0x408221\n                int64_t * v73; // 0x40822a\n                if (v70 == 42) {\n                    // 0x40836d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40838d\n                    int64_t v75 = v74; // 0x40838d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x408391\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x408397\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40876d\n                        char v80 = *(char *)v79; // 0x408771\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40876d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40877d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x408781\n                        int64_t v82 = v36; // 0x408781\n                        int64_t v83 = 0; // 0x408781\n                        if (v80 != 36) {\n                            goto lab_0x40839d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x4087b2\n                            int64_t v89 = v85; // 0x4087b2\n                            int64_t v90 = v87; // 0x4087b2\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x4087b7\n                            int64_t v95 = v92 + 1; // 0x4087ba\n                            char v96 = *(char *)v95; // 0x4087ba\n                            int64_t v97 = v96; // 0x4087ba\n                            while (v94 < v91) {\n                                // 0x4087d1\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x408918_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40878b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x408794\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x4087d1\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x408918_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40878b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x408e0b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x408918_9;\n                            }\n                            // 0x408e19\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x4083ac;\n                        }\n                    } else {\n                        goto lab_0x40839d;\n                    }\n                } else {\n                    // 0x4082fd\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x408150\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x408a1b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x408a20\n                        int64_t v102 = v71; // 0x408a29\n                        char * v103 = v100; // 0x408a29\n                        int64_t v104 = v36; // 0x408a29\n                        int64_t v105 = v71; // 0x408a29\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x408a33\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x408a33\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x408a33\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x408a42\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x408a65\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x408308;\n                }\n            } else {\n                goto lab_0x4081c8;\n            }\n        }\n    }\n  lab_0x4081d2:\n    // 0x4081d2\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x4081f4\n    return 0;\n  lab_0x408918_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x408923\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x408935\n    if (v3 != v115) {\n        // 0x408940\n        free((int64_t *)v115);\n    }\n    // 0x408945\n    *__errno_location() = 22;\n    // 0x4081f4\n    return 0xffffffff;\n  lab_0x408af0_5:;\n    // 0x408af0\n    int64_t v116; // 0x408150\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x408af5\n    int64_t v119; // 0x408150\n    if (v4 == v117) {\n        goto lab_0x408b09_3;\n    } else {\n        // 0x408af7\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x408b09_3;\n    }\n  lab_0x408b09_3:;\n    int64_t v120 = *v5; // 0x408b09\n    int32_t * v121; // 0x408b19\n    if (v3 == v120) {\n        // 0x408b19\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x408b14\n    free((int64_t *)v120);\n    // 0x408b19\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x4081c8:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x4081cb\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x4081d2\n        goto lab_0x4081d2;\n    }\n    goto lab_0x4081c0;\n  lab_0x40839d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40839d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x408743\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x408918_9;\n        }\n        // 0x40875b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x4083ac;\n  lab_0x408308:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40830b\n    int64_t v147 = v339; // 0x40830b\n    int64_t v145 = v338; // 0x40830b\n    int64_t v143 = v337; // 0x40830b\n    int64_t v186; // 0x408150\n    int64_t v190; // 0x408150\n    int64_t v189; // 0x408150\n    int64_t v188; // 0x408150\n    int64_t v187; // 0x408150\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x408410;\n    } else {\n        goto lab_0x408311;\n    }\n  lab_0x4083ac:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x4083ac\n    int64_t v132 = v128; // 0x4083b3\n    int64_t v133 = v16; // 0x4083b3\n    int64_t v134 = v131; // 0x4083b3\n    int64_t v135; // 0x408150\n    int64_t v136; // 0x408150\n    int64_t v137; // 0x408150\n    int64_t v138; // 0x40865f\n    if (v16 > v127) {\n        goto lab_0x4083bc;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x408655\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x408af0_5;\n        }\n        int64_t size = 32 * v138; // 0x40867e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x408bdc\n            if (mem == NULL) {\n                goto lab_0x408b09_3;\n            }\n            // 0x408bfe\n            v135 = (int64_t)mem;\n            goto lab_0x408c09;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40869f\n            int64_t v140 = *v6; // 0x4086a4\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x408af0_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40869f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x408c09;\n            } else {\n                goto lab_0x4086dd;\n            }\n        }\n    }\n  lab_0x408311:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x408318\n    int64_t v151 = v146; // 0x408318\n    int64_t v152 = v144; // 0x408318\n    uint64_t v153; // 0x408150\n    int64_t v154; // 0x408150\n    int64_t v155; // 0x408357\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40835b\n        int64_t v158; // 0x408150\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x4084c0\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x408353\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x4084c8\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x408350\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x408353\n                    break;\n                }\n            }\n        } else {\n            // 0x408360\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x408353\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x4084c8\n    int64_t v162 = v161 % 256; // 0x4084d4\n    g47 = v162;\n    int64_t v163 = 17; // 0x4084d7\n    int64_t v164 = v154; // 0x4084d7\n    int64_t v165 = v154; // 0x4084d7\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x408541;\n        }\n        case 28: {\n            goto lab_0x408892;\n        }\n        case 30: {\n            // 0x4088be\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x4084e9;\n        }\n        case 32: {\n            goto lab_0x408892;\n        }\n        case 33: {\n            goto lab_0x408892;\n        }\n        case 34: {\n            goto lab_0x408892;\n        }\n        case 46: {\n            // 0x4088af\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x4084e9;\n        }\n        case 51: {\n            goto lab_0x4088cd;\n        }\n        case 60: {\n            goto lab_0x408892;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x4087e9\n            int32_t v167 = v166 - 7; // 0x4087e9\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x4087ef\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x4084e9;\n        }\n        case 63: {\n            goto lab_0x408840;\n        }\n        case 64: {\n            goto lab_0x408892;\n        }\n        case 65: {\n            goto lab_0x408892;\n        }\n        case 66: {\n            goto lab_0x408892;\n        }\n        case 68: {\n            goto lab_0x408840;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x4087ff\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x408805\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40880d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40881b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40882f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x4084e9;\n        }\n        case 74: {\n            goto lab_0x4088cd;\n        }\n        case 75: {\n            goto lab_0x4084e9;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x4084e0\n            int32_t v172 = v171 - 7; // 0x4084e0\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x4084e6\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x4084e9;\n        }\n        case 80: {\n            goto lab_0x4088cd;\n        }\n        case 83: {\n            goto lab_0x4088cd;\n        }\n        default: {\n            goto lab_0x408918_9;\n        }\n    }\n  lab_0x4083bc:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x4083d3\n        int64_t v178 = v176; // 0x408150\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x4083c8\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x4083c8\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x4083e1\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x4083ed\n    int32_t v182 = *v181; // 0x4083ed\n    if (v182 != 0) {\n        // 0x408a6e\n        if (v182 != 5) {\n            goto lab_0x408918_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x408a77\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x408308;\n    } else {\n        // 0x4083f7\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x4083fd\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x408311;\n        } else {\n            goto lab_0x408410;\n        }\n    }\n  lab_0x408410:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x408410\n    char v197 = *v196; // 0x408410\n    int64_t * v198; // 0x408238\n    *v198 = v192;\n    int64_t v199; // 0x408150\n    int64_t v200; // 0x408150\n    int64_t v201; // 0x408150\n    int64_t v202; // 0x408150\n    int64_t v203; // 0x408150\n    int64_t * v204; // 0x408241\n    int64_t * v205; // 0x40824a\n    int64_t v206; // 0x408429\n    if (v197 != 42) {\n        char v207 = *v196; // 0x408610\n        int64_t v208 = v193; // 0x408619\n        char * v209; // 0x408150\n        int64_t v210; // 0x408150\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x408620\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x408624\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x408620\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40862e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x408610\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x408641\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x408311;\n    } else {\n        // 0x40841f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40843f\n        int64_t v219 = v218; // 0x40843f\n        int64_t v220 = v219 + 0xffffffd0; // 0x408443\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x408449\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x408cf4\n            char v224 = *(char *)v223; // 0x408cf8\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x408cf4\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x408d04\n            v201 = v223;\n            int64_t v225 = v219; // 0x408d08\n            int64_t v226 = v206; // 0x408d08\n            int64_t v227 = 0; // 0x408d08\n            if (v224 != 36) {\n                goto lab_0x40844f;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x408d39\n                int64_t v233 = v229; // 0x408d39\n                int64_t v234 = v231; // 0x408d39\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x408d3e\n                int64_t v239 = v236 + 1; // 0x408d45\n                char v240 = *(char *)v239; // 0x408d49\n                int64_t v241 = v240; // 0x408d49\n                while (v238 < v235) {\n                    // 0x408d57\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x408918_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x408d12\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x408d1b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x408d57\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x408918_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x408d12\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x408e27\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x408918_9;\n                }\n                // 0x408e35\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40845e;\n            }\n        } else {\n            goto lab_0x40844f;\n        }\n    }\n  lab_0x408541:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x408546\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40854e\n    *a2 = v245;\n    int64_t v246; // 0x408150\n    int64_t v247; // 0x408150\n    int64_t dest_mem; // 0x408150\n    int64_t v248; // 0x408150\n    int64_t v249; // 0x408e43\n    if (v246 > v245) {\n        // 0x40855a\n        goto lab_0x4081c8;\n    } else {\n        if (v246 < 0) {\n            // 0x408e43\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x408af0_5;\n        }\n        int64_t v250 = 2 * v246; // 0x408576\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x408e43\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x408af0_5;\n        }\n        int64_t v251 = *v5; // 0x408587\n        int64_t size2 = 176 * v246; // 0x408599\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x4086e9\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x408c4c\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x408b19\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x408af7\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x408b09_3;\n            }\n            goto lab_0x408704;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x4085ab\n            if (mem4 == NULL) {\n                // 0x408e43\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x408af0_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x4085ab\n            int64_t v254 = *v5; // 0x4085cd\n            int64_t v255 = *a2; // 0x4085d1\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x408704;\n            } else {\n                goto lab_0x4085df;\n            }\n        }\n    }\n  lab_0x408892:\n    // 0x408892\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x4088a7\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x4084e9;\n  lab_0x4088cd:;\n    uint32_t v335 = (int32_t)v153; // 0x4088d5\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x4088db\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4088e3\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x4088f1\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4088fe\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4084e9;\n  lab_0x408840:;\n    uint32_t v336 = (int32_t)v153; // 0x408848\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40884e\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x408856\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x408864\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x408871\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4084e9;\n  lab_0x4084e9:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x408150\n    int64_t v260; // 0x408150\n    int64_t * v261; // 0x40824f\n    if (v259 == -1) {\n        // 0x4089f4\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x408918_9;\n        }\n        // 0x408a0c\n        v260 = v148;\n    } else {\n        // 0x4084f3\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x4084f8\n    int64_t v264 = v258; // 0x4084ff\n    int64_t v265 = v162; // 0x4084ff\n    int64_t v266 = v263; // 0x4084ff\n    int64_t v267; // 0x408150\n    int64_t v268; // 0x408150\n    int64_t v269; // 0x408150\n    int64_t v270; // 0x408150\n    int64_t v271; // 0x408150\n    if (v142 > v262) {\n        goto lab_0x408505;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x408968\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x408972\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x408af0_5;\n        }\n        int64_t size3 = 32 * v273; // 0x408991\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x4089a4\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x408a89\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x408b09_3;\n            }\n            goto lab_0x408aa6;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x4089b1\n            if (mem6 == NULL) {\n                // 0x408e43\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x408af0_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x4089b1\n            int64_t v276 = v274 & 0xffffffff; // 0x4089b6\n            int64_t v277 = *v6; // 0x4089e1\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x408aa6;\n            } else {\n                goto lab_0x4089eb;\n            }\n        }\n    }\n  lab_0x408505:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40851b\n        int64_t v282 = v279; // 0x408150\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x408510\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x408510\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x408529\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x408535\n    int32_t v286 = *v285; // 0x408535\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40895a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x408918_9;\n        }\n    } else {\n        // 0x40853f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x408541;\n  lab_0x408c09:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x408c09\n    int64_t * v290; // 0x408150\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x4086dd;\n  lab_0x4086dd:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x4083bc;\n  lab_0x40844f:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40844f\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x408cca\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x408918_9;\n        }\n        // 0x408ce2\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40845e;\n  lab_0x40845e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40845e\n    int64_t v300 = v296; // 0x408465\n    int64_t v301 = v191; // 0x408465\n    int64_t v302 = v299; // 0x408465\n    int64_t v303; // 0x408150\n    int64_t v304; // 0x408150\n    int64_t v305; // 0x408150\n    int64_t v306; // 0x408b42\n    if (v191 > v295) {\n        goto lab_0x40846e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x408b38\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x408af0_5;\n        }\n        int64_t size4 = 32 * v306; // 0x408b5d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x408d8e\n            if (mem7 == NULL) {\n                goto lab_0x408b09_3;\n            }\n            // 0x408db0\n            v304 = (int64_t)mem7;\n            goto lab_0x408dbb;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x408b7e\n            int64_t v308 = *v6; // 0x408b83\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x408af0_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x408b7e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x408dbb;\n            } else {\n                goto lab_0x408bbc;\n            }\n        }\n    }\n  lab_0x408704:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x408150\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x4085df;\n  lab_0x4085df:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x4081c8;\n  lab_0x408aa6:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x408abc\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x4089eb;\n  lab_0x4089eb:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x408505;\n  lab_0x40846e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x408483\n        int64_t v324 = v322; // 0x408150\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x408478\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x408478\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x408491\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x40849e\n    int32_t v328 = *v327; // 0x40849e\n    if (v328 != 0) {\n        // 0x408bc5\n        if (v328 != 5) {\n            goto lab_0x408918_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x408bce\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x4084a8\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x4084b1\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x408311;\n  lab_0x408dbb:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x408dbb\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x408bbc;\n  lab_0x408bbc:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40846e;\n}\n"
        },
        {
            "funcName": "function_408e60",
            "funcStartAddr": "408e60",
            "funcEndAddr": "408ebd",
            "decompiledFuncCode": "int64_t function_408e60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408e60\n    return function_4013b8();\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408ec1",
            "decompiledFuncCode": "int64_t function_408ec0(void) {\n    // 0x408ec0\n    int64_t result; // 0x408ec0\n    return result;\n}\n"
        },
        {
            "funcName": "function_408ed0",
            "funcStartAddr": "408ed0",
            "funcEndAddr": "408ee8",
            "decompiledFuncCode": "int64_t function_408ed0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408ed0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g14);\n}\n"
        },
        {
            "funcName": "function_408ee8",
            "funcStartAddr": "408ee8",
            "funcEndAddr": "408f08",
            "decompiledFuncCode": "int64_t function_408ee8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g10; // 0x408ef2\n    while (*(int64_t *)v1 != -1) {\n        // 0x408ef3\n        v1 -= 8;\n    }\n    // 0x408f04\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_printf.elf"
}