{
    "funcInfo": [
        {
            "funcName": "function_402f00",
            "funcStartAddr": "402f00",
            "funcEndAddr": "402f05",
            "decompiledFuncCode": "int64_t function_402f00(void) {\n    // 0x402f00\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f05",
            "funcStartAddr": "402f05",
            "funcEndAddr": "402f0a",
            "decompiledFuncCode": "int64_t function_402f05(void) {\n    // 0x402f05\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f0a",
            "funcStartAddr": "402f0a",
            "funcEndAddr": "402f0f",
            "decompiledFuncCode": "int64_t function_402f0a(void) {\n    // 0x402f0a\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402f0f",
            "funcStartAddr": "402f0f",
            "funcEndAddr": "402f14",
            "decompiledFuncCode": "int64_t function_402f0f(void) {\n    // 0x402f0f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f14",
            "funcStartAddr": "402f14",
            "funcEndAddr": "402f19",
            "decompiledFuncCode": "int64_t function_402f14(void) {\n    // 0x402f14\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f19",
            "funcStartAddr": "402f19",
            "funcEndAddr": "402f1e",
            "decompiledFuncCode": "int64_t function_402f19(void) {\n    // 0x402f19\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f1e",
            "funcStartAddr": "402f1e",
            "funcEndAddr": "402f23",
            "decompiledFuncCode": "int64_t function_402f1e(void) {\n    // 0x402f1e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f23",
            "funcStartAddr": "402f23",
            "funcEndAddr": "402f28",
            "decompiledFuncCode": "int64_t function_402f23(void) {\n    // 0x402f23\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f28",
            "funcStartAddr": "402f28",
            "funcEndAddr": "402f2d",
            "decompiledFuncCode": "int64_t function_402f28(void) {\n    // 0x402f28\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f2d",
            "funcStartAddr": "402f2d",
            "funcEndAddr": "402f32",
            "decompiledFuncCode": "int64_t function_402f2d(void) {\n    // 0x402f2d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f32",
            "funcStartAddr": "402f32",
            "funcEndAddr": "402f37",
            "decompiledFuncCode": "int64_t function_402f32(void) {\n    // 0x402f32\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f37",
            "funcStartAddr": "402f37",
            "funcEndAddr": "402f3c",
            "decompiledFuncCode": "int64_t function_402f37(void) {\n    // 0x402f37\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402f3c",
            "funcStartAddr": "402f3c",
            "funcEndAddr": "402f41",
            "decompiledFuncCode": "int64_t function_402f3c(void) {\n    // 0x402f3c\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f50",
            "funcStartAddr": "402f50",
            "funcEndAddr": "405830",
            "decompiledFuncCode": "int64_t function_402f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x402f50\n    int128_t v1; // 0x402f50\n    int128_t v2 = v1;\n    char * env_val = getenv(\"POSIXLY_CORRECT\"); // 0x402f6b\n    int64_t v3 = function_40dbe0(); // 0x402f7c\n    function_40dc60(a2);\n    char * locale = setlocale(LC_ALL, (char *)&g7); // 0x402fa3\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g41 = 2;\n    g103 = function_40bd10(3, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    char v4 = function_40bd10(2, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"); // 0x402fed\n    *(char *)&g102 = v4;\n    struct lconv * locale_info = localeconv(); // 0x402ff3\n    int64_t v5 = *(int64_t *)locale_info; // 0x402ff8\n    unsigned char v6 = *(char *)v5; // 0x402ffb\n    g105 = v6;\n    if (v6 == 0) {\n        // 0x403120\n        g105 = 46;\n        goto lab_0x403017;\n    } else {\n        // 0x40300d\n        if (*(char *)(v5 + 1) != 0) {\n            // 0x403120\n            g105 = 46;\n            goto lab_0x403017;\n        } else {\n            goto lab_0x403017;\n        }\n    }\n  lab_0x405524_2:\n    // 0x405524\n    function_405d30((int64_t)g120, \"field number is zero\");\n    int64_t v7; // 0x402f50\n    int64_t v8 = v7; // 0x405530\n    int64_t v9; // 0x402f50\n    int64_t v10 = v9; // 0x405530\n    goto lab_0x405535;\n  lab_0x4052df_2:;\n    // 0x4052df\n    int64_t v342; // 0x402f50\n    function_40f630(4, *(int64_t *)v342);\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    __fprintf_chk(g55, 1, \"%s\\n\", dcgettext(NULL, \"file operands cannot be combined with --files0-from\", 5));\n    goto lab_0x40533e;\n  lab_0x405535:\n    // 0x405535\n    function_405d00((int64_t *)\"cC\");\n    int64_t * v11 = (int64_t *)(v8 + 32); // 0x40553a\n    int64_t v12 = v8; // 0x40553a\n    int64_t v13 = v10; // 0x40553a\n    goto lab_0x40553f;\n  lab_0x4054e4:\n    // 0x4054e4\n    error(2, (int32_t)\"multiple output files specified\" ^ (int32_t)\"multiple output files specified\", dcgettext(NULL, \"multiple output files specified\", 5));\n    int64_t v36; // 0x402f50\n    int64_t v38 = v36; // 0x405501\n    int64_t v37; // 0x402f50\n    int64_t v39 = v37; // 0x405501\n    goto lab_0x405506;\n  lab_0x4054c2:\n    // 0x4054c2\n    error(2, (int32_t)\"multiple compress programs specified\" ^ (int32_t)\"multiple compress programs specified\", dcgettext(NULL, \"multiple compress programs specified\", 5));\n    int64_t v34; // 0x402f50\n    v36 = v34;\n    int64_t v35; // 0x402f50\n    v37 = v35;\n    goto lab_0x4054e4;\n  lab_0x4054a0:\n    // 0x4054a0\n    error(2, (int32_t)\"multiple random sources specified\" ^ (int32_t)\"multiple random sources specified\", dcgettext(NULL, \"multiple random sources specified\", 5));\n    int64_t v32; // 0x402f50\n    v34 = v32;\n    int64_t v33; // 0x402f50\n    v35 = v33;\n    goto lab_0x4054c2;\n  lab_0x4036df:;\n    // 0x4036df\n    int64_t v43; // 0x402f50\n    int64_t v44 = v43; // 0x4036e6\n    int64_t v45; // 0x402f50\n    int64_t v46 = v45; // 0x4036e6\n    int64_t v47; // 0x402f50\n    int64_t v48 = v47; // 0x4036e6\n    int64_t v49; // 0x402f50\n    int64_t v50 = v49; // 0x4036e6\n    int64_t v51; // 0x402f50\n    int64_t v52 = v51; // 0x4036e6\n    int32_t v53; // 0x402f50\n    int32_t v54 = v53; // 0x4036e6\n    char * v55; // 0x402f50\n    char * v56 = v55; // 0x4036e6\n    int32_t v57; // 0x402f50\n    int32_t v58 = v57; // 0x4036e6\n    int64_t v59; // 0x402f50\n    int64_t v60 = v59; // 0x4036e6\n    int64_t v61; // 0x402f50\n    int64_t v62 = v61; // 0x4036e6\n    int64_t v63 = v43; // 0x4036e6\n    int64_t v64; // 0x402f50\n    int64_t v65 = v64; // 0x4036e6\n    int64_t v66; // 0x402f50\n    int64_t v67 = v66; // 0x4036e6\n    if (g81 == 0) {\n        goto lab_0x40408c;\n    } else {\n        goto lab_0x4036ec;\n    }\n  lab_0x405506:;\n    char * v40 = (char *)v38; // 0x405506\n    char v41 = *v40; // 0x405506\n    char v42 = v41; // 0x40550a\n    if (v41 != 0) {\n        goto lab_0x405510;\n    } else {\n        // 0x40550c\n        *v40 = 111;\n        v42 = 111;\n        goto lab_0x405510;\n    }\n  lab_0x40543a:;\n    char * v26 = dcgettext(NULL, (char *)(int64_t)\"close failed\", 5); // 0x40543c\n    int64_t v24; // 0x402f50\n    function_405dd0((int64_t)v26, (int64_t *)*(int64_t *)(v24 + 24));\n    int64_t v27 = 5; // 0x405449\n    int64_t v28 = v24; // 0x405449\n    int64_t v25; // 0x402f50\n    int64_t v29 = v25; // 0x405449\n    goto lab_0x40544e_2;\n  lab_0x405430:\n    // 0x405430\n    goto lab_0x40543a;\n  lab_0x404653:;\n    // 0x404653\n    int64_t v92; // 0x402f50\n    int64_t v83 = v92;\n    int64_t v89 = *(int64_t *)v83; // 0x404653\n    int64_t v73 = (int64_t)&g19; // 0x402f50\n    int64_t v71 = v89; // 0x402f50\n    int64_t v79 = 2; // 0x402f50\n    goto lab_dec_label_pc_unknown;\n  lab_0x403a2b:;\n    int64_t v188; // 0x402f50\n    int64_t v189; // 0x402f50\n    int64_t v190; // 0x402f50\n    int64_t v191; // 0x402f50\n    int64_t v192; // 0x402f50\n    int32_t v193; // 0x402f50\n    int64_t v194; // 0x403a18\n    int64_t v195; // 0x403a18\n    if ((char)v189 != 0) {\n        // 0x404570\n        v191 = v195;\n        v192 = v195;\n        if ((char)v188 != 0) {\n            goto lab_0x4037f0;\n        } else {\n            goto lab_0x4037c3;\n        }\n    } else {\n        // 0x403a33\n        v191 = v195;\n        if (g32 != 128) {\n            goto lab_0x4037c3;\n        } else {\n            // 0x403a43\n            if (*(char *)v194 != 0) {\n                goto lab_0x403a54;\n            } else {\n                if (v193 == 0) {\n                    goto lab_0x403a69;\n                } else {\n                    // 0x403a4d\n                    if (*(int64_t *)(v190 + 8) != 0) {\n                        goto lab_0x403a69;\n                    } else {\n                        goto lab_0x403a54;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4037c3:\n    // 0x4037c3\n    v192 = 0;\n    int64_t * v196; // 0x4038b1\n    int64_t * v197; // 0x4038b4\n    if (v191 == 0) {\n        goto lab_0x4037f0;\n    } else {\n        int64_t v198 = *v197 + 1; // 0x4037cc\n        if (v198 == 0) {\n            goto lab_0x404615;\n        } else {\n            int64_t v199 = *v196 + 1; // 0x4037d3\n            v192 = v198;\n            if (v198 > (v199 != 0 ? v199 : 1)) {\n                goto lab_0x404615;\n            } else {\n                goto lab_0x4037f0;\n            }\n        }\n    }\n  lab_0x4037f0:;\n    int64_t v200 = v192;\n    int64_t v201 = 0; // 0x4037fb\n    int64_t v202; // 0x402f50\n    if (v202 != 0) {\n        int64_t v203 = *(int64_t *)(v190 + 32); // 0x4037fd\n        v201 = v202 == v203 ? 0 : v202;\n    }\n    int64_t v204 = v201;\n    int64_t v205 = 0; // 0x403812\n    int64_t v206; // 0x402f50\n    if (v206 != 0) {\n        int64_t v207 = *(int64_t *)(v190 + 40); // 0x403814\n        v205 = v206 == v207 ? 0 : v206;\n    }\n    int64_t v208 = v205;\n    int64_t v209; // 0x402f50\n    int64_t v210 = v209 + 1; // 0x403822\n    char v211 = *(char *)(v190 + 55); // 0x403892\n    int64_t v212 = *(int64_t *)(v190 + 64); // 0x403896\n    int32_t v213; // 0x402f50\n    int32_t v214 = (v211 ^ 1) & (char)v213; // 0x40389d\n    int64_t v215 = v204; // 0x4038a7\n    int64_t v216 = v208; // 0x4038a7\n    int32_t v217 = v214; // 0x4038a7\n    int64_t v218 = v212; // 0x4038a7\n    int64_t v219 = v210; // 0x4038a7\n    int64_t v220; // 0x402f50\n    int64_t v221 = v220; // 0x4038a7\n    if (v212 == 0) {\n        // break -> 0x403fb1\n        goto lab_0x403fb1;\n    }\n    goto lab_0x4038ad;\n  lab_0x403a54:\n    // 0x403a54\n    v191 = v195;\n    if (*(char *)(v190 + 49) != 0) {\n        goto lab_0x4037c3;\n    } else {\n        // 0x403a5e\n        v191 = v195;\n        if (*(int64_t *)(v190 + 24) == 0) {\n            goto lab_0x4037c3;\n        } else {\n            goto lab_0x403a69;\n        }\n    }\n  lab_0x404615:;\n    char * format2 = dcgettext(NULL, \"key %lu is numeric and spans multiple fields\", 5); // 0x404621\n    error(0, (int32_t)\"key %lu is numeric and spans multiple fields\" ^ (int32_t)\"key %lu is numeric and spans multiple fields\", format2);\n    v192 = (int64_t)format2;\n    goto lab_0x4037f0;\n  lab_0x403a69:\n    // 0x403a69\n    error(0, (int32_t)\"leading blanks are significant in key %lu; consider also specifying 'b'\" ^ (int32_t)\"leading blanks are significant in key %lu; consider also specifying 'b'\", dcgettext(NULL, \"leading blanks are significant in key %lu; consider also specifying 'b'\", 5));\n    int64_t * v240; // 0x403a18\n    v191 = *v240 & 0xffff00ff0000;\n    goto lab_0x4037c3;\n  lab_0x403650:;\n    // 0x403650\n    int64_t v242; // 0x402f50\n    int64_t v243 = *(int64_t *)(v242 + 64); // 0x403654\n    int64_t v244; // 0x402f50\n    int64_t v245 = v244 | (int64_t)*(char *)(v242 + 51); // 0x40365d\n    int64_t v246 = v243; // 0x40365d\n    if (v243 == 0) {\n        // break -> 0x403662\n        goto lab_0x403662_2;\n    }\n    goto lab_0x403640;\n  lab_0x403640:;\n    int64_t v247 = v245; // 0x402f50\n    int64_t v248 = v246; // 0x402f50\n    goto lab_0x403640_2;\n  lab_0x40547e:\n    // 0x40547e\n    error(2, (int32_t)\"incompatible tabs\" ^ (int32_t)\"incompatible tabs\", dcgettext(NULL, \"incompatible tabs\", 5));\n    int64_t v30; // 0x402f50\n    v32 = v30;\n    int64_t v31; // 0x402f50\n    v33 = v31;\n    goto lab_0x4054a0;\n  lab_0x4057af:;\n    // 0x4057af\n    int64_t v68; // 0x402f50\n    function_40f630(4, v68);\n    error(2, (int32_t)\"cannot read file names from %s\" ^ (int32_t)\"cannot read file names from %s\", dcgettext(NULL, \"cannot read file names from %s\", 5));\n    int64_t v69 = 2; // 0x4057dc\n    goto lab_0x4057e1;\n  lab_0x405562:;\n    // 0x405562\n    int64_t v20; // 0x402f50\n    function_40f880(v20);\n    error(0, (int32_t)\"invalid --%s argument %s\" ^ (int32_t)\"invalid --%s argument %s\", dcgettext(NULL, \"invalid --%s argument %s\", 5));\n    int64_t v21 = function_40f880((int64_t)&g10); // 0x4055a7\n    char * format = dcgettext((char *)((int32_t)&g10 ^ (int32_t)&g10), \"minimum --%s argument is %s\", 5); // 0x4055bb\n    error(2, (int32_t)\"minimum --%s argument is %s\" ^ (int32_t)\"minimum --%s argument is %s\", format);\n    char * v22 = dcgettext(NULL, \"open failed\", 5); // 0x4055e3\n    int64_t v19; // 0x402f50\n    function_405dd0((int64_t)v22, (int64_t *)*(int64_t *)(v19 + 32));\n    goto lab_0x40541e;\n  lab_0x405778:;\n    // 0x405778\n    int64_t v257; // 0x402f50\n    function_40f630(4, v257);\n    error(2, (int32_t)\"no input from %s\" ^ (int32_t)\"no input from %s\", dcgettext(NULL, \"no input from %s\", 5));\n    v68 = (int32_t)\"no input from %s\" ^ (int32_t)\"no input from %s\";\n    goto lab_0x4057af;\n  lab_0x405549:;\n    // 0x405549\n    int64_t v14; // 0x402f50\n    function_405d30(*(int64_t *)(v14 + 72), \"stray character in field spec\");\n    int64_t * v16 = (int64_t *)(v14 + 8); // 0x405553\n    int64_t v17 = v14; // 0x405553\n    int64_t v15; // 0x402f50\n    int64_t v18 = v15; // 0x405553\n    goto lab_0x405558;\n  lab_0x405732:\n    // 0x405732\n    function_40f700(0, 3, v257);\n    error(2, (int32_t)\"%s:%lu: invalid zero-length file name\" ^ (int32_t)\"%s:%lu: invalid zero-length file name\", dcgettext(NULL, \"%s:%lu: invalid zero-length file name\", 5));\n    // 0x40576e\n    function_407dd0(v257);\n    goto lab_0x405778;\n  lab_0x403460:;\n    int64_t v258 = g49; // 0x403467\n    int64_t v259; // 0x402f50\n    int64_t v260 = v259; // 0x403467\n    int64_t v261; // 0x402f50\n    int64_t v262 = v261; // 0x403467\n    goto lab_0x403430;\n  lab_0x403488:;\n    // 0x403488\n    int64_t v311; // 0x402f50\n    int64_t v281; // 0x402f50\n    int64_t v287; // 0x402f50\n    int32_t v124; // bp-760, 0x402f50\n    int64_t v645 = function_412f30(v287 & 0xffffffff, v281, \"-bcCdfghik:mMno:rRsS:t:T:uVy:z\", &g5, &v124, v311); // 0x40349f\n    int64_t v379 = v645 & 0xffffffff; // 0x4034a4\n    v259 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n    v261 = v379;\n    int64_t v147; // 0x402f50\n    int64_t v312; // 0x402f50\n    int64_t v88; // 0x402f50\n    int64_t v412; // 0x402f50\n    int64_t v611; // 0x402f50\n    int64_t v313; // 0x402f50\n    int64_t v314; // 0x402f50\n    int64_t v425; // 0x402f50\n    int64_t v315; // 0x402f50\n    int64_t v283; // 0x402f50\n    int64_t v423; // 0x402f50\n    int64_t v421; // 0x402f50\n    int64_t v316; // 0x402f50\n    int64_t v643; // 0x402f50\n    int64_t v639; // 0x402f50\n    int64_t v317; // 0x402f50\n    int64_t v286; // 0x402f50\n    int64_t v419; // 0x402f50\n    int64_t v310; // 0x402f50\n    int64_t v642; // 0x402f50\n    int64_t v411; // 0x402f50\n    int64_t v482; // 0x402f50\n    int64_t v483; // 0x402f50\n    int64_t v485; // 0x402f50\n    int64_t v417; // 0x402f50\n    int64_t v309; // 0x402f50\n    int64_t v410; // 0x402f50\n    int64_t v427; // 0x402f50\n    int64_t v134; // 0x402f50\n    int64_t v308; // 0x402f50\n    int64_t v409; // 0x402f50\n    int64_t v429; // 0x402f50\n    int64_t v416; // 0x402f50\n    int64_t v408; // 0x402f50\n    int64_t v307; // 0x402f50\n    int64_t v641; // 0x402f50\n    char * oact; // bp-344, 0x402f50\n    int32_t v299; // 0x402f50\n    int32_t v272; // 0x402f50\n    int32_t v440; // 0x402f50\n    int64_t v298; // 0x402f50\n    int64_t v270; // 0x402f50\n    int64_t v442; // 0x402f50\n    int64_t v297; // 0x402f50\n    int64_t v268; // 0x402f50\n    int64_t v444; // 0x402f50\n    int64_t v96; // bp-488, 0x402f50\n    int64_t v451; // bp-624, 0x402f50\n    int64_t v453; // bp-632, 0x402f50\n    int64_t v455; // bp-648, 0x402f50\n    int64_t v97; // bp-712, 0x402f50\n    int32_t v292; // 0x402f50\n    int32_t v293; // 0x402f50\n    int32_t v414; // 0x402f50\n    char v489; // 0x402f50\n    int64_t v290; // 0x402f50\n    int64_t v266; // 0x402f50\n    int64_t v446; // 0x402f50\n    int64_t v302; // 0x402f50\n    int64_t v278; // 0x402f50\n    int64_t v434; // 0x402f50\n    char v295; // 0x402f50\n    char v296; // 0x402f50\n    char * v300; // 0x402f50\n    char * v274; // 0x402f50\n    char * v438; // 0x402f50\n    char * v294; // 0x402f50\n    char * str5; // 0x402f50\n    char * v291; // 0x402f50\n    char * str3; // 0x402f50\n    int32_t v301; // 0x402f50\n    int32_t v276; // 0x402f50\n    int32_t v436; // 0x402f50\n    int64_t v612; // 0x402f50\n    int32_t v614; // 0x403b5b\n    int64_t v644; // 0x4034d4\n    int64_t v616; // 0x403ba1\n    int64_t v85; // 0x402f64\n    int32_t v604; // 0x402f50\n    int128_t v303; // 0x402f50\n    int128_t v304; // 0x402f50\n    int128_t v432; // 0x402f50\n    int128_t v305; // 0x402f50\n    int128_t v306; // 0x402f50\n    if ((int32_t)v645 == -1) {\n        goto lab_0x403460;\n    } else {\n        int64_t v646 = v645 + 131; // 0x4034ac\n        g123 = v646 & 0xffffffff;\n        v290 = v266;\n        v291 = str3;\n        v292 = v293;\n        v294 = str5;\n        v295 = 1;\n        v297 = v268;\n        v298 = v270;\n        v299 = v272;\n        v300 = v274;\n        v301 = v276;\n        v302 = v278;\n        v303 = v304;\n        v305 = v306;\n        v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n        v308 = v287;\n        v309 = v281;\n        v310 = v311;\n        v312 = v88;\n        v313 = v314;\n        v315 = v283;\n        v316 = v379;\n        v317 = v286;\n        v644 = v311;\n        v643 = v379;\n        v641 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n        v642 = v311;\n        v639 = v379;\n        v414 = v293;\n        v408 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n        v409 = v287;\n        v410 = v281;\n        v411 = v311;\n        v412 = v88;\n        int32_t v647; // bp-640, 0x402f50\n        switch ((int32_t)v646) {\n            case 0: {\n                // 0x403eb2\n                function_4110d0((int64_t)g52, \"sort\", \"GNU coreutils\", (int64_t)g39, \"Mike Haertel\", \"Paul Eggert\");\n                exit(0);\n                // UNREACHABLE\n            }\n            case 1: {\n                // 0x405192\n                function_40a0d0(0);\n                // UNREACHABLE\n            }\n            case 132: {\n                // 0x403ee7\n                if (*g120 == 43) {\n                    int32_t v648 = g49; // 0x4043dc\n                    char v649 = 0; // 0x4043e5\n                    if (v648 != (int32_t)v287) {\n                        int64_t v650 = *(int64_t *)(8 * (int64_t)v648 + v281); // 0x4043eb\n                        char v651 = *(char *)v650; // 0x4043f8\n                        v649 = 0;\n                        if (v651 == 45) {\n                            char v652 = *(char *)(v650 + 1); // 0x405155\n                            v649 = (int32_t)v652 < 58;\n                        }\n                    }\n                    // 0x404401\n                    v489 = v649;\n                    char v653 = v489 & (char)(v278 == 0) | (char)v276; // 0x40440e\n                    if (v653 == 0) {\n                        goto lab_0x403ef7;\n                    } else {\n                        // 0x404418\n                        __asm_rep_stosd_memset((char *)&v455, 0, 18);\n                        v453 = -1;\n                        int64_t v654; // 0x403ee7\n                        int64_t v655 = function_407c00(v654 + 1, &v455, 0); // 0x404443\n                        if (v655 == 0) {\n                            int64_t v656 = v455; // 0x40521a\n                            int32_t v657 = v647; // 0x405222\n                            if ((v656 || (int64_t)v657) == 0) {\n                                // 0x405237\n                                v455 = -1;\n                            }\n                            goto lab_0x403ef7;\n                        } else {\n                            char v658 = *(char *)v655; // 0x404458\n                            if (v658 == 46) {\n                                int64_t v659 = function_407c00(v655 + 1, (int64_t *)&v647, 0); // 0x4052bf\n                                int64_t v660 = v455; // 0x4052c4\n                                int32_t v661 = v647; // 0x4052cc\n                                v482 = v659;\n                                v483 = v659;\n                                if ((v660 || (int64_t)v661) == 0) {\n                                    goto lab_0x404473;\n                                } else {\n                                    goto lab_0x40447f;\n                                }\n                            } else {\n                                int64_t v662 = v455; // 0x404461\n                                int32_t v663 = v647; // 0x404469\n                                v482 = v655;\n                                v485 = v655;\n                                if ((v662 || (int64_t)v663) != 0) {\n                                    goto lab_0x404488;\n                                } else {\n                                    goto lab_0x404473;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x403ef7;\n                }\n            }\n            case 198: {\n                goto lab_0x40355e;\n            }\n            case 208: {\n                goto lab_0x4034f4;\n            }\n            case 213: {\n                goto lab_0x4034f4;\n            }\n            case 214: {\n                int64_t v664 = (int64_t)g120;\n                uint32_t v665 = v124; // 0x403f0c\n                int64_t v666 = function_411b40(v664, v604, 10, &v96, (int32_t)\"EgGkKmMPtTYZ\", v311); // 0x403f37\n                if ((int32_t)v666 != 0) {\n                    int64_t v667 = v666; // 0x40436e\n                    int64_t v668; // 0x402f50\n                    int32_t v669; // 0x403f3c\n                    if (v669 != 2) {\n                        // 0x40438e\n                        v668 = v667;\n                        function_411ab0(v668 & 0xffffffff, (int64_t)v665, 83, &g5, (char)v664);\n                        // UNREACHABLE\n                    }\n                    char * v670 = oact; // 0x404370\n                    int64_t v671 = (int64_t)v670; // 0x404370\n                    char v672 = *(char *)(v671 - 1); // 0x404378\n                    v667 = v666;\n                    if (v672 != 57 && (int32_t)v672 >= 57) {\n                        // 0x40438e\n                        v668 = v667;\n                        function_411ab0(v668 & 0xffffffff, (int64_t)v665, 83, &g5, (char)v664);\n                        // UNREACHABLE\n                    }\n                    char v673 = *(char *)(v671 + 1); // 0x404384\n                    v667 = v666;\n                    if (v673 != 0) {\n                        // 0x40438e\n                        v668 = v667;\n                        function_411ab0(v668 & 0xffffffff, (int64_t)v665, 83, &g5, (char)v664);\n                        // UNREACHABLE\n                    }\n                    char v674 = *v670; // 0x405204\n                    v446 = v266;\n                    v444 = v268;\n                    v442 = v270;\n                    v440 = v272;\n                    v438 = v274;\n                    v436 = v276;\n                    v434 = v278;\n                    v432 = v304;\n                    v429 = v287;\n                    v427 = v281;\n                    v425 = v314;\n                    v423 = v283;\n                    v421 = v379;\n                    v419 = v286;\n                    v667 = v666;\n                    switch (v674) {\n                        case 37: {\n                            // 0x405250\n                            function_40d840();\n                            int64_t v675 = v96; // 0x405255\n                            int128_t v676; // 0x402f50\n                            int64_t v677; // 0x402f50\n                            if (v675 < 0) {\n                                // 0x405396\n                                __asm_pxor(v306, v306);\n                                int64_t v678 = v675 / 2 | v675 % 2; // 0x4053a3\n                                int128_t v679 = __asm_cvtsi2sd(v678); // 0x4053a6\n                                v677 = v678;\n                                v676 = __asm_addsd(v679, v679);\n                            } else {\n                                // 0x405266\n                                __asm_pxor(v306, v306);\n                                int128_t v680 = __asm_cvtsi2sd(v675); // 0x40526a\n                                v677 = v675;\n                                v676 = v680;\n                            }\n                            int128_t v681 = v676;\n                            int64_t v682 = v677;\n                            int128_t v683 = __asm_mulsd(v304, v681); // 0x40526f\n                            int128_t v684 = __asm_movsd_3(0x43f0000000000000); // 0x405273\n                            int128_t v685 = __asm_divsd(v683, 0x4059000000000000); // 0x40527b\n                            __asm_comisd(v684, v685);\n                            v667 = 1;\n                            if (v682 == 0) {\n                              lab_0x40438e:\n                                // 0x40438e\n                                v668 = v667;\n                                function_411ab0(v668 & 0xffffffff, (int64_t)v665, 83, &g5, (char)v664);\n                                // UNREACHABLE\n                            }\n                            // 0x40528d\n                            __asm_comisd(v685, __asm_movsd_3(0x43e0000000000000));\n                            goto lab_0x40536f;\n                        }\n                        case 98: {\n                            goto lab_0x403f7f;\n                        }\n                        default: {\n                            goto lab_0x40438e;\n                        }\n                    }\n                } else {\n                    char v686 = *(char *)((int64_t)oact - 1); // 0x403f4c\n                    v446 = v266;\n                    v444 = v268;\n                    v442 = v270;\n                    v440 = v272;\n                    v438 = v274;\n                    v436 = v276;\n                    v434 = v278;\n                    v432 = v304;\n                    v429 = v287;\n                    v427 = v281;\n                    v425 = v314;\n                    v423 = v283;\n                    v421 = v379;\n                    v419 = v286;\n                    if (v686 == 57 || (int32_t)v686 < 57) {\n                        // 0x403f58\n                        if (v96 >= 0x40000000000000) {\n                            // 0x40438e\n                            function_411ab0(1, (int64_t)v665, 83, &g5, (char)v664);\n                            // UNREACHABLE\n                        }\n                        // 0x403f73\n                        v96 *= 1024;\n                        v446 = v266;\n                        v444 = v268;\n                        v442 = v270;\n                        v440 = v272;\n                        v438 = v274;\n                        v436 = v276;\n                        v434 = v278;\n                        v432 = v304;\n                        v429 = v287;\n                        v427 = v281;\n                        v425 = v314;\n                        v423 = v283;\n                        v421 = v379;\n                        v419 = v286;\n                    }\n                    goto lab_0x403f7f;\n                }\n            }\n            case 215: {\n                // 0x403ea1\n                function_40a010((int64_t)g120);\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 217: {\n                goto lab_0x4034f4;\n            }\n            case 229: {\n                goto lab_0x4034f4;\n            }\n            case 230: {\n                goto lab_0x40355e;\n            }\n            case 231: {\n                goto lab_0x4034f4;\n            }\n            case 233: {\n                goto lab_0x4034f4;\n            }\n            case 234: {\n                goto lab_0x4034f4;\n            }\n            case 235: {\n                goto lab_0x4034f4;\n            }\n            case 236: {\n                goto lab_0x4034f4;\n            }\n            case 238: {\n                // 0x403d8d\n                __asm_rep_stosd_memset((char *)&v455, 0, 18);\n                v453 = -1;\n                int64_t v687 = function_407c00((int64_t)g120, &v455, (int64_t)\"invalid number at field start\"); // 0x403dbe\n                int64_t v688 = v455; // 0x403dc3\n                int64_t v689 = v688 - 1; // 0x403dcb\n                v455 = v689;\n                v7 = v85;\n                v9 = v88;\n                if (v688 == 0) {\n                    goto lab_0x405524_2;\n                }\n                // 0x403de0\n                int32_t v690; // 0x402f50\n                int64_t v691; // 0x402f50\n                int64_t v692; // 0x402f50\n                if (*(char *)v687 == 46) {\n                    int64_t v693 = function_407c00(v687 + 1, (int64_t *)&v647, (int64_t)\"invalid number after '.'\"); // 0x405097\n                    int32_t v694 = v647; // 0x40509c\n                    int32_t v695 = v694 - 1; // 0x4050a4\n                    v647 = v695;\n                    if (v694 == 0) {\n                        // 0x4050b9\n                        function_405d30((int64_t)g120, \"character offset is zero\");\n                        uint64_t v696 = __asm_cvttsd2si(v306);\n                        uint64_t v697 = 34 * (int64_t)*(int32_t *)&g30; // 0x404dc9\n                        int64_t v698 = v697 < v696 ? v696 : v697; // 0x404dd0\n                        g58 = v698;\n                        // 0x404bd4\n                        v147 = v88;\n                        uint64_t v699 = v314 * v281 + 1; // 0x404be4\n                        v134 = v698;\n                        if (v314 != v699 / v281) {\n                            goto lab_0x404f99;\n                        } else {\n                            // 0x404bf7\n                            v134 = v698;\n                            if (v699 >= v698 - v287) {\n                                goto lab_0x404f99;\n                            } else {\n                                // 0x404c06\n                                v134 = v699 + v287;\n                                if (v286 + 1 >= v283) {\n                                    goto lab_0x404f99;\n                                }\n                            }\n                        }\n                    }\n                    // 0x405086\n                    v690 = v695;\n                    v691 = v455;\n                    v692 = v693;\n                } else {\n                    // 0x403de0\n                    v690 = v647;\n                    v691 = v689;\n                    v692 = v687;\n                }\n                // 0x403de9\n                if ((v691 || (int64_t)v690) == 0) {\n                    // 0x4043cb\n                    v455 = -1;\n                }\n                int64_t v700 = function_405c00((int64_t *)v692, &v455, 0); // 0x403e0c\n                char * v701 = (char *)v700;\n                char * v702; // 0x402f50\n                if (*v701 == 44) {\n                    int64_t v703 = function_407c00(v700 + 1, (int64_t *)v266, (int64_t)\"invalid number after ','\"); // 0x405041\n                    int64_t v704 = v453; // 0x405046\n                    v453 = v704 - 1;\n                    v7 = v85;\n                    v9 = v88;\n                    if (v704 == 0) {\n                        goto lab_0x405524_2;\n                    }\n                    int64_t v705 = v703; // 0x405066\n                    if (*(char *)v703 == 46) {\n                        // 0x405177\n                        v705 = function_407c00(v703 + 1, &v451, (int64_t)\"invalid number after '.'\");\n                    }\n                    // 0x40506c\n                    v702 = (char *)function_405c00((int64_t *)v705, &v455, 1);\n                } else {\n                    // 0x403e1a\n                    v453 = -1;\n                    v451 = 0;\n                    v702 = v701;\n                }\n                // 0x403e32\n                if (*v702 != 0) {\n                  lab_0x40581c:\n                    // 0x40581c\n                    return function_405d30((int64_t)g120, \"stray character in field spec\");\n                }\n                int64_t v706 = function_411410(&v455, 72); // 0x403e48\n                v417 = v706;\n                v416 = &g83;\n                if (g83 != 0) {\n                    int64_t v707 = g83 + 64; // 0x403e62\n                    int64_t v708 = *(int64_t *)v707;\n                    v417 = v706;\n                    v416 = v707;\n                    while (v708 != 0) {\n                        // 0x403e62\n                        v707 = v708 + 64;\n                        v708 = *(int64_t *)v707;\n                        v417 = v706;\n                        v416 = v707;\n                    }\n                }\n                goto lab_0x4042f4;\n            }\n            case 240: {\n                goto lab_0x40344f;\n            }\n            case 241: {\n                goto lab_0x4034f4;\n            }\n            case 242: {\n                int64_t v709 = (int64_t)g120; // 0x403e71\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = g120;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = v709;\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                if (str5 != NULL) {\n                    int32_t strcmp_rc2 = strcmp(str5, g120); // 0x403e85\n                    v290 = v266;\n                    v291 = str3;\n                    v292 = v293;\n                    v294 = g120;\n                    v295 = v296;\n                    v297 = v268;\n                    v298 = v270;\n                    v299 = v272;\n                    v300 = v274;\n                    v301 = v276;\n                    v302 = v278;\n                    v303 = v304;\n                    v305 = v306;\n                    v307 = v709;\n                    v308 = v287;\n                    v309 = v281;\n                    v310 = v311;\n                    v312 = v88;\n                    v313 = v314;\n                    v315 = v283;\n                    v316 = v379;\n                    v317 = v286;\n                    v36 = v85;\n                    v37 = v88;\n                    if (strcmp_rc2 != 0) {\n                        goto lab_0x4054e4;\n                    }\n                }\n                goto lab_0x40344f;\n            }\n            case 245: {\n                goto lab_0x4034f4;\n            }\n            case 246: {\n                // 0x403d77\n                g86 = 1;\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 247: {\n                char v710 = *g120; // 0x403d24\n                if (v710 == 0) {\n                    // 0x4053b4\n                    error(2, (int32_t)\"empty tab\" ^ (int32_t)\"empty tab\", dcgettext(NULL, \"empty tab\", 5));\n                    goto lab_0x4053d6;\n                } else {\n                    int64_t v711 = (int64_t)g120;\n                    int32_t v712 = v710; // 0x403d33\n                    if (*(char *)(v711 + 1) != 0) {\n                        // 0x403d35\n                        v712 = 0;\n                        if (strcmp(g120, \"\\\\0\") != 0) {\n                            // 0x40544e\n                            v27 = 0x100000000000000 * v711 >> 56;\n                            v28 = v85;\n                            v29 = v88;\n                            goto lab_0x40544e_2;\n                        }\n                    }\n                    uint32_t v713 = g32; // 0x403d56\n                    v30 = v85;\n                    v31 = v88;\n                    if (v713 != 128 == (v713 != v712)) {\n                        goto lab_0x40547e;\n                    }\n                    // 0x403d6c\n                    g32 = v712;\n                    v290 = v266;\n                    v291 = str3;\n                    v292 = v293;\n                    v294 = str5;\n                    v295 = v296;\n                    v297 = v268;\n                    v298 = v270;\n                    v299 = v272;\n                    v300 = v274;\n                    v301 = v276;\n                    v302 = v278;\n                    v303 = v304;\n                    v305 = v306;\n                    v307 = v713;\n                    v308 = v287;\n                    v309 = v281;\n                    v310 = v311;\n                    v312 = v88;\n                    v313 = v314;\n                    v315 = v283;\n                    v316 = v379;\n                    v317 = v286;\n                    goto lab_0x40344f;\n                }\n            }\n            case 248: {\n                // 0x403d11\n                *(char *)&g85 = 1;\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 252: {\n                int32_t v714 = g49; // 0x403ccf\n                int64_t v715 = (int64_t)g120; // 0x403cd6\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = v715;\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                int64_t v716 = v715; // 0x403ce5\n                if (*(int64_t *)(v281 - 8 + 8 * (int64_t)v714) == v715) {\n                    char v717 = *(char *)v716; // 0x403ceb\n                    v716++;\n                    while (v717 == 57 || (int32_t)v717 < 57) {\n                        // 0x403ceb\n                        v717 = *(char *)v716;\n                        v716++;\n                    }\n                    // 0x403cfc\n                    g49 = v714 - (int32_t)(v717 != 0);\n                    v290 = v266;\n                    v291 = str3;\n                    v292 = v293;\n                    v294 = str5;\n                    v295 = v296;\n                    v297 = v268;\n                    v298 = v270;\n                    v299 = v272;\n                    v300 = v274;\n                    v301 = v276;\n                    v302 = v278;\n                    v303 = v304;\n                    v305 = v306;\n                    v307 = v717 != 0;\n                    v308 = v287;\n                    v309 = v281;\n                    v310 = v311;\n                    v312 = v88;\n                    v313 = v314;\n                    v315 = v283;\n                    v316 = v379;\n                    v317 = v286;\n                }\n                goto lab_0x40344f;\n            }\n            case 253: {\n                // 0x403cc3\n                *(char *)&g38 = 0;\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 259: {\n                // 0x403523\n                v641 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v642 = v311;\n                v639 = 99;\n                if (g120 != NULL) {\n                    int64_t v718 = g40; // 0x403545\n                    int64_t v719 = function_40a910(\"--check\", (int64_t)g120, g4, \"CCc\", 1, v718); // 0x403551\n                    v641 = (int64_t)&g4;\n                    v642 = v718;\n                    v639 = (int64_t)*(char *)(v719 + (int64_t)\"CCc\");\n                }\n                goto lab_0x40355e;\n            }\n            case 260: {\n                char * str6 = g82; // 0x403c7e\n                int64_t v720 = (int64_t)g120; // 0x403c85\n                int64_t v721 = v720; // 0x403c8f\n                if (str6 != NULL) {\n                    // 0x403c91\n                    v721 = 0x100000000000000 * v720 >> 56;\n                    v34 = v85;\n                    v35 = v88;\n                    if (strcmp(str6, g120) != 0) {\n                        goto lab_0x4054c2;\n                    }\n                }\n                // 0x403cab\n                g82 = (char *)v721;\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = v721;\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 261: {\n                // 0x403cb7\n                g81 = 1;\n                v290 = v266;\n                v291 = str3;\n                v292 = v293;\n                v294 = str5;\n                v295 = v296;\n                v297 = v268;\n                v298 = v270;\n                v299 = v272;\n                v300 = v274;\n                v301 = v276;\n                v302 = v278;\n                v303 = v304;\n                v305 = v306;\n                v307 = (int64_t)\"-bcCdfghik:mMno:rRsS:t:T:uVy:z\";\n                v308 = v287;\n                v309 = v281;\n                v310 = v311;\n                v312 = v88;\n                v313 = v314;\n                v315 = v283;\n                v316 = v379;\n                v317 = v286;\n                goto lab_0x40344f;\n            }\n            case 262: {\n                goto lab_0x403c6d;\n            }\n            case 263: {\n                // 0x403b54\n                v612 = (int64_t)g120;\n                v614 = v124;\n                int64_t v722 = function_411b40(v612, 0, 10, &v97, 0, v311); // 0x403b80\n                int32_t v723 = getrlimit(7, (struct rlimit *)&oact); // 0x403b96\n                int64_t v724 = 17; // 0x403bad\n                if (v723 == 0) {\n                    // 0x403baf\n                    v724 = (int64_t)oact + 0xfffffffd & 0xffffffff;\n                }\n                int32_t v725 = 0x1000000 * (int32_t)v722;\n                v616 = v725 >> 24;\n                v611 = v724;\n                if (v725 != 0) {\n                    if (v725 != 0x1000000) {\n                        // 0x4043b2\n                        function_411ab0(v616, (int64_t)v614, 0xffffff84, &g5, (char)v612);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x403bea;\n                } else {\n                    uint32_t v726 = (int32_t)v97; // 0x403bcd\n                    *(int32_t *)&g30 = v726;\n                    if (v97 >= 0x100000000) {\n                        goto lab_0x403bea;\n                    } else {\n                        // 0x403bd8\n                        v19 = v85;\n                        v20 = v612;\n                        if (v726 < 2) {\n                            goto lab_0x405562;\n                        }\n                        // 0x403be1\n                        v290 = v266;\n                        v291 = str3;\n                        v292 = v293;\n                        v294 = str5;\n                        v295 = v296;\n                        v297 = v268;\n                        v298 = v270;\n                        v299 = v272;\n                        v300 = v274;\n                        v301 = v276;\n                        v302 = v278;\n                        v303 = v304;\n                        v305 = v306;\n                        v307 = v97 & 0xffffffff;\n                        v308 = v287;\n                        v309 = v281;\n                        v310 = v616;\n                        v312 = v612;\n                        v313 = v314;\n                        v315 = v283;\n                        v316 = v379;\n                        v317 = v286;\n                        if (v726 > (int32_t)v611) {\n                            goto lab_0x403bea;\n                        } else {\n                            goto lab_0x40344f;\n                        }\n                    }\n                }\n            }\n            case 264: {\n                goto lab_0x403b1f;\n            }\n            case 265: {\n                // 0x4034c4\n                v644 = g40;\n                int64_t v727 = function_40a910(\"--sort\", (int64_t)g120, g3, \"ghMnRV\", 1, v644); // 0x4034e7\n                v643 = (int64_t)*(char *)(v727 + (int64_t)\"ghMnRV\");\n                goto lab_0x4034f4;\n            }\n            case 266: {\n                int64_t v728 = (int64_t)g120;\n                uint32_t v729 = v124; // 0x403aac\n                int64_t v730 = function_411680(v728, 0, 10, (int64_t *)&oact, (int64_t *)&g7, v311); // 0x403ad1\n                int32_t v731 = v730; // 0x403ad6\n                if (v731 == 1) {\n                    goto lab_0x40344f;\n                } else {\n                    if (v731 != 0) {\n                        // 0x4057e6\n                        function_411ab0(v730 & 0xffffffff, (int64_t)v729, 0xffffff87, &g5, (char)v728);\n                        // UNREACHABLE\n                    }\n                    int32_t v732 = (int64_t)oact; // 0x403aef\n                    v290 = v266;\n                    v291 = str3;\n                    v292 = v732;\n                    v294 = str5;\n                    v295 = v296;\n                    v297 = v268;\n                    v298 = v270;\n                    v299 = v272;\n                    v300 = v274;\n                    v301 = v276;\n                    v302 = v278;\n                    v303 = v304;\n                    v305 = v306;\n                    v307 = 10;\n                    v308 = v287;\n                    v309 = v281;\n                    v310 = v311;\n                    v312 = v88;\n                    v313 = v314;\n                    v315 = v283;\n                    v316 = v379;\n                    v317 = v286;\n                    if (oact != NULL) {\n                        goto lab_0x40344f;\n                    } else {\n                        // 0x403afd\n                        error(2, (int32_t)\"number in parallel must be nonzero\" ^ (int32_t)\"number in parallel must be nonzero\", dcgettext(NULL, \"number in parallel must be nonzero\", 5));\n                        v414 = v732;\n                        goto lab_0x403b1f;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40533e;\n            }\n        }\n    }\n  lab_0x403430:;\n    int64_t v263 = v262;\n    int64_t v264 = v258;\n    int64_t v265 = v266; // 0x403432\n    int64_t v267 = v268; // 0x403432\n    int64_t v269 = v270; // 0x403432\n    int32_t v271 = v272; // 0x403432\n    char * v273 = v274; // 0x403432\n    int32_t v275 = v276; // 0x403432\n    int64_t v277 = v278; // 0x403432\n    int64_t v279 = v260; // 0x403432\n    int64_t v280 = v281; // 0x403432\n    int64_t v282 = v283; // 0x403432\n    int64_t v284 = v263; // 0x403432\n    int64_t v285 = v286; // 0x403432\n    if (v287 > v264) {\n        int64_t v288 = v264 + 1; // 0x403438\n        int64_t v289 = *(int64_t *)(8 * v264 + v281); // 0x40343b\n        g49 = v288;\n        *(int64_t *)(8 * v286 + v283) = v289;\n        v290 = v266;\n        v291 = str3;\n        v292 = v293;\n        v294 = str5;\n        v295 = v296;\n        v297 = v268;\n        v298 = v270;\n        v299 = v272;\n        v300 = v274;\n        v301 = v276;\n        v302 = v278;\n        v303 = v304;\n        v305 = v306;\n        v307 = v288 & 0xffffffff;\n        v308 = v287;\n        v309 = v281;\n        v310 = v311;\n        v312 = v88;\n        v313 = v314;\n        v315 = v283;\n        v316 = v263;\n        v317 = v286 + 1;\n        goto lab_0x40344f;\n    } else {\n        goto lab_0x405643;\n    }\n  lab_0x405643:;\n    int64_t v318 = v285;\n    int64_t v319 = v284;\n    int64_t v320 = v282;\n    int64_t v321 = v280;\n    int64_t v322 = v277;\n    int32_t v323 = v275;\n    char * v324 = v273;\n    int32_t v325 = v271;\n    int64_t v326 = v269;\n    int64_t v327 = v267;\n    int64_t v328 = v265;\n    char * v122; // bp-888, 0x402f50\n    char * v329 = v122; // 0x405643\n    int64_t v330 = v328; // 0x405649\n    int64_t v331 = v327; // 0x405649\n    int64_t v332 = v326; // 0x405649\n    int32_t v333 = v325; // 0x405649\n    char * v334 = v324; // 0x405649\n    int32_t v335 = v323; // 0x405649\n    int64_t v336 = v322; // 0x405649\n    int64_t v337 = v321; // 0x405649\n    int64_t v338 = v320; // 0x405649\n    int64_t v339 = v319; // 0x405649\n    int64_t v340 = v318; // 0x405649\n    int64_t v341; // 0x402f50\n    int64_t v80; // 0x402f50\n    if (v329 != NULL) {\n        // 0x40564f\n        v342 = v320;\n        if (v318 != 0) {\n            goto lab_0x4052df_2;\n        }\n        // 0x405658\n        v257 = (int64_t)v329;\n        int64_t v343 = function_407cd0(v257, (int64_t *)\"r\"); // 0x405662\n        if (v343 == 0) {\n            // 0x40576e\n            function_407dd0(v257);\n            goto lab_0x405778;\n        }\n        // 0x405673\n        function_4103a0((int64_t *)&oact, (int64_t)\"r\", v279);\n        int64_t v344 = function_410440(v343, (int64_t *)&oact); // 0x40568b\n        v68 = v257;\n        if ((char)v344 == 0) {\n            goto lab_0x4057af;\n        }\n        // 0x40569d\n        function_407df0(v343, v257);\n        if (oact == NULL) {\n            goto lab_0x405778;\n        }\n        int64_t v345 = (int64_t)oact; // 0x4056a5\n        free((int64_t *)v320);\n        int64_t v346 = v318;\n        int64_t v347 = *(int64_t *)(8 * v346 + v341); // 0x4056e2\n        int64_t v348 = 2; // 0x4056f2\n        int64_t v349 = v347;\n        int64_t v350 = (int64_t)&g19;\n        unsigned char v351 = *(char *)v349; // 0x4056f2\n        char v352 = *(char *)v350; // 0x4056f2\n        char v353 = v352; // 0x4056f2\n        bool v354 = false; // 0x4056f2\n        int64_t v355; // 0x402f50\n        int64_t v356; // 0x402f50\n        while (v351 == v352) {\n            v348--;\n            v355 = v350 + v80;\n            v356 = v349 + v80;\n            v353 = v351;\n            v354 = true;\n            if (v348 == 0) {\n                // break -> \n                break;\n            }\n            v349 = v356;\n            v350 = v355;\n            v351 = *(char *)v349;\n            v352 = *(char *)v350;\n            v353 = v352;\n            v354 = false;\n        }\n        unsigned char v357 = v353;\n        if ((v351 >= v357 && !v354) == v351 < v357) {\n            // 0x4056fd\n            function_40f630(4, v347);\n            error(2, (int32_t)\"when reading file names from stdin, no file name of %s allowed\" ^ (int32_t)\"when reading file names from stdin, no file name of %s allowed\", dcgettext(NULL, \"when reading file names from stdin, no file name of %s allowed\", 5));\n            goto lab_0x405732;\n        }\n        // 0x4056d0\n        if (*(char *)v347 == 0) {\n            goto lab_0x405732;\n        }\n        int64_t v358 = v346 + 1; // 0x4056d0\n        v330 = v328;\n        v331 = v327;\n        v332 = v326;\n        v333 = v325;\n        v334 = v324;\n        v335 = v323;\n        v336 = v322;\n        v337 = v321;\n        v338 = v341;\n        v339 = v319;\n        v340 = v345;\n        while (v358 != v345) {\n            // 0x4056e2\n            v346 = v358;\n            v347 = *(int64_t *)(8 * v346 + v341);\n            v351 = *(char *)v347;\n            v352 = *(char *)(int64_t)&g19;\n            while (v351 == v352) {\n                v348--;\n                v355 = v350 + v80;\n                v356 = v349 + v80;\n                v353 = v351;\n                v354 = true;\n                if (v348 == 0) {\n                    // break -> \n                    break;\n                }\n                v349 = v356;\n                v350 = v355;\n                v351 = *(char *)v349;\n                v352 = *(char *)v350;\n                v353 = v352;\n                v354 = false;\n            }\n            v357 = v352;\n            if ((v351 >= v357 && true) == v351 < v357) {\n                // 0x4056fd\n                function_40f630(4, v347);\n                error(2, (int32_t)\"when reading file names from stdin, no file name of %s allowed\" ^ (int32_t)\"when reading file names from stdin, no file name of %s allowed\", dcgettext(NULL, \"when reading file names from stdin, no file name of %s allowed\", 5));\n                goto lab_0x405732;\n            }\n            // 0x4056d0\n            if (*(char *)v347 == 0) {\n                goto lab_0x405732;\n            }\n            // 0x4056d9\n            v358 = v346 + 1;\n            v330 = v328;\n            v331 = v327;\n            v332 = v326;\n            v333 = v325;\n            v334 = v324;\n            v335 = v323;\n            v336 = v322;\n            v337 = v321;\n            v338 = v341;\n            v339 = v319;\n            v340 = v345;\n        }\n    }\n    goto lab_0x403590;\n  lab_0x40355e:;\n    int64_t v638 = v639;\n    int64_t v123; // bp-904, 0x402f50\n    int64_t v640 = 0x100000000000000 * v123 >> 56; // 0x40355e\n    if ((char)v640 != 0) {\n        // 0x403566\n        v8 = v85;\n        v10 = v88;\n        if ((int32_t)v640 != (int32_t)v638) {\n            goto lab_0x405535;\n        }\n    }\n    // 0x40356f\n    v123 = 0x100000000000000 * v638 >> 56;\n    v290 = v266;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = v641;\n    v308 = v287;\n    v309 = v281;\n    v310 = v642;\n    v312 = v88;\n    v313 = v314;\n    v315 = v283;\n    v316 = v638;\n    v317 = v286;\n    goto lab_0x40344f;\n  lab_0x4034f4:\n    // 0x4034f4\n    oact = (char *)(0x100000000000000 * v643 >> 56);\n    int64_t v373; // bp-568, 0x402f50\n    function_405c00((int64_t *)&oact, &v373, 2);\n    v290 = v266;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = 2;\n    v308 = v287;\n    v309 = v281;\n    v310 = v644;\n    v312 = v88;\n    v313 = v314;\n    v315 = v283;\n    v316 = v643;\n    v317 = v286;\n    goto lab_0x40344f;\n  lab_0x40344f:;\n    int64_t v380 = v290; // 0x402f50\n    char * v381 = v291; // 0x402f50\n    int32_t v382 = v292; // 0x402f50\n    char * v383 = v294; // 0x402f50\n    char v384 = v295; // 0x402f50\n    int64_t v385 = v297; // 0x402f50\n    int64_t v386 = v298; // 0x402f50\n    int32_t v387 = v299; // 0x402f50\n    char * v388 = v300; // 0x402f50\n    int32_t v389 = v301; // 0x402f50\n    int64_t v390 = v302; // 0x402f50\n    int128_t v391 = v303; // 0x402f50\n    int128_t v392 = v305; // 0x402f50\n    int64_t v393 = v307; // 0x402f50\n    int64_t v394 = v308; // 0x402f50\n    int64_t v395 = v309; // 0x402f50\n    int64_t v396 = v310; // 0x402f50\n    int64_t v397 = v312; // 0x402f50\n    int64_t v398 = v313; // 0x402f50\n    int64_t v399 = v315; // 0x402f50\n    int64_t v400 = v316; // 0x402f50\n    int64_t v401 = v317; // 0x402f50\n    goto lab_0x40344f_2;\n  lab_0x403c6d:\n    // 0x403c6d\n    *(int64_t *)&v122 = (int64_t)g120;\n    v290 = v266;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = v408;\n    v308 = v409;\n    v309 = v410;\n    v310 = v411;\n    v312 = v412;\n    v313 = v314;\n    v315 = v283;\n    v316 = v379;\n    v317 = v286;\n    goto lab_0x40344f;\n  lab_0x403b1f:;\n    int32_t v413 = v414;\n    int64_t v415 = (int64_t)g120; // 0x403b24\n    v290 = v266;\n    v291 = g120;\n    v292 = v413;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = v415;\n    v308 = v287;\n    v309 = v281;\n    v310 = v311;\n    v312 = v88;\n    v313 = v314;\n    v315 = v283;\n    v316 = v379;\n    v317 = v286;\n    if (str3 != NULL) {\n        int32_t strcmp_rc = strcmp(str3, g120); // 0x403b38\n        v290 = v266;\n        v291 = g120;\n        v292 = v413;\n        v294 = str5;\n        v295 = v296;\n        v297 = v268;\n        v298 = v270;\n        v299 = v272;\n        v300 = v274;\n        v301 = v276;\n        v302 = v278;\n        v303 = v304;\n        v305 = v306;\n        v307 = v415;\n        v308 = v287;\n        v309 = v281;\n        v310 = v311;\n        v312 = v88;\n        v313 = v314;\n        v315 = v283;\n        v316 = v379;\n        v317 = v286;\n        v32 = v85;\n        v33 = v88;\n        if (strcmp_rc != 0) {\n            goto lab_0x4054a0;\n        }\n    }\n    goto lab_0x40344f;\n  lab_0x403590:;\n    int64_t v359 = v340;\n    v66 = v339;\n    int64_t v360 = v338;\n    v64 = v337;\n    v59 = v336;\n    v57 = v335;\n    v55 = v334;\n    v53 = v333;\n    v51 = v332;\n    v49 = v331;\n    v47 = v330;\n    int64_t v254 = g83; // 0x403590\n    v247 = 0;\n    v248 = v254;\n    int64_t v256; // 0x402f50\n    int64_t v361; // 0x402f50\n    int64_t v362; // 0x402f50\n    int64_t v255; // 0x402f50\n    int64_t v253; // 0x402f50\n    int32_t v363; // 0x402f50\n    int64_t v364; // 0x402f50\n    int64_t v365; // 0x402f50\n    int64_t v366; // 0x402f50\n    int64_t v367; // 0x402f50\n    char * v368; // 0x402f50\n    int32_t v369; // 0x402f50\n    int32_t v249; // 0x402f50\n    int64_t v370; // 0x402f50\n    int64_t v371; // 0x402f50\n    uint32_t v252; // 0x402f50\n    if (v254 == 0) {\n        // 0x404a0a\n        if ((char)function_405af0(v370) == 0) {\n            int64_t v372 = function_411410(&v373, 72); // 0x404fdb\n            if (g83 != 0) {\n                int64_t v374; // 0x402f50\n                int64_t v375 = v374;\n                int64_t v376 = v375 + 64; // 0x404ff1\n                int64_t v377 = *(int64_t *)v376;\n                v374 = v377;\n                while (v377 != 0) {\n                    // 0x404ff1\n                    v375 = v374;\n                    v376 = v375 + 64;\n                    v377 = *(int64_t *)v376;\n                    v374 = v377;\n                }\n            }\n            // 0x404ffb\n            *(int64_t *)(int64_t)&g83 = v372;\n            *(int64_t *)(v372 + 64) = 0;\n            v253 = g83;\n            v255 = v371;\n            v256 = 1;\n            v61 = 0;\n            v43 = v371;\n            v45 = 1;\n            if (g83 != 0) {\n                goto lab_0x403662_2;\n            } else {\n                goto lab_0x4036df;\n            }\n        } else {\n            // 0x404a1f\n            v44 = 0;\n            v46 = 0;\n            if (g81 == 0) {\n                // 0x404fbb\n                v366 = v47;\n                v365 = v49;\n                v364 = v51;\n                v363 = v53;\n                v368 = v55;\n                v369 = v57;\n                v367 = v59;\n                v362 = v64;\n                v361 = v66;\n                goto lab_0x4040a2;\n            } else {\n                goto lab_0x4036ec;\n            }\n        }\n    } else {\n        while (true) {\n          lab_0x403640_2:\n            // 0x403640\n            v242 = v248;\n            v244 = v247;\n            if ((char)function_405af0(v242) != 0) {\n                // 0x4035b0\n                if (*(char *)(v242 + 55) != 0) {\n                    goto lab_0x403650;\n                } else {\n                    // 0x4035ba\n                    *(int64_t *)(v242 + 40) = (int64_t)v1;\n                    *(char *)(v242 + 56) = (char)v1;\n                    *(char *)(v242 + 51) = (char)v249;\n                    int64_t v250 = *(int64_t *)(v242 + 64); // 0x403635\n                    int64_t v251 = v252 | (int32_t)v244; // 0x403639\n                    v245 = v251;\n                    v246 = v250;\n                    v253 = v254;\n                    v255 = v251;\n                    v256 = 0;\n                    if (v250 == 0) {\n                        // break -> 0x403662\n                        break;\n                    }\n                    goto lab_0x403640;\n                }\n            } else {\n                goto lab_0x403650;\n            }\n        }\n        goto lab_0x403662_2;\n    }\n  lab_0x403ef7:;\n    int64_t v378 = (int64_t)g120;\n    *(int64_t *)(8 * v286 + v283) = v378;\n    v290 = v266;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = v378;\n    v308 = v287;\n    v309 = v281;\n    v310 = v311;\n    v312 = v88;\n    v313 = v314;\n    v315 = v283;\n    v316 = v379;\n    v317 = v286 + 1;\n    goto lab_0x40344f;\n  lab_0x4042f4:\n    // 0x4042f4\n    *(int64_t *)v416 = v417;\n    *(int64_t *)(v417 + 64) = 0;\n    v290 = v266;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v268;\n    v298 = v270;\n    v299 = v272;\n    v300 = v274;\n    v301 = v276;\n    v302 = v278;\n    v303 = v304;\n    v305 = v306;\n    v307 = 0;\n    v308 = v287;\n    v309 = v281;\n    v310 = v311;\n    v312 = v88;\n    v313 = v314;\n    v315 = v283;\n    v316 = v379;\n    v317 = v286;\n    goto lab_0x40344f;\n  lab_0x403f7f:;\n    int64_t v418 = v419;\n    int64_t v420 = v421;\n    int64_t v422 = v423;\n    int64_t v424 = v425;\n    int64_t v426 = v427;\n    int64_t v428 = v429;\n    int128_t v430 = v306;\n    int128_t v431 = v432;\n    int64_t v433 = v434;\n    int32_t v435 = v436;\n    char * v437 = v438;\n    int32_t v439 = v440;\n    int64_t v441 = v442;\n    int64_t v443 = v444;\n    int64_t v445 = v446;\n    int64_t v447 = v96; // 0x403f7f\n    v290 = v445;\n    v291 = str3;\n    v292 = v293;\n    v294 = str5;\n    v295 = v296;\n    v297 = v443;\n    v298 = v441;\n    v299 = v439;\n    v300 = v437;\n    v301 = v435;\n    v302 = v433;\n    v303 = v431;\n    v305 = v430;\n    v307 = v447;\n    v308 = v428;\n    v309 = v426;\n    v310 = v311;\n    v312 = v88;\n    v313 = v424;\n    v315 = v422;\n    v316 = v420;\n    v317 = v418;\n    if (v447 >= (int64_t)g91) {\n        uint64_t v448 = 34 * (int64_t)*(int32_t *)&g30; // 0x403f9a\n        g91 = (int128_t)(v448 < v447 ? v447 : v448);\n        v290 = v445;\n        v291 = str3;\n        v292 = v293;\n        v294 = str5;\n        v295 = v296;\n        v297 = v443;\n        v298 = v441;\n        v299 = v439;\n        v300 = v437;\n        v301 = v435;\n        v302 = v433;\n        v303 = v431;\n        v305 = v430;\n        v307 = v447;\n        v308 = v428;\n        v309 = v426;\n        v310 = v311;\n        v312 = v88;\n        v313 = v424;\n        v315 = v422;\n        v316 = v420;\n        v317 = v418;\n    }\n    goto lab_0x40344f;\n  lab_0x4053d6:;\n    int64_t v449 = &g122;\n    int64_t v450 = function_407c00(v449 + 1, &v451, (int64_t)\"invalid number after '.'\"); // 0x4053e7\n    goto lab_0x4044ed;\n  lab_0x403bea:\n    // 0x403bea\n    v123 = 0x100000000 * v611 >> 32;\n    function_40f880(v612);\n    int64_t v613 = *(int64_t *)(32 * (int64_t)v614 + (int64_t)&g5); // 0x403c0e\n    error(0, (int32_t)\"--%s argument %s too large\" ^ (int32_t)\"--%s argument %s too large\", dcgettext(NULL, \"--%s argument %s too large\", 5));\n    int64_t v615 = function_40d330(v123 & 0xffffffff, &v96); // 0x403c3d\n    char * format9 = dcgettext(NULL, \"maximum --%s argument with current rlimit is %s\", 5); // 0x403c51\n    error(2, (int32_t)\"maximum --%s argument with current rlimit is %s\" ^ (int32_t)\"maximum --%s argument with current rlimit is %s\", format9);\n    v408 = (int64_t)format9;\n    v409 = v613;\n    v410 = v615;\n    v411 = v616;\n    v412 = v612;\n    goto lab_0x403c6d;\n  lab_0x403662_2:;\n    int64_t v610 = v256;\n    int64_t v609 = v255;\n    int64_t v617 = v253;\n    unsigned char v618 = *(char *)(v617 + 52); // 0x403662\n    unsigned char v619 = *(char *)(v617 + 50); // 0x403666\n    unsigned char v620 = *(char *)(v617 + 53); // 0x40366c\n    unsigned char v621 = *(char *)(v617 + 54); // 0x403672\n    unsigned char v622 = *(char *)(v617 + 51); // 0x403678\n    uint32_t v623 = *(int32_t *)(v617 + 56); // 0x40367c\n    int64_t v624 = *(int64_t *)(v617 + 32); // 0x40367f\n    uint32_t v625 = v623 % 256 | (int32_t)v622 | (int32_t)(v624 != 0);\n    int64_t v607 = v617; // 0x403692\n    if ((int32_t)v619 + (int32_t)v618 + (int32_t)v620 + (int32_t)v621 + v625 < 2) {\n        int64_t v626 = *(int64_t *)(v617 + 64); // 0x4036d6\n        int64_t v627 = v626; // 0x4036dd\n        v61 = v625;\n        v43 = v609;\n        v45 = v610;\n        if (v626 != 0) {\n            int64_t v628 = v627;\n            unsigned char v629 = *(char *)(v628 + 52); // 0x4036a0\n            unsigned char v630 = *(char *)(v628 + 50); // 0x4036a4\n            unsigned char v631 = *(char *)(v628 + 53); // 0x4036aa\n            unsigned char v632 = *(char *)(v628 + 54); // 0x4036b0\n            int64_t v633 = (int64_t)v630 + (int64_t)v629 + (int64_t)v631 + (int64_t)v632; // 0x4036b4\n            char v634 = *(char *)(v628 + 56); // 0x4036b6\n            char v635 = *(char *)(v628 + 51); // 0x4036ba\n            int64_t v636 = *(int64_t *)(v628 + 32); // 0x4036bd\n            v607 = v628;\n            while ((int32_t)(v633 + (int64_t)(v635 | v634 || (char)(v636 != 0))) <= 1) {\n                int64_t v637 = *(int64_t *)(v628 + 64); // 0x4036d6\n                v627 = v637;\n                v61 = v633;\n                v43 = v609;\n                v45 = v610;\n                if (v637 == 0) {\n                    goto lab_0x4036df;\n                }\n                v628 = v627;\n                v629 = *(char *)(v628 + 52);\n                v630 = *(char *)(v628 + 50);\n                v631 = *(char *)(v628 + 53);\n                v632 = *(char *)(v628 + 54);\n                v633 = (int64_t)v630 + (int64_t)v629 + (int64_t)v631 + (int64_t)v632;\n                v634 = *(char *)(v628 + 56);\n                v635 = *(char *)(v628 + 51);\n                v636 = *(int64_t *)(v628 + 32);\n                v607 = v628;\n            }\n            goto lab_0x405348;\n        } else {\n            goto lab_0x4036df;\n        }\n    } else {\n        goto lab_0x405348;\n    }\n  lab_0x40536f:;\n    int128_t v608 = __asm_subsd(v304, v306); // 0x40536f\n    v96 = __asm_cvttsd2si(v608) ^ -0x8000000000000000;\n    v446 = v47;\n    v444 = v49;\n    v442 = v51;\n    v440 = v53;\n    v438 = v55;\n    v436 = v57;\n    v434 = v59;\n    v432 = v608;\n    v429 = v609;\n    v427 = v64;\n    v425 = v610;\n    v423 = v360;\n    v421 = v66;\n    v419 = v359;\n    goto lab_0x403f7f;\n  lab_0x4044ed:\n    // 0x4044ed\n    if (v451 == 0) {\n        int64_t v452 = v453; // 0x4044f8\n        if (v452 != 0) {\n            // 0x404505\n            v453 = v452 - 1;\n        }\n    }\n    char v454 = *(char *)function_405c00((int64_t *)v450, &v455, 1); // 0x404526\n    v14 = v85;\n    v15 = v88;\n    if (v454 != 0) {\n        goto lab_0x405549;\n    }\n    goto lab_0x40452f;\n  lab_0x4036ec:\n    // 0x4036ec\n    v38 = v85;\n    v39 = v88;\n    if (str5 == NULL != ((char)v123 == 0)) {\n        goto lab_0x405506;\n    }\n    // 0x403702\n    v188 = v46;\n    int64_t v508 = v44;\n    char * v606; // 0x40434e\n    if (v55 == NULL) {\n        // 0x404342\n        v606 = dcgettext(NULL, \"failed to set locale\", 5);\n        error(0, (int32_t)\"failed to set locale\" ^ (int32_t)\"failed to set locale\", \"%s\", v606);\n        goto lab_0x403726;\n    } else {\n        // 0x40370e\n        if (setlocale(LC_COLLATE, (char *)&g7) == NULL) {\n            // 0x404342\n            v606 = dcgettext(NULL, \"failed to set locale\", 5);\n            error(0, (int32_t)\"failed to set locale\" ^ (int32_t)\"failed to set locale\", \"%s\", v606);\n            goto lab_0x403726;\n        } else {\n            goto lab_0x403726;\n        }\n    }\n  lab_0x405348:\n    // 0x405348\n    *(char *)(v607 + 55) = 0;\n    *(int16_t *)(v607 + 48) = 0;\n    function_405b50((char)v607, &v96);\n    function_405d00(&v96);\n    goto lab_0x40536f;\n  lab_0x40452f:\n    // 0x40452f\n    v417 = function_411410(&v455, 72);\n    v416 = &g83;\n    if (g83 != 0) {\n        int64_t v456; // 0x402f50\n        int64_t v457 = v456 + 64; // 0x40455e\n        int64_t v458 = *(int64_t *)v457;\n        int64_t v459; // 0x404544\n        v417 = v459;\n        v416 = v457;\n        v456 = v458;\n        while (v458 != 0) {\n            // 0x40455e\n            v457 = v456 + 64;\n            v458 = *(int64_t *)v457;\n            v417 = v459;\n            v416 = v457;\n            v456 = v458;\n        }\n    }\n    goto lab_0x4042f4;\n  lab_0x40408c:;\n    int64_t v460 = v67;\n    int64_t v461 = v65;\n    int64_t v462 = v60;\n    char * v463 = v56;\n    int32_t v464 = v54;\n    int64_t v465 = v52;\n    int64_t v466 = v50;\n    int64_t v467 = v48;\n    v366 = v467;\n    v365 = v466;\n    v364 = v465;\n    v363 = v464;\n    v368 = v463;\n    v369 = v58;\n    v367 = v462;\n    v362 = v461;\n    v361 = v460;\n    int32_t v468; // 0x402f50\n    char v469; // 0x402f50\n    if ((char)v63 != 0) {\n        int64_t v470 = function_40f900((int64_t)str3, 16, v62); // 0x4045aa\n        if (v470 == 0) {\n            goto lab_0x40543a;\n        }\n        // 0x4045c5\n        function_40fc10(v470, &v96, 16);\n        v24 = v85;\n        v25 = v88;\n        if ((int32_t)function_40fd70(v470) != 0) {\n            goto lab_0x405430;\n        }\n        // 0x4045f2\n        function_40aa90(&g60);\n        function_40b360(v469, 16, &g60);\n        v366 = v467;\n        v365 = v466;\n        v364 = v465;\n        v363 = v464;\n        v368 = v463;\n        v369 = v468;\n        v367 = v462;\n        v362 = v461;\n        v361 = v460;\n    }\n    goto lab_0x4040a2;\n  lab_0x4040a2:\n    // 0x4040a2\n    if (g89 == 0) {\n        char * env_val2 = getenv(\"TMPDIR\"); // 0x4049ef\n        function_40a010(env_val2 == NULL ? (int64_t)\"/tmp\" : (int64_t)env_val2);\n    }\n    int64_t v471 = v360; // 0x4040b3\n    int64_t v472 = v359; // 0x4040b3\n    if (v359 == 0) {\n        // 0x4049c3\n        free((int64_t *)v360);\n        int64_t v473 = function_411210(8); // 0x4049d6\n        *(int64_t *)v473 = (int64_t)&g19;\n        v471 = v473;\n        v472 = 1;\n    }\n    int64_t v474 = v471;\n    uint64_t v475 = (int64_t)g91; // 0x4040b9\n    if (v475 != 0) {\n        uint64_t v476 = 34 * (int64_t)*(int32_t *)&g30; // 0x4040cb\n        g91 = v476 < v475 ? v475 : v476;\n    }\n    char v477 = v123;\n    if (v477 == 0) {\n        goto lab_0x404653;\n    }\n    char * v101; // 0x402f50\n    int64_t v99; // 0x402f50\n    int64_t result; // 0x402f50\n    int64_t v478; // 0x402f50\n    int64_t v103; // 0x402f50\n    int64_t v95; // 0x4040fd\n    int64_t v94; // 0x404109\n    char v129; // 0x40417e\n    int64_t v111; // 0x40414b\n    int64_t v108; // 0x4041ae\n    if (v472 < 2) {\n        if (str5 != NULL) {\n            // 0x405800\n            *(char *)&g27 = v477;\n            function_405d00(&g27);\n            // 0x405814\n            function_407dd0(v474);\n            goto lab_0x40581c;\n        } else {\n            // 0x4040fd\n            v95 = *(int64_t *)v474;\n            v94 = function_407cd0(v95, (int64_t *)\"r\");\n            if (v94 == 0) {\n                // 0x405814\n                function_407dd0(v95);\n                goto lab_0x40581c;\n            } else {\n                uint64_t v479 = g33; // 0x404135\n                uint64_t v480 = (int64_t)g91; // 0x40413c\n                function_405e30(&v96, 32, v479 <= v480 ? v480 : v479);\n                v97 = 0;\n                v122 = NULL;\n                v129 = v478;\n                result = 0;\n                if ((char)function_4074d0(v129, v94, v95) == 0) {\n                    goto lab_0x4042b7;\n                } else {\n                    // 0x404196\n                    v111 = (int64_t)(*(char *)&g85 ^ 1);\n                    v108 = 32 * v103;\n                    v101 = NULL;\n                    v99 = 0;\n                    goto lab_0x404196_2;\n                }\n            }\n        }\n    }\n    // 0x405608\n    function_40f630(4, *(int64_t *)(v474 + 8));\n    char * format3 = dcgettext(NULL, \"extra operand %s not allowed with -%c\", 5); // 0x405625\n    error(2, (int32_t)\"extra operand %s not allowed with -%c\" ^ (int32_t)\"extra operand %s not allowed with -%c\", format3);\n    v265 = v366;\n    v267 = v365;\n    v269 = v364;\n    v271 = v363;\n    v273 = v368;\n    v275 = v369;\n    v277 = v367;\n    v279 = (int64_t)format3;\n    v280 = v362;\n    v282 = v474;\n    v284 = v361;\n    v285 = v472;\n    goto lab_0x405643;\n  lab_0x404473:;\n    int64_t v481 = v482;\n    v455 = -1;\n    v483 = v481;\n    goto lab_0x40447f;\n  lab_0x40447f:;\n    int64_t v484 = v483;\n    v485 = v484;\n    if (v484 == 0) {\n        goto lab_0x405244;\n    } else {\n        goto lab_0x404488;\n    }\n  lab_0x404488:;\n    int64_t v486 = v485;\n    int64_t v487 = function_405c00((int64_t *)v486, &v455, 0); // 0x404495\n    char v488 = *(char *)v487; // 0x40449a\n    int64_t v87; // 0x402f50\n    int64_t v82; // 0x402f50\n    int64_t v86; // 0x402f50\n    int64_t v84; // 0x402f50\n    if (v488 != 0) {\n        goto lab_0x405244;\n    } else {\n        // 0x4044a3\n        if (v489 == 0) {\n            goto lab_0x40452f;\n        } else {\n            int32_t v490 = g49; // 0x4044ae\n            int64_t v491 = *(int64_t *)(8 * (int64_t)v490 + v281); // 0x4044bd\n            g49 = &g50;\n            int64_t v492 = function_407c00(v491 + 1, (int64_t *)v266, (int64_t)\"invalid number after '-'\"); // 0x4044d6\n            if (v492 == 0) {\n                // 0x4053f1\n                __assert_fail(\"s\", \"src/sort.c\", 0x110d, \"main\");\n                int64_t v493 = v88; // 0x405405\n                int64_t v494 = v286; // 0x405405\n                int64_t v495 = v494;\n                int64_t v496 = v493;\n                int64_t v497 = *(int64_t *)(v85 + 96); // 0x40540a\n                v82 = v497 + 8 * v495;\n                v84 = v85;\n                v86 = (int64_t)\"stat failed\";\n                v87 = v496;\n                goto lab_0x40541e;\n            }\n            char v498 = *(char *)v492; // 0x4044e4\n            if (v498 == 46) {\n                goto lab_0x4053d6;\n            } else {\n                goto lab_0x4044ed;\n            }\n        }\n    }\n  lab_0x403726:;\n    // 0x403726\n    int64_t v499; // 0x402f50\n    if (g103 != 0) {\n        // 0x404304\n        function_40f880((int64_t)setlocale(LC_COLLATE, NULL));\n        char * format4 = dcgettext(NULL, \"using %s sorting rules\", 5); // 0x404327\n        error(0, (int32_t)\"using %s sorting rules\" ^ (int32_t)\"using %s sorting rules\", format4);\n        v499 = (int64_t)format4;\n    } else {\n        // 0x403733\n        error(0, (int32_t)\"using simple byte comparison\" ^ (int32_t)\"using simple byte comparison\", \"%s\", dcgettext(NULL, \"using simple byte comparison\", 5));\n        v499 = (int64_t)\"%s\";\n    }\n    // 0x403757\n    __asm_rep_movsd_memcpy((char *)&v96, (char *)&v373, 18);\n    int64_t v500 = v47; // 0x403782\n    int64_t v501 = v49; // 0x403782\n    int64_t v502 = v51; // 0x403782\n    int32_t v503 = v53; // 0x403782\n    char * v504 = v55; // 0x403782\n    int64_t v505 = v59; // 0x403782\n    int64_t v506 = v499; // 0x403782\n    int64_t v507 = v508; // 0x403782\n    int64_t v509 = 1; // 0x403782\n    int64_t v510 = 0; // 0x403782\n    if (g83 != 0) {\n        // 0x403788\n        v215 = v49;\n        v216 = v51;\n        v217 = v53;\n        v218 = g83;\n        v219 = 1;\n        v221 = g83;\n        int64_t v231; // bp-759, 0x402f50\n        while (true) {\n          lab_0x4038ad:\n            // 0x4038ad\n            v209 = v219;\n            v190 = v218;\n            v213 = v217;\n            v206 = v216;\n            v202 = v215;\n            v196 = (int64_t *)v190;\n            int64_t v222 = *v196; // 0x4038b1\n            v197 = (int64_t *)(v190 + 16);\n            int64_t v223 = *v197; // 0x4038b4\n            int64_t v224 = v223; // 0x4038b8\n            int64_t v225 = v221; // 0x4038b8\n            int64_t v226 = v222; // 0x4038b8\n            if (*(char *)(v190 + 57) != 0) {\n                int64_t v227 = v222 == -1 ? 0 : v222; // 0x4038cc\n                int64_t v228; // bp-792, 0x402f50\n                int64_t v229 = function_40d370(v227, &v228); // 0x4038d3\n                v124 = 43;\n                int64_t * v230 = __stpcpy_chk((char *)&v231, (char *)v229, 45); // 0x4038ed\n                int64_t v232 = function_40d370(v227 + 1, &v228); // 0x403906\n                v97 = 0x206b2d;\n                int64_t v233; // bp-709, 0x402f50\n                int64_t * v234 = __stpcpy_chk((char *)&v233, (char *)v232, 44); // 0x403922\n                v122 = (char *)v234;\n                if (*v197 != -1) {\n                    int64_t v235 = v223 + 1; // 0x403933\n                    int64_t str = function_40d370(v235, &v228); // 0x40393f\n                    *(int16_t *)v230 = 0x2d20;\n                    strcpy((char *)((int64_t)v230 + 2), (char *)str);\n                    int64_t v236 = *(int64_t *)(v190 + 24); // 0x403958\n                    int64_t str2 = function_40d370(v235 + (int64_t)(v236 == -1), &v228); // 0x403969\n                    *(char *)v234 = 44;\n                    strcpy((char *)((int64_t)v234 + 1), (char *)str2);\n                }\n                // 0x403982\n                v225 = function_40f860(1, &v97);\n                function_40f860(0, (int64_t *)&v124);\n                error(0, (int32_t)\"obsolescent key %s used; consider %s instead\" ^ (int32_t)\"obsolescent key %s used; consider %s instead\", dcgettext(NULL, \"obsolescent key %s used; consider %s instead\", 5));\n                v226 = *v196;\n                v224 = *v197;\n            }\n            uint64_t v237 = v226;\n            v220 = v225;\n            int64_t v238 = v188 & 0xffffffff; // 0x4039d7\n            int64_t v239 = v224; // 0x4039d7\n            if (v237 != -1 && v224 < v237) {\n                // 0x4039de\n                error(0, (int32_t)\"key %lu has zero width and will be ignored\" ^ (int32_t)\"key %lu has zero width and will be ignored\", dcgettext(NULL, \"key %lu has zero width and will be ignored\", 5));\n                v239 = *v197;\n                v238 = 1;\n            }\n            // 0x403a09\n            v189 = v238;\n            v194 = v190 + 48;\n            v240 = (int64_t *)v194;\n            v195 = *v240 & 0xffff00ff0000;\n            int32_t v241 = 1; // 0x403a1c\n            if (v195 == 0) {\n                // 0x403a1e\n                v241 = (int32_t)*(char *)(v190 + 54);\n            }\n            // 0x403a22\n            v193 = v241;\n            if (v239 == 0) {\n                // 0x4037b0\n                if (*(int64_t *)(v190 + 24) == 0) {\n                    goto lab_0x403a2b;\n                } else {\n                    // 0x4037bb\n                    v191 = v195;\n                    v192 = v195;\n                    if ((char)v189 == 0 || (char)v188 == 0) {\n                        goto lab_0x4037c3;\n                    } else {\n                        goto lab_0x4037f0;\n                    }\n                }\n            } else {\n                goto lab_0x403a2b;\n            }\n        }\n      lab_0x403fb1:\n        // 0x403fb1\n        v500 = v360;\n        v501 = v204;\n        v502 = v208;\n        v503 = v214;\n        v504 = (char *)&v231;\n        v505 = v359;\n        v506 = v200;\n        v507 = v508 % 256;\n        v509 = v210;\n        v510 = v220;\n    }\n    int64_t v511 = v510;\n    int64_t v512 = v507;\n    int64_t v513 = v505;\n    char * v514 = v504;\n    int32_t v515 = v503;\n    int64_t v516 = v502;\n    int64_t v517 = v501;\n    int64_t v518 = v500;\n    char v519; // 0x402f50\n    int64_t v520; // 0x402f50\n    int64_t v521; // 0x402f50\n    int64_t v522; // 0x402f50\n    int32_t v523; // 0x402f50\n    int32_t v524; // 0x402f50\n    int64_t v110; // 0x402f50\n    if ((char)function_405af0(0x100000000000000 * (int64_t)v468 >> 56) != 0) {\n        int64_t v525 = v509;\n        int64_t v526 = v506;\n        v48 = v518;\n        v50 = v517;\n        v52 = v516;\n        v54 = v515;\n        v56 = v514;\n        v58 = v468;\n        v60 = v513;\n        v62 = v526;\n        v63 = v512;\n        v65 = v525;\n        v67 = v511;\n        if ((char)v515 == 0) {\n            goto lab_0x40408c;\n        } else {\n            // 0x404a3f\n            if (g86 != 0) {\n                // 0x4050de\n                v48 = v518;\n                v50 = v517;\n                v52 = v516;\n                v54 = v515;\n                v56 = v514;\n                v58 = v468;\n                v60 = v513;\n                v62 = v526;\n                v63 = v512;\n                v65 = v525;\n                v67 = v511;\n                if (g83 == 0) {\n                    goto lab_0x40408c;\n                } else {\n                    // 0x4050ec\n                    function_405b50(v469, &v97);\n                    int64_t v527 = v110; // 0x40510a\n                    int64_t v528 = -1; // 0x40510a\n                    int64_t v529 = 0; // 0x40510a\n                    while (v528 != 0) {\n                        int64_t v530 = v527;\n                        v528--;\n                        v527 = v530 + v80;\n                        v529 = v528;\n                        if (*(char *)v530 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v529 = 0;\n                    }\n                    char * format5 = dcngettext(NULL, \"option '-%s' is ignored\", \"options '-%s' are ignored\", -2 - (int32_t)v529, 5); // 0x405128\n                    error(0, (int32_t)\"option '-%s' is ignored\" ^ (int32_t)\"option '-%s' is ignored\", format5);\n                    v523 = 1;\n                    v521 = (int64_t)format5;\n                    goto lab_0x404051;\n                }\n            } else {\n                char v531 = *(char *)&g85; // 0x404a4c\n                v519 = v531;\n                v524 = v515;\n                v522 = v526;\n                v520 = v525;\n                if (v531 == 0 || g83 == 0) {\n                    goto lab_0x40405a;\n                } else {\n                    // 0x404a67\n                    function_405b50(v469, &v97);\n                    int64_t v532 = v110; // 0x404a85\n                    int64_t v533 = -1; // 0x404a85\n                    int64_t v534 = 0; // 0x404a85\n                    while (v533 != 0) {\n                        int64_t v535 = v532;\n                        v533--;\n                        v532 = v535 + v80;\n                        v534 = v533;\n                        if (*(char *)v535 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v534 = 0;\n                    }\n                    char * format6 = dcngettext(NULL, \"option '-%s' is ignored\", \"options '-%s' are ignored\", -2 - (int32_t)v534, 5); // 0x404aa3\n                    error(0, (int32_t)\"option '-%s' is ignored\" ^ (int32_t)\"option '-%s' is ignored\", format6);\n                    v523 = 0x1000000 * v515 >> 24;\n                    v521 = (int64_t)format6;\n                    goto lab_0x404051;\n                }\n            }\n        }\n    } else {\n        // 0x403fdb\n        function_405b50(v469, &v97);\n        int64_t v536 = v110; // 0x404013\n        int64_t v537 = -1; // 0x404013\n        int64_t v538 = 0; // 0x404013\n        while (v537 != 0) {\n            int64_t v539 = v536;\n            v537--;\n            v536 = v539 + v80;\n            v538 = v537;\n            if (*(char *)v539 == 0) {\n                // break -> \n                break;\n            }\n            v538 = 0;\n        }\n        char * format7 = dcngettext(NULL, \"option '-%s' is ignored\", \"options '-%s' are ignored\", -2 - (int32_t)v538, 5); // 0x40402e\n        int64_t v540 = (int64_t)format7; // 0x40402e\n        error(0, (int32_t)\"option '-%s' is ignored\" ^ (int32_t)\"option '-%s' is ignored\", format7);\n        int32_t v541 = 0x1000000 * v515 >> 24; // 0x404044\n        v523 = v541;\n        v521 = v540;\n        v48 = v518;\n        v50 = v517;\n        v52 = v516;\n        v54 = v541;\n        v56 = v514;\n        v58 = v468;\n        v60 = v513;\n        v62 = v540;\n        v63 = v512;\n        v65 = v110;\n        v67 = v511;\n        if ((char)v515 == 0) {\n            goto lab_0x40408c;\n        } else {\n            goto lab_0x404051;\n        }\n    }\n  lab_0x405244:\n    // 0x405244\n    goto lab_0x403ef7;\n  lab_0x404051:;\n    int64_t v542 = v521;\n    int32_t v543 = v523;\n    v48 = v518;\n    v50 = v517;\n    v52 = v516;\n    v54 = v543;\n    v56 = v514;\n    v58 = v468;\n    v60 = v513;\n    v62 = v542;\n    v63 = v512;\n    v65 = v110;\n    v67 = v511;\n    if (g86 != 0) {\n        goto lab_0x40408c;\n    } else {\n        // 0x404051\n        v519 = *(char *)&g85;\n        v524 = v543;\n        v522 = v542;\n        v520 = v110;\n        goto lab_0x40405a;\n    }\n  lab_0x40405a:;\n    int64_t v544 = v520;\n    int32_t v545 = v524;\n    v48 = v518;\n    v50 = v517;\n    v52 = v516;\n    v54 = v545;\n    v56 = v514;\n    v58 = v468;\n    v60 = v513;\n    v62 = v522;\n    v63 = v512;\n    v65 = v544;\n    v67 = v511;\n    if (g83 != 0 && v519 == 0) {\n        char * format8 = dcgettext(NULL, \"option '-r' only applies to last-resort comparison\", 5); // 0x404079\n        error(0, (int32_t)\"option '-r' only applies to last-resort comparison\" ^ (int32_t)\"option '-r' only applies to last-resort comparison\", format8);\n        v48 = v518;\n        v50 = v517;\n        v52 = v516;\n        v54 = v545;\n        v56 = v514;\n        v58 = v468;\n        v60 = v513;\n        v62 = (int64_t)format8;\n        v63 = v512;\n        v65 = v544;\n        v67 = v511;\n    }\n    goto lab_0x40408c;\n  lab_0x403062:;\n    // 0x403062\n    uint16_t v546; // 0x4030c6\n    uint64_t v547 = (int64_t)v546; // 0x4030c6\n    int64_t v548; // 0x402f50\n    *(char *)(v548 + (int64_t)&g98) = 1;\n    *(char *)(v548 + (int64_t)&g96) = (char)(v546 / 0x4000) % 2 ^ 1;\n    int64_t v549 = 0; // 0x403089\n    if ((v547 & 8) == 0) {\n        // 0x40308b\n        v549 = (v547 % 2 | (int64_t)(v548 == 10)) ^ 1;\n    }\n    // 0x40309d\n    *(char *)(v548 + (int64_t)&g94) = (char)v549;\n    int32_t ** v550; // 0x403045\n    int32_t v551 = *(int32_t *)(4 * v548 + (int64_t)*v550); // 0x4030ab\n    *(char *)(v548 + 0x61c780) = (char)v551;\n    if (v548 == 255) {\n        // break -> 0x403130\n        goto lab_0x403130;\n    }\n    int64_t v552 = v548 + 1; // 0x402f50\n    goto lab_0x4030bd_2;\n  lab_0x403017:;\n    int64_t v557 = *(int64_t *)((int64_t)locale_info + 8); // 0x403017\n    unsigned char v558 = *(char *)v557; // 0x40301b\n    g104 = v558;\n    if (v558 == 0) {\n        // 0x403110\n        g104 = -1;\n        goto lab_0x403036;\n    } else {\n        // 0x40302c\n        if (*(char *)(v557 + 1) != 0) {\n            // 0x403110\n            g104 = -1;\n            goto lab_0x403036;\n        } else {\n            goto lab_0x403036;\n        }\n    }\n  lab_0x403036:\n    // 0x403036\n    v85 = &v123;\n    g84 = 0;\n    int16_t ** v554 = __ctype_b_loc(); // 0x40303d\n    v550 = __ctype_toupper_loc();\n    v552 = 0;\n    while (true) {\n      lab_0x4030bd_2:\n        // 0x4030bd\n        v548 = v552;\n        int64_t v553 = (int64_t)*v554;\n        v546 = *(int16_t *)(2 * v548 + v553);\n        if (v546 % 2 != 0) {\n            goto lab_0x403062;\n        } else {\n            // 0x4030cf\n            if (v548 != 10) {\n                goto lab_0x403062;\n            } else {\n                uint16_t v555 = *(int16_t *)(v553 + 20); // 0x4030d5\n                *(char *)&g99 = 1;\n                *(char *)&g95 = 0;\n                *(char *)&g97 = (char)(v555 / 0x4000) % 2 ^ 1;\n                int32_t v556 = *(int32_t *)((int64_t)*v550 + 40); // 0x4030fa\n                *(char *)&g93 = (char)v556;\n                // 0x4030bd\n                v552 = 11;\n                goto lab_0x4030bd_2;\n            }\n        }\n    }\n  lab_0x403130:;\n    int64_t v559 = a1; // 0x403133\n    int64_t v560 = 1; // 0x403133\n    int64_t v561; // 0x402f50\n    if (v4 != 0) {\n        // 0x403139\n        v123 = 0x100000000 * a1 >> 32;\n        int64_t v562 = 1; // 0x403142\n        int32_t v563 = v562;\n        char * str4 = nl_langinfo(v563 + 0x2000d); // 0x40314f\n        int32_t len = strlen(str4); // 0x40315a\n        int64_t v564 = len; // 0x40315a\n        int64_t v565 = function_411210(v564 + 1); // 0x403166\n        int64_t v566 = 16 * v562; // 0x40316e\n        *(int64_t *)(v566 + (int64_t)&g34) = v565;\n        *(int32_t *)(v566 + (int64_t)&g35) = v563;\n        int64_t v567 = v565; // 0x403183\n        int64_t v568; // 0x402f50\n        int64_t v569 = v568; // 0x403183\n        int64_t v570; // 0x402f50\n        int64_t v571; // 0x402f50\n        int64_t v572; // 0x402f50\n        int64_t v573; // 0x402f50\n        int64_t v574; // 0x40314f\n        int64_t v575; // 0x403190\n        int64_t v576; // 0x4031a0\n        int64_t v577; // 0x4031c1\n        char v578; // 0x4031ad\n        int64_t v579; // 0x4031b4\n        if (len != 0) {\n            // 0x403189\n            v574 = (int64_t)str4;\n            v575 = v564 + v574;\n            v577 = v574;\n            v570 = 0;\n            v571 = v565;\n            v576 = (int64_t)*(char *)v577;\n            v572 = v571;\n            v579 = v570;\n            if (*(char *)(2 * v576 + (int64_t)*v554) % 2 == 0) {\n                // 0x4031ad\n                v578 = *(char *)(v576 + (int64_t)&g92);\n                v579 = v570 + 1;\n                *(char *)v571 = v578;\n                v572 = v579 + v565;\n            }\n            // 0x4031c1\n            v573 = v572;\n            v577++;\n            v567 = v573;\n            v569 = v575;\n            while (v575 != v577) {\n                // 0x4031a0\n                v570 = v579;\n                v571 = v573;\n                v576 = (int64_t)*(char *)v577;\n                v572 = v571;\n                v579 = v570;\n                if (*(char *)(2 * v576 + (int64_t)*v554) % 2 == 0) {\n                    // 0x4031ad\n                    v578 = *(char *)(v576 + (int64_t)&g92);\n                    v579 = v570 + 1;\n                    *(char *)v571 = v578;\n                    v572 = v579 + v565;\n                }\n                // 0x4031c1\n                v573 = v572;\n                v577++;\n                v567 = v573;\n                v569 = v575;\n            }\n        }\n        int64_t v580 = v569;\n        int64_t v581 = v567;\n        v562++;\n        *(char *)v581 = 0;\n        v568 = v580;\n        while (v562 != 13) {\n            // 0x403148\n            v563 = v562;\n            str4 = nl_langinfo(v563 + 0x2000d);\n            len = strlen(str4);\n            v564 = len;\n            v565 = function_411210(v564 + 1);\n            v566 = 16 * v562;\n            *(int64_t *)(v566 + (int64_t)&g34) = v565;\n            *(int32_t *)(v566 + (int64_t)&g35) = v563;\n            v567 = v565;\n            v569 = v568;\n            if (len != 0) {\n                // 0x403189\n                v574 = (int64_t)str4;\n                v575 = v564 + v574;\n                v577 = v574;\n                v570 = 0;\n                v571 = v565;\n                v576 = (int64_t)*(char *)v577;\n                v572 = v571;\n                v579 = v570;\n                if (*(char *)(2 * v576 + (int64_t)*v554) % 2 == 0) {\n                    // 0x4031ad\n                    v578 = *(char *)(v576 + (int64_t)&g92);\n                    v579 = v570 + 1;\n                    *(char *)v571 = v578;\n                    v572 = v579 + v565;\n                }\n                // 0x4031c1\n                v573 = v572;\n                v577++;\n                v567 = v573;\n                v569 = v575;\n                while (v575 != v577) {\n                    // 0x4031a0\n                    v570 = v579;\n                    v571 = v573;\n                    v576 = (int64_t)*(char *)v577;\n                    v572 = v571;\n                    v579 = v570;\n                    if (*(char *)(2 * v576 + (int64_t)*v554) % 2 == 0) {\n                        // 0x4031ad\n                        v578 = *(char *)(v576 + (int64_t)&g92);\n                        v579 = v570 + 1;\n                        *(char *)v571 = v578;\n                        v572 = v579 + v565;\n                    }\n                    // 0x4031c1\n                    v573 = v572;\n                    v577++;\n                    v567 = v573;\n                    v569 = v575;\n                }\n            }\n            // 0x4031ca\n            v580 = v569;\n            v581 = v567;\n            v562++;\n            *(char *)v581 = 0;\n            v568 = v580;\n        }\n        // 0x4031dc\n        qsort((int64_t *)&g36, 12, 16, (int32_t (*)(int64_t *, int64_t *))0x405cf0);\n        v559 = v123;\n        v560 = v581;\n        v561 = v580;\n    }\n    // 0x4031f8\n    sigemptyset((struct _TYPEDEF_sigset_t *)&g73);\n    int32_t sig_num = 14;\n    int64_t v582 = 0;\n    sigaction(sig_num, NULL, (struct sigaction *)&oact);\n    if (oact != (char *)1) {\n        // 0x403235\n        sigaddset((struct _TYPEDEF_sigset_t *)&g73, sig_num);\n    }\n    while (v582 != 10) {\n        int64_t v583 = v582 + 1; // 0x403242\n        sig_num = *(int32_t *)(4 * v583 + (int64_t)&g1);\n        v582 = v583;\n        sigaction(sig_num, NULL, (struct sigaction *)&oact);\n        if (oact != (char *)1) {\n            // 0x403235\n            sigaddset((struct _TYPEDEF_sigset_t *)&g73, sig_num);\n        }\n    }\n    int64_t v584 = (int64_t)&oact; // 0x40321a\n    int128_t v585 = __asm_movdqa(*(int128_t *)&g73); // 0x40324c\n    int128_t v586 = __asm_movdqa(g74); // 0x403254\n    oact = (char *)0x405d80;\n    int128_t v587 = __asm_movdqa(g75); // 0x40326e\n    int128_t v588 = __asm_movdqa(g76); // 0x403276\n    __asm_movups(v1, v585);\n    int128_t v589 = __asm_movdqa(g77); // 0x403294\n    int128_t v590 = __asm_movdqa(g78); // 0x40329c\n    int128_t v591 = __asm_movdqa(g79); // 0x4032a4\n    int128_t v592 = __asm_movdqa(g80); // 0x4032ac\n    __asm_movups(v1, v586);\n    __asm_movups(v1, v587);\n    __asm_movups(v1, v588);\n    __asm_movups(v1, v589);\n    __asm_movups(v1, v590);\n    __asm_movups(v1, v591);\n    __asm_movups(v1, v592);\n    int64_t v593 = v584; // 0x4032ec\n    int64_t v594 = 0; // 0x4032ec\n    int32_t v595 = 14; // 0x4032ec\n    int64_t v596; // 0x402f50\n    while (true) {\n        int32_t sig_num2 = v595;\n        int64_t v597 = v594;\n        int64_t v598; // 0x402f50\n        if (sigismember((struct _TYPEDEF_sigset_t *)&g73, sig_num2) == 0) {\n            // 0x4032f0\n            v598 = v593;\n            v596 = v593;\n            if (v597 == 10) {\n                // break -> 0x40332f\n                break;\n            }\n        } else {\n            // 0x403313\n            sigaction(sig_num2, (struct sigaction *)&oact, NULL);\n            v598 = 0;\n            v596 = 0;\n            if (v597 == 10) {\n                // break -> 0x40332f\n                break;\n            }\n        }\n        int64_t v599 = v597 + 1;\n        v593 = v598;\n        v594 = v599;\n        v595 = *(int32_t *)(4 * v599 + (int64_t)&g1);\n    }\n    // 0x40332f\n    signal(SIGSTOP, SIG_DFL);\n    function_413f20(0x407890, 0, v596);\n    int128_t v600 = __asm_pxor(v2, v2); // 0x403345\n    int64_t v601 = 0x100000000 * v559;\n    __asm_movups(v1, v600);\n    v373 = -1;\n    __asm_movups(v1, v600);\n    int64_t v602 = v601 >> 29; // 0x40337d\n    __asm_movups(v1, v600);\n    __asm_movups(v1, v600);\n    v69 = v602;\n    if (v601 < 0) {\n      lab_0x4057e1:\n        // 0x4057e1\n        function_411460(v69);\n        // UNREACHABLE\n    }\n    int64_t v603 = function_411210(v602); // 0x4033a3\n    v123 = 0;\n    v122 = NULL;\n    v604 = v584;\n    v341 = v1;\n    bool v605; // 0x402f50\n    v80 = v605 ? -1 : 1;\n    v252 = v249 % 256;\n    v370 = &v373;\n    v371 = v252;\n    v478 = &v96;\n    v468 = 0x1000000 * (int32_t)v478 >> 24;\n    v110 = &v97;\n    v469 = v468;\n    v380 = &v453;\n    v381 = NULL;\n    v382 = 0;\n    v383 = NULL;\n    v384 = 0;\n    v388 = locale;\n    v389 = (int32_t)v3 >= 0x31069;\n    v390 = (int64_t)env_val;\n    v391 = v600;\n    v392 = v591;\n    v393 = v596;\n    v394 = v559 & 0xffffffff;\n    v395 = a2;\n    v396 = v560;\n    v397 = v561;\n    v398 = v103 & -256 | (int64_t)(env_val != NULL);\n    v399 = v603;\n    v400 = 0;\n    v401 = 0;\n    while (true) {\n      lab_0x40344f_2:\n        // 0x40344f\n        v286 = v401;\n        int64_t v402 = v400;\n        v283 = v399;\n        v314 = v398;\n        v88 = v397;\n        v311 = v396;\n        v281 = v395;\n        v287 = v394;\n        int64_t v403 = v393;\n        v306 = v392;\n        v304 = v391;\n        v278 = v390;\n        v276 = v389;\n        v274 = v388;\n        v272 = v387;\n        v270 = v386;\n        v268 = v385;\n        v296 = v384;\n        str5 = v383;\n        v293 = v382;\n        str3 = v381;\n        v266 = v380;\n        v124 = -1;\n        v259 = v403;\n        v261 = v402;\n        if ((int32_t)v402 != -1) {\n            if ((char)v314 == 0 || v286 == 0) {\n                goto lab_0x403488;\n            } else {\n                int32_t v404 = g49; // 0x403407\n                int64_t v405 = v404; // 0x403407\n                v258 = v405;\n                v260 = v403;\n                v262 = v402;\n                if ((char)v276 != 1) {\n                    goto lab_0x403430;\n                } else {\n                    // 0x403410\n                    v258 = v405;\n                    v260 = v403;\n                    v262 = v402;\n                    if ((char)v123 != 0) {\n                        goto lab_0x403430;\n                    } else {\n                        int32_t v406 = v287; // 0x403416\n                        if (v404 == v406) {\n                            // 0x403580\n                            v342 = v283;\n                            if (v122 != NULL) {\n                                goto lab_0x4052df_2;\n                            }\n                            // 0x40358c\n                            v123 = 0;\n                            v330 = v266;\n                            v331 = v268;\n                            v332 = v270;\n                            v333 = v272;\n                            v334 = v274;\n                            v335 = v276;\n                            v336 = v278;\n                            v337 = v281;\n                            v338 = v283;\n                            v339 = v402;\n                            v340 = v286;\n                            goto lab_0x403590;\n                        } else {\n                            int64_t v407 = *(int64_t *)(8 * v405 + v281); // 0x403421\n                            v258 = v405;\n                            v260 = v407;\n                            v262 = v402;\n                            if (*(char *)v407 == 45) {\n                                // 0x403470\n                                v258 = v405;\n                                v260 = v407;\n                                v262 = v402;\n                                if (*(char *)(v407 + 1) != 111) {\n                                    goto lab_0x403430;\n                                } else {\n                                    // 0x403476\n                                    v258 = v405;\n                                    v260 = &g50;\n                                    v262 = v402;\n                                    if (v406 == (int32_t)&g50 == *(char *)(v407 + 2) == 0) {\n                                        goto lab_0x403430;\n                                    } else {\n                                        goto lab_0x403488;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x403430;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x403460;\n        }\n    }\n  lab_0x40533e:\n    // 0x40533e\n    function_40a0d0(2);\n    // UNREACHABLE\n  lab_0x40553f:\n    // 0x40553f\n    function_407dd0(*v11);\n    v14 = v12;\n    v15 = v13;\n    goto lab_0x405549;\n  lab_0x405558:\n    // 0x405558\n    function_407dd0(*v16);\n    v19 = v17;\n    v20 = v18;\n    goto lab_0x405562;\n  lab_0x40541e:;\n    int64_t v23 = *(int64_t *)v21;\n    function_405dd0((int64_t)dcgettext(NULL, (char *)(int64_t)\"cannot read\", 5), (int64_t *)v23);\n    v24 = v19;\n    v25 = v20;\n    goto lab_0x405430;\n  lab_0x405510:\n    // 0x405510\n    g28[0] = v42;\n    function_405d00((int64_t *)&g28);\n    v7 = v38;\n    v9 = v39;\n    goto lab_0x405524_2;\n  lab_0x40544e_2:\n    // 0x40544e\n    function_40f880(v27);\n    error(2, (int32_t)\"multi-character tab %s\" ^ (int32_t)\"multi-character tab %s\", dcgettext(NULL, \"multi-character tab %s\", 5));\n    v30 = v28;\n    v31 = v29;\n    goto lab_0x40547e;\n  lab_dec_label_pc_unknown:;\n    int64_t v70 = v71;\n    int64_t v72 = v73;\n    unsigned char v74 = *(char *)v70; // 0x404662\n    char v75 = *(char *)v72; // 0x404662\n    char v76 = v75; // 0x404662\n    bool v77 = false; // 0x404662\n    if (v74 == v75) {\n        int64_t v78 = v79 - 1; // 0x404662\n        v73 = v72 + v80;\n        v71 = v70 + v80;\n        v79 = v78;\n        v76 = v74;\n        v77 = true;\n        if (v78 == 0) {\n            goto lab_dec_label_pc_unknown_3;\n        } else {\n            goto lab_dec_label_pc_unknown;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_3;\n    }\n  lab_dec_label_pc_unknown_3:;\n    unsigned char v81 = v76;\n    if ((v74 >= v81 && !v77) == v74 < v81) {\n        goto lab_0x404682;\n    } else {\n        // 0x40466d\n        v82 = v83;\n        v84 = v85;\n        v86 = (int64_t)\"cannot read\";\n        v87 = v88;\n        if (euidaccess((char *)v89, 4) != 0) {\n            goto lab_0x40541e;\n        } else {\n            goto lab_0x404682;\n        }\n    }\n  lab_0x404682:;\n    // 0x404682\n    int64_t v90; // 0x402f50\n    int64_t v91 = v90 + 1; // 0x404682\n    v92 = v83 + 8;\n    v90 = v91;\n    int64_t v93; // 0x402f50\n    if (v93 != v91) {\n        goto lab_0x404653;\n    }\n  lab_0x4042b7:\n    // 0x4042b7\n    function_407df0(v94, v95);\n    free((int64_t *)v96);\n    free((int64_t *)v97);\n    // 0x4042e2\n    return result;\n  lab_0x404196_2:;\n    int64_t v98 = v99;\n    char * v100 = v101; // 0x404e5e\n    int64_t v102 = v96 + v103; // 0x4041a6\n    int64_t v104 = v102 - 32; // 0x4041b5\n    int64_t v105; // 0x402f50\n    int64_t v106; // 0x402f50\n    int64_t v107; // 0x4041b9\n    if (v98 == 0) {\n        // 0x4041e4\n        v107 = v102 - v108;\n        v105 = v104;\n        goto lab_0x4041e4_2;\n    } else {\n        int64_t v109 = function_4082a0(v110, v104); // 0x40429e\n        v106 = v104;\n        if (v109 < v111) {\n            // 0x4041e4\n            v107 = v102 - v108;\n            v105 = v104;\n            goto lab_0x4041e4_2;\n        } else {\n            goto lab_0x4042ab;\n        }\n    }\n  lab_0x4041e4_2:;\n    uint64_t v112 = v105;\n    int64_t v113; // 0x402f50\n    int64_t v114; // 0x402f50\n    int64_t v115; // 0x402f50\n    int64_t v116; // 0x402f50\n    int64_t * v117; // 0x4041ec\n    uint64_t v118; // 0x4041ec\n    char * v119; // 0x4041f8\n    if (v107 < v112) {\n        int64_t v120 = v112 - 32; // 0x4041d0\n        int64_t v121 = function_4082a0(v112, v120); // 0x4041d7\n        v105 = v120;\n        v106 = v120;\n        if (v121 < v111) {\n            goto lab_0x4041e4_2;\n        } else {\n            goto lab_0x4042ab;\n        }\n    } else {\n        // 0x4041ec\n        v117 = (int64_t *)(v112 + 8);\n        v118 = *v117;\n        v119 = (char *)(v103 + (int64_t)v100);\n        v122 = v119;\n        v115 = v98;\n        if (v98 < v118) {\n            goto lab_0x404265;\n        } else {\n            // 0x4041ec\n            v113 = v97;\n            v116 = v118;\n            v114 = v98;\n            goto lab_0x404202;\n        }\n    }\n  lab_0x4042ab:\n    // 0x4042ab\n    result = 1;\n    if ((char)v123 == 99) {\n        // 0x404e3f\n        function_40d370((v103 - v106 + v96 >> 5) + (int64_t)v100, (int64_t *)&v124);\n        __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: %s:%s: disorder: \", 5));\n        function_407e70(v106, (int64_t)g55, (int64_t)dcgettext(NULL, \"standard error\", 5));\n        result = 1;\n        goto lab_0x4042b7;\n    } else {\n        goto lab_0x4042b7;\n    }\n  lab_0x404265:;\n    int64_t v125 = 2 * v115; // 0x404265\n    int64_t v126 = v118; // 0x404268\n    if (v125 != 0) {\n        // 0x404260\n        v115 = v125;\n        v126 = v125;\n        if (v118 > v125) {\n            goto lab_0x404265;\n        } else {\n            goto lab_0x40426d;\n        }\n    } else {\n        goto lab_0x40426d;\n    }\n  lab_0x40426d:\n    // 0x40426d\n    free((int64_t *)v97);\n    int64_t v127 = function_411210(v126); // 0x40427d\n    v97 = v127;\n    v113 = v127;\n    v116 = *v117;\n    v114 = v126;\n    goto lab_0x404202;\n  lab_0x404202:;\n    int64_t v128 = *(int64_t *)v112; // 0x404202\n    memcpy((int64_t *)v113, (int64_t *)v128, (int32_t)v116);\n    v101 = v119;\n    v99 = v114;\n    result = 0;\n    if ((char)function_4074d0(v129, v94, v95) == 0) {\n        goto lab_0x4042b7;\n    } else {\n        goto lab_0x404196_2;\n    }\n  lab_0x404f99:;\n    int64_t * v130 = (int64_t *)(v85 + 24);\n    int64_t v131 = v85 + 192;\n    int64_t * v132 = (int64_t *)(v85 + 88);\n    *v130 = v131;\n    int64_t * v133 = (int64_t *)v131;\n    function_405e30(v133, *v132, v134);\n    char * v135 = (char *)(v85 + 240); // 0x40478c\n    *v135 = 0;\n    int64_t * v136 = (int64_t *)(v85 + 48); // 0x404794\n    *v136 = *v136 - 1;\n    int64_t * v137 = (int64_t *)(v85 + 8);\n    int64_t * v138 = (int64_t *)(v85 + 208);\n    int64_t * v139 = (int64_t *)(v85 + 224);\n    int64_t * v140 = (int64_t *)(v85 + 32);\n    int64_t v141 = v85 + 144;\n    int64_t * v142 = (int64_t *)v141;\n    int64_t v143 = v85 + 416;\n    int64_t * v144 = (int64_t *)(v85 + 16);\n    int64_t * v145 = (int64_t *)(v85 - 16);\n    int64_t v146 = v147; // 0x40479a\n    int64_t v148 = *v130; // 0x40479a\n    goto lab_0x4048a7;\n  lab_0x4048a7:;\n    int64_t v149 = v148;\n    int64_t v150 = v146;\n    char v151; // 0x402f50\n    int64_t v152; // 0x402f50\n    int64_t v153; // 0x402f50\n    int64_t v154; // 0x402f50\n    int64_t v155; // 0x402f50\n    int64_t v156; // 0x402f50\n    int64_t v157; // 0x402f50\n    int64_t v158; // 0x4048cb\n    int64_t v159; // 0x404f4c\n    if ((char)function_4074d0((char)*v130, v123, *v137) == 0) {\n        // 0x404ac6\n        function_407df0(v123, *v137);\n        if (*v136 == 0) {\n            // 0x404f0e\n            int64_t * v160; // 0x402f50\n            int64_t v161 = *v160; // 0x404f0e\n            free((int64_t *)v161);\n            v69 = v161;\n            if (v149 % 0x800000000000001 == 0) {\n                // 0x404f3c\n                v69 = v161;\n                if (v149 > 0xfffffffffffffff) {\n                    goto lab_0x4057e1;\n                } else {\n                    int64_t v162 = g72; // 0x404f20\n                    v159 = function_411210(16 * v149);\n                    v156 = v162;\n                    v157 = v159;\n                    if (v162 != 0) {\n                        goto lab_0x404f59;\n                    } else {\n                        goto lab_0x404f71;\n                    }\n                }\n            } else {\n                goto lab_0x4057e1;\n            }\n        } else {\n            goto lab_0x404ae0;\n        }\n    } else {\n        char v163 = *v135; // 0x4048c2\n        v158 = *(int64_t *)(v85 + 216);\n        if (v163 == 0) {\n            goto lab_0x404910;\n        } else {\n            // 0x4048d8\n            if (*v136 == 0) {\n                int64_t v164 = *v133 + v158; // 0x404968\n                g100 = 0;\n                v154 = v164;\n                if ((*v139 || v149) != 0) {\n                    goto lab_0x404923;\n                } else {\n                    // 0x404988\n                    function_407df0(v123, *v137);\n                    int64_t v165 = function_407cd0(*v140, (int64_t *)\"w\"); // 0x4049a0\n                    v11 = v140;\n                    v12 = v85;\n                    v13 = v150;\n                    if (v165 == 0) {\n                        goto lab_0x40553f;\n                    } else {\n                        // 0x4049ae\n                        *v142 = v165;\n                        v155 = v164;\n                        v153 = *v140;\n                        v151 = v163;\n                        v152 = 0;\n                        goto lab_0x40493d;\n                    }\n                }\n            } else {\n                int64_t v166 = *v132; // 0x4048e4\n                int64_t v167 = *(int64_t *)(v85 + 200); // 0x4048e9\n                if (v166 + 1 < v158 - v167 + -1 * *v138 * v166) {\n                    // 0x4051df\n                    *v139 = v167;\n                    function_407df0(v123, *v137);\n                    goto lab_0x404ae0;\n                } else {\n                    goto lab_0x404910;\n                }\n            }\n        }\n    }\n  lab_0x404ae0:;\n    int64_t * v168 = (int64_t *)(v85 + 96); // 0x404ae0\n    *v168 = *v168 + 8;\n    int64_t v169 = *(int64_t *)*(int64_t *)(v85 + 96); // 0x40473c\n    int64_t * v170 = (int64_t *)(v85 + 8);\n    *v170 = v169;\n    int64_t v171 = function_407cd0(v169, (int64_t *)\"r\"); // 0x404747\n    v123 = v171;\n    v16 = v170;\n    v17 = v85;\n    v18 = v150;\n    if (v171 == 0) {\n        goto lab_0x405558;\n    } else {\n        // 0x404759\n        *(int64_t *)(v85 + 88) = 48;\n        if (*(int64_t *)(v85 + 80) < 2) {\n            // 0x40476e\n            *(int64_t *)(v85 + 24) = v85 + 192;\n        }\n    }\n  lab_0x404910:\n    // 0x404910\n    g100 = 0;\n    v154 = *v133 + v158;\n    goto lab_0x404923;\n  lab_0x404923:\n    // 0x404923\n    v155 = v154;\n    v153 = function_4090c0(v141, 0) + 13;\n    v151 = 0;\n    v152 = v149 + 1;\n    goto lab_0x40493d;\n  lab_0x40493d:;\n    int64_t v172 = v153;\n    int64_t v173 = v155;\n    int64_t v174; // 0x402f50\n    int64_t v175; // 0x402f50\n    if (*v138 < 2) {\n        // 0x40494c\n        function_4085d0(v173 - 32, *v142, v172);\n        v175 = v172;\n        v174 = v150;\n        goto lab_0x40488e;\n    } else {\n        // 0x4047a0\n        *(int64_t *)v143 = function_40cfd0(0x407850, *(int64_t *)(v85 + 64));\n        pthread_mutex_init((int64_t *)*(int64_t *)(v85 + 72), NULL);\n        pthread_cond_init((int64_t *)(v85 + 464), NULL);\n        int64_t v176 = *v138; // 0x4047d7\n        int64_t v177 = function_411210(*(int64_t *)(v85 + 56)); // 0x4047df\n        *(int64_t *)(v177 + 48) = v176;\n        *(int64_t *)(v177 + 40) = v176;\n        *(int64_t *)(v177 + 24) = 0;\n        *(int64_t *)(v177 + 16) = 0;\n        *(int64_t *)(v177 + 8) = 0;\n        *(int64_t *)v177 = 0;\n        *(int64_t *)(v177 + 32) = 0;\n        *(int64_t *)(v177 + 56) = 0;\n        *(int32_t *)(v177 + 80) = 0;\n        *(char *)(v177 + 84) = 0;\n        pthread_mutex_init((int64_t *)(v177 + 88), NULL);\n        int64_t v178 = *(int64_t *)(v85 + 40); // 0x404837\n        int64_t v179 = v177 + 128; // 0x40483f\n        *v144 = v179;\n        function_4061f0(v177, v179, v173, v178, v176, 0);\n        *v145 = v172;\n        int64_t v180 = *v144; // 0x404867\n        function_409880(v173, v178, *v138, v180, v143, *v142, (int64_t)&g122);\n        v175 = *v145;\n        v174 = v180;\n        goto lab_0x40488e;\n    }\n  lab_0x404f59:;\n    int64_t v181 = v157;\n    int64_t v182 = v156;\n    *(int64_t *)(v181 + 8) = v182;\n    int64_t v183 = *(int64_t *)v182; // 0x404f61\n    *(int64_t *)v181 = v182 + 13;\n    v156 = v183;\n    v157 = v181 + 16;\n    if (v183 != 0) {\n        goto lab_0x404f59;\n    } else {\n        goto lab_0x404f71;\n    }\n  lab_0x404f71:;\n    int64_t v184 = *v140; // 0x404f71\n    function_409330(v159, (int32_t)v149, v149, v184);\n    free((int64_t *)v159);\n    goto lab_0x404af8;\n  lab_0x404af8:;\n    int64_t v185 = v172;\n    int64_t v186 = v175;\n    if (g69 < 1) {\n        // 0x404b19\n    } else {\n        goto lab_0x404b08;\n    }\n  lab_0x40488e:\n    // 0x40488e\n    function_407df0(*v142, v172);\n    v146 = v174;\n    v148 = v152;\n    if (v151 != 0) {\n        // 0x404aeb\n        free((int64_t *)*v133);\n        goto lab_0x404af8;\n    } else {\n        goto lab_0x4048a7;\n    }\n  lab_0x404b08:\n    // 0x404b08\n    function_405fb0(0xffffffff, v185, v186);\n    int32_t v187 = g69; // 0x404b0f\n    if (v187 >= 0 == (v187 != 0)) {\n        goto lab_0x404b08;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "405830",
            "funcEndAddr": "40585b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405830\n    int64_t v1; // 0x405830\n    __libc_start_main(0x402f50, (int32_t)a4, (char **)&v1, (void (*)())0x413eb0, (void (*)())0x413f10, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40585b",
            "funcStartAddr": "40585b",
            "funcEndAddr": "40587a",
            "decompiledFuncCode": "int64_t function_40585b(void) {\n    // 0x40585b\n    return 0x61c588;\n}\n"
        },
        {
            "funcName": "function_40587a",
            "funcStartAddr": "40587a",
            "funcEndAddr": "4058b1",
            "decompiledFuncCode": "int64_t function_40587a(void) {\n    // 0x40587a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4058b1",
            "funcStartAddr": "4058b1",
            "funcEndAddr": "405908",
            "decompiledFuncCode": "int64_t function_4058b1(void) {\n    // 0x4058b1\n    if (g56 != 0) {\n        // 0x405907\n        int64_t result; // 0x4058b1\n        return result;\n    }\n    int64_t v1 = g57; // 0x4058e4\n    int64_t result2; // 0x4058f6\n    if (g57 >= ((int64_t)&g24 - (int64_t)&g23 >> 3) - 1) {\n        // 0x4058f6\n        result2 = function_40585b();\n        g56 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g24 - (int64_t)&g23 >> 3) - 1) {\n        // 0x4058e6\n        v1++;\n    }\n    // 0x4058da\n    g57 = v1;\n    // 0x4058f6\n    result2 = function_40585b();\n    g56 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405908",
            "funcStartAddr": "405908",
            "funcEndAddr": "40590d",
            "decompiledFuncCode": "int64_t function_405908(void) {\n    // 0x405908\n    return function_40587a();\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "40591d",
            "decompiledFuncCode": "int64_t function_405910(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405910\n    return (int64_t)*(int32_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_405920",
            "funcStartAddr": "405920",
            "funcEndAddr": "40592a",
            "decompiledFuncCode": "int64_t function_405920(int64_t a1, int64_t a2) {\n    int32_t v1 = *(int32_t *)(a2 + 8); // 0x405920\n    return (int64_t)(*(int32_t *)(a1 + 8) == v1) | (int64_t)(v1 & -256);\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "4059e8",
            "decompiledFuncCode": "int64_t function_405930(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t v2 = v1 + 1; // 0x405972\n    int32_t v3 = (int32_t)v1 % 256;\n    int32_t v4 = v3; // 0x40597e\n    int64_t v5 = v2; // 0x40597e\n    int64_t v6 = v1; // 0x40597e\n    int64_t result = 0; // 0x40597e\n    if (v3 < 58) {\n        int64_t v7 = 0;\n        int64_t v8 = v1 % 256;\n        char v9 = *(char *)v2; // 0x405948\n        int64_t v10 = (int64_t)v9 & 0xffffffff; // 0x40595b\n        int64_t v11 = v2; // 0x40595b\n        char v12 = 0; // 0x40595b\n        if (g104 == (int32_t)v9) {\n            // 0x40595d\n            v11 = v1 + 2;\n            v10 = (int64_t)*(char *)v11;\n            v12 = 1;\n        }\n        int64_t v13 = (char)v7 < (char)v8 ? v8 : v7;\n        result = v13 & 0xffffffff;\n        v6 = v11;\n        int64_t v14 = v10;\n        v5 = v6 + 1;\n        v4 = (int32_t)v14 % 256;\n        int64_t v15 = v5; // 0x40597e\n        while (v4 < 58) {\n            // 0x405948\n            v7 = result;\n            v8 = v14;\n            v9 = *(char *)v15;\n            v10 = (int64_t)v9 & 0xffffffff;\n            v11 = v15;\n            v12 = 0;\n            if (g104 == (int32_t)v9) {\n                // 0x40595d\n                v11 = v6 + 2;\n                v10 = (int64_t)*(char *)v11;\n                v12 = 1;\n            }\n            // 0x40596b\n            v13 = (char)v7 < (char)v8 ? v8 : v7;\n            result = v13 & 0xffffffff;\n            v6 = v11;\n            v14 = v10;\n            v5 = v6 + 1;\n            v4 = (int32_t)v14 % 256;\n            v15 = v5;\n        }\n        // 0x405980\n        if (v12 != 0) {\n            // 0x4059e0\n            *a1 = v6 - 1;\n            return result;\n        }\n    }\n    // 0x405985\n    if (g105 != v4) {\n        // 0x40598e\n        *a1 = v6;\n        return result;\n    }\n    unsigned char v16 = *(char *)v5; // 0x405998\n    if (v16 != 57 && (int32_t)v16 >= 57) {\n        // 0x40598e\n        *a1 = v5;\n        return result;\n    }\n    unsigned char v17 = v16;\n    int64_t v18 = v6 + 2;\n    int64_t v19 = result;\n    unsigned char v20 = *(char *)v18; // 0x4059bf\n    int64_t v21 = v17 > (char)v19 ? (int64_t)v17 : v19;\n    int64_t result2 = v21 & 0xffffffff; // 0x4059c6\n    int64_t v22 = v18 + 1; // 0x4059d1\n    while (v20 == 57 || (int32_t)v20 < 57) {\n        // 0x4059bb\n        v17 = v20;\n        v18 = v22;\n        v19 = result2;\n        v20 = *(char *)v18;\n        v21 = v17 > (char)v19 ? (int64_t)v17 : v19;\n        result2 = v21 & 0xffffffff;\n        v22 = v18 + 1;\n    }\n    // 0x4059d3\n    *a1 = v18;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4059f0",
            "funcStartAddr": "4059f0",
            "funcEndAddr": "405a39",
            "decompiledFuncCode": "int64_t function_4059f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4059f0\n    int64_t v1; // 0x4059f0\n    char * v2 = (char *)((int64_t)((char)v1 == 45) + a1); // bp-16, 0x405a03\n    int64_t v3 = function_405930((int64_t *)&v2); // 0x405a0d\n    int64_t result = 0; // 0x405a16\n    if ((char)v3 >= 49) {\n        unsigned char v4 = *v2; // 0x405a1d\n        char v5 = *(char *)((int64_t)v4 + (int64_t)&g2); // 0x405a20\n        int64_t v6 = v5; // 0x405a27\n        result = ((char)v1 == 45 ? -v6 : v6) & 0xffffffff;\n    }\n    // 0x405a31\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405ae3",
            "decompiledFuncCode": "int64_t function_405a40(int64_t a1, int32_t a2) {\n    int64_t v1 = a1;\n    int64_t v2 = (int64_t)*(char *)v1;\n    int64_t v3 = v1 + 1; // 0x405a56\n    while (*(char *)(v2 + (int64_t)&g98) != 0) {\n        // 0x405a4c\n        v1 = v3;\n        v2 = (int64_t)*(char *)v1;\n        v3 = v1 + 1;\n    }\n    int64_t v4 = 12;\n    int64_t v5 = 0;\n    int64_t v6 = (v4 + v5) / 2; // 0x405a65\n    int64_t v7 = 16 * v6; // 0x405a6b\n    int64_t v8 = *(int64_t *)(v7 + (int64_t)&g36); // 0x405a6f\n    unsigned char v9 = *(char *)v8; // 0x405a76\n    int64_t v10 = v1; // 0x405a7b\n    while (v9 != 0) {\n        unsigned char v11 = *(char *)(v2 + (int64_t)&g92); // 0x405a80\n        int64_t v12 = v5; // 0x405a86\n        int64_t v13 = v6; // 0x405a86\n        if (v11 >= v9) {\n            int64_t v14 = v8; // 0x405a88\n            if (v11 > v9) {\n                // 0x405ad8\n                v12 = v6 + 1;\n                v13 = v4;\n            } else {\n                int64_t v15 = v14 + 1; // 0x405a9f\n                unsigned char v16 = *(char *)v15; // 0x405aa3\n                int64_t v17 = v1 + 1; // 0x405aa6\n                v10 = v17;\n                if (v16 == 0) {\n                    // break (via goto) -> 0x405aae\n                    goto lab_0x405aae;\n                }\n                unsigned char v18 = *(char *)v17; // 0x405a90\n                unsigned char v19 = *(char *)((int64_t)v18 + (int64_t)&g92); // 0x405a94\n                v12 = v5;\n                v13 = v6;\n                while (v19 >= v16) {\n                    // 0x405a9d\n                    if (v19 > v16) {\n                        goto lab_0x405ad8;\n                    }\n                    v15++;\n                    v16 = *(char *)v15;\n                    v17++;\n                    v10 = v17;\n                    if (v16 == 0) {\n                        // break (via goto) -> 0x405aae\n                        goto lab_0x405aae;\n                    }\n                    // 0x405a90\n                    v18 = *(char *)v17;\n                    v19 = *(char *)((int64_t)v18 + (int64_t)&g92);\n                    v12 = v5;\n                    v13 = v6;\n                }\n            }\n        }\n        // 0x405acb\n        if (v12 >= v13) {\n            // 0x405ad0\n            return 0;\n        }\n        v4 = v13;\n        v5 = v12;\n        v6 = (v4 + v5) / 2;\n        v7 = 16 * v6;\n        v8 = *(int64_t *)(v7 + (int64_t)&g36);\n        v9 = *(char *)v8;\n        v10 = v1;\n    }\n  lab_0x405aae:\n    if (a2 != 0) {\n        // 0x405ab3\n        *(int64_t *)(int64_t)a2 = v10;\n    }\n    // 0x405ab6\n    return (int64_t)*(int32_t *)(v7 + (int64_t)&g37);\n}\n"
        },
        {
            "funcName": "function_405af0",
            "funcStartAddr": "405af0",
            "funcEndAddr": "405b43",
            "decompiledFuncCode": "int64_t function_405af0(int64_t a1) {\n    // 0x405af0\n    if (*(int64_t *)(a1 + 32) != 0 || *(int64_t *)(a1 + 40) != 0) {\n        // 0x405af9\n        return 0;\n    }\n    int64_t v1 = a1 + 48; // 0x405b07\n    unsigned char result = *(char *)v1; // 0x405b07\n    if (result != 0) {\n        // 0x405af9\n        return 0;\n    }\n    // 0x405b0f\n    if (*(char *)(a1 + 49) != 0 || (*(int64_t *)v1 & 0xffff00ff0000) != 0) {\n        // 0x405af9\n        return result;\n    }\n    unsigned char result2 = *(char *)(a1 + 54); // 0x405b25\n    if (result2 != 0) {\n        // 0x405af9\n        return 0;\n    }\n    // 0x405b2d\n    if (*(char *)(a1 + 56) != 0) {\n        // 0x405af9\n        return result2;\n    }\n    // 0x405b33\n    return (int64_t)(*(char *)(a1 + 51) ^ 1);\n}\n"
        },
        {
            "funcName": "function_405b50",
            "funcStartAddr": "405b50",
            "funcEndAddr": "405bf7",
            "decompiledFuncCode": "int64_t function_405b50(char a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = a1;\n    int64_t v3 = v1; // 0x405b55\n    if (*(int16_t *)(v2 + 48) != 0) {\n        // 0x405b57\n        *(char *)a2 = 98;\n        v3 = v1 + 1;\n    }\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x405b5e\n    int64_t v5 = v3; // 0x405b66\n    if (*v4 == (int64_t)&g94) {\n        // 0x405be2\n        *(char *)v3 = 100;\n        v5 = v3 + 1;\n    }\n    int64_t v6 = v5; // 0x405b70\n    if (*(int64_t *)(v2 + 40) != 0) {\n        // 0x405b72\n        *(char *)v5 = 102;\n        v6 = v5 + 1;\n    }\n    int64_t v7 = v6; // 0x405b7d\n    if (*(char *)(v2 + 52) != 0) {\n        // 0x405b7f\n        *(char *)v6 = 103;\n        v7 = v6 + 1;\n    }\n    int64_t v8 = v7; // 0x405b8a\n    if (*(char *)(v2 + 53) != 0) {\n        // 0x405b8c\n        *(char *)v7 = 104;\n        v8 = v7 + 1;\n    }\n    int64_t v9 = v8; // 0x405b9b\n    if (*v4 == (int64_t)&g96) {\n        // 0x405bee\n        *(char *)v8 = 105;\n        v9 = v8 + 1;\n    }\n    int64_t v10 = v9; // 0x405ba1\n    if (*(char *)(v2 + 54) != 0) {\n        // 0x405ba3\n        *(char *)v9 = 77;\n        v10 = v9 + 1;\n    }\n    int64_t v11 = v10; // 0x405bae\n    if (*(char *)(v2 + 50) != 0) {\n        // 0x405bb0\n        *(char *)v10 = 110;\n        v11 = v10 + 1;\n    }\n    int64_t v12 = v11; // 0x405bbb\n    if (*(char *)(v2 + 51) != 0) {\n        // 0x405bbd\n        *(char *)v11 = 82;\n        v12 = v11 + 1;\n    }\n    int64_t v13 = v12; // 0x405bc8\n    if (*(char *)(v2 + 55) != 0) {\n        // 0x405bca\n        *(char *)v12 = 114;\n        v13 = v12 + 1;\n    }\n    int64_t result = v13; // 0x405bd5\n    if (*(char *)(v2 + 56) != 0) {\n        // 0x405bd7\n        *(char *)v13 = 86;\n        result = v13 + 1;\n    }\n    // 0x405bde\n    *(char *)result = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "405ce9",
            "decompiledFuncCode": "int64_t function_405c00(int64_t * a1, int64_t * a2, int64_t a3) {\n    int64_t result = (int64_t)a1;\n    char v1 = result;\n    if (v1 == 0) {\n        // 0x405c3b\n        return result;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(v2 + 32);\n    int64_t result2 = result; // 0x405c30\n    g124 = v1 - 77;\n    switch (v1) {\n        case 77: {\n            // 0x405cd0\n            *(char *)(v2 + 54) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 82: {\n            // 0x405ce0\n            *(char *)(v2 + 51) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 86: {\n            // 0x405cc0\n            *(char *)(v2 + 56) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 98: {\n            if ((a3 & 0xfffffffd) == 0) {\n                // 0x405ca4\n                *(char *)(v2 + 48) = 1;\n            }\n            if ((int32_t)a3 < 3) {\n                // 0x405cad\n                *(char *)(v2 + 49) = 1;\n            }\n            // break -> 0x405c30\n            break;\n        }\n        case 100: {\n            // 0x405c90\n            *v3 = (int64_t)&g94;\n            // break -> 0x405c30\n            break;\n        }\n        case 102: {\n            // 0x405c80\n            *(int64_t *)(v2 + 40) = (int64_t)&g92;\n            // break -> 0x405c30\n            break;\n        }\n        case 103: {\n            // 0x405c70\n            *(char *)(v2 + 52) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 104: {\n            // 0x405c68\n            *(char *)(v2 + 53) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 105: {\n            // 0x405c50\n            if (*v3 == 0) {\n                // 0x405c57\n                *v3 = (int64_t)&g96;\n            }\n            // break -> 0x405c30\n            break;\n        }\n        case 110: {\n            // 0x405c40\n            *(char *)(v2 + 50) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        case 114: {\n            // 0x405c28\n            *(char *)(v2 + 55) = 1;\n            // break -> 0x405c30\n            break;\n        }\n        default: {\n            // 0x405c3b\n            return result2;\n        }\n    }\n    // 0x405c30\n    result2++;\n    char v4 = *(char *)result2; // 0x405c34\n    while (v4 != 0) {\n        // 0x405c10\n        g124 = v4 - 77;\n        switch (v4) {\n            case 77: {\n                // 0x405cd0\n                *(char *)(v2 + 54) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 82: {\n                // 0x405ce0\n                *(char *)(v2 + 51) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 86: {\n                // 0x405cc0\n                *(char *)(v2 + 56) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 98: {\n                if ((a3 & 0xfffffffd) == 0) {\n                    // 0x405ca4\n                    *(char *)(v2 + 48) = 1;\n                }\n                if ((int32_t)a3 < 3) {\n                    // 0x405cad\n                    *(char *)(v2 + 49) = 1;\n                }\n                // break -> 0x405c30\n                break;\n            }\n            case 100: {\n                // 0x405c90\n                *v3 = (int64_t)&g94;\n                // break -> 0x405c30\n                break;\n            }\n            case 102: {\n                // 0x405c80\n                *(int64_t *)(v2 + 40) = (int64_t)&g92;\n                // break -> 0x405c30\n                break;\n            }\n            case 103: {\n                // 0x405c70\n                *(char *)(v2 + 52) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 104: {\n                // 0x405c68\n                *(char *)(v2 + 53) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 105: {\n                // 0x405c50\n                if (*v3 == 0) {\n                    // 0x405c57\n                    *v3 = (int64_t)&g96;\n                }\n                // break -> 0x405c30\n                break;\n            }\n            case 110: {\n                // 0x405c40\n                *(char *)(v2 + 50) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            case 114: {\n                // 0x405c28\n                *(char *)(v2 + 55) = 1;\n                // break -> 0x405c30\n                break;\n            }\n            default: {\n                // 0x405c3b\n                return result2;\n            }\n        }\n        // 0x405c30\n        result2++;\n        v4 = *(char *)result2;\n    }\n    // 0x405c3b\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405cfb",
            "decompiledFuncCode": "int64_t function_405cf0(int64_t str, int64_t str2) {\n    // 0x405cf0\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_405d00",
            "funcStartAddr": "405d00",
            "funcEndAddr": "405d30",
            "decompiledFuncCode": "int64_t function_405d00(int64_t * a1) {\n    // 0x405d00\n    error(2, (int32_t)\"options '-%s' are incompatible\" ^ (int32_t)\"options '-%s' are incompatible\", dcgettext(NULL, \"options '-%s' are incompatible\", 5));\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_405d30",
            "funcStartAddr": "405d30",
            "funcEndAddr": "405dca",
            "decompiledFuncCode": "int64_t function_405d30(int64_t a1, char * a2) {\n    // 0x405d30\n    function_40f880(a1);\n    dcgettext(NULL, a2, 5);\n    error(2, (int32_t)\"%s: invalid field specification %s\" ^ (int32_t)\"%s: invalid field specification %s\", dcgettext(NULL, \"%s: invalid field specification %s\", 5));\n    int64_t v1 = g72; // 0x405d92\n    if (g72 == 0) {\n        // 0x405da9\n        g72 = 0;\n        signal(SIGINT, SIG_DFL);\n        return raise(2);\n    }\n    unlink((char *)(v1 + 13));\n    v1 = *(int64_t *)v1;\n    while (v1 != 0) {\n        // 0x405d98\n        unlink((char *)(v1 + 13));\n        v1 = *(int64_t *)v1;\n    }\n    // 0x405da9\n    g72 = 0;\n    signal(SIGINT, SIG_DFL);\n    return raise(2);\n}\n"
        },
        {
            "funcName": "function_405dd0",
            "funcStartAddr": "405dd0",
            "funcEndAddr": "405e24",
            "decompiledFuncCode": "int64_t function_405dd0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2; // 0x405ddf\n    if (a2 == NULL) {\n        // 0x405e0e\n        v1 = (int64_t)dcgettext(NULL, \"standard output\", 5);\n        goto lab_0x405de1;\n    } else {\n        goto lab_0x405de1;\n    }\n  lab_0x405de1:;\n    int64_t v2 = function_40f700(0, 3, v1); // 0x405de8\n    error(2, *__errno_location(), \"%s: %s\", (char *)a1, (char *)v2);\n    // 0x405e0e\n    v1 = (int64_t)dcgettext(NULL, \"standard output\", 5);\n    goto lab_0x405de1;\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405ea5",
            "decompiledFuncCode": "int64_t function_405e30(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t size = a3 + 32 & -32; // 0x405e5c\n    int64_t * mem = malloc((int32_t)size); // 0x405e63\n    int64_t result = (int64_t)mem;\n    *a1 = result;\n    while (mem == NULL) {\n        uint64_t v2 = size / 2; // 0x405e50\n        if (a2 + 1 >= v2) {\n            // 0x405ea0\n            function_411460(size);\n            // UNREACHABLE\n        }\n        size = v2 + 32 & -32;\n        mem = malloc((int32_t)size);\n        result = (int64_t)mem;\n        *a1 = result;\n    }\n    // 0x405e71\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 24) = size;\n    *(int64_t *)(v1 + 16) = 0;\n    *(int64_t *)(v1 + 32) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(char *)(v1 + 48) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405eb0",
            "funcStartAddr": "405eb0",
            "funcEndAddr": "405eec",
            "decompiledFuncCode": "int64_t function_405eb0(uint64_t a1, uint64_t a2, int64_t a3) {\n    int64_t result = 0x100000000 * function_40d3c0(a1, a2 - a1, 0) >> 32; // 0x405ec6\n    int64_t result2 = result; // 0x405ecb\n    if (a2 <= a1) {\n        // 0x405ee5\n        return result;\n    }\n    int64_t v1 = a1 + 1; // 0x405ed0\n    result2 += (int64_t)(*(char *)a1 == 9);\n    while (v1 != a2) {\n        int64_t v2 = v1;\n        v1 = v2 + 1;\n        result2 += (int64_t)(*(char *)v2 == 9);\n    }\n    // 0x405ee5\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405ef0",
            "funcStartAddr": "405ef0",
            "funcEndAddr": "405fb0",
            "decompiledFuncCode": "int64_t function_405ef0(int64_t str, int64_t str2, int64_t n) {\n    int32_t * err_num = __errno_location(); // 0x405f03\n    *err_num = 0;\n    int32_t req_bytes = strxfrm((char *)str, (char *)str2, (int32_t)n); // 0x405f1a\n    if (*err_num == 0) {\n        // 0x405f25\n        return req_bytes;\n    }\n    // 0x405f30\n    error(0, *err_num, dcgettext(NULL, \"string transformation failed\", 5));\n    error(0, (int32_t)\"set LC_ALL='C' to work around the problem\" ^ (int32_t)\"set LC_ALL='C' to work around the problem\", dcgettext(NULL, \"set LC_ALL='C' to work around the problem\", 5));\n    function_40f550(0, 8, str2);\n    error(2, (int32_t)\"the untransformed string was %s\" ^ (int32_t)\"the untransformed string was %s\", dcgettext(NULL, \"the untransformed string was %s\", 5));\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "4060d0",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a1; // 0x405fba\n    int32_t stat_loc; // bp-44, 0x405fb0\n    uint32_t v2 = waitpid(v1 != 0 ? v1 : -1, &stat_loc, (int32_t)(v1 == 0)); // 0x405fcc\n    if (v2 >= 0) {\n        // 0x405fd9\n        if (v2 == 0) {\n            // 0x405ff6\n            return 0;\n        }\n        int64_t result = v2;\n        if (v1 < 1) {\n            int64_t v3 = function_40cde0(g71); // 0x406010\n            if (v3 == 0) {\n                // 0x405ff6\n                return result;\n            }\n            // 0x40601a\n            *(char *)(v3 + 12) = 2;\n        }\n        uint32_t v4 = stat_loc; // 0x405fe1\n        if ((v4 / 256 % 256 || v4 % 128) == 0) {\n            // 0x405fef\n            g69--;\n            // 0x405ff6\n            return result;\n        }\n        // 0x406020\n        function_40f630(4, (int64_t)g82);\n        error(2, (int32_t)\"%s [-d] terminated abnormally\" ^ (int32_t)\"%s [-d] terminated abnormally\", dcgettext(NULL, \"%s [-d] terminated abnormally\", 5));\n    }\n    // 0x406059\n    function_40f630(4, (int64_t)g82);\n    char * format = dcgettext(NULL, \"waiting for %s [-d]\", 5); // 0x406079\n    error(2, *__errno_location(), format);\n    int64_t v5 = function_40cde0(g71); // 0x4060b5\n    int64_t result2 = 0; // 0x4060bd\n    if (v5 != 0) {\n        // 0x4060bf\n        *(char *)(v5 + 12) = 2;\n        int64_t v6; // bp-80, 0x405fb0\n        result2 = function_405fb0(2, (int64_t)&v6, (int64_t)format);\n    }\n    // 0x405ff6\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4060d0",
            "funcStartAddr": "4060d0",
            "funcEndAddr": "406185",
            "decompiledFuncCode": "int64_t function_4060d0(uint32_t a1, char * buf) {\n    int64_t v1 = (int64_t)buf;\n    int64_t v2 = v1;\n    int32_t v3 = *(int32_t *)v2; // 0x4060da\n    int64_t v4 = v2 + 4; // 0x4060dc\n    int32_t v5 = v3 - 0x1010101 & (v3 ^ -0x7f7f7f80); // 0x4060e8\n    uint32_t v6 = v5 & -0x7f7f7f80; // 0x4060ea\n    while (v6 == 0) {\n        // 0x4060da\n        v2 = v4;\n        v3 = *(int32_t *)v2;\n        v4 = v2 + 4;\n        v5 = v3 - 0x1010101 & (v3 ^ -0x7f7f7f80);\n        v6 = v5 & -0x7f7f7f80;\n    }\n    int64_t v7 = (v5 & 0x8080) == 0 ? v2 + 6 : v4; // 0x406102\n    unsigned char v8 = (char)((v5 & 0x8080) == 0 ? v6 / 0x10000 : v6); // 0x406108\n    int64_t v9 = -1 - v8 < v8 ? 0xfffffffc : 0xfffffffd; // 0x406110\n    write(2, (int64_t *)buf, (int32_t)(v7 - v1 + v9));\n    if (a1 == 0) {\n        // 0x406120\n        write(2, &g6, 1);\n        _exit(2);\n        // UNREACHABLE\n    }\n    // 0x40613e\n    int64_t v10; // bp-20, 0x4060d0\n    int64_t buf2 = function_40d2b0((int64_t)a1, &v10); // 0x406145\n    write(2, (int64_t *)\": errno \", 8);\n    int64_t v11 = -1; // 0x40616a\n    int64_t v12 = buf2; // 0x40616a\n    int64_t v13 = 0; // 0x40616a\n    while (v11 != 0) {\n        int64_t v14 = v12;\n        v11--;\n        bool v15; // 0x4060d0\n        v12 = v14 + (v15 ? -1 : 1);\n        v13 = v11;\n        if (*(char *)v14 == 0) {\n            // break -> \n            break;\n        }\n        v13 = 0;\n    }\n    write(2, (int64_t *)buf2, -2 - (int32_t)v13);\n    // 0x406120\n    write(2, &g6, 1);\n    _exit(2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406190",
            "funcStartAddr": "406190",
            "funcEndAddr": "4061e5",
            "decompiledFuncCode": "int64_t function_406190(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = g71; // 0x40619e\n    if (g71 == 0) {\n        // 0x4061b8\n        v1 = function_40c600(47, 0, 0x405910, 0x405920, 0);\n        g71 = v1;\n        if (v1 == 0) {\n            // 0x4061e0\n            function_411460(v1);\n            // UNREACHABLE\n        }\n    }\n    // 0x4061a0\n    *(char *)(a1 + 12) = 1;\n    int64_t result = function_40cda0(v1, a1); // 0x4061a7\n    if (result != 0) {\n        // 0x4061b1\n        return result;\n    }\n    // 0x4061e0\n    function_411460(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061f0",
            "funcStartAddr": "4061f0",
            "funcEndAddr": "40631d",
            "decompiledFuncCode": "int64_t function_4061f0(int64_t a1, int64_t a2, int64_t a3, uint64_t a4, int64_t a5, int32_t a6) {\n    int64_t v1; // 0x4061f0\n    int64_t v2; // 0x4061f0\n    if ((char)a6 == 0) {\n        // 0x4062a8\n        v1 = *(int64_t *)(a1 + 48) % 2;\n        v2 = a1 + 24;\n    } else {\n        // 0x40621d\n        v1 = *(int64_t *)(a1 + 40) % 2;\n        v2 = a1 + 16;\n    }\n    int64_t v3 = a3 - 32 * a5; // 0x4061fd\n    int64_t v4 = 0;\n    int64_t v5 = v3 - 32 * v4;\n    *(int64_t *)(a2 + 48) = v1;\n    int64_t result = a2 + 128; // 0x406244\n    *(int64_t *)(a2 + 56) = a1;\n    *(int64_t *)(a2 + 16) = v3;\n    *(int64_t *)a2 = v3;\n    *(int64_t *)(a2 + 24) = v5;\n    *(int64_t *)(a2 + 8) = v5;\n    *(int64_t *)(a2 + 32) = v2;\n    *(int64_t *)(a2 + 40) = v4;\n    *(int32_t *)(a2 + 80) = *(int32_t *)(a1 + 80) + 1;\n    *(char *)(a2 + 84) = 0;\n    pthread_mutex_init((int64_t *)(a2 + 88), NULL);\n    int64_t * v6 = (int64_t *)(a2 + 64);\n    if (a4 < 2) {\n        // 0x40627f\n        *v6 = 0;\n        *(int64_t *)(a2 + 72) = 0;\n        return result;\n    }\n    // 0x4062d0\n    *v6 = result;\n    int64_t v7 = function_4061f0(a2, result, v3, 0, a5, 1); // 0x4062ef\n    *(int64_t *)(a2 + 72) = v7;\n    return function_4061f0(a2, v7, v5, a4 % 2, a5, 0);\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "40635c",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 + 8; // 0x406326\n    int64_t * mutex = (int64_t *)v1; // 0x406331\n    pthread_mutex_lock(mutex);\n    function_40d070(v1, a2);\n    *(char *)(a2 + 84) = 1;\n    pthread_cond_signal((int64_t *)(a1 + 48));\n    return pthread_mutex_unlock(mutex);\n}\n"
        },
        {
            "funcName": "function_406360",
            "funcStartAddr": "406360",
            "funcEndAddr": "40646f",
            "decompiledFuncCode": "int64_t function_406360(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = a1 - 1 + a2; // 0x406360\n    int64_t v2 = *(int64_t *)(a3 + 8); // 0x40636e\n    int64_t v3; // 0x406360\n    int64_t v4; // 0x406360\n    uint64_t v5; // 0x4063a0\n    if (g32 == 128) {\n        // 0x4063f0\n        if (v1 <= a1) {\n            // 0x4063a0\n            v5 = a1 + v2;\n            return v1 > v5 ? v5 : v1;\n        }\n        // 0x4063f5\n        v4 = a1;\n        if (a3 != 0) {\n            int64_t v6 = a3 - 1; // 0x406360\n            int64_t v7 = a1; // 0x406360\n            while (true) {\n                unsigned char v8 = *(char *)v7; // 0x406400\n                char v9 = *(char *)((int64_t)v8 + (int64_t)&g98); // 0x406403\n                int64_t v10 = v7;\n                int64_t v11 = v6;\n                while (v9 == 0) {\n                    // 0x406428\n                    v3 = v10;\n                    if (v1 <= v10) {\n                        // break (via goto) -> 0x4063a0\n                        goto lab_0x4063a0_3;\n                    }\n                    int64_t v12 = v10 + 1; // 0x406446\n                    v3 = v1;\n                    if (v1 == v12) {\n                        // break (via goto) -> 0x4063a0\n                        goto lab_0x4063a0_3;\n                    }\n                    unsigned char v13 = *(char *)v12; // 0x406438\n                    char v14 = *(char *)((int64_t)v13 + (int64_t)&g98); // 0x40643b\n                    int64_t v15 = v12; // 0x406444\n                    while (v14 == 0) {\n                        // 0x406446\n                        v12 = v15 + 1;\n                        v3 = v1;\n                        if (v1 == v12) {\n                            // break (via goto) -> 0x4063a0\n                            goto lab_0x4063a0_3;\n                        }\n                        // 0x406438\n                        v13 = *(char *)v12;\n                        v14 = *(char *)((int64_t)v13 + (int64_t)&g98);\n                        v15 = v12;\n                    }\n                    // 0x406460\n                    v4 = v12;\n                    v9 = v14;\n                    if (v11 == 0) {\n                        goto lab_0x4063c8_2;\n                    }\n                    v10 = v12;\n                    v11--;\n                }\n                int64_t v16 = v10 + 1; // 0x40640e\n                v6 = v11;\n                v7 = v16;\n                if (v1 <= v16) {\n                    uint64_t v17 = v16 + v2; // 0x406417\n                    return v1 > v17 ? v17 : v1;\n                }\n            }\n        }\n    } else {\n        // 0x40637a\n        if (v1 <= a1) {\n            // 0x4063a0\n            v5 = a1 + v2;\n            return v1 > v5 ? v5 : v1;\n        }\n        // 0x40637f\n        v4 = a1;\n        if (a3 != 0) {\n            int64_t v18 = a3 - 1;\n            int64_t v19 = a1;\n            int64_t v20; // 0x406397\n            while (g32 != (int32_t)*(char *)v19) {\n                // 0x406397\n                v20 = v19 + 1;\n                v3 = v20;\n                if (v1 <= v20) {\n                    // break (via goto) -> 0x4063a0\n                    goto lab_0x4063a0_3;\n                }\n                v19 = v20;\n            }\n            // 0x4063b0\n            v3 = v19;\n            while (v1 > v19) {\n                int64_t v21 = v19 + 1; // 0x4063b5\n                v3 = v21;\n                if (v1 <= v21) {\n                    // break -> 0x4063a0\n                    break;\n                }\n                // 0x4063be\n                v4 = v21;\n                if (v18 == 0) {\n                    goto lab_0x4063c8_2;\n                }\n                v18--;\n                v19 = v21;\n                while (g32 != (int32_t)*(char *)v19) {\n                    // 0x406397\n                    v20 = v19 + 1;\n                    v3 = v20;\n                    if (v1 <= v20) {\n                        // break (via goto) -> 0x4063a0\n                        goto lab_0x4063a0_3;\n                    }\n                    v19 = v20;\n                }\n                // 0x4063b0\n                v3 = v19;\n            }\n          lab_0x4063a0_3:\n            // 0x4063a0\n            v5 = v3 + v2;\n            return v1 > v5 ? v5 : v1;\n        }\n    }\n  lab_0x4063c8_2:\n    // 0x4063c8\n    if (*(char *)(a3 + 48) == 0) {\n        // 0x4063a0\n        v5 = v4 + v2;\n        return v1 > v5 ? v5 : v1;\n    }\n    int64_t v22 = v4;\n    unsigned char v23 = *(char *)v22; // 0x4063d9\n    while (*(char *)((int64_t)v23 + (int64_t)&g98) != 0) {\n        int64_t v24 = v22 + 1; // 0x4063d0\n        v3 = v24;\n        if (v1 <= v24) {\n            // 0x4063a0\n            v5 = v3 + v2;\n            return v1 > v5 ? v5 : v1;\n        }\n        v22 = v24;\n        v23 = *(char *)v22;\n    }\n    uint64_t v25 = v22 + v2; // 0x4063e5\n    return v1 > v25 ? v25 : v1;\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "4065ad",
            "decompiledFuncCode": "int64_t function_406470(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = *(int64_t *)(a3 + 24); // 0x406470\n    uint64_t v2 = a1 - 1 + a2; // 0x406474\n    int64_t v3 = *(int64_t *)(a3 + 16) + (int64_t)(v1 == 0); // 0x40648a\n    bool v4 = v2 <= a1 | v3 == 0;\n    int64_t result2; // 0x406470\n    if (g32 == 128) {\n        // 0x406529\n        result2 = a1;\n        if (!v4) {\n            unsigned char v5 = *(char *)a1; // 0x406540\n            char v6 = *(char *)((int64_t)v5 + (int64_t)&g98); // 0x406543\n            int64_t v7 = v3 - 1;\n            int64_t v8 = a1;\n            int64_t v9; // 0x406470\n            int64_t v10; // 0x40657f\n            unsigned char v11; // 0x406570\n            char v12; // 0x406573\n            while (v6 == 0) {\n                // 0x406560\n                result2 = v8;\n                if (v2 <= v8) {\n                    // break (via goto) -> 0x4064c0\n                    goto lab_0x4064c0_4;\n                }\n                v10 = v8 + 1;\n                result2 = v2;\n                if (v2 == v10) {\n                    // break (via goto) -> 0x4064c0\n                    goto lab_0x4064c0_4;\n                }\n                // 0x406570\n                v11 = *(char *)v10;\n                v12 = *(char *)((int64_t)v11 + (int64_t)&g98);\n                v9 = v10;\n                while (v12 == 0) {\n                    // 0x40657f\n                    v10 = v9 + 1;\n                    result2 = v2;\n                    if (v2 == v10) {\n                        // break (via goto) -> 0x4064c0\n                        goto lab_0x4064c0_4;\n                    }\n                    // 0x406570\n                    v11 = *(char *)v10;\n                    v12 = *(char *)((int64_t)v11 + (int64_t)&g98);\n                    v9 = v10;\n                }\n                // 0x406590\n                result2 = v10;\n                v6 = v12;\n                if (v7 == 0) {\n                    // break (via goto) -> 0x4064c0\n                    goto lab_0x4064c0_4;\n                }\n                v7--;\n                v8 = v10;\n            }\n            int64_t v13 = v8 + 1; // 0x40654f\n            result2 = v13;\n            while (v2 > v13) {\n                // 0x406540\n                v5 = *(char *)v13;\n                v6 = *(char *)((int64_t)v5 + (int64_t)&g98);\n                v8 = v13;\n                while (v6 == 0) {\n                    // 0x406560\n                    result2 = v8;\n                    if (v2 <= v8) {\n                        // break (via goto) -> 0x4064c0\n                        goto lab_0x4064c0_4;\n                    }\n                    v10 = v8 + 1;\n                    result2 = v2;\n                    if (v2 == v10) {\n                        // break (via goto) -> 0x4064c0\n                        goto lab_0x4064c0_4;\n                    }\n                    // 0x406570\n                    v11 = *(char *)v10;\n                    v12 = *(char *)((int64_t)v11 + (int64_t)&g98);\n                    v9 = v10;\n                    while (v12 == 0) {\n                        // 0x40657f\n                        v10 = v9 + 1;\n                        result2 = v2;\n                        if (v2 == v10) {\n                            // break (via goto) -> 0x4064c0\n                            goto lab_0x4064c0_4;\n                        }\n                        // 0x406570\n                        v11 = *(char *)v10;\n                        v12 = *(char *)((int64_t)v11 + (int64_t)&g98);\n                        v9 = v10;\n                    }\n                    // 0x406590\n                    result2 = v10;\n                    v6 = v12;\n                    if (v7 == 0) {\n                        // break (via goto) -> 0x4064c0\n                        goto lab_0x4064c0_4;\n                    }\n                    v7--;\n                    v8 = v10;\n                }\n                // 0x40654f\n                v13 = v8 + 1;\n                result2 = v13;\n            }\n        }\n    } else {\n        // 0x40649a\n        result2 = a1;\n        if (!v4) {\n            int64_t v14 = v3 - 1;\n            int64_t v15 = a1;\n            int64_t v16; // 0x4064b7\n            while (g32 != (int32_t)*(char *)v15) {\n                // 0x4064b7\n                v16 = v15 + 1;\n                result2 = v16;\n                if (v2 <= v16) {\n                    // break (via goto) -> 0x4064c0\n                    goto lab_0x4064c0_4;\n                }\n                v15 = v16;\n            }\n            // 0x406500\n            result2 = v15;\n            while (v2 > v15) {\n                int64_t result = v15; // 0x40650b\n                if ((v14 || v1) == 0) {\n                    // 0x406528\n                    return result;\n                }\n                int64_t v17 = v15 + 1; // 0x40650d\n                result2 = v17;\n                if (v14 != 0 != v2 > v17) {\n                    // break -> 0x4064c0\n                    break;\n                }\n                v14--;\n                v15 = v17;\n                while (g32 != (int32_t)*(char *)v15) {\n                    // 0x4064b7\n                    v16 = v15 + 1;\n                    result2 = v16;\n                    if (v2 <= v16) {\n                        // break (via goto) -> 0x4064c0\n                        goto lab_0x4064c0_4;\n                    }\n                    v15 = v16;\n                }\n                // 0x406500\n                result2 = v15;\n            }\n        }\n    }\n  lab_0x4064c0_4:\n    // 0x4064c0\n    if (v1 == 0) {\n        // 0x406528\n        return result2;\n    }\n    int64_t v18 = result2; // 0x4064c9\n    int64_t v19 = result2; // 0x4064c9\n    if (v2 > result2 == (*(char *)(a3 + 49) != 0)) {\n        unsigned char v20 = *(char *)v18; // 0x4064e5\n        v19 = v18;\n        while (*(char *)((int64_t)v20 + (int64_t)&g98) != 0) {\n            int64_t v21 = v18 + 1; // 0x4064d8\n            v18 = v21;\n            if (v2 == v21) {\n                uint64_t v22 = v1 + v2; // 0x4065a2\n                return v2 < v22 ? v2 : v22;\n            }\n            v20 = *(char *)v18;\n            v19 = v18;\n        }\n    }\n    uint64_t v23 = v19 + v1; // 0x4064f1\n    return v2 > v23 ? v23 : v2;\n}\n"
        },
        {
            "funcName": "function_4065b0",
            "funcStartAddr": "4065b0",
            "funcEndAddr": "4074c8",
            "decompiledFuncCode": "int64_t function_4065b0(int64_t a1, int64_t a2) {\n    // 0x4065b0\n    int64_t v1; // bp-8056, 0x4065b0\n    int64_t v2 = &v1;\n    int64_t str17; // bp-4056, 0x4065b0\n    int64_t v3 = &str17;\n    int128_t str16; // bp-8376, 0x4065b0\n    int64_t v4 = &str16;\n    int128_t v5; // bp-8220, 0x4065b0\n    int64_t v6 = &v5;\n    int64_t str13; // bp-8392, 0x4065b0\n    int64_t v7 = &str13;\n    int64_t endptr2; // bp-8408, 0x4065b0\n    int64_t v8 = &endptr2;\n    int64_t v9 = *(int64_t *)(a1 + 24); // 0x4065f5\n    int64_t v10 = a2; // 0x4065f5\n    int64_t v11 = a1; // 0x4065f5\n    int64_t v12 = *(int64_t *)(a2 + 24); // 0x4065f5\n    int64_t v13 = g83; // 0x4065f5\n    int64_t v14 = *(int64_t *)(a1 + 16); // 0x4065f5\n    int64_t v15 = *(int64_t *)(a2 + 16); // 0x4065f5\n    int3_t v16; // 0x4065b0\n    int3_t v17; // 0x4065b0\n    int3_t v18; // 0x4065b0\n    int64_t v19; // 0x4065b0\n    int64_t str; // 0x4065b0\n    int64_t str2; // 0x4065b0\n    int64_t v20; // 0x4065b0\n    int64_t v21; // 0x4065b0\n    int64_t v22; // 0x4065b0\n    int64_t v23; // 0x4065b0\n    int64_t v24; // 0x4065b0\n    int64_t v25; // 0x4065b0\n    int64_t v26; // 0x4065b0\n    int64_t v27; // 0x4065b0\n    int64_t v28; // 0x4065b0\n    int64_t v29; // 0x4065b0\n    int64_t v30; // 0x4065b0\n    int64_t v31; // 0x4065b0\n    int64_t v32; // 0x4065b0\n    int64_t v33; // 0x4065b0\n    int64_t v34; // 0x4065b0\n    int64_t v35; // 0x4065b0\n    int64_t v36; // 0x4065b0\n    int64_t v37; // 0x4065b0\n    int64_t v38; // 0x4065b0\n    int64_t v39; // 0x4065b0\n    int32_t v40; // 0x4065b0\n    int64_t v41; // 0x4065b0\n    int64_t v42; // 0x4065b0\n    int64_t v43; // 0x4065b0\n    int64_t v44; // 0x4065b0\n    int64_t v45; // 0x4065b0\n    int64_t v46; // 0x4065b0\n    int64_t v47; // 0x4065b0\n    int64_t v48; // 0x4065b0\n    int64_t v49; // 0x4065b0\n    int64_t v50; // 0x4065b0\n    char v51; // 0x4065b0\n    char v52; // 0x4065b0\n    char v53; // 0x4065b0\n    char v54; // 0x4065b0\n    char v55; // 0x4065b0\n    char v56; // 0x4065b0\n    float80_t v57; // 0x4065b0\n    float80_t v58; // 0x4065b0\n    float80_t v59; // 0x4065b0\n    int64_t v60; // 0x4065fe\n    int64_t v61; // 0x406603\n    uint64_t v62; // 0x406608\n    uint64_t v63; // 0x40660f\n    int64_t v64; // 0x406619\n    int64_t v65; // 0x40661c\n    while (true) {\n      lab_0x4065f8_2:\n        // 0x4065f8\n        str2 = v15;\n        str = v14;\n        v19 = v13;\n        uint64_t v66 = v12;\n        v28 = v27;\n        v36 = v11;\n        v42 = v10;\n        uint64_t v67 = v9;\n        v39 = v38;\n        v17 = v16;\n        v55 = v54;\n        v52 = v51;\n        v49 = v48;\n        v60 = *(int64_t *)(v19 + 40);\n        v61 = *(int64_t *)(v19 + 32);\n        v62 = str >= v67 ? str : v67;\n        v63 = str2 >= v66 ? str2 : v66;\n        v64 = v62 - str;\n        v65 = v63 - str2;\n        if (g103 != 0) {\n            goto lab_0x40663d;\n        } else {\n            // 0x406628\n            if ((*(int64_t *)(v19 + 48) & 0xffffffffff0000) == 0) {\n                // 0x406ae0\n                if (*(char *)(v19 + 56) != 0) {\n                    goto lab_0x40663d;\n                } else {\n                    if (v61 == 0) {\n                        if (v64 == 0) {\n                            // 0x407474\n                            v50 = v49;\n                            v53 = v52;\n                            v56 = v55;\n                            v58 = (int80_t)(v65 != 0);\n                            v18 = v17;\n                            v41 = v39;\n                            v47 = v42;\n                            v37 = v36;\n                            v29 = v28;\n                        } else {\n                            // 0x4073c3\n                            if (v65 == 0) {\n                                // break -> 0x40738a\n                                break;\n                            }\n                            int64_t v68; // 0x4065b0\n                            int64_t v69; // 0x4065b0\n                            int64_t v70; // 0x4065b0\n                            if (v60 != 0) {\n                                int64_t v71 = str2; // 0x407353\n                                int64_t v72 = str; // 0x407353\n                                v69 = v39;\n                                v70 = v42;\n                                v68 = v36;\n                                if (v62 > str == v63 > str2) {\n                                    unsigned char v73 = *(char *)(v60 + (int64_t)*(char *)v72); // 0x407374\n                                    unsigned char v74 = *(char *)(v60 + (int64_t)*(char *)v71); // 0x40737a\n                                    int32_t v75 = (int32_t)v73 - (int32_t)v74; // 0x407380\n                                    v40 = v75;\n                                    if (v75 != 0) {\n                                        // 0x407384\n                                        v57 = (int80_t)v40;\n                                        goto lab_0x40738a;\n                                    }\n                                    int64_t v76 = v72 + 1; // 0x407362\n                                    int64_t v77 = v71 + 1; // 0x407366\n                                    v71 = v77;\n                                    v72 = v76;\n                                    v69 = 0;\n                                    v70 = v42;\n                                    v68 = v36;\n                                    while (v77 < v63 == v76 < v62) {\n                                        // 0x407362\n                                        v73 = *(char *)(v60 + (int64_t)*(char *)v72);\n                                        v74 = *(char *)(v60 + (int64_t)*(char *)v71);\n                                        v75 = (int32_t)v73 - (int32_t)v74;\n                                        v40 = v75;\n                                        if (v75 != 0) {\n                                            // 0x407384\n                                            v57 = (int80_t)v40;\n                                            goto lab_0x40738a;\n                                        }\n                                        // 0x407350\n                                        v76 = v72 + 1;\n                                        v77 = v71 + 1;\n                                        v71 = v77;\n                                        v72 = v76;\n                                        v69 = 0;\n                                        v70 = v42;\n                                        v68 = v36;\n                                    }\n                                }\n                            } else {\n                                int64_t n = v64 > v65 ? v65 : v64; // 0x4073e1\n                                int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n); // 0x4073ef\n                                v69 = n;\n                                v70 = str2;\n                                v68 = str;\n                                if (memcmp_rc != 0) {\n                                    // 0x40680d\n                                    v59 = (int80_t)memcmp_rc;\n                                    goto lab_0x40680d_2;\n                                }\n                            }\n                            // 0x407409\n                            v57 = -NAN;\n                            if (v64 < v65) {\n                                // break -> 0x40738a\n                                break;\n                            }\n                            // 0x40740e\n                            v50 = v49;\n                            v53 = v52;\n                            v56 = v55;\n                            v58 = (int80_t)(v64 != v65);\n                            v18 = v17;\n                            v41 = v69;\n                            v47 = v70;\n                            v37 = v68;\n                            v29 = v28;\n                        }\n                    } else {\n                        // 0x406af5\n                        v34 = str;\n                        v43 = v42;\n                        v21 = str2;\n                        v31 = str;\n                        v25 = str2;\n                        if (v60 == 0) {\n                            while (true) {\n                              lab_0x406baa:\n                                // 0x406baa\n                                v26 = v25;\n                                v32 = v31;\n                                if (v32 >= v62) {\n                                    goto lab_0x406bba;\n                                } else {\n                                    // 0x406baf\n                                    v24 = v26;\n                                    if (*(char *)(v61 + (int64_t)*(char *)v32) != 0) {\n                                        goto lab_0x406ba6;\n                                    } else {\n                                        goto lab_0x406bba;\n                                    }\n                                }\n                            }\n                        } else {\n                            while (true) {\n                              lab_0x406b08:\n                                // 0x406b08\n                                v22 = v21;\n                                v44 = v43;\n                                v35 = v34;\n                                if (v35 >= v62) {\n                                    goto lab_0x406b17;\n                                } else {\n                                    // 0x406b0d\n                                    v45 = v44;\n                                    v23 = v22;\n                                    if (*(char *)(v61 + (int64_t)*(char *)v35) != 0) {\n                                        goto lab_0x406b71;\n                                    } else {\n                                        goto lab_0x406b17;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x406bee_6:;\n                        int64_t v78 = (int64_t)(v30 < v62) - (int64_t)(v63 > v20); // 0x406bfd\n                        v50 = v49;\n                        v53 = v52;\n                        v56 = v55;\n                        v58 = (int80_t)v78;\n                        v18 = v17;\n                        v41 = v78 & 0xffffffff;\n                        v47 = v46;\n                        v37 = v36;\n                        v29 = v33;\n                    }\n                    goto lab_0x4066f6;\n                }\n            } else {\n                goto lab_0x40663d;\n            }\n        }\n    }\n    goto lab_0x40738a;\n  lab_0x40680d_2:;\n    float80_t v80 = v59; // 0x406815\n    float80_t v79 = v59; // 0x406815\n    if (*(char *)(v19 + 55) != 0) {\n        goto lab_0x407395;\n    } else {\n        goto lab_0x40681b;\n    }\n  lab_0x406f13:;\n    // 0x406f13\n    int64_t v81; // 0x4065b0\n    uint64_t v82 = 3 * v81 / 2; // 0x406f29\n    uint64_t v83; // 0x406deb\n    int64_t size = v83 >= v82 ? v83 : v82; // 0x406f2f\n    int64_t v84; // 0x4065b0\n    free((int64_t *)v84);\n    int64_t * mem = malloc((int32_t)size); // 0x406f3e\n    int64_t v85 = (int64_t)mem; // 0x406f3e\n    int64_t v86 = mem == NULL ? 4000 : size; // 0x406f53\n    int64_t v87 = mem != NULL ? v85 : v3; // 0x406f57\n    int64_t v88; // 0x4065b0\n    int64_t v89 = v88; // 0x406f60\n    float80_t v90; // 0x4065b0\n    float80_t v91 = v90; // 0x406f60\n    int64_t v92 = v85; // 0x406f60\n    int64_t v93; // 0x4065b0\n    int64_t v94 = v93; // 0x406f60\n    int64_t v95 = v87; // 0x406f60\n    int64_t v96 = v86; // 0x406f60\n    int64_t v97 = v88; // 0x406f60\n    float80_t v98 = v90; // 0x406f60\n    int64_t v99 = v85; // 0x406f60\n    int64_t v100 = v93; // 0x406f60\n    int64_t v101 = v87; // 0x406f60\n    int64_t v102 = v86; // 0x406f60\n    uint64_t v103; // 0x406dc3\n    if (v103 > v93) {\n        goto lab_0x406f66;\n    } else {\n        goto lab_0x406e46;\n    }\n  lab_0x406e3b:;\n    // 0x406e3b\n    int64_t v104; // 0x4065b0\n    v89 = v104;\n    float80_t v105; // 0x4065b0\n    v91 = v105;\n    int64_t v106; // 0x4065b0\n    v92 = v106;\n    int64_t v107; // 0x4065b0\n    v94 = v107;\n    int64_t v108; // 0x4065b0\n    v95 = v108;\n    int64_t v109; // 0x4065b0\n    v96 = v109;\n    v97 = v104;\n    v98 = v105;\n    v99 = v106;\n    v100 = v107;\n    v101 = v108;\n    v102 = v109;\n    if (v103 > v107) {\n        goto lab_0x406f66;\n    } else {\n        goto lab_0x406e46;\n    }\n  lab_0x406f66:;\n    int64_t v110 = v102;\n    int64_t v111 = v101;\n    int64_t v112 = v100;\n    int64_t v113 = v99;\n    float80_t v114 = v98;\n    int64_t v115 = v97;\n    int64_t v116 = function_405ef0(v111, v112, v110) + 1; // 0x406f79\n    int64_t v117; // 0x4065b0\n    int64_t v118; // 0x4065b0\n    int64_t v119; // 0x4065b0\n    int64_t v120; // 0x4065b0\n    int64_t v121; // 0x4065b0\n    int64_t v122; // 0x4065b0\n    int64_t v123; // 0x4065b0\n    int64_t v124; // 0x4065b0\n    int64_t v125; // 0x4065b0\n    int64_t v126; // 0x4065b0\n    int64_t v127; // 0x4065b0\n    int64_t v128; // 0x4065b0\n    int64_t v129; // 0x4065b0\n    int64_t v130; // 0x4065b0\n    int64_t v131; // 0x4065b0\n    int64_t v132; // 0x4065b0\n    int64_t v133; // 0x4065b0\n    int64_t v134; // 0x4065b0\n    int64_t v135; // 0x4065b0\n    int64_t v136; // 0x4065b0\n    int64_t v137; // 0x4065b0\n    int64_t v138; // 0x4065b0\n    float80_t v139; // 0x4065b0\n    float80_t v140; // 0x4065b0\n    float80_t v141; // 0x4065b0\n    uint64_t v142; // 0x406dde\n    if (v142 > v115) {\n        // 0x406f88\n        v137 = v115;\n        v139 = v114;\n        v134 = v113;\n        v132 = 0;\n        v129 = v116;\n        v127 = v112;\n        v131 = 0;\n        v120 = v111;\n        v123 = v110;\n        if (v110 >= v116) {\n            // 0x4074b8\n            v137 = v115;\n            v139 = v114;\n            v134 = v113;\n            v132 = v110 - v116;\n            v129 = v116;\n            v127 = v112;\n            v131 = v116 + v111;\n            v120 = v111;\n            v123 = v110;\n        }\n        goto lab_0x406f95;\n    } else {\n        // 0x40739d\n        v138 = v115;\n        v140 = v114;\n        v135 = v113;\n        v130 = v116;\n        v125 = v112;\n        v118 = 0;\n        v122 = v116;\n        v136 = v115;\n        v141 = v114;\n        v133 = v113;\n        v128 = v116;\n        v126 = v112;\n        v117 = 0;\n        v119 = v111;\n        v121 = v116;\n        v124 = v110;\n        if (v110 < v116) {\n            goto lab_0x406fb0;\n        } else {\n            goto lab_0x4073ac;\n        }\n    }\n  lab_0x406e46:;\n    int64_t v143 = v89; // 0x406e50\n    float80_t v144 = v91; // 0x406e50\n    int64_t v145 = v92; // 0x406e50\n    int64_t v146 = 0; // 0x406e50\n    int64_t v147 = v94; // 0x406e50\n    int64_t v148 = 0; // 0x406e50\n    int64_t v149 = v95; // 0x406e50\n    int64_t v150 = v96; // 0x406e50\n    v137 = v89;\n    v139 = v91;\n    v134 = v92;\n    v132 = v96;\n    v129 = 0;\n    v127 = v94;\n    v131 = v95;\n    v120 = v95;\n    v123 = v96;\n    if (v142 > v89) {\n        goto lab_0x406f95;\n    } else {\n        goto lab_0x406e5b;\n    }\n  lab_0x406f95:;\n    int64_t v151 = function_405ef0(v131, v137, v132) + 1; // 0x406f9f\n    int64_t v152 = v151 + v129; // 0x406fa3\n    v138 = v137;\n    v140 = v139;\n    v135 = v134;\n    v130 = v129;\n    v125 = v127;\n    v118 = v151;\n    v122 = v152;\n    v136 = v137;\n    v141 = v139;\n    v133 = v134;\n    v128 = v129;\n    v126 = v127;\n    v117 = v151;\n    v119 = v120;\n    v121 = v152;\n    v124 = v123;\n    if (v123 >= v129) {\n        goto lab_0x4073ac;\n    } else {\n        goto lab_0x406fb0;\n    }\n  lab_0x406e5b:;\n    int64_t v153 = v150;\n    int64_t v154 = v149;\n    int64_t v155 = v148;\n    int64_t str3 = v147;\n    int64_t v156 = v146;\n    int64_t v157 = v145;\n    float80_t v158 = v144;\n    int64_t v159 = v143;\n    int64_t v160 = v154 + v156; // 0x406e5b\n    int64_t v161; // 0x4065b0\n    int64_t v162; // 0x4065b0\n    int64_t v163; // 0x4065b0\n    int64_t v164; // 0x4065b0\n    int64_t v165; // 0x4065b0\n    int64_t v166; // 0x4065b0\n    int64_t v167; // 0x4065b0\n    int64_t v168; // 0x4065b0\n    int64_t v169; // 0x4065b0\n    int64_t v170; // 0x4065b0\n    int64_t v171; // 0x4065b0\n    int64_t v172; // 0x4065b0\n    int64_t v173; // 0x4065b0\n    int64_t v174; // 0x4065b0\n    int64_t v175; // 0x4065b0\n    int64_t v176; // 0x4065b0\n    int64_t v177; // 0x4065b0\n    int64_t v178; // 0x4065b0\n    int64_t v179; // 0x4065b0\n    int64_t v180; // 0x4065b0\n    int64_t v181; // 0x4065b0\n    int64_t v182; // 0x4065b0\n    float80_t v183; // 0x4065b0\n    float80_t v184; // 0x4065b0\n    float80_t v185; // 0x4065b0\n    if (v103 > str3) {\n        int64_t v186 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406e7d\n        v181 = v159;\n        v185 = v158;\n        v178 = v157;\n        v174 = v160;\n        v171 = v156;\n        v169 = v186;\n        v161 = v155;\n        v163 = v154;\n        v166 = v153;\n        v180 = v159;\n        v184 = v158;\n        v177 = v157;\n        v176 = v160;\n        v170 = v156;\n        v168 = v186;\n        v162 = v155;\n        v165 = v154;\n        v167 = v153;\n        if (v142 > v159) {\n            goto lab_0x4070fa;\n        } else {\n            goto lab_0x406e90;\n        }\n    } else {\n        // 0x407120\n        v182 = v155;\n        v183 = v158;\n        v179 = v157;\n        v175 = v160;\n        v173 = v159;\n        v172 = v156;\n        v164 = v154;\n        v180 = v159;\n        v184 = v158;\n        v177 = v157;\n        v176 = v160;\n        v170 = v156;\n        v168 = str3;\n        v162 = v155;\n        v165 = v154;\n        v167 = v153;\n        if (v142 <= v159) {\n            // break -> 0x40703a\n            goto lab_0x40703a_3;\n        }\n        goto lab_0x4070fa;\n    }\n  lab_0x406fb0:;\n    uint64_t v187 = v122;\n    int64_t n3 = v118;\n    uint64_t str5 = v125;\n    int64_t n2 = v130;\n    float80_t v188 = v140;\n    int64_t str7 = v138;\n    int64_t v189 = v187 < 0x5555555555555555 ? 3 * v187 / 2 : v187;\n    free((int64_t *)v135);\n    int64_t str4 = function_411210(v189); // 0x406fd3\n    if (v103 > str5) {\n        // 0x407190\n        strxfrm((char *)str4, (char *)str5, (int32_t)n2);\n    }\n    int64_t str6 = str4 + n2; // 0x406fe6\n    if (v142 > str7) {\n        // 0x4070d0\n        strxfrm((char *)str6, (char *)str7, (int32_t)n3);\n        int64_t v190 = str5; // 0x4070e3\n        if (v103 > str5) {\n            // 0x4070e5\n            v190 = str5 + 1 + (int64_t)strlen((char *)str5);\n        }\n        // 0x4070f2\n        v180 = str7;\n        v184 = v188;\n        v177 = str4;\n        v176 = str6;\n        v170 = n2;\n        v168 = v190;\n        v162 = n3;\n        v165 = str4;\n        v167 = v189;\n        goto lab_0x4070fa;\n    } else {\n        // 0x407000\n        v182 = n3;\n        v183 = v188;\n        v179 = str4;\n        v175 = str6;\n        v173 = str7;\n        v172 = n2;\n        v164 = str4;\n        if (v103 <= str5) {\n            // break -> 0x40703a\n            goto lab_0x40703a_3;\n        }\n        // 0x407160\n        v181 = str7;\n        v185 = v188;\n        v178 = str4;\n        v174 = str6;\n        v171 = n2;\n        v169 = str5 + 1 + (int64_t)strlen((char *)str5);\n        v161 = n3;\n        v163 = str4;\n        v166 = v189;\n        goto lab_0x406e90;\n    }\n  lab_0x4073ac:\n    // 0x4073ac\n    v143 = v136;\n    v144 = v141;\n    v145 = v133;\n    v146 = v128;\n    v147 = v126;\n    v148 = v117;\n    v149 = v119;\n    v150 = v124;\n    v138 = v136;\n    v140 = v141;\n    v135 = v133;\n    v130 = v128;\n    v125 = v126;\n    v118 = v117;\n    v122 = v121;\n    if (v124 < v121) {\n        goto lab_0x406fb0;\n    } else {\n        goto lab_0x406e5b;\n    }\n  lab_0x4070fa:;\n    int64_t str8 = v180;\n    v181 = str8 + 1 + (int64_t)strlen((char *)str8);\n    v185 = v184;\n    v178 = v177;\n    v174 = v176;\n    v171 = v170;\n    v169 = v168;\n    v161 = v162;\n    v163 = v165;\n    v166 = v167;\n    goto lab_0x406e90;\n  lab_0x406e90:;\n    int64_t str9 = v163;\n    uint64_t v191 = v161;\n    int64_t v192 = v169;\n    uint64_t v193 = v171;\n    int64_t str10 = v174;\n    int64_t v194 = v178;\n    float80_t v195 = v185;\n    int64_t v196 = v181;\n    v182 = v191;\n    v183 = v195;\n    v179 = v194;\n    v175 = str10;\n    v173 = v196;\n    v172 = v193;\n    v164 = str9;\n    if (v142 <= v196 && v103 <= v192) {\n        // break -> 0x40703a\n        goto lab_0x40703a_3;\n    }\n    int64_t v197 = v166;\n    function_40b360((char)str9, v193, (int64_t *)&str16);\n    function_40b360((char)str10, v191, (int64_t *)&v5);\n    float80_t v198 = v195; // 0x406ed4\n    if ((int32_t)(int64_t)(float64_t)v195 != 0) {\n        goto lab_0x406e30;\n    } else {\n        int64_t n4 = v193 > v191 ? v191 : v193; // 0x406ee6\n        int32_t memcmp_rc2 = memcmp((int64_t *)str9, (int64_t *)str10, (int32_t)n4); // 0x406eea\n        v198 = (int80_t)memcmp_rc2;\n        if (memcmp_rc2 != 0) {\n            goto lab_0x406e30;\n        } else {\n            // 0x406efa\n            v104 = v196;\n            v105 = (int80_t)((int64_t)(v193 > v191) - (int64_t)(v193 < v191));\n            v106 = v194;\n            v107 = v192;\n            v108 = str9;\n            v109 = v197;\n            v88 = v196;\n            v90 = (int80_t)((int64_t)(v193 > v191) - (int64_t)(v193 < v191));\n            v84 = v194;\n            v93 = v192;\n            v81 = v197;\n            if (v83 > v197) {\n                goto lab_0x406f13;\n            } else {\n                goto lab_0x406e3b;\n            }\n        }\n    }\n  lab_0x406e30:;\n    int64_t v199 = v196; // 0x4065b0\n    float80_t v200 = v198; // 0x4065b0\n    int64_t v201 = v194; // 0x4065b0\n    int64_t v202 = v192; // 0x4065b0\n    int64_t v203 = str9; // 0x4065b0\n    int64_t v204 = v197; // 0x4065b0\n    goto lab_0x406e30_2;\n  lab_0x40694c:;\n    // 0x40694c\n    int64_t v205; // 0x4065b0\n    int64_t v206 = v205;\n    int64_t v207; // 0x4065b0\n    int64_t v208 = v207 + 1; // 0x40694c\n    int64_t v209 = v206; // 0x406953\n    v207 = v208;\n    if (v63 == v208) {\n        // break -> 0x406970\n        goto lab_0x406970;\n    }\n    goto lab_0x406955;\n  lab_0x406944:;\n    // 0x406944\n    int64_t v210; // 0x4065b0\n    char v213; // 0x4065b0\n    int64_t v215; // 0x4065b0\n    *(char *)(v210 + v215) = v213;\n    v205 = v210 + 1;\n    goto lab_0x40694c;\n  lab_0x4068f4:;\n    // 0x4068f4\n    int64_t v216; // 0x4065b0\n    int64_t v217 = v216 + 1; // 0x4068f4\n    int64_t v218 = v217; // 0x4068fb\n    int64_t v219; // 0x4065b0\n    int64_t v220 = v219; // 0x4068fb\n    int64_t v221; // 0x4068d1\n    if (v221 == v217) {\n        // break -> 0x406918\n        goto lab_0x406918;\n    }\n    goto lab_0x4068fd;\n  lab_0x4068ec:;\n    // 0x4068ec\n    int64_t v222; // 0x4065b0\n    char v226; // 0x4065b0\n    int64_t v228; // 0x4065b0\n    *(char *)(v222 + v228) = v226;\n    v219 = v222 + 1;\n    goto lab_0x4068f4;\n  lab_0x406bba:;\n    int64_t v229 = v26; // 0x406bbd\n    v46 = v42;\n    v33 = v32;\n    v20 = v26;\n    v30 = v32;\n    if (v26 >= v63) {\n        // break -> 0x406bee\n        goto lab_0x406bee_6;\n    }\n    int64_t v230 = v229;\n    unsigned char v231 = *(char *)v230; // 0x406bd5\n    while (*(char *)(v61 + (int64_t)v231) != 0) {\n        int64_t v232 = v230 + 1; // 0x406bc8\n        v229 = v232;\n        v46 = v42;\n        v33 = v32;\n        v20 = v63;\n        v30 = v32;\n        if (v63 == v232) {\n            // break (via goto) -> 0x406bee\n            goto lab_0x406bee_6;\n        }\n        v230 = v229;\n        v231 = *(char *)v230;\n    }\n    // 0x406be0\n    v46 = v42;\n    v33 = v32;\n    v20 = v230;\n    v30 = v32;\n    if (v32 < v62 != v63 > v230) {\n        // break -> 0x406bee\n        goto lab_0x406bee_6;\n    }\n    int32_t v233 = (int32_t)*(char *)v32 - (int32_t)v231; // 0x406b9a\n    v40 = v233;\n    if (v233 != 0) {\n        // 0x407384\n        v57 = (int80_t)v40;\n        goto lab_0x40738a;\n    }\n    // 0x406ba2\n    v24 = v230 + 1;\n    goto lab_0x406ba6;\n  lab_0x406ba6:\n    // 0x406ba6\n    v31 = v32 + 1;\n    v25 = v24;\n    goto lab_0x406baa;\n  lab_0x406b17:\n    // 0x406b17\n    if (v22 >= v63) {\n        // break -> 0x406bee\n        goto lab_0x406bee_6;\n    }\n    int64_t v234 = v22;\n    int64_t v235 = (int64_t)*(char *)v234; // 0x406b35\n    while (*(char *)(v61 + v235) != 0) {\n        int64_t v236 = v234 + 1; // 0x406b28\n        int64_t v237 = v236; // 0x406b2f\n        v46 = v44;\n        v33 = str;\n        v20 = v63;\n        v30 = v35;\n        if (v63 == v236) {\n            // break (via goto) -> 0x406bee\n            goto lab_0x406bee_6;\n        }\n        v234 = v237;\n        v235 = (int64_t)*(char *)v234;\n    }\n    // 0x406b40\n    v46 = v44;\n    v33 = str;\n    v20 = v234;\n    v30 = v35;\n    if (v35 < v62 != v63 > v234) {\n        // break -> 0x406bee\n        goto lab_0x406bee_6;\n    }\n    unsigned char v238 = *(char *)(v60 + (int64_t)*(char *)v35); // 0x406b59\n    unsigned char v239 = *(char *)(v60 + v235); // 0x406b5f\n    int32_t v240 = (int32_t)v238 - (int32_t)v239; // 0x406b65\n    v40 = v240;\n    if (v240 != 0) {\n        // 0x407384\n        v57 = (int80_t)v40;\n        goto lab_0x40738a;\n    }\n    // 0x406b6d\n    v45 = v239;\n    v23 = v234 + 1;\n    goto lab_0x406b71;\n  lab_0x406b71:\n    // 0x406b71\n    v34 = v35 + 1;\n    v43 = v45;\n    v21 = v23;\n    goto lab_0x406b08;\n  lab_0x40663d:;\n    int64_t v241; // 0x4065b0\n    int64_t v242; // 0x4065b0\n    int64_t v243; // 0x4065b0\n    int64_t v244; // 0x4065b0\n    int64_t v245; // 0x4065b0\n    int64_t v246; // 0x4065b0\n    int64_t v247; // 0x4065b0\n    int64_t v248; // 0x4065b0\n    int64_t v249; // 0x4065b0\n    int64_t v250; // 0x4065b0\n    int64_t v251; // 0x4065b0\n    int64_t v252; // 0x4065b0\n    int64_t v253; // 0x4065b0\n    int64_t v254; // 0x4065b0\n    int64_t v255; // 0x4065b0\n    int64_t v256; // 0x4065b0\n    char v257; // 0x4065b0\n    char v258; // 0x4065b0\n    int64_t v259; // 0x4068a0\n    if ((v61 || v60) != 0) {\n        // 0x4068a0\n        v259 = v64 + 2 + v65;\n        if (v259 < 4001) {\n            // 0x4068b2\n            v249 = v2;\n            v243 = v64;\n            v256 = 0;\n            v250 = v2;\n            v253 = v64 + (v2 | 1);\n            v244 = 0;\n            if (v64 == 0) {\n                goto lab_0x406c75;\n            } else {\n                goto lab_0x4068d1;\n            }\n        } else {\n            int64_t v260 = function_411210(v259); // 0x406c51\n            int64_t v261 = (int64_t)(float64_t)(float80_t)(int80_t)v64 + 1 + v260; // 0x406c67\n            v249 = v260;\n            v243 = (float64_t)(float80_t)(int80_t)v64;\n            v256 = v260;\n            v250 = v260;\n            v253 = v261;\n            v244 = (float64_t)(float80_t)(int80_t)v64;\n            if ((int64_t)(float64_t)(float80_t)(int80_t)v64 != 0) {\n                goto lab_0x4068d1;\n            } else {\n                goto lab_0x406c75;\n            }\n        }\n    } else {\n        char * v262 = (char *)v62; // 0x40664e\n        *v262 = 0;\n        char * v263 = (char *)v63; // 0x406658\n        unsigned char v264 = *v263; // 0x406658\n        *v263 = 0;\n        v255 = v49;\n        v257 = v264;\n        v258 = *v262;\n        v248 = v264;\n        v252 = v39;\n        v254 = v42;\n        v251 = v36;\n        v247 = v28;\n        v241 = v65;\n        v242 = v64;\n        v245 = str;\n        v246 = str2;\n        goto lab_0x406662;\n    }\n  lab_0x406662:;\n    int64_t v265 = v246;\n    int64_t v266 = v245;\n    int64_t v267 = v242;\n    int64_t v268 = v241;\n    int64_t v269 = v247;\n    char v270 = v258;\n    char v271 = v257;\n    int64_t v272 = v255;\n    int3_t v273; // 0x4065b0\n    int64_t v274; // 0x4065b0\n    int64_t v275; // 0x4065b0\n    int64_t v276; // 0x4065b0\n    int64_t v277; // 0x4065b0\n    int64_t str14; // 0x4065b0\n    int64_t v278; // 0x4065b0\n    int64_t v279; // 0x4065b0\n    int64_t v280; // 0x4065b0\n    int64_t v281; // 0x4065b0\n    int64_t v282; // 0x4065b0\n    int64_t v283; // 0x4065b0\n    int64_t v284; // 0x4065b0\n    int64_t v285; // 0x4065b0\n    int64_t v286; // 0x4065b0\n    int64_t v287; // 0x4065b0\n    int64_t v288; // 0x4065b0\n    int64_t v289; // 0x4065b0\n    int64_t v290; // 0x4065b0\n    int64_t v291; // 0x4065b0\n    int64_t v292; // 0x4065b0\n    float80_t v293; // 0x4065b0\n    float80_t v294; // 0x4065b0\n    char * str11; // 0x40699d\n    char * str12; // 0x4069b0\n    int3_t v295; // 0x4069da\n    if (*(char *)(v19 + 50) != 0) {\n        unsigned char v296 = *(char *)v266; // 0x406830\n        int64_t v297 = v266; // 0x40683e\n        int64_t v298 = v266; // 0x40683e\n        if (*(char *)((int64_t)v296 + (int64_t)&g98) != 0) {\n            int64_t v299 = v297 + 1; // 0x406840\n            unsigned char v300 = *(char *)v299; // 0x406844\n            v297 = v299;\n            v298 = v299;\n            while (*(char *)((int64_t)v300 + (int64_t)&g98) != 0) {\n                // 0x406840\n                v299 = v297 + 1;\n                v300 = *(char *)v299;\n                v297 = v299;\n                v298 = v299;\n            }\n        }\n        unsigned char v301 = *(char *)v265; // 0x406850\n        int64_t v302 = v265; // 0x40685e\n        int64_t v303 = v265; // 0x40685e\n        if (*(char *)((int64_t)v301 + (int64_t)&g98) != 0) {\n            int64_t v304 = v302 + 1; // 0x406860\n            unsigned char v305 = *(char *)v304; // 0x406864\n            v302 = v304;\n            v303 = v304;\n            while (*(char *)((int64_t)v305 + (int64_t)&g98) != 0) {\n                // 0x406860\n                v304 = v302 + 1;\n                v305 = *(char *)v304;\n                v302 = v304;\n                v303 = v304;\n            }\n        }\n        // 0x406870\n        v293 = (int80_t)(0x100000000 * function_4106a0(v298, v303, g105, g104) >> 32);\n        v273 = v17;\n        v283 = g105;\n        v287 = v303;\n        v280 = v298;\n        v277 = v268;\n        goto lab_0x4066d8;\n    } else {\n        // 0x40666e\n        v282 = v252;\n        if (*(char *)(v19 + 52) != 0) {\n            // 0x406988\n            str11 = (char *)v266;\n            int64_t endptr; // bp-8416, 0x4065b0\n            strtold(str11, (char **)&endptr);\n            float80_t v306 = __frontend_reg_load_fpr(v17); // 0x4069ad\n            str12 = (char *)v265;\n            strtold(str12, (char **)&endptr2);\n            __frontend_reg_store_fpr(v17, v306);\n            if (v266 == endptr) {\n                // 0x4071c0\n                __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v17));\n                int3_t v307 = v17 + 1; // 0x4071c0\n                __frontend_reg_store_fpr(v307, __frontend_reg_load_fpr(v307));\n                v293 = (int80_t)(endptr2 != v265);\n                v273 = v17 + 2;\n                v283 = v282;\n                v287 = v8;\n                v280 = v265;\n                v277 = v268;\n                goto lab_0x4066d8;\n            } else {\n                // 0x4069d0\n                if (v265 == endptr2) {\n                    // 0x406a28\n                    __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v17));\n                    int3_t v308 = v17 + 1; // 0x406a28\n                    __frontend_reg_store_fpr(v308, __frontend_reg_load_fpr(v308));\n                    v293 = 3.64519953188247460253e-4951L;\n                    v273 = v17 + 2;\n                    v283 = v282;\n                    v287 = v8;\n                    v280 = v265;\n                    v277 = v268;\n                    goto lab_0x4066d8;\n                } else {\n                    // 0x4069da\n                    v295 = v17 + 1;\n                    float80_t v309 = __frontend_reg_load_fpr(v17); // 0x4069da\n                    __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v295));\n                    __frontend_reg_store_fpr(v295, v309);\n                    float80_t v310 = __frontend_reg_load_fpr(v17); // 0x4069dc\n                    float80_t v311 = __frontend_reg_load_fpr(v295); // 0x4069dc\n                    float80_t v312 = __frontend_reg_load_fpr(v17);\n                    if (v310 <= v311) {\n                        // 0x4069e4\n                        __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v295));\n                        __frontend_reg_store_fpr(v295, v312);\n                        float80_t v313 = __frontend_reg_load_fpr(v17); // 0x4069e6\n                        float80_t v314 = __frontend_reg_load_fpr(v295); // 0x4069e6\n                        float80_t v315 = __frontend_reg_load_fpr(v17);\n                        if (v313 <= v314) {\n                            float80_t v316 = __frontend_reg_load_fpr(v295); // 0x4069f5\n                            float80_t v317 = __frontend_reg_load_fpr(v17);\n                            if (v315 != v316 == v315 == v316) {\n                                // 0x406a03\n                                __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v295));\n                                __frontend_reg_store_fpr(v295, v317);\n                                goto lab_0x406a08;\n                            } else {\n                                if (v315 != v316) {\n                                    // 0x4069ff\n                                    __frontend_reg_store_fpr(v17, __frontend_reg_load_fpr(v295));\n                                    __frontend_reg_store_fpr(v295, v317);\n                                    goto lab_0x406a08;\n                                } else {\n                                    // 0x4071e0\n                                    __frontend_reg_store_fpr(v17, v317);\n                                    __frontend_reg_store_fpr(v295, __frontend_reg_load_fpr(v295));\n                                    v293 = 0.0L;\n                                    v273 = v17 + 2;\n                                    v283 = v282;\n                                    v287 = v8;\n                                    v280 = v265;\n                                    v277 = v268;\n                                    goto lab_0x4066d8;\n                                }\n                            }\n                        } else {\n                            // 0x4066d0\n                            __frontend_reg_store_fpr(v17, v315);\n                            __frontend_reg_store_fpr(v295, __frontend_reg_load_fpr(v295));\n                            v293 = 3.64519953188247460253e-4951L;\n                            v273 = v17 + 2;\n                            v283 = v282;\n                            v287 = v8;\n                            v280 = v265;\n                            v277 = v268;\n                            goto lab_0x4066d8;\n                        }\n                    } else {\n                        // 0x407495\n                        __frontend_reg_store_fpr(v17, v312);\n                        __frontend_reg_store_fpr(v295, __frontend_reg_load_fpr(v295));\n                        goto lab_0x40749d;\n                    }\n                }\n            }\n        } else {\n            int64_t v318 = v254;\n            if (*(char *)(v19 + 53) != 0) {\n                unsigned char v319 = *(char *)v266; // 0x406a40\n                int64_t v320 = v266; // 0x406a4e\n                int64_t v321 = v266; // 0x406a4e\n                if (*(char *)((int64_t)v319 + (int64_t)&g98) != 0) {\n                    int64_t v322 = v320 + 1; // 0x406a50\n                    unsigned char v323 = *(char *)v322; // 0x406a54\n                    v320 = v322;\n                    v321 = v322;\n                    while (*(char *)((int64_t)v323 + (int64_t)&g98) != 0) {\n                        // 0x406a50\n                        v322 = v320 + 1;\n                        v323 = *(char *)v322;\n                        v320 = v322;\n                        v321 = v322;\n                    }\n                }\n                int64_t v324 = v321;\n                unsigned char v325 = *(char *)v265; // 0x406a60\n                int64_t v326 = v265; // 0x406a6e\n                int64_t v327 = v265; // 0x406a6e\n                if (*(char *)((int64_t)v325 + (int64_t)&g98) != 0) {\n                    int64_t v328 = v326 + 1; // 0x406a70\n                    unsigned char v329 = *(char *)v328; // 0x406a74\n                    v326 = v328;\n                    v327 = v328;\n                    while (*(char *)((int64_t)v329 + (int64_t)&g98) != 0) {\n                        // 0x406a70\n                        v328 = v326 + 1;\n                        v329 = *(char *)v328;\n                        v326 = v328;\n                        v327 = v328;\n                    }\n                }\n                int64_t v330 = v327;\n                int64_t v331 = function_4059f0(v324, v318, v282); // 0x406a8e\n                int32_t v332 = (int32_t)v331 - (int32_t)function_4059f0(v330, v318, v282); // 0x406aa8\n                v293 = (int80_t)v332;\n                v273 = v17;\n                v283 = v282;\n                v287 = v318;\n                v280 = v330;\n                v277 = v268;\n                if (v332 == 0) {\n                    // 0x406ab5\n                    v293 = (int80_t)(0x100000000 * function_4106a0(v324, v330, g105, g104) >> 32);\n                    v273 = v17;\n                    v283 = g105;\n                    v287 = v330;\n                    v280 = v324;\n                    v277 = v268;\n                }\n                goto lab_0x4066d8;\n            } else {\n                // 0x406686\n                if (*(char *)(v19 + 54) != 0) {\n                    int64_t v333 = function_405a40(v266, 0); // 0x406c1f\n                    v293 = (int80_t)(0x100000000 * (v333 - function_405a40(v265, 0)) >> 32);\n                    v273 = v17;\n                    v283 = v282;\n                    v287 = 0;\n                    v280 = v265;\n                    v277 = v268;\n                    goto lab_0x4066d8;\n                } else {\n                    // 0x406692\n                    if (*(char *)(v19 + 51) != 0) {\n                        int128_t v334 = __asm_movdqa(*(int128_t *)&g60); // 0x406cb0\n                        int128_t v335 = __asm_movdqa(g61); // 0x406cb9\n                        int128_t v336 = __asm_movdqa(g62); // 0x406cc1\n                        int128_t v337 = __asm_movdqa(g63); // 0x406cc9\n                        int128_t v338 = __asm_movdqa(g64); // 0x406cd1\n                        int128_t v339 = __asm_movdqa(g65); // 0x406cd9\n                        __asm_movups(0, v334);\n                        int128_t v340 = __asm_movdqa(g66); // 0x406cea\n                        int128_t v341 = __asm_movdqa(g67); // 0x406cf2\n                        int128_t v342; // 0x4065b0\n                        __asm_movups(v342, v335);\n                        int128_t v343 = __asm_movdqa(g68); // 0x406d02\n                        __asm_movups(v342, v336);\n                        __asm_movups(v342, v337);\n                        __asm_movups(v342, v338);\n                        __asm_movups(v342, v339);\n                        __asm_movups(v342, v340);\n                        __asm_movups(v342, v341);\n                        __asm_movups(v342, v343);\n                        str16 = __asm_movaps(v334);\n                        __asm_movaps(v335);\n                        __asm_movaps(v336);\n                        __asm_movaps(v337);\n                        __asm_movaps(v338);\n                        __asm_movaps(v339);\n                        __asm_movaps(v340);\n                        __asm_movaps(v341);\n                        __asm_movaps(v343);\n                        if (g103 == 0) {\n                            // 0x407230\n                            function_40b360((char)v266, v267, (int64_t *)&str16);\n                            function_40b250(&str16, &endptr2, v4, v248, v269);\n                            function_40b360((char)v265, (int64_t)(float64_t)(float80_t)(int80_t)v268, (int64_t *)&v5);\n                            function_40b250(&v5, &str13, v6, v248, v269);\n                            int32_t memcmp_rc3 = memcmp(&endptr2, &str13, 16); // 0x4072a0\n                            v292 = (float64_t)(float80_t)(int80_t)v268;\n                            v289 = 0;\n                            v288 = v265;\n                            v279 = v267;\n                            v274 = (float64_t)(float80_t)(int80_t)v268;\n                            str14 = v266;\n                            if (memcmp_rc3 != 0) {\n                                // 0x40733b\n                                v294 = (int80_t)memcmp_rc3;\n                                v291 = 0;\n                                v281 = 16;\n                                v286 = v7;\n                                v276 = (float64_t)(float80_t)(int80_t)v268;\n                                goto lab_0x407318;\n                            } else {\n                                goto lab_0x4072d3;\n                            }\n                        } else {\n                            // 0x406dc3\n                            v103 = v266 + v267;\n                            v142 = v265 + v268;\n                            int64_t v344 = v267 + v268; // 0x406de7\n                            v83 = v344 + 2 + 2 * v344;\n                            v199 = v265;\n                            v200 = 0.0L;\n                            v201 = 0;\n                            v202 = v266;\n                            v203 = v3;\n                            v204 = 4000;\n                            while (true) {\n                              lab_0x406e30_2:\n                                // 0x406e30\n                                v104 = v199;\n                                v105 = v200;\n                                v106 = v201;\n                                v107 = v202;\n                                v108 = v203;\n                                v109 = v204;\n                                v88 = v199;\n                                v90 = v200;\n                                v84 = v201;\n                                v93 = v202;\n                                v81 = v204;\n                                if (v83 > v204) {\n                                    goto lab_0x406f13;\n                                } else {\n                                    goto lab_0x406e3b;\n                                }\n                            }\n                          lab_0x40703a_3:;\n                            int64_t v345 = v164;\n                            int64_t v346 = v172;\n                            int64_t v347 = v175;\n                            int64_t v348 = v179;\n                            int64_t v349 = v182;\n                            function_40b360((char)v345, v346, (int64_t *)&str16);\n                            function_40b250(&str16, &endptr2, v4, v173, v269);\n                            function_40b360((char)v347, v349, (int64_t *)&v5);\n                            function_40b250(&v5, &str13, v6, v173, v269);\n                            int32_t memcmp_rc4 = memcmp(&endptr2, &str13, 16); // 0x4070a5\n                            v290 = v348;\n                            v278 = memcmp_rc4;\n                            v284 = 16;\n                            v285 = v7;\n                            v275 = v268;\n                            if (memcmp_rc4 != 0) {\n                                goto lab_0x407315;\n                            } else {\n                                // 0x4070bc\n                                v292 = v349;\n                                v289 = v348;\n                                v288 = v347;\n                                v279 = v346;\n                                v274 = v268;\n                                str14 = v345;\n                                v294 = v183;\n                                v291 = v348;\n                                v281 = (int64_t)(float64_t)v183 & 0xffffffff;\n                                v286 = v7;\n                                v276 = v268;\n                                if ((int32_t)(int64_t)(float64_t)v183 != 0) {\n                                    goto lab_0x407318;\n                                } else {\n                                    goto lab_0x4072d3;\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x40669e\n                        if (*(char *)(v19 + 56) == 0) {\n                            int64_t v350 = v251;\n                            if (v267 != 0) {\n                                // 0x4071f0\n                                v293 = 3.64519953188247460253e-4951L;\n                                v273 = v17;\n                                v283 = v282;\n                                v287 = v318;\n                                v280 = v350;\n                                v277 = 0;\n                                if (v268 != 0) {\n                                    int64_t v351 = v267 + 1; // 0x407204\n                                    v293 = (int80_t)(0x100000000 * function_4115c0(v266, v351, v265, v268 + 1) >> 32);\n                                    v273 = v17;\n                                    v283 = v265;\n                                    v287 = v351;\n                                    v280 = v266;\n                                    v277 = v268;\n                                }\n                            } else {\n                                // 0x406c99\n                                v293 = (int80_t)(v268 != 0);\n                                v273 = v17;\n                                v283 = v282;\n                                v287 = v318;\n                                v280 = v350;\n                                v277 = v268;\n                            }\n                        } else {\n                            // 0x4066aa\n                            v293 = (int80_t)(0x100000000 * function_40b900(v266, v265) >> 32);\n                            v273 = v17;\n                            v283 = v282;\n                            v287 = v265;\n                            v280 = v266;\n                            v277 = v268;\n                        }\n                        goto lab_0x4066d8;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406c75:\n    // 0x406c75\n    *(char *)v250 = 0;\n    int64_t v352 = v256; // 0x406c7e\n    int64_t v353 = v250; // 0x406c7e\n    int64_t v354 = v253; // 0x406c7e\n    int64_t v355 = v28; // 0x406c7e\n    int64_t v356 = v244; // 0x406c7e\n    int64_t v357 = v256; // 0x406c7e\n    int64_t v358 = v250; // 0x406c7e\n    int64_t v359 = v39; // 0x406c7e\n    int64_t v360 = v253; // 0x406c7e\n    int64_t v361 = v259; // 0x406c7e\n    int64_t v362 = v28; // 0x406c7e\n    int64_t v363 = v65; // 0x406c7e\n    int64_t v364 = v244; // 0x406c7e\n    int64_t v365 = v253; // 0x406c7e\n    if (v65 != 0) {\n        goto lab_0x406928;\n    } else {\n        goto lab_0x406974;\n    }\n  lab_0x4068d1:\n    // 0x4068d1\n    v228 = v249;\n    v221 = v243 + str;\n    v218 = str;\n    v220 = 0;\n    int64_t v224; // 0x4068fd\n    while (true) {\n      lab_0x4068fd:\n        // 0x4068fd\n        v222 = v220;\n        v216 = v218;\n        if (v61 != 0) {\n            char v223 = *(char *)(v61 + v224); // 0x4068e0\n            v219 = v222;\n            if (v223 != 0) {\n                goto lab_0x4068f4;\n            } else {\n                // 0x4068e7\n                unsigned char v225; // 0x4068fd\n                v226 = v225;\n                if (v60 != 0) {\n                    char v227 = *(char *)(v60 + v224); // 0x406909\n                    v226 = v227;\n                    goto lab_0x4068ec;\n                } else {\n                    goto lab_0x4068ec;\n                }\n            }\n        } else {\n            // 0x406909\n            v226 = *(char *)(v60 + (int64_t)*(char *)v216);\n            goto lab_0x4068ec;\n        }\n    }\n  lab_0x406918:;\n    // 0x406918\n    int64_t v366; // 0x4065b0\n    *(char *)(v366 + v228) = 0;\n    int64_t v367; // 0x4065b0\n    v352 = v367;\n    v353 = v228;\n    int64_t v368; // 0x4065b0\n    v354 = v368;\n    v355 = v221;\n    v356 = v366;\n    v357 = v367;\n    v358 = v228;\n    v359 = v224;\n    v360 = v368;\n    v361 = v221;\n    v362 = v221;\n    v363 = 0;\n    v364 = v366;\n    v365 = v368;\n    if (v65 == 0) {\n        goto lab_0x406974;\n    } else {\n        goto lab_0x406928;\n    }\n  lab_0x4066f6:;\n    int64_t v369 = v50; // 0x4066fb\n    char v370 = v53; // 0x4066fb\n    char v371 = v56; // 0x4066fb\n    float80_t v372 = v58; // 0x4066fb\n    int3_t v373 = v18; // 0x4066fb\n    int64_t v374 = v41; // 0x4066fb\n    int64_t v375 = v47; // 0x4066fb\n    int64_t v376 = v37; // 0x4066fb\n    int64_t v377 = v29; // 0x4066fb\n    v59 = v58;\n    if ((int32_t)(int64_t)(float64_t)v58 != 0) {\n        goto lab_0x40680d_2;\n    }\n    goto lab_0x406701;\n  lab_0x406928:\n    // 0x406928\n    v215 = v354;\n    v209 = 0;\n    v207 = str2;\n    int64_t v212; // 0x406955\n    while (true) {\n      lab_0x406955:\n        // 0x406955\n        v210 = v209;\n        unsigned char v211 = *(char *)v207; // 0x406955\n        v212 = v211;\n        if (v61 != 0) {\n            // 0x406938\n            v205 = v210;\n            if (*(char *)(v61 + v212) != 0) {\n                goto lab_0x40694c;\n            } else {\n                // 0x40693f\n                v213 = v211;\n                if (v60 != 0) {\n                    char v214 = *(char *)(v60 + v212); // 0x406961\n                    v213 = v214;\n                    goto lab_0x406944;\n                } else {\n                    goto lab_0x406944;\n                }\n            }\n        } else {\n            // 0x406961\n            v213 = *(char *)(v60 + v212);\n            goto lab_0x406944;\n        }\n    }\n  lab_0x406970:\n    // 0x406970\n    v357 = v352;\n    v358 = v353;\n    v359 = v212;\n    v360 = v215;\n    v361 = v63;\n    v362 = v355;\n    v363 = v206;\n    v364 = v356;\n    v365 = v206 + v215;\n    goto lab_0x406974;\n  lab_0x406974:\n    // 0x406974\n    *(char *)v365 = 0;\n    v255 = v357;\n    v257 = v52;\n    v258 = v55;\n    v248 = v358;\n    v252 = v359;\n    v254 = v360;\n    v251 = v361;\n    v247 = v362;\n    v241 = v363;\n    v242 = v364;\n    v245 = v358;\n    v246 = v360;\n    goto lab_0x406662;\n  lab_0x4066d8:;\n    int64_t v396 = v287;\n    int64_t v397 = v283;\n    int3_t v398 = v273;\n    float80_t v399 = v293;\n    if ((v61 || v60) != 0) {\n        // 0x4067f8\n        free((int64_t *)v272);\n        v369 = v272;\n        v370 = v271;\n        v371 = v270;\n        v372 = v399;\n        v373 = v398;\n        v374 = v397;\n        v375 = v396;\n        v376 = v272;\n        v377 = v269;\n        v59 = v399;\n        if ((int32_t)(int64_t)(float64_t)v399 != 0) {\n            goto lab_0x40680d_2;\n        }\n        goto lab_0x406701;\n    } else {\n        // 0x4066e4\n        *(char *)(v266 + v267) = v270;\n        *(char *)(v277 + v265) = v271;\n        v50 = v272;\n        v53 = v271;\n        v56 = v270;\n        v58 = v399;\n        v18 = v398;\n        v41 = v397;\n        v47 = v396;\n        v37 = v280;\n        v29 = v269;\n        goto lab_0x4066f6;\n    }\n  lab_0x406701:\n    // 0x406701\n    v13 = *(int64_t *)(v19 + 64);\n    v80 = v372;\n    if (v13 == 0) {\n      lab_0x40681b:\n        // 0x40681b\n        return (int64_t)(float64_t)v80 & 0xffffffff;\n    }\n    int64_t v378 = v376;\n    int64_t v379 = v375;\n    int64_t v380 = *(int64_t *)(a1 + 8); // 0x40671d\n    int64_t v381 = *(int64_t *)(a2 + 8); // 0x406729\n    int64_t v382; // 0x4065b0\n    int64_t v383; // 0x4065b0\n    int64_t v384; // 0x4065b0\n    int64_t v385; // 0x4065b0\n    int64_t v386; // 0x4065b0\n    int64_t v387; // 0x4065b0\n    int64_t v388; // 0x4065b0\n    if (*(int64_t *)(v13 + 16) == -1) {\n        int64_t v389 = v378 - 1 + v380; // 0x406785\n        int64_t v390 = v379 - 1 + v381; // 0x40678a\n        v384 = v389;\n        v382 = v390;\n        v387 = v374;\n        v385 = v389;\n        v388 = v379;\n        v386 = v378;\n        v383 = v390;\n        if (*(int64_t *)v13 != -1) {\n            goto lab_0x406758;\n        } else {\n            goto lab_0x406791;\n        }\n    } else {\n        int64_t v391 = function_406470(v378, v380, v13); // 0x406738\n        int64_t v392 = function_406470(v379, v381, v13); // 0x406749\n        v384 = v391;\n        v382 = v392;\n        v387 = v13;\n        v385 = v391;\n        v388 = v381;\n        v386 = v379;\n        v383 = v392;\n        if (*(int64_t *)v13 == -1) {\n            goto lab_0x406791;\n        } else {\n            goto lab_0x406758;\n        }\n    }\n  lab_0x406758:;\n    int64_t v393 = function_406360(v378, v380, v13); // 0x406761\n    int64_t v394 = function_406360(v379, v381, v13); // 0x406772\n    int64_t v395 = v13; // 0x40677a\n    v9 = v384;\n    v10 = v381;\n    v11 = v379;\n    v12 = v382;\n    v14 = v393;\n    v15 = v394;\n    goto lab_0x4065f8;\n  lab_0x406791:;\n    int64_t v408 = v383;\n    int64_t v409 = v386;\n    int64_t v410 = v388;\n    int64_t v411 = v385;\n    int64_t v412 = v387;\n    v395 = v412;\n    v9 = v411;\n    v10 = v410;\n    v11 = v409;\n    v12 = v408;\n    v14 = v378;\n    v15 = v379;\n    if (*(char *)(v13 + 48) != 0) {\n        int64_t v413 = v378; // 0x4067a0\n        int64_t v414 = v378; // 0x4067a0\n        if (v411 > v378) {\n            int64_t v415 = v413;\n            unsigned char v416 = *(char *)v415; // 0x4067b5\n            v414 = v415;\n            while (*(char *)((int64_t)v416 + (int64_t)&g98) != 0) {\n                int64_t v417 = v415 + 1; // 0x4067a8\n                v413 = v417;\n                v414 = v411;\n                if (v411 == v417) {\n                    // break -> 0x4067c2\n                    break;\n                }\n                v415 = v413;\n                v416 = *(char *)v415;\n                v414 = v415;\n            }\n        }\n        int64_t v418 = v414;\n        v395 = v412;\n        v9 = v411;\n        v10 = v410;\n        v11 = v409;\n        v12 = v408;\n        v14 = v418;\n        v15 = v379;\n        int64_t v419 = v379; // 0x4067c5\n        if (v408 > v379) {\n            int64_t v420 = v419;\n            unsigned char v421 = *(char *)v420; // 0x4067d0\n            v395 = v412;\n            v9 = v411;\n            v10 = v410;\n            v11 = v409;\n            v12 = v408;\n            v14 = v418;\n            v15 = v420;\n            while (*(char *)((int64_t)v421 + (int64_t)&g98) != 0) {\n                int64_t v422 = v420 + 1; // 0x4067e1\n                v395 = v412;\n                v9 = v411;\n                v10 = v410;\n                v11 = v409;\n                v12 = v408;\n                v14 = v418;\n                v15 = v408;\n                v419 = v422;\n                if (v408 == v422) {\n                    // break -> 0x4065f8\n                    break;\n                }\n                v420 = v419;\n                v421 = *(char *)v420;\n                v395 = v412;\n                v9 = v411;\n                v10 = v410;\n                v11 = v409;\n                v12 = v408;\n                v14 = v418;\n                v15 = v420;\n            }\n        }\n    }\n    goto lab_0x4065f8;\n  lab_0x4065f8:\n    // 0x4065f8\n    v48 = v369;\n    v51 = v370;\n    v54 = v371;\n    v16 = v373;\n    v38 = v395;\n    v27 = v377;\n    goto lab_0x4065f8_2;\n  lab_0x40749d:\n    // 0x40749d\n    v293 = -NAN;\n    v273 = v17 + 2;\n    v283 = v282;\n    v287 = v8;\n    v280 = v265;\n    v277 = v268;\n    goto lab_0x4066d8;\n  lab_0x4072d3:;\n    int64_t v400 = v274;\n    uint64_t v401 = v279;\n    int64_t str15 = v288;\n    int64_t v402 = v289;\n    uint64_t v403 = v292;\n    int64_t n5 = v401 > v403 ? v403 : v401; // 0x4072f0\n    int32_t memcmp_rc5 = memcmp((int64_t *)str14, (int64_t *)str15, (int32_t)n5); // 0x4072f4\n    v294 = (int80_t)memcmp_rc5;\n    v291 = v402;\n    v281 = n5;\n    v286 = str15;\n    v276 = v400;\n    if (memcmp_rc5 != 0) {\n        goto lab_0x407318;\n    } else {\n        // 0x40730a\n        v290 = v402;\n        v278 = (int64_t)(v401 > v403) - (int64_t)(v401 < v403) & 0xffffffff;\n        v284 = n5;\n        v285 = str15;\n        v275 = v400;\n        goto lab_0x407315;\n    }\n  lab_0x407315:\n    // 0x407315\n    v294 = (int80_t)(0x100000000 * v278 >> 32);\n    v291 = v290;\n    v281 = v284;\n    v286 = v285;\n    v276 = v275;\n    goto lab_0x407318;\n  lab_0x406a08:;\n    float80_t v404 = __frontend_reg_load_fpr(v17); // 0x406a08\n    float80_t v405 = __frontend_reg_load_fpr(v17); // 0x406a08\n    float80_t v406 = __frontend_reg_load_fpr(v295);\n    if (v404 != v405) {\n        int3_t v407 = v17 + 2; // 0x406a12\n        v293 = 3.64519953188247460253e-4951L;\n        v273 = v407;\n        v283 = v282;\n        v287 = v8;\n        v280 = v265;\n        v277 = v268;\n        if (v406 != __frontend_reg_load_fpr(v295)) {\n            // 0x40741c\n            strtold(str11, NULL);\n            str16 = (float32_t)__frontend_reg_load_fpr(v407);\n            strtold(str12, NULL);\n            str17 = (float64_t)__frontend_reg_load_fpr(v17 + 3);\n            int32_t memcmp_rc6 = memcmp((int64_t *)&str16, &str17, 16); // 0x40745d\n            v293 = (int80_t)memcmp_rc6;\n            v273 = v17 ^ -4;\n            v283 = 16;\n            v287 = v3;\n            v280 = v4;\n            v277 = v268;\n        }\n        goto lab_0x4066d8;\n    } else {\n        // 0x40749b\n        __frontend_reg_store_fpr(v295, v406);\n        goto lab_0x40749d;\n    }\n  lab_0x407318:\n    // 0x407318\n    free((int64_t *)v291);\n    v293 = v294;\n    v273 = v17;\n    v283 = v281;\n    v287 = v286;\n    v280 = v291;\n    v277 = v276;\n    goto lab_0x4066d8;\n  lab_0x40738a:\n    // 0x40738a\n    v79 = v57;\n    if (*(char *)(v19 + 55) == 0) {\n        // 0x40681b\n        return (int64_t)(float64_t)v57 & 0xffffffff;\n    }\n  lab_0x407395:\n    // 0x407395\n    v80 = (int80_t)(-((0x100000000 * (int64_t)(float64_t)v79)) >> 32);\n    // 0x40681b\n    return (int64_t)(float64_t)v80 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4074d0",
            "funcStartAddr": "4074d0",
            "funcEndAddr": "407847",
            "decompiledFuncCode": "int64_t function_4074d0(char a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    int64_t v2 = a1;\n    char * v3 = (char *)(v2 + 48); // 0x4074d0\n    if (*v3 != 0) {\n        // 0x4077df\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(v2 + 8); // 0x4074e8\n    int64_t v5 = *v4; // 0x4074e8\n    char v6 = *(char *)&g38; // 0x407502\n    int64_t * v7 = (int64_t *)(v2 + 32); // 0x40750e\n    int64_t v8 = *v7; // 0x40750e\n    int64_t v9 = *(int64_t *)(v2 + 40); // 0x40751c\n    int64_t * v10; // 0x4074d0\n    int64_t * v11; // 0x4074d0\n    int64_t v12; // 0x4074d0\n    int64_t v13; // 0x4074d0\n    if (v5 != v8) {\n        int64_t * v14 = (int64_t *)v2;\n        memmove(v14, (int64_t *)(v5 + v2 - v8), (int32_t)v8);\n        int64_t v15 = *v7; // 0x4076f0\n        int64_t * v16 = (int64_t *)(v2 + 16);\n        *v16 = 0;\n        *v4 = v15;\n        v11 = v14;\n        v10 = v16;\n        v12 = v15;\n        v13 = 0;\n    } else {\n        int64_t * v17 = (int64_t *)(v2 + 16);\n        v11 = (int64_t *)v2;\n        v10 = v17;\n        v12 = v5;\n        v13 = *v17;\n    }\n    int32_t v18 = v6; // 0x407517\n    uint64_t v19 = v9 + 1; // 0x407539\n    int64_t * v20 = (int64_t *)(v2 + 24); // 0x407547\n    int64_t v21 = g33 - 34; // 0x407550\n    int64_t v22 = *v20; // 0x407550\n    int64_t v23 = v2 + v22; // 0x407554\n    int64_t v24 = v23 - 32 * v13; // 0x407565\n    int64_t v25 = v2; // 0x407579\n    if (v13 != 0) {\n        // 0x40757f\n        v25 = *(int64_t *)v24 + *(int64_t *)(v24 + 8);\n    }\n    int64_t v26 = v2 + v12; // 0x40755a\n    int64_t v27 = v23 - v13 * v9 - v26; // 0x407573\n    int64_t v28 = v26; // 0x407595\n    int64_t v29 = v24; // 0x407595\n    int64_t v30 = v25; // 0x407595\n    int64_t v31 = v27; // 0x407595\n    int64_t v32 = v21; // 0x407595\n    int64_t v33 = v22; // 0x407595\n    int64_t v34 = v21; // 0x407595\n    int64_t v35 = v2; // 0x407595\n    int64_t v36 = v25; // 0x407595\n    int64_t v37 = v24; // 0x407595\n    int64_t v38 = v26; // 0x407595\n    int64_t v39; // 0x4074d0\n    int64_t v40; // 0x4074d0\n    int64_t v41; // 0x4074d0\n    int64_t v42; // 0x4074d0\n    int64_t v43; // 0x4074d0\n    int64_t v44; // 0x4074d0\n    int64_t v45; // 0x4074d0\n    int64_t v46; // 0x4074d0\n    int64_t v47; // 0x4074d0\n    int64_t v48; // 0x4074d0\n    int64_t v49; // 0x4074d0\n    int64_t v50; // 0x4074d0\n    int64_t v51; // 0x4074d0\n    int64_t v52; // 0x4074d0\n    int64_t v53; // 0x4074d0\n    int64_t v54; // 0x4074d0\n    uint64_t v55; // 0x4074d0\n    int64_t v56; // 0x4074d0\n    int64_t v57; // 0x4074d0\n    int64_t v58; // 0x4074d0\n    uint64_t v59; // 0x4074d0\n    int64_t v60; // 0x4075bc\n    int64_t v61; // 0x4075c6\n    int64_t v62; // 0x4075ca\n    int64_t v63; // 0x407662\n    int32_t v64; // 0x4075e0\n    int64_t v65; // 0x407670\n    int64_t v66; // 0x407674\n    uint64_t v67; // 0x407681\n    int64_t v68; // 0x407830\n    int64_t v69; // 0x40768b\n    int64_t v70; // 0x40768f\n    int64_t v71; // 0x407662\n    unsigned char v72; // 0x4076cc\n    if (v27 > v19) {\n        v43 = v30;\n        v52 = v28;\n        v59 = (v31 - 1) / v19;\n        v60 = fread_unlocked((int64_t *)v52, 1, (int32_t)v59, (struct _IO_FILE *)a2);\n        v61 = v52 + v60;\n        v58 = v61;\n        if (v59 != v60) {\n            // 0x4075db\n            v64 = *(int32_t *)&v1;\n            if ((v64 & 32) != 0) {\n                // 0x407824\n                v68 = (int64_t)dcgettext(NULL, \"read failed\", 5);\n                function_405dd0(v68, (int64_t *)a3);\n                v57 = v68;\n                goto lab_0x407842;\n            }\n            // 0x4075ea\n            v58 = v61;\n            if ((v64 & 16) != 0) {\n                // 0x4075f2\n                *v3 = 1;\n                if (v61 == v2) {\n                    // 0x4077df\n                    return 0;\n                }\n                // 0x40760c\n                v58 = v43;\n                if (v43 != v61) {\n                    // 0x407615\n                    v58 = v61;\n                    if (*(char *)(v61 - 1) != v6) {\n                        // 0x407624\n                        *(char *)v61 = v6;\n                        v58 = v61 + 1;\n                    }\n                }\n            }\n        }\n        // 0x407655\n        v62 = v31 - v60;\n        v38 = v58;\n        v63 = function_413030(v52, v18, v38 - v52);\n        v39 = v63;\n        v49 = v29;\n        v44 = v43;\n        v41 = v62;\n        v54 = v32;\n        v56 = v32;\n        v35 = v52;\n        v42 = v62;\n        v46 = v43;\n        v51 = v29;\n        if (v63 != 0) {\n            v55 = v54;\n            v45 = v44;\n            v50 = v49;\n            v40 = v39;\n            v65 = v40 + 1;\n            v66 = v50 - 32;\n            *(char *)v40 = 0;\n            *(int64_t *)v66 = v45;\n            v67 = v65 - v45;\n            *(int64_t *)(v50 - 24) = v67;\n            if (g83 != 0) {\n                // 0x407698\n                v53 = v40;\n                if (*(int64_t *)(g83 + 16) != -1) {\n                    // 0x40769f\n                    v53 = function_406470(v45, v67, g83);\n                }\n                // 0x4076ad\n                *(int64_t *)(v50 - 8) = v53;\n                if (*(int64_t *)g83 != -1) {\n                    // 0x407640\n                    *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                } else {\n                    // 0x4076b7\n                    v47 = v45;\n                    v48 = v45;\n                    if (*(char *)(g83 + 48) != 0) {\n                        v72 = *(char *)v48;\n                        v47 = v48;\n                        v48++;\n                        while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                            // 0x4076cc\n                            v72 = *(char *)v48;\n                            v47 = v48;\n                            v48++;\n                        }\n                    }\n                    // 0x4076bd\n                    *(int64_t *)(v50 - 16) = v47;\n                }\n            }\n            // 0x407652\n            v69 = v55 < v67 ? v67 : v55;\n            v70 = v41 - v9;\n            v71 = function_413030(v65, v18, v38 - v65);\n            v41 = v70;\n            v56 = v69;\n            v35 = v65;\n            v42 = v70;\n            v46 = v65;\n            v51 = v66;\n            while (v71 != 0) {\n                // 0x407670\n                v55 = v69;\n                v45 = v65;\n                v50 = v66;\n                v40 = v71;\n                v65 = v40 + 1;\n                v66 = v50 - 32;\n                *(char *)v40 = 0;\n                *(int64_t *)v66 = v45;\n                v67 = v65 - v45;\n                *(int64_t *)(v50 - 24) = v67;\n                if (g83 != 0) {\n                    // 0x407698\n                    v53 = v40;\n                    if (*(int64_t *)(g83 + 16) != -1) {\n                        // 0x40769f\n                        v53 = function_406470(v45, v67, g83);\n                    }\n                    // 0x4076ad\n                    *(int64_t *)(v50 - 8) = v53;\n                    if (*(int64_t *)g83 != -1) {\n                        // 0x407640\n                        *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                    } else {\n                        // 0x4076b7\n                        v47 = v45;\n                        v48 = v45;\n                        if (*(char *)(g83 + 48) != 0) {\n                            v72 = *(char *)v48;\n                            v47 = v48;\n                            v48++;\n                            while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                // 0x4076cc\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                            }\n                        }\n                        // 0x4076bd\n                        *(int64_t *)(v50 - 16) = v47;\n                    }\n                }\n                // 0x407652\n                v69 = v55 < v67 ? v67 : v55;\n                v70 = v41 - v9;\n                v71 = function_413030(v65, v18, v38 - v65);\n                v41 = v70;\n                v56 = v69;\n                v35 = v65;\n                v42 = v70;\n                v46 = v65;\n                v51 = v66;\n            }\n        }\n        // 0x407710\n        v37 = v51;\n        v36 = v46;\n        v34 = v56;\n        v29 = v37;\n        v31 = v42;\n        v32 = v34;\n        while (v42 > v19 == *v3 == 0) {\n            // 0x40759b\n            v43 = v36;\n            v52 = v38;\n            v59 = (v31 - 1) / v19;\n            v60 = fread_unlocked((int64_t *)v52, 1, (int32_t)v59, (struct _IO_FILE *)a2);\n            v61 = v52 + v60;\n            v58 = v61;\n            if (v59 != v60) {\n                // 0x4075db\n                v64 = *(int32_t *)&v1;\n                if ((v64 & 32) != 0) {\n                    // 0x407824\n                    v68 = (int64_t)dcgettext(NULL, \"read failed\", 5);\n                    function_405dd0(v68, (int64_t *)a3);\n                    v57 = v68;\n                    goto lab_0x407842;\n                }\n                // 0x4075ea\n                v58 = v61;\n                if ((v64 & 16) != 0) {\n                    // 0x4075f2\n                    *v3 = 1;\n                    if (v61 == v2) {\n                        // 0x4077df\n                        return 0;\n                    }\n                    // 0x40760c\n                    v58 = v43;\n                    if (v43 != v61) {\n                        // 0x407615\n                        v58 = v61;\n                        if (*(char *)(v61 - 1) != v6) {\n                            // 0x407624\n                            *(char *)v61 = v6;\n                            v58 = v61 + 1;\n                        }\n                    }\n                }\n            }\n            // 0x407655\n            v62 = v31 - v60;\n            v38 = v58;\n            v63 = function_413030(v52, v18, v38 - v52);\n            v39 = v63;\n            v49 = v29;\n            v44 = v43;\n            v41 = v62;\n            v54 = v32;\n            v56 = v32;\n            v35 = v52;\n            v42 = v62;\n            v46 = v43;\n            v51 = v29;\n            if (v63 != 0) {\n                v55 = v54;\n                v45 = v44;\n                v50 = v49;\n                v40 = v39;\n                v65 = v40 + 1;\n                v66 = v50 - 32;\n                *(char *)v40 = 0;\n                *(int64_t *)v66 = v45;\n                v67 = v65 - v45;\n                *(int64_t *)(v50 - 24) = v67;\n                if (g83 != 0) {\n                    // 0x407698\n                    v53 = v40;\n                    if (*(int64_t *)(g83 + 16) != -1) {\n                        // 0x40769f\n                        v53 = function_406470(v45, v67, g83);\n                    }\n                    // 0x4076ad\n                    *(int64_t *)(v50 - 8) = v53;\n                    if (*(int64_t *)g83 != -1) {\n                        // 0x407640\n                        *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                    } else {\n                        // 0x4076b7\n                        v47 = v45;\n                        v48 = v45;\n                        if (*(char *)(g83 + 48) != 0) {\n                            v72 = *(char *)v48;\n                            v47 = v48;\n                            v48++;\n                            while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                // 0x4076cc\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                            }\n                        }\n                        // 0x4076bd\n                        *(int64_t *)(v50 - 16) = v47;\n                    }\n                }\n                // 0x407652\n                v69 = v55 < v67 ? v67 : v55;\n                v70 = v41 - v9;\n                v71 = function_413030(v65, v18, v38 - v65);\n                v41 = v70;\n                v56 = v69;\n                v35 = v65;\n                v42 = v70;\n                v46 = v65;\n                v51 = v66;\n                while (v71 != 0) {\n                    // 0x407670\n                    v55 = v69;\n                    v45 = v65;\n                    v50 = v66;\n                    v40 = v71;\n                    v65 = v40 + 1;\n                    v66 = v50 - 32;\n                    *(char *)v40 = 0;\n                    *(int64_t *)v66 = v45;\n                    v67 = v65 - v45;\n                    *(int64_t *)(v50 - 24) = v67;\n                    if (g83 != 0) {\n                        // 0x407698\n                        v53 = v40;\n                        if (*(int64_t *)(g83 + 16) != -1) {\n                            // 0x40769f\n                            v53 = function_406470(v45, v67, g83);\n                        }\n                        // 0x4076ad\n                        *(int64_t *)(v50 - 8) = v53;\n                        if (*(int64_t *)g83 != -1) {\n                            // 0x407640\n                            *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                        } else {\n                            // 0x4076b7\n                            v47 = v45;\n                            v48 = v45;\n                            if (*(char *)(g83 + 48) != 0) {\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                                while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                    // 0x4076cc\n                                    v72 = *(char *)v48;\n                                    v47 = v48;\n                                    v48++;\n                                }\n                            }\n                            // 0x4076bd\n                            *(int64_t *)(v50 - 16) = v47;\n                        }\n                    }\n                    // 0x407652\n                    v69 = v55 < v67 ? v67 : v55;\n                    v70 = v41 - v9;\n                    v71 = function_413030(v65, v18, v38 - v65);\n                    v41 = v70;\n                    v56 = v69;\n                    v35 = v65;\n                    v42 = v70;\n                    v46 = v65;\n                    v51 = v66;\n                }\n            }\n            // 0x407710\n            v37 = v51;\n            v36 = v46;\n            v34 = v56;\n            v29 = v37;\n            v31 = v42;\n            v32 = v34;\n        }\n        // 0x407724\n        v33 = *v20;\n    }\n    int64_t v73 = v38;\n    int64_t v74 = v36;\n    int64_t v75 = v35;\n    v21 = v34;\n    uint64_t v76 = v33; // 0x40773b\n    *v4 = v73 - v75;\n    int64_t v77 = (v75 - v37 + v76) / 32; // 0x40774d\n    *v10 = v77;\n    while (v77 == 0) {\n        int64_t v78; // 0x4074d0\n        if (v75 == 0) {\n            // 0x4077ce\n            v78 = 128;\n            if (v76 >= 32) {\n                int64_t v79 = v76 & -32; // 0x4077d4\n                v78 = v79;\n                v57 = 0;\n                if (v79 < 0) {\n                    // 0x407842\n                    function_411460(v57);\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            // 0x407767\n            v57 = v75;\n            if (v76 >= 0x5555555555555540) {\n                // 0x407842\n                function_411460(v57);\n                // UNREACHABLE\n            }\n            // 0x40777a\n            v78 = 32 * (v76 / 32 + 1 + v76 / 64);\n        }\n        int64_t v80 = function_411270(v75, v78); // 0x40778a\n        *v11 = v80;\n        *v20 = v78;\n        int64_t v81 = *v10; // 0x4077a2\n        v23 = v80 + v78;\n        v24 = v23 - 32 * v81;\n        v25 = v80;\n        if (v81 != 0) {\n            // 0x40757f\n            v25 = *(int64_t *)v24 + *(int64_t *)(v24 + 8);\n        }\n        // 0x407590\n        v26 = v80 + *v4;\n        v27 = v23 - v81 * v9 - v26;\n        v28 = v26;\n        v29 = v24;\n        v30 = v25;\n        v31 = v27;\n        v32 = v21;\n        v33 = v78;\n        int64_t v82 = v21; // 0x407595\n        int64_t v83 = v75; // 0x407595\n        int64_t v84 = v25; // 0x407595\n        int64_t v85 = v24; // 0x407595\n        int64_t v86 = v26; // 0x407595\n        if (v27 > v19) {\n            v43 = v30;\n            v52 = v28;\n            v59 = (v31 - 1) / v19;\n            v60 = fread_unlocked((int64_t *)v52, 1, (int32_t)v59, (struct _IO_FILE *)a2);\n            v61 = v52 + v60;\n            v58 = v61;\n            if (v59 != v60) {\n                // 0x4075db\n                v64 = *(int32_t *)&v1;\n                if ((v64 & 32) != 0) {\n                    // 0x407824\n                    v68 = (int64_t)dcgettext(NULL, \"read failed\", 5);\n                    function_405dd0(v68, (int64_t *)a3);\n                    v57 = v68;\n                    goto lab_0x407842;\n                }\n                // 0x4075ea\n                v58 = v61;\n                if ((v64 & 16) != 0) {\n                    // 0x4075f2\n                    *v3 = 1;\n                    if (v61 == v2) {\n                        // 0x4077df\n                        return 0;\n                    }\n                    // 0x40760c\n                    v58 = v43;\n                    if (v43 != v61) {\n                        // 0x407615\n                        v58 = v61;\n                        if (*(char *)(v61 - 1) != v6) {\n                            // 0x407624\n                            *(char *)v61 = v6;\n                            v58 = v61 + 1;\n                        }\n                    }\n                }\n            }\n            // 0x407655\n            v62 = v31 - v60;\n            v38 = v58;\n            v63 = function_413030(v52, v18, v38 - v52);\n            v39 = v63;\n            v49 = v29;\n            v44 = v43;\n            v41 = v62;\n            v54 = v32;\n            v56 = v32;\n            v35 = v52;\n            v42 = v62;\n            v46 = v43;\n            v51 = v29;\n            if (v63 != 0) {\n                v55 = v54;\n                v45 = v44;\n                v50 = v49;\n                v40 = v39;\n                v65 = v40 + 1;\n                v66 = v50 - 32;\n                *(char *)v40 = 0;\n                *(int64_t *)v66 = v45;\n                v67 = v65 - v45;\n                *(int64_t *)(v50 - 24) = v67;\n                if (g83 != 0) {\n                    // 0x407698\n                    v53 = v40;\n                    if (*(int64_t *)(g83 + 16) != -1) {\n                        // 0x40769f\n                        v53 = function_406470(v45, v67, g83);\n                    }\n                    // 0x4076ad\n                    *(int64_t *)(v50 - 8) = v53;\n                    if (*(int64_t *)g83 != -1) {\n                        // 0x407640\n                        *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                    } else {\n                        // 0x4076b7\n                        v47 = v45;\n                        v48 = v45;\n                        if (*(char *)(g83 + 48) != 0) {\n                            v72 = *(char *)v48;\n                            v47 = v48;\n                            v48++;\n                            while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                // 0x4076cc\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                            }\n                        }\n                        // 0x4076bd\n                        *(int64_t *)(v50 - 16) = v47;\n                    }\n                }\n                // 0x407652\n                v69 = v55 < v67 ? v67 : v55;\n                v70 = v41 - v9;\n                v71 = function_413030(v65, v18, v38 - v65);\n                v41 = v70;\n                v56 = v69;\n                v35 = v65;\n                v42 = v70;\n                v46 = v65;\n                v51 = v66;\n                while (v71 != 0) {\n                    // 0x407670\n                    v55 = v69;\n                    v45 = v65;\n                    v50 = v66;\n                    v40 = v71;\n                    v65 = v40 + 1;\n                    v66 = v50 - 32;\n                    *(char *)v40 = 0;\n                    *(int64_t *)v66 = v45;\n                    v67 = v65 - v45;\n                    *(int64_t *)(v50 - 24) = v67;\n                    if (g83 != 0) {\n                        // 0x407698\n                        v53 = v40;\n                        if (*(int64_t *)(g83 + 16) != -1) {\n                            // 0x40769f\n                            v53 = function_406470(v45, v67, g83);\n                        }\n                        // 0x4076ad\n                        *(int64_t *)(v50 - 8) = v53;\n                        if (*(int64_t *)g83 != -1) {\n                            // 0x407640\n                            *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                        } else {\n                            // 0x4076b7\n                            v47 = v45;\n                            v48 = v45;\n                            if (*(char *)(g83 + 48) != 0) {\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                                while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                    // 0x4076cc\n                                    v72 = *(char *)v48;\n                                    v47 = v48;\n                                    v48++;\n                                }\n                            }\n                            // 0x4076bd\n                            *(int64_t *)(v50 - 16) = v47;\n                        }\n                    }\n                    // 0x407652\n                    v69 = v55 < v67 ? v67 : v55;\n                    v70 = v41 - v9;\n                    v71 = function_413030(v65, v18, v38 - v65);\n                    v41 = v70;\n                    v56 = v69;\n                    v35 = v65;\n                    v42 = v70;\n                    v46 = v65;\n                    v51 = v66;\n                }\n            }\n            // 0x407710\n            v37 = v51;\n            v36 = v46;\n            v34 = v56;\n            v29 = v37;\n            v31 = v42;\n            v32 = v34;\n            while (v42 > v19 == *v3 == 0) {\n                // 0x40759b\n                v43 = v36;\n                v52 = v38;\n                v59 = (v31 - 1) / v19;\n                v60 = fread_unlocked((int64_t *)v52, 1, (int32_t)v59, (struct _IO_FILE *)a2);\n                v61 = v52 + v60;\n                v58 = v61;\n                if (v59 != v60) {\n                    // 0x4075db\n                    v64 = *(int32_t *)&v1;\n                    if ((v64 & 32) != 0) {\n                        // 0x407824\n                        v68 = (int64_t)dcgettext(NULL, \"read failed\", 5);\n                        function_405dd0(v68, (int64_t *)a3);\n                        v57 = v68;\n                        goto lab_0x407842;\n                    }\n                    // 0x4075ea\n                    v58 = v61;\n                    if ((v64 & 16) != 0) {\n                        // 0x4075f2\n                        *v3 = 1;\n                        if (v61 == v2) {\n                            // 0x4077df\n                            return 0;\n                        }\n                        // 0x40760c\n                        v58 = v43;\n                        if (v43 != v61) {\n                            // 0x407615\n                            v58 = v61;\n                            if (*(char *)(v61 - 1) != v6) {\n                                // 0x407624\n                                *(char *)v61 = v6;\n                                v58 = v61 + 1;\n                            }\n                        }\n                    }\n                }\n                // 0x407655\n                v62 = v31 - v60;\n                v38 = v58;\n                v63 = function_413030(v52, v18, v38 - v52);\n                v39 = v63;\n                v49 = v29;\n                v44 = v43;\n                v41 = v62;\n                v54 = v32;\n                v56 = v32;\n                v35 = v52;\n                v42 = v62;\n                v46 = v43;\n                v51 = v29;\n                if (v63 != 0) {\n                    v55 = v54;\n                    v45 = v44;\n                    v50 = v49;\n                    v40 = v39;\n                    v65 = v40 + 1;\n                    v66 = v50 - 32;\n                    *(char *)v40 = 0;\n                    *(int64_t *)v66 = v45;\n                    v67 = v65 - v45;\n                    *(int64_t *)(v50 - 24) = v67;\n                    if (g83 != 0) {\n                        // 0x407698\n                        v53 = v40;\n                        if (*(int64_t *)(g83 + 16) != -1) {\n                            // 0x40769f\n                            v53 = function_406470(v45, v67, g83);\n                        }\n                        // 0x4076ad\n                        *(int64_t *)(v50 - 8) = v53;\n                        if (*(int64_t *)g83 != -1) {\n                            // 0x407640\n                            *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                        } else {\n                            // 0x4076b7\n                            v47 = v45;\n                            v48 = v45;\n                            if (*(char *)(g83 + 48) != 0) {\n                                v72 = *(char *)v48;\n                                v47 = v48;\n                                v48++;\n                                while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                    // 0x4076cc\n                                    v72 = *(char *)v48;\n                                    v47 = v48;\n                                    v48++;\n                                }\n                            }\n                            // 0x4076bd\n                            *(int64_t *)(v50 - 16) = v47;\n                        }\n                    }\n                    // 0x407652\n                    v69 = v55 < v67 ? v67 : v55;\n                    v70 = v41 - v9;\n                    v71 = function_413030(v65, v18, v38 - v65);\n                    v41 = v70;\n                    v56 = v69;\n                    v35 = v65;\n                    v42 = v70;\n                    v46 = v65;\n                    v51 = v66;\n                    while (v71 != 0) {\n                        // 0x407670\n                        v55 = v69;\n                        v45 = v65;\n                        v50 = v66;\n                        v40 = v71;\n                        v65 = v40 + 1;\n                        v66 = v50 - 32;\n                        *(char *)v40 = 0;\n                        *(int64_t *)v66 = v45;\n                        v67 = v65 - v45;\n                        *(int64_t *)(v50 - 24) = v67;\n                        if (g83 != 0) {\n                            // 0x407698\n                            v53 = v40;\n                            if (*(int64_t *)(g83 + 16) != -1) {\n                                // 0x40769f\n                                v53 = function_406470(v45, v67, g83);\n                            }\n                            // 0x4076ad\n                            *(int64_t *)(v50 - 8) = v53;\n                            if (*(int64_t *)g83 != -1) {\n                                // 0x407640\n                                *(int64_t *)(v50 - 16) = function_406360(v45, v67, g83);\n                            } else {\n                                // 0x4076b7\n                                v47 = v45;\n                                v48 = v45;\n                                if (*(char *)(g83 + 48) != 0) {\n                                    v72 = *(char *)v48;\n                                    v47 = v48;\n                                    v48++;\n                                    while (*(char *)((int64_t)v72 + (int64_t)&g98) != 0) {\n                                        // 0x4076cc\n                                        v72 = *(char *)v48;\n                                        v47 = v48;\n                                        v48++;\n                                    }\n                                }\n                                // 0x4076bd\n                                *(int64_t *)(v50 - 16) = v47;\n                            }\n                        }\n                        // 0x407652\n                        v69 = v55 < v67 ? v67 : v55;\n                        v70 = v41 - v9;\n                        v71 = function_413030(v65, v18, v38 - v65);\n                        v41 = v70;\n                        v56 = v69;\n                        v35 = v65;\n                        v42 = v70;\n                        v46 = v65;\n                        v51 = v66;\n                    }\n                }\n                // 0x407710\n                v37 = v51;\n                v36 = v46;\n                v34 = v56;\n                v29 = v37;\n                v31 = v42;\n                v32 = v34;\n            }\n            // 0x407724\n            v33 = *v20;\n            v82 = v34;\n            v83 = v35;\n            v84 = v36;\n            v85 = v37;\n            v86 = v38;\n        }\n        // 0x407724\n        v73 = v86;\n        v74 = v84;\n        v75 = v83;\n        v21 = v82;\n        v76 = v33;\n        *v4 = v73 - v75;\n        v77 = (v75 - v85 + v76) / 32;\n        *v10 = v77;\n    }\n    // 0x4077fb\n    g33 = v21 + 34;\n    *v7 = v73 - v74;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_407850",
            "funcStartAddr": "407850",
            "funcEndAddr": "40787d",
            "decompiledFuncCode": "int64_t function_407850(int64_t a1, int64_t a2) {\n    uint32_t v1 = *(int32_t *)(a2 + 80); // 0x407850\n    uint32_t v2 = *(int32_t *)(a1 + 80); // 0x407853\n    if (v2 != v1) {\n        // 0x407858\n        return v2 < v1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x407864\n    int64_t v4 = *(int64_t *)(a2 + 48); // 0x40786b\n    int64_t v5 = *(int64_t *)(a2 + 40); // 0x40786f\n    return v3 + *(int64_t *)(a1 + 48) < v5 + v4;\n}\n"
        },
        {
            "funcName": "function_407880",
            "funcStartAddr": "407880",
            "funcEndAddr": "407890",
            "decompiledFuncCode": "int64_t function_407880(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x407880\n    return pthread_sigmask(SIG_SETMASK, (struct _TYPEDEF___sigset_t *)((int64_t)a1 + 8), NULL);\n}\n"
        },
        {
            "funcName": "function_407890",
            "funcStartAddr": "407890",
            "funcEndAddr": "40791e",
            "decompiledFuncCode": "int64_t function_407890(int64_t a1) {\n    // 0x407890\n    if (g72 == 0) {\n        // 0x4078f4\n        return function_40a9f0();\n    }\n    // 0x4078a4\n    int64_t set; // bp-144, 0x407890\n    int32_t v1 = pthread_sigmask(SIG_BLOCK, (struct _TYPEDEF___sigset_t *)&g73, (struct _TYPEDEF___sigset_t *)&set); // 0x4078b0\n    char v2 = v1 == 0; // 0x4078be\n    char v3 = v2; // bp-152, 0x4078c1\n    int64_t v4 = g72; // 0x4078c7\n    v3 = v2;\n    if (g72 != 0) {\n        unlink((char *)(v4 + 13));\n        v4 = *(int64_t *)v4;\n        while (v4 != 0) {\n            // 0x4078d0\n            unlink((char *)(v4 + 13));\n            v4 = *(int64_t *)v4;\n        }\n    }\n    // 0x4078e5\n    g72 = 0;\n    if (v3 == 0) {\n        // 0x4078f4\n        return function_40a9f0();\n    }\n    // 0x407908\n    function_407880((int64_t *)&v3, (int64_t)&g73, (int64_t)&set);\n    return function_40a9f0();\n}\n"
        },
        {
            "funcName": "function_407920",
            "funcStartAddr": "407920",
            "funcEndAddr": "407a2d",
            "decompiledFuncCode": "int64_t function_407920(int64_t path) {\n    int64_t v1 = g72; // 0x407948\n    int64_t v2 = &g72; // 0x407948\n    if (g72 + 13 != path) {\n        int64_t v3 = *(int64_t *)g72; // 0x40794a\n        v1 = v3;\n        v2 = g72;\n        if (v3 + 13 != path) {\n            int64_t v4 = *(int64_t *)v3; // 0x407959\n            v1 = v4;\n            v2 = v3;\n            while (v4 + 13 != path) {\n                int64_t v5 = v4;\n                v4 = *(int64_t *)v5;\n                v1 = v4;\n                v2 = v5;\n            }\n        }\n    }\n    int64_t * v6 = (int64_t *)v1; // 0x407981\n    int64_t v7 = *v6; // 0x407981\n    int64_t set; // bp-192, 0x407920\n    int32_t v8 = pthread_sigmask(SIG_BLOCK, (struct _TYPEDEF___sigset_t *)&g73, (struct _TYPEDEF___sigset_t *)&set); // 0x407984\n    char v9 = v8 == 0; // bp-200, 0x40798e\n    int32_t v10 = unlink((char *)path); // 0x407992\n    int32_t err_num = *__errno_location(); // 0x4079a3\n    *(int64_t *)v2 = v7;\n    if (v8 == 0) {\n        // 0x4079d0\n        function_407880((int64_t *)&v9, (int64_t)&g73, (int64_t)&set);\n        if (v10 == 0) {\n            goto lab_0x4079b1;\n        } else {\n            goto lab_0x4079dd;\n        }\n    } else {\n        if (v10 != 0) {\n            goto lab_0x4079dd;\n        } else {\n            goto lab_0x4079b1;\n        }\n    }\n  lab_0x4079b1:\n    if (v7 != 0) {\n        // 0x4079b6\n        free(v6);\n        return &g122;\n    }\n    // 0x407a17\n    *(int64_t *)&g29 = v2;\n    // 0x4079b6\n    free(v6);\n    return &g122;\n  lab_0x4079dd:\n    // 0x4079dd\n    function_40f700(0, 3, path);\n    error(0, err_num, dcgettext(NULL, \"warning: cannot remove: %s\", 5));\n    if (v7 != 0) {\n        // 0x4079b6\n        free(v6);\n        return &g122;\n    }\n    // 0x407a17\n    *(int64_t *)&g29 = v2;\n    // 0x4079b6\n    free(v6);\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407bf4",
            "decompiledFuncCode": "int64_t function_407a30(int64_t * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    int64_t v2; // 0x407a30\n    if ((int32_t)function_40da00(v1, 0x80000, v2) < 0) {\n        // 0x407b65\n        return -1;\n    }\n    // 0x407a5b\n    if (g69 > (int32_t)&g31) {\n        // 0x407bc0\n        function_405fb0(0xffffffff, 0x80000, v2);\n        int32_t v3 = g69; // 0x407bca\n        while (v3 >= 1) {\n            // 0x407bd8\n            if ((int32_t)function_405fb0(0, 0x80000, (int64_t)v3) == 0) {\n                // break -> 0x407a70\n                break;\n            }\n            v3 = g69;\n        }\n    }\n    int32_t * v4 = __errno_location(); // 0x407a70\n    int64_t v5 = __asm_movsd(__asm_movsd_3(0x3fd0000000000000)); // 0x407a89\n    int64_t set; // bp-192, 0x407a30\n    int64_t v6 = &set; // 0x407b04\n    char v7; // bp-200, 0x407a30\n    int64_t v8 = &v7;\n    int64_t v9 = v5; // 0x407a8f\n    int64_t v10 = a2; // 0x407a8f\n    int64_t v11; // 0x407a30\n    int32_t result; // 0x407b2a\n    int32_t v12; // 0x407b2f\n    while (true) {\n      lab_0x407b02:;\n        int32_t v13 = pthread_sigmask(SIG_BLOCK, (struct _TYPEDEF___sigset_t *)&g73, (struct _TYPEDEF___sigset_t *)&set); // 0x407b0c\n        int64_t v14 = g72; // 0x407b11\n        g72 = 0;\n        v7 = v13 == 0;\n        result = fork();\n        v12 = *v4;\n        char v15 = v7;\n        if (result != 0) {\n            // 0x407a98\n            g72 = v14;\n            v11 = 0;\n            if (v15 != 0) {\n                // 0x407b45\n                function_407880((int64_t *)&v7, (int64_t)&g73, v6);\n                v11 = v8;\n                goto lab_0x407aaa;\n            } else {\n                goto lab_0x407aaa;\n            }\n        } else {\n            if (v15 == 0) {\n                // break -> 0x407ba0\n                break;\n            }\n            // 0x407b45\n            function_407880((int64_t *)&v7, (int64_t)&g73, v6);\n            v11 = v8;\n            goto lab_0x407aaa;\n        }\n    }\n  lab_0x407ba0:\n    // 0x407ba0\n    close(0);\n    close(1);\n    // 0x407b65\n    return 0;\n  lab_0x407b84:;\n    // 0x407b84\n    int64_t fd; // 0x407a30\n    close((int32_t)fd);\n    close(*(int32_t *)(v1 + 4));\n    int32_t v16; // 0x407a30\n    *v4 = v16;\n    return result;\n  lab_0x407aaa:\n    // 0x407aaa\n    *v4 = v12;\n    if (result >= 0) {\n        if (result == 0) {\n            goto lab_0x407ba0;\n        } else {\n            // 0x407b5e\n            g69 = &g70;\n            goto lab_0x407b65;\n        }\n    }\n    // 0x407ab6\n    fd = v11;\n    v16 = v12;\n    if (v12 != 11) {\n        goto lab_0x407b84;\n    }\n    // 0x407ac0\n    __asm_movsd_3(v9);\n    function_411620(v11, (int64_t)&g73, v6);\n    int128_t v17 = __asm_movsd_3(v9); // 0x407acb\n    v9 = __asm_movsd(__asm_addsd(__asm_movapd(v17), v17));\n    int64_t v18 = v11; // 0x407ae7\n    if (g69 >= 1) {\n        int64_t v19 = function_405fb0(0, (int64_t)&g73, v6); // 0x407aeb\n        v18 = 0;\n        while ((int32_t)v19 != 0 && g69 >= 1) {\n            // 0x407ae9\n            v19 = function_405fb0(0, (int64_t)&g73, v6);\n            int32_t v20 = g69; // 0x407adf\n            v18 = 0;\n        }\n    }\n    // 0x407af4\n    v10--;\n    if (v10 == 0) {\n        // 0x407b80\n        fd = v18;\n        v16 = *v4;\n        goto lab_0x407b84;\n    }\n    goto lab_0x407b02;\n}\n"
        },
        {
            "funcName": "function_407c00",
            "funcStartAddr": "407c00",
            "funcEndAddr": "407cd0",
            "decompiledFuncCode": "int64_t function_407c00(int64_t a1, int64_t * a2, int64_t a3) {\n    // 0x407c00\n    int64_t v1; // bp-32, 0x407c00\n    int64_t result; // bp-40, 0x407c00\n    int64_t v2; // 0x407c00\n    int64_t v3 = function_411b40(a1, (int32_t)(int64_t)&result, 10, &v1, (int32_t)&g7, v2); // 0x407c24\n    g125 = v3 & 0xffffffff;\n    switch ((int32_t)v3) {\n        case 0: {\n        }\n        case 2: {\n            // 0x407c40\n            *a2 = v1;\n            // 0x407c49\n            return result;\n        }\n        case 1: {\n        }\n        case 3: {\n            // 0x407c60\n            *a2 = -1;\n            // 0x407c49\n            return result;\n        }\n        case 4: {\n            if (a3 != 0) {\n                // 0x407c80\n                function_40f880(a1);\n                dcgettext(NULL, (char *)a3, 5);\n                error(2, (int32_t)\"%s: invalid count at start of %s\" ^ (int32_t)\"%s: invalid count at start of %s\", dcgettext(NULL, \"%s: invalid count at start of %s\", 5));\n                return &g122;\n            }\n            // break -> 0x407c75\n            break;\n        }\n        default: {\n            // 0x407c49\n            return result;\n        }\n    }\n    // 0x407c75\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407cd0",
            "funcStartAddr": "407cd0",
            "funcEndAddr": "407dd0",
            "decompiledFuncCode": "int64_t function_407cd0(int64_t path, int64_t * mode) {\n    char v1 = (int64_t)mode;\n    if (v1 != 114) {\n        if (v1 != 119) {\n            // 0x407db3\n            __assert_fail(\"!\\\"unexpected mode passed to stream_open\\\"\", \"src/sort.c\", 972, \"stream_open\");\n            return &g122;\n        }\n        if (path == 0 || ftruncate(1, 0) == 0) {\n            // 0x407cfd\n            return (int64_t)g52;\n        }\n        // 0x407d74\n        function_40f700(0, 3, path);\n        error(2, *__errno_location(), dcgettext(NULL, \"%s: error truncating\", 5));\n        // 0x407db3\n        __assert_fail(\"!\\\"unexpected mode passed to stream_open\\\"\", \"src/sort.c\", 972, \"stream_open\");\n        return &g122;\n    }\n    // 0x407d10\n    bool v2; // 0x407cd0\n    int64_t v3 = v2 ? -1 : 1; // 0x407d20\n    int64_t v4 = path; // 0x407cd0\n    int64_t v5 = (int64_t)&g19; // 0x407cd0\n    int64_t v6 = 2; // 0x407d20\n    unsigned char v7 = *(char *)v4; // 0x407d20\n    char v8 = *(char *)v5; // 0x407d20\n    char v9 = v8; // 0x407d20\n    bool v10 = false; // 0x407d20\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v4;\n        v8 = *(char *)v5;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12; // 0x407cd0\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407d2b\n        g84 = 1;\n        int64_t result = g53;\n        function_40b800(result, 2, v12);\n        return result;\n    }\n    uint32_t fd = open((char *)path, O_CLOEXEC); // 0x407d5c\n    int64_t result2 = 0; // 0x407d63\n    if (fd >= 0) {\n        // 0x407d65\n        result2 = (int64_t)fdopen(fd, (char *)mode);\n    }\n    // 0x407d39\n    function_40b800(result2, 2, v12);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407dd0",
            "funcStartAddr": "407dd0",
            "funcEndAddr": "407df0",
            "decompiledFuncCode": "int64_t function_407dd0(int64_t a1) {\n    // 0x407dd0\n    return function_405dd0((int64_t)dcgettext(NULL, \"open failed\", 5), (int64_t *)a1);\n}\n"
        },
        {
            "funcName": "function_407df0",
            "funcStartAddr": "407df0",
            "funcEndAddr": "407e70",
            "decompiledFuncCode": "int64_t function_407df0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407dfc\n    int64_t result; // 0x407df0\n    char * v1; // 0x407e5c\n    switch (fileno(stream)) {\n        case 0: {\n            // 0x407e20\n            result = 0;\n            int64_t v2; // 0x407df0\n            if ((v2 & 16) != 0) {\n                // 0x407e25\n                clearerr_unlocked(stream);\n                return &g122;\n            }\n            // break -> 0x407e16\n            break;\n        }\n        case 1: {\n            // 0x407e38\n            result = 0;\n            if (fflush_unlocked(stream) != 0) {\n                // 0x407e5a\n                v1 = dcgettext(NULL, (char *)(int64_t)\"fflush failed\", 5);\n                return function_405dd0((int64_t)v1, (int64_t *)a2);\n            }\n            // break -> 0x407e16\n            break;\n        }\n        default: {\n            int64_t v3 = function_411f80(a1, a2); // 0x407e0d\n            result = v3;\n            if ((int32_t)v3 != 0) {\n                // 0x407e5a\n                v1 = dcgettext(NULL, (char *)(int64_t)\"close failed\", 5);\n                return function_405dd0((int64_t)v1, (int64_t *)a2);\n            }\n            // break -> 0x407e16\n            break;\n        }\n    }\n    // 0x407e16\n    return result;\n}\n"
        },
        {
            "funcName": "function_407e70",
            "funcStartAddr": "407e70",
            "funcEndAddr": "4082a0",
            "decompiledFuncCode": "int64_t function_407e70(int64_t data, int64_t stream, int64_t a3) {\n    int64_t * v1 = (int64_t *)(data + 8); // 0x407e87\n    int64_t n = *v1; // 0x407e87\n    uint64_t v2 = n + data; // 0x407e8b\n    if (a3 != 0 || g81 == 0) {\n        char * v3 = (char *)(v2 - 1); // 0x407ea9\n        *v3 = *(char *)&g38;\n        int64_t result = fwrite_unlocked((int64_t *)data, 1, (int32_t)n, (struct _IO_FILE *)stream); // 0x407eae\n        if (n != result) {\n            // 0x40827b\n            return function_405dd0((int64_t)dcgettext(NULL, \"write failed\", 5), (int64_t *)a3);\n        }\n        // 0x407ebc\n        *v3 = 0;\n        // 0x407ec2\n        return result;\n    }\n    int64_t v4 = data; // 0x407ee7\n    int64_t v5 = n; // 0x407ee7\n    int64_t v6; // 0x407e70\n    int64_t v7; // 0x407e70\n    int64_t v8; // 0x407e70\n    int64_t v9; // 0x407e70\n    int64_t v10; // 0x407e70\n    int64_t v11; // 0x407e70\n    int64_t v12; // 0x407e70\n    int64_t v13; // 0x407e70\n    int64_t v14; // 0x407e70\n    int64_t v15; // 0x407e70\n    int32_t v16; // 0x407e70\n    int32_t v17; // 0x407e70\n    int64_t * v18; // 0x407e70\n    int64_t * v19; // 0x407e70\n    int64_t v20; // 0x407f11\n    if (v2 > data) {\n        // 0x407f11\n        v18 = (int64_t *)(stream + 40);\n        v19 = (int64_t *)(stream + 48);\n        v10 = data;\n        v13 = data;\n        while (true) {\n          lab_0x407f11:;\n            int64_t v21 = v13;\n            v20 = v10 + 1;\n            unsigned char v22 = *(char *)v10; // 0x407f15\n            if (v22 != 9) {\n                // 0x407ef0\n                v6 = v22;\n                v16 = v22;\n                v11 = v21;\n                v14 = v21;\n                if (v2 == v20) {\n                    goto lab_0x407f60;\n                } else {\n                    goto lab_0x407ef8;\n                }\n            } else {\n                uint64_t v23 = *v18; // 0x407f27\n                v7 = 62;\n                v15 = v23;\n                v12 = v21;\n                v17 = 62;\n                if (*v19 > v23) {\n                    goto lab_0x407f02;\n                } else {\n                    goto lab_0x407f31;\n                }\n            }\n        }\n      lab_0x407f70:\n        // 0x407f70\n        v5 = *v1;\n        v9 = v8;\n    }\n    int64_t v24 = v4; // 0x407f87\n    int64_t v25 = g83; // 0x407f87\n    int64_t v26 = v4 - 1 + v5; // 0x407f87\n    int64_t v27 = v5; // 0x407f87\n    int64_t v28 = v9; // 0x407f87\n    int64_t v29 = 0; // 0x407f87\n    if (g83 == 0) {\n        goto lab_0x4080a7_2;\n    } else {\n        goto lab_0x407f90;\n    }\n  lab_0x408100:;\n    // 0x408100\n    int64_t v30; // 0x407e70\n    int64_t v31 = v30;\n    int64_t v32 = (int64_t)g52; // 0x408100\n    int64_t * v33 = (int64_t *)(v32 + 40); // 0x408107\n    uint64_t v34 = *v33; // 0x408107\n    if (v34 >= *(int64_t *)(v32 + 48)) {\n        // 0x408190\n        __overflow(g52, 95);\n        goto lab_0x40811c;\n    } else {\n        // 0x408111\n        *v33 = v34 + 1;\n        *(char *)v34 = 95;\n        goto lab_0x40811c;\n    }\n  lab_0x408122:;\n    int64_t v35 = (int64_t)g52; // 0x408122\n    int64_t * v36 = (int64_t *)(v35 + 40); // 0x408129\n    uint64_t v37 = *v36; // 0x408129\n    int64_t v38; // 0x407e70\n    int64_t v39; // 0x407e70\n    if (v37 >= *(int64_t *)(v35 + 48)) {\n        // 0x408240\n        v38 = __overflow(g52, 10);\n        v39 = v35;\n    } else {\n        // 0x408137\n        *v36 = v37 + 1;\n        *(char *)v37 = 10;\n        v38 = v37;\n        v39 = v35;\n    }\n    goto lab_0x408142;\n  lab_0x408142:;\n    int64_t result2 = v38;\n    int64_t v40; // 0x407e70\n    if (v40 == 0) {\n        // break -> 0x407ec2\n        goto lab_0x407ec2_3;\n    }\n    // 0x40814b\n    v25 = *(int64_t *)(v40 + 64);\n    int3_t v41; // 0x407e70\n    int3_t v42; // 0x407e70\n    if (v25 != 0) {\n        // 0x408159\n        v24 = v39;\n        v27 = *v1;\n        v41 = v42;\n        v26 = v24 - 1 + v27;\n        goto lab_0x407f90;\n    }\n    // 0x4081d8\n    if (*(char *)&g85 != 0) {\n        // break -> 0x407ec2\n        goto lab_0x407ec2_3;\n    }\n    // 0x4081e5\n    if (g86 != 0) {\n        // break -> 0x407ec2\n        goto lab_0x407ec2_3;\n    }\n    int64_t v43 = *v1; // 0x408202\n    int64_t v44 = 0; // 0x408202\n    goto lab_0x4080a7;\n  lab_0x407f60:\n    // 0x407f60\n    v6 = 10;\n    v16 = 10;\n    v11 = v14;\n    goto lab_0x407ef8;\n  lab_0x407ef8:;\n    uint64_t v54 = *v18; // 0x407ef8\n    v7 = v6;\n    v15 = v54;\n    v12 = v11;\n    v17 = v16;\n    if (*v19 > v54) {\n        goto lab_0x407f02;\n    } else {\n        goto lab_0x407f31;\n    }\n  lab_0x407f02:\n    // 0x407f02\n    *v18 = v15 + 1;\n    *(char *)v15 = (char)v7;\n    v8 = v7;\n    int64_t v55 = v12; // 0x407f0a\n    goto lab_0x407f0c;\n  lab_0x407f31:;\n    int32_t v97 = __overflow((struct _IO_FILE *)stream, v17 % 256); // 0x407f38\n    v8 = v97;\n    v55 = stream;\n    if (v97 != -1) {\n        goto lab_0x407f0c;\n    } else {\n        int64_t v98 = (int64_t)dcgettext(NULL, \"write failed\", 5); // 0x407f4e\n        function_405dd0(v98, (int64_t *)((int32_t)\"write failed\" ^ (int32_t)\"write failed\"));\n        v14 = v98;\n        goto lab_0x407f60;\n    }\n  lab_0x407f0c:\n    // 0x407f0c\n    v4 = v55;\n    v10 = v20;\n    v13 = v4;\n    if (v2 == v20) {\n        // break -> 0x407f70\n        goto lab_0x407f70;\n    }\n    goto lab_0x407f11;\n  lab_0x4080a7_2:;\n    // 0x4080a7\n    int3_t v56; // 0x407e70\n    v42 = v56;\n    v43 = v28;\n    v44 = v29;\n    while (true) {\n      lab_0x4080a7:\n        // 0x4080a7\n        v40 = v44;\n        if (v43 != 0) {\n            while (true) {\n                // 0x4080c8\n                int64_t v45; // 0x407e70\n                int64_t v46 = v45;\n                struct _IO_FILE * v47 = g52; // 0x4080c8\n                int64_t v48 = (int64_t)v47; // 0x4080c8\n                int64_t * v49 = (int64_t *)(v48 + 40); // 0x4080cf\n                uint64_t v50 = *v49; // 0x4080cf\n                uint64_t v51 = *(int64_t *)(v48 + 48); // 0x4080d3\n                if (v50 >= v51) {\n                    // 0x408180\n                    __overflow(v47, 32);\n                } else {\n                    // 0x4080dd\n                    *v49 = v50 + 1;\n                    *(char *)v50 = 32;\n                }\n                int64_t v52 = v46 - 1;\n                v45 = v52;\n                int64_t v53; // 0x407e70\n                v30 = v53;\n                if (v52 == 0) {\n                    goto lab_0x408100;\n                }\n            }\n            goto lab_0x408122;\n        } else {\n            // 0x4081b0\n            v38 = __printf_chk(1, dcgettext(NULL, \"^ no match for key\\n\", 5));\n            v39 = 1;\n            goto lab_0x408142;\n        }\n    }\n  lab_0x407ec2_3:\n    // 0x407ec2\n    return result2;\n  lab_0x407f90:;\n    int64_t v57 = v27;\n    int64_t v58 = v26;\n    int64_t v59 = v25;\n    int64_t v60 = v24;\n    int3_t v61 = v41;\n    int64_t v62 = *(int64_t *)v59; // 0x407f90\n    int64_t v63 = *(int64_t *)(v59 + 16); // 0x407f94\n    int64_t v64; // 0x407e70\n    int64_t v65; // 0x407e70\n    int64_t v66; // 0x407e70\n    int64_t v67; // 0x407e70\n    int64_t v68; // 0x407e70\n    if (v62 == -1) {\n        // 0x408210\n        v66 = v60;\n        v67 = v60;\n        v64 = v58;\n        if (v63 != -1) {\n            goto lab_0x407fba;\n        } else {\n            goto lab_0x407fcb;\n        }\n    } else {\n        int64_t v69 = function_406360(v60, v57, v59); // 0x407fac\n        v66 = v69;\n        v68 = v69;\n        v65 = v58;\n        if (v63 == -1) {\n            goto lab_0x407fd9;\n        } else {\n            goto lab_0x407fba;\n        }\n    }\n  lab_0x407fba:\n    // 0x407fba\n    v67 = v66;\n    v64 = function_406470(v60, v57, v59);\n    goto lab_0x407fcb;\n  lab_0x407fcb:\n    // 0x407fcb\n    v68 = v67;\n    v65 = v64;\n    int64_t v70 = v67; // 0x407fd1\n    int64_t v71 = v64; // 0x407fd1\n    if (v62 == -1 == (*(char *)(v59 + 48) != 0)) {\n        goto lab_0x407ff6;\n    } else {\n        goto lab_0x407fd9;\n    }\n  lab_0x407fd9:;\n    int64_t v72 = v65;\n    int64_t v73 = v68;\n    v70 = v73;\n    v71 = v72;\n    if (*(char *)(v59 + 54) != 0) {\n        goto lab_0x407ff6;\n    } else {\n        // 0x407fe1\n        v70 = v73;\n        v71 = v72;\n        v56 = v61;\n        v28 = 0xffff00ff0000;\n        v29 = v59;\n        if ((*(int64_t *)(v59 + 48) & 0xffff00ff0000) == 0) {\n            goto lab_0x4080a7_2;\n        } else {\n            goto lab_0x407ff6;\n        }\n    }\n  lab_0x407ff6:;\n    uint64_t v74 = v71;\n    char * v75 = (char *)v74; // 0x407ff6\n    *v75 = 0;\n    int64_t v76 = (int64_t)*(char *)v70; // 0x407ffe\n    int64_t v77 = v70; // 0x408009\n    int64_t v78 = v76; // 0x408009\n    int64_t v79 = v70; // 0x408009\n    if (*(char *)(v76 + (int64_t)&g98) != 0) {\n        int64_t v80 = v77 + 1; // 0x408010\n        int64_t v81 = (int64_t)*(char *)v80; // 0x408014\n        v77 = v80;\n        v78 = v81;\n        v79 = v80;\n        while (*(char *)(v81 + (int64_t)&g98) != 0) {\n            // 0x408010\n            v80 = v77 + 1;\n            v81 = (int64_t)*(char *)v80;\n            v77 = v80;\n            v78 = v81;\n            v79 = v80;\n        }\n    }\n    uint64_t str = v79;\n    struct _IO_FILE * v82 = (struct _IO_FILE *)str;\n    struct _IO_FILE * endptr = v82; // bp-72, 0x408021\n    int64_t v83 = v78; // 0x408028\n    int3_t v84; // 0x407e70\n    int64_t v85; // 0x407e70\n    if (str > v74) {\n        goto lab_0x4081a0;\n    } else {\n        // 0x40802e\n        if (*(char *)(v59 + 54) != 0) {\n            int64_t v86 = function_405a40(str, (int32_t)(int64_t)&endptr); // 0x40822e\n            v84 = v61;\n            v85 = v86;\n            goto lab_0x4080a0;\n        } else {\n            // 0x40803a\n            if (*(char *)(v59 + 52) != 0) {\n                float80_t str_as_ld = strtold((char *)str, (char **)&endptr); // 0x408256\n                __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61));\n                v84 = v61 + 1;\n                v85 = (float64_t)str_as_ld;\n                goto lab_0x4080a0;\n            } else {\n                // 0x408046\n                if ((*(int64_t *)(v59 + 48) & 0xff0000ff0000) == 0) {\n                    goto lab_0x4081a0;\n                } else {\n                    struct _IO_FILE * v87 = v82; // 0x408061\n                    if (str < v74) {\n                        char v88 = *(char *)str; // 0x408065\n                        v87 = (struct _IO_FILE *)(str + (int64_t)(v88 == 45));\n                    }\n                    struct _IO_FILE * v89 = v87; // bp-64, 0x408074\n                    int64_t v90 = function_405930((int64_t *)&v89); // 0x408079\n                    v84 = v61;\n                    v85 = v90;\n                    if ((char)v90 >= 48) {\n                        struct _IO_FILE * v91 = v89; // 0x408088\n                        int64_t v92 = (int64_t)v91; // 0x408088\n                        int64_t v93 = v92; // 0x40808d\n                        if (*(char *)(v59 + 53) != 0) {\n                            unsigned char v94 = *(char *)v91; // 0x408268\n                            char v95 = *(char *)((int64_t)v94 + (int64_t)&g2); // 0x40826b\n                            v93 = (int64_t)(v95 != 0) + v92;\n                        }\n                        // 0x408093\n                        endptr = (struct _IO_FILE *)v93;\n                        v84 = v61;\n                        v85 = v93;\n                    }\n                    goto lab_0x4080a0;\n                }\n            }\n        }\n    }\n  lab_0x4081a0:\n    // 0x4081a0\n    endptr = (struct _IO_FILE *)v74;\n    v84 = v61;\n    v85 = v83;\n    goto lab_0x4080a0;\n  lab_0x4080a0:\n    // 0x4080a0\n    v56 = v84;\n    v28 = v85;\n    v29 = v59;\n    goto lab_0x4080a7_2;\n  lab_0x40811c:;\n    int64_t v96 = v31 - 1; // 0x40811c\n    v30 = v96;\n    if (v96 != 0) {\n        goto lab_0x408100;\n    } else {\n        goto lab_0x408122;\n    }\n}\n"
        },
        {
            "funcName": "function_4082a0",
            "funcStartAddr": "4082a0",
            "funcEndAddr": "408370",
            "decompiledFuncCode": "int64_t function_4082a0(int64_t str, int64_t str2) {\n    // 0x4082a0\n    if (g83 != 0) {\n        int64_t result = function_4065b0(str, str2); // 0x4082be\n        if ((int32_t)result != 0 || *(char *)&g85 != 0 || g86 != 0) {\n            // 0x408306\n            return result;\n        }\n    }\n    int64_t v1 = *(int64_t *)(str + 8); // 0x4082d9\n    int64_t v2 = *(int64_t *)(str2 + 8); // 0x4082dd\n    uint64_t v3 = v2 - 1; // 0x4082e4\n    uint64_t v4 = v1 - 1; // 0x4082e8\n    int64_t v5; // 0x4082a0\n    if (v4 != 0) {\n        // 0x408318\n        v5 = 1;\n        if (v3 != 0) {\n            // 0x408322\n            if (g103 != 0) {\n                // 0x408360\n                v5 = function_4115c0(str, v1, str2, v2);\n            } else {\n                int64_t n = v4 > v3 ? v3 : v4; // 0x408338\n                int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n); // 0x40833c\n                v5 = memcmp_rc;\n                if (memcmp_rc == 0) {\n                    // 0x408345\n                    v5 = 0xffffffff;\n                    if (v4 >= v3) {\n                        // 0x40834f\n                        v5 = v1 != v2;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4082ee\n        v5 = v3 != 0 ? 0xffffffff : 0;\n    }\n    int64_t v6 = v5;\n    // 0x408306\n    return (g87 != 0 ? -v6 : v6) & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408370",
            "funcStartAddr": "408370",
            "funcEndAddr": "4085c6",
            "decompiledFuncCode": "int64_t function_408370(int64_t a1, uint64_t a2, int64_t a3, int32_t a4) {\n    if (a2 == 2) {\n        int64_t v1 = a1 - 64; // 0x4084a8\n        int64_t v2 = a1 - 32; // 0x4084ac\n        int64_t result2 = function_4082a0(v2, v1); // 0x4084b4\n        int32_t v3 = result2;\n        if ((char)a4 != 0) {\n            int64_t result = v3 >= 0 == (v3 != 0) ? -32 : -64; // 0x40854f\n            int64_t v4 = (32 * (int64_t)(v3 >= 0 == (v3 != 0)) ^ -32) + a1; // 0x40855c\n            int64_t v5 = result + a1; // 0x40855f\n            int128_t v6 = __asm_movdqu(*(int128_t *)v4); // 0x408562\n            int128_t v7 = __asm_movdqu(*(int128_t *)(v4 + 16)); // 0x408566\n            __asm_movups(*(int128_t *)(a3 - 32), v6);\n            int128_t v8 = __asm_movdqu(*(int128_t *)v5); // 0x40856f\n            __asm_movups(*(int128_t *)(a3 - 16), v7);\n            int128_t v9 = __asm_movdqu(*(int128_t *)(v5 + 16)); // 0x408578\n            __asm_movups(*(int128_t *)(a3 - 64), v8);\n            __asm_movups(*(int128_t *)(a3 - 48), v9);\n            return result;\n        }\n        // 0x4084c1\n        if (v3 >= 1) {\n            int128_t * v10 = (int128_t *)v2; // 0x4084c5\n            int128_t v11 = __asm_movdqu(*v10); // 0x4084c5\n            int128_t * v12 = (int128_t *)(a1 - 16); // 0x4084ca\n            int128_t v13 = __asm_movdqu(*v12); // 0x4084ca\n            int128_t * v14 = (int128_t *)v1; // 0x4084cf\n            int128_t v15 = __asm_movdqu(*v14); // 0x4084cf\n            int128_t * v16 = (int128_t *)(a1 - 48); // 0x4084d4\n            int128_t v17 = __asm_movdqu(*v16); // 0x4084d4\n            __asm_movups(*(int128_t *)(a3 - 32), v11);\n            __asm_movups(*(int128_t *)(a3 - 16), v13);\n            __asm_movups(*v10, v15);\n            __asm_movups(*v12, v17);\n            __asm_movups(*v14, v11);\n            __asm_movups(*v16, v13);\n        }\n        // 0x4084f1\n        return result2;\n    }\n    int64_t v18 = (uint64_t)(a2 % 2); // 0x40839d\n    int64_t v19 = 0; // 0x4083a0\n    int64_t v20 = a1 - v19; // 0x4083a7\n    int64_t v21; // 0x408370\n    int64_t v22; // 0x408370\n    int64_t v23; // 0x408370\n    if ((char)a4 != 0) {\n        int64_t v24 = a3 - v19; // 0x408448\n        function_408370(v20, v18, v24, 1);\n        v23 = a3;\n        v22 = a1;\n        v21 = v24;\n        if (a2 >= 4) {\n            // 0x408464\n            function_408370(a1, 0, a3, 0);\n            v23 = a3;\n            v22 = a1;\n            v21 = v24;\n        }\n    } else {\n        // 0x4083b3\n        function_408370(v20, v18, a3, 0);\n        if (a2 < 4) {\n            int128_t v25 = __asm_movdqu(*(int128_t *)(a1 - 32)); // 0x4083d4\n            int128_t v26 = __asm_movdqu(*(int128_t *)(a1 - 16)); // 0x4083d9\n            __asm_movups(*(int128_t *)(a3 - 32), v25);\n            __asm_movups(*(int128_t *)(a3 - 16), v26);\n            v23 = a1;\n            v22 = a3;\n            v21 = v20;\n        } else {\n            // 0x408598\n            function_408370(a1, 0, a3, 1);\n            v23 = a1;\n            v22 = a3;\n            v21 = v20;\n        }\n    }\n    int64_t v27 = v21; // 0x4083fa\n    int64_t v28 = v21 - 32; // 0x4083fa\n    int64_t v29 = v18; // 0x4083fa\n    int64_t v30 = 0;\n    int64_t v31 = v22;\n    int64_t v32 = v31 - 32;\n    int64_t v33 = v23 - 32; // 0x40840b\n    int64_t v34 = function_4082a0(v32, v28); // 0x40840f\n    int64_t v35 = v33; // 0x40841b\n    int64_t v36 = v29; // 0x40841b\n    int64_t v37 = v28; // 0x40841b\n    int64_t v38 = v27; // 0x40841b\n    int64_t v39 = v23; // 0x40841b\n    int64_t v40 = v33; // 0x40841b\n    int64_t v41 = v34; // 0x40841b\n    int64_t v42; // 0x408370\n    int64_t v43; // 0x408370\n    int64_t v44; // 0x408370\n    int64_t v45; // 0x408370\n    int64_t v46; // 0x408370\n    int128_t v47; // 0x408426\n    int64_t v48; // 0x40842c\n    int64_t v49; // 0x408430\n    int64_t v50; // 0x40843d\n    int64_t v51; // 0x40840b\n    int64_t v52; // 0x40840f\n    if ((int32_t)v34 >= 1) {\n        v42 = v35;\n        __asm_movups(*(int128_t *)v42, __asm_movdqu(*(int128_t *)(v38 - 32)));\n        v47 = __asm_movdqu(*(int128_t *)(v38 - 16));\n        v48 = v23 - 16;\n        __asm_movups(*(int128_t *)v48, v47);\n        v49 = v36 - 1;\n        v45 = -32;\n        v43 = v30;\n        if (v49 == 0) {\n            goto lab_0x408510;\n        }\n        // 0x40843a\n        v44 = v37;\n        v50 = v44 - 32;\n        v51 = v42 - 32;\n        v52 = function_4082a0(v32, v50);\n        v36 = v49;\n        v37 = v50;\n        v38 = v44;\n        v46 = v42;\n        v39 = v42;\n        v27 = v44;\n        v28 = v50;\n        v29 = v49;\n        v40 = v51;\n        v41 = v52;\n        while ((int32_t)v52 >= 1) {\n            // 0x40841d\n            v42 = v51;\n            __asm_movups(*(int128_t *)v42, __asm_movdqu(*(int128_t *)(v38 - 32)));\n            v47 = __asm_movdqu(*(int128_t *)(v38 - 16));\n            v48 = v46 - 16;\n            __asm_movups(*(int128_t *)v48, v47);\n            v49 = v36 - 1;\n            v45 = -32;\n            v43 = v30;\n            if (v49 == 0) {\n                goto lab_0x408510;\n            }\n            // 0x40843a\n            v44 = v37;\n            v50 = v44 - 32;\n            v51 = v42 - 32;\n            v52 = function_4082a0(v32, v50);\n            v36 = v49;\n            v37 = v50;\n            v38 = v44;\n            v46 = v42;\n            v39 = v42;\n            v27 = v44;\n            v28 = v50;\n            v29 = v49;\n            v40 = v51;\n            v41 = v52;\n        }\n    }\n    int64_t v53 = v40;\n    __asm_movups(*(int128_t *)v53, __asm_movdqu(*(int128_t *)v32));\n    int128_t v54 = __asm_movdqu(*(int128_t *)(v31 - 16)); // 0x408488\n    __asm_movups(*(int128_t *)(v39 - 16), v54);\n    int64_t v55 = v30 - 1; // 0x408491\n    int64_t result3 = v41; // 0x408495\n    while (v55 != 0) {\n        // 0x408400\n        v30 = v55;\n        v31 = v32;\n        v32 = v31 - 32;\n        v33 = v53 - 32;\n        v34 = function_4082a0(v32, v28);\n        v35 = v33;\n        v36 = v29;\n        v37 = v28;\n        v38 = v27;\n        v46 = v53;\n        v39 = v53;\n        v40 = v33;\n        v41 = v34;\n        if ((int32_t)v34 >= 1) {\n            v42 = v35;\n            __asm_movups(*(int128_t *)v42, __asm_movdqu(*(int128_t *)(v38 - 32)));\n            v47 = __asm_movdqu(*(int128_t *)(v38 - 16));\n            v48 = v46 - 16;\n            __asm_movups(*(int128_t *)v48, v47);\n            v49 = v36 - 1;\n            v45 = -32;\n            v43 = v30;\n            if (v49 == 0) {\n                goto lab_0x408510;\n            }\n            // 0x40843a\n            v44 = v37;\n            v50 = v44 - 32;\n            v51 = v42 - 32;\n            v52 = function_4082a0(v32, v50);\n            v36 = v49;\n            v37 = v50;\n            v38 = v44;\n            v46 = v42;\n            v39 = v42;\n            v27 = v44;\n            v28 = v50;\n            v29 = v49;\n            v40 = v51;\n            v41 = v52;\n            while ((int32_t)v52 >= 1) {\n                // 0x40841d\n                v42 = v51;\n                __asm_movups(*(int128_t *)v42, __asm_movdqu(*(int128_t *)(v38 - 32)));\n                v47 = __asm_movdqu(*(int128_t *)(v38 - 16));\n                v48 = v46 - 16;\n                __asm_movups(*(int128_t *)v48, v47);\n                v49 = v36 - 1;\n                v45 = -32;\n                v43 = v30;\n                if (v49 == 0) {\n                    goto lab_0x408510;\n                }\n                // 0x40843a\n                v44 = v37;\n                v50 = v44 - 32;\n                v51 = v42 - 32;\n                v52 = function_4082a0(v32, v50);\n                v36 = v49;\n                v37 = v50;\n                v38 = v44;\n                v46 = v42;\n                v39 = v42;\n                v27 = v44;\n                v28 = v50;\n                v29 = v49;\n                v40 = v51;\n                v41 = v52;\n            }\n        }\n        // 0x408480\n        v53 = v40;\n        __asm_movups(*(int128_t *)v53, __asm_movdqu(*(int128_t *)v32));\n        v54 = __asm_movdqu(*(int128_t *)(v31 - 16));\n        __asm_movups(*(int128_t *)(v39 - 16), v54);\n        v55 = v30 - 1;\n        result3 = v41;\n    }\n    // 0x4084f1\n    return result3;\n  lab_0x408510:;\n    int64_t v56 = v45 + v31;\n    __asm_movups(*(int128_t *)(v45 + v42), __asm_movdqu(*(int128_t *)v56));\n    __asm_movups(*(int128_t *)(v45 + v48), __asm_movdqu(*(int128_t *)(v56 + 16)));\n    int64_t v57 = v45 - 32; // 0x408525\n    int64_t v58 = v43 - 1; // 0x408529\n    result3 = v57;\n    v45 = v57;\n    v43 = v58;\n    if (v58 != 0) {\n        goto lab_0x408510;\n    } else {\n        return result3;\n    }\n}\n"
        },
        {
            "funcName": "function_4085d0",
            "funcStartAddr": "4085d0",
            "funcEndAddr": "408637",
            "decompiledFuncCode": "int64_t function_4085d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (*(char *)&g85 == 0) {\n        // 0x40861e\n        return function_407e70(a1, a2, a3);\n    }\n    // 0x4085e5\n    if (g100 != 0) {\n        int64_t result = function_4082a0(a1, (int64_t)&g100); // 0x4085f9\n        if ((int32_t)result == 0) {\n            // 0x408630\n            return result;\n        }\n    }\n    // 0x408607\n    *(int128_t *)&g100 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)&v1));\n    int64_t v2 = __asm_movaps(__asm_movdqu(*(int128_t *)(a1 + 16))); // 0x408617\n    *(int128_t *)&g101 = (int128_t)v2;\n    // 0x40861e\n    return function_407e70(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408640",
            "funcStartAddr": "408640",
            "funcEndAddr": "408e08",
            "decompiledFuncCode": "int64_t function_408640(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint128_t v1 = 56 * (int128_t)(uint64_t)a3; // 0x40866b\n    if ((int64_t)v1 < 0 || v1 % 0x3f0000000000000001 != 0) {\n        // 0x408e03\n        function_411460(a3);\n        // UNREACHABLE\n    }\n    int64_t v2 = 8 * a3; // 0x40869a\n    int64_t v3 = 56 * a3; // 0x4086a8\n    int64_t v4 = function_411210(v3); // 0x4086ac\n    if (v2 < 0 || a3 >= 0x2000000000000000) {\n        // 0x408e03\n        function_411460(v3);\n        // UNREACHABLE\n    }\n    int64_t v5 = function_411210(v2); // 0x4086db\n    int64_t v6 = function_411210(v2); // 0x4086e6\n    int64_t v7 = function_411210(v2); // 0x4086f3\n    int64_t v8 = 0; // bp-88, 0x4086f8\n    int64_t v9; // 0x408640\n    int64_t v10; // 0x408640\n    int64_t v11; // 0x408640\n    int64_t v12; // 0x408640\n    int64_t v13; // 0x408640\n    int64_t v14; // 0x408640\n    int64_t v15; // 0x408640\n    int64_t v16; // 0x408640\n    int64_t v17; // 0x408640\n    int64_t * v18; // 0x408640\n    int64_t v19; // 0x408640\n    int64_t v20; // 0x4088a0\n    int64_t v21; // 0x4088aa\n    int64_t * v22; // 0x4088bb\n    uint64_t v23; // 0x4088bb\n    int64_t * v24; // 0x408640\n    int64_t * v25; // 0x408640\n    int64_t v26; // 0x408936\n    if (a3 != 0) {\n        int64_t v27 = a1 + 16;\n        int64_t v28 = a3; // 0x408640\n        int64_t v29 = a2; // 0x408640\n        int64_t v30 = 0; // 0x408640\n        int64_t v31; // 0x408640\n        int64_t v32; // 0x408640\n        while (true) {\n          lab_0x408730:;\n            int64_t v33 = v29;\n            uint64_t v34 = v28;\n            uint64_t v35 = v30;\n            int64_t v36 = 8 * v35; // 0x40873f\n            int64_t v37 = 56 * v35 + v4; // 0x408752\n            uint64_t v38 = (int64_t)g91 / v34;\n            uint64_t v39 = g33; // 0x408763\n            int64_t * v40 = (int64_t *)v37;\n            function_405e30(v40, 32, v39 <= v38 ? v38 : v39);\n            int64_t * v41 = (int64_t *)(v36 + a6);\n            int64_t * v42 = (int64_t *)(16 * v35 + a1);\n            while ((char)function_4074d0((char)v37, *v41, *v42) != 0) {\n                int64_t v43 = *v40 + *(int64_t *)(v37 + 24); // 0x4087ad\n                *(int64_t *)(v36 + v5) = v43 - 32;\n                *(int64_t *)(v36 + v6) = v43 - 32 * *(int64_t *)(v37 + 16);\n                int64_t v44 = v35 + 1; // 0x4087cd\n                v32 = v34;\n                v31 = v33;\n                if (v44 >= v34) {\n                    // break (via goto) -> 0x4087e2\n                    goto lab_0x4087e2;\n                }\n                v35 = v44;\n                v36 = 8 * v35;\n                v37 = 56 * v35 + v4;\n                v38 = (int64_t)g91 / v34;\n                v39 = g33;\n                v40 = (int64_t *)v37;\n                function_405e30(v40, 32, v39 <= v38 ? v38 : v39);\n                v41 = (int64_t *)(v36 + a6);\n                v42 = (int64_t *)(16 * v35 + a1);\n            }\n            // 0x408c70\n            function_407df0(*v41, *v42);\n            int64_t v45 = v33; // 0x408c81\n            if (v33 > v35) {\n                // 0x408dd6\n                function_407920(*v42);\n                v45 = v33 - 1;\n            }\n            // 0x408c87\n            free((int64_t *)*v40);\n            int64_t v46 = v34 - 1; // 0x408c95\n            v32 = v46;\n            v31 = v45;\n            if (v46 <= v35) {\n                // break -> 0x4087e2\n                break;\n            }\n            int64_t v47 = v36; // 0x408caf\n            while (true) {\n              lab_0x408cb0:;\n                int64_t v48 = 2 * v47; // 0x408cb0\n                int128_t v49 = __asm_movdqu(*(int128_t *)(v48 + v27)); // 0x408cb0\n                int64_t v50 = v47 + a6;\n                __asm_movups(*(int128_t *)(v48 + a1), v49);\n                *(int64_t *)v50 = *(int64_t *)(v50 + 8);\n                v47 += 8;\n                v28 = v46;\n                v29 = v45;\n                v30 = v35;\n                if (8 * v34 - 8 != v47) {\n                    goto lab_0x408cb0;\n                } else {\n                    goto lab_0x408730;\n                }\n            }\n        }\n      lab_0x4087e2:\n        // 0x4087e2\n        if (v32 != 0) {\n            int64_t v51 = 0;\n            *(int64_t *)(8 * v51 + v7) = v51;\n            int64_t v52 = v51 + 1; // 0x4087fc\n            while (v52 != v32) {\n                // 0x4087f8\n                v51 = v52;\n                *(int64_t *)(8 * v51 + v7) = v51;\n                v52 = v51 + 1;\n            }\n            // 0x408805\n            v9 = v7 - 8;\n            int64_t v53 = 1; // 0x40880b\n            if (v32 != 1) {\n                while (true) {\n                    int64_t v54 = v53;\n                    int64_t v55 = 8 * v54; // 0x408820\n                    int64_t * v56 = (int64_t *)(v55 + v7); // 0x408837\n                    int64_t v57 = *v56; // 0x408837\n                    int64_t * v58 = (int64_t *)(v55 + v9); // 0x40883b\n                    int64_t v59 = *v58; // 0x40883b\n                    int64_t v60 = *(int64_t *)(8 * v59 + v5); // 0x408842\n                    int64_t v61; // 0x408640\n                    if ((int32_t)function_4082a0(v60, *(int64_t *)(8 * v57 + v5)) < 1) {\n                        int64_t v62 = v54 + 1; // 0x408868\n                        v61 = v62;\n                        if (v62 >= v32) {\n                            // break -> 0x408879\n                            break;\n                        }\n                    } else {\n                        // 0x408854\n                        *v58 = v57;\n                        *v56 = v59;\n                        v61 = 1;\n                    }\n                    // 0x408820\n                    v53 = v61;\n                }\n            }\n            // 0x408879\n            v18 = (int64_t *)v7;\n            v19 = &v8;\n            int64_t v63 = v32; // 0x408897\n            int64_t v64 = v31; // 0x408897\n            int64_t v65 = 0; // 0x408897\n            int64_t v66 = 0; // 0x408897\n            while (true) {\n              lab_0x4088a0:;\n                int64_t v67 = v64;\n                v17 = v63;\n                v14 = v65;\n                v10 = v66;\n                while (true) {\n                  lab_0x4088a0_3:\n                    // 0x4088a0\n                    v11 = v10;\n                    int64_t v68 = v14;\n                    v20 = *v18;\n                    v21 = 8 * v20;\n                    v22 = (int64_t *)(v21 + v5);\n                    v23 = *v22;\n                    if (*(char *)&g85 == 0) {\n                        // 0x408a58\n                        function_407e70(v23, a4, a5);\n                        v15 = v68;\n                        v12 = v11;\n                        goto lab_0x4088e6;\n                    } else {\n                        if (v68 == 0) {\n                            goto lab_0x408a87;\n                        } else {\n                            int64_t v69 = function_4082a0(v68, v23); // 0x4088d9\n                            v15 = v68;\n                            v12 = v11;\n                            if ((int32_t)v69 != 0) {\n                                // 0x408a70\n                                function_407e70(v19, a4, a5);\n                                goto lab_0x408a87;\n                            } else {\n                                goto lab_0x4088e6;\n                            }\n                        }\n                    }\n                }\n              lab_0x408b00:;\n                int64_t v70 = 8 * v17; // 0x408b09\n                int64_t v71 = v70 + v7; // 0x408b09\n                int64_t v72 = v7 + 8; // 0x408b11\n                int64_t v73 = v20; // 0x408b11\n                int64_t * v74 = v25; // 0x408b11\n                int64_t * v75 = v24; // 0x408b11\n                int64_t v76 = v20; // 0x408b11\n                int64_t v77 = v26; // 0x408b11\n                if (v17 != 1) {\n                    int64_t * v78 = (int64_t *)v72; // 0x408b20\n                    uint64_t v79 = *v78; // 0x408b20\n                    int64_t v80 = v73; // 0x408b26\n                    if (v79 > v73) {\n                        // 0x408b28\n                        *v78 = v79 - 1;\n                        v80 = *v18;\n                    }\n                    int64_t v81 = v80;\n                    int64_t v82 = v72 + 8; // 0x408b32\n                    v72 = v82;\n                    v73 = v81;\n                    while (v71 != v82) {\n                        // 0x408b20\n                        v78 = (int64_t *)v72;\n                        v79 = *v78;\n                        v80 = v73;\n                        if (v79 > v73) {\n                            // 0x408b28\n                            *v78 = v79 - 1;\n                            v80 = *v18;\n                        }\n                        // 0x408b32\n                        v81 = v80;\n                        v82 = v72 + 8;\n                        v72 = v82;\n                        v73 = v81;\n                    }\n                    // 0x408b3b\n                    v74 = (int64_t *)(16 * v81 + a1);\n                    v75 = (int64_t *)(8 * v81 + a6);\n                    v76 = v81;\n                    v77 = 56 * v81 + v4;\n                }\n                uint64_t v83 = v76;\n                int64_t * v84 = v74;\n                function_407df0(*v75, *v84);\n                int64_t v85 = v67; // 0x408b8a\n                if (v67 > v83) {\n                    // 0x408dc2\n                    function_407920(*v84);\n                    v85 = v67 - 1;\n                }\n                int64_t v86 = v17 - 1; // 0x408b77\n                free((int64_t *)*(int64_t *)v77);\n                if (v86 > v83) {\n                    int64_t v87 = 56 * v83 + v4;\n                    int64_t v88 = 8 * v83;\n                    int64_t v89 = v88 + 8;\n                    int64_t v90 = 2 * v88; // 0x408be5\n                    int128_t v91 = __asm_movdqu(*(int128_t *)(v90 + v27)); // 0x408be5\n                    int64_t v92 = v87 + 56; // 0x408beb\n                    int128_t v93 = __asm_movdqu(*(int128_t *)v92); // 0x408bef\n                    int128_t v94 = __asm_movdqu(*(int128_t *)(v87 + 72)); // 0x408bf3\n                    *(int64_t *)(v88 + a6) = *(int64_t *)(v89 + a6);\n                    int128_t v95 = __asm_movdqu(*(int128_t *)(v87 + 88)); // 0x408c00\n                    __asm_movups(*(int128_t *)(v90 + a1), v91);\n                    *(int64_t *)(v87 + 48) = *(int64_t *)(v87 + 104);\n                    __asm_movups(*(int128_t *)v87, v93);\n                    *(int64_t *)(v88 + v5) = *(int64_t *)(v89 + v5);\n                    __asm_movups(*(int128_t *)(v87 + 16), v94);\n                    *(int64_t *)(v88 + v6) = *(int64_t *)(v89 + v6);\n                    __asm_movups(*(int128_t *)(v87 + 32), v95);\n                    while (v70 - 8 != v89) {\n                        // 0x408be0\n                        v87 = v92;\n                        v88 = v89;\n                        v89 = v88 + 8;\n                        v90 = 2 * v88;\n                        v91 = __asm_movdqu(*(int128_t *)(v90 + v27));\n                        v92 = v87 + 56;\n                        v93 = __asm_movdqu(*(int128_t *)v92);\n                        v94 = __asm_movdqu(*(int128_t *)(v87 + 72));\n                        *(int64_t *)(v88 + a6) = *(int64_t *)(v89 + a6);\n                        v95 = __asm_movdqu(*(int128_t *)(v87 + 88));\n                        __asm_movups(*(int128_t *)(v90 + a1), v91);\n                        *(int64_t *)(v87 + 48) = *(int64_t *)(v87 + 104);\n                        __asm_movups(*(int128_t *)v87, v93);\n                        *(int64_t *)(v88 + v5) = *(int64_t *)(v89 + v5);\n                        __asm_movups(*(int128_t *)(v87 + 16), v94);\n                        *(int64_t *)(v88 + v6) = *(int64_t *)(v89 + v6);\n                        __asm_movups(*(int128_t *)(v87 + 32), v95);\n                    }\n                }\n                if (v86 == 0) {\n                    // break -> 0x408cd8\n                    break;\n                }\n                int64_t v96 = v7; // 0x408c4e\n                while (true) {\n                  lab_0x408c50:;\n                    int64_t v97 = v96;\n                    v96 = v97 + 8;\n                    *(int64_t *)v97 = *(int64_t *)v96;\n                    v63 = v86;\n                    v64 = v85;\n                    v65 = v16;\n                    v66 = v13;\n                    if (v70 + v9 != v96) {\n                        goto lab_0x408c50;\n                    } else {\n                        goto lab_0x4088a0;\n                    }\n                }\n            }\n            // 0x408cd8\n            if (!((v16 == 0 | *(char *)&g85 == 0))) {\n                // 0x408cec\n                function_407e70(v19, a4, a5);\n                free((int64_t *)v8);\n            }\n        }\n    }\n    // 0x408d10\n    function_407df0(a4, a5);\n    free((int64_t *)a6);\n    free((int64_t *)v4);\n    free((int64_t *)v7);\n    free((int64_t *)v6);\n    free((int64_t *)v5);\n    return &g122;\n  lab_0x4088e6:\n    // 0x4088e6\n    v13 = v12;\n    v16 = v15;\n    int64_t * v98 = (int64_t *)(v21 + v6); // 0x4088ef\n    int64_t v99; // 0x408640\n    if (*v98 < v23) {\n        int64_t v100 = v23 - 32; // 0x408a30\n        *v22 = v100;\n        v99 = v100;\n        if (v17 != 1) {\n            goto lab_0x408980;\n        } else {\n            // 0x408a47\n            *v18 = v20;\n            // 0x4088a0\n            v14 = v16;\n            v10 = v13;\n            goto lab_0x4088a0_3;\n        }\n    } else {\n        // 0x4088f8\n        v24 = (int64_t *)(v21 + a6);\n        v25 = (int64_t *)(16 * v20 + a1);\n        v26 = 56 * v20 + v4;\n        if ((char)function_4074d0((char)v26, *v24, *v25) == 0) {\n            // break -> 0x408b00\n            goto lab_0x408b00;\n        }\n        int64_t v101 = *(int64_t *)v26 + *(int64_t *)(v26 + 24); // 0x408958\n        *v22 = v101 - 32;\n        *v98 = v101 - 32 * *(int64_t *)(v26 + 16);\n        if (v17 == 1) {\n            // 0x408a47\n            *v18 = v20;\n            // 0x4088a0\n            v14 = v16;\n            v10 = v13;\n            goto lab_0x4088a0_3;\n        } else {\n            // 0x408954\n            v99 = *v22;\n            goto lab_0x408980;\n        }\n    }\n  lab_0x408a87:;\n    int64_t * v102 = (int64_t *)(v23 + 8); // 0x408a87\n    uint64_t v103 = *v102; // 0x408a87\n    int64_t v104 = v11; // 0x408a98\n    int64_t v105 = v103; // 0x408a98\n    int64_t v106 = v8; // 0x408a98\n    if (v103 > v11) {\n        int64_t v107 = v103; // 0x408d68\n        if (v11 != 0) {\n            int64_t v108 = 2 * v11; // 0x408d6d\n            int64_t v109 = v108; // 0x408d73\n            v107 = v108;\n            if (v103 > v108) {\n                int64_t v110 = v109;\n                v107 = v103;\n                while (v110 != 0) {\n                    int64_t v111 = 2 * v110; // 0x408d80\n                    v109 = v111;\n                    v107 = v111;\n                    if (v103 <= v111) {\n                        // break -> 0x408d8d\n                        break;\n                    }\n                    v110 = v109;\n                    v107 = v103;\n                }\n            }\n        }\n        // 0x408d8d\n        free((int64_t *)v8);\n        int64_t v112 = function_411210(v107); // 0x408d9f\n        v8 = v112;\n        v104 = v107;\n        v105 = *v102;\n        v106 = v112;\n    }\n    int64_t v113 = *(int64_t *)v23; // 0x408a9e\n    memcpy((int64_t *)v106, (int64_t *)v113, (int32_t)v105);\n    v15 = v19;\n    v12 = v104;\n    goto lab_0x4088e6;\n  lab_0x408980:;\n    int64_t v114 = 1;\n    int64_t v115 = 1; // 0x408640\n    int64_t v116 = v17; // 0x408640\n    int64_t v117; // 0x408640\n    int64_t v118; // 0x408640\n    uint64_t v119; // 0x4089c4\n    int32_t v120; // 0x4089d7\n    while (true) {\n        // 0x4089c4\n        v117 = v115;\n        v119 = *(int64_t *)(8 * v117 + v7);\n        v120 = function_4082a0(v99, *(int64_t *)(8 * v119 + v5));\n        if (v120 >= 0) {\n            if (v20 < v119 != (v120 == 0)) {\n                // break -> 0x4089b3\n                break;\n            }\n        }\n        // 0x4089db\n        v115 = (v117 + v114) / 2;\n        v116 = v117;\n        v118 = v114;\n        if (v114 >= v117) {\n            // break (via goto) -> 0x4089ea\n            goto lab_0x4089ea;\n        }\n    }\n    int64_t v121 = v117 + 1; // 0x4089b3\n    int64_t v122 = v116; // 0x4089c2\n    v118 = v121;\n    while (v121 < v116) {\n        // 0x4089c4\n        v114 = v121;\n        v115 = (v116 + v121) / 2;\n        v116 = v122;\n        while (true) {\n            // 0x4089c4\n            v117 = v115;\n            v119 = *(int64_t *)(8 * v117 + v7);\n            v120 = function_4082a0(v99, *(int64_t *)(8 * v119 + v5));\n            if (v120 >= 0) {\n                if (v20 < v119 != (v120 == 0)) {\n                    // break -> 0x4089b3\n                    break;\n                }\n            }\n            // 0x4089db\n            v115 = (v117 + v114) / 2;\n            v116 = v117;\n            v118 = v114;\n            if (v114 >= v117) {\n                // break (via goto) -> 0x4089ea\n                goto lab_0x4089ea;\n            }\n        }\n        // 0x4089b3\n        v121 = v117 + 1;\n        v122 = v116;\n        v118 = v121;\n    }\n  lab_0x4089ea:;\n    int64_t v123 = v118;\n    int64_t v124 = v123 - 1; // 0x4089f0\n    if (v124 != 0) {\n        int64_t v125 = v7 + 8; // 0x408a10\n        *(int64_t *)v7 = *(int64_t *)v125;\n        while (v125 != 8 * v123 + v9) {\n            int64_t v126 = v125;\n            v125 = v126 + 8;\n            *(int64_t *)v126 = *(int64_t *)v125;\n        }\n    }\n    // 0x408a21\n    *(int64_t *)(8 * v124 + v7) = v20;\n    // 0x4088a0\n    v14 = v16;\n    v10 = v13;\n    goto lab_0x4088a0_3;\n}\n"
        },
        {
            "funcName": "function_408e10",
            "funcStartAddr": "408e10",
            "funcEndAddr": "408e20",
            "decompiledFuncCode": "int64_t function_408e10(int64_t a1) {\n    int32_t fd = a1; // 0x408e11\n    int64_t fd2; // 0x408e10\n    dup2(fd, (int32_t)fd2);\n    return close(fd);\n}\n"
        },
        {
            "funcName": "function_408e20",
            "funcStartAddr": "408e20",
            "funcEndAddr": "409030",
            "decompiledFuncCode": "int64_t function_408e20(int64_t a1, uint64_t a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = 8 * a2; // 0x408e3e\n    if (v1 < 0) {\n        // 0x408ff0\n        function_411460(v1);\n        // UNREACHABLE\n    }\n    if (a2 >= 0x2000000000000000) {\n        // 0x408ff0\n        function_411460(v1);\n        // UNREACHABLE\n    }\n    int64_t v2 = function_411210(v1); // 0x408e5a\n    *a3 = v2;\n    if (a2 == 0) {\n        // 0x408f08\n        return 0;\n    }\n    int64_t v3 = 0; // 0x408e8f\n    int64_t v4 = a1; // 0x408e20\n    int64_t v5; // 0x408e20\n    int64_t result; // 0x408e20\n    int32_t fd3; // 0x408e20\n    while (true) {\n      lab_0x408e9c:\n        // 0x408e9c\n        v5 = v4;\n        result = v3;\n        int64_t v6 = *(int64_t *)(v5 + 8); // 0x408e9c\n        if (v6 == 0) {\n            goto lab_0x408e78;\n        } else {\n            // 0x408ea5\n            if (*(char *)(v6 + 12) == 0) {\n                goto lab_0x408e78;\n            } else {\n                int32_t fd = open((char *)(v6 + 13), O_RDONLY); // 0x408ec0\n                if (fd < 0) {\n                    // 0x408f00\n                    *(int64_t *)(8 * result + v2) = 0;\n                    return result;\n                }\n                // 0x408ecc\n                int32_t fd2; // bp-64, 0x408e20\n                int32_t v7 = function_407a30((int64_t *)&fd2, 9); // 0x408edb\n                if (v7 == -1) {\n                    int32_t * err_num = __errno_location(); // 0x408ee0\n                    if (*err_num != 24) {\n                        // 0x408ff5\n                        function_40f630(4, (int64_t)g82);\n                        error(2, *err_num, dcgettext(NULL, \"couldn't create process for %s -d\", 5));\n                        return &g122;\n                    }\n                    // 0x408ef1\n                    close(fd);\n                    *err_num = 24;\n                    // 0x408f00\n                    *(int64_t *)(8 * result + v2) = 0;\n                    return result;\n                }\n                if (v7 == 0) {\n                    // 0x408f9c\n                    close(fd2);\n                    if (fd == 0) {\n                        goto lab_0x408fb4;\n                    } else {\n                        // 0x408faa\n                        function_408e10((int64_t)fd);\n                        goto lab_0x408fb4;\n                    }\n                }\n                // 0x408f24\n                *(int32_t *)(v6 + 8) = v7;\n                int64_t v8; // 0x408e20\n                function_406190(v6, 9, (int64_t)a3, a4, v8);\n                close(fd);\n                close(fd3);\n                struct _IO_FILE * v9 = fdopen(fd2, \"r\"); // 0x408f4f\n                if (v9 == NULL) {\n                    int32_t * v10 = __errno_location(); // 0x408f77\n                    close(fd2);\n                    *(int64_t *)(8 * result + v2) = 0;\n                    return result;\n                }\n                // 0x408f59\n                *(int64_t *)(8 * result + v2) = (int64_t)v9;\n                goto lab_0x408e8f;\n            }\n        }\n    }\n  lab_0x408f08_3:\n    // 0x408f08\n    return result;\n  lab_0x408e78:;\n    int64_t v11 = function_407cd0(*(int64_t *)v5, (int64_t *)\"r\"); // 0x408e81\n    *(int64_t *)(8 * result + v2) = v11;\n    if (v11 == 0) {\n        return result2;\n    }\n    goto lab_0x408e8f;\n  lab_0x408e8f:\n    // 0x408e8f\n    v3 = result + 1;\n    v4 = v5 + 16;\n    if (v3 == a2) {\n        // break -> 0x408f08\n        goto lab_0x408f08_3;\n    }\n    goto lab_0x408e9c;\n  lab_0x408fb4:\n    if (fd3 == 1) {\n        goto lab_0x408fc7;\n    } else {\n        // 0x408fbd\n        function_408e10((int64_t)fd3);\n        goto lab_0x408fc7;\n    }\n  lab_0x408fc7:;\n    char * file = g82; // 0x408fc7\n    execlp(file, file);\n    int32_t v12 = *__errno_location(); // 0x408fe9\n    function_4060d0(v12, \"couldn't execute compress program (with -d)\");\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409030",
            "funcStartAddr": "409030",
            "funcEndAddr": "4090c0",
            "decompiledFuncCode": "int64_t function_409030(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = (int64_t)a3;\n    int64_t v2; // bp-64, 0x409030\n    uint64_t result = function_408e20(a1, v1, &v2, a4); // 0x409055\n    if (result < v1 != result < 2) {\n        // 0x409068\n        function_408640(a1, a2, result, a4, a5, v2);\n        return result;\n    }\n    int64_t v3 = *(int64_t *)(16 * result + a1); // 0x4090a3\n    return function_405dd0((int64_t)dcgettext(NULL, \"open failed\", 5), (int64_t *)v3);\n}\n"
        },
        {
            "funcName": "function_4090c0",
            "funcStartAddr": "4090c0",
            "funcEndAddr": "409330",
            "decompiledFuncCode": "int64_t function_4090c0(int64_t a1, int32_t a2) {\n    int64_t str = *(int64_t *)(g90 + 8 * g59); // 0x4090e6\n    int32_t len = strlen((char *)str); // 0x4090ed\n    int64_t v1 = len; // 0x4090ed\n    int64_t result = function_411210(v1 + 32 & -8); // 0x4090fd\n    int64_t v2 = result + 13; // 0x409108\n    int64_t * v3 = (int64_t *)v2; // 0x409112\n    memcpy(v3, (int64_t *)str, len);\n    *(int64_t *)(v2 + v1) = 0x58585874726f732f;\n    *(int32_t *)(result + 21 + v1) = 0x585858;\n    int64_t * v4 = (int64_t *)result; // 0x409135\n    *v4 = 0;\n    int64_t v5 = g59 + 1; // 0x40913c\n    g59 = v5 != (int64_t)g89 ? v5 : 0;\n    int64_t set; // bp-192, 0x4090c0\n    int64_t v6 = &set; // 0x40915b\n    int32_t v7 = pthread_sigmask(SIG_BLOCK, (struct _TYPEDEF___sigset_t *)&g73, (struct _TYPEDEF___sigset_t *)&set); // 0x409167\n    int32_t v8 = v7 == 0; // bp-200, 0x409176\n    int64_t v9 = function_410680(v2, 0x80000); // 0x40917b\n    int32_t * err_num = __errno_location(); // 0x409183\n    int32_t fd = v9; // 0x40918b\n    int64_t v10; // 0x4090c0\n    if (fd < 0) {\n        int32_t v11 = *err_num; // 0x409235\n        if (v7 == 0) {\n            // 0x409278\n            function_407880((int64_t *)&v8, 0x80000, v6);\n            *err_num = v11;\n        }\n        // 0x409239\n        v10 = str;\n        if (v11 == 24) {\n            // 0x409242\n            v10 = str;\n            if ((char)a2 == 1) {\n                // 0x40924d\n                free(v4);\n                // 0x4091f3\n                return 0;\n            }\n        }\n    } else {\n        // 0x409194\n        *(int64_t *)&g29 = result;\n        *g29 = result;\n        int64_t v12 = str; // 0x4091aa\n        if (v7 == 0) {\n            uint32_t v13 = *err_num; // 0x409260\n            function_407880((int64_t *)&v8, 0x80000, v6);\n            *err_num = v13;\n            v12 = v13;\n        }\n        int64_t v14 = v9 & 0xffffffff; // 0x409180\n        *(char *)(result + 12) = 0;\n        int64_t fd3 = v14; // 0x4091bc\n        if (g82 != NULL) {\n            int32_t v15 = function_407a30((int64_t *)&v8, 4); // 0x4091cd\n            *(int32_t *)(result + 8) = v15;\n            int32_t fd2; // 0x4090c0\n            if (v15 >= 0 == (v15 != 0)) {\n                // 0x409210\n                close(fd);\n                close(0x1000000 * v8 >> 24);\n                int64_t v16; // 0x4090c0\n                function_406190(result, 4, v6, v16, v16);\n                fd3 = fd2;\n            } else {\n                // 0x4091d4\n                fd3 = v14;\n                if (v15 == 0) {\n                    // 0x409287\n                    close(fd2);\n                    if (fd != 1) {\n                        // 0x409296\n                        function_408e10(v14);\n                    }\n                    int32_t v17 = 0x1000000 * v8;\n                    if (v17 != 0) {\n                        // 0x4092ab\n                        function_408e10((int64_t)(v17 >> 24));\n                    }\n                    char * file = g82; // 0x4092b2\n                    execlp(file, file);\n                    function_4060d0(*err_num, \"couldn't execute compress program\");\n                    // UNREACHABLE\n                }\n            }\n        }\n        struct _IO_FILE * v18 = fdopen((int32_t)fd3, \"w\"); // 0x4091e2\n        *(int64_t *)a1 = (int64_t)v18;\n        if (v18 != NULL) {\n            // 0x4091f3\n            return result;\n        }\n        // 0x4092d2\n        function_405dd0((int64_t)dcgettext(NULL, \"couldn't create temporary file\", 5), v3);\n        v10 = v12;\n    }\n    // 0x4092ee\n    function_40f630(4, v10);\n    error(2, *err_num, dcgettext(NULL, \"cannot create temporary file in %s\", 5));\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_409330",
            "funcStartAddr": "409330",
            "funcEndAddr": "409871",
            "decompiledFuncCode": "int64_t function_409330(int64_t a1, int32_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = a2;\n    int64_t v2 = (int64_t)*(int32_t *)&g30; // 0x40934f\n    int64_t v3 = a3; // 0x409358\n    int64_t v4 = v2; // 0x409358\n    int64_t v5 = v1; // 0x409358\n    int64_t v6 = v2; // 0x409358\n    int64_t v7 = v1; // 0x409358\n    int64_t v8 = a3; // 0x409358\n    if (v2 >= a3) {\n        goto lab_0x40944a;\n    } else {\n        goto lab_0x409362;\n    }\n  lab_0x40964e:;\n    // 0x40964e\n    int64_t v9; // 0x409330\n    int64_t v10; // 0x409330\n    int64_t v11; // 0x409330\n    int64_t v12; // 0x409330\n    int64_t v13; // 0x409330\n    int64_t v14; // 0x409330\n    if (v11 == 0) {\n        // 0x409774\n        int64_t v15; // bp-352, 0x409330\n        int64_t v16 = function_4090c0((int64_t)&v15, 0); // 0x40977b\n        int64_t v17 = v16 + 13; // 0x40978a\n        function_409030(v10, 0, 1, v15, v17);\n        v13 = v15;\n        v12 = v16;\n        v14 = v17;\n    } else {\n        // 0x409657\n        v13 = v9;\n        v12 = v11;\n        v14 = v11 + 13;\n    }\n    // 0x40965b\n    int64_t * v18; // 0x409330\n    *v18 = v14;\n    *(int64_t *)(v10 + 8) = v12;\n    int64_t v19 = v13; // 0x409662\n    int64_t v20; // 0x409330\n    int64_t v21 = v20; // 0x409662\n    int64_t v22 = v12; // 0x409662\n    goto lab_0x4094c3;\n  lab_0x4094c3:;\n    // 0x4094c3\n    int64_t v23; // 0x409330\n    int64_t v24 = v23 + 1; // 0x4094c3\n    int64_t v25 = v24; // 0x4094cf\n    int64_t v26 = v21; // 0x4094cf\n    int64_t v27 = v10 + 16; // 0x4094cf\n    int64_t v28 = v22; // 0x4094cf\n    int64_t v29 = v19; // 0x4094cf\n    int64_t v30 = v22; // 0x4094cf\n    int64_t v31; // 0x409330\n    if (v24 == v31) {\n        goto lab_0x40954d_3;\n    }\n    goto lab_0x4094d1;\n  lab_0x40944a:\n    // 0x40944a\n    v31 = v8;\n    int64_t v55 = v7;\n    int64_t v53; // 0x409330\n    int64_t v56; // 0x409330\n    int64_t v57; // 0x409330\n    int64_t v58; // 0x409330\n    int64_t v59; // 0x409330\n    int64_t v60; // 0x409330\n    int64_t v61; // 0x409330\n    int64_t v62; // 0x409330\n    int64_t v63; // 0x409330\n    int64_t v52; // bp-200, 0x409330\n    int64_t v49; // bp-344, 0x409330\n    int64_t v64; // 0x409330\n    int64_t v65; // 0x409330\n    if (v31 > v55) {\n        int64_t v66 = 16 * v55; // 0x409461\n        bool v67; // 0x409330\n        int64_t v44 = v67 ? -1 : 1; // 0x4094e1\n        v25 = v55;\n        v26 = 0;\n        v27 = v66 + a1;\n        v28 = 0;\n        int64_t v40; // 0x4094e1\n        uint64_t v48; // 0x4094e6\n        while (true) {\n          lab_0x4094d1:\n            // 0x4094d1\n            v11 = v28;\n            int64_t v32 = v25; // 0x40953f\n            int64_t v33 = v26; // 0x409330\n            int64_t v34 = v27; // 0x409330\n            int64_t v35; // 0x409330\n            while (true) {\n                // 0x4094d1\n                v10 = v34;\n                v35 = v33;\n                v23 = v32;\n                v18 = (int64_t *)v10;\n                int64_t str2 = *v18; // 0x4094d1\n                int64_t v36 = str2;\n                int64_t v37 = (int64_t)&g19;\n                unsigned char v38 = *(char *)v36; // 0x4094e1\n                char v39 = *(char *)v37; // 0x4094e1\n                v40 = 1;\n                char v41 = v39; // 0x4094e1\n                bool v42 = false; // 0x4094e1\n                while (v38 == v39) {\n                    int64_t v43 = v37 + v44; // 0x4094e1\n                    int64_t v45 = v36 + v44; // 0x4094e1\n                    int64_t v46 = v40; // 0x4094e1\n                    v41 = v38;\n                    v42 = true;\n                    if (v40 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v36 = v45;\n                    v37 = v43;\n                    v38 = *(char *)v36;\n                    v39 = *(char *)v37;\n                    v40 = v46 - 1;\n                    v41 = v39;\n                    v42 = false;\n                }\n                unsigned char v47 = v41;\n                v48 = (int64_t)!((v38 < v47 | v42)) - (int64_t)(v38 < v47);\n                if (str != 0) {\n                    // 0x4094f2\n                    if ((int32_t)v48 != 0 == strcmp((char *)str, (char *)str2) == 0) {\n                        // break -> 0x40964e\n                        break;\n                    }\n                }\n                if ((char)v35 == 0) {\n                    // 0x409667\n                    if (__fxstat(1, 1, (struct stat *)&v49) != 0) {\n                        // break (via goto) -> 0x40954d\n                        goto lab_0x40954d_2;\n                    }\n                }\n                if ((int32_t)v48 == 0) {\n                    int64_t v50 = v48 % 256 | v40 & -256; // 0x4094e6\n                    int32_t v51 = __fxstat(1, 0, (struct stat *)&v52); // 0x4094a1\n                    v19 = v50;\n                    v21 = 1;\n                    v22 = v11;\n                    v53 = v50;\n                    if (true == v51 == 0) {\n                        goto lab_0x40963b;\n                    } else {\n                        goto lab_0x4094c3;\n                    }\n                }\n                // 0x40951c\n                if (__xstat(1, (char *)*v18, (struct stat *)&v52) == 0) {\n                    int64_t v54 = v48 % 256 | v40 & -256; // 0x4094e6\n                    v19 = v54;\n                    v21 = 1;\n                    v22 = v11;\n                    v53 = v54;\n                    goto lab_0x40963b;\n                }\n                // 0x40953f\n                v32 = v23 + 1;\n                v33 = 1;\n                v34 = v10 + 16;\n                if (v32 == v31) {\n                    // break (via goto) -> 0x40954d\n                    goto lab_0x40954d_2;\n                }\n            }\n            // 0x40964e\n            v9 = v48 % 256 | v40 & -256;\n            v20 = v35;\n            goto lab_0x40964e;\n        }\n      lab_0x40954d_2:\n        // 0x40954d\n        v29 = v48 % 256 | v40 & -256;\n        v30 = v11;\n      lab_0x40954d_3:\n        // 0x40954d\n        v65 = v31;\n        v63 = v29;\n        v62 = str;\n        v60 = v66;\n        v56 = 0x100000000 * v55 >> 32;\n        v58 = v30;\n    } else {\n        // 0x4097ee\n        v65 = v64;\n        v63 = v6;\n        v62 = v61;\n        v60 = v59;\n        v56 = v55;\n        v58 = v57;\n    }\n    int64_t v68 = &v52;\n    int64_t v69 = v65; // 0x409330\n    int64_t v70 = v63; // 0x409330\n    int64_t v71 = v62; // 0x409330\n    int64_t v72 = v60; // 0x409330\n    int64_t v73 = v56; // 0x409330\n    int64_t v74 = v31; // 0x409330\n    int64_t v75 = v58; // 0x409330\n    int64_t v76; // 0x409330\n    int64_t v77; // 0x409330\n    int64_t v78; // 0x409330\n    int64_t v79; // 0x409330\n    int64_t v80; // 0x409330\n    int64_t v81; // 0x409330\n    int64_t v82; // 0x409330\n    int64_t v83; // 0x409330\n    int64_t v84; // 0x409330\n    int64_t v85; // 0x409330\n    int64_t v86; // 0x409330\n    int64_t v87; // 0x409330\n    int64_t v88; // 0x40969a\n    while (true) {\n        // 0x409560\n        v79 = v74;\n        v77 = v73;\n        int64_t v89 = v70;\n        int64_t v90 = function_408e20(a1, v79, (int64_t *)(struct stat *)&v49, v89); // 0x40956b\n        if (v79 == v90) {\n            // 0x409690\n            v88 = function_407cd0(str, (int64_t *)\"w\");\n            if (v88 != 0) {\n                // break -> 0x4097c1\n                break;\n            }\n            // 0x4096a8\n            if (v79 < 3 | *__errno_location() != 24) {\n                // 0x4096bc\n                function_405dd0((int64_t)dcgettext(NULL, \"open failed\", 5), (int64_t *)str);\n                v76 = v68;\n                v87 = v69;\n                v84 = v89;\n                v85 = 5;\n                v83 = v79;\n                v82 = v71;\n                v86 = str;\n                v81 = v72;\n                v78 = v77;\n                v80 = v75;\n                goto lab_0x4096e0;\n            }\n        } else {\n            if (v90 < 3) {\n                int64_t v91 = *(int64_t *)(16 * v90 + a1); // 0x40980d\n                int64_t v92 = (int64_t)dcgettext(NULL, \"open failed\", 5); // 0x409811\n                int64_t * v93 = (int64_t *)v91; // 0x40981c\n                function_405dd0(v92, v93);\n                int64_t v94 = *(int64_t *)(v91 + 8); // 0x409830\n                int64_t result = *(int64_t *)(v91 + 24); // 0x409834\n                if (*v93 == *(int64_t *)(v91 + 16)) {\n                    if (v94 == result || *(int64_t *)(v91 + 40) != 0) {\n                        // 0x409857\n                        return result;\n                    }\n                    // 0x40986c\n                    return function_406320(v92, v91);\n                }\n                if (v94 != result || *(int64_t *)(v91 + 48) == 0) {\n                    // 0x409846\n                    return function_406320(v92, v91);\n                }\n                // 0x409857\n                return result;\n            }\n        }\n        int64_t v95 = a1 - 16 + 16 * v90;\n        uint64_t v96 = v90 - 1; // 0x40959d\n        int64_t * v97 = (int64_t *)v95;\n        function_407df0(*(int64_t *)(v49 + 8 * v96), *v97);\n        int64_t v98 = function_4090c0(v68, (int32_t)(v96 >= 3)); // 0x4095c6\n        int64_t v99 = v96; // 0x4095ce\n        int64_t v100 = v95 - 16; // 0x4095ce\n        while (v98 == 0) {\n            // 0x409598\n            v95 = v100;\n            v96 = v99 - 1;\n            v97 = (int64_t *)v95;\n            function_407df0(*(int64_t *)(v49 + 8 * v96), *v97);\n            v98 = function_4090c0(v68, (int32_t)(v96 >= 3));\n            v99 = v96;\n            v100 = v95 - 16;\n        }\n        int64_t v101 = v98 + 13; // 0x4095d6\n        int64_t v102 = v77 > v96 ? v96 : v77; // 0x4095df\n        int64_t v103 = v79 - v96; // 0x4095f9\n        function_408640(a1, v102, v96, v52, v101, v49);\n        *(int64_t *)a1 = v101;\n        *(int64_t *)(a1 + 8) = v98;\n        memmove((int64_t *)(a1 + 16), v97, 16 * (int32_t)v103);\n        v69 = v101;\n        v70 = v52;\n        v71 = v95;\n        v72 = v49;\n        v73 = v77 + 1 - v102;\n        v74 = v103 + 1;\n        v75 = v102;\n    }\n    // 0x4097c1\n    return function_408640(a1, v77, v79, v88, str, v49);\n  lab_0x409362:;\n    int64_t v104 = v5;\n    int64_t v105 = v3;\n    int64_t v106 = v4; // 0x40936a\n    int64_t v107 = v4; // 0x40936a\n    int64_t v108 = 0; // 0x40936a\n    int64_t v109 = 0; // 0x40936a\n    int64_t v110 = 0; // 0x40936a\n    int64_t v111 = v105; // 0x40936a\n    int64_t v112 = a1; // 0x40936a\n    int64_t v113 = v104; // 0x40936a\n    int64_t v114 = a1; // 0x40936a\n    if (v4 <= v105) {\n        int64_t v115 = 0; // 0x409330\n        int64_t v116 = 0; // 0x409330\n        uint64_t v117 = v104;\n        int64_t v118 = function_4090c0((int64_t)&v52, 0); // 0x40937a\n        uint32_t v119 = *(int32_t *)&g30; // 0x40937f\n        uint64_t v120 = (int64_t)v119; // 0x40937f\n        int64_t v121 = v118 + 13; // 0x40938b\n        int64_t v122 = v117 < v120 ? v117 : v120; // 0x4093a0\n        uint64_t v123 = function_409030(16 * v115 + a1, v122, v119, v52, v121); // 0x4093ab\n        uint64_t v124 = (int64_t)*(int32_t *)&g30; // 0x4093b7\n        int64_t v125 = v123 + v115; // 0x4093c4\n        int64_t v126 = v105 - v125; // 0x4093c7\n        int64_t v127 = v117 - (v123 > v117 ? v117 : v123); // 0x4093ca\n        int64_t v128 = v116 + 1; // 0x4093d0\n        int64_t v129 = 16 * v116; // 0x4093d4\n        *(int64_t *)(v129 + a1) = v121;\n        *(int64_t *)(a1 + 8 + v129) = v118;\n        v115 = v125;\n        v116 = v128;\n        while (v126 >= v124) {\n            // 0x409370\n            v117 = v127;\n            v118 = function_4090c0((int64_t)&v52, 0);\n            v119 = *(int32_t *)&g30;\n            v120 = (int64_t)v119;\n            v121 = v118 + 13;\n            v122 = v117 < v120 ? v117 : v120;\n            v123 = function_409030(16 * v115 + a1, v122, v119, v52, v121);\n            v124 = (int64_t)*(int32_t *)&g30;\n            v125 = v123 + v115;\n            v126 = v105 - v125;\n            v127 = v117 - (v123 > v117 ? v117 : v123);\n            v128 = v116 + 1;\n            v129 = 16 * v116;\n            *(int64_t *)(v129 + a1) = v121;\n            *(int64_t *)(a1 + 8 + v129) = v118;\n            v115 = v125;\n            v116 = v128;\n        }\n        int64_t v130 = v128 % v124;\n        v106 = v124 - v130;\n        v107 = v124;\n        v108 = v130;\n        v109 = v125;\n        v110 = v128;\n        v111 = v126;\n        v112 = 16 * v125 + a1;\n        v113 = v127;\n        v114 = 16 * v128 + a1;\n    }\n    int64_t v131 = v114;\n    int64_t v132 = v113;\n    int64_t v133 = v112;\n    int64_t v134 = v111;\n    int64_t v135 = v110;\n    int64_t v136 = v109;\n    int64_t v137 = v105; // 0x40940b\n    int64_t v138 = v136; // 0x40940b\n    int64_t v139 = v135; // 0x40940b\n    int64_t v140 = v133; // 0x40940b\n    int64_t v141 = v132; // 0x40940b\n    int64_t v142 = v131; // 0x40940b\n    if (v134 > v106) {\n        // 0x409408\n        v76 = &v52;\n        v87 = v105;\n        v84 = v107;\n        v85 = v108;\n        v83 = v136;\n        v82 = v135;\n        v86 = v134;\n        v81 = v133;\n        v78 = v132;\n        v80 = v131;\n        goto lab_0x4096e0;\n    } else {\n        goto lab_0x409411;\n    }\n  lab_0x409411:;\n    int64_t v143 = v141 + v139; // 0x40941b\n    int64_t v144 = v139 - v138; // 0x40941e\n    int64_t v145 = v144 + v137; // 0x409424\n    memmove((int64_t *)v142, (int64_t *)v140, 16 * (int32_t)(v137 - v138));\n    int64_t v146 = (int64_t)*(int32_t *)&g30; // 0x409433\n    v3 = v145;\n    v4 = v146;\n    v5 = v143;\n    v64 = v145;\n    v6 = v146;\n    v61 = v144;\n    v59 = v140;\n    v7 = v143;\n    v8 = v145;\n    v57 = v142;\n    if (v145 > v146) {\n        goto lab_0x409362;\n    } else {\n        goto lab_0x40944a;\n    }\n  lab_0x4096e0:;\n    uint64_t v147 = v78;\n    uint64_t v148 = 1 - v84 + v85 + v86; // 0x4096f4\n    int64_t v149 = function_4090c0(v76, 0); // 0x4096fc\n    int64_t v150 = v149 + 13; // 0x40970e\n    int64_t v151 = v148 > v147 ? v147 : v148; // 0x40972d\n    uint64_t v152 = function_409030(v81, v151, (int32_t)v148, v52, v150); // 0x409731\n    int64_t v153 = v82 + 1; // 0x40974a\n    int64_t v154 = v152 + v83; // 0x40974e\n    *(int64_t *)v80 = v150;\n    *(int64_t *)(v80 + 8) = v149;\n    v137 = v87;\n    v138 = v154;\n    v139 = v153;\n    v140 = 16 * v154 + a1;\n    v141 = v147 - (v152 > v147 ? v147 : v152);\n    v142 = 16 * v153 + a1;\n    goto lab_0x409411;\n  lab_0x40963b:\n    // 0x40963b\n    v19 = v53;\n    v21 = 1;\n    v22 = v11;\n    v9 = v53;\n    v20 = 1;\n    if (v52 != v49) {\n        goto lab_0x4094c3;\n    } else {\n        goto lab_0x40964e;\n    }\n}\n"
        },
        {
            "funcName": "function_409880",
            "funcStartAddr": "409880",
            "funcEndAddr": "409fdc",
            "decompiledFuncCode": "int64_t function_409880(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t result) {\n    int64_t * v1 = (int64_t *)(a4 + 40); // 0x4098a3\n    int64_t v2 = *v1; // 0x4098a3\n    int64_t * v3 = (int64_t *)(a4 + 48); // 0x4098a7\n    int64_t v4 = *v3; // 0x4098a7\n    int64_t thread_func_arg = a1; // bp-120, 0x4098c1\n    int64_t v5 = v4; // 0x4098ef\n    int64_t v6 = v2; // 0x4098ef\n    if (a2 >= 2 && v4 + v2 >= 0x20000) {\n        // 0x409f08\n        int32_t thread; // bp-128, 0x409880\n        int32_t v7 = pthread_create(&thread, NULL, (int64_t * (*)(int64_t *))0x409fe0, &thread_func_arg); // 0x409f19\n        v6 = *v1;\n        if (v7 == 0) {\n            // 0x409f70\n            function_409880(a1 - 32 * v6, a2 % 2, a3, *(int64_t *)(a4 + 72), a5, a6, result);\n            pthread_join(thread, NULL);\n            // 0x409ed5\n            return result;\n        }\n        // 0x409f27\n        v5 = *v3;\n    }\n    int64_t v8 = 32 * v6; // 0x409909\n    int64_t v9 = a1 - 32 * a3; // 0x409914\n    int64_t v10 = a1 - v8; // 0x409917\n    if (v5 >= 2) {\n        // 0x409922\n        function_408370(v10, v5, v9 - 32 * v6 / 2, 0);\n    }\n    if (v6 >= 2) {\n        // 0x409970\n        function_408370(a1, v6, v9, 0);\n    }\n    // 0x409994\n    *(int64_t *)a4 = a1;\n    *(int64_t *)(a4 + 8) = v10;\n    *(int64_t *)(a4 + 16) = v10;\n    *(int64_t *)(a4 + 24) = a1 - 32 * v5 - v8;\n    function_406320(a5, a4);\n    int64_t * mutex = (int64_t *)(a5 + 8); // 0x4099d5\n    int64_t v11 = v6; // 0x4099ca\n    int64_t v12; // 0x409880\n    int64_t * v13; // 0x409880\n    int64_t v14; // 0x409880\n    int64_t v15; // 0x409880\n    int64_t v16; // 0x409880\n    int64_t v17; // 0x409880\n    int64_t v18; // 0x409880\n    int64_t v19; // 0x409880\n    int64_t v20; // 0x409880\n    int64_t v21; // 0x409880\n    int64_t v22; // 0x409880\n    int64_t v23; // 0x409880\n    int64_t v24; // 0x409880\n    int64_t v25; // 0x409880\n    int64_t v26; // 0x409880\n    int64_t v27; // 0x409880\n    int64_t v28; // 0x409880\n    int64_t v29; // 0x409880\n    int64_t v30; // 0x409880\n    int64_t v31; // 0x409880\n    int64_t v32; // 0x409880\n    int64_t v33; // 0x409880\n    int64_t v34; // 0x409880\n    int64_t v35; // 0x409880\n    int64_t v36; // 0x409880\n    int64_t v37; // 0x409880\n    int64_t v38; // 0x409880\n    int64_t v39; // 0x409880\n    int64_t v40; // 0x409880\n    int64_t v41; // 0x409880\n    int64_t v42; // 0x409880\n    int64_t v43; // 0x409880\n    int64_t v44; // 0x409880\n    int64_t v45; // 0x409880\n    int64_t v46; // 0x409880\n    int64_t * mutex2; // 0x409880\n    int32_t * v47; // 0x409a1b\n    int64_t * v48; // 0x409a33\n    int64_t v49; // 0x409a33\n    int64_t * v50; // 0x409a36\n    int64_t v51; // 0x409a36\n    int64_t * v52; // 0x409cb7\n    int64_t * v53; // 0x409a4a\n    int64_t * v54; // 0x409880\n    int64_t v55; // 0x409cbd\n    while (true) {\n      lab_0x4099d0:\n        // 0x4099d0\n        v23 = v11;\n        pthread_mutex_lock(mutex);\n        int64_t v56 = function_40d190(v23); // 0x4099f3\n        int64_t v57 = v56; // 0x4099fb\n        if (v56 == 0) {\n            pthread_cond_wait((int64_t *)(a5 + 48), mutex);\n            int64_t v58 = function_40d190(v23); // 0x4099f3\n            v57 = v58;\n            while (v58 == 0) {\n                // 0x4099e0\n                pthread_cond_wait((int64_t *)(a5 + 48), mutex);\n                v58 = function_40d190(v23);\n                v57 = v58;\n            }\n        }\n        // 0x4099fd\n        v12 = v57;\n        pthread_mutex_unlock(mutex);\n        mutex2 = (int64_t *)(v12 + 88);\n        pthread_mutex_lock(mutex2);\n        v47 = (int32_t *)(v12 + 80);\n        uint32_t v59 = *v47; // 0x409a1b\n        *(char *)(v12 + 84) = 0;\n        if (v59 == 0) {\n            // break -> 0x409ec0\n            break;\n        }\n        // 0x409a2a\n        v48 = (int64_t *)v12;\n        v49 = *v48;\n        v50 = (int64_t *)(v12 + 8);\n        v51 = *v50;\n        int64_t v60 = (a3 >> (2 * (int64_t)v59 + 2 & 62)) + 1; // 0x409a3d\n        if (v59 == 1) {\n            // 0x409cb7\n            v52 = (int64_t *)(v12 + 16);\n            v46 = v51;\n            v38 = v49;\n            v21 = v60;\n            if (*v52 == v49) {\n                goto lab_0x409d00;\n            } else {\n                // 0x409cbd\n                v54 = (int64_t *)(v12 + 24);\n                v45 = v51;\n                int64_t v61 = v49;\n                int64_t v62 = v60;\n                v55 = *v54;\n                while (v55 != v45) {\n                    if (v62 == 0) {\n                        // 0x409e38\n                        v35 = v49 - v61 >> 5;\n                        v28 = v23;\n                        v22 = -1;\n                        if (*(int64_t *)(v12 + 48) != v51 - v45 >> 5) {\n                            goto lab_0x409d61;\n                        } else {\n                            goto lab_0x409e7a;\n                        }\n                    }\n                    int32_t v63 = function_4082a0(v61 - 32, v45 - 32); // 0x409cd9\n                    if (v63 >= 0 == (v63 != 0)) {\n                        int64_t v64 = *v50 - 32; // 0x409c9f\n                        *v50 = v64;\n                        function_4085d0(v64, a6, result);\n                    } else {\n                        int64_t v65 = *v48 - 32; // 0x409ceb\n                        *v48 = v65;\n                        function_4085d0(v65, a6, result);\n                    }\n                    int64_t v66 = *v48; // 0x409cac\n                    int64_t v67 = *v50; // 0x409caf\n                    int64_t v68 = v62 - 1; // 0x409cb3\n                    v46 = v67;\n                    v38 = v66;\n                    v21 = v68;\n                    if (*v52 == v66) {\n                        goto lab_0x409d00;\n                    }\n                    v45 = v67;\n                    v61 = v66;\n                    v62 = v68;\n                    v55 = *v54;\n                }\n                int64_t * v69 = (int64_t *)(v12 + 48);\n                int64_t v70 = v51 - v45 >> 5; // 0x409d50\n                int64_t v71 = v49 - v61 >> 5; // 0x409d54\n                v35 = v71;\n                v28 = v70;\n                v22 = v62;\n                if (v70 == *v69) {\n                    // 0x409f38\n                    if (v62 == 0) {\n                        // 0x409fd0\n                        v13 = v69;\n                        v33 = v71;\n                        v41 = v70;\n                        v11 = -1;\n                        v30 = v70;\n                        v17 = *(int64_t *)(v12 + 40);\n                        goto lab_0x409b77;\n                    } else {\n                        goto lab_0x409e7a;\n                    }\n                } else {\n                    goto lab_0x409d61;\n                }\n            }\n        } else {\n            // 0x409a4a\n            v53 = (int64_t *)(v12 + 32);\n            int64_t v72 = *(int64_t *)*v53; // 0x409a54\n            int64_t * v73 = (int64_t *)(v12 + 16); // 0x409a86\n            int64_t v74 = *v73; // 0x409a86\n            v43 = v51;\n            v37 = v49;\n            v26 = v72;\n            v19 = v60;\n            if (v74 == v49) {\n                goto lab_0x409bb8;\n            } else {\n                int64_t v75 = v51;\n                v36 = v49;\n                v25 = v72;\n                int64_t v76 = v60;\n                v14 = v74;\n                while (*(int64_t *)(v12 + 24) != v75) {\n                    if (v76 == 0) {\n                        int64_t v77 = *(int64_t *)(v12 + 48); // 0x409aee\n                        int64_t v78 = *(int64_t *)(v12 + 40); // 0x409af2\n                        int64_t v79 = v51 - v75 >> 5; // 0x409b03\n                        v39 = v79;\n                        v44 = -2;\n                        v15 = v78;\n                        v42 = v75;\n                        v24 = v25;\n                        v34 = v49 - v36 >> 5;\n                        v31 = v77;\n                        v18 = v78;\n                        v20 = -1;\n                        if (v77 != v79) {\n                            goto lab_0x409bdd;\n                        } else {\n                            goto lab_0x409b1b;\n                        }\n                    }\n                    int64_t v80 = v25 - 32; // 0x409ab9\n                    int32_t v81 = function_4082a0(v36 - 32, v75 - 32); // 0x409abd\n                    int64_t v82; // 0x409880\n                    int64_t v83; // 0x409880\n                    if (v81 >= 0 == (v81 != 0)) {\n                        int64_t v84 = *v50; // 0x409a60\n                        int64_t v85 = v84 - 32; // 0x409a67\n                        int128_t v86 = __asm_movdqu(*(int128_t *)v85); // 0x409a67\n                        *v50 = v85;\n                        __asm_movups(*(int128_t *)v80, v86);\n                        __asm_movups(*(int128_t *)(v25 - 16), __asm_movdqu(*(int128_t *)(v84 - 16)));\n                        v83 = v85;\n                        v82 = *v48;\n                    } else {\n                        int64_t v87 = *v48; // 0x409ac1\n                        int64_t v88 = v87 - 32; // 0x409ac8\n                        int128_t v89 = __asm_movdqu(*(int128_t *)v88); // 0x409ac8\n                        *v48 = v88;\n                        __asm_movups(*(int128_t *)v80, v89);\n                        __asm_movups(*(int128_t *)(v25 - 16), __asm_movdqu(*(int128_t *)(v87 - 16)));\n                        v83 = *v50;\n                        v82 = v88;\n                    }\n                    int64_t v90 = v82;\n                    int64_t v91 = v83;\n                    int64_t v92 = v76 - 1; // 0x409a82\n                    int64_t v93 = *v73; // 0x409a86\n                    int64_t v94 = v80; // 0x409a8d\n                    v43 = v91;\n                    v37 = v90;\n                    v26 = v80;\n                    v19 = v92;\n                    if (v93 == v90) {\n                        goto lab_0x409bb8;\n                    }\n                    v75 = v91;\n                    v36 = v90;\n                    v25 = v94;\n                    v76 = v92;\n                    v14 = v93;\n                }\n                int64_t v95 = *(int64_t *)(v12 + 48); // 0x409c4e\n                int64_t v96 = *(int64_t *)(v12 + 40); // 0x409c52\n                int64_t v97 = v51 - v75 >> 5; // 0x409c5c\n                int64_t v98 = v49 - v36 >> 5; // 0x409c60\n                v42 = v75;\n                v24 = v25;\n                v34 = v98;\n                v31 = v95;\n                v18 = v96;\n                v20 = v76;\n                if (v95 != v97) {\n                    goto lab_0x409bdd;\n                } else {\n                    // 0x409c6d\n                    v39 = v97;\n                    v44 = v76 - 1;\n                    v15 = v96;\n                    v32 = v98;\n                    v40 = v97;\n                    v27 = v25;\n                    v29 = v95;\n                    v16 = v96;\n                    if (v76 != 0) {\n                        goto lab_0x409b1b;\n                    } else {\n                        goto lab_0x409b70;\n                    }\n                }\n            }\n        }\n    }\n    // 0x409ec0\n    pthread_mutex_unlock(mutex2);\n    // 0x409ed5\n    return function_406320(a5, v12);\n  lab_0x409d00:;\n    int64_t v99 = v46;\n    int64_t * v100 = (int64_t *)(v12 + 48);\n    int64_t v101 = *v100; // 0x409d03\n    int64_t v102 = *(int64_t *)(v12 + 40); // 0x409d07\n    int64_t v103 = v49 - v38 >> 5; // 0x409d14\n    v13 = v100;\n    v33 = v103;\n    v41 = v101;\n    v11 = v23;\n    v30 = v101;\n    v17 = v102;\n    int64_t * v104; // 0x409880\n    int64_t v105; // 0x409880\n    int64_t v106; // 0x409880\n    int64_t v107; // 0x409880\n    int64_t v108; // 0x409880\n    int64_t v109; // 0x409880\n    int64_t v110; // 0x409880\n    int64_t v111; // 0x409880\n    int64_t v112; // 0x409880\n    int64_t v113; // 0x409880\n    int64_t v114; // 0x409880\n    if (v51 - v99 >> 5 == v101) {\n        goto lab_0x409b77;\n    } else {\n        // 0x409d25\n        v114 = v99;\n        v111 = v103;\n        v109 = v23;\n        v106 = v102;\n        if (v103 == v102) {\n            int64_t * v115 = (int64_t *)(v12 + 24); // 0x409d6a\n            v105 = *v115;\n            v104 = v115;\n            v113 = v99;\n            v112 = v102;\n            v110 = v23;\n            v107 = v102;\n            v108 = v21;\n            goto lab_0x409d6a;\n        } else {\n            goto lab_0x409d2a;\n        }\n    }\n  lab_0x409bb8:;\n    int64_t v116 = *(int64_t *)(v12 + 48); // 0x409bbe\n    int64_t v117 = *(int64_t *)(v12 + 40); // 0x409bc2\n    int64_t v118 = v49 - v37 >> 5; // 0x409bd0\n    v32 = v118;\n    v40 = v116;\n    v27 = v26;\n    v29 = v116;\n    v16 = v117;\n    v42 = v43;\n    v24 = v26;\n    v34 = v118;\n    v31 = v116;\n    v18 = v117;\n    v20 = v19;\n    if (v51 - v43 >> 5 == v116) {\n        goto lab_0x409b70;\n    } else {\n        goto lab_0x409bdd;\n    }\n  lab_0x409b77:;\n    int64_t v119 = v30 - v41; // 0x409b7a\n    int64_t * v120 = (int64_t *)(v12 + 40); // 0x409b81\n    *v120 = v17 - v33;\n    *v13 = v119;\n    if (*v47 < 2) {\n        // 0x409b9c\n        if (v119 == -*v120) {\n            // 0x409bf8\n            function_406320(a5, *(int64_t *)(v12 + 56));\n        }\n    } else {\n        int64_t * v121 = (int64_t *)(v12 + 56); // 0x409c10\n        pthread_mutex_lock((int64_t *)(*v121 + 88));\n        pthread_mutex_unlock((int64_t *)(*v121 + 88));\n    }\n    // 0x409ba6\n    pthread_mutex_unlock(mutex2);\n    goto lab_0x4099d0;\n  lab_0x409d61:;\n    int64_t v122 = *(int64_t *)(v12 + 40); // 0x409d61\n    v114 = v45;\n    v111 = v35;\n    v109 = v28;\n    v106 = v122;\n    v105 = v55;\n    v104 = v54;\n    v113 = v45;\n    v112 = v35;\n    v110 = v28;\n    v107 = v122;\n    v108 = v22;\n    if (v35 != v122) {\n        goto lab_0x409d2a;\n    } else {\n        goto lab_0x409d6a;\n    }\n  lab_0x409b70:\n    // 0x409b70\n    *(int64_t *)*v53 = v27;\n    v13 = (int64_t *)(v12 + 48);\n    v33 = v32;\n    v41 = v40;\n    v11 = v27;\n    v30 = v29;\n    v17 = v16;\n    goto lab_0x409b77;\n  lab_0x409bdd:;\n    int64_t v123 = v18;\n    int64_t v124 = v31;\n    int64_t v125 = v34;\n    int64_t v126 = v24;\n    int64_t v127 = v42;\n    if (v125 == v123) {\n        int64_t v128 = *(int64_t *)(v12 + 24); // 0x409dd0\n        int64_t v129 = v127; // 0x409dd7\n        int64_t v130 = v20; // 0x409dd7\n        int64_t v131 = v126; // 0x409dd7\n        if (v20 != 0 == (v128 != v127)) {\n            int64_t v132 = v130;\n            int64_t v133 = v129 - 32;\n            int128_t v134 = __asm_movdqu(*(int128_t *)v133); // 0x409e02\n            int64_t v135 = v131 - 32; // 0x409e06\n            *v50 = v133;\n            __asm_movups(*(int128_t *)v135, v134);\n            int128_t v136 = __asm_movdqu(*(int128_t *)(v129 - 16)); // 0x409e15\n            __asm_movups(*(int128_t *)(v131 - 16), v136);\n            while (v133 != v128) {\n                int64_t v137 = v132 - 1;\n                v129 = v133;\n                v130 = v137;\n                v131 = v135;\n                if (v137 == 0) {\n                    // 0x409f50\n                    v32 = v125;\n                    v40 = v51 - v133 >> 5;\n                    v27 = v135;\n                    v29 = v124;\n                    v16 = v125;\n                    goto lab_0x409b70;\n                }\n                v132 = v130;\n                v133 = v129 - 32;\n                v134 = __asm_movdqu(*(int128_t *)v133);\n                v135 = v131 - 32;\n                *v50 = v133;\n                __asm_movups(*(int128_t *)v135, v134);\n                v136 = __asm_movdqu(*(int128_t *)(v129 - 16));\n                __asm_movups(*(int128_t *)(v131 - 16), v136);\n            }\n            // 0x409e24\n            v32 = v125;\n            v40 = v51 - v133 >> 5;\n            v27 = v135;\n            v29 = v124;\n            v16 = v125;\n            goto lab_0x409b70;\n        } else {\n            goto lab_0x409be6;\n        }\n    } else {\n        goto lab_0x409be6;\n    }\n  lab_0x409d2a:;\n    int64_t * v138 = (int64_t *)(v12 + 48);\n    v13 = v138;\n    v33 = v111;\n    v41 = v51 - v114 >> 5;\n    v11 = v109;\n    v30 = *v138;\n    v17 = v106;\n    goto lab_0x409b77;\n  lab_0x409e7a:;\n    // 0x409e7a\n    int64_t v139; // 0x409e91\n    while (true) {\n        // 0x409e7a\n        int64_t v140; // 0x409880\n        int64_t v141 = v140;\n        int64_t v142; // 0x409880\n        int64_t v143 = v142;\n        int64_t v144 = v143 - 32; // 0x409e7a\n        *v48 = v144;\n        function_4085d0(v144, a6, result);\n        v139 = *v48;\n        int64_t v145 = *v52; // 0x409e94\n        if (v139 == v145) {\n            // break -> 0x409e9a\n            break;\n        }\n        // 0x409e70\n        v142 = v139;\n        v140 = v141 - 1;\n        if (v141 == 0) {\n            // break -> 0x409e9a\n            break;\n        }\n    }\n    int64_t v146 = *v50; // 0x409e9d\n    int64_t v147 = *(int64_t *)(v12 + 40); // 0x409ea1\n    int64_t * v148 = (int64_t *)(v12 + 48);\n    int64_t v149 = *v148; // 0x409eab\n    v13 = v148;\n    v33 = v49 - v139 >> 5;\n    v41 = v51 - v146 >> 5;\n    int64_t v150; // 0x409880\n    v11 = v150;\n    v30 = v149;\n    v17 = v147;\n    goto lab_0x409b77;\n  lab_0x409d6a:;\n    int64_t v151 = v107;\n    int64_t v152 = v112;\n    int64_t v153 = v113;\n    v114 = v105;\n    v111 = v152;\n    v109 = v110;\n    v106 = v151;\n    if (v105 == v153) {\n        goto lab_0x409d2a;\n    } else {\n        int64_t * v154 = v104;\n        int64_t v155 = v108 - 1; // 0x409d70\n        v114 = v153;\n        v111 = v152;\n        v109 = -1;\n        v106 = v151;\n        int64_t v156 = v153; // 0x409d77\n        int64_t v157 = v155; // 0x409d77\n        if (v108 == 0) {\n            goto lab_0x409d2a;\n        } else {\n            int64_t v158 = v157;\n            int64_t v159 = v156 - 32; // 0x409d8a\n            *v50 = v159;\n            function_4085d0(v159, a6, result);\n            int64_t v160 = *v50; // 0x409da2\n            while (v160 != *v154) {\n                // 0x409d80\n                v156 = v160;\n                v157 = v158 - 1;\n                if (v158 == 0) {\n                    // break -> 0x409dac\n                    break;\n                }\n                v158 = v157;\n                v159 = v156 - 32;\n                *v50 = v159;\n                function_4085d0(v159, a6, result);\n                v160 = *v50;\n            }\n            int64_t * v161 = (int64_t *)(v12 + 48);\n            v13 = v161;\n            v33 = v49 - *v48 >> 5;\n            v41 = v51 - v160 >> 5;\n            v11 = v155;\n            v30 = *v161;\n            v17 = *(int64_t *)(v12 + 40);\n            goto lab_0x409b77;\n        }\n    }\n  lab_0x409be6:\n    // 0x409be6\n    v32 = v125;\n    v40 = v51 - v127 >> 5;\n    v27 = v126;\n    v29 = v124;\n    v16 = v123;\n    goto lab_0x409b70;\n  lab_0x409b1b:;\n    int64_t v162 = v15;\n    int64_t v163 = v39;\n    int64_t v164 = v44;\n    int64_t v165 = v36 - 32;\n    int128_t v166 = __asm_movdqu(*(int128_t *)v165); // 0x409b3a\n    int64_t v167 = v25 - 32; // 0x409b3e\n    *v48 = v165;\n    __asm_movups(*(int128_t *)v167, v166);\n    int128_t v168 = __asm_movdqu(*(int128_t *)(v36 - 16)); // 0x409b4c\n    __asm_movups(*(int128_t *)(v25 - 16), v168);\n    while (v14 != v165) {\n        int64_t v169 = v164 - 1; // 0x409b34\n        int64_t v170 = v165; // 0x409b34\n        int64_t v171 = v167; // 0x409b34\n        if (v164 == 0) {\n            // 0x409ef0\n            v32 = v49 - v165 >> 5;\n            v40 = v163;\n            v27 = v167;\n            v29 = v163;\n            v16 = v162;\n            goto lab_0x409b70;\n        }\n        v164 = v169;\n        v165 = v170 - 32;\n        v166 = __asm_movdqu(*(int128_t *)v165);\n        v167 = v171 - 32;\n        *v48 = v165;\n        __asm_movups(*(int128_t *)v167, v166);\n        v168 = __asm_movdqu(*(int128_t *)(v170 - 16));\n        __asm_movups(*(int128_t *)(v171 - 16), v168);\n    }\n    // 0x409b5b\n    v32 = v49 - v14 >> 5;\n    v40 = v163;\n    v27 = v167;\n    v29 = v163;\n    v16 = v162;\n    goto lab_0x409b70;\n}\n"
        },
        {
            "funcName": "function_409fe0",
            "funcStartAddr": "409fe0",
            "funcEndAddr": "40a00a",
            "decompiledFuncCode": "int64_t function_409fe0(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x409fe8\n    int64_t v2 = *(int64_t *)(a1 + 8); // 0x409fec\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x409ff0\n    int64_t v4 = *(int64_t *)(a1 + 48); // 0x409ff4\n    int64_t v5 = *(int64_t *)(a1 + 32); // 0x409ff7\n    function_409880(a1, v2, v1, *(int64_t *)(a1 + 24), v5, v3, v4);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a010",
            "funcStartAddr": "40a010",
            "funcEndAddr": "40a0c4",
            "decompiledFuncCode": "int64_t function_40a010(int64_t a1) {\n    int32_t v1 = g89; // 0x40a010\n    int64_t v2 = v1; // 0x40a010\n    int64_t result = g90; // 0x40a022\n    if (g88 != v2) {\n        // 0x40a02e\n        *(int64_t *)(8 * v2 + result) = a1;\n        g89 = (int32_t)v2 + 1;\n        return result;\n    }\n    int64_t v3; // 0x40a010\n    int64_t v4; // 0x40a010\n    if (result == 0) {\n        // 0x40a090\n        v3 = 16;\n        v4 = 128;\n        if (v1 != 0) {\n            // 0x40a095\n            v3 = v2;\n            v4 = 8 * v2;\n            if (v1 > -1 != v1 > -1) {\n                // 0x40a0af\n                function_411460(a1);\n                // UNREACHABLE\n            }\n        }\n    } else {\n        if (v1 <= 0xffffffff) {\n            // 0x40a0af\n            function_411460(a1);\n            // UNREACHABLE\n        }\n        int64_t v5 = v2 + 1 + v2 / 2; // 0x40a05a\n        v3 = v5;\n        v4 = 8 * v5;\n    }\n    // 0x40a067\n    g88 = v3;\n    int64_t result2 = function_411270(result, v4); // 0x40a071\n    g90 = result2;\n    int64_t v6 = g89;\n    *(int64_t *)(8 * v6 + result2) = a1;\n    g89 = (int32_t)v6 + 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a0d0",
            "funcStartAddr": "40a0d0",
            "funcEndAddr": "40a63d",
            "decompiledFuncCode": "int64_t function_40a0d0(int32_t status) {\n    // 0x40a0d0\n    if (status != 0) {\n        // 0x40a0ea\n        __fprintf_chk(g55, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40a10f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x40a116\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n  or:  %s [OPTION]... --files0-from=F\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Write sorted concatenation of all FILE(s) to standard output.\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"Ordering options:\\n\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --ignore-leading-blanks  ignore leading blanks\\n  -d, --dictionary-order      consider only blanks and alphanumeric characters\\n  -f, --ignore-case           fold lower case to upper case characters\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -g, --general-numeric-sort  compare according to general numerical value\\n  -i, --ignore-nonprinting    consider only printable characters\\n  -M, --month-sort            compare (unknown) < 'JAN' < ... < 'DEC'\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -h, --human-numeric-sort    compare human readable numbers (e.g., 2K 1G)\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -n, --numeric-sort          compare according to string numerical value\\n  -R, --random-sort           shuffle, but group identical keys.  See shuf(1)\\n      --random-source=FILE    get random bytes from FILE\\n  -r, --reverse               reverse the result of comparisons\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"      --sort=WORD             sort according to WORD:\\n                                general-numeric -g, human-numeric -h, month -M,\\n                                numeric -n, random -R, version -V\\n  -V, --version-sort          natural sort of (version) numbers within text\\n\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"Other options:\\n\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"      --batch-size=NMERGE   merge at most NMERGE inputs at once;\\n                            for more use temp files\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --check, --check=diagnose-first  check for sorted input; do not sort\\n  -C, --check=quiet, --check=silent  like -c, but do not report first bad line\\n      --compress-program=PROG  compress temporaries with PROG;\\n                              decompress them with PROG -d\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"      --debug               annotate the part of the line used to sort,\\n                              and warn about questionable usage to stderr\\n      --files0-from=F       read input from the files specified by\\n                            NUL-terminated names in file F;\\n                            If F is - then read names from standard input\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -k, --key=KEYDEF          sort via a key; KEYDEF gives location and type\\n  -m, --merge               merge already sorted files; do not sort\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"  -o, --output=FILE         write result to FILE instead of standard output\\n  -s, --stable              stabilize sort by disabling last-resort comparison\\n  -S, --buffer-size=SIZE    use SIZE for main memory buffer\\n\", 5), g52);\n    __printf_chk(1, dcgettext(NULL, \"  -t, --field-separator=SEP  use SEP instead of non-blank to blank transition\\n  -T, --temporary-directory=DIR  use DIR for temporaries, not $TMPDIR or %s;\\n                              multiple options specify multiple directories\\n      --parallel=N          change the number of sorts run concurrently to N\\n  -u, --unique              with -c, check for strict ordering;\\n                              without -c, output only the first of an equal run\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated     line delimiter is NUL, not newline\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"\\nKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a\\nfield number and C a character position in the field; both are origin 1, and\\nthe stop position defaults to the line's end.  If neither -t nor -b is in\\neffect, characters in a field are counted from the beginning of the preceding\\nwhitespace.  OPTS is one or more single-letter ordering options [bdfgiMhnRrV],\\nwhich override global ordering options for that key.  If no key is given, use\\nthe entire line as the key.  Use --debug to diagnose incorrect key usage.\\n\\nSIZE may be followed by the following multiplicative suffixes:\\n\", 5), g52);\n    fputs_unlocked(dcgettext(NULL, \"% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.\\n\\n*** WARNING ***\\nThe locale specified by the environment affects sort order.\\nSet LC_ALL=C to get the traditional sort order that uses\\nnative byte values.\\n\", 5), g52);\n    int64_t v1 = &g8; // bp-136, 0x40a418\n    bool v2; // 0x40a0d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x40a4a0\n    int64_t v6 = *(int64_t *)v5; // 0x40a4a4\n    int64_t v7 = 5; // 0x40a4aa\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"sort\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40a4b6\n        char v11 = *(char *)v9; // 0x40a4b6\n        char v12 = v11; // 0x40a4b6\n        bool v13 = false; // 0x40a4b6\n        while (v10 == v11) {\n            // 0x40a4ac\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40a4b6\n            int64_t v15 = v8 + v3; // 0x40a4b6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40a4c2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x40a4c2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40a5d4;\n        } else {\n            // 0x40a5be\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40a613\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40a524;\n            } else {\n                goto lab_0x40a5d4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40a524;\n        } else {\n            // 0x40a50a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40a613\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40a524;\n            } else {\n                goto lab_0x40a524;\n            }\n        }\n    }\n  lab_0x40a5d4:\n    // 0x40a5d4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40a564\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40a10f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40a524:\n    // 0x40a524\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40a564\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40a10f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a640",
            "funcStartAddr": "40a640",
            "funcEndAddr": "40a64a",
            "decompiledFuncCode": "int64_t function_40a640(void) {\n    // 0x40a640\n    return function_40a0d0(1);\n}\n"
        },
        {
            "funcName": "function_40a650",
            "funcStartAddr": "40a650",
            "funcEndAddr": "40a766",
            "decompiledFuncCode": "int64_t function_40a650(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x40a671\n    int32_t len = strlen(str); // 0x40a671\n    if (a2 == 0) {\n        // 0x40a73d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x40a6d7\n    int64_t v4 = a3; // 0x40a650\n    int64_t v5 = a2; // 0x40a6de\n    int64_t str4; // 0x40a650\n    int64_t v6; // 0x40a650\n    int32_t v7; // 0x40a650\n    int32_t v8; // 0x40a650\n    int32_t v9; // 0x40a650\n    int64_t v10; // 0x40a650\n    int64_t result; // 0x40a650\n    int32_t v11; // 0x40a6d3\n    char * str2; // 0x40a6f2\n    while (true) {\n        // 0x40a6e7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40a6fb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40a73d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x40a70f\n                break;\n            }\n            // 0x40a6a0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x40a6ae\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x40a6d7\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x40a713\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x40a71a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x40a6e7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x40a6e7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40a6fb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40a73d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x40a70f\n                    break;\n                }\n                // 0x40a6a0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x40a6ae\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x40a6d7\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x40a70f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x40a728:\n    // 0x40a73d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_40a770",
            "funcStartAddr": "40a770",
            "funcEndAddr": "40a7e1",
            "decompiledFuncCode": "int64_t function_40a770(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x40a770\n    if (a3 == -1) {\n        // 0x40a7d0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x40a785\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x40a794\n    function_40f860(1, (int64_t *)a1);\n    function_40f550(0, 8, a2);\n    error(0, 0, format);\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_40a7f0",
            "funcStartAddr": "40a7f0",
            "funcEndAddr": "40a908",
            "decompiledFuncCode": "int64_t function_40a7f0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40a81d\n    fputs_unlocked(v1, g55);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x40a890\n        int64_t v5; // 0x40a897\n        int64_t v6; // 0x40a8b7\n        while (v3 != 0) {\n            // 0x40a87b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x40a840\n                break;\n            }\n            // 0x40a88d\n            v4 = v3 + 1;\n            v5 = function_40f880(v2);\n            __fprintf_chk(g55, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x40a8c0\n                goto lab_0x40a8c0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x40a843\n        int64_t v8 = function_40f880(v2); // 0x40a84d\n        __fprintf_chk(g55, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40a86d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40a87b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x40a840\n                    break;\n                }\n                // 0x40a88d\n                v4 = v3 + 1;\n                v5 = function_40f880(v2);\n                __fprintf_chk(g55, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x40a8c0\n                    goto lab_0x40a8c0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x40a840\n            v7 = v3 + 1;\n            v8 = function_40f880(v2);\n            __fprintf_chk(g55, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x40a8c0:;\n    int64_t v10 = (int64_t)g55; // 0x40a8c0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x40a8c7\n    uint64_t result = *v11; // 0x40a8c7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x40a8f0\n        return __overflow(g55, 10);\n    }\n    // 0x40a8d1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40a980",
            "decompiledFuncCode": "int64_t function_40a910(char * a1, int64_t a2, char ** a3, char * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_40a650(a2, v2, v1, a5); // 0x40a93c\n    int64_t result = v3; // 0x40a944\n    if (v3 < 0) {\n        // 0x40a958\n        function_40a770((int64_t)a1, a2, v3);\n        function_40a7f0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x40a946\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a980",
            "funcStartAddr": "40a980",
            "funcEndAddr": "40a9cd",
            "decompiledFuncCode": "int64_t function_40a980(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40a980\n    if (result == 0) {\n        // 0x40a9c1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40a9b8\n    int32_t n = a4; // 0x40a9b8\n    int64_t v1 = result; // 0x40a9bf\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40a9c1\n        return result;\n    }\n    int64_t str3 = str2; // 0x40a9bf\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40a9a0\n    int64_t result2 = 0; // 0x40a9ad\n    while (v2 != 0) {\n        // 0x40a9af\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40a9c1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40a9c1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a9d0",
            "funcStartAddr": "40a9d0",
            "funcEndAddr": "40a9d8",
            "decompiledFuncCode": "int64_t function_40a9d0(int64_t a1) {\n    // 0x40a9d0\n    g107 = a1;\n    int64_t result; // 0x40a9d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a9e0",
            "funcStartAddr": "40a9e0",
            "funcEndAddr": "40a9e8",
            "decompiledFuncCode": "int64_t function_40a9e0(int64_t a1) {\n    // 0x40a9e0\n    g106 = a1;\n    int64_t result; // 0x40a9e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a9f0",
            "funcStartAddr": "40a9f0",
            "funcEndAddr": "40aa8e",
            "decompiledFuncCode": "int64_t function_40a9f0(void) {\n    // 0x40a9f0\n    int32_t * err_num; // 0x40aa06\n    if ((int32_t)function_413520((int64_t)g52) == 0) {\n        goto lab_0x40aa1c;\n    } else {\n        // 0x40aa06\n        err_num = __errno_location();\n        if (g106 == 0) {\n            goto lab_0x40aa33;\n        } else {\n            // 0x40aa17\n            if (*err_num != 32) {\n                goto lab_0x40aa33;\n            } else {\n                goto lab_0x40aa1c;\n            }\n        }\n    }\n  lab_0x40aa1c:;\n    int64_t result = function_413520((int64_t)g55); // 0x40aa23\n    if ((int32_t)result == 0) {\n        // 0x40aa2c\n        return result;\n    }\n    // 0x40aa6e\n    _exit(g41);\n    // UNREACHABLE\n  lab_0x40aa33:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40aa3f\n    if (g107 == 0) {\n        // 0x40aa79\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x40aa53\n        error(0, *err_num, \"%s: %s\", (char *)function_40f6d0((int64_t)g107), v1);\n    }\n    // 0x40aa6e\n    _exit(g41);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40aa90",
            "funcStartAddr": "40aa90",
            "funcEndAddr": "40aabb",
            "decompiledFuncCode": "int64_t function_40aa90(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    *(int64_t *)(v1 + 16) = 0;\n    *a1 = -0x1032547698badcff;\n    *(int64_t *)(v1 + 8) = 0x1032547698badcfe;\n    *(int32_t *)(v1 + 24) = 0;\n    return 0x1032547698badcfe;\n}\n"
        },
        {
            "funcName": "function_40aac0",
            "funcStartAddr": "40aac0",
            "funcEndAddr": "40aada",
            "decompiledFuncCode": "int64_t function_40aac0(int64_t a1, int64_t result) {\n    // 0x40aac0\n    int64_t v1; // 0x40aac0\n    *(int32_t *)result = (int32_t)v1;\n    *(int32_t *)(result + 4) = *(int32_t *)(a1 + 4);\n    *(int32_t *)(result + 8) = *(int32_t *)(a1 + 8);\n    *(int32_t *)(result + 12) = *(int32_t *)(a1 + 12);\n    return result;\n}\n"
        },
        {
            "funcName": "function_40aae0",
            "funcStartAddr": "40aae0",
            "funcEndAddr": "40b24f",
            "decompiledFuncCode": "int64_t function_40aae0(uint64_t a1, uint64_t a2, int64_t result) {\n    int32_t * v1 = (int32_t *)(result + 4); // 0x40aaf7\n    int32_t v2 = *v1; // 0x40aaf7\n    uint64_t v3 = (a2 & -4) + a1; // 0x40aafb\n    int64_t v4; // 0x40aae0\n    int32_t v5 = v4;\n    int32_t * v6 = (int32_t *)(result + 8); // 0x40ab01\n    int32_t v7 = *v6; // 0x40ab01\n    int32_t * v8 = (int32_t *)(result + 12); // 0x40ab09\n    int32_t v9 = *v8; // 0x40ab09\n    uint32_t v10 = (int32_t)a2; // 0x40ab11\n    int32_t * v11 = (int32_t *)(result + 16); // 0x40ab19\n    uint32_t v12 = *v11 + v10; // 0x40ab19\n    int32_t * v13 = (int32_t *)(result + 20); // 0x40ab23\n    *v11 = v12;\n    *v13 = *v13 + (int32_t)(a2 / 0x100000000) + (int32_t)(v12 < v10);\n    int32_t v14 = v5; // 0x40ab36\n    int64_t v15 = a1; // 0x40ab36\n    int32_t v16 = v5; // 0x40ab36\n    int32_t v17 = v9; // 0x40ab36\n    int32_t v18 = v7; // 0x40ab36\n    int32_t v19 = v2; // 0x40ab36\n    if (v3 > a1) {\n        int32_t v20 = v7;\n        int32_t v21 = v2;\n        int32_t v22 = v9;\n        int32_t v23 = *(int32_t *)v15; // 0x40ab40\n        int32_t v24 = *(int32_t *)(v15 + 4); // 0x40ab4b\n        int32_t v25 = *(int32_t *)(v15 + 12); // 0x40ab4e\n        int32_t v26 = *(int32_t *)(v15 + 20); // 0x40ab52\n        int32_t v27 = *(int32_t *)(v15 + 24); // 0x40ab6e\n        int32_t v28 = *(int32_t *)(v15 + 28); // 0x40ab71\n        int32_t v29 = *(int32_t *)(v15 + 36); // 0x40ab7d\n        int32_t v30 = *(int32_t *)(v15 + 44); // 0x40ab90\n        uint32_t v31 = v14 - 0x28955b88 + v23 + ((v20 ^ v22) & v21 ^ v22); // 0x40ab94\n        int32_t v32 = (v31 / 0x2000000 | 128 * v31) + v21; // 0x40aba9\n        uint32_t v33 = v22 - 0x173848aa + v24 + (v32 & (v20 ^ v21) ^ v20); // 0x40abb7\n        int32_t v34 = *(int32_t *)(v15 + 8); // 0x40abb9\n        int32_t v35 = (v33 / 0x100000 | 0x1000 * v33) + v32; // 0x40abbf\n        uint32_t v36 = v20 + 0x242070db + v34 + (v35 & (v32 ^ v21) ^ v21); // 0x40abdb\n        int32_t v37 = *(int32_t *)(v15 + 16); // 0x40abe0\n        int32_t v38 = (v36 / 0x8000 | 0x20000 * v36) + v35; // 0x40abe7\n        uint32_t v39 = v21 - 0x3e423112 + v25 + (v38 & (v35 ^ v32) ^ v32); // 0x40abf2\n        int32_t v40 = *(int32_t *)(v15 + 60); // 0x40abfe\n        int32_t v41 = (v39 / 1024 | 0x400000 * v39) + v38; // 0x40ac07\n        uint32_t v42 = v32 - 0xa83f051 + v37 + (v41 & (v38 ^ v35) ^ v35); // 0x40ac0d\n        int32_t v43 = (v42 / 0x2000000 | 128 * v42) + v41; // 0x40ac26\n        uint32_t v44 = v26 + 0x4787c62a + v35 + (v43 & (v41 ^ v38) ^ v38); // 0x40ac2c\n        int32_t v45 = (v44 / 0x100000 | 0x1000 * v44) + v43; // 0x40ac3c\n        uint32_t v46 = v27 - 0x57cfb9ed + v38 + (v45 & (v43 ^ v41) ^ v41); // 0x40ac48\n        int32_t v47 = *(int32_t *)(v15 + 32); // 0x40ac54\n        int32_t v48 = (v46 / 0x8000 | 0x20000 * v46) + v45; // 0x40ac5a\n        uint32_t v49 = v28 - 0x2b96aff + v41 + (v48 & (v45 ^ v43) ^ v43); // 0x40ac64\n        int32_t v50 = *(int32_t *)(v15 + 48); // 0x40ac6f\n        int32_t v51 = (v49 / 1024 | 0x400000 * v49) + v48; // 0x40ac77\n        uint32_t v52 = v47 + 0x698098d8 + v43 + (v51 & (v48 ^ v45) ^ v45); // 0x40ac7d\n        int32_t v53 = *(int32_t *)(v15 + 56); // 0x40ac89\n        int32_t v54 = (v52 / 0x2000000 | 128 * v52) + v51; // 0x40ac92\n        uint32_t v55 = v29 - 0x74bb0851 + v45 + (v54 & (v51 ^ v48) ^ v48); // 0x40ac98\n        int32_t v56 = *(int32_t *)(v15 + 40); // 0x40ac9a\n        int32_t v57 = (v55 / 0x100000 | 0x1000 * v55) + v54; // 0x40acad\n        uint32_t v58 = v56 - 0xa44f + v48 + (v57 & (v54 ^ v51) ^ v51); // 0x40acb5\n        int32_t v59 = *(int32_t *)(v15 + 52); // 0x40acc1\n        v15 += 64;\n        int32_t v60 = (v58 / 0x8000 | 0x20000 * v58) + v57; // 0x40acce\n        uint32_t v61 = v30 - 0x76a32842 + v51 + (v60 & (v57 ^ v54) ^ v54); // 0x40acd4\n        int32_t v62 = (v61 / 1024 | 0x400000 * v61) + v60; // 0x40ace4\n        uint32_t v63 = v50 + 0x6b901122 + v54 + (v62 & (v60 ^ v57) ^ v57); // 0x40acea\n        int32_t v64 = (v63 / 0x2000000 | 128 * v63) + v62; // 0x40acfb\n        uint32_t v65 = v59 - 0x2678e6d + v57 + (v64 & (v62 ^ v60) ^ v60); // 0x40ad01\n        int32_t v66 = (v65 / 0x100000 | 0x1000 * v65) + v64; // 0x40ad12\n        uint32_t v67 = v53 - 0x5986bc72 + v60 + (v66 & (v64 ^ v62) ^ v62); // 0x40ad18\n        int32_t v68 = (v67 / 0x8000 | 0x20000 * v67) + v66; // 0x40ad29\n        uint32_t v69 = v40 + 0x49b40821 + v62 + (v68 & (v66 ^ v64) ^ v64); // 0x40ad2f\n        int32_t v70 = (v69 / 1024 | 0x400000 * v69) + v68; // 0x40ad38\n        uint32_t v71 = v24 - 0x9e1da9e + v64 + ((v70 ^ v68) & v66 ^ v68); // 0x40ad49\n        int32_t v72 = (v71 / 0x8000000 | 32 * v71) + v70; // 0x40ad58\n        uint32_t v73 = v27 - 0x3fbf4cc0 + v66 + ((v72 ^ v70) & v68 ^ v70); // 0x40ad60\n        int32_t v74 = (v73 / 0x800000 | 512 * v73) + v72; // 0x40ad69\n        uint32_t v75 = v30 + 0x265e5a51 + v68 + ((v74 ^ v72) & v70 ^ v72); // 0x40ad7a\n        int32_t v76 = (v75 / 0x40000 | 0x4000 * v75) + v74; // 0x40ad89\n        uint32_t v77 = v23 - 0x16493856 + v70 + ((v76 ^ v74) & v72 ^ v74); // 0x40ad91\n        int32_t v78 = (v77 / 0x1000 | 0x100000 * v77) + v76; // 0x40ad9a\n        uint32_t v79 = v26 - 0x29d0efa3 + v72 + ((v78 ^ v76) & v74 ^ v76); // 0x40adab\n        int32_t v80 = (v79 / 0x8000000 | 32 * v79) + v78; // 0x40adb4\n        uint32_t v81 = v56 + 0x2441453 + v74 + ((v80 ^ v78) & v76 ^ v78); // 0x40adc5\n        int32_t v82 = (v81 / 0x800000 | 512 * v81) + v80; // 0x40add4\n        uint32_t v83 = v40 - 0x275e197f + v76 + ((v82 ^ v80) & v78 ^ v80); // 0x40addc\n        int32_t v84 = (v83 / 0x40000 | 0x4000 * v83) + v82; // 0x40adea\n        uint32_t v85 = v37 - 0x182c0438 + v78 + ((v84 ^ v82) & v80 ^ v82); // 0x40adfb\n        int32_t v86 = (v85 / 0x1000 | 0x100000 * v85) + v84; // 0x40ae0f\n        uint32_t v87 = v29 + 0x21e1cde6 + v80 + ((v86 ^ v84) & v82 ^ v84); // 0x40ae17\n        int32_t v88 = (v87 / 0x8000000 | 32 * v87) + v86; // 0x40ae26\n        uint32_t v89 = v53 - 0x3cc8f82a + v82 + ((v88 ^ v86) & v84 ^ v86); // 0x40ae2e\n        int32_t v90 = (v89 / 0x800000 | 512 * v89) + v88; // 0x40ae37\n        uint32_t v91 = v25 - 0xb2af279 + v84 + ((v90 ^ v88) & v86 ^ v88); // 0x40ae53\n        int32_t v92 = (v91 / 0x40000 | 0x4000 * v91) + v90; // 0x40ae58\n        uint32_t v93 = v47 + 0x455a14ed + v86 + ((v92 ^ v90) & v88 ^ v90); // 0x40ae64\n        int32_t v94 = (v93 / 0x1000 | 0x100000 * v93) + v92; // 0x40ae73\n        uint32_t v95 = v59 - 0x561c16fb + v88 + ((v94 ^ v92) & v90 ^ v92); // 0x40ae88\n        int32_t v96 = (v95 / 0x8000000 | 32 * v95) + v94; // 0x40ae91\n        uint32_t v97 = v34 - 0x3105c08 + v90 + ((v96 ^ v94) & v92 ^ v94); // 0x40aeaa\n        int32_t v98 = (v97 / 0x800000 | 512 * v97) + v96; // 0x40aeb1\n        uint32_t v99 = v28 + 0x676f02d9 + v92 + ((v98 ^ v96) & v94 ^ v96); // 0x40aeb9\n        int32_t v100 = (v99 / 0x40000 | 0x4000 * v99) + v98; // 0x40aec0\n        int32_t v101 = v100 ^ v98; // 0x40aec2\n        uint32_t v102 = v50 - 0x72d5b376 + v94 + (v101 & v96 ^ v98); // 0x40aed4\n        int32_t v103 = (v102 / 0x1000 | 0x100000 * v102) + v100; // 0x40aee3\n        uint32_t v104 = v26 - 0x5c6be + v96 + (v103 ^ v101); // 0x40aee7\n        int32_t v105 = (v104 / 0x10000000 | 16 * v104) + v103; // 0x40aef9\n        int32_t v106 = v105 ^ v103;\n        uint32_t v107 = v47 - 0x788e097f + v98 + (v106 ^ v100); // 0x40aeff\n        int32_t v108 = (v107 / 0x200000 | 2048 * v107) + v105; // 0x40af11\n        uint32_t v109 = v30 + 0x6d9d6122 + v100 + (v108 ^ v106); // 0x40af1f\n        int32_t v110 = (v109 / 0x10000 | 0x10000 * v109) + v108; // 0x40af28\n        int32_t v111 = v110 ^ v108;\n        uint32_t v112 = v53 - 0x21ac7f4 + v103 + (v111 ^ v105); // 0x40af2f\n        int32_t v113 = (v112 / 512 | 0x800000 * v112) + v110; // 0x40af41\n        uint32_t v114 = v24 - 0x5b4115bc + v105 + (v111 ^ v113); // 0x40af52\n        int32_t v115 = (v114 / 0x10000000 | 16 * v114) + v113; // 0x40af5b\n        uint32_t v116 = v37 + 0x4bdecfa9 + v108 + (v113 ^ v110 ^ v115); // 0x40af69\n        int32_t v117 = (v116 / 0x200000 | 2048 * v116) + v115; // 0x40af72\n        uint32_t v118 = v28 - 0x944b4a0 + v110 + (v115 ^ v113 ^ v117); // 0x40af76\n        int32_t v119 = (v118 / 0x10000 | 0x10000 * v118) + v117; // 0x40af88\n        uint32_t v120 = v56 - 0x41404390 + v113 + (v117 ^ v115 ^ v119); // 0x40af8e\n        int32_t v121 = (v120 / 512 | 0x800000 * v120) + v119; // 0x40afa7\n        uint32_t v122 = v59 + 0x289b7ec6 + v115 + (v119 ^ v117 ^ v121); // 0x40afae\n        int32_t v123 = (v122 / 0x10000000 | 16 * v122) + v121; // 0x40afb7\n        uint32_t v124 = v23 - 0x155ed806 + v117 + (v121 ^ v119 ^ v123); // 0x40afbe\n        int32_t v125 = (v124 / 0x200000 | 2048 * v124) + v123; // 0x40afc7\n        uint32_t v126 = v25 - 0x2b10cf7b + v119 + (v123 ^ v121 ^ v125); // 0x40afd5\n        int32_t v127 = (v126 / 0x10000 | 0x10000 * v126) + v125; // 0x40afe7\n        uint32_t v128 = v27 + 0x4881d05 + v121 + (v125 ^ v123 ^ v127); // 0x40afed\n        int32_t v129 = (v128 / 512 | 0x800000 * v128) + v127; // 0x40afff\n        uint32_t v130 = v29 - 0x262b2fc7 + v123 + (v127 ^ v125 ^ v129); // 0x40b00f\n        int32_t v131 = (v130 / 0x10000000 | 16 * v130) + v129; // 0x40b016\n        uint32_t v132 = v50 - 0x1924661b + v125 + (v129 ^ v127 ^ v131); // 0x40b01f\n        int32_t v133 = (v132 / 0x200000 | 2048 * v132) + v131; // 0x40b034\n        uint32_t v134 = v40 + 0x1fa27cf8 + v127 + (v131 ^ v129 ^ v133); // 0x40b038\n        int32_t v135 = (v134 / 0x10000 | 0x10000 * v134) + v133; // 0x40b04a\n        uint32_t v136 = v34 - 0x3b53a99b + v129 + (v133 ^ v131 ^ v135); // 0x40b050\n        int32_t v137 = (v136 / 512 | 0x800000 * v136) + v135; // 0x40b066\n        uint32_t v138 = v23 - 0xbd6ddbc + v131 + ((v137 | -1 - v133) ^ v135); // 0x40b06c\n        int32_t v139 = (v138 / 0x4000000 | 64 * v138) + v137; // 0x40b087\n        uint32_t v140 = v28 + 0x432aff97 + v133 + ((v139 | -1 - v135) ^ v137); // 0x40b096\n        int32_t v141 = (v140 / 0x400000 | 1024 * v140) + v139; // 0x40b09f\n        uint32_t v142 = v53 - 0x546bdc59 + v135 + ((v141 | -1 - v137) ^ v139); // 0x40b0ab\n        int32_t v143 = (v142 / 0x20000 | 0x8000 * v142) + v141; // 0x40b0c0\n        uint32_t v144 = v26 - 0x36c5fc7 + v137 + ((v143 | -1 - v139) ^ v141); // 0x40b0c6\n        int32_t v145 = (v144 / 2048 | 0x200000 * v144) + v143; // 0x40b0d9\n        uint32_t v146 = v50 + 0x655b59c3 + v139 + ((v145 | -1 - v141) ^ v143); // 0x40b0df\n        int32_t v147 = (v146 / 0x4000000 | 64 * v146) + v145; // 0x40b0ef\n        uint32_t v148 = v25 - 0x70f3336e + v141 + ((v147 | -1 - v143) ^ v145); // 0x40b0fb\n        int32_t v149 = (v148 / 0x400000 | 1024 * v148) + v147; // 0x40b10d\n        uint32_t v150 = v56 - 0x100b83 + v143 + ((v149 | -1 - v145) ^ v147); // 0x40b115\n        int32_t v151 = (v150 / 0x20000 | 0x8000 * v150) + v149; // 0x40b12b\n        uint32_t v152 = v24 - 0x7a7ba22f + v145 + ((v151 | -1 - v147) ^ v149); // 0x40b133\n        int32_t v153 = (v152 / 2048 | 0x200000 * v152) + v151; // 0x40b14b\n        uint32_t v154 = v47 + 0x6fa87e4f + v147 + ((v153 | -1 - v149) ^ v151); // 0x40b151\n        int32_t v155 = (v154 / 0x4000000 | 64 * v154) + v153; // 0x40b165\n        uint32_t v156 = v40 - 0x1d31920 + v149 + ((v155 | -1 - v151) ^ v153); // 0x40b16b\n        int32_t v157 = (v156 / 0x400000 | 1024 * v156) + v155; // 0x40b18c\n        uint32_t v158 = v27 - 0x5cfebcec + v151 + ((v157 | -1 - v153) ^ v155); // 0x40b1a0\n        int32_t v159 = (v158 / 0x20000 | 0x8000 * v158) + v157; // 0x40b1ab\n        uint32_t v160 = v59 + 0x4e0811a1 + v153 + ((v159 | -1 - v155) ^ v157); // 0x40b1b9\n        int32_t v161 = (v160 / 2048 | 0x200000 * v160) + v159; // 0x40b1c1\n        uint32_t v162 = v37 - 0x8ac817e + v155 + ((v161 | -1 - v157) ^ v159); // 0x40b1c7\n        int32_t v163 = (v162 / 0x4000000 | 64 * v162) + v161; // 0x40b1d0\n        uint32_t v164 = v30 - 0x42c50dcb + v157 + ((v163 | -1 - v159) ^ v161); // 0x40b1d6\n        int32_t v165 = (v164 / 0x400000 | 1024 * v164) + v163; // 0x40b1e8\n        uint32_t v166 = v34 + 0x2ad7d2bb + v159 + ((v165 | -1 - v161) ^ v163); // 0x40b1f8\n        int32_t v167 = (v166 / 0x20000 | 0x8000 * v166) + v165; // 0x40b201\n        uint32_t v168 = v29 - 0x14792c6f + v161 + ((v167 | -1 - v163) ^ v165); // 0x40b207\n        v14 += v163;\n        int32_t v169 = v167 + v20; // 0x40b212\n        int32_t v170 = v167 + v21 + (v168 / 2048 | 0x200000 * v168); // 0x40b215\n        int32_t v171 = v165 + v22; // 0x40b218\n        v16 = v14;\n        v17 = v171;\n        v18 = v169;\n        v19 = v170;\n        while (v3 > v15) {\n            // 0x40ab40\n            v20 = v169;\n            v21 = v170;\n            v22 = v171;\n            v23 = *(int32_t *)v15;\n            v24 = *(int32_t *)(v15 + 4);\n            v25 = *(int32_t *)(v15 + 12);\n            v26 = *(int32_t *)(v15 + 20);\n            v27 = *(int32_t *)(v15 + 24);\n            v28 = *(int32_t *)(v15 + 28);\n            v29 = *(int32_t *)(v15 + 36);\n            v30 = *(int32_t *)(v15 + 44);\n            v31 = v14 - 0x28955b88 + v23 + ((v20 ^ v22) & v21 ^ v22);\n            v32 = (v31 / 0x2000000 | 128 * v31) + v21;\n            v33 = v22 - 0x173848aa + v24 + (v32 & (v20 ^ v21) ^ v20);\n            v34 = *(int32_t *)(v15 + 8);\n            v35 = (v33 / 0x100000 | 0x1000 * v33) + v32;\n            v36 = v20 + 0x242070db + v34 + (v35 & (v32 ^ v21) ^ v21);\n            v37 = *(int32_t *)(v15 + 16);\n            v38 = (v36 / 0x8000 | 0x20000 * v36) + v35;\n            v39 = v21 - 0x3e423112 + v25 + (v38 & (v35 ^ v32) ^ v32);\n            v40 = *(int32_t *)(v15 + 60);\n            v41 = (v39 / 1024 | 0x400000 * v39) + v38;\n            v42 = v32 - 0xa83f051 + v37 + (v41 & (v38 ^ v35) ^ v35);\n            v43 = (v42 / 0x2000000 | 128 * v42) + v41;\n            v44 = v26 + 0x4787c62a + v35 + (v43 & (v41 ^ v38) ^ v38);\n            v45 = (v44 / 0x100000 | 0x1000 * v44) + v43;\n            v46 = v27 - 0x57cfb9ed + v38 + (v45 & (v43 ^ v41) ^ v41);\n            v47 = *(int32_t *)(v15 + 32);\n            v48 = (v46 / 0x8000 | 0x20000 * v46) + v45;\n            v49 = v28 - 0x2b96aff + v41 + (v48 & (v45 ^ v43) ^ v43);\n            v50 = *(int32_t *)(v15 + 48);\n            v51 = (v49 / 1024 | 0x400000 * v49) + v48;\n            v52 = v47 + 0x698098d8 + v43 + (v51 & (v48 ^ v45) ^ v45);\n            v53 = *(int32_t *)(v15 + 56);\n            v54 = (v52 / 0x2000000 | 128 * v52) + v51;\n            v55 = v29 - 0x74bb0851 + v45 + (v54 & (v51 ^ v48) ^ v48);\n            v56 = *(int32_t *)(v15 + 40);\n            v57 = (v55 / 0x100000 | 0x1000 * v55) + v54;\n            v58 = v56 - 0xa44f + v48 + (v57 & (v54 ^ v51) ^ v51);\n            v59 = *(int32_t *)(v15 + 52);\n            v15 += 64;\n            v60 = (v58 / 0x8000 | 0x20000 * v58) + v57;\n            v61 = v30 - 0x76a32842 + v51 + (v60 & (v57 ^ v54) ^ v54);\n            v62 = (v61 / 1024 | 0x400000 * v61) + v60;\n            v63 = v50 + 0x6b901122 + v54 + (v62 & (v60 ^ v57) ^ v57);\n            v64 = (v63 / 0x2000000 | 128 * v63) + v62;\n            v65 = v59 - 0x2678e6d + v57 + (v64 & (v62 ^ v60) ^ v60);\n            v66 = (v65 / 0x100000 | 0x1000 * v65) + v64;\n            v67 = v53 - 0x5986bc72 + v60 + (v66 & (v64 ^ v62) ^ v62);\n            v68 = (v67 / 0x8000 | 0x20000 * v67) + v66;\n            v69 = v40 + 0x49b40821 + v62 + (v68 & (v66 ^ v64) ^ v64);\n            v70 = (v69 / 1024 | 0x400000 * v69) + v68;\n            v71 = v24 - 0x9e1da9e + v64 + ((v70 ^ v68) & v66 ^ v68);\n            v72 = (v71 / 0x8000000 | 32 * v71) + v70;\n            v73 = v27 - 0x3fbf4cc0 + v66 + ((v72 ^ v70) & v68 ^ v70);\n            v74 = (v73 / 0x800000 | 512 * v73) + v72;\n            v75 = v30 + 0x265e5a51 + v68 + ((v74 ^ v72) & v70 ^ v72);\n            v76 = (v75 / 0x40000 | 0x4000 * v75) + v74;\n            v77 = v23 - 0x16493856 + v70 + ((v76 ^ v74) & v72 ^ v74);\n            v78 = (v77 / 0x1000 | 0x100000 * v77) + v76;\n            v79 = v26 - 0x29d0efa3 + v72 + ((v78 ^ v76) & v74 ^ v76);\n            v80 = (v79 / 0x8000000 | 32 * v79) + v78;\n            v81 = v56 + 0x2441453 + v74 + ((v80 ^ v78) & v76 ^ v78);\n            v82 = (v81 / 0x800000 | 512 * v81) + v80;\n            v83 = v40 - 0x275e197f + v76 + ((v82 ^ v80) & v78 ^ v80);\n            v84 = (v83 / 0x40000 | 0x4000 * v83) + v82;\n            v85 = v37 - 0x182c0438 + v78 + ((v84 ^ v82) & v80 ^ v82);\n            v86 = (v85 / 0x1000 | 0x100000 * v85) + v84;\n            v87 = v29 + 0x21e1cde6 + v80 + ((v86 ^ v84) & v82 ^ v84);\n            v88 = (v87 / 0x8000000 | 32 * v87) + v86;\n            v89 = v53 - 0x3cc8f82a + v82 + ((v88 ^ v86) & v84 ^ v86);\n            v90 = (v89 / 0x800000 | 512 * v89) + v88;\n            v91 = v25 - 0xb2af279 + v84 + ((v90 ^ v88) & v86 ^ v88);\n            v92 = (v91 / 0x40000 | 0x4000 * v91) + v90;\n            v93 = v47 + 0x455a14ed + v86 + ((v92 ^ v90) & v88 ^ v90);\n            v94 = (v93 / 0x1000 | 0x100000 * v93) + v92;\n            v95 = v59 - 0x561c16fb + v88 + ((v94 ^ v92) & v90 ^ v92);\n            v96 = (v95 / 0x8000000 | 32 * v95) + v94;\n            v97 = v34 - 0x3105c08 + v90 + ((v96 ^ v94) & v92 ^ v94);\n            v98 = (v97 / 0x800000 | 512 * v97) + v96;\n            v99 = v28 + 0x676f02d9 + v92 + ((v98 ^ v96) & v94 ^ v96);\n            v100 = (v99 / 0x40000 | 0x4000 * v99) + v98;\n            v101 = v100 ^ v98;\n            v102 = v50 - 0x72d5b376 + v94 + (v101 & v96 ^ v98);\n            v103 = (v102 / 0x1000 | 0x100000 * v102) + v100;\n            v104 = v26 - 0x5c6be + v96 + (v103 ^ v101);\n            v105 = (v104 / 0x10000000 | 16 * v104) + v103;\n            v106 = v105 ^ v103;\n            v107 = v47 - 0x788e097f + v98 + (v106 ^ v100);\n            v108 = (v107 / 0x200000 | 2048 * v107) + v105;\n            v109 = v30 + 0x6d9d6122 + v100 + (v108 ^ v106);\n            v110 = (v109 / 0x10000 | 0x10000 * v109) + v108;\n            v111 = v110 ^ v108;\n            v112 = v53 - 0x21ac7f4 + v103 + (v111 ^ v105);\n            v113 = (v112 / 512 | 0x800000 * v112) + v110;\n            v114 = v24 - 0x5b4115bc + v105 + (v111 ^ v113);\n            v115 = (v114 / 0x10000000 | 16 * v114) + v113;\n            v116 = v37 + 0x4bdecfa9 + v108 + (v113 ^ v110 ^ v115);\n            v117 = (v116 / 0x200000 | 2048 * v116) + v115;\n            v118 = v28 - 0x944b4a0 + v110 + (v115 ^ v113 ^ v117);\n            v119 = (v118 / 0x10000 | 0x10000 * v118) + v117;\n            v120 = v56 - 0x41404390 + v113 + (v117 ^ v115 ^ v119);\n            v121 = (v120 / 512 | 0x800000 * v120) + v119;\n            v122 = v59 + 0x289b7ec6 + v115 + (v119 ^ v117 ^ v121);\n            v123 = (v122 / 0x10000000 | 16 * v122) + v121;\n            v124 = v23 - 0x155ed806 + v117 + (v121 ^ v119 ^ v123);\n            v125 = (v124 / 0x200000 | 2048 * v124) + v123;\n            v126 = v25 - 0x2b10cf7b + v119 + (v123 ^ v121 ^ v125);\n            v127 = (v126 / 0x10000 | 0x10000 * v126) + v125;\n            v128 = v27 + 0x4881d05 + v121 + (v125 ^ v123 ^ v127);\n            v129 = (v128 / 512 | 0x800000 * v128) + v127;\n            v130 = v29 - 0x262b2fc7 + v123 + (v127 ^ v125 ^ v129);\n            v131 = (v130 / 0x10000000 | 16 * v130) + v129;\n            v132 = v50 - 0x1924661b + v125 + (v129 ^ v127 ^ v131);\n            v133 = (v132 / 0x200000 | 2048 * v132) + v131;\n            v134 = v40 + 0x1fa27cf8 + v127 + (v131 ^ v129 ^ v133);\n            v135 = (v134 / 0x10000 | 0x10000 * v134) + v133;\n            v136 = v34 - 0x3b53a99b + v129 + (v133 ^ v131 ^ v135);\n            v137 = (v136 / 512 | 0x800000 * v136) + v135;\n            v138 = v23 - 0xbd6ddbc + v131 + ((v137 | -1 - v133) ^ v135);\n            v139 = (v138 / 0x4000000 | 64 * v138) + v137;\n            v140 = v28 + 0x432aff97 + v133 + ((v139 | -1 - v135) ^ v137);\n            v141 = (v140 / 0x400000 | 1024 * v140) + v139;\n            v142 = v53 - 0x546bdc59 + v135 + ((v141 | -1 - v137) ^ v139);\n            v143 = (v142 / 0x20000 | 0x8000 * v142) + v141;\n            v144 = v26 - 0x36c5fc7 + v137 + ((v143 | -1 - v139) ^ v141);\n            v145 = (v144 / 2048 | 0x200000 * v144) + v143;\n            v146 = v50 + 0x655b59c3 + v139 + ((v145 | -1 - v141) ^ v143);\n            v147 = (v146 / 0x4000000 | 64 * v146) + v145;\n            v148 = v25 - 0x70f3336e + v141 + ((v147 | -1 - v143) ^ v145);\n            v149 = (v148 / 0x400000 | 1024 * v148) + v147;\n            v150 = v56 - 0x100b83 + v143 + ((v149 | -1 - v145) ^ v147);\n            v151 = (v150 / 0x20000 | 0x8000 * v150) + v149;\n            v152 = v24 - 0x7a7ba22f + v145 + ((v151 | -1 - v147) ^ v149);\n            v153 = (v152 / 2048 | 0x200000 * v152) + v151;\n            v154 = v47 + 0x6fa87e4f + v147 + ((v153 | -1 - v149) ^ v151);\n            v155 = (v154 / 0x4000000 | 64 * v154) + v153;\n            v156 = v40 - 0x1d31920 + v149 + ((v155 | -1 - v151) ^ v153);\n            v157 = (v156 / 0x400000 | 1024 * v156) + v155;\n            v158 = v27 - 0x5cfebcec + v151 + ((v157 | -1 - v153) ^ v155);\n            v159 = (v158 / 0x20000 | 0x8000 * v158) + v157;\n            v160 = v59 + 0x4e0811a1 + v153 + ((v159 | -1 - v155) ^ v157);\n            v161 = (v160 / 2048 | 0x200000 * v160) + v159;\n            v162 = v37 - 0x8ac817e + v155 + ((v161 | -1 - v157) ^ v159);\n            v163 = (v162 / 0x4000000 | 64 * v162) + v161;\n            v164 = v30 - 0x42c50dcb + v157 + ((v163 | -1 - v159) ^ v161);\n            v165 = (v164 / 0x400000 | 1024 * v164) + v163;\n            v166 = v34 + 0x2ad7d2bb + v159 + ((v165 | -1 - v161) ^ v163);\n            v167 = (v166 / 0x20000 | 0x8000 * v166) + v165;\n            v168 = v29 - 0x14792c6f + v161 + ((v167 | -1 - v163) ^ v165);\n            v14 += v163;\n            v169 = v167 + v20;\n            v170 = v167 + v21 + (v168 / 2048 | 0x200000 * v168);\n            v171 = v165 + v22;\n            v16 = v14;\n            v17 = v171;\n            v18 = v169;\n            v19 = v170;\n        }\n    }\n    // 0x40b22a\n    *(int32_t *)result = v16;\n    *v1 = v19;\n    *v6 = v18;\n    *v8 = v17;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b250",
            "funcStartAddr": "40b250",
            "funcEndAddr": "40b354",
            "decompiledFuncCode": "int64_t function_40b250(int128_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = (int64_t)a1;\n    uint32_t v2 = *(int32_t *)(v1 + 24); // 0x40b255\n    int32_t * v3 = (int32_t *)(v1 + 20); // 0x40b25b\n    int32_t v4 = *v3; // 0x40b25b\n    int32_t * v5 = (int32_t *)(v1 + 16); // 0x40b28a\n    uint32_t v6 = *v5 + v2; // 0x40b28a\n    *v5 = v6;\n    int32_t v7 = v4; // 0x40b290\n    if (v6 < v2) {\n        // 0x40b292\n        v7 = v4 + 1;\n        *v3 = v7;\n    }\n    int64_t v8 = v2; // 0x40b255\n    int64_t v9 = v2 < 56 ? 64 : 128; // 0x40b26a\n    int64_t v10 = v1 + 28; // 0x40b2a6\n    *(int32_t *)((v2 < 56 ? 56 : 120) + v10) = 8 * v6;\n    int64_t v11 = v9 - v8; // 0x40b2b4\n    *(int32_t *)((v2 < 56 ? 60 : 124) + v10) = 8 * v7 | v6 / 0x20000000;\n    int64_t v12 = v10 + v8; // 0x40b2bb\n    uint64_t v13 = v11 - 8; // 0x40b2bf\n    if (v13 >= 8) {\n        int64_t v14 = v12 + 8 & -8; // 0x40b300\n        *(int64_t *)v12 = 128;\n        *(int64_t *)(v13 + v12 - 8) = *(int64_t *)(v11 + 0x416ad0);\n        int64_t v15 = v12 - v14; // 0x40b313\n        __asm_rep_movsq_memcpy((char *)v14, (char *)((int64_t)\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" - v15), (v15 + v13) / 8);\n        // 0x40b323\n        function_40aae0(v10, v9, v1);\n        return function_40aac0(v1, (int64_t)a2);\n    }\n    if ((v13 & 4) != 0) {\n        // 0x40b340\n        *(int32_t *)v12 = 128;\n        *(int32_t *)(v13 + v12 - 4) = *(int32_t *)(v11 + 0x416ad4);\n        // 0x40b323\n        function_40aae0(v10, v9, v1);\n        return function_40aac0(v1, (int64_t)a2);\n    }\n    if (v13 == 0) {\n        // 0x40b323\n        function_40aae0(v10, v9, v1);\n        return function_40aac0(v1, (int64_t)a2);\n    }\n    // 0x40b2d3\n    *(char *)v12 = -128;\n    if ((v13 & 2) != 0) {\n        // 0x40b2e1\n        *(int16_t *)(v13 + v12 - 2) = *(int16_t *)(v11 + 0x416ad6);\n    }\n    // 0x40b323\n    function_40aae0(v10, v9, v1);\n    return function_40aac0(v1, (int64_t)a2);\n}\n"
        },
        {
            "funcName": "function_40b360",
            "funcStartAddr": "40b360",
            "funcEndAddr": "40b65e",
            "decompiledFuncCode": "int64_t function_40b360(char a1, uint64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = a1;\n    int64_t v3 = v1 + 24; // 0x40b377\n    int32_t * v4 = (int32_t *)v3; // 0x40b377\n    uint32_t v5 = *v4; // 0x40b377\n    int64_t v6 = v5; // 0x40b377\n    int64_t v7 = v6; // 0x40b37c\n    int64_t v8 = v2; // 0x40b37c\n    int64_t v9 = a2; // 0x40b37c\n    if (v5 != 0) {\n        int64_t v10 = v1 + 28; // 0x40b4bf\n        uint64_t v11 = 128 - v6; // 0x40b4c4\n        int64_t v12 = v11 > a2 ? a2 : v11; // 0x40b4ce\n        int32_t v13 = v12; // 0x40b4d8\n        int64_t * dest_mem = memcpy((int64_t *)(v10 + v6), (int64_t *)v2, v13); // 0x40b4d8\n        uint32_t v14 = *v4 + v13; // 0x40b4e2\n        *v4 = v14;\n        v7 = (int64_t)dest_mem;\n        if (v14 >= 65) {\n            // 0x40b550\n            function_40aae0(v10, (int64_t)(v14 & -64), v1);\n            uint32_t v15 = *v4; // 0x40b55e\n            int64_t v16 = (v12 + v6 & -64) + v10; // 0x40b56e\n            uint32_t v17 = v15 % 64; // 0x40b571\n            int64_t v18 = v17; // 0x40b571\n            *v4 = v17;\n            if (v17 >= 8) {\n                // 0x40b5b0\n                *(int64_t *)v10 = *(int64_t *)v16;\n                *(int64_t *)(v18 + v1 + 20) = *(int64_t *)(v16 + v18 - 8);\n                int64_t v19 = v1 + 36 & -8; // 0x40b5c9\n                int64_t v20 = v10 - v19; // 0x40b5cd\n                int64_t v21 = v16 - v20; // 0x40b5d0\n                uint32_t v22 = v17 + (int32_t)v20; // 0x40b5da\n                v7 = v21;\n                if (v22 >= 8) {\n                    int64_t v23 = 0;\n                    int64_t v24 = v23 + 8; // 0x40b5ec\n                    *(int64_t *)(v23 + v19) = *(int64_t *)(v23 + v21);\n                    v7 = v21;\n                    while ((v22 & -8) > (int32_t)v24) {\n                        // 0x40b5ea\n                        v23 = v24 & 0xffffffff;\n                        v24 = v23 + 8;\n                        *(int64_t *)(v23 + v19) = *(int64_t *)(v23 + v21);\n                        v7 = v21;\n                    }\n                }\n            } else {\n                int64_t v25 = v15; // 0x40b55e\n                if ((v25 & 4) != 0) {\n                    // 0x40b601\n                    *(int32_t *)v10 = *(int32_t *)v16;\n                    uint32_t v26 = *(int32_t *)(v16 + v18 - 4); // 0x40b608\n                    *(int32_t *)(v3 + v18) = v26;\n                    v7 = v26;\n                } else {\n                    // 0x40b583\n                    v7 = v16;\n                    if (v17 != 0) {\n                        // 0x40b58b\n                        *(char *)v10 = *(char *)v16;\n                        v7 = v16;\n                        if ((v25 & 2) != 0) {\n                            uint16_t v27 = *(int16_t *)(v16 + v18 - 2); // 0x40b59c\n                            *(int16_t *)(v18 + v1 + 26) = v27;\n                            v7 = v27;\n                        }\n                    }\n                }\n            }\n        }\n        // 0x40b4ef\n        v8 = v12 + v2;\n        v9 = a2 - v12;\n    }\n    uint64_t v28 = v9;\n    int64_t result = v7; // 0x40b386\n    int64_t v29 = v8; // 0x40b386\n    int64_t v30 = v28; // 0x40b386\n    int64_t v31; // 0x40b360\n    int64_t v32; // 0x40b360\n    int64_t v33; // 0x40b360\n    if (v28 < 64) {\n        goto lab_0x40b49c;\n    } else {\n        if (v8 % 4 == 0) {\n            int64_t v34 = v28 & -64; // 0x40b48d\n            result = function_40aae0(v8, v34, v1);\n            v29 = v34 + v8;\n            v30 = v28 % 64;\n            goto lab_0x40b49c;\n        } else {\n            int64_t v35 = v1 + 28; // 0x40b395\n            v33 = v35;\n            v31 = 64;\n            v32 = v8;\n            if (v28 != 64) {\n                int64_t v36 = (v28 - 1 & -64) + v8; // 0x40b3b7\n                int128_t v37 = __asm_movdqu(*(int128_t *)v8); // 0x40b3c0\n                int64_t v38 = v8 + 64; // 0x40b3cf\n                __asm_movups(*(int128_t *)v35, v37);\n                __asm_movups(*(int128_t *)(v1 + 44), __asm_movdqu(*(int128_t *)(v8 + 16)));\n                __asm_movups(*(int128_t *)(v1 + 60), __asm_movdqu(*(int128_t *)(v8 + 32)));\n                __asm_movups(*(int128_t *)(v1 + 76), __asm_movdqu(*(int128_t *)(v8 + 48)));\n                function_40aae0(v35, 64, v1);\n                while (v38 != v36) {\n                    int64_t v39 = v38;\n                    v37 = __asm_movdqu(*(int128_t *)v39);\n                    v38 = v39 + 64;\n                    __asm_movups(*(int128_t *)v35, v37);\n                    __asm_movups(*(int128_t *)(v1 + 44), __asm_movdqu(*(int128_t *)(v39 + 16)));\n                    __asm_movups(*(int128_t *)(v1 + 60), __asm_movdqu(*(int128_t *)(v39 + 32)));\n                    __asm_movups(*(int128_t *)(v1 + 76), __asm_movdqu(*(int128_t *)(v39 + 48)));\n                    function_40aae0(v35, 64, v1);\n                }\n                // 0x40b3fc\n                v33 = v35;\n                v31 = v28 - 64 - (v28 - 65 & -64);\n                v32 = v36;\n            }\n            goto lab_0x40b40b;\n        }\n    }\n  lab_0x40b49c:\n    // 0x40b49c\n    if (v30 == 0) {\n        // 0x40b4a5\n        return result;\n    }\n    // 0x40b651\n    v33 = v1 + 28;\n    v31 = v30;\n    v32 = v29;\n    goto lab_0x40b40b;\n  lab_0x40b40b:;\n    int64_t v40 = (int64_t)*v4; // 0x40b40b\n    int64_t v41 = v31 & 0xffffffff; // 0x40b410\n    int64_t v42 = v33 + v40; // 0x40b413\n    uint32_t v43 = (int32_t)v31; // 0x40b418\n    int64_t v44; // 0x40b360\n    if (v43 >= 8) {\n        int64_t v45 = v42 + 8 & -8; // 0x40b50a\n        *(int64_t *)v42 = *(int64_t *)v32;\n        *(int64_t *)(v42 + v41 - 8) = *(int64_t *)(v41 + v32 - 8);\n        int64_t v46 = v42 - v45; // 0x40b51e\n        int64_t v47 = v46 + v31; // 0x40b524\n        int64_t v48 = v47 & 0xfffffff8; // 0x40b527\n        v44 = v48;\n        if ((int32_t)v47 >= 8) {\n            int64_t v49 = 0;\n            int64_t v50 = v49 + 8; // 0x40b53a\n            *(int64_t *)(v49 + v45) = *(int64_t *)(v32 - v46 + v49);\n            v44 = v48;\n            while ((int32_t)v50 < (int32_t)v48) {\n                // 0x40b538\n                v49 = v50 & 0xffffffff;\n                v50 = v49 + 8;\n                *(int64_t *)(v49 + v45) = *(int64_t *)(v32 - v46 + v49);\n                v44 = v48;\n            }\n        }\n    } else {\n        if ((v31 & 4) != 0) {\n            // 0x40b628\n            *(int32_t *)v42 = *(int32_t *)v32;\n            uint32_t v51 = *(int32_t *)(v41 + v32 - 4); // 0x40b630\n            *(int32_t *)(v42 + v41 - 4) = v51;\n            v44 = v51;\n        } else {\n            // 0x40b42c\n            v44 = v41;\n            if (v43 != 0) {\n                // 0x40b431\n                *(char *)v42 = *(char *)v32;\n                v44 = v41;\n                if ((v31 & 2) != 0) {\n                    uint16_t v52 = *(int16_t *)(v41 + v32 - 2); // 0x40b641\n                    *(int16_t *)(v42 + v41 - 2) = v52;\n                    v44 = v52;\n                }\n            }\n        }\n    }\n    uint64_t v53 = v31 + v40; // 0x40b43f\n    int32_t v54; // 0x40b360\n    int64_t result2; // 0x40b360\n    if (v53 < 64) {\n        // 0x40b43f\n        v54 = v53;\n        result2 = v44;\n    } else {\n        // 0x40b448\n        function_40aae0(v33, 64, v1);\n        int32_t v55 = (int32_t)v53 - 64;\n        int64_t * dest_mem2 = memcpy((int64_t *)v33, (int64_t *)(v1 + 92), v55); // 0x40b467\n        v54 = v55;\n        result2 = (int64_t)dest_mem2;\n    }\n    // 0x40b46c\n    *v4 = v54;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b660",
            "funcStartAddr": "40b660",
            "funcEndAddr": "40b6b5",
            "decompiledFuncCode": "int64_t function_40b660(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = -0x1032547698badcff; // bp-168, 0x40b675\n    function_40b360((char)a1, a2, &v1);\n    int64_t v2; // 0x40b660\n    int64_t result = function_40b250((int128_t *)&v1, (int64_t *)a3, (int64_t)&v1, v2, v2); // 0x40b6a7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b6c0",
            "funcStartAddr": "40b6c0",
            "funcEndAddr": "40b7e5",
            "decompiledFuncCode": "int64_t function_40b6c0(int64_t a1, int64_t a2) {\n    int64_t * mem = malloc(0x8048); // 0x40b6da\n    if (mem == NULL) {\n        // 0x40b7d0\n        return 1;\n    }\n    int64_t v1 = (int64_t)mem; // 0x40b6da\n    int64_t v2; // 0x40b6c0\n    int32_t v3 = v2;\n    int64_t v4 = -0x1032547698badcff; // bp-200, 0x40b6fd\n    int32_t v5 = v3 & 16;\n    int64_t v6 = &v4;\n    int32_t v7; // 0x40b6c0\n    int64_t v8; // 0x40b74c\n    while (true) {\n        int64_t v9 = 0;\n        int32_t v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1); // 0x40b747\n        v8 = v9 + (int64_t)v10;\n        while (v8 != 0x8000) {\n            if (v10 == 0) {\n                // break (via goto) -> 0x40b76a\n                goto lab_0x40b76a;\n            }\n            // 0x40b730\n            v7 = v5;\n            if (v5 != 0) {\n                goto lab_0x40b76f;\n            }\n            v9 = v8;\n            v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1);\n            v8 = v9 + (int64_t)v10;\n        }\n        // 0x40b758\n        function_40aae0(v1, 0x8000, v6);\n    }\n  lab_0x40b76a:;\n    int32_t v11 = v3 & 32; // 0x40b76a\n    v7 = v11;\n    if (v11 != 0) {\n        // 0x40b7b0\n        free(mem);\n        return 1;\n    }\n  lab_0x40b76f:;\n    int64_t v12 = v7; // 0x40b772\n    if (v8 != 0) {\n        // 0x40b7a0\n        function_40b360((char)v1, v8, &v4);\n        v12 = v6;\n    }\n    // 0x40b774\n    function_40b250((int128_t *)&v4, (int64_t *)a2, v12, a1, v2);\n    free(mem);\n    return (int32_t)&g122 ^ (int32_t)&g122;\n}\n"
        },
        {
            "funcName": "function_40b7f0",
            "funcStartAddr": "40b7f0",
            "funcEndAddr": "40b7f5",
            "decompiledFuncCode": "int64_t function_40b7f0(void) {\n    // 0x40b7f0\n    int64_t fd; // 0x40b7f0\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_40b800",
            "funcStartAddr": "40b800",
            "funcEndAddr": "40b821",
            "decompiledFuncCode": "int64_t function_40b800(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x40b800\n    if (stream == 0) {\n        // 0x40b820\n        int64_t result; // 0x40b800\n        return result;\n    }\n    // 0x40b805\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40b830",
            "funcStartAddr": "40b830",
            "funcEndAddr": "40b8f3",
            "decompiledFuncCode": "int64_t function_40b830(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a1;\n    char v2 = v1;\n    int64_t v3 = 0; // 0x40b838\n    int64_t v4 = 0; // 0x40b838\n    char v5 = v2; // 0x40b838\n    int64_t v6 = v1; // 0x40b838\n    int64_t result = 0; // 0x40b838\n    if (v2 == 0) {\n      lab_0x40b8c1_2:\n        // 0x40b8c1\n        return result;\n    }\n    int64_t v7; // 0x40b830\n    int64_t v8; // 0x40b830\n    int64_t v9; // 0x40b830\n    char v10; // 0x40b830\n    int64_t v11; // 0x40b830\n    int64_t v12; // 0x40b830\n    while (true) {\n      lab_0x40b88f:\n        // 0x40b88f\n        v12 = v6;\n        v10 = v5;\n        int64_t v13 = v4;\n        v8 = v3;\n        int64_t v14 = v8; // 0x40b8af\n        char v15 = v10; // 0x40b8ba\n        int64_t v16 = v12; // 0x40b8b3\n        while ((char)v13 == 0) {\n            int64_t v17 = v16;\n            char v18 = v15;\n            int64_t v19 = v14;\n            if (v18 == 46) {\n                // 0x40b8d8\n                v11 = v17;\n                v7 = v19 == 0 ? v17 : v19;\n                v9 = 1;\n                goto lab_0x40b881_2;\n            }\n            if (v18 > 90) {\n                // 0x40b8c8\n                if (v18 < 123) {\n                    goto lab_0x40b881_2;\n                }\n            } else {\n                // 0x40b89d\n                v11 = v17;\n                v7 = v19;\n                v9 = v13;\n                if (v18 > 64 || v18 < 58) {\n                    goto lab_0x40b881_2;\n                }\n            }\n            // 0x40b8ac\n            v14 = v18 != 126 ? 0 : v19;\n            v16 = v17 + 1;\n            *a1 = v16;\n            v15 = *(char *)v16;\n            result = v14;\n            if (v15 == 0) {\n                return result;\n            }\n        }\n        uint32_t v20 = (int32_t)v10 - 65; // 0x40b863\n        if (v10 == 122 || v20 < 57) {\n            uint32_t v21 = v20 % 64;\n            v11 = v12;\n            v7 = v8;\n            v9 = 0;\n            if (v21 != 0 != ((1 << (int64_t)v21) % 0x3ffffff04000000 == 0)) {\n                goto lab_0x40b881_2;\n            } else {\n                goto lab_0x40b878;\n            }\n        } else {\n            goto lab_0x40b878;\n        }\n    }\n    // 0x40b8c1\n    return result;\n  lab_0x40b881_2:;\n    int64_t v22 = v11 + 1; // 0x40b881\n    *a1 = v22;\n    char v23 = *(char *)v22; // 0x40b888\n    v3 = v7;\n    v4 = v9;\n    v5 = v23;\n    v6 = v22;\n    result = v7;\n    if (v23 == 0) {\n        return result;\n    }\n    goto lab_0x40b88f;\n  lab_0x40b878:\n    // 0x40b878\n    v11 = v12;\n    v7 = v10 != 126 ? 0 : v8;\n    v9 = 0;\n    goto lab_0x40b881_2;\n}\n"
        },
        {
            "funcName": "function_40b900",
            "funcStartAddr": "40b900",
            "funcEndAddr": "40bd0d",
            "decompiledFuncCode": "int64_t function_40b900(int64_t str, int64_t str2) {\n    // 0x40b900\n    int64_t v1; // 0x40b900\n    uint64_t v2 = v1;\n    uint32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40b914\n    if (strcmp_rc == 0) {\n        // 0x40bb86\n        return 0;\n    }\n    char v3 = v2;\n    if (v3 == 0) {\n        // 0x40bb86\n        return 0xffffffff;\n    }\n    char v4 = v1;\n    if (v4 == 0) {\n        // 0x40bb86\n        return 1;\n    }\n    int64_t result2 = strcmp_rc; // 0x40b919\n    uint64_t v5 = v2 % 256; // 0x40b924\n    uint64_t v6 = v1 % 256; // 0x40b931\n    bool v7; // 0x40b900\n    int64_t v8 = v7 ? -1 : 1;\n    int64_t v9 = str; // 0x40b900\n    int64_t v10 = (int64_t)&g12; // 0x40b900\n    int64_t v11 = 2; // 0x40b94f\n    unsigned char v12 = *(char *)v10; // 0x40b94f\n    char v13 = *(char *)v9; // 0x40b94f\n    char v14 = v13; // 0x40b94f\n    bool v15 = false; // 0x40b94f\n    while (v12 == v13) {\n        v11--;\n        v9 += v8;\n        v10 += v8;\n        v14 = v12;\n        v15 = true;\n        if (v11 == 0) {\n            // break -> \n            break;\n        }\n        v12 = *(char *)v10;\n        v13 = *(char *)v9;\n        v14 = v13;\n        v15 = false;\n    }\n    unsigned char v16 = v14;\n    int64_t v17 = str2; // 0x40b958\n    int64_t v18 = (int64_t)&g12; // 0x40b958\n    if ((v12 >= v16 && !v15) == v12 < v16) {\n        // 0x40bb86\n        return 0xffffffff;\n    }\n    int64_t v19 = 2; // 0x40b958\n    unsigned char v20 = *(char *)v18; // 0x40b969\n    char v21 = *(char *)v17; // 0x40b969\n    char v22 = v21; // 0x40b969\n    bool v23 = false; // 0x40b969\n    while (v20 == v21) {\n        // 0x40b95e\n        v19--;\n        v17 += v8;\n        v18 += v8;\n        v22 = v20;\n        v23 = true;\n        if (v19 == 0) {\n            // break -> \n            break;\n        }\n        v20 = *(char *)v18;\n        v21 = *(char *)v17;\n        v22 = v21;\n        v23 = false;\n    }\n    unsigned char v24 = v22;\n    int64_t v25 = str; // 0x40b972\n    int64_t v26 = (int64_t)\"..\"; // 0x40b972\n    if ((v20 >= v24 && !v23) == v20 < v24) {\n        // 0x40bb86\n        return 1;\n    }\n    int64_t v27 = 3; // 0x40b972\n    unsigned char v28 = *(char *)v26; // 0x40b988\n    char v29 = *(char *)v25; // 0x40b988\n    char v30 = v29; // 0x40b988\n    bool v31 = false; // 0x40b988\n    while (v28 == v29) {\n        // 0x40b978\n        v27--;\n        v25 += v8;\n        v26 += v8;\n        v30 = v28;\n        v31 = true;\n        if (v27 == 0) {\n            // break -> \n            break;\n        }\n        v28 = *(char *)v26;\n        v29 = *(char *)v25;\n        v30 = v29;\n        v31 = false;\n    }\n    unsigned char v32 = v30;\n    int64_t v33 = str2; // 0x40b991\n    int64_t v34 = (int64_t)\"..\"; // 0x40b991\n    if ((v28 >= v32 && !v31) == v28 < v32) {\n        // 0x40bb86\n        return 0xffffffff;\n    }\n    int64_t v35 = 3; // 0x40b991\n    unsigned char v36 = *(char *)v34; // 0x40b9a2\n    char v37 = *(char *)v33; // 0x40b9a2\n    v34 += v8;\n    v35--;\n    char v38 = v37; // 0x40b9a2\n    bool v39 = false; // 0x40b9a2\n    while (v36 == v37) {\n        // 0x40b997\n        v33 += v8;\n        v38 = v36;\n        v39 = true;\n        if (v35 == 0) {\n            // break -> \n            break;\n        }\n        v36 = *(char *)v34;\n        v37 = *(char *)v33;\n        v34 += v8;\n        v35--;\n        v38 = v37;\n        v39 = false;\n    }\n    unsigned char v40 = v38;\n    if ((v36 >= v40 && !v39) == v36 < v40) {\n        // 0x40bb86\n        return 1;\n    }\n    // 0x40b9b1\n    if (v3 == 46 == (v4 != 46)) {\n        // 0x40bb86\n        return 0xffffffff;\n    }\n    int64_t str4; // 0x40b900\n    int64_t str3; // 0x40b900\n    if (v3 == 46) {\n        // 0x40bbd0\n        str3 = str;\n        str4 = str2;\n        if (v4 == 46) {\n            // 0x40bbe0\n            str3 = str + 1;\n            str4 = str2 + 1;\n        }\n    } else {\n        // 0x40b9d7\n        str3 = str;\n        str4 = str2;\n        if (v4 == 46) {\n            // 0x40bb86\n            return 1;\n        }\n    }\n    int64_t v41 = (int64_t)(v3 == 46) | (int64_t)\"..\" & -256; // 0x40b9b5\n    int64_t v42 = str3; // bp-72, 0x40b9e4\n    int64_t v43 = str4; // bp-64, 0x40b9e9\n    int64_t v44 = function_40b830(&v42, v34, v41, v35, v5, v6); // 0x40b9ee\n    int64_t v45 = function_40b830(&v43, v34, v41, v35, v5, v6); // 0x40b9fb\n    int64_t v46; // 0x40b900\n    int64_t n; // 0x40b900\n    int64_t v47; // 0x40b900\n    if (v44 == 0) {\n        int64_t v48 = v42 - str3; // 0x40bc7d\n        n = v48;\n        v46 = v45;\n        v47 = v48;\n        if (v45 != 0) {\n            goto lab_0x40ba1b;\n        } else {\n            goto lab_0x40bc89;\n        }\n    } else {\n        // 0x40ba09\n        n = v44 - str3;\n        v46 = v45 == 0 ? v43 : v45;\n        goto lab_0x40ba1b;\n    }\n  lab_0x40ba51:;\n    // 0x40ba51\n    int64_t v49; // 0x40b900\n    int64_t v50 = v49;\n    int64_t v51; // 0x40b900\n    int64_t v52 = v51;\n    char v53 = *(char *)(v50 + str3); // 0x40ba51\n    int64_t v54 = v52; // 0x40ba5e\n    int64_t v55 = v50; // 0x40ba5e\n    int32_t v56; // 0x40b900\n    int64_t v57; // 0x40b900\n    int64_t v58; // 0x40b900\n    int64_t v59; // 0x40b900\n    int64_t v60; // 0x40b900\n    uint64_t v61; // 0x40b900\n    char v62; // 0x40b900\n    int64_t v63; // 0x40b900\n    int64_t v64; // 0x40b900\n    int64_t v65; // 0x40b900\n    if (v53 == 57 || (int32_t)v53 < 57) {\n        goto lab_0x40bad0;\n    } else {\n        int32_t v66 = v53;\n        v56 = v66;\n        v57 = v52;\n        v62 = v53;\n        v63 = v50;\n        if (v66 < 58) {\n            // 0x40bbb8\n            v58 = v61;\n            v64 = v50;\n            if (v61 == v52) {\n                goto lab_0x40bac3;\n            } else {\n                // 0x40bbc1\n                v59 = v52;\n                v60 = (int64_t)*(char *)(v52 + str4);\n                v65 = v50;\n                goto lab_0x40bb06;\n            }\n        } else {\n            goto lab_0x40ba74;\n        }\n    }\n  lab_0x40bad0:;\n    int64_t v67 = v55;\n    int64_t v68 = v54;\n    char v69 = *(char *)(v68 + str4); // 0x40bad0\n    uint64_t v70; // 0x40b900\n    if (v61 > v68) {\n        if (v69 == 57 || (int32_t)v69 < 57) {\n            goto lab_0x40bb44;\n        } else {\n            int64_t v71 = v69; // 0x40bad0\n            v59 = v68;\n            v60 = v71;\n            v65 = v70;\n            if (v70 == v67) {\n                goto lab_0x40bb06;\n            } else {\n                unsigned char v72 = *(char *)(v67 + str3); // 0x40baef\n                int32_t v73 = v72;\n                v56 = v73;\n                v57 = v68;\n                v62 = v72;\n                v63 = v67;\n                v59 = v68;\n                v60 = v71;\n                v65 = v67;\n                if (v72 == 57 || v73 < 57) {\n                    goto lab_0x40bb06;\n                } else {\n                    goto lab_0x40ba74;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40bb44;\n    }\n  lab_0x40bb44:;\n    int64_t v74 = v67;\n    char v75 = *(char *)(v74 + str3); // 0x40bb44\n    int64_t v76 = v74 + 1; // 0x40bb4a\n    while (v75 == 48) {\n        // 0x40bb44\n        v74 = v76;\n        v75 = *(char *)(v74 + str3);\n        v76 = v74 + 1;\n    }\n    int64_t v77 = v68; // 0x40bb50\n    int64_t v78 = v68; // 0x40bb50\n    char v79 = v69; // 0x40bb50\n    if (v69 == 48) {\n        int64_t v80 = v77 + 1; // 0x40bb58\n        char v81 = *(char *)(v80 + str4); // 0x40bb5c\n        v77 = v80;\n        v78 = v80;\n        v79 = v81;\n        while (v81 == 48) {\n            // 0x40bb58\n            v80 = v77 + 1;\n            v81 = *(char *)(v80 + str4);\n            v77 = v80;\n            v78 = v80;\n            v79 = v81;\n        }\n    }\n    char v82 = v79;\n    int64_t v83 = v78;\n    int64_t v84; // 0x40b900\n    int64_t result; // 0x40b900\n    int64_t v85; // 0x40b900\n    if ((int32_t)v75 < 58) {\n        // 0x40bb72\n        result = 1;\n        if ((int32_t)v82 >= 58) {\n            return result;\n        }\n        int64_t v86 = 0;\n        int64_t v87 = v86 == 0 ? (int64_t)v75 - (int64_t)v82 : v86; // 0x40bc04\n        int64_t v88 = v87 & 0xffffffff; // 0x40bc04\n        int64_t v89 = v74 + 1; // 0x40bc08\n        char v90 = *(char *)(str4 - v74 + v83 + v89); // 0x40bc0f\n        char v91 = *(char *)(v89 + str3); // 0x40bc23\n        while (v91 == 57 || (int32_t)v91 < 57) {\n            // 0x40bca0\n            result = 1;\n            if ((int32_t)v90 >= 58) {\n                return result;\n            }\n            v86 = v88;\n            v87 = v86 == 0 ? (int64_t)v91 - (int64_t)v90 : v86;\n            v88 = v87 & 0xffffffff;\n            v89++;\n            v90 = *(char *)(str4 - v74 + v83 + v89);\n            v91 = *(char *)(v89 + str3);\n        }\n        // 0x40bc36\n        result = 0xffffffff;\n        if ((int32_t)v90 < 58) {\n            return result;\n        }\n        // 0x40bc41\n        result = v88;\n        v84 = v89 - v74 + v83;\n        v85 = v89;\n        if ((int32_t)v87 != 0) {\n            return result;\n        }\n    } else {\n        // 0x40bba0\n        result = 0xffffffff;\n        v84 = v83;\n        v85 = v74;\n        if ((int32_t)v82 < 58) {\n            return result;\n        }\n    }\n    int64_t v92 = v84; // 0x40ba3b\n    bool v93 = v70 > v85; // 0x40ba3b\n    int64_t v94 = v85; // 0x40ba3b\n    result = result2;\n    if (v61 <= v84 && v70 <= v85) {\n        return result;\n    }\n    goto lab_0x40ba46;\n  lab_0x40ba74:;\n    // 0x40ba74\n    int64_t v96; // 0x40b900\n    int64_t v95; // 0x40b900\n    int64_t v97 = v96 - v95; // 0x40ba49\n    int64_t v98 = v63;\n    unsigned char v99 = v62;\n    int64_t v100 = v57; // 0x40baa7\n    int64_t v101 = v99;\n    int64_t v102; // 0x40b900\n    int64_t v103; // 0x40b900\n    int64_t v104; // 0x40b900\n    int64_t v105; // 0x40b900\n    if (v56 < 123) {\n        if ((1 << (int64_t)((v99 + 63) % 64)) % 0x3ffffff04000000 != 0) {\n            // 0x40bc60\n            v102 = v100;\n            v104 = 0;\n            v105 = v98;\n            v103 = v101;\n            if (v61 != v98 + v97) {\n                goto lab_0x40baa7;\n            } else {\n                goto lab_0x40baba;\n            }\n        } else {\n            goto lab_0x40ba8b;\n        }\n    } else {\n        goto lab_0x40ba8b;\n    }\n  lab_0x40bac3:;\n    int64_t v106 = v64 + 1; // 0x40bac3\n    int64_t v107 = v58 + 1; // 0x40bac7\n    v51 = v107;\n    v49 = v106;\n    v54 = v107;\n    v55 = v106;\n    if (v70 > v106) {\n        goto lab_0x40ba51;\n    } else {\n        goto lab_0x40bad0;\n    }\n  lab_0x40ba8b:;\n    int64_t v108 = v99 == 126 ? 0xffffffff : v101 | 256;\n    result = v108;\n    if (v61 == v98 + v97) {\n        // break -> 0x40bb86\n        goto lab_0x40bb86_7;\n    }\n    goto lab_0x40baa7;\n  lab_0x40bb06:\n    // 0x40bb06\n    v58 = v59;\n    v64 = v65;\n    int64_t v110 = v60; // 0x40bb13\n    int64_t v111 = v59; // 0x40bb13\n    int64_t v112 = v65; // 0x40bb13\n    int64_t v113 = 0; // 0x40bb13\n    if ((int32_t)v60 < 58) {\n        goto lab_0x40bac3;\n    } else {\n        goto lab_0x40bb15;\n    }\n  lab_0x40baa7:;\n    unsigned char v109 = *(char *)(v100 + str4); // 0x40baa7\n    v102 = v100;\n    v104 = 0;\n    v105 = v98;\n    v103 = v108;\n    v110 = v109;\n    v111 = v100;\n    v112 = v98;\n    v113 = v108;\n    if (v109 == 57 || (int32_t)v109 < 57) {\n        goto lab_0x40baba;\n    } else {\n        goto lab_0x40bb15;\n    }\n  lab_0x40bb15:;\n    int64_t v114 = v113;\n    int64_t v115 = v112;\n    int64_t v116 = v111;\n    int64_t v117 = v110;\n    uint64_t v118 = v117 + 0xffffffbf; // 0x40bb19\n    if ((int32_t)v118 < 58) {\n        // 0x40bb21\n        v102 = v116;\n        v104 = v117;\n        v105 = v115;\n        v103 = v114;\n        if ((1 << v118 % 64) % 0x3ffffff04000000 != 0) {\n            goto lab_0x40baba;\n        } else {\n            goto lab_0x40bb2c;\n        }\n    } else {\n        goto lab_0x40bb2c;\n    }\n  lab_0x40baba:;\n    int64_t v119 = v103;\n    int64_t v120 = v104;\n    v58 = v102;\n    v64 = v105;\n    if ((int32_t)v120 != (int32_t)v119) {\n        // 0x40bced\n        result = v119 - v120 & 0xffffffff;\n        goto lab_0x40bb86_7;\n    }\n    goto lab_0x40bac3;\n  lab_0x40bb2c:\n    // 0x40bb2c\n    v102 = v116;\n    v104 = (char)v117 == 126 ? 0xffffffff : v117 | 256;\n    v105 = v115;\n    v103 = v114;\n    goto lab_0x40baba;\n  lab_0x40ba1b:;\n    int64_t v121 = v46 - str4;\n    int64_t v122 = n; // 0x40ba1e\n    int64_t v123 = v121; // 0x40ba1e\n    if (n == v121) {\n        int32_t strncmp_rc = strncmp((char *)str3, (char *)str4, (int32_t)n); // 0x40bcb9\n        v122 = n;\n        v123 = n;\n        if (strncmp_rc != 0) {\n            goto lab_0x40ba24;\n        } else {\n            // 0x40bcc6\n            v47 = v42 - str3;\n            goto lab_0x40bc89;\n        }\n    } else {\n        goto lab_0x40ba24;\n    }\n  lab_0x40bc89:\n    // 0x40bc89\n    v122 = v47;\n    v123 = v43 - str4;\n    goto lab_0x40ba24;\n  lab_0x40ba24:\n    // 0x40ba24\n    v61 = v123;\n    v70 = v122;\n    if ((v61 || v70) == 0) {\n        // 0x40bb86\n        return result2;\n    }\n    // 0x40ba46\n    v92 = 0;\n    v93 = v70 != 0;\n    v94 = 0;\n    while (true) {\n      lab_0x40ba46:\n        // 0x40ba46\n        v95 = v94;\n        v96 = v92;\n        v51 = v96;\n        v49 = v95;\n        v54 = v96;\n        v55 = v95;\n        if (v93) {\n            goto lab_0x40ba51;\n        } else {\n            goto lab_0x40bad0;\n        }\n    }\n  lab_0x40bb86_7:\n    // 0x40bb86\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bd10",
            "funcStartAddr": "40bd10",
            "funcEndAddr": "40bd6e",
            "decompiledFuncCode": "int64_t function_40bd10(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x40bd16\n    if (locale == NULL) {\n        // 0x40bd43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40bd16\n    bool v2; // 0x40bd10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x40bd10\n    int64_t v5 = v1; // 0x40bd10\n    int64_t v6 = 2; // 0x40bd35\n    unsigned char v7 = *(char *)v5; // 0x40bd35\n    char v8 = *(char *)v4; // 0x40bd35\n    char v9 = v8; // 0x40bd35\n    bool v10 = false; // 0x40bd35\n    while (v7 == v8) {\n        // 0x40bd28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40bd41\n    int64_t v13 = v1; // 0x40bd41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40bd43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40bd41\n    unsigned char v15 = *(char *)v13; // 0x40bd5d\n    char v16 = *(char *)v12; // 0x40bd5d\n    char v17 = v16; // 0x40bd5d\n    bool v18 = false; // 0x40bd5d\n    while (v15 == v16) {\n        // 0x40bd50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40bd70",
            "funcStartAddr": "40bd70",
            "funcEndAddr": "40be03",
            "decompiledFuncCode": "int64_t function_40bd70(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40bd87\n    if (v1 == -1) {\n        // 0x40bdff\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40bd8f\n    int64_t v3; // 0x40bd70\n    while (true) {\n      lab_0x40bd98:\n        // 0x40bd98\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40bdf0;\n        } else {\n            goto lab_0x40bdf5;\n        }\n    }\n  lab_0x40bdff_2:;\n    // 0x40bdff\n    int64_t result; // 0x40bd70\n    return result;\n  lab_0x40bdf5:;\n    int64_t v4 = v3 + 2; // 0x40bdf5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40bdff\n        goto lab_0x40bdff_2;\n    }\n    goto lab_0x40bd98;\n  lab_0x40bdf0:\n    // 0x40bdf0\n    result = v3;\n    goto lab_0x40bdf5;\n}\n"
        },
        {
            "funcName": "function_40be10",
            "funcStartAddr": "40be10",
            "funcEndAddr": "40be20",
            "decompiledFuncCode": "int64_t function_40be10(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40be10\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40be20",
            "funcStartAddr": "40be20",
            "funcEndAddr": "40be27",
            "decompiledFuncCode": "int64_t function_40be20(int64_t a1, int64_t a2) {\n    // 0x40be20\n    int64_t v1; // 0x40be20\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40be30",
            "funcStartAddr": "40be30",
            "funcEndAddr": "40be51",
            "decompiledFuncCode": "int64_t function_40be30(int64_t a1, int64_t a2) {\n    // 0x40be30\n    int64_t v1; // 0x40be30\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x40be48\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40be60",
            "funcStartAddr": "40be60",
            "funcEndAddr": "40bf79",
            "decompiledFuncCode": "int64_t function_40be60(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40be30(a1, a2); // 0x40be74\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40be7c\n    int64_t result2 = *v2; // 0x40be7c\n    if (result2 == 0) {\n        // 0x40bf0e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40bea4\n            if (v3 == 0) {\n                // 0x40bf0e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40beb1\n            int64_t v5 = v3; // 0x40beb7\n            int64_t v6 = v1; // 0x40beb7\n            int64_t result = v4; // 0x40beb7\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40beec_2:\n                // 0x40beec\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40bef1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40bf00\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40bf0e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40bec4\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40bed1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40beec_2;\n                }\n                // 0x40bed9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40beec_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40bf0e\n            return 0;\n        }\n    }\n    // 0x40bf23\n    if ((char)a4 == 0) {\n        // 0x40bf0e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40bf28\n    if (v12 == 0) {\n        // 0x40bf70\n        *v2 = 0;\n        // 0x40bf0e\n        return result2;\n    }\n    // 0x40bf31\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40bf3f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bf80",
            "funcStartAddr": "40bf80",
            "funcEndAddr": "40bffe",
            "decompiledFuncCode": "int64_t function_40bf80(uint64_t a1) {\n    if (a1 == (int64_t)&g13) {\n        // 0x40bffd\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40bf8b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g13) {\n        // 0x40bfea\n        *(int64_t *)a1 = (int64_t)&g13;\n        return 0;\n    }\n    // 0x40bf99\n    __asm_comiss_5(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40bfb4\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_6(v2, 0x3dcccccd); // 0x40bfc1\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40bfc9\n    __asm_comiss_5(v4, v3);\n    __asm_comiss_5(__asm_movss(0x3f800000), v4);\n    __asm_comiss_5(v1, v3);\n    // 0x40bffd\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40c000",
            "funcStartAddr": "40c000",
            "funcEndAddr": "40c14a",
            "decompiledFuncCode": "int64_t function_40c000(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40c01a\n    uint64_t v2 = *v1; // 0x40c01a\n    if (v2 <= a2) {\n        // 0x40c104\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40c000\n    int64_t v8 = a2; // 0x40c000\n    int64_t v9; // 0x40c000\n    int64_t result; // 0x40c000\n    int64_t v10; // 0x40c000\n    while (true) {\n      lab_0x40c036_2:\n        // 0x40c036\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40c036\n        int64_t v12 = *v11; // 0x40c036\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40c028;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40c03f\n            int64_t v14 = *v13; // 0x40c03f\n            int64_t v15 = v14; // 0x40c047\n            int64_t v16 = v12; // 0x40c047\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40c064\n                    int64_t v19 = *v18; // 0x40c064\n                    int64_t v20 = function_40be30(v3, v19); // 0x40c06d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40c072\n                    int64_t v22 = *v21; // 0x40c072\n                    int64_t * v23 = (int64_t *)v20; // 0x40c076\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40c050\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40c09f\n                            break;\n                        }\n                    } else {\n                        // 0x40c07c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40c09f\n                            break;\n                        }\n                    }\n                    // 0x40c064\n                    v15 = v22;\n                }\n                // 0x40c09f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40c0a3\n                v9 = *v1;\n                goto lab_0x40c028;\n            } else {\n                int64_t v26 = function_40be30(v3, v25); // 0x40c0bb\n                int64_t * v27 = (int64_t *)v26; // 0x40c0c0\n                if (*v27 == 0) {\n                    // 0x40c120\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40c0c9\n                    int64_t * v29; // 0x40c000\n                    int64_t v30; // 0x40c000\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40c12f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40c104\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40c12f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40c0da\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40c0e9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40c0f1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40c0fa\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40c104\n                    break;\n                }\n                goto lab_0x40c036_2;\n            }\n        }\n    }\n    // 0x40c104\n    return result;\n  lab_0x40c028:;\n    int64_t v36 = v10 + 16; // 0x40c028\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40c036_2;\n    // 0x40c036\n    goto lab_0x40c036_2;\n}\n"
        },
        {
            "funcName": "function_40c150",
            "funcStartAddr": "40c150",
            "funcEndAddr": "40c155",
            "decompiledFuncCode": "int64_t function_40c150(int64_t a1) {\n    // 0x40c150\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40c160",
            "funcStartAddr": "40c160",
            "funcEndAddr": "40c165",
            "decompiledFuncCode": "int64_t function_40c160(int64_t a1) {\n    // 0x40c160\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40c170",
            "funcStartAddr": "40c170",
            "funcEndAddr": "40c175",
            "decompiledFuncCode": "int64_t function_40c170(int64_t a1) {\n    // 0x40c170\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40c180",
            "funcStartAddr": "40c180",
            "funcEndAddr": "40c1cf",
            "decompiledFuncCode": "int64_t function_40c180(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c183\n    int64_t result = 0; // 0x40c18c\n    if (v1 <= a1) {\n      lab_0x40c1cd:\n        // 0x40c1cd\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40c190\n    while (*(int64_t *)v3 == 0) {\n        // 0x40c190\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40c19f\n    int64_t v6 = v5; // 0x40c1ab\n    int64_t v7 = 1; // 0x40c1ab\n    int64_t v8; // 0x40c180\n    int64_t v9; // 0x40c1b0\n    int64_t v10; // 0x40c1b4\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40c1b0\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40c1c0\n    int64_t v12 = v3 + 16; // 0x40c1c4\n    while (v12 < v1) {\n        // 0x40c199\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40c190\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40c19f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40c1b0\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40c1bd\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40c1cd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c1d0",
            "funcStartAddr": "40c1d0",
            "funcEndAddr": "40c237",
            "decompiledFuncCode": "int64_t function_40c1d0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c1d3\n    int64_t v2 = a1; // 0x40c1df\n    int64_t v3 = 0; // 0x40c1df\n    int64_t v4 = 0; // 0x40c1df\n    int64_t v5 = 0; // 0x40c1df\n    int64_t v6 = 0; // 0x40c1df\n    int64_t v7; // 0x40c1d0\n    int64_t v8; // 0x40c1d0\n    int64_t v9; // 0x40c1d0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40c1f1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40c1e8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40c1f7\n                int64_t v13 = v10 + 1; // 0x40c1fb\n                int64_t v14 = v11 + 1; // 0x40c1ff\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40c206\n                int64_t v16 = v14; // 0x40c206\n                if (v12 == 0) {\n                    goto lab_0x40c1e8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40c210\n                    int64_t v18 = v16 + 1; // 0x40c214\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40c210\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40c21d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40c226\n                        break;\n                    }\n                    goto lab_0x40c1f1_2;\n                }\n            }\n        }\n    }\n  lab_0x40c226:\n    // 0x40c226\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40c22f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40c22e\n    return 0;\n  lab_0x40c1e8:;\n    int64_t v20 = v8 + 16; // 0x40c1e8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40c226\n        goto lab_0x40c226;\n    }\n    goto lab_0x40c1f1_2;\n    // 0x40c1f1\n    goto lab_0x40c1f1_2;\n}\n"
        },
        {
            "funcName": "function_40c240",
            "funcStartAddr": "40c240",
            "funcEndAddr": "40c388",
            "decompiledFuncCode": "int64_t function_40c240(uint64_t a1, int64_t a2) {\n    // 0x40c240\n    int128_t v1; // 0x40c240\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40c253\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40c257\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40c25e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40c270\n            while (*(int64_t *)v7 == 0) {\n                // 0x40c270\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40c2ad\n                    goto lab_0x40c2ad;\n                }\n            }\n        }\n    }\n  lab_0x40c2ad:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40c2bc\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40c240\n    int128_t v10; // 0x40c240\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40c353\n        int128_t v12 = __asm_mulsd_4(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40c35c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40c2f3;\n        } else {\n            goto lab_0x40c369;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd_4(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40c2e6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40c369;\n        } else {\n            goto lab_0x40c2f3;\n        }\n    }\n  lab_0x40c2f3:\n    // 0x40c2f3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40c2f7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40c2f7\n    goto lab_0x40c2fc;\n  lab_0x40c369:\n    // 0x40c369\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40c37a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40c2fc;\n  lab_0x40c2fc:\n    // 0x40c2fc\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd_10(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40c390",
            "funcStartAddr": "40c390",
            "funcEndAddr": "40c3e3",
            "decompiledFuncCode": "int64_t function_40c390(int64_t a1, int64_t result) {\n    int64_t v1 = function_40be30(a1, result); // 0x40c39a\n    int64_t v2 = *(int64_t *)v1; // 0x40c39f\n    if (v2 == 0) {\n        // 0x40c3cd\n        return 0;\n    }\n    // 0x40c3b3\n    if (v2 == result) {\n        // 0x40c3cd\n        return result;\n    }\n    int64_t v3 = v1; // 0x40c3c4\n    int64_t result2 = v2; // 0x40c3c2\n    while ((char)v1 == 0) {\n        // 0x40c3c4\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40c3cd\n            break;\n        }\n        // 0x40c3b0\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40c3cd\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40c3cd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c3f0",
            "funcStartAddr": "40c3f0",
            "funcEndAddr": "40c438",
            "decompiledFuncCode": "int64_t function_40c3f0(uint64_t a1) {\n    int64_t result = 0; // 0x40c3f5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40c407\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c3fe\n    if (v1 <= a1) {\n        // 0x40c407\n        return result;\n    }\n    int64_t v2 = a1; // 0x40c405\n    int64_t v3 = *(int64_t *)v2; // 0x40c419\n    result = v3;\n    while (v3 == 0) {\n        // 0x40c410\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40c407\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40c407\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c440",
            "funcStartAddr": "40c440",
            "funcEndAddr": "40c4aa",
            "decompiledFuncCode": "int64_t function_40c440(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40be30(a1, a2); // 0x40c44c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40c468\n    while (*(int64_t *)v2 != a2) {\n        // 0x40c460\n        if (v3 == 0) {\n            goto lab_0x40c476;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40c4a0\n        return *(int64_t *)v3;\n    }\n  lab_0x40c476:;\n    int64_t v4 = v1 + 16; // 0x40c488\n    int64_t result = 0; // 0x40c48f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40c480\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40c493\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40c493\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c4b0",
            "funcStartAddr": "40c4b0",
            "funcEndAddr": "40c514",
            "decompiledFuncCode": "int64_t function_40c4b0(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40c4b6\n    int64_t result = 0; // 0x40c4ba\n    if (*v1 <= a1) {\n      lab_0x40c4d1:\n        // 0x40c4d1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40c4bf\n    int64_t v4 = v2; // 0x40c4c5\n    int64_t v5; // 0x40c4b0\n    int64_t v6; // 0x40c4b0\n    int64_t v7; // 0x40c4f8\n    int64_t v8; // 0x40c501\n    int64_t v9; // 0x40c4e1\n    int64_t v10; // 0x40c4e5\n    if (v3 != 0) {\n        // 0x40c4d8\n        if (v2 >= a3) {\n            // break -> 0x40c4d1\n            break;\n        }\n        // 0x40c4dd\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40c4f5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40c4f0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40c4f5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40c4c7\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40c4bf\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40c4d8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40c4d1\n                break;\n            }\n            // 0x40c4dd\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40c4f5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40c4f0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40c4f5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40c4c7\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40c4d1\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c520",
            "funcStartAddr": "40c520",
            "funcEndAddr": "40c598",
            "decompiledFuncCode": "int64_t function_40c520(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c531\n    int64_t result = 0; // 0x40c535\n    if (v1 <= a1) {\n      lab_0x40c554:\n        // 0x40c554\n        return result;\n    }\n    int64_t v2 = a1; // 0x40c54a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40c548\n    int64_t v5 = v2; // 0x40c548\n    int64_t v6 = v3; // 0x40c548\n    int64_t v7; // 0x40c520\n    int64_t v8; // 0x40c578\n    int64_t v9; // 0x40c57c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40c578\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40c588\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40c578\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40c542\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40c578\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40c588\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40c578\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40c54a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40c554\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c5a0",
            "funcStartAddr": "40c5a0",
            "funcEndAddr": "40c5d1",
            "decompiledFuncCode": "int64_t function_40c5a0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40c5a7\n    if (v1 == 0) {\n        // 0x40c5cd\n        return 0;\n    }\n    int64_t result = 0; // 0x40c5a7\n    v2++;\n    char v3 = *(char *)v2; // 0x40c5c3\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40c5cd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c5e0",
            "funcStartAddr": "40c5e0",
            "funcEndAddr": "40c600",
            "decompiledFuncCode": "int64_t function_40c5e0(int64_t a1) {\n    // 0x40c5e0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40c600",
            "funcStartAddr": "40c600",
            "funcEndAddr": "40c78a",
            "decompiledFuncCode": "int64_t function_40c600(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int32_t a5) {\n    // 0x40c600\n    int128_t v1; // 0x40c600\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40c63a\n    int64_t result = (int64_t)mem; // 0x40c63a\n    if (mem == NULL) {\n        // 0x40c6ea\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40c64b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40c600\n    int128_t v6; // 0x40c600\n    if (a2 == 0) {\n        // 0x40c700\n        *v4 = (int64_t)&g13;\n        int64_t v7 = function_40bf80(v3); // 0x40c708\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40c70d\n        if ((char)v7 == 0) {\n            // 0x40c6e0\n            free(mem);\n            // 0x40c6ea\n            return 0;\n        }\n        // 0x40c719\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40c763;\n        } else {\n            goto lab_0x40c71e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40bf80(v3) == 0) {\n            // 0x40c6e0\n            free(mem);\n            // 0x40c6ea\n            return 0;\n        }\n        // 0x40c665\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40bd70(a1); // 0x40c673\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40c6e0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40c6e0\n                free(mem);\n                // 0x40c6ea\n                return 0;\n            }\n            // 0x40c691\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40c6e0\n                free(mem);\n                // 0x40c6ea\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40c6a2\n            int64_t v10 = (int64_t)mem2; // 0x40c6a2\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40c6e0\n                free(mem);\n                // 0x40c6ea\n                return 0;\n            }\n            // 0x40c6af\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40be10 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40be20 : a4;\n            *(int64_t *)(result + 64) = (int64_t)a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40c6ea\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40c758\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40c71e;\n        } else {\n            goto lab_0x40c763;\n        }\n    }\n  lab_0x40c763:\n    // 0x40c763\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40c773\n    int128_t v13 = v6; // 0x40c77c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40c77c\n    goto lab_0x40c727;\n  lab_0x40c71e:\n    // 0x40c71e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40c727;\n  lab_0x40c727:\n    // 0x40c727\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40c6e0\n    free(mem);\n    // 0x40c6ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c790",
            "funcStartAddr": "40c790",
            "funcEndAddr": "40c838",
            "decompiledFuncCode": "int64_t function_40c790(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40c79a\n    uint64_t v2 = *v1; // 0x40c79a\n    int64_t result; // 0x40c790\n    if (v2 <= a1) {\n      lab_0x40c823:\n        // 0x40c823\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40c7a8\n    while (*v6 == 0) {\n        // 0x40c7a8\n        v7 = v5 + 16;\n        int64_t v8; // 0x40c790\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40c823\n            goto lab_0x40c823;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40c7b9\n    int64_t v10 = *v9; // 0x40c7b9\n    int64_t v11 = *v3; // 0x40c7be\n    int64_t v12 = v11; // 0x40c7c5\n    int64_t v13 = v10; // 0x40c7c5\n    int64_t result2 = v11; // 0x40c7c5\n    int64_t * v14; // 0x40c7de\n    int64_t v15; // 0x40c7de\n    int64_t v16; // 0x40c7da\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40c7d5\n            v16 = *v3;\n        }\n        // 0x40c7de\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40c7d0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40c7d5\n                v16 = *v3;\n            }\n            // 0x40c7de\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40c7fd\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40c810\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40c81d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40c7ac\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40c7a8\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40c823\n                goto lab_0x40c823;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40c7b9\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40c7d5\n                v16 = *v3;\n            }\n            // 0x40c7de\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40c7d0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40c7d5\n                    v16 = *v3;\n                }\n                // 0x40c7de\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40c7fd\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40c823\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c840",
            "funcStartAddr": "40c840",
            "funcEndAddr": "40c916",
            "decompiledFuncCode": "int64_t function_40c840(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40c84f\n    uint64_t v2 = *v1; // 0x40c84f\n    int64_t v3 = a1; // 0x40c853\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40c8a3;\n    } else {\n        // 0x40c855\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40c8a3;\n        } else {\n            // 0x40c85c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40c871\n                int64_t v6; // 0x40c868\n                while (v5 == 0) {\n                    // 0x40c868\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40c8a3\n                        goto lab_0x40c8a3;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40c888\n                int64_t v8 = v7; // 0x40c88f\n                int64_t v9 = v5; // 0x40c88f\n                int64_t v10; // 0x40c840\n                int64_t v11; // 0x40c888\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40c880\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40c883\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40c896\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40c871\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40c868\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40c8a3\n                            goto lab_0x40c8a3;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40c883\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40c880\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40c883\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40c891\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40c8a3;\n            } else {\n                goto lab_0x40c8dc;\n            }\n        }\n    }\n  lab_0x40c8a3:\n    // 0x40c8a3\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40c8b0\n        int64_t v14 = v13; // 0x40c8b7\n        int64_t v15 = v2; // 0x40c8b7\n        int64_t v16; // 0x40c8c0\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40c8c0\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40c8d1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40c8d1\n        int64_t v18 = v15; // 0x40c8da\n        int64_t v19 = v17; // 0x40c8da\n        while (v15 > v17) {\n            // 0x40c8b0\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40c8c0\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40c8d1\n                v15 = *v1;\n            }\n            // 0x40c8d1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40c8dc;\n  lab_0x40c8dc:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40c8dc\n    if (v20 == 0) {\n        // 0x40c901\n        free(NULL);\n        free((int64_t *)a1);\n        return &g122;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40c8f0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40c8ff\n    while (v21 != 0) {\n        // 0x40c8f0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40c901\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_40c920",
            "funcStartAddr": "40c920",
            "funcEndAddr": "40cb1a",
            "decompiledFuncCode": "int64_t function_40c920(int64_t a1, uint64_t a2) {\n    // 0x40c920\n    int128_t v1; // 0x40c920\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40c92b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40c920\n        if (a2 < 0) {\n            // 0x40caa0\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40cab0\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40c940\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40c949\n        __asm_comiss(__asm_divss_9(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40ca92\n        return 0;\n    }\n    uint64_t nmemb = function_40bd70(a2); // 0x40c983\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40ca92\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40c9bb\n    if (*v6 == nmemb) {\n        // 0x40ca92\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40c9cd\n    int64_t v7 = (int64_t)mem; // 0x40c9cd\n    int64_t v8 = v7; // bp-104, 0x40c9d2\n    if (mem == NULL) {\n        // 0x40ca92\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40ca2a\n    int64_t v10 = *v9; // 0x40ca2a\n    int64_t v11 = function_40c000(&v8, a1, 0); // 0x40ca33\n    int64_t result = v11 & 0xffffffff; // 0x40ca38\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40c9f4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40ca56\n        function_40c000(v13, v12, 1);\n        function_40c000(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40cae0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40ca92\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cb20",
            "funcStartAddr": "40cb20",
            "funcEndAddr": "40cd94",
            "decompiledFuncCode": "int64_t function_40cb20(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40cb20\n    int128_t v1; // 0x40cb20\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    if (a2 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40cb31\n    int64_t v4; // bp-32, 0x40cb20\n    int64_t v5 = function_40be60(a1, a2, &v4, 0); // 0x40cb41\n    if (v5 != 0) {\n        // 0x40cb4e\n        if (a3 != NULL) {\n            // 0x40cb55\n            *a3 = v5;\n        }\n        // 0x40cb59\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40cb68\n    uint64_t v7 = *v6; // 0x40cb68\n    int64_t v8; // 0x40cb20\n    int64_t v9; // 0x40cb20\n    int64_t v10; // 0x40cb20\n    int128_t v11; // 0x40cb20\n    int128_t v12; // 0x40cb20\n    int64_t v13; // 0x40cb20\n    if (v7 < 0) {\n        // 0x40cbf0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40cc00\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40cc04\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40cc09\n        int128_t v17 = __asm_addss(v15, v15); // 0x40cc0d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40cb8b;\n        } else {\n            goto lab_0x40cc1a;\n        }\n    } else {\n        // 0x40cb71\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40cb75\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40cb79\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40cb7e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40cc1a;\n        } else {\n            goto lab_0x40cb8b;\n        }\n    }\n  lab_0x40cb8b:\n    // 0x40cb8b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40cb94\n    __asm_comiss_5(v11, v21);\n    int128_t v22 = v21; // 0x40cb9c\n    int128_t v23 = v11; // 0x40cb9c\n    if (v13 == 0) {\n        goto lab_0x40cba2;\n    } else {\n        goto lab_0x40cc41;\n    }\n  lab_0x40cc1a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40cc27\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40cc2a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40cc33\n    __asm_comiss_5(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40cba2;\n    } else {\n        goto lab_0x40cc41;\n    }\n  lab_0x40cba2:;\n    int64_t * v28 = (int64_t *)v4; // 0x40cba7\n    if (*v28 == 0) {\n        // 0x40ccb8\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40ccc1\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40cbb2\n    int64_t v31 = *v30; // 0x40cbb2\n    int64_t * v32; // 0x40cb20\n    int64_t v33; // 0x40cb20\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40ccdd\n        if (mem == NULL) {\n            // 0x40cb59\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40ccdd\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40cbc7\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40cbdd\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40cc41:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40cc41\n    function_40bf80(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40cc4a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40cc4e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40cc52\n    int128_t v44; // 0x40cb20\n    if (v42 < 0) {\n        // 0x40cd10\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40cd20\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40cc60\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40cc69\n    int128_t v47; // 0x40cb20\n    int64_t v48; // 0x40cb20\n    if (v46 < 0) {\n        // 0x40ccf0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40ccfd\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40cd00\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40cc72\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40cc76\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40cc7b\n    __asm_comiss_5(v47, __asm_mulss_8(__asm_movaps_7(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40cc8b\n        int128_t v53 = v52; // 0x40cc94\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40cd30\n            v53 = __asm_mulss_8(v52, v43);\n        }\n        // 0x40cc9a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40cb59\n        return 0xffffffff;\n    }\n    goto lab_0x40cba2;\n}\n"
        },
        {
            "funcName": "function_40cda0",
            "funcStartAddr": "40cda0",
            "funcEndAddr": "40cddb",
            "decompiledFuncCode": "int64_t function_40cda0(int64_t a1, int64_t a2) {\n    // 0x40cda0\n    int64_t v1; // bp-16, 0x40cda0\n    int64_t v2; // 0x40cda0\n    int32_t v3 = function_40cb20(a1, a2, &v1, v2); // 0x40cdb2\n    if (v3 == -1) {\n        // 0x40cdc0\n        return 0;\n    }\n    // 0x40cdb7\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40cde0",
            "funcStartAddr": "40cde0",
            "funcEndAddr": "40cfb7",
            "decompiledFuncCode": "int64_t function_40cde0(int64_t a1) {\n    // 0x40cde0\n    int128_t v1; // 0x40cde0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40cde0\n    int64_t v5; // 0x40cde0\n    int64_t result = function_40be60(a1, v5, &v4, 1); // 0x40cdf5\n    if (result == 0) {\n        // 0x40ce12\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40ce07\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40ce12\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40ce20\n    uint64_t v8 = *v7 - 1; // 0x40ce24\n    *v7 = v8;\n    int64_t v9; // 0x40cde0\n    int64_t v10; // 0x40cde0\n    int64_t v11; // 0x40cde0\n    int128_t v12; // 0x40cde0\n    int128_t v13; // 0x40cde0\n    int64_t v14; // 0x40cde0\n    if (v8 < 0) {\n        // 0x40cf10\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40cf20\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40cf24\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40cf29\n        int128_t v18 = __asm_addss(v16, v16); // 0x40cf2d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40ce4c;\n        } else {\n            goto lab_0x40cf3a;\n        }\n    } else {\n        // 0x40ce32\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40ce36\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40ce3a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40ce3f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40cf3a;\n        } else {\n            goto lab_0x40ce4c;\n        }\n    }\n  lab_0x40ce4c:\n    // 0x40ce4c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40ce50\n    int64_t v23 = v14; // 0x40ce50\n    int128_t v24 = v12; // 0x40ce50\n    int64_t v25 = v10; // 0x40ce50\n    int128_t v26 = v22; // 0x40ce50\n    goto lab_0x40ce55;\n  lab_0x40cf3a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40cf47\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40cf4a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40ce55;\n  lab_0x40ce55:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40ce55\n    __asm_comiss_5(v28, v27);\n    if (v23 == 0) {\n        // 0x40ce12\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40ce5e\n    function_40bf80(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40ce67\n    int64_t v31 = *(int64_t *)v29; // 0x40ce6b\n    int128_t v32; // 0x40cde0\n    if (v30 < 0) {\n        // 0x40cf80\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40cf90\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40ce78\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40ce81\n    int128_t v35; // 0x40cde0\n    int64_t v36; // 0x40cde0\n    if (v34 < 0) {\n        // 0x40cf60\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40cf6d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40cf70\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40ce8e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40ce92\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40ce97\n    __asm_comiss_5(__asm_mulss_8(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40ce12\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40cea8\n    int128_t v41 = v40; // 0x40ceb1\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40ceb3\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40ceb8\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40cfa8\n    if ((char)function_40c920(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40ce12\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40ceda\n    if (*v43 != 0) {\n        int64_t v44; // 0x40cde0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40cee8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40cef9\n    *v43 = 0;\n    // 0x40ce12\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cfc0",
            "funcStartAddr": "40cfc0",
            "funcEndAddr": "40cfc3",
            "decompiledFuncCode": "int64_t function_40cfc0(void) {\n    // 0x40cfc0\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40cfd0",
            "funcStartAddr": "40cfd0",
            "funcEndAddr": "40d04d",
            "decompiledFuncCode": "int64_t function_40cfd0(int64_t a1, uint64_t a2) {\n    int64_t result = function_411210(32); // 0x40cfdf\n    int64_t v1 = 1; // 0x40cfea\n    int64_t v2 = 8; // 0x40cfea\n    if (a2 != 0) {\n        // 0x40cfec\n        v2 = 8 * a2;\n        v1 = a2;\n        if (v2 > -1 != a2 < 0x2000000000000000) {\n            // 0x40d007\n            function_411460(v2);\n            // UNREACHABLE\n        }\n    }\n    int64_t v3 = function_411210(v2); // 0x40d01a\n    *(int64_t *)(result + 8) = v1;\n    *(int64_t *)v3 = 0;\n    *(int64_t *)result = v3;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 24) = a1 == 0 ? 0x40cfc0 : a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d050",
            "funcStartAddr": "40d050",
            "funcEndAddr": "40d065",
            "decompiledFuncCode": "int64_t function_40d050(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40d057\n    free(v1);\n    free(v1);\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_40d070",
            "funcStartAddr": "40d070",
            "funcEndAddr": "40d184",
            "decompiledFuncCode": "int64_t function_40d070(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8);\n    uint64_t v2 = *v1; // 0x40d084\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x40d088\n    uint64_t v4 = *v3; // 0x40d088\n    int64_t v5 = a1; // 0x40d096\n    int64_t v6 = v4; // 0x40d096\n    if (v2 - 1 <= v4) {\n        int64_t v7; // 0x40d070\n        int64_t v8; // 0x40d070\n        if (a1 == 0) {\n            // 0x40d150\n            v7 = 16;\n            v8 = 128;\n            if (v2 != 0) {\n                int64_t v9 = 8 * v2; // 0x40d164\n                v7 = v2;\n                v8 = v9;\n                if (v9 > -1 != v2 < 0x2000000000000000) {\n                    // 0x40d16f\n                    function_411460(v2 / 0x2000000000000000);\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            // 0x40d115\n            if (v2 >= 0xaaaaaaaaaaaaaaa) {\n                // 0x40d16f\n                function_411460(a1);\n                // UNREACHABLE\n            }\n            int64_t v10 = v2 + 1 + v2 / 2; // 0x40d12a\n            v7 = v10;\n            v8 = 8 * v10;\n        }\n        // 0x40d137\n        *v1 = v7;\n        v5 = function_411270(a1, v8);\n        v6 = *v3;\n        *(int64_t *)a1 = v5;\n    }\n    int64_t v11 = v6 + 1; // 0x40d098\n    *v3 = v11;\n    int64_t v12 = 8 * v11; // 0x40d0a0\n    *(int64_t *)(v12 + v5) = a2;\n    int64_t v13 = *(int64_t *)(v12 + a1); // 0x40d0ac\n    int64_t v14 = v5; // 0x40d0b5\n    if (v6 == 0) {\n        // 0x40d0ee\n        *v1 = v13;\n        return 0;\n    }\n    uint64_t v15 = v11;\n    int64_t v16 = 8 * v15 + a1; // 0x40d0e5\n    while ((int32_t)v14 < 1) {\n        int64_t v17 = v15 / 2; // 0x40d0d6\n        v14 = *(int64_t *)(8 * v17 + a1);\n        *(int64_t *)v16 = v14;\n        if ((v15 & -2) == 2) {\n            // 0x40d0ee\n            *v1 = v13;\n            return 0;\n        }\n        v15 = v17;\n        v16 = 8 * v15 + a1;\n    }\n    // 0x40d0ee\n    *(int64_t *)v16 = v13;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d190",
            "funcStartAddr": "40d190",
            "funcEndAddr": "40d2ad",
            "decompiledFuncCode": "int64_t function_40d190(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x40d19e\n    int64_t v2 = *v1; // 0x40d19e\n    if (v2 == 0) {\n        // 0x40d288\n        return 0;\n    }\n    uint64_t v3 = v2 - 1; // 0x40d1b7\n    int64_t v4 = *(int64_t *)(8 * v2 + a1); // 0x40d1bb\n    int64_t * v5 = (int64_t *)(a1 + 8);\n    int64_t result = *v5; // 0x40d1bf\n    *v1 = v3;\n    *v5 = v4;\n    uint64_t v6 = v3 / 2; // 0x40d1e3\n    if (v3 < 2) {\n        // 0x40d280\n        *v5 = v4;\n      lab_0x40d288:\n        // 0x40d288\n        return result;\n    }\n    int64_t v7 = 1;\n    int64_t v8 = 2 * v7; // 0x40d22d\n    int32_t v9; // 0x40d190\n    int64_t v10; // 0x40d190\n    int64_t v11; // 0x40d190\n    int32_t v12; // 0x40d190\n    int64_t v13; // 0x40d239\n    if (v3 > v8) {\n        // 0x40d236\n        v13 = v8 | 1;\n        v12 = v6;\n        v9 = v12;\n        v10 = v12 < 0 ? 8 * v13 : 16 * v7;\n        v11 = v12 < 0 ? v13 : v8;\n    } else {\n        // 0x40d200\n        v9 = v6;\n        v10 = 16 * v7;\n        v11 = v8;\n    }\n    int64_t v14 = 8 * v7 + a1; // 0x40d215\n    while (v9 >= 1) {\n        int64_t * v15 = (int64_t *)(v10 + a1);\n        int64_t v16 = *v15; // 0x40d21d\n        *(int64_t *)v14 = v16;\n        if (v11 > v6) {\n            // 0x40d2a0\n            *v15 = v4;\n            return result;\n        }\n        v7 = v11;\n        int64_t v17 = v16;\n        v8 = 2 * v7;\n        if (v3 > v8) {\n            // 0x40d236\n            v13 = v8 | 1;\n            v12 = v17;\n            v9 = v12;\n            v10 = v12 < 0 ? 8 * v13 : 16 * v7;\n            v11 = v12 < 0 ? v13 : v8;\n        } else {\n            // 0x40d200\n            v9 = v17;\n            v10 = 16 * v7;\n            v11 = v8;\n        }\n        // 0x40d20a\n        v14 = 8 * v7 + a1;\n    }\n    // 0x40d280\n    *(int64_t *)v14 = v4;\n    // 0x40d288\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d2b0",
            "funcStartAddr": "40d2b0",
            "funcEndAddr": "40d32c",
            "decompiledFuncCode": "int64_t function_40d2b0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 11; // 0x40d2b0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x40d2cb\n    if ((int32_t)a1 >= 0) {\n        result--;\n        uint64_t v2 = 0xcccccccd * (a1 & 0xffffffff); // 0x40d2d6\n        int64_t v3 = v2 / 0x800000000; // 0x40d2d6\n        *(char *)result = (char)a1 + 48 + -10 * (char)v3;\n        while (v2 >= 0x800000000) {\n            int64_t v4 = v3;\n            result--;\n            v2 = 0xcccccccd * (v4 & 0xffffffff);\n            v3 = v2 / 0x800000000;\n            *(char *)result = (char)v4 + 48 + -10 * (char)v3;\n        }\n        // 0x40d2ee\n        return result;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = v1;\n    uint32_t v7 = ((int32_t)(0x66666667 * (0x100000000 * v5 >> 32) / 0x100000000) >> 2) - ((int32_t)v5 >> 31); // 0x40d30c\n    int64_t v8 = v6 - 1; // 0x40d319\n    *(char *)v8 = 48 - (char)v5 + 10 * (char)v7;\n    while (v7 != 0) {\n        // 0x40d2fb\n        v5 = v7;\n        v6 = v8;\n        v7 = ((int32_t)(0x66666667 * (0x100000000 * v5 >> 32) / 0x100000000) >> 2) - ((int32_t)v5 >> 31);\n        v8 = v6 - 1;\n        *(char *)v8 = 48 - (char)v5 + 10 * (char)v7;\n    }\n    int64_t result2 = v6 - 2; // 0x40d320\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d330",
            "funcStartAddr": "40d330",
            "funcEndAddr": "40d369",
            "decompiledFuncCode": "int64_t function_40d330(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 10; // 0x40d330\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x40d33d\n    int64_t v2 = a1;\n    result--;\n    int64_t v3 = 0xcccccccd * (v2 & 0xffffffff) / 0x800000000; // 0x40d34b\n    *(char *)result = (char)v2 + 48 + -10 * (char)v3;\n    while ((int32_t)v2 >= 10) {\n        // 0x40d342\n        v2 = v3;\n        result--;\n        v3 = 0xcccccccd * (v2 & 0xffffffff) / 0x800000000;\n        *(char *)result = (char)v2 + 48 + -10 * (char)v3;\n    }\n    // 0x40d365\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d370",
            "funcStartAddr": "40d370",
            "funcEndAddr": "40d3b8",
            "decompiledFuncCode": "int64_t function_40d370(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x40d370\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x40d382\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40d38b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x40d3b4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d3c0",
            "funcStartAddr": "40d3c0",
            "funcEndAddr": "40d573",
            "decompiledFuncCode": "int64_t function_40d3c0(uint64_t a1, int64_t a2, uint32_t a3) {\n    uint64_t v1 = a2 + a1; // 0x40d3c9\n    int64_t v2; // 0x40d3c0\n    int64_t v3; // 0x40d3c0\n    int64_t v4; // 0x40d3c0\n    int64_t v5; // 0x40d3c0\n    int64_t v6; // 0x40d3c0\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x40d500\n        if (v1 <= a1) {\n            // 0x40d4e6\n            return 0;\n        }\n        int16_t * v7 = *__ctype_b_loc(); // 0x40d514\n        v6 = a1;\n        v3 = 0;\n        while (true) {\n          lab_0x40d520:\n            // 0x40d520\n            v4 = v3;\n            unsigned char v8 = *(char *)v6; // 0x40d524\n            int16_t v9 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)v7); // 0x40d528\n            if ((v9 & 0x4000) != 0) {\n                goto lab_0x40d53a;\n            } else {\n                // 0x40d531\n                v2 = 0xffffffff;\n                if ((a3 & 2) != 0) {\n                    // break -> 0x40d4e6\n                    break;\n                }\n                // 0x40d536\n                v5 = v4;\n                if ((v9 & 2) != 0) {\n                    goto lab_0x40d547;\n                } else {\n                    goto lab_0x40d53a;\n                }\n            }\n        }\n      lab_0x40d4e6_7:\n        // 0x40d4e6\n        return v2 & 0xffffffff;\n    }\n    // 0x40d3e7\n    if (v1 <= a1) {\n        // 0x40d4e6\n        return 0;\n    }\n    uint64_t v10 = (int64_t)a3; // 0x40d3c2\n    int64_t v11 = a1;\n    int64_t v12 = 0; // 0x40d3c0\n    int64_t v13; // 0x40d3c0\n    int64_t v14; // 0x40d3c0\n    int64_t v15; // 0x40d3c0\n    int64_t v16; // 0x40d3c0\n    while (true) {\n      lab_0x40d41c:\n        // 0x40d41c\n        v14 = v12;\n        v16 = v11;\n        char v17 = *(char *)v16; // 0x40d41c\n        if (v17 < 64) {\n            // 0x40d400\n            v15 = v16;\n            v13 = v14;\n            if (v17 > 36 || (v17 & -4) == 32) {\n                goto lab_0x40d40b;\n            } else {\n                goto lab_0x40d432;\n            }\n        } else {\n            if (v17 == 64) {\n                goto lab_0x40d432;\n            } else {\n                // 0x40d427\n                v15 = v16;\n                v13 = v14;\n                if (v17 < 96 || v17 < 127) {\n                    goto lab_0x40d40b;\n                } else {\n                    goto lab_0x40d432;\n                }\n            }\n        }\n    }\n  lab_0x40d4e6_7:\n    // 0x40d4e6\n    return v2 & 0xffffffff;\n  lab_0x40d53a:\n    // 0x40d53a\n    v2 = v4;\n    if ((int32_t)v4 == 0x7fffffff) {\n        return v2 & 0xffffffff;\n    }\n    // 0x40d543\n    v5 = v4 + 1 & 0xffffffff;\n    goto lab_0x40d547;\n  lab_0x40d547:;\n    int64_t v18 = v6 + 1; // 0x40d520\n    v2 = v5;\n    v6 = v18;\n    v3 = v5;\n    if (v1 == v18) {\n        // break -> 0x40d4e6\n        goto lab_0x40d4e6_7;\n    }\n    goto lab_0x40d520;\n  lab_0x40d40b:;\n    int64_t v19 = v15 + 1; // 0x40d40f\n    v12 = v13 + 1 & 0xffffffff;\n  lab_0x40d413:\n    // 0x40d413\n    v11 = v19;\n    if (v11 >= v1) {\n        // break -> 0x40d4e6\n        goto lab_0x40d4e6_7;\n    }\n    goto lab_0x40d41c;\n  lab_0x40d432:;\n    int64_t ps = 0; // bp-64, 0x40d432\n    int64_t v20 = v16; // 0x40d43b\n    int64_t v21 = v14; // 0x40d43b\n    int64_t v22; // 0x40d3c0\n    int64_t v23; // 0x40d3c0\n    while (true) {\n      lab_0x40d464:\n        // 0x40d464\n        v22 = v21;\n        v23 = v20;\n        int32_t wc; // bp-68, 0x40d3c0\n        int64_t v24 = function_412fb0((int64_t *)&wc, v23, v1 - v23); // 0x40d477\n        switch (v24) {\n            case -1: {\n                goto lab_0x40d4d0;\n            }\n            case -2: {\n                // 0x40d550\n                v2 = 0xffffffff;\n                if (v10 % 2 == 0) {\n                    // 0x40d413\n                    v2 = v22 + 1 & 0xffffffff;\n                }\n                // 0x40d4e6\n                return v2 & 0xffffffff;\n            }\n            default: {\n                int32_t v25 = wcwidth(wc); // 0x40d49a\n                int64_t v26; // 0x40d3c0\n                if (v25 >= 0) {\n                    int64_t v27 = v25; // 0x40d49a\n                    v2 = 0x7fffffff;\n                    if ((0x7fffffff - v22 & 0xffffffff) < v27) {\n                        // break (via goto) -> 0x40d4e6\n                        goto lab_0x40d4e6_7;\n                    }\n                    // 0x40d450\n                    v26 = v22 + v27 & 0xffffffff;\n                } else {\n                    // 0x40d4a3\n                    v2 = 0xffffffff;\n                    if ((v10 & 2) != 0) {\n                        // break (via goto) -> 0x40d4e6\n                        goto lab_0x40d4e6_7;\n                    }\n                    // 0x40d4a9\n                    v26 = v22;\n                    if (iswcntrl(wc) == 0) {\n                        // 0x40d4b6\n                        v2 = 0x7fffffff;\n                        if ((int32_t)v22 == 0x7fffffff) {\n                            // break (via goto) -> 0x40d4e6\n                            goto lab_0x40d4e6_7;\n                        }\n                        // 0x40d4c3\n                        v26 = v22 + 1 & 0xffffffff;\n                    }\n                }\n                int64_t v28 = (v24 == 0 ? 1 : v24) + v23; // 0x40d458\n                int32_t v29 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40d45b\n                v19 = v28;\n                v12 = v26;\n                v20 = v28;\n                v21 = v26;\n                if (v29 != 0) {\n                    goto lab_0x40d413;\n                }\n                goto lab_0x40d464;\n            }\n        }\n    }\n  lab_0x40d4d0:\n    // 0x40d4d0\n    v15 = v23;\n    v13 = v22;\n    v2 = 0xffffffff;\n    if (v10 % 2 != 0) {\n        // break -> 0x40d4e6\n        goto lab_0x40d4e6_7;\n    }\n    goto lab_0x40d40b;\n}\n"
        },
        {
            "funcName": "function_40d580",
            "funcStartAddr": "40d580",
            "funcEndAddr": "40d5a3",
            "decompiledFuncCode": "int64_t function_40d580(int64_t str, int64_t a2) {\n    // 0x40d580\n    return function_40d3c0(str, (int64_t)strlen((char *)str), (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_40d5b0",
            "funcStartAddr": "40d5b0",
            "funcEndAddr": "40d5f4",
            "decompiledFuncCode": "int64_t function_40d5b0(int64_t a1) {\n    // 0x40d5b0\n    int64_t v1; // bp-136, 0x40d5b0\n    if (sched_getaffinity(0, 128, (struct _TYPEDEF_cpu_set_t *)&v1) != 0) {\n        // 0x40d5ca\n        return 0;\n    }\n    int32_t result = __sched_cpucount(128, (struct _TYPEDEF_cpu_set_t *)&v1); // 0x40d5e0\n    if (result == 0) {\n        // 0x40d5ca\n        return 0;\n    }\n    // 0x40d5ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d600",
            "funcStartAddr": "40d600",
            "funcEndAddr": "40d6eb",
            "decompiledFuncCode": "int64_t function_40d600(void) {\n    // 0x40d600\n    int64_t v1; // 0x40d600\n    uint64_t v2 = v1;\n    unsigned char v3 = (char)v2;\n    if (v3 == 0) {\n        // 0x40d6d7\n        return 0;\n    }\n    int64_t v4 = 0x100000000000000 * v2 / 0x100000000000000; // 0x40d60b\n    int64_t v5 = v4; // 0x40d611\n    int64_t str; // 0x40d600\n    if (v3 < 33) {\n        // 0x40d613\n        v5 = v4;\n        if ((1 << v2 % 64 & 0x100003e00) != 0) {\n            int64_t v6; // 0x40d600\n            int64_t v7 = v6 + 1; // 0x40d628\n            unsigned char v8 = *(char *)v7; // 0x40d62c\n            while (v8 != 0) {\n                if (v8 >= 33) {\n                    // 0x40d650\n                    str = v7;\n                    v5 = v8;\n                    goto lab_0x40d650_3;\n                }\n                unsigned char v9 = v8 % 64;\n                if (v9 == 0 || (1 << (int64_t)v9 & 0x100003e00) == 0) {\n                    // 0x40d650\n                    str = v7;\n                    v5 = v8;\n                    goto lab_0x40d650_3;\n                }\n                v7++;\n                v8 = *(char *)v7;\n            }\n            // 0x40d6d7\n            return 0;\n        }\n    }\n    goto lab_0x40d650_3;\n  lab_0x40d650_3:\n    // 0x40d650\n    if ((int32_t)v5 >= 58) {\n        // 0x40d6d7\n        return 0;\n    }\n    char * endptr = NULL; // bp-16, 0x40d667\n    int32_t str_as_ul = strtoul((char *)str, &endptr, 10); // 0x40d675\n    if (endptr == NULL) {\n        // 0x40d6d7\n        return 0;\n    }\n    int64_t result = str_as_ul; // 0x40d675\n    unsigned char v10 = *endptr; // 0x40d684\n    if (v10 == 0) {\n        // 0x40d6d7\n        return result;\n    }\n    char v11 = v10; // 0x40d691\n    if (v10 >= 33) {\n      lab_0x40d6d0:\n        // 0x40d6d0\n        if (v11 == 44) {\n            // 0x40d6d7\n            return result;\n        }\n        // 0x40d6d7\n        return 0;\n    }\n    // 0x40d693\n    if ((1 << (int64_t)(v10 % 64) & 0x100003e00) == 0) {\n        // 0x40d6d7\n        return 0;\n    }\n    int64_t v12 = (int64_t)endptr + 1;\n    char * v13 = (char *)v12; // 0x40d6ad\n    endptr = v13;\n    unsigned char v14 = *v13; // 0x40d6b2\n    while (v14 != 0) {\n        // 0x40d6b9\n        v11 = v14;\n        if (v14 >= 33) {\n            goto lab_0x40d6d0;\n        }\n        unsigned char v15 = v14 % 64;\n        if (v15 == 0 || (1 << (int64_t)v15 & 0x100003e00) == 0) {\n            // 0x40d6d7\n            return 0;\n        }\n        v12++;\n        v13 = (char *)v12;\n        endptr = v13;\n        v14 = *v13;\n    }\n    // 0x40d6d7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d6f0",
            "funcStartAddr": "40d6f0",
            "funcEndAddr": "40d837",
            "decompiledFuncCode": "int64_t function_40d6f0(int64_t a1) {\n    int64_t v1 = a1; // 0x40d6f0\n    int64_t v2; // 0x40d6f0\n    int64_t v3; // 0x40d6f0\n    switch ((int32_t)a1) {\n        case 2: {\n            // 0x40d730\n            if (getenv(\"OMP_NUM_THREADS\") == NULL) {\n                char * env_val = getenv(\"OMP_THREAD_LIMIT\"); // 0x40d80d\n                v1 = (int64_t)\"OMP_THREAD_LIMIT\";\n                if (env_val == NULL) {\n                    goto lab_0x40d82b;\n                } else {\n                    int64_t v4 = (int64_t)env_val; // 0x40d80d\n                    int64_t v5 = function_40d600(); // 0x40d81a\n                    v2 = v5;\n                    v3 = v4;\n                    v1 = v4;\n                    if (v5 != 0) {\n                        goto lab_0x40d782;\n                    } else {\n                        goto lab_0x40d82b;\n                    }\n                }\n            } else {\n                uint64_t v6 = function_40d600(); // 0x40d74d\n                char * env_val2 = getenv(\"OMP_THREAD_LIMIT\"); // 0x40d75a\n                int64_t v7 = -1; // 0x40d762\n                int64_t v8 = (int64_t)\"OMP_THREAD_LIMIT\"; // 0x40d762\n                if (env_val2 != NULL) {\n                    int64_t v9 = function_40d600(); // 0x40d767\n                    v7 = v9 == 0 ? -1 : v9;\n                    v8 = (int64_t)env_val2;\n                }\n                int64_t v10 = v7;\n                v2 = v10;\n                v3 = v8;\n                if (v6 != 0) {\n                    // 0x40d7f0\n                    return v10 > v6 ? v6 : v10;\n                }\n                goto lab_0x40d782;\n            }\n        }\n        case 1: {\n            goto lab_0x40d82b;\n        }\n        default: {\n            int32_t v11 = sysconf(_SC_THREAD_PROCESS_SHARED); // 0x40d709\n            int64_t v12 = v11; // 0x40d712\n            if (v11 == 1) {\n                // 0x40d7d0\n                v12 = function_40d5b0(83);\n                if (v12 == 0) {\n                    // 0x40d724\n                    return 1;\n                }\n            }\n            int64_t v13 = v12;\n            // 0x40d724\n            return v13 > 1 ? v13 : 1;\n        }\n    }\n  lab_0x40d82b:\n    // 0x40d82b\n    v2 = -1;\n    v3 = v1;\n    goto lab_0x40d782;\n  lab_0x40d782:;\n    uint64_t v14 = v2;\n    uint64_t v15 = function_40d5b0(v3); // 0x40d782\n    if (v15 != 0) {\n        // 0x40d78c\n        return v15 > v14 ? v14 : v15;\n    }\n    int32_t v16 = sysconf(_SC_NPROCESSORS_CONF); // 0x40d7a5\n    int64_t result = 1; // 0x40d7b5\n    if (v16 >= 1) {\n        uint64_t v17 = (int64_t)v16; // 0x40d7a5\n        result = v14 < v17 ? v14 : v17;\n    }\n    // 0x40d724\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d840",
            "funcStartAddr": "40d840",
            "funcEndAddr": "40d8fb",
            "decompiledFuncCode": "int64_t function_40d840(void) {\n    // 0x40d840\n    int128_t v1; // 0x40d840\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = v1;\n    int32_t v5 = sysconf(_SC_NPROCESSORS_ONLN); // 0x40d84c\n    __asm_pxor(v4, v4);\n    int64_t v6 = __asm_movsd(__asm_cvtsi2sd((int64_t)v5)); // 0x40d85f\n    int32_t v7 = sysconf(_SC_PAGESIZE); // 0x40d865\n    int128_t v8 = __asm_movsd_3(v6); // 0x40d86a\n    int128_t v9 = __asm_pxor(v2, v2); // 0x40d870\n    __asm_comisd(v8, v9);\n    int64_t v10; // 0x40d840\n    if ((uint64_t)v10 >= 136) {\n        int64_t result = v7; // 0x40d865\n        __asm_pxor(v3, v3);\n        int128_t v11 = __asm_cvtsi2sd(result); // 0x40d87e\n        __asm_comisd(v11, v9);\n        // 0x40d8d0\n        __asm_mulsd(v8, v11);\n        return result;\n    }\n    // 0x40d889\n    int64_t v12; // bp-120, 0x40d840\n    int32_t result2 = sysinfo((struct sysinfo *)&v12); // 0x40d88e\n    int128_t v13 = __asm_movsd_3(0x4190000000000000); // 0x40d893\n    if (result2 != 0) {\n        // 0x40d89f\n        return result2;\n    }\n    // 0x40d8b0\n    int32_t v14; // 0x40d840\n    uint64_t v15 = (int64_t)v14; // 0x40d8b0\n    int128_t v16; // 0x40d840\n    if (v14 < 0) {\n        // 0x40d8e0\n        __asm_pxor(v13, v13);\n        int128_t v17 = __asm_cvtsi2sd(v15 / 2 | v15 % 2); // 0x40d8f0\n        v16 = __asm_addsd(v17, v17);\n    } else {\n        // 0x40d8ba\n        __asm_pxor(v13, v13);\n        v16 = __asm_cvtsi2sd(v15);\n    }\n    int64_t result3 = v14; // 0x40d8c3\n    __asm_pxor(v3, v3);\n    // 0x40d8d0\n    __asm_mulsd(v16, __asm_cvtsi2sd(result3));\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40d900",
            "funcStartAddr": "40d900",
            "funcEndAddr": "40d9f6",
            "decompiledFuncCode": "int64_t function_40d900(void) {\n    // 0x40d900\n    int128_t v1; // 0x40d900\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = v1;\n    int32_t v5 = sysconf(_SC_PHYS_PAGES); // 0x40d90c\n    __asm_pxor(v4, v4);\n    int64_t v6 = __asm_movsd(__asm_cvtsi2sd((int64_t)v5)); // 0x40d91f\n    int32_t v7 = sysconf(_SC_PAGESIZE); // 0x40d925\n    int128_t v8 = __asm_movsd_3(v6); // 0x40d92a\n    int128_t v9 = __asm_pxor(v2, v2); // 0x40d930\n    __asm_comisd(v8, v9);\n    int64_t v10; // 0x40d900\n    if ((uint64_t)v10 >= 136) {\n        int64_t result = v7; // 0x40d925\n        __asm_pxor(v3, v3);\n        int128_t v11 = __asm_cvtsi2sd(result); // 0x40d93e\n        __asm_comisd(v11, v9);\n        // 0x40d98e\n        __asm_mulsd(v8, v11);\n        return result;\n    }\n    // 0x40d949\n    int64_t v12; // bp-120, 0x40d900\n    if (sysinfo((struct sysinfo *)&v12) != 0) {\n        int64_t result2 = function_40d840(); // 0x40d9a0\n        __asm_mulsd_4(v8, 0x3fd0000000000000);\n        return result2;\n    }\n    // 0x40d957\n    int32_t v13; // 0x40d900\n    uint64_t v14 = (int64_t)v13; // 0x40d957\n    int64_t v15; // 0x40d900\n    int64_t v16; // 0x40d900\n    int128_t v17; // 0x40d900\n    int128_t v18; // 0x40d900\n    if (v13 < 0) {\n        // 0x40d9b8\n        __asm_pxor(v8, v8);\n        int64_t v19 = v13; // 0x40d9c8\n        int128_t v20 = __asm_cvtsi2sd(v14 / 2 | v14 % 2); // 0x40d9cd\n        int128_t v21 = __asm_addsd(v20, v20); // 0x40d9d2\n        v17 = v21;\n        v15 = v19;\n        v18 = v21;\n        v16 = v19;\n        if (v13 >= 0) {\n            goto lab_0x40d974;\n        } else {\n            goto lab_0x40d9db;\n        }\n    } else {\n        // 0x40d961\n        __asm_pxor(v8, v8);\n        int128_t v22 = __asm_cvtsi2sd(v14); // 0x40d965\n        int64_t v23 = v13; // 0x40d96a\n        v17 = v22;\n        v15 = v23;\n        v18 = v22;\n        v16 = v23;\n        if (v13 < 0) {\n            goto lab_0x40d9db;\n        } else {\n            goto lab_0x40d974;\n        }\n    }\n  lab_0x40d974:\n    // 0x40d974\n    __asm_pxor(v3, v3);\n    int128_t v24 = v17; // 0x40d978\n    int128_t v25 = __asm_cvtsi2sd(v15); // 0x40d978\n    goto lab_0x40d97d;\n  lab_0x40d9db:;\n    uint64_t v28 = v16;\n    __asm_pxor(v3, v3);\n    int128_t v29 = __asm_cvtsi2sd(v28 / 2 | v28 % 2); // 0x40d9eb\n    v24 = v18;\n    v25 = __asm_addsd(v29, v29);\n    goto lab_0x40d97d;\n  lab_0x40d97d:;\n    int128_t v26 = v25;\n    int64_t result3 = v13; // 0x40d97d\n    int128_t v27 = __asm_addsd(v24, v26); // 0x40d981\n    __asm_pxor(v26, v26);\n    // 0x40d98e\n    __asm_mulsd(v27, __asm_cvtsi2sd(result3));\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40da00",
            "funcStartAddr": "40da00",
            "funcEndAddr": "40dbd1",
            "decompiledFuncCode": "int64_t function_40da00(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t fds[2]; // 0x40da33\n    int32_t v1[2]; // 0x40db68\n    int32_t fd = a1;\n    int32_t v2; // 0x40da00\n    if (g108 >= 0) {\n        // 0x40db68\n        v1[0] = fd;\n        int32_t v3 = a2;\n        uint32_t result = pipe2(v1, v3); // 0x40db68\n        if (result >= 0 || *__errno_location() != 38) {\n            // 0x40db7e\n            g108 = 1;\n            return result;\n        }\n        // 0x40dba0\n        g108 = -1;\n        v2 = v3;\n    } else {\n        // 0x40da00\n        v2 = a2;\n    }\n    uint32_t v4 = v2 & -0x80801; // 0x40da23\n    if (v4 != 0) {\n        // 0x40dbb0\n        *__errno_location() = 22;\n        // 0x40da54\n        return 0xffffffff;\n    }\n    // 0x40da30\n    fds[0] = fd;\n    if (pipe(fds) < 0) {\n        // 0x40da54\n        return 0xffffffff;\n    }\n    int32_t * fd2; // 0x40da00\n    int64_t v5; // 0x40da00\n    if ((a2 & 2048) != 0) {\n        int32_t * v6 = (int32_t *)(a1 + 4);\n        int32_t v7 = function_412000(*v6, 3, 0, v5);\n        fd2 = v6;\n        if (v7 < 0) {\n            goto lab_0x40dac8;\n        } else {\n            // 0x40da7d\n            fd2 = v6;\n            if ((int32_t)function_412000(*v6, 4, v7 || 2048, v5) == -1) {\n                goto lab_0x40dac8;\n            } else {\n                int32_t v8 = function_412000(fd, 3, 0, v5);\n                fd2 = v6;\n                if (v8 < 0) {\n                    goto lab_0x40dac8;\n                } else {\n                    // 0x40daaa\n                    fd2 = v6;\n                    if ((int32_t)function_412000(fd, 4, v8 || 2048, v5) != -1) {\n                        goto lab_0x40da48;\n                    } else {\n                        goto lab_0x40dac8;\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40da48;\n    }\n  lab_0x40da48:;\n    int64_t result2 = v4; // 0x40da23\n    if ((a2 & 0x80000) == 0) {\n        // 0x40da54\n        return result2;\n    }\n    int32_t * v9 = (int32_t *)(a1 + 4);\n    uint32_t v10 = (int32_t)function_412000(*v9, 1, 0, v5); // 0x40db09\n    fd2 = v9;\n    if (v10 >= 0) {\n        // 0x40db0d\n        fd2 = v9;\n        if ((int32_t)function_412000(*v9, 2, v10 || 1, v5) != -1) {\n            uint32_t v11 = (int32_t)function_412000(fd, 1, 0, v5); // 0x40db36\n            fd2 = v9;\n            if (v11 >= 0) {\n                // 0x40db3a\n                fd2 = v9;\n                if ((int32_t)function_412000(fd, 2, v11 || 1, v5) != -1) {\n                    // 0x40da54\n                    return result2;\n                }\n            }\n        }\n    }\n    goto lab_0x40dac8;\n  lab_0x40dac8:;\n    int32_t * v12 = __errno_location(); // 0x40dac8\n    close(fd);\n    close(*fd2);\n    *(int64_t *)a1 = a1;\n    // 0x40da54\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40dbe0",
            "funcStartAddr": "40dbe0",
            "funcEndAddr": "40dc52",
            "decompiledFuncCode": "int64_t function_40dbe0(void) {\n    char * env_val = getenv(\"_POSIX2_VERSION\"); // 0x40dbef\n    if (env_val == NULL || *env_val == 0) {\n        // 0x40dbfe\n        return 0x31069;\n    }\n    // 0x40dc10\n    char * endptr; // bp-16, 0x40dbe0\n    int32_t str_as_l = strtol(env_val, &endptr, 10); // 0x40dc1d\n    if (*endptr != 0) {\n        // 0x40dbfe\n        return 0x31069;\n    }\n    int64_t v1 = str_as_l; // 0x40dc1d\n    int64_t v2 = v1 - 0x7fffffff; // 0x40dc34\n    return v2 == 0 | v2 < 0 != (0x7ffffffe - v1 & v1) < 0 ? v1 & 0xffffffff : 0x7fffffff;\n}\n"
        },
        {
            "funcName": "function_40dc60",
            "funcStartAddr": "40dc60",
            "funcEndAddr": "40dcf9",
            "decompiledFuncCode": "int64_t function_40dc60(int64_t str) {\n    // 0x40dc60\n    if (str == 0) {\n        // 0x40dcd9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g55);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40dc6e\n    int64_t result = (int64_t)found_char_pos; // 0x40dc6e\n    if (found_char_pos == NULL) {\n        // 0x40dcc9\n        g109 = str;\n        g54 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x40dc78\n    if (v1 - str < 7) {\n        // 0x40dcc9\n        g109 = str;\n        g54 = str;\n        return result;\n    }\n    // 0x40dc88\n    bool v2; // 0x40dc60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x40dc60\n    int64_t v5 = result - 6; // 0x40dc60\n    int64_t v6 = 7; // 0x40dc96\n    unsigned char v7 = *(char *)v5; // 0x40dc96\n    char v8 = *(char *)v4; // 0x40dc96\n    char v9 = v8; // 0x40dc96\n    bool v10 = false; // 0x40dc96\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x40dca0\n    int64_t v13 = v1; // 0x40dca0\n    int64_t v14 = 3; // 0x40dca0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x40dcc9\n        g109 = str;\n        g54 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x40dcb2\n    char v16 = *(char *)v12; // 0x40dcb2\n    char v17 = v16; // 0x40dcb2\n    bool v18 = false; // 0x40dcb2\n    while (v15 == v16) {\n        // 0x40dca2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40dcbc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40dcbe\n        v20 = result + 4;\n        g51 = v20;\n    }\n    // 0x40dcc9\n    g109 = v20;\n    g54 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dd00",
            "funcStartAddr": "40dd00",
            "funcEndAddr": "40ddf2",
            "decompiledFuncCode": "int64_t function_40dd00(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x40dd14\n    int64_t result = (int64_t)v1; // 0x40dd14\n    if (result != a1) {\n        // 0x40dd21\n        return result;\n    }\n    int64_t v2 = function_413750(); // 0x40dd30\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x40dde6\n    if (v3 == 85) {\n        // 0x40dd40\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x40ddd8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g14;\n            return result2;\n        }\n        char v4 = *v1; // 0x40dd6e\n        int64_t result3 = v4 != 96 ? (int64_t)&g15 : (int64_t)&g18; // 0x40dd7b\n        // 0x40dd21\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x40ddd8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g14;\n        return result2;\n    }\n    char v5 = *v1; // 0x40ddbd\n    int64_t result4 = v5 != 96 ? (int64_t)&g16 : (int64_t)&g17; // 0x40ddca\n    // 0x40dd21\n    return result4;\n}\n"
        },
        {
            "funcName": "function_40de00",
            "funcStartAddr": "40de00",
            "funcEndAddr": "40de57",
            "decompiledFuncCode": "int64_t function_40de00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x40de00\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40de57",
            "funcStartAddr": "40de57",
            "funcEndAddr": "40f021",
            "decompiledFuncCode": "int64_t function_40de57(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x40dea1\n    int64_t v3 = 0; // 0x40dea1\n    int64_t v4; // 0x40de57\n    int64_t v5; // 0x40de57\n    int64_t v6; // 0x40de57\n    int64_t v7; // 0x40de57\n    int64_t v8; // 0x40de57\n    int64_t v9; // 0x40de57\n    int64_t v10; // 0x40de57\n    int64_t v11; // 0x40de57\n    int64_t v12; // 0x40de57\n    int64_t v13; // 0x40de57\n    int64_t v14; // 0x40de57\n    int64_t v15; // 0x40de57\n    int64_t v16; // 0x40de57\n    int64_t v17; // 0x40de57\n    int64_t v18; // 0x40de57\n    int64_t result; // 0x40de57\n    int64_t v19; // 0x40de57\n    int32_t wc; // bp+132, 0x40de57\n    int64_t ps; // bp+136, 0x40de57\n    char v20; // 0x40e410\n    int64_t v21; // 0x40e410\n    int64_t v22; // 0x40e7b8\n    int64_t v23; // 0x40de57\n    int64_t v24; // 0x40e7d7\n    int32_t v25; // 0x40de57\n    while (true) {\n      lab_0x40dea8_2:\n        // 0x40dea8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x40de57\n        int64_t v27; // 0x40dedc\n        while (true) {\n          lab_0x40dea8:\n            // 0x40dea8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x40deb3\n            if (v15 == -1) {\n                // 0x40deb5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x40dec3\n            if (v28) {\n                // break (via goto) -> 0x40e628\n                goto lab_0x40e628;\n            }\n            // 0x40decc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g121 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40e4bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x40e001;\n                    }\n                    // 0x40e8dd\n                    v26 = v5 + 1;\n                    goto lab_0x40dea8;\n                }\n                case 7: {\n                    goto lab_0x40e001;\n                }\n                case 8: {\n                    goto lab_0x40e001;\n                }\n                case 9: {\n                    goto lab_0x40e21a_2;\n                }\n                case 10: {\n                    goto lab_0x40e21a_2;\n                }\n                case 11: {\n                    goto lab_0x40e001;\n                }\n                case 12: {\n                    goto lab_0x40e001;\n                }\n                case 13: {\n                    goto lab_0x40e21a_2;\n                }\n                case 32: {\n                    goto lab_0x40e21a_2;\n                }\n                case 33: {\n                    goto lab_0x40e21a_2;\n                }\n                case 34: {\n                    goto lab_0x40e21a_2;\n                }\n                case 35: {\n                    goto lab_0x40dfcd;\n                }\n                case 36: {\n                    goto lab_0x40e21a_2;\n                }\n                case 37: {\n                    goto lab_0x40e001;\n                }\n                case 38: {\n                    goto lab_0x40e21a_2;\n                }\n                case 39: {\n                    goto lab_0x40e21a_2;\n                }\n                case 40: {\n                    goto lab_0x40e21a_2;\n                }\n                case 41: {\n                    goto lab_0x40e21a_2;\n                }\n                case 42: {\n                    goto lab_0x40e21a_2;\n                }\n                case 43: {\n                    goto lab_0x40e001;\n                }\n                case 44: {\n                    goto lab_0x40e001;\n                }\n                case 45: {\n                    goto lab_0x40e001;\n                }\n                case 46: {\n                    goto lab_0x40e001;\n                }\n                case 47: {\n                    goto lab_0x40e001;\n                }\n                case 48: {\n                    goto lab_0x40e001;\n                }\n                case 49: {\n                    goto lab_0x40e001;\n                }\n                case 50: {\n                    goto lab_0x40e001;\n                }\n                case 51: {\n                    goto lab_0x40e001;\n                }\n                case 52: {\n                    goto lab_0x40e001;\n                }\n                case 53: {\n                    goto lab_0x40e001;\n                }\n                case 54: {\n                    goto lab_0x40e001;\n                }\n                case 55: {\n                    goto lab_0x40e001;\n                }\n                case 56: {\n                    goto lab_0x40e001;\n                }\n                case 57: {\n                    goto lab_0x40e001;\n                }\n                case 58: {\n                    goto lab_0x40e001;\n                }\n                case 59: {\n                    goto lab_0x40e21a_2;\n                }\n                case 60: {\n                    goto lab_0x40e21a_2;\n                }\n                case 61: {\n                    goto lab_0x40e21a_2;\n                }\n                case 62: {\n                    goto lab_0x40e21a_2;\n                }\n                case 63: {\n                    goto lab_0x40e21a_2;\n                }\n                case 65: {\n                    goto lab_0x40e001;\n                }\n                case 66: {\n                    goto lab_0x40e001;\n                }\n                case 67: {\n                    goto lab_0x40e001;\n                }\n                case 68: {\n                    goto lab_0x40e001;\n                }\n                case 69: {\n                    goto lab_0x40e001;\n                }\n                case 70: {\n                    goto lab_0x40e001;\n                }\n                case 71: {\n                    goto lab_0x40e001;\n                }\n                case 72: {\n                    goto lab_0x40e001;\n                }\n                case 73: {\n                    goto lab_0x40e001;\n                }\n                case 74: {\n                    goto lab_0x40e001;\n                }\n                case 75: {\n                    goto lab_0x40e001;\n                }\n                case 76: {\n                    goto lab_0x40e001;\n                }\n                case 77: {\n                    goto lab_0x40e001;\n                }\n                case 78: {\n                    goto lab_0x40e001;\n                }\n                case 79: {\n                    goto lab_0x40e001;\n                }\n                case 80: {\n                    goto lab_0x40e001;\n                }\n                case 81: {\n                    goto lab_0x40e001;\n                }\n                case 82: {\n                    goto lab_0x40e001;\n                }\n                case 83: {\n                    goto lab_0x40e001;\n                }\n                case 84: {\n                    goto lab_0x40e001;\n                }\n                case 85: {\n                    goto lab_0x40e001;\n                }\n                case 86: {\n                    goto lab_0x40e001;\n                }\n                case 87: {\n                    goto lab_0x40e001;\n                }\n                case 88: {\n                    goto lab_0x40e001;\n                }\n                case 89: {\n                    goto lab_0x40e001;\n                }\n                case 90: {\n                    goto lab_0x40e001;\n                }\n                case 91: {\n                    goto lab_0x40e21a_2;\n                }\n                case 92: {\n                    goto lab_0x40e21a_2;\n                }\n                case 93: {\n                    goto lab_0x40e001;\n                }\n                case 94: {\n                    goto lab_0x40e21a_2;\n                }\n                case 95: {\n                    goto lab_0x40e001;\n                }\n                case 96: {\n                    goto lab_0x40e21a_2;\n                }\n                case 97: {\n                    goto lab_0x40e001;\n                }\n                case 98: {\n                    goto lab_0x40e001;\n                }\n                case 99: {\n                    goto lab_0x40e001;\n                }\n                case 100: {\n                    goto lab_0x40e001;\n                }\n                case 101: {\n                    goto lab_0x40e001;\n                }\n                case 102: {\n                    goto lab_0x40e001;\n                }\n                case 103: {\n                    goto lab_0x40e001;\n                }\n                case 104: {\n                    goto lab_0x40e001;\n                }\n                case 105: {\n                    goto lab_0x40e001;\n                }\n                case 106: {\n                    goto lab_0x40e001;\n                }\n                case 107: {\n                    goto lab_0x40e001;\n                }\n                case 108: {\n                    goto lab_0x40e001;\n                }\n                case 109: {\n                    goto lab_0x40e001;\n                }\n                case 110: {\n                    goto lab_0x40e001;\n                }\n                case 111: {\n                    goto lab_0x40e001;\n                }\n                case 112: {\n                    goto lab_0x40e001;\n                }\n                case 113: {\n                    goto lab_0x40e001;\n                }\n                case 114: {\n                    goto lab_0x40e001;\n                }\n                case 115: {\n                    goto lab_0x40e001;\n                }\n                case 116: {\n                    goto lab_0x40e001;\n                }\n                case 117: {\n                    goto lab_0x40e001;\n                }\n                case 118: {\n                    goto lab_0x40e001;\n                }\n                case 119: {\n                    goto lab_0x40e001;\n                }\n                case 120: {\n                    goto lab_0x40e001;\n                }\n                case 121: {\n                    goto lab_0x40e001;\n                }\n                case 122: {\n                    goto lab_0x40e001;\n                }\n                case 123: {\n                    goto lab_0x40dfa5;\n                }\n                case 124: {\n                    goto lab_0x40e21a_2;\n                }\n                case 125: {\n                    goto lab_0x40dfa5;\n                }\n                case 126: {\n                    goto lab_0x40dfcd;\n                }\n                default: {\n                    goto lab_0x40e3a5;\n                }\n            }\n        }\n      lab_0x40e3a5:\n        if (v23 != 1) {\n            // 0x40e710\n            ps = 0;\n            int64_t len = v15; // 0x40e720\n            if (v15 == -1) {\n                // 0x40e722\n                len = strlen((char *)str);\n            }\n            // 0x40e74e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40e7af:\n                // 0x40e7af\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x40e7b4\n                int64_t v30 = v29 + str;\n                v24 = function_412fb0((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40ed2a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40ed2a_2;\n                    }\n                    case -2: {\n                        // 0x40ee0d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x40ee47\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40ee4a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x40ee57\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x40ee50\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40ed2a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40ed2a_2;\n                    }\n                    case 1: {\n                        goto lab_0x40e780;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40e82c\n                        char v34 = *(char *)v33; // 0x40e83d\n                        unsigned char v35; // 0x40de57\n                        if (v34 < 125) {\n                            // 0x40e848\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40e85f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40e21a_2;\n                            }\n                        }\n                        // 0x40e830\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40e83d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x40e848\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40e85f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40e21a_2;\n                                }\n                            }\n                            // 0x40e830\n                            v33++;\n                        }\n                        goto lab_0x40e780;\n                    }\n                }\n            }\n            goto lab_0x40ed2a_2;\n        } else {\n            // 0x40e3f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x40e001;\n        }\n    }\n  lab_0x40e628:\n    // 0x40e628\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40ef2a\n        if (v8 > result) {\n            // 0x40ef33\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x40e257\n        return result;\n    }\n    goto lab_0x40e21a_2;\n  lab_0x40e001:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x40e010\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40e21a_2;\n        }\n    }\n    int64_t v42 = result; // 0x40e111\n    char v43 = v20; // 0x40e111\n    int64_t v44 = v58; // 0x40e111\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x40e111\n    int64_t v46 = v56; // 0x40e111\n    goto lab_0x40e08d;\n  lab_0x40e21a_2:;\n    // 0x40e257\n    char * v36; // 0x40de57\n    return function_40de00(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40ed2a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x40e001;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x40e8fe\n        int64_t v41 = v5 + 1; // 0x40e9e1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x40e9e8\n        char v48 = v20; // 0x40e9e8\n        int64_t v49 = result; // 0x40e9e8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x40e9b1\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x40e9b5\n            int64_t v52 = v50 + 1; // 0x40e9ba\n            int64_t v53 = v47 + 1; // 0x40e9e1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40e9ac\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x40e9b1\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x40e9b5\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40e08d;\n    }\n  lab_0x40e780:\n    // 0x40e780\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40e79f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40e7a2\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40ed2a\n        goto lab_0x40ed2a_2;\n    }\n    goto lab_0x40e7af;\n  lab_0x40dfcd:\n    // 0x40dfcd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40e21a_2;\n    }\n    goto lab_0x40e001;\n  lab_0x40dfa5:;\n    bool v61 = v15 == 1; // 0x40dfb0\n    if (v15 == -1) {\n        // 0x40dfb2\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40dfbe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x40e001;\n    } else {\n        goto lab_0x40dfcd;\n    }\n  lab_0x40e08d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x40e092\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x40e096\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x40dea8_2;\n}\n"
        },
        {
            "funcName": "function_40f030",
            "funcStartAddr": "40f030",
            "funcEndAddr": "40f1ce",
            "decompiledFuncCode": "int64_t function_40f030(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40f032\n    int32_t * v3 = __errno_location(); // 0x40f04c\n    int64_t v4 = (int64_t)g43; // 0x40f051\n    int32_t v5 = *v3; // 0x40f05b\n    int64_t v6 = v4; // 0x40f071\n    if (v2 >= (int64_t)*(int32_t *)&g46) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x40f1c9\n            function_411460(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x40f080\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x40f087\n        int64_t v9; // 0x40f030\n        if (g43 == &g44) {\n            int64_t v10 = function_411270(0, v8); // 0x40f1aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g44); // 0x40f1af\n            *(int64_t *)&g43 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_411270(v4, v8); // 0x40f09b\n            *(int64_t *)&g43 = v12;\n            v9 = v12;\n        }\n        // 0x40f0aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g46; // 0x40f0aa\n        int32_t v14 = v7; // 0x40f0b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g46 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x40f0e1\n    int64_t v17 = v15 + 8; // 0x40f0e4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40f0eb\n    int64_t * v19 = (int64_t *)v16; // 0x40f0ee\n    uint64_t v20 = *v19; // 0x40f0ee\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x40f0f1\n    int64_t result = *v21; // 0x40f0f1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40f0fc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x40f105\n    int64_t v24; // 0x40f030\n    uint64_t v25 = function_40de00(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x40f114\n    if (v20 > v25) {\n        // 0x40f18b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x40f127\n    *v19 = v26;\n    if (result != (int64_t)&g110) {\n        // 0x40f137\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_411210(v26); // 0x40f151\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40f16b\n    int64_t v28 = *v23; // 0x40f16e\n    int64_t v29; // 0x40f030\n    function_40de00(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40f18b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40f1d0",
            "funcStartAddr": "40f1d0",
            "funcEndAddr": "40f204",
            "decompiledFuncCode": "int64_t function_40f1d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40f1d7\n    int64_t v2 = a1 == 0 ? (int64_t)&g111 : a1; // 0x40f1ef\n    int64_t result = function_411410((int64_t *)v2, 56); // 0x40f1f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f210",
            "funcStartAddr": "40f210",
            "funcEndAddr": "40f21f",
            "decompiledFuncCode": "int64_t function_40f210(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g111 : a1); // 0x40f21c\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f220",
            "funcStartAddr": "40f220",
            "funcEndAddr": "40f22f",
            "decompiledFuncCode": "int64_t function_40f220(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g111 : a1; // 0x40f228\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g111;\n}\n"
        },
        {
            "funcName": "function_40f230",
            "funcStartAddr": "40f230",
            "funcEndAddr": "40f263",
            "decompiledFuncCode": "int64_t function_40f230(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g111 + 8 : a1 + 8; // 0x40f249\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40f24e\n    uint32_t v3 = *v2; // 0x40f24e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x40f252\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_40f270",
            "funcStartAddr": "40f270",
            "funcEndAddr": "40f283",
            "decompiledFuncCode": "int64_t function_40f270(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g111 + 4 : a1 + 4); // 0x40f27c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_40f290",
            "funcStartAddr": "40f290",
            "funcEndAddr": "40f2bb",
            "decompiledFuncCode": "int64_t function_40f290(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g111 : a1; // 0x40f298\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x40f2b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40f2ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g111;\n}\n"
        },
        {
            "funcName": "function_40f2c0",
            "funcStartAddr": "40f2c0",
            "funcEndAddr": "40f332",
            "decompiledFuncCode": "int64_t function_40f2c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g111 : a5; // 0x40f2e2\n    int32_t * v2 = __errno_location(); // 0x40f2eb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x40f304\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x40f308\n    uint32_t v5 = *(int32_t *)v1; // 0x40f30b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x40f311\n    int64_t result = function_40de00(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40f31a\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f340",
            "funcStartAddr": "40f340",
            "funcEndAddr": "40f421",
            "decompiledFuncCode": "int64_t function_40f340(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g111 : a4; // 0x40f362\n    int32_t * v2 = __errno_location(); // 0x40f368\n    int64_t v3 = v1 + 8; // 0x40f37f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x40f387\n    int32_t * v5 = (int32_t *)v1; // 0x40f38a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x40f398\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40f39b\n    int64_t v8 = function_40de00(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x40f3a5\n    int64_t v9 = v8 + 1; // 0x40f3aa\n    int64_t result = function_411210(v9); // 0x40f3bf\n    function_40de00(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x40f404\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40f40d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f430",
            "funcStartAddr": "40f430",
            "funcEndAddr": "40f43a",
            "decompiledFuncCode": "int64_t function_40f430(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40f430\n    return function_40f340(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_40f440",
            "funcStartAddr": "40f440",
            "funcEndAddr": "40f4d5",
            "decompiledFuncCode": "int64_t function_40f440(void) {\n    uint32_t v1 = *(int32_t *)&g46; // 0x40f440\n    int64_t v2 = v1; // 0x40f440\n    int64_t v3 = v2; // 0x40f454\n    if (v1 >= 2) {\n        int64_t v4 = &g46;\n        int64_t v5 = v4 + 16; // 0x40f473\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g122;\n        while (v5 != (int64_t)g43 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x40f470\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g122;\n        }\n    }\n    int64_t v6 = v3; // 0x40f48d\n    if (g44 != 0x61cbe0) {\n        // 0x40f48f\n        free((int64_t *)g44);\n        g44 = 256;\n        *(int64_t *)&g45 = (int64_t)&g110;\n        v6 = &g122;\n    }\n    int64_t result = v6; // 0x40f4b1\n    if (g43 != &g44) {\n        // 0x40f4b3\n        free(g43);\n        *(int64_t *)&g43 = (int64_t)&g44;\n        result = &g122;\n    }\n    // 0x40f4c6\n    *(int32_t *)&g46 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f4e0",
            "funcStartAddr": "40f4e0",
            "funcEndAddr": "40f4f1",
            "decompiledFuncCode": "int64_t function_40f4e0(void) {\n    // 0x40f4e0\n    int64_t v1; // 0x40f4e0\n    return function_40f030(v1, v1, -1, (int64_t *)&g111);\n}\n"
        },
        {
            "funcName": "function_40f500",
            "funcStartAddr": "40f500",
            "funcEndAddr": "40f50a",
            "decompiledFuncCode": "int64_t function_40f500(void) {\n    // 0x40f500\n    int64_t v1; // 0x40f500\n    return function_40f030(v1, v1, v1, (int64_t *)&g111);\n}\n"
        },
        {
            "funcName": "function_40f510",
            "funcStartAddr": "40f510",
            "funcEndAddr": "40f526",
            "decompiledFuncCode": "int64_t function_40f510(int64_t a1) {\n    // 0x40f510\n    return function_40f030(0, a1, -1, (int64_t *)&g111);\n}\n"
        },
        {
            "funcName": "function_40f530",
            "funcStartAddr": "40f530",
            "funcEndAddr": "40f542",
            "decompiledFuncCode": "int64_t function_40f530(int64_t a1, int64_t a2) {\n    // 0x40f530\n    return function_40f030(0, a1, a2, (int64_t *)&g111);\n}\n"
        },
        {
            "funcName": "function_40f550",
            "funcStartAddr": "40f550",
            "funcEndAddr": "40f5b8",
            "decompiledFuncCode": "int64_t function_40f550(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40f560\n    return function_40f030((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40f5c0",
            "funcStartAddr": "40f5c0",
            "funcEndAddr": "40f624",
            "decompiledFuncCode": "int64_t function_40f5c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40f5d0\n    return function_40f030((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_40f630",
            "funcStartAddr": "40f630",
            "funcEndAddr": "40f63c",
            "decompiledFuncCode": "int64_t function_40f630(int64_t a1, int64_t a2) {\n    // 0x40f630\n    return function_40f550(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_40f640",
            "funcStartAddr": "40f640",
            "funcEndAddr": "40f64f",
            "decompiledFuncCode": "int64_t function_40f640(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40f640\n    return function_40f5c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_40f650",
            "funcStartAddr": "40f650",
            "funcEndAddr": "40f6c0",
            "decompiledFuncCode": "int64_t function_40f650(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g111); // 0x40f65d\n    int128_t v2 = __asm_movdqa(g112); // 0x40f665\n    int128_t v3 = __asm_movdqa(g113); // 0x40f66d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x40f682\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x40f698\n    uint32_t v6 = *v5; // 0x40f698\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40f69d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_40f030(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_40f6c0",
            "funcStartAddr": "40f6c0",
            "funcEndAddr": "40f6cd",
            "decompiledFuncCode": "int64_t function_40f6c0(int64_t a1, int64_t a2) {\n    // 0x40f6c0\n    return function_40f650(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_40f6d0",
            "funcStartAddr": "40f6d0",
            "funcEndAddr": "40f6e1",
            "decompiledFuncCode": "int64_t function_40f6d0(int64_t a1) {\n    // 0x40f6d0\n    return function_40f650(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_40f6f0",
            "funcStartAddr": "40f6f0",
            "funcEndAddr": "40f6fa",
            "decompiledFuncCode": "int64_t function_40f6f0(void) {\n    // 0x40f6f0\n    int64_t v1; // 0x40f6f0\n    return function_40f650(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_40f700",
            "funcStartAddr": "40f700",
            "funcEndAddr": "40f76e",
            "decompiledFuncCode": "int64_t function_40f700(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40f71a\n    return function_40f030((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40f770",
            "funcStartAddr": "40f770",
            "funcEndAddr": "40f7dc",
            "decompiledFuncCode": "int64_t function_40f770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g111); // 0x40f777\n    int128_t v2 = __asm_movdqa(g112); // 0x40f77f\n    int128_t v3 = __asm_movdqa(g113); // 0x40f787\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x40f7a9\n    if (a2 == 0 || a3 == 0) {\n        // 0x40f7d7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40f7ba\n    return function_40f030(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_40f7e0",
            "funcStartAddr": "40f7e0",
            "funcEndAddr": "40f7e9",
            "decompiledFuncCode": "int64_t function_40f7e0(void) {\n    // 0x40f7e0\n    int64_t v1; // 0x40f7e0\n    return function_40f770(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_40f7f0",
            "funcStartAddr": "40f7f0",
            "funcEndAddr": "40f807",
            "decompiledFuncCode": "int64_t function_40f7f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40f7f0\n    return function_40f770(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_40f810",
            "funcStartAddr": "40f810",
            "funcEndAddr": "40f823",
            "decompiledFuncCode": "int64_t function_40f810(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40f810\n    return function_40f770(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40f830",
            "funcStartAddr": "40f830",
            "funcEndAddr": "40f83a",
            "decompiledFuncCode": "int64_t function_40f830(void) {\n    // 0x40f830\n    int64_t v1; // 0x40f830\n    return function_40f030(v1, v1, v1, &g42);\n}\n"
        },
        {
            "funcName": "function_40f840",
            "funcStartAddr": "40f840",
            "funcEndAddr": "40f852",
            "decompiledFuncCode": "int64_t function_40f840(int64_t a1, int64_t a2) {\n    // 0x40f840\n    return function_40f030(0, a1, a2, &g42);\n}\n"
        },
        {
            "funcName": "function_40f860",
            "funcStartAddr": "40f860",
            "funcEndAddr": "40f871",
            "decompiledFuncCode": "int64_t function_40f860(int64_t a1, int64_t * a2) {\n    // 0x40f860\n    return function_40f030(a1, (int64_t)a2, -1, &g42);\n}\n"
        },
        {
            "funcName": "function_40f880",
            "funcStartAddr": "40f880",
            "funcEndAddr": "40f896",
            "decompiledFuncCode": "int64_t function_40f880(int64_t a1) {\n    // 0x40f880\n    return function_40f030(0, a1, -1, &g42);\n}\n"
        },
        {
            "funcName": "function_40f8a0",
            "funcStartAddr": "40f8a0",
            "funcEndAddr": "40f8fd",
            "decompiledFuncCode": "int64_t function_40f8a0(int64_t a1) {\n    // 0x40f8a0\n    function_40f880(a1);\n    int32_t * err_num = __errno_location(); // 0x40f8b7\n    char * format; // 0x40f8a0\n    if (*err_num == 0) {\n        // 0x40f8ef\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x40f8c9\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x40f8d5\n    error(g41, *err_num, format);\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_40f900",
            "funcStartAddr": "40f900",
            "funcEndAddr": "40fbef",
            "decompiledFuncCode": "int64_t function_40f900(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_411210(0x1038); // 0x40fa1d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x40f8a0;\n        *(int64_t *)(result + 16) = 0;\n        // 0x40f972\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_4136b0(a1, \"rb\"); // 0x40f927\n        int64_t result2 = 0; // 0x40f932\n        if (stream != 0) {\n            // 0x40f938\n            result2 = function_411210(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x40f954\n            *(int64_t *)(result2 + 8) = 0x40f8a0;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x40f972\n        return result2;\n    }\n    int64_t result3 = function_411210(0x1038); // 0x40f98d\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x40f9a3\n    *(int64_t *)(result3 + 8) = 0x40f8a0;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x40f9c1\n    int64_t v2; // 0x40f900\n    int128_t pid2; // bp-72, 0x40f900\n    if (fd < 0) {\n        // 0x40fa48\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x40fa67\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x40f9eb\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x40fa08\n            function_410070(v1);\n            // 0x40f972\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x40fb76\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x40fb82\n        uint64_t v7 = v6 + v4; // 0x40fb88\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x40fa08\n            function_410070(v1);\n            // 0x40f972\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x40fbb1\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x40fbbd\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x40fbd5\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x40fa08\n            function_410070(v1);\n            // 0x40f972\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x40fa7d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x40fa84\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x40faa0\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x40fa9e\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x40faaf\n    if (v16 >= 2048) {\n        // 0x40fa08\n        function_410070(v1);\n        // 0x40f972\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x40faca\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x40fad1\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x40faef\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x40faed\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x40fafe\n    if (v21 >= 2048) {\n        // 0x40fa08\n        function_410070(v1);\n        // 0x40f972\n        return result3;\n    }\n    // 0x40fb0e\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x40fb26\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x40fb2d\n    if (v23 == 0) {\n        // 0x40fa08\n        function_410070(v1);\n        // 0x40f972\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x40fb3f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x40fb3d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x40fa08\n    function_410070(v1);\n    // 0x40f972\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40fbf0",
            "funcStartAddr": "40fbf0",
            "funcEndAddr": "40fbf5",
            "decompiledFuncCode": "int64_t function_40fbf0(int64_t a1, int64_t a2) {\n    // 0x40fbf0\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x40fbf0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40fc00",
            "funcStartAddr": "40fc00",
            "funcEndAddr": "40fc05",
            "decompiledFuncCode": "int64_t function_40fc00(int64_t a1, int64_t a2) {\n    // 0x40fc00\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x40fc00\n    return result;\n}\n"
        },
        {
            "funcName": "function_40fc10",
            "funcStartAddr": "40fc10",
            "funcEndAddr": "40fd6c",
            "decompiledFuncCode": "int64_t function_40fc10(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x40fc2f\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x40fc6a\n        int64_t v3 = a3 - result; // 0x40fc75\n        if (v3 == 0) {\n            // 0x40fc7a\n            return result;\n        }\n        int64_t v4 = v3; // 0x40fc75\n        int64_t v5 = result + v1; // 0x40fc72\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x40fc44\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x40fc6a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x40fc7a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x40fc90\n    int64_t v9 = a3; // 0x40fca2\n    int64_t * v10; // 0x40fc10\n    int64_t v11; // 0x40fc10\n    int64_t v12; // 0x40fc10\n    int64_t v13; // 0x40fc10\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x40fcb3\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x40fcca\n            function_40fdc0(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x40fd25;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_40fdc0(32, v17); // 0x40fcfd\n            int64_t v19 = v18 - 2048; // 0x40fd02\n            if (v19 == 0) {\n                // 0x40fd48\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x40fd14\n        function_40fdc0(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x40fd60\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x40fd25:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x40fd2e\n    *(int64_t *)24 = v11 - v13;\n    // 0x40fc7a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_40fd70",
            "funcStartAddr": "40fd70",
            "funcEndAddr": "40fdb9",
            "decompiledFuncCode": "int64_t function_40fd70(int64_t a1) {\n    // 0x40fd70\n    __explicit_bzero_chk();\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x40fdb0\n        return 0;\n    }\n    // 0x40fd9a\n    return function_411f80(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_40fdc0",
            "funcStartAddr": "40fdc0",
            "funcEndAddr": "410065",
            "decompiledFuncCode": "int64_t function_40fdc0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x40fdc0\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x40fdc7\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x40fdd6\n    int64_t v4 = *v1 + 1; // 0x40fde0\n    *v1 = v4;\n    int64_t v5 = a2; // 0x40fdf1\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x40fe02\n    int64_t v9 = *v8; // 0x40fe02\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x40fe08\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x40fe23\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x40fe42\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x40fe48\n    int64_t v14 = *v13; // 0x40fe48\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x40fe4c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x40fe70\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x40fe85\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x40fe8c\n    int64_t v19 = *v18; // 0x40fe8c\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x40fe90\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x40feab\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x40febd\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x40fec8\n    int64_t v24 = *v23; // 0x40fec8\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x40fed9\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x40fef0\n    int64_t v27 = v7 + 32; // 0x40fef3\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x40ff0d\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x40fdf8\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x40ff2b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x40ff3a\n    int64_t v33 = *v32; // 0x40ff3a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x40ff40\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x40ff65\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x40ff76\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x40ff7d\n    int64_t v38 = *v37; // 0x40ff7d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x40ff84\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x40ffa8\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x40ffbd\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x40ffc4\n    int64_t v43 = *v42; // 0x40ffc4\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x40ffc8\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x40ffe3\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x40fff5\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x410000\n    int64_t v48 = *v47; // 0x410000\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x410011\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x410028\n    int64_t result = v31 + 32; // 0x41002b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x410045\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x40ff30\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x410055\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_410070",
            "funcStartAddr": "410070",
            "funcEndAddr": "4102a4",
            "decompiledFuncCode": "int64_t function_410070(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x4100b7\n    int64_t v2 = a1; // 0x4100d3\n    int64_t * v3 = (int64_t *)v2; // 0x4100d8\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x4100db\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x4100db\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x4100df\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x4100df\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x4100e3\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x4100ea\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x4100ee\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x4100fb\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x4100fe\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x410105\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x410112\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x410115\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x41011c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x410129\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x41012c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x410133\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x410140\n    int64_t v21 = v5 - v20; // 0x410146\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x410150\n    uint64_t v23 = v11 - v22; // 0x410159\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x410164\n    int64_t v25 = v14 - v24; // 0x41016e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x41017d\n    int64_t v27 = v23 + v25; // 0x410183\n    int64_t v28 = v17 - v26; // 0x410186\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x410191\n    int64_t v30 = v28 + v25; // 0x410194\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x4101aa\n    while (v1 != v2) {\n        // 0x4100d8\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x4101b0\n    uint64_t v33 = *v32 + v28; // 0x4101b0\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x4101b4\n    int64_t v35 = *v34 + v29; // 0x4101b4\n    int64_t * v36 = (int64_t *)v31; // 0x4101b8\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x4101be\n    int64_t v38 = *v36 + v20 - v35; // 0x4101c2\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x4101c9\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x4101cd\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x4101d1\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x4101d7\n    uint64_t v43 = *v39 + v22 - v41; // 0x4101de\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x4101e5\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x4101e9\n    int64_t v46 = *v42 + v24 - v45; // 0x4101f2\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x4101f9\n    uint64_t v48 = *v44 + v26 - v47; // 0x410202\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x410209\n    int64_t v50 = v35 - v49; // 0x410212\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x41021c\n    uint64_t v52 = v41 - v51; // 0x410225\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x410230\n    int64_t result = v52 + v50; // 0x410233\n    int64_t v54 = v45 - v53; // 0x41023a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x410245\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x410249\n    int64_t v57 = v54 + v52; // 0x41024f\n    int64_t v58 = v47 - v56; // 0x410252\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x41025d\n    int64_t v60 = v58 + v54; // 0x410260\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x4101b0\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x41027c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4102b0",
            "funcStartAddr": "4102b0",
            "funcEndAddr": "410399",
            "decompiledFuncCode": "int64_t function_4102b0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 48); // 0x4102b4\n    int64_t v2 = *v1; // 0x4102b4\n    int64_t * v3 = (int64_t *)(a1 + 40); // 0x4102bb\n    int64_t v4 = *v3; // 0x4102bb\n    if (v2 == v4) {\n        char * v5 = (char *)(a1 + 104); // 0x410390\n        *v5 = *v5 | 2;\n    }\n    int64_t v6 = *(int64_t *)(a1 + 72); // 0x4102d2\n    int64_t v7 = *(int64_t *)(a1 + 56); // 0x4102dd\n    int64_t v8 = v6 + v2 & -1 - v6; // 0x4102e1\n    int64_t v9 = *(int64_t *)(a1 + 32); // 0x4102e4\n    int64_t v10 = v7 - v9; // 0x4102f5\n    int64_t v11 = v8 - v9 > v10 ? v7 : v8;\n    *v1 = v11;\n    *v3 = v11;\n    int64_t * v12 = (int64_t *)(a1 + 136); // 0x410308\n    int64_t v13 = *v12; // 0x410308\n    int64_t v14 = v13; // 0x41031d\n    int64_t v15 = v10; // 0x41031d\n    if (*(int64_t *)(a1 + 144) - v13 < 8) {\n        // 0x410358\n        v15 = a1 + 112;\n        _obstack_newchunk(v15, 8, v13, v9);\n        v14 = *v12;\n    }\n    // 0x41031f\n    *(int64_t *)v14 = v4;\n    int64_t * v16 = (int64_t *)(a1 + 224); // 0x410322\n    int64_t v17 = *v16; // 0x410322\n    *v12 = *v12 + 8;\n    int64_t v18 = *(int64_t *)(a1 + 232) - v17; // 0x410338\n    int64_t result = v18; // 0x41033f\n    int64_t v19 = v17; // 0x41033f\n    int64_t v20 = v15; // 0x41033f\n    if (v18 < 8) {\n        // 0x410370\n        v20 = a1 + 200;\n        result = _obstack_newchunk(v20, 8, v17, v9);\n        v19 = *v16;\n    }\n    // 0x410341\n    *(int64_t *)v19 = v2 + -1 - v4;\n    *v16 = *v16 + 8;\n    *(int64_t *)a1 = v20 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4103a0",
            "funcStartAddr": "4103a0",
            "funcEndAddr": "410407",
            "decompiledFuncCode": "int64_t function_4103a0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    *a1 = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int64_t *)(v1 + 16) = 0;\n    _obstack_begin(v1 + 24, 0, 0, 0x402c20, 0x4027e0);\n    _obstack_begin(v1 + 112, 0, 0, 0x402c20, 0x4027e0);\n    return _obstack_begin(v1 + 200, 0, 0, 0x402c20, 0x4027e0);\n}\n"
        },
        {
            "funcName": "function_410410",
            "funcStartAddr": "410410",
            "funcEndAddr": "410439",
            "decompiledFuncCode": "int64_t function_410410(int64_t a1, int64_t a2) {\n    // 0x410410\n    _obstack_free(a1 + 24, 0);\n    _obstack_free(a1 + 112, 0);\n    return _obstack_free(a1 + 200, 0);\n}\n"
        },
        {
            "funcName": "function_410440",
            "funcStartAddr": "410440",
            "funcEndAddr": "410653",
            "decompiledFuncCode": "int64_t function_410440(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = v1 + 24; // 0x410442\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x410469\n    int32_t c = fgetc(stream); // 0x410469\n    int64_t * v3 = (int64_t *)(v1 + 48);\n    int64_t v4; // 0x410440\n    int64_t v5; // 0x410440\n    if (c != -1) {\n        int32_t c2 = c; // 0x4104b3\n        int64_t v6; // 0x410440\n        int64_t v7 = v6; // 0x410440\n        int32_t v8; // 0x410440\n        int64_t v9; // 0x410440\n        int64_t v10; // 0x410440\n        int64_t v11; // 0x410440\n        int64_t v12; // 0x410440\n        int64_t v13; // 0x410473\n        int64_t v14; // 0x410458\n        int64_t v15; // 0x41048e\n        int64_t v16; // 0x410496\n        while (true) {\n            // 0x410473\n            v8 = c2;\n            v13 = *v3;\n            if (*(int64_t *)(v1 + 56) != v13) {\n                // 0x410458\n                v14 = v13 + 1;\n                *v3 = v14;\n                *(char *)v13 = (char)v8;\n                v9 = v14;\n                v11 = v13;\n                v10 = v14;\n                v12 = v13;\n                if (v8 != 0) {\n                    // break -> 0x410466\n                    break;\n                }\n            } else {\n                // 0x41047d\n                _obstack_newchunk(v2, 1, v13, v7);\n                v15 = *v3;\n                v16 = v15 + 1;\n                *v3 = v16;\n                *(char *)v15 = (char)v8;\n                v9 = v16;\n                v11 = v15;\n                v10 = v16;\n                v12 = v15;\n                if (v8 != 0) {\n                    // break -> 0x410466\n                    break;\n                }\n            }\n            // 0x4104a8\n            function_4102b0(v1);\n            c2 = fgetc(stream);\n            v7 = v10;\n            v4 = v10;\n            v5 = v12;\n            if (c2 == -1) {\n                // break (via goto) -> 0x4104c0\n                goto lab_0x4104c0;\n            }\n        }\n        int32_t c3 = fgetc(stream); // 0x410469\n        v4 = v9;\n        v5 = v11;\n        while (c3 != -1) {\n            // 0x410473\n            c2 = c3;\n            v7 = v9;\n            while (true) {\n                // 0x410473\n                v8 = c2;\n                v13 = *v3;\n                if (*(int64_t *)(v1 + 56) != v13) {\n                    // 0x410458\n                    v14 = v13 + 1;\n                    *v3 = v14;\n                    *(char *)v13 = (char)v8;\n                    v9 = v14;\n                    v11 = v13;\n                    v10 = v14;\n                    v12 = v13;\n                    if (v8 != 0) {\n                        // break -> 0x410466\n                        break;\n                    }\n                } else {\n                    // 0x41047d\n                    _obstack_newchunk(v2, 1, v13, v7);\n                    v15 = *v3;\n                    v16 = v15 + 1;\n                    *v3 = v16;\n                    *(char *)v15 = (char)v8;\n                    v9 = v16;\n                    v11 = v15;\n                    v10 = v16;\n                    v12 = v15;\n                    if (v8 != 0) {\n                        // break -> 0x410466\n                        break;\n                    }\n                }\n                // 0x4104a8\n                function_4102b0(v1);\n                c2 = fgetc(stream);\n                v7 = v10;\n                v4 = v10;\n                v5 = v12;\n                if (c2 == -1) {\n                    // break (via goto) -> 0x4104c0\n                    goto lab_0x4104c0;\n                }\n            }\n            // 0x410466\n            c3 = fgetc(stream);\n            v4 = v9;\n            v5 = v11;\n        }\n    }\n  lab_0x4104c0:;\n    int64_t v17 = *v3; // 0x4104c0\n    if (v17 != *(int64_t *)(v1 + 40)) {\n        int64_t v18 = v17; // 0x4104ce\n        if (v17 == *(int64_t *)(v1 + 56)) {\n            // 0x41063c\n            _obstack_newchunk(v2, 1, v5, v4);\n            v18 = *v3;\n        }\n        // 0x4104d4\n        *v3 = v18 + 1;\n        *(char *)v18 = 0;\n        function_4102b0(v1);\n    }\n    int64_t * v19 = (int64_t *)(v1 + 136); // 0x4104e7\n    int64_t v20 = *v19; // 0x4104e7\n    int64_t * v21 = (int64_t *)(v1 + 144); // 0x4104ee\n    int64_t v22 = v20; // 0x4104fc\n    if (*v21 - v20 < 8) {\n        // 0x410600\n        _obstack_newchunk(v1 + 112, 8, v20, v4);\n        v22 = *v19;\n    }\n    // 0x410502\n    *(int64_t *)v22 = 0;\n    int64_t * v23 = (int64_t *)(v1 + 128); // 0x410510\n    int64_t v24 = *v23; // 0x410510\n    int64_t v25 = *v19 + 8; // 0x410517\n    *v19 = v25;\n    if (v25 == v24) {\n        char * v26 = (char *)(v1 + 192); // 0x410630\n        *v26 = *v26 | 2;\n    }\n    int64_t v27 = *(int64_t *)(v1 + 160); // 0x41052b\n    int64_t v28 = *(int64_t *)(v1 + 120); // 0x410539\n    int64_t v29 = v27 + v25 & -1 - v27; // 0x41053d\n    int64_t v30 = *v21; // 0x410540\n    int64_t v31 = v29 - v28 > v30 - v28 ? v30 : v29;\n    *v19 = v31;\n    *(int64_t *)(v1 + 8) = v24;\n    int64_t * v32 = (int64_t *)(v1 + 224); // 0x410567\n    int64_t v33 = *v32; // 0x410567\n    int64_t * v34 = (int64_t *)(v1 + 216); // 0x41056e\n    int64_t v35 = *v34; // 0x41056e\n    *v23 = v31;\n    if (v33 == v35) {\n        char * v36 = (char *)(v1 + 280); // 0x410620\n        *v36 = *v36 | 2;\n    }\n    int64_t v37 = *(int64_t *)(v1 + 248); // 0x410585\n    int64_t v38 = *(int64_t *)(v1 + 208); // 0x410593\n    int64_t v39 = v37 + v33 & -1 - v37; // 0x41059a\n    int64_t v40 = *(int64_t *)(v1 + 232); // 0x41059d\n    int64_t v41 = v39 - v38 > v40 - v38 ? v40 : v39;\n    *v32 = v41;\n    *v34 = v41;\n    *(int64_t *)(v1 + 16) = v35;\n    int32_t is_ferror = ferror(stream); // 0x4105d4\n    return (int64_t)(is_ferror & -256) | (int64_t)(is_ferror == 0);\n}\n"
        },
        {
            "funcName": "function_410660",
            "funcStartAddr": "410660",
            "funcEndAddr": "410674",
            "decompiledFuncCode": "int64_t function_410660(void) {\n    // 0x410660\n    int64_t template; // 0x410660\n    return function_410c20((int64_t)mkstemp((char *)template));\n}\n"
        },
        {
            "funcName": "function_410680",
            "funcStartAddr": "410680",
            "funcEndAddr": "410692",
            "decompiledFuncCode": "int64_t function_410680(int64_t a1, int64_t a2) {\n    uint32_t v1 = mkostemp((char *)a1, (int32_t)a2); // 0x410683\n    return function_413640((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_4106a0",
            "funcStartAddr": "4106a0",
            "funcEndAddr": "410c1e",
            "decompiledFuncCode": "int64_t function_4106a0(int64_t a1, int64_t a2, int32_t a3, uint32_t a4) {\n    int64_t v1 = a3;\n    char v2 = a1;\n    char v3 = a2;\n    int64_t v4 = a2 % 256; // 0x4106a4\n    int64_t v5 = a1; // 0x4106ac\n    int64_t v6; // 0x4106a0\n    int64_t v7; // 0x4106a0\n    int64_t v8; // 0x4106a0\n    int64_t v9; // 0x4106a0\n    int64_t v10; // 0x4106a0\n    int64_t v11; // 0x4106a0\n    int64_t v12; // 0x4106a0\n    int64_t v13; // 0x4106a0\n    if (v2 == 45) {\n        unsigned char v14; // 0x4106f4\n        int32_t v15; // 0x4106ff\n        while (true) {\n            // 0x4106f0\n            v5++;\n            v14 = *(char *)v5;\n            if (v14 != 48) {\n                // 0x4106fb\n                v15 = v14;\n                if (v15 != a4) {\n                    // break -> 0x410704\n                    break;\n                }\n            }\n        }\n        int64_t v16 = v14; // 0x4106f4\n        if (v3 != 45) {\n            int64_t v17 = v16; // 0x410711\n            if (v15 == a3) {\n                int64_t v18 = v5 + 1; // 0x410868\n                unsigned char v19 = *(char *)v18; // 0x41086c\n                int64_t v20 = v18; // 0x410871\n                while (v19 == 48) {\n                    // 0x410868\n                    v18 = v20 + 1;\n                    v19 = *(char *)v18;\n                    v20 = v18;\n                }\n                // 0x410873\n                v17 = v19;\n            }\n            // 0x410717\n            if ((int32_t)v17 < 58) {\n                // 0x4106e8\n                return 0xffffffff;\n            }\n            int64_t v21 = a4;\n            int64_t v22 = a2; // 0x41073c\n            int64_t v23 = v4; // 0x41073c\n            if (v4 == 48 || v4 == v21) {\n                int64_t v24 = a2 + 1; // 0x410730\n                unsigned char v25 = *(char *)v24; // 0x410734\n                int64_t v26 = v25; // 0x410734\n                int64_t v27 = v24; // 0x41073c\n                v22 = v24;\n                v23 = v26;\n                while (v25 == 48 || v26 == v21) {\n                    // 0x410730\n                    v24 = v27 + 1;\n                    v25 = *(char *)v24;\n                    v26 = v25;\n                    v27 = v24;\n                    v22 = v24;\n                    v23 = v26;\n                }\n            }\n            int32_t v28 = v23;\n            if (v28 != a3) {\n                // 0x410750\n                return v28 < 58 ? 0xffffffff : 0;\n            }\n            int64_t v29 = v22; // 0x41074a\n            v29++;\n            unsigned char v30 = *(char *)v29; // 0x4108d4\n            while (v30 == 48) {\n                // 0x4108d0\n                v29++;\n                v30 = *(char *)v29;\n            }\n            // 0x410750\n            return (int32_t)v30 < 58 ? 0xffffffff : 0;\n        }\n        int64_t v31 = a2 + 1; // 0x4107f8\n        unsigned char v32 = *(char *)v31; // 0x4107fc\n        int32_t v33 = v32;\n        int64_t v34 = v31; // 0x410804\n        while (v32 == 48 || v33 == a4) {\n            // 0x4107f8\n            v31 = v34 + 1;\n            v32 = *(char *)v31;\n            v33 = v32;\n            v34 = v31;\n        }\n        // 0x410810\n        v9 = v31;\n        v10 = v5;\n        char v35 = v32; // 0x410813\n        int64_t v36 = v16; // 0x410813\n        int64_t v37 = v32; // 0x410813\n        if (v14 == v32 == v33 < 58) {\n            int64_t v38 = v5 + 1; // 0x410830\n            unsigned char v39 = *(char *)v38; // 0x410834\n            int64_t v40 = v38; // 0x41083e\n            while ((int32_t)v39 == a4) {\n                // 0x410830\n                v38 = v40 + 1;\n                v39 = *(char *)v38;\n                v40 = v38;\n            }\n            int64_t v41 = v39; // 0x410834\n            int64_t v42 = v31; // 0x410840\n            int64_t v43 = v42 + 1; // 0x410840\n            unsigned char v44 = *(char *)v43; // 0x410844\n            int64_t v45 = v43; // 0x41084e\n            char v46 = v44; // 0x41084e\n            int64_t v47; // 0x410850\n            unsigned char v48; // 0x410854\n            while ((int32_t)v44 == a4) {\n                // 0x410850\n                v47 = v42 + 2;\n                v48 = *(char *)v47;\n                v45 = v47;\n                v46 = v48;\n                if ((int32_t)v48 != a4) {\n                    // break -> 0x410810\n                    break;\n                }\n                v42 = v47;\n                v43 = v42 + 1;\n                v44 = *(char *)v43;\n                v45 = v43;\n                v46 = v44;\n            }\n            int64_t v49 = v46;\n            v9 = v45;\n            v10 = v38;\n            v35 = v46;\n            v36 = v41;\n            v37 = v49;\n            while (v39 == v46) {\n                // 0x410819\n                v9 = v45;\n                v10 = v38;\n                v35 = v46;\n                v36 = v41;\n                v37 = v49;\n                if ((int32_t)v46 >= 58) {\n                    // break -> 0x410978\n                    break;\n                }\n                v38++;\n                v39 = *(char *)v38;\n                v40 = v38;\n                while ((int32_t)v39 == a4) {\n                    // 0x410830\n                    v38 = v40 + 1;\n                    v39 = *(char *)v38;\n                    v40 = v38;\n                }\n                // 0x410840\n                v41 = v39;\n                v42 = v45;\n                v43 = v42 + 1;\n                v44 = *(char *)v43;\n                v45 = v43;\n                v46 = v44;\n                while ((int32_t)v44 == a4) {\n                    // 0x410850\n                    v47 = v42 + 2;\n                    v48 = *(char *)v47;\n                    v45 = v47;\n                    v46 = v48;\n                    if ((int32_t)v48 != a4) {\n                        // break -> 0x410810\n                        break;\n                    }\n                    v42 = v47;\n                    v43 = v42 + 1;\n                    v44 = *(char *)v43;\n                    v45 = v43;\n                    v46 = v44;\n                }\n                // 0x410810\n                v49 = v46;\n                v9 = v45;\n                v10 = v38;\n                v35 = v46;\n                v36 = v41;\n                v37 = v49;\n            }\n        }\n        int32_t v50 = v35;\n        if ((int32_t)v36 != a3 || v50 < 58) {\n            int64_t v51 = v36 + 0xffffffd0; // 0x410981\n            if (v50 == a3) {\n                if ((int32_t)v51 < 10) {\n                    // 0x410b06\n                    v11 = v1 + 0xffffffd0;\n                    goto lab_0x4109a2;\n                } else {\n                    goto lab_0x410abd;\n                }\n            } else {\n                int64_t v52 = v37 + 0xffffffd0; // 0x410991\n                v11 = v52;\n                if ((int32_t)v51 < 10) {\n                    goto lab_0x4109a2;\n                } else {\n                    // 0x410b90\n                    if ((int32_t)v52 >= 10) {\n                        // 0x4106e8\n                    }\n                    goto lab_0x4109c9;\n                }\n            }\n        } else {\n            goto lab_0x410abd;\n        }\n    } else {\n        int64_t v53 = a1 % 256; // 0x4106a0\n        int64_t v54 = a2; // 0x4106b2\n        if (v3 == 45) {\n            int32_t v55; // 0x4106a0\n            int64_t v56; // 0x4106c0\n            while (true) {\n                // 0x4106c0\n                v56 = v54 + 1;\n                unsigned char v57 = *(char *)v56; // 0x4106c4\n                if (v57 != 48) {\n                    // 0x4106cb\n                    v55 = v57;\n                    if (v55 != a4) {\n                        // break -> 0x4106cf\n                        break;\n                    }\n                }\n                // 0x4106c0\n                v54 = v56;\n            }\n            int32_t v58 = v55; // 0x4106d1\n            int64_t v59 = v56; // 0x4106d1\n            if (v55 == a3) {\n                char v60 = *(char *)(v59 + 1); // 0x410884\n                char v61 = v60; // 0x410889\n                while (v60 == 48) {\n                    int64_t v62 = v59 + 2; // 0x41088f\n                    char v63 = *(char *)v62; // 0x410893\n                    v61 = v63;\n                    v59 = v62;\n                    if (v63 != 48) {\n                        // break -> 0x4106d7\n                        break;\n                    }\n                    v60 = *(char *)(v59 + 1);\n                    v61 = v60;\n                }\n                // 0x4106d7\n                v58 = v61;\n            }\n            // 0x4106d7\n            if (v58 < 58) {\n                // 0x4106e8\n                return 1;\n            }\n            int64_t v64 = a4;\n            int64_t v65 = a1; // 0x4108ac\n            int64_t v66 = v53; // 0x4108ac\n            if (v53 == 48 || v53 == v64) {\n                int64_t v67 = a1 + 1; // 0x4108a0\n                unsigned char v68 = *(char *)v67; // 0x4108a4\n                int64_t v69 = v68; // 0x4108a4\n                int64_t v70 = v67; // 0x4108ac\n                v65 = v67;\n                v66 = v69;\n                while (v68 == 48 || v69 == v64) {\n                    // 0x4108a0\n                    v67 = v70 + 1;\n                    v68 = *(char *)v67;\n                    v69 = v68;\n                    v70 = v67;\n                    v65 = v67;\n                    v66 = v69;\n                }\n            }\n            // 0x4108b6\n            if ((int32_t)v66 != a3) {\n                // 0x4108be\n                return (int32_t)v66 < 58;\n            }\n            int64_t v71 = v65; // 0x4108b8\n            v71++;\n            unsigned char v72 = *(char *)v71; // 0x410a04\n            while (v72 == 48) {\n                // 0x410a00\n                v71++;\n                v72 = *(char *)v71;\n            }\n            // 0x4108be\n            return (int32_t)(int64_t)v72 < 58;\n        }\n        // 0x410768\n        v6 = a1;\n        v13 = v53;\n        if (v2 == 48 || (int32_t)a1 % 256 == a4) {\n            int64_t v73 = a1 + 1; // 0x410760\n            unsigned char v74 = *(char *)v73; // 0x410764\n            int64_t v75 = v73; // 0x41076c\n            while (v74 == 48 || (int32_t)v74 == a4) {\n                // 0x410760\n                v73 = v75 + 1;\n                v74 = *(char *)v73;\n                v75 = v73;\n            }\n            // 0x410768\n            v6 = v73;\n            v13 = v74;\n        }\n        // 0x410776\n        v7 = a2;\n        v8 = a2;\n        v12 = v4;\n        if (v3 != 48) {\n            goto lab_0x41078e;\n        } else {\n            goto lab_0x410780;\n        }\n    }\n  lab_0x410abd:;\n    char v76 = *(char *)v10; // 0x410abd\n    char v77 = a3; // 0x410ac0\n    int64_t v78; // 0x4106a0\n    char v79; // 0x4106a0\n    int64_t v80; // 0x4106a0\n    int64_t v81; // 0x4106a0\n    char v82; // 0x4106a0\n    int64_t v83; // 0x4106a0\n    if (*(char *)v9 == v77) {\n        // 0x410ba2\n        v81 = v9;\n        if (v76 == v77) {\n            int64_t v84 = v9 + 1; // 0x410bca\n            int64_t v85 = v10 + 1; // 0x410bce\n            char v86 = *(char *)v84; // 0x410bd2\n            char v87 = *(char *)v85; // 0x410bd5\n            while (v86 == v87) {\n                // 0x410bc0\n                if ((int32_t)v86 >= 58) {\n                    // 0x4106e8\n                    return 0;\n                }\n                v84++;\n                v85++;\n                v86 = *(char *)v84;\n                v87 = *(char *)v85;\n            }\n            if ((int32_t)v86 < 58) {\n                // 0x410be9\n                v82 = v86;\n                v83 = v84;\n                if ((int32_t)v87 < 58) {\n                    // 0x410bee\n                    return (int64_t)v86 - (int64_t)v87 & 0xffffffff;\n                }\n                goto lab_0x410bb4;\n            } else {\n                // 0x410c12\n                v79 = v87;\n                v80 = v85;\n                if ((int32_t)v87 >= 58) {\n                    // 0x4106e8\n                    return 0;\n                }\n                goto lab_0x410adc;\n            }\n        } else {\n            goto lab_0x410bb0;\n        }\n    } else {\n        // 0x410ac8\n        v78 = v10;\n        if (v76 != v77) {\n            // 0x4106e8\n            return 0;\n        }\n        goto lab_0x410ad8;\n    }\n  lab_0x41078e:;\n    int64_t v88 = v12;\n    int64_t v89 = v8;\n    int32_t v90 = v88;\n    v7 = v89;\n    int64_t v91; // 0x4106a0\n    int64_t v92; // 0x4106a0\n    int64_t v93; // 0x4106a0\n    int64_t v94; // 0x4106a0\n    int64_t v95; // 0x4106a0\n    int64_t v96; // 0x4106a0\n    if (v90 == a4) {\n        goto lab_0x410780;\n    } else {\n        // 0x4107a0\n        v91 = v6;\n        v92 = v89;\n        int64_t v97 = v13; // 0x4107a3\n        int64_t v98 = v88; // 0x4107a3\n        if ((char)v13 == (char)v88 == v90 < 58) {\n            int64_t v99 = v6 + 1; // 0x4107c0\n            unsigned char v100 = *(char *)v99; // 0x4107c4\n            int64_t v101 = v99; // 0x4107cc\n            while ((int32_t)v100 == a4) {\n                // 0x4107c0\n                v99 = v101 + 1;\n                v100 = *(char *)v99;\n                v101 = v99;\n            }\n            int64_t v102 = v100; // 0x4107c4\n            int64_t v103 = v89; // 0x4107d0\n            int64_t v104 = v103 + 1; // 0x4107d0\n            unsigned char v105 = *(char *)v104; // 0x4107d4\n            int64_t v106 = v104; // 0x4107de\n            char v107 = v105; // 0x4107de\n            int64_t v108; // 0x4107e0\n            unsigned char v109; // 0x4107e4\n            while ((int32_t)v105 == a4) {\n                // 0x4107e0\n                v108 = v103 + 2;\n                v109 = *(char *)v108;\n                v106 = v108;\n                v107 = v109;\n                if ((int32_t)v109 != a4) {\n                    // break -> 0x4107a0\n                    break;\n                }\n                v103 = v108;\n                v104 = v103 + 1;\n                v105 = *(char *)v104;\n                v106 = v104;\n                v107 = v105;\n            }\n            int64_t v110 = v107;\n            v91 = v99;\n            v92 = v106;\n            v97 = v102;\n            v98 = v110;\n            while (v100 == v107) {\n                // 0x4107a9\n                v91 = v99;\n                v92 = v106;\n                v97 = v102;\n                v98 = v110;\n                if ((int32_t)v107 >= 58) {\n                    // break -> 0x4108f0\n                    break;\n                }\n                v99++;\n                v100 = *(char *)v99;\n                v101 = v99;\n                while ((int32_t)v100 == a4) {\n                    // 0x4107c0\n                    v99 = v101 + 1;\n                    v100 = *(char *)v99;\n                    v101 = v99;\n                }\n                // 0x4107d0\n                v102 = v100;\n                v103 = v106;\n                v104 = v103 + 1;\n                v105 = *(char *)v104;\n                v106 = v104;\n                v107 = v105;\n                while ((int32_t)v105 == a4) {\n                    // 0x4107e0\n                    v108 = v103 + 2;\n                    v109 = *(char *)v108;\n                    v106 = v108;\n                    v107 = v109;\n                    if ((int32_t)v109 != a4) {\n                        // break -> 0x4107a0\n                        break;\n                    }\n                    v103 = v108;\n                    v104 = v103 + 1;\n                    v105 = *(char *)v104;\n                    v106 = v104;\n                    v107 = v105;\n                }\n                // 0x4107a0\n                v110 = v107;\n                v91 = v99;\n                v92 = v106;\n                v97 = v102;\n                v98 = v110;\n            }\n        }\n        int32_t v111 = v98;\n        if ((int32_t)v97 != a3 || v111 < 58) {\n            int64_t v112 = v97 + 0xffffffd0; // 0x4108f8\n            if (v111 == a3) {\n                if ((int32_t)v112 < 10) {\n                    // 0x410a76\n                    v95 = v97 - v1 & 0xffffffff;\n                    v93 = v1 + 0xffffffd0;\n                    goto lab_0x410916;\n                } else {\n                    goto lab_0x410a2e;\n                }\n            } else {\n                int64_t v113 = v97 - v98 & 0xffffffff; // 0x410905\n                int64_t v114 = v98 + 0xffffffd0; // 0x410908\n                v95 = v113;\n                v93 = v114;\n                if ((int32_t)v112 < 10) {\n                    goto lab_0x410916;\n                } else {\n                    // 0x410af0\n                    v96 = v113;\n                    v94 = 0;\n                    if ((int32_t)v114 >= 10) {\n                        // 0x4106e8\n                        return 0;\n                    }\n                    goto lab_0x410941;\n                }\n            }\n        } else {\n            goto lab_0x410a2e;\n        }\n    }\n  lab_0x410780:;\n    int64_t v115 = v7 + 1; // 0x410780\n    unsigned char v116 = *(char *)v115; // 0x410784\n    int64_t v117 = v115; // 0x41078c\n    while (v116 == 48) {\n        // 0x410780\n        v115 = v117 + 1;\n        v116 = *(char *)v115;\n        v117 = v115;\n    }\n    // 0x41078e\n    v8 = v115;\n    v12 = v116;\n    goto lab_0x41078e;\n  lab_0x4109a2:;\n    int64_t v118 = v10 + 1; // 0x4109a8\n    int32_t v119 = (int32_t)*(char *)v118; // 0x4109af\n    int64_t v120 = v118; // 0x4109b1\n    while (v119 == a4) {\n        // 0x4109a8\n        v118 = v120 + 1;\n        v119 = (int32_t)*(char *)v118;\n        v120 = v118;\n    }\n    int64_t v121 = 1; // 0x4109b6\n    int64_t v122 = v121; // 0x4109bd\n    while (v119 < 58) {\n        // 0x4109a8\n        v118++;\n        v119 = (int32_t)*(char *)v118;\n        v120 = v118;\n        while (v119 == a4) {\n            // 0x4109a8\n            v118 = v120 + 1;\n            v119 = (int32_t)*(char *)v118;\n            v120 = v118;\n        }\n        // 0x4109b3\n        v121 = v122 + 1;\n        v122 = v121;\n    }\n    // 0x4109bf\n    if ((int32_t)v11 >= 10) {\n        // 0x410aa1\n        return v121 != 0 ? 0xffffffff : 0;\n    }\n    goto lab_0x4109c9;\n  lab_0x410bb0:;\n    int64_t v136 = v81 + 1; // 0x410bb0\n    v82 = *(char *)v136;\n    v83 = v136;\n    goto lab_0x410bb4;\n  lab_0x410ad8:;\n    int64_t v137 = v78 + 1; // 0x410ad8\n    v79 = *(char *)v137;\n    v80 = v137;\n    goto lab_0x410adc;\n  lab_0x410a2e:;\n    char v162 = *(char *)v92; // 0x410a2e\n    char v163 = a3; // 0x410a32\n    int64_t v153; // 0x4106a0\n    int64_t v159; // 0x4106a0\n    int64_t v151; // 0x4106a0\n    char v156; // 0x4106a0\n    if (*(char *)v91 == v163) {\n        int64_t v164 = v91 + 1;\n        char v165 = *(char *)v164; // 0x410b18\n        int64_t v166 = v165; // 0x410b18\n        v153 = v164;\n        v151 = v166;\n        if (v162 == v163) {\n            int64_t v167 = v92 + 1; // 0x410b5a\n            char v168 = *(char *)v167; // 0x410b5e\n            int64_t v169 = v166 + 0xffffffd0; // 0x410b68\n            int64_t v170 = v164; // 0x410b6e\n            int64_t v171 = v167; // 0x410b6e\n            int64_t v172 = v169; // 0x410b6e\n            int64_t v173 = v91; // 0x410b6e\n            int64_t v174 = v164; // 0x410b6e\n            int64_t v175 = v167; // 0x410b6e\n            int64_t v176 = v166; // 0x410b6e\n            char v177 = v168; // 0x410b6e\n            int64_t v178 = v169; // 0x410b6e\n            if (v168 == v165) {\n                while ((int32_t)v172 < 10) {\n                    int64_t v179 = v170; // 0x410b64\n                    char v180 = *(char *)(v173 + 2); // 0x410b56\n                    int64_t v181 = v180; // 0x410b56\n                    int64_t v182 = v171 + 1; // 0x410b5a\n                    char v183 = *(char *)v182; // 0x410b5e\n                    int64_t v184 = v179 + 1; // 0x410b64\n                    int64_t v185 = v181 + 0xffffffd0; // 0x410b68\n                    v170 = v184;\n                    v171 = v182;\n                    v172 = v185;\n                    v173 = v179;\n                    v174 = v184;\n                    v175 = v182;\n                    v176 = v181;\n                    v177 = v183;\n                    v178 = v185;\n                    if (v183 != v180) {\n                        goto lab_0x410b70;\n                    }\n                }\n                // 0x4106e8\n                return 0;\n            }\n          lab_0x410b70:\n            // 0x410b70\n            if ((int32_t)v178 < 10) {\n                // 0x410b82\n                v153 = v174;\n                v151 = v176;\n                if ((int32_t)v177 < 58) {\n                    // 0x410b88\n                    return v176 - (int64_t)v177 & 0xffffffff;\n                }\n                goto lab_0x410b37;\n            } else {\n                // 0x410bfe\n                v159 = v175;\n                v156 = v177;\n                if ((int32_t)v177 >= 58) {\n                    // 0x4106e8\n                    return 0;\n                }\n                goto lab_0x410a57;\n            }\n        } else {\n            goto lab_0x410b37;\n        }\n    } else {\n        // 0x410a3a\n        if (v162 != v163) {\n            // 0x4106e8\n            return 0;\n        }\n        int64_t v186 = v92 + 1; // 0x410a45\n        v159 = v186;\n        v156 = *(char *)v186;\n        goto lab_0x410a57;\n    }\n  lab_0x4109c9:;\n    int64_t v123 = 0; // 0x4109cb\n    int64_t v124 = v9; // 0x4109cb\n    int64_t v125; // 0x4109de\n    while (true) {\n        int64_t v126 = v124 + 1; // 0x4109d0\n        if ((int32_t)*(char *)v126 != a4) {\n            // 0x4109db\n            int64_t v127; // 0x4109de\n            v125 = v127 + 1;\n            int32_t v128; // 0x4109d7\n            if (v128 >= 58) {\n                // break -> 0x4109e7\n                break;\n            }\n        }\n        // 0x4109d0\n        v124 = v126;\n    }\n    int64_t v129 = v125; // 0x4109ea\n    int64_t v130; // 0x4106a0\n    int64_t v131 = v130; // 0x4109ea\n    uint64_t v132; // 0x4106a0\n    if (v125 != v132) {\n        int64_t result = v132 < v125 ? 1 : 0xffffffff; // 0x410a90\n        return result;\n    }\n    int64_t v133 = v131;\n    int64_t v134 = v129; // 0x4109f0\n    int64_t result2 = v134 == 0 ? 0 : v133 & 0xffffffff; // 0x4109f8\n    return result2;\n  lab_0x410bb4:;\n    int64_t v135 = v82; // 0x410bb9\n    v81 = v83;\n    if (v82 != 48) {\n        // 0x4108be\n        return (int32_t)v135 < 58;\n    }\n    goto lab_0x410bb0;\n  lab_0x410adc:;\n    char v138 = v79; // 0x410ae1\n    v78 = v80;\n    if (v79 != 48) {\n        // 0x410a5f\n        return (int32_t)v138 < 58 ? 0xffffffff : 0;\n    }\n    goto lab_0x410ad8;\n  lab_0x410916:;\n    int64_t v139 = v91 + 1; // 0x410920\n    int32_t v140 = (int32_t)*(char *)v139; // 0x410927\n    int64_t v141 = v139; // 0x410929\n    while (v140 == a4) {\n        // 0x410920\n        v139 = v141 + 1;\n        v140 = (int32_t)*(char *)v139;\n        v141 = v139;\n    }\n    int64_t v142 = 1; // 0x41092e\n    int64_t v143 = v142; // 0x410935\n    while (v140 < 58) {\n        // 0x410920\n        v139++;\n        v140 = (int32_t)*(char *)v139;\n        v141 = v139;\n        while (v140 == a4) {\n            // 0x410920\n            v139 = v141 + 1;\n            v140 = (int32_t)*(char *)v139;\n            v141 = v139;\n        }\n        // 0x41092b\n        v142 = v143 + 1;\n        v143 = v142;\n    }\n    // 0x410937\n    v96 = v95;\n    v94 = v142;\n    if ((int32_t)v93 >= 10) {\n        // 0x410a98\n        return v142 != 0;\n    }\n    goto lab_0x410941;\n  lab_0x410b37:\n    // 0x410b37\n    if ((char)v151 != 48) {\n        // 0x410b3c\n        return (int32_t)v151 < 58;\n    }\n    int64_t v152 = v153 + 1; // 0x410b30\n    char v154 = *(char *)v152; // 0x410b34\n    int64_t v155 = v152; // 0x410b3a\n    while (v154 == 48) {\n        // 0x410b30\n        v152 = v155 + 1;\n        v154 = *(char *)v152;\n        v155 = v152;\n    }\n    // 0x410b3c\n    return (int32_t)(int64_t)v154 < 58;\n  lab_0x410a57:\n    // 0x410a57\n    if (v156 != 48) {\n        char v157 = v138;\n        int64_t result3 = (int32_t)v157 < 58 ? 0xffffffff : 0; // 0x410a6b\n        return result3;\n    }\n    int64_t v158 = v159 + 1; // 0x410a50\n    char v160 = *(char *)v158; // 0x410a54\n    int64_t v161 = v158; // 0x410a5a\n    while (v160 == 48) {\n        // 0x410a50\n        v158 = v161 + 1;\n        v160 = *(char *)v158;\n        v161 = v158;\n    }\n    // 0x410a5f\n    return (int32_t)v160 < 58 ? 0xffffffff : 0;\n  lab_0x410941:;\n    int64_t v144 = 0; // 0x410943\n    int64_t v145 = v92; // 0x410943\n    int64_t v146; // 0x410956\n    while (true) {\n        int64_t v147 = v144; // 0x410956\n        int64_t v148 = v145 + 1; // 0x410948\n        int32_t v149 = (int32_t)*(char *)v148; // 0x41094f\n        int64_t v150 = v147; // 0x410951\n        if (v149 != a4) {\n            // 0x410953\n            v146 = v147 + 1;\n            v150 = v146;\n            if (v149 >= 58) {\n                // break -> 0x41095f\n                break;\n            }\n        }\n        // 0x410948\n        v144 = v150;\n        v145 = v148;\n    }\n    // 0x41095f\n    if (v146 == v94) {\n        // 0x4109f0\n        return v94 == 0 ? 0 : v96 & 0xffffffff;\n    }\n    // 0x410968\n    return v94 < v146 ? 0xffffffff : 1;\n}\n"
        },
        {
            "funcName": "function_410c20",
            "funcStartAddr": "410c20",
            "funcEndAddr": "410c6e",
            "decompiledFuncCode": "int64_t function_410c20(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x410c2c\n    if (fd >= 3) {\n        // 0x410c31\n        return a1 & 0xffffffff;\n    }\n    // 0x410c40\n    int64_t v1; // 0x410c20\n    int64_t v2 = function_413ea0(a1, v1); // 0x410c40\n    int32_t * v3 = __errno_location(); // 0x410c48\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_410c70",
            "funcStartAddr": "410c70",
            "funcEndAddr": "41104d",
            "decompiledFuncCode": "int64_t function_410c70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x410d08\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x410c8c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x410ca6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x410ceb\n    if (a6 < 10) {\n        // 0x410cfa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x410df2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_411050",
            "funcStartAddr": "411050",
            "funcEndAddr": "411070",
            "decompiledFuncCode": "int64_t function_411050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x411050\n    if (a5 == 0) {\n        // 0x41106b\n        return function_410c70(a1, a2, a3, a4, a5, 0, (int64_t)&g122);\n    }\n    int64_t v1 = 0; // 0x411057\n    v1++;\n    int64_t v2 = v1; // 0x411069\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x411060\n        v1++;\n        v2 = v1;\n    }\n    // 0x41106b\n    return function_410c70(a1, a2, a3, a4, a5, v2, (int64_t)&g122);\n}\n"
        },
        {
            "funcName": "function_411070",
            "funcStartAddr": "411070",
            "funcEndAddr": "4110d0",
            "decompiledFuncCode": "int64_t function_411070(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x411070\n    int64_t v3 = &v2; // 0x411070\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4110a3\n    int64_t v6; // 0x41108d\n    int64_t * v7; // 0x4110ab\n    int64_t v8; // 0x4110ab\n    int64_t v9; // 0x4110b7\n    if (v5 < 48) {\n        // 0x411080\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4110c3\n            break;\n        }\n    } else {\n        // 0x4110ab\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4110c3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4110a1\n    while (v4 != 9) {\n        // 0x411099\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x411080\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4110c3\n                break;\n            }\n        } else {\n            // 0x4110ab\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4110c3\n                break;\n            }\n        }\n        // 0x411099\n        v10 = 10;\n    }\n    // 0x4110c3\n    return function_410c70(a1, a2, a3, a4, v3, v10, (int64_t)&g122);\n}\n"
        },
        {
            "funcName": "function_4110d0",
            "funcStartAddr": "4110d0",
            "funcEndAddr": "41118c",
            "decompiledFuncCode": "int64_t function_4110d0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4110d0\n    int64_t v1; // bp-168, 0x4110d0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4110d0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4110d0\n    int64_t v8; // 0x4110d0\n    int64_t v9; // bp-56, 0x4110d0\n    int64_t v10; // 0x411135\n    int64_t v11; // 0x411159\n    if ((int32_t)v6 < 48) {\n        // 0x411120\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x411170\n            break;\n        }\n    } else {\n        // 0x411152\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x411170\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x41114a\n    int64_t v13 = 10; // 0x41114a\n    while (v5 != 9) {\n        // 0x41114c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x411120\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x411170\n                break;\n            }\n        } else {\n            // 0x411152\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x411170\n                break;\n            }\n        }\n        // 0x411142\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x411170\n    int64_t v14; // bp-136, 0x4110d0\n    int64_t result = function_410c70(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g122); // 0x41117f\n    return result;\n}\n"
        },
        {
            "funcName": "function_411190",
            "funcStartAddr": "411190",
            "funcEndAddr": "411204",
            "decompiledFuncCode": "int64_t function_411190(int64_t a1) {\n    // 0x411190\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4111f3\n    return fputs_unlocked(v1, g52);\n}\n"
        },
        {
            "funcName": "function_411210",
            "funcStartAddr": "411210",
            "funcEndAddr": "41122a",
            "decompiledFuncCode": "int64_t function_411210(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x411214\n    if (size != 0 != (mem == NULL)) {\n        // 0x411223\n        return (int64_t)mem;\n    }\n    // 0x411225\n    function_411460(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411230",
            "funcStartAddr": "411230",
            "funcEndAddr": "411251",
            "decompiledFuncCode": "int64_t function_411230(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x411233\n    int64_t v2 = v1; // 0x411233\n    if (v2 < 0) {\n        // 0x41124b\n        function_411460(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x411249\n        return function_411210(v2);\n    }\n    // 0x41124b\n    function_411460(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411260",
            "funcStartAddr": "411260",
            "funcEndAddr": "411262",
            "decompiledFuncCode": "int64_t function_411260(void) {\n    // 0x411260\n    int64_t v1; // 0x411260\n    return function_411210(v1);\n}\n"
        },
        {
            "funcName": "function_411270",
            "funcStartAddr": "411270",
            "funcEndAddr": "4112a6",
            "decompiledFuncCode": "int64_t function_411270(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x411298\n        free(v1);\n        return (int32_t)&g122 ^ (int32_t)&g122;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x411281\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x411290\n        return (int64_t)mem;\n    }\n    // 0x4112a1\n    function_411460(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4112b0",
            "funcStartAddr": "4112b0",
            "funcEndAddr": "4112d1",
            "decompiledFuncCode": "int64_t function_4112b0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4112b3\n    int64_t v2 = v1; // 0x4112b3\n    if (v2 < 0) {\n        // 0x4112cb\n        function_411460(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4112c9\n        return function_411270(a1, v2);\n    }\n    // 0x4112cb\n    function_411460(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4112e0",
            "funcStartAddr": "4112e0",
            "funcEndAddr": "411366",
            "decompiledFuncCode": "int64_t function_4112e0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x41133b\n            function_411460(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_411270(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x411323\n    if (a2 == 0) {\n        // 0x411348\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x411328\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x41133b\n        function_411460(a1);\n        // UNREACHABLE\n    }\n    // 0x41130a\n    *(int64_t *)a2 = v2;\n    return function_411270(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_411370",
            "funcStartAddr": "411370",
            "funcEndAddr": "4113c0",
            "decompiledFuncCode": "int64_t function_411370(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x411370\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4113ba\n            function_411460(a1);\n            // UNREACHABLE\n        }\n        // 0x411392\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_411270(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4113a5\n        *(int64_t *)a2 = 128;\n        return function_411270(0, 128);\n    }\n    // 0x4113b8\n    if (a2 < 0) {\n        // 0x4113ba\n        function_411460(a1);\n        // UNREACHABLE\n    }\n    // 0x411392\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_411270(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4113c0",
            "funcStartAddr": "4113c0",
            "funcEndAddr": "4113d7",
            "decompiledFuncCode": "int64_t function_4113c0(int64_t a1, int64_t a2) {\n    // 0x4113c0\n    return (int64_t)memset((int64_t *)function_411210(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4113e0",
            "funcStartAddr": "4113e0",
            "funcEndAddr": "41140e",
            "decompiledFuncCode": "int64_t function_4113e0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4113e7\n    if ((int64_t)v1 < 0) {\n        // 0x411409\n        function_411460(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x411409\n        function_411460(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4113fa\n    if (mem != NULL) {\n        // 0x411404\n        return (int64_t)mem;\n    }\n    // 0x411409\n    function_411460(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411410",
            "funcStartAddr": "411410",
            "funcEndAddr": "411438",
            "decompiledFuncCode": "int64_t function_411410(int64_t * a1, int64_t a2) {\n    // 0x411410\n    return (int64_t)memcpy((int64_t *)function_411210(a2), a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_411440",
            "funcStartAddr": "411440",
            "funcEndAddr": "411453",
            "decompiledFuncCode": "int64_t function_411440(int64_t str) {\n    // 0x411440\n    return function_411410((int64_t *)str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_411460",
            "funcStartAddr": "411460",
            "funcEndAddr": "411491",
            "decompiledFuncCode": "int64_t function_411460(int64_t a1) {\n    // 0x411460\n    error(g41, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4114a0",
            "funcStartAddr": "4114a0",
            "funcEndAddr": "411554",
            "decompiledFuncCode": "int64_t function_4114a0(int64_t err_num, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4114a0\n    error(0, (int32_t)err_num, dcgettext(NULL, \"string comparison failed\", 5));\n    error(0, (int32_t)\"Set LC_ALL='C' to work around the problem.\" ^ (int32_t)\"Set LC_ALL='C' to work around the problem.\", dcgettext(NULL, \"Set LC_ALL='C' to work around the problem.\", 5));\n    function_40f5c0(1, 8, a4, a5);\n    function_40f5c0(0, 8, a2, a3);\n    error(g41, (int32_t)\"The strings compared were %s and %s.\" ^ (int32_t)\"The strings compared were %s and %s.\", dcgettext(NULL, \"The strings compared were %s and %s.\", 5));\n    return &g122;\n}\n"
        },
        {
            "funcName": "function_411560",
            "funcStartAddr": "411560",
            "funcEndAddr": "4115b5",
            "decompiledFuncCode": "int64_t function_411560(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_413d80(a1, a2, a3, a4); // 0x411574\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4115c0",
            "funcStartAddr": "4115c0",
            "funcEndAddr": "411617",
            "decompiledFuncCode": "int64_t function_4115c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_413e30(a1, a2, a3, a4); // 0x4115d4\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_411620",
            "funcStartAddr": "411620",
            "funcEndAddr": "411673",
            "decompiledFuncCode": "int64_t function_411620(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x411620\n    int64_t v1; // 0x411620\n    int64_t v2 = function_413580(a1, a2, a3, v1); // bp-24, 0x41162a\n    int32_t * v3 = __errno_location(); // 0x411633\n    *v3 = 0;\n    int64_t v4 = function_413140(&v2, 0); // 0x411653\n    int64_t result = v4; // 0x41165a\n    while ((int32_t)v4 != 0) {\n        // 0x411640\n        result = 0xffffffff;\n        if ((*v3 & -5) != 0) {\n            // break -> 0x41165c\n            break;\n        }\n        *v3 = 0;\n        v4 = function_413140(&v2, 0);\n        result = v4;\n    }\n    // 0x41165c\n    return result;\n}\n"
        },
        {
            "funcName": "function_411680",
            "funcStartAddr": "411680",
            "funcEndAddr": "411ab0",
            "decompiledFuncCode": "int64_t function_411680(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x41168e\n    if (base >= 37) {\n        // 0x411a8b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g122;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x4116b2\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x4116e2\n    int64_t v3 = str; // 0x4116e7\n    char v4 = c; // 0x4116e7\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x4116dc\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x4116d8\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x4116e9\n    if (v4 == 45) {\n        // 0x411723\n        return 4;\n    }\n    // 0x4116ee\n    int64_t v6; // bp-64, 0x411680\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x4116ae\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x4116f4\n    int64_t * v7 = (int64_t *)endptr; // 0x4116f9\n    int64_t v8 = *v7; // 0x4116f9\n    char v9; // 0x411680\n    int64_t v10; // 0x411680\n    int64_t v11; // 0x411680\n    int64_t v12; // 0x411680\n    int64_t v13; // 0x411680\n    int64_t v14; // 0x411680\n    int64_t v15; // 0x411680\n    if (v8 == str) {\n        // 0x411750\n        if (c == 0 || str2 == NULL) {\n            // 0x411723\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x411771\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x411723\n            return 4;\n        }\n        goto lab_0x41177f;\n    } else {\n        int32_t v16 = *v1; // 0x411704\n        int64_t v17 = 0; // 0x41170a\n        if (v16 != 0) {\n            // 0x411738\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x411723\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x4116f4\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x411720;\n        } else {\n            char c2 = *(char *)v8; // 0x411713\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x411873\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x41177f;\n                } else {\n                    goto lab_0x411885;\n                }\n            } else {\n                goto lab_0x411720;\n            }\n        }\n    }\n  lab_0x41177f:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x411787\n    int64_t v21 = 1; // 0x411787\n    int64_t v22; // 0x411680\n    int64_t v23; // 0x411680\n    int64_t v24; // 0x411680\n    int64_t v25; // 0x411680\n    int64_t v26; // 0x411680\n    int64_t v27; // 0x411680\n    int64_t v28; // 0x411680\n    int64_t v29; // 0x411680\n    int64_t v30; // 0x411680\n    int64_t v31; // 0x411680\n    int64_t v32; // 0x411680\n    int64_t v33; // 0x411680\n    int64_t v34; // 0x411680\n    int64_t v35; // 0x411680\n    int64_t v36; // 0x411680\n    int64_t v37; // 0x411680\n    int64_t v38; // 0x411680\n    int64_t v39; // 0x411680\n    int64_t v40; // 0x411680\n    int64_t v41; // 0x411680\n    if (v19 < 48) {\n        // 0x411789\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4117ea;\n        } else {\n            // 0x41179c\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x4117ea;\n            } else {\n                // 0x4117b8\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x4117ea;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x411a19\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x4117ea;\n                    }\n                    default: {\n                        // 0x4117cd\n                        g126 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x41198b;\n                            }\n                            case 70: {\n                                goto lab_0x411885;\n                            }\n                            case 71: {\n                                goto lab_0x4119c3;\n                            }\n                            case 72: {\n                                goto lab_0x411885;\n                            }\n                            case 73: {\n                                goto lab_0x411885;\n                            }\n                            case 74: {\n                                goto lab_0x411885;\n                            }\n                            case 75: {\n                                goto lab_0x41184c;\n                            }\n                            case 76: {\n                                goto lab_0x411885;\n                            }\n                            case 77: {\n                                goto lab_0x41180e;\n                            }\n                            case 78: {\n                                goto lab_0x411885;\n                            }\n                            case 79: {\n                                goto lab_0x411885;\n                            }\n                            case 80: {\n                                goto lab_0x411958;\n                            }\n                            case 81: {\n                                goto lab_0x411885;\n                            }\n                            case 82: {\n                                goto lab_0x411885;\n                            }\n                            case 83: {\n                                goto lab_0x411885;\n                            }\n                            case 84: {\n                                goto lab_0x411928;\n                            }\n                            case 85: {\n                                goto lab_0x411885;\n                            }\n                            case 86: {\n                                goto lab_0x411885;\n                            }\n                            case 87: {\n                                goto lab_0x411885;\n                            }\n                            case 88: {\n                                goto lab_0x411885;\n                            }\n                            case 89: {\n                                goto lab_0x4118f6;\n                            }\n                            case 90: {\n                                goto lab_0x4118bb;\n                            }\n                            case 91: {\n                                goto lab_0x411885;\n                            }\n                            case 92: {\n                                goto lab_0x411885;\n                            }\n                            case 93: {\n                                goto lab_0x411885;\n                            }\n                            case 94: {\n                                goto lab_0x411885;\n                            }\n                            case 95: {\n                                goto lab_0x411885;\n                            }\n                            case 96: {\n                                goto lab_0x411885;\n                            }\n                            case 97: {\n                                goto lab_0x411885;\n                            }\n                            case 98: {\n                                goto lab_0x41189f;\n                            }\n                            case 99: {\n                                goto lab_0x411828;\n                            }\n                            case 100: {\n                                goto lab_0x411885;\n                            }\n                            case 101: {\n                                goto lab_0x411885;\n                            }\n                            case 102: {\n                                goto lab_0x411885;\n                            }\n                            case 103: {\n                                goto lab_0x4119c3;\n                            }\n                            case 104: {\n                                goto lab_0x411885;\n                            }\n                            case 105: {\n                                goto lab_0x411885;\n                            }\n                            case 106: {\n                                goto lab_0x411885;\n                            }\n                            case 107: {\n                                goto lab_0x41184c;\n                            }\n                            case 108: {\n                                goto lab_0x411885;\n                            }\n                            case 109: {\n                                goto lab_0x41180e;\n                            }\n                            case 110: {\n                                goto lab_0x411885;\n                            }\n                            case 111: {\n                                goto lab_0x411885;\n                            }\n                            case 112: {\n                                goto lab_0x411885;\n                            }\n                            case 113: {\n                                goto lab_0x411885;\n                            }\n                            case 114: {\n                                goto lab_0x411885;\n                            }\n                            case 115: {\n                                goto lab_0x411885;\n                            }\n                            case 116: {\n                                goto lab_0x411928;\n                            }\n                            default: {\n                                goto lab_0x4117ea;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4117ea;\n    }\n  lab_0x411720:\n    // 0x411720\n    *a4 = v13;\n    // 0x411723\n    return v10 & 0xffffffff;\n  lab_0x4117ea:\n    // 0x4117ea\n    g127 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x411680\n    switch (v9) {\n        case 66: {\n            // 0x4119e4\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x411857;\n            } else {\n                // 0x4119f1\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x411828;\n            }\n        }\n        case 69: {\n            goto lab_0x41198b;\n        }\n        case 71: {\n            goto lab_0x4119c3;\n        }\n        case 75: {\n            goto lab_0x41184c;\n        }\n        case 77: {\n            goto lab_0x41180e;\n        }\n        case 80: {\n            goto lab_0x411958;\n        }\n        case 84: {\n            goto lab_0x411928;\n        }\n        case 89: {\n            goto lab_0x4118f6;\n        }\n        case 90: {\n            goto lab_0x4118bb;\n        }\n        case 98: {\n            goto lab_0x41189f;\n        }\n        case 99: {\n            goto lab_0x411828;\n        }\n        case 103: {\n            goto lab_0x4119c3;\n        }\n        case 107: {\n            goto lab_0x41184c;\n        }\n        case 109: {\n            goto lab_0x41180e;\n        }\n        case 116: {\n            goto lab_0x411928;\n        }\n        case 119: {\n            // 0x411890\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x411857;\n            } else {\n                // 0x411895\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x411828;\n            }\n        }\n        default: {\n            goto lab_0x411885;\n        }\n    }\n  lab_0x41198b:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x4119a3\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x4119af\n    int64_t v48 = v45; // 0x4119b2\n    int64_t v49 = v34; // 0x4119b2\n    int64_t v50 = v46; // 0x4119b2\n    int32_t v51 = v47; // 0x4119b2\n    int64_t v52 = v46; // 0x4119b2\n    while (v47 != 0) {\n        // 0x4119a0\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x4118e4;\n  lab_0x4119c3:\n    // 0x4119c3\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x4119ce\n        int128_t v53; // 0x4119c9\n        uint128_t v54; // 0x4119c9\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x4119ce\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x411680\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x4119d3\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x4119d8\n                v23 = v57;\n                int64_t v58; // 0x411680\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x411828;\n  lab_0x41184c:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x41184f\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x411828;\n    } else {\n        goto lab_0x411857;\n    }\n  lab_0x41180e:;\n    int128_t v62 = v24; // 0x411814\n    uint128_t v63 = v62 * (int128_t)v14; // 0x411814\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x411857;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x411819\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x411857;\n        } else {\n            // 0x41181e\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x411828;\n        }\n    }\n  lab_0x411958:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x41196b\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x411977\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x41197a\n    int64_t v70 = v67; // 0x41197a\n    while (v68 != 0) {\n        // 0x411968\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x4118e4;\n  lab_0x411928:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x41193b\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x411947\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x41194a\n    int64_t v76 = v73; // 0x41194a\n    while (v74 != 0) {\n        // 0x411938\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x4118e4;\n  lab_0x4118f6:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x41190b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x411917\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x41191a\n    int64_t v82 = v79; // 0x41191a\n    while (v80 != 0) {\n        // 0x411908\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x4118e4;\n  lab_0x4118bb:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x4118d3\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x4118df\n    int32_t v87 = v86; // 0x4118e2\n    int64_t v88 = v85; // 0x4118e2\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x4118d0\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x4118e4;\n  lab_0x41189f:\n    // 0x41189f\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x411857;\n    } else {\n        // 0x4118a8\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x411828;\n    }\n  lab_0x411828:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x41182d\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x411720;\n  lab_0x411885:\n    // 0x411885\n    *a4 = v15;\n    // 0x411723\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x411857:\n    // 0x411857\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x411828;\n  lab_0x4118e4:\n    // 0x4118e4\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x411828;\n}\n"
        },
        {
            "funcName": "function_411ab0",
            "funcStartAddr": "411ab0",
            "funcEndAddr": "411b31",
            "decompiledFuncCode": "int64_t function_411ab0(int64_t a1, int64_t a2, int64_t a3, char (**a4)[22], char a5) {\n    int64_t v1 = *(int64_t *)((8 * a1 + 0x7fffffff8 & 0x7fffffff8) + (int64_t)&g20); // 0x411ad2\n    error(g41, 0, dcgettext(NULL, (char *)v1, 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411b40",
            "funcStartAddr": "411b40",
            "funcEndAddr": "411f80",
            "decompiledFuncCode": "int64_t function_411b40(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int32_t a5, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x411b4e\n    if (v1 >= 37) {\n        // 0x411f5b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g122;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x411b72\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x411ba2\n    int64_t v4 = a1; // 0x411ba7\n    char v5 = c; // 0x411ba7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x411b9c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x411b98\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x411ba9\n    if (v5 == 45) {\n        // 0x411be5\n        return 4;\n    }\n    int64_t str = a5;\n    int64_t v7; // bp-64, 0x411b40\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x411b6e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x411bb6\n    int64_t * v10 = (int64_t *)v8; // 0x411bbb\n    int64_t v11 = *v10; // 0x411bbb\n    char v12; // 0x411b40\n    int64_t v13; // 0x411b40\n    int64_t v14; // 0x411b40\n    int64_t v15; // 0x411b40\n    int64_t v16; // 0x411b40\n    int64_t v17; // 0x411b40\n    int64_t v18; // 0x411b40\n    if (v11 == a1) {\n        // 0x411c18\n        if (c == 0 || a5 == 0) {\n            // 0x411be5\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x411c39\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x411be5\n            return 4;\n        }\n        goto lab_0x411c47;\n    } else {\n        int32_t v19 = *v2; // 0x411bc6\n        int64_t v20 = 0; // 0x411bcc\n        if (v19 != 0) {\n            // 0x411c00\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x411be5\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x411bb6\n        v16 = v21;\n        v13 = v20;\n        if (a5 == 0) {\n            goto lab_0x411be2;\n        } else {\n            char c2 = *(char *)v11; // 0x411bd5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x411d43\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x411c47;\n                } else {\n                    goto lab_0x411d55;\n                }\n            } else {\n                goto lab_0x411be2;\n            }\n        }\n    }\n  lab_0x411c47:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x411c4f\n    int64_t v24 = 1; // 0x411c4f\n    int64_t v25; // 0x411b40\n    int64_t v26; // 0x411b40\n    int64_t v27; // 0x411b40\n    int64_t v28; // 0x411b40\n    int64_t v29; // 0x411b40\n    int64_t v30; // 0x411b40\n    int64_t v31; // 0x411b40\n    int64_t v32; // 0x411b40\n    int64_t v33; // 0x411b40\n    int64_t v34; // 0x411b40\n    int64_t v35; // 0x411b40\n    int64_t v36; // 0x411b40\n    int64_t v37; // 0x411b40\n    int64_t v38; // 0x411b40\n    int64_t v39; // 0x411b40\n    int64_t v40; // 0x411b40\n    int64_t v41; // 0x411b40\n    int64_t v42; // 0x411b40\n    int64_t v43; // 0x411b40\n    int64_t v44; // 0x411b40\n    if (v22 < 48) {\n        // 0x411c51\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x411cba;\n        } else {\n            // 0x411c64\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x411cba;\n            } else {\n                // 0x411c80\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x411cba;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x411ee9\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x411cba;\n                    }\n                    default: {\n                        // 0x411c95\n                        g128 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x411e5b;\n                            }\n                            case 70: {\n                                goto lab_0x411d55;\n                            }\n                            case 71: {\n                                goto lab_0x411e93;\n                            }\n                            case 72: {\n                                goto lab_0x411d55;\n                            }\n                            case 73: {\n                                goto lab_0x411d55;\n                            }\n                            case 74: {\n                                goto lab_0x411d55;\n                            }\n                            case 75: {\n                                goto lab_0x411d1c;\n                            }\n                            case 76: {\n                                goto lab_0x411d55;\n                            }\n                            case 77: {\n                                goto lab_0x411cde;\n                            }\n                            case 78: {\n                                goto lab_0x411d55;\n                            }\n                            case 79: {\n                                goto lab_0x411d55;\n                            }\n                            case 80: {\n                                goto lab_0x411e28;\n                            }\n                            case 81: {\n                                goto lab_0x411d55;\n                            }\n                            case 82: {\n                                goto lab_0x411d55;\n                            }\n                            case 83: {\n                                goto lab_0x411d55;\n                            }\n                            case 84: {\n                                goto lab_0x411df8;\n                            }\n                            case 85: {\n                                goto lab_0x411d55;\n                            }\n                            case 86: {\n                                goto lab_0x411d55;\n                            }\n                            case 87: {\n                                goto lab_0x411d55;\n                            }\n                            case 88: {\n                                goto lab_0x411d55;\n                            }\n                            case 89: {\n                                goto lab_0x411dc6;\n                            }\n                            case 90: {\n                                goto lab_0x411d8b;\n                            }\n                            case 91: {\n                                goto lab_0x411d55;\n                            }\n                            case 92: {\n                                goto lab_0x411d55;\n                            }\n                            case 93: {\n                                goto lab_0x411d55;\n                            }\n                            case 94: {\n                                goto lab_0x411d55;\n                            }\n                            case 95: {\n                                goto lab_0x411d55;\n                            }\n                            case 96: {\n                                goto lab_0x411d55;\n                            }\n                            case 97: {\n                                goto lab_0x411d55;\n                            }\n                            case 98: {\n                                goto lab_0x411d6f;\n                            }\n                            case 99: {\n                                goto lab_0x411cf8;\n                            }\n                            case 100: {\n                                goto lab_0x411d55;\n                            }\n                            case 101: {\n                                goto lab_0x411d55;\n                            }\n                            case 102: {\n                                goto lab_0x411d55;\n                            }\n                            case 103: {\n                                goto lab_0x411e93;\n                            }\n                            case 104: {\n                                goto lab_0x411d55;\n                            }\n                            case 105: {\n                                goto lab_0x411d55;\n                            }\n                            case 106: {\n                                goto lab_0x411d55;\n                            }\n                            case 107: {\n                                goto lab_0x411d1c;\n                            }\n                            case 108: {\n                                goto lab_0x411d55;\n                            }\n                            case 109: {\n                                goto lab_0x411cde;\n                            }\n                            case 110: {\n                                goto lab_0x411d55;\n                            }\n                            case 111: {\n                                goto lab_0x411d55;\n                            }\n                            case 112: {\n                                goto lab_0x411d55;\n                            }\n                            case 113: {\n                                goto lab_0x411d55;\n                            }\n                            case 114: {\n                                goto lab_0x411d55;\n                            }\n                            case 115: {\n                                goto lab_0x411d55;\n                            }\n                            case 116: {\n                                goto lab_0x411df8;\n                            }\n                            default: {\n                                goto lab_0x411cba;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x411cba;\n    }\n  lab_0x411be2:\n    // 0x411be2\n    *a4 = v16;\n    // 0x411be5\n    return v13 & 0xffffffff;\n  lab_0x411cba:\n    // 0x411cba\n    g129 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x411b40\n    switch (v12) {\n        case 66: {\n            // 0x411eb4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x411d27;\n            } else {\n                // 0x411ec1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x411cf8;\n            }\n        }\n        case 69: {\n            goto lab_0x411e5b;\n        }\n        case 71: {\n            goto lab_0x411e93;\n        }\n        case 75: {\n            goto lab_0x411d1c;\n        }\n        case 77: {\n            goto lab_0x411cde;\n        }\n        case 80: {\n            goto lab_0x411e28;\n        }\n        case 84: {\n            goto lab_0x411df8;\n        }\n        case 89: {\n            goto lab_0x411dc6;\n        }\n        case 90: {\n            goto lab_0x411d8b;\n        }\n        case 98: {\n            goto lab_0x411d6f;\n        }\n        case 99: {\n            goto lab_0x411cf8;\n        }\n        case 103: {\n            goto lab_0x411e93;\n        }\n        case 107: {\n            goto lab_0x411d1c;\n        }\n        case 109: {\n            goto lab_0x411cde;\n        }\n        case 116: {\n            goto lab_0x411df8;\n        }\n        case 119: {\n            // 0x411d60\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x411d27;\n            } else {\n                // 0x411d65\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x411cf8;\n            }\n        }\n        default: {\n            goto lab_0x411d55;\n        }\n    }\n  lab_0x411e5b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x411e73\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x411e7f\n    int64_t v51 = v48; // 0x411e82\n    int64_t v52 = v37; // 0x411e82\n    int64_t v53 = v49; // 0x411e82\n    int32_t v54 = v50; // 0x411e82\n    int64_t v55 = v49; // 0x411e82\n    while (v50 != 0) {\n        // 0x411e70\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x411db4;\n  lab_0x411e93:\n    // 0x411e93\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x411e9e\n        int128_t v56; // 0x411e99\n        uint128_t v57; // 0x411e99\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x411e9e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x411b40\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x411ea3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x411ea8\n                v26 = v60;\n                int64_t v61; // 0x411b40\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x411cf8;\n  lab_0x411d1c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x411d1f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x411cf8;\n    } else {\n        goto lab_0x411d27;\n    }\n  lab_0x411cde:;\n    int128_t v65 = v27; // 0x411ce4\n    uint128_t v66 = v65 * (int128_t)v17; // 0x411ce4\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x411d27;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x411ce9\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x411d27;\n        } else {\n            // 0x411cee\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x411cf8;\n        }\n    }\n  lab_0x411e28:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x411e3b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x411e47\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x411e4a\n    int64_t v73 = v70; // 0x411e4a\n    while (v71 != 0) {\n        // 0x411e38\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x411db4;\n  lab_0x411df8:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x411e0b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x411e17\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x411e1a\n    int64_t v79 = v76; // 0x411e1a\n    while (v77 != 0) {\n        // 0x411e08\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x411db4;\n  lab_0x411dc6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x411ddb\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x411de7\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x411dea\n    int64_t v85 = v82; // 0x411dea\n    while (v83 != 0) {\n        // 0x411dd8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x411db4;\n  lab_0x411d8b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x411da3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x411daf\n    int32_t v90 = v89; // 0x411db2\n    int64_t v91 = v88; // 0x411db2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x411da0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x411db4;\n  lab_0x411d6f:\n    // 0x411d6f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x411d27;\n    } else {\n        // 0x411d78\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x411cf8;\n    }\n  lab_0x411cf8:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x411cfd\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x411be2;\n  lab_0x411d55:\n    // 0x411d55\n    *a4 = v18;\n    // 0x411be5\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x411d27:\n    // 0x411d27\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x411cf8;\n  lab_0x411db4:\n    // 0x411db4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x411cf8;\n}\n"
        },
        {
            "funcName": "function_411f80",
            "funcStartAddr": "411f80",
            "funcEndAddr": "411ffb",
            "decompiledFuncCode": "int64_t function_411f80(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x411f87\n    if (fileno(stream) < 0) {\n        // 0x411fe7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x411f9a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x411fcb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x411fe7\n            return fclose(stream);\n        }\n    }\n    // 0x411f9c\n    if ((int32_t)function_412140(a1, v1) == 0) {\n        // 0x411fe7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x411fa8\n    int32_t v3 = *v2; // 0x411fb0\n    int64_t result = fclose(stream); // 0x411fbe\n    if (v3 != 0) {\n        // 0x411ff0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x411fc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_412000",
            "funcStartAddr": "412000",
            "funcEndAddr": "412135",
            "decompiledFuncCode": "int64_t function_412000(int32_t fd, int64_t a2, int32_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x412030\n    if (cmd != 1030) {\n        // 0x4120e0\n        return fcntl(fd, cmd);\n    }\n    // 0x41203c\n    int64_t v1; // 0x412000\n    if (g114 < 0) {\n        int64_t v2 = function_412000(fd, 0, a3, a4); // 0x412084\n        int64_t v3 = v2 & 0xffffffff; // 0x412089\n        if ((int32_t)v2 < 0) {\n            // 0x412070\n            return v3 & 0xffffffff;\n        }\n        // 0x41208f\n        v1 = v3;\n        if (g114 != -1) {\n            // 0x412070\n            return v3 & 0xffffffff;\n        }\n    } else {\n        uint32_t v4 = fcntl(fd, cmd); // 0x412057\n        if (v4 >= 0 || *__errno_location() != 22) {\n            // 0x412066\n            g114 = 1;\n            // 0x412070\n            return (int64_t)v4 & 0xffffffff;\n        }\n        int64_t v5 = function_412000(fd, 0, a3, a4); // 0x412117\n        int64_t v6 = v5 & 0xffffffff; // 0x41211c\n        if ((int32_t)v5 < 0) {\n            // 0x412070\n            return v6 & 0xffffffff;\n        }\n        // 0x412126\n        g114 = -1;\n        v1 = v6;\n    }\n    int32_t fd2 = v1; // 0x41209f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x4120aa\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x412070\n            return v1 & 0xffffffff;\n        }\n    }\n    int32_t * v7 = __errno_location(); // 0x4120c2\n    close(fd2);\n    // 0x412070\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_412140",
            "funcStartAddr": "412140",
            "funcEndAddr": "412180",
            "decompiledFuncCode": "int64_t function_412140(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x41215a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x41215a\n        return fflush(stream);\n    }\n    // 0x412168\n    function_412180(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_412180",
            "funcStartAddr": "412180",
            "funcEndAddr": "4121d7",
            "decompiledFuncCode": "int64_t function_412180(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x412180\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x41218a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4121bb\n    int64_t result = -1; // 0x4121c4\n    if (v1 != -1) {\n        // 0x4121c6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4121d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4121e0",
            "funcStartAddr": "4121e0",
            "funcEndAddr": "4122bf",
            "decompiledFuncCode": "int64_t function_4121e0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4121ec\n    uint32_t v2 = *v1; // 0x4121ec\n    int64_t v3 = a2 & 0xffffffff; // 0x4121f1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4121f4\n    uint64_t v5 = (int64_t)*v4; // 0x4121f4\n    int64_t v6; // 0x412262\n    if (v3 <= v5) {\n      lab_0x41225c_2:\n        // 0x41225c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4121e2\n    int64_t v8 = v2; // 0x4121e0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x41225c\n        goto lab_0x41225c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x412218\n    int64_t v17; // 0x412226\n    int64_t * v18; // 0x412240\n    int64_t * v19; // 0x412243\n    int64_t v20; // 0x41224e\n    int64_t v21; // 0x412226\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x412223\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x412240\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x412257\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x41225c\n            goto lab_0x41225c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41225c\n            goto lab_0x41225c_2;\n        }\n        // 0x412212\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x41229b\n    int64_t * v23 = (int64_t *)v22; // 0x4122a0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4122a3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4122a0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4122b7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x41220d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41225c\n            goto lab_0x41225c_2;\n        }\n        // 0x412212\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x412223\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x412240\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x412257\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x41225c\n                goto lab_0x41225c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x41225c\n                goto lab_0x41225c_2;\n            }\n            // 0x412212\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x412280\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4122a0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4122b7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x41225c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4122c0",
            "funcStartAddr": "4122c0",
            "funcEndAddr": "4128dc",
            "decompiledFuncCode": "int64_t function_4122c0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4122df\n    int64_t v2 = *v1; // 0x4122df\n    char * str2 = (char *)v2; // 0x4122ec\n    char c = *str2; // 0x4122ec\n    int64_t v3 = v2; // 0x412318\n    int64_t v4 = 0; // 0x4122c0\n    int32_t v5; // 0x4122c0\n    int64_t v6; // 0x4122c0\n    int64_t v7; // 0x4122c0\n    int64_t v8; // 0x4122c0\n    int64_t v9; // 0x4122c0\n    int64_t v10; // 0x4122c0\n    int64_t v11; // 0x4122c0\n    int64_t v12; // 0x4122c0\n    int64_t v13; // 0x4122c0\n    int64_t str3; // 0x4122c0\n    int64_t v14; // 0x4122c0\n    int64_t v15; // 0x4122c0\n    int64_t v16; // 0x4122c0\n    int64_t v17; // 0x4122c0\n    int32_t v18; // 0x4122c0\n    int32_t v19; // 0x4122c0\n    int32_t v20; // 0x4122c0\n    int32_t v21; // 0x4122c0\n    int32_t v22; // 0x4122c0\n    int32_t v23; // 0x4122c0\n    int32_t v24; // 0x4122c0\n    int32_t v25; // 0x4122c0\n    int32_t v26; // 0x4122c0\n    int32_t v27; // 0x4122c0\n    int32_t v28; // 0x4122c0\n    int32_t v29; // 0x4122c0\n    int64_t nmemb; // 0x4122c0\n    int64_t v30; // 0x4122c0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x41231c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x412318\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x412328\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x41232e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4122f8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x41235c\n                int64_t v34; // 0x4122c0\n                int64_t v35; // 0x4122c0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x412365\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4124e0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x412376\n                int64_t v37 = *(int64_t *)v36; // 0x41237a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x412350\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x412365\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4124e0;\n                        }\n                    }\n                    // 0x412376\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4123c6:\n                    // 0x4123c6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x412420;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x412590\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x412420;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x412540\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4123ea;\n                                } else {\n                                    // 0x41254c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4123ea;\n                                    } else {\n                                        // 0x41255a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4123ea;\n                                        } else {\n                                            goto lab_0x412420;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4123ea;\n                            }\n                        }\n                    }\n                }\n              lab_0x412431:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x412606\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4127b2\n                            flockfile(g55);\n                            int64_t v41 = *v1; // 0x4127d2\n                            __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x41281f\n                            int64_t v43 = (int64_t)g55;\n                            int64_t v44 = v43; // 0x412839\n                            int64_t v45; // 0x41283b\n                            if (*(char *)v42 != 0) {\n                                // 0x41283b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g55;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x412833\n                            while (v17 + nmemb != v42) {\n                                // 0x412835\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x41283b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g55;\n                                }\n                                // 0x412828\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x412860\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g55);\n                            v40 = *v1;\n                        } else {\n                            // 0x412614\n                            __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x41276f\n                        free((int64_t *)v17);\n                    }\n                    // 0x412669\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x412680\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x41252e\n                    return 63;\n                }\n                // 0x412450\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4124d4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4124e0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4124f0\n                    uint32_t v50 = *v49; // 0x4124f0\n                    int64_t v51 = v50; // 0x4124f0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4124fa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x412503\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x41272f\n                                __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4126da\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x41252e\n                            return 63;\n                        }\n                        // 0x412578\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x41288f\n                                    __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x41278d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4127a0\n                                // 0x41252e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x41269e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4126b2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x41251b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x41251e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x412522\n                    int64_t result = v59; // 0x412528\n                    if (v58 != 0) {\n                        // 0x41252a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x41252e\n                    return result;\n                }\n            } else {\n                // 0x41232e\n                v5 = v32;\n            }\n            // break -> 0x412455\n            break;\n        }\n    }\n    // 0x412455\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x41246d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x412477\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x41252e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4125b9\n        __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4124a6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4124b6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x412420:\n    // 0x412420\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x412420\n    int64_t v63 = *(int64_t *)v62; // 0x412424\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x412431\n        goto lab_0x412431;\n    }\n    goto lab_0x4123c6;\n  lab_0x4123ea:\n    // 0x4123ea\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4122c0\n    int32_t v65; // 0x4122c0\n    int32_t v66; // 0x4122c0\n    if (v27 != 0) {\n        goto lab_0x412420;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4125a0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x412420;\n            } else {\n                goto lab_0x412411;\n            }\n        } else {\n            // 0x412405\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4126fc\n                int64_t v67 = (int64_t)mem; // 0x4126fc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x412420;\n                } else {\n                    // 0x41270f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x412411;\n                }\n            } else {\n                goto lab_0x412411;\n            }\n        }\n    }\n  lab_0x412411:\n    // 0x412411\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x412420;\n}\n"
        },
        {
            "funcName": "function_4128e0",
            "funcStartAddr": "4128e0",
            "funcEndAddr": "412ea6",
            "decompiledFuncCode": "int64_t function_4128e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x412901\n    if (v3 < 1) {\n        // 0x412abe\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4128fd\n    int32_t v5 = *(int32_t *)a7; // 0x412909\n    uint64_t v6 = a1 & 0xffffffff; // 0x41290b\n    int64_t v7 = v2; // 0x412910\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x412913\n    *v8 = 0;\n    int64_t v9; // 0x4128e0\n    int64_t v10; // 0x4128e0\n    int64_t v11; // 0x4128e0\n    int64_t v12; // 0x4128e0\n    int64_t str; // 0x4128e0\n    int64_t v13; // 0x4128e0\n    int64_t v14; // 0x4128e0\n    int64_t v15; // 0x4128e0\n    int64_t v16; // 0x4128e0\n    int64_t v17; // 0x4128e0\n    int32_t v18; // 0x4128e0\n    char v19; // 0x4128e0\n    if (v5 == 0) {\n        // 0x412af8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x41292a;\n    } else {\n        // 0x412923\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x412970\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x412973\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x412a38;\n            } else {\n                int64_t v22 = v7 + 1; // 0x412986\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x412996\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x412a4c;\n                } else {\n                    goto lab_0x4129a8;\n                }\n            }\n        } else {\n            goto lab_0x41292a;\n        }\n    }\n  lab_0x41292a:\n    // 0x41292a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x412930\n    *v24 = 0;\n    int64_t v25; // 0x4128e0\n    int64_t v26; // 0x4128e0\n    int64_t v27; // 0x4128e0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x412a20\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x412a2d;\n        }\n        case 43: {\n            // 0x412d30\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x412a2d;\n        }\n        default: {\n            // 0x41294c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x412caf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x412dc8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x412a2d;\n                } else {\n                    // 0x412cbd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x41295a;\n                }\n            } else {\n                goto lab_0x41295a;\n            }\n        }\n    }\n  lab_0x412a38:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x412a3f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4129a8;\n    } else {\n        goto lab_0x412a4c;\n    }\n  lab_0x41295a:\n    // 0x41295a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x412a2d;\n  lab_0x412a2d:\n    // 0x412a2d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x412a38;\n  lab_0x4129a8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4129a8\n    int64_t v31 = v30; // 0x4129a8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4129aa\n    if ((int64_t)*v32 > v31) {\n        // 0x4129af\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4129b2\n    if (*v33 > v30) {\n        // 0x4129b7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4129ba\n    int64_t v35 = v31; // 0x4129be\n    int64_t v36 = v15; // 0x4129be\n    int64_t v37; // 0x4128e0\n    int64_t v38; // 0x4128e0\n    int64_t v39; // 0x4128e0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x412b28\n        int64_t v41 = v40; // 0x412b28\n        v2 = v41;\n        int64_t v42; // 0x4128e0\n        if (*v33 == v40) {\n            // 0x412d10\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x412d18\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x412b34\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x412b38\n                function_4121e0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x412b48\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x412b51\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x412b5a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x412b71\n            int64_t v47 = v45 & 0xffffffff; // 0x412b75\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x412b7e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x412b84\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x412b86;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x412b60\n            int64_t v49 = v48 & 0xffffffff; // 0x412b60\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x412b71\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x412b7e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x412b84\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x412b86;\n                    }\n                }\n                // 0x412b60\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x412d28\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x412b86;\n    } else {\n        goto lab_0x4129c4;\n    }\n  lab_0x412a4c:\n    // 0x412a4c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x412a4f\n    int64_t v51 = v12; // 0x412a4f\n    int64_t v52 = v14; // 0x412a4f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4129a8;\n    } else {\n        goto lab_0x412a55;\n    }\n  lab_0x4129c4:;\n    int32_t v53 = v35; // 0x4129c4\n    int64_t v54; // 0x4128e0\n    int64_t v55; // 0x4128e0\n    int64_t v56; // 0x4128e0\n    int64_t v57; // 0x4128e0\n    int64_t v58; // 0x4128e0\n    int64_t v59; // 0x4128e0\n    char * v60; // 0x4128e0\n    int64_t v61; // 0x4128e0\n    int64_t v62; // 0x4129d9\n    int64_t v63; // 0x4128e0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x412b13\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x412b16;\n    } else {\n        // 0x4129cc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4128e0\n        int64_t v66 = v65 ? -1 : 1; // 0x4129e0\n        int64_t v67 = (int64_t)\"--\"; // 0x4128e0\n        int64_t v68 = v62; // 0x4128e0\n        int64_t v69 = 3; // 0x4129e0\n        unsigned char v70 = *(char *)v68; // 0x4129e0\n        char v71 = *(char *)v67; // 0x4129e0\n        char v72 = v71; // 0x4129e0\n        bool v73 = false; // 0x4129e0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x412ad0\n            if (*(char *)v62 == 45) {\n                // 0x412b90\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x412b90\n                if (c == 0) {\n                    goto lab_0x412ada;\n                } else {\n                    // 0x412b9d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x412c20;\n                    } else {\n                        if (c == 45) {\n                            // 0x412e03\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x412c75;\n                        } else {\n                            // 0x412bae\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x412c20;\n                            } else {\n                                // 0x412bb3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x412bd4;\n                                } else {\n                                    // 0x412bba\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x412c20;\n                                    } else {\n                                        goto lab_0x412bd4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x412ada;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4129f0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4129f3\n            int64_t v77 = v35 + 1; // 0x4129f6\n            int32_t v78 = v77; // 0x4129f9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x412d60\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x412a07\n                    function_4121e0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x412a15\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x412b16;\n        }\n    }\n  lab_0x412a55:;\n    // 0x412a55\n    int64_t v79; // bp-104, 0x4128e0\n    int64_t v80 = &v79; // 0x4128ea\n    int64_t v81 = v50 + 1; // 0x412a55\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x412a5c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x412a61\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x412a65\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x412a69\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x412a71\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x412a76\n    int32_t c2 = v84; // 0x412a76\n    char * found_char_pos = strchr(str2, c2); // 0x412a76\n    int64_t v87 = *v82; // 0x412a7b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x412a85\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x412a90\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x412d80\n            __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x412d4d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x412abe\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x412a76\n    char v91 = *(char *)(v90 + 1); // 0x412aab\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x412a65\n        if (v91 != 58) {\n            // 0x412abe\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x412cd4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x412dd8\n                *v8 = 0;\n            } else {\n                // 0x412dbc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x412cfe\n            *v83 = 0;\n            // 0x412abe\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x412cde\n        if (v93 != 0) {\n            // 0x412d70\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x412cfe\n            *v83 = 0;\n            // 0x412abe\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x412cf1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x412cfe\n            *v83 = 0;\n            // 0x412abe\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x412e3a\n            __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x412dea\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x412df1\n        // 0x412cfe\n        *v83 = 0;\n        // 0x412abe\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x412c49\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x412c4b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x412e70\n                __fprintf_chk(g55, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x412e21\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x412e28\n            // 0x412abe\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x412c56\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x412c5a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x412c75;\n  lab_0x412b86:\n    // 0x412b86\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4129c4;\n  lab_0x412c75:;\n    int64_t v99 = function_4122c0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x412c93\n    // 0x412abe\n    return v99 & 0xffffffff;\n  lab_0x412b16:;\n    int32_t v100 = v55; // 0x412b16\n    if (v100 != (int32_t)v59) {\n        // 0x412b1a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x412abe\n    return 0xffffffff;\n  lab_0x412ada:\n    // 0x412ada\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x412ae1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x412abe\n    return v99 & 0xffffffff;\n  lab_0x412c20:\n    // 0x412c20\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x412a55;\n  lab_0x412bd4:\n    // 0x412bd4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4122c0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g19); // 0x412bfa\n    if ((int32_t)v101 != -1) {\n        // 0x412abe\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x412c0f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x412c20;\n}\n"
        },
        {
            "funcName": "function_412eb0",
            "funcStartAddr": "412eb0",
            "funcEndAddr": "412f06",
            "decompiledFuncCode": "int64_t function_412eb0(int64_t a1) {\n    // 0x412eb0\n    *(int32_t *)&g115 = g49;\n    *(int32_t *)&g116 = g48;\n    int64_t v1; // 0x412eb0\n    int64_t result = function_4128e0(v1, v1, v1, v1, v1, v1, &g115, a1 & 0xffffffff); // 0x412ed6\n    g49 = *(int32_t *)&g115;\n    g120 = (char *)g118;\n    *(int32_t *)&g47 = g117;\n    return result;\n}\n"
        },
        {
            "funcName": "function_412f10",
            "funcStartAddr": "412f10",
            "funcEndAddr": "412f28",
            "decompiledFuncCode": "int64_t function_412f10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412f10\n    return function_412eb0(1);\n}\n"
        },
        {
            "funcName": "function_412f30",
            "funcStartAddr": "412f30",
            "funcEndAddr": "412f43",
            "decompiledFuncCode": "int64_t function_412f30(int64_t a1, int64_t a2, char * a3, char (**a4)[22], int32_t * a5, int64_t a6) {\n    // 0x412f30\n    return function_412eb0(0);\n}\n"
        },
        {
            "funcName": "function_412f50",
            "funcStartAddr": "412f50",
            "funcEndAddr": "412f65",
            "decompiledFuncCode": "int64_t function_412f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412f50\n    return function_4128e0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_412f70",
            "funcStartAddr": "412f70",
            "funcEndAddr": "412f86",
            "decompiledFuncCode": "int64_t function_412f70(void) {\n    // 0x412f70\n    return function_412eb0(0);\n}\n"
        },
        {
            "funcName": "function_412f90",
            "funcStartAddr": "412f90",
            "funcEndAddr": "412fa8",
            "decompiledFuncCode": "int64_t function_412f90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412f90\n    return function_4128e0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_412fb0",
            "funcStartAddr": "412fb0",
            "funcEndAddr": "41302a",
            "decompiledFuncCode": "int64_t function_412fb0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x412fbb\n    int64_t v2 = (int64_t)&g7; // 0x412fbb\n    int64_t * pwc; // 0x412fb0\n    int64_t v3; // 0x412fb0\n    int64_t n; // 0x412fb0\n    if (a2 == 0) {\n        goto lab_0x413002;\n    } else {\n        // 0x412fbd\n        if (a3 == 0) {\n            // 0x412fe8\n            return -2;\n        }\n        // 0x412fc9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x413002;\n        } else {\n            goto lab_0x412fd4;\n        }\n    }\n  lab_0x413002:\n    // 0x413002\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x412fb0\n    pwc = &v4;\n    goto lab_0x412fd4;\n  lab_0x412fd4:;\n    char * wstr = (char *)v3; // 0x412fda\n    int64_t ps; // 0x412fb0\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x412fda\n    int64_t result = v5; // 0x412fda\n    if (v5 < 0xfffffffe) {\n        // 0x412fe8\n        return result;\n    }\n    int64_t result2 = result; // 0x413019\n    if ((char)function_40bd10(0, v3) == 0) {\n        // 0x41301b\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x412fe8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413030",
            "funcStartAddr": "413030",
            "funcEndAddr": "413134",
            "decompiledFuncCode": "int64_t function_413030(int64_t result, int32_t a2, int64_t a3) {\n    // 0x413030\n    if (a3 == 0) {\n        // 0x413069\n        return 0;\n    }\n    int64_t v1 = result; // 0x41303c\n    int64_t v2 = a3; // 0x41303c\n    int64_t result2; // 0x413030\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x41303e\n        int64_t v4 = result; // 0x413041\n        if ((char)result == v3) {\n            // 0x413069\n            return result;\n        }\n        int64_t v5 = a3; // 0x413041\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x413050\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x413070;\n            }\n            // 0x413056\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x413069\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x413069\n        return result2;\n    }\n  lab_0x413070:;\n    int64_t result3 = v1; // 0x41309d\n    int64_t v6 = v2; // 0x41309d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x41307f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x41308c\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x413096\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x4130b6\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x4130e5\n            int64_t v13 = v1 + 8; // 0x4130e9\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x4130d3\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x4130fc;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x4130f3\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x413069\n                return 0;\n            }\n        }\n    }\n  lab_0x4130fc:;\n    char v15 = a2; // 0x4130fc\n    if (*(char *)result3 == v15) {\n        // 0x413069\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x413110\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x413069\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x413069\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413140",
            "funcStartAddr": "413140",
            "funcEndAddr": "4131e2",
            "decompiledFuncCode": "int64_t function_413140(int64_t * a1, int32_t a2) {\n    int64_t v1 = (int64_t)a1;\n    if (*(int64_t *)(v1 + 8) >= 0x3b9aca00) {\n        // 0x4131d0\n        *__errno_location() = 22;\n        // 0x4131c7\n        return 0xffffffff;\n    }\n    int64_t v2 = a2;\n    struct timespec * rmtp = (struct timespec *)v2;\n    int64_t v3 = v1; // 0x413169\n    int64_t v4 = v1; // 0x413169\n    int64_t rqtp; // bp-40, 0x413140\n    if (a1 <= (int64_t *)0x1fa400) {\n      lab_0x4131b8:\n        // 0x4131b8\n        rqtp = v4;\n        // 0x4131c7\n        return nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    rqtp = 0x1fa400;\n    v3 -= 0x1fa400;\n    int32_t v5 = nanosleep((struct timespec *)&rqtp, rmtp); // 0x413197\n    while (v5 == 0) {\n        // 0x413170\n        v4 = v3;\n        if (v3 < 0x1fa401) {\n            goto lab_0x4131b8;\n        }\n        rqtp = 0x1fa400;\n        v3 -= 0x1fa400;\n        v5 = nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    int64_t result = v5; // 0x413197\n    if (a2 == 0) {\n        // 0x4131c7\n        return result;\n    }\n    // 0x4131a5\n    *(int64_t *)v2 = v3 + v2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4131f0",
            "funcStartAddr": "4131f0",
            "funcEndAddr": "41322b",
            "decompiledFuncCode": "int64_t function_4131f0(int64_t a1) {\n    // 0x4131f0\n    __fprintf_chk(g55, 1, \"%s\\n\", dcgettext(NULL, \"memory exhausted\", 5));\n    exit(g41);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_413230",
            "funcStartAddr": "413230",
            "funcEndAddr": "413245",
            "decompiledFuncCode": "int64_t function_413230(int64_t a1, int64_t a2) {\n    // 0x413230\n    return *(int64_t *)(a1 + 56);\n}\n"
        },
        {
            "funcName": "function_413250",
            "funcStartAddr": "413250",
            "funcEndAddr": "413265",
            "decompiledFuncCode": "int64_t function_413250(int64_t a1, int64_t a2) {\n    // 0x413250\n    return *(int64_t *)(a1 + 64);\n}\n"
        },
        {
            "funcName": "function_413270",
            "funcStartAddr": "413270",
            "funcEndAddr": "4132f3",
            "decompiledFuncCode": "int64_t function_413270(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3 == 0 ? 15 : a3 - 1;\n    *(int64_t *)(a1 + 48) = v1;\n    int64_t v2 = a2 == 0 ? 4064 : a2; // 0x413292\n    *(int64_t *)a1 = v2;\n    int64_t v3 = function_413230(a1, v2); // 0x413299\n    *(int64_t *)(a1 + 8) = v3;\n    if (v3 == 0) {\n        // 0x4132ed\n        function_4131f0(a1);\n        // UNREACHABLE\n    }\n    int64_t v4 = v1 + 16 + v3 & (a3 == 0 ? -16 : -a3); // 0x4132af\n    *(int64_t *)(a1 + 16) = v4;\n    int64_t v5 = v3 + a1; // 0x4132b9\n    *(int64_t *)(a1 + 24) = v4;\n    *(int64_t *)v3 = v5;\n    *(int64_t *)(a1 + 32) = v5;\n    *(int64_t *)(v3 + 8) = 0;\n    char * v6 = (char *)(a1 + 80); // 0x4132d4\n    *v6 = *v6 & -7;\n    return 1;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "413300",
            "funcEndAddr": "413311",
            "decompiledFuncCode": "int64_t _obstack_begin(int64_t a1, int32_t a2, int32_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 80); // 0x413300\n    *v1 = *v1 & -2;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    return function_413270(a1, (int64_t)a2, (int64_t)a3);\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "413320",
            "funcEndAddr": "413335",
            "decompiledFuncCode": "int64_t _obstack_begin_1(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1 = (char *)(a1 + 80); // 0x413320\n    *v1 = *v1 | 1;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    *(int64_t *)(a1 + 72) = a6;\n    return function_413270(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "413340",
            "funcEndAddr": "41343b",
            "decompiledFuncCode": "int64_t _obstack_newchunk(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    int64_t * v1 = (int64_t *)(a1 + 24); // 0x41334a\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x41334e\n    uint64_t v3 = *v1 - *v2; // 0x41334e\n    uint64_t v4 = v3 + a2; // 0x413356\n    if (v4 < a2) {\n        // 0x413435\n        function_4131f0(a1);\n        // UNREACHABLE\n    }\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x41335f\n    uint64_t v6 = v4 + *v5; // 0x41335f\n    if (v6 < v4) {\n        // 0x413435\n        function_4131f0(a1);\n        // UNREACHABLE\n    }\n    int64_t * v7 = (int64_t *)(a1 + 8); // 0x413352\n    int64_t v8 = *v7; // 0x413352\n    uint64_t v9 = v3 / 8 + 100 + v6; // 0x41336d\n    uint64_t v10 = v6 <= a1 ? a1 : v6; // 0x413372\n    int64_t v11 = v10 >= v9 ? v10 : v9; // 0x413379\n    int64_t v12 = function_413230(a1, v11); // 0x413398\n    if (v12 == 0) {\n        // 0x413435\n        function_4131f0(a1);\n        // UNREACHABLE\n    }\n    int64_t v13 = v12 + v11; // 0x4133a9\n    *v7 = v12;\n    int64_t * v14 = (int64_t *)(v12 + 8); // 0x4133b5\n    *v14 = v8;\n    *(int64_t *)(a1 + 32) = v13;\n    *(int64_t *)v12 = v13;\n    int64_t v15 = *v5; // 0x4133c1\n    int64_t v16 = v12 + 16 + v15 & -1 - v15; // 0x4133d3\n    int64_t * dest_mem = memcpy((int64_t *)v16, (int64_t *)*v2, (int32_t)v3); // 0x4133d9\n    char * v17 = (char *)(a1 + 80); // 0x4133de\n    int64_t result = (int64_t)dest_mem; // 0x4133e4\n    if ((*v17 & 2) == 0) {\n        int64_t v18 = *v5; // 0x4133e6\n        int64_t v19 = v8 + 16 + v18 & -1 - v18; // 0x4133f3\n        result = v19;\n        if (*v2 == v19) {\n            // 0x413420\n            *v14 = *(int64_t *)(v8 + 8);\n            result = function_413250(a1, v8);\n        }\n    }\n    // 0x4133fd\n    *v2 = v16;\n    *v1 = v16 + v3;\n    *v17 = *v17 & -3;\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "413440",
            "funcEndAddr": "413477",
            "decompiledFuncCode": "int64_t _obstack_allocated_p(int64_t a1, uint64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x413440\n    if (v1 == 0) {\n        // 0x413463\n        return 0;\n    }\n    if (v1 < a2) {\n        // 0x413455\n        if (*(int64_t *)v1 >= a2) {\n            // break -> 0x413463\n            break;\n        }\n    }\n    int64_t v2 = *(int64_t *)(v1 + 8); // 0x41345a\n    int64_t result = 0; // 0x413461\n    while (v2 != 0) {\n        uint64_t v3 = v2;\n        if (v3 < a2) {\n            // 0x413455\n            result = 1;\n            if (*(int64_t *)v3 >= a2) {\n                // break -> 0x413463\n                break;\n            }\n        }\n        // 0x41345a\n        v2 = *(int64_t *)(v3 + 8);\n        result = 0;\n    }\n    // 0x413463\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "413480",
            "funcEndAddr": "4134e5",
            "decompiledFuncCode": "int64_t _obstack_free(int64_t a1, int32_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x413487\n    int64_t v2 = *v1; // 0x413487\n    int64_t result2; // 0x413480\n    if (v2 != 0) {\n        uint64_t v3 = (int64_t)a2;\n        char * v4 = (char *)(a1 + 80);\n        uint64_t result; // 0x41349d\n        if (v2 < v3) {\n            // 0x41349d\n            result = *(int64_t *)v2;\n            if (result >= v3) {\n                // 0x4134d0\n                *(int64_t *)(a1 + 24) = v3;\n                *(int64_t *)(a1 + 16) = v3;\n                *(int64_t *)(a1 + 32) = result;\n                *v1 = v2;\n                return result;\n            }\n        }\n        int64_t v5 = *(int64_t *)(v2 + 8); // 0x4134a5\n        int64_t v6 = function_413250(a1, v2); // 0x4134ac\n        *v4 = *v4 | 2;\n        result2 = v6;\n        while (v5 != 0) {\n            uint64_t v7 = v5;\n            if (v7 < v3) {\n                // 0x41349d\n                result = *(int64_t *)v7;\n                if (result >= v3) {\n                    // 0x4134d0\n                    *(int64_t *)(a1 + 24) = v3;\n                    *(int64_t *)(a1 + 16) = v3;\n                    *(int64_t *)(a1 + 32) = result;\n                    *v1 = v7;\n                    return result;\n                }\n            }\n            // 0x4134a5\n            v5 = *(int64_t *)(v7 + 8);\n            v6 = function_413250(a1, v7);\n            *v4 = *v4 | 2;\n            result2 = v6;\n        }\n    }\n    if (a2 == 0) {\n        // 0x4134c6\n        return result2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "4134f0",
            "funcEndAddr": "413519",
            "decompiledFuncCode": "int64_t _obstack_memory_used(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x4134f0\n    int64_t result = 0; // 0x4134f9\n    if (v1 == 0) {\n        // 0x413512\n        return 0;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x413506\n    result += *(int64_t *)v2 - v2;\n    while (v3 != 0) {\n        // 0x413500\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n        result += *(int64_t *)v2 - v2;\n    }\n    // 0x413512\n    return result;\n}\n"
        },
        {
            "funcName": "function_413520",
            "funcStartAddr": "413520",
            "funcEndAddr": "41357d",
            "decompiledFuncCode": "int64_t function_413520(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x413527\n    int64_t v2; // 0x413520\n    int64_t result = function_411f80(a1, v2); // 0x413538\n    if ((v2 & 32) != 0) {\n        // 0x413560\n        if ((int32_t)result == 0) {\n            // 0x413564\n            *__errno_location() = 0;\n        }\n        // 0x41355a\n        return 0xffffffff;\n    }\n    // 0x413541\n    if ((int32_t)result == 0) {\n        // 0x41355a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x413548\n    if (v1 == 0) {\n        // 0x41354a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x41355a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_413580",
            "funcStartAddr": "413580",
            "funcEndAddr": "41363c",
            "decompiledFuncCode": "int64_t function_413580(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x413580\n    int128_t v1; // 0x413580\n    __asm_comisd(v1, g21);\n    bool v2; // 0x413580\n    if (v2 || v2) {\n        // 0x41359c\n        return -0x8000000000000000;\n    }\n    int128_t v3 = __asm_movsd_3(0x43e0000000000000); // 0x41358e\n    __asm_comisd(v3, v1);\n    int64_t v4 = __asm_cvttsd2si(v1); // 0x4135b0\n    __asm_pxor(v3, v3);\n    int128_t v5 = __asm_cvtsi2sd(v4); // 0x4135bb\n    int128_t v6 = __asm_mulsd_4(__asm_subsd(v1, v5), 0x41cdcd6500000000); // 0x4135c4\n    __asm_pxor(v5, v5);\n    int64_t v7 = __asm_cvttsd2si(v6); // 0x4135d0\n    __asm_comisd(v6, __asm_cvtsi2sd(v7));\n    int64_t result = (v7 >> 63) + v4; // 0x413602\n    if ((v7 >> 63 & -0x3b9aca00) + v7 < 0) {\n        // 0x413630\n        return result - 1;\n    }\n    // 0x41359c\n    return result;\n}\n"
        },
        {
            "funcName": "function_413640",
            "funcStartAddr": "413640",
            "funcEndAddr": "41368e",
            "decompiledFuncCode": "int64_t function_413640(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x41364c\n    if (fd >= 3) {\n        // 0x413651\n        return a1 & 0xffffffff;\n    }\n    // 0x413660\n    int64_t v1; // 0x413640\n    int64_t v2 = function_413690(a1, v1); // 0x413660\n    int32_t * v3 = __errno_location(); // 0x413668\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_413690",
            "funcStartAddr": "413690",
            "funcEndAddr": "4136aa",
            "decompiledFuncCode": "int64_t function_413690(int64_t a1, int64_t a2) {\n    uint32_t v1 = (int32_t)a2 & 0x80000; // 0x413690\n    int64_t v2; // 0x413690\n    return function_412000((int32_t)a1, v1 != 0 ? 1030 : (int64_t)v1, 3, v2);\n}\n"
        },
        {
            "funcName": "function_4136b0",
            "funcStartAddr": "4136b0",
            "funcEndAddr": "413743",
            "decompiledFuncCode": "int64_t function_4136b0(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x4136b7\n    int64_t result = (int64_t)file; // 0x4136b7\n    if (file == NULL) {\n        // 0x4136d1\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x4136c7\n    if (v1 >= 3) {\n        // 0x4136d1\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_413ea0((int64_t)v1, v2); // 0x4136ea\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x413728\n        function_411f80(result, v2);\n        // 0x4136d1\n        return 0;\n    }\n    // 0x4136ee\n    if ((int32_t)function_411f80(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x413700\n        if (v4 != NULL) {\n            // 0x4136d1\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x41370d\n    close(fd);\n    // 0x4136d1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_413750",
            "funcStartAddr": "413750",
            "funcEndAddr": "413cb2",
            "decompiledFuncCode": "int64_t function_413750(void) {\n    char * v1 = nl_langinfo(14); // 0x413766\n    char * v2 = g119; // 0x41376b\n    char * v3; // 0x413750\n    int64_t v4; // 0x413750\n    int64_t v5; // 0x413750\n    int64_t v6; // 0x413750\n    int64_t v7; // 0x413750\n    int32_t size; // 0x413750\n    int32_t size2; // 0x413750\n    int32_t len; // 0x413822\n    int64_t v8; // 0x413822\n    char * env_val; // 0x41380d\n    if (v2 == NULL) {\n        // 0x413808\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x413875;\n        } else {\n            // 0x41381a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x413875;\n            } else {\n                // 0x41381f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41380d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x413ca5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x413875;\n                    } else {\n                        // 0x413c19\n                        size2 = len + 14;\n                        goto lab_0x41383b;\n                    }\n                } else {\n                    goto lab_0x41383b;\n                }\n            }\n        }\n    } else {\n        // 0x413750\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x41378a;\n    }\n  lab_0x413abc:;\n    // 0x413abc\n    struct _IO_FILE * stream; // 0x4138fb\n    int32_t v10 = __uflow(stream); // 0x413abf\n    int64_t v11; // 0x413750\n    int64_t v12 = v11; // 0x413ac9\n    int64_t v13; // 0x413750\n    int64_t v14 = v13; // 0x413ac9\n    int32_t v15 = v10; // 0x413ac9\n    int64_t v16; // 0x413750\n    int64_t v17 = v16; // 0x413ac9\n    int64_t v18 = v11; // 0x413ac9\n    int64_t v19 = v13; // 0x413ac9\n    int64_t v20 = v16; // 0x413ac9\n    if (v10 == -1) {\n        // break -> 0x413acf\n        goto lab_0x413acf;\n    }\n    goto lab_0x413949;\n  lab_0x41393e:;\n    // 0x41393e\n    int64_t v90; // 0x413750\n    int64_t * v32; // 0x413930\n    *v32 = v90 + 1;\n    int64_t v89; // 0x413750\n    v12 = v89;\n    int64_t v91; // 0x413750\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x413750\n    v17 = v92;\n    goto lab_0x413949;\n  lab_0x413949:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x413750\n    int32_t v25; // bp-120, 0x413750\n    int32_t v26; // bp-184, 0x413750\n    int64_t v27; // 0x4138fb\n    int64_t v28; // 0x413918\n    int64_t v29; // 0x41391d\n    int64_t * v30; // 0x413934\n    switch (c) {\n        case 32: {\n            goto lab_0x413930;\n        }\n        case 10: {\n            goto lab_0x413930;\n        }\n        case 9: {\n            goto lab_0x413930;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x413b21\n            int32_t v33; // 0x413750\n            char v34; // 0x413750\n            int32_t v35; // 0x413b2e\n            if (v31 < *v30) {\n                // 0x413b00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x413b2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x413b21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x413b00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x413b2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x413b10\n                v36 = v33;\n            }\n            // 0x413bff\n            if (v36 == -1) {\n                // break -> 0x413acf\n                break;\n            }\n            goto lab_0x413930;\n        }\n        default: {\n            // 0x41395f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x413acf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x413988\n            int64_t v39 = v37 + 4; // 0x41398a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x413996\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x413998\n            while (v41 == 0) {\n                // 0x413988\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4139b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4139c2\n            int64_t v45 = v43 + 4; // 0x4139c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4139d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4139d2\n            while (v47 == 0) {\n                // 0x4139c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4139bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4139e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4139f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4139fc\n            int64_t v52 = v51 + v48; // 0x413a05\n            int64_t * mem; // 0x413750\n            int64_t v53; // 0x413750\n            int64_t v54; // 0x413750\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x413b3b\n                int64_t v56 = v55 + 3; // 0x413b47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x413a21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x413a30\n            if (mem == NULL) {\n                // 0x413c5c\n                free((int64_t *)v21);\n                function_411f80(v27, v53);\n                v24 = (int64_t)&g7;\n                goto lab_0x4138d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x413a48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x413a52\n            uint32_t v62 = (int32_t)v59; // 0x413a55\n            int64_t v63; // 0x413750\n            if (v62 >= 8) {\n                // 0x413b64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x413b7e\n                int64_t v66 = v61 - v65; // 0x413b82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x413b8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x413b9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x413b9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x413b9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x413c2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x413a67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x413a6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x413a7b\n            int64_t v74 = v60 - 1; // 0x413a7f\n            uint32_t v75 = (int32_t)v73; // 0x413a84\n            int64_t v76; // 0x413750\n            if (v75 >= 8) {\n                // 0x413bb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x413bbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x413bcc\n                int64_t v80 = v74 - v79; // 0x413bd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x413bdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x413beb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x413be9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x413c46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x413c4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x413a96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x413a9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x413c93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x413aae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x41393e;\n            } else {\n                goto lab_0x413abc;\n            }\n        }\n    }\n  lab_0x413930:;\n    int64_t v93 = v23; // 0x413750\n    int64_t v94 = v22; // 0x413750\n    int64_t v95 = v21; // 0x413750\n    goto lab_0x413930_2;\n  lab_0x413875:;\n    int64_t * mem3 = malloc(size); // 0x413875\n    int64_t v97 = (int64_t)&g7; // 0x413880\n    int64_t v98; // 0x413750\n    int64_t path; // 0x413750\n    if (mem3 == NULL) {\n        goto lab_0x413852;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x413875\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x413896;\n    }\n  lab_0x41378a:;\n    int64_t str = v1 == NULL ? (int64_t)&g7 : (int64_t)v1; // 0x41377d\n    char v100 = *v3; // 0x41378a\n    int64_t v101; // 0x413750\n    if (v100 == 0) {\n        // 0x4137e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x413750\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x413750\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4137d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4137d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4137a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4137ad\n        char v107 = *(char *)v106; // 0x4137b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4137e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4137bb\n    v104 = v103 + 1;\n  lab_0x4137d7:\n    // 0x4137e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x413852:;\n    char * v108 = (char *)v97;\n    g119 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x41378a;\n  lab_0x413896:;\n    int64_t v109 = v98 + path; // 0x413896\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4138c2\n    v24 = (int64_t)&g7;\n    if (fd >= 0) {\n        // 0x4138f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x413c22\n            close(fd);\n            v24 = (int64_t)&g7;\n        } else {\n            // 0x413915\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x413930_2:;\n                uint64_t v96 = *v32; // 0x413930\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x413abc;\n                } else {\n                    goto lab_0x41393e;\n                }\n            }\n          lab_0x413acf:\n            // 0x413acf\n            function_411f80(v27, v19);\n            v24 = (int64_t)&g7;\n            if (v18 != 0) {\n                // 0x413aee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4138d4;\n  lab_0x41383b:;\n    int64_t * mem4 = malloc(size2); // 0x41383b\n    v97 = (int64_t)&g7;\n    if (mem4 != NULL) {\n        // 0x4138e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x413896;\n    } else {\n        goto lab_0x413852;\n    }\n  lab_0x4138d4:\n    // 0x4138d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x413852;\n}\n"
        },
        {
            "funcName": "function_413cc0",
            "funcStartAddr": "413cc0",
            "funcEndAddr": "413d74",
            "decompiledFuncCode": "int64_t function_413cc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x413cda\n    int64_t v2 = a3; // 0x413ce2\n    int64_t v3 = a1; // 0x413ce2\n    int64_t v4 = a4; // 0x413ce2\n    int64_t v5 = a2; // 0x413ce2\n    *v1 = 0;\n    char * str = (char *)v3; // 0x413d20\n    char * str2 = (char *)v2; // 0x413d20\n    int32_t strcoll_rc = strcoll(str, str2); // 0x413d20\n    while (strcoll_rc == 0) {\n        int64_t v6 = (int64_t)strlen(str) + 1; // 0x413cf3\n        int64_t v7 = (int64_t)strlen(str2) + 1; // 0x413cff\n        v4 -= v7;\n        v5 -= v6;\n        if (v5 == 0) {\n            // 0x413d40\n            return v4 != 0 ? 0xffffffff : 0;\n        }\n        // 0x413d0e\n        v2 += v7;\n        v3 += v6;\n        if (v4 == 0) {\n            // 0x413d60\n            return 1;\n        }\n        *v1 = 0;\n        str = (char *)v3;\n        str2 = (char *)v2;\n        strcoll_rc = strcoll(str, str2);\n    }\n    // 0x413d29\n    return strcoll_rc;\n}\n"
        },
        {
            "funcName": "function_413d80",
            "funcStartAddr": "413d80",
            "funcEndAddr": "413e21",
            "decompiledFuncCode": "int64_t function_413d80(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n == a4) {\n        // 0x413d9f\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x413e10\n            *__errno_location() = 0;\n            // 0x413dfc\n            return 0;\n        }\n    }\n    char * v1 = (char *)(n + str); // 0x413dc1\n    char * v2 = (char *)(a4 + str2); // 0x413dc5\n    *v1 = 0;\n    *v2 = 0;\n    int64_t v3 = function_413cc0(str, n + 1, str2, a4 + 1); // 0x413de3\n    // 0x413dfc\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_413e30",
            "funcStartAddr": "413e30",
            "funcEndAddr": "413e93",
            "decompiledFuncCode": "int64_t function_413e30(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n != a4 || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x413e78\n        return function_413cc0(str, n, str2, a4);\n    }\n    // 0x413e5a\n    *__errno_location() = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_413ea0",
            "funcStartAddr": "413ea0",
            "funcEndAddr": "413eae",
            "decompiledFuncCode": "int64_t function_413ea0(int64_t a1, int64_t a2) {\n    // 0x413ea0\n    int64_t v1; // 0x413ea0\n    return function_412000((int32_t)a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_413eb0",
            "funcStartAddr": "413eb0",
            "funcEndAddr": "413f0d",
            "decompiledFuncCode": "int64_t function_413eb0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x413eb0\n    return function_402760();\n}\n"
        },
        {
            "funcName": "function_413f10",
            "funcStartAddr": "413f10",
            "funcEndAddr": "413f11",
            "decompiledFuncCode": "int64_t function_413f10(void) {\n    // 0x413f10\n    int64_t result; // 0x413f10\n    return result;\n}\n"
        },
        {
            "funcName": "function_413f20",
            "funcStartAddr": "413f20",
            "funcEndAddr": "413f38",
            "decompiledFuncCode": "int64_t function_413f20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x413f20\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g26);\n}\n"
        },
        {
            "funcName": "function_413f38",
            "funcStartAddr": "413f38",
            "funcEndAddr": "413f58",
            "decompiledFuncCode": "int64_t function_413f38(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g22; // 0x413f42\n    while (*(int64_t *)v1 != -1) {\n        // 0x413f43\n        v1 -= 8;\n    }\n    // 0x413f54\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sort.elf"
}