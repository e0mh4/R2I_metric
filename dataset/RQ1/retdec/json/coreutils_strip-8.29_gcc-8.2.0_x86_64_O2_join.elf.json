{
    "funcInfo": [
        {
            "funcName": "function_401920",
            "funcStartAddr": "401920",
            "funcEndAddr": "401925",
            "decompiledFuncCode": "int64_t function_401920(void) {\n    // 0x401920\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401925",
            "funcStartAddr": "401925",
            "funcEndAddr": "40192a",
            "decompiledFuncCode": "int64_t function_401925(void) {\n    // 0x401925\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192a",
            "funcStartAddr": "40192a",
            "funcEndAddr": "40192f",
            "decompiledFuncCode": "int64_t function_40192a(void) {\n    // 0x40192a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192f",
            "funcStartAddr": "40192f",
            "funcEndAddr": "401934",
            "decompiledFuncCode": "int64_t function_40192f(void) {\n    // 0x40192f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401934",
            "funcStartAddr": "401934",
            "funcEndAddr": "401939",
            "decompiledFuncCode": "int64_t function_401934(void) {\n    // 0x401934\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401939",
            "funcStartAddr": "401939",
            "funcEndAddr": "40193e",
            "decompiledFuncCode": "int64_t function_401939(void) {\n    // 0x401939\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401940",
            "funcStartAddr": "401940",
            "funcEndAddr": "4027e0",
            "decompiledFuncCode": "int64_t function_401940(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a1 >> 32; // 0x401949\n    int32_t v2 = 0; // bp-152, 0x40195a\n    int32_t v3 = 0; // bp-128, 0x401962\n    int32_t v4 = 0; // bp-148, 0x40196b\n    function_403de0(a2);\n    setlocale(LC_ALL, (char *)&g1);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g54 = function_403be0(3, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    int64_t v5; // 0x401940\n    function_4081f0(0x403a60, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v5);\n    function_4081f0(0x402af0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v5);\n    g51 = 1;\n    g50 = 0;\n    *(int16_t *)&g48 = 0;\n    g41 = 0;\n    int64_t v6 = v1 & 0xffffffff; // 0x401a14\n    int32_t v7 = function_4077c0(v6, a2, \"-a:e:i1:2:j:o:t:v:z\", &g3, 0, v5); // 0x401a1b\n    int32_t v8; // 0x401940\n    int64_t v9; // 0x401940\n    int64_t v10; // 0x401940\n    int64_t v11; // 0x401940\n    int64_t v12; // 0x401940\n    int64_t v13; // 0x401940\n    int64_t v14; // bp-136, 0x401940\n    int32_t v15; // bp-156, 0x401940\n    int64_t v16; // 0x401b95\n    if (v7 != -1) {\n        int64_t v17 = &v15;\n        int64_t v18; // bp-184, 0x401940\n        int64_t v19 = (int64_t)&v18 + 56;\n        bool v20; // 0x401940\n        int64_t v21 = v20 ? -1 : 1;\n        v8 = v7;\n        while (true) {\n          lab_0x401a24:\n            // 0x401a24\n            v12 = v11;\n            int32_t v22 = v8;\n            v15 = 0;\n            if (v22 == 105) {\n                // 0x401d30\n                g39 = 1;\n                v13 = 0;\n                v10 = v12;\n                goto lab_0x401a00;\n            } else {\n                if (v22 > 105) {\n                    if (v22 == 118) {\n                        // 0x401c38\n                        g51 = 0;\n                        goto lab_0x401c40;\n                    } else {\n                        if (v22 > 118) {\n                            if (v22 == 128) {\n                                // 0x401c90\n                                g41 = 1;\n                                v13 = 0;\n                                v10 = v12;\n                            } else {\n                                if (v22 > 128) {\n                                    if (v22 == 129) {\n                                        // 0x4019f0\n                                        g41 = 2;\n                                        v13 = 0;\n                                        v10 = v12;\n                                    } else {\n                                        if (v22 != 130) {\n                                          lab_0x401b39:\n                                            // 0x401b39\n                                            function_4034f0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401a65\n                                        g38 = 1;\n                                        v13 = 0;\n                                        v10 = v12;\n                                    }\n                                } else {\n                                    if (v22 != 122) {\n                                        // 0x401b39\n                                        function_4034f0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x401a79\n                                    *(char *)&g16 = 0;\n                                    v13 = 0;\n                                    v10 = v12;\n                                }\n                            }\n                            goto lab_0x401a00;\n                        } else {\n                            if (v22 == 111) {\n                                int64_t v23 = (int64_t)g75; // 0x401ca8\n                                int64_t v24 = 5; // 0x401cbc\n                                int64_t v25 = v23;\n                                int64_t v26 = (int64_t)\"auto\";\n                                unsigned char v27 = *(char *)v25; // 0x401cbc\n                                char v28 = *(char *)v26; // 0x401cbc\n                                char v29 = v28; // 0x401cbc\n                                bool v30 = false; // 0x401cbc\n                                while (v27 == v28) {\n                                    v24--;\n                                    int64_t v31 = v26 + v21; // 0x401cbc\n                                    int64_t v32 = v25 + v21; // 0x401cbc\n                                    v29 = v27;\n                                    v30 = true;\n                                    if (v24 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v25 = v32;\n                                    v26 = v31;\n                                    v27 = *(char *)v25;\n                                    v28 = *(char *)v26;\n                                    v29 = v28;\n                                    v30 = false;\n                                }\n                                unsigned char v33 = v29;\n                                int64_t v34 = (int64_t)!((v27 < v33 | v30)) - (int64_t)(v27 < v33); // 0x401cc1\n                                if ((int32_t)v34 != 0) {\n                                    // 0x401d72\n                                    function_402990(v23);\n                                    v15 = 3;\n                                    v13 = 3;\n                                    v10 = v12;\n                                } else {\n                                    // 0x401cce\n                                    g46 = 1;\n                                    v13 = v34;\n                                    v10 = v12;\n                                }\n                                goto lab_0x401a00;\n                            } else {\n                                if (v22 != 116) {\n                                    if (v22 != 106) {\n                                        // 0x401b39\n                                        function_4034f0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x401b95\n                                    v16 = (int64_t)g75;\n                                    char v35 = *g75; // 0x401b9c\n                                    if (v35 < 51) {\n                                        // 0x401ba7\n                                        if (*(char *)(v16 + 1) != 0) {\n                                            goto lab_0x401bc6;\n                                        } else {\n                                            int64_t v36 = *(int64_t *)(a2 - 8 + 8 * (int64_t)*(int32_t *)0x60d29c); // 0x401bb4\n                                            if (v36 + 2 == v16) {\n                                                int32_t * v37 = (int32_t *)(4 * (int64_t)(v35 == 50) | v19); // 0x402374\n                                                *v37 = *v37 + 1;\n                                                int64_t v38 = v35 == 50 ? 2 : 1; // 0x402379\n                                                v15 = v38;\n                                                v13 = v38;\n                                                v10 = v12;\n                                                goto lab_0x401a00;\n                                            } else {\n                                                goto lab_0x401bc6;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x401bc6;\n                                    }\n                                } else {\n                                    unsigned char v39 = *g75; // 0x401aa9\n                                    int32_t v40 = 10; // 0x401ab0\n                                    if (v39 != 0) {\n                                        // 0x401d4a\n                                        v40 = v39;\n                                        if (*(char *)((int64_t)g75 + 1) != 0) {\n                                            // 0x401d56\n                                            v40 = 0;\n                                            char * str; // 0x401aa2\n                                            if (strcmp(str, \"\\\\0\") != 0) {\n                                                goto lab_0x402723;\n                                            }\n                                        }\n                                    }\n                                    int32_t v41 = g17; // 0x401abb\n                                    if (v41 > -1 == (v41 != v40)) {\n                                        goto lab_0x402753;\n                                    }\n                                    // 0x401acd\n                                    g17 = v40;\n                                    v13 = 0;\n                                    v10 = v12;\n                                    goto lab_0x401a00;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v22 == 49) {\n                        int64_t v42 = function_402910((int64_t)g75, a2); // 0x401d0f\n                        function_4028c0(&g20, v42);\n                        v13 = v15;\n                        v10 = v12;\n                        goto lab_0x401a00;\n                    } else {\n                        if (v22 > 49) {\n                            if (v22 == 97) {\n                                goto lab_0x401c40;\n                            } else {\n                                if (v22 != 101) {\n                                    if (v22 != 50) {\n                                        // 0x401b39\n                                        function_4034f0(1);\n                                        // UNREACHABLE\n                                    }\n                                    int64_t v43 = function_402910((int64_t)g75, a2); // 0x401ce7\n                                    function_4028c0(&g19, v43);\n                                    v13 = v15;\n                                    v10 = v12;\n                                } else {\n                                    char * str2 = g47; // 0x401af9\n                                    if (str2 != NULL) {\n                                        // 0x401b0c\n                                        if (strcmp(str2, g75) != 0) {\n                                            // 0x402701\n                                            v9 = (int64_t)g75;\n                                            goto lab_0x402701_2;\n                                        }\n                                    }\n                                    // 0x401b1c\n                                    g47 = g75;\n                                    v13 = 0;\n                                    v10 = v12;\n                                }\n                                goto lab_0x401a00;\n                            }\n                        } else {\n                            if (v22 == -130) {\n                                // 0x4025de\n                                function_4034f0(0);\n                                // UNREACHABLE\n                            }\n                            if (v22 != 1) {\n                                if (v22 == -131) {\n                                    // 0x401c03\n                                    function_405e90((int64_t)g32, \"join\", \"GNU coreutils\", (int64_t)g21, \"Mike Haertel\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401b39;\n                            }\n                            // 0x401b5c\n                            function_4038b0((int64_t)g75, &v14, (int64_t *)&v3, &v4, &v2, &v15);\n                            v13 = v15;\n                            v10 = v17;\n                            goto lab_0x401a00;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401d8c:;\n    int64_t v44 = g30; // 0x401d8c\n    v2 = 0;\n    int64_t v45 = (int64_t)\"-a:e:i1:2:j:o:t:v:z\"; // 0x401d9d\n    if (v1 > v44) {\n        int64_t v46 = *(int64_t *)(8 * v44 + a2); // 0x401db3\n        g30 = (int32_t)v44 + 1;\n        function_4038b0(v46, &v14, (int64_t *)&v3, &v4, &v2, &v15);\n        int64_t v47 = g30; // 0x401dd7\n        while (v1 > v47) {\n            // 0x401db0\n            v46 = *(int64_t *)(8 * v47 + a2);\n            g30 = (int32_t)v47 + 1;\n            function_4038b0(v46, &v14, (int64_t *)&v3, &v4, &v2, &v15);\n            v47 = g30;\n        }\n        // 0x401de2\n        v45 = &v3;\n    }\n    int32_t v48 = v4; // 0x401de9\n    int64_t v49 = a2; // 0x401de9\n    int64_t v50 = v1; // 0x401de9\n    int64_t v51; // 0x401940\n    int64_t v52; // 0x401940\n    int64_t v53; // 0x401940\n    int64_t v54; // 0x401940\n    int64_t v55; // bp-104, 0x401940\n    int64_t v56; // bp-112, 0x401940\n    int32_t v57; // bp-120, 0x401940\n    int64_t v58; // bp-72, 0x401940\n    int64_t v59; // bp-80, 0x401940\n    int64_t v60; // bp-88, 0x401940\n    if (v4 != 2) {\n        goto lab_0x402643;\n    } else {\n        // 0x401def\n        if (v3 != 0) {\n            // 0x402338\n            function_4028c0(&g20, 0);\n            function_4028c0(&g19, 0);\n        }\n        int32_t v61; // 0x401940\n        if (v61 != 0) {\n            // 0x402315\n            function_4028c0(&g20, 1);\n            function_4028c0(&g19, 1);\n        }\n        // 0x401e05\n        if (g20 == -1) {\n            // 0x4022f0\n            g20 = 0;\n        }\n        // 0x401e13\n        if (g19 == -1) {\n            // 0x4022e0\n            g19 = 0;\n        }\n        int64_t v62 = g33; // 0x401e3e\n        if (strcmp(g57, \"-\") != 0) {\n            // 0x402355\n            v62 = function_403b40((int64_t)g57, (int64_t *)\"r\");\n        }\n        // 0x401e44\n        v51 = v62;\n        if (v51 == 0) {\n            int64_t v63 = function_405880(0, 3, (int64_t)g57); // 0x402679\n            error(1, *__errno_location(), \"%s\", (char *)v63);\n            v54 = v63;\n            v53 = v1;\n            goto lab_0x40269c;\n        } else {\n            int64_t v64 = g33; // 0x401e6a\n            if (strcmp(g58, \"-\") != 0) {\n                // 0x402300\n                v64 = function_403b40((int64_t)g58, (int64_t *)\"r\");\n            }\n            // 0x401e70\n            v52 = v64;\n            if (v52 == 0) {\n                int64_t v65 = function_405880(0, 3, (int64_t)g58); // 0x4026de\n                error(1, *__errno_location(), \"%s\", (char *)v65);\n                v9 = v51;\n                goto lab_0x402701_2;\n            } else {\n                // 0x401e79\n                if (v51 == v52) {\n                    goto lab_0x402619;\n                } else {\n                    // 0x401e82\n                    function_403b10(v51, 2, v45);\n                    function_403b10(v52, 2, v45);\n                    v57 = 0;\n                    v56 = 0;\n                    v55 = 0;\n                    function_403400(v51, (int64_t *)&v57, 1);\n                    v60 = 0;\n                    v59 = 0;\n                    v58 = 0;\n                    function_403400(v52, &v60, 2);\n                    if (g46 != 0) {\n                        // 0x401f15\n                        g45 = 0;\n                        g44 = 0;\n                    }\n                    // 0x401f39\n                    if (g38 != 0) {\n                        // 0x402266\n                        if (v57 == 0 == v60 == 0) {\n                            goto lab_0x401fea;\n                        } else {\n                            // 0x40228d\n                            function_402e10(&g40, (int64_t)&g40);\n                            g60 = 0;\n                            g61 = 0;\n                            if (v57 != 0) {\n                                // 0x4025be\n                                v57 = 0;\n                                function_403400(v51, (int64_t *)&v57, 1);\n                            }\n                            // 0x4022b4\n                            if (v60 != 0) {\n                                // 0x4022c0\n                                v60 = 0;\n                                function_403400(v52, &v60, 2);\n                            }\n                            goto lab_0x401f50_2;\n                        }\n                    } else {\n                        goto lab_0x401f50_2;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4020f2:\n    // 0x4020f2\n    if ((char)function_403400(v51, (int64_t *)&v57, 1) != 0) {\n        int64_t v66 = *(int64_t *)v58; // 0x4020c8\n        int64_t v67 = *(int64_t *)(8 * (int64_t)v57 - 8 + v55); // 0x4020d0\n        int64_t v68 = *(int64_t *)(v66 + 24); // 0x4020d9\n        int64_t v69 = *(int64_t *)(v67 + 24); // 0x4020dd\n        if ((int32_t)function_402b90(v69, v67 + 40, v68, v66 + 40, g20, g19) != 0) {\n            // 0x402162\n        } else {\n            goto lab_0x4020f2;\n        }\n    } else {\n        // 0x402108\n        v57++;\n    }\n  lab_0x401fea:;\n    // 0x401fea\n    int64_t v70; // 0x401940\n    int64_t v71 = v70;\n    int64_t v72 = 0; // bp-144, 0x401fea\n    char v73; // 0x401940\n    char v74; // 0x401940\n    if (g41 == 2) {\n        goto lab_0x402016;\n    } else {\n        // 0x401ffc\n        if (g48 == 0 || g49 == 0) {\n            if (v71 == 0) {\n                // 0x4024a0\n                goto lab_0x4024a7;\n            } else {\n                // 0x40238e\n                v73 = 1;\n                v74 = g53;\n                if (g53 != 0) {\n                    goto lab_0x402579;\n                } else {\n                    goto lab_0x4023a5;\n                }\n            }\n        } else {\n            goto lab_0x402016;\n        }\n    }\n  lab_0x4025e5_2:\n    // 0x4025e5\n    function_405a00((int64_t)g75);\n    error(1, (int32_t)\"invalid field number: %s\" ^ (int32_t)\"invalid field number: %s\", dcgettext(NULL, \"invalid field number: %s\", 5));\n    int64_t v75 = v1; // 0x402614\n    goto lab_0x402619;\n  lab_0x401a00:\n    // 0x401a00\n    v2 = v13;\n    int32_t v89 = function_4077c0(v6, a2, \"-a:e:i1:2:j:o:t:v:z\", &g3, 0, v10); // 0x401a1b\n    v8 = v89;\n    v11 = v10;\n    if (v89 == -1) {\n        // break -> 0x401d8c\n        goto lab_0x401d8c;\n    }\n    goto lab_0x401a24;\n  lab_0x401c40:;\n    int64_t v90 = function_4063e0((int64_t)g75, 0, 10, &v60, (int64_t *)&g1, v12); // 0x401c59\n    if ((int32_t)v90 != 0) {\n        goto lab_0x4025e5_2;\n    }\n    // 0x401c66\n    if (v60 >= 3) {\n        goto lab_0x4025e5_2;\n    }\n    if (v60 == 1) {\n        // 0x401d3e\n        g53 = 1;\n    } else {\n        // 0x401c83\n        g52 = 1;\n    }\n    goto lab_0x401be9;\n  lab_0x401be9:\n    // 0x401be9\n    v13 = v15;\n    v10 = v12;\n    goto lab_0x401a00;\n  lab_0x401bc6:;\n    int64_t v91 = function_402910(v16, a2); // 0x401bc6\n    function_4028c0(&g20, v91);\n    function_4028c0(&g19, g20);\n    goto lab_0x401be9;\n  lab_0x402643:\n    // 0x402643\n    v54 = v49;\n    v53 = v50;\n    if (v48 == 0) {\n        // 0x402647\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401b39\n        function_4034f0(1);\n        // UNREACHABLE\n    }\n    goto lab_0x40269c;\n  lab_0x40269c:\n    // 0x40269c\n    function_405a00(*(int64_t *)(v54 - 8 + 8 * v53));\n    error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n    // 0x401b39\n    function_4034f0(1);\n    // UNREACHABLE\n  lab_0x402701_2:\n    // 0x402701\n    error(1, (int32_t)\"conflicting empty-field replacement strings\" ^ (int32_t)\"conflicting empty-field replacement strings\", dcgettext(NULL, \"conflicting empty-field replacement strings\", 5));\n  lab_0x402723:\n    // 0x402723\n    function_405a00(v9);\n    error(1, (int32_t)\"multi-character tab %s\" ^ (int32_t)\"multi-character tab %s\", dcgettext(NULL, \"multi-character tab %s\", 5));\n  lab_0x402753:\n    // 0x402753\n    error(1, (int32_t)\"incompatible tabs\" ^ (int32_t)\"incompatible tabs\", dcgettext(NULL, \"incompatible tabs\", 5));\n    goto lab_0x402775;\n  lab_0x402619:;\n    char * format = dcgettext(NULL, \"both files cannot be standard input\", 5); // 0x402625\n    error(1, *__errno_location(), format);\n    v48 = &g79;\n    v49 = (int64_t)format;\n    v50 = v75;\n    goto lab_0x402643;\n  lab_0x402775:;\n    int64_t v76 = function_405880(0, 3, (int64_t)g58); // 0x402783\n    error(1, *__errno_location(), \"%s\", (char *)v76);\n    goto lab_0x4027a6;\n  lab_0x401f50_2:;\n    int32_t v81 = v57;\n    v70 = 0;\n    if (v81 == 0) {\n        goto lab_0x401fea;\n    } else {\n        // 0x401f5e\n        if (v60 == 0) {\n            // 0x401fea\n            v70 = v81;\n            goto lab_0x401fea;\n        } else {\n            while (true) {\n              lab_generated_0:;\n                int64_t v82 = *(int64_t *)v58; // 0x401f7d\n                int64_t v83 = *(int64_t *)v55; // 0x401f85\n                int64_t v84 = *(int64_t *)(v82 + 24); // 0x401f8c\n                int64_t v85 = *(int64_t *)(v83 + 24); // 0x401f90\n                int32_t v86 = function_402b90(v85, v83 + 40, v84, v82 + 40, g20, g19); // 0x401f9d\n                int32_t v87; // 0x401940\n                while (v86 >= 0) {\n                    if (v86 == 0) {\n                        goto lab_0x4020f2;\n                    }\n                    // 0x401fab\n                    if (g52 != 0) {\n                        // 0x402221\n                        function_402e10(&g40, *(int64_t *)v58);\n                    }\n                    // 0x401fb8\n                    v60 = 0;\n                    function_403400(v52, &v60, 2);\n                    g50 = 1;\n                    v70 = 0;\n                    if (v57 == 0) {\n                        // break (via goto) -> 0x401fea\n                        goto lab_0x401fea;\n                    }\n                    // 0x401f5e\n                    v87 = v57;\n                    if (v60 == 0) {\n                        // 0x401fea\n                        v70 = v87;\n                        goto lab_0x401fea;\n                    }\n                    v82 = *(int64_t *)v58;\n                    v83 = *(int64_t *)v55;\n                    v84 = *(int64_t *)(v82 + 24);\n                    v85 = *(int64_t *)(v83 + 24);\n                    v86 = function_402b90(v85, v83 + 40, v84, v82 + 40, g20, g19);\n                }\n                // 0x4021ed\n                if (g53 != 0) {\n                    int64_t v88 = *(int64_t *)v55; // 0x402428\n                    function_402e10((int64_t *)v88, (int64_t)&g40);\n                }\n                // 0x4021fa\n                v57 = 0;\n                function_403400(v51, (int64_t *)&v57, 1);\n                g50 = 1;\n                // 0x401f50\n                v70 = 0;\n                if (v57 == 0) {\n                    // break -> 0x401fea\n                    break;\n                }\n                // 0x401f5e\n                v87 = v57;\n                if (v60 == 0) {\n                    // 0x401fea\n                    v70 = v87;\n                    goto lab_0x401fea;\n                }\n                goto lab_generated_1;\n            }\n            goto lab_0x401fea;\n        }\n    }\n  lab_0x4027a6:;\n    int64_t v77 = function_405880(0, 3, (int64_t)g57); // 0x4027b4\n    error(1, *__errno_location(), \"%s\", (char *)v77);\n    return &g79;\n  lab_0x402016:\n    // 0x402016\n    v74 = 0;\n    int64_t * v78; // 0x401940\n    if (v71 == 0 || g53 == 0) {\n        // 0x402023\n        v78 = NULL;\n        if (g52 != 0) {\n            goto lab_0x4024a7;\n        } else {\n            goto lab_0x402037;\n        }\n    } else {\n        goto lab_0x402579;\n    }\n  lab_0x402579:;\n    int64_t v79 = *(int64_t *)v55; // 0x402583\n    function_402e10((int64_t *)v79, (int64_t)&g40);\n    v73 = v74;\n    goto lab_0x4023a5;\n  lab_0x4024a7:\n    // 0x4024a7\n    v78 = NULL;\n    if (v60 == 0) {\n        goto lab_0x402037;\n    } else {\n        goto lab_0x4024b8;\n    }\n  lab_0x402037:\n    // 0x402037\n    free(v78);\n    function_402b40(&v56, &v55);\n    int64_t v80 = &v58; // 0x402054\n    function_402b40(&v59, &v58);\n    if ((int32_t)function_406810(v51, v80) != 0) {\n        goto lab_0x4027a6;\n    } else {\n        // 0x402072\n        if ((int32_t)function_406810(v52, v80) == 0) {\n            // 0x402082\n            return g48 != 0 ? 1 : (int64_t)g49;\n        }\n        goto lab_0x402775;\n    }\n  lab_0x4023a5:\n    // 0x4023a5\n    if (v60 != 0) {\n        // 0x4023ad\n        g50 = 1;\n    }\n    // 0x4023b4\n    if ((char)function_403040(v51, &v72, 1) != 0) {\n        if (g53 != 0) {\n            // 0x402590\n            function_402e10((int64_t *)v72, (int64_t)&g40);\n            if (g48 != 0) {\n                // 0x4025ac\n                if (g53 == 0) {\n                    // break -> 0x4023ea\n                    break;\n                }\n            }\n        } else {\n            // 0x4023e1\n            if (g48 != 0) {\n                // break -> 0x4023ea\n                break;\n            }\n        }\n        while ((char)function_403040(v51, &v72, 1) != 0) {\n            // 0x4023d4\n            if (g53 != 0) {\n                // 0x402590\n                function_402e10((int64_t *)v72, (int64_t)&g40);\n                if (g48 != 0) {\n                    // 0x4025ac\n                    if (g53 == 0) {\n                        // break -> 0x4023ea\n                        break;\n                    }\n                }\n            } else {\n                // 0x4023e1\n                if (g48 != 0) {\n                    // break -> 0x4023ea\n                    break;\n                }\n            }\n        }\n    }\n    // 0x4023ea\n    if ((g52 || v73) == 0) {\n        goto lab_0x402406;\n    } else {\n        // 0x4023fa\n        if (v60 != 0) {\n            goto lab_0x4024b8;\n        } else {\n            goto lab_0x402406;\n        }\n    }\n  lab_0x4024b8:\n    // 0x4024b8\n    if (g52 != 0) {\n        // 0x402556\n        function_402e10(&g40, *(int64_t *)v58);\n    }\n    // 0x4024c0\n    if (v57 != 0) {\n        // 0x40254a\n        g50 = 1;\n    }\n    // 0x4024d0\n    if ((char)function_403040(v52, &v72, 2) != 0) {\n        if (g52 != 0) {\n            // 0x4024ff\n            function_402e10(&g40, v72);\n            if (g49 != 0) {\n                // 0x402517\n                if (g52 == 0) {\n                    // break -> 0x402406\n                    break;\n                }\n            }\n        } else {\n            // 0x4024f1\n            if (g49 != 0) {\n                // break -> 0x402406\n                break;\n            }\n        }\n        while ((char)function_403040(v52, &v72, 2) != 0) {\n            // 0x4024e8\n            if (g52 != 0) {\n                // 0x4024ff\n                function_402e10(&g40, v72);\n                if (g49 != 0) {\n                    // 0x402517\n                    if (g52 == 0) {\n                        // break -> 0x402406\n                        break;\n                    }\n                }\n            } else {\n                // 0x4024f1\n                if (g49 != 0) {\n                    // break -> 0x402406\n                    break;\n                }\n            }\n        }\n    }\n    goto lab_0x402406;\n  lab_0x402406:\n    // 0x402406\n    v78 = NULL;\n    if (v72 != 0) {\n        // 0x402414\n        function_402ac0(v72);\n        v78 = (int64_t *)v72;\n    }\n    goto lab_0x402037;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4027e0",
            "funcEndAddr": "40280b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4027e0\n    int64_t v1; // 0x4027e0\n    __libc_start_main(0x401940, (int32_t)a4, (char **)&v1, (void (*)())0x408180, (void (*)())0x4081e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40280b",
            "funcStartAddr": "40280b",
            "funcEndAddr": "40282a",
            "decompiledFuncCode": "int64_t function_40280b(void) {\n    // 0x40280b\n    return &g31;\n}\n"
        },
        {
            "funcName": "function_40282a",
            "funcStartAddr": "40282a",
            "funcEndAddr": "402861",
            "decompiledFuncCode": "int64_t function_40282a(void) {\n    // 0x40282a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402861",
            "funcStartAddr": "402861",
            "funcEndAddr": "4028b8",
            "decompiledFuncCode": "int64_t function_402861(void) {\n    // 0x402861\n    if (g36 != 0) {\n        // 0x4028b7\n        int64_t result; // 0x402861\n        return result;\n    }\n    int64_t v1 = g37; // 0x402894\n    int64_t result2; // 0x4028a6\n    if (g37 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x4028a6\n        result2 = function_40280b();\n        g36 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402896\n        v1++;\n    }\n    // 0x40288a\n    g37 = v1;\n    // 0x4028a6\n    result2 = function_40280b();\n    g36 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4028b8",
            "funcStartAddr": "4028b8",
            "funcEndAddr": "4028bd",
            "decompiledFuncCode": "int64_t function_4028b8(void) {\n    // 0x4028b8\n    return function_40282a();\n}\n"
        },
        {
            "funcName": "function_4028c0",
            "funcStartAddr": "4028c0",
            "funcEndAddr": "402910",
            "decompiledFuncCode": "int64_t function_4028c0(int64_t * a1, int64_t a2) {\n    // 0x4028c0\n    int64_t result; // 0x4028c0\n    if (a1 == (int64_t *)-1) {\n        // 0x4028d4\n        *a1 = a2;\n        return result;\n    }\n    if ((int64_t)a1 != a2) {\n        // 0x4028de\n        error(1, (int32_t)\"incompatible join fields %lu, %lu\" ^ (int32_t)\"incompatible join fields %lu, %lu\", dcgettext(NULL, \"incompatible join fields %lu, %lu\", 5));\n        return &g79;\n    }\n    // 0x4028d4\n    *a1 = a2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402910",
            "funcStartAddr": "402910",
            "funcEndAddr": "402990",
            "decompiledFuncCode": "int64_t function_402910(int64_t a1, int64_t a2) {\n    // 0x402910\n    int64_t v1; // bp-16, 0x402910\n    int64_t v2; // 0x402910\n    int64_t v3 = function_4063e0(a1, 0, 10, &v1, (int64_t *)&g1, v2); // 0x40292a\n    int32_t v4 = v3; // 0x40292f\n    if (v4 == 1) {\n        // 0x402950\n        return -2;\n    }\n    char * format; // 0x402974\n    if (v4 != 0) {\n        // 0x40295d\n        function_405a00(a1);\n        format = dcgettext(NULL, \"invalid field number: %s\", 5);\n        error(1, (int32_t)\"invalid field number: %s\" ^ (int32_t)\"invalid field number: %s\", format);\n        return &g79;\n    }\n    // 0x402938\n    if (v1 != 0) {\n        // 0x402942\n        return v1 - 1;\n    }\n    // 0x40295d\n    function_405a00(a1);\n    format = dcgettext(NULL, \"invalid field number: %s\", 5);\n    error(1, (int32_t)\"invalid field number: %s\" ^ (int32_t)\"invalid field number: %s\", format);\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_402990",
            "funcStartAddr": "402990",
            "funcEndAddr": "402ac0",
            "decompiledFuncCode": "int64_t function_402990(int64_t a1) {\n    int64_t v1 = a1;\n    char * str = (char *)v1; // 0x4029eb\n    char * found_byte_pos = strpbrk(str, \", \\t\"); // 0x4029eb\n    int64_t v2 = 0; // 0x4029f3\n    if (found_byte_pos != NULL) {\n        // 0x4029f5\n        *found_byte_pos = 0;\n        v2 = (int64_t)found_byte_pos + 1;\n    }\n    char v3 = *str; // 0x4029fc\n    int64_t v4; // 0x402990\n    int32_t v5; // 0x402990\n    char * format; // 0x402aa4\n    if (v3 == 48) {\n        // 0x4029a0\n        v5 = 0;\n        v4 = 0;\n        if (*(char *)(v1 + 1) != 0) {\n            // break -> 0x402a5d\n            break;\n        }\n    } else {\n        if (v3 > 50) {\n            // 0x402a2d\n            function_405a00(v1);\n            error(1, (int32_t)\"invalid file number in field spec: %s\" ^ (int32_t)\"invalid file number in field spec: %s\", dcgettext(NULL, \"invalid file number in field spec: %s\", 5));\n            goto lab_0x402a5d;\n        }\n        // 0x402a0a\n        if (*(char *)(v1 + 1) != 46) {\n            // 0x402a8d\n            function_405a00(v1);\n            format = dcgettext(NULL, \"invalid field specifier: %s\", 5);\n            error(1, (int32_t)\"invalid field specifier: %s\" ^ (int32_t)\"invalid field specifier: %s\", format);\n            return &g79;\n        }\n        // 0x402a10\n        v5 = (int32_t)v3 - 48;\n        v4 = function_402910(v1 + 2, (int64_t)\", \\t\");\n    }\n    int64_t result = function_405fd0(24); // 0x4029b3\n    *(int32_t *)result = v5;\n    *(int64_t *)(result + 8) = v4;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)&g18 = result;\n    g20 = result;\n    while (v2 != 0) {\n        // 0x4029e0\n        v1 = v2;\n        str = (char *)v1;\n        found_byte_pos = strpbrk(str, \", \\t\");\n        v2 = 0;\n        if (found_byte_pos != NULL) {\n            // 0x4029f5\n            *found_byte_pos = 0;\n            v2 = (int64_t)found_byte_pos + 1;\n        }\n        // 0x4029fc\n        v3 = *str;\n        if (v3 == 48) {\n            // 0x4029a0\n            v5 = 0;\n            v4 = 0;\n            if (*(char *)(v1 + 1) != 0) {\n                // break -> 0x402a5d\n                break;\n            }\n        } else {\n            if (v3 > 50) {\n                // 0x402a2d\n                function_405a00(v1);\n                error(1, (int32_t)\"invalid file number in field spec: %s\" ^ (int32_t)\"invalid file number in field spec: %s\", dcgettext(NULL, \"invalid file number in field spec: %s\", 5));\n                goto lab_0x402a5d;\n            }\n            // 0x402a0a\n            if (*(char *)(v1 + 1) != 46) {\n                // 0x402a8d\n                function_405a00(v1);\n                format = dcgettext(NULL, \"invalid field specifier: %s\", 5);\n                error(1, (int32_t)\"invalid field specifier: %s\" ^ (int32_t)\"invalid field specifier: %s\", format);\n                return &g79;\n            }\n            // 0x402a10\n            v5 = (int32_t)v3 - 48;\n            v4 = function_402910(v1 + 2, (int64_t)\", \\t\");\n        }\n        // 0x4029ae\n        result = function_405fd0(24);\n        *(int32_t *)result = v5;\n        *(int64_t *)(result + 8) = v4;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)&g18 = result;\n        g20 = result;\n    }\n    // 0x402a28\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ac0",
            "funcStartAddr": "402ac0",
            "funcEndAddr": "402ae8",
            "decompiledFuncCode": "int64_t function_402ac0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 40); // 0x402ac4\n    free((int64_t *)*v1);\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x402ad5\n    free((int64_t *)*v2);\n    *v2 = 0;\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_402af0",
            "funcStartAddr": "402af0",
            "funcEndAddr": "402b32",
            "decompiledFuncCode": "int64_t function_402af0(void) {\n    // 0x402af0\n    int64_t result; // 0x402af0\n    if (g55 != 0) {\n        // 0x402afd\n        function_402ac0(g55);\n        free((int64_t *)g55);\n        result = &g79;\n    }\n    // 0x402b0d\n    if (g56 == 0) {\n        // 0x402b30\n        return result;\n    }\n    // 0x402b19\n    function_402ac0(g56);\n    free((int64_t *)g56);\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_402b40",
            "funcStartAddr": "402b40",
            "funcEndAddr": "402b8e",
            "decompiledFuncCode": "int64_t function_402b40(int64_t * a1, int64_t * a2) {\n    int64_t v1 = 0; // 0x402b50\n    if (a1 == NULL) {\n        // 0x402b81\n        free(a2);\n        return &g79;\n    }\n    int64_t * v2 = (int64_t *)(8 * v1 + (int64_t)a2); // 0x402b5c\n    int64_t v3 = *v2; // 0x402b5c\n    int64_t v4 = 0; // 0x402b63\n    if (v3 != 0) {\n        // 0x402b65\n        function_402ac0(v3);\n        v4 = *v2;\n    }\n    // 0x402b72\n    free((int64_t *)v4);\n    v1++;\n    while (v1 < v4) {\n        // 0x402b58\n        v2 = (int64_t *)(8 * v1 + (int64_t)a2);\n        v3 = *v2;\n        v4 = 0;\n        if (v3 != 0) {\n            // 0x402b65\n            function_402ac0(v3);\n            v4 = *v2;\n        }\n        // 0x402b72\n        free((int64_t *)v4);\n        v1++;\n    }\n    // 0x402b81\n    free(a2);\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_402b90",
            "funcStartAddr": "402b90",
            "funcEndAddr": "402c88",
            "decompiledFuncCode": "int64_t function_402b90(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6) {\n    if (a5 >= a1) {\n        // 0x402bc0\n        if (a6 >= a3) {\n            // 0x402bb6\n            return 0;\n        }\n        // 0x402bd0\n        return *(int64_t *)(a4 + 8 + 16 * a6) != 0 ? 0xffffffff : 0;\n    }\n    int64_t v1 = 16 * a5 + a2; // 0x402b9f\n    uint64_t v2 = *(int64_t *)(v1 + 8); // 0x402ba5\n    if (a6 >= a3) {\n        // 0x402bb6\n        return v2 != 0;\n    }\n    int64_t str = *(int64_t *)v1; // 0x402ba2\n    int64_t v3 = 16 * a6 + a4; // 0x402bec\n    int64_t str2 = *(int64_t *)v3; // 0x402bef\n    uint64_t v4 = *(int64_t *)(v3 + 8); // 0x402bf2\n    if (v2 == 0) {\n        // 0x402bd0\n        return v4 != 0 ? 0xffffffff : 0;\n    }\n    // 0x402bfb\n    if (v4 == 0) {\n        // 0x402bb6\n        return 1;\n    }\n    // 0x402c00\n    int64_t memcmp_rc; // 0x402b90\n    if (g39 == 0) {\n        // 0x402c40\n        if (g54 != 0) {\n            // 0x402c60\n            return function_406320(str, v2, str2, v4);\n        }\n        int64_t n = v2 > v4 ? v4 : v2; // 0x402c4f\n        memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n);\n    } else {\n        // 0x402c09\n        memcmp_rc = function_403d90(str, str2, v2 > v4 ? v4 : v2, a4);\n    }\n    // 0x402c18\n    if ((int32_t)memcmp_rc != 0) {\n        // 0x402bb6\n        return memcmp_rc;\n    }\n    // 0x402c1c\n    if (v2 < v4) {\n        // 0x402bb6\n        return 0xffffffff;\n    }\n    // 0x402c21\n    return v2 != v4;\n}\n"
        },
        {
            "funcName": "function_402c90",
            "funcStartAddr": "402c90",
            "funcEndAddr": "402ce1",
            "decompiledFuncCode": "int64_t function_402c90(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x402c90\n    if (a1 < a2) {\n        int64_t v1 = 16 * a1 + a3; // 0x402c99\n        int64_t n = *(int64_t *)(v1 + 8); // 0x402c9c\n        if (n != 0) {\n            int64_t data = *(int64_t *)v1; // 0x402cac\n            return fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g32);\n        }\n    }\n    // 0x402cc0\n    if (g47 == NULL) {\n        // 0x402ce0\n        int64_t result; // 0x402c90\n        return result;\n    }\n    // 0x402ccc\n    return fputs_unlocked(g47, g32);\n}\n"
        },
        {
            "funcName": "function_402cf0",
            "funcStartAddr": "402cf0",
            "funcEndAddr": "402e0a",
            "decompiledFuncCode": "int64_t function_402cf0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a3; // 0x402d0f\n    if (g46 == 0) {\n        // 0x402d11\n        v1 = *(int64_t *)(a1 + 24);\n    }\n    uint64_t v2 = v1;\n    int32_t v3 = g17; // 0x402d15\n    uint32_t v4 = v3 < 0 ? 32 : v3; // 0x402d24\n    int64_t v5 = v2 > a2 ? a2 : v2; // 0x402d39\n    uint32_t v6 = v4 % 256;\n    int64_t v7 = a1 + 40; // 0x402d40\n    int64_t result = v6; // 0x402d4d\n    if (v5 != 0) {\n        int64_t v8 = 0;\n        int64_t v9 = (int64_t)g32; // 0x402d50\n        int64_t * v10 = (int64_t *)(v9 + 40); // 0x402d57\n        uint64_t v11 = *v10; // 0x402d57\n        if (v11 >= *(int64_t *)(v9 + 48)) {\n            // 0x402df0\n            __overflow(g32, v6);\n        } else {\n            // 0x402d65\n            *v10 = v11 + 1;\n            *(char *)v11 = (char)v4;\n        }\n        int64_t v12 = v8 + 1; // 0x402d7a\n        result = function_402c90(v8, *(int64_t *)(a1 + 24), v7);\n        while (v12 != v5) {\n            // 0x402d50\n            v8 = v12;\n            v9 = (int64_t)g32;\n            v10 = (int64_t *)(v9 + 40);\n            v11 = *v10;\n            if (v11 >= *(int64_t *)(v9 + 48)) {\n                // 0x402df0\n                __overflow(g32, v6);\n            } else {\n                // 0x402d65\n                *v10 = v11 + 1;\n                *(char *)v11 = (char)v4;\n            }\n            // 0x402d70\n            v12 = v8 + 1;\n            result = function_402c90(v8, *(int64_t *)(a1 + 24), v7);\n        }\n    }\n    int64_t v13 = a2 + 1; // 0x402d98\n    if (v2 <= v13) {\n        // 0x402ddc\n        return result;\n    }\n    int64_t v14 = (int64_t)g32; // 0x402da8\n    int64_t * v15 = (int64_t *)(v14 + 40); // 0x402daf\n    uint64_t v16 = *v15; // 0x402daf\n    if (v16 >= *(int64_t *)(v14 + 48)) {\n        // 0x402e00\n        __overflow(g32, v6);\n    } else {\n        // 0x402db9\n        *v15 = v16 + 1;\n        *(char *)v16 = (char)v4;\n    }\n    int64_t v17 = v13 + 1; // 0x402dce\n    int64_t result2 = function_402c90(v13, *(int64_t *)(a1 + 24), v7); // 0x402dda\n    while (v2 != v17) {\n        int64_t v18 = v17;\n        v14 = (int64_t)g32;\n        v15 = (int64_t *)(v14 + 40);\n        v16 = *v15;\n        if (v16 >= *(int64_t *)(v14 + 48)) {\n            // 0x402e00\n            __overflow(g32, v6);\n        } else {\n            // 0x402db9\n            *v15 = v16 + 1;\n            *(char *)v16 = (char)v4;\n        }\n        // 0x402dc4\n        v17 = v18 + 1;\n        result2 = function_402c90(v18, *(int64_t *)(a1 + 24), v7);\n    }\n    // 0x402ddc\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402e10",
            "funcStartAddr": "402e10",
            "funcEndAddr": "402f77",
            "decompiledFuncCode": "int64_t function_402e10(int64_t * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    if (g43 != NULL) {\n        int32_t v2 = g17; // 0x402e25\n        uint32_t v3 = v2 < 0 ? 32 : v2; // 0x402e36\n        int64_t v4 = (int64_t)g43;\n        int32_t v5 = *(int32_t *)v4; // 0x402e99\n        int64_t v6 = a1 == &g40 ? a2 : v1; // 0x402e9d\n        int64_t * v7 = a1 == &g40 ? &g19 : &g20; // 0x402e9d\n        if (v5 != 0) {\n            // 0x402e9f\n            v6 = v5 == 1 ? v1 : a2;\n            v7 = (int64_t *)(v4 + 8);\n        }\n        int64_t v8 = v6;\n        function_402c90(*v7, *(int64_t *)(v8 + 24), v8 + 40);\n        int64_t v9 = *(int64_t *)(v4 + 16); // 0x402e6c\n        while (v9 != 0) {\n            int64_t v10 = (int64_t)g32; // 0x402e79\n            int64_t * v11 = (int64_t *)(v10 + 40); // 0x402e80\n            uint64_t v12 = *v11; // 0x402e80\n            if (v12 >= *(int64_t *)(v10 + 48)) {\n                // 0x402f40\n                __overflow(g32, v3 % 256);\n            } else {\n                // 0x402e8e\n                *v11 = v12 + 1;\n                *(char *)v12 = (char)v3;\n            }\n            v4 = v9;\n            v5 = *(int32_t *)v4;\n            v6 = a1 == &g40 ? a2 : v1;\n            v7 = a1 == &g40 ? &g19 : &g20;\n            if (v5 != 0) {\n                // 0x402e9f\n                v6 = v5 == 1 ? v1 : a2;\n                v7 = (int64_t *)(v4 + 8);\n            }\n            // 0x402e5f\n            v8 = v6;\n            function_402c90(*v7, *(int64_t *)(v8 + 24), v8 + 40);\n            v9 = *(int64_t *)(v4 + 16);\n        }\n    } else {\n        int64_t v13 = a1 == &g40 ? a2 : v1;\n        int64_t v14 = a1 == &g40 ? g19 : g20;\n        function_402c90(v14, *(int64_t *)(v13 + 24), v13 + 40);\n        function_402cf0(v1, g20, g45);\n        function_402cf0(a2, g19, g44);\n    }\n    int64_t v15 = (int64_t)g32; // 0x402f00\n    unsigned char v16 = *(char *)&g16; // 0x402f07\n    int64_t * v17 = (int64_t *)(v15 + 40); // 0x402f0e\n    uint64_t result = *v17; // 0x402f0e\n    if (result >= *(int64_t *)(v15 + 48)) {\n        // 0x402f50\n        return __overflow(g32, (int32_t)v16);\n    }\n    // 0x402f18\n    *v17 = result + 1;\n    *(char *)result = v16;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f80",
            "funcStartAddr": "402f80",
            "funcEndAddr": "403034",
            "decompiledFuncCode": "int64_t function_402f80(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 24); // 0x402f8d\n    uint64_t v2 = *v1; // 0x402f8d\n    int64_t * v3 = (int64_t *)(a1 + 32); // 0x402f91\n    uint64_t v4 = *v3; // 0x402f91\n    int64_t * v5 = (int64_t *)(a1 + 40); // 0x402f95\n    int64_t v6 = *v5; // 0x402f95\n    int64_t v7 = v6; // 0x402f9c\n    int64_t v8 = v2; // 0x402f9c\n    if (v2 >= v4) {\n        int64_t v9; // 0x402f80\n        int64_t v10; // 0x402f80\n        if (v6 == 0) {\n            // 0x403000\n            v10 = 128;\n            v9 = 8;\n            if (v4 != 0) {\n                int64_t v11 = 16 * v4; // 0x403012\n                v10 = v11;\n                v9 = v4;\n                if (v11 > -1 != v4 < 0x1000000000000000) {\n                    // 0x403020\n                    function_406220(v4);\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            if (v4 >= 0x555555555555555) {\n                // 0x403020\n                function_406220(v4);\n                // UNREACHABLE\n            }\n            int64_t v12 = v4 + 1 + v4 / 2; // 0x402fda\n            v10 = 16 * v12;\n            v9 = v12;\n        }\n        // 0x402fe6\n        *v3 = v9;\n        v7 = function_406030(v6, v10);\n        v8 = *v1;\n        *v5 = v7;\n    }\n    int64_t result = 16 * v8 + v7; // 0x402fa9\n    *(int64_t *)result = a2;\n    *(int64_t *)(result + 8) = a3;\n    *v1 = v8 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403040",
            "funcStartAddr": "403040",
            "funcEndAddr": "403400",
            "decompiledFuncCode": "int64_t function_403040(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = 0x100000000 * a3 - 0x100000000;\n    int64_t v3 = v2 >> 29; // 0x403061\n    int64_t * v4 = (int64_t *)(v3 + (int64_t)&g60); // 0x403061\n    int64_t v5; // 0x403040\n    if (*v4 == v1) {\n        int64_t * v6 = (int64_t *)(v3 + (int64_t)&g55); // 0x403260\n        int64_t v7 = *v6; // 0x403260\n        *v6 = v1;\n        *a2 = v7;\n        v5 = v7;\n        if (v7 != 0) {\n            goto lab_0x403078;\n        } else {\n            goto lab_0x40327f;\n        }\n    } else {\n        // 0x40306f\n        v5 = v1;\n        if (a2 == NULL) {\n            goto lab_0x40327f;\n        } else {\n            goto lab_0x403078;\n        }\n    }\n  lab_0x403121:;\n    int64_t v8 = *v4; // 0x403121\n    int64_t v9; // 0x403040\n    if (v8 == 0 || g41 == 2 || g41 != 1 == g50 == 0) {\n        // 0x403220\n        *v4 = v9;\n        // 0x40322d\n        return 1;\n    }\n    char * v10 = (char *)((v2 >> 32) + 0x60d378); // 0x403153\n    if (*v10 != 0) {\n        // 0x403220\n        *v4 = v9;\n        // 0x40322d\n        return 1;\n    }\n    int64_t v11 = *(int64_t *)(v9 + 24); // 0x403166\n    int64_t v12 = *(int64_t *)(v8 + 24); // 0x40316a\n    int64_t v13 = (int32_t)a3 != 1 ? g19 : g20; // 0x403179\n    if ((int32_t)function_402b90(v12, v8 + 40, v11, v9 + 40, v13, v13) >= 1) {\n        // 0x4031c3\n        error((int32_t)(g41 == 1), (int32_t)\"%s:%lu: is not sorted: %.*s\" ^ (int32_t)\"%s:%lu: is not sorted: %.*s\", dcgettext(NULL, \"%s:%lu: is not sorted: %.*s\", 5));\n        *v10 = 1;\n    }\n    // 0x403220\n    *v4 = v9;\n    // 0x40322d\n    return 1;\n  lab_0x403116:;\n    // 0x403116\n    int64_t v14; // 0x403040\n    int64_t v15; // 0x403040\n    function_402f80(v9, v14, v15);\n    goto lab_0x403121;\n  lab_0x403078:\n    // 0x403078\n    *(int64_t *)(v5 + 24) = 0;\n    int64_t v16 = v5; // 0x403078\n    goto lab_0x403080;\n  lab_0x40327f:;\n    int64_t v55 = function_4061a0(1, 48); // 0x403289\n    *a2 = v55;\n    v16 = v55;\n    goto lab_0x403080;\n  lab_0x403080:\n    // 0x403080\n    v9 = v16;\n    if (function_403c50(v9, a1, *(char *)&g16) == 0) {\n        if ((v9 & 32) != 0) {\n            // 0x4033d0\n            error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n            return &g79;\n        }\n        // 0x40324b\n        if (v9 != 0) {\n            // 0x403252\n            function_402ac0(v9);\n        }\n        // 0x40322d\n        return 0;\n    }\n    int64_t v17 = *(int64_t *)(v9 + 8); // 0x40309b\n    int64_t v18 = *(int64_t *)(v9 + 16); // 0x40309f\n    int64_t * v19 = (int64_t *)(v3 + (int64_t)&g59); // 0x4030a3\n    *v19 = *v19 + 1;\n    if (v17 == 1) {\n        goto lab_0x403121;\n    } else {\n        int64_t v20 = v17 - 1; // 0x4030ac\n        int64_t v21 = v18 + v20; // 0x4030b0\n        int32_t v22 = g17; // 0x4030b9\n        if (v22 > -1 == (v22 != 10)) {\n            int64_t v23 = function_4078c0(v18, v22, v20); // 0x403109\n            v15 = v20;\n            v14 = v18;\n            if (v23 != 0) {\n                int64_t v24; // 0x403040\n                int64_t v25 = v24;\n                int64_t v26; // 0x403040\n                int64_t v27 = v26;\n                function_402f80(v9, v25, v27 - v25);\n                int32_t v28 = g17; // 0x4030f3\n                int64_t v29 = v27 + 1; // 0x4030f9\n                int64_t v30 = v21 - v29; // 0x403103\n                int64_t v31 = function_4078c0(v29, v28, v30); // 0x403109\n                v26 = v31;\n                v24 = v29;\n                v15 = v30;\n                v14 = v29;\n                while (v31 != 0) {\n                    // 0x4030d8\n                    v25 = v24;\n                    v27 = v26;\n                    function_402f80(v9, v25, v27 - v25);\n                    v28 = g17;\n                    v29 = v27 + 1;\n                    v30 = v21 - v29;\n                    v31 = function_4078c0(v29, v28, v30);\n                    v26 = v31;\n                    v24 = v29;\n                    v15 = v30;\n                    v14 = v29;\n                }\n            }\n        } else {\n            // 0x4032a0\n            v15 = v20;\n            v14 = v18;\n            if (v22 < 0) {\n                int16_t ** v32 = __ctype_b_loc(); // 0x4032a8\n                int64_t v33 = (int64_t)*v32; // 0x4032b2\n                int64_t v34 = v18;\n                unsigned char v35 = *(char *)v34; // 0x4032b8\n                int64_t v36 = v34 + 1; // 0x4032bb\n                while (v35 == 10 | *(char *)(2 * (int64_t)v35 + v33) % 2 != 0) {\n                    // 0x403370\n                    if (v21 == v36) {\n                        goto lab_0x403121;\n                    }\n                    v34 = v36;\n                    v35 = *(char *)v34;\n                    v36 = v34 + 1;\n                }\n                // 0x4032d3\n                v15 = 1;\n                v14 = v34;\n                if (v21 != v36) {\n                    int64_t v37 = v33;\n                    int64_t v38 = v34;\n                    unsigned char v39 = *(char *)(v38 + 1); // 0x4032df\n                    int64_t v40 = v36; // 0x4032e7\n                    int64_t v41 = v36; // 0x4032e7\n                    int64_t v42 = 1; // 0x4032e7\n                    int64_t v43; // 0x4032f7\n                    unsigned char v44; // 0x403304\n                    if (v39 != 10 && *(char *)(2 * (int64_t)v39 + v37) % 2 == 0) {\n                        v43 = v40 + 1;\n                        if (v21 == v43) {\n                            // 0x4033b0\n                            v15 = v21 - v38;\n                            v14 = v38;\n                            goto lab_0x403116;\n                        }\n                        // 0x403304\n                        v44 = *(char *)v43;\n                        v40 = v43;\n                        while (v44 != 10 == *(char *)(2 * (int64_t)v44 + v37) % 2 == 0) {\n                            // 0x4032f7\n                            v43 = v40 + 1;\n                            if (v21 == v43) {\n                                // 0x4033b0\n                                v15 = v21 - v38;\n                                v14 = v38;\n                                goto lab_0x403116;\n                            }\n                            // 0x403304\n                            v44 = *(char *)v43;\n                            v40 = v43;\n                        }\n                        // 0x403314\n                        v41 = v43;\n                        v42 = v43 - v38;\n                    }\n                    int64_t v45 = v41 + 1; // 0x403320\n                    function_402f80(v9, v38, v42);\n                    v15 = 0;\n                    v14 = v21;\n                    while (v21 != v45) {\n                        unsigned char v46 = *(char *)v45; // 0x403333\n                        int64_t v47 = (int64_t)*v32;\n                        int64_t v48 = v45; // 0x403342\n                        int64_t v49 = v45; // 0x403342\n                        if (v46 != 10 != (*(char *)(2 * (int64_t)v46 + v47) % 2 == 0)) {\n                            int64_t v50 = v48 + 1; // 0x403348\n                            v15 = 0;\n                            v14 = v21;\n                            if (v21 == v50) {\n                                // break (via goto) -> 0x403116\n                                goto lab_0x403116;\n                            }\n                            unsigned char v51 = *(char *)v50; // 0x403351\n                            v48 = v50;\n                            v49 = v50;\n                            while (v51 == 10 | *(char *)(2 * (int64_t)v51 + v47) % 2 != 0) {\n                                // 0x403348\n                                v50 = v48 + 1;\n                                v15 = 0;\n                                v14 = v21;\n                                if (v21 == v50) {\n                                    // break (via goto) -> 0x403116\n                                    goto lab_0x403116;\n                                }\n                                // 0x403351\n                                v51 = *(char *)v50;\n                                v48 = v50;\n                                v49 = v50;\n                            }\n                        }\n                        int64_t v52 = v49;\n                        int64_t v53 = v52 + 1; // 0x403361\n                        v15 = 1;\n                        v14 = v52;\n                        int64_t v54 = v47; // 0x4032d9\n                        if (v21 == v53) {\n                            // break -> 0x403116\n                            break;\n                        }\n                        v37 = v54;\n                        v38 = v52;\n                        v39 = *(char *)(v38 + 1);\n                        v40 = v53;\n                        v41 = v53;\n                        v42 = 1;\n                        if (v39 != 10 && *(char *)(2 * (int64_t)v39 + v37) % 2 == 0) {\n                            v43 = v40 + 1;\n                            if (v21 == v43) {\n                                // 0x4033b0\n                                v15 = v21 - v38;\n                                v14 = v38;\n                                goto lab_0x403116;\n                            }\n                            // 0x403304\n                            v44 = *(char *)v43;\n                            v40 = v43;\n                            while (v44 != 10 == *(char *)(2 * (int64_t)v44 + v37) % 2 == 0) {\n                                // 0x4032f7\n                                v43 = v40 + 1;\n                                if (v21 == v43) {\n                                    // 0x4033b0\n                                    v15 = v21 - v38;\n                                    v14 = v38;\n                                    goto lab_0x403116;\n                                }\n                                // 0x403304\n                                v44 = *(char *)v43;\n                                v40 = v43;\n                            }\n                            // 0x403314\n                            v41 = v43;\n                            v42 = v43 - v38;\n                        }\n                        // 0x40331a\n                        v45 = v41 + 1;\n                        function_402f80(v9, v38, v42);\n                        v15 = 0;\n                        v14 = v21;\n                    }\n                }\n            }\n        }\n        goto lab_0x403116;\n    }\n}\n"
        },
        {
            "funcName": "function_403400",
            "funcStartAddr": "403400",
            "funcEndAddr": "4034ef",
            "decompiledFuncCode": "int64_t function_403400(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40340f\n    int64_t * v3 = (int64_t *)(v1 + 16); // 0x403413\n    int64_t v4 = *v3; // 0x403413\n    int64_t v5 = v4; // 0x40341a\n    int64_t v6 = a3; // 0x40341a\n    int64_t v7 = v1; // 0x40341a\n    if (*v2 == v1) {\n        int64_t v8; // 0x403400\n        int64_t v9; // 0x403400\n        if (v4 == 0) {\n            // 0x4034b0\n            v8 = 16;\n            v9 = 128;\n            if (a2 != NULL) {\n                int64_t v10 = 8 * v1; // 0x4034c3\n                v8 = v1;\n                v9 = v10;\n                if (v10 > -1 != a2 < (int64_t *)0x2000000000000000) {\n                    // 0x4034d2\n                    function_406220((int64_t)(a2 >= (int64_t *)0x2000000000000000));\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            // 0x403445\n            if (a2 >= (int64_t *)0xaaaaaaaaaaaaaaa) {\n                // 0x4034d2\n                function_406220(a1);\n                // UNREACHABLE\n            }\n            int64_t v11 = v1 + 1 + v1 / 2; // 0x40345a\n            v8 = v11;\n            v9 = 8 * v11;\n        }\n        // 0x403467\n        *v2 = v8;\n        int64_t v12 = function_406030(v4, v9); // 0x403472\n        uint64_t v13 = *v2; // 0x40347a\n        *v3 = v12;\n        int64_t v14 = a3 & 0xffffffff; // 0x403482\n        v5 = v12;\n        v6 = v14;\n        v7 = v9;\n        if (v9 < v13) {\n            int64_t v15 = v12 + 8 * v9; // 0x403493\n            *(int64_t *)v15 = 0;\n            v15 += 8;\n            v5 = v12;\n            v6 = v14;\n            v7 = v9;\n            while (8 * v13 + v12 != v15) {\n                // 0x403498\n                *(int64_t *)v15 = 0;\n                v15 += 8;\n                v5 = v12;\n                v6 = v14;\n                v7 = v9;\n            }\n        }\n    }\n    int64_t v16 = 8 * v7 + v5; // 0x40341c\n    int64_t result = function_403040(a1, (int64_t *)v16, v6); // 0x403423\n    if ((char)result != 0) {\n        // 0x40342c\n        *a2 = v16 + 1;\n    }\n    // 0x403430\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "4038ad",
            "decompiledFuncCode": "int64_t function_4034f0(int64_t a1) {\n    int32_t status = a1; // 0x403506\n    if (status != 0) {\n        // 0x40350a\n        __fprintf_chk(g35, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40352f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403536\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE1 FILE2\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"For each pair of input lines with identical join fields, write a line to\\nstandard output.  The default join field is the first, delimited by blanks.\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"\\nWhen FILE1 or FILE2 (not both) is -, read standard input.\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -a FILENUM        also print unpairable lines from file FILENUM, where\\n                      FILENUM is 1 or 2, corresponding to FILE1 or FILE2\\n  -e EMPTY          replace missing input fields with EMPTY\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"  -i, --ignore-case  ignore differences in case when comparing fields\\n  -j FIELD          equivalent to '-1 FIELD -2 FIELD'\\n  -o FORMAT         obey FORMAT while constructing output line\\n  -t CHAR           use CHAR as input and output field separator\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"  -v FILENUM        like -a FILENUM, but suppress joined output lines\\n  -1 FIELD          join on this FIELD of file 1\\n  -2 FIELD          join on this FIELD of file 2\\n  --check-order     check that the input is correctly sorted, even\\n                      if all input lines are pairable\\n  --nocheck-order   do not check that the input is correctly sorted\\n  --header          treat the first line in each file as field headers,\\n                      print them without trying to pair them\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated     line delimiter is NUL, not newline\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g32);\n    fputs_unlocked(dcgettext(NULL, \"\\nUnless -t CHAR is given, leading blanks separate fields and are ignored,\\nelse fields are separated by CHAR.  Any FIELD is a field number counted\\nfrom 1.  FORMAT is one or more comma or blank separated specifications,\\neach being 'FILENUM.FIELD' or '0'.  Default FORMAT outputs the join field,\\nthe remaining fields from FILE1, the remaining fields from FILE2, all\\nseparated by CHAR.  If FORMAT is the keyword 'auto', then the first\\nline of each file determines the number of fields output for each line.\\n\\nImportant: FILE1 and FILE2 must be sorted on the join fields.\\nE.g., use \\\"sort -k 1b,1\\\" if 'join' has no options,\\nor use \\\"join -t ''\\\" if 'sort' has no options.\\nNote, comparisons honor the rules specified by 'LC_COLLATE'.\\nIf the input is not sorted and some lines cannot be joined, a\\nwarning message will be given.\\n\", 5), g32);\n    int64_t v1 = &g2; // bp-136, 0x40368f\n    bool v2; // 0x4034f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403710\n    int64_t v6 = *(int64_t *)v5; // 0x403714\n    int64_t v7 = 5; // 0x40371a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"join\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403726\n        char v11 = *(char *)v9; // 0x403726\n        char v12 = v11; // 0x403726\n        bool v13 = false; // 0x403726\n        while (v10 == v11) {\n            // 0x40371c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403726\n            int64_t v15 = v8 + v3; // 0x403726\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403732\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x403732\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403844;\n        } else {\n            // 0x40382e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403883\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403794;\n            } else {\n                goto lab_0x403844;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403794;\n        } else {\n            // 0x40377a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403883\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403794;\n            } else {\n                goto lab_0x403794;\n            }\n        }\n    }\n  lab_0x403844:\n    // 0x403844\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4037d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40352f\n    exit(status);\n    // UNREACHABLE\n  lab_0x403794:\n    // 0x403794\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4037d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40352f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "403a3c",
            "decompiledFuncCode": "int64_t function_4038b0(int64_t a1, int64_t * a2, int64_t * a3, int32_t * a4, int32_t * a5, int32_t * a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3; // 0x4038b0\n    int32_t v4 = v3;\n    int64_t v5; // 0x4038b0\n    int64_t result; // 0x4038b0\n    int32_t v6; // 0x4038b0\n    if (v4 == 2) {\n        int64_t v7 = (int64_t)a3;\n        int64_t v8 = (int32_t)v2 == 0; // 0x403918\n        int64_t v9 = *(int64_t *)(8 * v8 + (int64_t)&g57); // 0x40391b\n        int32_t v10 = *(int32_t *)(4 * v8 + v2); // 0x403923\n        if (v10 == 1) {\n            // 0x403a10\n            *(int32_t *)a3 = (int32_t)v7 - 1;\n            int64_t v11 = function_402910(v9, v2); // 0x403a1c\n            function_4028c0(&g20, v11);\n        } else {\n            if (v10 > 1) {\n                if (v10 == 2) {\n                    int32_t * v12 = (int32_t *)(v7 + 4); // 0x4039e0\n                    *v12 = *v12 - 1;\n                    int64_t v13 = function_402910(v9, v2); // 0x4039ed\n                    function_4028c0(&g19, v13);\n                } else {\n                    if (v10 == 3) {\n                        // 0x40393f\n                        function_402990(v9);\n                    }\n                }\n            } else {\n                if (v10 == 0) {\n                    // 0x403994\n                    function_4057b0(4, a1);\n                    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n                    function_4034f0(1);\n                    // UNREACHABLE\n                }\n            }\n        }\n        // 0x403960\n        v5 = 4;\n        result = 8;\n        v6 = 2;\n        if ((int32_t)v2 != 0) {\n            // 0x403965\n            *(int32_t *)a2 = *(int32_t *)(v2 + 4);\n            *(int64_t *)&g57 = (int64_t)g58;\n            v5 = 4;\n            result = 8;\n            v6 = 2;\n        }\n    } else {\n        int64_t v14 = 0x100000000 * v3; // 0x4038c5\n        v5 = v14 >> 30;\n        result = v14 >> 29;\n        v6 = v4 + 1;\n    }\n    // 0x4038de\n    *(int32_t *)(v5 + v2) = *(int32_t *)&v1;\n    *(int64_t *)(result + (int64_t)&g57) = a1;\n    *a4 = v6;\n    if (*(int32_t *)&v1 == 3) {\n        // 0x4038f6\n        *a6 = 3;\n    }\n    // 0x4038fd\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403a48",
            "decompiledFuncCode": "int64_t function_403a40(int64_t a1) {\n    // 0x403a40\n    g63 = a1;\n    int64_t result; // 0x403a40\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403a58",
            "decompiledFuncCode": "int64_t function_403a50(int64_t a1) {\n    // 0x403a50\n    g62 = a1;\n    int64_t result; // 0x403a50\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a60",
            "funcStartAddr": "403a60",
            "funcEndAddr": "403afe",
            "decompiledFuncCode": "int64_t function_403a60(void) {\n    // 0x403a60\n    int32_t * err_num; // 0x403a76\n    if ((int32_t)function_4079d0((int64_t)g32) == 0) {\n        goto lab_0x403a8c;\n    } else {\n        // 0x403a76\n        err_num = __errno_location();\n        if (g62 == 0) {\n            goto lab_0x403aa3;\n        } else {\n            // 0x403a87\n            if (*err_num != 32) {\n                goto lab_0x403aa3;\n            } else {\n                goto lab_0x403a8c;\n            }\n        }\n    }\n  lab_0x403a8c:;\n    int64_t result = function_4079d0((int64_t)g35); // 0x403a93\n    if ((int32_t)result == 0) {\n        // 0x403a9c\n        return result;\n    }\n    // 0x403ade\n    _exit(g22);\n    // UNREACHABLE\n  lab_0x403aa3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x403aaf\n    if (g63 == 0) {\n        // 0x403ae9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403ac3\n        error(0, *err_num, \"%s: %s\", (char *)function_405850((int64_t)g63), v1);\n    }\n    // 0x403ade\n    _exit(g22);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b05",
            "decompiledFuncCode": "int64_t function_403b00(void) {\n    // 0x403b00\n    int64_t fd; // 0x403b00\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403b31",
            "decompiledFuncCode": "int64_t function_403b10(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x403b10\n    if (stream == 0) {\n        // 0x403b30\n        int64_t result; // 0x403b10\n        return result;\n    }\n    // 0x403b15\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_403b40",
            "funcStartAddr": "403b40",
            "funcEndAddr": "403bd3",
            "decompiledFuncCode": "int64_t function_403b40(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x403b47\n    int64_t result = (int64_t)file; // 0x403b47\n    if (file == NULL) {\n        // 0x403b61\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x403b57\n    if (v1 >= 3) {\n        // 0x403b61\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_405a20((int64_t)v1, v2); // 0x403b7a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x403bb8\n        function_406810(result, v2);\n        // 0x403b61\n        return 0;\n    }\n    // 0x403b7e\n    if ((int32_t)function_406810(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x403b90\n        if (v4 != NULL) {\n            // 0x403b61\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x403b9d\n    close(fd);\n    // 0x403b61\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403be0",
            "funcStartAddr": "403be0",
            "funcEndAddr": "403c3e",
            "decompiledFuncCode": "int64_t function_403be0(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x403be6\n    if (locale == NULL) {\n        // 0x403c13\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x403be6\n    bool v2; // 0x403be0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g4; // 0x403be0\n    int64_t v5 = v1; // 0x403be0\n    int64_t v6 = 2; // 0x403c05\n    unsigned char v7 = *(char *)v5; // 0x403c05\n    char v8 = *(char *)v4; // 0x403c05\n    char v9 = v8; // 0x403c05\n    bool v10 = false; // 0x403c05\n    while (v7 == v8) {\n        // 0x403bf8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x403c11\n    int64_t v13 = v1; // 0x403c11\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x403c13\n        return 0;\n    }\n    int64_t v14 = 6; // 0x403c11\n    unsigned char v15 = *(char *)v13; // 0x403c2d\n    char v16 = *(char *)v12; // 0x403c2d\n    char v17 = v16; // 0x403c2d\n    bool v18 = false; // 0x403c2d\n    while (v15 == v16) {\n        // 0x403c20\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_403c40",
            "funcStartAddr": "403c40",
            "funcEndAddr": "403c50",
            "decompiledFuncCode": "int64_t function_403c40(int64_t a1) {\n    // 0x403c40\n    int128_t v1; // 0x403c40\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x403c40\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t v4; // 0x403c40\n    __asm_movups(*(int128_t *)&v4, v3);\n    int64_t result; // 0x403c40\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c50",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403d6b",
            "decompiledFuncCode": "int64_t function_403c50(int64_t result, int64_t a2, char a3) {\n    int64_t * v1 = (int64_t *)(result + 16); // 0x403c68\n    int64_t v2 = *v1; // 0x403c68\n    int64_t v3 = v2 + result; // 0x403c78\n    if ((v3 & 16) != 0) {\n        // 0x403d28\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x403cb4\n    int64_t v5 = v3; // 0x403c50\n    int64_t v6 = v2;\n    int64_t v7 = v2; // 0x403ca5\n    int64_t v8; // 0x403c50\n    int64_t v9; // 0x403c50\n    int64_t v10; // 0x403c50\n    int64_t v11; // 0x403c50\n    int64_t v12; // 0x403c50\n    int64_t v13; // 0x403c50\n    int64_t v14; // 0x403c50\n    while (true) {\n      lab_0x403cb4:\n        // 0x403cb4\n        v9 = v7;\n        v8 = v6;\n        int64_t v15 = v5;\n        uint64_t v16 = *v4; // 0x403cb4\n        if (v16 < *(int64_t *)(a2 + 16)) {\n            // 0x403c90\n            *v4 = v16 + 1;\n            v14 = v15;\n            v11 = (int64_t)*(char *)v16;\n            goto lab_0x403c9b;\n        } else {\n            uint32_t v17 = __uflow((struct _IO_FILE *)a2); // 0x403cc5\n            int64_t v18 = 0x100000000000000 * v15 >> 56; // 0x403cca\n            v14 = v18;\n            v11 = v17;\n            if (v17 != -1) {\n                goto lab_0x403c9b;\n            } else {\n                if (v8 == v9) {\n                    // break -> 0x403d28\n                    break;\n                }\n                if ((v15 & 32) != 0) {\n                    // break -> 0x403d28\n                    break;\n                }\n                // 0x403cdf\n                v10 = v9;\n                if (*(char *)(v9 - 1) == a3) {\n                  lab_0x403d4c:\n                    // 0x403d4c\n                    *(int64_t *)(result + 8) = v10 - v8;\n                    return result;\n                }\n                // 0x403cea\n                v13 = a3;\n                v12 = (int64_t)a3 & 0xffffffff;\n                if (v9 != v18) {\n                    // 0x403d40\n                    *(char *)v9 = a3;\n                    v10 = v9 + 1;\n                    goto lab_0x403d4c;\n                }\n                goto lab_0x403cf7;\n            }\n        }\n    }\n    // 0x403d28\n    return 0;\n  lab_0x403c9b:\n    // 0x403c9b\n    v5 = v14;\n    int64_t v19 = v9; // 0x403ca0\n    int64_t v20 = v11; // 0x403ca0\n    int64_t v21 = v11; // 0x403ca0\n    int64_t v22 = v8; // 0x403ca0\n    v13 = v11;\n    v12 = v11;\n    if (v9 == v14) {\n        goto lab_0x403cf7;\n    } else {\n        goto lab_0x403ca5;\n    }\n  lab_0x403cf7:;\n    int64_t v23 = function_406130(v8, result); // 0x403d04\n    int64_t v24 = v23 + v8; // 0x403d14\n    *v1 = v23;\n    v5 = v24;\n    v19 = v24;\n    v20 = v13 % 256;\n    v21 = v12;\n    v22 = v23;\n    goto lab_0x403ca5;\n  lab_0x403ca5:\n    // 0x403ca5\n    v6 = v22;\n    v7 = v19 + 1;\n    *(char *)v19 = (char)v20;\n    v10 = v7;\n    int64_t v25 = v6; // 0x403cae\n    if ((int32_t)v21 == (int32_t)a3) {\n        // 0x403d4c\n        *(int64_t *)(result + 8) = v10 - v25;\n        return result;\n    }\n    goto lab_0x403cb4;\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d7a",
            "decompiledFuncCode": "int64_t function_403d70(void) {\n    // 0x403d70\n    int64_t v1; // 0x403d70\n    return function_403c50(v1, v1, 10);\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "403d89",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1) {\n    // 0x403d80\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403dd5",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403d90\n    if (a3 == 0) {\n        // 0x403dcd\n        return 0;\n    }\n    int64_t v1 = (int64_t)*__ctype_toupper_loc(); // 0x403da9\n    int64_t v2 = 0; // 0x403dac\n    int32_t v3 = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a2) + v1); // 0x403dc7\n    uint32_t result = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a1) + v1) - v3; // 0x403dc7\n    while (result == 0) {\n        // 0x403db0\n        v2++;\n        if (v2 == a3) {\n            // 0x403dcd\n            return 0;\n        }\n        v3 = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a2) + v1);\n        result = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a1) + v1) - v3;\n    }\n    // 0x403dcd\n    return result;\n}\n"
        },
        {
            "funcName": "function_403de0",
            "funcStartAddr": "403de0",
            "funcEndAddr": "403e79",
            "decompiledFuncCode": "int64_t function_403de0(int64_t str) {\n    // 0x403de0\n    if (str == 0) {\n        // 0x403e59\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g35);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403dee\n    int64_t result = (int64_t)found_char_pos; // 0x403dee\n    if (found_char_pos == NULL) {\n        // 0x403e49\n        g64 = str;\n        g34 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403df8\n    if (v1 - str < 7) {\n        // 0x403e49\n        g64 = str;\n        g34 = str;\n        return result;\n    }\n    // 0x403e08\n    bool v2; // 0x403de0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403de0\n    int64_t v5 = result - 6; // 0x403de0\n    int64_t v6 = 7; // 0x403e16\n    unsigned char v7 = *(char *)v5; // 0x403e16\n    char v8 = *(char *)v4; // 0x403e16\n    char v9 = v8; // 0x403e16\n    bool v10 = false; // 0x403e16\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403e20\n    int64_t v13 = v1; // 0x403e20\n    int64_t v14 = 3; // 0x403e20\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403e49\n        g64 = str;\n        g34 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403e32\n    char v16 = *(char *)v12; // 0x403e32\n    char v17 = v16; // 0x403e32\n    bool v18 = false; // 0x403e32\n    while (v15 == v16) {\n        // 0x403e22\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403e3c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403e3e\n        v20 = result + 4;\n        g31 = v20;\n    }\n    // 0x403e49\n    g64 = v20;\n    g34 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403f72",
            "decompiledFuncCode": "int64_t function_403e80(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403e94\n    int64_t result = (int64_t)v1; // 0x403e94\n    if (result != a1) {\n        // 0x403ea1\n        return result;\n    }\n    int64_t v2 = function_407a30(); // 0x403eb0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403f66\n    if (v3 == 85) {\n        // 0x403ec0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403f58\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x403eee\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x403efb\n        // 0x403ea1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403f58\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x403f3d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x403f4a\n    // 0x403ea1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403f80",
            "funcStartAddr": "403f80",
            "funcEndAddr": "403fd7",
            "decompiledFuncCode": "int64_t function_403f80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403f80\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403fc8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403fd7",
            "funcStartAddr": "403fd7",
            "funcEndAddr": "4051a1",
            "decompiledFuncCode": "int64_t function_403fd7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x404021\n    int64_t v3 = 0; // 0x404021\n    int64_t v4; // 0x403fd7\n    int64_t v5; // 0x403fd7\n    int64_t v6; // 0x403fd7\n    int64_t v7; // 0x403fd7\n    int64_t v8; // 0x403fd7\n    int64_t v9; // 0x403fd7\n    int64_t v10; // 0x403fd7\n    int64_t v11; // 0x403fd7\n    int64_t v12; // 0x403fd7\n    int64_t v13; // 0x403fd7\n    int64_t v14; // 0x403fd7\n    int64_t v15; // 0x403fd7\n    int64_t v16; // 0x403fd7\n    int64_t v17; // 0x403fd7\n    int64_t v18; // 0x403fd7\n    int64_t result; // 0x403fd7\n    int64_t v19; // 0x403fd7\n    int32_t wc; // bp+132, 0x403fd7\n    int64_t ps; // bp+136, 0x403fd7\n    char v20; // 0x404590\n    int64_t v21; // 0x404590\n    int64_t v22; // 0x404938\n    int64_t v23; // 0x403fd7\n    int64_t v24; // 0x404957\n    int32_t v25; // 0x403fd7\n    while (true) {\n      lab_0x404028_2:\n        // 0x404028\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403fd7\n        int64_t v27; // 0x40405c\n        while (true) {\n          lab_0x404028:\n            // 0x404028\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x404033\n            if (v15 == -1) {\n                // 0x404035\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x404043\n            if (v28) {\n                // break (via goto) -> 0x4047a8\n                goto lab_0x4047a8;\n            }\n            // 0x40404c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g78 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40463b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404181;\n                    }\n                    // 0x404a5d\n                    v26 = v5 + 1;\n                    goto lab_0x404028;\n                }\n                case 7: {\n                    goto lab_0x404181;\n                }\n                case 8: {\n                    goto lab_0x404181;\n                }\n                case 9: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x404181;\n                }\n                case 12: {\n                    goto lab_0x404181;\n                }\n                case 13: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40414d;\n                }\n                case 36: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x404181;\n                }\n                case 38: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x404181;\n                }\n                case 44: {\n                    goto lab_0x404181;\n                }\n                case 45: {\n                    goto lab_0x404181;\n                }\n                case 46: {\n                    goto lab_0x404181;\n                }\n                case 47: {\n                    goto lab_0x404181;\n                }\n                case 48: {\n                    goto lab_0x404181;\n                }\n                case 49: {\n                    goto lab_0x404181;\n                }\n                case 50: {\n                    goto lab_0x404181;\n                }\n                case 51: {\n                    goto lab_0x404181;\n                }\n                case 52: {\n                    goto lab_0x404181;\n                }\n                case 53: {\n                    goto lab_0x404181;\n                }\n                case 54: {\n                    goto lab_0x404181;\n                }\n                case 55: {\n                    goto lab_0x404181;\n                }\n                case 56: {\n                    goto lab_0x404181;\n                }\n                case 57: {\n                    goto lab_0x404181;\n                }\n                case 58: {\n                    goto lab_0x404181;\n                }\n                case 59: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x404181;\n                }\n                case 66: {\n                    goto lab_0x404181;\n                }\n                case 67: {\n                    goto lab_0x404181;\n                }\n                case 68: {\n                    goto lab_0x404181;\n                }\n                case 69: {\n                    goto lab_0x404181;\n                }\n                case 70: {\n                    goto lab_0x404181;\n                }\n                case 71: {\n                    goto lab_0x404181;\n                }\n                case 72: {\n                    goto lab_0x404181;\n                }\n                case 73: {\n                    goto lab_0x404181;\n                }\n                case 74: {\n                    goto lab_0x404181;\n                }\n                case 75: {\n                    goto lab_0x404181;\n                }\n                case 76: {\n                    goto lab_0x404181;\n                }\n                case 77: {\n                    goto lab_0x404181;\n                }\n                case 78: {\n                    goto lab_0x404181;\n                }\n                case 79: {\n                    goto lab_0x404181;\n                }\n                case 80: {\n                    goto lab_0x404181;\n                }\n                case 81: {\n                    goto lab_0x404181;\n                }\n                case 82: {\n                    goto lab_0x404181;\n                }\n                case 83: {\n                    goto lab_0x404181;\n                }\n                case 84: {\n                    goto lab_0x404181;\n                }\n                case 85: {\n                    goto lab_0x404181;\n                }\n                case 86: {\n                    goto lab_0x404181;\n                }\n                case 87: {\n                    goto lab_0x404181;\n                }\n                case 88: {\n                    goto lab_0x404181;\n                }\n                case 89: {\n                    goto lab_0x404181;\n                }\n                case 90: {\n                    goto lab_0x404181;\n                }\n                case 91: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x404181;\n                }\n                case 94: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x404181;\n                }\n                case 96: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x404181;\n                }\n                case 98: {\n                    goto lab_0x404181;\n                }\n                case 99: {\n                    goto lab_0x404181;\n                }\n                case 100: {\n                    goto lab_0x404181;\n                }\n                case 101: {\n                    goto lab_0x404181;\n                }\n                case 102: {\n                    goto lab_0x404181;\n                }\n                case 103: {\n                    goto lab_0x404181;\n                }\n                case 104: {\n                    goto lab_0x404181;\n                }\n                case 105: {\n                    goto lab_0x404181;\n                }\n                case 106: {\n                    goto lab_0x404181;\n                }\n                case 107: {\n                    goto lab_0x404181;\n                }\n                case 108: {\n                    goto lab_0x404181;\n                }\n                case 109: {\n                    goto lab_0x404181;\n                }\n                case 110: {\n                    goto lab_0x404181;\n                }\n                case 111: {\n                    goto lab_0x404181;\n                }\n                case 112: {\n                    goto lab_0x404181;\n                }\n                case 113: {\n                    goto lab_0x404181;\n                }\n                case 114: {\n                    goto lab_0x404181;\n                }\n                case 115: {\n                    goto lab_0x404181;\n                }\n                case 116: {\n                    goto lab_0x404181;\n                }\n                case 117: {\n                    goto lab_0x404181;\n                }\n                case 118: {\n                    goto lab_0x404181;\n                }\n                case 119: {\n                    goto lab_0x404181;\n                }\n                case 120: {\n                    goto lab_0x404181;\n                }\n                case 121: {\n                    goto lab_0x404181;\n                }\n                case 122: {\n                    goto lab_0x404181;\n                }\n                case 123: {\n                    goto lab_0x404125;\n                }\n                case 124: {\n                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x404125;\n                }\n                case 126: {\n                    goto lab_0x40414d;\n                }\n                default: {\n                    goto lab_0x404525;\n                }\n            }\n        }\n      lab_0x404525:\n        if (v23 != 1) {\n            // 0x404890\n            ps = 0;\n            int64_t len = v15; // 0x4048a0\n            if (v15 == -1) {\n                // 0x4048a2\n                len = strlen((char *)str);\n            }\n            // 0x4048ce\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40492f:\n                // 0x40492f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404934\n                int64_t v30 = v29 + str;\n                v24 = function_407840(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404eaa_2;\n                    }\n                    case -1: {\n                        goto lab_0x404eaa_2;\n                    }\n                    case -2: {\n                        // 0x404f8d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404fc7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404fca\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404fd7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404fd0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404eaa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404eaa_2;\n                    }\n                    case 1: {\n                        goto lab_0x404900;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4049ac\n                        char v34 = *(char *)v33; // 0x4049bd\n                        unsigned char v35; // 0x403fd7\n                        if (v34 < 125) {\n                            // 0x4049c8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4049df\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4049b0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4049bd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4049c8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4049df\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4049b0\n                            v33++;\n                        }\n                        goto lab_0x404900;\n                    }\n                }\n            }\n            goto lab_0x404eaa_2;\n        } else {\n            // 0x404574\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404181;\n        }\n    }\n  lab_0x4047a8:\n    // 0x4047a8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4050aa\n        if (v8 > result) {\n            // 0x4050b3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4043d7\n        return result;\n    }\n    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404181:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x404190\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40439a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404291\n    char v40 = v20; // 0x404291\n    int64_t v41 = v38; // 0x404291\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404291\n    int64_t v43 = v36; // 0x404291\n    goto lab_0x40420d;\n  lab_0x40439a_2:\n    // 0x4043d7\n    return function_403f80(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404eaa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x404181;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x404a7e\n        int64_t v50 = v5 + 1; // 0x404b61\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404b68\n        char v52 = v20; // 0x404b68\n        int64_t v53 = result; // 0x404b68\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404b31\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404b35\n            int64_t v56 = v54 + 1; // 0x404b3a\n            int64_t v57 = v51 + 1; // 0x404b61\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404b2c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404b31\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404b35\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40420d;\n    }\n  lab_0x404900:\n    // 0x404900\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40491f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404922\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x404eaa\n        goto lab_0x404eaa_2;\n    }\n    goto lab_0x40492f;\n  lab_0x40414d:\n    // 0x40414d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40439a_2;\n    }\n    goto lab_0x404181;\n  lab_0x404125:;\n    bool v60 = v15 == 1; // 0x404130\n    if (v15 == -1) {\n        // 0x404132\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40413e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x404181;\n    } else {\n        goto lab_0x40414d;\n    }\n  lab_0x40420d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x404212\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x404216\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x404028_2;\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "40534e",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4051b2\n    int32_t * v3 = __errno_location(); // 0x4051cc\n    int64_t v4 = (int64_t)g24; // 0x4051d1\n    int32_t v5 = *v3; // 0x4051db\n    int64_t v6 = v4; // 0x4051f1\n    if (v2 >= (int64_t)*(int32_t *)&g27) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x405349\n            function_406220(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405200\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405207\n        int64_t v9; // 0x4051b0\n        if (g24 == &g25) {\n            int64_t v10 = function_406030(0, v8); // 0x40532a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g25); // 0x40532f\n            *(int64_t *)&g24 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406030(v4, v8); // 0x40521b\n            *(int64_t *)&g24 = v12;\n            v9 = v12;\n        }\n        // 0x40522a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g27; // 0x40522a\n        int32_t v14 = v7; // 0x405231\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g27 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x405261\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40526b\n    int64_t * v17 = (int64_t *)v15; // 0x40526e\n    uint64_t v18 = *v17; // 0x40526e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x405271\n    int64_t result = *v19; // 0x405271\n    int64_t v20; // 0x4051b0\n    uint64_t v21 = function_403f80(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x405294\n    if (v18 > v21) {\n        // 0x40530b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4052a7\n    *v17 = v22;\n    if (result != (int64_t)&g65) {\n        // 0x4052b7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405fd0(v22); // 0x4052d1\n    *v19 = result2;\n    int64_t v23; // 0x4051b0\n    function_403f80(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40530b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "405384",
            "decompiledFuncCode": "int64_t function_405350(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405357\n    int64_t result = function_4061d0(a1 == 0 ? (int64_t)&g66 : a1, 56); // 0x405376\n    return result;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "40539f",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g66 : a1); // 0x40539c\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "4053af",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 : a1; // 0x4053a8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g66;\n}\n"
        },
        {
            "funcName": "function_4053b0",
            "funcStartAddr": "4053b0",
            "funcEndAddr": "4053e3",
            "decompiledFuncCode": "int64_t function_4053b0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 + 8 : a1 + 8; // 0x4053c9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4053ce\n    uint32_t v3 = *v2; // 0x4053ce\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4053d2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4053f0",
            "funcStartAddr": "4053f0",
            "funcEndAddr": "405403",
            "decompiledFuncCode": "int64_t function_4053f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g66 + 4 : a1 + 4); // 0x4053fc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "40543b",
            "decompiledFuncCode": "int64_t function_405410(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 : a1; // 0x405418\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405435\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40542c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g66;\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "4054b2",
            "decompiledFuncCode": "int64_t function_405440(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g66 : a5; // 0x405462\n    int32_t * v2 = __errno_location(); // 0x40546b\n    uint32_t v3 = *(int32_t *)v1; // 0x40548b\n    int64_t result = function_403f80(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40549a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "4055a1",
            "decompiledFuncCode": "int64_t function_4054c0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g66 : a4; // 0x4054e2\n    int32_t * v2 = __errno_location(); // 0x4054e8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405507\n    int32_t * v4 = (int32_t *)v1; // 0x40550a\n    int64_t v5 = function_403f80(0, 0, a1, a2, (int64_t)*v4, v3); // 0x405525\n    int64_t v6 = v5 + 1; // 0x40552a\n    int64_t result = function_405fd0(v6); // 0x40553f\n    function_403f80(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405584\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40558d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055b0",
            "funcStartAddr": "4055b0",
            "funcEndAddr": "4055ba",
            "decompiledFuncCode": "int64_t function_4055b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4055b0\n    return function_4054c0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "405655",
            "decompiledFuncCode": "int64_t function_4055c0(void) {\n    uint32_t v1 = *(int32_t *)&g27; // 0x4055c0\n    int64_t v2 = v1; // 0x4055c0\n    int64_t v3 = v2; // 0x4055d4\n    if (v1 >= 2) {\n        int64_t v4 = &g27;\n        int64_t v5 = v4 + 16; // 0x4055f3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g79;\n        while (v5 != (int64_t)g24 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4055f0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g79;\n        }\n    }\n    int64_t v6 = v3; // 0x40560d\n    if (g25 != 0x60d3e0) {\n        // 0x40560f\n        free((int64_t *)g25);\n        g25 = 256;\n        *(int64_t *)&g26 = (int64_t)&g65;\n        v6 = &g79;\n    }\n    int64_t result = v6; // 0x405631\n    if (g24 != &g25) {\n        // 0x405633\n        free(g24);\n        *(int64_t *)&g24 = (int64_t)&g25;\n        result = &g79;\n    }\n    // 0x405646\n    *(int32_t *)&g27 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405671",
            "decompiledFuncCode": "int64_t function_405660(void) {\n    // 0x405660\n    int64_t v1; // 0x405660\n    return function_4051b0(v1, v1, -1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_405680",
            "funcStartAddr": "405680",
            "funcEndAddr": "40568a",
            "decompiledFuncCode": "int64_t function_405680(void) {\n    // 0x405680\n    int64_t v1; // 0x405680\n    return function_4051b0(v1, v1, v1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "4056a6",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1) {\n    // 0x405690\n    return function_4051b0(0, a1, -1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "4056c2",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t a1, int64_t a2) {\n    // 0x4056b0\n    return function_4051b0(0, a1, a2, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_4056d0",
            "funcStartAddr": "4056d0",
            "funcEndAddr": "405738",
            "decompiledFuncCode": "int64_t function_4056d0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4056e0\n    return function_4051b0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "4057a4",
            "decompiledFuncCode": "int64_t function_405740(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405750\n    return function_4051b0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057bc",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2) {\n    // 0x4057b0\n    return function_4056d0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "4057cf",
            "decompiledFuncCode": "int64_t function_4057c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4057c0\n    return function_405740(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "405840",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g66); // 0x4057dd\n    int128_t v2 = __asm_movdqa(g67); // 0x4057e5\n    int128_t v3 = __asm_movdqa(g68); // 0x4057ed\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x405802\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405818\n    uint32_t v6 = *v5; // 0x405818\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40581d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4051b0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405840",
            "funcStartAddr": "405840",
            "funcEndAddr": "40584d",
            "decompiledFuncCode": "int64_t function_405840(int64_t a1, int64_t a2) {\n    // 0x405840\n    return function_4057d0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "405861",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1) {\n    // 0x405850\n    return function_4057d0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "40587a",
            "decompiledFuncCode": "int64_t function_405870(void) {\n    // 0x405870\n    int64_t v1; // 0x405870\n    return function_4057d0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "4058ee",
            "decompiledFuncCode": "int64_t function_405880(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40589a\n    return function_4051b0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "40595c",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g66); // 0x4058f7\n    int128_t v2 = __asm_movdqa(g67); // 0x4058ff\n    int128_t v3 = __asm_movdqa(g68); // 0x405907\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405929\n    if (a2 == 0 || a3 == 0) {\n        // 0x405957\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40593a\n    return function_4051b0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "405969",
            "decompiledFuncCode": "int64_t function_405960(void) {\n    // 0x405960\n    int64_t v1; // 0x405960\n    return function_4058f0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "405987",
            "decompiledFuncCode": "int64_t function_405970(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405970\n    return function_4058f0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059a3",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405990\n    return function_4058f0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "4059ba",
            "decompiledFuncCode": "int64_t function_4059b0(void) {\n    // 0x4059b0\n    int64_t v1; // 0x4059b0\n    return function_4051b0(v1, v1, v1, &g23);\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "4059d2",
            "decompiledFuncCode": "int64_t function_4059c0(int64_t a1, int64_t a2) {\n    // 0x4059c0\n    return function_4051b0(0, a1, a2, &g23);\n}\n"
        },
        {
            "funcName": "function_4059e0",
            "funcStartAddr": "4059e0",
            "funcEndAddr": "4059f1",
            "decompiledFuncCode": "int64_t function_4059e0(void) {\n    // 0x4059e0\n    int64_t v1; // 0x4059e0\n    return function_4051b0(v1, v1, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_405a00",
            "funcStartAddr": "405a00",
            "funcEndAddr": "405a16",
            "decompiledFuncCode": "int64_t function_405a00(int64_t a1) {\n    // 0x405a00\n    return function_4051b0(0, a1, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_405a20",
            "funcStartAddr": "405a20",
            "funcEndAddr": "405a2e",
            "decompiledFuncCode": "int64_t function_405a20(int64_t a1, int64_t a2) {\n    // 0x405a20\n    int64_t v1; // 0x405a20\n    return function_406890(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_405a30",
            "funcStartAddr": "405a30",
            "funcEndAddr": "405e0d",
            "decompiledFuncCode": "int64_t function_405a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405ac8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405a4c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405a66\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405aab\n    if (a6 < 10) {\n        // 0x405aba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405bb2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "405e30",
            "decompiledFuncCode": "int64_t function_405e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405e10\n    if (a5 == 0) {\n        // 0x405e2b\n        return function_405a30(a1, a2, a3, a4, a5, 0, (int64_t)&g79);\n    }\n    int64_t v1 = 0; // 0x405e17\n    v1++;\n    int64_t v2 = v1; // 0x405e29\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405e20\n        v1++;\n        v2 = v1;\n    }\n    // 0x405e2b\n    return function_405a30(a1, a2, a3, a4, a5, v2, (int64_t)&g79);\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405e90",
            "decompiledFuncCode": "int64_t function_405e30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405e30\n    int64_t v3 = &v2; // 0x405e30\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405e63\n    int64_t v6; // 0x405e4d\n    int64_t * v7; // 0x405e6b\n    int64_t v8; // 0x405e6b\n    int64_t v9; // 0x405e77\n    if (v5 < 48) {\n        // 0x405e40\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405e83\n            break;\n        }\n    } else {\n        // 0x405e6b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405e83\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405e61\n    while (v4 != 9) {\n        // 0x405e59\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405e40\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405e83\n                break;\n            }\n        } else {\n            // 0x405e6b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405e83\n                break;\n            }\n        }\n        // 0x405e59\n        v10 = 10;\n    }\n    // 0x405e83\n    return function_405a30(a1, a2, a3, a4, v3, v10, (int64_t)&g79);\n}\n"
        },
        {
            "funcName": "function_405e90",
            "funcStartAddr": "405e90",
            "funcEndAddr": "405f4c",
            "decompiledFuncCode": "int64_t function_405e90(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x405e90\n    int64_t v1; // bp-168, 0x405e90\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405e90\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405e90\n    int64_t v8; // 0x405e90\n    int64_t v9; // bp-56, 0x405e90\n    int64_t v10; // 0x405ef5\n    int64_t v11; // 0x405f19\n    if ((int32_t)v6 < 48) {\n        // 0x405ee0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405f30\n            break;\n        }\n    } else {\n        // 0x405f12\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405f30\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x405f0a\n    int64_t v13 = 10; // 0x405f0a\n    while (v5 != 9) {\n        // 0x405f0c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405ee0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405f30\n                break;\n            }\n        } else {\n            // 0x405f12\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405f30\n                break;\n            }\n        }\n        // 0x405f02\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405f30\n    int64_t v14; // bp-136, 0x405e90\n    int64_t result = function_405a30(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g79); // 0x405f3f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f50",
            "funcStartAddr": "405f50",
            "funcEndAddr": "405fc4",
            "decompiledFuncCode": "int64_t function_405f50(int64_t a1) {\n    // 0x405f50\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405fb3\n    return fputs_unlocked(v1, g32);\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fea",
            "decompiledFuncCode": "int64_t function_405fd0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405fd4\n    if (size != 0 != (mem == NULL)) {\n        // 0x405fe3\n        return (int64_t)mem;\n    }\n    // 0x405fe5\n    function_406220(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "406011",
            "decompiledFuncCode": "int64_t function_405ff0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405ff3\n    int64_t v2 = v1; // 0x405ff3\n    if (v2 < 0) {\n        // 0x40600b\n        function_406220(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406009\n        return function_405fd0(v2);\n    }\n    // 0x40600b\n    function_406220(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406022",
            "decompiledFuncCode": "int64_t function_406020(void) {\n    // 0x406020\n    int64_t v1; // 0x406020\n    return function_405fd0(v1);\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406066",
            "decompiledFuncCode": "int64_t function_406030(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406058\n        free(v1);\n        return (int32_t)&g79 ^ (int32_t)&g79;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406041\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406050\n        return (int64_t)mem;\n    }\n    // 0x406061\n    function_406220(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "406091",
            "decompiledFuncCode": "int64_t function_406070(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406073\n    int64_t v2 = v1; // 0x406073\n    if (v2 < 0) {\n        // 0x40608b\n        function_406220(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406089\n        return function_406030(a1, v2);\n    }\n    // 0x40608b\n    function_406220(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4060a0",
            "funcStartAddr": "4060a0",
            "funcEndAddr": "406126",
            "decompiledFuncCode": "int64_t function_4060a0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4060fb\n            function_406220(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406030(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4060e3\n    if (a2 == 0) {\n        // 0x406108\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4060e8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4060fb\n        function_406220(a1);\n        // UNREACHABLE\n    }\n    // 0x4060ca\n    *(int64_t *)a2 = v2;\n    return function_406030(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406130",
            "funcStartAddr": "406130",
            "funcEndAddr": "406180",
            "decompiledFuncCode": "int64_t function_406130(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406130\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40617a\n            function_406220(a1);\n            // UNREACHABLE\n        }\n        // 0x406152\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406030(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406165\n        *(int64_t *)a2 = 128;\n        return function_406030(0, 128);\n    }\n    // 0x406178\n    if (a2 < 0) {\n        // 0x40617a\n        function_406220(a1);\n        // UNREACHABLE\n    }\n    // 0x406152\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406030(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406180",
            "funcStartAddr": "406180",
            "funcEndAddr": "406197",
            "decompiledFuncCode": "int64_t function_406180(int64_t a1, int64_t a2) {\n    // 0x406180\n    return (int64_t)memset((int64_t *)function_405fd0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4061a0",
            "funcStartAddr": "4061a0",
            "funcEndAddr": "4061ce",
            "decompiledFuncCode": "int64_t function_4061a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4061a7\n    if ((int64_t)v1 < 0) {\n        // 0x4061c9\n        function_406220(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4061c9\n        function_406220(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4061ba\n    if (mem != NULL) {\n        // 0x4061c4\n        return (int64_t)mem;\n    }\n    // 0x4061c9\n    function_406220(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "4061f8",
            "decompiledFuncCode": "int64_t function_4061d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405fd0(a2); // 0x4061df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406200",
            "funcStartAddr": "406200",
            "funcEndAddr": "406213",
            "decompiledFuncCode": "int64_t function_406200(int64_t str) {\n    // 0x406200\n    return function_4061d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "406251",
            "decompiledFuncCode": "int64_t function_406220(int64_t a1) {\n    // 0x406220\n    error(g22, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406260",
            "funcStartAddr": "406260",
            "funcEndAddr": "406314",
            "decompiledFuncCode": "int64_t function_406260(int32_t err_num, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x406260\n    error(0, err_num, dcgettext(NULL, \"string comparison failed\", 5));\n    error(0, (int32_t)\"Set LC_ALL='C' to work around the problem.\" ^ (int32_t)\"Set LC_ALL='C' to work around the problem.\", dcgettext(NULL, \"Set LC_ALL='C' to work around the problem.\", 5));\n    function_405740(1, 8, a4, a5);\n    function_405740(0, 8, a2, a3);\n    error(g22, (int32_t)\"The strings compared were %s and %s.\" ^ (int32_t)\"The strings compared were %s and %s.\", dcgettext(NULL, \"The strings compared were %s and %s.\", 5));\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "406375",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = function_408060(a1, a2, a3, a4) & 0xffffffff; // 0x406339\n    int32_t v1 = *__errno_location(); // 0x406341\n    if (v1 == 0) {\n        // 0x406347\n        return result;\n    }\n    // 0x406358\n    function_406260(v1, a1, a2, a3, a4);\n    return result;\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "4063d7",
            "decompiledFuncCode": "int64_t function_406380(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = function_408110(a1, a2, a3, a4) & 0xffffffff; // 0x406399\n    int32_t v1 = *__errno_location(); // 0x4063a1\n    if (v1 == 0) {\n        // 0x4063a7\n        return result;\n    }\n    // 0x4063b8\n    function_406260(v1, a1, a2 - 1, a3, a4 - 1);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4063e0",
            "funcStartAddr": "4063e0",
            "funcEndAddr": "406810",
            "decompiledFuncCode": "int64_t function_4063e0(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x4063ee\n    if (base >= 37) {\n        // 0x4067eb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g79;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x406412\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x406442\n    int64_t v3 = str; // 0x406447\n    char v4 = c; // 0x406447\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x40643c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x406438\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x406449\n    if (v4 == 45) {\n        // 0x406483\n        return 4;\n    }\n    // 0x40644e\n    int64_t v6; // bp-64, 0x4063e0\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x40640e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x406454\n    int64_t * v7 = (int64_t *)endptr; // 0x406459\n    int64_t v8 = *v7; // 0x406459\n    char v9; // 0x4063e0\n    int64_t v10; // 0x4063e0\n    int64_t v11; // 0x4063e0\n    int64_t v12; // 0x4063e0\n    int64_t v13; // 0x4063e0\n    int64_t v14; // 0x4063e0\n    int64_t v15; // 0x4063e0\n    if (v8 == str) {\n        // 0x4064b0\n        if (c == 0 || str2 == NULL) {\n            // 0x406483\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x4064d1\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x406483\n            return 4;\n        }\n        goto lab_0x4064df;\n    } else {\n        int32_t v16 = *v1; // 0x406464\n        int64_t v17 = 0; // 0x40646a\n        if (v16 != 0) {\n            // 0x406498\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x406483\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x406454\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x406480;\n        } else {\n            char c2 = *(char *)v8; // 0x406473\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x4065d3\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4064df;\n                } else {\n                    goto lab_0x4065e5;\n                }\n            } else {\n                goto lab_0x406480;\n            }\n        }\n    }\n  lab_0x4064df:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x4064e7\n    int64_t v21 = 1; // 0x4064e7\n    int64_t v22; // 0x4063e0\n    int64_t v23; // 0x4063e0\n    int64_t v24; // 0x4063e0\n    int64_t v25; // 0x4063e0\n    int64_t v26; // 0x4063e0\n    int64_t v27; // 0x4063e0\n    int64_t v28; // 0x4063e0\n    int64_t v29; // 0x4063e0\n    int64_t v30; // 0x4063e0\n    int64_t v31; // 0x4063e0\n    int64_t v32; // 0x4063e0\n    int64_t v33; // 0x4063e0\n    int64_t v34; // 0x4063e0\n    int64_t v35; // 0x4063e0\n    int64_t v36; // 0x4063e0\n    int64_t v37; // 0x4063e0\n    int64_t v38; // 0x4063e0\n    int64_t v39; // 0x4063e0\n    int64_t v40; // 0x4063e0\n    int64_t v41; // 0x4063e0\n    if (v19 < 48) {\n        // 0x4064e9\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40654a;\n        } else {\n            // 0x4064fc\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x40654a;\n            } else {\n                // 0x406518\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x40654a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x406779\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x40654a;\n                    }\n                    default: {\n                        // 0x40652d\n                        g76 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x4066eb;\n                            }\n                            case 70: {\n                                goto lab_0x4065e5;\n                            }\n                            case 71: {\n                                goto lab_0x406723;\n                            }\n                            case 72: {\n                                goto lab_0x4065e5;\n                            }\n                            case 73: {\n                                goto lab_0x4065e5;\n                            }\n                            case 74: {\n                                goto lab_0x4065e5;\n                            }\n                            case 75: {\n                                goto lab_0x4065ac;\n                            }\n                            case 76: {\n                                goto lab_0x4065e5;\n                            }\n                            case 77: {\n                                goto lab_0x40656e;\n                            }\n                            case 78: {\n                                goto lab_0x4065e5;\n                            }\n                            case 79: {\n                                goto lab_0x4065e5;\n                            }\n                            case 80: {\n                                goto lab_0x4066b8;\n                            }\n                            case 81: {\n                                goto lab_0x4065e5;\n                            }\n                            case 82: {\n                                goto lab_0x4065e5;\n                            }\n                            case 83: {\n                                goto lab_0x4065e5;\n                            }\n                            case 84: {\n                                goto lab_0x406688;\n                            }\n                            case 85: {\n                                goto lab_0x4065e5;\n                            }\n                            case 86: {\n                                goto lab_0x4065e5;\n                            }\n                            case 87: {\n                                goto lab_0x4065e5;\n                            }\n                            case 88: {\n                                goto lab_0x4065e5;\n                            }\n                            case 89: {\n                                goto lab_0x406656;\n                            }\n                            case 90: {\n                                goto lab_0x40661b;\n                            }\n                            case 91: {\n                                goto lab_0x4065e5;\n                            }\n                            case 92: {\n                                goto lab_0x4065e5;\n                            }\n                            case 93: {\n                                goto lab_0x4065e5;\n                            }\n                            case 94: {\n                                goto lab_0x4065e5;\n                            }\n                            case 95: {\n                                goto lab_0x4065e5;\n                            }\n                            case 96: {\n                                goto lab_0x4065e5;\n                            }\n                            case 97: {\n                                goto lab_0x4065e5;\n                            }\n                            case 98: {\n                                goto lab_0x4065ff;\n                            }\n                            case 99: {\n                                goto lab_0x406588;\n                            }\n                            case 100: {\n                                goto lab_0x4065e5;\n                            }\n                            case 101: {\n                                goto lab_0x4065e5;\n                            }\n                            case 102: {\n                                goto lab_0x4065e5;\n                            }\n                            case 103: {\n                                goto lab_0x406723;\n                            }\n                            case 104: {\n                                goto lab_0x4065e5;\n                            }\n                            case 105: {\n                                goto lab_0x4065e5;\n                            }\n                            case 106: {\n                                goto lab_0x4065e5;\n                            }\n                            case 107: {\n                                goto lab_0x4065ac;\n                            }\n                            case 108: {\n                                goto lab_0x4065e5;\n                            }\n                            case 109: {\n                                goto lab_0x40656e;\n                            }\n                            case 110: {\n                                goto lab_0x4065e5;\n                            }\n                            case 111: {\n                                goto lab_0x4065e5;\n                            }\n                            case 112: {\n                                goto lab_0x4065e5;\n                            }\n                            case 113: {\n                                goto lab_0x4065e5;\n                            }\n                            case 114: {\n                                goto lab_0x4065e5;\n                            }\n                            case 115: {\n                                goto lab_0x4065e5;\n                            }\n                            case 116: {\n                                goto lab_0x406688;\n                            }\n                            default: {\n                                goto lab_0x40654a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40654a;\n    }\n  lab_0x406480:\n    // 0x406480\n    *a4 = v13;\n    // 0x406483\n    return v10 & 0xffffffff;\n  lab_0x40654a:\n    // 0x40654a\n    g77 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x4063e0\n    switch (v9) {\n        case 66: {\n            // 0x406744\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x4065b7;\n            } else {\n                // 0x406751\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406588;\n            }\n        }\n        case 69: {\n            goto lab_0x4066eb;\n        }\n        case 71: {\n            goto lab_0x406723;\n        }\n        case 75: {\n            goto lab_0x4065ac;\n        }\n        case 77: {\n            goto lab_0x40656e;\n        }\n        case 80: {\n            goto lab_0x4066b8;\n        }\n        case 84: {\n            goto lab_0x406688;\n        }\n        case 89: {\n            goto lab_0x406656;\n        }\n        case 90: {\n            goto lab_0x40661b;\n        }\n        case 98: {\n            goto lab_0x4065ff;\n        }\n        case 99: {\n            goto lab_0x406588;\n        }\n        case 103: {\n            goto lab_0x406723;\n        }\n        case 107: {\n            goto lab_0x4065ac;\n        }\n        case 109: {\n            goto lab_0x40656e;\n        }\n        case 116: {\n            goto lab_0x406688;\n        }\n        case 119: {\n            // 0x4065f0\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x4065b7;\n            } else {\n                // 0x4065f5\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406588;\n            }\n        }\n        default: {\n            goto lab_0x4065e5;\n        }\n    }\n  lab_0x4066eb:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x406703\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x40670f\n    int64_t v48 = v45; // 0x406712\n    int64_t v49 = v34; // 0x406712\n    int64_t v50 = v46; // 0x406712\n    int32_t v51 = v47; // 0x406712\n    int64_t v52 = v46; // 0x406712\n    while (v47 != 0) {\n        // 0x406700\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x406644;\n  lab_0x406723:\n    // 0x406723\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x40672e\n        int128_t v53; // 0x406729\n        uint128_t v54; // 0x406729\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x40672e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x4063e0\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x406733\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x406738\n                v23 = v57;\n                int64_t v58; // 0x4063e0\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x406588;\n  lab_0x4065ac:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x4065af\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x406588;\n    } else {\n        goto lab_0x4065b7;\n    }\n  lab_0x40656e:;\n    int128_t v62 = v24; // 0x406574\n    uint128_t v63 = v62 * (int128_t)v14; // 0x406574\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x4065b7;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x406579\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x4065b7;\n        } else {\n            // 0x40657e\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x406588;\n        }\n    }\n  lab_0x4066b8:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x4066cb\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x4066d7\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x4066da\n    int64_t v70 = v67; // 0x4066da\n    while (v68 != 0) {\n        // 0x4066c8\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x406644;\n  lab_0x406688:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x40669b\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x4066a7\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x4066aa\n    int64_t v76 = v73; // 0x4066aa\n    while (v74 != 0) {\n        // 0x406698\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x406644;\n  lab_0x406656:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x40666b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x406677\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x40667a\n    int64_t v82 = v79; // 0x40667a\n    while (v80 != 0) {\n        // 0x406668\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x406644;\n  lab_0x40661b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x406633\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x40663f\n    int32_t v87 = v86; // 0x406642\n    int64_t v88 = v85; // 0x406642\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x406630\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x406644;\n  lab_0x4065ff:\n    // 0x4065ff\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x4065b7;\n    } else {\n        // 0x406608\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x406588;\n    }\n  lab_0x406588:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x40658d\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x406480;\n  lab_0x4065e5:\n    // 0x4065e5\n    *a4 = v15;\n    // 0x406483\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4065b7:\n    // 0x4065b7\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x406588;\n  lab_0x406644:\n    // 0x406644\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x406588;\n}\n"
        },
        {
            "funcName": "function_406810",
            "funcStartAddr": "406810",
            "funcEndAddr": "40688b",
            "decompiledFuncCode": "int64_t function_406810(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406817\n    if (fileno(stream) < 0) {\n        // 0x406877\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40682a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40685b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406877\n            return fclose(stream);\n        }\n    }\n    // 0x40682c\n    if ((int32_t)function_4069d0(a1, v1) == 0) {\n        // 0x406877\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406838\n    int32_t v3 = *v2; // 0x406840\n    int64_t result = fclose(stream); // 0x40684e\n    if (v3 != 0) {\n        // 0x406880\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406850\n    return result;\n}\n"
        },
        {
            "funcName": "function_406890",
            "funcStartAddr": "406890",
            "funcEndAddr": "4069c5",
            "decompiledFuncCode": "int64_t function_406890(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x406970\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x4068cc\n    int64_t v2; // 0x406890\n    if (g69 < 0) {\n        int64_t v3 = function_406890(fd, 0, v1, a4); // 0x406914\n        int64_t v4 = v3 & 0xffffffff; // 0x406919\n        if ((int32_t)v3 < 0) {\n            // 0x406900\n            return v4 & 0xffffffff;\n        }\n        // 0x40691f\n        v2 = v4;\n        if (g69 != -1) {\n            // 0x406900\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4068e7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4068f6\n            g69 = 1;\n            // 0x406900\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_406890(fd & 0xffffffff, 0, v1, a4); // 0x4069a7\n        int64_t v7 = v6 & 0xffffffff; // 0x4069ac\n        if ((int32_t)v6 < 0) {\n            // 0x406900\n            return v7 & 0xffffffff;\n        }\n        // 0x4069b6\n        g69 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40692f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40693a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x406900\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x406952\n    close(fd2);\n    // 0x406900\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4069d0",
            "funcStartAddr": "4069d0",
            "funcEndAddr": "406a10",
            "decompiledFuncCode": "int64_t function_4069d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4069ea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4069ea\n        return fflush(stream);\n    }\n    // 0x4069f8\n    function_406a10(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406a10",
            "funcStartAddr": "406a10",
            "funcEndAddr": "406a67",
            "decompiledFuncCode": "int64_t function_406a10(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406a10\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x406a1a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x406a4b\n    int64_t result = -1; // 0x406a54\n    if (v1 != -1) {\n        // 0x406a56\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406a62\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a70",
            "funcStartAddr": "406a70",
            "funcEndAddr": "406b4f",
            "decompiledFuncCode": "int64_t function_406a70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x406a7c\n    uint32_t v2 = *v1; // 0x406a7c\n    int64_t v3 = a2 & 0xffffffff; // 0x406a81\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406a84\n    uint64_t v5 = (int64_t)*v4; // 0x406a84\n    int64_t v6; // 0x406af2\n    if (v3 <= v5) {\n      lab_0x406aec_2:\n        // 0x406aec\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x406a72\n    int64_t v8 = v2; // 0x406a70\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x406aec\n        goto lab_0x406aec_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406aa8\n    int64_t v17; // 0x406ab6\n    int64_t * v18; // 0x406ad0\n    int64_t * v19; // 0x406ad3\n    int64_t v20; // 0x406ade\n    int64_t v21; // 0x406ab6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406ab3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x406ad0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x406ae7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x406aec\n            goto lab_0x406aec_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x406aec\n            goto lab_0x406aec_2;\n        }\n        // 0x406aa2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x406b2b\n    int64_t * v23 = (int64_t *)v22; // 0x406b30\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x406b33\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x406b30\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x406b47\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x406a9d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x406aec\n            goto lab_0x406aec_2;\n        }\n        // 0x406aa2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406ab3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x406ad0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x406ae7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x406aec\n                goto lab_0x406aec_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x406aec\n                goto lab_0x406aec_2;\n            }\n            // 0x406aa2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x406b10\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x406b30\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x406b47\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x406aec\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406b50",
            "funcStartAddr": "406b50",
            "funcEndAddr": "40716c",
            "decompiledFuncCode": "int64_t function_406b50(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x406b6f\n    int64_t v2 = *v1; // 0x406b6f\n    char * str2 = (char *)v2; // 0x406b7c\n    char c = *str2; // 0x406b7c\n    int64_t v3 = v2; // 0x406ba8\n    int64_t v4 = 0; // 0x406b50\n    int32_t v5; // 0x406b50\n    int64_t v6; // 0x406b50\n    int64_t v7; // 0x406b50\n    int64_t v8; // 0x406b50\n    int64_t v9; // 0x406b50\n    int64_t v10; // 0x406b50\n    int64_t v11; // 0x406b50\n    int64_t v12; // 0x406b50\n    int64_t v13; // 0x406b50\n    int64_t str3; // 0x406b50\n    int64_t v14; // 0x406b50\n    int64_t v15; // 0x406b50\n    int64_t v16; // 0x406b50\n    int64_t v17; // 0x406b50\n    int32_t v18; // 0x406b50\n    int32_t v19; // 0x406b50\n    int32_t v20; // 0x406b50\n    int32_t v21; // 0x406b50\n    int32_t v22; // 0x406b50\n    int32_t v23; // 0x406b50\n    int32_t v24; // 0x406b50\n    int32_t v25; // 0x406b50\n    int32_t v26; // 0x406b50\n    int32_t v27; // 0x406b50\n    int32_t v28; // 0x406b50\n    int32_t v29; // 0x406b50\n    int64_t nmemb; // 0x406b50\n    int64_t v30; // 0x406b50\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x406bac\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406ba8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406bb8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x406bbe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406b88\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x406bec\n                int64_t v34; // 0x406b50\n                int64_t v35; // 0x406b50\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406bf5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406d70;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406c06\n                int64_t v37 = *(int64_t *)v36; // 0x406c0a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406be0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406bf5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406d70;\n                        }\n                    }\n                    // 0x406c06\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x406c56:\n                    // 0x406c56\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406cb0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406e20\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406cb0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406dd0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x406c7a;\n                                } else {\n                                    // 0x406ddc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x406c7a;\n                                    } else {\n                                        // 0x406dea\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x406c7a;\n                                        } else {\n                                            goto lab_0x406cb0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x406c7a;\n                            }\n                        }\n                    }\n                }\n              lab_0x406cc1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406e96\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x407042\n                            flockfile(g35);\n                            int64_t v41 = *v1; // 0x407062\n                            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4070af\n                            int64_t v43 = (int64_t)g35;\n                            int64_t v44 = v43; // 0x4070c9\n                            int64_t v45; // 0x4070cb\n                            if (*(char *)v42 != 0) {\n                                // 0x4070cb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g35;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4070c3\n                            while (v17 + nmemb != v42) {\n                                // 0x4070c5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4070cb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g35;\n                                }\n                                // 0x4070b8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4070f0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g35);\n                            v40 = *v1;\n                        } else {\n                            // 0x406ea4\n                            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x406fff\n                        free((int64_t *)v17);\n                    }\n                    // 0x406ef9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406f10\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x406dbe\n                    return 63;\n                }\n                // 0x406ce0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406d64\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406d70:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406d80\n                    uint32_t v50 = *v49; // 0x406d80\n                    int64_t v51 = v50; // 0x406d80\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x406d8a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406d93\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x406fbf\n                                __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x406f6a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x406dbe\n                            return 63;\n                        }\n                        // 0x406e08\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40711f\n                                    __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40701d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x407030\n                                // 0x406dbe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x406f2e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406f42\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x406dab\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x406dae\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406db2\n                    int64_t result = v59; // 0x406db8\n                    if (v58 != 0) {\n                        // 0x406dba\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x406dbe\n                    return result;\n                }\n            } else {\n                // 0x406bbe\n                v5 = v32;\n            }\n            // break -> 0x406ce5\n            break;\n        }\n    }\n    // 0x406ce5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x406cfd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406d07\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x406dbe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406e49\n        __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406d36\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406d46\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406cb0:\n    // 0x406cb0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406cb0\n    int64_t v63 = *(int64_t *)v62; // 0x406cb4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406cc1\n        goto lab_0x406cc1;\n    }\n    goto lab_0x406c56;\n  lab_0x406c7a:\n    // 0x406c7a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x406b50\n    int32_t v65; // 0x406b50\n    int32_t v66; // 0x406b50\n    if (v27 != 0) {\n        goto lab_0x406cb0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406e30\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406cb0;\n            } else {\n                goto lab_0x406ca1;\n            }\n        } else {\n            // 0x406c95\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x406f8c\n                int64_t v67 = (int64_t)mem; // 0x406f8c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406cb0;\n                } else {\n                    // 0x406f9f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406ca1;\n                }\n            } else {\n                goto lab_0x406ca1;\n            }\n        }\n    }\n  lab_0x406ca1:\n    // 0x406ca1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406cb0;\n}\n"
        },
        {
            "funcName": "function_407170",
            "funcStartAddr": "407170",
            "funcEndAddr": "407736",
            "decompiledFuncCode": "int64_t function_407170(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407191\n    if (v3 < 1) {\n        // 0x40734e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40718d\n    int32_t v5 = *(int32_t *)a7; // 0x407199\n    uint64_t v6 = a1 & 0xffffffff; // 0x40719b\n    int64_t v7 = v2; // 0x4071a0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4071a3\n    *v8 = 0;\n    int64_t v9; // 0x407170\n    int64_t v10; // 0x407170\n    int64_t v11; // 0x407170\n    int64_t v12; // 0x407170\n    int64_t str; // 0x407170\n    int64_t v13; // 0x407170\n    int64_t v14; // 0x407170\n    int64_t v15; // 0x407170\n    int64_t v16; // 0x407170\n    int64_t v17; // 0x407170\n    int32_t v18; // 0x407170\n    char v19; // 0x407170\n    if (v5 == 0) {\n        // 0x407388\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4071ba;\n    } else {\n        // 0x4071b3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x407200\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x407203\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4072c8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x407216\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x407226\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4072dc;\n                } else {\n                    goto lab_0x407238;\n                }\n            }\n        } else {\n            goto lab_0x4071ba;\n        }\n    }\n  lab_0x4071ba:\n    // 0x4071ba\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4071c0\n    *v24 = 0;\n    int64_t v25; // 0x407170\n    int64_t v26; // 0x407170\n    int64_t v27; // 0x407170\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4072b0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4072bd;\n        }\n        case 43: {\n            // 0x4075c0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4072bd;\n        }\n        default: {\n            // 0x4071dc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40753f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407658\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4072bd;\n                } else {\n                    // 0x40754d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4071ea;\n                }\n            } else {\n                goto lab_0x4071ea;\n            }\n        }\n    }\n  lab_0x4072c8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4072cf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x407238;\n    } else {\n        goto lab_0x4072dc;\n    }\n  lab_0x4071ea:\n    // 0x4071ea\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4072bd;\n  lab_0x4072bd:\n    // 0x4072bd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4072c8;\n  lab_0x407238:;\n    uint32_t v30 = *(int32_t *)a7; // 0x407238\n    int64_t v31 = v30; // 0x407238\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40723a\n    if ((int64_t)*v32 > v31) {\n        // 0x40723f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x407242\n    if (*v33 > v30) {\n        // 0x407247\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40724a\n    int64_t v35 = v31; // 0x40724e\n    int64_t v36 = v15; // 0x40724e\n    int64_t v37; // 0x407170\n    int64_t v38; // 0x407170\n    int64_t v39; // 0x407170\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4073b8\n        int64_t v41 = v40; // 0x4073b8\n        v2 = v41;\n        int64_t v42; // 0x407170\n        if (*v33 == v40) {\n            // 0x4075a0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4075a8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4073c4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4073c8\n                function_406a70(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4073d8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4073e1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4073ea\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407401\n            int64_t v47 = v45 & 0xffffffff; // 0x407405\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40740e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x407414\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x407416;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4073f0\n            int64_t v49 = v48 & 0xffffffff; // 0x4073f0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407401\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40740e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x407414\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x407416;\n                    }\n                }\n                // 0x4073f0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4075b8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x407416;\n    } else {\n        goto lab_0x407254;\n    }\n  lab_0x4072dc:\n    // 0x4072dc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4072df\n    int64_t v51 = v12; // 0x4072df\n    int64_t v52 = v14; // 0x4072df\n    if (*(char *)v10 == 0) {\n        goto lab_0x407238;\n    } else {\n        goto lab_0x4072e5;\n    }\n  lab_0x407254:;\n    int32_t v53 = v35; // 0x407254\n    int64_t v54; // 0x407170\n    int64_t v55; // 0x407170\n    int64_t v56; // 0x407170\n    int64_t v57; // 0x407170\n    int64_t v58; // 0x407170\n    int64_t v59; // 0x407170\n    char * v60; // 0x407170\n    int64_t v61; // 0x407170\n    int64_t v62; // 0x407269\n    int64_t v63; // 0x407170\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4073a3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4073a6;\n    } else {\n        // 0x40725c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407170\n        int64_t v66 = v65 ? -1 : 1; // 0x407270\n        int64_t v67 = (int64_t)\"--\"; // 0x407170\n        int64_t v68 = v62; // 0x407170\n        int64_t v69 = 3; // 0x407270\n        unsigned char v70 = *(char *)v68; // 0x407270\n        char v71 = *(char *)v67; // 0x407270\n        char v72 = v71; // 0x407270\n        bool v73 = false; // 0x407270\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x407360\n            if (*(char *)v62 == 45) {\n                // 0x407420\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x407420\n                if (c == 0) {\n                    goto lab_0x40736a;\n                } else {\n                    // 0x40742d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4074b0;\n                    } else {\n                        if (c == 45) {\n                            // 0x407693\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x407505;\n                        } else {\n                            // 0x40743e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4074b0;\n                            } else {\n                                // 0x407443\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x407464;\n                                } else {\n                                    // 0x40744a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4074b0;\n                                    } else {\n                                        goto lab_0x407464;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40736a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407280\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407283\n            int64_t v77 = v35 + 1; // 0x407286\n            int32_t v78 = v77; // 0x407289\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4075f0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407297\n                    function_406a70(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4072a5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4073a6;\n        }\n    }\n  lab_0x4072e5:;\n    // 0x4072e5\n    int64_t v79; // bp-104, 0x407170\n    int64_t v80 = &v79; // 0x40717a\n    int64_t v81 = v50 + 1; // 0x4072e5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4072ec\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4072f1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4072f5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4072f9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407301\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407306\n    int32_t c2 = v84; // 0x407306\n    char * found_char_pos = strchr(str2, c2); // 0x407306\n    int64_t v87 = *v82; // 0x40730b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x407315\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x407320\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x407610\n            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4075dd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40734e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407306\n    char v91 = *(char *)(v90 + 1); // 0x40733b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4072f5\n        if (v91 != 58) {\n            // 0x40734e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x407564\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x407668\n                *v8 = 0;\n            } else {\n                // 0x40764c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40758e\n            *v83 = 0;\n            // 0x40734e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40756e\n        if (v93 != 0) {\n            // 0x407600\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40758e\n            *v83 = 0;\n            // 0x40734e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407581\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40758e\n            *v83 = 0;\n            // 0x40734e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4076ca\n            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40767a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407681\n        // 0x40758e\n        *v83 = 0;\n        // 0x40734e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4074d9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4074db\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x407700\n                __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4076b1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4076b8\n            // 0x40734e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4074e6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4074ea\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x407505;\n  lab_0x407416:\n    // 0x407416\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x407254;\n  lab_0x407505:;\n    int64_t v99 = function_406b50(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x407523\n    // 0x40734e\n    return v99 & 0xffffffff;\n  lab_0x4073a6:;\n    int32_t v100 = v55; // 0x4073a6\n    if (v100 != (int32_t)v59) {\n        // 0x4073aa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40734e\n    return 0xffffffff;\n  lab_0x40736a:\n    // 0x40736a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407371\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40734e\n    return v99 & 0xffffffff;\n  lab_0x4074b0:\n    // 0x4074b0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4072e5;\n  lab_0x407464:\n    // 0x407464\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_406b50(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40748a\n    if ((int32_t)v101 != -1) {\n        // 0x40734e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40749f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4074b0;\n}\n"
        },
        {
            "funcName": "function_407740",
            "funcStartAddr": "407740",
            "funcEndAddr": "407796",
            "decompiledFuncCode": "int64_t function_407740(int64_t a1) {\n    // 0x407740\n    *(int32_t *)&g70 = g30;\n    *(int32_t *)&g71 = g29;\n    int64_t v1; // 0x407740\n    int64_t result = function_407170(v1, v1, v1, v1, v1, v1, &g70, a1 & 0xffffffff); // 0x407766\n    g30 = *(int32_t *)&g70;\n    g75 = (char *)g73;\n    *(int32_t *)&g28 = g72;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4077a0",
            "funcStartAddr": "4077a0",
            "funcEndAddr": "4077b8",
            "decompiledFuncCode": "int64_t function_4077a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4077a0\n    return function_407740(1);\n}\n"
        },
        {
            "funcName": "function_4077c0",
            "funcStartAddr": "4077c0",
            "funcEndAddr": "4077d3",
            "decompiledFuncCode": "int64_t function_4077c0(int64_t a1, int64_t a2, char * a3, char (**a4)[12], int32_t a5, int64_t a6) {\n    // 0x4077c0\n    return function_407740(0);\n}\n"
        },
        {
            "funcName": "function_4077e0",
            "funcStartAddr": "4077e0",
            "funcEndAddr": "4077f5",
            "decompiledFuncCode": "int64_t function_4077e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4077e0\n    return function_407170(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407800",
            "funcStartAddr": "407800",
            "funcEndAddr": "407816",
            "decompiledFuncCode": "int64_t function_407800(void) {\n    // 0x407800\n    return function_407740(0);\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "407838",
            "decompiledFuncCode": "int64_t function_407820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407820\n    return function_407170(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407840",
            "funcStartAddr": "407840",
            "funcEndAddr": "4078ba",
            "decompiledFuncCode": "int64_t function_407840(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40784b\n    int64_t v2 = (int64_t)&g1; // 0x40784b\n    int32_t * pwc; // 0x407840\n    int64_t v3; // 0x407840\n    int64_t n; // 0x407840\n    if (a2 == 0) {\n        goto lab_0x407892;\n    } else {\n        // 0x40784d\n        if (a3 == 0) {\n            // 0x407878\n            return -2;\n        }\n        // 0x407859\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407892;\n        } else {\n            goto lab_0x407864;\n        }\n    }\n  lab_0x407892:\n    // 0x407892\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407840\n    pwc = (int32_t *)&v4;\n    goto lab_0x407864;\n  lab_0x407864:;\n    char * wstr = (char *)v3; // 0x40786a\n    int64_t ps; // 0x407840\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40786a\n    int64_t result = v5; // 0x40786a\n    if (v5 < 0xfffffffe) {\n        // 0x407878\n        return result;\n    }\n    int64_t result2 = result; // 0x4078a9\n    if ((char)function_403be0(0, v3) == 0) {\n        // 0x4078ab\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407878\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "4079c4",
            "decompiledFuncCode": "int64_t function_4078c0(int64_t result, int32_t a2, int64_t a3) {\n    // 0x4078c0\n    if (a3 == 0) {\n        // 0x4078f9\n        return 0;\n    }\n    int64_t v1 = result; // 0x4078cc\n    int64_t v2 = a3; // 0x4078cc\n    int64_t result2; // 0x4078c0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x4078ce\n        int64_t v4 = result; // 0x4078d1\n        if ((char)result == v3) {\n            // 0x4078f9\n            return result;\n        }\n        int64_t v5 = a3; // 0x4078d1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x4078e0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x407900;\n            }\n            // 0x4078e6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x4078f9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x4078f9\n        return result2;\n    }\n  lab_0x407900:;\n    int64_t result3 = v1; // 0x40792d\n    int64_t v6 = v2; // 0x40792d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x40790f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x40791c\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x407926\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x407946\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x407975\n            int64_t v13 = v1 + 8; // 0x407979\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x407963\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x40798c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x407983\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x4078f9\n                return 0;\n            }\n        }\n    }\n  lab_0x40798c:;\n    char v15 = a2; // 0x40798c\n    if (*(char *)result3 == v15) {\n        // 0x4078f9\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x4079a0\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x4078f9\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x4078f9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4079d0",
            "funcStartAddr": "4079d0",
            "funcEndAddr": "407a2d",
            "decompiledFuncCode": "int64_t function_4079d0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4079d7\n    int64_t v2; // 0x4079d0\n    int64_t result = function_406810(a1, v2); // 0x4079e8\n    if ((v2 & 32) != 0) {\n        // 0x407a10\n        if ((int32_t)result == 0) {\n            // 0x407a14\n            *__errno_location() = 0;\n        }\n        // 0x407a0a\n        return 0xffffffff;\n    }\n    // 0x4079f1\n    if ((int32_t)result == 0) {\n        // 0x407a0a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4079f8\n    if (v1 == 0) {\n        // 0x4079fa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x407a0a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407f92",
            "decompiledFuncCode": "int64_t function_407a30(void) {\n    char * v1 = nl_langinfo(14); // 0x407a46\n    char * v2 = g74; // 0x407a4b\n    char * v3; // 0x407a30\n    int64_t v4; // 0x407a30\n    int64_t v5; // 0x407a30\n    int64_t v6; // 0x407a30\n    int64_t v7; // 0x407a30\n    int32_t size; // 0x407a30\n    int32_t size2; // 0x407a30\n    int32_t len; // 0x407b02\n    int64_t v8; // 0x407b02\n    char * env_val; // 0x407aed\n    if (v2 == NULL) {\n        // 0x407ae8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407b55;\n        } else {\n            // 0x407afa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407b55;\n            } else {\n                // 0x407aff\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x407aed\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407f85\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407b55;\n                    } else {\n                        // 0x407ef9\n                        size2 = len + 14;\n                        goto lab_0x407b1b;\n                    }\n                } else {\n                    goto lab_0x407b1b;\n                }\n            }\n        }\n    } else {\n        // 0x407a30\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x407a6a;\n    }\n  lab_0x407d9c:;\n    // 0x407d9c\n    struct _IO_FILE * stream; // 0x407bdb\n    int32_t v10 = __uflow(stream); // 0x407d9f\n    int64_t v11; // 0x407a30\n    int64_t v12 = v11; // 0x407da9\n    int64_t v13; // 0x407a30\n    int64_t v14 = v13; // 0x407da9\n    int32_t v15 = v10; // 0x407da9\n    int64_t v16; // 0x407a30\n    int64_t v17 = v16; // 0x407da9\n    int64_t v18 = v11; // 0x407da9\n    int64_t v19 = v13; // 0x407da9\n    int64_t v20 = v16; // 0x407da9\n    if (v10 == -1) {\n        // break -> 0x407daf\n        goto lab_0x407daf;\n    }\n    goto lab_0x407c29;\n  lab_0x407c1e:;\n    // 0x407c1e\n    int64_t v90; // 0x407a30\n    int64_t * v32; // 0x407c10\n    *v32 = v90 + 1;\n    int64_t v89; // 0x407a30\n    v12 = v89;\n    int64_t v91; // 0x407a30\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x407a30\n    v17 = v92;\n    goto lab_0x407c29;\n  lab_0x407c29:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x407a30\n    int32_t v25; // bp-120, 0x407a30\n    int32_t v26; // bp-184, 0x407a30\n    int64_t v27; // 0x407bdb\n    int64_t v28; // 0x407bf8\n    int64_t v29; // 0x407bfd\n    int64_t * v30; // 0x407c14\n    switch (c) {\n        case 32: {\n            goto lab_0x407c10;\n        }\n        case 10: {\n            goto lab_0x407c10;\n        }\n        case 9: {\n            goto lab_0x407c10;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407e01\n            int32_t v33; // 0x407a30\n            char v34; // 0x407a30\n            int32_t v35; // 0x407e0e\n            if (v31 < *v30) {\n                // 0x407de0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x407e0b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407e01\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407de0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x407e0b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407df0\n                v36 = v33;\n            }\n            // 0x407edf\n            if (v36 == -1) {\n                // break -> 0x407daf\n                break;\n            }\n            goto lab_0x407c10;\n        }\n        default: {\n            // 0x407c3f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x407daf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407c68\n            int64_t v39 = v37 + 4; // 0x407c6a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407c76\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407c78\n            while (v41 == 0) {\n                // 0x407c68\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407c96\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407ca2\n            int64_t v45 = v43 + 4; // 0x407ca4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407cb0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407cb2\n            while (v47 == 0) {\n                // 0x407ca2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x407c9f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407cc8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407cd8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x407cdc\n            int64_t v52 = v51 + v48; // 0x407ce5\n            int64_t * mem; // 0x407a30\n            int64_t v53; // 0x407a30\n            int64_t v54; // 0x407a30\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x407e1b\n                int64_t v56 = v55 + 3; // 0x407e27\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407d01\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407d10\n            if (mem == NULL) {\n                // 0x407f3c\n                free((int64_t *)v21);\n                function_406810(v27, v53);\n                v24 = (int64_t)&g1;\n                goto lab_0x407bb4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407d28\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407d32\n            uint32_t v62 = (int32_t)v59; // 0x407d35\n            int64_t v63; // 0x407a30\n            if (v62 >= 8) {\n                // 0x407e44\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x407e5e\n                int64_t v66 = v61 - v65; // 0x407e62\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x407e6d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x407e7e\n                    int64_t v70 = v69 & 0xffffffff; // 0x407e7e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x407e7b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x407f0f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407d47\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x407d4b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x407d5b\n            int64_t v74 = v60 - 1; // 0x407d5f\n            uint32_t v75 = (int32_t)v73; // 0x407d64\n            int64_t v76; // 0x407a30\n            if (v75 >= 8) {\n                // 0x407e92\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x407e9c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x407eac\n                int64_t v80 = v74 - v79; // 0x407eb0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x407ebb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x407ecb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407ec9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407f26\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x407f2e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407d76\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x407d7a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407f73\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x407d8e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x407c1e;\n            } else {\n                goto lab_0x407d9c;\n            }\n        }\n    }\n  lab_0x407c10:;\n    int64_t v93 = v23; // 0x407a30\n    int64_t v94 = v22; // 0x407a30\n    int64_t v95 = v21; // 0x407a30\n    goto lab_0x407c10_2;\n  lab_0x407b55:;\n    int64_t * mem3 = malloc(size); // 0x407b55\n    int64_t v97 = (int64_t)&g1; // 0x407b60\n    int64_t v98; // 0x407a30\n    int64_t path; // 0x407a30\n    if (mem3 == NULL) {\n        goto lab_0x407b32;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407b55\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407b76;\n    }\n  lab_0x407a6a:;\n    int64_t str = v1 == NULL ? (int64_t)&g1 : (int64_t)v1; // 0x407a5d\n    char v100 = *v3; // 0x407a6a\n    int64_t v101; // 0x407a30\n    if (v100 == 0) {\n        // 0x407ac4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x407a30\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x407a30\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407ab0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407ab7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x407a80\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x407a8d\n        char v107 = *(char *)v106; // 0x407a92\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407ac4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x407a9b\n    v104 = v103 + 1;\n  lab_0x407ab7:\n    // 0x407ac4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x407b32:;\n    char * v108 = (char *)v97;\n    g74 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x407a6a;\n  lab_0x407b76:;\n    int64_t v109 = v98 + path; // 0x407b76\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407ba2\n    v24 = (int64_t)&g1;\n    if (fd >= 0) {\n        // 0x407bd1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407f02\n            close(fd);\n            v24 = (int64_t)&g1;\n        } else {\n            // 0x407bf5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407c10_2:;\n                uint64_t v96 = *v32; // 0x407c10\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x407d9c;\n                } else {\n                    goto lab_0x407c1e;\n                }\n            }\n          lab_0x407daf:\n            // 0x407daf\n            function_406810(v27, v19);\n            v24 = (int64_t)&g1;\n            if (v18 != 0) {\n                // 0x407dce\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407bb4;\n  lab_0x407b1b:;\n    int64_t * mem4 = malloc(size2); // 0x407b1b\n    v97 = (int64_t)&g1;\n    if (mem4 != NULL) {\n        // 0x407bc1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407b76;\n    } else {\n        goto lab_0x407b32;\n    }\n  lab_0x407bb4:\n    // 0x407bb4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x407b32;\n}\n"
        },
        {
            "funcName": "function_407fa0",
            "funcStartAddr": "407fa0",
            "funcEndAddr": "408054",
            "decompiledFuncCode": "int64_t function_407fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x407fba\n    int64_t v2 = a3; // 0x407fc2\n    int64_t v3 = a1; // 0x407fc2\n    int64_t v4 = a4; // 0x407fc2\n    int64_t v5 = a2; // 0x407fc2\n    *v1 = 0;\n    char * str = (char *)v3; // 0x408000\n    char * str2 = (char *)v2; // 0x408000\n    int32_t strcoll_rc = strcoll(str, str2); // 0x408000\n    while (strcoll_rc == 0) {\n        int64_t v6 = (int64_t)strlen(str) + 1; // 0x407fd3\n        int64_t v7 = (int64_t)strlen(str2) + 1; // 0x407fdf\n        v4 -= v7;\n        v5 -= v6;\n        if (v5 == 0) {\n            // 0x408020\n            return v4 != 0 ? 0xffffffff : 0;\n        }\n        // 0x407fee\n        v2 += v7;\n        v3 += v6;\n        if (v4 == 0) {\n            // 0x408040\n            return 1;\n        }\n        *v1 = 0;\n        str = (char *)v3;\n        str2 = (char *)v2;\n        strcoll_rc = strcoll(str, str2);\n    }\n    // 0x408009\n    return strcoll_rc;\n}\n"
        },
        {
            "funcName": "function_408060",
            "funcStartAddr": "408060",
            "funcEndAddr": "408101",
            "decompiledFuncCode": "int64_t function_408060(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n == a4) {\n        // 0x40807f\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x4080f0\n            *__errno_location() = 0;\n            // 0x4080dc\n            return 0;\n        }\n    }\n    char * v1 = (char *)(n + str); // 0x4080a1\n    char * v2 = (char *)(a4 + str2); // 0x4080a5\n    *v1 = 0;\n    *v2 = 0;\n    int64_t v3 = function_407fa0(str, n + 1, str2, a4 + 1); // 0x4080c3\n    // 0x4080dc\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408110",
            "funcStartAddr": "408110",
            "funcEndAddr": "408173",
            "decompiledFuncCode": "int64_t function_408110(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n != a4 || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x408158\n        return function_407fa0(str, n, str2, a4);\n    }\n    // 0x40813a\n    *__errno_location() = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408180",
            "funcStartAddr": "408180",
            "funcEndAddr": "4081dd",
            "decompiledFuncCode": "int64_t function_408180(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408180\n    return function_401530();\n}\n"
        },
        {
            "funcName": "function_4081e0",
            "funcStartAddr": "4081e0",
            "funcEndAddr": "4081e1",
            "decompiledFuncCode": "int64_t function_4081e0(void) {\n    // 0x4081e0\n    int64_t result; // 0x4081e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4081f0",
            "funcStartAddr": "4081f0",
            "funcEndAddr": "408208",
            "decompiledFuncCode": "int64_t function_4081f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4081f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_408208",
            "funcStartAddr": "408208",
            "funcEndAddr": "408228",
            "decompiledFuncCode": "int64_t function_408208(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x408212\n    while (*(int64_t *)v1 != -1) {\n        // 0x408213\n        v1 -= 8;\n    }\n    // 0x408224\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_join.elf"
}