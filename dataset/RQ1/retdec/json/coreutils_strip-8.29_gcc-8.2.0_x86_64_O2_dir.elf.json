{
    "funcInfo": [
        {
            "funcName": "function_402e50",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402e55",
            "decompiledFuncCode": "int64_t function_402e50(void) {\n    // 0x402e50\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e55",
            "funcStartAddr": "402e55",
            "funcEndAddr": "402e5a",
            "decompiledFuncCode": "int64_t function_402e55(void) {\n    // 0x402e55\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e5a",
            "funcStartAddr": "402e5a",
            "funcEndAddr": "402e5f",
            "decompiledFuncCode": "int64_t function_402e5a(void) {\n    // 0x402e5a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e5f",
            "funcStartAddr": "402e5f",
            "funcEndAddr": "402e64",
            "decompiledFuncCode": "int64_t function_402e5f(void) {\n    // 0x402e5f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e64",
            "funcStartAddr": "402e64",
            "funcEndAddr": "402e69",
            "decompiledFuncCode": "int64_t function_402e64(void) {\n    // 0x402e64\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e69",
            "funcStartAddr": "402e69",
            "funcEndAddr": "402e6e",
            "decompiledFuncCode": "int64_t function_402e69(void) {\n    // 0x402e69\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e6e",
            "funcStartAddr": "402e6e",
            "funcEndAddr": "402e73",
            "decompiledFuncCode": "int64_t function_402e6e(void) {\n    // 0x402e6e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e73",
            "funcStartAddr": "402e73",
            "funcEndAddr": "402e78",
            "decompiledFuncCode": "int64_t function_402e73(void) {\n    // 0x402e73\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e78",
            "funcStartAddr": "402e78",
            "funcEndAddr": "402e7d",
            "decompiledFuncCode": "int64_t function_402e78(void) {\n    // 0x402e78\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e7d",
            "funcStartAddr": "402e7d",
            "funcEndAddr": "402e82",
            "decompiledFuncCode": "int64_t function_402e7d(void) {\n    // 0x402e7d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e82",
            "funcStartAddr": "402e82",
            "funcEndAddr": "402e87",
            "decompiledFuncCode": "int64_t function_402e82(void) {\n    // 0x402e82\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402e87",
            "funcStartAddr": "402e87",
            "funcEndAddr": "402e8c",
            "decompiledFuncCode": "int64_t function_402e87(void) {\n    // 0x402e87\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e90",
            "funcStartAddr": "402e90",
            "funcEndAddr": "404719",
            "decompiledFuncCode": "int64_t function_402e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x402e90\n    function_410670(a2);\n    setlocale(LC_ALL, (char *)&g24);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g76 = 2;\n    function_418780(0x40b710, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g124 = 1;\n    g170 = -0x8000000000000000;\n    g108 = 0;\n    g172 = 0;\n    g171 = -1;\n    g128 = 0;\n    int64_t v1; // 0x402e90\n    if (g73 == 2) {\n        // 0x403cbe\n        g154 = 2;\n        function_411c30(0, 7);\n        v1 = 7;\n    } else {\n        if (g73 != 3) {\n            if (g73 != 1) {\n                // 0x403101\n                abort();\n                // UNREACHABLE\n            }\n            // 0x403c9d\n            if (isatty(1) != 0) {\n                // 0x40431a\n                g154 = 2;\n                function_411c30(0, 3);\n                g128 = 1;\n                v1 = 3;\n            } else {\n                // 0x403caf\n                g154 = 1;\n                v1 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\";\n            }\n        } else {\n            // 0x402f3e\n            g154 = 0;\n            function_411c30(0, 7);\n            v1 = 7;\n        }\n    }\n    // 0x402f54\n    g151 = 0;\n    g153 = 0;\n    g152 = 0;\n    g149 = 0;\n    g148 = 0;\n    g143 = 0;\n    g136 = 0;\n    g135 = 1;\n    g134 = 0;\n    g133 = 0;\n    g131 = 0;\n    g130 = 0;\n    g129 = 0;\n    g169 = 0;\n    char * env_val = getenv(\"QUOTING_STYLE\"); // 0x402fd2\n    int64_t v2 = a3; // 0x402fdd\n    int64_t v3 = v1; // 0x402fdd\n    if (env_val != NULL) {\n        int64_t v4 = (int64_t)env_val; // 0x402fd2\n        int64_t v5 = function_40acf0(v4, g40, (int64_t *)&g39, 4); // 0x402ff1\n        if ((int32_t)v5 < 0) {\n            // 0x40385c\n            function_412290(v4);\n            char * format = dcgettext(NULL, \"ignoring invalid value of environment variable QUOTING_STYLE: %s\", 5); // 0x403873\n            error(0, (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\" ^ (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\", format);\n            v2 = (int64_t)format;\n            v3 = (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\" ^ (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\";\n        } else {\n            uint32_t v6 = *(int32_t *)((0x100000000 * v5 >> 30) + (int64_t)&g39); // 0x403002\n            int64_t v7 = v6; // 0x403002\n            function_411c30(0, v7);\n            v2 = (int64_t)&g39;\n            v3 = v7;\n        }\n    }\n    // 0x40300e\n    g123 = 80;\n    char * env_val2 = getenv(\"COLUMNS\"); // 0x40301e\n    if (env_val2 != NULL) {\n        // 0x40302b\n        if (*env_val2 != 0) {\n            int64_t v8 = (int64_t)env_val2; // 0x40301e\n            if ((char)function_404b40(v8, v3, v2) == 0) {\n                // 0x40389e\n                function_412290(v8);\n                error(0, (int32_t)\"ignoring invalid width in environment variable COLUMNS: %s\" ^ (int32_t)\"ignoring invalid width in environment variable COLUMNS: %s\", dcgettext(NULL, \"ignoring invalid width in environment variable COLUMNS: %s\", 5));\n            }\n        }\n    }\n    // 0x403034\n    int16_t v9; // 0x402e90\n    if (v9 != 0 == (ioctl(1, 0x5413) != -1)) {\n        // 0x403850\n        g123 = v9;\n    }\n    char * env_val3 = getenv(\"TABSIZE\"); // 0x403062\n    g125 = 8;\n    int64_t v10; // 0x402e90\n    if (env_val3 != NULL) {\n        int64_t v11 = (int64_t)env_val3; // 0x403062\n        int64_t v12; // bp-72, 0x402e90\n        if ((int32_t)function_412df0(v11, 0, 0, &v12, 0, v10) != 0) {\n            // 0x403d34\n            function_412290(v11);\n            error(0, (int32_t)\"ignoring invalid tab size in environment variable TABSIZE: %s\" ^ (int32_t)\"ignoring invalid tab size in environment variable TABSIZE: %s\", dcgettext(NULL, \"ignoring invalid tab size in environment variable TABSIZE: %s\", 5));\n        } else {\n            // 0x403096\n            g125 = v12;\n        }\n    }\n    uint64_t v13 = a1 & 0xffffffff; // 0x402e99\n    int64_t v14; // bp-104, 0x402e90\n    int64_t v15 = &v14; // 0x402e9f\n    int64_t v16 = v15 + 32; // 0x4030b8\n    int32_t * v17 = (int32_t *)v16; // 0x4030cc\n    *v17 = -1;\n    int64_t v18 = function_416e00(v13, a2, \"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\", &g14, v16, v10); // 0x4030d4\n    int64_t v19 = a2; // 0x4030dc\n    int64_t v20 = 0; // 0x4030dc\n    int64_t v21 = 0; // 0x4030dc\n    int64_t v22 = 0; // 0x4030dc\n    int64_t v23; // 0x402e90\n    int64_t v24; // 0x402e90\n    int64_t v25; // 0x402e90\n    int64_t v26; // 0x402e90\n    int64_t v27; // 0x402e90\n    int64_t v28; // 0x402e90\n    int64_t v29; // 0x402e90\n    int64_t v30; // 0x402e90\n    int64_t v31; // 0x402e90\n    int64_t v32; // 0x402e90\n    int64_t v33; // 0x402e90\n    int64_t v34; // 0x402e90\n    int64_t v35; // 0x402e90\n    int64_t v36; // 0x402e90\n    int64_t v37; // 0x402e90\n    int64_t v38; // 0x402e90\n    int64_t v39; // 0x402e90\n    int64_t v40; // 0x402e90\n    int32_t v41; // 0x4046d0\n    if ((int32_t)v18 != -1) {\n        int64_t * v42 = (int64_t *)(v15 - 8);\n        int64_t * v43 = (int64_t *)(v15 - 16);\n        int64_t * v44 = (int64_t *)(v15 + 8);\n        v23 = v18;\n        v30 = 0;\n        v27 = 0;\n        v24 = 0;\n        v37 = a2;\n        while (true) {\n          lab_0x4030de:\n            // 0x4030de\n            v38 = v37;\n            v34 = v33;\n            v25 = v24;\n            v28 = v27;\n            v31 = v30;\n            int64_t v45 = v23 + 131; // 0x4030de\n            g210 = v45 & 0xffffffff;\n            v39 = v38;\n            v35 = v34;\n            v26 = v25;\n            v29 = v28;\n            v32 = 1;\n            v40 = v38;\n            switch ((int32_t)v45) {\n                case 0: {\n                    int64_t v46 = 1; // 0x403810\n                    int64_t v47 = (int64_t)\"ls\"; // 0x403810\n                    if (g73 != 1) {\n                        // 0x403816\n                        v47 = g73 != 2 ? (int64_t)\"vdir\" : (int64_t)\"dir\";\n                        v46 = (int64_t)\"vdir\";\n                    }\n                    // 0x403827\n                    *v42 = v46;\n                    *v43 = 0;\n                    function_412840((int64_t)g86, (char *)v47, \"GNU coreutils\", (int64_t)g74, \"Richard M. Stallman\", \"David MacKenzie\");\n                    exit(0);\n                    // UNREACHABLE\n                }\n                case 1: {\n                    // 0x40450a\n                    function_40a530(0);\n                    // UNREACHABLE\n                }\n                case 180: {\n                    // 0x4037e4\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    if (g154 != 0) {\n                        // 0x4037f1\n                        g154 = 1;\n                        v39 = v38;\n                        v35 = v34;\n                        v26 = v25;\n                        v29 = v28;\n                        v32 = v31;\n                    }\n                    goto lab_0x4030b8;\n                }\n                case 196: {\n                    // 0x4037c8\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    if (g131 == 0) {\n                        // 0x4037d5\n                        g131 = 1;\n                        v39 = v38;\n                        v35 = v34;\n                        v26 = v25;\n                        v29 = v28;\n                        v32 = v31;\n                    }\n                    goto lab_0x4030b8;\n                }\n                case 197: {\n                    int64_t v48 = function_412980(16); // 0x403782\n                    *(int64_t *)v48 = (int64_t)\"*~\";\n                    *(int64_t *)(v48 + 8) = g130;\n                    g130 = v48;\n                    int64_t v49 = function_412980(16); // 0x4037a5\n                    *(int64_t *)v49 = (int64_t)\".*~\";\n                    *(int64_t *)(v49 + 8) = g130;\n                    g130 = v49;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 198: {\n                    // 0x40376e\n                    g154 = 2;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 199: {\n                    // 0x403762\n                    g144 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 201: {\n                    // 0x403753\n                    g143 = 3;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 202: {\n                    // 0x403747\n                    g70 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 203: {\n                    // 0x403738\n                    g135 = 3;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 204: {\n                    // 0x403703\n                    *v44 = (int64_t)g202;\n                    int64_t v50 = function_412980(16); // 0x403714\n                    *(int64_t *)v50 = *v44;\n                    *(int64_t *)(v50 + 8) = g130;\n                    g130 = v50;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 207: {\n                    // 0x4036f4\n                    g135 = 5;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 209: {\n                    // 0x4036e6\n                    function_411c30(0, 0);\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 212: {\n                    // 0x4036d5\n                    function_411c30(0, 5);\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 213: {\n                    // 0x4036c9\n                    g134 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 214: {\n                    // 0x4036b4\n                    g152 = 2;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 215: {\n                    int64_t v51 = (int64_t)dcgettext(NULL, \"invalid tab size\", 5); // 0x403681\n                    *v42 = 5;\n                    *v43 = 2;\n                    int64_t v52 = function_412c10((int64_t)g202, (int32_t)\"invalid tab size\" ^ (int32_t)\"invalid tab size\", 0, -1, (int64_t *)&g24, v51, (int64_t)&g209); // 0x4036a1\n                    g125 = v52;\n                    v39 = v38;\n                    v35 = v51;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 216: {\n                    // 0x403660\n                    g152 = -1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 219: {\n                    // 0x40364b\n                    g152 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 221: {\n                    // 0x40363f\n                    g169 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 228: {\n                    // 0x403630\n                    g131 = 2;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 229: {\n                    // 0x40361f\n                    function_411c30(0, 7);\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 230: {\n                    // 0x403610\n                    g153 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 231: {\n                    // 0x403604\n                    g133 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 233: {\n                    // 0x4035c3\n                    g131 = 2;\n                    g152 = -1;\n                    if (g154 == 0) {\n                        // 0x404266\n                        g154 = (int32_t)(isatty(1) == 0) + 2;\n                    }\n                    // 0x4035e4\n                    g148 = 0;\n                    g142 = 0;\n                    *(char *)&g141 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 234: {\n                    // 0x4035ad\n                    g154 = 0;\n                    g71 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 235: {\n                    // 0x40357e\n                    *(int32_t *)&g147 = 176;\n                    g145 = 176;\n                    g146 = 1;\n                    g69 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 236: {\n                    // 0x403572\n                    g136 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 238: {\n                    goto lab_0x4030b8;\n                }\n                case 239: {\n                    goto lab_0x40310d;\n                }\n                case 240: {\n                    // 0x403558\n                    g154 = 4;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 241: {\n                    // 0x403106\n                    g149 = 1;\n                    goto lab_0x40310d;\n                }\n                case 242: {\n                    // 0x403542\n                    g154 = 0;\n                    g70 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 243: {\n                    // 0x403533\n                    g143 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 244: {\n                    // 0x403527\n                    g128 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 245: {\n                    // 0x40351b\n                    g151 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 246: {\n                    // 0x40350f\n                    g148 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 247: {\n                    // 0x4034df\n                    g152 = 4;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 248: {\n                    // 0x4034d0\n                    g153 = 2;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 249: {\n                    goto lab_0x4034bb;\n                }\n                case 250: {\n                    int64_t v53 = function_404b40((int64_t)g202, v38, (int64_t)\"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\"); // 0x403475\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    if ((char)v53 != 0) {\n                        goto lab_0x4030b8;\n                    } else {\n                        int64_t v54 = function_412290((int64_t)g202); // 0x403489\n                        error(2, (int32_t)\"invalid line width\" ^ (int32_t)\"invalid line width\", \"%s: %s\", dcgettext(NULL, \"invalid line width\", 5), (char *)v54);\n                        v40 = v54;\n                        goto lab_0x4034bb;\n                    }\n                }\n                case 251: {\n                    // 0x403500\n                    g154 = 3;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 259: {\n                    // 0x4034f4\n                    g150 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 260: {\n                    int64_t v55 = function_40dfa0((int64_t)g202, &g147, &g146); // 0x403442\n                    int64_t v56 = v55; // 0x403449\n                    if ((int32_t)v55 != 0) {\n                        // 0x4046c9\n                        v41 = *v17;\n                        function_413220(v56 & 0xffffffff, v41, 0, &g14, (int64_t)g202);\n                        // UNREACHABLE\n                    }\n                    // 0x40344f\n                    g145 = *(int32_t *)&g147;\n                    g69 = g146;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 261: {\n                    // 0x4033db\n                    v36 = v34;\n                    if (g202 == NULL) {\n                        goto lab_0x403c12;\n                    } else {\n                        int64_t v57 = function_40afb0(\"--color\", (int64_t)g202, g7, (int64_t *)&g6, 4, g75); // 0x403407\n                        int32_t v58 = *(int32_t *)(4 * v57 + (int64_t)&g6); // 0x40340c\n                        v36 = g75;\n                        switch (v58) {\n                            case 1: {\n                                goto lab_0x403c12;\n                            }\n                            case 2: {\n                                // 0x403c00\n                                v36 = g75;\n                                if (isatty(1) == 0) {\n                                    goto lab_0x403425;\n                                } else {\n                                    goto lab_0x403c12;\n                                }\n                            }\n                            default: {\n                                goto lab_0x403425;\n                            }\n                        }\n                    }\n                }\n                case 262: {\n                    // 0x4033cc\n                    g135 = 4;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 263: {\n                    // 0x4033bd\n                    g143 = 2;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 264: {\n                    int64_t v59 = function_40afb0(\"--format\", (int64_t)g202, g13, (int64_t *)&g12, 4, g75); // 0x4033a6\n                    g154 = *(int32_t *)(4 * v59 + (int64_t)&g12);\n                    v39 = v38;\n                    v35 = g75;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 265: {\n                    // 0x40336e\n                    g154 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = (int64_t)\"full-iso\";\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 266: {\n                    // 0x403362\n                    *(char *)&g132 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 267: {\n                    int64_t v60 = function_412980(16); // 0x40333c\n                    *(int64_t *)v60 = (int64_t)g202;\n                    int64_t v61 = g129; // 0x40334b\n                    g129 = v60;\n                    *(int64_t *)(v60 + 8) = v61;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 268: {\n                    char v62 = 1; // 0x4032de\n                    int64_t v63 = v34; // 0x4032de\n                    if (g202 != NULL) {\n                        int64_t v64 = function_40afb0(\"--hyperlink\", (int64_t)g202, g7, (int64_t *)&g6, 4, g75); // 0x403300\n                        int32_t v65 = *(int32_t *)(4 * v64 + (int64_t)&g6); // 0x403305\n                        v62 = 1;\n                        v63 = g75;\n                        if (v65 != 1) {\n                            // 0x403315\n                            v62 = 0;\n                            v63 = g75;\n                            if (v65 == 2) {\n                                // 0x403320\n                                v62 = isatty(1) != 0;\n                                v63 = g75;\n                            }\n                        }\n                    }\n                    // 0x403c2e\n                    *(char *)&g141 = v62;\n                    v39 = v38;\n                    v35 = v63;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 269: {\n                    int64_t v66 = function_40afb0(\"--indicator-style\", (int64_t)g202, g17, (int64_t *)&g16, 4, g75); // 0x4032bd\n                    g143 = *(int32_t *)(4 * v66 + (int64_t)&g16);\n                    v39 = v38;\n                    v35 = g75;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 270: {\n                    int64_t v67 = function_40afb0(\"--quoting-style\", (int64_t)g202, g40, (int64_t *)&g39, 4, g75); // 0x403282\n                    uint32_t v68 = *(int32_t *)(4 * v67 + (int64_t)&g39); // 0x403289\n                    function_411c30((int32_t)\"--quoting-style\" ^ (int32_t)\"--quoting-style\", (int64_t)v68);\n                    v39 = v38;\n                    v35 = g75;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 271: {\n                    // 0x403253\n                    g128 = 0;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 272: {\n                    // 0x403224\n                    *(int32_t *)&g147 = 144;\n                    g145 = 144;\n                    g146 = 1;\n                    g69 = 1;\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 273: {\n                    int64_t v69 = function_40afb0(\"--sort\", (int64_t)g202, g11, (int64_t *)&g10, 4, g75); // 0x40320d\n                    g152 = *(int32_t *)(4 * v69 + (int64_t)&g10);\n                    v39 = v38;\n                    v35 = g75;\n                    v26 = v25;\n                    v29 = 1;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 274: {\n                    int64_t v70 = function_40afb0(\"--time\", (int64_t)g202, g9, (int64_t *)&g8, 4, g75); // 0x4031cd\n                    g153 = *(int32_t *)(4 * v70 + (int64_t)&g8);\n                    v39 = v38;\n                    v35 = g75;\n                    v26 = v25;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                case 275: {\n                    // 0x40319e\n                    v39 = v38;\n                    v35 = v34;\n                    v26 = (int64_t)g202;\n                    v29 = v28;\n                    v32 = v31;\n                    goto lab_0x4030b8;\n                }\n                default: {\n                    goto lab_0x4045a1;\n                }\n            }\n        }\n    }\n  lab_0x403119:\n    // 0x403119\n    if (g146 == 0) {\n        char * env_val4 = getenv(\"LS_BLOCK_SIZE\"); // 0x403d6b\n        function_40dfa0((int64_t)env_val4, &g147, &g146);\n        if (env_val4 == NULL) {\n            // 0x40461b\n            if (getenv(\"BLOCK_SIZE\") != NULL) {\n                goto lab_0x403d8e;\n            } else {\n                goto lab_0x403da8;\n            }\n        } else {\n            goto lab_0x403d8e;\n        }\n    } else {\n        goto lab_0x403127;\n    }\n  lab_0x4030b8:\n    // 0x4030b8\n    *v17 = -1;\n    int64_t v71 = function_416e00(v13, v39, \"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\", &g14, v16, v35); // 0x4030d4\n    v23 = v71;\n    v30 = v32;\n    v27 = v29;\n    v24 = v26;\n    v33 = v35;\n    v37 = v39;\n    v19 = v39;\n    v20 = v26;\n    v21 = v29;\n    v22 = v32;\n    if ((int32_t)v71 == -1) {\n        goto lab_0x403119;\n    }\n    goto lab_0x4030de;\n  lab_0x40310d:\n    // 0x40310d\n    g154 = 0;\n    v39 = v38;\n    v35 = v34;\n    v26 = v25;\n    v29 = v28;\n    v32 = v31;\n    goto lab_0x4030b8;\n  lab_0x4034bb:\n    // 0x4034bb\n    g152 = 3;\n    v39 = v40;\n    v35 = v34;\n    v26 = v25;\n    v29 = 1;\n    v32 = v31;\n    goto lab_0x4030b8;\n  lab_0x403c12:\n    // 0x403c12\n    g142 = 1;\n    g125 = 0;\n    v39 = v38;\n    v35 = v36;\n    v26 = v25;\n    v29 = v28;\n    v32 = v31;\n    goto lab_0x4030b8;\n  lab_0x403425:\n    // 0x403425\n    g142 = 0;\n    v39 = v38;\n    v35 = g75;\n    v26 = v25;\n    v29 = v28;\n    v32 = v31;\n    goto lab_0x4030b8;\n  lab_0x404283:;\n    // 0x404283\n    int64_t v72; // 0x402e90\n    int64_t v73 = v72;\n    int64_t v74 = v73; // 0x404288\n    char * v75; // 0x402e90\n    int64_t v76; // 0x402e90\n    int64_t v77; // 0x402e90\n    int64_t v78; // 0x402e90\n    if (*v75 == 43) {\n        int64_t str = v73 + 1; // 0x4045ab\n        char * found_char_pos = strchr((char *)str, 10); // 0x4045b7\n        int64_t str2 = str; // 0x4045c2\n        if (found_char_pos != NULL) {\n            // 0x4045c8\n            str2 = (int64_t)found_char_pos + 1;\n            if (strchr((char *)str2, 10) != NULL) {\n                // 0x404680\n                function_412290(str);\n                error(2, (int32_t)\"invalid time style format %s\" ^ (int32_t)\"invalid time style format %s\", dcgettext(NULL, \"invalid time style format %s\", 5));\n              lab_0x4046b0:\n                // 0x4046b0\n                __assert_fail(\"found\", \"src/ls.c\", 1592, \"main\");\n                int64_t v79 = &g209;\n                v41 = *v17;\n                function_413220(v79 & 0xffffffff, v41, 0, &g14, (int64_t)g202);\n                // UNREACHABLE\n            }\n            // 0x4045e2\n            *found_char_pos = 0;\n        }\n        // 0x4045e7\n        *(int64_t *)&g53 = str;\n        *(int64_t *)&g54 = str2;\n        v77 = 6;\n        v78 = 10;\n        v76 = str2;\n        goto lab_0x404310;\n    } else {\n        goto lab_0x40428e;\n    }\n  lab_0x40402e_5:;\n    char * format2 = dcgettext(NULL, \"unparsable value for LS_COLORS environment variable\", 5); // 0x40403a\n    error(0, (int32_t)\"unparsable value for LS_COLORS environment variable\" ^ (int32_t)\"unparsable value for LS_COLORS environment variable\", format2);\n    free((int64_t *)g138);\n    int64_t v80 = g139; // 0x404071\n    if (g139 != 0) {\n        goto lab_0x404062;\n    } else {\n        goto lab_0x404073;\n    }\n  lab_0x403fff_2:;\n    // 0x403fff\n    int64_t v81; // 0x403f24\n    function_412290(v81);\n    error(0, (int32_t)\"unrecognized prefix: %s\" ^ (int32_t)\"unrecognized prefix: %s\", dcgettext(NULL, \"unrecognized prefix: %s\", 5));\n    goto lab_0x40402e_5;\n  lab_0x403c40:\n    // 0x403c40\n    if (g142 == 0) {\n        goto lab_0x403c56;\n    } else {\n        // 0x403c49\n        if (g140 != 0) {\n            // 0x403dcb\n            if (g55 == 2 == *(int16_t *)&g56 == 0x5b1b) {\n                // 0x404420\n                if (g57 != 1) {\n                    // 0x403de7\n                    function_405d40();\n                    goto lab_0x403dec;\n                } else {\n                    // 0x40442e\n                    if (*(char *)&g58 != 109) {\n                        // 0x403de7\n                        function_405d40();\n                        goto lab_0x403dec;\n                    } else {\n                        goto lab_0x403dec;\n                    }\n                }\n            } else {\n                // 0x403de7\n                function_405d40();\n                goto lab_0x403dec;\n            }\n        } else {\n            goto lab_0x403c56;\n        }\n    }\n  lab_0x4041c0:;\n    // 0x4041c0\n    int64_t v82; // 0x402e90\n    char * v83 = (char *)(v82 + (int64_t)&g98); // 0x4041c0\n    char v84; // 0x402e90\n    *v83 = *v83 | v84;\n    int64_t v85 = v82 + 1; // 0x4041d0\n    if (v82 == 255) {\n        // break -> 0x4041f5\n        goto lab_0x4041f5;\n    }\n    goto lab_0x4041d2;\n  lab_0x40407a:;\n    // 0x40407a\n    int64_t v87; // 0x402e90\n    int64_t v88 = v87; // 0x404082\n    int64_t v89; // 0x402e90\n    int64_t v90 = v89; // 0x404082\n    if (g65 == 6) {\n        int32_t strncmp_rc = strncmp(g66, \"target\", 6); // 0x404454\n        v88 = 6;\n        v90 = (int64_t)\"target\";\n        if (strncmp_rc == 0) {\n            // 0x404461\n            g174 = 1;\n            v88 = 6;\n            v90 = (int64_t)\"target\";\n        }\n    }\n    goto lab_0x404088_2;\n  lab_0x404088:\n    // 0x404088\n    g142 = 0;\n    int64_t v142; // 0x402e90\n    int64_t v93 = v142; // 0x402e90\n    int64_t v143; // 0x402e90\n    int64_t v94 = v143; // 0x402e90\n    goto lab_0x4039f0;\n  lab_0x403127:;\n    uint64_t v176 = (int64_t)g123;\n    g106 = v176 / 3 + (int64_t)(v176 % 3 != 0);\n    int64_t v177 = function_411c20(0); // 0x40314d\n    char v178 = 0; // 0x402e90\n    switch (g154) {\n        default: {\n            // 0x40316d\n            v178 = 0;\n            if (g154 != 0 != ((int64_t)g123 == 0)) {\n                // 0x403181\n                v178 = (int32_t)v177 == 6 | (v177 & 0xfffffffd) == 1;\n            }\n        }\n        case 4: {\n        }\n        case 1: {\n            // 0x4038d2\n            g177 = v178;\n            int64_t v179 = function_411be0(0); // 0x4038e1\n            g127 = v179;\n            if ((int32_t)v177 == 7) {\n                // 0x40433c\n                function_411c40(v179, 32, 1);\n            }\n            // break -> 0x4038f7\n            break;\n        }\n    }\n    // 0x4038f7\n    if (g143 >= 2) {\n        int64_t v180 = (int64_t)(g143 - 2) + (int64_t)\"*=>@|\"; // 0x403905\n        char v181 = *(char *)v180; // 0x403905\n        char v182 = v181; // 0x403916\n        int64_t v183 = v180; // 0x403916\n        if (v181 != 0) {\n            int64_t v184 = v183 + 1; // 0x40392c\n            function_411c40((int64_t)g127, v182, 1);\n            char v185 = *(char *)v184; // 0x403935\n            v182 = v185;\n            v183 = v184;\n            while (v185 != 0) {\n                // 0x403920\n                v184 = v183 + 1;\n                function_411c40((int64_t)g127, v182, 1);\n                v185 = *(char *)v184;\n                v182 = v185;\n                v183 = v184;\n            }\n        }\n    }\n    int64_t v186 = function_411be0(0); // 0x403941\n    g126 = v186;\n    function_411c40(v186, 58, 1);\n    if (g144 == 0) {\n        goto lab_0x40397c;\n    } else {\n        // 0x403968\n        if (g154 == 0 == *(char *)&g141 == 0) {\n            goto lab_0x40399d;\n        } else {\n            // 0x403975\n            g144 = 0;\n            goto lab_0x40397c;\n        }\n    }\n  lab_0x403d8e:\n    // 0x403d8e\n    g145 = *(int32_t *)&g147;\n    g69 = g146;\n    goto lab_0x403da8;\n  lab_0x40397c:;\n    int64_t v187 = g154; // 0x403982\n    int64_t v115; // 0x402e90\n    int64_t v116; // 0x402e90\n    if (v21 == 0 == g153 < 3) {\n        if (g154 == 0) {\n            goto lab_0x40399d;\n        } else {\n            // 0x403ec0\n            g152 = 4;\n            v115 = v187;\n            v116 = 58;\n            goto lab_0x4039dc;\n        }\n    } else {\n        // 0x403999\n        v115 = v187;\n        v116 = 58;\n        if (g154 != 0) {\n            goto lab_0x4039dc;\n        } else {\n            goto lab_0x40399d;\n        }\n    }\n  lab_0x403da8:\n    if (v22 != 0) {\n        // 0x403db1\n        *(int32_t *)&g147 = 0;\n        g146 = 1024;\n    }\n    goto lab_0x403127;\n  lab_0x40399d:;\n    int64_t v139 = v20; // 0x4039a0\n    if (v20 != 0) {\n        goto lab_0x4039b4;\n    } else {\n        char * env_val8 = getenv(\"TIME_STYLE\"); // 0x4045ff\n        v139 = (int64_t)env_val8;\n        v74 = (int64_t)\"locale\";\n        if (env_val8 != NULL) {\n            goto lab_0x4039b4;\n        } else {\n            goto lab_0x40428e;\n        }\n    }\n  lab_0x4039dc:;\n    int64_t v117 = v116;\n    int64_t v118 = v115;\n    v93 = v118;\n    v94 = v117;\n    if (g142 != 0) {\n        char * env_val5 = getenv(\"LS_COLORS\"); // 0x403f05\n        int64_t v119 = (int64_t)env_val5; // 0x403f05\n        int64_t v120 = v15 + 24; // 0x403f0a\n        int64_t * v121 = (int64_t *)v120; // 0x403f0a\n        *v121 = v119;\n        if (env_val5 == NULL) {\n            goto lab_0x404353;\n        } else {\n            // 0x403f18\n            if (*env_val5 == 0) {\n                goto lab_0x404353;\n            } else {\n                // 0x403f21\n                v81 = v15 + 21;\n                *(int16_t *)v81 = 0x3f3f;\n                *(char *)(v15 + 23) = 0;\n                int64_t v122 = function_412bb0(v119); // 0x403f30\n                g138 = v122;\n                int64_t * v123 = (int64_t *)v16; // 0x403f3c\n                *v123 = v122;\n                char * str3 = (char *)v81;\n                int64_t v124 = v117; // 0x403f3c\n                while (true) {\n                  lab_0x403f41_3:;\n                    int64_t v125 = *v121; // 0x402e90\n                    int64_t v126; // 0x403f41\n                    char * v127; // 0x402e90\n                    while (true) {\n                      lab_0x403f41:\n                        // 0x403f41\n                        v126 = v125;\n                        v127 = (char *)v126;\n                        v87 = 0;\n                        v89 = v124;\n                        switch (*v127) {\n                            case 42: {\n                                int64_t v128 = function_412980(40); // 0x404480\n                                int64_t v129 = g139; // 0x404497\n                                *v121 = *v121 + 1;\n                                g139 = v128;\n                                *(int64_t *)(v128 + 32) = v129;\n                                *(int64_t *)(v128 + 8) = *v123;\n                                if ((char)function_404860(v16, v120, 1, v128) == 0) {\n                                    goto lab_0x40402e_5;\n                                }\n                                int64_t v130 = *v121; // 0x4044c8\n                                *v121 = v130 + 1;\n                                if (*(char *)v130 != 61) {\n                                    goto lab_0x40402e_5;\n                                }\n                                // 0x4044df\n                                *(int64_t *)(v128 + 24) = *v123;\n                                if ((char)function_404860(v16, v120, 0, v128 + 16) == 0) {\n                                    goto lab_0x40402e_5;\n                                }\n                                // 0x403f41\n                                v124 = v120;\n                                goto lab_0x403f41_3;\n                            }\n                            case 58: {\n                                int64_t v131 = v126 + 1; // 0x40446d\n                                *v121 = v131;\n                                v125 = v131;\n                                goto lab_0x403f41;\n                            }\n                            case 0: {\n                                goto lab_0x40407a;\n                            }\n                            default: {\n                                goto lab_0x403f63;\n                            }\n                        }\n                    }\n                  lab_0x403f63:;\n                    int64_t v132 = v126 + 1; // 0x403f63\n                    *v121 = v132;\n                    *str3 = *v127;\n                    char * v133 = (char *)v132; // 0x403f73\n                    if (*v133 == 0) {\n                        goto lab_0x40402e_5;\n                    }\n                    int64_t v134 = v126 + 2; // 0x403f7d\n                    *v121 = v134;\n                    *(char *)(v15 + 22) = *v133;\n                    *v121 = v126 + 3;\n                    int64_t str4 = (int64_t)\"lc\"; // 0x403f9b\n                    if (*(char *)v134 != 61) {\n                        goto lab_0x40402e_5;\n                    }\n                    int64_t v135 = 0;\n                    while (strcmp(str3, (char *)str4) != 0) {\n                        int64_t v136 = v135 + 1; // 0x403fb0\n                        str4 = *(int64_t *)(8 * v136 + (int64_t)&g15);\n                        if (str4 == 0) {\n                            goto lab_0x403fff_2;\n                        }\n                        v135 = v136;\n                    }\n                    int64_t v137 = 0x100000000 * v135 >> 28; // 0x403fde\n                    *(int64_t *)(v137 + (int64_t)&g55 + 8) = *v123;\n                    int64_t v138 = function_404860(v16, v120, 0, v137 + (int64_t)&g55); // 0x403ff2\n                    if ((char)v138 == 0) {\n                        goto lab_0x403fff_2;\n                    }\n                    // 0x403f41\n                    v124 = v120;\n                    goto lab_0x403f41_3;\n                }\n                goto lab_0x40407a;\n            }\n        }\n    } else {\n        goto lab_0x4039f0;\n    }\n  lab_0x4039b4:;\n    char * str5 = (char *)v139; // 0x4039c1\n    int32_t strncmp_rc2 = strncmp(str5, \"posix-\", 6); // 0x4039c1\n    int64_t v140 = v139; // 0x4039c8\n    v72 = v139;\n    v75 = str5;\n    if (strncmp_rc2 != 0) {\n        goto lab_0x404283;\n    } else {\n        v115 = 6;\n        v116 = (int64_t)\"posix-\";\n        while ((char)function_40c190(2, (int64_t)\"posix-\") != 0) {\n            int64_t v141 = v140 + 6; // 0x4039b0\n            char * str6 = (char *)v141;\n            int32_t strncmp_rc3 = strncmp(str6, \"posix-\", 6); // 0x4039c1\n            v140 = v141;\n            v72 = v141;\n            v75 = str6;\n            if (strncmp_rc3 != 0) {\n                goto lab_0x404283;\n            }\n            v115 = 6;\n            v116 = (int64_t)\"posix-\";\n        }\n        goto lab_0x4039dc;\n    }\n  lab_0x4039f0:\n    // 0x4039f0\n    if (g135 == 1) {\n        int32_t v104 = 2; // 0x403edb\n        if (g133 == 0 && g143 != 3) {\n            // 0x403ee6\n            v104 = (int32_t)(g154 == 0) + 4 & -2;\n        }\n        // 0x403ef5\n        g135 = v104;\n    }\n    int64_t v105 = v93; // 0x403a04\n    int64_t v106 = v94; // 0x403a04\n    if (g134 != 0) {\n        int64_t v107 = function_40ca80(30, 0, 0x404800, 0x404810, 0x404850); // 0x403a1d\n        g182 = v107;\n        if (v107 == 0) {\n            // 0x404714\n            function_412bd0(30);\n            // UNREACHABLE\n        }\n        // 0x403a32\n        _obstack_begin(&g99, 0, 0, 0x402bc0, 0x402750);\n        v105 = 0;\n        v106 = 0;\n    }\n    // 0x403a4b\n    g122 = function_417410((int64_t)getenv(\"TZ\"), v106, v105);\n    char v108; // 0x402e90\n    if ((g152 - 2 & -3) == 0) {\n        // 0x403a7f\n        g121 = 1;\n        v108 = 0;\n        goto lab_0x403a88;\n    } else {\n        // 0x403a72\n        if (g154 != 0) {\n            // 0x403e49\n            if (g169 != 0) {\n                // 0x403a7f\n                g121 = 1;\n                v108 = 0;\n                goto lab_0x403a88;\n            } else {\n                // 0x403e56\n                if (g148 != 0) {\n                    // 0x403a7f\n                    g121 = 1;\n                    v108 = 0;\n                    goto lab_0x403a88;\n                } else {\n                    // 0x403e63\n                    g121 = 0;\n                    v108 = 1;\n                    if (g134 == 0) {\n                        // 0x403e7c\n                        v108 = 1;\n                        if (g142 == 0) {\n                            // 0x403e89\n                            v108 = g143 != 0 ? 1 : *(char *)&g132;\n                        }\n                    }\n                    goto lab_0x403a88;\n                }\n            }\n        } else {\n            // 0x403a7f\n            g121 = 1;\n            v108 = 0;\n            goto lab_0x403a88;\n        }\n    }\n  lab_0x40428e:;\n    int64_t v109 = v74;\n    int64_t v110 = function_40acf0(v109, g19, &g18, 4); // 0x4042a0\n    if (v110 < 0) {\n        // 0x40451d\n        function_40ae10(\"time style\", v109, v110);\n        fputs_unlocked(dcgettext((char *)((int32_t)\"time style\" ^ (int32_t)\"time style\"), \"Valid arguments are:\\n\", 5), g88);\n        int64_t v111 = (int64_t)&g19; // 0x404555\n        v111 += 8;\n        __fprintf_chk(g88, 1, \"  - [posix-]%s\\n\", (char *)(int64_t)\"full-iso\");\n        int64_t v112 = *(int64_t *)v111; // 0x404576\n        while (v112 != 0) {\n            // 0x40455a\n            v111 += 8;\n            __fprintf_chk(g88, 1, \"  - [posix-]%s\\n\", (char *)v112);\n            v112 = *(int64_t *)v111;\n        }\n        // 0x40457e\n        fputs_unlocked(dcgettext(NULL, \"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\\n\", 5), g88);\n      lab_0x4045a1:\n        // 0x4045a1\n        function_40a530(2);\n        // UNREACHABLE\n    }\n    if (v110 == 1) {\n        // 0x40464e\n        *(int64_t *)&g54 = (int64_t)\"%Y-%m-%d %H:%M\";\n        *(int64_t *)&g53 = (int64_t)\"%Y-%m-%d %H:%M\";\n        v77 = &g18;\n        v78 = (int64_t)&g19;\n        v76 = v109;\n    } else {\n        if (v110 > 1) {\n            if (v110 == 2) {\n                // 0x404633\n                *(int64_t *)&g53 = (int64_t)\"%Y-%m-%d \";\n                *(int64_t *)&g54 = (int64_t)\"%m-%d %H:%M\";\n                v77 = &g18;\n                v78 = (int64_t)&g19;\n                v76 = v109;\n            } else {\n                // 0x4042c8\n                v77 = &g18;\n                v78 = (int64_t)&g19;\n                v76 = v109;\n                if (v110 == 3) {\n                    int64_t v113 = function_40c190(2, (int64_t)&g19); // 0x4042d3\n                    v77 = &g18;\n                    v78 = (int64_t)&g19;\n                    v76 = 2;\n                    if ((char)v113 != 0) {\n                        char * v114 = dcgettext(NULL, (char *)*(int64_t *)&g53, 2); // 0x4042ea\n                        *(int64_t *)&g53 = (int64_t)v114;\n                        *(int64_t *)&g54 = (int64_t)dcgettext(NULL, g54, 2);\n                        v77 = 2;\n                        v78 = (int64_t)g54;\n                        v76 = 0;\n                    }\n                }\n            }\n        } else {\n            // 0x4043eb\n            v77 = &g18;\n            v78 = (int64_t)&g19;\n            v76 = v109;\n            if (v110 == 0) {\n                // 0x4043f4\n                *(int64_t *)&g54 = (int64_t)\"%Y-%m-%d %H:%M:%S.%N %z\";\n                *(int64_t *)&g53 = (int64_t)\"%Y-%m-%d %H:%M:%S.%N %z\";\n                v77 = &g18;\n                v78 = (int64_t)&g19;\n                v76 = v109;\n            }\n        }\n    }\n    goto lab_0x404310;\n  lab_0x404353:;\n    char * env_val7 = getenv(\"COLORTERM\"); // 0x404358\n    if (env_val7 == NULL) {\n        goto lab_0x40436b;\n    } else {\n        // 0x404362\n        v88 = v118;\n        v90 = v117;\n        if (*env_val7 != 0) {\n            goto lab_0x404088_2;\n        } else {\n            goto lab_0x40436b;\n        }\n    }\n  lab_0x404310:\n    // 0x404310\n    function_404bb0(v76, v78);\n    v115 = v77;\n    v116 = v78;\n    goto lab_0x4039dc;\n  lab_0x40436b:;\n    char * env_val6 = getenv(\"TERM\"); // 0x404370\n    v142 = v118;\n    v143 = v117;\n    if (env_val6 == NULL) {\n        goto lab_0x404088;\n    } else {\n        // 0x404381\n        if (*env_val6 == 0) {\n            goto lab_0x404088;\n        } else {\n            int64_t v144 = (int64_t)env_val6; // 0x404370\n            int64_t v145 = (int64_t)\"# Configuration file for dircolors, a utility to help you set the\"; // 0x4043a6\n            while (true) {\n                int64_t str7 = v145;\n                int64_t v146 = 5; // 0x4043d2\n                int64_t v147 = (int64_t)\"TERM \"; // 0x4043d2\n                if (strncmp((char *)str7, \"TERM \", 5) == 0) {\n                    int64_t v148 = function_4159a0(str7 + 5, v144, 0); // 0x4043dd\n                    v146 = 0;\n                    v147 = v144;\n                    if ((int32_t)v148 == 0) {\n                        // break -> 0x404088\n                        break;\n                    }\n                }\n                int64_t v149 = str7; // 0x40439e\n                int64_t v150 = -1; // 0x40439e\n                int64_t v151 = 0; // 0x40439e\n                while (v150 != 0) {\n                    int64_t v152 = v149;\n                    v150--;\n                    bool v153; // 0x402e90\n                    v149 = v152 + (v153 ? -1 : 1);\n                    v151 = v150;\n                    if (*(char *)v152 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v151 = 0;\n                }\n                v145 = str7 + -1 - v151;\n                v142 = v146;\n                v143 = v147;\n                if (v145 - (int64_t)\"# Configuration file for dircolors, a utility to help you set the\" >= 0x104d) {\n                    goto lab_0x404088;\n                }\n            }\n            goto lab_0x404088_2;\n        }\n    }\n  lab_0x403a88:\n    // 0x403a88\n    g120 = v108 % 2;\n    if (g144 != 0) {\n        // 0x4040e7\n        _obstack_begin(&g104, 0, 0, 0x402bc0, 0x402750);\n        _obstack_begin(&g103, 0, 0, 0x402bc0, 0x402750);\n    }\n    // 0x403aa2\n    v85 = 0;\n    if (*(char *)&g141 != 0) {\n        while (true) {\n          lab_0x4041d2:\n            // 0x4041d2\n            v82 = v85;\n            int32_t v86 = v82; // 0x4041d7\n            if (v86 < 91) {\n                // 0x404190\n                v84 = 1;\n                if (v86 < 47 || v86 > 64 || v86 < 58) {\n                    goto lab_0x4041c0;\n                } else {\n                    // 0x4041b5\n                    v84 = v86 == 95;\n                    goto lab_0x4041c0;\n                }\n            } else {\n                // 0x4041d9\n                v84 = 1;\n                if (v86 == 126 || v86 < 123) {\n                    goto lab_0x4041c0;\n                } else {\n                    // 0x4041b5\n                    v84 = v86 == 95;\n                    goto lab_0x4041c0;\n                }\n            }\n        }\n      lab_0x4041f5:;\n        int64_t v154 = function_412d40(); // 0x4041f5\n        g173 = (char *)(v154 == 0 ? (int64_t)&g24 : v154);\n    }\n    // 0x403aaf\n    g180 = 100;\n    int64_t v155 = function_412980(0x4e20); // 0x403ac2\n    g179 = 0;\n    g181 = v155;\n    function_4084b0();\n    int32_t v103 = (int32_t)a1 - g84; // 0x403ae1\n    int64_t v156 = g84; // 0x403ae4\n    int64_t v98; // 0x402e90\n    int64_t v96; // 0x402e90\n    if (v103 < 1) {\n        // 0x403cd9\n        int64_t v157; // 0x402e90\n        if (g133 == 0) {\n            // 0x403ea2\n            function_404d90((int64_t *)\".\", 0, 1);\n            v157 = 0;\n        } else {\n            // 0x403ce6\n            function_408580((int64_t)\".\", 3, 1, (int64_t *)&g24);\n            v157 = 3;\n        }\n        // 0x403cff\n        v96 = v157;\n        v98 = (int64_t)\".\";\n        if ((int64_t)g179 != 0) {\n            goto lab_0x40411e;\n        } else {\n            // 0x403d0d\n            goto lab_0x403d0d_2;\n        }\n    } else {\n        int64_t v158 = *(int64_t *)(8 * v156 + v19); // 0x403af0\n        int64_t v159 = v156 + 1; // 0x403b00\n        function_408580(v158, 0, 1, (int64_t *)&g24);\n        v156 = v159;\n        while (v13 > v159) {\n            // 0x403af0\n            v158 = *(int64_t *)(8 * v156 + v19);\n            v159 = v156 + 1;\n            function_408580(v158, 0, 1, (int64_t *)&g24);\n            v156 = v159;\n        }\n        // 0x403b0e\n        v96 = 0;\n        v98 = v158;\n        if ((int64_t)g179 != 0) {\n            goto lab_0x40411e;\n        } else {\n            goto lab_0x403b1c;\n        }\n    }\n  lab_0x404088_2:;\n    int64_t v91 = v90;\n    int64_t v92 = v88;\n    v93 = v92;\n    v94 = v91;\n    if (g142 == 0) {\n        goto lab_0x4039f0;\n    } else {\n        // 0x404095\n        if ((char)function_404ae0(13) != 0) {\n            goto lab_0x4040ba;\n        } else {\n            // 0x4040a3\n            if ((char)function_404ae0(14) == 0 || g174 == 0) {\n                // 0x4040c6\n                v93 = v92;\n                v94 = v91;\n                if ((char)function_404ae0(12) == 0) {\n                    goto lab_0x4039f0;\n                } else {\n                    // 0x4040d8\n                    v93 = v92;\n                    v94 = v91;\n                    if (g154 != 0) {\n                        goto lab_0x4039f0;\n                    } else {\n                        goto lab_0x4040ba;\n                    }\n                }\n            } else {\n                goto lab_0x4040ba;\n            }\n        }\n    }\n  lab_0x40411e:\n    // 0x40411e\n    function_404f40();\n    int64_t v95 = v96; // 0x40412a\n    int64_t v97 = v98; // 0x40412a\n    if (g133 == 0) {\n        // 0x40440f\n        function_405140(0, 1, 1);\n        v95 = 1;\n        v97 = 0;\n    }\n    // 0x404130\n    int64_t v99; // 0x402e90\n    if ((int64_t)g179 == 0) {\n        goto lab_0x403b1c;\n    } else {\n        // 0x40413e\n        function_407ca0(v97, v95);\n        if (g172 == 0) {\n            goto lab_0x403c40;\n        } else {\n            int64_t v100 = (int64_t)g86; // 0x404151\n            if (*(int64_t *)(v100 + 48) > *(int64_t *)(v100 + 40)) {\n                // 0x404166\n                int64_t * v101; // 0x404158\n                uint64_t v102; // 0x404158\n                *v101 = v102 + 1;\n                *(char *)v102 = 10;\n            } else {\n                // 0x404671\n                __overflow(g86, 10);\n            }\n            // 0x404171\n            g105++;\n            v99 = g172;\n            goto lab_0x403b64;\n        }\n    }\n  lab_0x403b1c:\n    // 0x403b1c\n    v99 = g172;\n    if (v103 > 1) {\n        goto lab_0x403b64;\n    } else {\n        goto lab_0x403d0d_2;\n    }\n  lab_0x4040ba:\n    // 0x4040ba\n    g137 = 1;\n    v93 = v92;\n    v94 = v91;\n    goto lab_0x4039f0;\n  lab_0x403d0d_2:;\n    int64_t v160 = g172; // 0x403d0d\n    int64_t v161; // 0x402e90\n    if (v160 == 0) {\n        goto lab_0x403c40;\n    } else {\n        // 0x403d1d\n        v161 = v160;\n        if (*(int64_t *)(v160 + 24) == 0) {\n            // 0x403d28\n            g124 = 0;\n            v161 = v160;\n        }\n        goto lab_0x403b6d;\n    }\n  lab_0x403b64:\n    // 0x403b64\n    v161 = v99;\n    if (v99 == 0) {\n        goto lab_0x403c40;\n    } else {\n        goto lab_0x403b6d;\n    }\n  lab_0x403b6d:;\n    int64_t v162 = v161; // 0x402e90\n    while (true) {\n        int64_t v163 = v162;\n        int64_t * v164 = (int64_t *)v163; // 0x403b71\n        int64_t v165 = *v164; // 0x403b71\n        g172 = *(int64_t *)(v163 + 24);\n        int64_t v166 = g182; // 0x403b7b\n        if (v165 != 0 || v166 == 0) {\n            int64_t * v167 = (int64_t *)(v163 + 8); // 0x403b34\n            function_4092a0(v165, *v167, *(char *)(v163 + 16));\n            free((int64_t *)*v164);\n            free((int64_t *)*v167);\n            free(v164);\n            g124 = 1;\n        } else {\n            int64_t v168 = g101; // 0x403b8c\n            if (v168 - g100 < 16) {\n                // break -> 0x4046e2\n                break;\n            }\n            int64_t v169 = v168 - 16; // 0x403ba7\n            g101 = v169;\n            *(int64_t *)v16 = *(int64_t *)v169;\n            *(int64_t *)(v15 + 40) = *(int64_t *)(v168 - 8);\n            int64_t v170 = function_40d260(v166); // 0x403bcc\n            if (v170 == 0) {\n                goto lab_0x4046b0;\n            }\n            // 0x403bda\n            free((int64_t *)v170);\n            free((int64_t *)*v164);\n            free((int64_t *)*(int64_t *)(v163 + 8));\n            free(v164);\n        }\n        // 0x403b5d\n        v162 = g172;\n        if (g172 == 0) {\n            goto lab_0x403c40;\n        }\n    }\n    // 0x4046e2\n    __assert_fail(\"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\", \"src/ls.c\", 1026, \"dev_ino_pop\");\n    // 0x4046fb\n    __assert_fail(\"hash_get_n_entries (active_dir_set) == 0\", \"src/ls.c\", 1644, \"main\");\n    // 0x404714\n    function_412bd0((int64_t)\"hash_get_n_entries (active_dir_set) == 0\");\n    // UNREACHABLE\n  lab_0x403c56:\n    // 0x403c56\n    if (g144 != 0) {\n        // 0x404212\n        function_405390(\"//DIRED//\", &g104);\n        function_405390(\"//SUBDIRED//\", &g103);\n        int64_t v171 = function_411c20(g127); // 0x404237\n        int64_t v172 = *(int64_t *)((8 * v171 & 0x7fffffff8) + (int64_t)&g40); // 0x404248\n        __printf_chk(1, \"//DIRED-OPTIONS// --quoting-style=%s\\n\", (char *)v172);\n    }\n    // 0x403c63\n    if (g182 == 0) {\n        // 0x403c88\n        return g108;\n    }\n    // 0x403c6f\n    if (function_40c5f0(g182) != 0) {\n        // 0x4046fb\n        __assert_fail(\"hash_get_n_entries (active_dir_set) == 0\", \"src/ls.c\", 1644, \"main\");\n        // 0x404714\n        function_412bd0((int64_t)\"hash_get_n_entries (active_dir_set) == 0\");\n        // UNREACHABLE\n    }\n    // 0x403c80\n    function_40ccc0(g182);\n    // 0x403c88\n    return g108;\n  lab_0x403dec:\n    // 0x403dec\n    fflush_unlocked(g86);\n    function_405af0(0);\n    if (g109 != 0) {\n        raise(19);\n        int32_t v173 = g109 - 1; // 0x403e1a\n        int32_t v174 = v173; // 0x403e1d\n        while (v173 != 0) {\n            // 0x403e10\n            raise(19);\n            v173 = v174 - 1;\n            v174 = v173;\n        }\n    }\n    // 0x403e1f\n    if (g111 != 0) {\n        // 0x403e2d\n        raise(g111);\n    }\n    goto lab_0x403c56;\n  lab_0x404062:;\n    int64_t v175 = *(int64_t *)(v80 + 32); // 0x404062\n    free((int64_t *)v80);\n    v80 = v175;\n    if (v175 != 0) {\n        goto lab_0x404062;\n    } else {\n        goto lab_0x404073;\n    }\n  lab_0x404073:\n    // 0x404073\n    g142 = 0;\n    v87 = (int64_t)format2;\n    v89 = (int32_t)\"unparsable value for LS_COLORS environment variable\" ^ (int32_t)\"unparsable value for LS_COLORS environment variable\";\n    goto lab_0x40407a;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "404720",
            "funcEndAddr": "40474b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404720\n    int64_t v1; // 0x404720\n    __libc_start_main(0x402e90, (int32_t)a4, (char **)&v1, (void (*)())0x418710, (void (*)())0x418770, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40474b",
            "funcStartAddr": "40474b",
            "funcEndAddr": "40476a",
            "decompiledFuncCode": "int64_t function_40474b(void) {\n    // 0x40474b\n    return 0x624648;\n}\n"
        },
        {
            "funcName": "function_40476a",
            "funcStartAddr": "40476a",
            "funcEndAddr": "4047a1",
            "decompiledFuncCode": "int64_t function_40476a(void) {\n    // 0x40476a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4047a1",
            "funcStartAddr": "4047a1",
            "funcEndAddr": "4047f8",
            "decompiledFuncCode": "int64_t function_4047a1(void) {\n    // 0x4047a1\n    if (g89 != 0) {\n        // 0x4047f7\n        int64_t result; // 0x4047a1\n        return result;\n    }\n    int64_t v1 = g90; // 0x4047d4\n    int64_t result2; // 0x4047e6\n    if (g90 >= ((int64_t)&g48 - (int64_t)&g47 >> 3) - 1) {\n        // 0x4047e6\n        result2 = function_40474b();\n        g89 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g48 - (int64_t)&g47 >> 3) - 1) {\n        // 0x4047d6\n        v1++;\n    }\n    // 0x4047ca\n    g90 = v1;\n    // 0x4047e6\n    result2 = function_40474b();\n    g89 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4047f8",
            "funcStartAddr": "4047f8",
            "funcEndAddr": "4047fd",
            "decompiledFuncCode": "int64_t function_4047f8(void) {\n    // 0x4047f8\n    return function_40476a();\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "40480c",
            "decompiledFuncCode": "int64_t function_404800(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x404800\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "40482c",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2) {\n    if (a1 == a2) {\n        // 0x404820\n        return *(int64_t *)(a1 + 8) & -256 | 1;\n    }\n    // 0x40481a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404830",
            "funcStartAddr": "404830",
            "funcEndAddr": "404841",
            "decompiledFuncCode": "int64_t function_404830(int64_t a1) {\n    uint32_t result = g111; // 0x404830\n    if (result == 0) {\n        // 0x40483a\n        g111 = a1;\n    }\n    // 0x404840\n    return result;\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "404855",
            "decompiledFuncCode": "int64_t function_404850(void) {\n    // 0x404850\n    int64_t v1; // 0x404850\n    free((int64_t *)v1);\n    return &g209;\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "404ada",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2, uint32_t a3, int64_t a4) {\n    int64_t v1 = a2; // 0x404885\n    int64_t v2 = a1; // 0x404885\n    int64_t v3 = 0; // 0x404885\n    char v4; // 0x404860\n    char v5; // 0x404860\n    char v6; // 0x404860\n    char v7; // 0x404860\n    int64_t v8; // 0x404860\n    int64_t v9; // 0x404860\n    int64_t v10; // 0x404860\n    int64_t v11; // 0x404860\n    int64_t v12; // 0x404860\n    int64_t v13; // 0x404860\n    int64_t v14; // 0x404860\n    int64_t v15; // 0x404860\n    while (true) {\n      lab_0x4048a2_2:;\n        unsigned char v16 = *(char *)v1; // 0x4048a2\n        v6 = v4;\n        v7 = v5;\n        v14 = v16;\n        v10 = v1;\n        v12 = v2;\n        v8 = v3;\n        v15 = 61;\n        v11 = v1;\n        v13 = v2;\n        v9 = v3;\n        if (v16 == 61) {\n            goto lab_0x404935;\n        } else {\n            goto lab_0x4048af;\n        }\n    }\n  lab_0x4048d8_3:;\n    // 0x4048d8\n    int64_t v17; // 0x404860\n    *(int64_t *)a1 = v17;\n    int64_t v18; // 0x404860\n    *(int64_t *)a2 = v18;\n    int64_t v19; // 0x404860\n    *(int64_t *)a4 = v19;\n    int64_t result; // 0x404860\n    return result;\n  lab_0x4049a8:;\n    // 0x4049a8\n    int64_t v20; // 0x404860\n    int64_t v21; // 0x404860\n    int64_t v22 = v20 + 0xffffffa9 + 16 * v21 & 0xffffffff;\n    int64_t v23; // 0x404860\n    int64_t v24 = v23 + 1;\n    int64_t v25 = (int64_t)*(char *)v24; // 0x4049a8\n    int64_t v26 = v25 + 0xffffffd0; // 0x4049ac\n    int64_t v27 = v26; // 0x4049b4\n    int64_t v28 = v25; // 0x4049b4\n    int64_t v29 = v22; // 0x4049b4\n    int64_t v30 = v24; // 0x4049b4\n    int64_t v31 = v24; // 0x4049b4\n    int64_t v32 = v22; // 0x4049b4\n    if ((char)v26 >= 55) {\n        // break -> 0x404a00\n        goto lab_0x404a00_3;\n    }\n    goto lab_0x4049b6;\n  lab_0x404935:\n    // 0x404935\n    result = a3;\n    v18 = v11;\n    v17 = v13;\n    v19 = v9;\n    int64_t v39 = v15; // 0x404938\n    int64_t v40 = v11; // 0x404938\n    int64_t v41 = v13; // 0x404938\n    int64_t v42 = v9; // 0x404938\n    if ((char)a3 != 0) {\n        // break -> 0x4048d8\n        goto lab_0x4048d8_3;\n    }\n    goto lab_0x404919;\n  lab_0x4048af:;\n    int64_t v63 = v8;\n    int64_t v60 = v12;\n    int64_t v66 = v10;\n    int64_t v67 = v14;\n    char v62 = v7;\n    char v61 = v6;\n    char v68 = v67;\n    int64_t v53; // 0x404860\n    int64_t v52; // 0x404860\n    int64_t v51; // 0x4048f0\n    int64_t v49; // 0x4048f5\n    if (v61 > v62) {\n        if (v68 == 92) {\n            // 0x4048f0\n            g211 = v66;\n            v51 = (int64_t)*(char *)(v66 + 1);\n            v49 = v66 + 2;\n            v52 = v51;\n            v53 = v49;\n            result = 0;\n            v18 = 2;\n            v17 = v60;\n            v19 = v63;\n            switch (v66) {\n                case 0: {\n                    goto lab_0x4048d8_3;\n                }\n                case 48: {\n                    goto lab_0x404968;\n                }\n                case 49: {\n                    goto lab_0x404968;\n                }\n                case 50: {\n                    goto lab_0x404968;\n                }\n                case 51: {\n                    goto lab_0x404968;\n                }\n                case 52: {\n                    goto lab_0x404968;\n                }\n                case 53: {\n                    goto lab_0x404968;\n                }\n                case 54: {\n                    goto lab_0x404968;\n                }\n                case 55: {\n                    goto lab_0x404968;\n                }\n                case 63: {\n                    // 0x404a20\n                    v52 = 127;\n                    v53 = 65;\n                    goto lab_0x404897;\n                }\n                case 88: {\n                    goto lab_0x4049a0;\n                }\n                case 95: {\n                    // 0x404a30\n                    v52 = 32;\n                    v53 = 97;\n                    goto lab_0x404897;\n                }\n                case 97: {\n                    // 0x404a10\n                    v52 = 7;\n                    v53 = 99;\n                    goto lab_0x404897;\n                }\n                case 98: {\n                    // 0x404aa0\n                    v52 = 8;\n                    v53 = 100;\n                    goto lab_0x404897;\n                }\n                case 101: {\n                    // 0x404a50\n                    v52 = 27;\n                    v53 = 103;\n                    goto lab_0x404897;\n                }\n                case 102: {\n                    // 0x404a40\n                    v52 = 12;\n                    v53 = 104;\n                    goto lab_0x404897;\n                }\n                case 110: {\n                    // 0x404a90\n                    v52 = 10;\n                    v53 = 112;\n                    goto lab_0x404897;\n                }\n                case 114: {\n                    // 0x404a80\n                    v52 = 13;\n                    v53 = 116;\n                    goto lab_0x404897;\n                }\n                case 116: {\n                    // 0x404a70\n                    v52 = 9;\n                    v53 = 118;\n                    goto lab_0x404897;\n                }\n                case 118: {\n                    // 0x404a60\n                    v52 = 11;\n                    v53 = 120;\n                    goto lab_0x404897;\n                }\n                case 120: {\n                    goto lab_0x4049a0;\n                }\n                default: {\n                    goto lab_0x404897;\n                }\n            }\n        } else {\n            // 0x4048b6\n            v39 = v67;\n            v40 = v66;\n            v41 = v60;\n            v42 = v63;\n            if (v68 != 94) {\n                goto lab_0x404919;\n            } else {\n                int64_t v69 = v66 + 1; // 0x4048bb\n                unsigned char v70 = *(char *)v69; // 0x4048bb\n                if (v70 < 127) {\n                    // 0x404890\n                    v52 = v70 % 32;\n                    v53 = v66 + 2;\n                    goto lab_0x404897;\n                } else {\n                    // 0x4048ce\n                    result = 0;\n                    v18 = v69;\n                    v17 = v60;\n                    v19 = v63;\n                    if (v70 != 63) {\n                        // break -> 0x4048d8\n                        goto lab_0x4048d8_3;\n                    }\n                    // 0x404950\n                    *(char *)v60 = 127;\n                    v1 = v69;\n                    goto lab_0x4048a2;\n                }\n            }\n        }\n    } else {\n        // 0x404910\n        result = 1;\n        v18 = v66;\n        v17 = v60;\n        v19 = v63;\n        v39 = v67;\n        v40 = v66;\n        v41 = v60;\n        v42 = v63;\n        switch (v68) {\n            case 0: {\n                goto lab_0x4048d8_3;\n            }\n            case 58: {\n                goto lab_0x4048d8_3;\n            }\n            default: {\n                goto lab_0x404919;\n            }\n        }\n    }\n  lab_0x404919:;\n    int64_t v43 = v40 + 1; // 0x404919\n    *(char *)v41 = (char)v39;\n    int64_t v44 = v42 + 1; // 0x404920\n    int64_t v45 = v41 + 1; // 0x404924\n    unsigned char v46 = *(char *)v43; // 0x404928\n    int64_t v47 = v46; // 0x404928\n    v6 = v46;\n    v7 = 61;\n    v14 = v47;\n    v10 = v43;\n    v12 = v45;\n    v8 = v44;\n    v15 = v47;\n    v11 = v43;\n    v13 = v45;\n    v9 = v44;\n    if (v46 != 61) {\n        goto lab_0x4048af;\n    } else {\n        goto lab_0x404935;\n    }\n  lab_0x404968:;\n    char v48 = *(char *)v49; // 0x404968\n    int64_t v50 = v51 + 0xffffffd0 & 0xffffffff; // 0x40496c\n    v52 = v50;\n    v53 = v49;\n    int64_t v54 = v50; // 0x404978\n    int64_t v55 = v49; // 0x404978\n    char v56 = v48; // 0x404978\n    if ((v48 & -8) == 48) {\n        int64_t v57 = v55 + 1; // 0x404980\n        int64_t v58 = 8 * v54 + 0xffffffd0 + (int64_t)v56 & 0xffffffff; // 0x404984\n        char v59 = *(char *)v57; // 0x404989\n        v52 = v58;\n        v53 = v57;\n        v54 = v58;\n        v55 = v57;\n        while ((v59 & -8) == 48) {\n            // 0x404980\n            v57 = v55 + 1;\n            v58 = 8 * v54 + 0xffffffd0 + (int64_t)v59 & 0xffffffff;\n            v59 = *(char *)v57;\n            v52 = v58;\n            v53 = v57;\n            v54 = v58;\n            v55 = v57;\n        }\n    }\n    goto lab_0x404897;\n  lab_0x4049a0:;\n    int64_t v64 = (int64_t)*(char *)v49; // 0x4049a8\n    int64_t v65 = v64 + 0xffffffd0; // 0x4049ac\n    v27 = v65;\n    v28 = v64;\n    v29 = 0;\n    v30 = v49;\n    v31 = v49;\n    v32 = 0;\n    if ((char)v65 < 55) {\n        while (true) {\n          lab_0x4049b6:\n            // 0x4049b6\n            v21 = v29;\n            v20 = v28;\n            v23 = v30;\n            uint64_t v33 = v27 % 64; // 0x4049b9\n            uint64_t v34 = 1 << v33;\n            while ((v34 & 0x7e0000) == 0) {\n                if (v34 % 0x7e000000000001 != 0) {\n                    // 0x404ac8\n                    goto lab_0x4049a8;\n                }\n                // 0x4049d2\n                v31 = v23;\n                v32 = v21;\n                if (v33 > 9) {\n                    // break (via goto) -> 0x404a00\n                    goto lab_0x404a00_3;\n                }\n                int64_t v35 = v23 + 1; // 0x4049db\n                int64_t v36 = v20 + 0xffffffd0 + 16 * v21 & 0xffffffff; // 0x4049e3\n                int64_t v37 = (int64_t)*(char *)v35; // 0x4049e8\n                int64_t v38 = v37 + 0xffffffd0; // 0x4049ec\n                v31 = v35;\n                v32 = v36;\n                if ((char)v38 >= 55) {\n                    // break (via goto) -> 0x404a00\n                    goto lab_0x404a00_3;\n                }\n                v21 = v36;\n                v20 = v37;\n                v23 = v35;\n                v33 = v38 % 64;\n                v34 = 1 << v33;\n            }\n            // 0x404ab0\n            goto lab_0x4049a8;\n        }\n    }\n  lab_0x404a00_3:\n    // 0x404a00\n    *(char *)v60 = (char)v32;\n    v1 = v31;\n    goto lab_0x4048a2;\n  lab_0x404897:\n    // 0x404897\n    *(char *)v60 = (char)v52;\n    v1 = v53;\n    goto lab_0x4048a2;\n  lab_0x4048a2:\n    // 0x4048a2\n    v4 = v61;\n    v5 = v62;\n    v2 = v60 + 1;\n    v3 = v63 + 1;\n    goto lab_0x4048a2_2;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b37",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1) {\n    int64_t v1 = 16 * a1 & 0xffffffff0; // 0x404ae4\n    int64_t v2 = *(int64_t *)(v1 + (int64_t)&g55); // 0x404ae8\n    if (v2 == 0) {\n        // 0x404b0c\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + (int64_t)&g56); // 0x404af4\n    int64_t v4; // 0x404ae0\n    int64_t v5; // 0x404ae0\n    int64_t v6; // 0x404ae0\n    int64_t v7; // 0x404b2a\n    switch (v2) {\n        case 1: {\n            // 0x404b10\n            return *(char *)v3 != 48;\n        }\n        case 2: {\n            // 0x404b20\n            bool v8; // 0x404ae0\n            v7 = v8 ? -1 : 1;\n            v5 = (int64_t)\"00\";\n            v6 = v3;\n            v4 = 2;\n            // break -> \n            break;\n        }\n        default: {\n            // 0x404b0c\n            return 1;\n        }\n    }\n    unsigned char v9 = *(char *)v6; // 0x404b2a\n    char v10 = *(char *)v5; // 0x404b2a\n    char v11 = v10; // 0x404b2a\n    bool v12 = false; // 0x404b2a\n    while (v9 == v10) {\n        int64_t v13 = v4 - 1; // 0x404b2a\n        v5 += v7;\n        v6 += v7;\n        v4 = v13;\n        v11 = v9;\n        v12 = true;\n        if (v13 == 0) {\n            // break -> \n            break;\n        }\n        v9 = *(char *)v6;\n        v10 = *(char *)v5;\n        v11 = v10;\n        v12 = false;\n    }\n    unsigned char v14 = v11;\n    return !((v9 < v14 | v12)) != v9 < v14;\n}\n"
        },
        {
            "funcName": "function_404b40",
            "funcStartAddr": "404b40",
            "funcEndAddr": "404ba6",
            "decompiledFuncCode": "int64_t function_404b40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404b40\n    int64_t v1; // bp-16, 0x404b40\n    int64_t v2; // 0x404b40\n    int64_t v3 = function_4132b0(a1, 0, 0, &v1, (int64_t *)&g24, v2); // 0x404b53\n    int32_t v4 = v3; // 0x404b58\n    if (v4 == 0) {\n        // 0x404b90\n        g123 = v1;\n        return 1;\n    }\n    if (v4 != 1) {\n        // 0x404b80\n        return 0;\n    }\n    // 0x404b61\n    g123 = -1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404d89",
            "decompiledFuncCode": "int64_t function_404bb0(int64_t a1, int64_t a2) {\n    // 0x404bb0\n    int64_t result; // 0x404bb0\n    for (int64_t i = 0; i < 9; i += 8) {\n        int64_t v1 = *(int64_t *)(i + (int64_t)&g53); // 0x404bc3\n        char v2 = *(char *)v1; // 0x404bca\n        int64_t v3 = v1; // 0x404bcf\n        char v4 = v2; // 0x404bcf\n        int64_t v5 = 0; // 0x404bcf\n        if (v2 != 0) {\n            int64_t v6 = v3;\n            int64_t v7 = v6 + 1;\n            char v8 = *(char *)v7; // 0x404bd8\n            int64_t v9 = v7; // 0x404bdf\n            char v10 = v8; // 0x404bdf\n            int64_t v11; // 0x404ca0\n            if (v4 == 37) {\n                if (v8 == 37) {\n                    // 0x404ca0\n                    v11 = v6 + 2;\n                    v9 = v11;\n                    v10 = *(char *)v11;\n                } else {\n                    // 0x404bf9\n                    v9 = v7;\n                    v10 = v8;\n                    if (v8 == 98) {\n                        // break -> 0x404bfe\n                        break;\n                    }\n                }\n            }\n            // 0x404be3\n            v4 = v10;\n            v5 = 0;\n            while (v10 != 0) {\n                // 0x404bd8\n                v6 = v9;\n                v7 = v6 + 1;\n                v8 = *(char *)v7;\n                v9 = v7;\n                v10 = v8;\n                if (v4 == 37) {\n                    if (v8 == 37) {\n                        // 0x404ca0\n                        v11 = v6 + 2;\n                        v9 = v11;\n                        v10 = *(char *)v11;\n                    } else {\n                        // 0x404bf9\n                        v9 = v7;\n                        v10 = v8;\n                        v5 = v6;\n                        if (v8 == 98) {\n                            // break -> 0x404bfe\n                            break;\n                        }\n                    }\n                }\n                // 0x404be3\n                v4 = v10;\n                v5 = 0;\n            }\n        }\n        // 0x404bfe\n        result = v5;\n        int64_t v12; // bp-1624, 0x404bb0\n        *(int64_t *)((int64_t)&v12 + 16 + i) = result;\n    }\n    // 0x404c0d\n    int64_t v13; // bp-1608, 0x404bb0\n    int64_t v14; // 0x404bb0\n    if (v14 == 0 && v13 == 0) {\n        // 0x404cc5\n        return result;\n    }\n    // 0x404c1f\n    char * found_char_pos; // 0x404c50\n    while (true) {\n        int64_t v15 = 5;\n        int64_t v16; // bp-1592, 0x404bb0\n        int64_t v17 = &v16; // 0x404c34\n        int64_t v18 = 0; // 0x404c34\n        int64_t item = 0x2000e; // 0x404c34\n        int64_t v19 = v15; // bp-1616, 0x404c3b\n        char * str = nl_langinfo((int32_t)item); // 0x404c40\n        found_char_pos = strchr(str, 37);\n        if (found_char_pos != NULL) {\n            return (int64_t)found_char_pos;\n        }\n        int64_t result2 = function_40e570((int64_t)str, v17, 128, &v19, 0, 0); // 0x404c70\n        while (result2 < 128) {\n            uint64_t v20 = v18;\n            uint64_t v21 = v19; // 0x404c7b\n            v17 += 128;\n            v18 = v20 < v21 ? v21 : v20;\n            item = item + 1 & 0xffffffff;\n            int64_t v22; // bp-56, 0x404bb0\n            if (v17 == (int64_t)&v22) {\n                // break -> 0x404c94\n                break;\n            }\n            v19 = v15;\n            str = nl_langinfo((int32_t)item);\n            found_char_pos = strchr(str, 37);\n            if (found_char_pos != NULL) {\n                return (int64_t)found_char_pos;\n            }\n            // 0x404c5a\n            result2 = function_40e570((int64_t)str, v17, 128, &v19, 0, 0);\n        }\n        // 0x404cc5\n        return result2;\n    }\n  lab_0x404cc5:\n    // 0x404cc5\n    return (int64_t)found_char_pos;\n  lab_0x404ced:;\n    // 0x404ced\n    int64_t v23; // 0x404bb0\n    int64_t v24 = v23;\n    int64_t v25 = *(int64_t *)(v24 + (int64_t)&g53); // 0x404cf4\n    char * v26 = (char *)v25;\n    int64_t v27 = 192 * v24 + (int64_t)&g97; // 0x404d08\n    int64_t v28; // 0x404bbc\n    int64_t v29 = v28 + 32; // 0x404d08\n    goto lab_0x404d6a;\n  lab_0x404d6a:;\n    int64_t v30 = v29;\n    int64_t str2 = v27;\n    int64_t v31; // 0x404bb0\n    int64_t v32 = *(int64_t *)v31; // 0x404d6a\n    int64_t v33; // 0x404bb0\n    int32_t chars_printed; // 0x404bb0\n    if (v32 != 0) {\n        int64_t v34 = v32 - v25; // 0x404d13\n        v33 = v32;\n        if (v34 > 128) {\n            goto lab_0x404cc5;\n        } else {\n            // 0x404d1f\n            *(int64_t *)(v28 - 16) = v32 + 2;\n            *(int64_t *)(v28 - 24) = v30;\n            *(int64_t *)(v28 - 32) = v25;\n            chars_printed = __snprintf_chk((char *)str2, 128, 1, -1, \"%.*s%s%s\", v34);\n            goto lab_0x404d50;\n        }\n    } else {\n        // 0x404d72\n        chars_printed = snprintf((char *)str2, 128, \"%s\", v26);\n        goto lab_0x404d50;\n    }\n  lab_0x404d50:;\n    int32_t v35 = chars_printed;\n    if (v35 < 128) {\n        int64_t v36 = v30 + 128; // 0x404d59\n        v27 = str2 + 128;\n        v29 = v36;\n        int64_t v37; // 0x404bb0\n        if (v36 == v37) {\n            // 0x404cb0\n            v31 += 8;\n            v23 = v24 + 8;\n            if (v24 != 8) {\n                goto lab_0x404ced;\n            } else {\n                // 0x404cbe\n                g96 = 1;\n                v33 = v35;\n                goto lab_0x404cc5;\n            }\n        } else {\n            goto lab_0x404d6a;\n        }\n    } else {\n        // 0x404cc5\n        v33 = v35;\n        goto lab_0x404cc5;\n    }\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404df6",
            "decompiledFuncCode": "int64_t function_404d90(int64_t * a1, int32_t a2, int64_t a3) {\n    int64_t v1 = function_412980(32); // 0x404da8\n    int64_t v2 = 0; // 0x404db5\n    if (a2 != 0) {\n        // 0x404db7\n        v2 = function_412bb0((int64_t)a2);\n    }\n    // 0x404dbf\n    *(int64_t *)(v1 + 8) = v2;\n    int64_t v3 = 0; // 0x404dc8\n    if (a1 != NULL) {\n        // 0x404dca\n        v3 = function_412bb0((int64_t)a1);\n    }\n    // 0x404dd2\n    *(int64_t *)v1 = v3;\n    int64_t result = g172; // 0x404dd5\n    *(char *)(v1 + 16) = (char)a3;\n    *(int64_t *)(v1 + 24) = result;\n    g172 = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e0b",
            "decompiledFuncCode": "int64_t function_404e00(int64_t str, int64_t str2) {\n    // 0x404e00\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404e1e",
            "decompiledFuncCode": "int64_t function_404e10(int64_t a1, int64_t a2) {\n    char * str = (char *)a1; // 0x404e19\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e78",
            "decompiledFuncCode": "int64_t function_404e20(int64_t str) {\n    // 0x404e20\n    char v1; // bp-26, 0x404e20\n    int64_t v2 = function_411cd0((int64_t *)&v1, 2, str, -1, (int64_t)g127); // 0x404e44\n    int64_t v3; // 0x404e20\n    if (v1 != (char)v3) {\n        // 0x404e52\n        return 1;\n    }\n    int64_t len = strlen((char *)str); // 0x404e66\n    return len & -256 | (int64_t)(v2 != len);\n}\n"
        },
        {
            "funcName": "function_404e80",
            "funcStartAddr": "404e80",
            "funcEndAddr": "404f3f",
            "decompiledFuncCode": "int64_t function_404e80(int64_t a1, int32_t a2) {\n    char * str = (char *)a1;\n    uint64_t v1 = (int64_t)strlen(str) + 1; // 0x404e93\n    uint128_t v2 = 3 * (int128_t)v1; // 0x404e9c\n    if ((int64_t)v2 < 0) {\n        // 0x404f3a\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    if (v2 % 0x30000000000000001 != 0) {\n        // 0x404f3a\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    int64_t result = function_412980(3 * v1); // 0x404ec2\n    char v3 = *str; // 0x404ecd\n    int64_t v4 = result; // 0x404ed2\n    if (v3 == 0) {\n      lab_0x404efe_2:\n        // 0x404efe\n        *(char *)v4 = 0;\n        return result;\n    }\n    char v5 = v3; // 0x404ecd\n    int64_t v6 = result;\n    int64_t v7 = a1; // 0x404ed4\n    int64_t v8; // 0x404e80\n    while (true) {\n      lab_0x404ed4:;\n        int64_t v9 = v6;\n        unsigned char v10 = v5;\n        v7++;\n        while ((char)a2 == 0 || v10 != 47) {\n            char v11 = *(char *)((int64_t)v10 + (int64_t)&g98); // 0x404ee4\n            if (v11 == 0) {\n                // 0x404f10\n                __sprintf_chk((char *)v9, 1, -1, \"%%%02x\", (int32_t)v10);\n                v8 = v9 + 3;\n                goto lab_0x404ecd;\n            }\n            // 0x404ef0\n            *(char *)v9 = v10;\n            char v12 = *(char *)v7; // 0x404ef3\n            int64_t v13 = v9 + 1; // 0x404ef6\n            v4 = v13;\n            if (v12 == 0) {\n                // break (via goto) -> 0x404efe\n                goto lab_0x404efe_2;\n            }\n            v9 = v13;\n            v10 = v12;\n            v7++;\n        }\n        // 0x404f30\n        *(char *)v9 = 47;\n        v8 = v9 + 1;\n        goto lab_0x404ecd;\n    }\n  lab_0x404efe_2:\n    // 0x404efe\n    *(char *)v4 = 0;\n    return result;\n  lab_0x404ecd:\n    // 0x404ecd\n    v6 = v8;\n    v5 = *(char *)v7;\n    v4 = v6;\n    if (v5 == 0) {\n        // break -> 0x404efe\n        goto lab_0x404efe_2;\n    }\n    goto lab_0x404ed4;\n}\n"
        },
        {
            "funcName": "function_404f40",
            "funcStartAddr": "404f40",
            "funcEndAddr": "4050f8",
            "decompiledFuncCode": "int64_t function_404f40(void) {\n    int64_t v1 = g179; // 0x404f41\n    int64_t v2 = v1 / 2 + v1; // 0x404f4e\n    int64_t v3 = v2; // 0x404f58\n    int64_t v4 = v1; // 0x404f58\n    if (v2 > g175) {\n        int64_t v5 = g176; // 0x405050\n        free((int64_t *)v5);\n        uint128_t v6 = 24 * (g179 & 0xffffffffffffffff); // 0x405064\n        if ((int64_t)v6 < 0 || v6 % 0x1f0000000000000001 != 0) {\n            // 0x4050a9\n            function_412bd0(v5);\n            // UNREACHABLE\n        }\n        int64_t v7 = function_412980(24 * v1); // 0x405086\n        v4 = g179;\n        g176 = v7;\n        v3 = 3 * v4;\n        g175 = v3;\n    }\n    int64_t result = v3; // 0x404f61\n    if (v4 != 0) {\n        int64_t v8 = g176; // 0x404f75\n        int64_t v9 = g181; // 0x404f75\n        *(int64_t *)v8 = v9;\n        v8 += 8;\n        v9 += 200;\n        result = v8;\n        while (g176 + 8 * v4 != v8) {\n            // 0x404f78\n            *(int64_t *)v8 = v9;\n            v8 += 8;\n            v9 += 200;\n            result = v8;\n        }\n    }\n    // 0x404f8b\n    if (g152 == -1) {\n        // 0x405034\n        return result;\n    }\n    int32_t v10 = _setjmp({\n        (struct {int32_t e0[8]; int32_t e1; struct _TYPEDEF___sigset_t e2;}){\n            .e0 = {(int32_t)&g95, 0, 0, 0, 0, 0, 0, 0},\n            .e1 = 0,\n            .e2 = (struct {int32_t e0[1];}){\n                .e0 = {0}\n            }\n        }    \n}); // 0x404f9d\n    int64_t v11; // 0x404f40\n    int64_t v12; // 0x404f40\n    if (v10 == 0) {\n        // 0x405040\n        v11 = 0;\n        v12 = g179;\n    } else {\n        if (g152 == 3) {\n            // 0x4050ae\n            __assert_fail(\"sort_type != sort_version\", \"src/ls.c\", 3813, \"sort_files\");\n            *__errno_location() = 0;\n            return strcoll(\"sort_type != sort_version\", \"src/ls.c\");\n        }\n        int64_t v13 = g179; // 0x404fbb\n        v11 = 2;\n        v12 = 0;\n        if (v13 != 0) {\n            int64_t v14 = g176; // 0x404fdc\n            int64_t v15 = g181; // 0x404fdc\n            *(int64_t *)v14 = v15;\n            v14 += 8;\n            v15 += 200;\n            v11 = 2;\n            v12 = v13;\n            while (v14 != 8 * v13 + g176) {\n                // 0x404fe0\n                *(int64_t *)v14 = v15;\n                v14 += 8;\n                v15 += 200;\n                v11 = 2;\n                v12 = v13;\n            }\n        }\n    }\n    int32_t v16 = g152 == 4 ? g153 : 0; // 0x405003\n    unsigned char v17 = *(char *)&g132; // 0x40500a\n    int64_t v18 = *(int64_t *)(8 * (2 * ((4 * (int64_t)(v16 + g152) | v11) + (int64_t)g151) + (int64_t)v17) + (int64_t)&g5); // 0x405027\n    // 0x405034\n    return function_40edd0(g176, v12, v18);\n}\n"
        },
        {
            "funcName": "function_405100",
            "funcStartAddr": "405100",
            "funcEndAddr": "405108",
            "decompiledFuncCode": "int64_t function_405100(int64_t a1, int64_t a2) {\n    // 0x405100\n    int64_t result; // 0x405100\n    return result;\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "40511b",
            "decompiledFuncCode": "int64_t function_405110(int64_t a1, int64_t result) {\n    // 0x405110\n    return result;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "40512e",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1, int64_t a2) {\n    // 0x405120\n    return function_40bd40(a1, a1);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "40513b",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2) {\n    // 0x405130\n    return function_40bd40(a1, a2);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "4052bb",
            "decompiledFuncCode": "int64_t function_405140(int32_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a2; // 0x405152\n    int64_t v2; // 0x405140\n    if (a1 != 0 && g182 != 0) {\n        // 0x40515e\n        v2 = function_404d90(NULL, a1, 0);\n        v1 = a1;\n    }\n    uint64_t v3 = a2 % 256; // 0x405149\n    int64_t v4 = g179; // 0x40516a\n    int64_t v5 = v1; // 0x405180\n    int64_t v6 = v4; // 0x405180\n    int64_t result = v2; // 0x405180\n    int64_t v7; // 0x405140\n    int64_t v8; // 0x405140\n    int64_t v9; // 0x405140\n    int64_t v10; // 0x40518d\n    int32_t * v11; // 0x405191\n    int64_t * v12; // 0x4051a1\n    int64_t v13; // 0x4051a1\n    if (v4 != 0) {\n        while (true) {\n          lab_0x405186_2:\n            // 0x405186\n            v8 = v6;\n            v9 = v5;\n            int64_t v14; // 0x405140\n            uint32_t v15; // 0x405191\n            while (true) {\n              lab_0x405186:\n                // 0x405186\n                v14 = v9;\n                v6 = v8 - 1;\n                v10 = *(int64_t *)(g176 + 8 * v6);\n                v11 = (int32_t *)(v10 + 168);\n                v15 = *v11;\n                if (v15 != 3 == (v15 != 9)) {\n                    // break -> 0x405178\n                    break;\n                }\n                // 0x4051a1\n                v12 = (int64_t *)v10;\n                v13 = *v12;\n                if (a1 == 0) {\n                    goto lab_0x405280;\n                } else {\n                    int64_t v16 = function_40b870(v13, v14); // 0x4051b1\n                    if (*(char *)v16 == 46) {\n                        int64_t v17 = v16 + 1; // 0x40529a\n                        unsigned char v18 = *(char *)(v17 + (int64_t)(*(char *)v17 == 46)); // 0x4052a1\n                        switch (v18) {\n                            case 0: {\n                                // 0x405178\n                                v7 = v18;\n                                v5 = v14;\n                                goto lab_0x405178;\n                            }\n                            case 47: {\n                                // 0x405178\n                                v7 = v18;\n                                v5 = v14;\n                                goto lab_0x405178;\n                            }\n                            default: {\n                                goto lab_0x4051bf;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4051bf;\n                    }\n                }\n            }\n            // 0x405178\n            v7 = v15;\n            v5 = v14;\n            goto lab_0x405178;\n        }\n    }\n  lab_0x405230_2:;\n    int64_t v19 = g179; // 0x405230\n    if (v19 == 0) {\n        // 0x405270\n        g179 = 0;\n        return result;\n    }\n    int64_t v20 = 0; // 0x40524c\n    int64_t v21 = *(int64_t *)g176; // 0x405250\n    *(int64_t *)(8 * v20 + g176) = v21;\n    int64_t result2 = g176 + 8; // 0x405261\n    int64_t v22 = v20 + (int64_t)(*(int32_t *)(v21 + 168) != 9); // 0x405268\n    int64_t v23 = result2; // 0x40526e\n    v20 = v22;\n    while (g176 + 8 * v19 != result2) {\n        // 0x405250\n        v21 = *(int64_t *)v23;\n        *(int64_t *)(8 * v20 + g176) = v21;\n        result2 = v23 + 8;\n        v22 = v20 + (int64_t)(*(int32_t *)(v21 + 168) != 9);\n        v23 = result2;\n        v20 = v22;\n    }\n    // 0x405270\n    g179 = v22;\n    return result2;\n  lab_0x405178:\n    // 0x405178\n    result = v7;\n    if (v6 == 0) {\n        // break -> 0x405230\n        goto lab_0x405230_2;\n    }\n    goto lab_0x405186_2;\n  lab_0x405280:;\n    int64_t v24 = *(int64_t *)(v10 + 8); // 0x405280\n    int64_t v25 = function_404d90((int64_t *)v13, (int32_t)v24, v3); // 0x40528a\n    int64_t v26 = v24; // 0x40528f\n    int64_t v27 = v25; // 0x40528f\n    goto lab_0x4051f0;\n  lab_0x4051f0:;\n    int64_t v28 = v26;\n    v7 = v27;\n    v5 = v28;\n    if (*v11 != 9) {\n        goto lab_0x405178;\n    }\n    // 0x4051fd\n    free((int64_t *)*v12);\n    free((int64_t *)*(int64_t *)(v10 + 8));\n    free((int64_t *)*(int64_t *)(v10 + 16));\n    v8 = v6;\n    v9 = v28;\n    result = &g209;\n    if (v6 == 0) {\n        // break (via goto) -> 0x405230\n        goto lab_0x405230_2;\n    }\n    goto lab_0x405186;\n  lab_0x4051bf:\n    // 0x4051bf\n    if (*(char *)v13 == 47) {\n        goto lab_0x405280;\n    } else {\n        int64_t v29 = function_40bb70(); // 0x4051d1\n        int64_t v30 = *(int64_t *)(v10 + 8); // 0x4051d6\n        int64_t * v31 = (int64_t *)v29; // 0x4051e3\n        function_404d90(v31, (int32_t)v30, v3);\n        free(v31);\n        v26 = v30;\n        v27 = &g209;\n        goto lab_0x4051f0;\n    }\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "405381",
            "decompiledFuncCode": "int64_t function_4052c0(uint64_t a1, uint64_t a2) {\n    // 0x4052c0\n    int64_t result; // 0x4052c0\n    if (a1 >= a2) {\n        // 0x40534d\n        return result;\n    }\n    int64_t v1 = a1; // 0x4052c3\n    uint64_t v2; // 0x4052c0\n    uint64_t v3; // 0x4052c0\n    uint64_t v4; // 0x405324\n    int64_t * v5; // 0x405328\n    uint64_t v6; // 0x405328\n    uint64_t v7; // 0x40532c\n    while (true) {\n      lab_0x405316_2:\n        // 0x405316\n        v2 = v1;\n        int64_t v8 = (int64_t)g86; // 0x405316\n        uint64_t v9 = (int64_t)g125; // 0x40531d\n        v4 = v2 + 1;\n        v5 = (int64_t *)(v8 + 40);\n        v6 = *v5;\n        v7 = *(int64_t *)(v8 + 48);\n        if (v9 != 0) {\n            if (a2 / v9 > v4 / v9) {\n                int64_t v10; // 0x4052c0\n                if (v6 >= v7) {\n                    // 0x405368\n                    __overflow(g86, 9);\n                    v10 = g125;\n                } else {\n                    // 0x4052f5\n                    *v5 = v6 + 1;\n                    *(char *)v6 = 9;\n                    v10 = v9;\n                }\n                // 0x405300\n                v3 = v10;\n                int64_t v11 = v3 + v2 - v2 % v3; // 0x40530e\n                if (v11 >= a2) {\n                    return v2 / v3;\n                }\n                // 0x405316\n                v1 = v11;\n                goto lab_0x405316_2;\n            } else {\n                goto lab_0x405335;\n            }\n        } else {\n            goto lab_0x405335;\n        }\n    }\n    // 0x40534d\n    return v2 / v3;\n  lab_0x405335:;\n    int64_t v12; // 0x4052c0\n    if (v6 >= v7) {\n        // 0x405358\n        v12 = __overflow(g86, 32);\n    } else {\n        int64_t v13 = v6 + 1; // 0x40533a\n        *v5 = v13;\n        *(char *)v6 = 32;\n        v12 = v13;\n    }\n    // 0x405345\n    result = v12;\n    if (v4 >= a2) {\n        return result;\n    }\n    // 0x405316\n    v1 = v4;\n    goto lab_0x405316_2;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "405456",
            "decompiledFuncCode": "int64_t function_405390(char * a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 24); // 0x405396\n    int64_t result = *v2; // 0x405396\n    int64_t * v3 = (int64_t *)(v1 + 16); // 0x40539a\n    int64_t v4 = *v3; // 0x40539a\n    uint64_t v5 = result - v4; // 0x4053a1\n    if (v5 < 8) {\n        // 0x405439\n        return result;\n    }\n    if (result == v4) {\n        char * v6 = (char *)(v1 + 80); // 0x405440\n        *v6 = *v6 | 2;\n    }\n    int64_t v7 = *(int64_t *)(v1 + 48); // 0x4053b7\n    int64_t v8 = *(int64_t *)(v1 + 8); // 0x4053bb\n    int64_t v9 = v7 + result & -1 - v7; // 0x4053c5\n    int64_t v10 = *(int64_t *)(v1 + 32); // 0x4053c8\n    int64_t v11 = v9 - v8 > v10 - v8 ? v10 : v9; // 0x4053db\n    *v2 = v11;\n    *v3 = v11;\n    fputs_unlocked(a1, g86);\n    int64_t v12 = v4 + 8; // 0x40540f\n    __printf_chk(1, \" %lu\", (int32_t)*(int64_t *)v4);\n    while ((v5 & -8) + v4 != v12) {\n        int64_t v13 = v12;\n        v12 = v13 + 8;\n        __printf_chk(1, \" %lu\", (int32_t)*(int64_t *)v13);\n    }\n    int64_t v14 = (int64_t)g86; // 0x40541d\n    int64_t * v15 = (int64_t *)(v14 + 40); // 0x405424\n    uint64_t result2 = *v15; // 0x405424\n    if (result2 >= *(int64_t *)(v14 + 48)) {\n        // 0x405449\n        return __overflow(g86, 10);\n    }\n    // 0x40542e\n    *v15 = result2 + 1;\n    *(char *)result2 = 10;\n    // 0x405439\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "405519",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t result; // 0x4054d3\n    if (a1 == 0) {\n        // 0x405500\n        __printf_chk(1, \"%*lu \", a3, (int32_t)a2);\n        // 0x4054cc\n        result = (int64_t)(0x100000000 * a3 >> 32) + 1 + g105;\n        g105 = result;\n        return result;\n    }\n    int32_t v1 = (int32_t)a3 - (int32_t)function_40eb70(a1, 0); // 0x405485\n    int64_t v2 = v1 > 0 ? v1 : 0; // 0x40548c\n    char * str = (char *)a1; // 0x40548f\n    fputs_unlocked(str, g86);\n    int32_t len = strlen(str); // 0x405497\n    int64_t v3 = v2; // 0x4054a2\n    int64_t v4 = (int64_t)g86; // 0x4054a8\n    int64_t * v5 = (int64_t *)(v4 + 40); // 0x4054af\n    uint64_t v6 = *v5; // 0x4054af\n    if (v6 >= *(int64_t *)(v4 + 48)) {\n        // 0x4054f0\n        __overflow(g86, 32);\n    } else {\n        // 0x4054b9\n        *v5 = v6 + 1;\n        *(char *)v6 = 32;\n    }\n    while ((int32_t)v3 != -1) {\n        // 0x4054a8\n        v3 &= 0xffffffff;\n        v4 = (int64_t)g86;\n        v5 = (int64_t *)(v4 + 40);\n        v6 = *v5;\n        if (v6 >= *(int64_t *)(v4 + 48)) {\n            // 0x4054f0\n            __overflow(g86, 32);\n        } else {\n            // 0x4054b9\n            *v5 = v6 + 1;\n            *(char *)v6 = 32;\n        }\n    }\n    // 0x4054cc\n    result = v2 + (int64_t)len + 1 + g105;\n    g105 = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "40555f",
            "decompiledFuncCode": "int64_t function_405520(uint32_t a1, int32_t a2, char a3) {\n    int64_t v1 = a2;\n    if (a3 == 0) {\n        // 0x40553b\n        return function_405460((int64_t)&g21, (int64_t)a1, v1 & 0xffffffff);\n    }\n    int64_t v2 = 0; // 0x405539\n    int64_t v3 = v1; // 0x405539\n    if (g149 == 0) {\n        // 0x405550\n        v2 = function_40e160((int64_t)a1);\n        v3 = v1 & 0xffffffff;\n    }\n    // 0x40553b\n    return function_405460(v2, (int64_t)a1, v3 & 0xffffffff);\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "40557a",
            "decompiledFuncCode": "int64_t function_405560(void) {\n    uint32_t v1 = g111; // 0x405560\n    int64_t result = v1; // 0x405568\n    if (v1 == 0) {\n        // 0x40556a\n        g109 = &g110;\n        result = &g110;\n    }\n    // 0x405579\n    return result;\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "4055e1",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t format, int64_t a3) {\n    // 0x405580\n    function_412040(4, a3);\n    error(0, *__errno_location(), (char *)format);\n    if ((char)a1 != 0) {\n        // 0x4055b3\n        g108 = 2;\n        // 0x4055bd\n        return &g209;\n    }\n    int64_t result = g108; // 0x4055c8\n    if (g108 != 0) {\n        // 0x4055bd\n        return result;\n    }\n    // 0x4055d2\n    g108 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "405626",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t str, int64_t str2) {\n    int64_t v1 = *(int64_t *)(str2 + 72); // 0x4055f0\n    int64_t v2 = *(int64_t *)(str + 72); // 0x4055f4\n    if (v2 > v1) {\n        // 0x405620\n        return 0xffffffff;\n    }\n    int64_t v3 = v2 - v1; // 0x4055f4\n    if (v3 != 0) {\n        // 0x405610\n        return v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0;\n    }\n    // 0x4055fc\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "405686",
            "decompiledFuncCode": "int64_t function_405630(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x405630\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x405636\n    if (v2 != 9 && v2 != 3 && (v1 == 3 || v1 == 9)) {\n        // 0x40566b\n        return 0xffffffff;\n    }\n    // 0x40565e\n    return v1 == 3 | v1 == 9 ? (int64_t)(v2 == 3) | (int64_t)(v1 & -256) : 1;\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "4056e7",
            "decompiledFuncCode": "int64_t function_405690(int64_t str, int64_t str2, int64_t a3) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x405690\n    int32_t v2 = *(int32_t *)(str2 + 168); // 0x405696\n    bool v3 = v2 == 3 | v2 == 9;\n    if (v3) {\n        // 0x4056be\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x4056cb\n            return 1;\n        }\n    } else {\n        // 0x4056ba\n        if (v1 == 3 || v1 == 9) {\n            // 0x4056cb\n            return 0xffffffff;\n        }\n    }\n    // 0x4056d0\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "405746",
            "decompiledFuncCode": "int64_t function_4056f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x4056f0\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x4056f6\n    if (v2 != 9 && v2 != 3 && (v1 == 3 || v1 == 9)) {\n        // 0x40572e\n        return 0xffffffff;\n    }\n    // 0x405721\n    return v1 == 3 | v1 == 9 ? (int64_t)(v2 == 3) | (int64_t)(v1 & -256) : 1;\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057af",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x405750\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x405756\n    bool v3 = v2 == 3 | v2 == 9;\n    if (v3) {\n        // 0x405781\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40578e\n            return 1;\n        }\n    } else {\n        // 0x40577d\n        if (v1 == 3 || v1 == 9) {\n            // 0x40578e\n            return 0xffffffff;\n        }\n    }\n    char * str = (char *)a1; // 0x40579e\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "405899",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    bool v1; // 0x4057b0\n    if ((char)a1 == 0) {\n        int32_t v2 = a3; // 0x405842\n        if (v2 == 5) {\n            // 0x40581a\n            return 0;\n        }\n        // 0x405847\n        v1 = v2 == 9 | v2 == 3;\n    } else {\n        int64_t v3 = a2 & 0xf000; // 0x4057bb\n        if (v3 == 0x8000) {\n            // 0x405820\n            if (g143 == 3) {\n                // 0x40582b\n                return (a2 & 73) == 0 ? 0 : 42;\n            }\n            // 0x40581a\n            return 0;\n        }\n        // 0x4057c7\n        v1 = v3 == 0x4000;\n    }\n    // 0x4057cf\n    if (v1) {\n        // 0x40581a\n        return 47;\n    }\n    // 0x4057d8\n    if (g143 == 1) {\n        // 0x40581a\n        return 0;\n    }\n    if ((char)a1 == 0) {\n        int64_t result = 61; // 0x4057b0\n        switch ((int32_t)a3) {\n            case 6: {\n                // 0x40581a\n                return 64;\n            }\n            case 1: {\n                // 0x40581a\n                return 124;\n            }\n            default: {\n                // 0x405874\n                result = 0;\n            }\n            case 7: {\n                // 0x40581a\n                return result;\n            }\n        }\n    }\n    int64_t v4 = a2 & 0xf000; // 0x4057e8\n    if (v4 == 0xa000) {\n        // 0x40581a\n        return 64;\n    }\n    int32_t v5 = v4; // 0x405804\n    if (v5 == 0x1000) {\n        // 0x40581a\n        return 124;\n    }\n    // 0x40581a\n    return v5 == 0xc000 ? 61 : 0;\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058ea",
            "decompiledFuncCode": "int64_t function_4058a0(unsigned char a1) {\n    // 0x4058a0\n    int64_t v1; // 0x4058a0\n    int64_t v2 = function_4057b0((int64_t)a1, v1, v1, v1); // 0x4058a5\n    char v3 = v2; // 0x4058ac\n    if (v3 == 0) {\n        // 0x4058d3\n        return v2 & -256 | (int64_t)(v3 != 0);\n    }\n    int64_t v4 = (int64_t)g86; // 0x4058b0\n    int64_t * v5 = (int64_t *)(v4 + 40); // 0x4058b7\n    uint64_t v6 = *v5; // 0x4058b7\n    int64_t v7; // 0x4058a0\n    if (v6 >= *(int64_t *)(v4 + 48)) {\n        // 0x4058e0\n        v7 = __overflow(g86, (int32_t)v2 % 256);\n    } else {\n        // 0x4058c1\n        *v5 = v6 + 1;\n        *(char *)v6 = v3;\n        v7 = v6;\n    }\n    // 0x4058cb\n    g105++;\n    // 0x4058d3\n    return v7 & -256 | (int64_t)(v3 != 0);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405966",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t str, int64_t str2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x4058f0\n    int32_t v2 = *(int32_t *)(str2 + 168); // 0x4058f6\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40591e\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40592b\n            return 1;\n        }\n    } else {\n        // 0x40591a\n        if (v1 == 3 || v1 == 9) {\n            // 0x40592b\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(str2 + 96); // 0x405930\n    int64_t v5 = *(int64_t *)(str + 96); // 0x405934\n    if (v5 > v4) {\n        // 0x40592b\n        return 0xffffffff;\n    }\n    // 0x40593a\n    if (v5 < v4) {\n        // 0x40592b\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 104) - *(int32_t *)(str + 104); // 0x405940\n    if (result != 0) {\n        // 0x40592b\n        return result;\n    }\n    // 0x405945\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "4059cf",
            "decompiledFuncCode": "int64_t function_405970(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x405970\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x405976\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x4059a1\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x4059ae\n            return 1;\n        }\n    } else {\n        // 0x40599d\n        if (v1 == 3 || v1 == 9) {\n            // 0x4059ae\n            return 0xffffffff;\n        }\n    }\n    // 0x4059b8\n    return function_40bd40(a1, a1);\n}\n"
        },
        {
            "funcName": "function_4059d0",
            "funcStartAddr": "4059d0",
            "funcEndAddr": "405a27",
            "decompiledFuncCode": "int64_t function_4059d0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x4059d0\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x4059d6\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x4059fe\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x405a0b\n            return 1;\n        }\n    } else {\n        // 0x4059fa\n        if (v1 == 3 || v1 == 9) {\n            // 0x405a0b\n            return 0xffffffff;\n        }\n    }\n    // 0x405a10\n    return function_40bd40(a1, a2);\n}\n"
        },
        {
            "funcName": "function_405a30",
            "funcStartAddr": "405a30",
            "funcEndAddr": "405ae6",
            "decompiledFuncCode": "int64_t function_405a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x405a30\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x405a36\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x405a62\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x405a6f\n            return 1;\n        }\n    } else {\n        // 0x405a5a\n        if (v1 == 3 || v1 == 9) {\n            // 0x405a6f\n            return 0xffffffff;\n        }\n    }\n    char * str = (char *)a2; // 0x405a82\n    char * found_char_pos = strrchr(str, 46); // 0x405a82\n    int64_t v4 = (int64_t)found_char_pos; // 0x405a82\n    char * found_char_pos2 = strrchr(str, 46); // 0x405a95\n    int64_t str3; // 0x405a30\n    int64_t str2; // 0x405a30\n    if (found_char_pos2 == NULL) {\n        // 0x405ac0\n        str3 = (int64_t)&g24;\n        str2 = v4;\n        if (found_char_pos == NULL) {\n            // 0x405aca\n            return strcmp(str, str);\n        }\n    } else {\n        // 0x405a9f\n        str3 = (int64_t)found_char_pos2;\n        str2 = found_char_pos == NULL ? (int64_t)&g24 : v4;\n    }\n    int32_t strcmp_rc = strcmp((char *)str2, (char *)str3); // 0x405ab1\n    if (strcmp_rc == 0) {\n        // 0x405aca\n        return strcmp(str, str);\n    }\n    // 0x405aba\n    return strcmp_rc;\n}\n"
        },
        {
            "funcName": "function_405af0",
            "funcStartAddr": "405af0",
            "funcEndAddr": "405c6f",
            "decompiledFuncCode": "int64_t function_405af0(int32_t a1) {\n    int64_t v1 = (int64_t)&g2; // 0x405afe\n    int32_t v2 = 20; // 0x405afe\n    if ((char)a1 == 0) {\n        int64_t result; // 0x405af0\n        while (true) {\n            int32_t sig_num = v2;\n            int64_t v3 = v1;\n            if (sigismember((struct _TYPEDEF_sigset_t *)&g112, sig_num) == 0) {\n                // 0x405b10\n                result = 0;\n                if (v3 == (int64_t)&g3) {\n                    // break -> 0x405b41\n                    break;\n                }\n            } else {\n                void (*prev_sig_handler)(int32_t) = signal(sig_num, SIG_DFL); // 0x405b33\n                if (v3 == (int64_t)&g3) {\n                    // 0x405b41\n                    result = (int64_t)prev_sig_handler;\n                    return result;\n                }\n            }\n            // 0x405b19\n            v2 = *(int32_t *)v3;\n            v1 = v3 + 4;\n        }\n      lab_0x405b41_2:\n        // 0x405b41\n        return result;\n    }\n    // 0x405b50\n    sigemptyset((struct _TYPEDEF_sigset_t *)&g112);\n    int64_t v4 = (int64_t)&g2; // 0x405b68\n    int32_t sig_num2 = 20;\n    int64_t oact; // bp-184, 0x405af0\n    sigaction(sig_num2, NULL, (struct sigaction *)&oact);\n    if (oact != 1) {\n        // 0x405b8c\n        sigaddset((struct _TYPEDEF_sigset_t *)&g112, sig_num2);\n    }\n    while (v4 != (int64_t)&g3) {\n        int32_t v5 = *(int32_t *)v4; // 0x405b70\n        v4 += 4;\n        sig_num2 = v5;\n        sigaction(sig_num2, NULL, (struct sigaction *)&oact);\n        if (oact != 1) {\n            // 0x405b8c\n            sigaddset((struct _TYPEDEF_sigset_t *)&g112, sig_num2);\n        }\n    }\n    int128_t v6 = __asm_movdqa(*(int128_t *)&g112); // 0x405ba2\n    int128_t v7 = __asm_movdqa(g113); // 0x405baa\n    int128_t v8 = __asm_movdqa(g114); // 0x405bc2\n    int128_t v9 = __asm_movdqa(g115); // 0x405bca\n    int128_t v10 = __asm_movdqa(g116); // 0x405bd8\n    int128_t v11 = __asm_movdqa(g117); // 0x405be0\n    int128_t v12; // 0x405af0\n    __asm_movups(v12, v6);\n    int128_t v13 = __asm_movdqa(g118); // 0x405bed\n    int128_t v14 = __asm_movdqa(g119); // 0x405bf5\n    __asm_movups(v12, v7);\n    __asm_movups(v12, v8);\n    __asm_movups(v12, v9);\n    __asm_movups(v12, v10);\n    __asm_movups(v12, v11);\n    __asm_movups(v12, v13);\n    __asm_movups(v12, v14);\n    int64_t v15 = (int64_t)&g2; // 0x405c20\n    int32_t sig_num3 = 20;\n    int32_t v16 = sigismember((struct _TYPEDEF_sigset_t *)&g112, sig_num3); // 0x405c35\n    int64_t result2 = 0; // 0x405c3c\n    if (v16 != 0) {\n        // 0x405c3e\n        oact = sig_num3 == 20 ? 0x405560 : 0x404830;\n        result2 = sigaction(sig_num3, (struct sigaction *)&oact, NULL);\n    }\n    // 0x405c5a\n    while (v15 != (int64_t)&g3) {\n        int32_t v17 = *(int32_t *)v15; // 0x405c28\n        v15 += 4;\n        sig_num3 = v17;\n        v16 = sigismember((struct _TYPEDEF_sigset_t *)&g112, sig_num3);\n        result2 = 0;\n        if (v16 != 0) {\n            // 0x405c3e\n            oact = sig_num3 == 20 ? 0x405560 : 0x404830;\n            result2 = sigaction(sig_num3, (struct sigaction *)&oact, NULL);\n        }\n    }\n    // 0x405b41\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405cc2",
            "decompiledFuncCode": "int64_t function_405c70(void) {\n    // 0x405c70\n    if (g60 != 0) {\n        // 0x405c7a\n        return function_405cd0(&g59, &g60);\n    }\n    // 0x405c90\n    function_405cd0(&g55, (int64_t *)&g56);\n    function_405cd0(&g61, (int64_t *)&g62);\n    return function_405cd0(&g57, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_405cd0",
            "funcStartAddr": "405cd0",
            "funcEndAddr": "405d39",
            "decompiledFuncCode": "int64_t function_405cd0(int64_t * a1, int64_t * a2) {\n    // 0x405cd0\n    int64_t data; // 0x405cd0\n    int32_t result; // 0x405cfe\n    if (g140 != 0) {\n        // 0x405ce5\n        data = (int64_t)a1;\n        result = fwrite_unlocked((int64_t *)data, (int32_t)data, 1, g86);\n        return result;\n    }\n    // 0x405d08\n    g140 = 1;\n    if (tcgetpgrp(1) >= 0) {\n        // 0x405d28\n        function_405af0(1);\n        function_405c70();\n    } else {\n        // 0x405d1d\n        function_405c70();\n    }\n    // 0x405ce5\n    data = 1;\n    result = fwrite_unlocked((int64_t *)data, (int32_t)data, 1, g86);\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d40",
            "funcStartAddr": "405d40",
            "funcEndAddr": "405d66",
            "decompiledFuncCode": "int64_t function_405d40(void) {\n    // 0x405d40\n    function_405cd0(&g55, (int64_t *)&g56);\n    return function_405cd0(&g57, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "405e21",
            "decompiledFuncCode": "int64_t function_405d70(void) {\n    // 0x405d70\n    if ((g109 || g111) == 0) {\n        // 0x405e20\n        return 0;\n    }\n    uint32_t result; // 0x405def\n    while (true) {\n        // 0x405d8d\n        if (g140 != 0) {\n            // 0x405e10\n            function_405d40();\n        }\n        // 0x405d96\n        fflush_unlocked(g86);\n        int64_t oset; // bp-136, 0x405d70\n        sigprocmask(SIG_BLOCK, (struct _TYPEDEF_sigset_t *)&g112, (struct _TYPEDEF_sigset_t *)&oset);\n        int32_t sig_num; // 0x405d70\n        if (g109 == 0) {\n            // 0x405e00\n            signal(g111, SIG_DFL);\n            sig_num = g111;\n        } else {\n            // 0x405dc1\n            g109--;\n            sig_num = 19;\n        }\n        // 0x405dcf\n        raise(sig_num);\n        sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&oset, NULL);\n        if (g111 == 0) {\n            // 0x405def\n            result = g109;\n            if (result == 0) {\n                // break -> 0x405df9\n                break;\n            }\n        }\n    }\n    // 0x405df9\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405e91",
            "decompiledFuncCode": "int64_t function_405e30(void) {\n    // 0x405e30\n    if (g142 == 0) {\n        // 0x405e39\n        int64_t result; // 0x405e30\n        return result;\n    }\n    int64_t result2 = function_404ae0(4); // 0x405e49\n    if ((char)result2 == 0) {\n        // 0x405e39\n        return result2;\n    }\n    // 0x405e60\n    function_405cd0(&g55, (int64_t *)&g56);\n    function_405cd0(&g63, &g64);\n    return function_405cd0(&g57, (int64_t *)&g58);\n}\n"
        },
        {
            "funcName": "function_405ea0",
            "funcStartAddr": "405ea0",
            "funcEndAddr": "4062c9",
            "decompiledFuncCode": "int64_t function_405ea0(int64_t * a1, int64_t str, int64_t a3, int64_t a4, int32_t a5, int64_t * a6) {\n    int64_t v1 = (int64_t)a1;\n    char v2 = g128 & (char)((int32_t)function_411c20((int32_t)a3) < 3); // 0x405edc\n    int32_t v3; // 0x405ea0\n    int64_t v4; // 0x405ea0\n    int64_t v5; // 0x405ea0\n    int64_t len2; // 0x405ea0\n    int64_t v6; // 0x405ea0\n    char v7; // 0x405ea0\n    char v8; // 0x405ea0\n    if (v2 != 0) {\n        // 0x406020\n        v3 = 1;\n        if ((int32_t)a4 != 0) {\n            goto lab_0x405ef3;\n        } else {\n            int32_t len = strlen((char *)str); // 0x40602b\n            int64_t v9 = len; // 0x40602b\n            int64_t v10 = v9 + 1; // 0x406033\n            int64_t v11 = v1; // 0x40603d\n            if (len >= 0x2000) {\n                // 0x40625d\n                v11 = function_412980(v10);\n            }\n            // 0x406043\n            memcpy((int64_t *)v11, (int64_t *)str, (int32_t)v10);\n            v8 = 0;\n            v6 = v9;\n            v5 = v11;\n            goto lab_0x406056;\n        }\n    } else {\n        // 0x405eec\n        v3 = 0;\n        if ((int32_t)a4 == 0) {\n            // 0x405f70\n            v7 = v2;\n            len2 = strlen((char *)str);\n            v4 = str;\n            goto lab_0x405f7e;\n        } else {\n            goto lab_0x405ef3;\n        }\n    }\n  lab_0x406123:;\n    // 0x406123\n    int64_t v12; // 0x405ea0\n    int64_t v13 = v12;\n    int64_t v14; // 0x405ea0\n    int64_t v15 = v14;\n    int64_t v16 = v15; // 0x406126\n    int64_t v17; // 0x405ea0\n    int64_t v18 = v17; // 0x406126\n    int64_t v19 = v13; // 0x406126\n    uint64_t v20; // 0x40605b\n    if (v20 <= v17) {\n        // break -> 0x406208\n        goto lab_0x406208;\n    }\n    goto lab_0x40612c;\n  lab_0x406162:;\n    // 0x406162\n    int64_t v25; // 0x405ea0\n    *(char *)v25 = 63;\n    int64_t v26 = 1; // 0x40616d\n    int64_t v27; // 0x405ea0\n    int64_t v28 = v27; // 0x40616d\n    int64_t v29; // 0x406191\n    int64_t v30 = v29; // 0x40616d\n    goto lab_0x406170;\n  lab_0x4061d6:;\n    // 0x4061d6\n    int32_t v40; // 0x405ea0\n    v26 = v40;\n    int64_t v45; // 0x405ea0\n    v28 = v45;\n    int64_t v46; // 0x405ea0\n    v30 = v46;\n    goto lab_0x406170;\n  lab_0x406170:;\n    // 0x406170\n    int64_t ps; // bp-64, 0x405ea0\n    int32_t v31 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406175\n    int64_t v32; // 0x405ea0\n    int64_t v33 = v26 + v32; // 0x40617c\n    int64_t v34 = v28; // 0x40617c\n    int64_t v35 = v30; // 0x40617c\n    if (v31 != 0) {\n        goto lab_0x406123;\n    }\n    goto lab_0x40617e;\n  lab_0x406114:;\n    // 0x406114\n    int64_t v21; // 0x405ea0\n    char v24; // 0x40612c\n    *(char *)v21 = v24;\n    int64_t v23; // 0x405ea0\n    v14 = v23 + 1;\n    int64_t v22; // 0x405ea0\n    v17 = v22 + 1;\n    v12 = v21 + 1;\n    goto lab_0x406123;\n  lab_0x406144:\n    // 0x406144\n    ps = 0;\n    v33 = v23;\n    v34 = v22;\n    v35 = v21;\n    int64_t v36; // 0x405ea0\n    int64_t v39; // 0x405ea0\n    while (true) {\n      lab_0x40617e:\n        // 0x40617e\n        v25 = v35;\n        v36 = v34;\n        v32 = v33;\n        v29 = v25 + 1;\n        int32_t v37; // bp-68, 0x405ea0\n        int64_t v38 = function_416e80((int64_t *)&v37, v36, v20 - v36); // 0x406195\n        switch (v38) {\n            case -1: {\n                goto lab_0x406238;\n            }\n            case -2: {\n                // 0x406250\n                *(char *)v25 = 63;\n                v39 = v20;\n                goto lab_0x406244;\n            }\n            default: {\n                // 0x4061ae\n                v40 = wcwidth(v37);\n                if (v38 != 0) {\n                    int64_t v41 = 0x100000000 * v38 >> 32; // 0x406155\n                    v27 = v41 + v36;\n                    if (v40 >= 0) {\n                        int64_t v42 = 0;\n                        *(char *)(v42 + v25) = *(char *)(v42 + v36);\n                        int64_t v43 = v42 + 1; // 0x4061f1\n                        while (v41 != v43) {\n                            // 0x4061e8\n                            v42 = v43;\n                            *(char *)(v42 + v25) = *(char *)(v42 + v36);\n                            v43 = v42 + 1;\n                        }\n                        // 0x4061fa\n                        int64_t v44; // 0x40615a\n                        v45 = v44;\n                        v46 = v41 + v25;\n                        goto lab_0x4061d6;\n                    } else {\n                        goto lab_0x406162;\n                    }\n                } else {\n                    int64_t v47 = v36 + 1; // 0x4061c1\n                    v27 = v47;\n                    if (v40 < 0) {\n                        goto lab_0x406162;\n                    } else {\n                        // 0x4061c9\n                        *(char *)v25 = *(char *)v36;\n                        v45 = v47;\n                        v46 = v29;\n                        goto lab_0x4061d6;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406238:\n    // 0x406238\n    *(char *)v25 = 63;\n    v39 = v36 + 1;\n    goto lab_0x406244;\n  lab_0x406244:\n    // 0x406244\n    v14 = v32 + 1;\n    v17 = v39;\n    v12 = v29;\n    goto lab_0x406123;\n  lab_0x405ef3:;\n    int64_t v48 = function_411cd0(a1, 0x2000, str, -1, a3); // 0x405f0d\n    int64_t v49 = v48; // 0x405f20\n    int64_t v50 = v1; // 0x405f20\n    if (v48 >= 0x2000) {\n        int64_t v51 = v48 + 1; // 0x40626d\n        int64_t v52 = function_412980(v51); // 0x40627e\n        function_411cd0((int64_t *)v52, v51, str, -1, a3);\n        v49 = 0x100000000 * v48 >> 32;\n        v50 = v52;\n    }\n    int64_t v53 = v49;\n    char v54 = 1; // 0x405f33\n    int64_t v55 = v53; // 0x405f33\n    int64_t v56; // 0x405ea0\n    if (*(char *)v50 == (char)v56) {\n        int64_t v57 = 0x100000000000000 * v53 >> 56; // 0x405f47\n        v54 = v57 != (int64_t)strlen((char *)str);\n        v55 = v57;\n    }\n    // 0x405f59\n    v7 = v54;\n    len2 = v55;\n    v4 = v50;\n    v8 = v54;\n    v6 = v55;\n    v5 = v50;\n    if (v3 == 0) {\n        goto lab_0x405f7e;\n    } else {\n        goto lab_0x406056;\n    }\n  lab_0x405f7e:;\n    // 0x405f7e\n    int64_t v58; // 0x405ea0\n    int64_t v59; // 0x405ea0\n    int64_t v60; // 0x405ea0\n    int64_t result2; // 0x405ea0\n    int64_t v61; // 0x405ea0\n    int64_t v62; // 0x405ea0\n    char v63; // 0x405ea0\n    if (a5 == 0) {\n        // 0x406000\n        v63 = v7;\n        v60 = len2;\n        v58 = v4;\n        if (g177 == 0) {\n            // 0x40600d\n            *(char *)a6 = 0;\n            // 0x4060cf\n            *a1 = v4;\n            return len2;\n        }\n        goto lab_0x4060a7;\n    } else {\n        int64_t v64 = 0x100000000 * len2 >> 32; // 0x405f90\n        int64_t v65; // 0x405ea0\n        if (__ctype_get_mb_cur_max() < 2) {\n            // 0x405f9f\n            int64_t v66; // 0x405ea0\n            uint64_t v67 = v64 + v66; // 0x405f9f\n            v65 = 0;\n            int64_t v68; // 0x405ea0\n            if (v68 != 0 && v67 >= v66) {\n                int16_t ** v69 = __ctype_b_loc(); // 0x405fb4\n                int16_t * v70 = *v69; // 0x405fbe\n                int64_t v71 = (int64_t)v70; // 0x405fbe\n                int64_t v72 = v66; // 0x405fc4\n                int64_t v73 = 0; // 0x405fc4\n                int64_t v74 = v73;\n                int64_t v75 = v72;\n                unsigned char v76 = *(char *)v75; // 0x405fc8\n                int16_t v77 = *(int16_t *)(2 * (int64_t)v76 + v71); // 0x405fcb\n                int64_t v78 = v74 + (int64_t)((v77 & 0x4000) != 0); // 0x405fd8\n                int64_t v79 = v75 + 1; // 0x405fdc\n                v72 = v79;\n                v73 = v78;\n                v65 = v78;\n                while (v67 != v79) {\n                    // 0x405fc8\n                    v74 = v73;\n                    v75 = v72;\n                    v76 = *(char *)v75;\n                    v77 = *(int16_t *)(2 * (int64_t)v76 + v71);\n                    v78 = v74 + (int64_t)((v77 & 0x4000) != 0);\n                    v79 = v75 + 1;\n                    v72 = v79;\n                    v73 = v78;\n                    v65 = v78;\n                }\n            }\n        } else {\n            // 0x406218\n            v65 = 0x100000000 * function_40e9b0(v4, v64, 0) >> 32;\n        }\n        // 0x405fe5\n        v63 = v7;\n        v61 = v65;\n        v60 = v64;\n        v58 = v4;\n        if (g177 != 0) {\n            goto lab_0x4060a7;\n        } else {\n            // 0x405ff2\n            *(char *)a6 = 0;\n            v62 = v65;\n            result2 = v64;\n            v59 = v4;\n            goto lab_0x4060c7;\n        }\n    }\n  lab_0x406056:;\n    int64_t v80 = v5;\n    int64_t v81 = v6;\n    char v82 = v8;\n    v20 = v80 + v81;\n    int64_t v83; // 0x405ea0\n    int64_t v84; // 0x405ea0\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x40606a\n        v84 = v81;\n        v83 = v81;\n        if (v20 > v80) {\n            int16_t ** v85 = __ctype_b_loc(); // 0x40606f\n            int64_t v86 = v80; // 0x406077\n            unsigned char v87 = *(char *)v86; // 0x406080\n            char * v88; // 0x406080\n            if ((*(char *)((int64_t)*v85 + 1 + 2 * (int64_t)v87) & 64) == 0) {\n                // 0x40608d\n                *v88 = 63;\n            }\n            // 0x406090\n            v86++;\n            v84 = v81;\n            v83 = v81;\n            while (v86 != v20) {\n                // 0x406080\n                v87 = *(char *)v86;\n                if ((*(char *)((int64_t)*v85 + 1 + 2 * (int64_t)v87) & 64) == 0) {\n                    // 0x40608d\n                    *v88 = 63;\n                }\n                // 0x406090\n                v86++;\n                v84 = v81;\n                v83 = v81;\n            }\n        }\n    } else {\n        // 0x4060f0\n        v84 = 0;\n        v83 = 0;\n        if (v20 > v80) {\n            // 0x40612c\n            v16 = 0;\n            v18 = v80;\n            v19 = v80;\n            while (true) {\n              lab_0x40612c:\n                // 0x40612c\n                v21 = v19;\n                v22 = v18;\n                v23 = v16;\n                v24 = *(char *)v22;\n                if (v24 < 64) {\n                    if (v24 > 36 || (v24 & -4) == 32) {\n                        goto lab_0x406114;\n                    } else {\n                        goto lab_0x406144;\n                    }\n                } else {\n                    if (v24 == 64) {\n                        goto lab_0x406144;\n                    } else {\n                        if (v24 < 96 || v24 < 127) {\n                            goto lab_0x406114;\n                        } else {\n                            goto lab_0x406144;\n                        }\n                    }\n                }\n            }\n          lab_0x406208:\n            // 0x406208\n            v84 = v15;\n            v83 = v13 - v80;\n        }\n    }\n    // 0x40609c\n    v63 = v82;\n    v61 = v84;\n    v60 = v83;\n    v58 = v80;\n    char v89 = 0; // 0x4060a5\n    int64_t v90 = v84; // 0x4060a5\n    int64_t result = v83; // 0x4060a5\n    int64_t v91 = v80; // 0x4060a5\n    if (g177 == 0) {\n        goto lab_0x4060b8;\n    } else {\n        goto lab_0x4060a7;\n    }\n  lab_0x4060b8:\n    // 0x4060b8\n    *(char *)a6 = v89;\n    v62 = v90;\n    result2 = result;\n    v59 = v91;\n    if (a5 == 0) {\n        // 0x4060cf\n        *a1 = v91;\n        return result;\n    }\n    goto lab_0x4060c7;\n  lab_0x4060a7:\n    // 0x4060a7\n    v89 = (*(char *)&g178 ^ 1 | v63) ^ 1;\n    v90 = v61;\n    result = v60;\n    v91 = v58;\n    goto lab_0x4060b8;\n  lab_0x4060c7:\n    // 0x4060c7\n    *(int64_t *)(int64_t)a5 = v62;\n    // 0x4060cf\n    *a1 = v59;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4062d0",
            "funcStartAddr": "4062d0",
            "funcEndAddr": "406687",
            "decompiledFuncCode": "int64_t function_4062d0(int64_t a1, int64_t a2, uint32_t a3, int32_t a4, int64_t a5, int64_t a6, int64_t a7) {\n    int64_t v1 = a3; // 0x4062e4\n    int64_t v2; // bp-8248, 0x4062d0\n    int64_t v3 = &v2; // 0x4062f8\n    int64_t v4 = v3; // bp-8256, 0x406307\n    char v5; // bp-8257, 0x4062d0\n    int64_t v6 = function_405ea0(&v4, a1, a2, v1, 0, (int64_t *)&v5); // 0x40630c\n    if (v5 != 0) {\n        if ((char)a5 != 0) {\n            int64_t v7 = (int64_t)g86; // 0x406570\n            int64_t * v8 = (int64_t *)(v7 + 40); // 0x406577\n            uint64_t v9 = *v8; // 0x406577\n            if (v9 >= *(int64_t *)(v7 + 48)) {\n                // 0x40665b\n                __overflow(g86, 32);\n            } else {\n                // 0x406585\n                *v8 = v9 + 1;\n                *(char *)v9 = 32;\n            }\n            // 0x406590\n            g105++;\n        }\n    }\n    if (a4 != 0) {\n        // 0x406329\n        if ((char)function_404ae0(4) != 0) {\n            // 0x4065e0\n            function_405d40();\n        }\n        int64_t v10 = a4;\n        function_405cd0(&g55, (int64_t *)&g56);\n        function_405cd0((int64_t *)v10, (int64_t *)(v10 + 8));\n        function_405cd0(&g57, (int64_t *)&g58);\n    }\n    int64_t n; // 0x4062d0\n    int64_t n2; // 0x4062d0\n    int64_t v11; // 0x4062d0\n    int64_t v12; // 0x4062d0\n    int64_t v13; // 0x4062d0\n    int64_t v14; // 0x4062d0\n    int64_t v15; // 0x4062d0\n    if (a7 == 0) {\n        // 0x4065a0\n        v15 = v1;\n        v13 = 0;\n        n = v6;\n        v11 = 0;\n        v14 = 0;\n        n2 = v6;\n        v12 = 0;\n        if (a6 != 0) {\n            goto lab_0x406411;\n        } else {\n            goto lab_0x4065b2;\n        }\n    } else {\n        int64_t v16 = 0; // 0x406380\n        int64_t v17 = v6; // 0x406380\n        int64_t v18 = g177; // 0x406380\n        if (g177 != 0) {\n            unsigned char v19 = *(char *)&g178; // 0x406518\n            v16 = 0;\n            v17 = v6;\n            v18 = 0;\n            if (v19 != 0) {\n                // 0x406529\n                v16 = 0;\n                v17 = v6;\n                v18 = 0;\n                if (v5 == 0) {\n                    int64_t v20 = v19; // 0x406518\n                    int64_t v21 = (int64_t)g86; // 0x406539\n                    int64_t v22 = v6 - 2; // 0x406540\n                    unsigned char v23 = *(char *)v4; // 0x406544\n                    int64_t * v24 = (int64_t *)(v21 + 40); // 0x406547\n                    uint64_t v25 = *v24; // 0x406547\n                    if (v25 >= *(int64_t *)(v21 + 48)) {\n                        // 0x40666a\n                        __overflow(g86, (int32_t)v23);\n                        v16 = 1;\n                        v17 = v22;\n                        v18 = v20;\n                    } else {\n                        // 0x406555\n                        *v24 = v25 + 1;\n                        *(char *)v25 = v23;\n                        v16 = 1;\n                        v17 = v22;\n                        v18 = v20;\n                    }\n                }\n            }\n        }\n        int64_t v26 = function_404e80((int64_t)g173, 0); // 0x40639f\n        int64_t v27 = function_404e80(a7, 1); // 0x4063b4\n        char v28 = *(char *)v27; // 0x4063c9\n        __printf_chk(1, (char *)&g22);\n        free((int64_t *)v26);\n        free((int64_t *)v27);\n        v15 = v28 != 47 ? (int64_t)\"/\" : (int64_t)&g24;\n        v13 = v16;\n        n = v17;\n        v11 = v18;\n        v14 = v16;\n        n2 = v17;\n        v12 = v18;\n        if (a6 == 0) {\n            goto lab_0x4065b2;\n        } else {\n            goto lab_0x406411;\n        }\n    }\n  lab_0x406411:\n    // 0x406411\n    if (g144 != 0) {\n        int64_t * v29 = (int64_t *)(a6 + 24); // 0x40641a\n        int64_t v30 = *v29; // 0x40641a\n        int64_t v31 = v30; // 0x406429\n        if (*(int64_t *)(a6 + 32) - v30 < 8) {\n            // 0x4065f0\n            _obstack_newchunk(a6, 8, v30, v15);\n            v31 = *v29;\n        }\n        // 0x40642f\n        *(int64_t *)v31 = g105;\n        *v29 = *v29 + 8;\n    }\n    // 0x40643e\n    fwrite_unlocked((int64_t *)(v4 + v13), 1, (int32_t)n, g86);\n    int64_t v32 = g105 + v6; // 0x406461\n    g105 = v32;\n    int64_t v33 = v11; // 0x406472\n    if (g144 != 0) {\n        int64_t * v34 = (int64_t *)(a6 + 24); // 0x406474\n        int64_t v35 = *v34; // 0x406474\n        uint64_t v36 = *(int64_t *)(a6 + 32) - v35; // 0x40647c\n        int64_t v37 = v32; // 0x406483\n        int64_t v38 = v35; // 0x406483\n        if (v36 < 8) {\n            // 0x406620\n            _obstack_newchunk(a6, 8, v36, v35);\n            v38 = *v34;\n            v37 = g105;\n        }\n        // 0x406489\n        *(int64_t *)v38 = v37;\n        *v34 = *v34 + 8;\n        v33 = v11;\n    }\n    goto lab_0x406491;\n  lab_0x4065b2:\n    // 0x4065b2\n    fwrite_unlocked((int64_t *)(v4 + v14), 1, (int32_t)n2, g86);\n    g105 += v6;\n    v33 = v12;\n    goto lab_0x406491;\n  lab_0x406491:\n    if (a7 != 0) {\n        // 0x40649c\n        fwrite_unlocked(&g23, 1, 6, g86);\n        if ((char)v33 != 0) {\n            int64_t v39 = (int64_t)g86; // 0x4064c1\n            unsigned char v40 = *(char *)(v6 - 1 + v4); // 0x4064c8\n            int64_t * v41 = (int64_t *)(v39 + 40); // 0x4064cd\n            uint64_t v42 = *v41; // 0x4064cd\n            if (v42 >= *(int64_t *)(v39 + 48)) {\n                // 0x40664e\n                __overflow(g86, (int32_t)v40);\n            } else {\n                // 0x4064db\n                *v41 = v42 + 1;\n                *(char *)v42 = v40;\n            }\n        }\n    }\n    int64_t v43 = v4; // 0x4064e5\n    if (v43 != v3 && v43 != a1) {\n        // 0x4064f4\n        free((int64_t *)v43);\n    }\n    // 0x4064f9\n    return v6 + (int64_t)v5;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "406ae8",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1, uint32_t a2, int32_t a3, uint64_t a4) {\n    int64_t v1 = a3;\n    uint64_t v2 = (int64_t)a2; // 0x406692\n    int64_t v3; // 0x406690\n    int64_t v4; // 0x406690\n    int64_t v5; // 0x406690\n    int64_t v6; // 0x406690\n    int64_t v7; // 0x406690\n    int64_t v8; // 0x406690\n    int64_t v9; // 0x406690\n    int64_t v10; // 0x406690\n    char v11; // 0x406690\n    int64_t v12; // 0x406690\n    int64_t v13; // 0x406690\n    int64_t v14; // 0x406690\n    if ((char)a2 == 0) {\n        // 0x406748\n        v5 = a1;\n        if (g142 == 0) {\n            goto lab_0x4066c2;\n        } else {\n            unsigned char v15 = *(char *)(a1 + 185); // 0x40675a\n            int64_t v16 = v15; // 0x40675a\n            if (g174 == 0 || v15 == 0) {\n                // 0x406767\n                v12 = v16;\n                v6 = a1;\n                v3 = (int64_t)*(int32_t *)(a1 + 48);\n            } else {\n                // 0x406900\n                v12 = v16;\n                v6 = a1;\n                v3 = (int64_t)*(int32_t *)(a1 + 172);\n            }\n            goto lab_0x40676b;\n        }\n    } else {\n        int64_t v17 = *(int64_t *)(a1 + 8); // 0x4066ba\n        v5 = v17;\n        if (g142 != 0) {\n            int64_t v18 = (int64_t)*(int32_t *)(a1 + 172); // 0x406717\n            if (*(char *)(a1 + 185) != 0) {\n                char v19 = *(char *)(a1 + 184); // 0x406870\n                v13 = 0;\n                v7 = v17;\n                v11 = v19;\n                v14 = 0;\n                v9 = v17;\n                v4 = v18;\n                if (v19 == 0) {\n                    goto lab_0x40677b;\n                } else {\n                    goto lab_0x406882;\n                }\n            } else {\n                // 0x406724\n                v12 = 0xffffffff;\n                v6 = v17;\n                v3 = v18;\n                v10 = 192;\n                v8 = v17;\n                if ((char)function_404ae0(12) == 0) {\n                    goto lab_0x40676b;\n                } else {\n                    goto lab_0x4067d0;\n                }\n            }\n        } else {\n            goto lab_0x4066c2;\n        }\n    }\n  lab_0x4066c2:;\n    int64_t v20 = *(int64_t *)(a1 + 16); // 0x4066c6\n    int32_t v21 = *(int32_t *)(a1 + 196); // 0x4066d1\n    int64_t result = function_4062d0(v5, (int64_t)g127, v21, 0, v2 % 256 ^ 1, v1, v20); // 0x4066e8\n    function_405d70();\n    // 0x4066f7\n    return result;\n  lab_0x40676b:;\n    char v22 = *(char *)(a1 + 184); // 0x40676b\n    v13 = v12;\n    v7 = v6;\n    v11 = v22;\n    v14 = v12;\n    v9 = v6;\n    v4 = v3;\n    if (v22 != 0) {\n        goto lab_0x406882;\n    } else {\n        goto lab_0x40677b;\n    }\n  lab_0x406882:;\n    int64_t v23 = v4 & 0xf000; // 0x406885\n    int64_t v24; // 0x406690\n    int64_t v25; // 0x406690\n    char v26; // 0x406690\n    int64_t v27; // 0x406690\n    if (v23 == 0x8000) {\n        if ((v4 & 2048) == 0) {\n            goto lab_0x4069a8;\n        } else {\n            // 0x406989\n            v10 = 256;\n            v8 = v9;\n            if ((char)function_404ae0(16) == 0) {\n                goto lab_0x4069a8;\n            } else {\n                goto lab_0x4067d0;\n            }\n        }\n    } else {\n        // 0x406895\n        v24 = 7;\n        v26 = v11;\n        v27 = v14;\n        v25 = v9;\n        v10 = 128;\n        v8 = v9;\n        switch ((int16_t)v23) {\n            case 0x4000: {\n                if ((v4 & 514) == 514) {\n                    // 0x406ac0\n                    v10 = 320;\n                    v8 = v9;\n                    if ((char)function_404ae0(20) != 0) {\n                        goto lab_0x4067d0;\n                    } else {\n                        goto lab_0x406a13;\n                    }\n                } else {\n                    goto lab_0x406a13;\n                }\n            }\n            case -0x6000: {\n                goto lab_0x406798;\n            }\n            case 0x1000: {\n                goto lab_0x4067d0;\n            }\n            case -0x4000: {\n                // 0x4067d0\n                v10 = 144;\n                v8 = v9;\n                goto lab_0x4067d0;\n            }\n            default: {\n                int32_t v28 = v23; // 0x406895\n                v10 = 160;\n                v8 = v9;\n                if (v28 != 0x6000) {\n                    // 0x4068db\n                    v10 = v28 != 0x2000 ? 208 : 176;\n                    v8 = v9;\n                }\n                goto lab_0x4067d0;\n            }\n        }\n    }\n  lab_0x40677b:;\n    uint32_t v29 = *(int32_t *)(a1 + 168); // 0x40677b\n    uint32_t v30 = *(int32_t *)(4 * (int64_t)v29 + (int64_t)&g4); // 0x406782\n    v24 = v30;\n    v26 = v30 == 7;\n    v27 = v13;\n    v25 = v7;\n    int64_t str = v7; // 0x406792\n    if (v30 == 5) {\n        goto lab_0x406910;\n    } else {\n        goto lab_0x406798;\n    }\n  lab_0x4067d0:;\n    int64_t v31 = v8; // 0x4067d0\n    int64_t v32 = v10 + (int64_t)&g55; // 0x4067d0\n    goto lab_0x4067d7;\n  lab_0x406910:;\n    int32_t len = strlen((char *)str); // 0x406913\n    v10 = 80;\n    v8 = str;\n    if (g139 != 0) {\n        uint64_t v36 = (int64_t)len; // 0x406913\n        int64_t v37 = str + v36;\n        uint64_t n = *(int64_t *)g139; // 0x406930\n        int64_t str2; // 0x40693b\n        if (n <= v36) {\n            // 0x406938\n            str2 = *(int64_t *)(g139 + 8);\n            if (strncmp((char *)(v37 - n), (char *)str2, (int32_t)n) == 0) {\n                // 0x406970\n                v31 = str;\n                v32 = g139 + 16;\n                goto lab_0x4067d7;\n            }\n        }\n        int64_t v38 = *(int64_t *)(g139 + 32); // 0x406958\n        v10 = 80;\n        v8 = str;\n        while (v38 != 0) {\n            int64_t v39 = v38;\n            n = *(int64_t *)v39;\n            if (n <= v36) {\n                // 0x406938\n                str2 = *(int64_t *)(v39 + 8);\n                if (strncmp((char *)(v37 - n), (char *)str2, (int32_t)n) == 0) {\n                    // 0x406970\n                    v31 = str;\n                    v32 = v39 + 16;\n                    goto lab_0x4067d7;\n                }\n            }\n            // 0x406958\n            v38 = *(int64_t *)(v39 + 32);\n            v10 = 80;\n            v8 = str;\n        }\n    }\n    goto lab_0x4067d0;\n  lab_0x406798:\n    // 0x406798\n    if (v26 == 0 || (int32_t)v27 != 0) {\n        // 0x406adc\n        v10 = 16 * v24;\n        v8 = v25;\n    } else {\n        // 0x4067a8\n        v10 = 208;\n        v8 = v25;\n        if (g174 == 0) {\n            // 0x4067b6\n            v10 = (char)function_404ae0(13) == 0 ? 112 : 208;\n            v8 = v25;\n        }\n    }\n    goto lab_0x4067d0;\n  lab_0x4067d7:\n    // 0x4067d7\n    if (*(int64_t *)(v32 + 8) != 0) {\n        goto lab_0x4067f2;\n    } else {\n        // 0x4067de\n        v5 = v31;\n        if ((char)function_404ae0(4) == 0) {\n            goto lab_0x4066c2;\n        } else {\n            goto lab_0x4067f2;\n        }\n    }\n  lab_0x4069a8:\n    if ((v4 & 1024) != 0) {\n        // 0x4069e0\n        v10 = 272;\n        v8 = v9;\n        if ((char)function_404ae0(17) == 0) {\n            goto lab_0x4069b1;\n        } else {\n            goto lab_0x4067d0;\n        }\n    } else {\n        goto lab_0x4069b1;\n    }\n  lab_0x4067f2:;\n    int64_t v33 = *(int64_t *)(a1 + 16); // 0x4067f6\n    int32_t v34 = *(int32_t *)(a1 + 196); // 0x40680f\n    int64_t result2 = function_4062d0(v31, (int64_t)g127, v34, (int32_t)0, v2 % 256 ^ 1, v1, v33); // 0x406816\n    function_405d70();\n    function_405c70();\n    uint64_t v35 = (int64_t)g123; // 0x406828\n    if (v35 == 0 || a4 / v35 == (a4 - 1 + result2) / v35) {\n        // 0x4066f7\n        return result2;\n    }\n    // 0x406858\n    function_405cd0(&g67, (int64_t *)&g68);\n    // 0x4066f7\n    return result2;\n  lab_0x4069b1:\n    // 0x4069b1\n    if ((char)function_404ae0(21) == 0) {\n        goto lab_0x406a70;\n    } else {\n        // 0x4069c3\n        v10 = 336;\n        v8 = v9;\n        if (*(char *)(a1 + 192) == 0) {\n            goto lab_0x406a70;\n        } else {\n            goto lab_0x4067d0;\n        }\n    }\n  lab_0x406a13:\n    if ((v4 & 2) == 0) {\n        goto lab_0x406a30;\n    } else {\n        // 0x406a19\n        v10 = 304;\n        v8 = v9;\n        if ((char)function_404ae0(19) != 0) {\n            goto lab_0x4067d0;\n        } else {\n            goto lab_0x406a30;\n        }\n    }\n  lab_0x406a70:\n    if ((v4 & 73) == 0) {\n        goto lab_0x406a90;\n    } else {\n        // 0x406a76\n        v10 = 224;\n        v8 = v9;\n        if ((char)function_404ae0(14) == 0) {\n            goto lab_0x406a90;\n        } else {\n            goto lab_0x4067d0;\n        }\n    }\n  lab_0x406a30:\n    // 0x406a30\n    v10 = 96;\n    v8 = v9;\n    if ((v4 & 512) != 0) {\n        // 0x406a42\n        v10 = (char)function_404ae0(18) == 0 ? 96 : 288;\n        v8 = v9;\n    }\n    goto lab_0x4067d0;\n  lab_0x406a90:\n    // 0x406a90\n    str = v9;\n    if (*(int64_t *)(a1 + 40) < 2) {\n        goto lab_0x406910;\n    } else {\n        // 0x406a9b\n        v10 = 352;\n        v8 = v9;\n        str = v9;\n        if ((char)function_404ae0(22) == 0) {\n            goto lab_0x406910;\n        } else {\n            goto lab_0x4067d0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_406af0",
            "funcStartAddr": "406af0",
            "funcEndAddr": "406c60",
            "decompiledFuncCode": "int64_t function_406af0(int64_t a1, int64_t a2) {\n    // 0x406af0\n    function_405e30();\n    int64_t v1; // bp-680, 0x406af0\n    if (g136 != 0) {\n        int64_t v2 = (int64_t)&g21; // 0x406b19\n        if (*(char *)(a1 + 184) != 0) {\n            int64_t v3 = *(int64_t *)(a1 + 32); // 0x406b1b\n            v2 = (int64_t)&g21;\n            if (v3 != 0) {\n                // 0x406c50\n                v2 = function_40e520(v3, &v1);\n            }\n        }\n        int64_t v4 = g154 != 4 ? (int64_t)g166 : 0; // 0x406b3e\n        __printf_chk(1, \"%*s \", v4, (char *)v2);\n    }\n    // 0x406b4c\n    if (g148 != 0) {\n        int64_t v5 = (int64_t)&g21; // 0x406b61\n        if (*(char *)(a1 + 184) != 0) {\n            int32_t v6 = *(int32_t *)&g147; // 0x406c33\n            int64_t v7; // 0x406af0\n            v5 = function_40d5d0(*(int64_t *)(a1 + 88), &v1, v6, 512, g146, v7);\n        }\n        int64_t v8 = g154 != 4 ? (int64_t)g164 : 0; // 0x406b7d\n        __printf_chk(1, \"%*s \", v8, (char *)v5);\n    }\n    // 0x406b8b\n    if (g169 != 0) {\n        int64_t v9 = g154 != 4 ? (int64_t)g161 : 0; // 0x406bb1\n        __printf_chk(1, \"%*s \", v9, (char *)*(int64_t *)(a1 + 176));\n    }\n    int64_t result = function_406690(a1, 0, 0, a2); // 0x406bc9\n    if (g143 != 0) {\n        // 0x406bf0\n        return function_4058a0(*(char *)(a1 + 184)) % 256 + result;\n    }\n    // 0x406bdb\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c60",
            "funcStartAddr": "406c60",
            "funcEndAddr": "407622",
            "decompiledFuncCode": "int64_t function_406c60(int64_t a1) {\n    char * v1 = (char *)(a1 + 184); // 0x406c74\n    int64_t v2; // bp-4900, 0x406c60\n    if (*v1 == 0) {\n        uint32_t v3 = *(int32_t *)(a1 + 168); // 0x407020\n        char v4 = *(char *)((int64_t)v3 + (int64_t)\"?pcdb-lswd\"); // 0x407031\n        v2 = v4;\n    } else {\n        // 0x406c81\n        function_40bb60(a1 + 24);\n    }\n    // 0x406c92\n    int32_t v5; // 0x406c60\n    if (g168 != 0) {\n        int32_t v6 = *(int32_t *)(a1 + 188); // 0x406fb8\n        if (v6 == 1 || v6 != 2) {\n            goto lab_0x406ca4;\n        } else {\n            // 0x406fd0\n            v5 = g153;\n            if (g153 != 1) {\n                goto lab_0x406cb3;\n            } else {\n                goto lab_0x406fe8;\n            }\n        }\n    } else {\n        goto lab_0x406ca4;\n    }\n  lab_0x406ca4:\n    // 0x406ca4\n    v5 = g153;\n    if (g153 == 1) {\n        goto lab_0x406fe8;\n    } else {\n        goto lab_0x406cb3;\n    }\n  lab_0x406fe8:;\n    int64_t v7 = *(int64_t *)(a1 + 128); // bp-4888, 0x406ffd\n    char v8 = *v1; // 0x407002\n    int32_t v9 = (int32_t)*(int64_t *)(a1 + 136); // 0x407009\n    int32_t v10 = v9; // 0x40700e\n    char v11 = v8; // 0x40700e\n    int32_t v12 = v9; // 0x40700e\n    char v13 = v8; // 0x40700e\n    if (g136 == 0) {\n        goto lab_0x406ce1;\n    } else {\n        goto lab_0x407060;\n    }\n  lab_0x406cb3:\n    // 0x406cb3\n    if (v5 != 0) {\n        if (v5 != 2) {\n            // 0x40761d\n            abort();\n            // UNREACHABLE\n        }\n        // 0x406f89\n        v7 = *(int64_t *)(a1 + 96);\n        char v14 = *v1; // 0x406f9d\n        int32_t v15 = (int32_t)*(int64_t *)(a1 + 104); // 0x406fa4\n        v10 = v15;\n        v11 = v14;\n        v12 = v15;\n        v13 = v14;\n        if (g136 == 0) {\n            goto lab_0x406ce1;\n        } else {\n            goto lab_0x407060;\n        }\n    } else {\n        // 0x406cbb\n        v7 = *(int64_t *)(a1 + 112);\n        char v16 = *v1; // 0x406ccf\n        int32_t v17 = (int32_t)*(int64_t *)(a1 + 120); // 0x406cd6\n        v10 = v17;\n        v11 = v16;\n        v12 = v17;\n        v13 = v16;\n        if (g136 != 0) {\n            goto lab_0x407060;\n        } else {\n            goto lab_0x406ce1;\n        }\n    }\n  lab_0x406ce1:;\n    // 0x406ce1\n    int64_t v18; // bp-3704, 0x406c60\n    int64_t v19 = &v18; // 0x406ce1\n    int32_t v20 = v10; // 0x406ce9\n    char v21 = v11; // 0x406ce9\n    int64_t v22 = v19; // 0x406ce9\n    int64_t v23 = v19; // 0x406ce9\n    goto lab_0x406cec;\n  lab_0x407060:;\n    int64_t v100 = (int64_t)&g21; // 0x407068\n    int64_t v28; // bp-4712, 0x406c60\n    if (v13 != 0) {\n        int64_t v101 = *(int64_t *)(a1 + 32); // 0x40706a\n        v100 = (int64_t)&g21;\n        if (v101 != 0) {\n            // 0x407378\n            v100 = function_40e520(v101, &v28);\n        }\n    }\n    int64_t v102 = &v18; // 0x407077\n    __sprintf_chk((char *)&v18, 1, 3643, \"%*s \", (int64_t)g166, (char *)v100);\n    int64_t v103 = v102;\n    int32_t v104 = *(int32_t *)v103; // 0x4070a2\n    int64_t v105 = v103 + 4; // 0x4070a4\n    int32_t v106 = v104 - 0x1010101 & (v104 ^ -0x7f7f7f80); // 0x4070b0\n    uint32_t v107 = v106 & -0x7f7f7f80; // 0x4070b2\n    while (v107 == 0) {\n        // 0x4070a2\n        v103 = v105;\n        v104 = *(int32_t *)v103;\n        v105 = v103 + 4;\n        v106 = v104 - 0x1010101 & (v104 ^ -0x7f7f7f80);\n        v107 = v106 & -0x7f7f7f80;\n    }\n    unsigned char v108 = (char)((v106 & 0x8080) == 0 ? v107 / 0x10000 : v107); // 0x4070d2\n    v20 = v12;\n    v21 = *v1;\n    int64_t v29 = v100; // 0x4070df\n    v22 = v102;\n    v23 = ((v106 & 0x8080) == 0 ? v103 + 6 : v105) - (-1 - v108 < v108 ? 4 : 3);\n    goto lab_0x406cec;\n  lab_0x406cec:;\n    char v24 = v21; // 0x406cf3\n    int64_t v25 = v23; // 0x406cf3\n    if (g148 != 0) {\n        int64_t v26 = (int64_t)&g21; // 0x406cfd\n        if (v21 != 0) {\n            int32_t v27 = *(int32_t *)&g147; // 0x4074a4\n            v26 = function_40d5d0(*(int64_t *)(a1 + 88), &v28, v27, 512, g146, v29);\n        }\n        uint32_t v30 = g164 - (int32_t)function_40eb70(v26, 0); // 0x406d14\n        int64_t v31 = v23; // 0x406d1d\n        if (v30 >= 1) {\n            int32_t v32 = v30 - 1;\n            int64_t v33 = v23 + 1; // 0x406d25\n            int64_t v34 = v23 + 1; // 0x406d30\n            *(char *)v23 = 32;\n            while (v34 != v33 + (int64_t)v32) {\n                int64_t v35 = v34;\n                v34 = v35 + 1;\n                *(char *)v35 = 32;\n            }\n            // 0x406d3d\n            v31 = v33 + (int64_t)v32;\n        }\n        int64_t v36 = v26; // 0x406c60\n        char v37 = *(char *)v36; // 0x406d49\n        int64_t v38 = v31 + 1; // 0x406d4e\n        char * v39 = (char *)v31;\n        *v39 = v37;\n        int64_t v40 = v38; // 0x406d57\n        v36++;\n        while (v37 != 0) {\n            // 0x406d45\n            v37 = *(char *)v36;\n            v38 = v40 + 1;\n            v39 = (char *)v40;\n            *v39 = v37;\n            v40 = v38;\n            v36++;\n        }\n        // 0x406d59\n        *v39 = 32;\n        v24 = *v1;\n        v25 = v38;\n    }\n    int64_t v41 = (int64_t)&g21; // 0x406d6b\n    if (v24 != 0) {\n        // 0x407260\n        v41 = function_40e520(*(int64_t *)(a1 + 40), &v28);\n    }\n    char * str = (char *)v25; // 0x406d96\n    __sprintf_chk(str, 1, -1, \"%s %*s \", &v2, (int64_t)g163, (char *)v41);\n    int32_t len = strlen(str); // 0x406d9e\n    if (g144 != 0) {\n        // 0x407238\n        fwrite_unlocked((int64_t *)\"  \", 1, 2, g86);\n        g105 += 2;\n    }\n    int64_t v42 = v25 + (int64_t)len; // 0x406da7\n    int64_t v43; // 0x406c60\n    if (g71 != 0) {\n        goto lab_0x406de0;\n    } else {\n        // 0x406dc0\n        v43 = v42;\n        if ((g150 || g70 || g169) == 0) {\n            goto lab_0x406e30;\n        } else {\n            goto lab_0x406de0;\n        }\n    }\n  lab_0x406de0:\n    // 0x406de0\n    fputs_unlocked((char *)&v18, g86);\n    g105 += v42 - v22;\n    if (g71 != 0) {\n        // 0x4072e8\n        function_405520(*(int32_t *)(a1 + 52), g160, *v1);\n    }\n    // 0x406e06\n    if (g70 != 0) {\n        int64_t v44 = (int64_t)*(int32_t *)(a1 + 56); // 0x4072d2\n        int64_t v45 = (int64_t)&g21; // 0x4072d5\n        if (*v1 != 0) {\n            // 0x407348\n            v45 = 0;\n            if (g149 == 0) {\n                // 0x407353\n                v45 = function_40e2f0(v44);\n            }\n        }\n        // 0x4072d7\n        function_405460(v45, v44, (int64_t)g159);\n    }\n    // 0x406e13\n    if (g150 != 0) {\n        // 0x4072a0\n        function_405520(*(int32_t *)(a1 + 52), g158, *v1);\n    }\n    int64_t v46 = &v18; // 0x406e27\n    v43 = v46;\n    if (g169 != 0) {\n        // 0x407280\n        function_405460(*(int64_t *)(a1 + 176), 0, (int64_t)g161);\n        v43 = v46;\n    }\n    goto lab_0x406e30;\n  lab_0x406e30:;\n    int64_t v47 = (int64_t)&g21; // 0x406e37\n    int64_t v48; // 0x406c60\n    int64_t v49; // bp-4776, 0x406c60\n    if (*v1 == 0) {\n        goto lab_0x406e76;\n    } else {\n        // 0x406e3d\n        if ((*(int32_t *)(a1 + 48) & 0xb000) == 0x2000) {\n            int32_t v50 = -2 - g157 - g156 + g155; // 0x4073ff\n            int64_t * v51 = (int64_t *)(a1 + 64); // 0x407402\n            uint64_t v52 = *v51; // 0x407402\n            int64_t v53 = function_40e520(v52 / 0x1000 & 0xffffff00 | v52 % 256, &v28); // 0x407415\n            uint64_t v54 = *v51; // 0x40742c\n            int64_t v55 = function_40e520(v54 / 0x100000000 & 0xfffff000 | v54 / 256 % 0x1000, &v49); // 0x40744e\n            int32_t v56 = v50 >= 0 ? v50 : 0; // 0x407460\n            __sprintf_chk((char *)v43, 1, -1, \"%*s, %*s \", (int64_t)(g157 + v56), (char *)v55, (int64_t)g156, (char *)v53);\n            v48 = v43 + 1 + (int64_t)g155;\n            goto lab_0x406ecd;\n        } else {\n            int64_t v57 = *(int64_t *)(a1 + 72); // 0x406e50\n            char * v58; // 0x406c60\n            int64_t v59 = function_40d5d0(v57, &v28, g145, 1, g69, (int64_t)v58); // 0x406e6e\n            v47 = v59;\n            goto lab_0x406e76;\n        }\n    }\n  lab_0x406e76:;\n    uint32_t v60 = g155 - (int32_t)function_40eb70(v47, 0); // 0x406e87\n    int64_t v61 = v43; // 0x406e90\n    if (v60 >= 1) {\n        int32_t v62 = v60 - 1;\n        int64_t v63 = v43 + 1; // 0x406e98\n        int64_t v64 = v43 + 1; // 0x406ea0\n        *(char *)v43 = 32;\n        while (v64 != v63 + (int64_t)v62) {\n            int64_t v65 = v64;\n            v64 = v65 + 1;\n            *(char *)v65 = 32;\n        }\n        // 0x406ead\n        v61 = v63 + (int64_t)v62;\n    }\n    int64_t v66 = v47; // 0x406c60\n    char v67 = *(char *)v66; // 0x406eb9\n    int64_t v68 = v61 + 1; // 0x406ebe\n    char * v69 = (char *)v61;\n    *v69 = v67;\n    int64_t v70 = v68; // 0x406ec7\n    v66++;\n    while (v67 != 0) {\n        // 0x406eb5\n        v67 = *(char *)v66;\n        v68 = v70 + 1;\n        v69 = (char *)v70;\n        *v69 = v67;\n        v70 = v68;\n        v66++;\n    }\n    // 0x406ec9\n    *v69 = 32;\n    v48 = v68;\n    goto lab_0x406ecd;\n  lab_0x406ecd:;\n    char * str2 = (char *)v48; // 0x406ecd\n    *str2 = 1;\n    int64_t v71; // 0x406c60\n    int64_t v72; // 0x406c60\n    int64_t v73; // 0x406c60\n    int64_t v74; // 0x406c60\n    int64_t v75; // bp-4840, 0x406c60\n    uint64_t v76; // 0x407192\n    if (*v1 != 0) {\n        // 0x407160\n        if (function_4176f0(g122, &v7, &v75) == 0) {\n            goto lab_0x407218;\n        } else {\n            // 0x40717f\n            v76 = (int64_t)v20;\n            if (g170 < v7) {\n                goto lab_0x407595;\n            } else {\n                int64_t v77 = g171; // 0x40718b\n                if (g170 > v7) {\n                    int64_t v78 = g170 - 0xf0c2ac; // 0x407390\n                    v71 = 1;\n                    v72 = v7;\n                    v74 = v77;\n                    v73 = v78;\n                    if (v78 < v7) {\n                        goto lab_0x4071c6;\n                    } else {\n                        goto lab_0x4073a0;\n                    }\n                } else {\n                    if (g171 - v20 < 0) {\n                        goto lab_0x407595;\n                    } else {\n                        // 0x4071b4\n                        v71 = 0;\n                        if (g170 - 0xf0c2ac < v7) {\n                            // 0x4073cd\n                            v71 = v77 > v76;\n                            goto lab_0x4071c6;\n                        } else {\n                            goto lab_0x4071c6;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x406ee3;\n    }\n  lab_0x406ee3:;\n    int64_t v79 = g52; // 0x406eed\n    int64_t v80 = (int64_t)&g21; // 0x406eed\n    int64_t v81 = (int64_t)&g21; // 0x406eed\n    if (g52 < 0) {\n        goto lab_0x4074fa;\n    } else {\n        goto lab_0x406ef3;\n    }\n  lab_0x407218:;\n    int64_t v82 = v48; // 0x40721b\n    if (*str2 != 0) {\n        // 0x4074cb\n        if (*v1 == 0) {\n            goto lab_0x406ee3;\n        } else {\n            // 0x4074d8\n            int64_t v83; // bp-4872, 0x406c60\n            int64_t v84 = function_40e480(v7, &v83); // 0x4074e2\n            v79 = g52;\n            v80 = v84;\n            v81 = v84;\n            if (g52 >= 0) {\n                goto lab_0x406ef3;\n            } else {\n                goto lab_0x4074fa;\n            }\n        }\n    } else {\n        goto lab_0x407221;\n    }\n  lab_0x4074fa:;\n    int64_t v85 = 0; // bp-4912, 0x40750e\n    int64_t v86; // 0x406c60\n    int32_t v87; // 0x406c60\n    if (function_4176f0(g122, &v85, &v49) == 0) {\n        // 0x407562\n        v86 = g52;\n        goto lab_0x407569;\n    } else {\n        int64_t v88 = *(int64_t *)&g53; // 0x407536\n        if (g96 != 0) {\n            // 0x4075d0\n            v88 = 128 * (int64_t)v87 + (int64_t)&g97;\n        }\n        int64_t v89 = &v28; // 0x40754c\n        int64_t v90 = function_410650(v89, 1001, v88, &v49, g122, 0); // 0x407554\n        if (v90 != 0) {\n            int64_t v91 = function_40e9b0(v89, v90, 0); // 0x4075f5\n            g52 = v91;\n            v86 = v91 & 0xffffffff;\n            goto lab_0x407569;\n        } else {\n            // 0x407562\n            v86 = g52;\n            goto lab_0x407569;\n        }\n    }\n  lab_0x406ef3:\n    // 0x406ef3\n    __sprintf_chk(str2, 1, -1, \"%*s \", v79, (char *)v80);\n    int64_t v92 = v48 + (int64_t)strlen(str2); // 0x406f19\n    goto lab_0x406f1d;\n  lab_0x407221:\n    // 0x407221\n    *(int16_t *)v82 = 32;\n    v92 = v82 + 1;\n    goto lab_0x406f1d;\n  lab_0x407595:\n    // 0x407595\n    function_40c150(&g170);\n    int64_t v98 = g171; // 0x4075b0\n    int64_t v99 = g170 - 0xf0c2ac; // 0x4075b7\n    v72 = v7;\n    v74 = v98;\n    v73 = v99;\n    int64_t v94 = v7; // 0x4075c1\n    int64_t v95 = v98; // 0x4075c1\n    if (v99 < v7) {\n        goto lab_0x4073b4;\n    } else {\n        goto lab_0x4073a0;\n    }\n  lab_0x406f1d:;\n    int64_t v93 = v92 - v22; // 0x406f27\n    fputs_unlocked((char *)&v18, g86);\n    g105 += v93;\n    int64_t result2 = function_406690(a1, 0, (int32_t)&g104, v93); // 0x406f43\n    int64_t result; // 0x406c60\n    if (*(int32_t *)(a1 + 168) != 6) {\n        // 0x406f5a\n        result = g143;\n        if (g143 != 0) {\n            // 0x407308\n            result = function_4058a0(*v1);\n        }\n        // 0x406f68\n        return result;\n    }\n    // 0x4070f8\n    if (*(int64_t *)(a1 + 8) == 0) {\n        // 0x406f68\n        return result2;\n    }\n    // 0x407103\n    fwrite_unlocked((int64_t *)\" -> \", 1, 4, g86);\n    g105 += 4;\n    result = function_406690(a1, 1, 0, v93 + 4 + result2);\n    if (g143 != 0) {\n        // 0x407148\n        result = function_4058a0(1);\n    }\n    // 0x406f68\n    return result;\n  lab_0x4073b4:\n    // 0x4073b4\n    v71 = 1;\n    if (v94 < g170) {\n        goto lab_0x4071c6;\n    } else {\n        // 0x4073bd\n        v71 = 0;\n        if (v94 > g170) {\n            goto lab_0x4071c6;\n        } else {\n            // 0x4073cd\n            v71 = v95 > v76;\n            goto lab_0x4071c6;\n        }\n    }\n  lab_0x4073a0:\n    // 0x4073a0\n    v71 = 0;\n    if (v73 > v72) {\n        goto lab_0x4071c6;\n    } else {\n        // 0x4073ab\n        v71 = 0;\n        v94 = v72;\n        v95 = v74;\n        if ((int32_t)v74 - v20 >= 0) {\n            goto lab_0x4071c6;\n        } else {\n            goto lab_0x4073b4;\n        }\n    }\n  lab_0x407569:\n    // 0x407569\n    v79 = v86;\n    v80 = v81;\n    if ((int32_t)v86 < 0) {\n        // 0x407572\n        g52 = 0;\n        v79 = 0;\n        v80 = v81;\n    }\n    goto lab_0x406ef3;\n  lab_0x4071c6:;\n    // 0x4071c6\n    int64_t v96; // 0x406c60\n    if (g96 == 0) {\n        // 0x407588\n        v96 = *(int64_t *)(8 * v71 + (int64_t)&g53);\n    } else {\n        // 0x4071da\n        v96 = 128 * (12 * v71 + (int64_t)v87) + (int64_t)&g97;\n    }\n    int64_t v97 = function_410650(v48, 1001, v96, &v75, g122, v76); // 0x407202\n    if (v97 == 0) {\n        goto lab_0x407218;\n    } else {\n        // 0x40720c\n        v82 = v97 + v48;\n        goto lab_0x407221;\n    }\n}\n"
        },
        {
            "funcName": "function_407630",
            "funcStartAddr": "407630",
            "funcEndAddr": "40768a",
            "decompiledFuncCode": "int64_t function_407630(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407630\n    int64_t v1; // bp-8216, 0x407630\n    int64_t v2 = &v1; // 0x407649\n    int64_t v3 = v2; // bp-8232, 0x407658\n    int64_t v4; // bp-8224, 0x407630\n    char v5; // bp-8233, 0x407630\n    function_405ea0(&v3, a1, a2, a3 & 0xffffffff, (int32_t)(int64_t)&v4, (int64_t *)&v5);\n    int64_t v6 = v3; // 0x407662\n    if (v6 != v2 && v6 != a1) {\n        // 0x407671\n        free((int64_t *)v6);\n    }\n    // 0x407676\n    return v4 + (int64_t)v5;\n}\n"
        },
        {
            "funcName": "function_407690",
            "funcStartAddr": "407690",
            "funcEndAddr": "4077fd",
            "decompiledFuncCode": "int64_t function_407690(int64_t a1) {\n    int64_t v1 = 0; // 0x4076a3\n    int64_t v2; // 0x407690\n    int64_t v3; // 0x407690\n    int64_t v4; // 0x407690\n    int64_t v5; // 0x407690\n    int64_t v6; // 0x407690\n    int64_t v7; // bp-680, 0x407690\n    int64_t v8; // 0x407690\n    if (g136 == 0) {\n        goto lab_0x407752;\n    } else {\n        // 0x4076a9\n        if (g154 == 4) {\n            int64_t str = function_40e520(*(int64_t *)(a1 + 32), &v7); // 0x4077cf\n            int64_t len = strlen((char *)str); // 0x4077d7\n            v3 = len;\n            v1 = len + 1;\n            goto lab_0x407752;\n        } else {\n            // 0x4076b6\n            v4 = &g167;\n            v2 = &g165;\n            if (g148 == 0) {\n                // 0x4077b0\n                v5 = &g167;\n                v8 = &g162;\n                v6 = &g167;\n                if (g169 != 0) {\n                    goto lab_0x4076fd;\n                } else {\n                    goto lab_0x407700;\n                }\n            } else {\n                goto lab_0x4076d9;\n            }\n        }\n    }\n  lab_0x407752:;\n    int64_t v9 = v1; // 0x407759\n    int64_t v10 = v3; // 0x407759\n    int64_t v11; // 0x407690\n    if (g148 == 0) {\n        goto lab_0x4076dc;\n    } else {\n        // 0x40775f\n        v4 = v1;\n        v2 = &g165;\n        if (g154 == 4) {\n            // 0x40776c\n            v4 = v1;\n            v2 = 2;\n            if (*(char *)(a1 + 184) != 0) {\n                int32_t v12 = *(int32_t *)&g147; // 0x407791\n                int64_t v13; // 0x407690\n                int64_t str2 = function_40d5d0(*(int64_t *)(a1 + 88), &v7, v12, 512, g146, v13); // 0x407797\n                v11 = 512;\n                v4 = v1;\n                v2 = (int64_t)strlen((char *)str2) + 1;\n            }\n        }\n        goto lab_0x4076d9;\n    }\n  lab_0x4076dc:;\n    // 0x4076dc\n    int64_t v14; // 0x407690\n    int64_t v15 = v14; // 0x4076e3\n    v6 = v9;\n    int64_t v16 = v10; // 0x4076e3\n    int64_t v17; // 0x407690\n    if (g169 == 0) {\n        goto lab_0x407700;\n    } else {\n        // 0x4076e5\n        v17 = v14;\n        v5 = v9;\n        v8 = &g162;\n        if (g154 == 4) {\n            // 0x4077e8\n            v17 = v14;\n            v5 = v9;\n            v8 = (int64_t)strlen((char *)*(int64_t *)(a1 + 176)) + 1;\n        }\n        goto lab_0x4076fd;\n    }\n  lab_0x407700:;\n    int64_t v18 = v16 + v6; // 0x407716\n    int64_t result = v18; // 0x407721\n    if (g143 != 0) {\n        uint32_t v19 = *(int32_t *)(a1 + 168); // 0x407723\n        uint32_t v20 = *(int32_t *)(a1 + 48); // 0x407729\n        unsigned char v21 = *(char *)(a1 + 184); // 0x40772c\n        result = v18 + (int64_t)((char)function_4057b0((int64_t)v21, (int64_t)v20, (int64_t)v19, v15) != 0);\n    }\n    // 0x407743\n    return result;\n  lab_0x4076d9:\n    // 0x4076d9\n    v14 = v11;\n    v9 = v2 + v4;\n    v10 = v2;\n    goto lab_0x4076dc;\n  lab_0x4076fd:\n    // 0x4076fd\n    v15 = v17;\n    v6 = v8 + v5;\n    v16 = v8;\n    goto lab_0x407700;\n}\n"
        },
        {
            "funcName": "function_407800",
            "funcStartAddr": "407800",
            "funcEndAddr": "407ae0",
            "decompiledFuncCode": "int64_t function_407800(int32_t a1) {\n    int64_t v1 = g179; // 0x40780d\n    uint64_t v2 = (int64_t)g106; // 0x407814\n    uint64_t result = v1 > v2 ? v2 : v1; // 0x407821\n    int64_t v3 = v1; // 0x40782c\n    if (result > (int64_t)g91) {\n        int64_t v4 = (int64_t)g107; // 0x407835\n        int64_t v5; // 0x407800\n        int64_t v6; // 0x407800\n        if (result < v2 / 2) {\n            uint128_t v7 = 48 * (int128_t)result; // 0x407aaa\n            if ((int64_t)v7 < 0 || v7 % 0x3f0000000000000001 != 0) {\n                // 0x407adb\n                return function_412bd0(v4);\n            }\n            int64_t v8 = function_4129e0(v4, 48 * result); // 0x407aca\n            v5 = 2 * result;\n            v6 = v8;\n        } else {\n            uint128_t v9 = 24 * (g106 & 0xffffffffffffffff); // 0x407850\n            if ((int64_t)v9 < 0 || v9 % 0x1f0000000000000001 != 0) {\n                // 0x407adb\n                return function_412bd0(v4);\n            }\n            int64_t v10 = function_4129e0(v4, 24 * v2); // 0x407873\n            v5 = g106;\n            v6 = v10;\n        }\n        // 0x407886\n        g107 = (char *)v6;\n        int64_t v11 = g91; // 0x407886\n        int64_t v12 = v5 - v11; // 0x407890\n        uint64_t v13 = v11 + 1; // 0x407893\n        uint64_t v14 = v13 + v5; // 0x407897\n        if (v14 < v13) {\n            // 0x407adb\n            return function_412bd0(v12);\n        }\n        uint64_t v15 = v14 * v12; // 0x4078a6\n        if (v14 != v15 / v12) {\n            // 0x407adb\n            return function_412bd0(v12);\n        }\n        int64_t v16 = 8 * v15 / 2; // 0x4078d3\n        if (v16 < 0 || v15 >= 0x4000000000000000) {\n            // 0x407adb\n            return function_412bd0(v16);\n        }\n        int64_t v17 = function_412980(v16); // 0x4078e6\n        uint64_t v18 = (int64_t)g91; // 0x4078eb\n        if (v5 > v18) {\n            int64_t v19 = v17; // 0x40790e\n            int64_t v20 = 8 * v18; // 0x40790e\n            v20 += 8;\n            *(int64_t *)((int64_t)g107 - 8 + 3 * v20) = v19;\n            v19 += v20;\n            while (8 * v5 != v20) {\n                // 0x407910\n                v20 += 8;\n                *(int64_t *)((int64_t)g107 - 8 + 3 * v20) = v19;\n                v19 += v20;\n            }\n        }\n        // 0x407925\n        g91 = v5;\n        v3 = g179;\n    }\n    // 0x407933\n    if (result != 0) {\n        int64_t v21 = 3; // 0x40794b\n        int64_t v22 = 0; // 0x40794b\n        int64_t v23 = 8 * v21 + (int64_t)g107;\n        int64_t v24 = *(int64_t *)(v23 - 8); // 0x407950\n        *(char *)(v23 - 24) = 1;\n        v22 += 8;\n        *(int64_t *)(v23 - 16) = v21;\n        int64_t v25 = v24; // 0x407967\n        *(int64_t *)v25 = 3;\n        v25 += 8;\n        while (v24 + v22 != v25) {\n            // 0x407970\n            *(int64_t *)v25 = 3;\n            v25 += 8;\n        }\n        // 0x407980\n        v21 += 3;\n        while (v21 != result + 3 + 2 * result) {\n            // 0x407950\n            v23 = 8 * v21 + (int64_t)g107;\n            v24 = *(int64_t *)(v23 - 8);\n            *(char *)(v23 - 24) = 1;\n            v22 += 8;\n            *(int64_t *)(v23 - 16) = v21;\n            v25 = v24;\n            *(int64_t *)v25 = 3;\n            v25 += 8;\n            while (v24 + v22 != v25) {\n                // 0x407970\n                *(int64_t *)v25 = 3;\n                v25 += 8;\n            }\n            // 0x407980\n            v21 += 3;\n        }\n    }\n    if (v3 != 0) {\n        uint64_t v26 = 0;\n        int64_t v27 = function_407690(*(int64_t *)(g176 + 8 * v26)); // 0x4079a3\n        uint64_t v28 = (int64_t)g179; // 0x4079a8\n        int64_t v29; // 0x407800\n        int64_t v30; // 0x407800\n        int64_t v31; // 0x407800\n        int64_t v32; // 0x407800\n        int64_t v33; // 0x4079cb\n        char * v34; // 0x407a31\n        uint64_t v35; // 0x407a34\n        uint64_t v36; // 0x4079fa\n        int64_t * v37; // 0x407a02\n        uint64_t v38; // 0x407a02\n        int64_t * v39; // 0x407a0a\n        if (result != 0) {\n            // 0x4079bb\n            v33 = v27 + 2;\n            v31 = 0;\n            v30 = (int64_t)g107;\n            v34 = (char *)v30;\n            v35 = v31 + 1;\n            if (*v34 != 0) {\n                if ((char)a1 != 0) {\n                    // 0x4079d8\n                    v32 = v26 / ((v31 + v28) / v35);\n                } else {\n                    // 0x407a3f\n                    v32 = v26 % v35;\n                }\n                // 0x4079f0\n                v36 = v32 != v31 ? v33 : v27;\n                v37 = (int64_t *)(*(int64_t *)(v30 + 16) + 8 * v32);\n                v38 = *v37;\n                if (v36 > v38) {\n                    // 0x407a0a\n                    v39 = (int64_t *)(v30 + 8);\n                    *v39 = v36 - v38 + *v39;\n                    *v37 = v36;\n                    *v34 = (char)(*v39 < (int64_t)g123);\n                }\n            }\n            // 0x407a25\n            v29 = v30 + 24;\n            while (result != v35) {\n                // 0x407a31\n                v31 = v35;\n                v30 = v29;\n                v34 = (char *)v30;\n                v35 = v31 + 1;\n                if (*v34 != 0) {\n                    if ((char)a1 != 0) {\n                        // 0x4079d8\n                        v32 = v26 / ((v31 + v28) / v35);\n                    } else {\n                        // 0x407a3f\n                        v32 = v26 % v35;\n                    }\n                    // 0x4079f0\n                    v36 = v32 != v31 ? v33 : v27;\n                    v37 = (int64_t *)(*(int64_t *)(v30 + 16) + 8 * v32);\n                    v38 = *v37;\n                    if (v36 > v38) {\n                        // 0x407a0a\n                        v39 = (int64_t *)(v30 + 8);\n                        *v39 = v36 - v38 + *v39;\n                        *v37 = v36;\n                        *v34 = (char)(*v39 < (int64_t)g123);\n                    }\n                }\n                // 0x407a25\n                v29 = v30 + 24;\n            }\n        }\n        int64_t v40 = v26 + 1; // 0x407a50\n        while (v40 < v28) {\n            // 0x407998\n            v26 = v40;\n            v27 = function_407690(*(int64_t *)(g176 + 8 * v26));\n            v28 = (int64_t)g179;\n            if (result != 0) {\n                // 0x4079bb\n                v33 = v27 + 2;\n                v31 = 0;\n                v30 = (int64_t)g107;\n                v34 = (char *)v30;\n                v35 = v31 + 1;\n                if (*v34 != 0) {\n                    if ((char)a1 != 0) {\n                        // 0x4079d8\n                        v32 = v26 / ((v31 + v28) / v35);\n                    } else {\n                        // 0x407a3f\n                        v32 = v26 % v35;\n                    }\n                    // 0x4079f0\n                    v36 = v32 != v31 ? v33 : v27;\n                    v37 = (int64_t *)(*(int64_t *)(v30 + 16) + 8 * v32);\n                    v38 = *v37;\n                    if (v36 > v38) {\n                        // 0x407a0a\n                        v39 = (int64_t *)(v30 + 8);\n                        *v39 = v36 - v38 + *v39;\n                        *v37 = v36;\n                        *v34 = (char)(*v39 < (int64_t)g123);\n                    }\n                }\n                // 0x407a25\n                v29 = v30 + 24;\n                while (result != v35) {\n                    // 0x407a31\n                    v31 = v35;\n                    v30 = v29;\n                    v34 = (char *)v30;\n                    v35 = v31 + 1;\n                    if (*v34 != 0) {\n                        if ((char)a1 != 0) {\n                            // 0x4079d8\n                            v32 = v26 / ((v31 + v28) / v35);\n                        } else {\n                            // 0x407a3f\n                            v32 = v26 % v35;\n                        }\n                        // 0x4079f0\n                        v36 = v32 != v31 ? v33 : v27;\n                        v37 = (int64_t *)(*(int64_t *)(v30 + 16) + 8 * v32);\n                        v38 = *v37;\n                        if (v36 > v38) {\n                            // 0x407a0a\n                            v39 = (int64_t *)(v30 + 8);\n                            *v39 = v36 - v38 + *v39;\n                            *v37 = v36;\n                            *v34 = (char)(*v39 < (int64_t)g123);\n                        }\n                    }\n                    // 0x407a25\n                    v29 = v30 + 24;\n                }\n            }\n            // 0x407a50\n            v40 = v26 + 1;\n        }\n    }\n    // 0x407a5d\n    if (result < 2) {\n        // 0x407a94\n        return result;\n    }\n    int64_t v41 = 24 * result + (int64_t)g107;\n    if (*(char *)(v41 - 24) != 0) {\n        // 0x407a94\n        return result;\n    }\n    int64_t v42 = v41 - 48; // 0x407a7e\n    int64_t result2 = result; // 0x407a7e\n    while (result2 != 2) {\n        // 0x407a8a\n        result2--;\n        // 0x407a80\n        if (*(char *)v42 != 0) {\n            // break -> 0x407a94\n            break;\n        }\n        v42 -= 24;\n    }\n    // 0x407a94\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407ae0",
            "funcStartAddr": "407ae0",
            "funcEndAddr": "407c98",
            "decompiledFuncCode": "int64_t function_407ae0(int64_t a1) {\n    // 0x407ae0\n    int64_t v1; // 0x407ae0\n    int64_t v2; // 0x407ae0\n    int64_t v3; // 0x407ae0\n    int64_t v4; // 0x407ae0\n    int64_t v5; // 0x407ae0\n    int64_t v6; // 0x407ae0\n    int64_t v7; // 0x407ae0\n    int32_t v8; // 0x407ae0\n    char v9; // 0x407ae0\n    int64_t v10; // 0x407b47\n    if ((int64_t)g179 != 0) {\n        // 0x407b38\n        v6 = 0;\n        v2 = 0;\n        while (true) {\n          lab_0x407b38:;\n            int64_t v11 = v2;\n            v7 = v6;\n            v10 = *(int64_t *)(g176 + 8 * v7);\n            if ((int64_t)g123 == 0) {\n                // 0x407b10\n                v4 = v11;\n                v1 = v11;\n                if (v7 != 0) {\n                    int64_t v12 = v11 + 2; // 0x407be0\n                    v8 = 32;\n                    v9 = 32;\n                    v5 = v12;\n                    v3 = v12;\n                    goto lab_0x407b92;\n                } else {\n                    goto lab_0x407b1c;\n                }\n            } else {\n                int64_t v13 = function_407690(v10); // 0x407b50\n                if (v7 == 0) {\n                    // 0x407c38\n                    v4 = v11;\n                    v1 = v13 + v11;\n                    goto lab_0x407b1c;\n                } else {\n                    int64_t v14 = v11 + 2; // 0x407b65\n                    v8 = 32;\n                    v9 = 32;\n                    v5 = v14;\n                    v3 = v13 + v14;\n                    if ((int64_t)g123 != 0) {\n                        // 0x407b72\n                        uint64_t v15; // 0x407b5e\n                        int64_t v16; // 0x407b69\n                        bool v17 = -3 - v13 < v11 | v16 >= v15;\n                        int32_t v18 = v17 ? 10 : 32;\n                        char v19 = v17 ? 10 : 32;\n                        int64_t v20 = v17 ? 0 : v14;\n                        int64_t v21 = v17 ? v13 : v16;\n                        v8 = v18;\n                        v9 = v19;\n                        v5 = v20;\n                        v3 = v21;\n                    }\n                    goto lab_0x407b92;\n                }\n            }\n        }\n    }\n  lab_0x407c08:;\n    int64_t v22 = (int64_t)g86; // 0x407c08\n    int64_t * v23 = (int64_t *)(v22 + 40); // 0x407c0f\n    uint64_t result = *v23; // 0x407c0f\n    if (result >= *(int64_t *)(v22 + 48)) {\n        // 0x407c80\n        return __overflow(g86, 10);\n    }\n    // 0x407c19\n    *v23 = result + 1;\n    *(char *)result = 10;\n    return result;\n  lab_0x407b1c:;\n    int64_t v24 = v7 + 1; // 0x407b22\n    function_406af0(v10, v4);\n    v6 = v24;\n    v2 = v1;\n    if (v24 >= (int64_t)g179) {\n        // break -> 0x407c08\n        goto lab_0x407c08;\n    }\n    goto lab_0x407b38;\n  lab_0x407b92:;\n    int64_t v25 = v3;\n    int64_t v26 = v5;\n    char v27 = v9;\n    int32_t v28 = v8;\n    int64_t v29 = (int64_t)g86; // 0x407b92\n    int64_t * v30 = (int64_t *)(v29 + 40); // 0x407b99\n    uint64_t v31 = *v30; // 0x407b99\n    if (v31 >= *(int64_t *)(v29 + 48)) {\n        // 0x407c48\n        __overflow(g86, 0x1000000 * (int32_t)a1 >> 24);\n    } else {\n        // 0x407ba7\n        *v30 = v31 + 1;\n        *(char *)v31 = (char)a1;\n    }\n    int64_t v32 = (int64_t)g86; // 0x407bb2\n    int64_t * v33 = (int64_t *)(v32 + 40); // 0x407bb9\n    uint64_t v34 = *v33; // 0x407bb9\n    if (v34 >= *(int64_t *)(v32 + 48)) {\n        // 0x407c70\n        __overflow(g86, v28);\n        v4 = v26;\n        v1 = v25;\n    } else {\n        // 0x407bc7\n        *v33 = v34 + 1;\n        *(char *)v34 = v27;\n        v4 = v26;\n        v1 = v25;\n    }\n    goto lab_0x407b1c;\n}\n"
        },
        {
            "funcName": "function_407ca0",
            "funcStartAddr": "407ca0",
            "funcEndAddr": "40803a",
            "decompiledFuncCode": "int64_t function_407ca0(int64_t a1, int64_t a2) {\n    uint32_t v1 = g154; // 0x407cbb\n    int64_t result6 = v1; // 0x407cbb\n    g212 = result6;\n    switch (v1) {\n        case 0: {\n            // 0x407de0\n            if ((int64_t)g179 == 0) {\n                // 0x407f89\n                return 0;\n            }\n            int64_t v2 = 0; // 0x407dea\n            function_405e30();\n            function_406c60(*(int64_t *)(g176 + 8 * v2));\n            int64_t v3 = (int64_t)g86; // 0x407e05\n            int64_t * v4 = (int64_t *)(v3 + 40); // 0x407e0c\n            uint64_t v5 = *v4; // 0x407e0c\n            int64_t result; // 0x407ca0\n            if (v5 >= *(int64_t *)(v3 + 48)) {\n                // 0x407fc0\n                result = __overflow(g86, 10);\n            } else {\n                // 0x407e1a\n                *v4 = v5 + 1;\n                *(char *)v5 = 10;\n                result = v5;\n            }\n            // 0x407e25\n            g105++;\n            v2++;\n            while (v2 < (int64_t)g179) {\n                // 0x407df0\n                function_405e30();\n                function_406c60(*(int64_t *)(g176 + 8 * v2));\n                v3 = (int64_t)g86;\n                v4 = (int64_t *)(v3 + 40);\n                v5 = *v4;\n                if (v5 >= *(int64_t *)(v3 + 48)) {\n                    // 0x407fc0\n                    result = __overflow(g86, 10);\n                } else {\n                    // 0x407e1a\n                    *v4 = v5 + 1;\n                    *(char *)v5 = 10;\n                    result = v5;\n                }\n                // 0x407e25\n                g105++;\n                v2++;\n            }\n            // 0x407f89\n            return result;\n        }\n        case 1: {\n            // 0x407e40\n            if ((int64_t)g179 == 0) {\n                // 0x407f89\n                return 1;\n            }\n            int64_t v6 = 0; // 0x407e4a\n            function_406af0(*(int64_t *)(g176 + 8 * v6), 0);\n            int64_t v7 = (int64_t)g86; // 0x407e62\n            int64_t * v8 = (int64_t *)(v7 + 40); // 0x407e69\n            uint64_t v9 = *v8; // 0x407e69\n            int64_t result2; // 0x407ca0\n            if (v9 >= *(int64_t *)(v7 + 48)) {\n                // 0x407fb0\n                result2 = __overflow(g86, 10);\n            } else {\n                // 0x407e77\n                *v8 = v9 + 1;\n                *(char *)v9 = 10;\n                result2 = v9;\n            }\n            // 0x407e82\n            v6++;\n            while (v6 < (int64_t)g179) {\n                // 0x407e50\n                function_406af0(*(int64_t *)(g176 + 8 * v6), 0);\n                v7 = (int64_t)g86;\n                v8 = (int64_t *)(v7 + 40);\n                v9 = *v8;\n                if (v9 >= *(int64_t *)(v7 + 48)) {\n                    // 0x407fb0\n                    result2 = __overflow(g86, 10);\n                } else {\n                    // 0x407e77\n                    *v8 = v9 + 1;\n                    *(char *)v9 = 10;\n                    result2 = v9;\n                }\n                // 0x407e82\n                v6++;\n            }\n            // 0x407f89\n            return result2;\n        }\n        case 2: {\n            // 0x407e98\n            if ((int64_t)g123 == 0) {\n                // 0x407dcd\n                return function_407ae0(32);\n            }\n            uint64_t v10 = function_407800(1); // 0x407eab\n            uint64_t v11 = (int64_t)g179;\n            int64_t result3 = v11 / v10;\n            int64_t v12 = result3 + (int64_t)(v11 % v10 != 0); // 0x407ee1\n            if (v12 == 0) {\n                // 0x407f89\n                return result3;\n            }\n            int64_t * v13 = (int64_t *)(24 * v10 - 8 + (int64_t)g107);\n            int64_t result4 = 0; // 0x407f73\n            int64_t v14 = *(int64_t *)(g176 + 8 * result4); // 0x407f1d\n            int64_t v15 = function_407690(v14); // 0x407f24\n            function_406af0(v14, 0);\n            int64_t v16 = result4 + v12; // 0x407f45\n            int64_t v17 = v16; // 0x407f51\n            int64_t v18 = v15; // 0x407f51\n            int64_t v19 = 0; // 0x407f51\n            int64_t v20; // 0x407ca0\n            int64_t v21; // 0x407ca0\n            int64_t v22; // 0x407f3c\n            int64_t v23; // 0x407f05\n            int64_t v24; // 0x407f1d\n            int64_t v25; // 0x407f24\n            int64_t v26; // 0x407f45\n            if (v16 < (int64_t)g179) {\n                v22 = 8;\n                v23 = *(int64_t *)*v13 + v19;\n                function_4052c0(v18 + v19, v23);\n                v24 = *(int64_t *)(g176 + 8 * v17);\n                v25 = function_407690(v24);\n                function_406af0(v24, v23);\n                v26 = v17 + v12;\n                v17 = v26;\n                v20 = *(int64_t *)(*v13 + v22);\n                v18 = v25;\n                v21 = v22;\n                v19 = v23;\n                while (v26 < (int64_t)g179) {\n                    // 0x407f00\n                    v22 = v21 + 8;\n                    v23 = v20 + v19;\n                    function_4052c0(v18 + v19, v23);\n                    v24 = *(int64_t *)(g176 + 8 * v17);\n                    v25 = function_407690(v24);\n                    function_406af0(v24, v23);\n                    v26 = v17 + v12;\n                    v17 = v26;\n                    v20 = *(int64_t *)(*v13 + v22);\n                    v18 = v25;\n                    v21 = v22;\n                    v19 = v23;\n                }\n            }\n            int64_t v27 = (int64_t)g86; // 0x407f53\n            int64_t * v28 = (int64_t *)(v27 + 40); // 0x407f5a\n            uint64_t v29 = *v28; // 0x407f5a\n            if (v29 >= *(int64_t *)(v27 + 48)) {\n                // 0x408000\n                __overflow(g86, 10);\n            } else {\n                // 0x407f68\n                *v28 = v29 + 1;\n                *(char *)v29 = 10;\n            }\n            // 0x407f73\n            result4++;\n            while (v12 != result4) {\n                // 0x407ef0\n                v14 = *(int64_t *)(g176 + 8 * result4);\n                v15 = function_407690(v14);\n                function_406af0(v14, 0);\n                v16 = result4 + v12;\n                v17 = v16;\n                v18 = v15;\n                v19 = 0;\n                if (v16 < (int64_t)g179) {\n                    v22 = 8;\n                    v23 = *(int64_t *)*v13 + v19;\n                    function_4052c0(v18 + v19, v23);\n                    v24 = *(int64_t *)(g176 + 8 * v17);\n                    v25 = function_407690(v24);\n                    function_406af0(v24, v23);\n                    v26 = v17 + v12;\n                    v17 = v26;\n                    v20 = *(int64_t *)(*v13 + v22);\n                    v18 = v25;\n                    v21 = v22;\n                    v19 = v23;\n                    while (v26 < (int64_t)g179) {\n                        // 0x407f00\n                        v22 = v21 + 8;\n                        v23 = v20 + v19;\n                        function_4052c0(v18 + v19, v23);\n                        v24 = *(int64_t *)(g176 + 8 * v17);\n                        v25 = function_407690(v24);\n                        function_406af0(v24, v23);\n                        v26 = v17 + v12;\n                        v17 = v26;\n                        v20 = *(int64_t *)(*v13 + v22);\n                        v18 = v25;\n                        v21 = v22;\n                        v19 = v23;\n                    }\n                }\n                // 0x407f53\n                v27 = (int64_t)g86;\n                v28 = (int64_t *)(v27 + 40);\n                v29 = *v28;\n                if (v29 >= *(int64_t *)(v27 + 48)) {\n                    // 0x408000\n                    __overflow(g86, 10);\n                } else {\n                    // 0x407f68\n                    *v28 = v29 + 1;\n                    *(char *)v29 = 10;\n                }\n                // 0x407f73\n                result4++;\n            }\n            // 0x407f89\n            return result4;\n        }\n        case 3: {\n            // 0x407cd0\n            if ((int64_t)g123 == 0) {\n                // 0x407dcd\n                return function_407ae0(32);\n            }\n            uint64_t v30 = function_407800(0); // 0x407ce0\n            int64_t v31 = *(int64_t *)g176; // 0x407cff\n            int64_t v32 = function_407690(v31); // 0x407d05\n            int64_t * v33 = (int64_t *)(24 * v30 - 8 + (int64_t)g107); // 0x407d14\n            function_406af0(v31, 0);\n            int64_t v34 = 1; // 0x407d28\n            int64_t v35 = 0; // 0x407d28\n            if ((int64_t)g179 >= 2) {\n                uint64_t v36 = v34 % v30;\n                int64_t v37; // 0x407ca0\n                int64_t v38; // 0x407d40\n                int64_t * v39; // 0x407d47\n                uint64_t v40; // 0x407d47\n                int64_t v41; // 0x407dad\n                if (v36 == 0) {\n                    // 0x407d40\n                    v38 = (int64_t)g86;\n                    v39 = (int64_t *)(v38 + 40);\n                    v40 = *v39;\n                    if (v40 >= *(int64_t *)(v38 + 48)) {\n                        // 0x408010\n                        __overflow(g86, 10);\n                        v37 = 0;\n                    } else {\n                        // 0x407d55\n                        *v39 = v40 + 1;\n                        *(char *)v40 = 10;\n                        v37 = 0;\n                    }\n                } else {\n                    // 0x407dad\n                    v41 = v35 + *(int64_t *)*v33;\n                    function_4052c0(v35 + v32, v41);\n                    v37 = v41;\n                }\n                int64_t v42 = *(int64_t *)(g176 + 8 * v34); // 0x407d6d\n                int64_t v43 = v34 + 1; // 0x407d71\n                function_406af0(v42, v37);\n                int64_t v44 = function_407690(v42); // 0x407d97\n                v34 = v43;\n                int64_t v45 = *(int64_t *)(*v33 + 8 * v36); // 0x407d97\n                v35 = v37;\n                while (v43 < (int64_t)g179) {\n                    // 0x407d9d\n                    v36 = v34 % v30;\n                    if (v36 == 0) {\n                        // 0x407d40\n                        v38 = (int64_t)g86;\n                        v39 = (int64_t *)(v38 + 40);\n                        v40 = *v39;\n                        if (v40 >= *(int64_t *)(v38 + 48)) {\n                            // 0x408010\n                            __overflow(g86, 10);\n                            v37 = 0;\n                        } else {\n                            // 0x407d55\n                            *v39 = v40 + 1;\n                            *(char *)v40 = 10;\n                            v37 = 0;\n                        }\n                    } else {\n                        // 0x407dad\n                        v41 = v35 + v45;\n                        function_4052c0(v35 + v44, v41);\n                        v37 = v41;\n                    }\n                    // 0x407d63\n                    v42 = *(int64_t *)(g176 + 8 * v34);\n                    v43 = v34 + 1;\n                    function_406af0(v42, v37);\n                    v44 = function_407690(v42);\n                    v34 = v43;\n                    v45 = *(int64_t *)(*v33 + 8 * v36);\n                    v35 = v37;\n                }\n            }\n            int64_t v46 = (int64_t)g86; // 0x407fd8\n            int64_t * v47 = (int64_t *)(v46 + 40); // 0x407fdf\n            uint64_t result5 = *v47; // 0x407fdf\n            if (result5 >= *(int64_t *)(v46 + 48)) {\n                // 0x408022\n                return __overflow(g86, 10);\n            }\n            // 0x407fe9\n            *v47 = result5 + 1;\n            *(char *)result5 = 10;\n            // 0x407f89\n            return result5;\n        }\n        case 4: {\n            // 0x407dcd\n            return function_407ae0(44);\n        }\n    }\n    // 0x407f89\n    return result6;\n}\n"
        },
        {
            "funcName": "function_408040",
            "funcStartAddr": "408040",
            "funcEndAddr": "4080b6",
            "decompiledFuncCode": "int64_t function_408040(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x408040\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x408046\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x408071\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40807e\n            return 1;\n        }\n    } else {\n        // 0x40806d\n        if (v1 == 3 || v1 == 9) {\n            // 0x40807e\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 72); // 0x408080\n    int64_t v5 = *(int64_t *)(a2 + 72); // 0x408084\n    if (v5 > v4) {\n        // 0x40807e\n        return 0xffffffff;\n    }\n    int64_t v6 = v5 - v4; // 0x408084\n    if (v6 != 0) {\n        // 0x4080a0\n        return v6 < 0 != ((v6 ^ v5) & (v5 ^ v4)) < 0;\n    }\n    char * str = (char *)a1; // 0x408092\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_4080c0",
            "funcStartAddr": "4080c0",
            "funcEndAddr": "4080f6",
            "decompiledFuncCode": "int64_t function_4080c0(int64_t a1, int64_t a2) {\n    int64_t result = *(int64_t *)(a2 + 72); // 0x4080c0\n    int64_t v1 = *(int64_t *)(a1 + 72); // 0x4080c4\n    if (v1 > result) {\n        // 0x4080cc\n        return 0xffffffff;\n    }\n    int64_t v2 = v1 - result; // 0x4080c4\n    if (v2 != 0) {\n        // 0x4080e0\n        return v2 < 0 != ((v2 ^ v1) & (v1 ^ result)) < 0;\n    }\n    // 0x4080cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_408100",
            "funcStartAddr": "408100",
            "funcEndAddr": "408176",
            "decompiledFuncCode": "int64_t function_408100(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x408100\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x408106\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40812e\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40813b\n            return 1;\n        }\n    } else {\n        // 0x40812a\n        if (v1 == 3 || v1 == 9) {\n            // 0x40813b\n            return 0xffffffff;\n        }\n    }\n    int64_t result = *(int64_t *)(a2 + 72); // 0x408140\n    int64_t v4 = *(int64_t *)(a1 + 72); // 0x408144\n    if (v4 > result) {\n        // 0x40813b\n        return 0xffffffff;\n    }\n    int64_t v5 = v4 - result; // 0x408144\n    if (v5 != 0) {\n        // 0x408160\n        return v5 < 0 != ((v5 ^ v4) & (v4 ^ result)) < 0;\n    }\n    // 0x40813b\n    return result;\n}\n"
        },
        {
            "funcName": "function_408180",
            "funcStartAddr": "408180",
            "funcEndAddr": "4081f6",
            "decompiledFuncCode": "int64_t function_408180(int64_t str, int64_t str2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x408180\n    int32_t v2 = *(int32_t *)(str2 + 168); // 0x408186\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x4081ae\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x4081bb\n            return 1;\n        }\n    } else {\n        // 0x4081aa\n        if (v1 == 3 || v1 == 9) {\n            // 0x4081bb\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(str2 + 72); // 0x4081c0\n    int64_t v5 = *(int64_t *)(str + 72); // 0x4081c4\n    if (v5 > v4) {\n        // 0x4081bb\n        return 0xffffffff;\n    }\n    int64_t v6 = v5 - v4; // 0x4081c4\n    if (v6 != 0) {\n        // 0x4081e0\n        return v6 < 0 != ((v6 ^ v5) & (v5 ^ v4)) < 0;\n    }\n    // 0x4081cc\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_408200",
            "funcStartAddr": "408200",
            "funcEndAddr": "408276",
            "decompiledFuncCode": "int64_t function_408200(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x408200\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x408206\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x408231\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40823e\n            return 1;\n        }\n    } else {\n        // 0x40822d\n        if (v1 == 3 || v1 == 9) {\n            // 0x40823e\n            return 0xffffffff;\n        }\n    }\n    int64_t result = *(int64_t *)(a1 + 72); // 0x408240\n    int64_t v4 = *(int64_t *)(a2 + 72); // 0x408244\n    if (v4 > result) {\n        // 0x40823e\n        return 0xffffffff;\n    }\n    int64_t v5 = v4 - result; // 0x408244\n    if (v5 != 0) {\n        // 0x408260\n        return v5 < 0 != ((v5 ^ v4) & (v4 ^ result)) < 0;\n    }\n    // 0x40823e\n    return result;\n}\n"
        },
        {
            "funcName": "function_408280",
            "funcStartAddr": "408280",
            "funcEndAddr": "4082b6",
            "decompiledFuncCode": "int64_t function_408280(int64_t a1, int64_t result) {\n    int64_t v1 = *(int64_t *)(a1 + 72); // 0x408283\n    int64_t v2 = *(int64_t *)(result + 72); // 0x408287\n    if (v2 > v1) {\n        // 0x40828f\n        return 0xffffffff;\n    }\n    int64_t v3 = v2 - v1; // 0x408287\n    if (v3 != 0) {\n        // 0x4082a0\n        return v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0;\n    }\n    // 0x40828f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4082c0",
            "funcStartAddr": "4082c0",
            "funcEndAddr": "4082f6",
            "decompiledFuncCode": "int64_t function_4082c0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 72); // 0x4082c3\n    int64_t v2 = *(int64_t *)(a2 + 72); // 0x4082c7\n    if (v2 > v1) {\n        // 0x4082f0\n        return 0xffffffff;\n    }\n    int64_t v3 = v2 - v1; // 0x4082c7\n    if (v3 != 0) {\n        // 0x4082e0\n        return v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0;\n    }\n    char * str = (char *)a1; // 0x4082d5\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_408300",
            "funcStartAddr": "408300",
            "funcEndAddr": "408386",
            "decompiledFuncCode": "int64_t function_408300(int64_t str, int64_t str2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x408300\n    int32_t v2 = *(int32_t *)(str2 + 168); // 0x408306\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40832e\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40833b\n            return 1;\n        }\n    } else {\n        // 0x40832a\n        if (v1 == 3 || v1 == 9) {\n            // 0x40833b\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(str2 + 128); // 0x408340\n    int64_t v5 = *(int64_t *)(str + 128); // 0x408347\n    if (v5 > v4) {\n        // 0x40833b\n        return 0xffffffff;\n    }\n    // 0x408350\n    if (v5 < v4) {\n        // 0x40833b\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 136) - *(int32_t *)(str + 136); // 0x408359\n    if (result != 0) {\n        // 0x40833b\n        return result;\n    }\n    // 0x408361\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_408390",
            "funcStartAddr": "408390",
            "funcEndAddr": "408406",
            "decompiledFuncCode": "int64_t function_408390(int64_t str, int64_t str2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x408390\n    int32_t v2 = *(int32_t *)(str2 + 168); // 0x408396\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x4083be\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x4083cb\n            return 1;\n        }\n    } else {\n        // 0x4083ba\n        if (v1 == 3 || v1 == 9) {\n            // 0x4083cb\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(str2 + 112); // 0x4083d0\n    int64_t v5 = *(int64_t *)(str + 112); // 0x4083d4\n    if (v5 > v4) {\n        // 0x4083cb\n        return 0xffffffff;\n    }\n    // 0x4083da\n    if (v5 < v4) {\n        // 0x4083cb\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 120) - *(int32_t *)(str + 120); // 0x4083e0\n    if (result != 0) {\n        // 0x4083cb\n        return result;\n    }\n    // 0x4083e5\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_408410",
            "funcStartAddr": "408410",
            "funcEndAddr": "4084ad",
            "decompiledFuncCode": "int64_t function_408410(int32_t a1, int64_t a2) {\n    // 0x408410\n    if (g149 == 0) {\n        int64_t v1 = function_40e160((int64_t)a1); // 0x408488\n        if (v1 != 0) {\n            int64_t v2 = function_40eb70(v1, 0); // 0x408497\n            return (int32_t)v2 < 0 ? 0 : v2 & 0xffffffff;\n        }\n    }\n    // 0x408421\n    int64_t v3; // bp-56, 0x408410\n    int64_t v4 = &v3; // 0x408421\n    __sprintf_chk((char *)&v3, 1, 21, \"%lu\", a1);\n    int64_t v5 = v4;\n    int32_t v6 = *(int32_t *)v5; // 0x408443\n    int64_t v7 = v5 + 4; // 0x408445\n    int32_t v8 = v6 - 0x1010101 & (v6 ^ -0x7f7f7f80); // 0x408451\n    uint32_t v9 = v8 & -0x7f7f7f80; // 0x408453\n    while (v9 == 0) {\n        // 0x408443\n        v5 = v7;\n        v6 = *(int32_t *)v5;\n        v7 = v5 + 4;\n        v8 = v6 - 0x1010101 & (v6 ^ -0x7f7f7f80);\n        v9 = v8 & -0x7f7f7f80;\n    }\n    int64_t v10 = (v8 & 0x8080) == 0 ? v5 + 6 : v7; // 0x40846d\n    unsigned char v11 = (char)((v8 & 0x8080) == 0 ? v9 / 0x10000 : v9); // 0x408473\n    return v10 - v4 + (-1 - v11 < v11 ? 0xfffffffc : 0xfffffffd) & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "408579",
            "decompiledFuncCode": "int64_t function_4084b0(void) {\n    int64_t v1 = g179; // 0x4084b2\n    int64_t v2 = g176; // 0x4084c9\n    int64_t result = 0; // 0x4084c9\n    if (v1 != 0) {\n        int64_t v3 = *(int64_t *)v2; // 0x4084d0\n        v2 += 8;\n        free((int64_t *)*(int64_t *)v3);\n        free((int64_t *)*(int64_t *)(v3 + 8));\n        free((int64_t *)*(int64_t *)(v3 + 16));\n        result = &g209;\n        while (v2 != 8 * v1 + g176) {\n            // 0x4084d0\n            v3 = *(int64_t *)v2;\n            v2 += 8;\n            free((int64_t *)*(int64_t *)v3);\n            free((int64_t *)*(int64_t *)(v3 + 8));\n            free((int64_t *)*(int64_t *)(v3 + 16));\n            result = &g209;\n        }\n    }\n    // 0x4084f7\n    *(char *)&g178 = 0;\n    g179 = 0;\n    g168 = 0;\n    g166 = 0;\n    g164 = 0;\n    g163 = 0;\n    g160 = 0;\n    g159 = 0;\n    g158 = 0;\n    g161 = 0;\n    g157 = 0;\n    g156 = 0;\n    g155 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408580",
            "funcStartAddr": "408580",
            "funcEndAddr": "40929e",
            "decompiledFuncCode": "int64_t function_408580(int64_t str, int32_t a2, uint64_t a3, int64_t * str2) {\n    int128_t v1 = g179; // 0x40859d\n    int64_t v2 = v1; // 0x40859d\n    int64_t v3 = v2; // 0x40859d\n    int64_t v4 = g181; // 0x4085b2\n    int64_t v5 = v4; // 0x4085b2\n    int64_t v6 = v4; // 0x4085b9\n    int64_t v7 = v2; // 0x4085b9\n    if (g180 == v2) {\n        uint128_t v8 = 400 * (v1 & 0xffffffffffffffff); // 0x4085c3\n        if ((int64_t)v8 < 0 || v8 % 0x1ff0000000000000001 != 0) {\n            // 0x409299\n            function_412bd0(v4);\n            // UNREACHABLE\n        }\n        // 0x4085de\n        v6 = function_4129e0(v4, 400 * v2);\n        v7 = g179;\n        v3 = v7;\n        g180 *= 2;\n        g181 = v6;\n        v5 = v6;\n    }\n    int64_t v9 = 200 * v7 + v6; // 0x40860f\n    int64_t v10 = v9 + 8; // 0x408615\n    int64_t * v11 = (int64_t *)v9; // 0x40861c\n    *v11 = 0;\n    int64_t v12 = v9 + 188; // 0x408623\n    *(int64_t *)v12 = 0;\n    int64_t v13 = v10 & -8; // 0x40862e\n    int64_t v14 = v9 + 196;\n    __asm_rep_stosq_memset((char *)v13, 0, (v14 - v13) / 8 % 0x20000000);\n    v3 = 0;\n    int64_t * v15 = (int64_t *)(v9 + 32); // 0x408641\n    *v15 = 0;\n    int32_t * v16 = (int32_t *)(v9 + 168); // 0x408649\n    *v16 = a2;\n    int32_t * v17 = (int32_t *)v14; // 0x408657\n    *v17 = -1;\n    if (*(char *)&g178 == 0) {\n        // 0x408663\n        if (g177 != 0) {\n            int64_t v18 = function_404e20(str); // 0x408d17\n            *v17 = (int32_t)v18 % 256;\n            if ((char)v18 != 0) {\n                // 0x408d2d\n                *(char *)&g178 = 1;\n            }\n        }\n    }\n    char v19 = *(char *)&g141; // 0x408670\n    int64_t v20; // 0x408580\n    int64_t v21; // 0x408580\n    int64_t v22; // 0x408580\n    char v23; // 0x408580\n    if ((char)a3 == 0) {\n        if (v19 != 0) {\n            char v24 = *(char *)&v5; // 0x408b47\n            v22 = str;\n            if (v24 != 47) {\n                unsigned char v25 = *(char *)&v3; // 0x408c30\n                int64_t v26 = v25; // 0x408c30\n                v3 = v26;\n                v22 = str;\n                v20 = v26;\n                v23 = v24;\n                if (v25 == 0) {\n                    goto lab_0x408b5a;\n                } else {\n                    goto lab_0x408c43;\n                }\n            } else {\n                goto lab_0x408b5a;\n            }\n        } else {\n            // 0x408801\n            if (g121 != 0) {\n                goto lab_0x4088e8;\n            } else {\n                // 0x40880e\n                if (a2 != 3 || g142 == 0) {\n                    goto lab_0x408818;\n                } else {\n                    // 0x4091c5\n                    if ((char)function_404ae0(19) != 0) {\n                        goto lab_0x4088e8;\n                    } else {\n                        // 0x4091e6\n                        if ((char)function_404ae0(18) != 0) {\n                            goto lab_0x4088e8;\n                        } else {\n                            // 0x409200\n                            if ((char)function_404ae0(20) != 0) {\n                                goto lab_0x4088e8;\n                            } else {\n                                goto lab_0x408818;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        char v27 = *(char *)&v5; // 0x408688\n        v21 = str;\n        if (v27 == 47) {\n            goto lab_0x40869f;\n        } else {\n            unsigned char v28 = *(char *)&v3; // 0x408693\n            int64_t v29 = v28; // 0x408693\n            v3 = v29;\n            v21 = str;\n            v20 = v29;\n            v23 = v27;\n            if (v28 != 0) {\n                goto lab_0x408c43;\n            } else {\n                goto lab_0x40869f;\n            }\n        }\n    }\n  lab_0x40869f:;\n    int64_t v30 = v21; // 0x4086a2\n    v22 = v21;\n    if (v19 != 0) {\n        goto lab_0x408b5a;\n    } else {\n        goto lab_0x4086a8;\n    }\n  lab_0x408b5a:\n    // 0x408b5a\n    v5 = v22;\n    int64_t v31 = function_40b070(v22, 2); // 0x408b62\n    *(int64_t *)(v9 + 16) = v31;\n    v30 = v22;\n    if (v31 == 0) {\n        // 0x408b74\n        function_405580(a3 % 256, (int64_t)dcgettext(NULL, \"error canonicalizing %s\", 5), v22);\n        v30 = v22;\n    }\n    goto lab_0x4086a8;\n  lab_0x4088e8:;\n    char v134 = *(char *)&v5; // 0x4088ef\n    if (v134 == 47) {\n        goto lab_0x408903;\n    } else {\n        unsigned char v135 = *(char *)&v3; // 0x4088f7\n        int64_t v136 = v135; // 0x4088f7\n        v3 = v136;\n        v20 = v136;\n        v23 = v134;\n        if (v135 != 0) {\n            goto lab_0x408c43;\n        } else {\n            goto lab_0x408903;\n        }\n    }\n  lab_0x4086a8:;\n    int64_t v32 = g135; // 0x4086a8\n    v3 = v32;\n    int64_t v33 = v9 + 24; // 0x4086ae\n    int64_t v34 = v30; // 0x4086b5\n    int64_t v35 = v33; // 0x4086b5\n    int64_t v36; // 0x408580\n    int64_t v37; // 0x408580\n    int32_t v38; // 0x408bba\n    char * v39; // 0x4090da\n    if (g135 < 3) {\n        goto lab_0x408930;\n    } else {\n        if (g135 < 5) {\n            // 0x408ba0\n            v34 = v30;\n            v35 = v33;\n            if ((char)a3 == 0) {\n                goto lab_0x408930;\n            } else {\n                // 0x408ba9\n                v5 = 1;\n                v38 = __xstat(1, (char *)v30, (struct stat *)v33);\n                if (v32 % 256 == 3) {\n                    goto lab_0x408be7;\n                } else {\n                    if (v38 < 0) {\n                        int32_t v40 = *__errno_location(); // 0x4090c5\n                        v34 = v30;\n                        v35 = v33;\n                        if (v40 != 2) {\n                            // 0x4090ce\n                            v39 = dcgettext(NULL, \"cannot access %s\", 5);\n                            function_405580(1, (int64_t)v39, v30);\n                            // 0x4087df\n                            return 0;\n                        }\n                        goto lab_0x408930;\n                    } else {\n                        // 0x408bd2\n                        v34 = v30;\n                        v35 = v33;\n                        if ((*(int32_t *)(v9 + 48) & 0xf000) != 0x4000) {\n                            goto lab_0x408930;\n                        } else {\n                            goto lab_0x408be7;\n                        }\n                    }\n                }\n            }\n        } else {\n            // 0x4086c4\n            v36 = v30;\n            v37 = v33;\n            v34 = v30;\n            v35 = v33;\n            if (g135 != 5) {\n                goto lab_0x408930;\n            } else {\n                goto lab_0x4086cd;\n            }\n        }\n    }\n  lab_0x408c43:;\n    int64_t v41 = (int64_t)str2;\n    int32_t len = strlen((char *)str); // 0x408c5d\n    int32_t len2 = strlen((char *)str2); // 0x408c68\n    v3 = v20;\n    int64_t v42 = v41 + 1;\n    char v43 = *(char *)v42; // 0x408c74\n    int64_t v44; // bp-776, 0x408580\n    int64_t v45 = (int64_t)&v44 + 15 - ((int64_t)len + 25 + (int64_t)len2 & -16) & -16; // 0x408c99\n    v5 = v45;\n    int64_t v46 = v45; // 0x408ca3\n    if (v20 == 46 != (v43 == 0)) {\n        int64_t v47 = v45 | 1; // 0x408cbb\n        *(char *)v45 = (char)v20;\n        int64_t v48 = v41; // 0x408cc9\n        int64_t v49 = v47; // 0x408cc9\n        int64_t v50 = v42; // 0x408cc9\n        if (v43 != 0) {\n            v3 = v43;\n            char v51 = *(char *)(v41 + 2); // 0x408cb3\n            v5 = v47;\n            int64_t v52 = v47 + 1; // 0x408cbb\n            int64_t v53 = v42 + 1; // 0x408cbf\n            *(char *)v47 = v43;\n            int64_t v54 = v52; // 0x408cc9\n            char v55 = v51; // 0x408cc9\n            int64_t v56 = v42; // 0x408cc9\n            v48 = v42;\n            v49 = v52;\n            v50 = v53;\n            while (v51 != 0) {\n                int64_t v57 = v53;\n                v3 = v55;\n                v51 = *(char *)(v56 + 2);\n                v5 = v54;\n                v52 = v54 + 1;\n                v53 = v57 + 1;\n                *(char *)v54 = v55;\n                v54 = v52;\n                v55 = v51;\n                v56 = v57;\n                v48 = v57;\n                v49 = v52;\n                v50 = v53;\n            }\n        }\n        // 0x408ccb\n        v46 = v49;\n        if (v50 > v41) {\n            // 0x408cd0\n            v46 = v49;\n            if (*(char *)v48 != 47) {\n                // 0x408cd6\n                *(char *)v49 = 47;\n                v46 = v5 + 2;\n            }\n        }\n    }\n    int64_t v58 = v46; // 0x408cdf\n    if (v23 != 0) {\n        int64_t v59 = str + 1; // 0x408cf0\n        v3 = v59;\n        int64_t v60 = v46 + 1; // 0x408cf4\n        *(char *)v46 = v23;\n        char v61 = *(char *)v59; // 0x408cfb\n        v58 = v60;\n        if (v61 != 0) {\n            int64_t v62 = v3 + 1; // 0x408cf0\n            v3 = v62;\n            int64_t v63 = v60 + 1; // 0x408cf4\n            *(char *)v60 = v61;\n            char v64 = *(char *)v62; // 0x408cfb\n            int64_t v65 = v63; // 0x408d00\n            v58 = v63;\n            while (v64 != 0) {\n                // 0x408cf0\n                v62 = v3 + 1;\n                v3 = v62;\n                v63 = v65 + 1;\n                *(char *)v65 = v64;\n                v64 = *(char *)v62;\n                v65 = v63;\n                v58 = v63;\n            }\n        }\n    }\n    // 0x408d02\n    *(char *)v58 = 0;\n    v21 = v45;\n    goto lab_0x40869f;\n  lab_0x408903:;\n    int64_t v66 = v9 + 24; // 0x408909\n    v36 = str;\n    v37 = v66;\n    v34 = str;\n    v35 = v66;\n    if (g135 == 5) {\n        goto lab_0x4086cd;\n    } else {\n        goto lab_0x408930;\n    }\n  lab_0x408818:;\n    // 0x408818\n    int64_t result; // 0x408580\n    int64_t v67; // 0x408580\n    if (g136 != 0) {\n        // 0x409060\n        v67 = a2 == 0;\n        if (a2 != 6 == (a2 != 0)) {\n            goto lab_0x4088e8;\n        } else {\n            goto lab_0x409074;\n        }\n    } else {\n        // 0x408827\n        result = 0;\n        if (g120 == 0) {\n            goto lab_0x4087c8;\n        } else {\n            int64_t v68 = v3 & -256 | (int64_t)(a2 == 0); // 0x408837\n            v3 = v68;\n            v67 = v68 & 0xffffff01;\n            if (a2 == 6 || a2 == 0) {\n                goto lab_0x409074;\n            } else {\n                goto lab_0x40885b;\n            }\n        }\n    }\n  lab_0x408930:\n    // 0x408930\n    v5 = 1;\n    int32_t v69 = __lxstat(1, (char *)v34, (struct stat *)v35); // 0x40893b\n    int64_t str5 = v34; // 0x408942\n    int64_t v70 = v34; // 0x408942\n    if (v69 == 0) {\n        goto lab_0x4086e5;\n    } else {\n        goto lab_0x408948;\n    }\n  lab_0x4086cd:\n    // 0x4086cd\n    v5 = 1;\n    int32_t v71 = __xstat(1, (char *)v36, (struct stat *)v37); // 0x4086d8\n    str5 = v36;\n    v70 = v36;\n    if (v71 != 0) {\n        goto lab_0x408948;\n    } else {\n        goto lab_0x4086e5;\n    }\n  lab_0x4086e5:\n    // 0x4086e5\n    *(char *)(v9 + 184) = 1;\n    if (a2 == 5) {\n        goto lab_0x408af0;\n    } else {\n        // 0x4086f6\n        if ((*(int32_t *)(v9 + 48) & 0xf000) == 0x8000) {\n            goto lab_0x408af0;\n        } else {\n            goto lab_0x408709;\n        }\n    }\n  lab_0x408948:\n    // 0x408948\n    function_405580(a3 % 256, (int64_t)dcgettext(NULL, \"cannot access %s\", 5), v70);\n    result = 0;\n    if ((char)a3 != 0) {\n        // 0x4087df\n        return 0;\n    }\n    goto lab_0x4087c8;\n  lab_0x409074:\n    // 0x409074\n    if (g135 == 5) {\n        goto lab_0x4088e8;\n    } else {\n        // 0x409081\n        if (g174 != 0) {\n            goto lab_0x4088e8;\n        } else {\n            // 0x40908e\n            if ((g137 || g136) == 0) {\n                // 0x4090a3\n                result = 0;\n                if (g120 == 0) {\n                    goto lab_0x4087c8;\n                } else {\n                    // 0x4090ac\n                    if ((char)v67 != 0) {\n                        goto lab_0x4088e8;\n                    } else {\n                        goto lab_0x40885b;\n                    }\n                }\n            } else {\n                goto lab_0x4088e8;\n            }\n        }\n    }\n  lab_0x4087c8:;\n    int64_t v72 = function_412bb0(str); // 0x4087cf\n    g179 = (int64_t)g179 + 1;\n    *v11 = v72;\n    // 0x4087df\n    return result;\n  lab_0x408af0:\n    // 0x408af0\n    if (g142 != 0) {\n        // 0x408afd\n        if ((char)function_404ae0(21) != 0) {\n            int32_t * v73 = __errno_location(); // 0x408b0f\n            int64_t v74 = *(int64_t *)(v9 + 24); // 0x408b14\n            *v73 = 95;\n            if (v74 != g94) {\n                // 0x408b27\n                g94 = v74;\n            }\n            // 0x408b2e\n            *(char *)(v9 + 192) = 0;\n        }\n    }\n    goto lab_0x408709;\n  lab_0x40885b:\n    // 0x40885b\n    result = 0;\n    if (a2 != 5) {\n        goto lab_0x4087c8;\n    } else {\n        // 0x408868\n        if (g143 == 3) {\n            goto lab_0x4088e8;\n        } else {\n            // 0x408871\n            result = 0;\n            if (g142 == 0) {\n                goto lab_0x4087c8;\n            } else {\n                // 0x408885\n                if ((char)function_404ae0(14) != 0) {\n                    goto lab_0x4088e8;\n                } else {\n                    // 0x40889b\n                    if ((char)function_404ae0(16) != 0) {\n                        goto lab_0x4088e8;\n                    } else {\n                        // 0x4088b1\n                        if ((char)function_404ae0(17) != 0) {\n                            goto lab_0x4088e8;\n                        } else {\n                            // 0x4088c7\n                            result = 0;\n                            if ((char)function_404ae0(21) == 0) {\n                                goto lab_0x4087c8;\n                            } else {\n                                goto lab_0x4088e8;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x408709:;\n    // 0x408709\n    int64_t v75; // 0x408580\n    int64_t v76; // 0x408580\n    int64_t v77; // 0x408580\n    int64_t v78; // 0x408580\n    int32_t v79; // 0x408580\n    if (g154 != 0 == g169 == 0) {\n        goto lab_0x408765;\n    } else {\n        int32_t * v80 = __errno_location(); // 0x40871e\n        int64_t * v81 = (int64_t *)(v9 + 24); // 0x408723\n        int64_t v82 = *v81; // 0x408723\n        *v80 = 95;\n        if (v82 != g93) {\n            // 0x408739\n            g93 = v82;\n        }\n        // 0x408740\n        *(int64_t *)(v9 + 176) = (int64_t)&g72;\n        if (g154 == 0) {\n            // 0x408db0\n            if (v82 == g92) {\n                // 0x409270\n                *v80 = 95;\n                *(int32_t *)v12 = 0;\n                int32_t v83 = *(int32_t *)(v9 + 48) & 0xf000; // 0x409284\n                v79 = v83;\n                v76 = 0;\n                v78 = 0;\n                if (v83 != 0xa000) {\n                    goto lab_0x408778;\n                } else {\n                    goto lab_0x408e1d;\n                }\n            } else {\n                // 0x408dbd\n                *v80 = 0;\n                v5 = str5;\n                int32_t v84 = function_40b900(); // 0x408dd6\n                if (v84 < 1) {\n                    uint64_t v85 = (int64_t)v80; // 0x40871e\n                    int32_t v86 = *(int32_t *)(v85 % 256); // 0x409117\n                    if (v86 != 95 != (v86 - 22 & -17) != 0) {\n                        // 0x409127\n                        g92 = *v81;\n                    }\n                    // 0x409132\n                    *(int32_t *)v12 = 0;\n                    if (v84 < 0) {\n                        int64_t v87 = function_412110(0, 3, str5); // 0x409155\n                        error(0, *(int32_t *)(0x100000000000000 * v85 / 0x100000000000000), \"%s\", (char *)v87);\n                    }\n                } else {\n                    // 0x408dde\n                    *(int32_t *)v12 = 2;\n                    g168 = 1;\n                }\n                int32_t v88 = *(int32_t *)(v9 + 48) & 0xf000; // 0x408df3\n                v79 = v88;\n                v76 = 0;\n                if (v88 != 0xa000) {\n                    goto lab_0x408778;\n                } else {\n                    // 0x408e03\n                    v77 = 0;\n                    v78 = 0;\n                    if (g154 == 0) {\n                        goto lab_0x408e1d;\n                    } else {\n                        goto lab_0x408e10;\n                    }\n                }\n            }\n        } else {\n            // 0x40875b\n            *(int32_t *)v12 = 0;\n            v75 = g154;\n            goto lab_0x408765;\n        }\n    }\n  lab_0x408be7:\n    // 0x408be7\n    str5 = v30;\n    if (v38 != 0) {\n        // 0x4090ce\n        v39 = dcgettext(NULL, \"cannot access %s\", 5);\n        function_405580(1, (int64_t)v39, v30);\n        // 0x4087df\n        return 0;\n    }\n    goto lab_0x4086e5;\n  lab_0x408765:;\n    int32_t v89 = *(int32_t *)(v9 + 48) & 0xf000; // 0x408768\n    v79 = v89;\n    v76 = v75;\n    v77 = v75;\n    if (v89 == 0xa000) {\n        goto lab_0x408e10;\n    } else {\n        goto lab_0x408778;\n    }\n  lab_0x408e10:\n    // 0x408e10\n    v78 = v77;\n    int64_t v90 = v77; // 0x408e17\n    if (g137 == 0) {\n        goto lab_0x408ee4;\n    } else {\n        goto lab_0x408e1d;\n    }\n  lab_0x408778:;\n    // 0x408778\n    int64_t v91; // 0x408580\n    if (v79 == 0x4000) {\n        if ((char)a3 == 0) {\n            // 0x408f70\n            *v16 = 3;\n            v91 = v76;\n            goto lab_0x40878d;\n        } else {\n            // 0x408f55\n            if (g133 != 0) {\n                // 0x408f70\n                *v16 = 3;\n                v91 = v76;\n                goto lab_0x40878d;\n            } else {\n                // 0x408f5e\n                *v16 = 9;\n                v91 = v76;\n                goto lab_0x40878d;\n            }\n        }\n    } else {\n        // 0x408783\n        *v16 = 5;\n        v91 = v76;\n        goto lab_0x40878d;\n    }\n  lab_0x408ee4:\n    // 0x408ee4\n    *v16 = 6;\n    v91 = v90;\n    goto lab_0x40878d;\n  lab_0x408e1d:\n    // 0x408e1d\n    v5 = str5;\n    int64_t v132 = function_40abf0(str5, *(int64_t *)(v9 + 72)); // 0x408e24\n    int64_t * v112 = (int64_t *)v10; // 0x408e2c\n    *v112 = v132;\n    int64_t v94 = v132; // 0x408e33\n    int64_t v110; // 0x408580\n    if (v132 == 0) {\n        // 0x409180\n        function_405580(a3 % 256, (int64_t)dcgettext(NULL, \"cannot read symbolic link %s\", 5), str5);\n        int64_t v133 = *v112; // 0x4091a0\n        v94 = v133;\n        v110 = 0;\n        if (v133 != 0) {\n            goto lab_0x408e39;\n        } else {\n            goto lab_0x408ec9;\n        }\n    } else {\n        goto lab_0x408e39;\n    }\n  lab_0x40878d:;\n    int64_t v92 = v91;\n    int64_t v93 = *(int64_t *)(v9 + 88); // 0x408793\n    if (g154 == 0) {\n        goto lab_0x408980;\n    } else {\n        // 0x40879f\n        if (g148 != 0) {\n            goto lab_0x408980;\n        } else {\n            goto lab_0x4087ac;\n        }\n    }\n  lab_0x408e39:;\n    char * str3 = (char *)v94; // 0x408e39\n    int64_t v95; // 0x408580\n    if (*str3 == 47) {\n        // 0x409048\n        v95 = function_412bb0(v94);\n        goto lab_0x408ea0;\n    } else {\n        int64_t v96 = function_40b7b0(str5); // 0x408e46\n        if (v96 == 0) {\n            // 0x409048\n            v95 = function_412bb0(v94);\n            goto lab_0x408ea0;\n        } else {\n            int64_t v97 = 0x100000000000000 * v96 >> 56; // 0x408e63\n            int64_t str4 = function_412980(v97 + 2 + (int64_t)strlen(str3)); // 0x408e6f\n            char v98 = *(char *)(str5 - 1 + v97); // 0x408e7e\n            strcpy(stpncpy((char *)str4, (char *)str5, (int32_t)(v97 + (int64_t)(v98 != 47))), str3);\n            v95 = str4;\n            goto lab_0x408ea0;\n        }\n    }\n  lab_0x408980:;\n    int32_t v99 = *(int32_t *)&g147; // 0x408987\n    int64_t v100; // bp-712, 0x408580\n    int64_t v101 = function_40d5d0(v93, &v100, v99, 512, g146, v92); // 0x40899f\n    int32_t v102 = function_40eb70(v101, 0); // 0x4089b4\n    if (g164 < v102) {\n        // 0x4089b6\n        g164 = v102;\n    }\n    // 0x4089bc\n    int64_t v103; // 0x408580\n    int64_t v104; // 0x408580\n    int64_t v105; // 0x408580\n    uint32_t v106; // 0x408fc7\n    if (g154 != 0) {\n        goto lab_0x4087ac;\n    } else {\n        // 0x4089ca\n        if (g71 != 0) {\n            int32_t v107 = function_408410(*(int32_t *)(v9 + 52), 0); // 0x408f8e\n            if (g160 < v107) {\n                // 0x408f94\n                g160 = v107;\n            }\n        }\n        // 0x4089d7\n        v103 = 0;\n        if (g70 != 0) {\n            // 0x408fc0\n            v106 = *(int32_t *)(v9 + 56);\n            if (g149 == 0) {\n                int64_t v108 = function_40e2f0((int64_t)v106); // 0x409223\n                v5 = v108;\n                if (v108 == 0) {\n                    goto lab_0x408fd1;\n                } else {\n                    int64_t v109 = function_40eb70(v108, 0); // 0x409236\n                    v104 = 0;\n                    v105 = (int32_t)v109 < 0 ? 0 : v109 & 0xffffffff;\n                    goto lab_0x40902a;\n                }\n            } else {\n                goto lab_0x408fd1;\n            }\n        } else {\n            goto lab_0x4089e4;\n        }\n    }\n  lab_0x408ec9:\n    // 0x408ec9\n    free((int64_t *)v110);\n    int32_t v111 = *(int32_t *)(v9 + 48) & 0xf000; // 0x408ed4\n    v79 = v111;\n    v76 = v78;\n    v90 = v78;\n    if (v111 != 0xa000) {\n        goto lab_0x408778;\n    } else {\n        goto lab_0x408ee4;\n    }\n  lab_0x4087ac:\n    // 0x4087ac\n    if (g169 != 0) {\n        goto lab_0x4089fa;\n    } else {\n        goto lab_0x4087b9;\n    }\n  lab_0x408ea0:\n    // 0x408ea0\n    v110 = 0;\n    if (v95 == 0) {\n        goto lab_0x408ec9;\n    } else {\n        // 0x408ea9\n        if (*v17 == 0) {\n            // 0x409250\n            if ((char)function_404e20(*v112) != 0) {\n                // 0x409261\n                *v17 = -1;\n            }\n        }\n        // 0x408eb7\n        if (g143 < 2) {\n            // 0x408ec0\n            v110 = v95;\n            if (g137 != 0) {\n                goto lab_0x408ef8;\n            } else {\n                goto lab_0x408ec9;\n            }\n        } else {\n            goto lab_0x408ef8;\n        }\n    }\n  lab_0x4089fa:;\n    int32_t len3 = strlen((char *)*(int64_t *)(v9 + 176)); // 0x408a01\n    if (len3 > g161) {\n        // 0x408d40\n        g161 = len3;\n    }\n    goto lab_0x408a12;\n  lab_0x4087b9:\n    // 0x4087b9\n    result = v93;\n    if (g136 != 0) {\n        int32_t len7 = strlen((char *)function_40e520(*v15, &v100)); // 0x408c0b\n        result = v93;\n        if (len7 > g166) {\n            // 0x408c1c\n            g166 = len7;\n            result = v93;\n        }\n    }\n    goto lab_0x4087c8;\n  lab_0x4089e4:\n    // 0x4089e4\n    if (g150 != 0) {\n        int32_t v131 = function_408410(*(int32_t *)(v9 + 52), v103); // 0x408fae\n        if (g158 < v131) {\n            // 0x408fb4\n            g158 = v131;\n        }\n    }\n    // 0x4089f1\n    if (g169 == 0) {\n        goto lab_0x408a12;\n    } else {\n        goto lab_0x4089fa;\n    }\n  lab_0x408a12:\n    // 0x408a12\n    if (g154 != 0) {\n        goto lab_0x4087b9;\n    } else {\n        // 0x408a20\n        int64_t v113; // bp-744, 0x408580\n        int32_t len4 = strlen((char *)function_40e520(*(int64_t *)(v9 + 40), &v113)); // 0x408a33\n        if (len4 > g163) {\n            // 0x408a40\n            g163 = len4;\n        }\n        // 0x408a46\n        if ((*(int32_t *)(v9 + 48) & 0xb000) != 0x2000) {\n            int64_t v114 = function_40d5d0(*(int64_t *)(v9 + 72), &v100, g145, 1, g69, v92); // 0x408d6d\n            int32_t v115 = function_40eb70(v114, 0);\n            if (g155 < v115) {\n                // 0x408d88\n                g155 = v115;\n                goto lab_0x4087b9;\n            } else {\n                goto lab_0x4087b9;\n            }\n        } else {\n            int64_t * v116 = (int64_t *)(v9 + 64); // 0x408a59\n            uint64_t v117 = *v116; // 0x408a59\n            int64_t str6 = function_40e520(v117 / 0x100000000 & 0xfffff000 | v117 / 256 % 0x1000, &v100); // 0x408a85\n            int32_t len5 = strlen((char *)str6); // 0x408a8d\n            if (len5 > g157) {\n                // 0x408a9a\n                g157 = len5;\n            }\n            uint64_t v118 = *v116; // 0x408aa0\n            int64_t str7 = function_40e520(v118 / 0x1000 & 0xffffff00 | v118 % 256, &v100); // 0x408ab6\n            int32_t len6 = strlen((char *)str7); // 0x408abe\n            int32_t v119 = g156; // 0x408acb\n            if ((int64_t)len6 > (int64_t)g156) {\n                // 0x408acd\n                g156 = len6;\n                v119 = len6;\n            }\n            int32_t v120 = v119 + 2 + g157; // 0x408adb\n            if (v120 > g155) {\n                // 0x408d88\n                g155 = v120;\n                goto lab_0x4087b9;\n            } else {\n                goto lab_0x4087b9;\n            }\n        }\n    }\n  lab_0x408fd1:;\n    int64_t v121 = &v100; // 0x408995\n    __sprintf_chk((char *)&v100, 1, 21, \"%lu\", v106);\n    int64_t v122 = v121;\n    int32_t v123 = *(int32_t *)v122; // 0x408ff0\n    int64_t v124 = v122 + 4; // 0x408ff2\n    int32_t v125 = v123 - 0x1010101 & (v123 ^ -0x7f7f7f80); // 0x408ffe\n    uint32_t v126 = v125 & -0x7f7f7f80; // 0x409000\n    while (v126 == 0) {\n        // 0x408ff0\n        v122 = v124;\n        v123 = *(int32_t *)v122;\n        v124 = v122 + 4;\n        v125 = v123 - 0x1010101 & (v123 ^ -0x7f7f7f80);\n        v126 = v125 & -0x7f7f7f80;\n    }\n    int32_t v127 = (v125 & 0x8080) == 0 ? v126 / 0x10000 : v126; // 0x409013\n    int64_t v128 = (char)v127 == 0 ? 0xfffffffd : 0xfffffffc; // 0x409023\n    v104 = v127 & -0x7f7f8000;\n    v105 = ((v125 & 0x8080) == 0 ? v122 + 6 : v124) - v121 + v128 & 0xffffffff;\n    goto lab_0x40902a;\n  lab_0x408ef8:;\n    int32_t v129 = __xstat(1, (char *)v95, (struct stat *)&v100); // 0x408f07\n    v110 = v95;\n    if (v129 == 0) {\n        // 0x408f10\n        *(char *)(v9 + 185) = 1;\n        v110 = v95;\n        int32_t v130; // 0x408580\n        if ((v130 & 0xf000) == 0x4000 != ((char)a3 != 0 && g154 != 0)) {\n            // 0x408f40\n            v110 = v95;\n        }\n    }\n    goto lab_0x408ec9;\n  lab_0x40902a:\n    // 0x40902a\n    v103 = v104;\n    if (v105 > (int64_t)g159) {\n        // 0x409036\n        g159 = v105;\n        v103 = v104;\n    }\n    goto lab_0x4089e4;\n}\n"
        },
        {
            "funcName": "function_4092a0",
            "funcStartAddr": "4092a0",
            "funcEndAddr": "40995a",
            "decompiledFuncCode": "int64_t function_4092a0(int64_t a1, int64_t a2, unsigned char a3) {\n    int32_t * v1 = __errno_location(); // 0x4092bd\n    *v1 = 0;\n    char * name = (char *)a1; // 0x4092ce\n    struct __dirstream * dirp = opendir(name); // 0x4092ce\n    if (dirp == NULL) {\n        // 0x4093b6\n        return function_405580((int64_t)a3, (int64_t)dcgettext(NULL, \"cannot open directory %s\", 5), a1);\n    }\n    int64_t v2 = a2; // 0x4092e7\n    int64_t v3; // bp-712, 0x4092a0\n    if (g182 == 0) {\n        goto lab_0x409423;\n    } else {\n        int32_t v4 = dirfd(dirp); // 0x4092f0\n        if (v4 < 0) {\n            // 0x4095a8\n            if (__xstat(1, name, (struct stat *)&v3) > -1) {\n                goto lab_0x409319;\n            } else {\n                goto lab_0x4095c0;\n            }\n        } else {\n            // 0x409302\n            if (__fxstat(1, v4, (struct stat *)&v3) <= -1) {\n                goto lab_0x4095c0;\n            } else {\n                goto lab_0x409319;\n            }\n        }\n    }\n  lab_0x409768:;\n    // 0x409768\n    int64_t v5; // 0x4092a0\n    int64_t v6; // 0x4092a0\n    int64_t v7; // 0x4092a0\n    int64_t v8; // 0x40950b\n    int64_t v9; // 0x40951c\n    if (g130 != 0) {\n        int64_t v10 = g130;\n        int64_t v11 = function_4159a0(*(int64_t *)v10, v9, 4); // 0x409794\n        v7 = v6;\n        v5 = v9;\n        while ((int32_t)v11 != 0) {\n            int64_t v12 = *(int64_t *)(v10 + 8); // 0x409780\n            int64_t v13 = v12; // 0x409787\n            if (v12 == 0) {\n                goto lab_0x4097a8;\n            }\n            v10 = v13;\n            v11 = function_4159a0(*(int64_t *)v10, v9, 4);\n            v7 = v6;\n            v5 = v9;\n        }\n    } else {\n      lab_0x4097a8:;\n        int64_t v14 = (int64_t)*(char *)(v8 + 18) + 0xffffffff; // 0x4097ae\n        int64_t v15 = 0; // 0x4097b3\n        if ((char)v14 < 14) {\n            uint32_t v16 = *(int32_t *)((4 * v14 & 1020) + (int64_t)&g1); // 0x4097b8\n            v15 = v16;\n        }\n        int64_t v17 = v15;\n        int64_t v18 = function_408580(v9, (int32_t)v17, 0, (int64_t *)a1) + v6; // 0x4097cc\n        v7 = v18;\n        v5 = v17;\n        if (g154 == 1) {\n            // 0x4097de\n            v7 = v18;\n            v5 = v17;\n            if (g152 == -1) {\n                // 0x4097eb\n                v7 = v18;\n                v5 = v17;\n                if (g148 == 0) {\n                    // 0x4097f8\n                    v7 = v18;\n                    v5 = v17;\n                    if (g134 == 0) {\n                        // 0x409805\n                        function_404f40();\n                        function_407ca0(v9, v17);\n                        function_4084b0();\n                        v7 = v18;\n                        v5 = v17;\n                    }\n                }\n            }\n        }\n    }\n    goto lab_0x409580;\n  lab_0x409580:\n    // 0x409580\n    function_405d70();\n    int64_t v19 = v7; // 0x409585\n    int64_t v20 = v5; // 0x409585\n    goto lab_0x409500;\n  lab_0x409423:\n    // 0x409423\n    function_4084b0();\n    int64_t v31; // 0x4092a0\n    if ((g124 || g134) == 0) {\n        goto lab_0x4094e6;\n    } else {\n        // 0x409435\n        if (g51 == 0) {\n            int64_t v32 = (int64_t)g86; // 0x40943e\n            int64_t * v33 = (int64_t *)(v32 + 40); // 0x409445\n            uint64_t v34 = *v33; // 0x409445\n            if (v34 >= *(int64_t *)(v32 + 48)) {\n                // 0x409928\n                __overflow(g86, 10);\n            } else {\n                // 0x409453\n                *v33 = v34 + 1;\n                *(char *)v34 = 10;\n            }\n            // 0x40945e\n            g105++;\n        }\n        // 0x409466\n        g51 = 0;\n        if (g144 != 0) {\n            // 0x409890\n            fwrite_unlocked((int64_t *)\"  \", 1, 2, g86);\n            g105 += 2;\n            v31 = 0;\n            if (*(char *)&g141 == 0) {\n                goto lab_0x40948a;\n            } else {\n                goto lab_0x4098c3;\n            }\n        } else {\n            // 0x40947a\n            v31 = 0;\n            if (*(char *)&g141 != 0) {\n                goto lab_0x4098c3;\n            } else {\n                goto lab_0x40948a;\n            }\n        }\n    }\n  lab_0x4094e6:\n    // 0x4094e6\n    v19 = 0;\n    v20 = v2;\n    int64_t v23; // 0x4092a0\n    int64_t v24; // 0x4092a0\n    while (true) {\n      lab_0x409500:;\n        int64_t v21 = v20;\n        v6 = v19;\n        *v1 = 0;\n        struct dirent * v22 = readdir(dirp); // 0x40950b\n        if (v22 == NULL) {\n            // 0x4095f0\n            v23 = 0;\n            v24 = v21;\n            if (*v1 == 0) {\n                // break -> 0x409623\n                break;\n            }\n            int64_t v25 = (int64_t)dcgettext(NULL, \"reading directory %s\", 5);\n            function_405580((int64_t)a3 & 0xffffffff, v25, a1);\n            v7 = v6;\n            v5 = v25;\n            v23 = a1;\n            v24 = v25;\n            if (*v1 != 75) {\n                // break -> 0x409623\n                break;\n            }\n            goto lab_0x409580;\n        } else {\n            // 0x40951c\n            v8 = (int64_t)v22;\n            v9 = v8 + 19;\n            if (g131 == 2) {\n                goto lab_0x409768;\n            } else {\n                // 0x40952f\n                if (*(char *)v9 == 46) {\n                    // 0x409748\n                    v7 = v6;\n                    v5 = v21;\n                    if (g131 == 0) {\n                        goto lab_0x409580;\n                    } else {\n                        int64_t v26 = v8 + 20; // 0x409752\n                        v7 = v6;\n                        v5 = v21;\n                        if (*(char *)(v26 + (int64_t)(*(char *)v26 == 46)) == 0) {\n                            goto lab_0x409580;\n                        } else {\n                            goto lab_0x409768;\n                        }\n                    }\n                } else {\n                    if (g131 != 0) {\n                        goto lab_0x409768;\n                    } else {\n                        // 0x409541\n                        if (g129 != 0) {\n                            int64_t v27 = g129;\n                            int64_t v28 = function_4159a0(*(int64_t *)v27, v9, 4); // 0x409570\n                            v7 = v6;\n                            v5 = v9;\n                            while ((int32_t)v28 != 0) {\n                                int64_t v29 = *(int64_t *)(v27 + 8); // 0x409558\n                                int64_t v30 = v29; // 0x40955f\n                                if (v29 == 0) {\n                                    goto lab_0x409768;\n                                }\n                                v27 = v30;\n                                v28 = function_4159a0(*(int64_t *)v27, v9, 4);\n                                v7 = v6;\n                                v5 = v9;\n                            }\n                            goto lab_0x409580;\n                        } else {\n                            goto lab_0x409768;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int64_t v35 = v23; // 0x40962d\n    int64_t v36 = v24; // 0x40962d\n    int64_t v37 = (int64_t)dirp; // 0x40962d\n    if (closedir(dirp) != 0) {\n        int64_t v38 = (int64_t)dcgettext(NULL, \"closing directory %s\", 5); // 0x40983c\n        int64_t v39 = a3; // 0x409841\n        function_405580(v39, v38, a1);\n        v35 = a1;\n        v36 = v38;\n        v37 = v39;\n    }\n    // 0x409633\n    function_404f40();\n    int64_t v40 = v36; // 0x40963f\n    int64_t v41 = v37; // 0x40963f\n    if (g134 != 0) {\n        // 0x409820\n        function_405140((int32_t)a1, 0, v35);\n        v40 = 0;\n        v41 = a1;\n    }\n    int64_t v42 = g154; // 0x40964d\n    int64_t v43 = v40; // 0x40964d\n    int64_t v44 = v41; // 0x40964d\n    int64_t v45; // 0x4092a0\n    if (g154 != 0 != (g148 == 0)) {\n        // 0x40965c\n        if (g144 != 0) {\n            // 0x409860\n            fwrite_unlocked((int64_t *)\"  \", 1, 2, g86);\n            g105 += 2;\n        }\n        char * str = dcgettext(NULL, \"total\", 5); // 0x409675\n        fputs_unlocked(str, g86);\n        int64_t v46 = (int64_t)g86; // 0x409694\n        g105 += (int64_t)strlen(str);\n        int64_t * v47 = (int64_t *)(v46 + 40); // 0x4096a2\n        uint64_t v48 = *v47; // 0x4096a2\n        if (v48 >= *(int64_t *)(v46 + 48)) {\n            // 0x409937\n            __overflow(g86, 32);\n        } else {\n            // 0x4096b0\n            *v47 = v48 + 1;\n            *(char *)v48 = 32;\n        }\n        int32_t v49 = *(int32_t *)&g147; // 0x4096bb\n        g105++;\n        int64_t v50 = function_40d5d0(v6, &v3, v49, 512, g146, v45); // 0x4096df\n        char * str2 = (char *)v50; // 0x4096f1\n        fputs_unlocked(str2, g86);\n        int64_t v51 = (int64_t)g86; // 0x4096fe\n        g105 += (int64_t)strlen(str2);\n        int64_t * v52 = (int64_t *)(v51 + 40); // 0x40970c\n        uint64_t v53 = *v52; // 0x40970c\n        int64_t v54; // 0x4092a0\n        int64_t v55; // 0x4092a0\n        if (v53 >= *(int64_t *)(v51 + 48)) {\n            // 0x409946\n            v54 = __overflow(g86, 10);\n            v55 = 10;\n        } else {\n            // 0x40971a\n            *v52 = v53 + 1;\n            *(char *)v53 = 10;\n            v54 = v53;\n            v55 = (int64_t)g86;\n        }\n        // 0x409725\n        g105++;\n        v42 = v54;\n        v43 = v55;\n        v44 = v51;\n    }\n    int64_t result = v42; // 0x409735\n    if ((int64_t)g179 != 0) {\n        // 0x40973b\n        result = function_407ca0(v44, v43);\n    }\n    // 0x4093b6\n    return result;\n  lab_0x409319:;\n    // 0x409319\n    int32_t v56; // 0x4092a0\n    int64_t v57 = v56; // 0x409319\n    int64_t v58 = function_412980(16); // 0x409332\n    int64_t * v59 = (int64_t *)v58; // 0x40934e\n    *v59 = v57;\n    *(int64_t *)(v58 + 8) = v3;\n    int64_t v60 = function_40d220(g182, v58); // 0x409355\n    if (v60 == 0) {\n        // 0x409955\n        function_412bd0(g182);\n        // UNREACHABLE\n    }\n    if (v58 != v60) {\n        // 0x409368\n        free(v59);\n        function_412110(0, 3, a1);\n        error(0, (int32_t)\"%s: not listing already-listed directory\" ^ (int32_t)\"%s: not listing already-listed directory\", dcgettext(NULL, \"%s: not listing already-listed directory\", 5));\n        g108 = 2;\n        // 0x4093b6\n        return closedir(dirp);\n    }\n    uint64_t v61 = g102 - g101; // 0x4093e8\n    int64_t v62 = g101; // 0x4093ef\n    v2 = v58;\n    if (v61 < 16) {\n        // 0x4093f1\n        _obstack_newchunk((int64_t)&g99, 16, v61, v3);\n        v62 = g101;\n        v2 = 16;\n    }\n    // 0x409411\n    g101 = v62 + 16;\n    *(int64_t *)(v62 + 8) = v3;\n    *(int64_t *)v62 = v57;\n    goto lab_0x409423;\n  lab_0x4095c0:\n    // 0x4095c0\n    function_405580((int64_t)a3, (int64_t)dcgettext(NULL, \"cannot determine device and inode of %s\", 5), a1);\n    // 0x4093b6\n    return closedir(dirp);\n  lab_0x40948a:;\n    int64_t v63 = a2 == 0 ? a1 : a2; // 0x40949f\n    function_4062d0(v63, g126, -1, 0, 1, (int64_t)&g103, v31);\n    free((int64_t *)v31);\n    fwrite_unlocked((int64_t *)\":\\n\", 1, 2, g86);\n    g105 += 2;\n    v45 = &g103;\n    goto lab_0x4094e6;\n  lab_0x4098c3:;\n    int64_t v64 = function_40b070(a1, 2); // 0x4098cb\n    v31 = v64;\n    if (v64 == 0) {\n        // 0x4098dc\n        function_405580((int64_t)a3, (int64_t)dcgettext(NULL, \"error canonicalizing %s\", 5), a1);\n        v31 = v64;\n    }\n    goto lab_0x40948a;\n}\n"
        },
        {
            "funcName": "function_409960",
            "funcStartAddr": "409960",
            "funcEndAddr": "4099a6",
            "decompiledFuncCode": "int64_t function_409960(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x409960\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x409967\n    if (v2 > v1) {\n        // 0x409981\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x409970\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a1 + 136); // 0x409979\n        result = (int32_t)*(int64_t *)(a2 + 136) - v3;\n    }\n    // 0x409981\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099b0",
            "funcStartAddr": "4099b0",
            "funcEndAddr": "4099e6",
            "decompiledFuncCode": "int64_t function_4099b0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 112); // 0x4099b0\n    uint64_t v2 = *(int64_t *)(a1 + 112); // 0x4099b4\n    if (v2 > v1) {\n        // 0x4099c5\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x4099ba\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a1 + 120); // 0x4099c0\n        result = (int32_t)*(int64_t *)(a2 + 120) - v3;\n    }\n    // 0x4099c5\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099f0",
            "funcStartAddr": "4099f0",
            "funcEndAddr": "409a26",
            "decompiledFuncCode": "int64_t function_4099f0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 96); // 0x4099f0\n    uint64_t v2 = *(int64_t *)(a1 + 96); // 0x4099f4\n    if (v2 > v1) {\n        // 0x409a05\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x4099fa\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a1 + 104); // 0x409a00\n        result = (int32_t)*(int64_t *)(a2 + 104) - v3;\n    }\n    // 0x409a05\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a30",
            "funcStartAddr": "409a30",
            "funcEndAddr": "409a76",
            "decompiledFuncCode": "int64_t function_409a30(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 128); // 0x409a33\n    uint64_t v2 = *(int64_t *)(a2 + 128); // 0x409a3a\n    if (v2 > v1) {\n        // 0x409a54\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x409a43\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a2 + 136); // 0x409a4c\n        result = (int32_t)*(int64_t *)(a1 + 136) - v3;\n    }\n    // 0x409a54\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a80",
            "funcStartAddr": "409a80",
            "funcEndAddr": "409ab6",
            "decompiledFuncCode": "int64_t function_409a80(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 112); // 0x409a83\n    uint64_t v2 = *(int64_t *)(a2 + 112); // 0x409a87\n    if (v2 > v1) {\n        // 0x409a98\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x409a8d\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a2 + 120); // 0x409a93\n        result = (int32_t)*(int64_t *)(a1 + 120) - v3;\n    }\n    // 0x409a98\n    return result;\n}\n"
        },
        {
            "funcName": "function_409ac0",
            "funcStartAddr": "409ac0",
            "funcEndAddr": "409af6",
            "decompiledFuncCode": "int64_t function_409ac0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 96); // 0x409ac3\n    uint64_t v2 = *(int64_t *)(a2 + 96); // 0x409ac7\n    if (v2 > v1) {\n        // 0x409ad8\n        return 0xffffffff;\n    }\n    int64_t result = 1; // 0x409acd\n    if (v2 >= v1) {\n        int32_t v3 = *(int32_t *)(a2 + 104); // 0x409ad3\n        result = (int32_t)*(int64_t *)(a1 + 104) - v3;\n    }\n    // 0x409ad8\n    return result;\n}\n"
        },
        {
            "funcName": "function_409b00",
            "funcStartAddr": "409b00",
            "funcEndAddr": "409b76",
            "decompiledFuncCode": "int64_t function_409b00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409b00\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409b06\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409b2e\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409b3b\n            return 1;\n        }\n    } else {\n        // 0x409b2a\n        if (v1 == 3 || v1 == 9) {\n            // 0x409b3b\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a2 + 96); // 0x409b40\n    int64_t v5 = *(int64_t *)(a1 + 96); // 0x409b44\n    if (v5 > v4) {\n        // 0x409b3b\n        return 0xffffffff;\n    }\n    // 0x409b4a\n    if (v5 < v4) {\n        // 0x409b3b\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a1 + 104); // 0x409b50\n    return (int32_t)*(int64_t *)(a2 + 104) - v6;\n}\n"
        },
        {
            "funcName": "function_409b80",
            "funcStartAddr": "409b80",
            "funcEndAddr": "409bf6",
            "decompiledFuncCode": "int64_t function_409b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409b80\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409b86\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409bb1\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409bbe\n            return 1;\n        }\n    } else {\n        // 0x409bad\n        if (v1 == 3 || v1 == 9) {\n            // 0x409bbe\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 112); // 0x409bc0\n    int64_t v5 = *(int64_t *)(a2 + 112); // 0x409bc4\n    if (v5 > v4) {\n        // 0x409bbe\n        return 0xffffffff;\n    }\n    // 0x409bca\n    if (v5 < v4) {\n        // 0x409bbe\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a2 + 120); // 0x409bd0\n    return (int32_t)*(int64_t *)(a1 + 120) - v6;\n}\n"
        },
        {
            "funcName": "function_409c00",
            "funcStartAddr": "409c00",
            "funcEndAddr": "409c76",
            "decompiledFuncCode": "int64_t function_409c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409c00\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409c06\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409c31\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409c3e\n            return 1;\n        }\n    } else {\n        // 0x409c2d\n        if (v1 == 3 || v1 == 9) {\n            // 0x409c3e\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 96); // 0x409c40\n    int64_t v5 = *(int64_t *)(a2 + 96); // 0x409c44\n    if (v5 > v4) {\n        // 0x409c3e\n        return 0xffffffff;\n    }\n    // 0x409c4a\n    if (v5 < v4) {\n        // 0x409c3e\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a2 + 104); // 0x409c50\n    return (int32_t)*(int64_t *)(a1 + 104) - v6;\n}\n"
        },
        {
            "funcName": "function_409c80",
            "funcStartAddr": "409c80",
            "funcEndAddr": "409cf6",
            "decompiledFuncCode": "int64_t function_409c80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409c80\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409c86\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409cae\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409cbb\n            return 1;\n        }\n    } else {\n        // 0x409caa\n        if (v1 == 3 || v1 == 9) {\n            // 0x409cbb\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a2 + 112); // 0x409cc0\n    int64_t v5 = *(int64_t *)(a1 + 112); // 0x409cc4\n    if (v5 > v4) {\n        // 0x409cbb\n        return 0xffffffff;\n    }\n    // 0x409cca\n    if (v5 < v4) {\n        // 0x409cbb\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a1 + 120); // 0x409cd0\n    return (int32_t)*(int64_t *)(a2 + 120) - v6;\n}\n"
        },
        {
            "funcName": "function_409d00",
            "funcStartAddr": "409d00",
            "funcEndAddr": "409d86",
            "decompiledFuncCode": "int64_t function_409d00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409d00\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409d06\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409d31\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409d3e\n            return 1;\n        }\n    } else {\n        // 0x409d2d\n        if (v1 == 3 || v1 == 9) {\n            // 0x409d3e\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 128); // 0x409d40\n    int64_t v5 = *(int64_t *)(a2 + 128); // 0x409d47\n    if (v5 > v4) {\n        // 0x409d3e\n        return 0xffffffff;\n    }\n    // 0x409d50\n    if (v5 < v4) {\n        // 0x409d3e\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a2 + 136); // 0x409d59\n    return (int32_t)*(int64_t *)(a1 + 136) - v6;\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409e16",
            "decompiledFuncCode": "int64_t function_409d90(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x409d90\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x409d96\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x409dbe\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x409dcb\n            return 1;\n        }\n    } else {\n        // 0x409dba\n        if (v1 == 3 || v1 == 9) {\n            // 0x409dcb\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a2 + 128); // 0x409dd0\n    int64_t v5 = *(int64_t *)(a1 + 128); // 0x409dd7\n    if (v5 > v4) {\n        // 0x409dcb\n        return 0xffffffff;\n    }\n    // 0x409de0\n    if (v5 < v4) {\n        // 0x409dcb\n        return 1;\n    }\n    int32_t v6 = *(int32_t *)(a1 + 136); // 0x409de9\n    return (int32_t)*(int64_t *)(a2 + 136) - v6;\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e56",
            "decompiledFuncCode": "int64_t function_409e20(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 96); // 0x409e23\n    int64_t v2 = *(int64_t *)(a2 + 96); // 0x409e27\n    if (v2 > v1) {\n        // 0x409e4d\n        return 0xffffffff;\n    }\n    // 0x409e2d\n    if (v2 < v1) {\n        // 0x409e4d\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 104) - *(int32_t *)(a2 + 104); // 0x409e33\n    if (result != 0) {\n        // 0x409e4d\n        return result;\n    }\n    char * str = (char *)a1; // 0x409e3e\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_409e60",
            "funcStartAddr": "409e60",
            "funcEndAddr": "409ea6",
            "decompiledFuncCode": "int64_t function_409e60(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 128); // 0x409e63\n    int64_t v2 = *(int64_t *)(a2 + 128); // 0x409e6a\n    if (v2 > v1) {\n        // 0x409e95\n        return 0xffffffff;\n    }\n    // 0x409e73\n    if (v2 < v1) {\n        // 0x409e95\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 136) - *(int32_t *)(a2 + 136); // 0x409e7c\n    if (result != 0) {\n        // 0x409e95\n        return result;\n    }\n    char * str = (char *)a1; // 0x409e8a\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_409eb0",
            "funcStartAddr": "409eb0",
            "funcEndAddr": "409ee6",
            "decompiledFuncCode": "int64_t function_409eb0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 112); // 0x409eb3\n    int64_t v2 = *(int64_t *)(a2 + 112); // 0x409eb7\n    if (v2 > v1) {\n        // 0x409edd\n        return 0xffffffff;\n    }\n    // 0x409ebd\n    if (v2 < v1) {\n        // 0x409edd\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 120) - *(int32_t *)(a2 + 120); // 0x409ec3\n    if (result != 0) {\n        // 0x409edd\n        return result;\n    }\n    char * str = (char *)a1; // 0x409ece\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_409ef0",
            "funcStartAddr": "409ef0",
            "funcEndAddr": "409f26",
            "decompiledFuncCode": "int64_t function_409ef0(int64_t str, int64_t str2) {\n    int64_t v1 = *(int64_t *)(str2 + 96); // 0x409ef0\n    int64_t v2 = *(int64_t *)(str + 96); // 0x409ef4\n    if (v2 > v1) {\n        // 0x409f15\n        return 0xffffffff;\n    }\n    // 0x409efa\n    if (v2 < v1) {\n        // 0x409f15\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 104) - *(int32_t *)(str + 104); // 0x409f00\n    if (result != 0) {\n        // 0x409f15\n        return result;\n    }\n    // 0x409f05\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409f76",
            "decompiledFuncCode": "int64_t function_409f30(int64_t str, int64_t str2) {\n    int64_t v1 = *(int64_t *)(str2 + 128); // 0x409f30\n    int64_t v2 = *(int64_t *)(str + 128); // 0x409f37\n    if (v2 > v1) {\n        // 0x409f65\n        return 0xffffffff;\n    }\n    // 0x409f40\n    if (v2 < v1) {\n        // 0x409f65\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 136) - *(int32_t *)(str + 136); // 0x409f49\n    if (result != 0) {\n        // 0x409f65\n        return result;\n    }\n    // 0x409f51\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409fb6",
            "decompiledFuncCode": "int64_t function_409f80(int64_t str, int64_t str2) {\n    int64_t v1 = *(int64_t *)(str2 + 112); // 0x409f80\n    int64_t v2 = *(int64_t *)(str + 112); // 0x409f84\n    if (v2 > v1) {\n        // 0x409fa5\n        return 0xffffffff;\n    }\n    // 0x409f8a\n    if (v2 < v1) {\n        // 0x409fa5\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(str2 + 120) - *(int32_t *)(str + 120); // 0x409f90\n    if (result != 0) {\n        // 0x409fa5\n        return result;\n    }\n    // 0x409f95\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_409fc0",
            "funcStartAddr": "409fc0",
            "funcEndAddr": "40a025",
            "decompiledFuncCode": "int64_t function_409fc0(int64_t str, int64_t a2) {\n    // 0x409fc0\n    strrchr((char *)str, 46);\n    char * found_char_pos = strrchr((char *)46, 46); // 0x409fe3\n    return found_char_pos == NULL ? (int64_t)&g24 : (int64_t)found_char_pos;\n}\n"
        },
        {
            "funcName": "function_40a030",
            "funcStartAddr": "40a030",
            "funcEndAddr": "40a095",
            "decompiledFuncCode": "int64_t function_40a030(int64_t a1, int64_t a2) {\n    // 0x40a030\n    strrchr((char *)46, 46);\n    char * found_char_pos = strrchr((char *)46, 46); // 0x40a054\n    return found_char_pos == NULL ? (int64_t)&g24 : (int64_t)found_char_pos;\n}\n"
        },
        {
            "funcName": "function_40a0a0",
            "funcStartAddr": "40a0a0",
            "funcEndAddr": "40a146",
            "decompiledFuncCode": "int64_t function_40a0a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x40a0a0\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a0a6\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a0ce\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a0db\n            return 1;\n        }\n    } else {\n        // 0x40a0ca\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a0db\n            return 0xffffffff;\n        }\n    }\n    // 0x40a0e0\n    strrchr((char *)46, 46);\n    char * found_char_pos = strrchr((char *)46, 46); // 0x40a103\n    return found_char_pos == NULL ? (int64_t)&g24 : (int64_t)found_char_pos;\n}\n"
        },
        {
            "funcName": "function_40a150",
            "funcStartAddr": "40a150",
            "funcEndAddr": "40a1f6",
            "decompiledFuncCode": "int64_t function_40a150(int64_t str, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(str + 168); // 0x40a150\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a156\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a17e\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a18b\n            return 1;\n        }\n    } else {\n        // 0x40a17a\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a18b\n            return 0xffffffff;\n        }\n    }\n    // 0x40a190\n    strrchr((char *)str, 46);\n    char * found_char_pos = strrchr((char *)46, 46); // 0x40a1b3\n    return found_char_pos == NULL ? (int64_t)&g24 : (int64_t)found_char_pos;\n}\n"
        },
        {
            "funcName": "function_40a200",
            "funcStartAddr": "40a200",
            "funcEndAddr": "40a276",
            "decompiledFuncCode": "int64_t function_40a200(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x40a200\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a206\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a231\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a23e\n            return 1;\n        }\n    } else {\n        // 0x40a22d\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a23e\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 112); // 0x40a240\n    int64_t v5 = *(int64_t *)(a2 + 112); // 0x40a244\n    if (v5 > v4) {\n        // 0x40a23e\n        return 0xffffffff;\n    }\n    // 0x40a24a\n    if (v5 < v4) {\n        // 0x40a23e\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 120) - *(int32_t *)(a2 + 120); // 0x40a250\n    if (result != 0) {\n        // 0x40a23e\n        return result;\n    }\n    char * str = (char *)a1; // 0x40a25c\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_40a280",
            "funcStartAddr": "40a280",
            "funcEndAddr": "40a306",
            "decompiledFuncCode": "int64_t function_40a280(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x40a280\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a286\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a2b1\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a2be\n            return 1;\n        }\n    } else {\n        // 0x40a2ad\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a2be\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 128); // 0x40a2c0\n    int64_t v5 = *(int64_t *)(a2 + 128); // 0x40a2c7\n    if (v5 > v4) {\n        // 0x40a2be\n        return 0xffffffff;\n    }\n    // 0x40a2d0\n    if (v5 < v4) {\n        // 0x40a2be\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 136) - *(int32_t *)(a2 + 136); // 0x40a2d9\n    if (result != 0) {\n        // 0x40a2be\n        return result;\n    }\n    char * str = (char *)a1; // 0x40a2e8\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_40a310",
            "funcStartAddr": "40a310",
            "funcEndAddr": "40a386",
            "decompiledFuncCode": "int64_t function_40a310(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x40a310\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a316\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a341\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a34e\n            return 1;\n        }\n    } else {\n        // 0x40a33d\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a34e\n            return 0xffffffff;\n        }\n    }\n    int64_t v4 = *(int64_t *)(a1 + 96); // 0x40a350\n    int64_t v5 = *(int64_t *)(a2 + 96); // 0x40a354\n    if (v5 > v4) {\n        // 0x40a34e\n        return 0xffffffff;\n    }\n    // 0x40a35a\n    if (v5 < v4) {\n        // 0x40a34e\n        return 1;\n    }\n    uint32_t result = (int32_t)*(int64_t *)(a1 + 104) - *(int32_t *)(a2 + 104); // 0x40a360\n    if (result != 0) {\n        // 0x40a34e\n        return result;\n    }\n    char * str = (char *)a1; // 0x40a36c\n    return strcmp(str, str);\n}\n"
        },
        {
            "funcName": "function_40a390",
            "funcStartAddr": "40a390",
            "funcEndAddr": "40a3f9",
            "decompiledFuncCode": "int64_t function_40a390(int64_t a1, int64_t a2) {\n    char * str = (char *)a2; // 0x40a3a2\n    char * found_char_pos = strrchr(str, 46); // 0x40a3a2\n    int64_t v1 = (int64_t)found_char_pos; // 0x40a3a2\n    char * found_char_pos2 = strrchr(str, 46); // 0x40a3b6\n    int64_t str3; // 0x40a390\n    int64_t str2; // 0x40a390\n    if (found_char_pos2 == NULL) {\n        // 0x40a3e0\n        str3 = (int64_t)&g24;\n        str2 = v1;\n        if (found_char_pos == NULL) {\n            // 0x40a3ea\n            return strcmp(str, str);\n        }\n    } else {\n        // 0x40a3c0\n        str3 = (int64_t)found_char_pos2;\n        str2 = found_char_pos == NULL ? (int64_t)&g24 : v1;\n    }\n    int32_t strcmp_rc = strcmp((char *)str2, (char *)str3); // 0x40a3d2\n    if (strcmp_rc == 0) {\n        // 0x40a3ea\n        return strcmp(str, str);\n    }\n    // 0x40a3db\n    return strcmp_rc;\n}\n"
        },
        {
            "funcName": "function_40a400",
            "funcStartAddr": "40a400",
            "funcEndAddr": "40a469",
            "decompiledFuncCode": "int64_t function_40a400(int64_t a1, int64_t a2) {\n    char * str = (char *)a1; // 0x40a412\n    char * found_char_pos = strrchr(str, 46); // 0x40a412\n    int64_t v1 = (int64_t)found_char_pos; // 0x40a412\n    char * found_char_pos2 = strrchr((char *)46, 46); // 0x40a426\n    int64_t str3; // 0x40a400\n    int64_t str2; // 0x40a400\n    if (found_char_pos2 == NULL) {\n        // 0x40a450\n        str3 = (int64_t)&g24;\n        str2 = v1;\n        if (found_char_pos == NULL) {\n            // 0x40a45a\n            return strcmp(str, (char *)46);\n        }\n    } else {\n        // 0x40a430\n        str3 = (int64_t)found_char_pos2;\n        str2 = found_char_pos == NULL ? (int64_t)&g24 : v1;\n    }\n    int32_t strcmp_rc = strcmp((char *)str2, (char *)str3); // 0x40a442\n    if (strcmp_rc == 0) {\n        // 0x40a45a\n        return strcmp(str, (char *)46);\n    }\n    // 0x40a44b\n    return strcmp_rc;\n}\n"
        },
        {
            "funcName": "function_40a470",
            "funcStartAddr": "40a470",
            "funcEndAddr": "40a526",
            "decompiledFuncCode": "int64_t function_40a470(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t v1 = *(int32_t *)(a1 + 168); // 0x40a470\n    int32_t v2 = *(int32_t *)(a2 + 168); // 0x40a476\n    bool v3 = v2 == 9 | v2 == 3;\n    if (v3) {\n        // 0x40a4a2\n        if ((v1 != 3 && v1 != 9) == v3) {\n            // 0x40a4af\n            return 1;\n        }\n    } else {\n        // 0x40a49a\n        if (v1 == 3 || v1 == 9) {\n            // 0x40a4af\n            return 0xffffffff;\n        }\n    }\n    char * str = (char *)a1; // 0x40a4c2\n    char * found_char_pos = strrchr(str, 46); // 0x40a4c2\n    int64_t v4 = (int64_t)found_char_pos; // 0x40a4c2\n    char * found_char_pos2 = strrchr((char *)46, 46); // 0x40a4d5\n    int64_t str3; // 0x40a470\n    int64_t str2; // 0x40a470\n    if (found_char_pos2 == NULL) {\n        // 0x40a500\n        str3 = (int64_t)&g24;\n        str2 = v4;\n        if (found_char_pos == NULL) {\n            // 0x40a50a\n            return strcmp(str, (char *)46);\n        }\n    } else {\n        // 0x40a4df\n        str3 = (int64_t)found_char_pos2;\n        str2 = found_char_pos == NULL ? (int64_t)&g24 : v4;\n    }\n    int32_t strcmp_rc = strcmp((char *)str2, (char *)str3); // 0x40a4f1\n    if (strcmp_rc == 0) {\n        // 0x40a50a\n        return strcmp(str, (char *)46);\n    }\n    // 0x40a4fa\n    return strcmp_rc;\n}\n"
        },
        {
            "funcName": "function_40a530",
            "funcStartAddr": "40a530",
            "funcEndAddr": "40abe9",
            "decompiledFuncCode": "int64_t function_40a530(int32_t status) {\n    if (status != 0) {\n        // 0x40a54b\n        __fprintf_chk(g88, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40a570\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x40a578\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"List information about the FILEs (the current directory by default).\\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -a, --all                  do not ignore entries starting with .\\n  -A, --almost-all           do not list implied . and ..\\n      --author               with -l, print the author of each file\\n  -b, --escape               print C-style escapes for nongraphic characters\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\\n                               e.g., '--block-size=M'; see SIZE format below\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -B, --ignore-backups       do not list implied entries ending with ~\\n  -c                         with -lt: sort by, and show, ctime (time of last\\n                               modification of file status information);\\n                               with -l: show ctime and sort by name;\\n                               otherwise: sort by ctime, newest first\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -C                         list entries by columns\\n      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\\n                               if omitted), 'auto', or 'never'; more info below\\n  -d, --directory            list directories themselves, not their contents\\n  -D, --dired                generate output designed for Emacs' dired mode\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -f                         do not sort, enable -aU, disable -ls --color\\n  -F, --classify             append indicator (one of */=>@|) to entries\\n      --file-type            likewise, except do not append '*'\\n      --format=WORD          across -x, commas -m, horizontal -x, long -l,\\n                               single-column -1, verbose -l, vertical -C\\n      --full-time            like -l --time-style=full-iso\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -g                         like -l, but do not list owner\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --group-directories-first\\n                             group directories before files;\\n                               can be augmented with a --sort option, but any\\n                               use of --sort=none (-U) disables grouping\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -G, --no-group             in a long listing, don't print group names\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\\n      --si                   likewise, but use powers of 1000 not 1024\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -H, --dereference-command-line\\n                             follow symbolic links listed on the command line\\n      --dereference-command-line-symlink-to-dir\\n                             follow each command line symbolic link\\n                               that points to a directory\\n      --hide=PATTERN         do not list implied entries matching shell PATTERN\\n                               (overridden by -a or -A)\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\\n                               (default if omitted), 'auto', or 'never'\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --indicator-style=WORD  append indicator with style WORD to entry names:\\n                               none (default), slash (-p),\\n                               file-type (--file-type), classify (-F)\\n  -i, --inode                print the index number of each file\\n  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -k, --kibibytes            default to 1024-byte blocks for disk usage;\\n                               used only with -s and per directory totals\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -l                         use a long listing format\\n  -L, --dereference          when showing file information for a symbolic\\n                               link, show information for the file the link\\n                               references rather than for the link itself\\n  -m                         fill width with a comma separated list of entries\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\\n  -N, --literal              print entry names without quoting\\n  -o                         like -l, but do not list group information\\n  -p, --indicator-style=slash\\n                             append / indicator to directories\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -q, --hide-control-chars   print ? instead of nongraphic characters\\n      --show-control-chars   show nongraphic characters as-is (the default,\\n                               unless program is 'ls' and output is a terminal)\\n  -Q, --quote-name           enclose entry names in double quotes\\n      --quoting-style=WORD   use quoting style WORD for entry names:\\n                               literal, locale, shell, shell-always,\\n                               shell-escape, shell-escape-always, c, escape\\n                               (overrides QUOTING_STYLE environment variable)\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -r, --reverse              reverse order while sorting\\n  -R, --recursive            list subdirectories recursively\\n  -s, --size                 print the allocated size of each file, in blocks\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -S                         sort by file size, largest first\\n      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\\n                               time (-t), version (-v), extension (-X)\\n      --time=WORD            with -l, show time as WORD instead of default\\n                               modification time: atime or access or use (-u);\\n                               ctime or status (-c); also use specified time\\n                               as sort key if --sort=time (newest first)\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --time-style=TIME_STYLE  time/date format with -l; see TIME_STYLE below\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -t                         sort by modification time, newest first\\n  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -u                         with -lt: sort by, and show, access time;\\n                               with -l: show access time and sort by name;\\n                               otherwise: sort by access time, newest first\\n  -U                         do not sort; list entries in directory order\\n  -v                         natural sort of (version) numbers within text\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"  -w, --width=COLS           set output width to COLS.  0 means no limit\\n  -x                         list entries by lines instead of by columns\\n  -X                         sort alphabetically by entry extension\\n  -Z, --context              print any security context of each file\\n  -1                         list one file per line.  Avoid '\\\\n' with -q or -b\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\\nFORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newline>FORMAT2,\\nthen FORMAT1 applies to non-recent files and FORMAT2 to recent files.\\nTIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\\nAlso the TIME_STYLE environment variable sets the default style to use.\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"\\nUsing color to distinguish file types is disabled both by default and\\nwith --color=never.  With --color=auto, ls emits color codes only when\\nstandard output is connected to a terminal.  The LS_COLORS environment\\nvariable can change the settings.  Use the dircolors command to set it.\\n\", 5), g86);\n    fputs_unlocked(dcgettext(NULL, \"\\nExit status:\\n 0  if OK,\\n 1  if minor problems (e.g., cannot access subdirectory),\\n 2  if serious trouble (e.g., cannot access command-line argument).\\n\", 5), g86);\n    int64_t str = (int64_t)\"ls\"; // 0x40a9b9\n    if (g73 != 1) {\n        // 0x40a9bf\n        str = g73 != 2 ? (int64_t)\"vdir\" : (int64_t)\"dir\";\n    }\n    char * v1 = (char *)&g27; // bp-136, 0x40a9d0\n    int64_t v2 = (int64_t)&v1; // 0x40aa55\n    int64_t str2 = (int64_t)&g27; // 0x40aa55\n    int64_t v3 = v2; // 0x40aa76\n    while (strcmp((char *)str, (char *)str2) != 0) {\n        // 0x40aa60\n        v2 += 16;\n        str2 = *(int64_t *)v2;\n        v3 = v2;\n        if (str2 == 0) {\n            // break -> 0x40aa78\n            break;\n        }\n        v3 = v2;\n    }\n    // 0x40aa78\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v3 + 8) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40abb4;\n        } else {\n            // 0x40ab9e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40ab47\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40aad6;\n            } else {\n                goto lab_0x40abb4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40aad6;\n        } else {\n            // 0x40aac0\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40ab47\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40aad6;\n            } else {\n                goto lab_0x40aad6;\n            }\n        }\n    }\n  lab_0x40abb4:\n    // 0x40abb4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40ab0f\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40a570\n    exit(status);\n    // UNREACHABLE\n  lab_0x40aad6:\n    // 0x40aad6\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40ab0f\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40a570\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40abf0",
            "funcStartAddr": "40abf0",
            "funcEndAddr": "40acdf",
            "decompiledFuncCode": "int64_t function_40abf0(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x40ac29\n    int64_t * mem = malloc((int32_t)size); // 0x40ac33\n    int64_t result = 0; // 0x40ac3e\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x40ac49\n        if (v1 < 0) {\n            // 0x40aca8\n            if (*__errno_location() != 34) {\n                // 0x40acb2\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x40ac49\n        int64_t v3; // 0x40abf0\n        if (buf_size > v2) {\n            // 0x40acc0\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x40ac5b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x40ac68\n            int64_t * mem2 = malloc((int32_t)size2); // 0x40ac6e\n            if (mem2 == NULL) {\n                // 0x40ac7b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x40aca8\n                if (*__errno_location() != 34) {\n                    // 0x40acb2\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x40ac56\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x40acc0\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x40ac5b\n            free(buf);\n        }\n        // 0x40ac90\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x40acd0\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x40ac7b_2:\n    // 0x40ac7b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ace0",
            "funcStartAddr": "40ace0",
            "funcEndAddr": "40acea",
            "decompiledFuncCode": "int64_t function_40ace0(void) {\n    // 0x40ace0\n    return function_40a530(1);\n}\n"
        },
        {
            "funcName": "function_40acf0",
            "funcStartAddr": "40acf0",
            "funcEndAddr": "40ae06",
            "decompiledFuncCode": "int64_t function_40acf0(int64_t a1, char ** a2, int64_t * a3, int64_t n) {\n    char * str = (char *)a1; // 0x40ad11\n    int32_t len = strlen(str); // 0x40ad11\n    if (a2 == NULL) {\n        // 0x40addd\n        return -1;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = -1;\n    int64_t * str3 = (int64_t *)(v3 * n + v1);\n    int32_t v4 = 0;\n    int64_t v5 = 0; // 0x40ad77\n    int64_t v6 = v1; // 0x40acf0\n    int64_t v7 = v2; // 0x40ad7e\n    int64_t str4; // 0x40acf0\n    int64_t v8; // 0x40acf0\n    int32_t v9; // 0x40acf0\n    int32_t v10; // 0x40acf0\n    int32_t v11; // 0x40acf0\n    int64_t v12; // 0x40acf0\n    int64_t result; // 0x40acf0\n    int32_t v13; // 0x40ad73\n    char * str2; // 0x40ad92\n    while (true) {\n        // 0x40ad87\n        str4 = v6;\n        v8 = v5;\n        v10 = v4;\n        str2 = (char *)v7;\n        v9 = v10;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40ad9b\n            result = v8;\n            if (len == strlen(str2)) {\n                // 0x40addd\n                return result;\n            }\n            if (v3 == -1) {\n                // break -> 0x40adaf\n                break;\n            }\n            // 0x40ad40\n            v9 = 1;\n            if (a3 != NULL) {\n                // 0x40ad4e\n                v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                v9 = v13;\n            }\n        }\n        // 0x40ad77\n        v4 = v9;\n        v5 = v8 + 1;\n        v7 = *(int64_t *)(8 * v5 + v2);\n        v6 = str4 + n;\n        v12 = v3;\n        v11 = v4;\n        if (v7 == 0) {\n            return (char)v11 == 0 ? v12 : -2;\n        }\n    }\n    int64_t v14 = v8 + 1; // 0x40adb3\n    int64_t v15 = *(int64_t *)(8 * v14 + v2); // 0x40adba\n    v12 = v8;\n    v11 = v10;\n    while (v15 != 0) {\n        // 0x40ad87\n        v3 = v8;\n        str3 = (int64_t *)(v3 * n + v1);\n        v4 = v10;\n        v5 = v14;\n        v6 = str4 + n;\n        v7 = v15;\n        while (true) {\n            // 0x40ad87\n            str4 = v6;\n            v8 = v5;\n            v10 = v4;\n            str2 = (char *)v7;\n            v9 = v10;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40ad9b\n                result = v8;\n                if (len == strlen(str2)) {\n                    // 0x40addd\n                    return result;\n                }\n                if (v3 == -1) {\n                    // break -> 0x40adaf\n                    break;\n                }\n                // 0x40ad40\n                v9 = 1;\n                if (a3 != NULL) {\n                    // 0x40ad4e\n                    v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                    v9 = v13;\n                }\n            }\n            // 0x40ad77\n            v4 = v9;\n            v5 = v8 + 1;\n            v7 = *(int64_t *)(8 * v5 + v2);\n            v6 = str4 + n;\n            v12 = v3;\n            v11 = v4;\n            if (v7 == 0) {\n                return (char)v11 == 0 ? v12 : -2;\n            }\n        }\n        // 0x40adaf\n        v14 = v8 + 1;\n        v15 = *(int64_t *)(8 * v14 + v2);\n        v12 = v8;\n        v11 = v10;\n    }\n  lab_0x40adc8:\n    // 0x40addd\n    return (char)v11 == 0 ? v12 : -2;\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40ae81",
            "decompiledFuncCode": "int64_t function_40ae10(char * a1, int64_t a2, int64_t a3) {\n    char * format; // 0x40ae10\n    if (a3 == -1) {\n        // 0x40ae70\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x40ae25\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x40ae34\n    function_412270(1, (int64_t)a1);\n    function_411f60(0, 8, a2);\n    error(0, 0, format);\n    return &g209;\n}\n"
        },
        {
            "funcName": "function_40ae90",
            "funcStartAddr": "40ae90",
            "funcEndAddr": "40afa8",
            "decompiledFuncCode": "int64_t function_40ae90(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40aebd\n    fputs_unlocked(v1, g88);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x40af30\n        int64_t v5; // 0x40af37\n        int64_t v6; // 0x40af57\n        while (v3 != 0) {\n            // 0x40af1b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x40aee0\n                break;\n            }\n            // 0x40af2d\n            v4 = v3 + 1;\n            v5 = function_412290(v2);\n            __fprintf_chk(g88, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x40af60\n                goto lab_0x40af60;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x40aee3\n        int64_t v8 = function_412290(v2); // 0x40aeed\n        __fprintf_chk(g88, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40af0d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40af1b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x40aee0\n                    break;\n                }\n                // 0x40af2d\n                v4 = v3 + 1;\n                v5 = function_412290(v2);\n                __fprintf_chk(g88, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x40af60\n                    goto lab_0x40af60;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x40aee0\n            v7 = v3 + 1;\n            v8 = function_412290(v2);\n            __fprintf_chk(g88, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x40af60:;\n    int64_t v10 = (int64_t)g88; // 0x40af60\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x40af67\n    uint64_t result = *v11; // 0x40af67\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x40af90\n        return __overflow(g88, 10);\n    }\n    // 0x40af71\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40afb0",
            "funcStartAddr": "40afb0",
            "funcEndAddr": "40b020",
            "decompiledFuncCode": "int64_t function_40afb0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_40acf0(a2, a3, a4, a5); // 0x40afdc\n    int64_t result = v1; // 0x40afe4\n    if (v1 < 0) {\n        // 0x40aff8\n        function_40ae10(a1, a2, v1);\n        function_40ae90((int64_t)a3, (int64_t)a4, a5);\n        result = -1;\n    }\n    // 0x40afe6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b020",
            "funcStartAddr": "40b020",
            "funcEndAddr": "40b06d",
            "decompiledFuncCode": "int64_t function_40b020(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40b020\n    if (result == 0) {\n        // 0x40b061\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40b058\n    int32_t n = a4; // 0x40b058\n    int64_t v1 = result; // 0x40b05f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40b061\n        return result;\n    }\n    int64_t str3 = str2; // 0x40b05f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40b040\n    int64_t result2 = 0; // 0x40b04d\n    while (v2 != 0) {\n        // 0x40b04f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40b061\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40b061\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b070",
            "funcStartAddr": "40b070",
            "funcEndAddr": "40b6e3",
            "decompiledFuncCode": "int64_t function_40b070(int64_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    uint32_t v2 = (int32_t)a2;\n    uint32_t v3 = v2 % 4; // 0x40b089\n    if (a1 == 0 || (v2 + 3 & v3) != 0) {\n        // 0x40b520\n        *__errno_location() = 22;\n        // 0x40b36e\n        return 0;\n    }\n    int64_t v4; // 0x40b070\n    int64_t v5; // 0x40b070\n    int64_t v6; // 0x40b070\n    switch ((char)a1) {\n        case 0: {\n            // 0x40b5e1\n            *__errno_location() = 2;\n            // 0x40b36e\n            return 0;\n        }\n        case 47: {\n            int64_t v7 = function_412980(0x1000); // 0x40b235\n            *(char *)v7 = 47;\n            v6 = v7 + 1;\n            v5 = v7 + 0x1000;\n            v4 = v7;\n            // break -> 0x40b0e5\n            break;\n        }\n        default: {\n            int64_t str = function_412d10(a1, a2); // 0x40b0b7\n            if (str == 0) {\n                // 0x40b36e\n                return 0;\n            }\n            int32_t len = strlen((char *)str); // 0x40b0cb\n            int64_t v8 = len; // 0x40b0cb\n            if (len < 0x1000) {\n                int64_t v9 = function_4129e0(str, 0x1000); // 0x40b5fc\n                v6 = v9 + v8;\n                v5 = v9 + 0x1000;\n                v4 = v9;\n            } else {\n                int64_t v10 = str + v8; // 0x40b0df\n                v6 = v10;\n                v5 = v10;\n                v4 = str;\n            }\n            // break -> 0x40b0e5\n            break;\n        }\n    }\n    int64_t v11 = a1; // 0x40b112\n    int64_t v12 = 0; // 0x40b112\n    int64_t v13 = 0; // 0x40b112\n    int64_t v14 = 0; // 0x40b112\n    char * v15 = (char *)&v1; // 0x40b112\n    int64_t v16 = v6; // 0x40b112\n    int64_t v17 = v5; // 0x40b112\n    int64_t v18 = v4; // 0x40b112\n    int64_t v19 = a1; // 0x40b112\n    int64_t v20; // 0x40b070\n    int64_t v21; // 0x40b070\n    int64_t v22; // 0x40b070\n    int64_t v23; // 0x40b070\n    char * v24; // 0x40b070\n    int64_t v25; // 0x40b070\n    int64_t v26; // 0x40b070\n    int64_t v27; // 0x40b070\n    int64_t v28; // 0x40b070\n    int64_t v29; // 0x40b070\n    int64_t v30; // 0x40b070\n    int64_t v31; // 0x40b070\n    int64_t v32; // 0x40b070\n    int64_t v33; // 0x40b070\n    int32_t * v34; // 0x40b070\n    int32_t * v35; // 0x40b070\n    int32_t v36; // 0x40b070\n    int32_t v37; // 0x40b070\n    int32_t v38; // 0x40b070\n    int64_t v39; // 0x40b070\n    int64_t v40; // 0x40b070\n    int64_t v41; // 0x40b070\n    int64_t v42; // 0x40b070\n    int64_t v43; // 0x40b070\n    int64_t v44; // 0x40b070\n    int64_t v45; // 0x40b070\n    uint64_t v46; // 0x40b070\n    int64_t v47; // 0x40b153\n    char * str3; // 0x40b070\n    int64_t v48; // 0x40b153\n    char * v49; // 0x40b070\n    int64_t v50; // 0x40b3e4\n    char * str2; // 0x40b3f8\n    int32_t len2; // 0x40b3f8\n    int64_t v51; // 0x40b3f8\n    int32_t len3; // 0x40b403\n    while (true) {\n      lab_0x40b118_4:\n        // 0x40b118\n        v37 = v36;\n        v40 = v14;\n        int64_t v52 = v13;\n        int64_t v53 = v11;\n        int16_t v54 = (int16_t)v37 & -0x1000;\n        v42 = v12;\n        v24 = v15;\n        v27 = v16;\n        v22 = v19;\n        int32_t v55; // 0x40b070\n        while (true) {\n          lab_0x40b118_3:\n            // 0x40b118\n            v21 = v18;\n            v26 = v17;\n            v43 = v42;\n            v46 = v21 + 1;\n            v25 = (int64_t)*v24;\n            v29 = v27;\n            v23 = v22;\n            int64_t v56; // 0x40b070\n            int64_t v57; // 0x40b170\n            while (true) {\n              lab_0x40b118_2:\n                // 0x40b118\n                v30 = v29;\n                if (v25 == 0) {\n                    // break (via goto) -> 0x40b320\n                    goto lab_0x40b320_3;\n                }\n                int64_t v58 = v23; // 0x40b124\n                int64_t v59 = v25; // 0x40b124\n                int64_t v60 = v23; // 0x40b124\n                int64_t v61; // 0x40b130\n                unsigned char v62; // 0x40b134\n                if (v25 == 47) {\n                    v61 = v58 + 1;\n                    v62 = *(char *)v61;\n                    v58 = v61;\n                    while (v62 == 47) {\n                        // 0x40b130\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                    }\n                    // 0x40b13d\n                    v59 = v62;\n                    v60 = v61;\n                    if (v62 == 0) {\n                        // break (via goto) -> 0x40b320\n                        goto lab_0x40b320_3;\n                    }\n                }\n                // 0x40b145\n                v56 = v60;\n                int64_t v63 = v59;\n                v47 = v56 + 1;\n                str3 = (char *)v47;\n                unsigned char v64 = *str3; // 0x40b153\n                int64_t v65 = v47; // 0x40b15e\n                while (v64 != 0 == (v64 != 47)) {\n                    // 0x40b153\n                    v47 = v65 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                }\n                if (v47 == v56) {\n                    // break (via goto) -> 0x40b320\n                    goto lab_0x40b320_3;\n                }\n                // 0x40b16d\n                v48 = v64;\n                v57 = v47 - v56;\n                while (v57 != 1) {\n                    if (v57 == 2 != ((char)v63 == 46)) {\n                        // break (via goto) -> 0x40b18c\n                        goto lab_0x40b18c_2;\n                    }\n                    // 0x40b4e0\n                    if (*(char *)(v56 + 1) != 46) {\n                        // break (via goto) -> 0x40b18c\n                        goto lab_0x40b18c_2;\n                    }\n                    int64_t v66 = v48; // 0x40b4f6\n                    int64_t v67 = v47; // 0x40b4f6\n                    if (v30 > v46) {\n                        int64_t v68 = v30 - 1; // 0x40b4fc\n                        v28 = v68;\n                        if (v21 >= v68) {\n                            goto lab_0x40b118;\n                        } else {\n                            int64_t v69 = v30 - 2; // 0x40b505\n                            v28 = v68;\n                            if (*(char *)v69 != 47) {\n                                // 0x40b643\n                                v28 = v21;\n                                v31 = v69;\n                                if (v21 == v69) {\n                                    goto lab_0x40b118;\n                                } else {\n                                    goto lab_0x40b650;\n                                }\n                            } else {\n                                goto lab_0x40b118;\n                            }\n                        }\n                    }\n                    if (v66 == 0) {\n                        // break (via goto) -> 0x40b320\n                        goto lab_0x40b320_3;\n                    }\n                    // 0x40b120\n                    v58 = v67;\n                    v59 = v66;\n                    v60 = v67;\n                    if (v66 == 47) {\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                        while (v62 == 47) {\n                            // 0x40b130\n                            v61 = v58 + 1;\n                            v62 = *(char *)v61;\n                            v58 = v61;\n                        }\n                        // 0x40b13d\n                        v59 = v62;\n                        v60 = v61;\n                        if (v62 == 0) {\n                            // break (via goto) -> 0x40b320\n                            goto lab_0x40b320_3;\n                        }\n                    }\n                    // 0x40b145\n                    v56 = v60;\n                    v63 = v59;\n                    v47 = v56 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                    while (v64 != 0 == (v64 != 47)) {\n                        // 0x40b153\n                        v47 = v65 + 1;\n                        str3 = (char *)v47;\n                        v64 = *str3;\n                        v65 = v47;\n                    }\n                    if (v47 == v56) {\n                        // break (via goto) -> 0x40b320\n                        goto lab_0x40b320_3;\n                    }\n                    // 0x40b16d\n                    v48 = v64;\n                    v57 = v47 - v56;\n                }\n                // 0x40b308\n                v28 = v30;\n                if ((char)v63 != 46) {\n                    // break -> 0x40b18c\n                    break;\n                }\n                goto lab_0x40b118;\n            }\n          lab_0x40b18c_2:;\n            int64_t v70 = v30; // 0x40b190\n            if (*(char *)(v30 - 1) != 47) {\n                // 0x40b192\n                *(char *)v30 = 47;\n                v70 = v30 + 1;\n            }\n            int64_t v71 = v70;\n            int64_t v72 = v71 + v57;\n            int64_t v73 = v72; // 0x40b1a0\n            int64_t v74 = v71; // 0x40b1a0\n            v17 = v26;\n            int64_t v75 = v21; // 0x40b1a0\n            if (v26 <= v72) {\n                int64_t v76 = v57 < 0x1000 == (4095 - v57 & v57) < 0 ? v57 + 1 : 0x1000;\n                int64_t v77 = v76 + v26 - v21; // 0x40b1c3\n                v75 = function_4129e0(v21, v77);\n                v74 = v75 + v71 - v21;\n                v73 = v74 + v57;\n                v17 = v75 + v77;\n            }\n            // 0x40b1dd\n            v18 = v75;\n            v20 = v73;\n            memcpy((int64_t *)v74, (int64_t *)v56, (int32_t)v57);\n            *(char *)v20 = 0;\n            v55 = 0;\n            if ((a2 & 4) != 0 && v3 == 2) {\n                // break -> 0x40b213\n                break;\n            }\n            // 0x40b250\n            v1 = 1;\n            v49 = (char *)v18;\n            int64_t v78; // bp-200, 0x40b070\n            int32_t v79; // 0x40b070\n            if ((a2 & 4) == 0) {\n                // 0x40b388\n                v79 = __lxstat(1, v49, (struct stat *)&v78);\n            } else {\n                // 0x40b269\n                v79 = __xstat(1, v49, (struct stat *)&v78);\n            }\n            // 0x40b273\n            if (v79 == 0) {\n                // 0x40b2e0\n                v55 = v37;\n                v15 = str3;\n                v11 = v53;\n                v12 = v43;\n                v13 = v52;\n                v14 = v40;\n                v38 = v37;\n                v16 = v20;\n                v19 = v47;\n                switch (v54) {\n                    case -0x6000: {\n                        int64_t v80 = v43; // 0x40b3a6\n                        if (v43 == 0) {\n                            // 0x40b533\n                            v1 = 7;\n                            v80 = function_40ca80(7, 0, 0x40d440, 0x40d4b0, 0x40d4f0);\n                            if (v80 == 0) {\n                                // 0x40b55d\n                                function_412bd0(7);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x40b3ac\n                        v45 = v80;\n                        int64_t v81 = function_40b9a0(v45, v53, &v78); // 0x40b3bb\n                        if ((char)v81 != 0) {\n                            // 0x40b479\n                            v44 = v45;\n                            if (v3 != 2) {\n                                // 0x40b484\n                                v32 = 40;\n                                v34 = __errno_location();\n                                goto lab_0x40b491_2;\n                            }\n                        } else {\n                            // 0x40b3c8\n                            function_40b910(v45, v53, &v78);\n                            int64_t v82; // 0x40b070\n                            v50 = function_40abf0(v18, v82);\n                            if (v50 != 0) {\n                                // 0x40b3f5\n                                str2 = (char *)v50;\n                                len2 = strlen(str2);\n                                v51 = len2;\n                                len3 = strlen(str3);\n                                uint64_t v83 = v51 + 1 + (int64_t)len3; // 0x40b411\n                                if (v52 == 0) {\n                                    int64_t v84 = v83 >= 0x1000 ? v83 : 0x1000; // 0x40b5c1\n                                    int64_t v85 = function_412980(v84); // 0x40b5cd\n                                    v39 = v84;\n                                    v41 = v85;\n                                    goto lab_0x40b427;\n                                } else {\n                                    // 0x40b41c\n                                    v39 = v52;\n                                    v41 = v40;\n                                    if (v83 > v52) {\n                                        int64_t v86 = function_4129e0(v40, v83); // 0x40b682\n                                        v39 = v83;\n                                        v41 = v86;\n                                        goto lab_0x40b427;\n                                    } else {\n                                        goto lab_0x40b427;\n                                    }\n                                }\n                            }\n                            int32_t * v87 = __errno_location(); // 0x40b613\n                            uint32_t v88 = *v87; // 0x40b620\n                            v44 = v45;\n                            if (v3 == 2 != v88 != 12) {\n                                // 0x40b491\n                                v32 = v88;\n                                v34 = v87;\n                                goto lab_0x40b491_2;\n                            }\n                        }\n                        goto lab_0x40b2c9;\n                    }\n                    case 0x4000: {\n                        goto lab_0x40b224;\n                    }\n                    default: {\n                        goto lab_0x40b213;\n                    }\n                }\n            } else {\n                int32_t * v89 = __errno_location(); // 0x40b277\n                uint32_t v90 = *v89; // 0x40b27f\n                if (v3 == 0) {\n                    // 0x40b575\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x40b575_3;\n                }\n                // 0x40b28d\n                v55 = 0;\n                if (v3 != 1) {\n                    // break -> 0x40b213\n                    break;\n                }\n                char v91 = *(char *)(v47 + (int64_t)strspn(str3, \"/\")); // 0x40b2b5\n                v44 = v43;\n                if (v90 == 2 != (v91 == 0)) {\n                    // 0x40b575\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x40b575_3;\n                }\n                goto lab_0x40b2c9;\n            }\n        }\n      lab_0x40b213:\n        // 0x40b213\n        v15 = str3;\n        v11 = v53;\n        v12 = v43;\n        v13 = v52;\n        v14 = v40;\n        v38 = v55;\n        v16 = v20;\n        v19 = v47;\n        if (v3 != 2 == (*str3 != 0)) {\n            // 0x40b568\n            v33 = 20;\n            v35 = __errno_location();\n            goto lab_0x40b575_3;\n        }\n        goto lab_0x40b224;\n    }\n  lab_0x40b320_3:;\n    char * v92; // 0x40b070\n    int64_t v93; // 0x40b070\n    int64_t v94; // 0x40b070\n    if (v30 > v46) {\n        int64_t v95 = v30 - 1; // 0x40b32a\n        char * v96 = (char *)v95;\n        v92 = v96;\n        v93 = v30;\n        v94 = v95;\n        if (*v96 == 47) {\n            goto lab_0x40b338;\n        } else {\n            goto lab_0x40b334;\n        }\n    } else {\n        goto lab_0x40b334;\n    }\n  lab_0x40b118:\n    // 0x40b118\n    v25 = v48;\n    v29 = v28;\n    v23 = v47;\n    goto lab_0x40b118_2;\n  lab_0x40b224:\n    // 0x40b224\n    v36 = v38;\n    goto lab_0x40b118_4;\n  lab_0x40b2c9:\n    // 0x40b2c9\n    v42 = v44;\n    v24 = str3;\n    v27 = v20;\n    v22 = v47;\n    goto lab_0x40b118_3;\n  lab_0x40b334:\n    // 0x40b334\n    v92 = (char *)v30;\n    v93 = v30 + 1;\n    v94 = v30;\n    goto lab_0x40b338;\n  lab_0x40b338:\n    // 0x40b338\n    *v92 = 0;\n    int64_t v97 = v21; // 0x40b33e\n    if (v26 != v93) {\n        // 0x40b340\n        v97 = function_4129e0(v21, 1 - v21 + v94);\n    }\n    // 0x40b352\n    free((int64_t *)v40);\n    int64_t result = v97; // 0x40b364\n    if (v43 != 0) {\n        // 0x40b366\n        function_40ccc0(v43);\n        result = v97;\n    }\n  lab_0x40b36e:\n    // 0x40b36e\n    return result;\n  lab_0x40b650:;\n    int64_t v98 = v31 - 1; // 0x40b650\n    v28 = v31;\n    if (*(char *)v98 == 47) {\n        goto lab_0x40b118;\n    } else {\n        // 0x40b65a\n        v28 = v98;\n        v31 = v98;\n        if (v21 != v98) {\n            goto lab_0x40b650;\n        } else {\n            goto lab_0x40b118;\n        }\n    }\n  lab_0x40b575_3:\n    // 0x40b575\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    int64_t v99 = v43; // 0x40b59f\n    int64_t v100 = v33; // 0x40b59f\n    int32_t * v101 = v35; // 0x40b59f\n    if (v43 == 0) {\n        goto lab_0x40b4d1;\n    } else {\n        goto lab_0x40b4b5;\n    }\n  lab_0x40b4d1:\n    // 0x40b4d1\n    *v101 = (int32_t)(v100 & 0xffffffff);\n    result = 0;\n    goto lab_0x40b36e;\n  lab_0x40b4b5:\n    // 0x40b4b5\n    function_40ccc0(v99);\n    goto lab_0x40b4d1;\n  lab_0x40b491_2:\n    // 0x40b491\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    v99 = v45;\n    v100 = v32;\n    v101 = v34;\n    goto lab_0x40b4b5;\n  lab_0x40b427:\n    // 0x40b427\n    memmove((int64_t *)(v41 + v51), (int64_t *)v47, len3 + 1);\n    int64_t * v102 = (int64_t *)v50; // 0x40b447\n    int64_t * dest_mem = memcpy((int64_t *)v41, v102, len2); // 0x40b447\n    int64_t v103 = v18 + 1; // 0x40b450\n    int64_t v104; // 0x40b070\n    int64_t v105; // 0x40b070\n    if (*str2 == 47) {\n        // 0x40b636\n        *v49 = 47;\n        v104 = v103;\n        goto lab_0x40b46c;\n    } else {\n        // 0x40b463\n        v104 = v20;\n        if (v20 > v103) {\n            int64_t v106 = v20 - 1; // 0x40b6ac\n            v104 = v106;\n            if (v18 >= v106) {\n                goto lab_0x40b46c;\n            } else {\n                // 0x40b6b5\n                v104 = v106;\n                v105 = v106;\n                if (*(char *)(v20 - 2) == 47) {\n                    goto lab_0x40b46c;\n                } else {\n                    goto lab_0x40b6c2;\n                }\n            }\n        } else {\n            goto lab_0x40b46c;\n        }\n    }\n  lab_0x40b46c:;\n    int64_t v107 = (int64_t)dest_mem; // 0x40b447\n    free(v102);\n    v15 = (char *)dest_mem;\n    v11 = v107;\n    v12 = v45;\n    v13 = v39;\n    v14 = v41;\n    v38 = v37;\n    v16 = v104;\n    v19 = v107;\n    goto lab_0x40b224;\n  lab_0x40b6c2:;\n    int64_t v108 = v105;\n    int64_t v109 = v108 - 1; // 0x40b6c2\n    v104 = v18;\n    if (v18 == v109) {\n        goto lab_0x40b46c;\n    } else {\n        // 0x40b6cf\n        v104 = v109;\n        v105 = v109;\n        if (*(char *)(v108 - 2) == 47) {\n            goto lab_0x40b46c;\n        } else {\n            goto lab_0x40b6c2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_40b6f0",
            "funcStartAddr": "40b6f0",
            "funcEndAddr": "40b6f8",
            "decompiledFuncCode": "int64_t function_40b6f0(int64_t a1) {\n    // 0x40b6f0\n    g184 = a1;\n    int64_t result; // 0x40b6f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b700",
            "funcStartAddr": "40b700",
            "funcEndAddr": "40b708",
            "decompiledFuncCode": "int64_t function_40b700(int64_t a1) {\n    // 0x40b700\n    g183 = a1;\n    int64_t result; // 0x40b700\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b710",
            "funcStartAddr": "40b710",
            "funcEndAddr": "40b7ae",
            "decompiledFuncCode": "int64_t function_40b710(void) {\n    // 0x40b710\n    int32_t * err_num; // 0x40b726\n    if ((int32_t)function_4178e0((int64_t)g86) == 0) {\n        goto lab_0x40b73c;\n    } else {\n        // 0x40b726\n        err_num = __errno_location();\n        if (g183 == 0) {\n            goto lab_0x40b753;\n        } else {\n            // 0x40b737\n            if (*err_num != 32) {\n                goto lab_0x40b753;\n            } else {\n                goto lab_0x40b73c;\n            }\n        }\n    }\n  lab_0x40b73c:;\n    int64_t result = function_4178e0((int64_t)g88); // 0x40b743\n    if ((int32_t)result == 0) {\n        // 0x40b74c\n        return result;\n    }\n    // 0x40b78e\n    _exit(g76);\n    // UNREACHABLE\n  lab_0x40b753:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40b75f\n    if (g184 == 0) {\n        // 0x40b799\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x40b773\n        error(0, *err_num, \"%s: %s\", (char *)function_4120e0((int64_t)g184), v1);\n    }\n    // 0x40b78e\n    _exit(g76);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b7b0",
            "funcStartAddr": "40b7b0",
            "funcEndAddr": "40b80d",
            "decompiledFuncCode": "int64_t function_40b7b0(int64_t a1) {\n    // 0x40b7b0\n    int64_t v1; // 0x40b7b0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40b7be\n    int64_t v3 = function_40b870(a1, v1); // 0x40b7c2\n    int64_t result = v3 - a1; // 0x40b7ca\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x40b7f3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x40b7e0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x40b7f3\n            break;\n        }\n        result2--;\n    }\n    // 0x40b7f3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b810",
            "funcStartAddr": "40b810",
            "funcEndAddr": "40b86a",
            "decompiledFuncCode": "int64_t function_40b810(int64_t a1) {\n    int64_t v1 = function_40b7b0(a1); // 0x40b819\n    int64_t * mem = malloc((int32_t)(v1 + 1 + (int64_t)(v1 == 0))); // 0x40b82f\n    if (mem == NULL) {\n        // 0x40b856\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v1); // 0x40b845\n    int64_t v2 = v1; // 0x40b850\n    if (v1 == 0) {\n        // 0x40b860\n        *(char *)dest_mem = 46;\n        v2 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x40b845\n    *(char *)(v2 + result) = 0;\n    // 0x40b856\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b870",
            "funcStartAddr": "40b870",
            "funcEndAddr": "40b8cb",
            "decompiledFuncCode": "int64_t function_40b870(int64_t a1, int64_t a2) {\n    // 0x40b870\n    int64_t v1; // 0x40b870\n    char v2 = v1;\n    int64_t v3 = a1; // 0x40b879\n    int64_t v4 = a1; // 0x40b879\n    char v5 = v2; // 0x40b879\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x40b884\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x40b880\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40b88e\n    if (v5 == 0) {\n      lab_0x40b8ca:\n        // 0x40b8ca\n        return result;\n    }\n    int64_t v7 = v4; // 0x40b8b8\n    int64_t v8 = 0; // 0x40b8b8\n    int64_t v9; // 0x40b870\n    int64_t v10; // 0x40b8ba\n    char v11; // 0x40b8be\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x40b8b5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40b8ba\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40b8b5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40b8aa\n    char v14 = *(char *)v13; // 0x40b8ae\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40b8b5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40b8ba\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x40b8b5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x40b8a0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40b8ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b8d0",
            "funcStartAddr": "40b8d0",
            "funcEndAddr": "40b8fb",
            "decompiledFuncCode": "int64_t function_40b8d0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x40b8d4\n    int64_t result = len; // 0x40b8d4\n    if (len < 2) {\n        // 0x40b8ea\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x40b8e8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x40b8f0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40b8ea\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40b8ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b900",
            "funcStartAddr": "40b900",
            "funcEndAddr": "40b903",
            "decompiledFuncCode": "int64_t function_40b900(void) {\n    // 0x40b900\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b910",
            "funcStartAddr": "40b910",
            "funcEndAddr": "40b996",
            "decompiledFuncCode": "int64_t function_40b910(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x40b980\n        int64_t result; // 0x40b910\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t result2 = function_412980(24); // 0x40b92d\n    *(int64_t *)result2 = function_412bb0(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(v1 + 8);\n    *(int64_t *)(result2 + 16) = v1;\n    int64_t v2 = function_40d220(a1, result2); // 0x40b956\n    if (v2 == 0) {\n        // 0x40b991\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    // 0x40b960\n    if (result2 == v2) {\n        // 0x40b980\n        return result2;\n    }\n    // 0x40b965\n    return function_40d4f0(result2);\n}\n"
        },
        {
            "funcName": "function_40b9a0",
            "funcStartAddr": "40b9a0",
            "funcEndAddr": "40b9db",
            "decompiledFuncCode": "int64_t function_40b9a0(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x40b9d8\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x40b9ad\n    int64_t v2 = function_40c810(a1, &v1); // 0x40b9c1\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_40b9e0",
            "funcStartAddr": "40b9e0",
            "funcEndAddr": "40bb53",
            "decompiledFuncCode": "int64_t function_40b9e0(int32_t a1, int64_t a2) {\n    int32_t v1 = a1 & 0xf000; // 0x40b9e7\n    char v2 = 45; // 0x40b9e0\n    int64_t v3; // 0x40b9e0\n    uint64_t v4; // 0x40b9e0\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x40ba49\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x40ba49:\n            // 0x40ba49\n            v4 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(a2 + 1) = (v4 & 256) == 0 ? 45 : 114;\n            int64_t v5 = v4 & 128; // 0x40ba62\n            char v6 = v5; // 0x40ba6a\n            *(char *)(a2 + 2) = (v6 - ((char)(v5 == 0) | v6) & -74) + 119;\n            int64_t v7 = v4 & 64; // 0x40ba77\n            int64_t v8 = v7 - (v7 | (int64_t)(v7 == 0)); // 0x40ba7d\n            if ((v4 & 2048) == 0) {\n                // 0x40bb20\n                v3 = (v8 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x40ba8b\n                v3 = (v8 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x40ba91\n            break;\n        }\n        case 5: {\n            // 0x40ba49\n            v2 = 98;\n            // branch (via goto) -> 0x40ba49\n            goto lab_0x40ba49;\n        }\n        case 1: {\n            // 0x40ba49\n            v2 = 99;\n            // branch (via goto) -> 0x40ba49\n            goto lab_0x40ba49;\n        }\n        case 9: {\n            // 0x40ba49\n            v2 = 108;\n            // branch (via goto) -> 0x40ba49\n            goto lab_0x40ba49;\n        }\n        case 0: {\n            // 0x40ba49\n            v2 = 112;\n            // branch (via goto) -> 0x40ba49\n            goto lab_0x40ba49;\n        }\n        default: {\n            // 0x40ba36\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x40ba49\n            goto lab_0x40ba49;\n        }\n    }\n    // 0x40ba91\n    *(char *)(a2 + 3) = (char)v3;\n    int64_t v9 = v4 & 32; // 0x40ba96\n    char v10 = v9; // 0x40ba9c\n    *(char *)(a2 + 4) = (v10 - ((char)(v9 == 0) | v10) & -69) + 114;\n    int64_t v11 = v4 & 16; // 0x40baa9\n    char v12 = v11; // 0x40baaf\n    *(char *)(a2 + 5) = (v12 - ((char)(v11 == 0) | v12) & -74) + 119;\n    int64_t v13 = v4 & 8; // 0x40babc\n    int64_t v14 = v13 - (v13 | (int64_t)(v13 == 0)); // 0x40bac2\n    int64_t v15; // 0x40b9e0\n    if ((v4 & 1024) == 0) {\n        // 0x40bb30\n        v15 = (v14 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x40bacc\n        v15 = (v14 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x40bad2\n    *(char *)(a2 + 6) = (char)v15;\n    int64_t v16 = v4 & 4; // 0x40bad7\n    char v17 = v16; // 0x40badd\n    *(char *)(a2 + 7) = (v17 - ((char)(v16 == 0) | v17) & -69) + 114;\n    int64_t v18 = v4 & 2; // 0x40baea\n    char v19 = v18; // 0x40baf0\n    *(char *)(a2 + 8) = (v19 - ((char)(v18 == 0) | v19) & -74) + 119;\n    char v20 = v4 % 2 == 0; // 0x40bb03\n    if ((v4 & 512) == 0) {\n        // 0x40bb40\n        *(char *)(a2 + 9) = (v20 & -75) + 120;\n        *(int16_t *)(a2 + 10) = 32;\n        return 32;\n    }\n    // 0x40bb0d\n    *(char *)(a2 + 9) = (v20 & -32) + 116;\n    *(int16_t *)(a2 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_40bb60",
            "funcStartAddr": "40bb60",
            "funcEndAddr": "40bb68",
            "decompiledFuncCode": "int64_t function_40bb60(int64_t a1) {\n    // 0x40bb60\n    int64_t v1; // 0x40bb60\n    return function_40b9e0(*(int32_t *)(a1 + 24), v1);\n}\n"
        },
        {
            "funcName": "function_40bb70",
            "funcStartAddr": "40bb70",
            "funcEndAddr": "40bb88",
            "decompiledFuncCode": "int64_t function_40bb70(void) {\n    // 0x40bb70\n    int64_t v1; // 0x40bb70\n    int64_t result = function_40bb90(v1, v1, v1); // 0x40bb74\n    if (result != 0) {\n        // 0x40bb7e\n        return result;\n    }\n    // 0x40bb83\n    function_412bd0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40bb90",
            "funcStartAddr": "40bb90",
            "funcEndAddr": "40bc69",
            "decompiledFuncCode": "int64_t function_40bb90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_40b870(a1, a2); // 0x40bba8\n    int64_t v2 = function_40b8d0(v1); // 0x40bbb3\n    int64_t v3 = 0; // 0x40bbc7\n    if (v2 != 0) {\n        // 0x40bbc9\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x40bbe0\n    int64_t v4 = a2; // 0x40bbe0\n    int64_t v5; // 0x40bb90\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x40bc58\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x40bbc1\n    int32_t len = strlen((char *)str); // 0x40bbe5\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x40bbf5\n    if (mem == NULL) {\n        // 0x40bc41\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40bc0b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x40bc17\n    if (a3 != 0) {\n        // 0x40bc20\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x40bc33\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x40bc41\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_40bc70",
            "funcStartAddr": "40bc70",
            "funcEndAddr": "40bd33",
            "decompiledFuncCode": "int64_t function_40bc70(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a1;\n    char v2 = v1;\n    int64_t v3 = 0; // 0x40bc78\n    int64_t v4 = 0; // 0x40bc78\n    char v5 = v2; // 0x40bc78\n    int64_t v6 = v1; // 0x40bc78\n    int64_t result = 0; // 0x40bc78\n    if (v2 == 0) {\n      lab_0x40bd01_2:\n        // 0x40bd01\n        return result;\n    }\n    int64_t v7; // 0x40bc70\n    int64_t v8; // 0x40bc70\n    int64_t v9; // 0x40bc70\n    char v10; // 0x40bc70\n    int64_t v11; // 0x40bc70\n    int64_t v12; // 0x40bc70\n    while (true) {\n      lab_0x40bccf:\n        // 0x40bccf\n        v12 = v6;\n        v10 = v5;\n        int64_t v13 = v4;\n        v8 = v3;\n        int64_t v14 = v8; // 0x40bcef\n        char v15 = v10; // 0x40bcfa\n        int64_t v16 = v12; // 0x40bcf3\n        while ((char)v13 == 0) {\n            int64_t v17 = v16;\n            char v18 = v15;\n            int64_t v19 = v14;\n            if (v18 == 46) {\n                // 0x40bd18\n                v11 = v17;\n                v7 = v19 == 0 ? v17 : v19;\n                v9 = 1;\n                goto lab_0x40bcc1_2;\n            }\n            if (v18 > 90) {\n                // 0x40bd08\n                if (v18 < 123) {\n                    goto lab_0x40bcc1_2;\n                }\n            } else {\n                // 0x40bcdd\n                v11 = v17;\n                v7 = v19;\n                v9 = v13;\n                if (v18 > 64 || v18 < 58) {\n                    goto lab_0x40bcc1_2;\n                }\n            }\n            // 0x40bcec\n            v14 = v18 != 126 ? 0 : v19;\n            v16 = v17 + 1;\n            *a1 = v16;\n            v15 = *(char *)v16;\n            result = v14;\n            if (v15 == 0) {\n                return result;\n            }\n        }\n        uint32_t v20 = (int32_t)v10 - 65; // 0x40bca3\n        if (v10 == 122 || v20 < 57) {\n            uint32_t v21 = v20 % 64;\n            v11 = v12;\n            v7 = v8;\n            v9 = 0;\n            if (v21 != 0 != ((1 << (int64_t)v21) % 0x3ffffff04000000 == 0)) {\n                goto lab_0x40bcc1_2;\n            } else {\n                goto lab_0x40bcb8;\n            }\n        } else {\n            goto lab_0x40bcb8;\n        }\n    }\n    // 0x40bd01\n    return result;\n  lab_0x40bcc1_2:;\n    int64_t v22 = v11 + 1; // 0x40bcc1\n    *a1 = v22;\n    char v23 = *(char *)v22; // 0x40bcc8\n    v3 = v7;\n    v4 = v9;\n    v5 = v23;\n    v6 = v22;\n    result = v7;\n    if (v23 == 0) {\n        return result;\n    }\n    goto lab_0x40bccf;\n  lab_0x40bcb8:\n    // 0x40bcb8\n    v11 = v12;\n    v7 = v10 != 126 ? 0 : v8;\n    v9 = 0;\n    goto lab_0x40bcc1_2;\n}\n"
        },
        {
            "funcName": "function_40bd40",
            "funcStartAddr": "40bd40",
            "funcEndAddr": "40c14d",
            "decompiledFuncCode": "int64_t function_40bd40(int64_t str, int64_t str2) {\n    // 0x40bd40\n    int64_t v1; // 0x40bd40\n    uint64_t v2 = v1;\n    uint32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40bd54\n    if (strcmp_rc == 0) {\n        // 0x40bfc6\n        return 0;\n    }\n    char v3 = v2;\n    if (v3 == 0) {\n        // 0x40bfc6\n        return 0xffffffff;\n    }\n    char v4 = v1;\n    if (v4 == 0) {\n        // 0x40bfc6\n        return 1;\n    }\n    int64_t result2 = strcmp_rc; // 0x40bd59\n    uint64_t v5 = v2 % 256; // 0x40bd64\n    uint64_t v6 = v1 % 256; // 0x40bd71\n    bool v7; // 0x40bd40\n    int64_t v8 = v7 ? -1 : 1;\n    int64_t v9 = str; // 0x40bd40\n    int64_t v10 = (int64_t)\".\"; // 0x40bd40\n    int64_t v11 = 2; // 0x40bd8f\n    unsigned char v12 = *(char *)v10; // 0x40bd8f\n    char v13 = *(char *)v9; // 0x40bd8f\n    char v14 = v13; // 0x40bd8f\n    bool v15 = false; // 0x40bd8f\n    while (v12 == v13) {\n        v11--;\n        v9 += v8;\n        v10 += v8;\n        v14 = v12;\n        v15 = true;\n        if (v11 == 0) {\n            // break -> \n            break;\n        }\n        v12 = *(char *)v10;\n        v13 = *(char *)v9;\n        v14 = v13;\n        v15 = false;\n    }\n    unsigned char v16 = v14;\n    int64_t v17 = str2; // 0x40bd98\n    int64_t v18 = (int64_t)\".\"; // 0x40bd98\n    if ((v12 >= v16 && !v15) == v12 < v16) {\n        // 0x40bfc6\n        return 0xffffffff;\n    }\n    int64_t v19 = 2; // 0x40bd98\n    unsigned char v20 = *(char *)v18; // 0x40bda9\n    char v21 = *(char *)v17; // 0x40bda9\n    char v22 = v21; // 0x40bda9\n    bool v23 = false; // 0x40bda9\n    while (v20 == v21) {\n        // 0x40bd9e\n        v19--;\n        v17 += v8;\n        v18 += v8;\n        v22 = v20;\n        v23 = true;\n        if (v19 == 0) {\n            // break -> \n            break;\n        }\n        v20 = *(char *)v18;\n        v21 = *(char *)v17;\n        v22 = v21;\n        v23 = false;\n    }\n    unsigned char v24 = v22;\n    int64_t v25 = str; // 0x40bdb2\n    int64_t v26 = (int64_t)\"..\"; // 0x40bdb2\n    if ((v20 >= v24 && !v23) == v20 < v24) {\n        // 0x40bfc6\n        return 1;\n    }\n    int64_t v27 = 3; // 0x40bdb2\n    unsigned char v28 = *(char *)v26; // 0x40bdc8\n    char v29 = *(char *)v25; // 0x40bdc8\n    char v30 = v29; // 0x40bdc8\n    bool v31 = false; // 0x40bdc8\n    while (v28 == v29) {\n        // 0x40bdb8\n        v27--;\n        v25 += v8;\n        v26 += v8;\n        v30 = v28;\n        v31 = true;\n        if (v27 == 0) {\n            // break -> \n            break;\n        }\n        v28 = *(char *)v26;\n        v29 = *(char *)v25;\n        v30 = v29;\n        v31 = false;\n    }\n    unsigned char v32 = v30;\n    int64_t v33 = str2; // 0x40bdd1\n    int64_t v34 = (int64_t)\"..\"; // 0x40bdd1\n    if ((v28 >= v32 && !v31) == v28 < v32) {\n        // 0x40bfc6\n        return 0xffffffff;\n    }\n    int64_t v35 = 3; // 0x40bdd1\n    unsigned char v36 = *(char *)v34; // 0x40bde2\n    char v37 = *(char *)v33; // 0x40bde2\n    v34 += v8;\n    v35--;\n    char v38 = v37; // 0x40bde2\n    bool v39 = false; // 0x40bde2\n    while (v36 == v37) {\n        // 0x40bdd7\n        v33 += v8;\n        v38 = v36;\n        v39 = true;\n        if (v35 == 0) {\n            // break -> \n            break;\n        }\n        v36 = *(char *)v34;\n        v37 = *(char *)v33;\n        v34 += v8;\n        v35--;\n        v38 = v37;\n        v39 = false;\n    }\n    unsigned char v40 = v38;\n    if ((v36 >= v40 && !v39) == v36 < v40) {\n        // 0x40bfc6\n        return 1;\n    }\n    // 0x40bdf1\n    if (v3 == 46 == (v4 != 46)) {\n        // 0x40bfc6\n        return 0xffffffff;\n    }\n    int64_t str4; // 0x40bd40\n    int64_t str3; // 0x40bd40\n    if (v3 == 46) {\n        // 0x40c010\n        str3 = str;\n        str4 = str2;\n        if (v4 == 46) {\n            // 0x40c020\n            str3 = str + 1;\n            str4 = str2 + 1;\n        }\n    } else {\n        // 0x40be17\n        str3 = str;\n        str4 = str2;\n        if (v4 == 46) {\n            // 0x40bfc6\n            return 1;\n        }\n    }\n    int64_t v41 = (int64_t)(v3 == 46) | (int64_t)\"..\" & -256; // 0x40bdf5\n    int64_t v42 = str3; // bp-72, 0x40be24\n    int64_t v43 = str4; // bp-64, 0x40be29\n    int64_t v44 = function_40bc70(&v42, v34, v41, v35, v5, v6); // 0x40be2e\n    int64_t v45 = function_40bc70(&v43, v34, v41, v35, v5, v6); // 0x40be3b\n    int64_t v46; // 0x40bd40\n    int64_t n; // 0x40bd40\n    int64_t v47; // 0x40bd40\n    if (v44 == 0) {\n        int64_t v48 = v42 - str3; // 0x40c0bd\n        n = v48;\n        v46 = v45;\n        v47 = v48;\n        if (v45 != 0) {\n            goto lab_0x40be5b;\n        } else {\n            goto lab_0x40c0c9;\n        }\n    } else {\n        // 0x40be49\n        n = v44 - str3;\n        v46 = v45 == 0 ? v43 : v45;\n        goto lab_0x40be5b;\n    }\n  lab_0x40be91:;\n    // 0x40be91\n    int64_t v49; // 0x40bd40\n    int64_t v50 = v49;\n    int64_t v51; // 0x40bd40\n    int64_t v52 = v51;\n    char v53 = *(char *)(v50 + str3); // 0x40be91\n    int64_t v54 = v52; // 0x40be9e\n    int64_t v55 = v50; // 0x40be9e\n    int32_t v56; // 0x40bd40\n    int64_t v57; // 0x40bd40\n    int64_t v58; // 0x40bd40\n    int64_t v59; // 0x40bd40\n    int64_t v60; // 0x40bd40\n    uint64_t v61; // 0x40bd40\n    char v62; // 0x40bd40\n    int64_t v63; // 0x40bd40\n    int64_t v64; // 0x40bd40\n    int64_t v65; // 0x40bd40\n    if (v53 == 57 || (int32_t)v53 < 57) {\n        goto lab_0x40bf10;\n    } else {\n        int32_t v66 = v53;\n        v56 = v66;\n        v57 = v52;\n        v62 = v53;\n        v63 = v50;\n        if (v66 < 58) {\n            // 0x40bff8\n            v58 = v61;\n            v64 = v50;\n            if (v61 == v52) {\n                goto lab_0x40bf03;\n            } else {\n                // 0x40c001\n                v59 = v52;\n                v60 = (int64_t)*(char *)(v52 + str4);\n                v65 = v50;\n                goto lab_0x40bf46;\n            }\n        } else {\n            goto lab_0x40beb4;\n        }\n    }\n  lab_0x40bf10:;\n    int64_t v67 = v55;\n    int64_t v68 = v54;\n    char v69 = *(char *)(v68 + str4); // 0x40bf10\n    uint64_t v70; // 0x40bd40\n    if (v61 > v68) {\n        if (v69 == 57 || (int32_t)v69 < 57) {\n            goto lab_0x40bf84;\n        } else {\n            int64_t v71 = v69; // 0x40bf10\n            v59 = v68;\n            v60 = v71;\n            v65 = v70;\n            if (v70 == v67) {\n                goto lab_0x40bf46;\n            } else {\n                unsigned char v72 = *(char *)(v67 + str3); // 0x40bf2f\n                int32_t v73 = v72;\n                v56 = v73;\n                v57 = v68;\n                v62 = v72;\n                v63 = v67;\n                v59 = v68;\n                v60 = v71;\n                v65 = v67;\n                if (v72 == 57 || v73 < 57) {\n                    goto lab_0x40bf46;\n                } else {\n                    goto lab_0x40beb4;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40bf84;\n    }\n  lab_0x40bf84:;\n    int64_t v74 = v67;\n    char v75 = *(char *)(v74 + str3); // 0x40bf84\n    int64_t v76 = v74 + 1; // 0x40bf8a\n    while (v75 == 48) {\n        // 0x40bf84\n        v74 = v76;\n        v75 = *(char *)(v74 + str3);\n        v76 = v74 + 1;\n    }\n    int64_t v77 = v68; // 0x40bf90\n    int64_t v78 = v68; // 0x40bf90\n    char v79 = v69; // 0x40bf90\n    if (v69 == 48) {\n        int64_t v80 = v77 + 1; // 0x40bf98\n        char v81 = *(char *)(v80 + str4); // 0x40bf9c\n        v77 = v80;\n        v78 = v80;\n        v79 = v81;\n        while (v81 == 48) {\n            // 0x40bf98\n            v80 = v77 + 1;\n            v81 = *(char *)(v80 + str4);\n            v77 = v80;\n            v78 = v80;\n            v79 = v81;\n        }\n    }\n    char v82 = v79;\n    int64_t v83 = v78;\n    int64_t v84; // 0x40bd40\n    int64_t result; // 0x40bd40\n    int64_t v85; // 0x40bd40\n    if ((int32_t)v75 < 58) {\n        // 0x40bfb2\n        result = 1;\n        if ((int32_t)v82 >= 58) {\n            return result;\n        }\n        int64_t v86 = 0;\n        int64_t v87 = v86 == 0 ? (int64_t)v75 - (int64_t)v82 : v86; // 0x40c044\n        int64_t v88 = v87 & 0xffffffff; // 0x40c044\n        int64_t v89 = v74 + 1; // 0x40c048\n        char v90 = *(char *)(str4 - v74 + v83 + v89); // 0x40c04f\n        char v91 = *(char *)(v89 + str3); // 0x40c063\n        while (v91 == 57 || (int32_t)v91 < 57) {\n            // 0x40c0e0\n            result = 1;\n            if ((int32_t)v90 >= 58) {\n                return result;\n            }\n            v86 = v88;\n            v87 = v86 == 0 ? (int64_t)v91 - (int64_t)v90 : v86;\n            v88 = v87 & 0xffffffff;\n            v89++;\n            v90 = *(char *)(str4 - v74 + v83 + v89);\n            v91 = *(char *)(v89 + str3);\n        }\n        // 0x40c076\n        result = 0xffffffff;\n        if ((int32_t)v90 < 58) {\n            return result;\n        }\n        // 0x40c081\n        result = v88;\n        v84 = v89 - v74 + v83;\n        v85 = v89;\n        if ((int32_t)v87 != 0) {\n            return result;\n        }\n    } else {\n        // 0x40bfe0\n        result = 0xffffffff;\n        v84 = v83;\n        v85 = v74;\n        if ((int32_t)v82 < 58) {\n            return result;\n        }\n    }\n    int64_t v92 = v84; // 0x40be7b\n    bool v93 = v70 > v85; // 0x40be7b\n    int64_t v94 = v85; // 0x40be7b\n    result = result2;\n    if (v61 <= v84 && v70 <= v85) {\n        return result;\n    }\n    goto lab_0x40be86;\n  lab_0x40beb4:;\n    // 0x40beb4\n    int64_t v96; // 0x40bd40\n    int64_t v95; // 0x40bd40\n    int64_t v97 = v96 - v95; // 0x40be89\n    int64_t v98 = v63;\n    unsigned char v99 = v62;\n    int64_t v100 = v57; // 0x40bee7\n    int64_t v101 = v99;\n    int64_t v102; // 0x40bd40\n    int64_t v103; // 0x40bd40\n    int64_t v104; // 0x40bd40\n    int64_t v105; // 0x40bd40\n    if (v56 < 123) {\n        if ((1 << (int64_t)((v99 + 63) % 64)) % 0x3ffffff04000000 != 0) {\n            // 0x40c0a0\n            v102 = v100;\n            v104 = 0;\n            v105 = v98;\n            v103 = v101;\n            if (v61 != v98 + v97) {\n                goto lab_0x40bee7;\n            } else {\n                goto lab_0x40befa;\n            }\n        } else {\n            goto lab_0x40becb;\n        }\n    } else {\n        goto lab_0x40becb;\n    }\n  lab_0x40bf03:;\n    int64_t v106 = v64 + 1; // 0x40bf03\n    int64_t v107 = v58 + 1; // 0x40bf07\n    v51 = v107;\n    v49 = v106;\n    v54 = v107;\n    v55 = v106;\n    if (v70 > v106) {\n        goto lab_0x40be91;\n    } else {\n        goto lab_0x40bf10;\n    }\n  lab_0x40becb:;\n    int64_t v108 = v99 == 126 ? 0xffffffff : v101 | 256;\n    result = v108;\n    if (v61 == v98 + v97) {\n        // break -> 0x40bfc6\n        goto lab_0x40bfc6_7;\n    }\n    goto lab_0x40bee7;\n  lab_0x40bf46:\n    // 0x40bf46\n    v58 = v59;\n    v64 = v65;\n    int64_t v110 = v60; // 0x40bf53\n    int64_t v111 = v59; // 0x40bf53\n    int64_t v112 = v65; // 0x40bf53\n    int64_t v113 = 0; // 0x40bf53\n    if ((int32_t)v60 < 58) {\n        goto lab_0x40bf03;\n    } else {\n        goto lab_0x40bf55;\n    }\n  lab_0x40bee7:;\n    unsigned char v109 = *(char *)(v100 + str4); // 0x40bee7\n    v102 = v100;\n    v104 = 0;\n    v105 = v98;\n    v103 = v108;\n    v110 = v109;\n    v111 = v100;\n    v112 = v98;\n    v113 = v108;\n    if (v109 == 57 || (int32_t)v109 < 57) {\n        goto lab_0x40befa;\n    } else {\n        goto lab_0x40bf55;\n    }\n  lab_0x40bf55:;\n    int64_t v114 = v113;\n    int64_t v115 = v112;\n    int64_t v116 = v111;\n    int64_t v117 = v110;\n    uint64_t v118 = v117 + 0xffffffbf; // 0x40bf59\n    if ((int32_t)v118 < 58) {\n        // 0x40bf61\n        v102 = v116;\n        v104 = v117;\n        v105 = v115;\n        v103 = v114;\n        if ((1 << v118 % 64) % 0x3ffffff04000000 != 0) {\n            goto lab_0x40befa;\n        } else {\n            goto lab_0x40bf6c;\n        }\n    } else {\n        goto lab_0x40bf6c;\n    }\n  lab_0x40befa:;\n    int64_t v119 = v103;\n    int64_t v120 = v104;\n    v58 = v102;\n    v64 = v105;\n    if ((int32_t)v120 != (int32_t)v119) {\n        // 0x40c12d\n        result = v119 - v120 & 0xffffffff;\n        goto lab_0x40bfc6_7;\n    }\n    goto lab_0x40bf03;\n  lab_0x40bf6c:\n    // 0x40bf6c\n    v102 = v116;\n    v104 = (char)v117 == 126 ? 0xffffffff : v117 | 256;\n    v105 = v115;\n    v103 = v114;\n    goto lab_0x40befa;\n  lab_0x40be5b:;\n    int64_t v121 = v46 - str4;\n    int64_t v122 = n; // 0x40be5e\n    int64_t v123 = v121; // 0x40be5e\n    if (n == v121) {\n        int32_t strncmp_rc = strncmp((char *)str3, (char *)str4, (int32_t)n); // 0x40c0f9\n        v122 = n;\n        v123 = n;\n        if (strncmp_rc != 0) {\n            goto lab_0x40be64;\n        } else {\n            // 0x40c106\n            v47 = v42 - str3;\n            goto lab_0x40c0c9;\n        }\n    } else {\n        goto lab_0x40be64;\n    }\n  lab_0x40c0c9:\n    // 0x40c0c9\n    v122 = v47;\n    v123 = v43 - str4;\n    goto lab_0x40be64;\n  lab_0x40be64:\n    // 0x40be64\n    v61 = v123;\n    v70 = v122;\n    if ((v61 || v70) == 0) {\n        // 0x40bfc6\n        return result2;\n    }\n    // 0x40be86\n    v92 = 0;\n    v93 = v70 != 0;\n    v94 = 0;\n    while (true) {\n      lab_0x40be86:\n        // 0x40be86\n        v95 = v94;\n        v96 = v92;\n        v51 = v96;\n        v49 = v95;\n        v54 = v96;\n        v55 = v95;\n        if (v93) {\n            goto lab_0x40be91;\n        } else {\n            goto lab_0x40bf10;\n        }\n    }\n  lab_0x40bfc6_7:\n    // 0x40bfc6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c150",
            "funcStartAddr": "40c150",
            "funcEndAddr": "40c18a",
            "decompiledFuncCode": "int64_t function_40c150(int64_t * tp) {\n    int64_t result = 0; // 0x40c164\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x40c166\n        int64_t tp2; // bp-24, 0x40c150\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *tp = tp2;\n        int128_t v1; // 0x40c150\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)((int64_t)tp + 8) = result;\n    }\n    // 0x40c184\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c190",
            "funcStartAddr": "40c190",
            "funcEndAddr": "40c1ee",
            "decompiledFuncCode": "int64_t function_40c190(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x40c196\n    if (locale == NULL) {\n        // 0x40c1c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40c196\n    bool v2; // 0x40c190\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g29; // 0x40c190\n    int64_t v5 = v1; // 0x40c190\n    int64_t v6 = 2; // 0x40c1b5\n    unsigned char v7 = *(char *)v5; // 0x40c1b5\n    char v8 = *(char *)v4; // 0x40c1b5\n    char v9 = v8; // 0x40c1b5\n    bool v10 = false; // 0x40c1b5\n    while (v7 == v8) {\n        // 0x40c1a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40c1c1\n    int64_t v13 = v1; // 0x40c1c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40c1c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40c1c1\n    unsigned char v15 = *(char *)v13; // 0x40c1dd\n    char v16 = *(char *)v12; // 0x40c1dd\n    char v17 = v16; // 0x40c1dd\n    bool v18 = false; // 0x40c1dd\n    while (v15 == v16) {\n        // 0x40c1d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40c1f0",
            "funcStartAddr": "40c1f0",
            "funcEndAddr": "40c283",
            "decompiledFuncCode": "int64_t function_40c1f0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40c207\n    if (v1 == -1) {\n        // 0x40c27f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40c20f\n    int64_t v3; // 0x40c1f0\n    while (true) {\n      lab_0x40c218:\n        // 0x40c218\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40c270;\n        } else {\n            goto lab_0x40c275;\n        }\n    }\n  lab_0x40c27f_2:;\n    // 0x40c27f\n    int64_t result; // 0x40c1f0\n    return result;\n  lab_0x40c275:;\n    int64_t v4 = v3 + 2; // 0x40c275\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40c27f\n        goto lab_0x40c27f_2;\n    }\n    goto lab_0x40c218;\n  lab_0x40c270:\n    // 0x40c270\n    result = v3;\n    goto lab_0x40c275;\n}\n"
        },
        {
            "funcName": "function_40c290",
            "funcStartAddr": "40c290",
            "funcEndAddr": "40c2a0",
            "decompiledFuncCode": "int64_t function_40c290(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c290\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40c2a0",
            "funcStartAddr": "40c2a0",
            "funcEndAddr": "40c2a7",
            "decompiledFuncCode": "int64_t function_40c2a0(int64_t a1, int64_t a2) {\n    // 0x40c2a0\n    int64_t v1; // 0x40c2a0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40c2b0",
            "funcStartAddr": "40c2b0",
            "funcEndAddr": "40c2d1",
            "decompiledFuncCode": "int64_t function_40c2b0(int64_t a1, int64_t a2) {\n    // 0x40c2b0\n    int64_t v1; // 0x40c2b0\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x40c2c8\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c2e0",
            "funcStartAddr": "40c2e0",
            "funcEndAddr": "40c3f9",
            "decompiledFuncCode": "int64_t function_40c2e0(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40c2b0(a1, a2); // 0x40c2f4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40c2fc\n    int64_t result2 = *v2; // 0x40c2fc\n    if (result2 == 0) {\n        // 0x40c38e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40c324\n            if (v3 == 0) {\n                // 0x40c38e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40c331\n            int64_t v5 = v3; // 0x40c337\n            int64_t v6 = v1; // 0x40c337\n            int64_t result = v4; // 0x40c337\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40c36c_2:\n                // 0x40c36c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40c371\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40c380\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40c38e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40c344\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40c351\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40c36c_2;\n                }\n                // 0x40c359\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40c36c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40c38e\n            return 0;\n        }\n    }\n    // 0x40c3a3\n    if ((char)a4 == 0) {\n        // 0x40c38e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40c3a8\n    if (v12 == 0) {\n        // 0x40c3f0\n        *v2 = 0;\n        // 0x40c38e\n        return result2;\n    }\n    // 0x40c3b1\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40c3bf\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c400",
            "funcStartAddr": "40c400",
            "funcEndAddr": "40c47e",
            "decompiledFuncCode": "int64_t function_40c400(uint64_t a1) {\n    if (a1 == (int64_t)&g30) {\n        // 0x40c47d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40c40b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g30) {\n        // 0x40c46a\n        *(int64_t *)a1 = (int64_t)&g30;\n        return 0;\n    }\n    // 0x40c419\n    __asm_comiss_5(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40c434\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_6(v2, 0x3dcccccd); // 0x40c441\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40c449\n    __asm_comiss_5(v4, v3);\n    __asm_comiss_5(__asm_movss(0x3f800000), v4);\n    __asm_comiss_5(v1, v3);\n    // 0x40c47d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40c480",
            "funcStartAddr": "40c480",
            "funcEndAddr": "40c5ca",
            "decompiledFuncCode": "int64_t function_40c480(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40c49a\n    uint64_t v2 = *v1; // 0x40c49a\n    if (v2 <= a2) {\n        // 0x40c584\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40c480\n    int64_t v8 = a2; // 0x40c480\n    int64_t v9; // 0x40c480\n    int64_t result; // 0x40c480\n    int64_t v10; // 0x40c480\n    while (true) {\n      lab_0x40c4b6_2:\n        // 0x40c4b6\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40c4b6\n        int64_t v12 = *v11; // 0x40c4b6\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40c4a8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40c4bf\n            int64_t v14 = *v13; // 0x40c4bf\n            int64_t v15 = v14; // 0x40c4c7\n            int64_t v16 = v12; // 0x40c4c7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40c4e4\n                    int64_t v19 = *v18; // 0x40c4e4\n                    int64_t v20 = function_40c2b0(v3, v19); // 0x40c4ed\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40c4f2\n                    int64_t v22 = *v21; // 0x40c4f2\n                    int64_t * v23 = (int64_t *)v20; // 0x40c4f6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40c4d0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40c51f\n                            break;\n                        }\n                    } else {\n                        // 0x40c4fc\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40c51f\n                            break;\n                        }\n                    }\n                    // 0x40c4e4\n                    v15 = v22;\n                }\n                // 0x40c51f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40c523\n                v9 = *v1;\n                goto lab_0x40c4a8;\n            } else {\n                int64_t v26 = function_40c2b0(v3, v25); // 0x40c53b\n                int64_t * v27 = (int64_t *)v26; // 0x40c540\n                if (*v27 == 0) {\n                    // 0x40c5a0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40c549\n                    int64_t * v29; // 0x40c480\n                    int64_t v30; // 0x40c480\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40c5af\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40c584\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40c5af\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40c55a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40c569\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40c571\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40c57a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40c584\n                    break;\n                }\n                goto lab_0x40c4b6_2;\n            }\n        }\n    }\n    // 0x40c584\n    return result;\n  lab_0x40c4a8:;\n    int64_t v36 = v10 + 16; // 0x40c4a8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40c4b6_2;\n    // 0x40c4b6\n    goto lab_0x40c4b6_2;\n}\n"
        },
        {
            "funcName": "function_40c5d0",
            "funcStartAddr": "40c5d0",
            "funcEndAddr": "40c5d5",
            "decompiledFuncCode": "int64_t function_40c5d0(int64_t a1) {\n    // 0x40c5d0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40c5e0",
            "funcStartAddr": "40c5e0",
            "funcEndAddr": "40c5e5",
            "decompiledFuncCode": "int64_t function_40c5e0(int64_t a1) {\n    // 0x40c5e0\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40c5f0",
            "funcStartAddr": "40c5f0",
            "funcEndAddr": "40c5f5",
            "decompiledFuncCode": "int64_t function_40c5f0(int64_t a1) {\n    // 0x40c5f0\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40c600",
            "funcStartAddr": "40c600",
            "funcEndAddr": "40c64f",
            "decompiledFuncCode": "int64_t function_40c600(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c603\n    int64_t result = 0; // 0x40c60c\n    if (v1 <= a1) {\n      lab_0x40c64d:\n        // 0x40c64d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40c610\n    while (*(int64_t *)v3 == 0) {\n        // 0x40c610\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40c61f\n    int64_t v6 = v5; // 0x40c62b\n    int64_t v7 = 1; // 0x40c62b\n    int64_t v8; // 0x40c600\n    int64_t v9; // 0x40c630\n    int64_t v10; // 0x40c634\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40c630\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40c640\n    int64_t v12 = v3 + 16; // 0x40c644\n    while (v12 < v1) {\n        // 0x40c619\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40c610\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40c61f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40c630\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40c63d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40c64d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c650",
            "funcStartAddr": "40c650",
            "funcEndAddr": "40c6b7",
            "decompiledFuncCode": "int64_t function_40c650(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c653\n    int64_t v2 = a1; // 0x40c65f\n    int64_t v3 = 0; // 0x40c65f\n    int64_t v4 = 0; // 0x40c65f\n    int64_t v5 = 0; // 0x40c65f\n    int64_t v6 = 0; // 0x40c65f\n    int64_t v7; // 0x40c650\n    int64_t v8; // 0x40c650\n    int64_t v9; // 0x40c650\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40c671_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40c668;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40c677\n                int64_t v13 = v10 + 1; // 0x40c67b\n                int64_t v14 = v11 + 1; // 0x40c67f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40c686\n                int64_t v16 = v14; // 0x40c686\n                if (v12 == 0) {\n                    goto lab_0x40c668;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40c690\n                    int64_t v18 = v16 + 1; // 0x40c694\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40c690\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40c69d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40c6a6\n                        break;\n                    }\n                    goto lab_0x40c671_2;\n                }\n            }\n        }\n    }\n  lab_0x40c6a6:\n    // 0x40c6a6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40c6af\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40c6ae\n    return 0;\n  lab_0x40c668:;\n    int64_t v20 = v8 + 16; // 0x40c668\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40c6a6\n        goto lab_0x40c6a6;\n    }\n    goto lab_0x40c671_2;\n    // 0x40c671\n    goto lab_0x40c671_2;\n}\n"
        },
        {
            "funcName": "function_40c6c0",
            "funcStartAddr": "40c6c0",
            "funcEndAddr": "40c808",
            "decompiledFuncCode": "int64_t function_40c6c0(uint64_t a1, int64_t a2) {\n    // 0x40c6c0\n    int128_t v1; // 0x40c6c0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40c6d3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40c6d7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40c6de\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40c6f0\n            while (*(int64_t *)v7 == 0) {\n                // 0x40c6f0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40c72d\n                    goto lab_0x40c72d;\n                }\n            }\n        }\n    }\n  lab_0x40c72d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40c73c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40c6c0\n    int128_t v10; // 0x40c6c0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40c7d3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40c7dc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40c773;\n        } else {\n            goto lab_0x40c7e9;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40c766\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40c7e9;\n        } else {\n            goto lab_0x40c773;\n        }\n    }\n  lab_0x40c773:\n    // 0x40c773\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40c777\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40c777\n    goto lab_0x40c77c;\n  lab_0x40c7e9:\n    // 0x40c7e9\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40c7fa\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40c77c;\n  lab_0x40c77c:\n    // 0x40c77c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40c810",
            "funcStartAddr": "40c810",
            "funcEndAddr": "40c863",
            "decompiledFuncCode": "int64_t function_40c810(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_40c2b0(a1, result); // 0x40c81a\n    int64_t v2 = *(int64_t *)v1; // 0x40c81f\n    if (v2 == 0) {\n        // 0x40c84d\n        return 0;\n    }\n    // 0x40c833\n    if (v2 == result) {\n        // 0x40c84d\n        return result;\n    }\n    int64_t v3 = v1; // 0x40c844\n    int64_t result2 = v2; // 0x40c842\n    while ((char)v1 == 0) {\n        // 0x40c844\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40c84d\n            break;\n        }\n        // 0x40c830\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40c84d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40c84d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c870",
            "funcStartAddr": "40c870",
            "funcEndAddr": "40c8b8",
            "decompiledFuncCode": "int64_t function_40c870(uint64_t a1) {\n    int64_t result = 0; // 0x40c875\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40c887\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c87e\n    if (v1 <= a1) {\n        // 0x40c887\n        return result;\n    }\n    int64_t v2 = a1; // 0x40c885\n    int64_t v3 = *(int64_t *)v2; // 0x40c899\n    result = v3;\n    while (v3 == 0) {\n        // 0x40c890\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40c887\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40c887\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c8c0",
            "funcStartAddr": "40c8c0",
            "funcEndAddr": "40c92a",
            "decompiledFuncCode": "int64_t function_40c8c0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40c2b0(a1, a2); // 0x40c8cc\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40c8e8\n    while (*(int64_t *)v2 != a2) {\n        // 0x40c8e0\n        if (v3 == 0) {\n            goto lab_0x40c8f6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40c920\n        return *(int64_t *)v3;\n    }\n  lab_0x40c8f6:;\n    int64_t v4 = v1 + 16; // 0x40c908\n    int64_t result = 0; // 0x40c90f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40c900\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40c913\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40c913\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c930",
            "funcStartAddr": "40c930",
            "funcEndAddr": "40c994",
            "decompiledFuncCode": "int64_t function_40c930(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40c936\n    int64_t result = 0; // 0x40c93a\n    if (*v1 <= a1) {\n      lab_0x40c951:\n        // 0x40c951\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40c93f\n    int64_t v4 = v2; // 0x40c945\n    int64_t v5; // 0x40c930\n    int64_t v6; // 0x40c930\n    int64_t v7; // 0x40c978\n    int64_t v8; // 0x40c981\n    int64_t v9; // 0x40c961\n    int64_t v10; // 0x40c965\n    if (v3 != 0) {\n        // 0x40c958\n        if (v2 >= a3) {\n            // break -> 0x40c951\n            break;\n        }\n        // 0x40c95d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40c975\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40c970\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40c975\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40c947\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40c93f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40c958\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40c951\n                break;\n            }\n            // 0x40c95d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40c975\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40c970\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40c975\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40c947\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40c951\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c9a0",
            "funcStartAddr": "40c9a0",
            "funcEndAddr": "40ca18",
            "decompiledFuncCode": "int64_t function_40c9a0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40c9b1\n    int64_t result = 0; // 0x40c9b5\n    if (v1 <= a1) {\n      lab_0x40c9d4:\n        // 0x40c9d4\n        return result;\n    }\n    int64_t v2 = a1; // 0x40c9ca\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40c9c8\n    int64_t v5 = v2; // 0x40c9c8\n    int64_t v6 = v3; // 0x40c9c8\n    int64_t v7; // 0x40c9a0\n    int64_t v8; // 0x40c9f8\n    int64_t v9; // 0x40c9fc\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40c9f8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40ca08\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40c9f8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40c9c2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40c9f8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40ca08\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40c9f8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40c9ca\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40c9d4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ca20",
            "funcStartAddr": "40ca20",
            "funcEndAddr": "40ca51",
            "decompiledFuncCode": "int64_t function_40ca20(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40ca27\n    if (v1 == 0) {\n        // 0x40ca4d\n        return 0;\n    }\n    int64_t result = 0; // 0x40ca27\n    v2++;\n    char v3 = *(char *)v2; // 0x40ca43\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40ca4d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ca60",
            "funcStartAddr": "40ca60",
            "funcEndAddr": "40ca80",
            "decompiledFuncCode": "int64_t function_40ca60(int64_t a1) {\n    // 0x40ca60\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40ca80",
            "funcStartAddr": "40ca80",
            "funcEndAddr": "40cc0a",
            "decompiledFuncCode": "int64_t function_40ca80(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40ca80\n    int128_t v1; // 0x40ca80\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40caba\n    int64_t result = (int64_t)mem; // 0x40caba\n    if (mem == NULL) {\n        // 0x40cb6a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40cacb\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40ca80\n    int128_t v6; // 0x40ca80\n    if (a2 == 0) {\n        // 0x40cb80\n        *v4 = (int64_t)&g30;\n        int64_t v7 = function_40c400(v3); // 0x40cb88\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40cb8d\n        if ((char)v7 == 0) {\n            // 0x40cb60\n            free(mem);\n            // 0x40cb6a\n            return 0;\n        }\n        // 0x40cb99\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40cbe3;\n        } else {\n            goto lab_0x40cb9e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40c400(v3) == 0) {\n            // 0x40cb60\n            free(mem);\n            // 0x40cb6a\n            return 0;\n        }\n        // 0x40cae5\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40c1f0(a1); // 0x40caf3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40cb60\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40cb60\n                free(mem);\n                // 0x40cb6a\n                return 0;\n            }\n            // 0x40cb11\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40cb60\n                free(mem);\n                // 0x40cb6a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40cb22\n            int64_t v10 = (int64_t)mem2; // 0x40cb22\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40cb60\n                free(mem);\n                // 0x40cb6a\n                return 0;\n            }\n            // 0x40cb2f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40c290 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40c2a0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40cb6a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40cbd8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40cb9e;\n        } else {\n            goto lab_0x40cbe3;\n        }\n    }\n  lab_0x40cbe3:\n    // 0x40cbe3\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40cbf3\n    int128_t v13 = v6; // 0x40cbfc\n    int128_t v14 = __asm_addss(v12, v12); // 0x40cbfc\n    goto lab_0x40cba7;\n  lab_0x40cb9e:\n    // 0x40cb9e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40cba7;\n  lab_0x40cba7:\n    // 0x40cba7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40cb60\n    free(mem);\n    // 0x40cb6a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40cc10",
            "funcStartAddr": "40cc10",
            "funcEndAddr": "40ccb8",
            "decompiledFuncCode": "int64_t function_40cc10(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40cc1a\n    uint64_t v2 = *v1; // 0x40cc1a\n    int64_t result; // 0x40cc10\n    if (v2 <= a1) {\n      lab_0x40cca3:\n        // 0x40cca3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40cc28\n    while (*v6 == 0) {\n        // 0x40cc28\n        v7 = v5 + 16;\n        int64_t v8; // 0x40cc10\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40cca3\n            goto lab_0x40cca3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40cc39\n    int64_t v10 = *v9; // 0x40cc39\n    int64_t v11 = *v3; // 0x40cc3e\n    int64_t v12 = v11; // 0x40cc45\n    int64_t v13 = v10; // 0x40cc45\n    int64_t result2 = v11; // 0x40cc45\n    int64_t * v14; // 0x40cc5e\n    int64_t v15; // 0x40cc5e\n    int64_t v16; // 0x40cc5a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40cc55\n            v16 = *v3;\n        }\n        // 0x40cc5e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40cc50\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40cc55\n                v16 = *v3;\n            }\n            // 0x40cc5e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40cc7d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40cc90\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40cc9d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40cc2c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40cc28\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40cca3\n                goto lab_0x40cca3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40cc39\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40cc55\n                v16 = *v3;\n            }\n            // 0x40cc5e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40cc50\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40cc55\n                    v16 = *v3;\n                }\n                // 0x40cc5e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40cc7d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40cca3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ccc0",
            "funcStartAddr": "40ccc0",
            "funcEndAddr": "40cd96",
            "decompiledFuncCode": "int64_t function_40ccc0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40cccf\n    uint64_t v2 = *v1; // 0x40cccf\n    int64_t v3 = a1; // 0x40ccd3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40cd23;\n    } else {\n        // 0x40ccd5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40cd23;\n        } else {\n            // 0x40ccdc\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40ccf1\n                int64_t v6; // 0x40cce8\n                while (v5 == 0) {\n                    // 0x40cce8\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40cd23\n                        goto lab_0x40cd23;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40cd08\n                int64_t v8 = v7; // 0x40cd0f\n                int64_t v9 = v5; // 0x40cd0f\n                int64_t v10; // 0x40ccc0\n                int64_t v11; // 0x40cd08\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40cd00\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40cd03\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40cd16\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40ccf1\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40cce8\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40cd23\n                            goto lab_0x40cd23;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40cd03\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40cd00\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40cd03\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40cd11\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40cd23;\n            } else {\n                goto lab_0x40cd5c;\n            }\n        }\n    }\n  lab_0x40cd23:\n    // 0x40cd23\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40cd30\n        int64_t v14 = v13; // 0x40cd37\n        int64_t v15 = v2; // 0x40cd37\n        int64_t v16; // 0x40cd40\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40cd40\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40cd51\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40cd51\n        int64_t v18 = v15; // 0x40cd5a\n        int64_t v19 = v17; // 0x40cd5a\n        while (v15 > v17) {\n            // 0x40cd30\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40cd40\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40cd51\n                v15 = *v1;\n            }\n            // 0x40cd51\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40cd5c;\n  lab_0x40cd5c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40cd5c\n    if (v20 == 0) {\n        // 0x40cd81\n        free(NULL);\n        free((int64_t *)a1);\n        return &g209;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40cd70\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40cd7f\n    while (v21 != 0) {\n        // 0x40cd70\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40cd81\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g209;\n}\n"
        },
        {
            "funcName": "function_40cda0",
            "funcStartAddr": "40cda0",
            "funcEndAddr": "40cf9a",
            "decompiledFuncCode": "int64_t function_40cda0(int64_t a1, uint64_t a2) {\n    // 0x40cda0\n    int128_t v1; // 0x40cda0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40cdab\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40cda0\n        if (a2 < 0) {\n            // 0x40cf20\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40cf30\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40cdc0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40cdc9\n        __asm_comiss(__asm_divss_8(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40cf12\n        return 0;\n    }\n    uint64_t nmemb = function_40c1f0(a2); // 0x40ce03\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40cf12\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40ce3b\n    if (*v6 == nmemb) {\n        // 0x40cf12\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40ce4d\n    int64_t v7 = (int64_t)mem; // 0x40ce4d\n    int64_t v8 = v7; // bp-104, 0x40ce52\n    if (mem == NULL) {\n        // 0x40cf12\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40ceaa\n    int64_t v10 = *v9; // 0x40ceaa\n    int64_t v11 = function_40c480(&v8, a1, 0); // 0x40ceb3\n    int64_t result = v11 & 0xffffffff; // 0x40ceb8\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40ce74\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40ced6\n        function_40c480(v13, v12, 1);\n        function_40c480(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40cf60\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40cf12\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cfa0",
            "funcStartAddr": "40cfa0",
            "funcEndAddr": "40d214",
            "decompiledFuncCode": "int64_t function_40cfa0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40cfa0\n    int128_t v1; // 0x40cfa0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40cfa0\n    int64_t v5 = function_40c2e0(a1, a2, &v4, 0); // 0x40cfc1\n    if (v5 != 0) {\n        // 0x40cfce\n        if (a3 != NULL) {\n            // 0x40cfd5\n            *a3 = v5;\n        }\n        // 0x40cfd9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40cfe8\n    uint64_t v7 = *v6; // 0x40cfe8\n    int64_t v8; // 0x40cfa0\n    int64_t v9; // 0x40cfa0\n    int64_t v10; // 0x40cfa0\n    int128_t v11; // 0x40cfa0\n    int128_t v12; // 0x40cfa0\n    int64_t v13; // 0x40cfa0\n    if (v7 < 0) {\n        // 0x40d070\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40d080\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40d084\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40d089\n        int128_t v17 = __asm_addss(v15, v15); // 0x40d08d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40d00b;\n        } else {\n            goto lab_0x40d09a;\n        }\n    } else {\n        // 0x40cff1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40cff5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40cff9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40cffe\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40d09a;\n        } else {\n            goto lab_0x40d00b;\n        }\n    }\n  lab_0x40d00b:\n    // 0x40d00b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40d014\n    __asm_comiss_5(v11, v21);\n    int128_t v22 = v21; // 0x40d01c\n    int128_t v23 = v11; // 0x40d01c\n    if (v13 == 0) {\n        goto lab_0x40d022;\n    } else {\n        goto lab_0x40d0c1;\n    }\n  lab_0x40d09a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40d0a7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40d0aa\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40d0b3\n    __asm_comiss_5(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40d022;\n    } else {\n        goto lab_0x40d0c1;\n    }\n  lab_0x40d022:;\n    int64_t * v28 = (int64_t *)v4; // 0x40d027\n    if (*v28 == 0) {\n        // 0x40d138\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40d141\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40d032\n    int64_t v31 = *v30; // 0x40d032\n    int64_t * v32; // 0x40cfa0\n    int64_t v33; // 0x40cfa0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40d15d\n        if (mem == NULL) {\n            // 0x40cfd9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40d15d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40d047\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40d05d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40d0c1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40d0c1\n    function_40c400(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40d0ca\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40d0ce\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40d0d2\n    int128_t v44; // 0x40cfa0\n    if (v42 < 0) {\n        // 0x40d190\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40d1a0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40d0e0\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40d0e9\n    int128_t v47; // 0x40cfa0\n    int64_t v48; // 0x40cfa0\n    if (v46 < 0) {\n        // 0x40d170\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40d17d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40d180\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40d0f2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40d0f6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40d0fb\n    __asm_comiss_5(v47, __asm_mulss_7(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40d10b\n        int128_t v53 = v52; // 0x40d114\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40d1b0\n            v53 = __asm_mulss_7(v52, v43);\n        }\n        // 0x40d11a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40cfd9\n        return 0xffffffff;\n    }\n    goto lab_0x40d022;\n}\n"
        },
        {
            "funcName": "function_40d220",
            "funcStartAddr": "40d220",
            "funcEndAddr": "40d25b",
            "decompiledFuncCode": "int64_t function_40d220(int64_t a1, int64_t a2) {\n    // 0x40d220\n    int64_t v1; // bp-16, 0x40d220\n    int64_t v2; // 0x40d220\n    int32_t v3 = function_40cfa0(a1, a2, &v1, v2); // 0x40d232\n    if (v3 == -1) {\n        // 0x40d240\n        return 0;\n    }\n    // 0x40d237\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40d260",
            "funcStartAddr": "40d260",
            "funcEndAddr": "40d437",
            "decompiledFuncCode": "int64_t function_40d260(int64_t a1) {\n    // 0x40d260\n    int128_t v1; // 0x40d260\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40d260\n    int64_t v5; // 0x40d260\n    int64_t result = function_40c2e0(a1, v5, &v4, 1); // 0x40d275\n    if (result == 0) {\n        // 0x40d292\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40d287\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40d292\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40d2a0\n    uint64_t v8 = *v7 - 1; // 0x40d2a4\n    *v7 = v8;\n    int64_t v9; // 0x40d260\n    int64_t v10; // 0x40d260\n    int64_t v11; // 0x40d260\n    int128_t v12; // 0x40d260\n    int128_t v13; // 0x40d260\n    int64_t v14; // 0x40d260\n    if (v8 < 0) {\n        // 0x40d390\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40d3a0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40d3a4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40d3a9\n        int128_t v18 = __asm_addss(v16, v16); // 0x40d3ad\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40d2cc;\n        } else {\n            goto lab_0x40d3ba;\n        }\n    } else {\n        // 0x40d2b2\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40d2b6\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40d2ba\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40d2bf\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40d3ba;\n        } else {\n            goto lab_0x40d2cc;\n        }\n    }\n  lab_0x40d2cc:\n    // 0x40d2cc\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40d2d0\n    int64_t v23 = v14; // 0x40d2d0\n    int128_t v24 = v12; // 0x40d2d0\n    int64_t v25 = v10; // 0x40d2d0\n    int128_t v26 = v22; // 0x40d2d0\n    goto lab_0x40d2d5;\n  lab_0x40d3ba:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40d3c7\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40d3ca\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40d2d5;\n  lab_0x40d2d5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40d2d5\n    __asm_comiss_5(v28, v27);\n    if (v23 == 0) {\n        // 0x40d292\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40d2de\n    function_40c400(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40d2e7\n    int64_t v31 = *(int64_t *)v29; // 0x40d2eb\n    int128_t v32; // 0x40d260\n    if (v30 < 0) {\n        // 0x40d400\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40d410\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40d2f8\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40d301\n    int128_t v35; // 0x40d260\n    int64_t v36; // 0x40d260\n    if (v34 < 0) {\n        // 0x40d3e0\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40d3ed\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40d3f0\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40d30e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40d312\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40d317\n    __asm_comiss_5(__asm_mulss_7(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40d292\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40d328\n    int128_t v41 = v40; // 0x40d331\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40d333\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40d338\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40d428\n    if ((char)function_40cda0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40d292\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40d35a\n    if (*v43 != 0) {\n        int64_t v44; // 0x40d260\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40d368\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40d379\n    *v43 = 0;\n    // 0x40d292\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d440",
            "funcStartAddr": "40d440",
            "funcEndAddr": "40d467",
            "decompiledFuncCode": "int64_t function_40d440(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40d440\n    return (*(int64_t *)(a1 + 8) ^ function_417960(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_40d470",
            "funcStartAddr": "40d470",
            "funcEndAddr": "40d47d",
            "decompiledFuncCode": "int64_t function_40d470(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40d470\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_40d480",
            "funcStartAddr": "40d480",
            "funcEndAddr": "40d4a5",
            "decompiledFuncCode": "int64_t function_40d480(int64_t a1, int64_t a2) {\n    // 0x40d480\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x40d48a\n        return 0;\n    }\n    // 0x40d49a\n    return function_4122b0(a1, a2);\n}\n"
        },
        {
            "funcName": "function_40d4b0",
            "funcStartAddr": "40d4b0",
            "funcEndAddr": "40d4e3",
            "decompiledFuncCode": "int64_t function_40d4b0(int64_t str, int64_t str2) {\n    // 0x40d4b0\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40d4bc\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40d4d4\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_40d4f0",
            "funcStartAddr": "40d4f0",
            "funcEndAddr": "40d505",
            "decompiledFuncCode": "int64_t function_40d4f0(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40d4f7\n    free(v1);\n    free(v1);\n    return &g209;\n}\n"
        },
        {
            "funcName": "function_40d510",
            "funcStartAddr": "40d510",
            "funcEndAddr": "40d5c7",
            "decompiledFuncCode": "int64_t function_40d510(int32_t a1, float80_t a2) {\n    // 0x40d510\n    int3_t v1; // 0x40d510\n    int3_t v2 = v1 - 1; // 0x40d510\n    __frontend_reg_store_fpr(v2, 9223372036854775808.0L);\n    int3_t v3 = v1 - 2;\n    __frontend_reg_store_fpr(v3, a2);\n    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x40d51a\n    float80_t v5 = __frontend_reg_load_fpr(v2); // 0x40d51a\n    int64_t result; // 0x40d510\n    if (v4 > v5 || v4 == v5) {\n        // 0x40d590\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3) - __frontend_reg_load_fpr(v2));\n        float80_t v6 = __frontend_reg_load_fpr(v3); // 0x40d596\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        __frontend_reg_store_fpr(v2, v6);\n        result = (int64_t)__frontend_reg_load_fpr(v3) ^ -0x8000000000000000;\n    } else {\n        // 0x40d51e\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3));\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        result = __frontend_reg_load_fpr(v3);\n    }\n    // 0x40d544\n    __frontend_reg_store_fpr(v3, (float80_t)result);\n    if (result < 0) {\n        // 0x40d552\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + 18446744073709551616.0L);\n    }\n    int3_t v7 = v3;\n    if (a1 != 0) {\n        // 0x40d588\n        __frontend_reg_store_fpr(v7 + 1, __frontend_reg_load_fpr(v7));\n        // 0x40d58a\n        return result;\n    }\n    int3_t v8 = v7 + 1; // 0x40d55c\n    float80_t v9 = __frontend_reg_load_fpr(v7); // 0x40d55c\n    __frontend_reg_store_fpr(v7, __frontend_reg_load_fpr(v8));\n    __frontend_reg_store_fpr(v8, v9);\n    float80_t v10 = __frontend_reg_load_fpr(v7); // 0x40d55e\n    float80_t v11 = __frontend_reg_load_fpr(v8); // 0x40d55e\n    if (v10 != v11 == v10 == v11) {\n        // 0x40d568\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    } else {\n        // 0x40d562\n        if (v10 == v11) {\n            // 0x40d58a\n            return result;\n        }\n        // 0x40d564\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    }\n    int64_t result2 = result + 1; // 0x40d570\n    __frontend_reg_store_fpr(v8, (float80_t)result2);\n    if (result2 >= 0) {\n        // 0x40d58a\n        return result2;\n    }\n    // 0x40d5c0\n    __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8) + 18446744073709551616.0L);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d5d0",
            "funcStartAddr": "40d5d0",
            "funcEndAddr": "40df9e",
            "decompiledFuncCode": "int64_t function_40d5d0(int64_t a1, int64_t * str3, uint32_t a3, uint64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)str3;\n    int32_t v2 = a3 & 32; // 0x40d5d6\n    uint32_t v3 = a3 % 4; // 0x40d5e0\n    int64_t v4; // bp-168, 0x40d5d0\n    int64_t v5 = &v4; // 0x40d5f0\n    uint32_t v6 = (v2 | 1024) - (v2 | (int32_t)(v2 == 0)) & 2024; // 0x40d605\n    struct lconv * locale_info = localeconv(); // 0x40d61b\n    int64_t str = *(int64_t *)locale_info; // 0x40d620\n    int64_t len = strlen((char *)str); // 0x40d629\n    int64_t v7 = len >= 17 ? (int64_t)\".\" : str; // 0x40d643\n    int64_t str2 = *(int64_t *)((int64_t)locale_info + 8); // 0x40d64c\n    int64_t v8 = len >= 17 ? 1 : len; // 0x40d651\n    uint32_t len2 = strlen((char *)str2); // 0x40d662\n    int64_t v9 = v1 + 647; // 0x40d679\n    v4 = v9;\n    int64_t v10; // 0x40d5d0\n    int64_t v11; // 0x40d5d0\n    int64_t v12; // 0x40d5d0\n    int64_t v13; // 0x40d5d0\n    int64_t v14; // 0x40d5d0\n    int64_t v15; // 0x40d5d0\n    int64_t v16; // 0x40d5d0\n    int64_t v17; // 0x40d5d0\n    int64_t v18; // 0x40d5d0\n    if (a5 > a4) {\n        if (a4 == 0) {\n            goto lab_0x40d6b5;\n        } else {\n            if (a5 % a4 != 0) {\n                goto lab_0x40d6b5;\n            } else {\n                uint64_t v19 = a5 / a4; // 0x40d920\n                int64_t v20 = a1 / v19; // 0x40d934\n                uint64_t v21 = 10 * (a1 % v19); // 0x40d940\n                uint64_t v22 = 2 * (v21 % v19); // 0x40d949\n                int64_t v23 = v21 / v19 & 0xffffffff; // 0x40d94c\n                int64_t v24 = v19 > v22 ? (int64_t)(v22 != 0) : v19 < v22 ? 3 : 2;\n                uint32_t v25 = a3 & 16; // 0x40d965\n                v13 = v25;\n                v17 = v20;\n                v15 = v24;\n                v10 = v23;\n                v14 = 0;\n                v12 = 0xffffffff;\n                v18 = v20;\n                v16 = v24;\n                v11 = v23;\n                if (v25 == 0) {\n                    goto lab_0x40d981;\n                } else {\n                    goto lab_0x40d96e;\n                }\n            }\n        }\n    } else {\n        if (a4 % a5 != 0) {\n            goto lab_0x40d6b5;\n        } else {\n            uint64_t v26 = a4 / a5; // 0x40d692\n            int64_t v27 = v26 * a1; // 0x40d6a2\n            if (v27 / v26 == a1) {\n                uint32_t v28 = a3 & 16; // 0x40dc21\n                int64_t v29 = v28; // 0x40dc21\n                v13 = v29;\n                v17 = v27;\n                v15 = 0;\n                v10 = 0;\n                v14 = v29;\n                v12 = 0xffffffff;\n                v18 = v27;\n                v16 = 0;\n                v11 = 0;\n                if (v28 != 0) {\n                    goto lab_0x40d96e;\n                } else {\n                    goto lab_0x40d981;\n                }\n            } else {\n                goto lab_0x40d6b5;\n            }\n        }\n    }\n  lab_0x40d981:;\n    int64_t v30 = v14; // 0x40d98a\n    int64_t v31 = v12; // 0x40d98a\n    int64_t v32 = v18; // 0x40d98a\n    int64_t v33 = v16; // 0x40d98a\n    int64_t v34 = v11; // 0x40d98a\n    int64_t v35 = v9; // 0x40d98a\n    int64_t v36; // 0x40d5d0\n    int64_t v37; // 0x40d5d0\n    int64_t v38; // 0x40d5d0\n    int64_t v39; // 0x40d5d0\n    int64_t v40; // 0x40d5d0\n    int64_t v41; // 0x40d5d0\n    int64_t v42; // 0x40d5d0\n    if (v3 == 1) {\n        // 0x40dcc0\n        v40 = v14;\n        v38 = v12;\n        v41 = v18;\n        v36 = v9;\n        v39 = v12;\n        v42 = v18;\n        v37 = v9;\n        if ((int32_t)(v18 % 2 != -v16) + (int32_t)v11 < 6) {\n            goto lab_0x40d9c0;\n        } else {\n            goto lab_0x40d9a1;\n        }\n    } else {\n        goto lab_0x40d990;\n    }\n  lab_0x40d6b5:;\n    // 0x40d6b5\n    int3_t v43; // 0x40d5d0\n    int3_t v44 = v43 - 1;\n    __frontend_reg_store_fpr(v44, (float80_t)a4);\n    int3_t v45; // 0x40d5d0\n    int3_t v46; // 0x40d5d0\n    if (a4 < 0) {\n        // 0x40d900\n        __frontend_reg_store_fpr(v44, __frontend_reg_load_fpr(v44) + 18446744073709551616.0L);\n        v45 = v44;\n    } else {\n        // 0x40d6b5\n        v45 = v43 - 2;\n        v46 = v44;\n    }\n    int3_t v47 = v46;\n    __frontend_reg_store_fpr(v45, (float80_t)a5);\n    float80_t v48 = __frontend_reg_load_fpr(v45);\n    int3_t v49; // 0x40d5d0\n    int3_t v50; // 0x40d5d0\n    int3_t v51; // 0x40d5d0\n    int3_t v52; // 0x40d5d0\n    if (a5 < 0) {\n        // 0x40d8e0\n        __frontend_reg_store_fpr(v45, v48 + 18446744073709551616.0L);\n        int3_t v53 = v47 + 1;\n        __frontend_reg_store_fpr(v53, __frontend_reg_load_fpr(v53) / __frontend_reg_load_fpr(v47));\n        __frontend_reg_store_fpr(v47, (float80_t)a1);\n        v49 = v53;\n        v51 = v47;\n        v50 = v53;\n        v52 = v47;\n        if (a1 >= 0) {\n            goto lab_0x40d6f2;\n        } else {\n            goto lab_0x40d8c8;\n        }\n    } else {\n        // 0x40d6de\n        __frontend_reg_store_fpr(v47, __frontend_reg_load_fpr(v47) / v48);\n        __frontend_reg_store_fpr(v45, (float80_t)a1);\n        int3_t v54 = v45 + 1;\n        v49 = v54;\n        v51 = v45;\n        v50 = v54;\n        v52 = v45;\n        if (a1 < 0) {\n            goto lab_0x40d8c8;\n        } else {\n            goto lab_0x40d6f2;\n        }\n    }\n  lab_0x40d6f2:;\n    int3_t v55 = v49;\n    float80_t v56 = __frontend_reg_load_fpr(v51); // 0x40d6f2\n    __frontend_reg_store_fpr(v55, v56 * __frontend_reg_load_fpr(v55));\n    int3_t v57 = v55; // 0x40d6f9\n    int3_t v58 = v55; // 0x40d6f9\n    if ((a3 & 16) == 0) {\n        goto lab_0x40d810;\n    } else {\n        goto lab_0x40d6ff;\n    }\n  lab_0x40d8c8:;\n    int3_t v59 = v52;\n    __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) + 18446744073709551616.0L);\n    int3_t v60 = v59 + 2; // 0x40d8ce\n    __frontend_reg_store_fpr(v60, __frontend_reg_load_fpr(v50) * __frontend_reg_load_fpr(v60));\n    v57 = v60;\n    v58 = v60;\n    if ((a3 & 16) != 0) {\n        goto lab_0x40d6ff;\n    } else {\n        goto lab_0x40d810;\n    }\n  lab_0x40d96e:;\n    int64_t v61 = v13;\n    v14 = v61;\n    v12 = 0;\n    v18 = v17;\n    v16 = v15;\n    v11 = v10;\n    int64_t v62; // 0x40d5d0\n    int64_t v63; // 0x40d5d0\n    int64_t v64; // 0x40d5d0\n    int64_t v65; // 0x40d5d0\n    int64_t v66; // 0x40d5d0\n    int64_t v67; // 0x40d5d0\n    int64_t v68; // 0x40dba6\n    int64_t v69; // 0x40db8a\n    if (v17 < (int64_t)v6) {\n        goto lab_0x40d981;\n    } else {\n        int64_t v70; // 0x40d5d0\n        int32_t v71 = v70; // 0x40dba4\n        int64_t v72; // 0x40d5d0\n        uint64_t v73; // 0x40d5d0\n        v68 = v72 / v73;\n        int64_t v74; // 0x40d5d0\n        uint64_t v75 = 10 * (v72 % v73) + v74 & 0xffffffff; // 0x40dbb7\n        int64_t v76 = v75 / v73; // 0x40dbb7\n        uint32_t v77 = 2 * (int32_t)(v75 % v73) + (v71 >> 1); // 0x40dbb9\n        uint32_t v78 = v77 + v71; // 0x40dbc2\n        int64_t v79 = v77 < v6 ? (int64_t)(v78 != 0) : v6 < v78 ? 3 : 2;\n        int64_t v80; // 0x40d5d0\n        v69 = v80 + 1 & 0xffffffff;\n        while (v68 >= v73) {\n            // 0x40db96\n            v14 = v61;\n            v12 = v69;\n            v18 = v68;\n            v16 = v79;\n            v11 = v76;\n            v80 = v69;\n            v72 = v68;\n            v70 = v79;\n            v74 = v76;\n            int64_t v81; // 0x40db8a\n            if ((int32_t)v81 == 8) {\n                goto lab_0x40d981;\n            }\n            int64_t v82 = v74;\n            int64_t v83 = v70;\n            uint64_t v84 = v72;\n            int64_t v85 = v80;\n            v71 = v83;\n            v68 = v84 / v73;\n            v75 = 10 * (v84 % v73) + v82 & 0xffffffff;\n            v76 = v75 / v73;\n            v77 = 2 * (int32_t)(v75 % v73) + (v71 >> 1);\n            v78 = v77 + v71;\n            int64_t v86 = v6 < v78 ? 3 : 2;\n            v79 = v77 < v6 ? (int64_t)(v78 != 0) : v86;\n            v81 = v85 + 1;\n            v69 = v81 & 0xffffffff;\n        }\n        // 0x40dd70\n        v14 = v61;\n        v12 = v69;\n        v18 = v68;\n        v16 = v79;\n        v11 = v76;\n        if (v68 < 10) {\n            bool v87; // 0x40d5d0\n            if (v3 == 1) {\n                int32_t v88 = (int32_t)(v79 + v76 % 2) - 2; // 0x40de47\n                v87 = v88 >= 0 == (v88 != 0);\n            } else {\n                // 0x40dd85\n                v87 = v3 == 0 == (v79 != 0);\n            }\n            // 0x40dd97\n            if (v87) {\n                int64_t v89 = v76 + 1; // 0x40de30\n                v63 = v89 & 0xffffffff;\n                if ((int32_t)v89 == 10) {\n                    // 0x40dea3\n                    v67 = v68 + 1;\n                    v64 = 0;\n                    v66 = 10;\n                    v65 = 0;\n                    v62 = v9;\n                    if (v68 == 9) {\n                        goto lab_0x40ddf0;\n                    } else {\n                        goto lab_0x40dda7;\n                    }\n                } else {\n                    goto lab_0x40de38;\n                }\n            } else {\n                // 0x40dd9f\n                v67 = v68;\n                v64 = v79;\n                v63 = v76;\n                if (v75 >= v73) {\n                    goto lab_0x40de38;\n                } else {\n                    goto lab_0x40dda7;\n                }\n            }\n        } else {\n            goto lab_0x40d981;\n        }\n    }\n  lab_0x40d810:;\n    int3_t v90 = v58; // 0x40d817\n    if (v3 != 1) {\n        int3_t v91 = v58 - 1; // 0x40d819\n        __frontend_reg_store_fpr(v91, 1.84467e+19L);\n        float80_t v92 = __frontend_reg_load_fpr(v91); // 0x40d81f\n        float80_t v93 = __frontend_reg_load_fpr(v58); // 0x40d81f\n        v90 = v58;\n        if (v92 > v93) {\n            // 0x40dbe0\n            function_40d510(v3, __frontend_reg_load_fpr(v58));\n            v90 = v58 + 1;\n        }\n    }\n    // 0x40d827\n    __frontend_reg_load_fpr(v90);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len3 = strlen((char *)str3); // 0x40d856\n    int64_t v94 = len3; // 0x40d85d\n    int64_t v95 = 0xffffffff; // 0x40d85d\n    int64_t v96 = len3; // 0x40d85d\n    goto lab_0x40d860;\n  lab_0x40d6ff:;\n    int3_t v179 = v57;\n    int3_t v178 = v179 - 1; // 0x40d6ff\n    __frontend_reg_store_fpr(v178, (float80_t)v6);\n    int3_t v204 = v179 - 2; // 0x40d705\n    __frontend_reg_store_fpr(v204, __frontend_reg_load_fpr(v178));\n    int3_t v205 = v179 - 3;\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v204));\n    int64_t v206 = 1; // 0x40d716\n    int64_t v163 = v206 & 0xffffffff; // 0x40d716\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v205) * __frontend_reg_load_fpr(v178));\n    float80_t v207 = __frontend_reg_load_fpr(v205); // 0x40d71b\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v179));\n    __frontend_reg_store_fpr(v179, v207);\n    while (__frontend_reg_load_fpr(v205) >= __frontend_reg_load_fpr(v179)) {\n        float80_t v208 = __frontend_reg_load_fpr(v205);\n        if ((int32_t)v206 == 8) {\n            // 0x40d726\n            __frontend_reg_store_fpr(v178, v208);\n            __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v204));\n            goto lab_0x40d734;\n        }\n        // 0x40d710\n        __frontend_reg_store_fpr(v204, v208);\n        float80_t v209 = __frontend_reg_load_fpr(v204); // 0x40d712\n        __frontend_reg_store_fpr(v204, __frontend_reg_load_fpr(v179));\n        __frontend_reg_store_fpr(v179, v209);\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v204));\n        v206 = v163 + 1;\n        v163 = v206 & 0xffffffff;\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v205) * __frontend_reg_load_fpr(v178));\n        v207 = __frontend_reg_load_fpr(v205);\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v179));\n        __frontend_reg_store_fpr(v179, v207);\n    }\n    // 0x40d730\n    __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v205));\n    __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v204));\n    goto lab_0x40d734;\n  lab_0x40d990:;\n    int64_t v210 = v35;\n    int64_t v211 = v32;\n    int64_t v212 = v31;\n    v39 = v212;\n    v42 = v211;\n    v37 = v210;\n    if (v3 != 0) {\n        goto lab_0x40d9c0;\n    } else {\n        // 0x40d99a\n        v40 = v30;\n        v38 = v212;\n        v41 = v211;\n        v36 = v210;\n        v39 = v212;\n        v42 = v211;\n        v37 = v210;\n        if ((int32_t)(v34 + v33) < 1) {\n            goto lab_0x40d9c0;\n        } else {\n            goto lab_0x40d9a1;\n        }\n    }\n  lab_0x40d860:;\n    int64_t v97 = *(int64_t *)(v5 + 8); // 0x40d864\n    int64_t v98 = v4 - v94; // 0x40d86c\n    memmove((int64_t *)v98, (int64_t *)v97, (int32_t)v94);\n    int64_t v99 = v95; // 0x40d875\n    int64_t v100 = v98 + v96; // 0x40d875\n    int64_t v101 = v98; // 0x40d875\n    goto lab_0x40d87a;\n  lab_0x40d734:;\n    float80_t v177 = __frontend_reg_load_fpr(v178); // 0x40d742\n    __frontend_reg_store_fpr(v179, v177 / __frontend_reg_load_fpr(v179));\n    uint64_t v180 = v8 + (v2 == 0 ? 3 : 2); // 0x40d749\n    int3_t v142; // 0x40d5d0\n    int3_t v172; // 0x40d5d0\n    int3_t v146; // 0x40d5d0\n    int64_t v143; // 0x40d5d0\n    int3_t v174; // 0x40d5d0\n    if (v3 == 1) {\n        // 0x40dc70\n        __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v179));\n        __frontend_reg_load_fpr(v178);\n        float80_t v181 = __frontend_reg_load_fpr(v179); // 0x40dc94\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len6 = strlen((char *)str3); // 0x40dca0\n        __frontend_reg_store_fpr(v179, v181);\n        v142 = v179;\n        v143 = len6;\n        if (v180 < len6) {\n            // 0x40dcb0\n            __frontend_reg_store_fpr(v178, 10.0L);\n            float80_t v182 = __frontend_reg_load_fpr(v179); // 0x40dcb6\n            __frontend_reg_store_fpr(v179, v182 * __frontend_reg_load_fpr(v178));\n            v146 = v178;\n            goto lab_0x40d7d6;\n        } else {\n            goto lab_0x40dc38;\n        }\n    } else {\n        // 0x40d757\n        __frontend_reg_store_fpr(v178, 1.84467e+19L);\n        float80_t v183 = __frontend_reg_load_fpr(v178); // 0x40d75d\n        float80_t v184 = __frontend_reg_load_fpr(v179); // 0x40d75d\n        bool v185 = false; // 0x40d75d\n        bool v186 = false; // 0x40d75d\n        if (v183 <= v184) {\n            v185 = true;\n            v186 = false;\n            if (v183 >= v184) {\n                v185 = v183 != v184;\n                v186 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v179));\n        v172 = v178;\n        if (!v185 && !v186) {\n            // 0x40dbf8\n            __frontend_reg_load_fpr(v178);\n            float80_t v187 = __frontend_reg_load_fpr(v179); // 0x40dc01\n            function_40d510(v3, v187);\n            __frontend_reg_store_fpr(v179, v187);\n            v172 = v179;\n        }\n        float80_t v188 = __frontend_reg_load_fpr(v172); // 0x40d767\n        v174 = v172 + 1;\n        __frontend_reg_load_fpr(v174);\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len7 = strlen((char *)str3); // 0x40d795\n        __frontend_reg_store_fpr(v174, v188);\n        v142 = v174;\n        v143 = len7;\n        if (v180 < len7) {\n            // 0x40d7a9\n            __frontend_reg_store_fpr(v172, 10.0L);\n            __frontend_reg_store_fpr(v174, __frontend_reg_load_fpr(v174) * __frontend_reg_load_fpr(v172));\n            goto lab_0x40d7b1;\n        } else {\n            goto lab_0x40dc38;\n        }\n    }\n  lab_0x40d9c0:;\n    int64_t v189 = v37 - 1; // 0x40d9d9\n    *(char *)v189 = (char)v42 + 48;\n    int64_t v190 = v189; // 0x40d9fb\n    while (v42 >= 10) {\n        // 0x40d9d3\n        v189 = v190 - 1;\n        *(char *)v189 = (char)v42 + 48;\n        v190 = v189;\n    }\n    int64_t v102 = v39; // 0x40da02\n    int64_t v103 = v189; // 0x40da02\n    int64_t v104 = v39; // 0x40da02\n    int64_t v105 = v37; // 0x40da02\n    int64_t v106 = v189; // 0x40da02\n    if ((a3 & 4) == 0) {\n        goto lab_0x40d885;\n    } else {\n        goto lab_0x40da08;\n    }\n  lab_0x40d9a1:;\n    int64_t v191 = v36;\n    int64_t v192 = v38;\n    int64_t v193 = v41 + 1; // 0x40d9a1\n    v39 = v192;\n    v42 = v193;\n    v37 = v191;\n    if ((int32_t)v192 == 8 || (int32_t)v40 == 0 || v193 != (int64_t)v6) {\n        goto lab_0x40d9c0;\n    } else {\n        int64_t v194 = v191; // 0x40dd2e\n        if ((a3 & 8) == 0) {\n            // 0x40deb4\n            *(char *)(v191 - 1) = 48;\n            int64_t v195 = v191 + -1 - v8; // 0x40debf\n            int64_t v196 = v8 & 0xffffffff; // 0x40dec2\n            uint32_t v197 = (int32_t)v8; // 0x40dec5\n            if (v197 >= 8) {\n                int64_t v198 = v195 + 8 & -8; // 0x40df10\n                *(int64_t *)v195 = *(int64_t *)v7;\n                *(int64_t *)(v195 + v196 - 8) = *(int64_t *)(v196 + v7 - 8);\n                int64_t v199 = v195 - v198; // 0x40df27\n                uint32_t v200 = (int32_t)(v199 + v8); // 0x40df33\n                v194 = v195;\n                if (v200 >= 8) {\n                    int64_t v201 = 0;\n                    int64_t v202 = v201 + 8; // 0x40df43\n                    *(int64_t *)(v201 + v198) = *(int64_t *)(v7 - v199 + v201);\n                    v194 = v195;\n                    while ((v200 & -8) > (int32_t)v202) {\n                        // 0x40df41\n                        v201 = v202 & 0xffffffff;\n                        v202 = v201 + 8;\n                        *(int64_t *)(v201 + v198) = *(int64_t *)(v7 - v199 + v201);\n                        v194 = v195;\n                    }\n                }\n            } else {\n                if ((v8 & 4) != 0) {\n                    // 0x40df6c\n                    *(int32_t *)v195 = *(int32_t *)v7;\n                    *(int32_t *)(v195 + v196 - 4) = *(int32_t *)(v196 + v7 - 4);\n                    v194 = v195;\n                } else {\n                    // 0x40ded5\n                    v194 = v195;\n                    if (v197 != 0) {\n                        // 0x40dedd\n                        *(char *)v195 = *(char *)v7;\n                        v194 = v195;\n                        if ((v8 & 2) != 0) {\n                            // 0x40deec\n                            *(int16_t *)(v195 + v196 - 2) = *(int16_t *)(v196 + v7 - 2);\n                            v194 = v195;\n                        }\n                    }\n                }\n            }\n        }\n        int64_t v203 = v194 - 1; // 0x40dd34\n        *(char *)v203 = 49;\n        v99 = v192 + 1 & 0xffffffff;\n        v100 = v194;\n        v101 = v203;\n        goto lab_0x40d87a;\n    }\n  lab_0x40d87a:\n    // 0x40d87a\n    v102 = v99;\n    v103 = v101;\n    v104 = v99;\n    v105 = v100;\n    v106 = v101;\n    if ((*(char *)(v5 + 16) & 4) != 0) {\n        goto lab_0x40da08;\n    } else {\n        goto lab_0x40d885;\n    }\n  lab_0x40d885:;\n    int64_t result = v103;\n    int64_t v107 = v5 + 16; // 0x40d885\n    char v108 = *(char *)v107; // 0x40d885\n    if (v108 > -1) {\n        // 0x40d8a8\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v109 = v102; // 0x40d88f\n    int64_t v110; // 0x40d5d0\n    int64_t v111; // 0x40d5d0\n    int64_t v112; // 0x40d5d0\n    int64_t v113; // 0x40d5d0\n    if ((int32_t)v102 == -1) {\n        uint64_t v114 = *(int64_t *)(v5 + 24); // 0x40dad0\n        v109 = 0;\n        if (v114 < 2) {\n            goto lab_0x40d895;\n        } else {\n            int64_t v115 = 1; // 0x40daed\n            int64_t v116 = 1;\n            v115 *= (int64_t)*(int32_t *)(v5 + 52);\n            int64_t v117 = v116; // 0x40daf7\n            while (v114 > v115) {\n                int64_t v118 = v116 + 1; // 0x40daf9\n                int64_t v119 = v118 & 0xffffffff; // 0x40daf9\n                v117 = v119;\n                if ((int32_t)v118 == 8) {\n                    // break -> 0x40db01\n                    break;\n                }\n                v116 = v119;\n                v115 *= (int64_t)*(int32_t *)(v5 + 52);\n                v117 = v116;\n            }\n            int32_t v120 = *(int32_t *)v107; // 0x40db01\n            int64_t v121 = v120 & 256; // 0x40db07\n            v110 = v121;\n            v112 = v117;\n            v111 = v121;\n            v113 = v117;\n            if ((v120 & 64) == 0) {\n                goto lab_0x40db30;\n            } else {\n                goto lab_0x40db11;\n            }\n        }\n    } else {\n        goto lab_0x40d895;\n    }\n  lab_0x40da08:;\n    int64_t str4 = len2 >= 17 ? (int64_t)&g24 : str2; // 0x40d675\n    int32_t len4 = strlen((char *)str4); // 0x40da15\n    int64_t v122 = v105 - v106; // 0x40da1a\n    int64_t v123 = v5 + 64; // 0x40da28\n    int64_t * v124 = (int64_t *)(v5 + 32); // 0x40da2d\n    *v124 = (int64_t)len4;\n    int64_t * v125 = (int64_t *)v123; // 0x40da32\n    __memcpy_chk(v125, (int64_t *)v106, (int32_t)v122, 41);\n    int32_t * v126 = (int32_t *)(v5 + 20); // 0x40da37\n    *v126 = (int32_t)v104;\n    int64_t v127 = *v124; // 0x40da49\n    int64_t * v128 = (int64_t *)str4;\n    int32_t v129 = v127;\n    int64_t v130 = *(int64_t *)(v5 + 56);\n    int64_t v131 = v105;\n    uint64_t v132 = v122;\n    unsigned char v133 = *(char *)v130; // 0x40da50\n    int64_t v134 = -1; // 0x40da56\n    int64_t v135 = v130; // 0x40da56\n    if (v133 != 0) {\n        // 0x40da58\n        v134 = v133 >= 127 ? v132 : (int64_t)v133;\n        v135 = v130 + 1;\n    }\n    int64_t v136 = v134;\n    while (v132 >= v136) {\n        int64_t v137 = v131 - v136; // 0x40da90\n        int64_t v138 = v132 - v136; // 0x40da93\n        memcpy((int64_t *)v137, (int64_t *)(v138 + v123), (int32_t)v136);\n        if (v138 == 0) {\n            // 0x40df81\n            v102 = (int64_t)*v126;\n            v103 = v137;\n            goto lab_0x40d885;\n        }\n        int64_t v139 = v137 - v127; // 0x40dab3\n        memcpy((int64_t *)v139, v128, v129);\n        v130 = v135;\n        v131 = v139;\n        v132 = v138;\n        v133 = *(char *)v130;\n        v134 = v136;\n        v135 = v130;\n        if (v133 != 0) {\n            // 0x40da58\n            v134 = v133 >= 127 ? v132 : (int64_t)v133;\n            v135 = v130 + 1;\n        }\n        // 0x40da69\n        v136 = v134;\n    }\n    int64_t v140 = v131 - v132; // 0x40da7d\n    memcpy((int64_t *)v140, v125, (int32_t)v132);\n    v102 = (int64_t)*v126;\n    v103 = v140;\n    goto lab_0x40d885;\n  lab_0x40dc38:;\n    int3_t v141 = v142;\n    if ((a3 & 8) == 0) {\n        // 0x40dc58\n        __frontend_reg_store_fpr(v141, __frontend_reg_load_fpr(v141));\n        goto lab_0x40dc5a;\n    } else {\n        // 0x40dc3f\n        if (*(char *)(v1 - 1 + v143) == 48) {\n            int3_t v144 = v141 - 1; // 0x40de18\n            __frontend_reg_store_fpr(v144, 10.0L);\n            float80_t v145 = __frontend_reg_load_fpr(v141); // 0x40de23\n            __frontend_reg_store_fpr(v141, v145 * __frontend_reg_load_fpr(v144));\n            v146 = v144;\n            if (v3 != 1) {\n                goto lab_0x40d7b1;\n            } else {\n                goto lab_0x40d7d6;\n            }\n        } else {\n            // 0x40dc4f\n            __frontend_reg_store_fpr(v141, __frontend_reg_load_fpr(v141));\n            goto lab_0x40dc5a;\n        }\n    }\n  lab_0x40d895:;\n    uint32_t v147 = *(int32_t *)v107 & 256; // 0x40d899\n    if ((v147 || (int32_t)v109) == 0) {\n        // 0x40d8a8\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v148 = v147; // 0x40d899\n    v110 = v148;\n    v112 = v109;\n    int64_t v149 = v148; // 0x40dd05\n    int64_t v150 = v109; // 0x40dd05\n    if ((v108 & 64) == 0) {\n        goto lab_0x40db28;\n    } else {\n        goto lab_0x40db11;\n    }\n  lab_0x40de38:;\n    int64_t v151 = v68; // 0x40de3b\n    int64_t v152 = v63 + 48 & 0xffffffff; // 0x40de3b\n    goto lab_0x40ddb7;\n  lab_0x40dda7:\n    // 0x40dda7\n    v151 = v67;\n    v152 = 48;\n    v66 = v67;\n    v65 = v64;\n    v62 = v9;\n    if ((a3 & 8) != 0) {\n        goto lab_0x40ddf0;\n    } else {\n        goto lab_0x40ddb7;\n    }\n  lab_0x40d7d6:;\n    int3_t v170 = v146 + 1; // 0x40d7d6\n    __frontend_reg_store_fpr(v170, __frontend_reg_load_fpr(v170) / __frontend_reg_load_fpr(v146));\n    __frontend_reg_load_fpr(v170);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len5 = strlen((char *)str3); // 0x40d802\n    v94 = len5;\n    v95 = v163;\n    v96 = len5;\n    goto lab_0x40d860;\n  lab_0x40d7b1:;\n    int3_t v171 = v172 - 1; // 0x40d7b1\n    __frontend_reg_store_fpr(v171, 1.84467e+19L);\n    float80_t v173 = __frontend_reg_load_fpr(v171); // 0x40d7b7\n    v146 = v172;\n    if (v173 > __frontend_reg_load_fpr(v174)) {\n        float80_t v175 = __frontend_reg_load_fpr(v172); // 0x40d7bb\n        function_40d510(v3, __frontend_reg_load_fpr(v174));\n        __frontend_reg_store_fpr(v174, v175);\n        v146 = v174;\n    }\n    goto lab_0x40d7d6;\n  lab_0x40db28:\n    // 0x40db28\n    v111 = v149;\n    v113 = v150;\n    int64_t v166; // 0x40d5d0\n    if ((int32_t)v150 == 0) {\n        // 0x40df8d\n        v166 = v4;\n        if ((int32_t)v149 == 0) {\n            // 0x40d8a8\n            *(char *)v4 = 0;\n            return result;\n        }\n        goto lab_0x40db6d;\n    } else {\n        goto lab_0x40db30;\n    }\n  lab_0x40db11:;\n    int64_t v176 = *(int64_t *)(v5 + 8); // 0x40db11\n    *(char *)(v176 + 647) = 32;\n    v4 = v176 + 648;\n    v149 = v110;\n    v150 = v112;\n    goto lab_0x40db28;\n  lab_0x40ddf0:\n    // 0x40ddf0\n    v30 = v61;\n    v31 = v69;\n    v32 = v66;\n    v33 = v65;\n    v34 = 0;\n    v35 = v62;\n    v39 = v69;\n    v42 = v66;\n    v37 = v62;\n    if (v3 == 1) {\n        goto lab_0x40d9c0;\n    } else {\n        goto lab_0x40d990;\n    }\n  lab_0x40ddb7:;\n    int64_t v153 = v1 + 646; // 0x40ddbc\n    *(char *)v153 = (char)v152;\n    int64_t v154 = v8 & 0xffffffff; // 0x40ddc9\n    int64_t v155 = v153 - v8; // 0x40ddcc\n    uint32_t v156 = (int32_t)v8; // 0x40ddcf\n    if (v156 >= 8) {\n        int64_t v157 = v155 + 8 & -8; // 0x40de5c\n        *(int64_t *)v155 = *(int64_t *)v7;\n        *(int64_t *)(v154 + v155 - 8) = *(int64_t *)(v154 + v7 - 8);\n        int64_t v158 = v155 - v157; // 0x40de73\n        uint32_t v159 = (int32_t)(v158 + v8); // 0x40de7f\n        v66 = v151;\n        v65 = 0;\n        v62 = v155;\n        if (v159 >= 8) {\n            int64_t v160 = v7 - v158; // 0x40de76\n            int64_t v161 = 0;\n            int64_t v162 = v161 + 8; // 0x40de8f\n            *(int64_t *)(v161 + v157) = *(int64_t *)(v160 + v161);\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n            while ((v159 & -8) > (int32_t)v162) {\n                // 0x40de8d\n                v161 = v162 & 0xffffffff;\n                v162 = v161 + 8;\n                *(int64_t *)(v161 + v157) = *(int64_t *)(v160 + v161);\n                v66 = v151;\n                v65 = 0;\n                v62 = v155;\n            }\n        }\n    } else {\n        if ((v8 & 4) != 0) {\n            // 0x40df57\n            *(int32_t *)v155 = *(int32_t *)v7;\n            *(int32_t *)(v154 + v155 - 4) = *(int32_t *)(v154 + v7 - 4);\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n        } else {\n            // 0x40dddf\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n            if (v156 != 0) {\n                // 0x40dde3\n                *(char *)v155 = *(char *)v7;\n                v66 = v151;\n                v65 = 0;\n                v62 = v155;\n                if ((v8 & 2) != 0) {\n                    // 0x40de03\n                    *(int16_t *)(v154 + v155 - 2) = *(int16_t *)(v154 + v7 - 2);\n                    v66 = v151;\n                    v65 = 0;\n                    v62 = v155;\n                }\n            }\n        }\n    }\n    goto lab_0x40ddf0;\n  lab_0x40dc5a:\n    // 0x40dc5a\n    v94 = v143;\n    v95 = v163;\n    v96 = v143 + -1 - v8;\n    goto lab_0x40d860;\n  lab_0x40db30:;\n    int32_t * v164 = (int32_t *)(v5 + 48); // 0x40db30\n    if (*v164 == 0 == (int32_t)v113 == 1) {\n        int64_t v165 = v4 + 1; // 0x40dd54\n        *(char *)v4 = 107;\n        v166 = v165;\n        if ((int32_t)v111 == 0) {\n            // 0x40dd63\n            v4 = v165;\n            // 0x40d8a8\n            *(char *)v4 = 0;\n            return result;\n        }\n    } else {\n        int64_t v167 = v4; // 0x40db46\n        char v168 = *(char *)((0x100000000 * v113 >> 32) + (int64_t)&g33); // 0x40db4a\n        int64_t v169 = v167 + 1; // 0x40db51\n        *(char *)v167 = v168;\n        if ((int32_t)v111 == 0) {\n            // 0x40dd63\n            v4 = v169;\n            // 0x40d8a8\n            *(char *)v4 = 0;\n            return result;\n        }\n        // 0x40db5f\n        v166 = v169;\n        if (*v164 != 0) {\n            // 0x40dd10\n            *(char *)v169 = 105;\n            v166 = v167 + 2;\n        }\n    }\n    goto lab_0x40db6d;\n  lab_0x40db6d:\n    // 0x40db6d\n    *(char *)v166 = 66;\n    v4 = v166 + 1;\n    // 0x40d8a8\n    *(char *)v4 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dfa0",
            "funcStartAddr": "40dfa0",
            "funcEndAddr": "40e157",
            "decompiledFuncCode": "int64_t function_40dfa0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = a1; // 0x40dfb6\n    if (a1 == 0) {\n        char * env_val = getenv(\"BLOCK_SIZE\"); // 0x40e0c5\n        v1 = (int64_t)env_val;\n        if (env_val == NULL) {\n            char * env_val2 = getenv(\"BLOCKSIZE\"); // 0x40e0db\n            v1 = (int64_t)env_val2;\n            if (env_val2 == NULL) {\n                // 0x40e0ec\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40e142\n                    *a3 = 1024;\n                    *(int32_t *)a2 = 0;\n                } else {\n                    // 0x40e0fb\n                    *a3 = 512;\n                    *(int32_t *)a2 = 0;\n                }\n                // 0x40dffe\n                return 0;\n            }\n        }\n    }\n    char v2 = *(char *)v1; // 0x40dfbe\n    int64_t v3 = v1 + (int64_t)(v2 == 39);\n    int64_t v4 = v2 != 39 ? 0 : 4;\n    int64_t v5 = function_40acf0(v3, g32, (int64_t *)&g31, 4); // 0x40dfde\n    if ((int32_t)v5 >= 0) {\n        // 0x40dfe7\n        *a3 = 1;\n        int32_t v6 = *(int32_t *)((0x100000000 * v5 >> 30) + (int64_t)&g31); // 0x40dff1\n        *(int32_t *)a2 = v6 | (int32_t)v4;\n        // 0x40dffe\n        return 0;\n    }\n    // 0x40e010\n    int64_t v7; // bp-48, 0x40dfa0\n    int64_t v8; // 0x40dfa0\n    int64_t result = function_4132b0(v3, (int32_t)(int64_t)&v7, 0, a3, (int64_t *)\"eEgGkKmMpPtTyYzZ0\", v8); // 0x40e023\n    if ((int32_t)result != 0) {\n        // 0x40e084\n        *(int32_t *)a2 = 0;\n        // 0x40e08d\n        *a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    int64_t v9 = (int64_t)*(char *)v3 + 0xffffffd0; // 0x40e02f\n    int64_t v10 = v9 & 0xffffffff; // 0x40e02f\n    int64_t v11 = v10; // 0x40e035\n    int64_t v12 = v4; // 0x40e035\n    int64_t v13; // 0x40dfa0\n    if ((char)v9 < 10) {\n        goto lab_0x40e084;\n    } else {\n        // 0x40e037\n        v13 = v10;\n        if (v3 != v7) {\n            int64_t v14 = v3 + 1; // 0x40e059\n            int64_t v15 = (int64_t)*(char *)v14 + 0xffffffd0; // 0x40e060\n            while ((char)v15 >= 10) {\n                // 0x40e050\n                if (v14 == v7) {\n                    // 0x40e118\n                    v13 = v15 & 0xffffffff;\n                    goto lab_0x40e118_2;\n                }\n                v14++;\n                v15 = (int64_t)*(char *)v14 + 0xffffffd0;\n            }\n            // 0x40e084\n            v11 = v15 & 0xffffffff;\n            v12 = v4;\n            goto lab_0x40e084;\n        } else {\n            goto lab_0x40e118_2;\n        }\n    }\n  lab_0x40e084:\n    // 0x40e084\n    *(int32_t *)a2 = (int32_t)v12;\n    if (v11 == 0) {\n        // 0x40e08d\n        *a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    // 0x40dffe\n    return result;\n  lab_0x40e118_2:;\n    // 0x40e118\n    int64_t v16; // 0x40dfa0\n    if (*(char *)(v7 - 1) == 66) {\n        int64_t v17 = v4 | 384; // 0x40e130\n        v11 = v13;\n        v12 = v17;\n        v16 = v17;\n        if (*(char *)(v7 - 2) != 105) {\n            goto lab_0x40e084;\n        } else {\n            goto lab_0x40e122;\n        }\n    } else {\n        // 0x40e11e\n        v16 = v4 | 128;\n        goto lab_0x40e122;\n    }\n  lab_0x40e122:\n    // 0x40e122\n    v11 = v13;\n    v12 = v16 & 0xffffffdf | 32;\n    goto lab_0x40e084;\n}\n"
        },
        {
            "funcName": "function_40e160",
            "funcStartAddr": "40e160",
            "funcEndAddr": "40e1f0",
            "decompiledFuncCode": "int64_t function_40e160(int64_t a1) {\n    int32_t * v1 = g188; // 0x40e164\n    int32_t uid = a1;\n    int64_t v2; // 0x40e1e1\n    if (v1 != NULL) {\n        int64_t v3 = (int64_t)v1; // 0x40e164\n        int64_t v4 = v3; // 0x40e172\n        if (*v1 == uid) {\n            // 0x40e1df\n            v2 = v3 + 16;\n            return *(char *)v2 == 0 ? 0 : v2;\n        }\n        v4 += 8;\n        while (v4 != 0) {\n            int64_t v5 = v4; // 0x40e182\n            if (*(int32_t *)v4 == uid) {\n                // 0x40e1df\n                v2 = v5 + 16;\n                return *(char *)v2 == 0 ? 0 : v2;\n            }\n            v4 += 8;\n        }\n    }\n    struct passwd * v6 = getpwuid(uid); // 0x40e195\n    int64_t v7 = 24; // 0x40e1a2\n    int64_t str = (int64_t)&g24; // 0x40e1a2\n    if (v6 != NULL) {\n        // 0x40e1a4\n        str = *(int64_t *)v6;\n        v7 = (int64_t)strlen((char *)str) + 24 & -8;\n    }\n    int64_t v8 = function_412980(v7); // 0x40e1b7\n    int32_t * v9 = (int32_t *)v8; // 0x40e1bf\n    *v9 = uid;\n    strcpy((char *)(v8 + 16), (char *)str);\n    int32_t * v10 = g188; // 0x40e1cd\n    g188 = v9;\n    *(int64_t *)(v8 + 8) = (int64_t)v10;\n    // 0x40e1df\n    v2 = v8 + 16;\n    return *(char *)v2 == 0 ? 0 : v2;\n}\n"
        },
        {
            "funcName": "function_40e1f0",
            "funcStartAddr": "40e1f0",
            "funcEndAddr": "40e2e9",
            "decompiledFuncCode": "int64_t function_40e1f0(int64_t str2) {\n    int32_t * v1 = g188; // 0x40e1f7\n    int64_t v2; // 0x40e1f0\n    char v3 = v2;\n    if (v1 != NULL) {\n        int64_t v4 = (int64_t)v1;\n        char * str = (char *)(v4 + 16); // 0x40e219\n        int64_t result; // 0x40e1f0\n        if (*str == v3) {\n            // 0x40e21f\n            result = v4;\n            if (strcmp(str, (char *)str2) == 0) {\n                // 0x40e22f\n                return result;\n            }\n        }\n        int64_t v5 = *(int64_t *)(v4 + 8); // 0x40e210\n        while (v5 != 0) {\n            // 0x40e219\n            v4 = v5;\n            str = (char *)(v4 + 16);\n            if (*str == v3) {\n                // 0x40e21f\n                result = v4;\n                if (strcmp(str, (char *)str2) == 0) {\n                    // 0x40e22f\n                    return result;\n                }\n            }\n            // 0x40e210\n            v5 = *(int64_t *)(v4 + 8);\n        }\n    }\n    int32_t v6 = g187; // 0x40e240\n    char * name; // 0x40e1f0\n    if (v6 == 0) {\n        // 0x40e240\n        name = (char *)str2;\n    } else {\n        char * str4 = (char *)str2;\n        int64_t v7 = v6; // 0x40e251\n        char * str3 = (char *)(v7 + 16); // 0x40e261\n        if (*str3 == v3) {\n            // 0x40e267\n            if (strcmp(str3, str4) == 0) {\n                // 0x40e22f\n                return 0;\n            }\n        }\n        // 0x40e258\n        v7 += 8;\n        name = str4;\n        while (v7 != 0) {\n            // 0x40e261\n            str3 = (char *)(v7 + 16);\n            if (*str3 == v3) {\n                // 0x40e267\n                if (strcmp(str3, str4) == 0) {\n                    // 0x40e22f\n                    return 0;\n                }\n            }\n            // 0x40e258\n            v7 += 8;\n            name = str4;\n        }\n    }\n    struct passwd * v8 = getpwnam(name); // 0x40e283\n    int64_t result2 = function_412980((int64_t)strlen(name) + 24 & -8); // 0x40e29b\n    strcpy((char *)(result2 + 16), name);\n    if (v8 == NULL) {\n        int32_t v9 = g187; // 0x40e2d0\n        g187 = result2;\n        *(int64_t *)(result2 + 8) = (int64_t)v9;\n        return 0;\n    }\n    int32_t * v10 = (int32_t *)result2; // 0x40e2b7\n    *v10 = *(int32_t *)((int64_t)v8 + 16);\n    int32_t * v11 = g188; // 0x40e2b9\n    g188 = v10;\n    *(int64_t *)(result2 + 8) = (int64_t)v11;\n    // 0x40e22f\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e2f0",
            "funcStartAddr": "40e2f0",
            "funcEndAddr": "40e380",
            "decompiledFuncCode": "int64_t function_40e2f0(int64_t a1) {\n    int32_t * v1 = g186; // 0x40e2f4\n    int32_t gid = a1;\n    int64_t v2; // 0x40e371\n    if (v1 != NULL) {\n        int64_t v3 = (int64_t)v1; // 0x40e2f4\n        int64_t v4 = v3; // 0x40e302\n        if (*v1 == gid) {\n            // 0x40e36f\n            v2 = v3 + 16;\n            return *(char *)v2 == 0 ? 0 : v2;\n        }\n        v4 += 8;\n        while (v4 != 0) {\n            int64_t v5 = v4; // 0x40e312\n            if (*(int32_t *)v4 == gid) {\n                // 0x40e36f\n                v2 = v5 + 16;\n                return *(char *)v2 == 0 ? 0 : v2;\n            }\n            v4 += 8;\n        }\n    }\n    struct group * v6 = getgrgid(gid); // 0x40e325\n    int64_t v7 = 24; // 0x40e332\n    int64_t str = (int64_t)&g24; // 0x40e332\n    if (v6 != NULL) {\n        // 0x40e334\n        str = *(int64_t *)v6;\n        v7 = (int64_t)strlen((char *)str) + 24 & -8;\n    }\n    int64_t v8 = function_412980(v7); // 0x40e347\n    int32_t * v9 = (int32_t *)v8; // 0x40e34f\n    *v9 = gid;\n    strcpy((char *)(v8 + 16), (char *)str);\n    int32_t * v10 = g186; // 0x40e35d\n    g186 = v9;\n    *(int64_t *)(v8 + 8) = (int64_t)v10;\n    // 0x40e36f\n    v2 = v8 + 16;\n    return *(char *)v2 == 0 ? 0 : v2;\n}\n"
        },
        {
            "funcName": "function_40e380",
            "funcStartAddr": "40e380",
            "funcEndAddr": "40e479",
            "decompiledFuncCode": "int64_t function_40e380(int64_t str2) {\n    int32_t * v1 = g186; // 0x40e387\n    int64_t v2; // 0x40e380\n    char v3 = v2;\n    if (v1 != NULL) {\n        int64_t v4 = (int64_t)v1;\n        char * str = (char *)(v4 + 16); // 0x40e3a9\n        int64_t result; // 0x40e380\n        if (*str == v3) {\n            // 0x40e3af\n            result = v4;\n            if (strcmp(str, (char *)str2) == 0) {\n                // 0x40e3bf\n                return result;\n            }\n        }\n        int64_t v5 = *(int64_t *)(v4 + 8); // 0x40e3a0\n        while (v5 != 0) {\n            // 0x40e3a9\n            v4 = v5;\n            str = (char *)(v4 + 16);\n            if (*str == v3) {\n                // 0x40e3af\n                result = v4;\n                if (strcmp(str, (char *)str2) == 0) {\n                    // 0x40e3bf\n                    return result;\n                }\n            }\n            // 0x40e3a0\n            v5 = *(int64_t *)(v4 + 8);\n        }\n    }\n    int32_t v6 = g185; // 0x40e3d0\n    char * name; // 0x40e380\n    if (v6 == 0) {\n        // 0x40e3d0\n        name = (char *)str2;\n    } else {\n        char * str4 = (char *)str2;\n        int64_t v7 = v6; // 0x40e3e1\n        char * str3 = (char *)(v7 + 16); // 0x40e3f1\n        if (*str3 == v3) {\n            // 0x40e3f7\n            if (strcmp(str3, str4) == 0) {\n                // 0x40e3bf\n                return 0;\n            }\n        }\n        // 0x40e3e8\n        v7 += 8;\n        name = str4;\n        while (v7 != 0) {\n            // 0x40e3f1\n            str3 = (char *)(v7 + 16);\n            if (*str3 == v3) {\n                // 0x40e3f7\n                if (strcmp(str3, str4) == 0) {\n                    // 0x40e3bf\n                    return 0;\n                }\n            }\n            // 0x40e3e8\n            v7 += 8;\n            name = str4;\n        }\n    }\n    struct group * v8 = getgrnam(name); // 0x40e413\n    int64_t result2 = function_412980((int64_t)strlen(name) + 24 & -8); // 0x40e42b\n    strcpy((char *)(result2 + 16), name);\n    if (v8 == NULL) {\n        int32_t v9 = g185; // 0x40e460\n        g185 = result2;\n        *(int64_t *)(result2 + 8) = (int64_t)v9;\n        return 0;\n    }\n    int32_t * v10 = (int32_t *)result2; // 0x40e447\n    *v10 = *(int32_t *)((int64_t)v8 + 16);\n    int32_t * v11 = g186; // 0x40e449\n    g186 = v10;\n    *(int64_t *)(result2 + 8) = (int64_t)v11;\n    // 0x40e3bf\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e480",
            "funcStartAddr": "40e480",
            "funcEndAddr": "40e51c",
            "decompiledFuncCode": "int64_t function_40e480(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x40e480\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x40e4a5\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x40e4d6\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x40e4f8\n    int64_t v4 = v2 - 1; // 0x40e508\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x40e510\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e520",
            "funcStartAddr": "40e520",
            "funcEndAddr": "40e568",
            "decompiledFuncCode": "int64_t function_40e520(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x40e520\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x40e532\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40e53b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x40e564\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e570",
            "funcStartAddr": "40e570",
            "funcEndAddr": "40e90b",
            "decompiledFuncCode": "int64_t function_40e570(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int32_t a5, uint32_t a6) {\n    uint64_t v1 = (int64_t)a4;\n    uint64_t v2 = (int64_t)a6; // 0x40e57c\n    char * str = (char *)a1; // 0x40e596\n    int32_t len = strlen(str); // 0x40e596\n    int64_t v3 = len; // 0x40e596\n    int32_t * v4 = NULL; // 0x40e5a2\n    int64_t v5 = a1; // 0x40e5a2\n    int64_t v6 = 0; // 0x40e5a2\n    int64_t v7 = v3; // 0x40e5a2\n    int64_t v8 = v3; // 0x40e5a2\n    int64_t v9; // 0x40e570\n    int64_t result; // 0x40e570\n    int64_t v10; // 0x40e570\n    int64_t v11; // 0x40e570\n    int32_t * v12; // 0x40e570\n    int32_t v13; // 0x40e570\n    int64_t * mem; // 0x40e754\n    int64_t v14; // 0x40e780\n    if ((a6 & 2) == 0) {\n        // 0x40e6f0\n        v4 = NULL;\n        v5 = a1;\n        v6 = 0;\n        v7 = v3;\n        v8 = v3;\n        if (__ctype_get_mb_cur_max() < 2) {\n            goto lab_0x40e5b6;\n        } else {\n            int32_t v15 = mbstowcs(NULL, str, 0); // 0x40e70b\n            if (v15 != -1) {\n                int32_t n = v15 + 1; // 0x40e740\n                int32_t size = 4 * n; // 0x40e74f\n                mem = malloc(size);\n                if (mem == NULL) {\n                    // 0x40e86a\n                    v4 = (int32_t *)mem;\n                    v5 = a1;\n                    v6 = 0;\n                    v7 = v3;\n                    v8 = v3;\n                    v12 = NULL;\n                    v9 = 0;\n                    result = -1;\n                    if (v2 % 2 != 0) {\n                        goto lab_0x40e5b6;\n                    } else {\n                        goto lab_0x40e68e;\n                    }\n                } else {\n                    int32_t v16 = mbstowcs((int32_t *)mem, str, n); // 0x40e772\n                    v4 = (int32_t *)mem;\n                    v5 = a1;\n                    v6 = 0;\n                    v7 = v3;\n                    v8 = v3;\n                    if (v16 == 0) {\n                        goto lab_0x40e5b6;\n                    } else {\n                        // 0x40e780\n                        v14 = (int64_t)mem;\n                        *(int32_t *)((int64_t)size - 4 + v14) = 0;\n                        int32_t wc = *(int32_t *)mem; // 0x40e791\n                        if (wc == 0) {\n                            // 0x40e87f\n                            v11 = wcswidth((int32_t *)mem, n);\n                            goto lab_0x40e890;\n                        } else {\n                            int32_t v17 = 0; // 0x40e7b9\n                            if (iswprint(wc) == 0) {\n                                // 0x40e7bb\n                                *(int32_t *)v14 = 0xfffd;\n                                v17 = 1;\n                            }\n                            int32_t v18 = v17;\n                            int64_t v19 = v14 + 4; // 0x40e7c6\n                            int32_t v20 = *(int32_t *)v19; // 0x40e7ca\n                            int32_t wc2 = v20; // 0x40e7ce\n                            while (v20 != 0) {\n                                int64_t v21 = v19;\n                                v17 = v18;\n                                if (iswprint(wc2) == 0) {\n                                    // 0x40e7bb\n                                    *(int32_t *)v21 = 0xfffd;\n                                    v17 = 1;\n                                }\n                                // 0x40e7c6\n                                v18 = v17;\n                                v19 = v21 + 4;\n                                v20 = *(int32_t *)v19;\n                                wc2 = v20;\n                            }\n                            int64_t v22 = wcswidth((int32_t *)mem, n); // 0x40e7d7\n                            v11 = v22;\n                            if ((char)v18 == 0) {\n                                goto lab_0x40e890;\n                            } else {\n                                // 0x40e7ea\n                                v10 = v22;\n                                v13 = wcstombs(NULL, (int32_t *)mem, 0);\n                                goto lab_0x40e800;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40e716\n                v4 = NULL;\n                v5 = a1;\n                v6 = 0;\n                v7 = v3;\n                v8 = v3;\n                v12 = NULL;\n                v9 = 0;\n                result = -1;\n                if (v2 % 2 != 0) {\n                    goto lab_0x40e5b6;\n                } else {\n                    goto lab_0x40e68e;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40e5b6;\n    }\n  lab_0x40e5b6:;\n    int32_t * v23 = v4; // 0x40e5bd\n    int64_t v24 = v5; // 0x40e5bd\n    int64_t v25 = v1; // 0x40e5bd\n    int64_t v26 = v6; // 0x40e5bd\n    int64_t v27 = v1; // 0x40e5bd\n    int32_t * v28 = v4; // 0x40e5bd\n    int64_t v29 = v5; // 0x40e5bd\n    int64_t v30 = v6; // 0x40e5bd\n    int64_t v31 = v7; // 0x40e5bd\n    int64_t v32 = v8; // 0x40e5bd\n    if (v8 <= v1) {\n        goto lab_0x40e6bb;\n    } else {\n        goto lab_0x40e5c8;\n    }\n  lab_0x40e6bb:\n    // 0x40e6bb\n    v23 = v28;\n    v24 = v29;\n    v25 = v32;\n    v26 = v30;\n    v27 = v31;\n    int64_t v33; // 0x40e570\n    int64_t v34; // 0x40e570\n    int64_t v35; // 0x40e570\n    int64_t v36; // 0x40e570\n    int64_t v37; // 0x40e570\n    int64_t v38; // 0x40e570\n    int64_t v39; // 0x40e570\n    int32_t * v40; // 0x40e570\n    int32_t * v41; // 0x40e570\n    int64_t v42; // 0x40e570\n    int64_t v43; // 0x40e570\n    if (v32 >= v1) {\n        goto lab_0x40e5c8;\n    } else {\n        int64_t v44 = v1 - v32; // 0x40e6ce\n        *a4 = v32;\n        v40 = v28;\n        v42 = v29;\n        v38 = v44;\n        v33 = v30;\n        v36 = v31;\n        v41 = v28;\n        v43 = v29;\n        v39 = 0;\n        v34 = v30;\n        v35 = v44;\n        v37 = v31;\n        if (a5 != 0) {\n            goto lab_0x40e5d8;\n        } else {\n            goto lab_0x40e5ec;\n        }\n    }\n  lab_0x40e5c8:\n    // 0x40e5c8\n    *a4 = v25;\n    v40 = v23;\n    v42 = v24;\n    v38 = 0;\n    v33 = v26;\n    v36 = v27;\n    v41 = v23;\n    v43 = v24;\n    v39 = 0;\n    v34 = v26;\n    v35 = 0;\n    v37 = v27;\n    if (a5 == 0) {\n        goto lab_0x40e5ec;\n    } else {\n        goto lab_0x40e5d8;\n    }\n  lab_0x40e5ec:;\n    uint64_t v45 = v37;\n    int64_t v46 = (v2 & 4) == 0 ? v39 : 0;\n    int64_t v47 = (v2 & 8) != 0 ? 0 : v35; // 0x40e608\n    if (a3 != 0) {\n        uint64_t v48 = a2 - 1 + a3; // 0x40e611\n        if (v48 > a2 == (v46 != 0)) {\n            int64_t v49 = -v46; // 0x40e63b\n            int64_t v50 = a2; // 0x40e570\n            int64_t v51 = v50;\n            int64_t v52 = v51 + 1; // 0x40e62d\n            *(char *)v51 = 32;\n            v50 = v52;\n            while (v48 > v52 == (a2 - v52 != v49)) {\n                // 0x40e62d\n                v51 = v50;\n                v52 = v51 + 1;\n                *(char *)v51 = 32;\n                v50 = v52;\n            }\n        }\n        // 0x40e640\n        *(char *)a2 = 0;\n        uint64_t v53 = v48 - a2; // 0x40e64b\n        int64_t v54 = v53 > v45 ? v45 : v53; // 0x40e651\n        int64_t v55 = (int64_t)mempcpy((int64_t *)a2, (int64_t *)v43, (int32_t)v54); // 0x40e655\n        int64_t v56 = v55; // 0x40e660\n        if (v47 != 0 == v48 > v55) {\n            int64_t v57 = v55 + 1; // 0x40e675\n            *(char *)v55 = 32;\n            v56 = v57;\n            while (v48 > v57 == (v47 - v57 != -v55)) {\n                int64_t v58 = v57;\n                v57 = v58 + 1;\n                *(char *)v58 = 32;\n                v56 = v57;\n            }\n        }\n        // 0x40e688\n        *(char *)v56 = 0;\n    }\n    // 0x40e68b\n    v12 = v41;\n    v9 = v34;\n    result = v45 + v46 + v47;\n    goto lab_0x40e68e;\n  lab_0x40e5d8:\n    // 0x40e5d8\n    v41 = v40;\n    v43 = v42;\n    v39 = v38;\n    v34 = v33;\n    v35 = 0;\n    v37 = v36;\n    if (a5 != 1) {\n        int64_t v72 = v38 / 2; // 0x40e5e6\n        v41 = v40;\n        v43 = v42;\n        v39 = v38 % 2 + v72;\n        v34 = v33;\n        v35 = v72;\n        v37 = v36;\n    }\n    goto lab_0x40e5ec;\n  lab_0x40e68e:\n    // 0x40e68e\n    free((int64_t *)v12);\n    free((int64_t *)v9);\n    return result;\n  lab_0x40e890:\n    // 0x40e890\n    v28 = (int32_t *)mem;\n    v29 = a1;\n    v30 = 0;\n    v31 = v3;\n    v32 = v11;\n    v10 = v11;\n    v13 = len;\n    if (v11 <= v1) {\n        goto lab_0x40e6bb;\n    } else {\n        goto lab_0x40e800;\n    }\n  lab_0x40e800:;\n    int32_t size2 = v13 + 1;\n    int64_t * mem2 = malloc(size2); // 0x40e805\n    int64_t v59 = (int64_t)mem2; // 0x40e805\n    if (mem2 == NULL) {\n        // 0x40e8e0\n        v4 = (int32_t *)mem;\n        v5 = a1;\n        v6 = v59;\n        v7 = v3;\n        v8 = v10;\n        v12 = (int32_t *)mem;\n        v9 = v59;\n        result = -1;\n        if (v2 % 2 != 0) {\n            goto lab_0x40e5b6;\n        } else {\n            goto lab_0x40e68e;\n        }\n    } else {\n        int32_t v60 = *(int32_t *)mem; // 0x40e81e\n        int32_t * v61 = (int32_t *)mem; // 0x40e828\n        int64_t v62 = 0; // 0x40e828\n        if (v60 != 0) {\n            int64_t v63 = 0;\n            int64_t v64 = v14;\n            int32_t v65 = wcwidth(v60); // 0x40e852\n            int64_t v66; // 0x40e570\n            if (v65 != -1) {\n                // 0x40e838\n                v66 = v65;\n            } else {\n                // 0x40e85c\n                *(int32_t *)v64 = 0xfffd;\n                v66 = 1;\n            }\n            int64_t v67 = v66 + v63; // 0x40e83a\n            while (v67 <= v1) {\n                int64_t v68 = v64 + 4; // 0x40e844\n                int32_t * v69 = (int32_t *)v68;\n                int32_t v70 = *v69; // 0x40e848\n                v61 = v69;\n                v62 = v67;\n                if (v70 == 0) {\n                    goto lab_0x40e8b8;\n                }\n                v63 = v67;\n                v64 = v68;\n                v65 = wcwidth(v70);\n                if (v65 != -1) {\n                    // 0x40e838\n                    v66 = v65;\n                } else {\n                    // 0x40e85c\n                    *(int32_t *)v64 = 0xfffd;\n                    v66 = 1;\n                }\n                // 0x40e83a\n                v67 = v66 + v63;\n            }\n            // 0x40e8b8\n            v61 = (int32_t *)v64;\n            v62 = v63;\n        }\n      lab_0x40e8b8:\n        // 0x40e8b8\n        *v61 = 0;\n        int32_t v71 = wcstombs((char *)mem2, (int32_t *)mem, size2); // 0x40e8cb\n        v4 = (int32_t *)mem;\n        v5 = v59;\n        v6 = v59;\n        v7 = v71;\n        v8 = v62;\n        goto lab_0x40e5b6;\n    }\n}\n"
        },
        {
            "funcName": "function_40e910",
            "funcStartAddr": "40e910",
            "funcEndAddr": "40e9ad",
            "decompiledFuncCode": "int64_t function_40e910(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t * v1 = (int64_t *)a2;\n    uint64_t v2 = a2 + 1; // 0x40e938\n    int64_t * v3 = (int64_t *)0;\n    int64_t * mem = realloc(v3, (int32_t)v2); // 0x40e942\n    while (mem != NULL) {\n        int64_t v4 = (int64_t)mem;\n        *v1 = a2;\n        int64_t v5 = function_40e570(a1, v4, v2, v1, (int32_t)a3, (int32_t)a4); // 0x40e969\n        int64_t result; // 0x40e910\n        if (v5 == -1) {\n            // 0x40e9a0\n            free(mem);\n            result = 0;\n            return result;\n        }\n        // 0x40e974\n        result = v4;\n        if (v2 > v5) {\n            // 0x40e97c\n            return result;\n        }\n        v2 = v5 + 1;\n        v3 = (int64_t *)v4;\n        mem = realloc(v3, (int32_t)v2);\n    }\n    // 0x40e990\n    free(v3);\n    // 0x40e97c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40e9b0",
            "funcStartAddr": "40e9b0",
            "funcEndAddr": "40eb63",
            "decompiledFuncCode": "int64_t function_40e9b0(uint64_t a1, int64_t a2, uint32_t a3) {\n    uint64_t v1 = a2 + a1; // 0x40e9b9\n    int64_t v2; // 0x40e9b0\n    int64_t v3; // 0x40e9b0\n    int64_t v4; // 0x40e9b0\n    int64_t v5; // 0x40e9b0\n    int64_t v6; // 0x40e9b0\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x40eaf0\n        if (v1 <= a1) {\n            // 0x40ead6\n            return 0;\n        }\n        int16_t * v7 = *__ctype_b_loc(); // 0x40eb04\n        v6 = a1;\n        v3 = 0;\n        while (true) {\n          lab_0x40eb10:\n            // 0x40eb10\n            v4 = v3;\n            unsigned char v8 = *(char *)v6; // 0x40eb14\n            int16_t v9 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)v7); // 0x40eb18\n            if ((v9 & 0x4000) != 0) {\n                goto lab_0x40eb2a;\n            } else {\n                // 0x40eb21\n                v2 = 0xffffffff;\n                if ((a3 & 2) != 0) {\n                    // break -> 0x40ead6\n                    break;\n                }\n                // 0x40eb26\n                v5 = v4;\n                if ((v9 & 2) != 0) {\n                    goto lab_0x40eb37;\n                } else {\n                    goto lab_0x40eb2a;\n                }\n            }\n        }\n      lab_0x40ead6_7:\n        // 0x40ead6\n        return v2 & 0xffffffff;\n    }\n    // 0x40e9d7\n    if (v1 <= a1) {\n        // 0x40ead6\n        return 0;\n    }\n    uint64_t v10 = (int64_t)a3; // 0x40e9b2\n    int64_t v11 = a1;\n    int64_t v12 = 0; // 0x40e9b0\n    int64_t v13; // 0x40e9b0\n    int64_t v14; // 0x40e9b0\n    int64_t v15; // 0x40e9b0\n    int64_t v16; // 0x40e9b0\n    while (true) {\n      lab_0x40ea0c:\n        // 0x40ea0c\n        v14 = v12;\n        v16 = v11;\n        char v17 = *(char *)v16; // 0x40ea0c\n        if (v17 < 64) {\n            // 0x40e9f0\n            v15 = v16;\n            v13 = v14;\n            if (v17 > 36 || (v17 & -4) == 32) {\n                goto lab_0x40e9fb;\n            } else {\n                goto lab_0x40ea22;\n            }\n        } else {\n            if (v17 == 64) {\n                goto lab_0x40ea22;\n            } else {\n                // 0x40ea17\n                v15 = v16;\n                v13 = v14;\n                if (v17 < 96 || v17 < 127) {\n                    goto lab_0x40e9fb;\n                } else {\n                    goto lab_0x40ea22;\n                }\n            }\n        }\n    }\n  lab_0x40ead6_7:\n    // 0x40ead6\n    return v2 & 0xffffffff;\n  lab_0x40eb2a:\n    // 0x40eb2a\n    v2 = v4;\n    if ((int32_t)v4 == 0x7fffffff) {\n        return v2 & 0xffffffff;\n    }\n    // 0x40eb33\n    v5 = v4 + 1 & 0xffffffff;\n    goto lab_0x40eb37;\n  lab_0x40eb37:;\n    int64_t v18 = v6 + 1; // 0x40eb10\n    v2 = v5;\n    v6 = v18;\n    v3 = v5;\n    if (v1 == v18) {\n        // break -> 0x40ead6\n        goto lab_0x40ead6_7;\n    }\n    goto lab_0x40eb10;\n  lab_0x40e9fb:;\n    int64_t v19 = v15 + 1; // 0x40e9ff\n    v12 = v13 + 1 & 0xffffffff;\n  lab_0x40ea03:\n    // 0x40ea03\n    v11 = v19;\n    if (v11 >= v1) {\n        // break -> 0x40ead6\n        goto lab_0x40ead6_7;\n    }\n    goto lab_0x40ea0c;\n  lab_0x40ea22:;\n    int64_t ps = 0; // bp-64, 0x40ea22\n    int64_t v20 = v16; // 0x40ea2b\n    int64_t v21 = v14; // 0x40ea2b\n    int64_t v22; // 0x40e9b0\n    int64_t v23; // 0x40e9b0\n    while (true) {\n      lab_0x40ea54:\n        // 0x40ea54\n        v22 = v21;\n        v23 = v20;\n        int32_t wc; // bp-68, 0x40e9b0\n        int64_t v24 = function_416e80((int64_t *)&wc, v23, v1 - v23); // 0x40ea67\n        switch (v24) {\n            case -1: {\n                goto lab_0x40eac0;\n            }\n            case -2: {\n                // 0x40eb40\n                v2 = 0xffffffff;\n                if (v10 % 2 == 0) {\n                    // 0x40ea03\n                    v2 = v22 + 1 & 0xffffffff;\n                }\n                // 0x40ead6\n                return v2 & 0xffffffff;\n            }\n            default: {\n                int32_t v25 = wcwidth(wc); // 0x40ea8a\n                int64_t v26; // 0x40e9b0\n                if (v25 >= 0) {\n                    int64_t v27 = v25; // 0x40ea8a\n                    v2 = 0x7fffffff;\n                    if ((0x7fffffff - v22 & 0xffffffff) < v27) {\n                        // break (via goto) -> 0x40ead6\n                        goto lab_0x40ead6_7;\n                    }\n                    // 0x40ea40\n                    v26 = v22 + v27 & 0xffffffff;\n                } else {\n                    // 0x40ea93\n                    v2 = 0xffffffff;\n                    if ((v10 & 2) != 0) {\n                        // break (via goto) -> 0x40ead6\n                        goto lab_0x40ead6_7;\n                    }\n                    // 0x40ea99\n                    v26 = v22;\n                    if (iswcntrl(wc) == 0) {\n                        // 0x40eaa6\n                        v2 = 0x7fffffff;\n                        if ((int32_t)v22 == 0x7fffffff) {\n                            // break (via goto) -> 0x40ead6\n                            goto lab_0x40ead6_7;\n                        }\n                        // 0x40eab3\n                        v26 = v22 + 1 & 0xffffffff;\n                    }\n                }\n                int64_t v28 = (v24 == 0 ? 1 : v24) + v23; // 0x40ea48\n                int32_t v29 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40ea4b\n                v19 = v28;\n                v12 = v26;\n                v20 = v28;\n                v21 = v26;\n                if (v29 != 0) {\n                    goto lab_0x40ea03;\n                }\n                goto lab_0x40ea54;\n            }\n        }\n    }\n  lab_0x40eac0:\n    // 0x40eac0\n    v15 = v23;\n    v13 = v22;\n    v2 = 0xffffffff;\n    if (v10 % 2 != 0) {\n        // break -> 0x40ead6\n        goto lab_0x40ead6_7;\n    }\n    goto lab_0x40e9fb;\n}\n"
        },
        {
            "funcName": "function_40eb70",
            "funcStartAddr": "40eb70",
            "funcEndAddr": "40eb93",
            "decompiledFuncCode": "int64_t function_40eb70(int64_t str, int32_t a2) {\n    // 0x40eb70\n    return function_40e9b0(str, (int64_t)strlen((char *)str), a2);\n}\n"
        },
        {
            "funcName": "function_40eba0",
            "funcStartAddr": "40eba0",
            "funcEndAddr": "40edc1",
            "decompiledFuncCode": "int64_t function_40eba0(int64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    // 0x40eba0\n    if (a2 < 3) {\n        int64_t result2; // 0x40eba0\n        if (a2 != 2 || (int32_t)result2 < 1) {\n            // 0x40ebc6\n            int64_t result; // 0x40eba0\n            return result;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 8); // 0x40ebd8\n        *(int64_t *)a1 = *v1;\n        *v1 = a1;\n        return result2;\n    }\n    // 0x40ec08\n    function_40eba0(a1, a2 % 2, a3, a4);\n    int64_t v2; // 0x40eba0\n    int64_t v3; // 0x40eba0\n    int64_t v4; // 0x40eba0\n    int64_t v5; // 0x40eba0\n    int64_t v6; // 0x40eba0\n    int64_t v7; // 0x40eba0\n    int64_t v8; // 0x40eba0\n    int64_t v9; // 0x40ed02\n    int64_t v10; // 0x40ed09\n    if (a2 != 3) {\n        // 0x40ecf0\n        v9 = a2 / 4;\n        v10 = 8 * v9 + a1;\n        function_40eba0(v10, -v9, a3, a4);\n        int64_t v11 = function_40eba0(a1, v9, a3, a4); // 0x40ed29\n        int64_t v12 = a3 + 8; // 0x40ed46\n        v6 = 0;\n        v4 = a3;\n        v2 = v12;\n        if ((int32_t)v11 < 1) {\n            // 0x40ed70\n            *(int64_t *)a3 = a1;\n            v3 = v12;\n            v8 = 0;\n            v7 = 1;\n            if ((a2 & -4) == 4) {\n                goto lab_0x40ed98;\n            } else {\n                // 0x40ed40\n                v6 = 1;\n                v4 = v12;\n                v2 = a3 + 16;\n                goto lab_0x40ed51;\n            }\n        } else {\n            goto lab_0x40ed51;\n        }\n    } else {\n        // 0x40ec41\n        *(int64_t *)a3 = a1;\n        v5 = a1;\n        goto lab_0x40ec47;\n    }\n  lab_0x40ed51:\n    // 0x40ed51\n    *(int64_t *)v4 = *(int64_t *)v10;\n    v3 = v2;\n    v8 = v9;\n    v7 = v6;\n    if (0 != v9 + 1) {\n        int64_t v13; // 0x40eba0\n        int64_t v14; // 0x40eba0\n        *(int64_t *)v14 = *(int64_t *)(8 * v13 + a1);\n        v3 = v14 + 8;\n        v8 = v9;\n        int64_t v15; // 0x40eba0\n        v7 = v15;\n        while (0 != v13 + 1) {\n            int64_t v16 = v14;\n            int64_t v17 = v13;\n            int64_t v18 = *(int64_t *)(8 * v17 + a1); // 0x40ed60\n            int64_t v19 = v16 + 8; // 0x40ed46\n            *(int64_t *)v16 = v18;\n            int64_t v20 = v17 + 1; // 0x40ed55\n            v13 = v20;\n            v14 = v19;\n            v3 = v19;\n            v8 = v9;\n            v7 = v15;\n        }\n    }\n    goto lab_0x40ed98;\n  lab_0x40ec47:;\n    int32_t v22 = 0; // 0x40ec6f\n    int64_t v23 = 1; // 0x40ec6f\n    if ((int32_t)a1 < 1) {\n        // 0x40ec90\n        *(int64_t *)a1 = v5;\n        v22 = 1;\n        v23 = 2;\n        if ((a2 & -2) == 2) {\n            // 0x40ebc6\n            return 1;\n        }\n    }\n    int64_t v24 = a1 - 8;\n    int32_t v25 = v22;\n    int64_t v26 = 8 * v23; // 0x40ec71\n    *(int64_t *)(v26 + v24) = *(int64_t *)a1;\n    int64_t v27 = 1; // 0x40ec76\n    int64_t v28 = v26; // 0x40ec7f\n    int64_t * dest_mem; // 0x40ece7\n    if (v27 == a2) {\n        // 0x40ecb8\n        dest_mem = memcpy((int64_t *)(v28 + a1), (int64_t *)((int64_t)(8 * v25) + a3), 8 * ((int32_t)0 - v25));\n        return (int64_t)dest_mem;\n    }\n    int64_t v29 = v23 + 1; // 0x40ec66\n    int64_t v30 = 8 * v29; // 0x40ec71\n    *(int64_t *)(v30 + v24) = *(int64_t *)(8 * v27 + a1);\n    int64_t v31 = v27 + 1; // 0x40ec76\n    int64_t v32 = v31; // 0x40ec7f\n    int64_t v33 = v29; // 0x40ec7f\n    v28 = v30;\n    while (v31 != a2) {\n        // 0x40ec81\n        v29 = v33 + 1;\n        v30 = 8 * v29;\n        *(int64_t *)(v30 + v24) = *(int64_t *)(8 * v32 + a1);\n        v31 = v32 + 1;\n        v32 = v31;\n        v33 = v29;\n        v28 = v30;\n    }\n    // 0x40ecb8\n    dest_mem = memcpy((int64_t *)(v28 + a1), (int64_t *)((int64_t)(8 * v25) + a3), 8 * ((int32_t)0 - v25));\n    return (int64_t)dest_mem;\n  lab_0x40ed98:;\n    int64_t v21 = 8 * (v8 - v7); // 0x40edab\n    memcpy((int64_t *)v3, (int64_t *)(8 * v7 + a1), (int32_t)v21);\n    v5 = v21;\n    goto lab_0x40ec47;\n}\n"
        },
        {
            "funcName": "function_40edd0",
            "funcStartAddr": "40edd0",
            "funcEndAddr": "40eddf",
            "decompiledFuncCode": "int64_t function_40edd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40edd0\n    return function_40eba0(a1, a2, 8 * a2 + a1, a3);\n}\n"
        },
        {
            "funcName": "function_40ede0",
            "funcStartAddr": "40ede0",
            "funcEndAddr": "40ee21",
            "decompiledFuncCode": "int64_t function_40ede0(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40ee19\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x40edf3\n    int64_t v2 = a3; // 0x40edf8\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40ee00\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40ee08\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40ee00\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40ee19\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ee30",
            "funcStartAddr": "40ee30",
            "funcEndAddr": "40ee71",
            "decompiledFuncCode": "int64_t function_40ee30(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40ee69\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x40ee43\n    int64_t v2 = a3; // 0x40ee48\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40ee50\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40ee58\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40ee50\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40ee69\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ee80",
            "funcStartAddr": "40ee80",
            "funcEndAddr": "410645",
            "decompiledFuncCode": "int64_t function_40ee80(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3;\n    int64_t v2 = a1;\n    int64_t v3 = a2; // bp-1224, 0x40eea4\n    char v4 = *(char *)&v1; // 0x40eecc\n    v3 = a2;\n    int64_t result = 0; // 0x40eed4\n    int64_t v5 = v2; // 0x40eed4\n    char v6; // 0x40ee80\n    char v7; // 0x40ee80\n    char v8; // 0x40ee80\n    char v9; // 0x40ee80\n    char v10; // 0x40ee80\n    char v11; // 0x40ee80\n    char v12; // 0x40ee80\n    char v13; // 0x40ee80\n    char v14; // 0x40ee80\n    char v15; // 0x40ee80\n    int64_t v16; // 0x40ee80\n    int64_t v17; // 0x40ee80\n    int64_t v18; // 0x40ee80\n    int64_t v19; // 0x40ee80\n    int64_t v20; // 0x40ee80\n    int64_t v21; // 0x40ee80\n    int64_t v22; // 0x40ee80\n    int64_t v23; // 0x40ee80\n    int64_t v24; // 0x40ee80\n    int64_t v25; // 0x40ee80\n    int64_t v26; // 0x40ee80\n    int64_t v27; // 0x40ee80\n    int64_t v28; // 0x40ee80\n    int64_t v29; // 0x40ee80\n    char v30; // 0x40ee80\n    int64_t v31; // 0x40ee80\n    int64_t v32; // 0x40ee80\n    int64_t v33; // 0x40ee80\n    int64_t v34; // 0x40ee80\n    int64_t v35; // 0x40ee80\n    int64_t v36; // 0x40ee80\n    int64_t v37; // 0x40ee80\n    int64_t v38; // 0x40ee80\n    char * v39; // 0x40ee80\n    int64_t v40; // 0x40ee80\n    char * v41; // 0x40ee80\n    int64_t v42; // 0x40ee80\n    int64_t * str; // 0x40ee80\n    char * v43; // 0x40ee80\n    int64_t * v44; // 0x40ee80\n    int64_t format; // 0x40ee80\n    int16_t * v45; // 0x40ee80\n    int64_t * v46; // 0x40ee80\n    int32_t * v47; // 0x40ee80\n    int32_t * v48; // 0x40ee80\n    int64_t v49; // 0x40ee95\n    int64_t * v50; // 0x40ee80\n    int64_t * v51; // 0x40ee80\n    int64_t * v52; // 0x40ee80\n    int64_t * v53; // 0x40ee80\n    int64_t * v54; // 0x40ee80\n    int64_t * v55; // 0x40ee80\n    int32_t * v56; // 0x40ee80\n    int64_t v57; // 0x40ee80\n    char * v58; // 0x40ee80\n    int64_t * v59; // 0x40ee80\n    int32_t * v60; // 0x40ee80\n    int64_t * v61; // 0x40ee80\n    int64_t * v62; // 0x40ee80\n    int64_t * tm; // 0x40ee80\n    int64_t v63; // 0x40ee80\n    int32_t * v64; // 0x40ee80\n    int64_t * v65; // 0x40ee80\n    int64_t str2; // 0x40ee80\n    if (v4 != 0) {\n        // 0x40eeea\n        v49 = &v3;\n        tm = (int64_t *)(v49 + 8);\n        v63 = v49 + 48;\n        v64 = (int32_t *)v63;\n        v65 = (int64_t *)(v49 + 1232);\n        str2 = v49 + 144;\n        int64_t v66 = v49 + 64;\n        v39 = (char *)v66;\n        v40 = v49 + 135;\n        v41 = (char *)v63;\n        v42 = v49 + 44;\n        str = (int64_t *)(v49 + 32);\n        int64_t v67 = v49 + 72;\n        v43 = (char *)v67;\n        v44 = (int64_t *)v63;\n        format = v49 + 112;\n        v45 = (int16_t *)format;\n        v46 = (int64_t *)(v49 + 16);\n        v47 = (int32_t *)(v49 + 1240);\n        v48 = (int32_t *)v66;\n        v50 = (int64_t *)(v49 - 8);\n        v51 = (int64_t *)(v49 - 16);\n        v52 = (int64_t *)(v49 + 24);\n        v53 = (int64_t *)v66;\n        int64_t v68 = v49 + 80;\n        v54 = (int64_t *)v68;\n        v55 = (int64_t *)v67;\n        v56 = (int32_t *)v67;\n        v57 = v49 + 145;\n        int64_t v69 = v49 + 88;\n        v58 = (char *)v69;\n        v59 = (int64_t *)v69;\n        v60 = (int32_t *)v68;\n        v61 = (int64_t *)(v49 + 104);\n        v62 = (int64_t *)(v49 + 96);\n        v30 = v4;\n        v33 = a3;\n        v19 = 0;\n        v22 = v2;\n        while (true) {\n          lab_0x40eeea:\n            // 0x40eeea\n            v23 = v22;\n            v20 = v19;\n            int64_t v70 = v33;\n            char v71 = v30;\n            char v72 = v7;\n            char v73 = v6;\n            if (v71 == 37) {\n                char v74 = v73; // 0x40ef74\n                char v75 = v72; // 0x40ef74\n                int64_t v76 = v70; // 0x40ef74\n                int64_t v77 = 0; // 0x40ef74\n                int64_t v78 = (int64_t)*(char *)(v49 + 43); // 0x40ef74\n                int64_t v79 = 0; // 0x40ef74\n                int64_t v80; // 0x40ee80\n                while (true) {\n                  lab_0x40ef78_2:\n                    // 0x40ef78\n                    v16 = v78;\n                    v10 = v74;\n                    v11 = v75;\n                    v34 = v76;\n                    v26 = v77;\n                    v17 = v79;\n                    while (true) {\n                      lab_0x40ef78:;\n                        int64_t v81 = v26;\n                        char v82 = v11;\n                        char v83 = v10;\n                        int64_t v84 = v34 + 1; // 0x40ef78\n                        char v85 = *(char *)v84; // 0x40ef7c\n                        v14 = v83;\n                        v15 = v82;\n                        v31 = 48;\n                        v36 = v84;\n                        v28 = v81;\n                        if (v85 == 48) {\n                            goto lab_0x40efa8;\n                        } else {\n                            // 0x40ef88\n                            v18 = v17;\n                            v27 = v81;\n                            v35 = v84;\n                            v80 = v85;\n                            v13 = v82;\n                            v12 = v83;\n                            while (v12 <= v13) {\n                                if (v80 != 35) {\n                                    // 0x40efb0\n                                    v14 = v12;\n                                    v15 = v13;\n                                    v31 = v80;\n                                    v36 = v35;\n                                    v28 = v27;\n                                    if ((char)v80 == 45) {\n                                        goto lab_0x40efa8;\n                                    } else {\n                                        int64_t v86 = v80 & 0xffffffff;\n                                        v38 = v86;\n                                        v37 = v35;\n                                        v32 = 0xffffffff;\n                                        v29 = v86;\n                                        if ((int32_t)v80 < 58) {\n                                            goto lab_0x40f011;\n                                        } else {\n                                            goto lab_0x40efc8_2;\n                                        }\n                                    }\n                                }\n                                int64_t v87 = v35 + 1; // 0x40ef8e\n                                char v88 = *(char *)v87; // 0x40ef92\n                                int64_t v89 = v88; // 0x40ef92\n                                v14 = v88;\n                                v15 = 48;\n                                v31 = v89;\n                                v36 = v87;\n                                v28 = 1;\n                                if (v88 == 48) {\n                                    goto lab_0x40efa8;\n                                }\n                                v27 = 1;\n                                v35 = v87;\n                                v80 = v89;\n                                v13 = 48;\n                                v12 = v88;\n                            }\n                            char v90 = v80;\n                            v74 = v12;\n                            v75 = v13;\n                            v76 = v35;\n                            v77 = v27;\n                            v78 = 1;\n                            v79 = v18;\n                            if (v90 != 94) {\n                                // 0x40f000\n                                v14 = v12;\n                                v15 = v13;\n                                v31 = v80;\n                                v36 = v35;\n                                v28 = v27;\n                                if (v90 != 95) {\n                                    // break (via goto) -> 0x40f004\n                                    goto lab_0x40f004;\n                                }\n                                goto lab_0x40efa8;\n                            } else {\n                                goto lab_0x40ef78_2;\n                            }\n                        }\n                    }\n                }\n              lab_0x40f004:;\n                int64_t v91 = v80 & 0xffffffff;\n                v38 = v91;\n                v37 = v35;\n                v32 = 0xffffffff;\n                v29 = v91;\n                if ((int32_t)v80 < 58) {\n                    goto lab_0x40f011;\n                } else {\n                    goto lab_0x40efc8_2;\n                }\n            } else {\n                int64_t v92 = v3 - v20; // 0x40eef2\n                v1 = v92;\n                if (v92 < 2) {\n                    // break -> 0x40ef33\n                    break;\n                }\n                int64_t v93 = 0; // 0x40eefe\n                if (v23 != 0) {\n                    // 0x40ef00\n                    *(char *)v23 = v71;\n                    v93 = v23 + 1;\n                }\n                // 0x40ef07\n                v8 = v73;\n                v9 = v72;\n                v25 = v70;\n                v21 = v20 + 1;\n                v24 = v93;\n                goto lab_0x40ef0e;\n            }\n        }\n      lab_0x40ef33_11:\n        // 0x40ef33\n        return 0;\n    }\n    goto lab_0x40ef1b_2;\n  lab_0x40efa8:\n    // 0x40efa8\n    v10 = v14;\n    v11 = v15;\n    v34 = v36;\n    v26 = v28;\n    v17 = v31 & 0xffffffff;\n    goto lab_0x40ef78;\n  lab_0x40f05e:;\n    // 0x40f05e\n    int64_t v94; // 0x40f01b\n    v38 = v94;\n    int64_t v95; // 0x40f013\n    v37 = v95;\n    v32 = 0x7fffffff;\n    v29 = v94;\n    int64_t v96; // 0x40f01d\n    if ((int32_t)v96 >= 10) {\n        // break -> 0x40efc8\n        goto lab_0x40efc8_2;\n    }\n    // 0x40f063\n    int64_t v97; // 0x40ee80\n    int64_t v98 = v97 + 2; // 0x40f063\n    int64_t v99 = (int64_t)*(char *)v98; // 0x40f063\n    int64_t v100 = v99 + 0xffffffd0 & 0xffffffff; // 0x40f072\n    v1 = v100;\n    int64_t v101 = v100; // 0x40f075\n    int64_t v102 = v99; // 0x40f075\n    int64_t v103 = v99 & 0xffffffff; // 0x40f075\n    int64_t v104 = v98; // 0x40f075\n    int64_t v105 = 0x7fffffff; // 0x40f075\n    goto lab_0x40f03a;\n  lab_0x40f03a:;\n    int64_t v106 = v105;\n    int64_t v107 = v104;\n    int64_t v108 = v107; // 0x40f03d\n    int64_t v109 = v106; // 0x40f03d\n    if ((int32_t)v101 >= 10) {\n        // 0x40f03f\n        v38 = v103;\n        v37 = v107;\n        v32 = v106;\n        v29 = v102 & 0xffffffff;\n        goto lab_0x40efc8_2;\n    }\n    goto lab_0x40f013;\n  lab_0x40f011:\n    // 0x40f011\n    v108 = v35;\n    v109 = 0;\n    while (true) {\n      lab_0x40f013:;\n        int64_t v110 = v109;\n        v97 = v108;\n        v95 = v97 + 1;\n        int64_t v111 = (int64_t)*(char *)v95; // 0x40f013\n        v94 = v111 & 0xffffffff;\n        v96 = v111 + 0xffffffd0;\n        int64_t v112 = v96 & 0xffffffff; // 0x40f01d\n        v1 = v112;\n        int32_t v113 = v110; // 0x40f020\n        if (v113 > 0xccccccc) {\n            goto lab_0x40f05e;\n        } else {\n            char v114 = *(char *)v97; // 0x40f028\n            if (v113 != 0xccccccc || v114 < 56) {\n                // 0x40f02d\n                v101 = v112;\n                v102 = v111;\n                v103 = v94;\n                v104 = v95;\n                v105 = 10 * v110 + 0xffffffd0 + (int64_t)v114 & 0xffffffff;\n                goto lab_0x40f03a;\n            } else {\n                goto lab_0x40f05e;\n            }\n        }\n    }\n    goto lab_0x40efc8_2;\n  lab_0x40efc8_2:;\n    int64_t v115 = v32;\n    int64_t v116 = v37;\n    int64_t v117 = v38; // 0x40ee80\n    int64_t v118 = v116; // 0x40ee80\n    int64_t v119 = 0; // 0x40ee80\n    int64_t v120; // 0x40ee80\n    switch ((char)v120) {\n        case 69: {\n        }\n        case 79: {\n            int64_t v121 = v116 + 1; // 0x40f048\n            v117 = (int64_t)*(char *)v121;\n            v118 = v121;\n            v119 = v29;\n            // break -> 0x40efde\n            break;\n        }\n    }\n    int64_t v122 = v119;\n    int64_t v123 = v118;\n    int64_t v124 = v117;\n    g213 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v124; // 0x40efe1\n    int64_t v127 = v16; // 0x40efe1\n    int64_t v128 = 0; // 0x40efe1\n    int64_t v129 = 1; // 0x40efe1\n    int64_t v130 = v123; // 0x40efe1\n    int64_t v131 = v16; // 0x40efe1\n    int64_t v132 = v123; // 0x40efe1\n    int64_t v133 = 0; // 0x40efe1\n    int64_t v134; // 0x40ee80\n    int64_t v135; // 0x40ee80\n    int64_t v136; // 0x40ee80\n    int64_t v137; // 0x40ee80\n    int64_t v138; // 0x40ee80\n    int64_t v139; // 0x40ee80\n    int64_t v140; // 0x40ee80\n    int64_t v141; // 0x40ee80\n    int64_t v142; // 0x40ee80\n    int64_t v143; // 0x40ee80\n    int64_t v144; // 0x40ee80\n    int64_t v145; // 0x40ee80\n    int64_t v146; // 0x40ee80\n    int64_t v147; // 0x40ee80\n    int64_t v148; // 0x40ee80\n    int64_t v149; // 0x40ee80\n    int64_t v150; // 0x40ee80\n    int64_t v151; // 0x40ee80\n    int64_t v152; // 0x40ee80\n    int64_t v153; // 0x40ee80\n    int64_t v154; // 0x40ee80\n    int64_t v155; // 0x40ee80\n    int64_t v156; // 0x40ee80\n    int64_t v157; // 0x40ee80\n    int64_t v158; // 0x40ee80\n    int64_t v159; // 0x40ee80\n    int64_t v160; // 0x40ee80\n    int64_t v161; // 0x40ee80\n    int64_t v162; // 0x40ee80\n    int64_t v163; // 0x40ee80\n    int64_t v164; // 0x40ee80\n    int64_t v165; // 0x40ee80\n    int64_t v166; // 0x40ee80\n    int64_t v167; // 0x40ee80\n    int64_t v168; // 0x40ee80\n    int64_t v169; // 0x40ee80\n    int64_t v170; // 0x40ee80\n    int64_t v171; // 0x40ee80\n    int64_t v172; // 0x40ee80\n    int64_t v173; // 0x40ee80\n    int64_t v174; // 0x40ee80\n    int64_t v175; // 0x40ee80\n    int64_t v176; // 0x40ee80\n    int64_t v177; // 0x40ee80\n    int64_t v178; // 0x40ee80\n    int64_t v179; // 0x40ee80\n    int64_t v180; // 0x40ee80\n    int64_t v181; // 0x40ee80\n    int64_t v182; // 0x40ee80\n    int64_t v183; // 0x40ee80\n    int64_t v184; // 0x40ee80\n    int64_t v185; // 0x40ee80\n    int32_t v186; // 0x40ee80\n    switch (v125) {\n        case 0: {\n            // 0x40ff63\n            v177 = v123 - 1;\n            goto lab_0x40fe57;\n        }\n        case 37: {\n            int64_t v187 = v3 - v20; // 0x40fefe\n            v1 = v187;\n            int32_t v188 = v115; // 0x40ff01\n            int64_t v189 = 0x100000000 * v115 >> 32;\n            int64_t v190 = v188 >= 0 ? v189 : 0; // 0x40ff06\n            int64_t v191 = v190 != 0 ? v190 : 1; // 0x40ff0b\n            v134 = v187;\n            v162 = v190;\n            v176 = 1;\n            v160 = v123;\n            v161 = v123;\n            v142 = v16;\n            v152 = v191;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40fd03;\n            } else {\n                // 0x40ff18\n                if (v191 >= v187) {\n                    // break -> 0x40ef33\n                    break;\n                }\n                // 0x40ff21\n                v155 = v191;\n                v156 = 0;\n                if (v23 != 0) {\n                    int64_t v192 = v124; // 0x40ff2d\n                    int64_t v193 = v23; // 0x40ff2d\n                    if (v188 >= 2) {\n                        int64_t v194 = v189 - 1; // 0x40ff32\n                        v1 = v194;\n                        int64_t v195 = v194 + v23; // 0x40ff36\n                        int64_t * v196 = (int64_t *)v23;\n                        int32_t v197 = v194;\n                        if (v18 == 48) {\n                            // 0x4105c6\n                            memset(v196, 48, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        } else {\n                            // 0x40ff44\n                            memset(v196, 32, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        }\n                    }\n                    // 0x40ff57\n                    *(char *)v193 = (char)v192;\n                    v155 = v191;\n                    v156 = v193 + 1;\n                }\n                goto lab_0x40f8a6;\n            }\n        }\n        case 58: {\n            int64_t v198 = v123 + 1; // 0x40ffbf\n            char v199 = *(char *)v198; // 0x40ffbf\n            v1 = v198;\n            int64_t v200 = v198; // 0x40ffcf\n            char v201 = v199; // 0x40ffcf\n            int64_t v202 = 1; // 0x40ffcf\n            if (v199 == 58) {\n                int64_t v203 = 2; // 0x40fff7\n                int64_t v204 = v203 + v123; // 0x40fffb\n                char v205 = *(char *)v204; // 0x40fffb\n                v1 = v204;\n                v200 = v204;\n                v201 = v205;\n                v202 = v203;\n                int64_t v206 = v203; // 0x410006\n                while (v205 == 58) {\n                    // 0x40fff7\n                    v203 = v206 + 1;\n                    v204 = v203 + v123;\n                    v205 = *(char *)v204;\n                    v1 = v204;\n                    v200 = v204;\n                    v201 = v205;\n                    v202 = v203;\n                    v206 = v203;\n                }\n            }\n            // 0x40ffd1\n            v130 = v123;\n            v131 = v16;\n            v132 = v200;\n            v133 = v202;\n            if (v201 != 122) {\n                goto lab_0x40fcc8;\n            } else {\n                goto lab_0x40fda0;\n            }\n        }\n        case 65: {\n            goto lab_0x40f090;\n        }\n        case 66: {\n            goto lab_0x40f090;\n        }\n        case 67: {\n            // 0x40fbf3\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f632;\n            } else {\n                // 0x40fbfd\n                *v41 = 0;\n                int32_t v207 = *(int32_t *)(*tm + 20); // 0x40fc12\n                int32_t v208 = v207 / 100; // 0x40fc23\n                int32_t v209 = v208 + 19; // 0x40fc27\n                int32_t v210 = v207 + 1900; // 0x40fc3b\n                v171 = v123;\n                v168 = v115;\n                v182 = v209 - (int32_t)(-100 * v208 + v207 < 0 == v209 >= 0 == (v209 != 0));\n                v178 = 0;\n                v157 = v210 < 0 != ((v210 ^ v207) & (v207 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40f61f;\n            }\n        }\n        case 68: {\n            // 0x40f387\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f390\n                *v44 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x40f399;\n            }\n        }\n        case 70: {\n            // 0x40f489\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f492\n                *v44 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x40f399;\n            }\n        }\n        case 71: {\n            goto lab_0x40f4a0;\n        }\n        case 72: {\n            // 0x40f732\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f73c\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 8);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 73: {\n            // 0x40f74f\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f759\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)v42;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 77: {\n            // 0x40f768\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f772\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 4);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 78: {\n            // 0x40f785\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                uint32_t v211 = (int32_t)v115; // 0x40f78f\n                if (v211 != -1) {\n                    int64_t v212 = (int64_t)*v47;\n                    int64_t v213 = v212; // 0x410421\n                    int64_t v214 = v115; // 0x410421\n                    int64_t v215 = v212; // 0x410421\n                    if (v211 <= 8) {\n                        int64_t v216 = v213;\n                        int64_t v217 = (v214 & 0xffffffff) + 1; // 0x410445\n                        int64_t v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31); // 0x410450\n                        v214 = v217;\n                        v215 = v218;\n                        while ((int32_t)v217 != 9) {\n                            // 0x410440\n                            v216 = v218;\n                            v217 = (v214 & 0xffffffff) + 1;\n                            v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31);\n                            v214 = v217;\n                            v215 = v218;\n                        }\n                    }\n                    // 0x410457\n                    v167 = v115;\n                    v181 = v215;\n                    v138 = v115 & 0xffffffff;\n                    v148 = v18;\n                } else {\n                    // 0x40f798\n                    v167 = 9;\n                    v181 = (int64_t)*v47;\n                    v138 = 9;\n                    v148 = v18;\n                }\n                goto lab_0x40f610;\n            }\n        }\n        case 80: {\n            goto lab_0x40f7b5;\n        }\n        case 82: {\n            // 0x40f724\n            *v44 = (int64_t)\"%H:%M\";\n            goto lab_0x40f399;\n        }\n        case 83: {\n            // 0x40fba0\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40fbaa\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)*tm;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 84: {\n            // 0x40ffe9\n            *v44 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x40f399;\n        }\n        case 85: {\n            // 0x40fbbc\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                int64_t v219 = *tm; // 0x40fbc6\n                v186 = *(int32_t *)(v219 + 28) + 7 - *(int32_t *)(v219 + 24);\n                goto lab_0x40fbdd;\n            }\n        }\n        case 86: {\n            goto lab_0x40f4a0;\n        }\n        case 87: {\n            // 0x40fc4e\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                int64_t v220 = *tm; // 0x40fc54\n                int32_t v221 = *(int32_t *)(v220 + 24); // 0x40fc5e\n                int32_t v222 = v221 + 6; // 0x40fc62\n                *v64 = v221;\n                int32_t v223 = *(int32_t *)(v220 + 28); // 0x40fc85\n                v186 = 1 - v221 + v223 + 7 * ((v222 + (int32_t)(-0x6db6db6d * (int64_t)v222 / 0x100000000) >> 2) - (v222 >> 31));\n                goto lab_0x40fbdd;\n            }\n        }\n        case 88: {\n            goto lab_0x40f1d0;\n        }\n        case 89: {\n            // 0x40fb4d\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            v130 = v123;\n            v131 = v16;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x40f632;\n                }\n                case 79: {\n                    goto lab_0x40fcc8;\n                }\n                default: {\n                    // 0x40fb61\n                    *v41 = 0;\n                    int32_t v224 = *(int32_t *)(*tm + 20); // 0x40fb71\n                    int32_t v225 = v224 + 1900; // 0x40fb74\n                    v174 = v123;\n                    v164 = v115;\n                    v185 = v225;\n                    v180 = 0;\n                    v159 = v225 < 0 != ((v225 ^ v224) & (v224 ^ -0x80000000)) < 0;\n                    v136 = 4;\n                    v145 = v18;\n                    goto lab_0x40fb90;\n                }\n            }\n        }\n        case 90: {\n            char v226 = v27; // 0x40f654\n            *v43 = v226;\n            *v39 = v226 != 0 ? 0 : (char)v16;\n            int32_t len = strlen((char *)*str); // 0x40f66f\n            uint64_t v227 = (int64_t)len; // 0x40f66f\n            int64_t v228 = 0x100000000 * v115 >> 32;\n            uint64_t v229 = (int32_t)v115 >= 0 ? v228 : 0; // 0x40f685\n            int64_t v230 = v229 <= v227 ? v227 : v229; // 0x40f68d\n            int64_t v231 = v3 - v20; // 0x40f691\n            v1 = v231;\n            *v44 = v230;\n            if (v231 <= v230) {\n                // break -> 0x40ef33\n                break;\n            }\n            int64_t v232 = v230; // 0x40f6a5\n            int64_t v233 = 0; // 0x40f6a5\n            if (v23 != 0) {\n                char v234 = *v39; // 0x40f6aa\n                char v235 = *v43; // 0x40f6b0\n                char v236 = v235; // 0x40f6b6\n                char v237 = v234; // 0x40f6b6\n                int64_t v238 = v23; // 0x40f6b6\n                if (v229 > v227) {\n                    int64_t v239 = v228 - v227; // 0x40f6bb\n                    v1 = v239;\n                    int64_t v240 = v239 + v23; // 0x40f6be\n                    if (v18 == 48) {\n                        // 0x4105de\n                        memset((int64_t *)v23, 48, (int32_t)v239);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    } else {\n                        // 0x40f6cc\n                        *v43 = v235;\n                        *v39 = v234;\n                        memset((int64_t *)v23, 32, (int32_t)v1);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    }\n                }\n                int64_t v241 = v238;\n                v1 = v227;\n                int64_t v242 = *str; // 0x40f6f5\n                if (v236 != 0) {\n                    // 0x41051c\n                    function_40ede0(v241, v242, v227);\n                } else {\n                    // 0x40f706\n                    if (v237 == 0) {\n                        // 0x410512\n                        memcpy((int64_t *)v241, (int64_t *)v242, len);\n                    } else {\n                        // 0x40f70f\n                        function_40ee30(v241, v242, v227);\n                    }\n                }\n                // 0x40f714\n                v232 = *v44;\n                v233 = v241 + v227;\n            }\n            // 0x40f717\n            v8 = v12;\n            v9 = v13;\n            v25 = v123;\n            v21 = v232 + v20;\n            v24 = v233;\n            goto lab_0x40ef0e;\n        }\n        case 97: {\n            goto lab_0x40f090;\n        }\n        case 98: {\n            goto lab_0x40fcb1;\n        }\n        case 99: {\n            goto lab_0x40f1d0;\n        }\n        case 100: {\n            // 0x40fe8d\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40fe97\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 12);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 101: {\n            // 0x40feaa\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40feb4\n                v183 = *tm + 12;\n                goto lab_0x40f7e1;\n            }\n        }\n        case 103: {\n            goto lab_0x40f4a0;\n        }\n        case 104: {\n            goto lab_0x40fcb1;\n        }\n        case 106: {\n            // 0x40fec1\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40fecb\n                *v41 = 0;\n                int32_t v243 = *(int32_t *)(*tm + 28); // 0x40fedb\n                int32_t v244 = v243 + 1; // 0x40fede\n                v171 = v123;\n                v168 = v115;\n                v182 = v244;\n                v178 = 0;\n                v157 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v139 = 3;\n                v149 = v18;\n                goto lab_0x40f61f;\n            }\n        }\n        case 107: {\n            // 0x40f7cf\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f7d9\n                v183 = *tm + 8;\n                goto lab_0x40f7e1;\n            }\n        }\n        case 108: {\n            // 0x40f806\n            v183 = v42;\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                goto lab_0x40f7e1;\n            }\n        }\n        case 109: {\n            // 0x40f816\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40f820\n                *v41 = 0;\n                int32_t v245 = *(int32_t *)(*tm + 16); // 0x40f830\n                int32_t v246 = v245 + 1; // 0x40f833\n                v171 = v123;\n                v168 = v115;\n                v182 = v246;\n                v178 = 0;\n                v157 = v246 < 0 != (v246 & (v245 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40f61f;\n            }\n        }\n        case 110: {\n            int32_t v247 = v115; // 0x40f844\n            int64_t v248 = 0x100000000 * v115 >> 32;\n            int64_t v249 = v247 >= 0 ? v248 : 0; // 0x40f855\n            int64_t v250 = v249 == 0 ? 1 : v249; // 0x40f85b\n            if (v3 - v20 <= v250) {\n                // break -> 0x40ef33\n                break;\n            }\n            // 0x40f86f\n            v155 = v250;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v251 = v23; // 0x40f877\n                if (v247 >= 2) {\n                    int64_t v252 = v248 - 1; // 0x40f87c\n                    v1 = v252;\n                    int64_t v253 = v252 + v23; // 0x40f880\n                    int64_t * v254 = (int64_t *)v23;\n                    int32_t v255 = v252;\n                    if (v18 == 48) {\n                        // 0x41056b\n                        memset(v254, 48, v255);\n                        v251 = v253;\n                    } else {\n                        // 0x40f88e\n                        memset(v254, 32, v255);\n                        v251 = v253;\n                    }\n                }\n                // 0x40f89e\n                *(char *)v251 = 10;\n                v155 = v250;\n                v156 = v251 + 1;\n            }\n            goto lab_0x40f8a6;\n        }\n        case 112: {\n            // 0x40ffe1\n            v129 = 0;\n            goto lab_0x40f7b5;\n        }\n        case 113: {\n            // 0x40f8b1\n            v172 = v123;\n            v169 = v115;\n            v140 = 1;\n            v150 = v18;\n            if ((int32_t)v122 == 79) {\n                goto lab_0x40f632;\n            } else {\n                // 0x40f8c9\n                *v41 = 0;\n                v173 = v123;\n                v163 = v115;\n                v184 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v179 = 0;\n                v158 = 0;\n                v141 = 1;\n                v151 = v18;\n                goto lab_0x40f8e0;\n            }\n        }\n        case 114: {\n            goto lab_0x40f1dd;\n        }\n        case 115: {\n            int64_t v256 = *tm; // 0x40f1fd\n            *v39 = (char)v16;\n            int128_t v257 = __asm_movdqu(*(int128_t *)(v256 + 32)); // 0x40f21f\n            int128_t v258 = __asm_movdqu(*(int128_t *)v256); // 0x40f224\n            int128_t v259 = __asm_movdqu(*(int128_t *)(v256 + 16)); // 0x40f228\n            *(int128_t *)str2 = (int128_t)__asm_movaps_9(v258);\n            *(int128_t *)(v49 + 160) = (int128_t)__asm_movaps_9(v259);\n            *(int128_t *)v63 = (int128_t)__asm_movaps_9(v257);\n            *(int128_t *)(v49 + 176) = (int128_t)__asm_movaps_9(v257);\n            *(int64_t *)(v49 + 192) = *(int64_t *)(v256 + 48);\n            int64_t v260 = function_4177a0(*v65, str2, v1, v124); // 0x40f256\n            int64_t v261 = v260;\n            int64_t v262 = v261 >> 63; // 0x40f288\n            int64_t v263 = (v261 >> 63 & -10) + v261; // 0x40f295\n            int64_t v264 = (v260 < 0 ? -v263 : v263) + 48; // 0x40f2a8\n            v1 = v264 & 0xffffffff;\n            int64_t v265 = v40 - 1; // 0x40f2ab\n            *(char *)v265 = (char)v264;\n            int64_t v266 = v265; // 0x40f2b6\n            while (v262 != 0) {\n                // 0x40f270\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & -10) + v261;\n                v264 = (v260 < 0 ? -v263 : v263) + 48;\n                v1 = v264 & 0xffffffff;\n                v265 = v266 - 1;\n                *(char *)v265 = (char)v264;\n                v266 = v265;\n            }\n            int64_t v267 = (int64_t)*v39; // 0x40f25b\n            int32_t v268 = v115; // 0x40f2b8\n            int64_t v269 = v268 >= 0 == (v268 != 0) ? v115 & 0xffffffff : 1; // 0x40f2c0\n            v170 = v123;\n            v166 = v115;\n            v135 = v269;\n            v144 = v267;\n            v147 = v18;\n            v154 = v265;\n            v175 = v123;\n            v165 = v115;\n            v137 = v269;\n            v143 = v267;\n            v146 = v18;\n            v153 = v265;\n            if (v260 < 0) {\n                goto lab_0x410028;\n            } else {\n                goto lab_0x40f2cd;\n            }\n        }\n        case 116: {\n            int32_t v270 = v115; // 0x40faa4\n            int64_t v271 = 0x100000000 * v115 >> 32;\n            int64_t v272 = v270 >= 0 ? v271 : 0; // 0x40fab5\n            int64_t v273 = v272 == 0 ? 1 : v272; // 0x40fabb\n            if (v3 - v20 <= v273) {\n                // break -> 0x40ef33\n                break;\n            }\n            // 0x40facf\n            v155 = v273;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v274 = v23; // 0x40fadb\n                if (v270 >= 2) {\n                    int64_t v275 = v271 - 1; // 0x40fae0\n                    v1 = v275;\n                    int64_t v276 = v275 + v23; // 0x40fae4\n                    int64_t * v277 = (int64_t *)v23;\n                    int32_t v278 = v275;\n                    if (v18 == 48) {\n                        // 0x410580\n                        memset(v277, 48, v278);\n                        v274 = v276;\n                    } else {\n                        // 0x40faf2\n                        memset(v277, 32, v278);\n                        v274 = v276;\n                    }\n                }\n                // 0x40fb02\n                *(char *)v274 = 9;\n                v155 = v273;\n                v156 = v274 + 1;\n            }\n            goto lab_0x40f8a6;\n        }\n        case 117: {\n            int32_t v279 = *(int32_t *)(*tm + 24); // 0x40fb1f\n            int32_t v280 = v279 + 6; // 0x40fb22\n            *v64 = v279;\n            v167 = v115;\n            v181 = v279 + 7 + -7 * ((v280 + (int32_t)(-0x6db6db6d * (int64_t)v280 / 0x100000000) >> 2) - (v280 >> 31));\n            v138 = 1;\n            v148 = v18;\n            goto lab_0x40f610;\n        }\n        case 119: {\n            // 0x40fc98\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40fcc8;\n            } else {\n                // 0x40fc9e\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 24);\n                v138 = 1;\n                v148 = v18;\n                goto lab_0x40f610;\n            }\n        }\n        case 120: {\n            goto lab_0x40f1d0;\n        }\n        case 121: {\n            // 0x40ff70\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f632;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x40ff8a\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x40ffa2\n                v167 = v115;\n                v181 = v283;\n                v138 = 2;\n                v148 = v18;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x40ffb1\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x40ffb7\n                    v167 = v115;\n                    v181 = v285 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n                goto lab_0x40f610;\n            }\n        }\n        case 122: {\n            goto lab_0x40fda0;\n        }\n        default: {\n            goto lab_0x40fcc8;\n        }\n    }\n  lab_0x40ef0e:\n    // 0x40ef0e\n    v5 = v24;\n    result = v21;\n    int64_t v286 = v25 + 1; // 0x40ef0e\n    char v287 = *(char *)v286; // 0x40ef0e\n    v6 = v8;\n    v7 = v9;\n    v30 = v287;\n    v33 = v286;\n    v19 = result;\n    v22 = v5;\n    if (v287 == 0) {\n        // 0x40ef1b\n        goto lab_0x40ef1b_2;\n    }\n    goto lab_0x40eeea;\n  lab_0x40f090:\n    // 0x40f090\n    v130 = v123;\n    v131 = v16;\n    int64_t v288; // 0x40ee80\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40fcc8;\n    } else {\n        // 0x40f099\n        v288 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff;\n        goto lab_0x40f0a0;\n    }\n  lab_0x40f4a0:\n    // 0x40f4a0\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 69) {\n        goto lab_0x40fcc8;\n    } else {\n        int64_t v289 = *tm; // 0x40f4aa\n        int32_t v290 = *(int32_t *)(v289 + 20); // 0x40f4af\n        uint32_t v291 = *(int32_t *)(v289 + 28); // 0x40f4b2\n        uint32_t v292 = *(int32_t *)(v289 + 24); // 0x40f4b6\n        *v64 = v290;\n        int32_t v293 = v290 - 100 + (v290 >> 31 & 400); // 0x40f4cd\n        int32_t v294 = v291 - v292; // 0x40f4d4\n        int32_t v295 = v294 + 382; // 0x40f4d7\n        int32_t v296 = v291 - 379 - v294 + 7 * ((v295 + (int32_t)(-0x6db6db6d * (int64_t)v295 / 0x100000000) >> 2) - (v295 >> 31)); // 0x40f4fe\n        int32_t v297; // 0x40ee80\n        int32_t v298; // 0x40f589\n        if (v296 < 0) {\n            // 0x410397\n            v1 = 365;\n            int64_t v299 = 365; // 0x4103a3\n            if ((v293 + 3) % 4 == 0) {\n                int32_t v300 = v293 - 1;\n                v1 = 366;\n                v299 = 366;\n                if (v300 % 100 - v300 == 1 - v293) {\n                    uint32_t v301 = v300 % 400;\n                    int64_t v302 = v301; // 0x4103ce\n                    int64_t v303 = v302 + 366 + (v302 ^ 0xffffffff) + (int64_t)(v301 == 0) & 0xffffffff; // 0x4103d7\n                    v1 = v303;\n                    v299 = v303;\n                }\n            }\n            int64_t v304 = v299; // 0x4103dd\n            int64_t v305; // 0x40f4b2\n            int64_t v306 = v304 + v305; // 0x4103dd\n            int64_t v307; // 0x40f4b6\n            int64_t v308 = v306 - v307 + 382; // 0x4103f1\n            v297 = (int32_t)(v306 - v308) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v308 >> 32) / 0x100000000 + v308) >> 2) - ((int32_t)v308 >> 31));\n        } else {\n            int64_t v309 = 365; // 0x40f515\n            if (v293 % 4 == 0) {\n                // 0x40f517\n                v309 = 366;\n                if (v293 % 100 == 0) {\n                    // 0x40f53c\n                    v309 = v293 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v310 = (int64_t)v291 - v309; // 0x40f560\n            int64_t v311 = v310 - (int64_t)v292 + 382; // 0x40f567\n            v298 = (int32_t)(v310 - v311) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v311 >> 32) / 0x100000000 + v311) >> 2) - ((int32_t)v311 >> 31));\n            v297 = v298 >= 0 ? v298 : v296;\n        }\n        int64_t v312 = (v298 >> 31) + 1;\n        if (v125 == 71) {\n            uint32_t v313 = *v64; // 0x410485\n            *v41 = 0;\n            int32_t v314 = -1900 - (int32_t)v312; // 0x410499\n            int32_t v315 = v313 - v314; // 0x41049c\n            v171 = v123;\n            v168 = v115;\n            v182 = v312 + 1900 + (int64_t)v313 & 0xffffffff;\n            v178 = 0;\n            v157 = v315 < 0 != ((v315 ^ v313) & (v313 ^ v314)) < 0;\n            v139 = 4;\n            v149 = v18;\n            goto lab_0x40f61f;\n        } else {\n            if (v125 != 103) {\n                int32_t v316 = v297;\n                int32_t v317 = v316 < 0 ? 2 : 1; // 0x41047a\n                v167 = v115;\n                v181 = v317 + (v316 + (int32_t)(-0x6db6db6d * (int64_t)v316 / 0x100000000) >> 2);\n                v138 = 2;\n                v148 = v18;\n            } else {\n                int32_t v318 = *v64; // 0x40f5af\n                int32_t v319 = v312; // 0x40f5da\n                int32_t v320 = (v318 % 100 + v319) % 100;\n                int64_t v321 = v320; // 0x40f5f0\n                v167 = v115;\n                v181 = v321;\n                v138 = 2;\n                v148 = v18;\n                if (v320 < 0) {\n                    int32_t v322 = -1900 - v319; // 0x40f600\n                    int32_t v323 = v318 - v322; // 0x40f605\n                    int64_t v324 = v323 < 0 == ((v323 ^ v318) & (v318 ^ v322)) < 0 ? v321 + 100 : -v321; // 0x40f608\n                    v167 = v115;\n                    v181 = v324 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n            }\n            goto lab_0x40f610;\n        }\n    }\n  lab_0x40f7b5:\n    // 0x40f7b5\n    v126 = 112;\n    v127 = (char)v27 != 0 ? 0 : v16;\n    v128 = ((char)v27 != 0 ? v27 : v129) & 0xffffffff;\n    goto lab_0x40f1dd;\n  lab_0x40f1d0:\n    // 0x40f1d0\n    v126 = v124;\n    v127 = v16;\n    v128 = 0;\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 79) {\n        goto lab_0x40fcc8;\n    } else {\n        goto lab_0x40f1dd;\n    }\n  lab_0x40fcb1:;\n    int64_t v660 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff; // 0x40fcb4\n    v288 = v660;\n    v130 = v123;\n    v131 = v660;\n    if ((int32_t)v122 == 0) {\n        goto lab_0x40f0a0;\n    } else {\n        goto lab_0x40fcc8;\n    }\n  lab_0x40f1dd:;\n    int64_t v325 = v128;\n    int64_t v326 = v127;\n    int64_t v327 = v126;\n    *v45 = 0x2520;\n    int64_t v328 = v327; // 0x40f1ea\n    int64_t v329 = v123; // 0x40f1ea\n    int64_t v330 = v115; // 0x40f1ea\n    int64_t v331 = 0; // 0x40f1ea\n    int64_t v332 = v326; // 0x40f1ea\n    int64_t v333 = v18; // 0x40f1ea\n    int64_t v334 = v325; // 0x40f1ea\n    int64_t v335; // 0x40ee80\n    int64_t v336; // 0x40ee80\n    int64_t v337; // 0x40ee80\n    int64_t v338; // 0x40ee80\n    int64_t v339; // 0x40ee80\n    int64_t v340; // 0x40ee80\n    int64_t v341; // 0x40ee80\n    int64_t v342; // 0x40ee80\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40f63f;\n    } else {\n        // 0x40f1f0\n        v340 = *v46;\n        v342 = v327;\n        v341 = v115;\n        v338 = v123;\n        v339 = v122;\n        v335 = v326;\n        v336 = v18;\n        v337 = v325;\n        goto lab_0x40f0c0;\n    }\n  lab_0x40fda0:;\n    int64_t v343 = v132;\n    int64_t v344 = *tm; // 0x40fda0\n    v8 = v12;\n    v9 = v13;\n    v25 = v343;\n    v21 = v20;\n    v24 = v23;\n    int64_t v345; // 0x40ee80\n    uint32_t v346; // 0x40fdee\n    uint32_t v347; // 0x40fe23\n    int32_t v348; // 0x40fe27\n    if (*(int32_t *)(v344 + 32) < 0) {\n        goto lab_0x40ef0e;\n    } else {\n        int64_t v349 = *(int64_t *)(v344 + 40); // 0x40fdb0\n        int32_t v350 = v349; // 0x40fdba\n        int64_t v351 = 1; // 0x40fdbc\n        if (v350 >= 0) {\n            // 0x40fdbe\n            v351 = 0;\n            if (v350 == 0) {\n                // 0x40fdc6\n                v351 = *(char *)*str == 45;\n            }\n        }\n        // 0x40fdd2\n        v345 = v351;\n        int64_t v352 = 0x100000000 * v349 >> 32; // 0x40fdde\n        int32_t v353 = v350 >> 31; // 0x40fde2\n        *v48 = v353;\n        v346 = ((int32_t)(-0x6e5d4c3b * v352 / 0x100000000) + v350 >> 11) - v353;\n        *v64 = v346;\n        int32_t v354 = ((int32_t)(-0x77777777 * v352 / 0x100000000 + v349) >> 5) - *v48; // 0x40fe00\n        v347 = -60 * ((v354 + (int32_t)(-0x77777777 * (int64_t)v354 / 0x100000000) >> 5) - (v354 >> 31)) + v354;\n        v348 = -60 * v354 + v350;\n        v177 = v343;\n        switch (v133) {\n            case 1: {\n                goto lab_0x4104f6;\n            }\n            case 0: {\n                // 0x410526\n                *v41 = 1;\n                v171 = v343;\n                v168 = v115;\n                v182 = v347 + 100 * v346;\n                v178 = 0;\n                v157 = v345;\n                v139 = 5;\n                v149 = v18;\n                goto lab_0x40f61f;\n            }\n            case 2: {\n                goto lab_0x4104d2;\n            }\n            case 3: {\n                if (v348 != 0) {\n                    goto lab_0x4104d2;\n                } else {\n                    if (v347 != 0) {\n                        goto lab_0x4104f6;\n                    } else {\n                        // 0x410547\n                        *v41 = 1;\n                        v171 = v343;\n                        v168 = v115;\n                        v182 = v346;\n                        v178 = v347;\n                        v157 = v345;\n                        v139 = 3;\n                        v149 = v18;\n                        goto lab_0x40f61f;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40fe57;\n            }\n        }\n    }\n  lab_0x40fcc8:;\n    int64_t v355 = v130 + 1; // 0x40fccc\n    v1 = v355 & 0xffffffff;\n    int64_t v356 = v130 - 1;\n    int64_t v357 = v356; // 0x40fcde\n    while (*(char *)v356 != 37) {\n        // 0x40fccf\n        v356 = v357 - 1;\n        v357 = v356;\n    }\n    int64_t v358 = 0x100000000 * (v355 - v356) >> 32; // 0x40fce9\n    int64_t v359 = v3 - v20; // 0x40fcef\n    v1 = v359;\n    int64_t v360 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40fcf7\n    v134 = v359;\n    v162 = v360;\n    v176 = v358;\n    v160 = v130;\n    v161 = v356;\n    v142 = v131;\n    v152 = v358 >= v360 ? v358 : v360;\n    goto lab_0x40fd03;\n  lab_0x40fd03:\n    // 0x40fd03\n    if (v134 <= v152) {\n        // break -> 0x40ef33\n        goto lab_0x40ef33_11;\n    }\n    int64_t v361 = v160;\n    int64_t v362 = v361; // 0x40fd0f\n    int64_t v363 = 0; // 0x40fd0f\n    if (v23 != 0) {\n        int64_t v364 = v142;\n        int64_t v365 = v161;\n        int64_t v366 = v176;\n        int64_t v367 = v366; // 0x40fd18\n        int64_t v368 = v361; // 0x40fd18\n        int64_t v369 = v365; // 0x40fd18\n        int64_t v370 = v364; // 0x40fd18\n        int64_t v371 = v23; // 0x40fd18\n        if (v366 < v162) {\n            // 0x40fd1a\n            *v54 = v366;\n            int64_t v372 = (0x100000000 * v115 >> 32) - v366; // 0x40fd22\n            v1 = v372;\n            *v55 = v361;\n            int64_t v373 = v372 + v23; // 0x40fd2a\n            *v53 = v365;\n            *v41 = (char)v364;\n            int64_t * v374 = (int64_t *)v23;\n            int32_t v375 = v1;\n            if (v18 == 48) {\n                // 0x4102a4\n                memset(v374, 48, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            } else {\n                // 0x40fd42\n                memset(v374, 32, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            }\n        }\n        int64_t v376 = v371;\n        int64_t v377 = v369;\n        *v53 = v368;\n        v1 = v367;\n        *v44 = v367;\n        if ((char)v370 == 0) {\n            // 0x4100ee\n            memcpy((int64_t *)v376, (int64_t *)v377, (int32_t)v1);\n        } else {\n            // 0x40fd83\n            function_40ee30(v376, v377, v1);\n        }\n        // 0x40fd92\n        v362 = *v53;\n        v363 = *v44 + v376;\n    }\n    // 0x40fd95\n    v8 = v12;\n    v9 = v13;\n    v25 = v362;\n    v21 = v152 + v20;\n    v24 = v363;\n    goto lab_0x40ef0e;\n  lab_0x40fe57:;\n    int64_t v378 = v177;\n    int64_t v379 = v3 - v20; // 0x40fe60\n    v1 = v379;\n    v130 = v378;\n    v131 = v16;\n    if (*(char *)v378 != 37) {\n        goto lab_0x40fcc8;\n    } else {\n        int64_t v380 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40fe68\n        v134 = v379;\n        v162 = v380;\n        v176 = 1;\n        v160 = v378;\n        v161 = v378;\n        v142 = v16;\n        v152 = v380 != 0 ? v380 : 1;\n        goto lab_0x40fd03;\n    }\n  lab_0x40f632:\n    // 0x40f632\n    *v45 = 0x2520;\n    v328 = v124;\n    v329 = v172;\n    v330 = v169;\n    v331 = v140;\n    v332 = v16;\n    v333 = v150;\n    v334 = 0;\n    goto lab_0x40f63f;\n  lab_0x40f399:\n    // 0x40f399\n    *v50 = (int64_t)*v47;\n    *v51 = *v65;\n    int64_t v643 = *v44; // 0x40f3c2\n    v1 = v643;\n    uint64_t v644 = function_40ee80(0, -1, v643, *tm, v16, *v52); // 0x40f3c7\n    int64_t v645 = 0x100000000 * v115 >> 32;\n    uint64_t v646 = (int32_t)v115 >= 0 ? v645 : 0; // 0x40f3e0\n    int64_t v647 = v644 >= v646 ? v644 : v646; // 0x40f3e8\n    int64_t v648 = v3 - v20; // 0x40f3ec\n    *v53 = v647;\n    if (v648 <= v647) {\n        // break -> 0x40ef33\n        goto lab_0x40ef33_11;\n    }\n    int64_t v649 = v647; // 0x40f400\n    int64_t v650 = 0; // 0x40f400\n    if (v23 != 0) {\n        int64_t v651 = v644; // 0x40f405\n        int64_t v652 = v648; // 0x40f405\n        int64_t v653 = v23; // 0x40f405\n        if (v644 < v646) {\n            // 0x40f407\n            *v54 = v644;\n            int64_t v654 = v645 - v644; // 0x40f40f\n            v1 = v654;\n            *v55 = v648;\n            int64_t v655 = v654 + v23; // 0x40f417\n            int64_t * v656 = (int64_t *)v23;\n            int32_t v657 = v1;\n            if (v18 == 48) {\n                // 0x410378\n                memset(v656, 48, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            } else {\n                // 0x40f425\n                memset(v656, 32, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            }\n        }\n        // 0x40f43f\n        *v55 = v651;\n        *v50 = (int64_t)*v47;\n        *v51 = *v65;\n        int64_t v658 = *v44; // 0x40f466\n        v1 = v658;\n        function_40ee80((int32_t)v653, v652, v658, *tm, v16, *v52);\n        v649 = *v53;\n        v650 = *v55 + v653;\n    }\n    // 0x40f47c\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v649 + v20;\n    v24 = v650;\n    goto lab_0x40ef0e;\n  lab_0x40f0a0:\n    // 0x40f0a0\n    *v45 = 0x2520;\n    v340 = *v46;\n    v342 = v124;\n    v341 = v115;\n    v338 = v123;\n    v339 = 0;\n    v335 = v288;\n    v336 = v18;\n    v337 = 0;\n    goto lab_0x40f0c0;\n  lab_0x40f7e1:;\n    int64_t v659 = (int64_t)*(int32_t *)v183;\n    v167 = v115;\n    v181 = v659;\n    v138 = 2;\n    v148 = v18;\n    switch ((int32_t)v18) {\n        case 48: {\n            goto lab_0x40f610;\n        }\n        case 45: {\n            goto lab_0x40f610;\n        }\n        default: {\n            // 0x40f7fb\n            v167 = v115;\n            v181 = v659;\n            v138 = 2;\n            v148 = 95;\n            goto lab_0x40f610;\n        }\n    }\n  lab_0x40f8a6:\n    // 0x40f8a6\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v155 + v20;\n    v24 = v156;\n    goto lab_0x40ef0e;\n  lab_0x40f63f:\n    // 0x40f63f\n    *(char *)(v49 + 114) = (char)v122;\n    v340 = v49 + 115;\n    v342 = v328;\n    v341 = v330;\n    v338 = v329;\n    v339 = v331 & 0xffffffff;\n    v335 = v332;\n    v336 = v333;\n    v337 = v334;\n    goto lab_0x40f0c0;\n  lab_0x410028:;\n    int64_t v630 = v153;\n    int64_t v631 = v143;\n    int64_t v632 = v137;\n    int64_t v633 = v165;\n    int64_t v634 = v175;\n    *v41 = 45;\n    char v436 = 45; // 0x410036\n    int64_t v437 = v634; // 0x410036\n    int64_t v438 = v633; // 0x410036\n    int64_t v439 = v632; // 0x410036\n    int64_t v440 = v631; // 0x410036\n    int64_t v441 = v146; // 0x410036\n    int64_t v442 = v630; // 0x410036\n    int32_t v429; // 0x40ee80\n    int64_t v433; // 0x40ee80\n    int64_t v434; // 0x40ee80\n    int64_t v435; // 0x40ee80\n    int64_t v432; // 0x40ee80\n    int64_t v431; // 0x40ee80\n    int64_t v430; // 0x40ee80\n    if ((int32_t)v146 != 45) {\n        goto lab_0x40f970;\n    } else {\n        // 0x410028\n        v429 = v633;\n        v430 = 45;\n        v431 = v634;\n        v432 = v633;\n        v433 = v632;\n        v434 = v631;\n        v435 = v630;\n        goto lab_0x41003c;\n    }\n  lab_0x40f2cd:;\n    int64_t v524 = v135;\n    int64_t v523 = v166;\n    int64_t v522 = v40 - v154; // 0x40f2d9\n    char v505; // 0x40ee80\n    int64_t v510; // 0x40ee80\n    int64_t v511; // 0x40ee80\n    int64_t v512; // 0x40ee80\n    int64_t v509; // 0x40ee80\n    int64_t v506; // 0x40ee80\n    int64_t v508; // 0x40ee80\n    int64_t v507; // 0x40ee80\n    if ((int32_t)v147 == 45) {\n        goto lab_0x40f2f4;\n    } else {\n        int32_t v635 = v524 - v522; // 0x40f2eb\n        if (v635 >= 0 == (v635 != 0)) {\n            int64_t v636; // 0x40f2dc\n            int32_t v637; // 0x40f2df\n            if (v637 == 95) {\n                // 0x4101ee\n                *v41 = 0;\n                v505 = 0;\n                v506 = v636;\n                int64_t v638; // 0x40ee80\n                v507 = v638;\n                v508 = v523;\n                int64_t v639; // 0x40f2e8\n                v509 = v639;\n                v510 = v524;\n                int64_t v640; // 0x40ee80\n                v511 = v640;\n                int64_t v641; // 0x40ee80\n                v512 = v641;\n                goto lab_0x4101f3;\n            } else {\n                int64_t v642 = 0x100000000 * v524 >> 32; // 0x4104bb\n                v1 = v642;\n                if (v642 >= v636) {\n                    // break -> 0x40ef33\n                    goto lab_0x40ef33_11;\n                }\n                // 0x4104c7\n                goto lab_0x40fa45;\n            }\n        } else {\n            goto lab_0x40f2f4;\n        }\n    }\n  lab_0x40f610:\n    // 0x40f610\n    *v41 = 0;\n    v171 = v123;\n    v168 = v167;\n    v182 = v181;\n    v178 = 0;\n    v157 = 0;\n    v139 = v138;\n    v149 = v148;\n    goto lab_0x40f61f;\n  lab_0x40f61f:;\n    int64_t v596 = v149;\n    int64_t v597 = v139;\n    int64_t v598 = v157;\n    int64_t v599 = v178;\n    int64_t v600 = v182;\n    int64_t v601 = v168;\n    int64_t v602 = v171;\n    v174 = v602;\n    v164 = v601;\n    v185 = v600;\n    v180 = v599;\n    v159 = v598;\n    v136 = v597;\n    v145 = v596;\n    int64_t v603; // 0x40ee80\n    int64_t v604; // 0x40ee80\n    int64_t v605; // 0x40ee80\n    int64_t v606; // 0x40ee80\n    int64_t v607; // 0x40ee80\n    int64_t v608; // 0x40ee80\n    int64_t v609; // 0x40ee80\n    if ((int32_t)v122 != 79) {\n        goto lab_0x40fb90;\n    } else {\n        // 0x40f629\n        v172 = v602;\n        v169 = v601;\n        v140 = v597;\n        v150 = v596;\n        v607 = v602;\n        v606 = v601;\n        v609 = v600;\n        v608 = v599;\n        v605 = v598;\n        v603 = v597;\n        v604 = v596;\n        if ((char)v598 != 0) {\n            goto lab_0x40fb99;\n        } else {\n            goto lab_0x40f632;\n        }\n    }\n  lab_0x40fbdd:;\n    int32_t v610 = v186;\n    int64_t v611 = -0x6db6db6d * (int64_t)v610 / 0x100000000;\n    v1 = v611;\n    v167 = v115;\n    v181 = (v610 + (int32_t)v611 >> 2) - (v610 >> 31);\n    v138 = 2;\n    v148 = v18;\n    goto lab_0x40f610;\n  lab_0x40fb90:\n    // 0x40fb90\n    v173 = v174;\n    v163 = v164;\n    v184 = v185;\n    v179 = v180;\n    v158 = v159;\n    v141 = v136;\n    v151 = v145;\n    v607 = v174;\n    v606 = v164;\n    v609 = v185;\n    v608 = v180;\n    v605 = v159;\n    v603 = v136;\n    v604 = v145;\n    if ((char)v159 == 0) {\n        goto lab_0x40f8e0;\n    } else {\n        goto lab_0x40fb99;\n    }\n  lab_0x40f0c0:;\n    int64_t v381 = v337;\n    int64_t v382 = v336;\n    int64_t v383 = v341;\n    *(char *)v340 = (char)v342;\n    v1 = format;\n    *(char *)(v340 + 1) = 0;\n    *v44 = v338;\n    *v56 = (int32_t)v339;\n    *v39 = (char)v335;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x40f0ec\n    int64_t v384 = *v44; // 0x40f0f1\n    v8 = v12;\n    v9 = v13;\n    v25 = v384;\n    v21 = v20;\n    v24 = v23;\n    int64_t v385; // 0x40ee80\n    int64_t v386; // 0x40ee80\n    int64_t v387; // 0x40ee80\n    int64_t v388; // 0x40ee80\n    int64_t v389; // 0x40ee80\n    int64_t v390; // 0x40ee80\n    int64_t v391; // 0x40ee80\n    int64_t v392; // 0x40ee80\n    int64_t v393; // 0x40ee80\n    int64_t v394; // 0x40ee80\n    int64_t v395; // 0x40ee80\n    int64_t v396; // 0x40ee80\n    if (copied_chars == 0) {\n        goto lab_0x40ef0e;\n    } else {\n        uint64_t v397 = (int64_t)copied_chars - 1; // 0x40f0ff\n        int64_t v398 = 0x100000000 * v383 >> 32;\n        uint64_t v399 = (int32_t)v383 >= 0 ? v398 : 0; // 0x40f111\n        int64_t v400 = v397 >= v399 ? v397 : v399; // 0x40f119\n        int64_t v401 = v3 - v20; // 0x40f11d\n        v1 = v401;\n        if (v401 <= v400) {\n            // break -> 0x40ef33\n            goto lab_0x40ef33_11;\n        }\n        // 0x40f129\n        v392 = v400;\n        v391 = v384;\n        v388 = v20;\n        v390 = 0;\n        if (v23 == 0) {\n            goto lab_0x40f1c6;\n        } else {\n            char v402 = *v39; // 0x40f137\n            int64_t v403 = v397; // 0x40f140\n            int64_t v404 = v384; // 0x40f140\n            char v405 = v402; // 0x40f140\n            int64_t v406 = v23; // 0x40f140\n            if (v397 < v399 == *v56 == 0) {\n                // 0x40f147\n                *v55 = v397;\n                int64_t v407 = v398 - v397; // 0x40f14f\n                v1 = v407;\n                *v53 = v384;\n                int64_t v408 = v407 + v23; // 0x40f157\n                *v41 = v402;\n                int64_t * v409 = (int64_t *)v23;\n                int32_t v410 = v1;\n                if ((int32_t)v382 == 48) {\n                    // 0x410116\n                    memset(v409, 48, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                } else {\n                    // 0x40f16a\n                    memset(v409, 32, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                }\n            }\n            int64_t v411 = v406;\n            *v53 = v404;\n            v1 = v403;\n            *v44 = v403;\n            v393 = v400;\n            v396 = v57;\n            v395 = v411;\n            v385 = v405;\n            v386 = v20;\n            if ((char)v381 != 0) {\n                // 0x410102\n                function_40ede0(v411, v57, v1);\n                v394 = v400;\n                v387 = v20;\n                v389 = v411;\n                goto lab_0x40f1c3;\n            } else {\n                goto lab_0x40f1ab;\n            }\n        }\n    }\n  lab_0x40f8e0:;\n    int64_t v412 = v151;\n    int64_t v413 = v141;\n    int64_t v414 = v163;\n    int64_t v415 = v173;\n    *v39 = (char)v158;\n    int64_t v416 = v184; // 0x40f8f3\n    int64_t v417 = v40 - 1;\n    int64_t v418 = v417; // 0x40f900\n    if (v179 % 2 != 0) {\n        // 0x40f902\n        *(char *)v417 = 58;\n        v418 = v40 - 2;\n    }\n    int64_t v419 = v418;\n    uint32_t v420 = (int32_t)v179 >> 1; // 0x40f915\n    int64_t v421 = 0xcccccccd * v416 / 0x800000000; // 0x40f917\n    v1 = v421;\n    *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    while (v416 < 10 != (v420 == 0)) {\n        // 0x40f93a\n        v416 = v1 & 0xffffffff;\n        int64_t v422 = v420; // 0x40f93c\n        int64_t v423 = v419;\n        v417 = v423 - 1;\n        v418 = v417;\n        if (v422 % 2 != 0) {\n            // 0x40f902\n            *(char *)v417 = 58;\n            v418 = v423 - 2;\n        }\n        // 0x40f910\n        v419 = v418;\n        v420 = (int32_t)v422 >> 1;\n        v421 = 0xcccccccd * v416 / 0x800000000;\n        v1 = v421;\n        *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    }\n    int32_t v424 = v413; // 0x40f946\n    int32_t v425 = v414;\n    int32_t v426 = v424 - v425; // 0x40f946\n    int64_t v427 = v426 < 0 == ((v426 ^ v424) & (int32_t)(v413 ^ v414)) < 0 ? v413 : v414;\n    int64_t v428 = v427 & 0xffffffff; // 0x40f949\n    v175 = v415;\n    v165 = v414;\n    v137 = v428;\n    v143 = v16;\n    v146 = v412;\n    v153 = v419;\n    if (*v39 != 0) {\n        goto lab_0x410028;\n    } else {\n        // 0x40f956\n        v170 = v415;\n        v166 = v414;\n        v135 = v428;\n        v144 = v16;\n        v147 = v412;\n        v154 = v419;\n        if (*v41 == 0) {\n            goto lab_0x40f2cd;\n        } else {\n            // 0x40f961\n            v429 = v425;\n            v430 = 43;\n            v431 = v415;\n            v432 = v414;\n            v433 = v428;\n            v434 = v16;\n            v435 = v419;\n            if ((int32_t)v412 == 45) {\n                goto lab_0x41003c;\n            } else {\n                // 0x40f96b\n                *v41 = 43;\n                v436 = 43;\n                v437 = v415;\n                v438 = v414;\n                v439 = v428;\n                v440 = v16;\n                v441 = v412;\n                v442 = v419;\n                goto lab_0x40f970;\n            }\n        }\n    }\n  lab_0x40f970:;\n    int64_t v443 = v442;\n    int64_t v444 = v441;\n    int64_t v445 = v440;\n    int64_t v446 = v439;\n    int64_t v447 = v438;\n    int64_t v448 = v437;\n    int64_t v449 = v40 - v443; // 0x40f980\n    int64_t v450 = (v449 ^ 0xffffffff) + v446; // 0x40f983\n    uint64_t v451 = v3 - v20; // 0x40f986\n    int64_t v452; // 0x40ee80\n    int64_t v453; // 0x40ee80\n    int64_t v454; // 0x40ee80\n    int64_t v455; // 0x40ee80\n    int64_t v456; // 0x40ee80\n    int64_t v457; // 0x40ee80\n    int64_t v458; // 0x40ee80\n    int64_t v459; // 0x40ee80\n    int64_t v460; // 0x40ee80\n    int64_t v461; // 0x40ee80\n    int64_t v462; // 0x40ee80\n    int64_t v463; // 0x40ee80\n    int64_t v464; // 0x40ee80\n    int64_t v465; // 0x40ee80\n    int64_t v466; // 0x40ee80\n    int64_t v467; // 0x40ee80\n    int64_t v468; // 0x40ee80\n    int64_t v469; // 0x40ee80\n    int64_t v470; // 0x40ee80\n    int64_t v471; // 0x40ee80\n    int64_t v472; // 0x40ee80\n    int64_t v473; // 0x40ee80\n    int64_t v474; // 0x40ee80\n    int64_t v475; // 0x40ee80\n    int64_t v476; // 0x40ee80\n    int64_t v477; // 0x40f9ca\n    if ((int32_t)v450 < 1) {\n        int64_t v478 = 0x100000000 * v447 >> 32;\n        int64_t v479 = (int32_t)v447 >= 0 ? v478 : 0; // 0x41014d\n        int64_t v480 = v479 != 0 ? v479 : 1; // 0x410153\n        if (v480 >= v451) {\n            // break -> 0x40ef33\n            goto lab_0x40ef33_11;\n        }\n        int64_t v481 = v449; // 0x410163\n        int64_t v482 = v480; // 0x410163\n        int64_t v483 = v479; // 0x410163\n        int64_t v484 = v446; // 0x410163\n        int64_t v485 = v445; // 0x410163\n        int64_t v486 = 0; // 0x410163\n        if (v23 != 0) {\n            int32_t v487 = v446; // 0x410165\n            int64_t v488 = v449; // 0x410168\n            int64_t v489 = v480; // 0x410168\n            int64_t v490 = v479; // 0x410168\n            int64_t v491 = v446; // 0x410168\n            int64_t v492 = v445; // 0x410168\n            int64_t v493 = v23; // 0x410168\n            if (v487 == 0 && v479 >= 2) {\n                // 0x410170\n                *v61 = v449;\n                int64_t v494 = v478 - 1; // 0x410178\n                v1 = v494;\n                *v62 = v480;\n                *v59 = v479;\n                *v53 = v494 + v23;\n                *v60 = v487;\n                *v43 = (char)v445;\n                if ((int32_t)v444 == 48) {\n                    // 0x410595\n                    int64_t * v495; // 0x40ee80\n                    int32_t v496; // 0x40ee80\n                    memset(v495, 48, v496);\n                    int64_t v497 = *v53; // 0x4105a2\n                    unsigned char v498 = *v43; // 0x4105a7\n                    uint32_t v499 = *v60; // 0x4105ad\n                    int64_t v500 = *v59; // 0x4105b2\n                    int64_t v501 = *v62; // 0x4105b7\n                    int64_t v502 = *v61; // 0x4105bc\n                    v488 = v502;\n                    v489 = v501;\n                    v490 = v500;\n                    v491 = v499;\n                    v492 = v498;\n                    v493 = v497;\n                } else {\n                    // 0x4101a3\n                    memset((int64_t *)v23, 32, (int32_t)v1);\n                    v488 = *v61;\n                    v489 = *v62;\n                    v490 = *v59;\n                    v491 = (int64_t)*v60;\n                    v492 = (int64_t)*v43;\n                    v493 = *v53;\n                }\n            }\n            // 0x4101cf\n            *(char *)v493 = *v41;\n            v481 = v488;\n            v482 = v489;\n            v483 = v490;\n            v484 = v491;\n            v485 = v492;\n            v486 = v493 + 1;\n        }\n        int64_t v503 = v482 + v20; // 0x4101e0\n        v472 = v3 - v503;\n        v476 = v481;\n        v473 = v447;\n        v468 = v448;\n        v469 = v483;\n        v453 = v484;\n        v457 = v485;\n        v459 = v444;\n        v461 = v443;\n        v462 = v503;\n        v466 = v486;\n        goto lab_0x40f306;\n    } else {\n        int32_t v504 = v444; // 0x40f992\n        v505 = v436;\n        v506 = v451;\n        v507 = v448;\n        v508 = v447;\n        v509 = v450;\n        v510 = v446;\n        v511 = v445;\n        v512 = v443;\n        if (v504 == 95) {\n            goto lab_0x4101f3;\n        } else {\n            // 0x40f99c\n            if (0x100000000 * v446 >> 32 >= v451) {\n                // break -> 0x40ef33\n                goto lab_0x40ef33_11;\n            }\n            int64_t v513 = 0x100000000 * v447 >> 32;\n            int64_t v514 = (int32_t)v447 >= 0 ? v513 : 0; // 0x40f9b7\n            v1 = v514;\n            uint64_t v515 = v514 != 0 ? v514 : 1; // 0x40f9bd\n            if (v515 >= v451) {\n                // break -> 0x40ef33\n                goto lab_0x40ef33_11;\n            }\n            // 0x40f9ca\n            v477 = v515 + v20;\n            int64_t v516 = 0x100000000 * v450 >> 32; // 0x40f9cd\n            v475 = v449;\n            v467 = v448;\n            v471 = v516;\n            v452 = v446;\n            v456 = v445;\n            v458 = v444;\n            v460 = v443;\n            v463 = v477;\n            v465 = 0;\n            if (v23 == 0) {\n                goto lab_0x40fa90;\n            } else {\n                int32_t v517 = v446; // 0x40f9dc\n                v474 = v449;\n                v470 = v516;\n                v454 = v446;\n                v455 = v445;\n                v464 = v23;\n                if (v517 == 0 && v514 >= 2) {\n                    // 0x40f9e7\n                    *v59 = v516;\n                    int64_t v518 = v513 - 1; // 0x40f9ef\n                    v1 = v518;\n                    *v54 = v449;\n                    int64_t v519 = v518 + v23; // 0x40f9f8\n                    *v56 = v517;\n                    *v39 = (char)v445;\n                    int64_t * v520 = (int64_t *)v23;\n                    int32_t v521 = v1;\n                    if (v504 == 48) {\n                        // 0x4105ff\n                        memset(v520, 48, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    } else {\n                        // 0x40fa10\n                        memset(v520, 32, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    }\n                }\n                // 0x40fa35\n                *(char *)v464 = *v41;\n                goto lab_0x40fa45;\n            }\n        }\n    }\n  lab_0x40f2f4:\n    // 0x40f2f4\n    v472 = v3 - v20;\n    v476 = v522;\n    v473 = v523;\n    v468 = v170;\n    v469 = (int32_t)v523 >= 0 ? 0x100000000 * v523 >> 32 : 0;\n    v453 = v524;\n    v457 = v144;\n    v459 = v147;\n    v461 = v154;\n    v462 = v20;\n    v466 = v23;\n    goto lab_0x40f306;\n  lab_0x4104f6:\n    // 0x4104f6\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v347 + 100 * v346;\n    v178 = 4;\n    v157 = v345;\n    v139 = 6;\n    v149 = v18;\n    goto lab_0x40f61f;\n  lab_0x4104d2:\n    // 0x4104d2\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v348 + 0x2710 * v346 + 100 * v347;\n    v178 = 20;\n    v157 = v345;\n    v139 = 9;\n    v149 = v18;\n    goto lab_0x40f61f;\n  lab_0x40fb99:\n    // 0x40fb99\n    v173 = v607;\n    v163 = v606;\n    v184 = -v609 & 0xffffffff;\n    v179 = v608;\n    v158 = v605;\n    v141 = v603;\n    v151 = v604;\n    goto lab_0x40f8e0;\n  lab_0x41003c:;\n    int64_t v612 = 0x100000000 * v432 >> 32;\n    int64_t v613 = v429 >= 0 ? v612 : 0; // 0x410052\n    uint64_t v614 = v613 != 0 ? v613 : 1; // 0x410058\n    if (v3 - v20 <= v614) {\n        // break -> 0x40ef33\n        goto lab_0x40ef33_11;\n    }\n    int64_t v615 = v434;\n    int64_t v616 = v433;\n    int64_t v617 = v613; // 0x41006b\n    int64_t v618 = v616; // 0x41006b\n    int64_t v619 = v615; // 0x41006b\n    int64_t v620 = 0; // 0x41006b\n    if (v23 != 0) {\n        int64_t v621 = v430;\n        int32_t v622 = v616; // 0x41006d\n        int64_t v623 = v621; // 0x410070\n        int64_t v624 = v613; // 0x410070\n        int64_t v625 = v616; // 0x410070\n        int64_t v626 = v615; // 0x410070\n        int64_t v627 = v23; // 0x410070\n        if (v622 == 0 && v613 >= 2) {\n            // 0x410078\n            *v58 = (char)v621;\n            int64_t v628 = v612 - 1; // 0x410087\n            *v54 = v613;\n            v1 = v628;\n            *v56 = v622;\n            *v39 = (char)v615;\n            *v44 = v628;\n            memset((int64_t *)v23, 32, (int32_t)v628);\n            v624 = *v54;\n            v623 = (int64_t)*v58;\n            v625 = (int64_t)*v56;\n            v626 = (int64_t)*v39;\n            v627 = *v44 + v23;\n        }\n        // 0x4100c4\n        *(char *)v627 = (char)v623;\n        v617 = v624;\n        v618 = v625;\n        v619 = v626;\n        v620 = v627 + 1;\n    }\n    int64_t v629 = v614 + v20; // 0x4100cf\n    v472 = v3 - v629;\n    v476 = v40 - v435;\n    v473 = v432;\n    v468 = v431;\n    v469 = v617;\n    v453 = v618;\n    v457 = v619;\n    v459 = 45;\n    v461 = v435;\n    v462 = v629;\n    v466 = v620;\n    goto lab_0x40f306;\n  lab_0x40f306:;\n    uint64_t v525 = v469;\n    uint64_t v526 = v476;\n    int64_t v527 = v526 >= v525 ? v526 : v525; // 0x40f30c\n    if (v527 >= v472) {\n        // break -> 0x40ef33\n        goto lab_0x40ef33_11;\n    }\n    int64_t v528 = v466;\n    int64_t v529 = v462;\n    int64_t v530 = v468;\n    v392 = v527;\n    v391 = v530;\n    v388 = v529;\n    v390 = 0;\n    if (v528 == 0) {\n        goto lab_0x40f1c6;\n    } else {\n        int64_t v531 = v457;\n        int64_t v532 = v526; // 0x40f325\n        int64_t v533 = v530; // 0x40f325\n        int64_t v534 = v531; // 0x40f325\n        int64_t v535 = v528; // 0x40f325\n        if (v526 < v525 == (int32_t)v453 == 0) {\n            // 0x40f32c\n            *v55 = v526;\n            int64_t v536 = (0x100000000 * v473 >> 32) - v526; // 0x40f334\n            v1 = v536;\n            *v53 = v530;\n            *v41 = (char)v531;\n            if ((int32_t)v459 == 48) {\n                // 0x410277\n                int64_t * v537; // 0x40ee80\n                int32_t v538; // 0x40ee80\n                memset(v537, 48, v538);\n                unsigned char v539 = *v41; // 0x410287\n                int64_t v540 = *v53; // 0x41028d\n                int64_t v541 = *v55; // 0x410292\n                v532 = v541;\n                v533 = v540;\n                v534 = v539;\n                int64_t v542; // 0x40f33c\n                v535 = v542;\n            } else {\n                // 0x40f34f\n                memset((int64_t *)v528, 32, (int32_t)v1);\n                v532 = *v55;\n                v533 = *v53;\n                v534 = (int64_t)*v41;\n                v535 = v528 + v536;\n            }\n        }\n        // 0x40f36f\n        *v53 = v533;\n        v1 = v532;\n        *v44 = v532;\n        v393 = v527;\n        v396 = v461;\n        v395 = v535;\n        v385 = v534;\n        v386 = v529;\n        goto lab_0x40f1ab;\n    }\n  lab_0x40f1c6:\n    // 0x40f1c6\n    v8 = v12;\n    v9 = v13;\n    v25 = v391;\n    v21 = v388 + v392;\n    v24 = v390;\n    goto lab_0x40ef0e;\n  lab_0x4101f3:;\n    int64_t v543 = v509;\n    int64_t v544 = 0x100000000 * v543 >> 32; // 0x4101f3\n    if (v544 >= v506) {\n        // break -> 0x40ef33\n        goto lab_0x40ef33_11;\n    }\n    int64_t v545 = v512;\n    int64_t v546 = v511;\n    int64_t v547 = v510;\n    int64_t v548 = v508;\n    int64_t v549 = v507;\n    char v550 = v505; // 0x410202\n    int64_t v551 = v543 & 0xffffffff; // 0x410202\n    int64_t v552 = v547; // 0x410202\n    int64_t v553 = v546; // 0x410202\n    int64_t v554 = 0; // 0x410202\n    if (v23 != 0) {\n        // 0x410204\n        v1 = v544;\n        *v60 = (int32_t)v543;\n        *v56 = (int32_t)v547;\n        *v39 = (char)v546;\n        memset((int64_t *)v23, 32, (int32_t)v544);\n        v550 = *v41;\n        v551 = (int64_t)*v60;\n        v552 = (int64_t)*v56;\n        v553 = (int64_t)*v39;\n        v554 = v544 + v23;\n    }\n    int64_t v555 = v554;\n    int64_t v556 = v553;\n    int64_t v557 = v552;\n    int64_t v558 = v551;\n    char v559 = v550; // 0x410250\n    int64_t v560 = v544 + v20; // 0x410238\n    int32_t v561 = v558; // 0x41023e\n    int32_t v562 = v561 - (int32_t)v548; // 0x41023e\n    int64_t v563 = v562 < 0 == ((v562 ^ v561) & (int32_t)(v558 ^ v548)) < 0 ? 0 : v548 - v558 & 0xffffffff; // 0x410246\n    int64_t v564 = v3 - v560; // 0x41024d\n    int64_t v565 = 0x100000000 * v563 >> 32;\n    if (v559 != 0) {\n        int64_t v566 = v563 != 0 ? v565 : 1; // 0x4102eb\n        if (v566 >= v564) {\n            // break -> 0x40ef33\n            goto lab_0x40ef33_11;\n        }\n        int64_t v567 = v566; // 0x4102fb\n        int64_t v568 = v565; // 0x4102fb\n        int64_t v569 = v557; // 0x4102fb\n        int64_t v570 = v556; // 0x4102fb\n        int64_t v571 = 0; // 0x4102fb\n        if (v555 != 0) {\n            int32_t v572 = v557; // 0x4102fd\n            char v573 = v559; // 0x410300\n            int64_t v574 = v566; // 0x410300\n            int64_t v575 = v565; // 0x410300\n            int64_t v576 = v557; // 0x410300\n            int64_t v577 = v556; // 0x410300\n            int64_t v578 = v555; // 0x410300\n            if (v572 == 0 && v565 >= 2) {\n                int64_t v579 = v565 - 1; // 0x410308\n                *v59 = v566;\n                v1 = v579;\n                *v60 = v572;\n                *v43 = (char)v556;\n                *v53 = v565;\n                memset((int64_t *)v555, 32, (int32_t)v579);\n                v574 = *v59;\n                v575 = *v53;\n                v573 = *v41;\n                v576 = (int64_t)*v60;\n                v577 = (int64_t)*v43;\n                v578 = v579 + v555;\n            }\n            // 0x410348\n            v568 = v575;\n            v567 = v574;\n            *(char *)v578 = v573;\n            v569 = v576;\n            v570 = v577;\n            v571 = v578 + 1;\n        }\n        int64_t v580 = v567 + v560; // 0x410359\n        v472 = v3 - v580;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v568;\n        v453 = v569;\n        v457 = v570;\n        v459 = 95;\n        v461 = v545;\n        v462 = v580;\n        v466 = v571;\n    } else {\n        // 0x41025b\n        v472 = v564;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v565;\n        v453 = v557;\n        v457 = v556;\n        v459 = 95;\n        v461 = v545;\n        v462 = v560;\n        v466 = v555;\n    }\n    goto lab_0x40f306;\n  lab_0x40f1ab:;\n    int64_t v581 = v386;\n    int64_t v582 = v395;\n    int64_t v583 = v396;\n    int64_t v584 = v393;\n    if ((char)v385 == 0) {\n        // 0x410010\n        memcpy((int64_t *)v582, (int64_t *)v583, (int32_t)v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    } else {\n        // 0x40f1b4\n        function_40ee30(v582, v583, v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    }\n    goto lab_0x40f1c3;\n  lab_0x40fa90:;\n    int64_t v585 = v463 + v471; // 0x40fa94\n    v472 = v3 - v585;\n    v476 = v475;\n    v473 = 0;\n    v468 = v467;\n    v469 = 0;\n    v453 = v452;\n    v457 = v456;\n    v459 = v458;\n    v461 = v460;\n    v462 = v585;\n    v466 = v465;\n    goto lab_0x40f306;\n  lab_0x40fa45:;\n    int64_t v586 = v464 + 1;\n    int64_t v587 = v477;\n    int64_t v588 = v443;\n    int64_t v589 = v444;\n    int64_t v590 = v455;\n    int64_t v591 = v454;\n    int64_t v592 = v470;\n    int64_t v593 = v448;\n    int64_t v594 = v474;\n    v475 = v594;\n    v467 = v593;\n    v471 = v592;\n    v452 = v591;\n    v456 = v590;\n    v458 = v589;\n    v460 = v588;\n    v463 = v587;\n    v465 = 0;\n    if (v586 != 0) {\n        // 0x40fa4a\n        v1 = v592;\n        *v59 = v594;\n        *v60 = (int32_t)v591;\n        *v55 = v593;\n        *v39 = (char)v590;\n        *v44 = v592;\n        memset((int64_t *)v586, 48, (int32_t)v592);\n        int64_t v595 = *v44; // 0x40fa73\n        v475 = *v59;\n        v467 = *v55;\n        v471 = v595;\n        v452 = (int64_t)*v60;\n        v456 = (int64_t)*v39;\n        v458 = v589;\n        v460 = v588;\n        v463 = v587;\n        v465 = v595 + v586;\n    }\n    goto lab_0x40fa90;\n  lab_0x40f1c3:\n    // 0x40f1c3\n    v392 = v394;\n    v391 = *v53;\n    v388 = v387;\n    v390 = *v44 + v389;\n    goto lab_0x40f1c6;\n  lab_0x40ef1b_2:\n    // 0x40ef1b\n    if (v3 != 0 && v5 != 0) {\n        // 0x40ef27\n        *(char *)v5 = 0;\n    }\n    // 0x40ef33\n    return result;\n}\n"
        },
        {
            "funcName": "function_410650",
            "funcStartAddr": "410650",
            "funcEndAddr": "41066f",
            "decompiledFuncCode": "int64_t function_410650(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int64_t a6) {\n    char v1 = 0; // bp-9, 0x410654\n    int64_t result = function_40ee80((int32_t)a1, a2, a3, (int64_t)a4, 0, (int64_t)&v1); // 0x410665\n    return result;\n}\n"
        },
        {
            "funcName": "function_410670",
            "funcStartAddr": "410670",
            "funcEndAddr": "410709",
            "decompiledFuncCode": "int64_t function_410670(int64_t str) {\n    // 0x410670\n    if (str == 0) {\n        // 0x4106e9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g88);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x41067e\n    int64_t result = (int64_t)found_char_pos; // 0x41067e\n    if (found_char_pos == NULL) {\n        // 0x4106d9\n        g189 = str;\n        g87 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x410688\n    if (v1 - str < 7) {\n        // 0x4106d9\n        g189 = str;\n        g87 = str;\n        return result;\n    }\n    // 0x410698\n    bool v2; // 0x410670\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x410670\n    int64_t v5 = result - 6; // 0x410670\n    int64_t v6 = 7; // 0x4106a6\n    unsigned char v7 = *(char *)v5; // 0x4106a6\n    char v8 = *(char *)v4; // 0x4106a6\n    char v9 = v8; // 0x4106a6\n    bool v10 = false; // 0x4106a6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4106b0\n    int64_t v13 = v1; // 0x4106b0\n    int64_t v14 = 3; // 0x4106b0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4106d9\n        g189 = str;\n        g87 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4106c2\n    char v16 = *(char *)v12; // 0x4106c2\n    char v17 = v16; // 0x4106c2\n    bool v18 = false; // 0x4106c2\n    while (v15 == v16) {\n        // 0x4106b2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4106cc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4106ce\n        v20 = result + 4;\n        g85 = v20;\n    }\n    // 0x4106d9\n    g189 = v20;\n    g87 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_410710",
            "funcStartAddr": "410710",
            "funcEndAddr": "410802",
            "decompiledFuncCode": "int64_t function_410710(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x410724\n    int64_t result = (int64_t)v1; // 0x410724\n    if (result != a1) {\n        // 0x410731\n        return result;\n    }\n    int64_t v2 = function_4179a0(); // 0x410740\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4107f6\n    if (v3 == 85) {\n        // 0x410750\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4107e8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g42 : (int64_t)&g34;\n            return result2;\n        }\n        char v4 = *v1; // 0x41077e\n        int64_t result3 = v4 != 96 ? (int64_t)&g35 : (int64_t)&g38; // 0x41078b\n        // 0x410731\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4107e8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g42 : (int64_t)&g34;\n        return result2;\n    }\n    char v5 = *v1; // 0x4107cd\n    int64_t result4 = v5 != 96 ? (int64_t)&g36 : (int64_t)&g37; // 0x4107da\n    // 0x410731\n    return result4;\n}\n"
        },
        {
            "funcName": "function_410810",
            "funcStartAddr": "410810",
            "funcEndAddr": "410867",
            "decompiledFuncCode": "int64_t function_410810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x410810\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_410867",
            "funcStartAddr": "410867",
            "funcEndAddr": "411a31",
            "decompiledFuncCode": "int64_t function_410867(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4108b1\n    int64_t v3 = 0; // 0x4108b1\n    int64_t v4; // 0x410867\n    int64_t v5; // 0x410867\n    int64_t v6; // 0x410867\n    int64_t v7; // 0x410867\n    int64_t v8; // 0x410867\n    int64_t v9; // 0x410867\n    int64_t v10; // 0x410867\n    int64_t v11; // 0x410867\n    int64_t v12; // 0x410867\n    int64_t v13; // 0x410867\n    int64_t v14; // 0x410867\n    int64_t v15; // 0x410867\n    int64_t v16; // 0x410867\n    int64_t v17; // 0x410867\n    int64_t v18; // 0x410867\n    int64_t result; // 0x410867\n    int64_t v19; // 0x410867\n    int32_t wc; // bp+132, 0x410867\n    int64_t ps; // bp+136, 0x410867\n    char v20; // 0x410e20\n    int64_t v21; // 0x410e20\n    int64_t v22; // 0x4111c8\n    int64_t v23; // 0x410867\n    int64_t v24; // 0x4111e7\n    int32_t v25; // 0x410867\n    while (true) {\n      lab_0x4108b8_2:\n        // 0x4108b8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x410867\n        int64_t v27; // 0x4108ec\n        while (true) {\n          lab_0x4108b8:\n            // 0x4108b8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4108c3\n            if (v15 == -1) {\n                // 0x4108c5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4108d3\n            if (v28) {\n                // break (via goto) -> 0x411038\n                goto lab_0x411038;\n            }\n            // 0x4108dc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g208 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x410ecb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x410a11;\n                    }\n                    // 0x4112ed\n                    v26 = v5 + 1;\n                    goto lab_0x4108b8;\n                }\n                case 7: {\n                    goto lab_0x410a11;\n                }\n                case 8: {\n                    goto lab_0x410a11;\n                }\n                case 9: {\n                    goto lab_0x410c2a_2;\n                }\n                case 10: {\n                    goto lab_0x410c2a_2;\n                }\n                case 11: {\n                    goto lab_0x410a11;\n                }\n                case 12: {\n                    goto lab_0x410a11;\n                }\n                case 13: {\n                    goto lab_0x410c2a_2;\n                }\n                case 32: {\n                    goto lab_0x410c2a_2;\n                }\n                case 33: {\n                    goto lab_0x410c2a_2;\n                }\n                case 34: {\n                    goto lab_0x410c2a_2;\n                }\n                case 35: {\n                    goto lab_0x4109dd;\n                }\n                case 36: {\n                    goto lab_0x410c2a_2;\n                }\n                case 37: {\n                    goto lab_0x410a11;\n                }\n                case 38: {\n                    goto lab_0x410c2a_2;\n                }\n                case 39: {\n                    goto lab_0x410c2a_2;\n                }\n                case 40: {\n                    goto lab_0x410c2a_2;\n                }\n                case 41: {\n                    goto lab_0x410c2a_2;\n                }\n                case 42: {\n                    goto lab_0x410c2a_2;\n                }\n                case 43: {\n                    goto lab_0x410a11;\n                }\n                case 44: {\n                    goto lab_0x410a11;\n                }\n                case 45: {\n                    goto lab_0x410a11;\n                }\n                case 46: {\n                    goto lab_0x410a11;\n                }\n                case 47: {\n                    goto lab_0x410a11;\n                }\n                case 48: {\n                    goto lab_0x410a11;\n                }\n                case 49: {\n                    goto lab_0x410a11;\n                }\n                case 50: {\n                    goto lab_0x410a11;\n                }\n                case 51: {\n                    goto lab_0x410a11;\n                }\n                case 52: {\n                    goto lab_0x410a11;\n                }\n                case 53: {\n                    goto lab_0x410a11;\n                }\n                case 54: {\n                    goto lab_0x410a11;\n                }\n                case 55: {\n                    goto lab_0x410a11;\n                }\n                case 56: {\n                    goto lab_0x410a11;\n                }\n                case 57: {\n                    goto lab_0x410a11;\n                }\n                case 58: {\n                    goto lab_0x410a11;\n                }\n                case 59: {\n                    goto lab_0x410c2a_2;\n                }\n                case 60: {\n                    goto lab_0x410c2a_2;\n                }\n                case 61: {\n                    goto lab_0x410c2a_2;\n                }\n                case 62: {\n                    goto lab_0x410c2a_2;\n                }\n                case 63: {\n                    goto lab_0x410c2a_2;\n                }\n                case 65: {\n                    goto lab_0x410a11;\n                }\n                case 66: {\n                    goto lab_0x410a11;\n                }\n                case 67: {\n                    goto lab_0x410a11;\n                }\n                case 68: {\n                    goto lab_0x410a11;\n                }\n                case 69: {\n                    goto lab_0x410a11;\n                }\n                case 70: {\n                    goto lab_0x410a11;\n                }\n                case 71: {\n                    goto lab_0x410a11;\n                }\n                case 72: {\n                    goto lab_0x410a11;\n                }\n                case 73: {\n                    goto lab_0x410a11;\n                }\n                case 74: {\n                    goto lab_0x410a11;\n                }\n                case 75: {\n                    goto lab_0x410a11;\n                }\n                case 76: {\n                    goto lab_0x410a11;\n                }\n                case 77: {\n                    goto lab_0x410a11;\n                }\n                case 78: {\n                    goto lab_0x410a11;\n                }\n                case 79: {\n                    goto lab_0x410a11;\n                }\n                case 80: {\n                    goto lab_0x410a11;\n                }\n                case 81: {\n                    goto lab_0x410a11;\n                }\n                case 82: {\n                    goto lab_0x410a11;\n                }\n                case 83: {\n                    goto lab_0x410a11;\n                }\n                case 84: {\n                    goto lab_0x410a11;\n                }\n                case 85: {\n                    goto lab_0x410a11;\n                }\n                case 86: {\n                    goto lab_0x410a11;\n                }\n                case 87: {\n                    goto lab_0x410a11;\n                }\n                case 88: {\n                    goto lab_0x410a11;\n                }\n                case 89: {\n                    goto lab_0x410a11;\n                }\n                case 90: {\n                    goto lab_0x410a11;\n                }\n                case 91: {\n                    goto lab_0x410c2a_2;\n                }\n                case 92: {\n                    goto lab_0x410c2a_2;\n                }\n                case 93: {\n                    goto lab_0x410a11;\n                }\n                case 94: {\n                    goto lab_0x410c2a_2;\n                }\n                case 95: {\n                    goto lab_0x410a11;\n                }\n                case 96: {\n                    goto lab_0x410c2a_2;\n                }\n                case 97: {\n                    goto lab_0x410a11;\n                }\n                case 98: {\n                    goto lab_0x410a11;\n                }\n                case 99: {\n                    goto lab_0x410a11;\n                }\n                case 100: {\n                    goto lab_0x410a11;\n                }\n                case 101: {\n                    goto lab_0x410a11;\n                }\n                case 102: {\n                    goto lab_0x410a11;\n                }\n                case 103: {\n                    goto lab_0x410a11;\n                }\n                case 104: {\n                    goto lab_0x410a11;\n                }\n                case 105: {\n                    goto lab_0x410a11;\n                }\n                case 106: {\n                    goto lab_0x410a11;\n                }\n                case 107: {\n                    goto lab_0x410a11;\n                }\n                case 108: {\n                    goto lab_0x410a11;\n                }\n                case 109: {\n                    goto lab_0x410a11;\n                }\n                case 110: {\n                    goto lab_0x410a11;\n                }\n                case 111: {\n                    goto lab_0x410a11;\n                }\n                case 112: {\n                    goto lab_0x410a11;\n                }\n                case 113: {\n                    goto lab_0x410a11;\n                }\n                case 114: {\n                    goto lab_0x410a11;\n                }\n                case 115: {\n                    goto lab_0x410a11;\n                }\n                case 116: {\n                    goto lab_0x410a11;\n                }\n                case 117: {\n                    goto lab_0x410a11;\n                }\n                case 118: {\n                    goto lab_0x410a11;\n                }\n                case 119: {\n                    goto lab_0x410a11;\n                }\n                case 120: {\n                    goto lab_0x410a11;\n                }\n                case 121: {\n                    goto lab_0x410a11;\n                }\n                case 122: {\n                    goto lab_0x410a11;\n                }\n                case 123: {\n                    goto lab_0x4109b5;\n                }\n                case 124: {\n                    goto lab_0x410c2a_2;\n                }\n                case 125: {\n                    goto lab_0x4109b5;\n                }\n                case 126: {\n                    goto lab_0x4109dd;\n                }\n                default: {\n                    goto lab_0x410db5;\n                }\n            }\n        }\n      lab_0x410db5:\n        if (v23 != 1) {\n            // 0x411120\n            ps = 0;\n            int64_t len = v15; // 0x411130\n            if (v15 == -1) {\n                // 0x411132\n                len = strlen((char *)str);\n            }\n            // 0x41115e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4111bf:\n                // 0x4111bf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4111c4\n                int64_t v30 = v29 + str;\n                v24 = function_416e80((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x41173a_2;\n                    }\n                    case -1: {\n                        goto lab_0x41173a_2;\n                    }\n                    case -2: {\n                        // 0x41181d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x411857\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x41185a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x411867\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x411860\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x41173a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x41173a_2;\n                    }\n                    case 1: {\n                        goto lab_0x411190;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x41123c\n                        char v34 = *(char *)v33; // 0x41124d\n                        unsigned char v35; // 0x410867\n                        if (v34 < 125) {\n                            // 0x411258\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x41126f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x410c2a_2;\n                            }\n                        }\n                        // 0x411240\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x41124d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x411258\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x41126f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x410c2a_2;\n                                }\n                            }\n                            // 0x411240\n                            v33++;\n                        }\n                        goto lab_0x411190;\n                    }\n                }\n            }\n            goto lab_0x41173a_2;\n        } else {\n            // 0x410e04\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x410a11;\n        }\n    }\n  lab_0x411038:\n    // 0x411038\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x41193a\n        if (v8 > result) {\n            // 0x411943\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x410c67\n        return result;\n    }\n    goto lab_0x410c2a_2;\n  lab_0x410a11:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x410a20\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x410c2a_2;\n        }\n    }\n    int64_t v42 = result; // 0x410b21\n    char v43 = v20; // 0x410b21\n    int64_t v44 = v58; // 0x410b21\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x410b21\n    int64_t v46 = v56; // 0x410b21\n    goto lab_0x410a9d;\n  lab_0x410c2a_2:;\n    // 0x410c67\n    char * v36; // 0x410867\n    return function_410810(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x41173a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x410a11;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x41130e\n        int64_t v41 = v5 + 1; // 0x4113f1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x4113f8\n        char v48 = v20; // 0x4113f8\n        int64_t v49 = result; // 0x4113f8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x4113c1\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x4113c5\n            int64_t v52 = v50 + 1; // 0x4113ca\n            int64_t v53 = v47 + 1; // 0x4113f1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x4113bc\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x4113c1\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x4113c5\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x410a9d;\n    }\n  lab_0x411190:\n    // 0x411190\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x4111af\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4111b2\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x41173a\n        goto lab_0x41173a_2;\n    }\n    goto lab_0x4111bf;\n  lab_0x4109dd:\n    // 0x4109dd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x410c2a_2;\n    }\n    goto lab_0x410a11;\n  lab_0x4109b5:;\n    bool v61 = v15 == 1; // 0x4109c0\n    if (v15 == -1) {\n        // 0x4109c2\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x4109ce\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x410a11;\n    } else {\n        goto lab_0x4109dd;\n    }\n  lab_0x410a9d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x410aa2\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x410aa6\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x4108b8_2;\n}\n"
        },
        {
            "funcName": "function_411a40",
            "funcStartAddr": "411a40",
            "funcEndAddr": "411bde",
            "decompiledFuncCode": "int64_t function_411a40(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x411a42\n    int32_t * v3 = __errno_location(); // 0x411a5c\n    int64_t v4 = (int64_t)g78; // 0x411a61\n    int32_t v5 = *v3; // 0x411a6b\n    int64_t v6 = v4; // 0x411a81\n    if (v2 >= (int64_t)*(int32_t *)&g81) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x411bd9\n            function_412bd0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x411a90\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x411a97\n        int64_t v9; // 0x411a40\n        if (g78 == &g79) {\n            int64_t v10 = function_4129e0(0, v8); // 0x411bba\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g79); // 0x411bbf\n            *(int64_t *)&g78 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4129e0(v4, v8); // 0x411aab\n            *(int64_t *)&g78 = v12;\n            v9 = v12;\n        }\n        // 0x411aba\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g81; // 0x411aba\n        int32_t v14 = v7; // 0x411ac1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g81 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x411af1\n    int64_t v17 = v15 + 8; // 0x411af4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x411afb\n    int64_t * v19 = (int64_t *)v16; // 0x411afe\n    uint64_t v20 = *v19; // 0x411afe\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x411b01\n    int64_t result = *v21; // 0x411b01\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x411b0c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x411b15\n    int64_t v24; // 0x411a40\n    uint64_t v25 = function_410810(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x411b24\n    if (v20 > v25) {\n        // 0x411b9b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x411b37\n    *v19 = v26;\n    if (result != (int64_t)&g190) {\n        // 0x411b47\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_412980(v26); // 0x411b61\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x411b7b\n    int64_t v28 = *v23; // 0x411b7e\n    int64_t v29; // 0x411a40\n    function_410810(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x411b9b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411be0",
            "funcStartAddr": "411be0",
            "funcEndAddr": "411c14",
            "decompiledFuncCode": "int64_t function_411be0(int32_t a1) {\n    int32_t * v1 = __errno_location(); // 0x411be7\n    int64_t result = function_412b80(a1 == 0 ? (int64_t)&g191 : (int64_t)a1, 56); // 0x411c06\n    return result;\n}\n"
        },
        {
            "funcName": "function_411c20",
            "funcStartAddr": "411c20",
            "funcEndAddr": "411c2f",
            "decompiledFuncCode": "int64_t function_411c20(int32_t a1) {\n    uint32_t result = *((a1 == 0 ? (int32_t *)&g191 : (int32_t *)(int64_t)a1)); // 0x411c2c\n    return result;\n}\n"
        },
        {
            "funcName": "function_411c30",
            "funcStartAddr": "411c30",
            "funcEndAddr": "411c3f",
            "decompiledFuncCode": "int64_t function_411c30(int32_t a1, int64_t a2) {\n    int32_t * v1 = a1 == 0 ? (int32_t *)&g191 : (int32_t *)(int64_t)a1; // 0x411c3c\n    *v1 = (int32_t)a2;\n    return (int64_t)&g191;\n}\n"
        },
        {
            "funcName": "function_411c40",
            "funcStartAddr": "411c40",
            "funcEndAddr": "411c73",
            "decompiledFuncCode": "int64_t function_411c40(int64_t a1, unsigned char a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g191 + 8 : a1 + 8; // 0x411c59\n    int32_t * v2 = (int32_t *)(v1 + (int64_t)(4 * a2 / 32)); // 0x411c5e\n    uint32_t v3 = *v2; // 0x411c5e\n    uint32_t v4 = (int32_t)(a2 % 32);\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_411c80",
            "funcStartAddr": "411c80",
            "funcEndAddr": "411c93",
            "decompiledFuncCode": "int64_t function_411c80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g191 + 4 : a1 + 4); // 0x411c8c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_411ca0",
            "funcStartAddr": "411ca0",
            "funcEndAddr": "411ccb",
            "decompiledFuncCode": "int64_t function_411ca0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g191 : a1; // 0x411ca8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x411cc5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x411cbc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g191;\n}\n"
        },
        {
            "funcName": "function_411cd0",
            "funcStartAddr": "411cd0",
            "funcEndAddr": "411d42",
            "decompiledFuncCode": "int64_t function_411cd0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g191 : a5; // 0x411cf2\n    int32_t * v2 = __errno_location(); // 0x411cfb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x411d14\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x411d18\n    uint32_t v5 = *(int32_t *)v1; // 0x411d1b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x411d21\n    int64_t result = function_410810((int64_t)a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x411d2a\n    return result;\n}\n"
        },
        {
            "funcName": "function_411d50",
            "funcStartAddr": "411d50",
            "funcEndAddr": "411e31",
            "decompiledFuncCode": "int64_t function_411d50(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g191 : a4; // 0x411d72\n    int32_t * v2 = __errno_location(); // 0x411d78\n    int64_t v3 = v1 + 8; // 0x411d8f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x411d97\n    int32_t * v5 = (int32_t *)v1; // 0x411d9a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x411da8\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x411dab\n    int64_t v8 = function_410810(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x411db5\n    int64_t v9 = v8 + 1; // 0x411dba\n    int64_t result = function_412980(v9); // 0x411dcf\n    function_410810(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x411e14\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x411e1d\n    return result;\n}\n"
        },
        {
            "funcName": "function_411e40",
            "funcStartAddr": "411e40",
            "funcEndAddr": "411e4a",
            "decompiledFuncCode": "int64_t function_411e40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x411e40\n    return function_411d50(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_411e50",
            "funcStartAddr": "411e50",
            "funcEndAddr": "411ee5",
            "decompiledFuncCode": "int64_t function_411e50(void) {\n    uint32_t v1 = *(int32_t *)&g81; // 0x411e50\n    int64_t v2 = v1; // 0x411e50\n    int64_t v3 = v2; // 0x411e64\n    if (v1 >= 2) {\n        int64_t v4 = &g81;\n        int64_t v5 = v4 + 16; // 0x411e83\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g209;\n        while (v5 != (int64_t)g78 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x411e80\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g209;\n        }\n    }\n    int64_t v6 = v3; // 0x411e9d\n    if (g79 != 0x6257e0) {\n        // 0x411e9f\n        free((int64_t *)g79);\n        g79 = 256;\n        *(int64_t *)&g80 = (int64_t)&g190;\n        v6 = &g209;\n    }\n    int64_t result = v6; // 0x411ec1\n    if (g78 != &g79) {\n        // 0x411ec3\n        free(g78);\n        *(int64_t *)&g78 = (int64_t)&g79;\n        result = &g209;\n    }\n    // 0x411ed6\n    *(int32_t *)&g81 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_411ef0",
            "funcStartAddr": "411ef0",
            "funcEndAddr": "411f01",
            "decompiledFuncCode": "int64_t function_411ef0(void) {\n    // 0x411ef0\n    int64_t v1; // 0x411ef0\n    return function_411a40(v1, v1, -1, (int64_t *)&g191);\n}\n"
        },
        {
            "funcName": "function_411f10",
            "funcStartAddr": "411f10",
            "funcEndAddr": "411f1a",
            "decompiledFuncCode": "int64_t function_411f10(void) {\n    // 0x411f10\n    int64_t v1; // 0x411f10\n    return function_411a40(v1, v1, v1, (int64_t *)&g191);\n}\n"
        },
        {
            "funcName": "function_411f20",
            "funcStartAddr": "411f20",
            "funcEndAddr": "411f36",
            "decompiledFuncCode": "int64_t function_411f20(int64_t a1) {\n    // 0x411f20\n    return function_411a40(0, a1, -1, (int64_t *)&g191);\n}\n"
        },
        {
            "funcName": "function_411f40",
            "funcStartAddr": "411f40",
            "funcEndAddr": "411f52",
            "decompiledFuncCode": "int64_t function_411f40(int64_t a1, int64_t a2) {\n    // 0x411f40\n    return function_411a40(0, a1, a2, (int64_t *)&g191);\n}\n"
        },
        {
            "funcName": "function_411f60",
            "funcStartAddr": "411f60",
            "funcEndAddr": "411fc8",
            "decompiledFuncCode": "int64_t function_411f60(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x411f70\n    return function_411a40((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_411fd0",
            "funcStartAddr": "411fd0",
            "funcEndAddr": "412034",
            "decompiledFuncCode": "int64_t function_411fd0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x411fe0\n    return function_411a40((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_412040",
            "funcStartAddr": "412040",
            "funcEndAddr": "41204c",
            "decompiledFuncCode": "int64_t function_412040(int64_t a1, int64_t a2) {\n    // 0x412040\n    return function_411f60(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_412050",
            "funcStartAddr": "412050",
            "funcEndAddr": "41205f",
            "decompiledFuncCode": "int64_t function_412050(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x412050\n    return function_411fd0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_412060",
            "funcStartAddr": "412060",
            "funcEndAddr": "4120d0",
            "decompiledFuncCode": "int64_t function_412060(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g191); // 0x41206d\n    int128_t v2 = __asm_movdqa(g192); // 0x412075\n    int128_t v3 = __asm_movdqa(g193); // 0x41207d\n    int64_t v4 = __asm_movaps_9(v1); // bp-72, 0x412092\n    __asm_movaps_9(v2);\n    __asm_movaps_9(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4120a8\n    uint32_t v6 = *v5; // 0x4120a8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4120ad\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_411a40(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4120d0",
            "funcStartAddr": "4120d0",
            "funcEndAddr": "4120dd",
            "decompiledFuncCode": "int64_t function_4120d0(int64_t a1, int64_t a2) {\n    // 0x4120d0\n    return function_412060(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4120e0",
            "funcStartAddr": "4120e0",
            "funcEndAddr": "4120f1",
            "decompiledFuncCode": "int64_t function_4120e0(int64_t a1) {\n    // 0x4120e0\n    return function_412060(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_412100",
            "funcStartAddr": "412100",
            "funcEndAddr": "41210a",
            "decompiledFuncCode": "int64_t function_412100(void) {\n    // 0x412100\n    int64_t v1; // 0x412100\n    return function_412060(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_412110",
            "funcStartAddr": "412110",
            "funcEndAddr": "41217e",
            "decompiledFuncCode": "int64_t function_412110(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x41212a\n    return function_411a40((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_412180",
            "funcStartAddr": "412180",
            "funcEndAddr": "4121ec",
            "decompiledFuncCode": "int64_t function_412180(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g191); // 0x412187\n    int128_t v2 = __asm_movdqa(g192); // 0x41218f\n    int128_t v3 = __asm_movdqa(g193); // 0x412197\n    __asm_movaps_9(v1);\n    __asm_movaps_9(v2);\n    __asm_movaps_9(v3);\n    int64_t v4 = 10; // bp-72, 0x4121b9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4121e7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4121ca\n    return function_411a40(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4121f0",
            "funcStartAddr": "4121f0",
            "funcEndAddr": "4121f9",
            "decompiledFuncCode": "int64_t function_4121f0(void) {\n    // 0x4121f0\n    int64_t v1; // 0x4121f0\n    return function_412180(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_412200",
            "funcStartAddr": "412200",
            "funcEndAddr": "412217",
            "decompiledFuncCode": "int64_t function_412200(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x412200\n    return function_412180(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_412220",
            "funcStartAddr": "412220",
            "funcEndAddr": "412233",
            "decompiledFuncCode": "int64_t function_412220(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x412220\n    return function_412180(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_412240",
            "funcStartAddr": "412240",
            "funcEndAddr": "41224a",
            "decompiledFuncCode": "int64_t function_412240(void) {\n    // 0x412240\n    int64_t v1; // 0x412240\n    return function_411a40(v1, v1, v1, &g77);\n}\n"
        },
        {
            "funcName": "function_412250",
            "funcStartAddr": "412250",
            "funcEndAddr": "412262",
            "decompiledFuncCode": "int64_t function_412250(int64_t a1, int64_t a2) {\n    // 0x412250\n    return function_411a40(0, a1, a2, &g77);\n}\n"
        },
        {
            "funcName": "function_412270",
            "funcStartAddr": "412270",
            "funcEndAddr": "412281",
            "decompiledFuncCode": "int64_t function_412270(int64_t a1, int64_t a2) {\n    // 0x412270\n    return function_411a40(a1, a2, -1, &g77);\n}\n"
        },
        {
            "funcName": "function_412290",
            "funcStartAddr": "412290",
            "funcEndAddr": "4122a6",
            "decompiledFuncCode": "int64_t function_412290(int64_t a1) {\n    // 0x412290\n    return function_411a40(0, a1, -1, &g77);\n}\n"
        },
        {
            "funcName": "function_4122b0",
            "funcStartAddr": "4122b0",
            "funcEndAddr": "4123e0",
            "decompiledFuncCode": "int64_t function_4122b0(int64_t a1, int64_t a2) {\n    int64_t str = function_40b870(a1, a2); // 0x4122c9\n    int64_t str2 = function_40b870(a2, a2); // 0x4122d4\n    int64_t n = function_40b8d0(str); // 0x4122df\n    if (n != function_40b8d0(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x4122f4\n        return 0;\n    }\n    int64_t v1 = function_417940(); // 0x412325\n    int64_t v2 = function_417940(); // 0x412330\n    char * v3 = (char *)v1; // 0x412343\n    int64_t v4; // bp-344, 0x4122b0\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x4123c0\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x41235c\n    int64_t v6; // bp-200, 0x4122b0\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x4123a0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x412374\n    // 0x412376\n    v7 = v4 == v6;\n    // 0x412385\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x4122f4\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4123e0",
            "funcStartAddr": "4123e0",
            "funcEndAddr": "4127bd",
            "decompiledFuncCode": "int64_t function_4123e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x412478\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4123fc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x412416\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x41245b\n    if (a6 < 10) {\n        // 0x41246a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x412562\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4127c0",
            "funcStartAddr": "4127c0",
            "funcEndAddr": "4127e0",
            "decompiledFuncCode": "int64_t function_4127c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4127c0\n    if (a5 == 0) {\n        // 0x4127db\n        return function_4123e0(a1, a2, a3, a4, a5, 0, (int64_t)&g209);\n    }\n    int64_t v1 = 0; // 0x4127c7\n    v1++;\n    int64_t v2 = v1; // 0x4127d9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4127d0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4127db\n    return function_4123e0(a1, a2, a3, a4, a5, v2, (int64_t)&g209);\n}\n"
        },
        {
            "funcName": "function_4127e0",
            "funcStartAddr": "4127e0",
            "funcEndAddr": "412840",
            "decompiledFuncCode": "int64_t function_4127e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4127e0\n    int64_t v3 = &v2; // 0x4127e0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x412813\n    int64_t v6; // 0x4127fd\n    int64_t * v7; // 0x41281b\n    int64_t v8; // 0x41281b\n    int64_t v9; // 0x412827\n    if (v5 < 48) {\n        // 0x4127f0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x412833\n            break;\n        }\n    } else {\n        // 0x41281b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x412833\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x412811\n    while (v4 != 9) {\n        // 0x412809\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4127f0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x412833\n                break;\n            }\n        } else {\n            // 0x41281b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x412833\n                break;\n            }\n        }\n        // 0x412809\n        v10 = 10;\n    }\n    // 0x412833\n    return function_4123e0(a1, a2, a3, a4, v3, v10, (int64_t)&g209);\n}\n"
        },
        {
            "funcName": "function_412840",
            "funcStartAddr": "412840",
            "funcEndAddr": "4128fc",
            "decompiledFuncCode": "int64_t function_412840(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x412840\n    int64_t v1; // bp-168, 0x412840\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x412840\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x412840\n    int64_t v8; // 0x412840\n    int64_t v9; // bp-56, 0x412840\n    int64_t v10; // 0x4128a5\n    int64_t v11; // 0x4128c9\n    if ((int32_t)v6 < 48) {\n        // 0x412890\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4128e0\n            break;\n        }\n    } else {\n        // 0x4128c2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4128e0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4128ba\n    int64_t v13 = 10; // 0x4128ba\n    while (v5 != 9) {\n        // 0x4128bc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x412890\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4128e0\n                break;\n            }\n        } else {\n            // 0x4128c2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4128e0\n                break;\n            }\n        }\n        // 0x4128b2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4128e0\n    int64_t v14; // bp-136, 0x412840\n    int64_t result = function_4123e0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g209); // 0x4128ef\n    return result;\n}\n"
        },
        {
            "funcName": "function_412900",
            "funcStartAddr": "412900",
            "funcEndAddr": "412974",
            "decompiledFuncCode": "int64_t function_412900(int64_t a1) {\n    // 0x412900\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x412963\n    return fputs_unlocked(v1, g86);\n}\n"
        },
        {
            "funcName": "function_412980",
            "funcStartAddr": "412980",
            "funcEndAddr": "41299a",
            "decompiledFuncCode": "int64_t function_412980(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x412984\n    if (size != 0 != (mem == NULL)) {\n        // 0x412993\n        return (int64_t)mem;\n    }\n    // 0x412995\n    function_412bd0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4129a0",
            "funcStartAddr": "4129a0",
            "funcEndAddr": "4129c1",
            "decompiledFuncCode": "int64_t function_4129a0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4129a3\n    int64_t v2 = v1; // 0x4129a3\n    if (v2 < 0) {\n        // 0x4129bb\n        function_412bd0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4129b9\n        return function_412980(v2);\n    }\n    // 0x4129bb\n    function_412bd0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4129d0",
            "funcStartAddr": "4129d0",
            "funcEndAddr": "4129d2",
            "decompiledFuncCode": "int64_t function_4129d0(void) {\n    // 0x4129d0\n    int64_t v1; // 0x4129d0\n    return function_412980(v1);\n}\n"
        },
        {
            "funcName": "function_4129e0",
            "funcStartAddr": "4129e0",
            "funcEndAddr": "412a16",
            "decompiledFuncCode": "int64_t function_4129e0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x412a08\n        free(v1);\n        return (int32_t)&g209 ^ (int32_t)&g209;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4129f1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x412a00\n        return (int64_t)mem;\n    }\n    // 0x412a11\n    function_412bd0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_412a20",
            "funcStartAddr": "412a20",
            "funcEndAddr": "412a41",
            "decompiledFuncCode": "int64_t function_412a20(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x412a23\n    int64_t v2 = v1; // 0x412a23\n    if (v2 < 0) {\n        // 0x412a3b\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x412a39\n        return function_4129e0(a1, v2);\n    }\n    // 0x412a3b\n    function_412bd0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_412a50",
            "funcStartAddr": "412a50",
            "funcEndAddr": "412ad6",
            "decompiledFuncCode": "int64_t function_412a50(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x412aab\n            function_412bd0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4129e0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x412a93\n    if (a2 == 0) {\n        // 0x412ab8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x412a98\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x412aab\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    // 0x412a7a\n    *(int64_t *)a2 = v2;\n    return function_4129e0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_412ae0",
            "funcStartAddr": "412ae0",
            "funcEndAddr": "412b30",
            "decompiledFuncCode": "int64_t function_412ae0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (a2 >= (int64_t *)0x5555555555555554) {\n            // 0x412b2a\n            function_412bd0(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_4129e0(a1, v2);\n    }\n    if (a2 == NULL) {\n        // 0x412b15\n        *a2 = 128;\n        return function_4129e0(0, 128);\n    }\n    // 0x412b28\n    if (a2 < NULL) {\n        // 0x412b2a\n        function_412bd0(a1);\n        // UNREACHABLE\n    }\n    // 0x412b02\n    *a2 = v1;\n    return function_4129e0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_412b30",
            "funcStartAddr": "412b30",
            "funcEndAddr": "412b47",
            "decompiledFuncCode": "int64_t function_412b30(int64_t a1, int64_t a2) {\n    // 0x412b30\n    return (int64_t)memset((int64_t *)function_412980(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_412b50",
            "funcStartAddr": "412b50",
            "funcEndAddr": "412b7e",
            "decompiledFuncCode": "int64_t function_412b50(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x412b57\n    if ((int64_t)v1 < 0) {\n        // 0x412b79\n        function_412bd0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x412b79\n        function_412bd0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x412b6a\n    if (mem != NULL) {\n        // 0x412b74\n        return (int64_t)mem;\n    }\n    // 0x412b79\n    function_412bd0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_412b80",
            "funcStartAddr": "412b80",
            "funcEndAddr": "412ba8",
            "decompiledFuncCode": "int64_t function_412b80(int64_t a1, int64_t a2) {\n    int64_t v1 = function_412980(a2); // 0x412b8f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_412bb0",
            "funcStartAddr": "412bb0",
            "funcEndAddr": "412bc3",
            "decompiledFuncCode": "int64_t function_412bb0(int64_t str) {\n    // 0x412bb0\n    return function_412b80(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_412bd0",
            "funcStartAddr": "412bd0",
            "funcEndAddr": "412c01",
            "decompiledFuncCode": "int64_t function_412bd0(int64_t a1) {\n    // 0x412bd0\n    error(g76, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_412c10",
            "funcStartAddr": "412c10",
            "funcEndAddr": "412ce0",
            "decompiledFuncCode": "int64_t function_412c10(int64_t a1, int32_t a2, int32_t a3, uint64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    // 0x412c10\n    int64_t result2; // bp-64, 0x412c10\n    int32_t v1 = function_4132b0(a1, 0, a2, &result2, a5, a6); // 0x412c3c\n    int32_t * v2; // 0x412c10\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x412cba\n        if (v1 == 1) {\n            // 0x412cd8\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x412cc7\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x412ccc\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x412c40\n        if (result >= (int64_t)a3 && result <= a4) {\n            // 0x412ca2\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x412c4f\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_412290(a1); // 0x412c6c\n    int32_t v6 = *v2; // 0x412c71\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x412c87\n    int32_t v7 = a7; // 0x412c8a\n    error(v7 == 0 ? 1 : v7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x412ca2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412ce0",
            "funcStartAddr": "412ce0",
            "funcEndAddr": "412d01",
            "decompiledFuncCode": "int64_t function_412ce0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412ce0\n    return function_412c10(a1, 10, (int32_t)a2, a3, (int64_t *)a4, a5, a6);\n}\n"
        },
        {
            "funcName": "function_412d10",
            "funcStartAddr": "412d10",
            "funcEndAddr": "412d3f",
            "decompiledFuncCode": "int64_t function_412d10(int64_t a1, int64_t a2) {\n    int64_t result = function_415be0(0, 0); // 0x412d15\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x412d22\n        return result;\n    }\n    // 0x412d3a\n    function_412bd0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_412d40",
            "funcStartAddr": "412d40",
            "funcEndAddr": "412df0",
            "decompiledFuncCode": "int64_t function_412d40(void) {\n    int64_t v1 = 34; // bp-48, 0x412d56\n    int32_t * v2 = __errno_location(); // 0x412d5f\n    int64_t name = 0; // 0x412d67\n    uint32_t v3; // 0x412dc0\n    while (true) {\n        // 0x412d70\n        name = function_412ae0(name, &v1);\n        char * v4 = (char *)(name - 2 + v1); // 0x412d91\n        *v4 = 0;\n        *v2 = 0;\n        if (gethostname((char *)name, (int32_t)v1 - 1) != 0) {\n            // 0x412dc0\n            v3 = *v2;\n            if (v3 >= 37) {\n                // break -> 0x412dc9\n                break;\n            }\n            if ((1 << (int64_t)(v3 % 64) & 0x1000401001) == 0) {\n                // break -> 0x412dc9\n                break;\n            }\n        } else {\n            // 0x412da6\n            if (*v4 == 0) {\n                // 0x412dac\n                return name;\n            }\n        }\n    }\n    // 0x412dc9\n    free((int64_t *)name);\n    *v2 = v3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_412df0",
            "funcStartAddr": "412df0",
            "funcEndAddr": "413220",
            "decompiledFuncCode": "int64_t function_412df0(int64_t str, int32_t a2, uint32_t base, int64_t * a4, int32_t a5, int64_t a6) {\n    if (base >= 37) {\n        // 0x4131fb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g209;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x412e22\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x412e52\n    int64_t v3 = str; // 0x412e57\n    char v4 = c; // 0x412e57\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x412e4c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x412e48\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x412e59\n    if (v4 == 45) {\n        // 0x412e93\n        return 4;\n    }\n    int64_t str2 = a5;\n    int64_t v6; // bp-64, 0x412df0\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x412e1e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x412e64\n    int64_t * v7 = (int64_t *)endptr; // 0x412e69\n    int64_t v8 = *v7; // 0x412e69\n    char v9; // 0x412df0\n    int64_t v10; // 0x412df0\n    int64_t v11; // 0x412df0\n    int64_t v12; // 0x412df0\n    int64_t v13; // 0x412df0\n    int64_t v14; // 0x412df0\n    int64_t v15; // 0x412df0\n    if (v8 == str) {\n        // 0x412ec0\n        if (c == 0 || a5 == 0) {\n            // 0x412e93\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x412ee1\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x412e93\n            return 4;\n        }\n        goto lab_0x412eef;\n    } else {\n        int32_t v16 = *v1; // 0x412e74\n        int64_t v17 = 0; // 0x412e7a\n        if (v16 != 0) {\n            // 0x412ea8\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x412e93\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x412e64\n        v13 = v18;\n        v10 = v17;\n        if (a5 == 0) {\n            goto lab_0x412e90;\n        } else {\n            char c2 = *(char *)v8; // 0x412e83\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x412fe3\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x412eef;\n                } else {\n                    goto lab_0x412ff5;\n                }\n            } else {\n                goto lab_0x412e90;\n            }\n        }\n    }\n  lab_0x412eef:;\n    int64_t v19 = 0x100000000 * v8 >> 32;\n    unsigned char v20 = v9 - 69;\n    int64_t v21 = 1024; // 0x412ef7\n    int64_t v22 = 1; // 0x412ef7\n    int64_t v23; // 0x412df0\n    int64_t v24; // 0x412df0\n    int64_t v25; // 0x412df0\n    int64_t v26; // 0x412df0\n    int64_t v27; // 0x412df0\n    int64_t v28; // 0x412df0\n    int64_t v29; // 0x412df0\n    int64_t v30; // 0x412df0\n    int64_t v31; // 0x412df0\n    int64_t v32; // 0x412df0\n    int64_t v33; // 0x412df0\n    int64_t v34; // 0x412df0\n    int64_t v35; // 0x412df0\n    int64_t v36; // 0x412df0\n    int64_t v37; // 0x412df0\n    int64_t v38; // 0x412df0\n    int64_t v39; // 0x412df0\n    int64_t v40; // 0x412df0\n    int64_t v41; // 0x412df0\n    int64_t v42; // 0x412df0\n    if (v20 < 48) {\n        // 0x412ef9\n        v21 = 1024;\n        v22 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x412f5a;\n        } else {\n            // 0x412f0c\n            v21 = 1024;\n            v22 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x412f5a;\n            } else {\n                // 0x412f28\n                v21 = 1000;\n                v22 = 2;\n                switch (*(char *)(v19 + 1)) {\n                    case 68: {\n                        goto lab_0x412f5a;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v19 + 2); // 0x413189\n                        v21 = 1024;\n                        v22 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x412f5a;\n                    }\n                    default: {\n                        // 0x412f3d\n                        g214 = v20;\n                        v21 = 1000;\n                        v22 = 2;\n                        v25 = 1024;\n                        v37 = 1;\n                        v24 = v14;\n                        v23 = v11;\n                        v38 = 1;\n                        v26 = 1024;\n                        v39 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v42 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x4130fb;\n                            }\n                            case 70: {\n                                goto lab_0x412ff5;\n                            }\n                            case 71: {\n                                goto lab_0x413133;\n                            }\n                            case 72: {\n                                goto lab_0x412ff5;\n                            }\n                            case 73: {\n                                goto lab_0x412ff5;\n                            }\n                            case 74: {\n                                goto lab_0x412ff5;\n                            }\n                            case 75: {\n                                goto lab_0x412fbc;\n                            }\n                            case 76: {\n                                goto lab_0x412ff5;\n                            }\n                            case 77: {\n                                goto lab_0x412f7e;\n                            }\n                            case 78: {\n                                goto lab_0x412ff5;\n                            }\n                            case 79: {\n                                goto lab_0x412ff5;\n                            }\n                            case 80: {\n                                goto lab_0x4130c8;\n                            }\n                            case 81: {\n                                goto lab_0x412ff5;\n                            }\n                            case 82: {\n                                goto lab_0x412ff5;\n                            }\n                            case 83: {\n                                goto lab_0x412ff5;\n                            }\n                            case 84: {\n                                goto lab_0x413098;\n                            }\n                            case 85: {\n                                goto lab_0x412ff5;\n                            }\n                            case 86: {\n                                goto lab_0x412ff5;\n                            }\n                            case 87: {\n                                goto lab_0x412ff5;\n                            }\n                            case 88: {\n                                goto lab_0x412ff5;\n                            }\n                            case 89: {\n                                goto lab_0x413066;\n                            }\n                            case 90: {\n                                goto lab_0x41302b;\n                            }\n                            case 91: {\n                                goto lab_0x412ff5;\n                            }\n                            case 92: {\n                                goto lab_0x412ff5;\n                            }\n                            case 93: {\n                                goto lab_0x412ff5;\n                            }\n                            case 94: {\n                                goto lab_0x412ff5;\n                            }\n                            case 95: {\n                                goto lab_0x412ff5;\n                            }\n                            case 96: {\n                                goto lab_0x412ff5;\n                            }\n                            case 97: {\n                                goto lab_0x412ff5;\n                            }\n                            case 98: {\n                                goto lab_0x41300f;\n                            }\n                            case 99: {\n                                goto lab_0x412f98;\n                            }\n                            case 100: {\n                                goto lab_0x412ff5;\n                            }\n                            case 101: {\n                                goto lab_0x412ff5;\n                            }\n                            case 102: {\n                                goto lab_0x412ff5;\n                            }\n                            case 103: {\n                                goto lab_0x413133;\n                            }\n                            case 104: {\n                                goto lab_0x412ff5;\n                            }\n                            case 105: {\n                                goto lab_0x412ff5;\n                            }\n                            case 106: {\n                                goto lab_0x412ff5;\n                            }\n                            case 107: {\n                                goto lab_0x412fbc;\n                            }\n                            case 108: {\n                                goto lab_0x412ff5;\n                            }\n                            case 109: {\n                                goto lab_0x412f7e;\n                            }\n                            case 110: {\n                                goto lab_0x412ff5;\n                            }\n                            case 111: {\n                                goto lab_0x412ff5;\n                            }\n                            case 112: {\n                                goto lab_0x412ff5;\n                            }\n                            case 113: {\n                                goto lab_0x412ff5;\n                            }\n                            case 114: {\n                                goto lab_0x412ff5;\n                            }\n                            case 115: {\n                                goto lab_0x412ff5;\n                            }\n                            case 116: {\n                                goto lab_0x413098;\n                            }\n                            default: {\n                                goto lab_0x412f5a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x412f5a;\n    }\n  lab_0x412e90:\n    // 0x412e90\n    *a4 = v13;\n    // 0x412e93\n    return v10 & 0xffffffff;\n  lab_0x412f5a:\n    // 0x412f5a\n    g215 = v9 - 66;\n    v25 = v21;\n    v37 = v22;\n    v24 = v14;\n    v23 = v11;\n    v38 = v22;\n    v26 = v21;\n    v39 = v22;\n    v15 = v14;\n    v12 = v11;\n    v40 = v22;\n    v27 = v21;\n    v41 = v22;\n    v28 = v21;\n    v42 = v22;\n    v29 = v21;\n    v33 = v22;\n    v30 = v21;\n    v34 = v22;\n    v31 = v21;\n    v35 = v22;\n    v32 = v21;\n    v36 = v22;\n    int64_t v44; // 0x412df0\n    switch (v9) {\n        case 66: {\n            // 0x413154\n            v44 = v22;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x412fc7;\n            } else {\n                // 0x413161\n                v24 = 1024 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x412f98;\n            }\n        }\n        case 69: {\n            goto lab_0x4130fb;\n        }\n        case 71: {\n            goto lab_0x413133;\n        }\n        case 75: {\n            goto lab_0x412fbc;\n        }\n        case 77: {\n            goto lab_0x412f7e;\n        }\n        case 80: {\n            goto lab_0x4130c8;\n        }\n        case 84: {\n            goto lab_0x413098;\n        }\n        case 89: {\n            goto lab_0x413066;\n        }\n        case 90: {\n            goto lab_0x41302b;\n        }\n        case 98: {\n            goto lab_0x41300f;\n        }\n        case 99: {\n            goto lab_0x412f98;\n        }\n        case 103: {\n            goto lab_0x413133;\n        }\n        case 107: {\n            goto lab_0x412fbc;\n        }\n        case 109: {\n            goto lab_0x412f7e;\n        }\n        case 116: {\n            goto lab_0x413098;\n        }\n        case 119: {\n            // 0x413000\n            v44 = v22;\n            if (v14 < 0) {\n                goto lab_0x412fc7;\n            } else {\n                // 0x413005\n                v24 = 2 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x412f98;\n            }\n        }\n        default: {\n            goto lab_0x412ff5;\n        }\n    }\n  lab_0x4130fb:;\n    uint128_t v45 = (int128_t)v14 * (int128_t)v31; // 0x413113\n    int64_t v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n    int64_t v47 = v45 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v48 = 5; // 0x41311f\n    int64_t v49 = v46; // 0x413122\n    int64_t v50 = v35; // 0x413122\n    int64_t v51 = v47; // 0x413122\n    int32_t v52 = v48; // 0x413122\n    int64_t v53 = v47; // 0x413122\n    while (v48 != 0) {\n        // 0x413110\n        v45 = (int128_t)v46 * (int128_t)v31;\n        v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n        v47 = v45 > 0xffffffffffffffff ? 1 : v53;\n        v48 = v52 - 1;\n        v49 = v46;\n        v50 = v35;\n        v51 = v47;\n        v52 = v48;\n        v53 = v47;\n    }\n    goto lab_0x413054;\n  lab_0x413133:\n    // 0x413133\n    v24 = -1;\n    v23 = 1;\n    v38 = v36;\n    if ((int128_t)v32 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x41313e\n        int128_t v54; // 0x413139\n        uint128_t v55; // 0x413139\n        uint128_t v56 = (v55 & 0xffffffffffffffff) * v54; // 0x41313e\n        v24 = -1;\n        v23 = 1;\n        int64_t v57; // 0x412df0\n        v38 = v57;\n        if (v56 <= 0xffffffffffffffff) {\n            uint128_t v58 = (v56 & 0xffffffffffffffff) * v54; // 0x413143\n            v24 = -1;\n            v23 = 1;\n            v38 = v57;\n            if (v58 <= 0xffffffffffffffff) {\n                // 0x413148\n                v24 = v58;\n                int64_t v59; // 0x412df0\n                v23 = v59 & 0xffffffff;\n                v38 = v57;\n            }\n        }\n    }\n    goto lab_0x412f98;\n  lab_0x412fbc:;\n    uint128_t v62 = (int128_t)v26 * (int128_t)v14; // 0x412fbf\n    v24 = v62;\n    v23 = v11;\n    v38 = v39;\n    v44 = v39;\n    if (v62 <= 0xffffffffffffffff) {\n        goto lab_0x412f98;\n    } else {\n        goto lab_0x412fc7;\n    }\n  lab_0x412f7e:;\n    int128_t v63 = v25; // 0x412f84\n    uint128_t v64 = v63 * (int128_t)v14; // 0x412f84\n    v44 = v37;\n    if (v64 > 0xffffffffffffffff) {\n        goto lab_0x412fc7;\n    } else {\n        uint128_t v65 = (v64 & 0xffffffffffffffff) * v63; // 0x412f89\n        v44 = v37;\n        if (v65 > 0xffffffffffffffff) {\n            goto lab_0x412fc7;\n        } else {\n            // 0x412f8e\n            v24 = v65;\n            v23 = v11;\n            v38 = v37;\n            goto lab_0x412f98;\n        }\n    }\n  lab_0x4130c8:;\n    uint128_t v66 = (int128_t)v14 * (int128_t)v30; // 0x4130db\n    int64_t v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n    int64_t v68 = v66 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v69 = 4; // 0x4130e7\n    v49 = v67;\n    v50 = v34;\n    v51 = v68;\n    int32_t v70 = v69; // 0x4130ea\n    int64_t v71 = v68; // 0x4130ea\n    while (v69 != 0) {\n        // 0x4130d8\n        v66 = (int128_t)v67 * (int128_t)v30;\n        v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n        v68 = v66 > 0xffffffffffffffff ? 1 : v71;\n        v69 = v70 - 1;\n        v49 = v67;\n        v50 = v34;\n        v51 = v68;\n        v70 = v69;\n        v71 = v68;\n    }\n    goto lab_0x413054;\n  lab_0x413098:;\n    uint128_t v72 = (int128_t)v14 * (int128_t)v29; // 0x4130ab\n    int64_t v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n    int64_t v74 = v72 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v75 = 3; // 0x4130b7\n    v49 = v73;\n    v50 = v33;\n    v51 = v74;\n    int32_t v76 = v75; // 0x4130ba\n    int64_t v77 = v74; // 0x4130ba\n    while (v75 != 0) {\n        // 0x4130a8\n        v72 = (int128_t)v73 * (int128_t)v29;\n        v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n        v74 = v72 > 0xffffffffffffffff ? 1 : v77;\n        v75 = v76 - 1;\n        v49 = v73;\n        v50 = v33;\n        v51 = v74;\n        v76 = v75;\n        v77 = v74;\n    }\n    goto lab_0x413054;\n  lab_0x413066:;\n    uint128_t v78 = (int128_t)v14 * (int128_t)v28; // 0x41307b\n    int64_t v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n    int64_t v80 = v78 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v81 = 7; // 0x413087\n    v49 = v79;\n    v50 = v42;\n    v51 = v80;\n    int32_t v82 = v81; // 0x41308a\n    int64_t v83 = v80; // 0x41308a\n    while (v81 != 0) {\n        // 0x413078\n        v78 = (int128_t)v79 * (int128_t)v28;\n        v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n        v80 = v78 > 0xffffffffffffffff ? 1 : v83;\n        v81 = v82 - 1;\n        v49 = v79;\n        v50 = v42;\n        v51 = v80;\n        v82 = v81;\n        v83 = v80;\n    }\n    goto lab_0x413054;\n  lab_0x41302b:;\n    uint128_t v84 = (int128_t)v14 * (int128_t)v27; // 0x413043\n    int64_t v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n    int64_t v86 = v84 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v87 = 6; // 0x41304f\n    int32_t v88 = v87; // 0x413052\n    int64_t v89 = v86; // 0x413052\n    v49 = v85;\n    v50 = v41;\n    v51 = v86;\n    while (v87 != 0) {\n        // 0x413040\n        v84 = (int128_t)v85 * (int128_t)v27;\n        v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n        v86 = v84 > 0xffffffffffffffff ? 1 : v89;\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v49 = v85;\n        v50 = v41;\n        v51 = v86;\n    }\n    goto lab_0x413054;\n  lab_0x41300f:\n    // 0x41300f\n    v44 = v40;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x412fc7;\n    } else {\n        // 0x413018\n        v24 = 512 * v14;\n        v23 = v11;\n        v38 = v40;\n        goto lab_0x412f98;\n    }\n  lab_0x412f98:;\n    int64_t v60 = v23;\n    int64_t v61 = (0x100000000 * v38 >> 32) + v19; // 0x412f9d\n    *v7 = v61;\n    v13 = v24;\n    v10 = (*(char *)v61 != 0 ? v60 | 2 : v60) & 0xffffffff;\n    goto lab_0x412e90;\n  lab_0x412ff5:\n    // 0x412ff5\n    *a4 = v15;\n    // 0x412e93\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x412fc7:\n    // 0x412fc7\n    v24 = -1;\n    v23 = 1;\n    v38 = v44;\n    goto lab_0x412f98;\n  lab_0x413054:\n    // 0x413054\n    v24 = v49;\n    v23 = (v51 | v11) & 0xffffffff;\n    v38 = v50;\n    goto lab_0x412f98;\n}\n"
        },
        {
            "funcName": "function_413220",
            "funcStartAddr": "413220",
            "funcEndAddr": "4132a1",
            "decompiledFuncCode": "int64_t function_413220(int64_t a1, int32_t a2, int32_t a3, char (**a4)[4], int64_t a5) {\n    int64_t v1 = *(int64_t *)((8 * a1 + 0x7fffffff8 & 0x7fffffff8) + (int64_t)&g43); // 0x413242\n    error(g76, 0, dcgettext(NULL, (char *)v1, 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4132b0",
            "funcStartAddr": "4132b0",
            "funcEndAddr": "4137e9",
            "decompiledFuncCode": "int64_t function_4132b0(int64_t a1, int32_t a2, uint32_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    int64_t v1; // 0x4132b0\n    if (a3 >= 37) {\n        // 0x4136cb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        int32_t v2 = *(int32_t *)((int64_t)\"0 <= strtol_base && strtol_base <= 36\" + 4); // 0x413700\n        if (v2 == 0) {\n          lab_0x413734_4:\n            // 0x413734\n            return (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n        }\n        while (true) {\n          lab_0x413707:\n            // 0x413707\n            v1 = (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n            if (v2 == 91) {\n                // break (via goto) -> 0x413740\n                goto lab_0x413740;\n            }\n            if (v2 < 65) {\n                if ((1 << (int64_t)((v2 + 31) % 64) & 0xc0000601) != 0) {\n                    // 0x41371a\n                    if (*(int32_t *)(v1 + 8) == 40) {\n                        // break -> 0x413700\n                        break;\n                    }\n                }\n                if (v2 == 41) {\n                    // 0x4137e0\n                    return v1 + 8;\n                }\n            }\n            int32_t v3 = *(int32_t *)(v1 + 8); // 0x41372d\n            int64_t v4 = v1 + 4; // 0x413732\n            while (v3 != 0) {\n                // 0x413707\n                v1 = v4;\n                int32_t v5 = v3;\n                if (v5 == 91) {\n                    // break (via goto) -> 0x413740\n                    goto lab_0x413740;\n                }\n                if (v5 < 65) {\n                    if ((1 << (int64_t)((v5 + 31) % 64) & 0xc0000601) != 0) {\n                        // 0x41371a\n                        if (*(int32_t *)(v1 + 8) == 40) {\n                            // break -> 0x413700\n                            break;\n                        }\n                    }\n                    if (v5 == 41) {\n                        // 0x4137e0\n                        return v1 + 8;\n                    }\n                }\n                // 0x413729\n                v3 = *(int32_t *)(v1 + 8);\n                v4 = v1 + 4;\n            }\n            return (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n        }\n      lab_0x413734_4:\n        // 0x413734\n        return (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n    }\n    char c = a1;\n    int32_t * v6 = __errno_location(); // 0x4132e2\n    *v6 = 0;\n    int64_t v7 = (int64_t)*__ctype_b_loc() + 1; // 0x413312\n    int64_t v8 = a1; // 0x413317\n    char v9 = c; // 0x413317\n    if ((*(char *)(v7 + (2 * a1 & 510)) & 32) != 0) {\n        v8++;\n        unsigned char v10 = *(char *)v8; // 0x41330c\n        v9 = v10;\n        while ((*(char *)(2 * (int64_t)v10 + v7) & 32) != 0) {\n            // 0x413308\n            v8++;\n            v10 = *(char *)v8;\n            v9 = v10;\n        }\n    }\n    // 0x413319\n    if (v9 == 45) {\n        // 0x413355\n        return 4;\n    }\n    // 0x41331e\n    int64_t v11; // bp-64, 0x4132b0\n    int64_t v12 = a2 == 0 ? (int64_t)&v11 : (int64_t)a2; // 0x4132de\n    int32_t v13 = __strtoul_internal((char *)a1, (char **)v12, a3, 0); // 0x413326\n    int64_t * v14 = (int64_t *)v12; // 0x41332b\n    int64_t v15 = *v14; // 0x41332b\n    char v16; // 0x4132b0\n    int64_t v17; // 0x4132b0\n    int64_t v18; // 0x4132b0\n    int64_t v19; // 0x4132b0\n    int64_t v20; // 0x4132b0\n    int64_t v21; // 0x4132b0\n    int64_t v22; // 0x4132b0\n    if (v15 == a1) {\n        // 0x413388\n        if (c == 0 || str == NULL) {\n            // 0x413355\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x4133a9\n        v21 = 1;\n        v18 = 0;\n        v16 = c;\n        if (found_char_pos == NULL) {\n            // 0x413355\n            return 4;\n        }\n        goto lab_0x4133b7;\n    } else {\n        int32_t v23 = *v6; // 0x413336\n        int64_t v24 = 0; // 0x41333c\n        if (v23 != 0) {\n            // 0x413370\n            v24 = 1;\n            if (v23 != 34) {\n                // 0x413355\n                return 4;\n            }\n        }\n        int64_t v25 = v13; // 0x413326\n        v20 = v25;\n        v17 = v24;\n        if (str == NULL) {\n            goto lab_0x413352;\n        } else {\n            char c2 = *(char *)v15; // 0x413345\n            v20 = v25;\n            v17 = v24;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x4134b3\n                v21 = v25;\n                v18 = v24;\n                v16 = c2;\n                v22 = v25;\n                v19 = v24;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4133b7;\n                } else {\n                    goto lab_0x4134c5;\n                }\n            } else {\n                goto lab_0x413352;\n            }\n        }\n    }\n  lab_0x4137a8:;\n    int64_t v26 = v1 + 12; // 0x4137a8\n    int32_t v27 = *(int32_t *)v26; // 0x4137af\n    int64_t v28 = v26; // 0x4137af\n    goto lab_0x413765;\n  lab_0x413765:;\n    int64_t v29 = v28;\n    int32_t v30 = v27; // 0x413768\n    int64_t v31 = v29; // 0x413768\n    if (v27 == 93) {\n        int64_t v32 = v29 + 4; // 0x41376a\n        v30 = *(int32_t *)v32;\n        v31 = v32;\n    }\n    int64_t v33 = v31; // 0x413784\n    int64_t v34 = v31; // 0x413784\n    int32_t v35 = v30; // 0x413784\n    if (v30 != 93) {\n        if (v35 == 0) {\n            // break (via goto) -> 0x413734\n            goto lab_0x413734_4;\n        }\n        int64_t v36 = v34 + 4;\n        int32_t v37 = *(int32_t *)v36; // 0x413778\n        v33 = v36;\n        v34 = v36;\n        v35 = v37;\n        while (v37 != 93) {\n            // 0x41378a\n            if (v35 == 0) {\n                // break (via goto) -> 0x413734\n                goto lab_0x413734_4;\n            }\n            // 0x413778\n            v36 = v34 + 4;\n            v37 = *(int32_t *)v36;\n            v33 = v36;\n            v34 = v36;\n            v35 = v37;\n        }\n    }\n    int32_t v38 = *(int32_t *)(v33 + 4); // 0x413700\n    int32_t v39 = v38; // 0x413705\n    int64_t v40 = v33; // 0x413705\n    if (v38 == 0) {\n        // break -> 0x413734\n        goto lab_0x413734_4;\n    }\n    goto lab_0x413707;\n  lab_0x4133b7:;\n    int64_t v41 = 0x100000000 * v15 >> 32;\n    unsigned char v42 = v16 - 69;\n    int64_t v43 = 1024; // 0x4133bf\n    int64_t v44 = 1; // 0x4133bf\n    int64_t v45; // 0x4132b0\n    int64_t v46; // 0x4132b0\n    int64_t v47; // 0x4132b0\n    int64_t v48; // 0x4132b0\n    int64_t v49; // 0x4132b0\n    int64_t v50; // 0x4132b0\n    int64_t v51; // 0x4132b0\n    int64_t v52; // 0x4132b0\n    int64_t v53; // 0x4132b0\n    int64_t v54; // 0x4132b0\n    int64_t v55; // 0x4132b0\n    int64_t v56; // 0x4132b0\n    int64_t v57; // 0x4132b0\n    int64_t v58; // 0x4132b0\n    int64_t v59; // 0x4132b0\n    int64_t v60; // 0x4132b0\n    int64_t v61; // 0x4132b0\n    int64_t v62; // 0x4132b0\n    int64_t v63; // 0x4132b0\n    int64_t v64; // 0x4132b0\n    if (v42 < 48) {\n        // 0x4133c1\n        v43 = 1024;\n        v44 = 1;\n        if ((1 << (int64_t)((v16 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x41342a;\n        } else {\n            // 0x4133d4\n            v43 = 1024;\n            v44 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x41342a;\n            } else {\n                // 0x4133f0\n                v43 = 1000;\n                v44 = 2;\n                switch (*(char *)(v41 + 1)) {\n                    case 68: {\n                        goto lab_0x41342a;\n                    }\n                    case 105: {\n                        char v65 = *(char *)(v41 + 2); // 0x413659\n                        v43 = 1024;\n                        v44 = (v65 == 66 ? 2 : 1) + (int64_t)(v65 == 66);\n                        goto lab_0x41342a;\n                    }\n                    default: {\n                        // 0x413405\n                        g216 = v42;\n                        v43 = 1000;\n                        v44 = 2;\n                        v47 = 1024;\n                        v59 = 1;\n                        v46 = v21;\n                        v45 = v18;\n                        v60 = 1;\n                        v48 = 1024;\n                        v61 = 1;\n                        v22 = v21;\n                        v19 = v18;\n                        v62 = 1;\n                        v49 = 1024;\n                        v63 = 1;\n                        v50 = 1024;\n                        v64 = 1;\n                        v51 = 1024;\n                        v55 = 1;\n                        v52 = 1024;\n                        v56 = 1;\n                        v53 = 1024;\n                        v57 = 1;\n                        v54 = 1024;\n                        v58 = 1;\n                        switch (v16) {\n                            case 69: {\n                                goto lab_0x4135cb;\n                            }\n                            case 70: {\n                                goto lab_0x4134c5;\n                            }\n                            case 71: {\n                                goto lab_0x413603;\n                            }\n                            case 72: {\n                                goto lab_0x4134c5;\n                            }\n                            case 73: {\n                                goto lab_0x4134c5;\n                            }\n                            case 74: {\n                                goto lab_0x4134c5;\n                            }\n                            case 75: {\n                                goto lab_0x41348c;\n                            }\n                            case 76: {\n                                goto lab_0x4134c5;\n                            }\n                            case 77: {\n                                goto lab_0x41344e;\n                            }\n                            case 78: {\n                                goto lab_0x4134c5;\n                            }\n                            case 79: {\n                                goto lab_0x4134c5;\n                            }\n                            case 80: {\n                                goto lab_0x413598;\n                            }\n                            case 81: {\n                                goto lab_0x4134c5;\n                            }\n                            case 82: {\n                                goto lab_0x4134c5;\n                            }\n                            case 83: {\n                                goto lab_0x4134c5;\n                            }\n                            case 84: {\n                                goto lab_0x413568;\n                            }\n                            case 85: {\n                                goto lab_0x4134c5;\n                            }\n                            case 86: {\n                                goto lab_0x4134c5;\n                            }\n                            case 87: {\n                                goto lab_0x4134c5;\n                            }\n                            case 88: {\n                                goto lab_0x4134c5;\n                            }\n                            case 89: {\n                                goto lab_0x413536;\n                            }\n                            case 90: {\n                                goto lab_0x4134fb;\n                            }\n                            case 91: {\n                                goto lab_0x4134c5;\n                            }\n                            case 92: {\n                                goto lab_0x4134c5;\n                            }\n                            case 93: {\n                                goto lab_0x4134c5;\n                            }\n                            case 94: {\n                                goto lab_0x4134c5;\n                            }\n                            case 95: {\n                                goto lab_0x4134c5;\n                            }\n                            case 96: {\n                                goto lab_0x4134c5;\n                            }\n                            case 97: {\n                                goto lab_0x4134c5;\n                            }\n                            case 98: {\n                                goto lab_0x4134df;\n                            }\n                            case 99: {\n                                goto lab_0x413468;\n                            }\n                            case 100: {\n                                goto lab_0x4134c5;\n                            }\n                            case 101: {\n                                goto lab_0x4134c5;\n                            }\n                            case 102: {\n                                goto lab_0x4134c5;\n                            }\n                            case 103: {\n                                goto lab_0x413603;\n                            }\n                            case 104: {\n                                goto lab_0x4134c5;\n                            }\n                            case 105: {\n                                goto lab_0x4134c5;\n                            }\n                            case 106: {\n                                goto lab_0x4134c5;\n                            }\n                            case 107: {\n                                goto lab_0x41348c;\n                            }\n                            case 108: {\n                                goto lab_0x4134c5;\n                            }\n                            case 109: {\n                                goto lab_0x41344e;\n                            }\n                            case 110: {\n                                goto lab_0x4134c5;\n                            }\n                            case 111: {\n                                goto lab_0x4134c5;\n                            }\n                            case 112: {\n                                goto lab_0x4134c5;\n                            }\n                            case 113: {\n                                goto lab_0x4134c5;\n                            }\n                            case 114: {\n                                goto lab_0x4134c5;\n                            }\n                            case 115: {\n                                goto lab_0x4134c5;\n                            }\n                            case 116: {\n                                goto lab_0x413568;\n                            }\n                            default: {\n                                goto lab_0x41342a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x41342a;\n    }\n  lab_0x413352:\n    // 0x413352\n    *a4 = v20;\n    // 0x413355\n    return v17 & 0xffffffff;\n  lab_0x41342a:\n    // 0x41342a\n    g203 = v16 - 66;\n    v47 = v43;\n    v59 = v44;\n    v46 = v21;\n    v45 = v18;\n    v60 = v44;\n    v48 = v43;\n    v61 = v44;\n    v22 = v21;\n    v19 = v18;\n    v62 = v44;\n    v49 = v43;\n    v63 = v44;\n    v50 = v43;\n    v64 = v44;\n    v51 = v43;\n    v55 = v44;\n    v52 = v43;\n    v56 = v44;\n    v53 = v43;\n    v57 = v44;\n    v54 = v43;\n    v58 = v44;\n    int64_t v66; // 0x4132b0\n    switch (v16) {\n        case 66: {\n            // 0x413624\n            v66 = v44;\n            if (v21 >= 0x40000000000000) {\n                goto lab_0x413497;\n            } else {\n                // 0x413631\n                v46 = 1024 * v21;\n                v45 = v18;\n                v60 = v44;\n                goto lab_0x413468;\n            }\n        }\n        case 69: {\n            goto lab_0x4135cb;\n        }\n        case 71: {\n            goto lab_0x413603;\n        }\n        case 75: {\n            goto lab_0x41348c;\n        }\n        case 77: {\n            goto lab_0x41344e;\n        }\n        case 80: {\n            goto lab_0x413598;\n        }\n        case 84: {\n            goto lab_0x413568;\n        }\n        case 89: {\n            goto lab_0x413536;\n        }\n        case 90: {\n            goto lab_0x4134fb;\n        }\n        case 98: {\n            goto lab_0x4134df;\n        }\n        case 99: {\n            goto lab_0x413468;\n        }\n        case 103: {\n            goto lab_0x413603;\n        }\n        case 107: {\n            goto lab_0x41348c;\n        }\n        case 109: {\n            goto lab_0x41344e;\n        }\n        case 116: {\n            goto lab_0x413568;\n        }\n        case 119: {\n            // 0x4134d0\n            if (v21 < 0) {\n                goto lab_0x413497;\n            } else {\n                // 0x4134d5\n                v46 = 2 * v21;\n                v45 = v18;\n                v60 = v44;\n                goto lab_0x413468;\n            }\n        }\n        default: {\n            goto lab_0x4134c5;\n        }\n    }\n  lab_0x4135cb:;\n    uint128_t v67 = (int128_t)v21 * (int128_t)v53; // 0x4135e3\n    int64_t v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n    int64_t v69 = v67 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v70 = 5; // 0x4135ef\n    int64_t v71 = v68; // 0x4135f2\n    int64_t v72 = v57; // 0x4135f2\n    int64_t v73 = v69; // 0x4135f2\n    int32_t v74 = v70; // 0x4135f2\n    int64_t v75 = v69; // 0x4135f2\n    while (v70 != 0) {\n        // 0x4135e0\n        v67 = (int128_t)v68 * (int128_t)v53;\n        v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n        v69 = v67 > 0xffffffffffffffff ? 1 : v75;\n        v70 = v74 - 1;\n        v71 = v68;\n        v72 = v57;\n        v73 = v69;\n        v74 = v70;\n        v75 = v69;\n    }\n    goto lab_0x413524;\n  lab_0x413603:\n    // 0x413603\n    v46 = -1;\n    v45 = 1;\n    v60 = v58;\n    if ((int128_t)v54 * (int128_t)v21 <= 0xffffffffffffffff) {\n        // 0x41360e\n        int128_t v76; // 0x413609\n        uint128_t v77; // 0x413609\n        uint128_t v78 = (v77 & 0xffffffffffffffff) * v76; // 0x41360e\n        v46 = -1;\n        v45 = 1;\n        int64_t v79; // 0x4132b0\n        v60 = v79;\n        if (v78 <= 0xffffffffffffffff) {\n            uint128_t v80 = (v78 & 0xffffffffffffffff) * v76; // 0x413613\n            v46 = -1;\n            v45 = 1;\n            v60 = v79;\n            if (v80 <= 0xffffffffffffffff) {\n                // 0x413618\n                v46 = v80;\n                int64_t v81; // 0x4132b0\n                v45 = v81 & 0xffffffff;\n                v60 = v79;\n            }\n        }\n    }\n    goto lab_0x413468;\n  lab_0x41348c:;\n    uint128_t v84 = (int128_t)v48 * (int128_t)v21; // 0x41348f\n    v46 = v84;\n    v45 = v18;\n    v60 = v61;\n    v66 = v61;\n    if (v84 <= 0xffffffffffffffff) {\n        goto lab_0x413468;\n    } else {\n        goto lab_0x413497;\n    }\n  lab_0x41344e:;\n    int128_t v85 = v47; // 0x413454\n    uint128_t v86 = v85 * (int128_t)v21; // 0x413454\n    v66 = v59;\n    if (v86 > 0xffffffffffffffff) {\n        goto lab_0x413497;\n    } else {\n        uint128_t v87 = (v86 & 0xffffffffffffffff) * v85; // 0x413459\n        v66 = v59;\n        if (v87 > 0xffffffffffffffff) {\n            goto lab_0x413497;\n        } else {\n            // 0x41345e\n            v46 = v87;\n            v45 = v18;\n            v60 = v59;\n            goto lab_0x413468;\n        }\n    }\n  lab_0x413598:;\n    uint128_t v88 = (int128_t)v21 * (int128_t)v52; // 0x4135ab\n    int64_t v89 = (int64_t)(v88 < 0xffffffffffffffff ? v88 : 0xffffffffffffffff);\n    int64_t v90 = v88 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v91 = 4; // 0x4135b7\n    v71 = v89;\n    v72 = v56;\n    v73 = v90;\n    int32_t v92 = v91; // 0x4135ba\n    int64_t v93 = v90; // 0x4135ba\n    while (v91 != 0) {\n        // 0x4135a8\n        v88 = (int128_t)v89 * (int128_t)v52;\n        v89 = (int64_t)(v88 < 0xffffffffffffffff ? v88 : 0xffffffffffffffff);\n        v90 = v88 > 0xffffffffffffffff ? 1 : v93;\n        v91 = v92 - 1;\n        v71 = v89;\n        v72 = v56;\n        v73 = v90;\n        v92 = v91;\n        v93 = v90;\n    }\n    goto lab_0x413524;\n  lab_0x413568:;\n    uint128_t v94 = (int128_t)v21 * (int128_t)v51; // 0x41357b\n    int64_t v95 = (int64_t)(v94 < 0xffffffffffffffff ? v94 : 0xffffffffffffffff);\n    int64_t v96 = v94 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v97 = 3; // 0x413587\n    v71 = v95;\n    v72 = v55;\n    v73 = v96;\n    int32_t v98 = v97; // 0x41358a\n    int64_t v99 = v96; // 0x41358a\n    while (v97 != 0) {\n        // 0x413578\n        v94 = (int128_t)v95 * (int128_t)v51;\n        v95 = (int64_t)(v94 < 0xffffffffffffffff ? v94 : 0xffffffffffffffff);\n        v96 = v94 > 0xffffffffffffffff ? 1 : v99;\n        v97 = v98 - 1;\n        v71 = v95;\n        v72 = v55;\n        v73 = v96;\n        v98 = v97;\n        v99 = v96;\n    }\n    goto lab_0x413524;\n  lab_0x413536:;\n    uint128_t v100 = (int128_t)v21 * (int128_t)v50; // 0x41354b\n    int64_t v101 = (int64_t)(v100 < 0xffffffffffffffff ? v100 : 0xffffffffffffffff);\n    int64_t v102 = v100 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v103 = 7; // 0x413557\n    v71 = v101;\n    v72 = v64;\n    v73 = v102;\n    int32_t v104 = v103; // 0x41355a\n    int64_t v105 = v102; // 0x41355a\n    while (v103 != 0) {\n        // 0x413548\n        v100 = (int128_t)v101 * (int128_t)v50;\n        v101 = (int64_t)(v100 < 0xffffffffffffffff ? v100 : 0xffffffffffffffff);\n        v102 = v100 > 0xffffffffffffffff ? 1 : v105;\n        v103 = v104 - 1;\n        v71 = v101;\n        v72 = v64;\n        v73 = v102;\n        v104 = v103;\n        v105 = v102;\n    }\n    goto lab_0x413524;\n  lab_0x4134fb:;\n    uint128_t v106 = (int128_t)v21 * (int128_t)v49; // 0x413513\n    int64_t v107 = (int64_t)(v106 < 0xffffffffffffffff ? v106 : 0xffffffffffffffff);\n    int64_t v108 = v106 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v109 = 6; // 0x41351f\n    int32_t v110 = v109; // 0x413522\n    int64_t v111 = v108; // 0x413522\n    v71 = v107;\n    v72 = v63;\n    v73 = v108;\n    while (v109 != 0) {\n        // 0x413510\n        v106 = (int128_t)v107 * (int128_t)v49;\n        v107 = (int64_t)(v106 < 0xffffffffffffffff ? v106 : 0xffffffffffffffff);\n        v108 = v106 > 0xffffffffffffffff ? 1 : v111;\n        v109 = v110 - 1;\n        v110 = v109;\n        v111 = v108;\n        v71 = v107;\n        v72 = v63;\n        v73 = v108;\n    }\n    goto lab_0x413524;\n  lab_0x4134df:\n    // 0x4134df\n    v66 = v62;\n    if (v21 >= 0x80000000000000) {\n        goto lab_0x413497;\n    } else {\n        // 0x4134e8\n        v46 = 512 * v21;\n        v45 = v18;\n        v60 = v62;\n        goto lab_0x413468;\n    }\n  lab_0x413468:;\n    int64_t v82 = v45;\n    int64_t v83 = (0x100000000 * v60 >> 32) + v41; // 0x41346d\n    *v14 = v83;\n    v20 = v46;\n    v17 = (*(char *)v83 != 0 ? v82 | 2 : v82) & 0xffffffff;\n    goto lab_0x413352;\n  lab_0x4134c5:\n    // 0x4134c5\n    *a4 = v22;\n    // 0x413355\n    return (v19 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x413497:\n    // 0x413497\n    v46 = -1;\n    v45 = 1;\n    v60 = v66;\n    goto lab_0x413468;\n  lab_0x413524:\n    // 0x413524\n    v46 = v71;\n    v45 = (v73 | v18) & 0xffffffff;\n    v60 = v72;\n    goto lab_0x413468;\n}\n"
        },
        {
            "funcName": "function_4137f0",
            "funcStartAddr": "4137f0",
            "funcEndAddr": "4138e9",
            "decompiledFuncCode": "int64_t function_4137f0(int64_t result) {\n    char v1 = *(char *)(result + 1); // 0x413800\n    char v2 = v1; // 0x413806\n    if (v1 == 0) {\n      lab_0x413836_3:\n        // 0x413836\n        return result;\n    }\n    int64_t v3 = result; // 0x413806\n    int64_t v4; // 0x4137f0\n    int64_t v5; // 0x4137f0\n    char v6; // 0x4137f0\n    int64_t v7; // 0x4137f0\n    while (true) {\n      lab_0x413808:\n        // 0x413808\n        v5 = v3;\n        char v8 = v2;\n        while (v8 != 91) {\n            if (v8 < 65) {\n                if ((1 << (int64_t)((v8 + 31) % 64) & 0xc0000601) != 0) {\n                    int64_t v9 = v5 + 2; // 0x41381b\n                    if (*(char *)v9 == 40) {\n                        // 0x413898\n                        v4 = function_4137f0(v9);\n                        goto lab_0x413800;\n                    }\n                }\n                if (v8 == 41) {\n                    // 0x4138e0\n                    return v5 + 2;\n                }\n            }\n            char v10 = *(char *)(v5 + 2); // 0x41382e\n            if (v10 == 0) {\n                return result;\n            }\n            v5++;\n            v8 = v10;\n        }\n        int32_t v11 = g194; // 0x413848\n        if (g194 == 0) {\n            int32_t v12 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x4138d0\n            g194 = v12;\n            v11 = v12;\n        }\n        int64_t v13 = v5 + 2; // 0x41384a\n        char v14 = *(char *)v13; // 0x41384a\n        if (v14 == 33) {\n            goto lab_0x4138b0;\n        } else {\n            // 0x413853\n            v6 = v14;\n            v7 = v13;\n            if (v11 < 0 == v14 == 94) {\n                goto lab_0x4138b0;\n            } else {\n                goto lab_0x413866;\n            }\n        }\n    }\n  lab_0x413836_3:\n    // 0x413836\n    return result;\n  lab_0x4138b0:;\n    int64_t v15 = v5 + 3; // 0x4138b0\n    v6 = *(char *)v15;\n    v7 = v15;\n    goto lab_0x413866;\n  lab_0x413866:;\n    int64_t v16 = v7;\n    char v17 = v6; // 0x413869\n    int64_t v18 = v16; // 0x413869\n    if (v6 == 93) {\n        int64_t v19 = v16 + 1; // 0x41386b\n        v17 = *(char *)v19;\n        v18 = v19;\n    }\n    int64_t v20 = v18; // 0x413885\n    char v21 = v17; // 0x413885\n    v4 = v18;\n    if (v17 != 93) {\n        if (v21 == 0) {\n            // break (via goto) -> 0x413836\n            goto lab_0x413836_3;\n        }\n        int64_t v22 = v20 + 1;\n        char v23 = *(char *)v22; // 0x413878\n        v20 = v22;\n        v4 = v22;\n        while (v23 != 93) {\n            // 0x41388b\n            if (v23 == 0) {\n                // break (via goto) -> 0x413836\n                goto lab_0x413836_3;\n            }\n            // 0x413878\n            v22 = v20 + 1;\n            v23 = *(char *)v22;\n            v20 = v22;\n            v4 = v22;\n        }\n    }\n    goto lab_0x413800;\n  lab_0x413800:\n    // 0x413800\n    v3 = v4;\n    v2 = *(char *)(v3 + 1);\n    if (v2 == 0) {\n        // break -> 0x413836\n        goto lab_0x413836_3;\n    }\n    goto lab_0x413808;\n}\n"
        },
        {
            "funcName": "function_4138f0",
            "funcStartAddr": "4138f0",
            "funcEndAddr": "413e80",
            "decompiledFuncCode": "int64_t function_4138f0(int64_t a1, int64_t wstr, uint64_t a3, uint64_t a4, uint64_t a5, uint32_t a6) {\n    int64_t v1 = 0; // bp-64, 0x41391d\n    int32_t v2 = wcslen((int32_t *)wstr); // 0x413925\n    int64_t v3 = wstr + 4; // 0x41392e\n    int32_t v4 = *(int32_t *)v3; // 0x41392e\n    if (v4 == 0) {\n        // 0x4139b5\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * a1 >> 32; // 0x413907\n    int64_t v6 = a5 % 256;\n    int64_t v7 = v2; // 0x413925\n    int32_t v8 = v4; // 0x413953\n    int64_t v9 = &v1; // 0x413953\n    int64_t v10; // bp-136, 0x4138f0\n    int64_t v11 = &v10; // 0x413953\n    int64_t v12 = v3; // 0x413953\n    int64_t v13 = 0; // 0x413953\n    int64_t v14 = v3; // 0x413953\n    int64_t v15; // 0x4138f0\n    int64_t v16; // 0x4138f0\n    int64_t wstr2; // 0x4138f0\n    int64_t v17; // 0x4138f0\n    int32_t v18; // 0x4138f0\n    int64_t v19; // 0x4138f0\n    int64_t v20; // 0x4138f0\n    int64_t v21; // 0x4138f0\n    int64_t v22; // 0x4138f0\n    int64_t v23; // 0x4138f0\n    while (true) {\n      lab_0x413972:\n        // 0x413972\n        v22 = v12;\n        v23 = v11;\n        v19 = v9;\n        wstr2 = v14;\n        v15 = v13;\n        int32_t v24 = v8;\n        while (v24 != 91) {\n            if (v24 >= 65) {\n                // 0x413958\n                v16 = v15;\n                v17 = wstr2;\n                if (v24 == 124 == v15 == 0) {\n                    // 0x413a50\n                    v21 = v7;\n                    if ((int32_t)v5 < 65) {\n                        goto lab_0x413a6d;\n                    } else {\n                        // 0x413a5f\n                        v21 = (wstr2 - v22 >> 2) + 1;\n                        goto lab_0x413a6d;\n                    }\n                } else {\n                    goto lab_0x413966;\n                }\n            }\n            if ((1 << (int64_t)((v24 + 31) % 64) & 0xc0000601) != 0) {\n                int64_t v25 = wstr2 + 4; // 0x413985\n                if (*(int32_t *)v25 == 40) {\n                    // 0x41398c\n                    v16 = v15 + 1;\n                    v17 = v25;\n                    goto lab_0x413966;\n                }\n            }\n            // 0x41398c\n            v16 = v15;\n            v17 = wstr2;\n            if (v24 != 41) {\n                goto lab_0x413966;\n            }\n            if (v15 == 0) {\n                // break (via goto) -> 0x413b16\n                goto lab_0x413b16;\n            }\n            int64_t v26 = wstr2 + 4; // 0x41399e\n            int32_t v27 = *(int32_t *)v26; // 0x41399e\n            if (v27 == 0) {\n                // 0x4139b5\n                return 0xffffffff;\n            }\n            wstr2 = v26;\n            v15--;\n            v24 = v27;\n        }\n        int32_t v28 = g194; // 0x4139e8\n        if (g194 == 0) {\n            int32_t v29 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x413b08\n            g194 = v29;\n            v28 = v29;\n        }\n        int64_t v30 = wstr2 + 4; // 0x4139ee\n        int32_t v31 = *(int32_t *)v30; // 0x4139ee\n        if (v31 == 33) {\n            goto lab_0x413a40;\n        } else {\n            // 0x4139f7\n            v18 = v31;\n            v20 = v30;\n            if (v28 < 0 == v31 == 94) {\n                goto lab_0x413a40;\n            } else {\n                goto lab_0x413a0a;\n            }\n        }\n    }\n  lab_0x413b16:;\n    int64_t v32 = v7; // 0x413b26\n    if ((int32_t)v5 >= 65) {\n        // 0x413b28\n        v32 = (wstr2 - v22 >> 2) + 1;\n    }\n    int64_t v33 = 4 * v32 + 15 & -8; // 0x413b46\n    if (v32 < 0x4000000000000000 != v33 < 0x1f3f) {\n        // 0x4139b5\n        return 0xffffffff;\n    }\n    int64_t v34 = v23 + 15 - (v33 + 23 & -16) & -16; // 0x413b88\n    int32_t * v35 = wmempcpy((int32_t *)(v34 | 8), (int32_t *)v22, (int32_t)((wstr2 - v22) / 4)); // 0x413b93\n    *v35 = 0;\n    *(int64_t *)v19 = v34;\n    int64_t v36 = v1; // 0x413ba2\n    *(int64_t *)v34 = 0;\n    if (v36 == 0) {\n        // 0x413e5a\n        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n        return &g209;\n    }\n    // 0x413bb6\n    if (*(int32_t *)(wstr2 - 4) != 41) {\n        // 0x413e41\n        __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_wmatch\");\n        // 0x413e5a\n        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n        return &g209;\n    }\n    int64_t v37 = v5 + 0xffffffdf; // 0x413bc5\n    g205 = v37 & 0xffffffff;\n    int64_t v38; // 0x4138f0\n    int64_t v39; // 0x4138f0\n    int64_t result2; // 0x4138f0\n    int64_t v40; // 0x4138f0\n    int32_t v41; // 0x413d15\n    switch ((int32_t)v37) {\n        case 0: {\n            // 0x413cea\n            if (a3 > a4) {\n                // 0x4139b5\n                return 1;\n            }\n            // 0x413cf8\n            v41 = a6 % 2 != 0 ? a6 : a6 & -5;\n            v38 = a3;\n            while (true) {\n              lab_0x413d18:;\n                int64_t v42 = v36; // 0x413d1c\n                while ((int32_t)function_413e80(v42 + 8, a3, v38, v6, v41) != 0) {\n                    // 0x413d39\n                    v42 = *(int64_t *)v42;\n                    if (v42 == 0) {\n                        // 0x413d42\n                        v40 = v6;\n                        if (v39 == a3) {\n                            goto lab_0x413d62;\n                        } else {\n                            // 0x413d4b\n                            v40 = (a6 & 5) == 5 == *(int32_t *)(v39 - 4) == 47;\n                            goto lab_0x413d62;\n                        }\n                    }\n                }\n                goto lab_0x413d7d;\n            }\n            int64_t result = result2;\n            return result;\n        }\n        case 9: {\n            // 0x413bdb\n            if ((int32_t)function_413e80(wstr2, a3, a4, v6, a6) == 0) {\n                // 0x4139b5\n                return 0;\n            }\n        }\n        case 10: {\n            int64_t v43 = v36; // 0x413c24\n            int64_t v44; // 0x4138f0\n            int64_t v45; // 0x4138f0\n            int64_t v46; // 0x4138f0\n            int64_t v47; // 0x4138f0\n            int32_t v48; // 0x413c14\n            int64_t v49; // 0x413c18\n            int64_t v50; // 0x413cb8\n            int64_t v51; // 0x413c9b\n            int32_t * v52; // 0x413c3f\n            int32_t v53; // 0x413c3f\n            int32_t v54; // 0x413c6c\n            if (a3 <= a4) {\n                if ((int32_t)function_413e80(v45 + 8, a3, v46, v6, v48) == 0) {\n                    if (v47 != a3) {\n                        // 0x413c3d\n                        v52 = (int32_t *)(v47 - 4);\n                        v53 = *v52;\n                        result2 = 0;\n                        if ((int32_t)function_413e80(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                            return result2;\n                        }\n                        // 0x413c6a\n                        v54 = *v52;\n                        result2 = 0;\n                        if ((int32_t)function_413e80(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                            return result2;\n                        }\n                    } else {\n                        // 0x413cca\n                        result2 = 0;\n                        if ((int32_t)function_413e80(wstr2, a3, a4, v6, v48) == 0) {\n                            return result2;\n                        }\n                    }\n                    int64_t v55 = v1; // 0x413c97\n                    v44 = v55;\n                }\n                // 0x413c9b\n                v51 = v46 + 4;\n                v46 = v51;\n                while (v51 <= a4) {\n                    // 0x413ca8\n                    v47 = v46;\n                    v50 = function_413e80(v45 + 8, a3, v47, v6, v48);\n                    v44 = v45;\n                    if ((int32_t)v50 == 0) {\n                        if (v47 != a3) {\n                            // 0x413c3d\n                            v52 = (int32_t *)(v47 - 4);\n                            v53 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_413e80(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                return result2;\n                            }\n                            // 0x413c6a\n                            v54 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_413e80(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                return result2;\n                            }\n                        } else {\n                            // 0x413cca\n                            result2 = 0;\n                            if ((int32_t)function_413e80(wstr2, a3, a4, v6, v48) == 0) {\n                                return result2;\n                            }\n                        }\n                        // 0x413c97\n                        v44 = v1;\n                    }\n                    // 0x413c9b\n                    v51 = v47 + 4;\n                    v45 = v44;\n                    v46 = v51;\n                }\n            }\n            // 0x413e07\n            v43 = *(int64_t *)v43;\n            v1 = v43;\n            while (v43 != 0) {\n                // 0x413c28\n                if (a3 <= a4) {\n                    v47 = v46;\n                    v50 = function_413e80(v45 + 8, a3, v47, v6, v48);\n                    v44 = v45;\n                    if ((int32_t)v50 == 0) {\n                        if (v47 != a3) {\n                            // 0x413c3d\n                            v52 = (int32_t *)(v47 - 4);\n                            v53 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_413e80(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                return result2;\n                            }\n                            // 0x413c6a\n                            v54 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_413e80(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                return result2;\n                            }\n                        } else {\n                            // 0x413cca\n                            result2 = 0;\n                            if ((int32_t)function_413e80(wstr2, a3, a4, v6, v48) == 0) {\n                                return result2;\n                            }\n                        }\n                        // 0x413c97\n                        v44 = v1;\n                    }\n                    // 0x413c9b\n                    v51 = v47 + 4;\n                    v45 = v44;\n                    v46 = v51;\n                    while (v51 <= a4) {\n                        // 0x413ca8\n                        v47 = v46;\n                        v50 = function_413e80(v45 + 8, a3, v47, v6, v48);\n                        v44 = v45;\n                        if ((int32_t)v50 == 0) {\n                            if (v47 != a3) {\n                                // 0x413c3d\n                                v52 = (int32_t *)(v47 - 4);\n                                v53 = *v52;\n                                result2 = 0;\n                                if ((int32_t)function_413e80(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                    return result2;\n                                }\n                                // 0x413c6a\n                                v54 = *v52;\n                                result2 = 0;\n                                if ((int32_t)function_413e80(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                    return result2;\n                                }\n                            } else {\n                                // 0x413cca\n                                result2 = 0;\n                                if ((int32_t)function_413e80(wstr2, a3, a4, v6, v48) == 0) {\n                                    return result2;\n                                }\n                            }\n                            // 0x413c97\n                            v44 = v1;\n                        }\n                        // 0x413c9b\n                        v51 = v47 + 4;\n                        v45 = v44;\n                        v46 = v51;\n                    }\n                }\n                // 0x413e07\n                v43 = *(int64_t *)v43;\n                v1 = v43;\n            }\n            // 0x4139b5\n            return 1;\n        }\n        case 30: {\n            // 0x413de1\n            if ((int32_t)function_413e80(wstr2, a3, a4, v6, a6) == 0) {\n                // 0x4139b5\n                return 0;\n            }\n        }\n        case 31: {\n            int32_t v56 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x413da3\n            int64_t v57 = v36; // 0x413da6\n            int32_t * v58 = wcscat((int32_t *)(v57 + 8), (int32_t *)wstr2); // 0x413dbc\n            result2 = 0;\n            while ((int32_t)function_413e80((int64_t)v58, a3, a4, v6, v56) != 0) {\n                // 0x413da8\n                v57 = *(int64_t *)v57;\n                v1 = v57;\n                result2 = 1;\n                if (v57 == 0) {\n                    // break -> 0x4139b5\n                    break;\n                }\n                v58 = wcscat((int32_t *)(v57 + 8), (int32_t *)wstr2);\n                result2 = 0;\n            }\n          lab_0x4139b5_4:\n            // 0x4139b5\n            return result2;\n        }\n        default: {\n            // 0x413e28\n            __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 1197, \"ext_wmatch\");\n            // 0x413e41\n            __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_wmatch\");\n            // 0x413e5a\n            __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n            return &g209;\n        }\n    }\n  lab_0x413966:;\n    int64_t v59 = v17 + 4; // 0x413966\n    int32_t v60 = *(int32_t *)v59; // 0x41396a\n    v9 = v19;\n    v11 = v23;\n    v12 = v22;\n    v13 = v16;\n    v14 = v59;\n    goto lab_0x41396e;\n  lab_0x413d7d:;\n    int64_t v67 = v38 + 4; // 0x413d7d\n    v38 = v67;\n    if (v67 > a4) {\n        // break -> 0x4139b5\n        goto lab_0x4139b5_4;\n    }\n    goto lab_0x413d18;\n  lab_0x413a40:;\n    int64_t v68 = wstr2 + 8; // 0x413a40\n    v18 = *(int32_t *)v68;\n    v20 = v68;\n    goto lab_0x413a0a;\n  lab_0x413a0a:;\n    int64_t v69 = v20;\n    int32_t v70 = v18; // 0x413a0d\n    int64_t v71 = v69; // 0x413a0d\n    if (v18 == 93) {\n        int64_t v72 = v69 + 4; // 0x413a0f\n        v70 = *(int32_t *)v72;\n        v71 = v72;\n    }\n    int64_t v73 = v71 + 4; // 0x413a2a\n    int64_t v74 = v73; // 0x413a31\n    int32_t v75 = v70; // 0x413a31\n    if (v70 != 93) {\n        while (v75 != 0) {\n            int32_t v76 = *(int32_t *)v74; // 0x413a24\n            v74 += 4;\n            v75 = v76;\n            if (v76 == 93) {\n                // break -> 0x413a33\n                break;\n            }\n        }\n        // 0x4139b5\n        return 0xffffffff;\n    }\n    // 0x413a33\n    v60 = *(int32_t *)v73;\n    v9 = v19;\n    v11 = v23;\n    v12 = v22;\n    v13 = v15;\n    v14 = v73;\n    goto lab_0x41396e;\n  lab_0x41396e:\n    // 0x41396e\n    v8 = v60;\n    if (v8 == 0) {\n        // 0x4139b5\n        return 0xffffffff;\n    }\n    goto lab_0x413972;\n  lab_0x413a6d:;\n    int64_t v61 = 4 * v21 + 15 & -8; // 0x413a75\n    result2 = 0xffffffff;\n    if (v21 < 0x4000000000000000 == v61 < 0x1f3f) {\n        int64_t v62 = v23 - (v61 + 23 & -16); // 0x413aab\n        int64_t v63 = v62 + 15 & -16; // 0x413ab7\n        int32_t * v64 = wmempcpy((int32_t *)(v63 | 8), (int32_t *)v22, (int32_t)((wstr2 - v22) / 4)); // 0x413abf\n        int64_t v65 = wstr2 + 4; // 0x413ac4\n        *v64 = 0;\n        *(int64_t *)v63 = 0;\n        *(int64_t *)v19 = v63;\n        v60 = *(int32_t *)v65;\n        v9 = v63;\n        v11 = v62;\n        v12 = v65;\n        v13 = 0;\n        v14 = v65;\n        goto lab_0x41396e;\n    } else {\n        goto lab_0x4139b5_4;\n    }\n  lab_0x413d62:\n    // 0x413d62\n    result2 = 0;\n    int64_t v66; // 0x4138f0\n    if ((int32_t)function_413e80(v66, v39, a4, v40, v41) == 0) {\n        goto lab_0x4139b5_4;\n    } else {\n        goto lab_0x413d7d;\n    }\n}\n"
        },
        {
            "funcName": "function_413e80",
            "funcStartAddr": "413e80",
            "funcEndAddr": "41495c",
            "decompiledFuncCode": "int64_t function_413e80(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, uint32_t a5) {\n    int32_t v1 = a1;\n    int64_t v2 = a2; // 0x413eab\n    int64_t result; // 0x413e80\n    if (v1 == 0) {\n      lab_0x41411c:\n        // 0x41411c\n        if (v2 == a3) {\n            // 0x414135\n            return 0;\n        }\n        // 0x414125\n        result = 1;\n        if ((a5 & 8) != 0) {\n            // 0x414859\n            result = *(int32_t *)v2 != 47;\n        }\n      lab_0x414135_3:\n        // 0x414135\n        return result;\n    }\n    int64_t v3 = a5;\n    uint32_t v4 = a5 % 2;\n    uint32_t v5 = a5 & 32;\n    int64_t v6 = a1; // 0x413ed2\n    int64_t v7 = a2; // 0x413ed2\n    int64_t v8 = a4 & 0xffffffff; // 0x413ed2\n    int32_t v9 = v1; // 0x413ed2\n    int64_t v10; // 0x413e80\n    int64_t v11; // 0x413e80\n    int32_t v12; // 0x413e80\n    int32_t v13; // 0x413e80\n    int32_t v14; // 0x413e80\n    int64_t v15; // 0x413e80\n    int64_t wc7; // 0x413e80\n    int32_t v16; // 0x413e80\n    int64_t v17; // 0x413e80\n    int64_t v18; // 0x413e80\n    int64_t v19; // 0x413e80\n    int64_t v20; // 0x413e80\n    int32_t * wc4; // 0x413e80\n    int32_t wc6; // 0x413f7b\n    while (true) {\n      lab_0x413ed5:;\n        int32_t wc = v9;\n        int64_t v21 = v8;\n        wc7 = v7;\n        v18 = v6;\n        int64_t v22 = v21; // 0x413ed8\n        int32_t v23 = wc; // 0x413ed8\n        if ((v3 & 16) != 0) {\n            // 0x413eda\n            v22 = v21 % 256;\n            v23 = towlower(wc);\n        }\n        // 0x413ef0\n        v17 = v18 + 4;\n        v12 = v23;\n        v10 = v22;\n        g204 = v12 - 33;\n        switch (v12) {\n            case 33: {\n                goto lab_0x414150;\n            }\n            case 42: {\n                goto lab_0x414190;\n            }\n            case 43: {\n                goto lab_0x414150;\n            }\n            case 47: {\n                if ((a5 & 5) == 5) {\n                    // 0x4144b8\n                    if (wc7 == a3) {\n                        // 0x414135\n                        return 1;\n                    }\n                    // 0x4144c3\n                    v15 = v17;\n                    v8 = 1;\n                    if (*(int32_t *)wc7 != 47) {\n                        // 0x414135\n                        return 1;\n                    }\n                    goto lab_0x4140fd;\n                } else {\n                    goto lab_0x4140db;\n                }\n            }\n            case 63: {\n                int64_t v24 = v10; // 0x4140a5\n                if (v5 != 0) {\n                    // 0x4145f6\n                    v24 = v10;\n                    if (*(int32_t *)v17 == 40) {\n                        int64_t v25 = v10 % 256; // 0x41460a\n                        int64_t v26 = function_4138f0(63, v17, wc7, a3, v25, a5); // 0x414620\n                        v24 = v25;\n                        result = v26;\n                        if ((int32_t)v26 != -1) {\n                            // 0x414135\n                            return result;\n                        }\n                    }\n                }\n                // 0x4140ab\n                if (wc7 == a3) {\n                    // 0x414135\n                    return 1;\n                }\n                int32_t v27 = *(int32_t *)wc7; // 0x4140b2\n                if (v27 == 47) {\n                    // 0x4144e0\n                    v15 = v17;\n                    v8 = 0;\n                    if (v4 != 0) {\n                        // 0x414135\n                        return 1;\n                    }\n                } else {\n                    unsigned char v28 = (char)(v27 == 46) & (char)v24; // 0x4140c3\n                    if (v28 != 0) {\n                        // 0x414135\n                        return 1;\n                    }\n                    // 0x4140c8\n                    v15 = v17;\n                    v8 = v28;\n                }\n                goto lab_0x4140fd;\n            }\n            case 64: {\n                goto lab_0x414150;\n            }\n            case 91: {\n                int32_t v29 = g194; // 0x413f6a\n                int64_t v30 = v10; // 0x413f6a\n                if (g194 == 0) {\n                    // 0x414500\n                    v29 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1;\n                    g194 = v29;\n                    v30 = v10 % 256;\n                }\n                // 0x413f70\n                if (wc7 == a3) {\n                    // 0x414135\n                    return 1;\n                }\n                int32_t v31 = v29; // 0x413fa5\n                wc4 = (int32_t *)wc7;\n                wc6 = *wc4;\n                if (wc6 == 46) {\n                    // 0x4144f0\n                    if ((char)v30 != 0) {\n                        // 0x414135\n                        return 1;\n                    }\n                } else {\n                    // 0x413f88\n                    if (wc6 == 47 == (v4 != 0)) {\n                        // 0x414135\n                        return 1;\n                    }\n                }\n                int32_t v32 = *(int32_t *)v17; // 0x413f99\n                if (v32 == 33) {\n                    // 0x414490\n                    v16 = 1;\n                    v11 = v18 + 8;\n                    goto lab_0x413fc5;\n                } else {\n                    // 0x413fa5\n                    v16 = 0;\n                    v11 = v17;\n                    if (v31 < 0 == v32 == 94) {\n                        // 0x414490\n                        v16 = 1;\n                        v11 = v18 + 8;\n                        goto lab_0x413fc5;\n                    } else {\n                        goto lab_0x413fc5;\n                    }\n                }\n            }\n            case 92: {\n                if ((v3 & 2) != 0) {\n                    // 0x414330\n                    if (wc7 == a3) {\n                        // 0x414135\n                        return 1;\n                    }\n                    // 0x41433b\n                    v19 = v17;\n                    v13 = v12;\n                    v20 = v17;\n                    v14 = v12;\n                    if ((v3 & 16) != 0) {\n                        goto lab_0x413f46;\n                    } else {\n                        goto lab_0x414344;\n                    }\n                } else {\n                    int32_t wc2 = *(int32_t *)v17; // 0x413f11\n                    if (wc2 == 0) {\n                        // 0x414135\n                        return 1;\n                    }\n                    int64_t v33 = v18 + 8; // 0x413f15\n                    if ((v3 & 16) == 0) {\n                        // 0x414530\n                        v20 = v33;\n                        v14 = wc2;\n                        if (wc7 == a3) {\n                            // 0x414135\n                            return 1;\n                        }\n                        goto lab_0x414344;\n                    } else {\n                        // 0x413f30\n                        v19 = v33;\n                        v13 = towlower(wc2);\n                        if (wc7 == a3) {\n                            // 0x414135\n                            return 1;\n                        }\n                        goto lab_0x413f46;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x4140db;\n            }\n        }\n    }\n  lab_0x414190:;\n    int64_t v34 = v10; // 0x4141a9\n    int64_t result2; // 0x413e80\n    if (v5 != 0) {\n        // 0x4145b4\n        v34 = v10;\n        if (*(int32_t *)v17 == 40) {\n            int64_t v35 = v10 % 256; // 0x4145cf\n            int64_t v36 = function_4138f0(42, v17, wc7, a3, v35, a5); // 0x4145dd\n            v34 = v35;\n            if ((int32_t)v36 != -1) {\n                // 0x414135\n                result2 = result;\n                return result2;\n            }\n        }\n    }\n    // 0x4141af\n    if (wc7 != a3) {\n        // 0x4141b4\n        if (*(int32_t *)wc7 == 46) {\n            // 0x4141b9\n            if ((char)v34 != 0) {\n                // 0x414135\n                return 1;\n            }\n        }\n    }\n    uint32_t v37 = *(int32_t *)v17; // 0x4141c2\n    int64_t v38 = v37; // 0x4141c2\n    int64_t v39 = v18 + 8; // 0x4141c6\n    int64_t v40 = wc7; // 0x4141ce\n    int64_t v41 = v34; // 0x4141ce\n    int64_t v42 = v38; // 0x4141ce\n    int64_t v43 = v39; // 0x4141ce\n    int32_t * v44; // 0x413e80\n    int64_t v45; // 0x413e80\n    int64_t v46; // 0x413e80\n    int64_t v47; // 0x413e80\n    int64_t v48; // 0x413e80\n    int64_t v49; // 0x413e80\n    int64_t v50; // 0x413e80\n    int64_t v51; // 0x413e80\n    int64_t v52; // 0x413e80\n    int64_t v53; // 0x413e80\n    int64_t v54; // 0x413e80\n    int64_t v55; // 0x413e80\n    int64_t v56; // 0x413e80\n    int64_t v57; // 0x413e80\n    int64_t v58; // 0x413e80\n    int64_t v59; // 0x413e80\n    int32_t * v60; // 0x413e80\n    if (v37 != 42 != v37 != 63) {\n        // 0x4141d6\n        v52 = v5;\n        v57 = v5 != 0;\n        v54 = wc7;\n        v45 = v34;\n        v48 = v38;\n        v50 = v39;\n        while (true) {\n          lab_0x4141f0_2:\n            // 0x4141f0\n            v51 = v50;\n            int64_t v61 = v48;\n            int64_t v62 = v45;\n            v55 = v54;\n            int64_t v63 = v57;\n            v60 = (int32_t *)v51;\n            v58 = v63;\n            v46 = v62;\n            v49 = v61;\n            if (*v60 != 40) {\n                goto lab_0x4141fe;\n            } else {\n                // 0x4141f6\n                v58 = v63;\n                v46 = v62;\n                v49 = v61;\n                if ((char)v63 != 0) {\n                    int64_t v64 = v52;\n                    int64_t v65 = v63 % 256; // 0x414456\n                    int64_t v66 = v62 % 256; // 0x41445b\n                    if (v64 != v51) {\n                        // 0x414440\n                        v44 = (int32_t *)v64;\n                        v53 = v64;\n                        v59 = v65;\n                        v56 = v55;\n                        v47 = v66;\n                        goto lab_0x41420b;\n                    } else {\n                        // 0x41446a\n                        v58 = v65;\n                        v46 = v66;\n                        v49 = 0x1000000 * (int32_t)v61 >> 24;\n                        goto lab_0x4141fe;\n                    }\n                } else {\n                    goto lab_0x4141fe;\n                }\n            }\n        }\n        // 0x414135\n        result2 = result;\n        return result2;\n    }\n  lab_0x41421e:;\n    int64_t wstr = v40;\n    int32_t v67 = v42; // 0x414225\n    if (v67 == 0) {\n        // 0x414748\n        if (v4 == 0 || (a5 & 8) != 0) {\n            // 0x414135\n            return 0;\n        }\n        // 0x41475b\n        result = wmemchr((int32_t *)wstr, 47, (int32_t)((a3 - wstr) / 4)) != NULL;\n        // 0x414135\n        return result;\n    }\n    int64_t v68 = v43;\n    int32_t * v69 = wmemchr((int32_t *)wstr, -v4 & 47, (int32_t)((a3 - wstr) / 4)); // 0x414250\n    int64_t v70 = v41 % 256; // 0x414264\n    uint64_t v71 = v69 == NULL ? a3 : (int64_t)v69; // 0x41426a\n    if (v67 == 91) {\n        goto lab_0x414566;\n    } else {\n        if (v5 != 0) {\n            uint64_t v72 = v42 + 0xffffffdf; // 0x414540\n            if ((int32_t)v72 < 32) {\n                if ((1 << v72 % 64 & 0x80000401) == 0) {\n                    goto lab_0x414286;\n                } else {\n                    // 0x41455c\n                    if (*(int32_t *)v68 != 40) {\n                        goto lab_0x414286;\n                    } else {\n                        goto lab_0x414566;\n                    }\n                }\n            } else {\n                goto lab_0x414286;\n            }\n        } else {\n            goto lab_0x414286;\n        }\n    }\n  lab_0x4141fe:;\n    int64_t v73 = v46;\n    int64_t v74 = v58;\n    v44 = v60;\n    v53 = v51;\n    v59 = v74;\n    v56 = v55;\n    v47 = v73;\n    if ((int32_t)v49 == 63) {\n        // 0x414360\n        if (v55 == a3) {\n            return 1;\n        }\n        // 0x414369\n        if (!((v4 == 0 | *(int32_t *)v55 != 47))) {\n            return 1;\n        }\n        // 0x414372\n        v44 = v60;\n        v53 = v51;\n        v59 = v74;\n        v56 = v55 + 4;\n        v47 = v73;\n    }\n    goto lab_0x41420b;\n  lab_0x41420b:;\n    uint32_t v75 = *v44; // 0x41420b\n    int64_t v76 = v75; // 0x41420b\n    int64_t v77 = v53 + 4; // 0x41420e\n    v40 = v56;\n    v41 = v47;\n    v42 = v76;\n    v43 = v77;\n    switch (v75) {\n        case 63: {\n            goto lab_0x4141f0;\n        }\n        case 42: {\n            goto lab_0x4141f0;\n        }\n        default: {\n            goto lab_0x41421e;\n        }\n    }\n  lab_0x4141f0:\n    // 0x4141f0\n    v52 = v53;\n    v57 = v59;\n    v54 = v56;\n    v45 = v47;\n    v48 = v76;\n    v50 = v77;\n    goto lab_0x4141f0_2;\n  lab_0x4143d3:;\n    // 0x4143d3\n    int64_t v78; // 0x413e80\n    int64_t v79 = v78 + 4; // 0x4143d3\n    int64_t v80 = 58; // 0x4143da\n    int64_t v81 = v79; // 0x4143da\n    int32_t * v82; // 0x413e80\n    int32_t * v83 = v82; // 0x4143da\n    int64_t v84 = v78; // 0x4143da\n    int64_t v85 = v79; // 0x4143da\n    uint32_t v86; // 0x413e80\n    if (v86 == 91) {\n        goto lab_0x414640;\n    }\n    goto lab_0x414007;\n  lab_0x414640:;\n    int64_t v120 = v84; // 0x414647\n    int64_t v121 = v85; // 0x414647\n    int64_t v122 = (int64_t)*v83; // 0x414647\n    goto lab_0x414663_2;\n  lab_0x414663_2:;\n    int32_t v185 = v122; // 0x414669\n    result = 1;\n    int32_t v147 = v185; // 0x41466c\n    int64_t v160 = v122; // 0x41466c\n    int64_t v159 = v121; // 0x41466c\n    int64_t v145 = v120; // 0x41466c\n    if (v185 == 0) {\n        goto lab_0x414135_3;\n    } else {\n        goto lab_0x414672;\n    }\n  lab_0x414036:;\n    // 0x414036\n    int64_t v95; // 0x413e80\n    int64_t v174 = v95;\n    int64_t v94; // 0x413e80\n    int64_t v175 = v94;\n    int64_t v93; // 0x413e80\n    int64_t v176 = v93;\n    int64_t v177 = v175 + 4; // 0x414036\n    int64_t v123; // 0x413e80\n    int64_t v124; // 0x413e80\n    int32_t v178; // 0x414040\n    if (v174 != 45) {\n        // 0x413ff0\n        v123 = v174;\n        v124 = v177;\n        if (v86 == (int32_t)v176) {\n            // 0x413ff0\n            v83 = (int32_t *)v175;\n            v84 = v175;\n            v85 = v177;\n            goto lab_0x414640;\n        }\n        goto lab_0x413ffe;\n    } else {\n        // 0x414040\n        v178 = *(int32_t *)v177;\n        switch (v178) {\n            case 93: {\n                goto lab_0x4143f0;\n            }\n            case 0: {\n                goto lab_0x4143f0;\n            }\n            default: {\n                goto lab_0x414054;\n            }\n        }\n    }\n  lab_0x4140e2:;\n    // 0x4140e2\n    int32_t * v96; // 0x413e80\n    int32_t wc5 = *v96; // 0x4140e2\n    int32_t v126 = wc5; // 0x4140e7\n    if ((v3 & 16) != 0) {\n        // 0x4140e9\n        v126 = towlower(wc5);\n    }\n    // 0x4140f0\n    v15 = v17;\n    v8 = 0;\n    if (v126 != v12) {\n        // 0x414135\n        return 1;\n    }\n    goto lab_0x4140fd;\n  lab_0x41402a:;\n    // 0x41402a\n    int64_t v99; // 0x413e80\n    int64_t v172 = v99;\n    int64_t v98; // 0x413e80\n    int64_t wc10 = v98;\n    int32_t v100; // 0x413e80\n    int64_t v173 = v100;\n    v93 = wc10;\n    v94 = v172;\n    v95 = v173;\n    if ((v3 & 16) != 0) {\n        // 0x41402f\n        v93 = towlower((int32_t)wc10);\n        v94 = v172;\n        v95 = v173;\n    }\n    goto lab_0x414036;\n  lab_0x413ffe:;\n    int64_t v179 = v124;\n    v80 = v123;\n    v81 = v179;\n    int32_t v127; // 0x413e80\n    if (v123 == 93) {\n        // 0x414720\n        v15 = v179;\n        v8 = 0;\n        result = 1;\n        if (v127 != 0) {\n            goto lab_0x4140fd;\n        } else {\n            goto lab_0x414135_3;\n        }\n    }\n    goto lab_0x414007;\n  lab_0x4143f0:\n    // 0x4143f0\n    v120 = v175;\n    v121 = v177;\n    v122 = v174;\n    if (v86 == (int32_t)v176) {\n        goto lab_0x414663_2;\n    }\n    // 0x4143f8\n    v98 = 45;\n    v99 = v177;\n    v100 = 93;\n    if (v178 != 93) {\n        goto lab_0x414054;\n    } else {\n        goto lab_0x41402a;\n    }\n  lab_0x414054:;\n    int64_t v180 = v175 + 8; // 0x414054\n    int32_t v181 = v178; // 0x41405b\n    int64_t v182 = v180; // 0x41405b\n    if ((v3 & 2) == 0 == v178 == 92) {\n        // 0x4144a8\n        v181 = *(int32_t *)v180;\n        v182 = v175 + 12;\n    }\n    // 0x414066\n    if (v181 == 0) {\n        // 0x414135\n        return 1;\n    }\n    int64_t v183 = (int64_t)*(int32_t *)v182; // 0x414070\n    int64_t v184 = v182 + 4; // 0x414073\n    v123 = v183;\n    v124 = v184;\n    v120 = v182;\n    v121 = v184;\n    v122 = v183;\n    if (v86 >= (int32_t)v176 == v181 >= v86) {\n        goto lab_0x414663_2;\n    }\n    goto lab_0x413ffe;\n  lab_0x414007:;\n    int64_t v87 = v80; // 0x413e80\n    int64_t v88 = v81; // 0x413e80\n    goto lab_0x414007_2;\n  lab_0x414150:\n    if (v5 != 0) {\n        // 0x414157\n        if (*(int32_t *)v17 == 40) {\n            int64_t v125 = function_4138f0((int64_t)v12, v17, wc7, a3, v10 % 256, a5); // 0x41417a\n            result = v125;\n            if ((int32_t)v125 != -1) {\n                // 0x414135\n                return result;\n            }\n        }\n    }\n    goto lab_0x4140db;\n  lab_0x4140db:\n    // 0x4140db\n    if (wc7 == a3) {\n        // 0x414135\n        return 1;\n    }\n    // 0x4140db\n    v96 = (int32_t *)wc7;\n    goto lab_0x4140e2;\n  lab_0x4140fd:\n    // 0x4140fd\n    v6 = v15;\n    v9 = *(int32_t *)v6;\n    v7 = wc7 + 4;\n    v2 = v7;\n    if (v9 == 0) {\n        goto lab_0x41411c;\n    }\n    goto lab_0x413ed5;\n  lab_0x413fc5:\n    // 0x413fc5\n    v127 = v16;\n    int32_t v128 = wc6; // 0x413fc8\n    if ((v3 & 16) != 0) {\n        // 0x413fca\n        v128 = towlower(wc6);\n    }\n    // 0x413fd5\n    v86 = v128;\n    v87 = (int64_t)*(int32_t *)v11;\n    v88 = v11 + 4;\n    while (true) {\n      lab_0x414007_2:\n        // 0x414007\n        v78 = v88;\n        int64_t v89 = v87;\n        int32_t v90 = v89; // 0x41400c\n        if ((v3 & 2) == 0 == v90 == 92) {\n            uint32_t wc3 = *(int32_t *)v78; // 0x414418\n            if (wc3 == 0) {\n                // 0x414135\n                return 1;\n            }\n            int64_t v91 = wc3; // 0x414426\n            if ((v3 & 16) != 0) {\n                // 0x414428\n                v91 = towlower(wc3);\n            }\n            int64_t v92 = v78 + 4; // 0x41442f\n            v93 = v91;\n            v94 = v92;\n            v95 = (int64_t)*(int32_t *)v92;\n            goto lab_0x414036;\n        } else {\n            // 0x414015\n            v96 = wc4;\n            switch (v90) {\n                case 91: {\n                    // 0x414380\n                    v82 = (int32_t *)v78;\n                    int32_t v97 = *v82; // 0x414380\n                    v98 = v89;\n                    v99 = v78;\n                    v100 = v97;\n                    int64_t v101 = v78; // 0x414388\n                    if (v97 != 58) {\n                        goto lab_0x41402a;\n                    } else {\n                        int64_t v102 = 0;\n                        int64_t v103 = v101 + 4; // 0x4143bb\n                        int32_t v104 = *(int32_t *)v103; // 0x4143bb\n                        while (v104 != 58) {\n                            if (v104 >= 122) {\n                                goto lab_0x4143d3;\n                            }\n                            int64_t v105 = v102 + 1; // 0x4143a0\n                            int64_t v106; // bp-1416, 0x413e80\n                            *(int32_t *)((int64_t)&v106 + 316 + 4 * v105) = v104;\n                            if (v102 == 255) {\n                                // 0x414135\n                                return 1;\n                            }\n                            v102 = v105;\n                            v103 += 4;\n                            v104 = *(int32_t *)v103;\n                        }\n                        // 0x4143c8\n                        int64_t v107; // 0x413e80\n                        if (*(int32_t *)(v107 + 8) == 93) {\n                            // 0x4147d2\n                            int64_t v108; // 0x413e80\n                            *(int32_t *)(v108 + 4 * v102) = 0;\n                            int32_t v109; // bp-1096, 0x413e80\n                            int32_t v110 = v109;\n                            int64_t v111; // 0x413e80\n                            int64_t v112; // 0x413e80\n                            if (v110 < 64) {\n                                // 0x414800\n                                if (v111 == v112 || v110 < 37 == ((v110 & -4) != 32)) {\n                                    // 0x414135\n                                    return 1;\n                                }\n                            } else {\n                                // 0x414834\n                                if (v110 == 64) {\n                                    // 0x414135\n                                    return 1;\n                                }\n                                if (v110 < 96) {\n                                    // 0x414811\n                                    if (v111 == v112) {\n                                        // 0x414135\n                                        return 1;\n                                    }\n                                } else {\n                                    // 0x414842\n                                    if (v110 > 126 || v111 == v112) {\n                                        // 0x414135\n                                        return 1;\n                                    }\n                                }\n                            }\n                            int64_t v113 = v111 + 4; // 0x41481a\n                            int64_t v114; // 0x413e80\n                            int64_t v115 = v114 + 1; // 0x41481e\n                            *(char *)v114 = (char)v110;\n                            int32_t v116 = *(int32_t *)v113; // 0x414825\n                            while (v116 != 0) {\n                                int64_t v117 = v115;\n                                int64_t v118 = v113;\n                                v110 = v116;\n                                if (v110 < 64) {\n                                    // 0x414800\n                                    if (v118 == v112 || v110 < 37 == ((v110 & -4) != 32)) {\n                                        // 0x414135\n                                        return 1;\n                                    }\n                                } else {\n                                    // 0x414834\n                                    if (v110 == 64) {\n                                        // 0x414135\n                                        return 1;\n                                    }\n                                    if (v110 < 96) {\n                                        // 0x414811\n                                        if (v118 == v112) {\n                                            // 0x414135\n                                            return 1;\n                                        }\n                                    } else {\n                                        // 0x414842\n                                        if (v110 > 126 || v118 == v112) {\n                                            // 0x414135\n                                            return 1;\n                                        }\n                                    }\n                                }\n                                // 0x41481a\n                                v113 = v118 + 4;\n                                v115 = v117 + 1;\n                                *(char *)v117 = (char)v110;\n                                v116 = *(int32_t *)v113;\n                            }\n                            // 0x4148f1\n                            *(char *)v115 = 0;\n                            int64_t name; // bp-1368, 0x413e80\n                            int32_t desc = wctype((char *)&name); // 0x4148fe\n                            if (desc == 0) {\n                                // 0x414135\n                                return 1;\n                            }\n                            // 0x414914\n                            if (iswctype(*wc4, desc) != 0) {\n                                int64_t v119 = v107 + 12; // 0x41493a\n                                v120 = v119;\n                                v121 = v107 + 16;\n                                v122 = (int64_t)*(int32_t *)v119;\n                                goto lab_0x414663_2;\n                            }\n                            // 0x41492a\n                            v123 = (int64_t)*(int32_t *)(v107 + 12);\n                            v124 = v107 + 16;\n                            goto lab_0x413ffe;\n                        } else {\n                            goto lab_0x4143d3;\n                        }\n                    }\n                }\n                case 0: {\n                    goto lab_0x4140e2;\n                }\n                default: {\n                    // 0x414026\n                    v98 = v89;\n                    v99 = v78;\n                    v100 = *(int32_t *)v78;\n                    goto lab_0x41402a;\n                }\n            }\n        }\n    }\n    goto lab_0x4140e2;\n  lab_0x413f46:;\n    int32_t v129 = towlower(*(int32_t *)wc7); // 0x413f52\n    int32_t v130 = v13; // 0x413f52\n    int64_t v131 = v19; // 0x413f52\n    goto lab_0x41434b;\n  lab_0x414344:\n    // 0x414344\n    v129 = *(int32_t *)wc7;\n    v130 = v14;\n    v131 = v20;\n    goto lab_0x41434b;\n  lab_0x41434b:\n    // 0x41434b\n    v15 = v131;\n    v8 = 0;\n    if (v129 != v130) {\n        // 0x414135\n        return 1;\n    }\n    goto lab_0x4140fd;\n  lab_0x414566:;\n    int32_t v132 = v4 != 0 ? a5 : a5 & -5; // 0x414571\n    int64_t v133 = wstr; // 0x41457d\n    if (v71 <= wstr) {\n        // 0x414135\n        return 1;\n    }\n    int64_t v134 = v70; // 0x41457d\n    result = 0;\n    while ((int32_t)function_413e80(v68 - 4, v133, a3, v134, v132) != 0) {\n        int64_t v135 = v133 + 4; // 0x4145a3\n        result = 1;\n        v133 = v135;\n        v134 = 0;\n        if (v71 <= v135) {\n            // break -> 0x414135\n            break;\n        }\n        result = 0;\n    }\n    // 0x414135\n    return result;\n  lab_0x414286:;\n    int32_t v136; // 0x413e80\n    if (v42 == 47) {\n        if (v4 != 0) {\n            // 0x41487e\n            if (wstr >= a3) {\n                // 0x414135\n                return 1;\n            }\n            int64_t v137 = wstr; // 0x414881\n            int64_t v138 = v137 + 4;\n            while (*(int32_t *)v137 != 47) {\n                // 0x414890\n                v137 = v138;\n                if (v138 >= a3) {\n                    // 0x414135\n                    return 1;\n                }\n                v138 = v137 + 4;\n            }\n            // 0x4148a2\n            result = (int32_t)function_413e80(v68, v138, a3, (int64_t)(a5 / 4 % 2), a5) != 0;\n            // 0x414135\n            return result;\n        }\n        // 0x41484f\n        v136 = a5 & -5;\n        goto lab_0x414298;\n    } else {\n        // 0x414290\n        v136 = a5;\n        if (v4 == 0) {\n            // 0x41484f\n            v136 = a5 & -5;\n            goto lab_0x414298;\n        } else {\n            goto lab_0x414298;\n        }\n    }\n  lab_0x414298:;\n    int64_t wc8 = v42; // 0x4142a0\n    if ((v3 & 2) == 0 && v42 == 92) {\n        // 0x4148d5\n        wc8 = (int64_t)*(int32_t *)v68;\n    }\n    int64_t v139 = wc8; // 0x4142a8\n    if ((v3 & 16) != 0) {\n        // 0x4142aa\n        v139 = towlower((int32_t)wc8);\n    }\n    // 0x4142bf\n    if (v71 <= wstr) {\n        // 0x414135\n        return 1;\n    }\n    int64_t v140 = v68 - 4; // 0x4142bf\n    int32_t wc9 = *(int32_t *)wstr; // 0x4142f0\n    int32_t v141 = wc9; // 0x4142f6\n    if ((v3 & 16) != 0) {\n        // 0x4142f8\n        v141 = towlower(wc9);\n    }\n    // 0x4142ff\n    if (v141 == (int32_t)v139) {\n        // 0x414304\n        if ((int32_t)function_413e80(v140, wstr, a3, v70, v136) == 0) {\n            // break -> 0x414135\n            break;\n        }\n    }\n    int64_t v142 = wstr + 4; // 0x4142e0\n    result = 1;\n    while (v71 > v142) {\n        int64_t v143 = v142;\n        wc9 = *(int32_t *)v143;\n        v141 = wc9;\n        if ((v3 & 16) != 0) {\n            // 0x4142f8\n            v141 = towlower(wc9);\n        }\n        // 0x4142ff\n        if (v141 == (int32_t)v139) {\n            // 0x414304\n            result = 0;\n            if ((int32_t)function_413e80(v140, v143, a3, 0, v136) == 0) {\n                // break -> 0x414135\n                break;\n            }\n        }\n        // 0x4142e0\n        v142 = v143 + 4;\n        result = 1;\n    }\n    // 0x414135\n    return result;\n  lab_0x414672:;\n    int64_t v144 = v145;\n    int32_t v146 = v147;\n    int32_t v148; // 0x413e80\n    int64_t v149; // 0x413e80\n    int32_t v150; // 0x413e80\n    int64_t v151; // 0x413e80\n    int64_t v152; // 0x413e80\n    int64_t v153; // 0x413e80\n    int64_t v154; // 0x413e80\n    int64_t v155; // 0x413e80\n    int64_t v156; // 0x413e80\n    int64_t v157; // 0x413e80\n    if ((v3 & 2) == 0 == v146 == 92) {\n        // 0x4146d8\n        result = 1;\n        if (*(int32_t *)(v144 + 4) == 0) {\n            goto lab_0x414135_3;\n        } else {\n            int64_t v158 = v144 + 8; // 0x4146e3\n            v154 = v158;\n            v150 = *(int32_t *)v158;\n            goto lab_0x41465f;\n        }\n    } else {\n        // 0x414685\n        v156 = v159;\n        v155 = v160;\n        v151 = v156;\n        if (v146 != 91) {\n            goto lab_0x414650;\n        } else {\n            int32_t v161 = *(int32_t *)(v144 + 4); // 0x41468b\n            int64_t v162 = v144 + 8;\n            v154 = v156;\n            v150 = v161;\n            switch (v161) {\n                case 58: {\n                    // 0x4147b6\n                    v157 = v144 + 1024;\n                    v152 = v162;\n                    goto lab_0x4147b6_2;\n                }\n                case 61: {\n                    // 0x4146f0\n                    result = 1;\n                    if (*(int32_t *)v162 == 0) {\n                        goto lab_0x414135_3;\n                    } else {\n                        // 0x4146fb\n                        result = 1;\n                        if (*(int32_t *)(v144 + 12) != 61) {\n                            goto lab_0x414135_3;\n                        } else {\n                            // 0x414705\n                            result = 1;\n                            if (*(int32_t *)(v144 + 16) != 93) {\n                                goto lab_0x414135_3;\n                            } else {\n                                // 0x41470f\n                                v155 = (int64_t)*(int32_t *)(v144 + 20);\n                                v151 = v144 + 24;\n                                goto lab_0x414650;\n                            }\n                        }\n                    }\n                }\n                case 46: {\n                    int64_t v163 = v144 + 12; // 0x4146bd\n                    int32_t v164 = *(int32_t *)v163; // 0x4146bd\n                    result = 1;\n                    v148 = v164;\n                    v149 = v163;\n                    v153 = v162;\n                    if (v164 == 0) {\n                        goto lab_0x414135_3;\n                    } else {\n                        goto lab_0x4146cc;\n                    }\n                }\n                default: {\n                    goto lab_0x41465f;\n                }\n            }\n        }\n    }\n  lab_0x414650:;\n    int64_t v165 = v151;\n    if (v155 == 93) {\n        // 0x4148dd\n        v15 = v165;\n        v8 = (v3 & 2) == 0 == v146 == 92;\n        result = 1;\n        if (v127 != 0) {\n            goto lab_0x414135_3;\n        } else {\n            goto lab_0x4140fd;\n        }\n    } else {\n        // 0x414659\n        v154 = v165;\n        v150 = *(int32_t *)v165;\n        goto lab_0x41465f;\n    }\n  lab_0x41465f:\n    // 0x41465f\n    result = 1;\n    v147 = v150;\n    v160 = v150;\n    v159 = v154 + 4;\n    v145 = v154;\n    if (v150 == 0) {\n        goto lab_0x414135_3;\n    } else {\n        goto lab_0x414672;\n    }\n  lab_0x4147b6_2:;\n    int64_t v166 = v152;\n    int32_t v167 = *(int32_t *)v166;\n    if (v167 != 58) {\n        // 0x414798\n        v154 = v156;\n        v150 = 58;\n        if (v167 < 122) {\n            // 0x4147a6\n            result = 1;\n            v152 = v166 + 4;\n            if (v157 == v166) {\n                goto lab_0x414135_3;\n            } else {\n                goto lab_0x4147b6_2;\n            }\n        } else {\n            goto lab_0x41465f;\n        }\n    } else {\n        // 0x4147bc\n        v154 = v156;\n        v150 = v167;\n        if (*(int32_t *)(v166 + 4) != 93) {\n            goto lab_0x41465f;\n        } else {\n            // 0x4147c6\n            v155 = (int64_t)*(int32_t *)(v166 + 8);\n            v151 = v166 + 12;\n            goto lab_0x414650;\n        }\n    }\n  lab_0x4146cc:;\n    int64_t v168 = v149;\n    if (v148 != 46) {\n        goto lab_0x4146ba;\n    } else {\n        int64_t v169 = v153;\n        if (*(int32_t *)(v169 + 8) == 93) {\n            // 0x414866\n            v155 = (int64_t)*(int32_t *)(v169 + 12);\n            v151 = v169 + 16;\n            goto lab_0x414650;\n        } else {\n            goto lab_0x4146ba;\n        }\n    }\n  lab_0x4146ba:;\n    int64_t v170 = v168 + 4; // 0x4146bd\n    int32_t v171 = *(int32_t *)v170; // 0x4146bd\n    result = 1;\n    v148 = v171;\n    v149 = v170;\n    v153 = v168;\n    if (v171 == 0) {\n        goto lab_0x414135_3;\n    } else {\n        goto lab_0x4146cc;\n    }\n}\n"
        },
        {
            "funcName": "function_414960",
            "funcStartAddr": "414960",
            "funcEndAddr": "414eb0",
            "decompiledFuncCode": "int64_t function_414960(int64_t a1, int64_t str, uint64_t a3, uint64_t a4, uint64_t a5, uint32_t a6) {\n    int64_t v1 = 0; // bp-64, 0x41498d\n    int32_t len = strlen((char *)str); // 0x414995\n    int64_t v2 = str + 1; // 0x41499e\n    char v3 = *(char *)v2; // 0x41499e\n    if (v3 == 0) {\n        // 0x414a35\n        return 0xffffffff;\n    }\n    int64_t v4 = 0x100000000 * a1 >> 32; // 0x414977\n    int64_t v5 = len; // 0x414995\n    char v6 = v3; // 0x4149d0\n    int64_t v7 = &v1; // 0x4149d0\n    int64_t v8; // bp-136, 0x414960\n    int64_t v9 = &v8; // 0x4149d0\n    int64_t v10 = v2; // 0x4149d0\n    int64_t v11 = v2; // 0x4149d0\n    int64_t v12 = 0; // 0x4149d0\n    int64_t v13; // 0x414960\n    int64_t v14; // 0x414960\n    int64_t v15; // 0x414960\n    int64_t v16; // 0x414960\n    int64_t v17; // 0x414960\n    int64_t v18; // 0x414960\n    int64_t v19; // 0x414960\n    char v20; // 0x414960\n    char v21; // 0x414960\n    int64_t v22; // 0x414960\n    int64_t v23; // 0x414960\n    int64_t v24; // 0x414960\n    int64_t v25; // 0x414960\n    int64_t v26; // 0x414960\n    int64_t v27; // 0x414bc4\n    int32_t v28; // 0x414d3c\n    int64_t v29; // 0x414960\n    int64_t v30; // 0x414960\n    while (true) {\n      lab_0x4149f2:\n        // 0x4149f2\n        v24 = v10;\n        v26 = v9;\n        v22 = v7;\n        v18 = v12;\n        v15 = v11;\n        char v31 = v6;\n        while (v31 != 91) {\n            if (v31 >= 65) {\n                // 0x4149d8\n                v16 = v15;\n                v19 = v18;\n                if (v31 == 124 == v18 == 0) {\n                    int64_t v32 = v15 - v24; // 0x414ad3\n                    int64_t v33 = ((int32_t)v4 < 65 ? v5 : v32 + 1) + 15 & -8; // 0x414ae7\n                    if (v33 < 0x1f3f) {\n                        int64_t v34 = v26 - (v33 + 23 & -16); // 0x414b04\n                        int64_t v35 = v34 + 15 & -16; // 0x414b0c\n                        int64_t * v36 = mempcpy((int64_t *)(v35 | 8), (int64_t *)v24, (int32_t)v32); // 0x414b14\n                        int64_t v37 = v15 + 1; // 0x414b19\n                        *(char *)v36 = 0;\n                        *(int64_t *)v35 = 0;\n                        *(int64_t *)v22 = v35;\n                        v20 = *(char *)v37;\n                        v7 = v35;\n                        v9 = v34;\n                        v10 = v37;\n                        v11 = v37;\n                        v12 = 0;\n                        goto lab_0x4149ee;\n                    } else {\n                        return 0xffffffff;\n                    }\n                } else {\n                    goto lab_0x4149e5;\n                }\n            }\n            if ((1 << (int64_t)((v31 + 31) % 64) & 0xc0000601) != 0) {\n                int64_t v38 = v15 + 1; // 0x414a04\n                if (*(char *)v38 == 40) {\n                    // 0x414a0b\n                    v16 = v38;\n                    v19 = v18 + 1;\n                    goto lab_0x4149e5;\n                }\n            }\n            // 0x414a0b\n            v16 = v15;\n            v19 = v18;\n            if (v31 != 41) {\n                goto lab_0x4149e5;\n            }\n            if (v18 == 0) {\n                // 0x414b66\n                if ((((int32_t)v4 < 65 ? v5 : v15 - v24 + 1) + 15 & -8) < 0x1f3f) {\n                    // 0x414b9e\n                    int64_t v39; // 0x414b89\n                    int64_t v40 = v26 + 15 - (v39 + 23 & -16) & -16; // 0x414bae\n                    int64_t v41; // 0x414b73\n                    int64_t * v42 = mempcpy((int64_t *)(v40 | 8), (int64_t *)v24, (int32_t)v41); // 0x414bb9\n                    *(int64_t *)v22 = v40;\n                    *(char *)v42 = 0;\n                    v27 = v1;\n                    *(int64_t *)v40 = 0;\n                    if (v27 == 0) {\n                        // 0x414e8a\n                        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                        return &g209;\n                    }\n                    char v43 = *(char *)(v15 - 1); // 0x414bdd\n                    if (v43 != 41) {\n                        // 0x414e71\n                        __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_match\");\n                        // 0x414e8a\n                        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                        return &g209;\n                    }\n                    int64_t v44 = v4 + 0xffffffdf; // 0x414bec\n                    g207 = v44 & 0xffffffff;\n                    switch ((int32_t)v44) {\n                        case 0: {\n                            // 0x414d15\n                            if (a3 > a4) {\n                                return 0xffffffff;\n                            } else {\n                                // 0x414d23\n                                v28 = a6 % 2 != 0 ? a6 : a6 & -5;\n                                v30 = 0x100000000 * v15 >> 32;\n                                v13 = a3;\n                                // 0x414d3f\n                                v14 = v13;\n                                v17 = v27;\n                                goto lab_0x414d48;\n                            }\n                        }\n                        case 9: {\n                            // 0x414c02\n                            if ((int32_t)function_414eb0(v15, a3, a4, v29, a6) == 0) {\n                                return 0xffffffff;\n                            } else {\n                                goto lab_0x414c22;\n                            }\n                        }\n                        case 10: {\n                            goto lab_0x414c22;\n                        }\n                        case 30: {\n                            // 0x414e0c\n                            if ((int32_t)function_414eb0(v15, a3, a4, v29, a6) != 0) {\n                                goto lab_0x414dbc;\n                            } else {\n                                return 0xffffffff;\n                            }\n                        }\n                        case 31: {\n                            goto lab_0x414dbc;\n                        }\n                        default: {\n                            // 0x414e58\n                            __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 1197, \"ext_match\");\n                            // 0x414e71\n                            __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_match\");\n                            // 0x414e8a\n                            __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                            return &g209;\n                        }\n                    }\n                } else {\n                    return 0xffffffff;\n                }\n            }\n            int64_t v45 = v15 + 1; // 0x414a1c\n            char v46 = *(char *)v45; // 0x414a1c\n            if (v46 == 0) {\n                return 0xffffffff;\n            }\n            v18--;\n            v15 = v45;\n            v31 = v46;\n        }\n        int32_t v47 = g194; // 0x414a68\n        v8 = v24;\n        if (g194 == 0) {\n            // 0x414b40\n            v8 = v24;\n            int32_t v48 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x414b58\n            g194 = v48;\n            v47 = v48;\n        }\n        // 0x414a6e\n        v25 = v8;\n        int64_t v49 = v15 + 1; // 0x414a6e\n        char v50 = *(char *)v49; // 0x414a6e\n        if (v50 == 33) {\n            goto lab_0x414ac0;\n        } else {\n            // 0x414a77\n            v21 = v50;\n            v23 = v49;\n            if (v47 < 0 == v50 == 94) {\n                goto lab_0x414ac0;\n            } else {\n                goto lab_0x414a89;\n            }\n        }\n    }\n  lab_0x414a35_3:\n    // 0x414a35\n    return 0xffffffff;\n  lab_0x4149e5:;\n    int64_t v51 = v16 + 1; // 0x4149e5\n    v20 = *(char *)v51;\n    v7 = v22;\n    v9 = v26;\n    v10 = v24;\n    v11 = v51;\n    v12 = v19;\n    goto lab_0x4149ee;\n  lab_0x414ac0:;\n    int64_t v82 = v15 + 2; // 0x414ac0\n    v21 = *(char *)v82;\n    v23 = v82;\n    goto lab_0x414a89;\n  lab_0x414a89:;\n    int64_t v83 = v23;\n    char v84 = v21; // 0x414a8b\n    int64_t v85 = v83; // 0x414a8b\n    int64_t v86; // 0x414960\n    int64_t v87; // 0x414960\n    char v88; // 0x414960\n    if (v21 != 93) {\n        goto lab_0x414aab;\n    } else {\n        char v89 = *(char *)(v83 + 1); // 0x414a8d\n        int64_t v90 = v83 + 2; // 0x414a95\n        v88 = v89;\n        v87 = v90;\n        v86 = v90;\n        if (v89 == 93) {\n            goto lab_0x414ab3;\n        } else {\n            goto lab_0x414aa0;\n        }\n    }\n  lab_0x414aab:;\n    int64_t v91 = v85 + 1;\n    v88 = v84;\n    v87 = v91;\n    v86 = v91;\n    if (v84 != 93) {\n        goto lab_0x414aa0;\n    } else {\n        goto lab_0x414ab3;\n    }\n  lab_0x414aa0:\n    // 0x414aa0\n    if (v88 == 0) {\n        // break -> 0x414a35\n        goto lab_0x414a35_3;\n    }\n    // 0x414aa4\n    v84 = *(char *)v87;\n    v85 = v87;\n    goto lab_0x414aab;\n  lab_0x414ab3:\n    // 0x414ab3\n    v20 = *(char *)v86;\n    v7 = v22;\n    v9 = v26;\n    v10 = v25;\n    v11 = v86;\n    v12 = v18;\n    goto lab_0x4149ee;\n  lab_0x4149ee:\n    // 0x4149ee\n    v6 = v20;\n    if (v6 == 0) {\n        // break -> 0x414a35\n        goto lab_0x414a35_3;\n    }\n    goto lab_0x4149f2;\n  lab_0x414c22:;\n    int32_t v52 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x414c3f\n    int64_t v53 = str - 1; // 0x414c43\n    int64_t v54 = 0x100000000 * v15 >> 32;\n    int64_t v55 = v27; // 0x414c4f\n    goto lab_0x414c53;\n  lab_0x414dbc:;\n    int32_t v62 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x414dce\n    char * str2 = (char *)v15; // 0x414de7\n    int64_t v61 = v27; // 0x414dd1\n    goto lab_0x414de0;\n  lab_0x414c53:;\n    int64_t v56 = v55;\n    int64_t v57 = a3; // 0x414c56\n    int64_t v58 = v56; // 0x414c56\n    int64_t v59 = v56; // 0x414c56\n    if (a3 > a4) {\n        goto lab_0x414e32;\n    } else {\n        goto lab_0x414cd3;\n    }\n  lab_0x414de0:;\n    int64_t v60 = v61;\n    char * dest_str = strcat((char *)(v60 + 8), str2); // 0x414de7\n    if ((int32_t)function_414eb0((int64_t)dest_str, a3, a4, v29, v62) != 0) {\n        int64_t v63 = *(int64_t *)v60; // 0x414dd3\n        v1 = v63;\n        v61 = v63;\n        if (v63 == 0) {\n            goto lab_0x414a35_3;\n        } else {\n            goto lab_0x414de0;\n        }\n    } else {\n        goto lab_0x414a35_3;\n    }\n  lab_0x414e32:;\n    int64_t v64 = v59;\n    int64_t v65 = *(int64_t *)v64; // 0x414e32\n    v1 = v65;\n    v55 = v65;\n    if (v65 != 0) {\n        goto lab_0x414c53;\n    } else {\n        goto lab_0x414a35_3;\n    }\n  lab_0x414cd3:;\n    int64_t v66 = v58;\n    int64_t v67 = v57;\n    int64_t v68 = function_414eb0(v66 + 8, a3, v67, v29, v52); // 0x414ce3\n    int64_t v69 = v66; // 0x414cea\n    if ((int32_t)v68 != 0) {\n        goto lab_0x414cc6;\n    } else {\n        int64_t v70; // 0x414cc2\n        if (v67 != a3) {\n            char * v71 = (char *)(v67 - 1); // 0x414c6a\n            char v72 = *v71; // 0x414c6a\n            if ((int32_t)function_414eb0(v54, v67, a4, (int64_t)((a6 & 5) == 5 == v72 == 47), v52) == 0) {\n                goto lab_0x414a35_3;\n            } else {\n                char v73 = *v71; // 0x414c97\n                if ((int32_t)function_414eb0(v53, v67, a4, (int64_t)((a6 & 5) == 5 == v73 == 47), v52) == 0) {\n                    goto lab_0x414a35_3;\n                } else {\n                    // 0x414cc2\n                    v70 = v1;\n                    v69 = v70;\n                    goto lab_0x414cc6;\n                }\n            }\n        } else {\n            // 0x414cf5\n            if ((int32_t)function_414eb0(v54, a3, a4, v29, v52) != 0) {\n                // 0x414cc2\n                v70 = v1;\n                v69 = v70;\n                goto lab_0x414cc6;\n            } else {\n                goto lab_0x414a35_3;\n            }\n        }\n    }\n  lab_0x414d48:;\n    int64_t v74 = v17;\n    int64_t v75; // 0x414960\n    if ((int32_t)function_414eb0(v74 + 8, a3, v14, v29, v28) == 0) {\n        goto lab_0x414da4;\n    } else {\n        int64_t v76 = *(int64_t *)v74; // 0x414d61\n        v17 = v76;\n        if (v76 != 0) {\n            goto lab_0x414d48;\n        } else {\n            // 0x414d69\n            v75 = v29;\n            if (v14 == a3) {\n                goto lab_0x414d89;\n            } else {\n                char v77 = *(char *)(v14 - 1); // 0x414d74\n                v75 = (a6 & 5) == 5 == v77 == 47;\n                goto lab_0x414d89;\n            }\n        }\n    }\n  lab_0x414cc6:;\n    int64_t v78 = v69;\n    int64_t v79 = v67 + 1; // 0x414cc6\n    v57 = v79;\n    v58 = v78;\n    v59 = v78;\n    if (v79 > a4) {\n        goto lab_0x414e32;\n    } else {\n        goto lab_0x414cd3;\n    }\n  lab_0x414da4:;\n    int64_t v80 = v14 + 1; // 0x414da4\n    v13 = v80;\n    if (v80 <= a4) {\n        // 0x414d3f\n        v14 = v13;\n        v17 = v27;\n        goto lab_0x414d48;\n    } else {\n        goto lab_0x414a35_3;\n    }\n  lab_0x414d89:;\n    int64_t v81 = v75;\n    if ((int32_t)function_414eb0(v30, v14, a4, v81, v28) == 0) {\n        goto lab_0x414a35_3;\n    } else {\n        goto lab_0x414da4;\n    }\n}\n"
        },
        {
            "funcName": "function_414eb0",
            "funcStartAddr": "414eb0",
            "funcEndAddr": "415993",
            "decompiledFuncCode": "int64_t function_414eb0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, uint32_t a5) {\n    char v1 = a1;\n    int64_t v2 = a2; // 0x414ede\n    int64_t result; // 0x414eb0\n    if (v1 == 0) {\n      lab_0x4151a9:\n        // 0x4151a9\n        if (v2 == a3) {\n            // 0x4151c5\n            return 0;\n        }\n        // 0x4151b4\n        result = 1;\n        if ((a5 & 8) != 0) {\n            // 0x4158dc\n            result = *(char *)v2 != 47;\n        }\n      lab_0x4151c5_3:\n        // 0x4151c5\n        return result;\n    }\n    int64_t v3 = a5;\n    uint32_t v4 = a5 % 2;\n    int64_t v5 = a1; // 0x414efc\n    char v6 = v1; // 0x414efc\n    int64_t v7 = a2; // 0x414efc\n    int64_t v8 = a4 & 0xffffffff; // 0x414efc\n    int64_t v9; // 0x414eb0\n    int64_t v10; // 0x414eb0\n    int64_t v11; // 0x414eb0\n    int64_t v12; // 0x414eb0\n    uint64_t v13; // 0x414eb0\n    int64_t v14; // 0x414eb0\n    int64_t result2; // 0x414eb0\n    int64_t v15; // 0x414eb0\n    int64_t v16; // 0x414eb0\n    int32_t v17; // 0x414eb0\n    int64_t v18; // 0x414eb0\n    int64_t v19; // 0x414eb0\n    int64_t v20; // 0x414eb0\n    int64_t v21; // 0x414eb0\n    char * wc; // 0x414eb0\n    unsigned char v22; // 0x414f99\n    while (true) {\n      lab_0x414eff:\n        // 0x414eff\n        v13 = v8;\n        v12 = v7;\n        v19 = v5;\n        int64_t v23 = v6;\n        int64_t v24 = v23; // 0x414f01\n        if ((v3 & 16) != 0) {\n            int32_t ** v25 = __ctype_tolower_loc(); // 0x414f03\n            v24 = (int64_t)*(char *)(4 * v23 + (int64_t)*v25);\n        }\n        // 0x414f10\n        v18 = v19 + 1;\n        v9 = v24;\n        uint64_t v26 = v9 + 0xffffffdf; // 0x414f10\n        g206 = v26 % 256;\n        switch ((char)v26) {\n            case 0: {\n                goto lab_0x4151e0;\n            }\n            case 9: {\n                goto lab_0x415220;\n            }\n            case 10: {\n                goto lab_0x4151e0;\n            }\n            case 14: {\n                if ((a5 & 5) == 5) {\n                    // 0x4155f8\n                    if (v12 == a3) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                    // 0x415603\n                    v11 = v18;\n                    v8 = 1;\n                    if (*(char *)v12 != 47) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                    goto lab_0x41518e;\n                } else {\n                    goto lab_0x415163;\n                }\n            }\n            case 30: {\n                if ((a5 & 32) != 0) {\n                    // 0x41570b\n                    if (*(char *)v18 == 40) {\n                        int64_t v27 = function_414960(63, v18, v12, a3, v13 % 256, a5); // 0x415731\n                        result = v27;\n                        if ((int32_t)v27 != -1) {\n                            // 0x4151c5\n                            return result;\n                        }\n                    }\n                }\n                // 0x41512b\n                if (v12 == a3) {\n                    // 0x4151c5\n                    return 1;\n                }\n                char v28 = *(char *)v12; // 0x415136\n                if (v28 == 47) {\n                    // 0x415630\n                    v11 = v18;\n                    v8 = 0;\n                    if (v4 != 0) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                } else {\n                    unsigned char v29 = (char)(v28 == 46) & (char)v13; // 0x415147\n                    if (v29 != 0) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                    // 0x41514c\n                    v11 = v18;\n                    v8 = v29;\n                }\n                goto lab_0x41518e;\n            }\n            case 31: {\n                goto lab_0x4151e0;\n            }\n            case 58: {\n                int32_t v30 = g194; // 0x414f88\n                if (g194 == 0) {\n                    // 0x415640\n                    v30 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1;\n                    g194 = v30;\n                }\n                // 0x414f8e\n                if (v12 == a3) {\n                    // 0x4151c5\n                    return 1;\n                }\n                int32_t v31 = v30; // 0x414fc5\n                wc = (char *)v12;\n                v22 = *wc;\n                if (v22 == 46) {\n                    // 0x415620\n                    if ((char)v13 != 0) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                } else {\n                    // 0x414fa7\n                    if (v22 == 47 == (v4 != 0)) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                }\n                char v32 = *(char *)v18; // 0x414fb8\n                if (v32 == 33) {\n                    // 0x4155e0\n                    v17 = 1;\n                    v14 = v19 + 2;\n                    goto lab_0x414fe4;\n                } else {\n                    // 0x414fc5\n                    v17 = 0;\n                    v14 = v18;\n                    if (v31 < 0 == v32 == 94) {\n                        // 0x4155e0\n                        v17 = 1;\n                        v14 = v19 + 2;\n                        goto lab_0x414fe4;\n                    } else {\n                        goto lab_0x414fe4;\n                    }\n                }\n            }\n            case 59: {\n                if ((v3 & 2) != 0) {\n                    // 0x4153d0\n                    if (v12 == a3) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                    // 0x4153db\n                    v20 = v18;\n                    v21 = 92;\n                    if ((v3 & 16) == 0) {\n                        goto lab_0x414f66;\n                    } else {\n                        int32_t * v33 = *__ctype_tolower_loc(); // 0x4153ed\n                        v15 = 92;\n                        v16 = (int64_t)v33;\n                        v10 = v18;\n                        goto lab_0x4153f5;\n                    }\n                } else {\n                    unsigned char v34 = *(char *)v18; // 0x414f38\n                    if (v34 == 0) {\n                        // 0x4151c5\n                        return 1;\n                    }\n                    int64_t v35 = v34; // 0x414f38\n                    int64_t v36 = v19 + 2; // 0x414f3d\n                    if ((v3 & 16) != 0) {\n                        int32_t * v37 = *__ctype_tolower_loc(); // 0x415675\n                        if (v12 == a3) {\n                            // 0x4151c5\n                            result2 = result;\n                            return result2;\n                        }\n                        int64_t v38 = (int64_t)v37; // 0x415675\n                        v15 = (int64_t)(*(int32_t *)(4 * v35 + v38) % 256);\n                        v16 = v38;\n                        v10 = v36;\n                        goto lab_0x4153f5;\n                    } else {\n                        // 0x414f57\n                        v20 = v36;\n                        v21 = v35;\n                        if (v12 == a3) {\n                            // 0x4151c5\n                            return 1;\n                        }\n                        goto lab_0x414f66;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x415163;\n            }\n        }\n    }\n  lab_0x415220:\n    if ((a5 & 32) != 0) {\n        // 0x415748\n        if (*(char *)v18 == 40) {\n            // 0x415753\n            if ((int32_t)function_414960(42, v18, v12, a3, v13 % 256, a5) != -1) {\n                // 0x4151c5\n                result2 = result;\n                return result2;\n            }\n        }\n    }\n    if (v12 != a3) {\n        // 0x415238\n        if (*(char *)v12 == 46) {\n            // 0x41523e\n            if ((char)v13 != 0) {\n                // 0x4151c5\n                return 1;\n            }\n        }\n    }\n    char v39 = *(char *)v18; // 0x415247\n    int64_t v40 = v19 + 2; // 0x41524c\n    char v41 = v39; // 0x415254\n    int64_t v42 = v40; // 0x415254\n    int64_t v43 = v12; // 0x415254\n    char * v44; // 0x414eb0\n    int64_t v45; // 0x414eb0\n    int64_t v46; // 0x414eb0\n    int64_t v47; // 0x414eb0\n    char v48; // 0x414eb0\n    char v49; // 0x414eb0\n    int64_t v50; // 0x414eb0\n    int64_t v51; // 0x414eb0\n    int64_t v52; // 0x414eb0\n    char * v53; // 0x414eb0\n    if (v39 != 42 != v39 != 63) {\n        // 0x41525c\n        v48 = v39;\n        v50 = v40;\n        v45 = v12;\n        while (true) {\n          lab_0x415278_2:\n            // 0x415278\n            v46 = v45;\n            v51 = v50;\n            v49 = v48;\n            v53 = (char *)v51;\n            if ((a5 & 32) != 0 == *v53 == 40) {\n                int64_t v54 = function_4137f0(v51); // 0x415515\n                if (v54 != v51) {\n                    // 0x415508\n                    v44 = (char *)v54;\n                    v52 = v54;\n                    v47 = v46;\n                    goto lab_0x415294;\n                } else {\n                    goto lab_0x415287;\n                }\n            } else {\n                goto lab_0x415287;\n            }\n        }\n        // 0x4151c5\n        result2 = result;\n        return result2;\n    }\n  lab_0x4152a8:;\n    int64_t v55 = v43;\n    if (v41 == 0) {\n        // 0x4157e8\n        if (v4 == 0) {\n            // 0x4151c5\n            return 0;\n        }\n        // 0x4157f0\n        if ((a5 & 8) == 0) {\n            // 0x4151c5\n            return function_416f00(v55, 47, a3 - v55) != 0;\n        }\n        // 0x4151c5\n        return 0;\n    }\n    int64_t v56 = function_416f00(v55, -v4 & 47, a3 - v55); // 0x4152db\n    int64_t v57 = 0x100000000000000 * v42 >> 56; // 0x4152f0\n    uint64_t v58 = v56 == 0 ? a3 : v56; // 0x4152f5\n    if (v41 == 91) {\n        goto lab_0x4156ba;\n    } else {\n        if ((a5 & 32) != 0 == v41 < 65) {\n            if ((1 << (int64_t)((v41 + 31) % 64) & 0x80000401) == 0) {\n                goto lab_0x41530f;\n            } else {\n                // 0x4156b0\n                if (*(char *)v57 != 40) {\n                    goto lab_0x41530f;\n                } else {\n                    goto lab_0x4156ba;\n                }\n            }\n        } else {\n            goto lab_0x41530f;\n        }\n    }\n  lab_0x415287:\n    // 0x415287\n    v44 = v53;\n    v52 = v51;\n    v47 = v46;\n    if (v49 == 63) {\n        // 0x415408\n        if (v46 == a3) {\n            return 1;\n        }\n        // 0x415413\n        if (!((v4 == 0 | *(char *)v46 != 47))) {\n            return 1;\n        }\n        // 0x41541d\n        v44 = v53;\n        v52 = v51;\n        v47 = v46 + 1;\n    }\n    goto lab_0x415294;\n  lab_0x415294:;\n    char v59 = *v44; // 0x415294\n    int64_t v60 = v52 + 1; // 0x415298\n    v41 = v59;\n    v42 = v60;\n    v43 = v47;\n    switch (v59) {\n        case 63: {\n            goto lab_0x415278;\n        }\n        case 42: {\n            goto lab_0x415278;\n        }\n        default: {\n            goto lab_0x4152a8;\n        }\n    }\n  lab_0x415278:\n    // 0x415278\n    v48 = v59;\n    v50 = v60;\n    v45 = v47;\n    goto lab_0x415278_2;\n  lab_0x415488:;\n    // 0x415488\n    int64_t v61; // 0x414eb0\n    int64_t v62 = v61 + 1; // 0x415488\n    int64_t v63 = v62; // 0x415490\n    int64_t v64 = 58; // 0x415490\n    char * v65; // 0x414eb0\n    char * v66 = v65; // 0x415490\n    int64_t v67 = v62; // 0x415490\n    int64_t v68 = v61; // 0x415490\n    int64_t v69; // 0x414eb0\n    if (v69 == 91) {\n        goto lab_0x415820;\n    }\n    goto lab_0x41502a;\n  lab_0x415820:;\n    int64_t v97 = v67; // 0x415825\n    int64_t v98 = (int64_t)*v66; // 0x415825\n    int64_t v99 = v68; // 0x415825\n    goto lab_0x4150d7;\n  lab_0x4150d7:;\n    char v160 = v98; // 0x4150dc\n    char v137 = v160; // 0x4150df\n    int64_t v151 = v98; // 0x4150df\n    int64_t v135 = v99; // 0x4150df\n    int64_t v150 = v97; // 0x4150df\n    result = 1;\n    if (v160 == 0) {\n        goto lab_0x4151c5_3;\n    } else {\n        goto lab_0x4150e5;\n    }\n  lab_0x4150d3:;\n    // 0x4150d3\n    int64_t v149; // 0x414eb0\n    v97 = v149 + 1;\n    int64_t v148; // 0x414eb0\n    v98 = v148;\n    v99 = v149;\n    goto lab_0x4150d7;\n  lab_0x41506b:;\n    // 0x41506b\n    int64_t v81; // 0x414eb0\n    int64_t v161 = v81;\n    int64_t v80; // 0x414eb0\n    int64_t v162 = v80;\n    int64_t v79; // 0x414eb0\n    int64_t v163 = v79;\n    int64_t v164 = v162 + 1; // 0x41506b\n    int64_t v100; // 0x414eb0\n    int64_t v101; // 0x414eb0\n    char v165; // 0x415075\n    unsigned char v111; // 0x414eb0\n    if (v163 != 45) {\n        // 0x415010\n        v100 = v164;\n        v101 = v163;\n        if (v111 == (char)v161) {\n            // 0x415010\n            v66 = (char *)v162;\n            v67 = v164;\n            v68 = v162;\n            goto lab_0x415820;\n        }\n        goto lab_0x415020;\n    } else {\n        // 0x415075\n        v165 = *(char *)v164;\n        switch (v165) {\n            case 93: {\n                goto lab_0x4154a8;\n            }\n            case 0: {\n                goto lab_0x4154a8;\n            }\n            default: {\n                goto lab_0x41508f;\n            }\n        }\n    }\n  lab_0x41516a:;\n    // 0x41516a\n    char * v82; // 0x414eb0\n    int64_t v103 = (int64_t)*v82; // 0x41516a\n    int64_t v104 = v103; // 0x415173\n    if ((v3 & 16) != 0) {\n        int32_t * v105 = *__ctype_tolower_loc(); // 0x41517a\n        v104 = (int64_t)*(int32_t *)(4 * v103 + (int64_t)v105);\n    }\n    // 0x415181\n    v11 = v18;\n    v8 = 0;\n    int64_t v83; // 0x414eb0\n    if ((int32_t)v104 != (int32_t)v83) {\n        // 0x4151c5\n        return 1;\n    }\n    goto lab_0x41518e;\n  lab_0x415050:;\n    // 0x415050\n    int64_t v87; // 0x414eb0\n    int64_t v170 = v87;\n    int64_t v86; // 0x414eb0\n    int64_t v171 = v86;\n    char v85; // 0x414eb0\n    int64_t v172 = v85;\n    v79 = v172;\n    v80 = v171;\n    v81 = v170;\n    if ((v3 & 16) != 0) {\n        int32_t * v173 = *__ctype_tolower_loc(); // 0x415063\n        v79 = v172;\n        v80 = v171;\n        v81 = (int64_t)*(char *)(4 * v170 + (int64_t)v173);\n    }\n    goto lab_0x41506b;\n  lab_0x415020:;\n    int64_t v174 = v100;\n    v63 = v174;\n    v64 = v101;\n    int32_t v107; // 0x414eb0\n    if (v101 == 93) {\n        // 0x4157c0\n        v11 = v174;\n        v8 = 0;\n        result = 1;\n        if (v107 != 0) {\n            goto lab_0x41518e;\n        } else {\n            goto lab_0x4151c5_3;\n        }\n    }\n    goto lab_0x41502a;\n  lab_0x4154a8:\n    // 0x4154a8\n    v97 = v164;\n    v98 = v163;\n    v99 = v162;\n    if (v111 == (char)v161) {\n        goto lab_0x4150d7;\n    }\n    // 0x4154b1\n    v85 = 93;\n    v86 = v164;\n    v87 = 45;\n    if (v165 != 93) {\n        goto lab_0x41508f;\n    } else {\n        goto lab_0x415050;\n    }\n  lab_0x41508f:;\n    int64_t v175 = v162 + 2; // 0x41508f\n    int64_t v176 = v175; // 0x415095\n    char v177 = v165; // 0x415095\n    if ((v3 & 2) == 0 == v165 == 92) {\n        // 0x4155c8\n        v176 = v162 + 3;\n        v177 = *(char *)v175;\n    }\n    // 0x4150a0\n    if (v177 == 0) {\n        // 0x4151c5\n        return 1;\n    }\n    int64_t v178 = (int64_t)*(char *)v176; // 0x4150a8\n    v100 = v176 + 1;\n    v101 = v178;\n    v148 = v178;\n    v149 = v176;\n    int32_t v110; // 0x414ff5\n    if (v110 >= (int32_t)(0x100000000000000 * v161 >> 56) && v177 >= v111) {\n        goto lab_0x4150d3;\n    }\n    goto lab_0x415020;\n  lab_0x41502a:;\n    int64_t v70 = v63; // 0x414eb0\n    int64_t v71 = v64; // 0x414eb0\n    goto lab_0x41502a_2;\n  lab_0x4151e0:\n    if ((a5 & 32) != 0) {\n        // 0x4151eb\n        if (*(char *)v18 == 40) {\n            int64_t v102 = function_414960(v9, v18, v12, a3, v13 % 256, a5); // 0x415210\n            result = v102;\n            if ((int32_t)v102 != -1) {\n                // 0x4151c5\n                return result;\n            }\n        }\n    }\n    goto lab_0x415163;\n  lab_0x415163:\n    // 0x415163\n    if (v12 == a3) {\n        // 0x4151c5\n        return 1;\n    }\n    // 0x415163\n    v82 = (char *)v12;\n    v83 = v9;\n    goto lab_0x41516a;\n  lab_0x41518e:\n    // 0x41518e\n    v5 = v11;\n    v6 = *(char *)v5;\n    v7 = v12 + 1;\n    v2 = v7;\n    if (v6 == 0) {\n        goto lab_0x4151a9;\n    }\n    goto lab_0x414eff;\n  lab_0x414fe4:;\n    int64_t v106 = v22; // 0x414f99\n    v107 = v17;\n    int64_t v108 = v106; // 0x414fe6\n    if ((v3 & 16) != 0) {\n        int32_t * v109 = *__ctype_tolower_loc(); // 0x414fed\n        v108 = (int64_t)*(char *)(4 * v106 + (int64_t)v109);\n    }\n    // 0x414ff5\n    v69 = v108;\n    v110 = v69;\n    v111 = (char)v69;\n    v70 = v14 + 1;\n    v71 = (int64_t)*(char *)v14;\n    while (true) {\n      lab_0x41502a_2:;\n        int64_t v72 = v71;\n        v61 = v70;\n        char v73 = v72; // 0x41502e\n        if ((v3 & 2) == 0 == v73 == 92) {\n            unsigned char v74 = *(char *)v61; // 0x4154d8\n            if (v74 == 0) {\n                // 0x4151c5\n                return 1;\n            }\n            int64_t v75 = v74; // 0x4154d8\n            int64_t v76 = v75; // 0x4154e8\n            if ((v3 & 16) != 0) {\n                int32_t * v77 = *__ctype_tolower_loc(); // 0x4154ef\n                v76 = (int64_t)*(char *)(4 * v75 + (int64_t)v77);\n            }\n            int64_t v78 = v61 + 1; // 0x4154f7\n            v79 = (int64_t)*(char *)v78;\n            v80 = v78;\n            v81 = v76;\n            goto lab_0x41506b;\n        } else {\n            // 0x415038\n            v82 = wc;\n            v83 = 91;\n            switch (v73) {\n                case 91: {\n                    // 0x415430\n                    v65 = (char *)v61;\n                    char v84 = *v65; // 0x415430\n                    v85 = v84;\n                    v86 = v61;\n                    v87 = v72;\n                    int64_t v88 = v61; // 0x415439\n                    if (v84 != 58) {\n                        goto lab_0x415050;\n                    } else {\n                        int64_t v89 = 0;\n                        int64_t v90 = v88 + 1; // 0x415471\n                        char v91 = *(char *)v90; // 0x415471\n                        while (v91 != 58) {\n                            if (v91 >= 122) {\n                                goto lab_0x415488;\n                            }\n                            int64_t v92 = v89 + 1; // 0x415459\n                            int64_t v93; // bp-376, 0x414eb0\n                            *(char *)((int64_t)&v93 + 47 + v92) = v91;\n                            if (v89 == 255) {\n                                // 0x4151c5\n                                return 1;\n                            }\n                            v89 = v92;\n                            v90++;\n                            v91 = *(char *)v90;\n                        }\n                        // 0x41547e\n                        int64_t v94; // 0x414eb0\n                        if (*(char *)(v94 + 2) == 93) {\n                            // 0x41587a\n                            int64_t v95; // 0x414eb0\n                            *(char *)(v95 + v89) = 0;\n                            int64_t name; // bp-328, 0x414eb0\n                            int32_t desc = wctype((char *)&name); // 0x415889\n                            if (desc == 0) {\n                                // 0x4151c5\n                                return 1;\n                            }\n                            // 0x41589f\n                            if (iswctype(btowc((int32_t)*wc), desc) != 0) {\n                                int64_t v96 = v94 + 3; // 0x415974\n                                v97 = v94 + 4;\n                                v98 = (int64_t)*(char *)v96;\n                                v99 = v96;\n                                goto lab_0x4150d7;\n                            }\n                            // 0x4158c4\n                            v100 = v94 + 4;\n                            v101 = (int64_t)*(char *)((0x100000000000000 * v90 >> 56) + 2);\n                            goto lab_0x415020;\n                        } else {\n                            goto lab_0x415488;\n                        }\n                    }\n                }\n                case 0: {\n                    goto lab_0x41516a;\n                }\n                default: {\n                    // 0x41504b\n                    v85 = *(char *)v61;\n                    v86 = v61;\n                    v87 = v72;\n                    goto lab_0x415050;\n                }\n            }\n        }\n    }\n    goto lab_0x41516a;\n  lab_0x414f66:;\n    int64_t v112 = v21; // 0x414f6a\n    int32_t v113 = (int32_t)*(char *)v12; // 0x414f6a\n    int64_t v114 = v20; // 0x414f6a\n    goto lab_0x414f6f;\n  lab_0x414f6f:\n    // 0x414f6f\n    v11 = v114;\n    v8 = 0;\n    if (v113 != (int32_t)v112) {\n        // 0x4151c5\n        return 1;\n    }\n    goto lab_0x41518e;\n  lab_0x4153f5:;\n    int32_t v115 = *(int32_t *)(4 * (int64_t)*(char *)v12 + v16); // 0x4153f9\n    v112 = v15;\n    v113 = v115;\n    v114 = v10;\n    goto lab_0x414f6f;\n  lab_0x4156ba:;\n    int32_t v116 = v4 != 0 ? a5 : a5 & -5; // 0x4156c9\n    int64_t v117 = v55; // 0x4156d2\n    if (v58 <= v55) {\n        // 0x4151c5\n        return 1;\n    }\n    int64_t v118 = v13; // 0x4156d2\n    result = 0;\n    while ((int32_t)function_414eb0(v57 - 1, v117, a3, v118 % 256, v116) != 0) {\n        int64_t v119 = v117 + 1; // 0x4156fa\n        result = 1;\n        v117 = v119;\n        v118 = 0;\n        if (v58 == v119) {\n            // break -> 0x4151c5\n            break;\n        }\n        result = 0;\n    }\n    // 0x4151c5\n    return result;\n  lab_0x41530f:;\n    int32_t v120; // 0x414eb0\n    if (v41 == 47) {\n        if (v4 != 0) {\n            int64_t v121 = v55; // 0x415904\n            if (v55 >= a3) {\n                // 0x4151c5\n                result2 = result;\n                return result2;\n            }\n            int64_t v122 = v121 + 1;\n            while (*(char *)v121 != 47) {\n                // 0x415910\n                v121 = v122;\n                if (v122 == a3) {\n                    // 0x4151c5\n                    return 1;\n                }\n                v122 = v121 + 1;\n            }\n            // 0x415923\n            result = (int32_t)function_414eb0(v57, v122, a3, (int64_t)(a5 / 4 % 2), a5) != 0;\n            // 0x4151c5\n            return result;\n        }\n        // 0x4158d2\n        v120 = a5 & -5;\n        goto lab_0x415321;\n    } else {\n        // 0x415319\n        v120 = a5;\n        if (v4 == 0) {\n            // 0x4158d2\n            v120 = a5 & -5;\n            goto lab_0x415321;\n        } else {\n            goto lab_0x415321;\n        }\n    }\n  lab_0x415321:;\n    char v123 = v41; // 0x415329\n    if ((v3 & 2) == 0 && v41 == 92) {\n        // 0x415957\n        v123 = *(char *)v57;\n    }\n    int64_t v124 = v123;\n    int64_t v125 = v124; // 0x415331\n    if ((v3 & 16) != 0) {\n        int32_t * v126 = *__ctype_tolower_loc(); // 0x41534d\n        v125 = (int64_t)*(char *)(4 * v124 + (int64_t)v126);\n    }\n    // 0x415355\n    if (v58 <= v55) {\n        // 0x4151c5\n        return 1;\n    }\n    int64_t v127 = v57 - 1; // 0x415355\n    int64_t v128 = v13 % 256;\n    int64_t v129 = (int64_t)*(char *)v55; // 0x415380\n    int64_t v130 = v129; // 0x415389\n    int32_t * v131; // 0x415394\n    if ((v3 & 16) != 0) {\n        // 0x41538b\n        v131 = *__ctype_tolower_loc();\n        v130 = (int64_t)*(int32_t *)(4 * v129 + (int64_t)v131);\n    }\n    // 0x41539a\n    if ((int32_t)v125 == (int32_t)v130) {\n        // 0x41539e\n        if ((int32_t)function_414eb0(v127, v55, a3, v128, v120) == 0) {\n            // break -> 0x4151c5\n            break;\n        }\n    }\n    int64_t v132 = v55 + 1; // 0x415370\n    result = 1;\n    while (v58 != v132) {\n        int64_t v133 = v132;\n        v129 = (int64_t)*(char *)v133;\n        v130 = v129;\n        if ((v3 & 16) != 0) {\n            // 0x41538b\n            v131 = *__ctype_tolower_loc();\n            v130 = (int64_t)*(int32_t *)(4 * v129 + (int64_t)v131);\n        }\n        // 0x41539a\n        if ((int32_t)v125 == (int32_t)v130) {\n            // 0x41539e\n            result = 0;\n            if ((int32_t)function_414eb0(v127, v133, a3, 0, v120) == 0) {\n                // break -> 0x4151c5\n                break;\n            }\n        }\n        // 0x415370\n        v132 = v133 + 1;\n        result = 1;\n    }\n    // 0x4151c5\n    return result;\n  lab_0x4150e5:;\n    int64_t v134 = v135;\n    char v136 = v137;\n    char v138; // 0x414eb0\n    int64_t v139; // 0x414eb0\n    int64_t v140; // 0x414eb0\n    int64_t v141; // 0x414eb0\n    int64_t v142; // 0x414eb0\n    int64_t v143; // 0x414eb0\n    int64_t v144; // 0x414eb0\n    char v145; // 0x414eb0\n    int64_t v146; // 0x414eb0\n    if ((v3 & 2) == 0 == v136 == 92) {\n        // 0x4155a8\n        result = 1;\n        if (*(char *)(v134 + 1) == 0) {\n            goto lab_0x4151c5_3;\n        } else {\n            int64_t v147 = v134 + 2; // 0x4155b3\n            v148 = (int64_t)*(char *)v147;\n            v149 = v147;\n            goto lab_0x4150d3;\n        }\n    } else {\n        // 0x4150fb\n        v142 = v150;\n        v143 = v151;\n        v141 = v142;\n        if (v136 == 91) {\n            char v152 = *(char *)(v134 + 1); // 0x415550\n            if (v152 == 58) {\n                // 0x41582a\n                v146 = v134 + 256;\n                v144 = v134 + 2;\n                goto lab_0x41585d;\n            } else {\n                int64_t v153 = v134 + 2;\n                if (v152 == 61) {\n                    // 0x415788\n                    result = 1;\n                    if (*(char *)v153 == 0) {\n                        goto lab_0x4151c5_3;\n                    } else {\n                        // 0x415793\n                        result = 1;\n                        if (*(char *)(v134 + 3) != 61) {\n                            goto lab_0x4151c5_3;\n                        } else {\n                            // 0x41579e\n                            result = 1;\n                            if (*(char *)(v134 + 4) != 93) {\n                                goto lab_0x4151c5_3;\n                            } else {\n                                // 0x4157a9\n                                v143 = (int64_t)*(char *)(v134 + 5);\n                                v141 = v134 + 6;\n                                goto lab_0x415105;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x415569\n                    v145 = v152;\n                    if (v152 != 46) {\n                        goto lab_0x4150d3_2;\n                    } else {\n                        int64_t v154 = v134 + 3; // 0x41558d\n                        char v155 = *(char *)v154; // 0x41558d\n                        result = 1;\n                        v138 = v155;\n                        v139 = v154;\n                        v140 = v153;\n                        if (v155 == 0) {\n                            goto lab_0x4151c5_3;\n                        } else {\n                            goto lab_0x41559e;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x415105;\n        }\n    }\n  lab_0x415105:;\n    int64_t v156 = v141;\n    if ((char)v143 == 93) {\n        // 0x415960\n        v11 = v156;\n        v8 = (v3 & 2) == 0 == v136 == 92;\n        result = 1;\n        if (v107 != 0) {\n            goto lab_0x4151c5_3;\n        } else {\n            goto lab_0x41518e;\n        }\n    } else {\n        unsigned char v157 = *(char *)v156; // 0x415111\n        v137 = v157;\n        v151 = v157;\n        v135 = v156;\n        v150 = v156 + 1;\n        result = 1;\n        if (v157 == 0) {\n            goto lab_0x4151c5_3;\n        } else {\n            goto lab_0x4150e5;\n        }\n    }\n  lab_0x41585d:;\n    int64_t v158 = v144;\n    char v159 = *(char *)v158;\n    if (v159 != 58) {\n        // 0x415840\n        v148 = 58;\n        v149 = v142;\n        if (v159 < 122) {\n            // 0x41584d\n            result = 1;\n            v144 = v158 + 1;\n            if (v146 == v158) {\n                goto lab_0x4151c5_3;\n            } else {\n                goto lab_0x41585d;\n            }\n        } else {\n            goto lab_0x4150d3;\n        }\n    } else {\n        // 0x415863\n        v145 = v159;\n        if (*(char *)(v158 + 1) != 93) {\n            goto lab_0x4150d3_2;\n        } else {\n            // 0x41586d\n            v143 = (int64_t)*(char *)(v158 + 2);\n            v141 = v158 + 3;\n            goto lab_0x415105;\n        }\n    }\n  lab_0x4150d3_2:\n    // 0x4150d3\n    v148 = v145;\n    v149 = v142;\n    goto lab_0x4150d3;\n  lab_0x41559e:;\n    int64_t v166 = v139;\n    if (v138 != 46) {\n        goto lab_0x41558a;\n    } else {\n        int64_t v167 = v140;\n        if (*(char *)(v167 + 2) == 93) {\n            // 0x4158ea\n            v143 = (int64_t)*(char *)(v167 + 3);\n            v141 = v167 + 4;\n            goto lab_0x415105;\n        } else {\n            goto lab_0x41558a;\n        }\n    }\n  lab_0x41558a:;\n    int64_t v168 = v166 + 1; // 0x41558d\n    char v169 = *(char *)v168; // 0x41558d\n    result = 1;\n    v138 = v169;\n    v139 = v168;\n    v140 = v166;\n    if (v169 == 0) {\n        goto lab_0x4151c5_3;\n    } else {\n        goto lab_0x41559e;\n    }\n}\n"
        },
        {
            "funcName": "function_4159a0",
            "funcStartAddr": "4159a0",
            "funcEndAddr": "415be0",
            "decompiledFuncCode": "int64_t function_4159a0(int64_t a1, int64_t a2, uint32_t a3) {\n    uint64_t v1 = (int64_t)a3; // 0x4159ac\n    int64_t wstr = a1; // bp-80, 0x4159b4\n    int64_t wstr2 = a2; // bp-88, 0x4159b8\n    int64_t v2 = a2; // 0x4159c5\n    if (__ctype_get_mb_cur_max() != 1) {\n        int64_t ps = 0; // bp-64, 0x415a08\n        int32_t v3 = mbsrtowcs(NULL, (char **)&wstr, 0, (struct _TYPEDEF___mbstate_t *)&ps); // 0x415a14\n        uint64_t len = (int64_t)v3 + 1; // 0x415a19\n        v2 = a2;\n        if (len != 0) {\n            // 0x415a22\n            if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                // 0x415bbf\n                __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                return &g209;\n            }\n            int32_t v4 = mbsrtowcs(NULL, (char **)&wstr2, 0, (struct _TYPEDEF___mbstate_t *)&ps); // 0x415a3f\n            int64_t len2 = (int64_t)v4 + 1; // 0x415a44\n            if (len2 != 0) {\n                // 0x415a51\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x415ba6\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x415bbf\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g209;\n                }\n                uint64_t v5 = len2 + len; // 0x415a65\n                if (v5 >= len != v5 < 0x4000000000000000) {\n                    // 0x415b05\n                    *__errno_location() = 12;\n                    // 0x4159ef\n                    return 0xffffffff;\n                }\n                int64_t size = 4 * v5; // 0x415a81\n                if (v5 < 2000) {\n                    // 0x415a95\n                    int64_t v6; // bp-104, 0x4159a0\n                    int64_t wstr3 = (int64_t)&v6 + 15 - (size + 23 & -16) & -16; // 0x415ab0\n                    mbsrtowcs((int32_t *)wstr3, (char **)&wstr, (int32_t)len, (struct _TYPEDEF___mbstate_t *)&ps);\n                    if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) != 0) {\n                        int64_t wstr4 = wstr3 + 4 * len; // 0x415ab7\n                        mbsrtowcs((int32_t *)wstr4, (char **)&wstr2, (int32_t)len2, (struct _TYPEDEF___mbstate_t *)&ps);\n                        // 0x4159ef\n                        return function_413e80(wstr3, wstr4, 4 * len2 - 4 + wstr4, v1 / 4 % 2, a3);\n                    }\n                    // 0x415b8d\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 327, \"gnu_fnmatch\");\n                    // 0x415ba6\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x415bbf\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g209;\n                }\n                int64_t * mem = malloc((int32_t)size); // 0x415b1a\n                if (mem == NULL) {\n                    // 0x415b05\n                    *__errno_location() = 12;\n                    // 0x4159ef\n                    return 0xffffffff;\n                }\n                // 0x415b27\n                mbsrtowcs((int32_t *)mem, (char **)&wstr, (int32_t)len, (struct _TYPEDEF___mbstate_t *)&ps);\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x415b8d\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 327, \"gnu_fnmatch\");\n                    // 0x415ba6\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x415bbf\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g209;\n                }\n                int64_t v7 = (int64_t)mem; // 0x415b1a\n                int64_t wstr5 = 4 * len + v7; // 0x415b35\n                mbsrtowcs((int32_t *)wstr5, (char **)&wstr2, (int32_t)len2, (struct _TYPEDEF___mbstate_t *)&ps);\n                int64_t v8 = function_413e80(v7, wstr5, 4 * len2 - 4 + wstr5, v1 / 4 % 2, a3); // 0x415b75\n                free(mem);\n                // 0x4159ef\n                return v8 & 0xffffffff;\n            }\n            // 0x415a33\n            v2 = wstr2;\n        }\n    }\n    int64_t str = v2; // 0x4159c7\n    // 0x4159ef\n    return function_414eb0(wstr, str, str + (int64_t)strlen((char *)str), v1 / 4 % 2, a3);\n}\n"
        },
        {
            "funcName": "function_415be0",
            "funcStartAddr": "415be0",
            "funcEndAddr": "4160a2",
            "decompiledFuncCode": "int64_t function_415be0(int32_t a1, int32_t a2) {\n    // 0x415be0\n    int32_t size; // 0x415be0\n    int32_t v1; // 0x415be0\n    int32_t v2; // 0x415be0\n    if (a2 != 0) {\n        // 0x415c40\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x415c12;\n        } else {\n            goto lab_0x415c5c;\n        }\n    } else {\n        // 0x415c00\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x416000\n            *__errno_location() = 22;\n            // 0x415c26\n            return 0;\n        }\n        goto lab_0x415c12;\n    }\n  lab_0x415fa0:;\n    // 0x415fa0\n    int32_t v3; // 0x415f9a\n    int64_t v4 = v3; // 0x415fa2\n    int64_t v5; // 0x415be0\n    int64_t dirp2 = v5; // 0x415fa2\n    int32_t * v6; // 0x415ce6\n    if (v3 != 0) {\n        goto lab_0x415fb1;\n    } else {\n        // 0x415fa4\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x415fb1;\n    }\n  lab_0x415db2:;\n    // 0x415db2\n    int64_t v7; // 0x415be0\n    int64_t v8 = v7;\n    int64_t v9; // 0x415be0\n    int64_t v10 = v9 + 19; // 0x415db2\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x415be0\n    int64_t v12; // 0x415be0\n    int32_t v13; // 0x415be0\n    int32_t fd; // 0x415d02\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x415de5\n        if (v11 == v12) {\n            // break -> 0x415e00\n            goto lab_0x415e00;\n        }\n    }\n    int64_t v14 = v8; // 0x415be0\n    goto lab_0x415d70_2;\n  lab_0x41607e_2:\n    // 0x41607e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x415fb1;\n  lab_0x415c12:;\n    int64_t * mem = malloc(size); // 0x415c17\n    int32_t v41 = (int64_t)mem; // 0x415c1c\n    int32_t result = v41; // 0x415c24\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x415c26\n        return result;\n    }\n    goto lab_0x415c5c;\n  lab_0x415c5c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x415c61\n    int64_t v46 = v45 - 1; // 0x415c70\n    *(char *)v46 = 0;\n    int64_t v47; // 0x415be0\n    int64_t v48; // 0x415be0\n    int32_t * v49; // 0x415be0\n    int64_t v50; // 0x415be0\n    int64_t v33; // 0x415be0\n    int64_t v40; // 0x415be0\n    int64_t v51; // 0x415be0\n    int32_t v38; // 0x415be0\n    int32_t v52; // 0x415be0\n    int32_t v53; // 0x415be0\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x415fd8;\n    } else {\n        // 0x415c86\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x415fd8;\n        } else {\n            // 0x415cb1\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x415ef8;\n            } else {\n                // 0x415ce6\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x415cf3\n                int32_t v55 = v42; // 0x415cf3\n                int64_t v56 = v11; // 0x415cf3\n                int64_t v57 = v46; // 0x415cf3\n                int64_t v58 = 0; // 0x415cf3\n                int32_t fd2 = -100; // 0x415cf3\n                int64_t dirp3; // 0x415be0\n                while (true) {\n                    // 0x415cf6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x416027\n                        break;\n                    }\n                    // 0x415d12\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x416038\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x41601d;\n                        } else {\n                            // 0x416041\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x41601d;\n                        }\n                    }\n                    // 0x415d2b\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x415d30\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x416019\n                            v40 = (int64_t)*v6;\n                            goto lab_0x41601d;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x415d57\n                    if (dirp == NULL) {\n                        // 0x416019\n                        v40 = (int64_t)*v6;\n                        goto lab_0x41601d;\n                    }\n                    // 0x415d68\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x415d70_2:;\n                        int64_t v15 = v14; // 0x415be0\n                        int64_t v16; // 0x415be0\n                        int64_t v17; // 0x415be0\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x415d7b\n                            int64_t v20; // 0x415be0\n                            int64_t v21; // 0x415be0\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x415f50\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x415fa0;\n                                }\n                                // 0x415f5d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x415f68\n                                if (v23 == NULL) {\n                                    // 0x415f9a\n                                    v3 = *v6;\n                                    goto lab_0x415fa0;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x415db2;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x415d93\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x415f80\n                            if (*(char *)v28 != 0) {\n                                // 0x415f8a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x415d93\n                                    break;\n                                }\n                            }\n                            // 0x415d70\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x415db2;\n                        } else {\n                            // 0x415d98\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x415dad\n                            int64_t v32; // 0x415be0\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x415d70\n                                v14 = v31;\n                                goto lab_0x415d70_2;\n                            } else {\n                                goto lab_0x415db2;\n                            }\n                        }\n                    }\n                  lab_0x415e00:;\n                    int64_t v61 = v38; // 0x415e08\n                    uint64_t v62 = v57 - v61; // 0x415e08\n                    int32_t len = strlen(str); // 0x415e0d\n                    uint64_t v63 = (int64_t)len; // 0x415e0d\n                    int32_t v64 = v60; // 0x415e18\n                    int32_t v65 = v38; // 0x415e18\n                    int64_t dest_mem = v57; // 0x415e18\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x416090\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x415fb1;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x415e26\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x415e31\n                        uint64_t v68 = v67 + v66; // 0x415e35\n                        if (v68 < v66) {\n                            goto lab_0x41607e_2;\n                        }\n                        // 0x415e48\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x415e50\n                        if (mem2 == NULL) {\n                            goto lab_0x41607e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x415e50\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x415ead\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x415ede\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x415fe0;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x415ef8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x416027\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x415fb9;\n                } else {\n                    goto lab_0x415fb1;\n                }\n            }\n        }\n    }\n  lab_0x415fd8:\n    // 0x415fd8\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x415fe0;\n  lab_0x415fe0:;\n    int64_t v77 = (int64_t)*v49; // 0x415fe6\n    int64_t v34 = v77; // 0x415fea\n    int32_t * v35 = v49; // 0x415fea\n    int32_t * v36 = v49; // 0x415fea\n    int32_t v37 = v53; // 0x415fea\n    int64_t v39 = v77; // 0x415fea\n    if (a1 != 0) {\n        goto lab_0x415fc1;\n    } else {\n        goto lab_0x415fec;\n    }\n  lab_0x415fc1:\n    // 0x415fc1\n    *v35 = (int32_t)v34;\n    // 0x415c26\n    return 0;\n  lab_0x415fec:\n    // 0x415fec\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x415fc1;\n  lab_0x415ef8:\n    // 0x415ef8\n    if (v51 == v47 - 1 + v48) {\n        // 0x416067\n        int64_t v78; // 0x415be0\n        int64_t v79 = v78 - 1; // 0x41606c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x415f22\n    int32_t v81 = v50 - v51; // 0x415f22\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x415f2d\n    if (a2 == 0) {\n        // 0x416050\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x415c26\n    return result2;\n  lab_0x415fb9:\n    // 0x415fb9\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x415fec;\n    } else {\n        goto lab_0x415fc1;\n    }\n  lab_0x415fb1:\n    // 0x415fb1\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x415fb9;\n  lab_0x41601d:\n    // 0x41601d\n    close(fd);\n    v33 = v40;\n    goto lab_0x415fb9;\n}\n"
        },
        {
            "funcName": "function_4160b0",
            "funcStartAddr": "4160b0",
            "funcEndAddr": "41618f",
            "decompiledFuncCode": "int64_t function_4160b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4160bc\n    uint32_t v2 = *v1; // 0x4160bc\n    int64_t v3 = a2 & 0xffffffff; // 0x4160c1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4160c4\n    uint64_t v5 = (int64_t)*v4; // 0x4160c4\n    int64_t v6; // 0x416132\n    if (v3 <= v5) {\n      lab_0x41612c_2:\n        // 0x41612c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4160b2\n    int64_t v8 = v2; // 0x4160b0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x41612c\n        goto lab_0x41612c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4160e8\n    int64_t v17; // 0x4160f6\n    int64_t * v18; // 0x416110\n    int64_t * v19; // 0x416113\n    int64_t v20; // 0x41611e\n    int64_t v21; // 0x4160f6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4160f3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x416110\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x416127\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x41612c\n            goto lab_0x41612c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41612c\n            goto lab_0x41612c_2;\n        }\n        // 0x4160e2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x41616b\n    int64_t * v23 = (int64_t *)v22; // 0x416170\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x416173\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x416170\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x416187\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4160dd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41612c\n            goto lab_0x41612c_2;\n        }\n        // 0x4160e2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4160f3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x416110\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x416127\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x41612c\n                goto lab_0x41612c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x41612c\n                goto lab_0x41612c_2;\n            }\n            // 0x4160e2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x416150\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x416170\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x416187\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x41612c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_416190",
            "funcStartAddr": "416190",
            "funcEndAddr": "4167ac",
            "decompiledFuncCode": "int64_t function_416190(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4161af\n    int64_t v2 = *v1; // 0x4161af\n    char * str2 = (char *)v2; // 0x4161bc\n    char c = *str2; // 0x4161bc\n    int64_t v3 = v2; // 0x4161e8\n    int64_t v4 = 0; // 0x416190\n    int32_t v5; // 0x416190\n    int64_t v6; // 0x416190\n    int64_t v7; // 0x416190\n    int64_t v8; // 0x416190\n    int64_t v9; // 0x416190\n    int64_t v10; // 0x416190\n    int64_t v11; // 0x416190\n    int64_t v12; // 0x416190\n    int64_t v13; // 0x416190\n    int64_t str3; // 0x416190\n    int64_t v14; // 0x416190\n    int64_t v15; // 0x416190\n    int64_t v16; // 0x416190\n    int64_t v17; // 0x416190\n    int32_t v18; // 0x416190\n    int32_t v19; // 0x416190\n    int32_t v20; // 0x416190\n    int32_t v21; // 0x416190\n    int32_t v22; // 0x416190\n    int32_t v23; // 0x416190\n    int32_t v24; // 0x416190\n    int32_t v25; // 0x416190\n    int32_t v26; // 0x416190\n    int32_t v27; // 0x416190\n    int32_t v28; // 0x416190\n    int32_t v29; // 0x416190\n    int64_t nmemb; // 0x416190\n    int64_t v30; // 0x416190\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4161ec\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4161e8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4161f8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4161fe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4161c8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x41622c\n                int64_t v34; // 0x416190\n                int64_t v35; // 0x416190\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x416235\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4163b0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x416246\n                int64_t v37 = *(int64_t *)v36; // 0x41624a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x416220\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x416235\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4163b0;\n                        }\n                    }\n                    // 0x416246\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x416296:\n                    // 0x416296\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4162f0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x416460\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4162f0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x416410\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4162ba;\n                                } else {\n                                    // 0x41641c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4162ba;\n                                    } else {\n                                        // 0x41642a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4162ba;\n                                        } else {\n                                            goto lab_0x4162f0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4162ba;\n                            }\n                        }\n                    }\n                }\n              lab_0x416301:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4164d6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x416682\n                            flockfile(g88);\n                            int64_t v41 = *v1; // 0x4166a2\n                            __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4166ef\n                            int64_t v43 = (int64_t)g88;\n                            int64_t v44 = v43; // 0x416709\n                            int64_t v45; // 0x41670b\n                            if (*(char *)v42 != 0) {\n                                // 0x41670b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g88;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x416703\n                            while (v17 + nmemb != v42) {\n                                // 0x416705\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x41670b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g88;\n                                }\n                                // 0x4166f8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x416730\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g88);\n                            v40 = *v1;\n                        } else {\n                            // 0x4164e4\n                            __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x41663f\n                        free((int64_t *)v17);\n                    }\n                    // 0x416539\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x416550\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4163fe\n                    return 63;\n                }\n                // 0x416320\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4163a4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4163b0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4163c0\n                    uint32_t v50 = *v49; // 0x4163c0\n                    int64_t v51 = v50; // 0x4163c0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4163ca\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4163d3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4165ff\n                                __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4165aa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4163fe\n                            return 63;\n                        }\n                        // 0x416448\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x41675f\n                                    __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x41665d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x416670\n                                // 0x4163fe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x41656e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x416582\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4163eb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4163ee\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4163f2\n                    int64_t result = v59; // 0x4163f8\n                    if (v58 != 0) {\n                        // 0x4163fa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4163fe\n                    return result;\n                }\n            } else {\n                // 0x4161fe\n                v5 = v32;\n            }\n            // break -> 0x416325\n            break;\n        }\n    }\n    // 0x416325\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x41633d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x416347\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4163fe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x416489\n        __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x416376\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x416386\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4162f0:\n    // 0x4162f0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4162f0\n    int64_t v63 = *(int64_t *)v62; // 0x4162f4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x416301\n        goto lab_0x416301;\n    }\n    goto lab_0x416296;\n  lab_0x4162ba:\n    // 0x4162ba\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x416190\n    int32_t v65; // 0x416190\n    int32_t v66; // 0x416190\n    if (v27 != 0) {\n        goto lab_0x4162f0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x416470\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4162f0;\n            } else {\n                goto lab_0x4162e1;\n            }\n        } else {\n            // 0x4162d5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4165cc\n                int64_t v67 = (int64_t)mem; // 0x4165cc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4162f0;\n                } else {\n                    // 0x4165df\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4162e1;\n                }\n            } else {\n                goto lab_0x4162e1;\n            }\n        }\n    }\n  lab_0x4162e1:\n    // 0x4162e1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4162f0;\n}\n"
        },
        {
            "funcName": "function_4167b0",
            "funcStartAddr": "4167b0",
            "funcEndAddr": "416d76",
            "decompiledFuncCode": "int64_t function_4167b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4167d1\n    if (v3 < 1) {\n        // 0x41698e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4167cd\n    int32_t v5 = *(int32_t *)a7; // 0x4167d9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4167db\n    int64_t v7 = v2; // 0x4167e0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4167e3\n    *v8 = 0;\n    int64_t v9; // 0x4167b0\n    int64_t v10; // 0x4167b0\n    int64_t v11; // 0x4167b0\n    int64_t v12; // 0x4167b0\n    int64_t str; // 0x4167b0\n    int64_t v13; // 0x4167b0\n    int64_t v14; // 0x4167b0\n    int64_t v15; // 0x4167b0\n    int64_t v16; // 0x4167b0\n    int64_t v17; // 0x4167b0\n    int32_t v18; // 0x4167b0\n    char v19; // 0x4167b0\n    if (v5 == 0) {\n        // 0x4169c8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4167fa;\n    } else {\n        // 0x4167f3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x416840\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x416843\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x416908;\n            } else {\n                int64_t v22 = v7 + 1; // 0x416856\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x416866\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x41691c;\n                } else {\n                    goto lab_0x416878;\n                }\n            }\n        } else {\n            goto lab_0x4167fa;\n        }\n    }\n  lab_0x4167fa:\n    // 0x4167fa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x416800\n    *v24 = 0;\n    int64_t v25; // 0x4167b0\n    int64_t v26; // 0x4167b0\n    int64_t v27; // 0x4167b0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4168f0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4168fd;\n        }\n        case 43: {\n            // 0x416c00\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4168fd;\n        }\n        default: {\n            // 0x41681c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x416b7f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x416c98\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4168fd;\n                } else {\n                    // 0x416b8d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x41682a;\n                }\n            } else {\n                goto lab_0x41682a;\n            }\n        }\n    }\n  lab_0x416908:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x41690f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x416878;\n    } else {\n        goto lab_0x41691c;\n    }\n  lab_0x41682a:\n    // 0x41682a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4168fd;\n  lab_0x4168fd:\n    // 0x4168fd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x416908;\n  lab_0x416878:;\n    uint32_t v30 = *(int32_t *)a7; // 0x416878\n    int64_t v31 = v30; // 0x416878\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x41687a\n    if ((int64_t)*v32 > v31) {\n        // 0x41687f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x416882\n    if (*v33 > v30) {\n        // 0x416887\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x41688a\n    int64_t v35 = v31; // 0x41688e\n    int64_t v36 = v15; // 0x41688e\n    int64_t v37; // 0x4167b0\n    int64_t v38; // 0x4167b0\n    int64_t v39; // 0x4167b0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4169f8\n        int64_t v41 = v40; // 0x4169f8\n        v2 = v41;\n        int64_t v42; // 0x4167b0\n        if (*v33 == v40) {\n            // 0x416be0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x416be8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x416a04\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x416a08\n                function_4160b0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x416a18\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x416a21\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x416a2a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x416a41\n            int64_t v47 = v45 & 0xffffffff; // 0x416a45\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x416a4e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x416a54\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x416a56;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x416a30\n            int64_t v49 = v48 & 0xffffffff; // 0x416a30\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x416a41\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x416a4e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x416a54\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x416a56;\n                    }\n                }\n                // 0x416a30\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x416bf8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x416a56;\n    } else {\n        goto lab_0x416894;\n    }\n  lab_0x41691c:\n    // 0x41691c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x41691f\n    int64_t v51 = v12; // 0x41691f\n    int64_t v52 = v14; // 0x41691f\n    if (*(char *)v10 == 0) {\n        goto lab_0x416878;\n    } else {\n        goto lab_0x416925;\n    }\n  lab_0x416894:;\n    int32_t v53 = v35; // 0x416894\n    int64_t v54; // 0x4167b0\n    int64_t v55; // 0x4167b0\n    int64_t v56; // 0x4167b0\n    int64_t v57; // 0x4167b0\n    int64_t v58; // 0x4167b0\n    int64_t v59; // 0x4167b0\n    char * v60; // 0x4167b0\n    int64_t v61; // 0x4167b0\n    int64_t v62; // 0x4168a9\n    int64_t v63; // 0x4167b0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4169e3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4169e6;\n    } else {\n        // 0x41689c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4167b0\n        int64_t v66 = v65 ? -1 : 1; // 0x4168b0\n        int64_t v67 = (int64_t)\"--\"; // 0x4167b0\n        int64_t v68 = v62; // 0x4167b0\n        int64_t v69 = 3; // 0x4168b0\n        unsigned char v70 = *(char *)v68; // 0x4168b0\n        char v71 = *(char *)v67; // 0x4168b0\n        char v72 = v71; // 0x4168b0\n        bool v73 = false; // 0x4168b0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4169a0\n            if (*(char *)v62 == 45) {\n                // 0x416a60\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x416a60\n                if (c == 0) {\n                    goto lab_0x4169aa;\n                } else {\n                    // 0x416a6d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x416af0;\n                    } else {\n                        if (c == 45) {\n                            // 0x416cd3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x416b45;\n                        } else {\n                            // 0x416a7e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x416af0;\n                            } else {\n                                // 0x416a83\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x416aa4;\n                                } else {\n                                    // 0x416a8a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x416af0;\n                                    } else {\n                                        goto lab_0x416aa4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4169aa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4168c0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4168c3\n            int64_t v77 = v35 + 1; // 0x4168c6\n            int32_t v78 = v77; // 0x4168c9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x416c30\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4168d7\n                    function_4160b0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4168e5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4169e6;\n        }\n    }\n  lab_0x416925:;\n    // 0x416925\n    int64_t v79; // bp-104, 0x4167b0\n    int64_t v80 = &v79; // 0x4167ba\n    int64_t v81 = v50 + 1; // 0x416925\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x41692c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x416931\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x416935\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x416939\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x416941\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x416946\n    int32_t c2 = v84; // 0x416946\n    char * found_char_pos = strchr(str2, c2); // 0x416946\n    int64_t v87 = *v82; // 0x41694b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x416955\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x416960\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x416c50\n            __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x416c1d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x41698e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x416946\n    char v91 = *(char *)(v90 + 1); // 0x41697b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x416935\n        if (v91 != 58) {\n            // 0x41698e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x416ba4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x416ca8\n                *v8 = 0;\n            } else {\n                // 0x416c8c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x416bce\n            *v83 = 0;\n            // 0x41698e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x416bae\n        if (v93 != 0) {\n            // 0x416c40\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x416bce\n            *v83 = 0;\n            // 0x41698e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x416bc1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x416bce\n            *v83 = 0;\n            // 0x41698e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x416d0a\n            __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x416cba\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x416cc1\n        // 0x416bce\n        *v83 = 0;\n        // 0x41698e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x416b19\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x416b1b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x416d40\n                __fprintf_chk(g88, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x416cf1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x416cf8\n            // 0x41698e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x416b26\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x416b2a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x416b45;\n  lab_0x416a56:\n    // 0x416a56\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x416894;\n  lab_0x416b45:;\n    int64_t v99 = function_416190(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x416b63\n    // 0x41698e\n    return v99 & 0xffffffff;\n  lab_0x4169e6:;\n    int32_t v100 = v55; // 0x4169e6\n    if (v100 != (int32_t)v59) {\n        // 0x4169ea\n        *(int32_t *)a7 = v100;\n    }\n    // 0x41698e\n    return 0xffffffff;\n  lab_0x4169aa:\n    // 0x4169aa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4169b1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x41698e\n    return v99 & 0xffffffff;\n  lab_0x416af0:\n    // 0x416af0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x416925;\n  lab_0x416aa4:\n    // 0x416aa4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_416190(v6, a2, str, a4, a5, v57, v1, v11, &g41); // 0x416aca\n    if ((int32_t)v101 != -1) {\n        // 0x41698e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x416adf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x416af0;\n}\n"
        },
        {
            "funcName": "function_416d80",
            "funcStartAddr": "416d80",
            "funcEndAddr": "416dd6",
            "decompiledFuncCode": "int64_t function_416d80(int64_t a1) {\n    // 0x416d80\n    *(int32_t *)&g195 = g84;\n    *(int32_t *)&g196 = g83;\n    int64_t v1; // 0x416d80\n    int64_t result = function_4167b0(v1, v1, v1, v1, v1, v1, &g195, a1 & 0xffffffff); // 0x416da6\n    g84 = *(int32_t *)&g195;\n    g202 = (char *)g198;\n    *(int32_t *)&g82 = g197;\n    return result;\n}\n"
        },
        {
            "funcName": "function_416de0",
            "funcStartAddr": "416de0",
            "funcEndAddr": "416df8",
            "decompiledFuncCode": "int64_t function_416de0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x416de0\n    return function_416d80(1);\n}\n"
        },
        {
            "funcName": "function_416e00",
            "funcStartAddr": "416e00",
            "funcEndAddr": "416e13",
            "decompiledFuncCode": "int64_t function_416e00(int64_t a1, int64_t a2, char * a3, char (**a4)[4], int64_t a5, int64_t a6) {\n    // 0x416e00\n    return function_416d80(0);\n}\n"
        },
        {
            "funcName": "function_416e20",
            "funcStartAddr": "416e20",
            "funcEndAddr": "416e35",
            "decompiledFuncCode": "int64_t function_416e20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x416e20\n    return function_4167b0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_416e40",
            "funcStartAddr": "416e40",
            "funcEndAddr": "416e56",
            "decompiledFuncCode": "int64_t function_416e40(void) {\n    // 0x416e40\n    return function_416d80(0);\n}\n"
        },
        {
            "funcName": "function_416e60",
            "funcStartAddr": "416e60",
            "funcEndAddr": "416e78",
            "decompiledFuncCode": "int64_t function_416e60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x416e60\n    return function_4167b0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_416e80",
            "funcStartAddr": "416e80",
            "funcEndAddr": "416efa",
            "decompiledFuncCode": "int64_t function_416e80(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x416e8b\n    int64_t v2 = (int64_t)&g24; // 0x416e8b\n    int64_t * pwc; // 0x416e80\n    int64_t v3; // 0x416e80\n    int64_t n; // 0x416e80\n    if (a2 == 0) {\n        goto lab_0x416ed2;\n    } else {\n        // 0x416e8d\n        if (a3 == 0) {\n            // 0x416eb8\n            return -2;\n        }\n        // 0x416e99\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x416ed2;\n        } else {\n            goto lab_0x416ea4;\n        }\n    }\n  lab_0x416ed2:\n    // 0x416ed2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x416e80\n    pwc = &v4;\n    goto lab_0x416ea4;\n  lab_0x416ea4:;\n    char * wstr = (char *)v3; // 0x416eaa\n    int64_t ps; // 0x416e80\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x416eaa\n    int64_t result = v5; // 0x416eaa\n    if (v5 < 0xfffffffe) {\n        // 0x416eb8\n        return result;\n    }\n    int64_t result2 = result; // 0x416ee9\n    if ((char)function_40c190(0, v3) == 0) {\n        // 0x416eeb\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x416eb8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_416f00",
            "funcStartAddr": "416f00",
            "funcEndAddr": "417004",
            "decompiledFuncCode": "int64_t function_416f00(int64_t result, int32_t a2, int64_t a3) {\n    // 0x416f00\n    if (a3 == 0) {\n        // 0x416f39\n        return 0;\n    }\n    int64_t v1 = result; // 0x416f0c\n    int64_t v2 = a3; // 0x416f0c\n    int64_t result2; // 0x416f00\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x416f0e\n        int64_t v4 = result; // 0x416f11\n        if ((char)result == v3) {\n            // 0x416f39\n            return result;\n        }\n        int64_t v5 = a3; // 0x416f11\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x416f20\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x416f40;\n            }\n            // 0x416f26\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x416f39\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x416f39\n        return result2;\n    }\n  lab_0x416f40:;\n    int64_t result3 = v1; // 0x416f6d\n    int64_t v6 = v2; // 0x416f6d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x416f4f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x416f5c\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x416f66\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x416f86\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x416fb5\n            int64_t v13 = v1 + 8; // 0x416fb9\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x416fa3\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x416fcc;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x416fc3\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x416f39\n                return 0;\n            }\n        }\n    }\n  lab_0x416fcc:;\n    char v15 = a2; // 0x416fcc\n    if (*(char *)result3 == v15) {\n        // 0x416f39\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x416fe0\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x416f39\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x416f39\n    return result2;\n}\n"
        },
        {
            "funcName": "function_417010",
            "funcStartAddr": "417010",
            "funcEndAddr": "41704b",
            "decompiledFuncCode": "int64_t function_417010(int64_t a1) {\n    // 0x417010\n    __fprintf_chk(g88, 1, \"%s\\n\", dcgettext(NULL, \"memory exhausted\", 5));\n    exit(g76);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_417050",
            "funcStartAddr": "417050",
            "funcEndAddr": "417065",
            "decompiledFuncCode": "int64_t function_417050(int64_t a1, int64_t a2) {\n    // 0x417050\n    return *(int64_t *)(a1 + 56);\n}\n"
        },
        {
            "funcName": "function_417070",
            "funcStartAddr": "417070",
            "funcEndAddr": "417085",
            "decompiledFuncCode": "int64_t function_417070(int64_t a1, int64_t a2) {\n    // 0x417070\n    return *(int64_t *)(a1 + 64);\n}\n"
        },
        {
            "funcName": "function_417090",
            "funcStartAddr": "417090",
            "funcEndAddr": "417113",
            "decompiledFuncCode": "int64_t function_417090(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3 == 0 ? 15 : a3 - 1;\n    *(int64_t *)(a1 + 48) = v1;\n    int64_t v2 = a2 == 0 ? 4064 : a2; // 0x4170b2\n    *(int64_t *)a1 = v2;\n    int64_t v3 = function_417050(a1, v2); // 0x4170b9\n    *(int64_t *)(a1 + 8) = v3;\n    if (v3 == 0) {\n        // 0x41710d\n        function_417010(a1);\n        // UNREACHABLE\n    }\n    int64_t v4 = v1 + 16 + v3 & (a3 == 0 ? -16 : -a3); // 0x4170cf\n    *(int64_t *)(a1 + 16) = v4;\n    int64_t v5 = v3 + a1; // 0x4170d9\n    *(int64_t *)(a1 + 24) = v4;\n    *(int64_t *)v3 = v5;\n    *(int64_t *)(a1 + 32) = v5;\n    *(int64_t *)(v3 + 8) = 0;\n    char * v6 = (char *)(a1 + 80); // 0x4170f4\n    *v6 = *v6 & -7;\n    return 1;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "417120",
            "funcEndAddr": "417131",
            "decompiledFuncCode": "int64_t _obstack_begin(int64_t * a1, int32_t a2, int32_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = (int64_t)a1;\n    char * v2 = (char *)(v1 + 80); // 0x417120\n    *v2 = *v2 & -2;\n    *(int64_t *)(v1 + 56) = a4;\n    *(int64_t *)(v1 + 64) = a5;\n    return function_417090(v1, (int64_t)a2, (int64_t)a3);\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "417140",
            "funcEndAddr": "417155",
            "decompiledFuncCode": "int64_t _obstack_begin_1(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1 = (char *)(a1 + 80); // 0x417140\n    *v1 = *v1 | 1;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    *(int64_t *)(a1 + 72) = a6;\n    return function_417090(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "417160",
            "funcEndAddr": "41725b",
            "decompiledFuncCode": "int64_t _obstack_newchunk(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    int64_t * v1 = (int64_t *)(a1 + 24); // 0x41716a\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x41716e\n    uint64_t v3 = *v1 - *v2; // 0x41716e\n    uint64_t v4 = v3 + a2; // 0x417176\n    if (v4 < a2) {\n        // 0x417255\n        function_417010(a1);\n        // UNREACHABLE\n    }\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x41717f\n    uint64_t v6 = v4 + *v5; // 0x41717f\n    if (v6 < v4) {\n        // 0x417255\n        function_417010(a1);\n        // UNREACHABLE\n    }\n    int64_t * v7 = (int64_t *)(a1 + 8); // 0x417172\n    int64_t v8 = *v7; // 0x417172\n    uint64_t v9 = v3 / 8 + 100 + v6; // 0x41718d\n    uint64_t v10 = v6 <= a1 ? a1 : v6; // 0x417192\n    int64_t v11 = v10 >= v9 ? v10 : v9; // 0x417199\n    int64_t v12 = function_417050(a1, v11); // 0x4171b8\n    if (v12 == 0) {\n        // 0x417255\n        function_417010(a1);\n        // UNREACHABLE\n    }\n    int64_t v13 = v12 + v11; // 0x4171c9\n    *v7 = v12;\n    int64_t * v14 = (int64_t *)(v12 + 8); // 0x4171d5\n    *v14 = v8;\n    *(int64_t *)(a1 + 32) = v13;\n    *(int64_t *)v12 = v13;\n    int64_t v15 = *v5; // 0x4171e1\n    int64_t v16 = v12 + 16 + v15 & -1 - v15; // 0x4171f3\n    int64_t * dest_mem = memcpy((int64_t *)v16, (int64_t *)*v2, (int32_t)v3); // 0x4171f9\n    char * v17 = (char *)(a1 + 80); // 0x4171fe\n    int64_t result = (int64_t)dest_mem; // 0x417204\n    if ((*v17 & 2) == 0) {\n        int64_t v18 = *v5; // 0x417206\n        int64_t v19 = v8 + 16 + v18 & -1 - v18; // 0x417213\n        result = v19;\n        if (*v2 == v19) {\n            // 0x417240\n            *v14 = *(int64_t *)(v8 + 8);\n            result = function_417070(a1, v8);\n        }\n    }\n    // 0x41721d\n    *v2 = v16;\n    *v1 = v16 + v3;\n    *v17 = *v17 & -3;\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "417260",
            "funcEndAddr": "417297",
            "decompiledFuncCode": "int64_t _obstack_allocated_p(int64_t a1, uint64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x417260\n    if (v1 == 0) {\n        // 0x417283\n        return 0;\n    }\n    if (v1 < a2) {\n        // 0x417275\n        if (*(int64_t *)v1 >= a2) {\n            // break -> 0x417283\n            break;\n        }\n    }\n    int64_t v2 = *(int64_t *)(v1 + 8); // 0x41727a\n    int64_t result = 0; // 0x417281\n    while (v2 != 0) {\n        uint64_t v3 = v2;\n        if (v3 < a2) {\n            // 0x417275\n            result = 1;\n            if (*(int64_t *)v3 >= a2) {\n                // break -> 0x417283\n                break;\n            }\n        }\n        // 0x41727a\n        v2 = *(int64_t *)(v3 + 8);\n        result = 0;\n    }\n    // 0x417283\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "4172a0",
            "funcEndAddr": "417305",
            "decompiledFuncCode": "int64_t _obstack_free(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4172a7\n    int64_t v2 = *v1; // 0x4172a7\n    int64_t result2; // 0x4172a0\n    if (v2 != 0) {\n        char * v3 = (char *)(a1 + 80);\n        uint64_t result; // 0x4172bd\n        if (v2 < a2) {\n            // 0x4172bd\n            result = *(int64_t *)v2;\n            if (result >= a2) {\n                // 0x4172f0\n                *(int64_t *)(a1 + 24) = a2;\n                *(int64_t *)(a1 + 16) = a2;\n                *(int64_t *)(a1 + 32) = result;\n                *v1 = v2;\n                return result;\n            }\n        }\n        int64_t v4 = *(int64_t *)(v2 + 8); // 0x4172c5\n        int64_t v5 = function_417070(a1, v2); // 0x4172cc\n        *v3 = *v3 | 2;\n        result2 = v5;\n        while (v4 != 0) {\n            uint64_t v6 = v4;\n            if (v6 < a2) {\n                // 0x4172bd\n                result = *(int64_t *)v6;\n                if (result >= a2) {\n                    // 0x4172f0\n                    *(int64_t *)(a1 + 24) = a2;\n                    *(int64_t *)(a1 + 16) = a2;\n                    *(int64_t *)(a1 + 32) = result;\n                    *v1 = v6;\n                    return result;\n                }\n            }\n            // 0x4172c5\n            v4 = *(int64_t *)(v6 + 8);\n            v5 = function_417070(a1, v6);\n            *v3 = *v3 | 2;\n            result2 = v5;\n        }\n    }\n    if (a2 == 0) {\n        // 0x4172e6\n        return result2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "417310",
            "funcEndAddr": "417339",
            "decompiledFuncCode": "int64_t _obstack_memory_used(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x417310\n    int64_t result = 0; // 0x417319\n    if (v1 == 0) {\n        // 0x417332\n        return 0;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x417326\n    result += *(int64_t *)v2 - v2;\n    while (v3 != 0) {\n        // 0x417320\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n        result += *(int64_t *)v2 - v2;\n    }\n    // 0x417332\n    return result;\n}\n"
        },
        {
            "funcName": "function_417340",
            "funcStartAddr": "417340",
            "funcEndAddr": "417385",
            "decompiledFuncCode": "int64_t function_417340(int64_t a1) {\n    // 0x417340\n    int32_t v1; // 0x417340\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x417370\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x41734a\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x417358\n    if (v1 == 0) {\n        // 0x41735a\n        tzset();\n        result = 1;\n    }\n    // 0x417364\n    return result;\n}\n"
        },
        {
            "funcName": "function_417390",
            "funcStartAddr": "417390",
            "funcEndAddr": "4173b9",
            "decompiledFuncCode": "int64_t function_417390(int64_t a1) {\n    // 0x417390\n    if (a1 == 0) {\n        // 0x4173b0\n        int64_t result; // 0x417390\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x4173a0\n    int64_t v2 = *v1; // 0x4173a0\n    free(v1);\n    while (v2 != 0) {\n        // 0x4173a0\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x4173b0\n    return &g209;\n}\n"
        },
        {
            "funcName": "function_4173c0",
            "funcStartAddr": "4173c0",
            "funcEndAddr": "417401",
            "decompiledFuncCode": "int64_t function_4173c0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4173cd\n    int64_t v2 = function_417340(a1); // 0x4173db\n    int32_t v3 = *v1; // 0x4173e4\n    if ((char)v2 == 0) {\n        // 0x4173e6\n        v3 = *v1;\n    }\n    // 0x4173e9\n    function_417390(a1);\n    *v1 = v3;\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_417410",
            "funcStartAddr": "417410",
            "funcEndAddr": "41749f",
            "decompiledFuncCode": "int64_t function_417410(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x417410\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x41747d\n        int64_t result = (int64_t)mem; // 0x41747d\n        result2 = result;\n        if (mem != NULL) {\n            // 0x41748a\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x41741c\n        uint64_t v1 = (int64_t)len + 1; // 0x417426\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x41743a\n        int64_t v2 = (int64_t)mem2; // 0x41743a\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x417447\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x417453\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x41746b\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4174a0",
            "funcStartAddr": "4174a0",
            "funcEndAddr": "417615",
            "decompiledFuncCode": "int64_t function_4174a0(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x4174ae\n    uint64_t v2 = *v1; // 0x4174ae\n    if (v2 == 0) {\n        // 0x417551\n        return 1;\n    }\n    int64_t v3; // 0x4174a0\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x4174c6\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x417551\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x4174d4\n    if (*str2 == 0) {\n        // 0x417548\n        *v1 = (int64_t)&g24;\n        // 0x417551\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x4174d9\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x417548\n        *v1 = str;\n        // 0x417551\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x4174f7\n    int64_t v7; // 0x4174a0\n    int64_t v8; // 0x4174a0\n    int64_t v9; // 0x4174a0\n    int64_t v10; // 0x4174fc\n    if (*str3 == 0) {\n        // 0x4174fc\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x417588\n            goto lab_0x417588;\n        }\n        // 0x417509\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x4175b8\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x4175c6;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x41751b\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x4174a0\n    int64_t v13; // 0x417525\n    int64_t str4; // 0x41752e\n    int32_t strcmp_rc; // 0x41753b\n    while (*str5 == 0) {\n        // 0x417525\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x4174e8\n            break;\n        }\n        // 0x41752e\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x417548\n            *v1 = v12;\n            // 0x417551\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x4174fc\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x417588\n                goto lab_0x417588;\n            }\n            // 0x417509\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x4175b8\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x4175c6;\n            }\n        }\n        // 0x417513\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x417548\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x4174f7\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x4174fc\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x417588\n                goto lab_0x417588;\n            }\n            // 0x417509\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x4175b8\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x4175c6;\n            }\n        }\n        // 0x417513\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x417525\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x4174e8\n                break;\n            }\n            // 0x41752e\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x417548\n                *v1 = v12;\n                // 0x417551\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x4174fc\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x417588\n                    goto lab_0x417588;\n                }\n                // 0x417509\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x4175b8\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x4175c6;\n                }\n            }\n            // 0x417513\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x417548\n        *v1 = v11;\n    }\n    // 0x417551\n    return 1;\n  lab_0x417588:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x417590\n    int64_t v15 = v6 - v10; // 0x417597\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x4175a5\n        *__errno_location() = 12;\n        // 0x417551\n        return 0;\n    }\n    goto lab_0x4175c6;\n  lab_0x4175c6:\n    // 0x4175c6\n    if (v7 + v8 < 119) {\n        // 0x4175cf\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x417548\n        *v1 = v6;\n        // 0x417551\n        return 1;\n    }\n    int64_t v17 = function_417410(v2, v2, v9); // 0x4175f3\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x417551\n        return 0;\n    }\n    // 0x417601\n    *(char *)(v17 + 8) = 0;\n    // 0x417548\n    *v1 = v17 + 9;\n    // 0x417551\n    return 1;\n}\n"
        },
        {
            "funcName": "function_417620",
            "funcStartAddr": "417620",
            "funcEndAddr": "4176cf",
            "decompiledFuncCode": "int64_t function_417620(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x41762c\n    int64_t v1 = (int64_t)env_val; // 0x41762c\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x417620\n    if (env_val == NULL) {\n        // 0x417690\n        if (v2 == 0) {\n            // 0x41765d\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x417668\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x41765d\n                return 1;\n            }\n        }\n    }\n    // 0x417641\n    int64_t v4; // 0x417620\n    int64_t result = function_417410(v1, v3, v4); // 0x417644\n    if (result == 0) {\n        // 0x41765d\n        return 0;\n    }\n    // 0x417651\n    if ((char)function_417340(a1) != 0) {\n        // 0x41765d\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x4176a8\n    if (result != 1) {\n        // 0x4176b9\n        function_417390(result);\n    }\n    // 0x4176c1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4176d0",
            "funcStartAddr": "4176d0",
            "funcEndAddr": "4176e1",
            "decompiledFuncCode": "int64_t function_4176d0(int64_t a1) {\n    // 0x4176d0\n    if (a1 == 1) {\n        // 0x4176e0\n        int64_t result; // 0x4176d0\n        return result;\n    }\n    // 0x4176d6\n    return function_417390(a1);\n}\n"
        },
        {
            "funcName": "function_4176f0",
            "funcStartAddr": "4176f0",
            "funcEndAddr": "417795",
            "decompiledFuncCode": "int64_t function_4176f0(int64_t a1, int64_t * timep, int64_t * time) {\n    if (a1 == 0) {\n        // 0x417780\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time);\n    }\n    int64_t v1 = function_417620(a1); // 0x417708\n    if (v1 == 0) {\n        // 0x41773a\n        return 0;\n    }\n    // 0x417715\n    if (localtime_r((int32_t *)timep, (struct tm *)time) != NULL) {\n        int64_t result = (int64_t)time;\n        if ((char)function_4174a0(a1, result) != 0) {\n            // 0x417734\n            if (v1 == 1 || (char)function_4173c0(v1) != 0) {\n                // 0x41773a\n                return result;\n            }\n            // 0x41773a\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x417756\n        function_4173c0(v1);\n    }\n    // 0x41773a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4177a0",
            "funcStartAddr": "4177a0",
            "funcEndAddr": "4178bc",
            "decompiledFuncCode": "int64_t function_4177a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4177a0\n    int32_t v1; // 0x4177a0\n    int32_t v2 = v1;\n    if (a1 == 0) {\n        // 0x417898\n        return function_4178c0(a2);\n    }\n    int64_t v3 = function_417620(a1); // 0x4177b7\n    if (v3 == 0) {\n        // 0x41780e\n        return -1;\n    }\n    int64_t v4 = function_4186f0(a2); // 0x4177cb\n    int64_t timep = v4; // bp-96, 0x4177d0\n    if (v4 == -1) {\n        // 0x417820\n        int32_t time; // bp-88, 0x4177a0\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time) == NULL) {\n            goto lab_0x4177f3;\n        } else {\n            int32_t v5 = *(int32_t *)(a2 + 32); // 0x417834\n            if (v2 >= 0 == v5 > -1 == (v5 == 0 != (v2 == 0))) {\n                goto lab_0x4177f3;\n            } else {\n                int32_t v6 = *(int32_t *)(a2 + 16); // 0x417853\n                int32_t v7 = *(int32_t *)(a2 + 20); // 0x417856\n                int32_t v8 = *(int32_t *)(a2 + 12); // 0x417863\n                int32_t v9 = *(int32_t *)(a2 + 8); // 0x41786c\n                int32_t v10 = *(int32_t *)(a2 + 4); // 0x417875\n                if ((v7 ^ v1 | v6 ^ v1 | v8 ^ v1 | v9 ^ v1 || v10 ^ v1 || time ^ (int32_t)(int64_t)&time) == 0) {\n                    goto lab_0x4177db;\n                } else {\n                    goto lab_0x4177f3;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4177db;\n    }\n  lab_0x4177db:\n    // 0x4177db\n    if ((char)function_4174a0(a1, a2) == 0) {\n        // 0x4177ea\n        timep = -1;\n    }\n    goto lab_0x4177f3;\n  lab_0x4177f3:\n    if (v3 != 1) {\n        // 0x4177f9\n        if ((char)function_4173c0(v3) == 0) {\n            // 0x41780e\n            return -1;\n        }\n    }\n    // 0x41780e\n    return timep;\n}\n"
        },
        {
            "funcName": "function_4178c0",
            "funcStartAddr": "4178c0",
            "funcEndAddr": "4178d6",
            "decompiledFuncCode": "int64_t function_4178c0(int64_t a1) {\n    // 0x4178c0\n    *(int32_t *)(a1 + 32) = 0;\n    return function_4182b0(a1, 0x4029a0, &g199);\n}\n"
        },
        {
            "funcName": "function_4178e0",
            "funcStartAddr": "4178e0",
            "funcEndAddr": "41793d",
            "decompiledFuncCode": "int64_t function_4178e0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4178e7\n    int64_t v2; // 0x4178e0\n    int64_t result = function_417f10(a1, v2); // 0x4178f8\n    if ((v2 & 32) != 0) {\n        // 0x417920\n        if ((int32_t)result == 0) {\n            // 0x417924\n            *__errno_location() = 0;\n        }\n        // 0x41791a\n        return 0xffffffff;\n    }\n    // 0x417901\n    if ((int32_t)result == 0) {\n        // 0x41791a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x417908\n    if (v1 == 0) {\n        // 0x41790a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x41791a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_417940",
            "funcStartAddr": "417940",
            "funcEndAddr": "417958",
            "decompiledFuncCode": "int64_t function_417940(void) {\n    // 0x417940\n    int64_t v1; // 0x417940\n    int64_t result = function_40b810(v1); // 0x417944\n    if (result != 0) {\n        // 0x41794e\n        return result;\n    }\n    // 0x417953\n    function_412bd0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_417960",
            "funcStartAddr": "417960",
            "funcEndAddr": "417996",
            "decompiledFuncCode": "int64_t function_417960(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x417966\n    if (v1 == 0) {\n        // 0x417990\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x417978\n    char v5 = *(char *)v2; // 0x41797b\n    while (v5 != 0) {\n        // 0x417970\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x417983\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_4179a0",
            "funcStartAddr": "4179a0",
            "funcEndAddr": "417f02",
            "decompiledFuncCode": "int64_t function_4179a0(void) {\n    char * v1 = nl_langinfo(14); // 0x4179b6\n    char * v2 = g200; // 0x4179bb\n    char * v3; // 0x4179a0\n    int64_t v4; // 0x4179a0\n    int64_t v5; // 0x4179a0\n    int64_t v6; // 0x4179a0\n    int64_t v7; // 0x4179a0\n    int32_t size; // 0x4179a0\n    int32_t size2; // 0x4179a0\n    int32_t len; // 0x417a72\n    int64_t v8; // 0x417a72\n    char * env_val; // 0x417a5d\n    if (v2 == NULL) {\n        // 0x417a58\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x417ac5;\n        } else {\n            // 0x417a6a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x417ac5;\n            } else {\n                // 0x417a6f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x417a5d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x417ef5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x417ac5;\n                    } else {\n                        // 0x417e69\n                        size2 = len + 14;\n                        goto lab_0x417a8b;\n                    }\n                } else {\n                    goto lab_0x417a8b;\n                }\n            }\n        }\n    } else {\n        // 0x4179a0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4179da;\n    }\n  lab_0x417d0c:;\n    // 0x417d0c\n    struct _IO_FILE * stream; // 0x417b4b\n    int32_t v10 = __uflow(stream); // 0x417d0f\n    int64_t v11; // 0x4179a0\n    int64_t v12 = v11; // 0x417d19\n    int64_t v13; // 0x4179a0\n    int64_t v14 = v13; // 0x417d19\n    int32_t v15 = v10; // 0x417d19\n    int64_t v16; // 0x4179a0\n    int64_t v17 = v16; // 0x417d19\n    int64_t v18 = v11; // 0x417d19\n    int64_t v19 = v13; // 0x417d19\n    int64_t v20 = v16; // 0x417d19\n    if (v10 == -1) {\n        // break -> 0x417d1f\n        goto lab_0x417d1f;\n    }\n    goto lab_0x417b99;\n  lab_0x417b8e:;\n    // 0x417b8e\n    int64_t v90; // 0x4179a0\n    int64_t * v32; // 0x417b80\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4179a0\n    v12 = v89;\n    int64_t v91; // 0x4179a0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4179a0\n    v17 = v92;\n    goto lab_0x417b99;\n  lab_0x417b99:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4179a0\n    int32_t v25; // bp-120, 0x4179a0\n    int32_t v26; // bp-184, 0x4179a0\n    int64_t v27; // 0x417b4b\n    int64_t v28; // 0x417b68\n    int64_t v29; // 0x417b6d\n    int64_t * v30; // 0x417b84\n    switch (c) {\n        case 32: {\n            goto lab_0x417b80;\n        }\n        case 10: {\n            goto lab_0x417b80;\n        }\n        case 9: {\n            goto lab_0x417b80;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x417d71\n            int32_t v33; // 0x4179a0\n            char v34; // 0x4179a0\n            int32_t v35; // 0x417d7e\n            if (v31 < *v30) {\n                // 0x417d50\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x417d7b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x417d71\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x417d50\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x417d7b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x417d60\n                v36 = v33;\n            }\n            // 0x417e4f\n            if (v36 == -1) {\n                // break -> 0x417d1f\n                break;\n            }\n            goto lab_0x417b80;\n        }\n        default: {\n            // 0x417baf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x417d1f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x417bd8\n            int64_t v39 = v37 + 4; // 0x417bda\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x417be6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x417be8\n            while (v41 == 0) {\n                // 0x417bd8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x417c06\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x417c12\n            int64_t v45 = v43 + 4; // 0x417c14\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x417c20\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x417c22\n            while (v47 == 0) {\n                // 0x417c12\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x417c0f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x417c38\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x417c48\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x417c4c\n            int64_t v52 = v51 + v48; // 0x417c55\n            int64_t * mem; // 0x4179a0\n            int64_t v53; // 0x4179a0\n            int64_t v54; // 0x4179a0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x417d8b\n                int64_t v56 = v55 + 3; // 0x417d97\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x417c71\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x417c80\n            if (mem == NULL) {\n                // 0x417eac\n                free((int64_t *)v21);\n                function_417f10(v27, v53);\n                v24 = (int64_t)&g24;\n                goto lab_0x417b24;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x417c98\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x417ca2\n            uint32_t v62 = (int32_t)v59; // 0x417ca5\n            int64_t v63; // 0x4179a0\n            if (v62 >= 8) {\n                // 0x417db4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x417dce\n                int64_t v66 = v61 - v65; // 0x417dd2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x417ddd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x417dee\n                    int64_t v70 = v69 & 0xffffffff; // 0x417dee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x417deb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x417e7f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x417cb7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x417cbb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x417ccb\n            int64_t v74 = v60 - 1; // 0x417ccf\n            uint32_t v75 = (int32_t)v73; // 0x417cd4\n            int64_t v76; // 0x4179a0\n            if (v75 >= 8) {\n                // 0x417e02\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x417e0c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x417e1c\n                int64_t v80 = v74 - v79; // 0x417e20\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x417e2b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x417e3b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x417e39\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x417e96\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x417e9e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x417ce6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x417cea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x417ee3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x417cfe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x417b8e;\n            } else {\n                goto lab_0x417d0c;\n            }\n        }\n    }\n  lab_0x417b80:;\n    int64_t v93 = v23; // 0x4179a0\n    int64_t v94 = v22; // 0x4179a0\n    int64_t v95 = v21; // 0x4179a0\n    goto lab_0x417b80_2;\n  lab_0x417ac5:;\n    int64_t * mem3 = malloc(size); // 0x417ac5\n    int64_t v97 = (int64_t)&g24; // 0x417ad0\n    int64_t v98; // 0x4179a0\n    int64_t path; // 0x4179a0\n    if (mem3 == NULL) {\n        goto lab_0x417aa2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x417ac5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x417ae6;\n    }\n  lab_0x4179da:;\n    int64_t str = v1 == NULL ? (int64_t)&g24 : (int64_t)v1; // 0x4179cd\n    char v100 = *v3; // 0x4179da\n    int64_t v101; // 0x4179a0\n    if (v100 == 0) {\n        // 0x417a34\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4179a0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4179a0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x417a20\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x417a27;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4179f0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4179fd\n        char v107 = *(char *)v106; // 0x417a02\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x417a34\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x417a0b\n    v104 = v103 + 1;\n  lab_0x417a27:\n    // 0x417a34\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x417aa2:;\n    char * v108 = (char *)v97;\n    g200 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4179da;\n  lab_0x417ae6:;\n    int64_t v109 = v98 + path; // 0x417ae6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x417b12\n    v24 = (int64_t)&g24;\n    if (fd >= 0) {\n        // 0x417b41\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x417e72\n            close(fd);\n            v24 = (int64_t)&g24;\n        } else {\n            // 0x417b65\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x417b80_2:;\n                uint64_t v96 = *v32; // 0x417b80\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x417d0c;\n                } else {\n                    goto lab_0x417b8e;\n                }\n            }\n          lab_0x417d1f:\n            // 0x417d1f\n            function_417f10(v27, v19);\n            v24 = (int64_t)&g24;\n            if (v18 != 0) {\n                // 0x417d3e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x417b24;\n  lab_0x417a8b:;\n    int64_t * mem4 = malloc(size2); // 0x417a8b\n    v97 = (int64_t)&g24;\n    if (mem4 != NULL) {\n        // 0x417b31\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x417ae6;\n    } else {\n        goto lab_0x417aa2;\n    }\n  lab_0x417b24:\n    // 0x417b24\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x417aa2;\n}\n"
        },
        {
            "funcName": "function_417f10",
            "funcStartAddr": "417f10",
            "funcEndAddr": "417f8b",
            "decompiledFuncCode": "int64_t function_417f10(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x417f17\n    if (fileno(stream) < 0) {\n        // 0x417f77\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x417f2a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x417f5b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x417f77\n            return fclose(stream);\n        }\n    }\n    // 0x417f2c\n    if ((int32_t)function_417f90(a1, v1) == 0) {\n        // 0x417f77\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x417f38\n    int32_t v3 = *v2; // 0x417f40\n    int64_t result = fclose(stream); // 0x417f4e\n    if (v3 != 0) {\n        // 0x417f80\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x417f50\n    return result;\n}\n"
        },
        {
            "funcName": "function_417f90",
            "funcStartAddr": "417f90",
            "funcEndAddr": "417fd0",
            "decompiledFuncCode": "int64_t function_417f90(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x417faa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x417faa\n        return fflush(stream);\n    }\n    // 0x417fb8\n    function_417fd0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_417fd0",
            "funcStartAddr": "417fd0",
            "funcEndAddr": "418027",
            "decompiledFuncCode": "int64_t function_417fd0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x417fd0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x417fda\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x41800b\n    int64_t result = -1; // 0x418014\n    if (v1 != -1) {\n        // 0x418016\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x418022\n    return result;\n}\n"
        },
        {
            "funcName": "function_418030",
            "funcStartAddr": "418030",
            "funcEndAddr": "418147",
            "decompiledFuncCode": "int64_t function_418030(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x41805e\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x41807a\n    int32_t v3 = v1; // 0x418083\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x418094\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x4180a4\n    int32_t v6 = v2 / 25; // 0x4180b8\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x4180c9\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_418150",
            "funcStartAddr": "418150",
            "funcEndAddr": "4181e1",
            "decompiledFuncCode": "int64_t function_418150(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x41815e\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x418163\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x418169\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x41816f\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x418175\n        int64_t v6 = function_418030(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x418179\n        int64_t result = v6 + a6; // 0x418182\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x418187\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x4181ad\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x4181b1\n        return result2;\n    }\n    // 0x4181c0\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x418187\n        return -0x8000000000000000;\n    }\n    // 0x4181cf\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_4181f0",
            "funcStartAddr": "4181f0",
            "funcEndAddr": "4182af",
            "decompiledFuncCode": "int64_t function_4181f0(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x41821d\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x41825b\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x41821d\n        return result;\n    }\n    int64_t v2 = v1; // 0x418261\n    while (v2 != 0) {\n        // 0x418268\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x41821d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4182b0",
            "funcStartAddr": "4182b0",
            "funcEndAddr": "4186ea",
            "decompiledFuncCode": "int64_t function_4182b0(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x4182cb\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x4182d3\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x4182e4\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x4182e7\n    int32_t v5 = v4 / 12; // 0x418305\n    int32_t v6 = -12 * v5 + v4; // 0x41830f\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x41831a\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x418321\n    int64_t v9 = 0; // 0x418327\n    if (v8 % 4 == 0) {\n        // 0x418329\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x418590\n            v9 = v8 < 0;\n        }\n    }\n    // 0x418365\n    int64_t v10; // 0x4182b0\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g45); // 0x418397\n    int32_t v14 = v11 - 59; // 0x4183b0\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x4183b3\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x4183c7\n    int64_t v17 = function_418030(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x4183f0\n    int64_t v18; // bp-280, 0x4182b0\n    int64_t v19 = &v18; // 0x4183f5\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x418443\n    int64_t v22 = v19 + 80; // 0x418448\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x418413\n    int64_t v34 = v17; // 0x418413\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_4181f0(*v20, v22, v21); // 0x41844d\n    int64_t v38 = *v23; // 0x418452\n    *v24 = v37;\n    int64_t v39 = function_418150(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g209); // 0x418474\n    while (v38 != v39) {\n        // 0x418484\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x41848e\n            if (v40 < 0) {\n                goto lab_0x4184b7_3;\n            }\n            int32_t v41 = *v32; // 0x41849b\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x4184b7_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x4184b7_3;\n                }\n            }\n        }\n        // 0x418418\n        v33--;\n        if (v33 == 0) {\n            // 0x418577\n            return -1;\n        }\n        // 0x418421\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_4181f0(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_418150(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g209);\n    }\n    int32_t v42 = *v32; // 0x4185c0\n    int32_t v43 = *v30; // 0x4185c4\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x4185cb\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x4185e4\n    int64_t v46 = v44; // 0x4185e4\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x418600\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x41863b\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x418605\n        int64_t v52 = 0x92c70; // 0x418605\n        while (true) {\n            int64_t v53 = -v52; // 0x418632\n            int64_t v54 = v53 & 0xffffffff; // 0x418632\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x418635\n            int64_t v56 = v55 + v51; // 0x418638\n            *v49 = v56;\n            int64_t v57 = v51; // 0x418640\n            int32_t v58 = 2; // 0x418640\n            int64_t v59 = v54; // 0x418640\n            int32_t v60 = 2; // 0x418640\n            int64_t v61 = v54; // 0x418640\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x41865e:\n                // 0x41865e\n                function_4181f0(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x418675\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x41868a\n                    break;\n                }\n                // 0x4186e0\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x418627\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x4182b0\n            int64_t v66 = v59; // 0x418642\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x418642\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x41864b\n                int64_t v69 = v68 + v64; // 0x418654\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x41865e;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x418610\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x4184c0;\n            }\n        }\n        // 0x41868a\n        *v24 = v50;\n        int64_t v71 = function_418150(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g209); // 0x4186b6\n        *v23 = v71;\n        function_4181f0(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x4184c0;\n  lab_0x4184b7_3:\n    // 0x4184b7\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x4184c0;\n  lab_0x4184c0:;\n    int64_t v72 = *(int64_t *)(v19 + 56); // 0x4184c8\n    int32_t v73 = *(int32_t *)v21; // 0x4184d0\n    int32_t v74 = *(int32_t *)(v19 + 64); // 0x4184d4\n    int64_t v75 = *(int64_t *)(v19 + 48); // 0x4184db\n    *(int64_t *)v75 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v72;\n    int64_t result = v45; // 0x4184e5\n    if (v73 != v74) {\n        int32_t v76 = *v25; // 0x4184e9\n        int64_t v77 = (int64_t)(v73 == 60 == v74 < 1) - (int64_t)v76 + (int64_t)v74; // 0x418505\n        int64_t v78 = v77 + v45; // 0x418508\n        *v23 = v78;\n        if (((v78 ^ v45) & (v78 ^ v77)) < 0) {\n            // 0x418577\n            return -1;\n        }\n        // 0x418512\n        *(int64_t *)(v19 + 160) = v78;\n        if (*v20 == 0) {\n            // 0x418577\n            return -1;\n        }\n        // 0x418533\n        result = *v23;\n    }\n    int128_t v79 = __asm_movdqa(*(int128_t *)v21); // 0x418538\n    int128_t v80 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x41853e\n    int128_t v81 = __asm_movdqa(*(int128_t *)v29); // 0x418544\n    __asm_movups(*(int128_t *)v46, v79);\n    __asm_movups(*(int128_t *)(v46 + 16), v80);\n    __asm_movups(*(int128_t *)(v46 + 32), v81);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x418577\n    return result;\n}\n"
        },
        {
            "funcName": "function_4186f0",
            "funcStartAddr": "4186f0",
            "funcEndAddr": "41870c",
            "decompiledFuncCode": "int64_t function_4186f0(int64_t a1) {\n    // 0x4186f0\n    tzset();\n    return function_4182b0(a1, 0x4027a0, &g201);\n}\n"
        },
        {
            "funcName": "function_418710",
            "funcStartAddr": "418710",
            "funcEndAddr": "41876d",
            "decompiledFuncCode": "int64_t function_418710(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x418710\n    return function_4026a8();\n}\n"
        },
        {
            "funcName": "function_418770",
            "funcStartAddr": "418770",
            "funcEndAddr": "418771",
            "decompiledFuncCode": "int64_t function_418770(void) {\n    // 0x418770\n    int64_t result; // 0x418770\n    return result;\n}\n"
        },
        {
            "funcName": "function_418780",
            "funcStartAddr": "418780",
            "funcEndAddr": "418798",
            "decompiledFuncCode": "int64_t function_418780(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x418780\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g50);\n}\n"
        },
        {
            "funcName": "function_418798",
            "funcStartAddr": "418798",
            "funcEndAddr": "4187b8",
            "decompiledFuncCode": "int64_t function_418798(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g46; // 0x4187a2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4187a3\n        v1 -= 8;\n    }\n    // 0x4187b4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dir.elf"
}