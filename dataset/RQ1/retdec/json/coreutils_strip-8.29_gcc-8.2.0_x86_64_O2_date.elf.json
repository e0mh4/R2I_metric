{
    "funcInfo": [
        {
            "funcName": "function_401da0",
            "funcStartAddr": "401da0",
            "funcEndAddr": "401da5",
            "decompiledFuncCode": "int64_t function_401da0(void) {\n    // 0x401da0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401da5",
            "funcStartAddr": "401da5",
            "funcEndAddr": "401daa",
            "decompiledFuncCode": "int64_t function_401da5(void) {\n    // 0x401da5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401daa",
            "funcStartAddr": "401daa",
            "funcEndAddr": "401daf",
            "decompiledFuncCode": "int64_t function_401daa(void) {\n    // 0x401daa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401daf",
            "funcStartAddr": "401daf",
            "funcEndAddr": "401db4",
            "decompiledFuncCode": "int64_t function_401daf(void) {\n    // 0x401daf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401db4",
            "funcStartAddr": "401db4",
            "funcEndAddr": "401db9",
            "decompiledFuncCode": "int64_t function_401db4(void) {\n    // 0x401db4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401db9",
            "funcStartAddr": "401db9",
            "funcEndAddr": "401dbe",
            "decompiledFuncCode": "int64_t function_401db9(void) {\n    // 0x401db9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dbe",
            "funcStartAddr": "401dbe",
            "funcEndAddr": "401dc3",
            "decompiledFuncCode": "int64_t function_401dbe(void) {\n    // 0x401dbe\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dd0",
            "funcStartAddr": "401dd0",
            "funcEndAddr": "402540",
            "decompiledFuncCode": "int64_t function_401dd0(int64_t a1, int64_t a2) {\n    // 0x401dd0\n    function_409f40(a2);\n    setlocale(LC_ALL, (char *)&g25);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401dd0\n    function_412a60(0x403120, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int32_t * v2 = NULL; // bp-272, 0x401e2c\n    int64_t v3; // 0x401dd0\n    int64_t v4; // 0x401dd0\n    int64_t v5; // 0x401de1\n    while (true) {\n      lab_0x401e40_2:\n        // 0x401e40\n        while (true) {\n            // 0x401e40\n            while (true) {\n                // 0x401e40\n                uint32_t v6; // 0x401dd0\n                while (true) {\n                    // 0x401e40\n                    int64_t v7; // 0x401dd0\n                    v4 = v7;\n                    int64_t v8; // 0x401dd0\n                    int64_t v9 = v8;\n                    int64_t v10 = v9; // 0x401dd0\n                    while (true) {\n                      lab_0x401e40:\n                        // 0x401e40\n                        v3 = v10;\n                        int64_t v11; // 0x401dd0\n                        int64_t v12 = function_40d290(v5, a2, \"d:f:I::r:Rs:u\", &g3, 0, v11); // 0x401e53\n                        v6 = (int32_t)v12;\n                        switch (v6) {\n                            case -1: {\n                                goto lab_0x402025;\n                            }\n                            case 102: {\n                                goto lab_0x401fb0;\n                            }\n                            default: {\n                                if (v6 <= 102) {\n                                    // break -> 0x401e90\n                                    break;\n                                }\n                                int64_t v13; // 0x401dd0\n                                if (v6 == 117) {\n                                    // 0x401fc0\n                                    if (putenv(\"TZ=UTC0\") != 0) {\n                                        // 0x40253b\n                                        return function_40c3e0((int64_t)\"TZ=UTC0\");\n                                    }\n                                    // 0x401fd2\n                                    tzset();\n                                    v13 = v3;\n                                } else {\n                                    if (v6 > 117) {\n                                        if (v6 == 128) {\n                                            // 0x401eeb\n                                            *(int64_t *)&v2 = v3;\n                                            int32_t v14 = g33; // 0x401efb\n                                            int64_t v15 = v14; // 0x401efb\n                                            int32_t * v16 = g65; // 0x401f02\n                                            int64_t v17 = function_403040(\"--rfc-3339\", (int64_t)v16, g7, (int64_t *)&g5, 4, v15); // 0x401f0e\n                                            goto lab_0x401ead_2;\n                                        }\n                                        if (v6 != 129) {\n                                            // 0x402418\n                                            *(int64_t *)&v2 = v3;\n                                            goto lab_0x402418_4;\n                                        }\n                                        int32_t v18 = g50; // 0x401f8b\n                                        g50 = v18 | 1;\n                                        v13 = v3;\n                                    } else {\n                                        if (v6 != 114) {\n                                            // break (via goto) -> 0x401ec0\n                                            goto lab_0x401ec0;\n                                        }\n                                        int32_t * v19 = g65;\n                                        v13 = (int64_t)v19;\n                                    }\n                                }\n                                int64_t v20 = v13;\n                                v10 = v20;\n                                goto lab_0x401e40;\n                            }\n                        }\n                    }\n                    if (v6 == 73) {\n                        // break (via goto) -> 0x401fe0\n                        goto lab_0x401fe0;\n                    }\n                    if (v6 <= 73) {\n                        // 0x401f48\n                        *(int64_t *)&v2 = v3;\n                        if (v6 == -131) {\n                            struct _IO_FILE * v21 = g44; // 0x401f5f\n                            char (*v22)[5] = g32; // 0x401f66\n                            function_40c050((int64_t)v21, \"date\", \"GNU coreutils\", (int64_t)v22, \"David MacKenzie\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v6 == -130) {\n                            // 0x401fa2\n                            function_402750(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x402418_4;\n                    }\n                    if (v6 == 82) {\n                        // 0x401ead\n                        *(int64_t *)&v2 = v3;\n                        goto lab_0x401ead_2;\n                    }\n                    if (v6 != 100) {\n                        // 0x402418\n                        *(int64_t *)&v2 = v3;\n                        goto lab_0x402418_4;\n                    }\n                    int32_t * v23 = g65; // 0x401f39\n                    v8 = v3;\n                    v7 = (int64_t)v23;\n                }\n              lab_0x401ec0:\n                if (v6 != 115) {\n                    // 0x402418\n                    *(int64_t *)&v2 = v3;\n                    goto lab_0x402418_4;\n                }\n            }\n          lab_0x401fb0:;\n        }\n      lab_0x401fe0:\n        // 0x401fe0\n        *(int64_t *)&v2 = v3;\n        int32_t * v24 = g65; // 0x401fe0\n        if (v24 != NULL) {\n            int32_t v25 = g33; // 0x401ffe\n            int64_t v26 = v25; // 0x401ffe\n            int64_t v27 = function_403040(\"--iso-8601\", (int64_t)v24, g6, (int64_t *)&g4, 4, v26); // 0x40200a\n        }\n        // 0x402016\n        goto lab_0x401ead_2;\n    }\n  lab_0x402025:\n    // 0x402025\n    *(int64_t *)&v2 = v3;\n    int64_t v28; // 0x401dd0\n    uint64_t v29 = (int64_t)(v4 != 0) + (int64_t)(v28 != 0) + (int64_t)(v3 != 0); // 0x402042\n    int64_t v30 = (int64_t)\"the options to specify dates for printing are mutually exclusive\"; // 0x402047\n    int64_t v31; // 0x401dd0\n    char * format; // 0x402517\n    if ((int32_t)v29 > 1) {\n        // 0x402515\n        v31 = v30;\n        format = dcgettext(NULL, (char *)v31, 5);\n        error(0, 0, format);\n        // 0x402418\n        function_402750(1);\n        // UNREACHABLE\n    }\n    // 0x40204d\n    v30 = (int64_t)\"the options to print and set the time may not be used together\";\n    int64_t v32; // 0x401dd0\n    if ((v29 & v32) != 0) {\n        // 0x402515\n        v31 = v30;\n        format = dcgettext(NULL, (char *)v31, 5);\n        error(0, 0, format);\n        // 0x402418\n        function_402750(1);\n        // UNREACHABLE\n    }\n    int32_t v33 = *(int32_t *)0x61b2fc; // 0x40205b\n    int64_t v34 = v33; // 0x40205b\n    int64_t v35; // 0x401dd0\n    int64_t v36 = v35; // 0x402065\n    int64_t v37 = a2; // 0x402065\n    int64_t v38; // 0x401dd0\n    int64_t v39; // 0x401dd0\n    int64_t v40; // 0x401dd0\n    int64_t v41; // 0x401dd0\n    int64_t v42; // 0x401dd0\n    int64_t v43; // 0x401dd0\n    char * format2; // 0x402402\n    if (v5 > v34) {\n        int64_t v44 = v34 + 1; // 0x402067\n        int64_t v45 = v44 & 0xffffffff; // 0x402067\n        v39 = v34;\n        v41 = a2;\n        if (v45 < v5) {\n            goto lab_0x4024ef;\n        } else {\n            int64_t v46 = *(int64_t *)(8 * v34 + a2); // 0x402073\n            char v47 = *(char *)v46; // 0x402078\n            if (v47 == 43) {\n                // 0x402352\n                v40 = a2;\n                v38 = v28;\n                if (v35 != 0) {\n                    goto lab_0x4024a0;\n                } else {\n                    // 0x40235b\n                    g42 = v44;\n                    v36 = v46 + 1;\n                    v37 = v45;\n                    goto lab_0x402092;\n                }\n            } else {\n                // 0x402081\n                v36 = v35;\n                v37 = v45;\n                if ((v29 % 2 || v32) != 0) {\n                    // 0x4023ee\n                    function_40bb60(v46);\n                    v42 = (int64_t)\"the argument %s lacks a leading '+';\\nwhen using an option to specify date(s), any non-option\\nargument must be a format string beginning with '+'\";\n                    // 0x402400\n                    v43 = v42;\n                    format2 = dcgettext(NULL, (char *)v43, 5);\n                    error(0, 0, format2);\n                    // 0x402418\n                    function_402750(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x402092;\n            }\n        }\n    } else {\n        goto lab_0x402092;\n    }\n  lab_0x401ead_2:;\n    // 0x401ead\n    int32_t * v48; // 0x401dd0\n    int64_t v49; // 0x401dd0\n    int64_t v50; // 0x401dd0\n    if (v35 != 0) {\n        // 0x402422\n        error(1, (int32_t)\"multiple output formats specified\" ^ (int32_t)\"multiple output formats specified\", dcgettext(NULL, \"multiple output formats specified\", 5));\n        v48 = (int32_t *)v3;\n        v50 = a2;\n        v49 = v28;\n        goto lab_0x402444;\n    }\n    goto lab_0x401e40_2;\n  lab_0x402092:;\n    int64_t v51 = v37;\n    int64_t v52 = v36;\n    int64_t v53 = v52; // 0x402095\n    if (v52 == 0) {\n        char * v54 = nl_langinfo(0x2006c); // 0x402333\n        char v55 = *v54; // 0x40233c\n        int64_t v56 = v55 != 0 ? (int64_t)v54 : (int64_t)\"%a %b %e %H:%M:%S %Z %Y\";\n        v53 = v56;\n    }\n    int64_t v57 = v53;\n    int64_t env_val = (int64_t)getenv(\"TZ\"); // 0x4020a4\n    int64_t v58 = function_40db40(env_val, v51, v29); // 0x4020b1\n    int32_t * v59; // 0x401dd0\n    int32_t * v60; // 0x401dd0\n    struct _IO_FILE * v61; // 0x401dd0\n    int64_t v62; // 0x401dd0\n    int64_t v63; // 0x401dd0\n    int64_t v64; // 0x401dd0\n    int64_t v65; // 0x401dd0\n    int64_t v66; // 0x401dd0\n    int64_t v67; // 0x401dd0\n    int64_t v68; // 0x401dd0\n    int64_t v69; // 0x401dd0\n    int64_t v70; // 0x401dd0\n    int64_t v71; // bp-200, 0x401dd0\n    int64_t v72; // 0x401dd0\n    int64_t v73; // 0x401dd0\n    int64_t v74; // bp-216, 0x401dd0\n    if (v28 == 0) {\n        int64_t v75 = (v29 ^ 1) & (v32 ^ 1);\n        if (v75 != 0) {\n            int32_t v76 = g42; // 0x40226b\n            int64_t v77 = v76; // 0x40226b\n            if (v5 > v77) {\n                int64_t v78 = *(int64_t *)(8 * v77 + a2); // 0x40227b\n                v2 = (int32_t *)&v74;\n                int64_t v79 = function_409c90(&v74, v78, 7); // 0x402295\n                v59 = (int32_t *)&v74;\n                v72 = 0;\n                v70 = v57;\n                v73 = 0;\n                v66 = v78;\n                if ((char)v79 == 0) {\n                    goto lab_0x4023af;\n                } else {\n                    goto lab_0x4022ab;\n                }\n            } else {\n                // 0x40236a\n                function_404bc0(&v74);\n                v69 = v57;\n                v63 = v75;\n                goto lab_0x402216;\n            }\n        } else {\n            if (v3 == 0) {\n                int32_t v80 = g50; // 0x402388\n                int64_t v81; // 0x401dd0\n                int64_t v82 = v81 != 0 ? v81 : v4; // 0x402391\n                int64_t v83 = function_407bc0(&v74, v82, 0, v80, v58, env_val); // 0x4023a2\n                v66 = v82;\n                if ((char)v83 != 0) {\n                    goto lab_0x402207;\n                } else {\n                    goto lab_0x4023af;\n                }\n            } else {\n                int32_t v84 = __xstat(1, (char *)v3, (struct stat *)&v71); // 0x4021e0\n                v60 = (int32_t *)v3;\n                v67 = a2;\n                v64 = v75;\n                if (v84 != 0) {\n                    goto lab_0x402471;\n                } else {\n                    goto lab_0x402207;\n                }\n            }\n        }\n    } else {\n        char * str = (char *)v28; // 0x4020d0\n        if (strcmp(str, \"-\") == 0) {\n            struct _IO_FILE * v85 = g45; // 0x40225c\n            v61 = v85;\n            v62 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n            goto lab_0x4020f6;\n        } else {\n            struct _IO_FILE * file = fopen(str, \"r\"); // 0x4020e5\n            v61 = file;\n            v62 = v28;\n            v68 = a2;\n            v65 = v28;\n            if (file == NULL) {\n                goto lab_0x4024c2;\n            } else {\n                goto lab_0x4020f6;\n            }\n        }\n    }\n  lab_0x4024ef:;\n    int64_t v86 = v41;\n    int64_t v87 = v39;\n    int64_t v88 = *(int64_t *)(v86 + 8 + 8 * v87); // 0x4024ef\n    function_40bb60(v88);\n    v42 = (int64_t)\"extra operand %s\";\n    // 0x402400\n    v43 = v42;\n    format2 = dcgettext(NULL, (char *)v43, 5);\n    error(0, 0, format2);\n  lab_0x402418_4:\n    // 0x402418\n    function_402750(1);\n    // UNREACHABLE\n  lab_0x4024a0:;\n    int64_t v89 = v38;\n    int64_t v90 = v40;\n    error(1, (int32_t)\"multiple output formats specified\" ^ (int32_t)\"multiple output formats specified\", dcgettext(NULL, \"multiple output formats specified\", 5));\n    v68 = v90;\n    v65 = v89;\n    goto lab_0x4024c2;\n  lab_0x4020f6:;\n    int64_t v125 = v62;\n    struct _IO_FILE * v126 = v61;\n    int64_t v127 = 0; // bp-224, 0x402100\n    v74 = 0;\n    v2 = (int32_t *)&v74;\n    int32_t v128 = __getdelim((char **)&v127, (int32_t *)&v74, 10, v126); // 0x402132\n    int32_t * v129 = (int32_t *)&v74; // 0x40213d\n    int32_t * v130 = (int32_t *)&v74; // 0x40213d\n    int32_t v131 = v128; // 0x40213d\n    int64_t v132 = 1; // 0x40213d\n    int64_t v133 = 1; // 0x40213d\n    int32_t * v134 = (int32_t *)&v74; // 0x40213d\n    if (v128 >= 0) {\n        int32_t * v135 = v129;\n        int32_t v136 = g50; // 0x402154\n        int64_t v137 = v127; // 0x40215a\n        int64_t v138 = function_407bc0(&v71, v137, 0, v136, v58, env_val); // 0x40215f\n        int32_t v139; // 0x401dd0\n        int32_t * v140; // 0x401dd0\n        int32_t * v141; // 0x401dd0\n        int32_t * v142; // 0x401dd0\n        int32_t * v143; // 0x401dd0\n        int32_t * v144; // 0x401dd0\n        int32_t * v145; // 0x401dd0\n        int64_t v146; // 0x401dd0\n        int64_t v147; // 0x401dd0\n        int64_t v148; // 0x401dd0\n        int64_t v149; // 0x401dd0\n        int64_t v150; // 0x401dd0\n        int64_t v151; // 0x4022f1\n        int64_t v152; // 0x40216c\n        char * v153; // 0x402176\n        char v154; // 0x402176\n        int64_t v155; // 0x40217e\n        if ((char)v138 != 0) {\n            // 0x4022ec\n            v146 = v132;\n            v145 = v130;\n            v151 = v71;\n            v140 = v135;\n            v144 = v145;\n            v147 = function_402620(v57, v151, v150, v58) & v146;\n        } else {\n            // 0x40216c\n            v139 = v131;\n            v152 = v127;\n            v153 = (char *)((int64_t)v139 - 1 + v152);\n            v154 = *v153;\n            v142 = v135;\n            v148 = v152;\n            if (v154 == 10) {\n                // 0x40217b\n                *v153 = 0;\n                v155 = v127;\n                v141 = v2;\n                v142 = v141;\n                v148 = v155;\n            }\n            // 0x402183\n            v149 = v148;\n            v143 = v142;\n            function_40bb60(v149);\n            error(0, (int32_t)\"invalid date %s\" ^ (int32_t)\"invalid date %s\", dcgettext(NULL, \"invalid date %s\", 5));\n            v140 = v143;\n            v144 = v143;\n            v147 = 0;\n        }\n        int64_t v156 = v147;\n        int32_t * v157 = v144; // 0x402120\n        int32_t * v158 = v140;\n        int32_t v159 = __getdelim((char **)&v127, v157, 10, v126); // 0x402132\n        v129 = v158;\n        v130 = v157;\n        v131 = v159;\n        v132 = v156;\n        v133 = v156;\n        v134 = v157;\n        while (v159 >= 0) {\n            // 0x402143\n            v135 = v129;\n            v136 = g50;\n            v137 = v127;\n            v138 = function_407bc0(&v71, v137, 0, v136, v58, env_val);\n            if ((char)v138 != 0) {\n                // 0x4022ec\n                v146 = v132;\n                v145 = v130;\n                v151 = v71;\n                v140 = v135;\n                v144 = v145;\n                v147 = function_402620(v57, v151, v150, v58) & v146;\n            } else {\n                // 0x40216c\n                v139 = v131;\n                v152 = v127;\n                v153 = (char *)((int64_t)v139 - 1 + v152);\n                v154 = *v153;\n                v142 = v135;\n                v148 = v152;\n                if (v154 == 10) {\n                    // 0x40217b\n                    *v153 = 0;\n                    v155 = v127;\n                    v141 = v2;\n                    v142 = v141;\n                    v148 = v155;\n                }\n                // 0x402183\n                v149 = v148;\n                v143 = v142;\n                function_40bb60(v149);\n                error(0, (int32_t)\"invalid date %s\" ^ (int32_t)\"invalid date %s\", dcgettext(NULL, \"invalid date %s\", 5));\n                v140 = v143;\n                v144 = v143;\n                v147 = 0;\n            }\n            // 0x402120\n            v156 = v147;\n            v157 = v144;\n            v158 = v140;\n            v159 = __getdelim((char **)&v127, v157, 10, v126);\n            v129 = v158;\n            v130 = v157;\n            v131 = v159;\n            v132 = v156;\n            v133 = v156;\n            v134 = v157;\n        }\n    }\n    int32_t * v160 = v134;\n    int64_t v161 = v133;\n    int64_t v162 = function_40c420((int64_t)v126, (int64_t)v160); // 0x40230d\n    v48 = v160;\n    v50 = v161;\n    v49 = v125;\n    int64_t v111; // 0x401dd0\n    uint64_t v112; // 0x401dd0\n    if ((int32_t)v162 != -1) {\n        int64_t v163 = v127; // 0x40231b\n        free((int64_t *)v163);\n        v111 = v161;\n        // 0x402232\n        v112 = v111;\n        return v112 % 256 ^ 1;\n    }\n    goto lab_0x402444;\n  lab_0x4024c2:;\n    int64_t v91 = v65;\n    int64_t v92 = v68;\n    int64_t v93 = function_40b9e0(0, 3, v91); // 0x4024cc\n    int32_t * v94 = __errno_location(); // 0x4024d4\n    int32_t err_num = *v94; // 0x4024e6\n    error(1, err_num, \"%s\", (char *)v93);\n    v39 = &g73;\n    v41 = v92;\n    goto lab_0x4024ef;\n  lab_0x4023af:;\n    int64_t v95 = v66;\n    int64_t v96 = v73;\n    int64_t v97 = function_40bb60(v95); // 0x4023b2\n    error(1, (int32_t)\"invalid date %s\" ^ (int32_t)\"invalid date %s\", dcgettext(NULL, \"invalid date %s\", 5));\n    int64_t v98 = v96; // 0x4023da\n    int64_t v99 = v97; // 0x4023da\n    goto lab_0x4023df;\n  lab_0x4022ab:;\n    int64_t v102 = v70;\n    int64_t v103 = v72;\n    int32_t * v104 = v59; // 0x4022ab\n    int64_t v105 = v103; // 0x4022b7\n    v69 = v102;\n    v63 = 1;\n    if ((int32_t)function_40bb80((int64_t)v104) != 0) {\n        char * format3 = dcgettext(NULL, \"cannot set date\", 5); // 0x4022cc\n        int32_t * v106 = __errno_location(); // 0x4022d4\n        int32_t err_num2 = *v106; // 0x4022de\n        error(0, err_num2, format3);\n        v105 = v103;\n        v69 = v102;\n        v63 = 0;\n    }\n    goto lab_0x402216;\n  lab_0x402216:;\n    int64_t v107 = v63;\n    int64_t v108 = v69;\n    int64_t v109 = v105;\n    int64_t v110 = v74; // 0x40221b\n    v111 = function_402620(v108, v110, v109, v58) & v107;\n    // 0x402232\n    v112 = v111;\n    return v112 % 256 ^ 1;\n  lab_0x402207:;\n    // 0x402207\n    int64_t v113; // 0x401dd0\n    int64_t v114 = v113;\n    v105 = v114;\n    v69 = v57;\n    v63 = 1;\n    v98 = v114;\n    v99 = v57;\n    if (v32 != 0) {\n        goto lab_0x4023df;\n    } else {\n        goto lab_0x402216;\n    }\n  lab_0x402471:;\n    int64_t v115 = v64;\n    int64_t v116 = v67;\n    int32_t * v117 = v60; // 0x402471\n    int64_t v118 = function_40b9e0(0, 3, (int64_t)v117); // 0x40247d\n    int32_t * v119 = __errno_location(); // 0x402485\n    int32_t err_num3 = *v119; // 0x402497\n    error(1, err_num3, \"%s\", (char *)v118);\n    v40 = v116;\n    v38 = v115;\n    goto lab_0x4024a0;\n  lab_0x402444:;\n    int64_t v120 = v49;\n    int64_t v121 = v50;\n    int32_t * v122 = v48;\n    int64_t v123 = function_40b9e0(0, 3, v120); // 0x40244e\n    int32_t * v124 = __errno_location(); // 0x402456\n    int32_t err_num4 = *v124; // 0x402468\n    error(1, err_num4, \"%s\", (char *)v123);\n    v60 = v122;\n    v67 = v121;\n    v64 = v120;\n    goto lab_0x402471;\n  lab_0x4023df:;\n    int64_t v100 = v99;\n    int64_t v101 = v98;\n    v2 = (int32_t *)&v74;\n    v59 = (int32_t *)&v74;\n    v72 = v101;\n    v70 = v100;\n    goto lab_0x4022ab;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402540",
            "funcEndAddr": "40256b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402540\n    int64_t v1; // 0x402540\n    __libc_start_main(0x401dd0, (int32_t)a4, (char **)&v1, (void (*)())0x4129f0, (void (*)())0x412a50, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40256b",
            "funcStartAddr": "40256b",
            "funcEndAddr": "40258a",
            "decompiledFuncCode": "int64_t function_40256b(void) {\n    // 0x40256b\n    return &g43;\n}\n"
        },
        {
            "funcName": "function_40258a",
            "funcStartAddr": "40258a",
            "funcEndAddr": "4025c1",
            "decompiledFuncCode": "int64_t function_40258a(void) {\n    // 0x40258a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4025c1",
            "funcStartAddr": "4025c1",
            "funcEndAddr": "402618",
            "decompiledFuncCode": "int64_t function_4025c1(void) {\n    // 0x4025c1\n    if (g48 != 0) {\n        // 0x402617\n        int64_t result; // 0x4025c1\n        return result;\n    }\n    int64_t v1 = g49; // 0x4025f4\n    int64_t result2; // 0x402606\n    if (g49 >= ((int64_t)&g29 - (int64_t)&g28 >> 3) - 1) {\n        // 0x402606\n        result2 = function_40256b();\n        g48 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g29 - (int64_t)&g28 >> 3) - 1) {\n        // 0x4025f6\n        v1++;\n    }\n    // 0x4025ea\n    g49 = v1;\n    // 0x402606\n    result2 = function_40256b();\n    g48 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402618",
            "funcStartAddr": "402618",
            "funcEndAddr": "40261d",
            "decompiledFuncCode": "int64_t function_402618(void) {\n    // 0x402618\n    return function_40258a();\n}\n"
        },
        {
            "funcName": "function_402620",
            "funcStartAddr": "402620",
            "funcEndAddr": "402744",
            "decompiledFuncCode": "int64_t function_402620(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a2; // bp-136, 0x40262f\n    int64_t v2; // bp-88, 0x402620\n    if (function_40de20(a4, &v1, &v2) == 0) {\n        // 0x4026a0\n        int64_t v3; // bp-120, 0x402620\n        int64_t v4 = function_404c00(v1, &v3); // 0x4026a9\n        function_40bb60(v4);\n        error(0, (int32_t)\"time %s is out of range\" ^ (int32_t)\"time %s is out of range\", dcgettext(NULL, \"time %s is out of range\", 5));\n        return (int32_t)&g73 ^ (int32_t)&g73;\n    }\n    if (a1 == (int64_t)\"%a, %d %b %Y %H:%M:%S %z\") {\n        // 0x4026e8\n        setlocale(LC_TIME, \"C\");\n        function_404ba0((int64_t)g44, (int64_t)\"%a, %d %b %Y %H:%M:%S %z\", &v2, a4, a3 & 0xffffffff);\n        setlocale(LC_TIME, (char *)&g25);\n    } else {\n        // 0x402657\n        function_404ba0((int64_t)g44, a1, &v2, a4, a3 & 0xffffffff);\n    }\n    int64_t v5 = (int64_t)g44; // 0x402673\n    int64_t * v6 = (int64_t *)(v5 + 40); // 0x40267a\n    uint64_t v7 = *v6; // 0x40267a\n    if (v7 >= *(int64_t *)(v5 + 48)) {\n        // 0x402730\n        __overflow(g44, 10);\n    } else {\n        // 0x402688\n        *v6 = v7 + 1;\n        *(char *)v7 = 10;\n    }\n    // 0x402698\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402750",
            "funcStartAddr": "402750",
            "funcEndAddr": "402d65",
            "decompiledFuncCode": "int64_t function_402750(int32_t status) {\n    // 0x402750\n    if (status != 0) {\n        // 0x40276a\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40278f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402796\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [+FORMAT]\\n  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Display the current time in the given FORMAT, or set the system date.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -d, --date=STRING          display time described by STRING, not 'now'\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --debug                annotate the parsed date,\\n                              and warn about questionable usage to stderr\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --file=DATEFILE        like --date; once for each line of DATEFILE\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -I[FMT], --iso-8601[=FMT]  output date/time in ISO 8601 format.\\n                               FMT='date' for date only (the default),\\n                               'hours', 'minutes', 'seconds', or 'ns'\\n                               for date and time to the indicated precision.\\n                               Example: 2006-08-14T02:34:56-06:00\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -R, --rfc-email            output date and time in RFC 5322 format.\\n                               Example: Mon, 14 Aug 2006 02:34:56 -0600\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --rfc-3339=FMT         output date/time in RFC 3339 format.\\n                               FMT='date', 'seconds', or 'ns'\\n                               for date and time to the indicated precision.\\n                               Example: 2006-08-14 02:34:56-06:00\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -r, --reference=FILE       display the last modification time of FILE\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -s, --set=STRING           set time described by STRING\\n  -u, --utc, --universal     print or set Coordinated Universal Time (UTC)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nFORMAT controls the output.  Interpreted sequences are:\\n\\n  %%   a literal %\\n  %a   locale's abbreviated weekday name (e.g., Sun)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %A   locale's full weekday name (e.g., Sunday)\\n  %b   locale's abbreviated month name (e.g., Jan)\\n  %B   locale's full month name (e.g., January)\\n  %c   locale's date and time (e.g., Thu Mar  3 23:05:25 2005)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %C   century; like %Y, except omit last two digits (e.g., 20)\\n  %d   day of month (e.g., 01)\\n  %D   date; same as %m/%d/%y\\n  %e   day of month, space padded; same as %_d\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %F   full date; same as %Y-%m-%d\\n  %g   last two digits of year of ISO week number (see %G)\\n  %G   year of ISO week number (see %V); normally useful only with %V\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %h   same as %b\\n  %H   hour (00..23)\\n  %I   hour (01..12)\\n  %j   day of year (001..366)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %k   hour, space padded ( 0..23); same as %_H\\n  %l   hour, space padded ( 1..12); same as %_I\\n  %m   month (01..12)\\n  %M   minute (00..59)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %n   a newline\\n  %N   nanoseconds (000000000..999999999)\\n  %p   locale's equivalent of either AM or PM; blank if not known\\n  %P   like %p, but lower case\\n  %q   quarter of year (1..4)\\n  %r   locale's 12-hour clock time (e.g., 11:11:04 PM)\\n  %R   24-hour hour and minute; same as %H:%M\\n  %s   seconds since 1970-01-01 00:00:00 UTC\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %S   second (00..60)\\n  %t   a tab\\n  %T   time; same as %H:%M:%S\\n  %u   day of week (1..7); 1 is Monday\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %U   week number of year, with Sunday as first day of week (00..53)\\n  %V   ISO week number, with Monday as first day of week (01..53)\\n  %w   day of week (0..6); 0 is Sunday\\n  %W   week number of year, with Monday as first day of week (00..53)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %x   locale's date representation (e.g., 12/31/99)\\n  %X   locale's time representation (e.g., 23:13:48)\\n  %y   last two digits of year (00..99)\\n  %Y   year\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  %z   +hhmm numeric time zone (e.g., -0400)\\n  %:z  +hh:mm numeric time zone (e.g., -04:00)\\n  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)\\n  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)\\n  %Z   alphabetic time zone abbreviation (e.g., EDT)\\n\\nBy default, date pads numeric fields with zeroes.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"The following optional flags may follow '%':\\n\\n  -  (hyphen) do not pad the field\\n  _  (underscore) pad with spaces\\n  0  (zero) pad with zeros\\n  ^  use upper case if possible\\n  #  use opposite case if possible\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nAfter any flags comes an optional field width, as a decimal number;\\nthen an optional modifier, which is either\\nE to use the locale's alternate representations if available, or\\nO to use the locale's alternate numeric symbols if available.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nExamples:\\nConvert seconds since the epoch (1970-01-01 UTC) to a date\\n  $ date --date='@2147483647'\\n\\nShow the time on the west coast of the US (use tzselect(1) to find TZ)\\n  $ TZ='America/Los_Angeles' date\\n\\nShow the local time for 9AM next Friday on the west coast of the US\\n  $ date --date='TZ=\\\"America/Los_Angeles\\\" 09:00 next Fri'\\n\", 5), g44);\n    int64_t v1 = &g1; // bp-136, 0x402b45\n    bool v2; // 0x402750\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402bc8\n    int64_t v6 = *(int64_t *)v5; // 0x402bcc\n    int64_t v7 = 5; // 0x402bd2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"date\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402bde\n        char v11 = *(char *)v9; // 0x402bde\n        char v12 = v11; // 0x402bde\n        bool v13 = false; // 0x402bde\n        while (v10 == v11) {\n            // 0x402bd4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402bde\n            int64_t v15 = v8 + v3; // 0x402bde\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402bea\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x402bea\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402cfc;\n        } else {\n            // 0x402ce6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d3b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c4c;\n            } else {\n                goto lab_0x402cfc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402c4c;\n        } else {\n            // 0x402c32\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d3b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c4c;\n            } else {\n                goto lab_0x402c4c;\n            }\n        }\n    }\n  lab_0x402cfc:\n    // 0x402cfc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c8c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40278f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402c4c:\n    // 0x402c4c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c8c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40278f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d70",
            "funcStartAddr": "402d70",
            "funcEndAddr": "402d7a",
            "decompiledFuncCode": "int64_t function_402d70(void) {\n    // 0x402d70\n    return function_402750(1);\n}\n"
        },
        {
            "funcName": "function_402d80",
            "funcStartAddr": "402d80",
            "funcEndAddr": "402e96",
            "decompiledFuncCode": "int64_t function_402d80(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x402da1\n    int32_t len = strlen(str); // 0x402da1\n    if (a2 == 0) {\n        // 0x402e6d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x402e07\n    int64_t v4 = a3; // 0x402d80\n    int64_t v5 = a2; // 0x402e0e\n    int64_t str4; // 0x402d80\n    int64_t v6; // 0x402d80\n    int32_t v7; // 0x402d80\n    int32_t v8; // 0x402d80\n    int32_t v9; // 0x402d80\n    int64_t v10; // 0x402d80\n    int64_t result; // 0x402d80\n    int32_t v11; // 0x402e03\n    char * str2; // 0x402e22\n    while (true) {\n        // 0x402e17\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x402e2b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x402e6d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x402e3f\n                break;\n            }\n            // 0x402dd0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x402dde\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x402e07\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x402e43\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x402e4a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x402e17\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x402e17\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x402e2b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x402e6d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x402e3f\n                    break;\n                }\n                // 0x402dd0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x402dde\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x402e07\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x402e3f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x402e58:\n    // 0x402e6d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_402ea0",
            "funcStartAddr": "402ea0",
            "funcEndAddr": "402f11",
            "decompiledFuncCode": "int64_t function_402ea0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x402ea0\n    if (a3 == -1) {\n        // 0x402f00\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x402eb5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x402ec4\n    function_40bb40(1, a1);\n    function_40b830(0, 8, a2);\n    error(0, 0, format);\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_402f20",
            "funcStartAddr": "402f20",
            "funcEndAddr": "403038",
            "decompiledFuncCode": "int64_t function_402f20(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x402f4d\n    fputs_unlocked(v1, g47);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x402fc0\n        int64_t v5; // 0x402fc7\n        int64_t v6; // 0x402fe7\n        while (v3 != 0) {\n            // 0x402fab\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x402f70\n                break;\n            }\n            // 0x402fbd\n            v4 = v3 + 1;\n            v5 = function_40bb60(v2);\n            __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x402ff0\n                goto lab_0x402ff0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x402f73\n        int64_t v8 = function_40bb60(v2); // 0x402f7d\n        __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x402f9d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x402fab\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x402f70\n                    break;\n                }\n                // 0x402fbd\n                v4 = v3 + 1;\n                v5 = function_40bb60(v2);\n                __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x402ff0\n                    goto lab_0x402ff0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x402f70\n            v7 = v3 + 1;\n            v8 = function_40bb60(v2);\n            __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x402ff0:;\n    int64_t v10 = (int64_t)g47; // 0x402ff0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x402ff7\n    uint64_t result = *v11; // 0x402ff7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x403020\n        return __overflow(g47, 10);\n    }\n    // 0x403001\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403040",
            "funcStartAddr": "403040",
            "funcEndAddr": "4030b0",
            "decompiledFuncCode": "int64_t function_403040(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_402d80(a2, v2, v1, a5); // 0x40306c\n    int64_t result = v3; // 0x403074\n    if (v3 < 0) {\n        // 0x403088\n        function_402ea0((int64_t)a1, a2, v3);\n        function_402f20(v2, v1, a5);\n        result = -1;\n    }\n    // 0x403076\n    return result;\n}\n"
        },
        {
            "funcName": "function_4030b0",
            "funcStartAddr": "4030b0",
            "funcEndAddr": "4030fd",
            "decompiledFuncCode": "int64_t function_4030b0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x4030b0\n    if (result == 0) {\n        // 0x4030f1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x4030e8\n    int32_t n = a4; // 0x4030e8\n    int64_t v1 = result; // 0x4030ef\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x4030f1\n        return result;\n    }\n    int64_t str3 = str2; // 0x4030ef\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x4030d0\n    int64_t result2 = 0; // 0x4030dd\n    while (v2 != 0) {\n        // 0x4030df\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x4030f1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x4030f1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403100",
            "funcStartAddr": "403100",
            "funcEndAddr": "403108",
            "decompiledFuncCode": "int64_t function_403100(int64_t a1) {\n    // 0x403100\n    g52 = a1;\n    int64_t result; // 0x403100\n    return result;\n}\n"
        },
        {
            "funcName": "function_403110",
            "funcStartAddr": "403110",
            "funcEndAddr": "403118",
            "decompiledFuncCode": "int64_t function_403110(int64_t a1) {\n    // 0x403110\n    g51 = a1;\n    int64_t result; // 0x403110\n    return result;\n}\n"
        },
        {
            "funcName": "function_403120",
            "funcStartAddr": "403120",
            "funcEndAddr": "4031be",
            "decompiledFuncCode": "int64_t function_403120(void) {\n    // 0x403120\n    int32_t * err_num; // 0x403136\n    if ((int32_t)function_40e0d0((int64_t)g44) == 0) {\n        goto lab_0x40314c;\n    } else {\n        // 0x403136\n        err_num = __errno_location();\n        if (g51 == 0) {\n            goto lab_0x403163;\n        } else {\n            // 0x403147\n            if (*err_num != 32) {\n                goto lab_0x403163;\n            } else {\n                goto lab_0x40314c;\n            }\n        }\n    }\n  lab_0x40314c:;\n    int64_t result = function_40e0d0((int64_t)g47); // 0x403153\n    if ((int32_t)result == 0) {\n        // 0x40315c\n        return result;\n    }\n    // 0x40319e\n    _exit(g34);\n    // UNREACHABLE\n  lab_0x403163:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40316f\n    if (g52 == 0) {\n        // 0x4031a9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403183\n        error(0, *err_num, \"%s: %s\", (char *)function_40b9b0((int64_t)g52), v1);\n    }\n    // 0x40319e\n    _exit(g34);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4031c0",
            "funcStartAddr": "4031c0",
            "funcEndAddr": "403211",
            "decompiledFuncCode": "int64_t function_4031c0(int64_t stream, int64_t a2, int64_t a3) {\n    // 0x4031c0\n    if (a3 == 0) {\n        // 0x403210\n        int64_t result; // 0x4031c0\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x4031db\n    int64_t v2 = a2; // 0x4031e3\n    unsigned char v3 = *(char *)v2; // 0x4031e8\n    v2++;\n    int32_t c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x4031f6\n    int32_t fputc_rc = fputc(c, (struct _IO_FILE *)stream); // 0x4031f9\n    while (v2 != a3 + a2) {\n        // 0x4031e8\n        v3 = *(char *)v2;\n        v2++;\n        c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        fputc_rc = fputc(c, (struct _IO_FILE *)stream);\n    }\n    // 0x403203\n    return fputc_rc;\n}\n"
        },
        {
            "funcName": "function_403220",
            "funcStartAddr": "403220",
            "funcEndAddr": "403271",
            "decompiledFuncCode": "int64_t function_403220(int64_t stream, int64_t a2, int64_t a3) {\n    // 0x403220\n    if (a3 == 0) {\n        // 0x403270\n        int64_t result; // 0x403220\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x40323b\n    int64_t v2 = a2; // 0x403243\n    unsigned char v3 = *(char *)v2; // 0x403248\n    v2++;\n    int32_t c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x403256\n    int32_t fputc_rc = fputc(c, (struct _IO_FILE *)stream); // 0x403259\n    while (v2 != a3 + a2) {\n        // 0x403248\n        v3 = *(char *)v2;\n        v2++;\n        c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        fputc_rc = fputc(c, (struct _IO_FILE *)stream);\n    }\n    // 0x403263\n    return fputc_rc;\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "404b9e",
            "decompiledFuncCode": "int64_t function_403280(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403280\n    int64_t v1; // 0x403280\n    char v2 = *(char *)&v1; // 0x4032c9\n    if (v2 == 0) {\n        // 0x403317\n        return 0;\n    }\n    int64_t v3 = a1;\n    int64_t v4; // bp-1240, 0x403280\n    int64_t v5 = &v4; // 0x403295\n    struct _IO_FILE * stream = (struct _IO_FILE *)v3;\n    int64_t v6 = v5 | 4;\n    char * v7 = (char *)v6;\n    int64_t * tm = (int64_t *)(v5 + 8);\n    int64_t v8 = v5 + 48;\n    int32_t * v9 = (int32_t *)v8;\n    int64_t * v10 = (int64_t *)(v5 + 24);\n    int64_t v11 = v5 + 80;\n    int32_t * v12 = (int32_t *)v11;\n    int64_t str2 = v5 + 160;\n    int64_t v13 = v5 + 72;\n    int32_t * v14 = (int32_t *)v13;\n    int64_t v15 = v5 + 151;\n    char * v16 = (char *)v13;\n    int32_t * v17 = (int32_t *)(v5 + 68);\n    int64_t * str = (int64_t *)(v5 + 40);\n    int64_t * v18 = (int64_t *)v8;\n    int64_t * v19 = (int64_t *)v13;\n    char * c3 = (char *)v11;\n    int64_t format = v5 + 128;\n    int16_t * v20 = (int16_t *)format;\n    int64_t * v21 = (int64_t *)(v5 + 16);\n    int32_t * v22 = (int32_t *)(v5 + 1248);\n    int32_t * v23 = (int32_t *)v6;\n    int64_t * v24 = (int64_t *)(v5 - 16);\n    int64_t * v25 = (int64_t *)(v5 + 32);\n    int64_t data2 = v5 + 161;\n    char * v26 = (char *)v8;\n    int64_t v27 = v5 + 88;\n    int64_t * v28 = (int64_t *)v27;\n    int64_t v29 = v5 + 96;\n    int64_t * v30 = (int64_t *)v29;\n    int64_t v31 = v5 + 104;\n    int32_t * v32 = (int32_t *)v31;\n    int64_t * v33 = (int64_t *)(v5 + 112);\n    int64_t * v34 = (int64_t *)v31;\n    int32_t * v35 = (int32_t *)v29;\n    int32_t * v36 = (int32_t *)v27;\n    int64_t * v37 = (int64_t *)v11;\n    int64_t * v38 = (int64_t *)(v5 + 120);\n    int64_t v39 = a3; // 0x403280\n    int64_t v40 = a2; // 0x40330a\n    char v41 = v2; // 0x40330a\n    int64_t v42 = 0;\n    char v43; // 0x403280\n    char v44; // 0x403280\n    char v45; // 0x403280\n    char v46; // 0x403280\n    char v47; // 0x403280\n    char v48; // 0x403280\n    char v49; // 0x403280\n    char v50; // 0x403280\n    char v51; // 0x403280\n    char v52; // 0x403280\n    int64_t v53; // 0x403280\n    int64_t v54; // 0x403280\n    int64_t v55; // 0x403280\n    int64_t v56; // 0x403280\n    int64_t v57; // 0x403280\n    int64_t result; // 0x403280\n    int64_t v58; // 0x403280\n    int64_t v59; // 0x403280\n    int64_t v60; // 0x403280\n    int64_t v61; // 0x403280\n    int64_t v62; // 0x403280\n    int64_t v63; // 0x403280\n    int64_t v64; // 0x403280\n    int64_t v65; // 0x403280\n    int64_t v66; // 0x403280\n    while (true) {\n      lab_0x4032ea:\n        // 0x4032ea\n        v56 = v42;\n        char c = v41;\n        int64_t v67 = v40;\n        v66 = v39;\n        char v68 = v44;\n        char v69 = v43;\n        if (c == 37) {\n            // 0x403360\n            *v7 = *(char *)(v5 + 67);\n            v48 = v69;\n            v50 = v68;\n            v64 = v67;\n            v61 = 0;\n            v54 = 0;\n            while (true) {\n              lab_0x403370_3:\n                // 0x403370\n                v55 = v54;\n                int64_t v70 = v64 + 1; // 0x403370\n                char v71 = *(char *)v70; // 0x403374\n                char v72 = v71; // 0x40337d\n                int64_t v73 = v70; // 0x40337d\n                int64_t v74 = v61; // 0x40337d\n                char v75 = v50; // 0x40337d\n                char v76 = v48; // 0x40337d\n                v47 = v48;\n                v49 = v50;\n                v63 = v70;\n                v60 = v61;\n                v53 = 48;\n                if (v71 != 48) {\n                    v62 = v74;\n                    v65 = v73;\n                    v58 = v72;\n                    v52 = v75;\n                    v51 = v76;\n                    int64_t v77; // 0x403385\n                    char v78; // 0x403389\n                    int64_t v79; // 0x403389\n                    while (v51 <= v52) {\n                        if (v58 != 35) {\n                            // 0x4033a8\n                            v47 = v51;\n                            v49 = v52;\n                            v63 = v65;\n                            v60 = v62;\n                            v53 = v58;\n                            if ((char)v58 == 45) {\n                                goto lab_0x403370_2;\n                            } else {\n                                goto lab_0x4033ac;\n                            }\n                        }\n                        // 0x403385\n                        v77 = v65 + 1;\n                        v78 = *(char *)v77;\n                        v79 = v78;\n                        v47 = v78;\n                        v49 = 48;\n                        v63 = v77;\n                        v60 = 1;\n                        v53 = v79;\n                        if (v78 == 48) {\n                            goto lab_0x403370_2;\n                        }\n                        v62 = 1;\n                        v65 = v77;\n                        v58 = v79;\n                        v52 = 48;\n                        v51 = v78;\n                    }\n                    char v80 = v58;\n                    while (v80 == 94) {\n                        // 0x4033e4\n                        *v7 = 1;\n                        int64_t v81 = v65 + 1; // 0x403370\n                        char v82 = *(char *)v81; // 0x403374\n                        v72 = v82;\n                        v73 = v81;\n                        v74 = v62;\n                        v75 = v52;\n                        v76 = v51;\n                        v47 = v51;\n                        v49 = v52;\n                        v63 = v81;\n                        v60 = v62;\n                        v53 = 48;\n                        if (v82 == 48) {\n                            goto lab_0x403370_2;\n                        }\n                        v62 = v74;\n                        v65 = v73;\n                        v58 = v72;\n                        v52 = v75;\n                        v51 = v76;\n                        while (v51 <= v52) {\n                            if (v58 != 35) {\n                                // 0x4033a8\n                                v47 = v51;\n                                v49 = v52;\n                                v63 = v65;\n                                v60 = v62;\n                                v53 = v58;\n                                if ((char)v58 == 45) {\n                                    goto lab_0x403370_2;\n                                } else {\n                                    goto lab_0x4033ac;\n                                }\n                            }\n                            // 0x403385\n                            v77 = v65 + 1;\n                            v78 = *(char *)v77;\n                            v79 = v78;\n                            v47 = v78;\n                            v49 = 48;\n                            v63 = v77;\n                            v60 = 1;\n                            v53 = v79;\n                            if (v78 == 48) {\n                                goto lab_0x403370_2;\n                            }\n                            v62 = 1;\n                            v65 = v77;\n                            v58 = v79;\n                            v52 = 48;\n                            v51 = v78;\n                        }\n                        // 0x4033e0\n                        v80 = v58;\n                    }\n                    // 0x4033f0\n                    v47 = v51;\n                    v49 = v52;\n                    v63 = v65;\n                    v60 = v62;\n                    v53 = v58;\n                    if (v80 != 95) {\n                        // break -> 0x4033ac\n                        break;\n                    }\n                }\n                goto lab_0x403370_2;\n            }\n            goto lab_0x4033ac;\n        } else {\n            // 0x4032f0\n            result = 0;\n            if (v56 >= 0xfffffffffffffffe) {\n                // break -> 0x403317\n                break;\n            }\n            if (a1 != 0) {\n                // 0x4032fb\n                fputc((int32_t)c, stream);\n            }\n            // 0x403303\n            v45 = v69;\n            v46 = v68;\n            v39 = v66;\n            v59 = v67;\n            v57 = v56 + 1;\n            goto lab_0x40330a;\n        }\n    }\n  lab_0x403317_12:\n    // 0x403317\n    return result;\n  lab_0x403370_2:\n    // 0x403370\n    v48 = v47;\n    v50 = v49;\n    v64 = v63;\n    v61 = v60;\n    v54 = v53 & 0xffffffff;\n    goto lab_0x403370_3;\n  lab_0x403456:;\n    // 0x403456\n    int64_t v83; // 0x403413\n    int64_t v84 = v83; // 0x403459\n    int64_t v85; // 0x40341b\n    int64_t v86 = v85; // 0x403459\n    int64_t v87; // 0x40341d\n    int64_t v88 = v87; // 0x403459\n    int64_t v89; // 0x403413\n    int64_t v90 = v89; // 0x403459\n    int64_t v91 = v85; // 0x403459\n    int64_t v92 = 0x7fffffff; // 0x403459\n    int64_t v93; // 0x40341d\n    if ((int32_t)v93 >= 10) {\n        // break -> 0x4033ba\n        goto lab_0x4033ba_2;\n    }\n    // 0x40345f\n    int64_t v94; // 0x403280\n    int64_t v95 = v94 + 2; // 0x40345f\n    int64_t v96 = (int64_t)*(char *)v95; // 0x40345f\n    int64_t v97 = v96; // 0x403472\n    int64_t v98 = v96 & 0xffffffff; // 0x403472\n    int64_t v99 = v96 + 0xffffffd0 & 0xffffffff; // 0x403472\n    int64_t v100 = v95; // 0x403472\n    int64_t v101 = 0x7fffffff; // 0x403472\n    goto lab_0x40343a;\n  lab_0x40343a:;\n    int64_t v102 = v101;\n    int64_t v103 = v100;\n    int64_t v104 = v99;\n    int64_t v105 = v103; // 0x40343d\n    int64_t v106 = v102; // 0x40343d\n    if ((int32_t)v104 >= 10) {\n        // 0x40343f\n        v84 = v97;\n        v86 = v98;\n        v88 = v104;\n        v90 = v103;\n        v91 = v97 & 0xffffffff;\n        v92 = v102;\n        goto lab_0x4033ba_2;\n    }\n    goto lab_0x403413;\n  lab_0x4033ac:;\n    int64_t v111 = v58 & 0xffffffff;\n    v84 = v58;\n    v86 = v111;\n    v88 = v66;\n    v90 = v65;\n    v91 = v111;\n    v92 = 0xffffffff;\n    v105 = v65;\n    v106 = 0;\n    if ((int32_t)v58 < 58) {\n        while (true) {\n          lab_0x403413:;\n            int64_t v107 = v106;\n            v94 = v105;\n            v89 = v94 + 1;\n            v83 = (int64_t)*(char *)v89;\n            v85 = v83 & 0xffffffff;\n            v93 = v83 + 0xffffffd0;\n            v87 = v93 & 0xffffffff;\n            int32_t v108 = v107; // 0x403420\n            if (v108 > 0xccccccc) {\n                goto lab_0x403456;\n            } else {\n                char v109 = *(char *)v94; // 0x403429\n                int64_t v110 = v109; // 0x403429\n                v1 = v110;\n                if (v108 != 0xccccccc || v109 < 56) {\n                    // 0x40342e\n                    v97 = v83;\n                    v98 = v85;\n                    v99 = v87;\n                    v100 = v89;\n                    v101 = 10 * v107 + 0xffffffd0 + v110 & 0xffffffff;\n                    goto lab_0x40343a;\n                } else {\n                    goto lab_0x403456;\n                }\n            }\n        }\n    }\n    goto lab_0x4033ba_2;\n  lab_0x40330a:\n    // 0x40330a\n    v42 = v57;\n    v40 = v59 + 1;\n    v41 = *(char *)v40;\n    v43 = v45;\n    v44 = v46;\n    result = v42;\n    if (v41 == 0) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    goto lab_0x4032ea;\n  lab_0x4033ba_2:;\n    int64_t v112 = v92;\n    int64_t v113 = v90;\n    int64_t v114 = v88;\n    int64_t v115 = v86; // 0x403280\n    int64_t v116 = v113; // 0x403280\n    int64_t v117 = v91; // 0x403280\n    int64_t v118 = 0; // 0x403280\n    int64_t v119; // 0x403280\n    switch ((char)v119) {\n        case 79: {\n        }\n        case 69: {\n            int64_t v120 = v113 + 1; // 0x403400\n            int64_t v121 = (int64_t)*(char *)v120; // 0x403400\n            v115 = v121 & 0xffffffff;\n            v116 = v120;\n            v117 = v121;\n            v118 = v84 & 0xffffffff;\n            // break -> 0x4033d0\n            break;\n        }\n    }\n    int64_t v122 = v118;\n    int64_t v123 = v116;\n    int64_t v124 = v115;\n    g66 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v123; // 0x4033d3\n    int64_t v127 = v114; // 0x4033d3\n    int64_t v128 = v123; // 0x4033d3\n    int64_t v129 = 0; // 0x4033d3\n    char v130 = 1; // 0x4033d3\n    int64_t v131; // 0x403280\n    int64_t v132; // 0x403280\n    int64_t v133; // 0x403280\n    int64_t v134; // 0x403280\n    int32_t v135; // 0x403280\n    int64_t v136; // 0x403280\n    int64_t v137; // 0x403280\n    int64_t v138; // 0x403280\n    int64_t v139; // 0x403280\n    int64_t v140; // 0x403280\n    int64_t v141; // 0x403280\n    int64_t v142; // 0x403280\n    int64_t v143; // 0x403280\n    int64_t v144; // 0x403280\n    int64_t v145; // 0x403280\n    int64_t v146; // 0x403280\n    int64_t v147; // 0x403280\n    int64_t v148; // 0x403280\n    int64_t v149; // 0x403280\n    int64_t v150; // 0x403280\n    int64_t v151; // 0x403280\n    int64_t v152; // 0x403280\n    int64_t v153; // 0x403280\n    int64_t v154; // 0x403280\n    int64_t v155; // 0x403280\n    int64_t v156; // 0x403280\n    int64_t v157; // 0x403280\n    int64_t v158; // 0x403280\n    int64_t v159; // 0x403280\n    int64_t v160; // 0x403280\n    int64_t v161; // 0x403280\n    int64_t v162; // 0x403280\n    int64_t v163; // 0x403280\n    int64_t v164; // 0x403280\n    int64_t v165; // 0x403280\n    int64_t v166; // 0x403280\n    int64_t v167; // 0x403280\n    int64_t v168; // 0x403280\n    int64_t v169; // 0x403280\n    int64_t v170; // 0x403280\n    int64_t v171; // 0x403280\n    int64_t v172; // 0x403280\n    int64_t v173; // 0x403280\n    int64_t v174; // 0x403280\n    int64_t v175; // 0x403280\n    int64_t v176; // 0x403280\n    int32_t v177; // 0x403280\n    switch (v125) {\n        case 0: {\n            // 0x403823\n            v171 = v123 - 1;\n            goto lab_0x40382b;\n        }\n        case 37: {\n            int64_t c2 = v117;\n            int32_t v178 = v112; // 0x4038e1\n            int64_t v179 = -1 - v56;\n            int64_t v180 = v178 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x4038fc\n            int64_t v181 = v180 != 0 ? v180 : 1; // 0x403901\n            v1 = v181;\n            *v18 = v181;\n            if (v122 != 0) {\n                goto lab_0x403863;\n            } else {\n                // 0x403913\n                if (v1 >= v179) {\n                    // break -> 0x403317\n                    break;\n                }\n                // 0x40391c\n                v176 = v179;\n                if (a1 != 0) {\n                    // 0x403921\n                    if (v178 >= 2) {\n                        // 0x403927\n                        int64_t v182; // 0x403280\n                        int64_t v183 = v182 - 1; // 0x40392d\n                        int64_t v184 = 0; // 0x403935\n                        int64_t v185 = 0; // 0x403935\n                        if (v55 == 48) {\n                            int64_t v186 = v185;\n                            int64_t v187 = v186 + 1; // 0x404416\n                            fputc(48, stream);\n                            v185 = v187;\n                            while (v183 != v187) {\n                                // 0x40440e\n                                v186 = v185;\n                                v187 = v186 + 1;\n                                fputc(48, stream);\n                                v185 = v187;\n                            }\n                        } else {\n                            int64_t v188 = v184;\n                            int64_t v189 = v188 + 1; // 0x403943\n                            fputc(32, stream);\n                            v184 = v189;\n                            while (v183 != v189) {\n                                // 0x40393b\n                                v188 = v184;\n                                v189 = v188 + 1;\n                                fputc(32, stream);\n                                v184 = v189;\n                            }\n                        }\n                    }\n                    // 0x403954\n                    fputc((int32_t)c2, stream);\n                    v176 = v179;\n                }\n                goto lab_0x40395c;\n            }\n        }\n        case 58: {\n            int64_t v190 = v123 + 1; // 0x4043ec\n            char v191 = *(char *)v190; // 0x4043ec\n            char v192 = v191; // 0x4043fc\n            int64_t v193 = v190; // 0x4043fc\n            int64_t v194 = 1; // 0x4043fc\n            if (v191 == 58) {\n                int64_t v195 = 2; // 0x404429\n                int64_t v196 = v195 + v123; // 0x40442d\n                char v197 = *(char *)v196; // 0x40442d\n                v192 = v197;\n                v193 = v196;\n                v194 = v195;\n                int64_t v198 = v195; // 0x404438\n                while (v197 == 58) {\n                    // 0x404429\n                    v195 = v198 + 1;\n                    v196 = v195 + v123;\n                    v197 = *(char *)v196;\n                    v192 = v197;\n                    v193 = v196;\n                    v194 = v195;\n                    v198 = v195;\n                }\n            }\n            // 0x4043fe\n            v126 = v123;\n            v127 = v193;\n            v128 = v193;\n            v129 = v194;\n            if (v192 != 122) {\n                goto lab_0x403da0;\n            } else {\n                goto lab_0x403de9;\n            }\n        }\n        case 65: {\n            goto lab_0x403478;\n        }\n        case 66: {\n            goto lab_0x403478;\n        }\n        case 67: {\n            // 0x403652\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 69) {\n                goto lab_0x40360f;\n            } else {\n                int32_t v199 = *(int32_t *)(*tm + 20); // 0x40366c\n                int32_t v200 = v199 / 100; // 0x40367d\n                int32_t v201 = v200 + 19; // 0x403681\n                int32_t v202 = v199 + 1900; // 0x403695\n                int64_t v203 = v201 - (int32_t)(-100 * v200 + v199 < 0 == v201 >= 0 == (v201 != 0)); // 0x40369f\n                v1 = v203;\n                v132 = v203;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v202 < 0 != ((v202 ^ v199) & (v199 ^ -0x80000000)) < 0;\n                v156 = 2;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x4035fc;\n            }\n        }\n        case 68: {\n            // 0x4036aa\n            v126 = v123;\n            if (v122 != 0) {\n                goto lab_0x403da0;\n            } else {\n                // 0x4036b3\n                *v18 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x4036bc;\n            }\n        }\n        case 70: {\n            // 0x404095\n            v126 = v123;\n            if (v122 != 0) {\n                goto lab_0x403da0;\n            } else {\n                // 0x40409e\n                *v18 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x4036bc;\n            }\n        }\n        case 71: {\n            goto lab_0x4040ac;\n        }\n        case 72: {\n            // 0x4035d2\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v204 = (int64_t)*(int32_t *)(*tm + 8); // 0x4035e7\n                v1 = v204;\n                v131 = v204;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 73: {\n            // 0x40363c\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v205 = (int64_t)*v17; // 0x403646\n                v1 = v205;\n                v131 = v205;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 77: {\n            // 0x403969\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v206 = (int64_t)*(int32_t *)(*tm + 4); // 0x40397e\n                v1 = v206;\n                v131 = v206;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 78: {\n            // 0x4043a8\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                uint32_t v207 = (int32_t)v112; // 0x4043b2\n                if (v207 != -1) {\n                    int64_t v208 = (int64_t)*v22;\n                    v1 = v208;\n                    int64_t v209 = v208; // 0x4048f8\n                    int64_t v210 = v112; // 0x4048f8\n                    int64_t v211 = v208; // 0x4048f8\n                    if (v207 <= 8) {\n                        int64_t v212 = v209;\n                        int64_t v213 = (v210 & 0xffffffff) + 1; // 0x404915\n                        int64_t v214 = ((int32_t)(0x66666667 * (0x100000000 * v212 >> 32) / 0x100000000) >> 2) - ((int32_t)v212 >> 31); // 0x404920\n                        v210 = v213;\n                        while ((int32_t)v213 != 9) {\n                            // 0x404910\n                            v212 = v214;\n                            v213 = (v210 & 0xffffffff) + 1;\n                            v214 = ((int32_t)(0x66666667 * (0x100000000 * v212 >> 32) / 0x100000000) >> 2) - ((int32_t)v212 >> 31);\n                            v210 = v213;\n                        }\n                        // 0x404927\n                        v1 = v214;\n                        v211 = v214;\n                    }\n                    // 0x404927\n                    v131 = v211;\n                    v155 = v112 & 0xffffffff;\n                    v139 = v112;\n                    v145 = v55;\n                } else {\n                    int64_t v215 = (int64_t)*v22; // 0x4043bc\n                    v1 = v215;\n                    v131 = v215;\n                    v155 = 9;\n                    v139 = 9;\n                    v145 = v55;\n                }\n                goto lab_0x4035f0;\n            }\n        }\n        case 80: {\n            goto lab_0x404216;\n        }\n        case 82: {\n            // 0x404240\n            *v18 = (int64_t)\"%H:%M\";\n            goto lab_0x4036bc;\n        }\n        case 83: {\n            // 0x403986\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v216 = (int64_t)*(int32_t *)*tm; // 0x40399b\n                v1 = v216;\n                v131 = v216;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 84: {\n            // 0x4043d4\n            *v18 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x4036bc;\n        }\n        case 85: {\n            // 0x4039a2\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v217 = *tm; // 0x4039ac\n                v177 = *(int32_t *)(v217 + 28) + 7 - *(int32_t *)(v217 + 24);\n                goto lab_0x4039c3;\n            }\n        }\n        case 86: {\n            goto lab_0x4040ac;\n        }\n        case 87: {\n            // 0x4039d9\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v218 = *tm; // 0x4039e3\n                int32_t v219 = *(int32_t *)(v218 + 24); // 0x4039ed\n                int32_t v220 = v219 + 6; // 0x4039f1\n                *v9 = v219;\n                int32_t v221 = *(int32_t *)(v218 + 28); // 0x403a14\n                v177 = 1 - v219 + v221 + 7 * ((v220 + (int32_t)(-0x6db6db6d * (int64_t)v220 / 0x100000000) >> 2) - (v220 >> 31));\n                goto lab_0x4039c3;\n            }\n        }\n        case 88: {\n            goto lab_0x4035a0;\n        }\n        case 89: {\n            // 0x403a24\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            v126 = v123;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x40360f;\n                }\n                case 79: {\n                    goto lab_0x403da0;\n                }\n                default: {\n                    int32_t v222 = *(int32_t *)(*tm + 20); // 0x403a43\n                    int32_t v223 = v222 + 1900; // 0x403a46\n                    int64_t v224 = v223; // 0x403a50\n                    v1 = v224;\n                    v133 = v224;\n                    v164 = v123;\n                    v160 = 0;\n                    v173 = 0;\n                    v152 = v223 < 0 != ((v223 ^ v222) & (v222 ^ -0x80000000)) < 0;\n                    v158 = 4;\n                    v142 = v112;\n                    v148 = v55;\n                    goto lab_0x403a60;\n                }\n            }\n        }\n        case 90: {\n            char v225 = v62;\n            *v9 = (int32_t)v112;\n            *v14 = (int32_t)v55;\n            *v7 = v225 != 0 ? 0 : *v7;\n            int32_t len = strlen((char *)*str); // 0x403ca6\n            int64_t v226 = len; // 0x403ca6\n            int32_t v227 = *v9; // 0x403cab\n            int64_t v228 = v227; // 0x403cab\n            uint64_t v229 = v227 >= 0 ? v228 : 0; // 0x403cc1\n            int64_t v230 = v229 <= v226 ? v226 : v229; // 0x403ccb\n            *v18 = v230;\n            if (v230 >= -1 - v56) {\n                // break -> 0x403317\n                break;\n            }\n            // 0x403cdd\n            v176 = v230;\n            if (a1 != 0) {\n                char v231 = v225; // 0x403cee\n                if (v229 > v226) {\n                    int64_t v232 = v228 - v226; // 0x403cf3\n                    *v19 = v232;\n                    if (*v14 == 48) {\n                        // 0x404b54\n                        v231 = v225;\n                        if (v232 != 0) {\n                            int64_t v233 = 1; // 0x404b6d\n                            fputc(48, stream);\n                            v231 = v225;\n                            int64_t v234 = v233; // 0x404b7b\n                            while (*v19 != v233) {\n                                // 0x404b65\n                                v233 = v234 + 1;\n                                fputc(48, stream);\n                                v231 = v225;\n                                v234 = v233;\n                            }\n                        }\n                    } else {\n                        // 0x403d05\n                        v231 = v225;\n                        if (v232 != 0) {\n                            // 0x403d0d\n                            *c3 = v225;\n                            int64_t v235 = 0; // 0x403d1b\n                            v235++;\n                            fputc(32, stream);\n                            while (*v19 != v235) {\n                                // 0x403d20\n                                v235++;\n                                fputc(32, stream);\n                            }\n                            // 0x403d36\n                            v231 = *c3;\n                        }\n                    }\n                }\n                // 0x403d41\n                if (v231 != 0) {\n                    // 0x404a1f\n                    function_4031c0(v3, *str, v226);\n                    v176 = v226;\n                } else {\n                    int64_t data = *str;\n                    if (*v7 == 0) {\n                        // 0x404a05\n                        fwrite((int64_t *)data, len, 1, stream);\n                        v176 = 1;\n                    } else {\n                        // 0x403d55\n                        function_403220(v3, data, v226);\n                        v176 = v226;\n                    }\n                }\n            }\n            goto lab_0x40395c;\n        }\n        case 97: {\n            goto lab_0x403478;\n        }\n        case 98: {\n            goto lab_0x403d83;\n        }\n        case 99: {\n            goto lab_0x4035a0;\n        }\n        case 100: {\n            // 0x404332\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v236 = (int64_t)*(int32_t *)(*tm + 12); // 0x404347\n                v1 = v236;\n                v131 = v236;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 101: {\n            // 0x40434f\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v237 = (int64_t)*(int32_t *)(*tm + 12); // 0x40435e\n                v1 = v237;\n                v134 = v237;\n                goto lab_0x403c20;\n            }\n        }\n        case 103: {\n            goto lab_0x4040ac;\n        }\n        case 104: {\n            goto lab_0x403d83;\n        }\n        case 106: {\n            // 0x404366\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int32_t v238 = *(int32_t *)(*tm + 28); // 0x40437b\n                int32_t v239 = v238 + 1; // 0x40437e\n                int64_t v240 = v239; // 0x404385\n                v1 = v240;\n                v132 = v240;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v239 < 0 != (v239 & (v238 ^ -0x80000000)) < 0;\n                v156 = 3;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x4035fc;\n            }\n        }\n        case 107: {\n            // 0x404391\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v241 = (int64_t)*(int32_t *)(*tm + 8); // 0x4043a0\n                v1 = v241;\n                v134 = v241;\n                goto lab_0x403c20;\n            }\n        }\n        case 108: {\n            // 0x403c12\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v242 = (int64_t)*v17; // 0x403c1c\n                v1 = v242;\n                v134 = v242;\n                goto lab_0x403c20;\n            }\n        }\n        case 109: {\n            // 0x404307\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int32_t v243 = *(int32_t *)(*tm + 16); // 0x40431c\n                int32_t v244 = v243 + 1; // 0x40431f\n                int64_t v245 = v244; // 0x404326\n                v1 = v245;\n                v132 = v245;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v156 = 2;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x4035fc;\n            }\n        }\n        case 110: {\n            int32_t v246 = v112; // 0x40424e\n            int64_t v247 = 0x100000000 * v112 >> 32;\n            int64_t v248 = v246 >= 0 ? v247 : 0; // 0x40425f\n            int64_t v249 = v248 == 0 ? 1 : v248; // 0x404265\n            if (v249 >= -1 - v56) {\n                // break -> 0x403317\n                break;\n            }\n            // 0x404278\n            v175 = v114;\n            v163 = v249;\n            if (a1 != 0) {\n                if (v246 >= 2) {\n                    int64_t v250 = v247 - 1; // 0x40428d\n                    if (v55 == 48) {\n                        int64_t v251 = 1; // 0x4042c7\n                        fputc(48, stream);\n                        int64_t v252 = v251; // 0x4042d3\n                        while (v250 != v251) {\n                            // 0x4042bf\n                            v251 = v252 + 1;\n                            fputc(48, stream);\n                            v252 = v251;\n                        }\n                    } else {\n                        int64_t v253 = 1; // 0x40429f\n                        fputc(32, stream);\n                        int64_t v254 = v253; // 0x4042ab\n                        while (v250 != v253) {\n                            // 0x404297\n                            v253 = v254 + 1;\n                            fputc(32, stream);\n                            v254 = v253;\n                        }\n                    }\n                }\n                // 0x4042ad\n                fputc(10, stream);\n                v175 = v114;\n                v163 = v249;\n            }\n            goto lab_0x403796;\n        }\n        case 112: {\n            // 0x4043e2\n            v130 = 0;\n            goto lab_0x404216;\n        }\n        case 113: {\n            // 0x4042d7\n            v169 = v123;\n            v157 = 1;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 79) {\n                goto lab_0x40360f;\n            } else {\n                // 0x4042ef\n                v1 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v165 = v123;\n                v161 = 0;\n                v174 = 0;\n                v153 = 0;\n                v159 = 1;\n                v136 = v112;\n                v149 = v55;\n                goto lab_0x403a67;\n            }\n        }\n        case 114: {\n            // 0x4035aa\n            *v16 = 0;\n            v170 = v124;\n            goto lab_0x4035af;\n        }\n        case 115: {\n            int64_t v255 = *tm; // 0x403e9f\n            *v12 = (int32_t)v112;\n            *v14 = (int32_t)v55;\n            int128_t v256 = __asm_movdqu(*(int128_t *)(v255 + 32)); // 0x403ec3\n            int128_t v257 = __asm_movdqu(*(int128_t *)v255); // 0x403ec8\n            int128_t v258 = __asm_movdqu(*(int128_t *)(v255 + 16)); // 0x403ecc\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v5 + 176) = (int128_t)__asm_movaps(v258);\n            *(int128_t *)v8 = (int128_t)__asm_movaps(v256);\n            *(int128_t *)(v5 + 192) = (int128_t)__asm_movaps(v256);\n            *(int64_t *)(v5 + 208) = *(int64_t *)(v255 + 48);\n            int64_t v259 = function_40ded0(*v10, str2, v114, v124); // 0x403efa\n            uint32_t v260 = *v12; // 0x403f04\n            v1 = v259;\n            int64_t v261 = v259;\n            int64_t v262 = v261 >> 63; // 0x403f30\n            char v263 = (v261 >> 63 & 246) + v261; // 0x403f48\n            int64_t v264 = v15 - 1; // 0x403f53\n            *(char *)v264 = (v259 < 0 ? -v263 : v263) + 48;\n            while (v262 != 0) {\n                // 0x403f18\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & 246) + v261;\n                v264--;\n                *(char *)v264 = (v1 < 0 ? -v263 : v263) + 48;\n            }\n            int64_t v265 = (int64_t)*v14; // 0x403eff\n            int64_t v266 = v260; // 0x403f04\n            int32_t v267 = v260 >= 0 == (v260 != 0) ? v260 : 1; // 0x403f6d\n            *v9 = v267;\n            v135 = v267;\n            v166 = v123;\n            v137 = v266;\n            v143 = v265;\n            v151 = v264;\n            v167 = v123;\n            v138 = v266;\n            v144 = v265;\n            v150 = v264;\n            if (v1 < 0) {\n                goto lab_0x404450;\n            } else {\n                goto lab_0x403f7b;\n            }\n        }\n        case 116: {\n            int32_t v268 = v112; // 0x4037a1\n            int64_t v269 = 0x100000000 * v112 >> 32;\n            int64_t v270 = v268 >= 0 ? v269 : 0; // 0x4037b2\n            int64_t v271 = v270 == 0 ? 1 : v270; // 0x4037b8\n            if (v271 >= -1 - v56) {\n                // break -> 0x403317\n                break;\n            }\n            // 0x4037cb\n            v175 = v114;\n            v163 = v271;\n            if (a1 != 0) {\n                if (v268 >= 2) {\n                    int64_t v272 = v269 - 1; // 0x4037dc\n                    if (v55 == 48) {\n                        int64_t v273 = 1; // 0x403813\n                        fputc(48, stream);\n                        int64_t v274 = v273; // 0x40381f\n                        while (v272 != v273) {\n                            // 0x40380b\n                            v273 = v274 + 1;\n                            fputc(48, stream);\n                            v274 = v273;\n                        }\n                    } else {\n                        int64_t v275 = 1; // 0x4037ee\n                        fputc(32, stream);\n                        int64_t v276 = v275; // 0x4037fa\n                        while (v272 != v275) {\n                            // 0x4037e6\n                            v275 = v276 + 1;\n                            fputc(32, stream);\n                            v276 = v275;\n                        }\n                    }\n                }\n                // 0x4037fc\n                fputc(9, stream);\n                v175 = v114;\n                v163 = v271;\n            }\n            goto lab_0x403796;\n        }\n        case 117: {\n            int32_t v277 = *(int32_t *)(*tm + 24); // 0x403c55\n            int32_t v278 = v277 + 6; // 0x403c58\n            *v9 = v277;\n            int64_t v279 = v277 + 7 + -7 * ((v278 + (int32_t)(-0x6db6db6d * (int64_t)v278 / 0x100000000) >> 2) - (v278 >> 31)); // 0x403c7b\n            v1 = v279;\n            v131 = v279;\n            v155 = 1;\n            v139 = v112;\n            v145 = v55;\n            goto lab_0x4035f0;\n        }\n        case 119: {\n            // 0x403d6a\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403da0;\n            } else {\n                int64_t v280 = (int64_t)*(int32_t *)(*tm + 24); // 0x403d7b\n                v1 = v280;\n                v131 = v280;\n                v155 = 1;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x4035f0;\n            }\n        }\n        case 120: {\n            goto lab_0x4035a0;\n        }\n        case 121: {\n            // 0x404046\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 69) {\n                goto lab_0x40360f;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x404060\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x404078\n                v1 = v283;\n                v131 = v283;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x404087\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x40408d\n                    int64_t v286 = v285 & 0xffffffff; // 0x40408d\n                    v1 = v286;\n                    v131 = v286;\n                    v155 = 2;\n                    v139 = v112;\n                    v145 = v55;\n                }\n                goto lab_0x4035f0;\n            }\n        }\n        case 122: {\n            goto lab_0x403de9;\n        }\n        default: {\n            goto lab_0x403da0;\n        }\n    }\n  lab_0x403478:\n    // 0x403478\n    v126 = v123;\n    if (v122 != 0) {\n        goto lab_0x403da0;\n    } else {\n        char v287 = v62; // 0x403486\n        *v7 = v287 != 0 ? v287 : *v7;\n        goto lab_0x403490;\n    }\n  lab_0x4040ac:\n    // 0x4040ac\n    v126 = v123;\n    if (v122 == 69) {\n        goto lab_0x403da0;\n    } else {\n        int64_t v288 = *tm; // 0x4040b6\n        int32_t v289 = *(int32_t *)(v288 + 20); // 0x4040bb\n        uint32_t v290 = *(int32_t *)(v288 + 28); // 0x4040be\n        v1 = v290;\n        uint32_t v291 = *(int32_t *)(v288 + 24); // 0x4040c1\n        int32_t v292 = v290 - v291; // 0x4040d1\n        int32_t v293 = v292 + 382; // 0x4040d4\n        int32_t v294 = v289 - 100 + (v289 >> 31 & 400); // 0x4040df\n        int32_t v295 = v290 - 379 - v292 + 7 * ((v293 + (int32_t)(-0x6db6db6d * (int64_t)v293 / 0x100000000) >> 2) - (v293 >> 31)); // 0x404104\n        int32_t v296; // 0x403280\n        int32_t v297; // 0x404190\n        if (v295 < 0) {\n            int64_t v298 = 365; // 0x404878\n            if ((v294 + 3) % 4 == 0) {\n                int32_t v299 = v294 - 1;\n                v298 = 366;\n                if (v299 % 100 - v299 == 1 - v294) {\n                    uint32_t v300 = v299 % 400;\n                    int64_t v301 = v300; // 0x4048a7\n                    v298 = v301 + 366 + (v301 ^ 0xffffffff) + (int64_t)(v300 == 0) & 0xffffffff;\n                }\n            }\n            int64_t v302 = v298;\n            int64_t v303; // 0x4040be\n            int64_t v304 = v302 + v303; // 0x4048b6\n            int64_t v305; // 0x4040c1\n            int64_t v306 = v304 - v305 + 382; // 0x4048c8\n            v296 = (int32_t)(v304 - v306) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v306 >> 32) / 0x100000000 + v306) >> 2) - ((int32_t)v306 >> 31));\n        } else {\n            int64_t v307 = 365; // 0x40411b\n            if (v294 % 4 == 0) {\n                // 0x40411d\n                v307 = 366;\n                if (v294 % 100 == 0) {\n                    // 0x404145\n                    v307 = v294 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v308 = v1 - v307; // 0x404162\n            int64_t v309 = v308 - (int64_t)v291 + 382; // 0x40416e\n            v297 = (int32_t)(v308 - v309) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v309 >> 32) / 0x100000000 + v309) >> 2) - ((int32_t)v309 >> 31));\n            v296 = v297 >= 0 ? v297 : v295;\n        }\n        int64_t v310 = (v297 >> 31) + 1;\n        if (v125 == 71) {\n            int64_t v311 = (int64_t)v289 + 1900 + v310 & 0xffffffff; // 0x40495a\n            v1 = v311;\n            int32_t v312 = -1900 - (int32_t)v310; // 0x404968\n            int32_t v313 = v289 - v312; // 0x40496b\n            v132 = v311;\n            v168 = v123;\n            v162 = 0;\n            v172 = 0;\n            v154 = v313 < 0 != ((v313 ^ v289) & (v312 ^ v289)) < 0;\n            v156 = 4;\n            v140 = v112;\n            v146 = v55;\n            goto lab_0x4035fc;\n        } else {\n            if (v125 != 103) {\n                int32_t v314 = v296;\n                int32_t v315 = v314 < 0 ? 2 : 1; // 0x40494a\n                int64_t v316 = v315 + (v314 + (int32_t)(-0x6db6db6d * (int64_t)v314 / 0x100000000) >> 2); // 0x40494d\n                v1 = v316;\n                v131 = v316;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n            } else {\n                int32_t v317 = v310; // 0x4041d8\n                int32_t v318 = (v289 % 100 + v317) % 100;\n                int64_t v319 = v318; // 0x4041ee\n                v1 = v319;\n                v131 = v319;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                if (v318 < 0) {\n                    int32_t v320 = -1900 - v317; // 0x404202\n                    int32_t v321 = v289 - v320; // 0x404207\n                    int64_t v322 = v321 < 0 == ((v321 ^ v289) & (v320 ^ v289)) < 0 ? v319 + 100 : -v319; // 0x404209\n                    int64_t v323 = v322 & 0xffffffff; // 0x404209\n                    v1 = v323;\n                    v131 = v323;\n                    v155 = 2;\n                    v139 = v112;\n                    v145 = v55;\n                }\n            }\n            goto lab_0x4035f0;\n        }\n    }\n  lab_0x404216:\n    // 0x404216\n    *v16 = v130;\n    char v324 = v62; // 0x40421b\n    *v16 = v324 != 0 ? v324 : v130;\n    *v7 = v324 != 0 ? 0 : *v7;\n    v170 = 112;\n    goto lab_0x4035af;\n  lab_0x4035a0:\n    // 0x4035a0\n    v126 = v123;\n    if (v122 == 79) {\n        goto lab_0x403da0;\n    } else {\n        // 0x4035aa\n        *v16 = 0;\n        v170 = v124;\n        goto lab_0x4035af;\n    }\n  lab_0x403d83:;\n    char v541 = v62; // 0x403d88\n    *v7 = v541 != 0 ? v541 : *v7;\n    v126 = v123;\n    if (v122 == 0) {\n        goto lab_0x403490;\n    } else {\n        goto lab_0x403da0;\n    }\n  lab_0x403de9:;\n    int64_t v521 = v128;\n    int64_t v542 = *tm; // 0x403de9\n    v45 = v51;\n    v46 = v52;\n    v39 = v127;\n    v59 = v521;\n    v57 = v56;\n    int64_t v522; // 0x403280\n    uint32_t v520; // 0x403e66\n    uint32_t v524; // 0x403e6a\n    if (*(int32_t *)(v542 + 32) < 0) {\n        goto lab_0x40330a;\n    } else {\n        int64_t v543 = *(int64_t *)(v542 + 40); // 0x403df9\n        v1 = v543;\n        int32_t v544 = v543;\n        int64_t v545 = 1; // 0x403e05\n        if (v544 >= 0) {\n            // 0x403e07\n            v545 = 0;\n            if (v544 == 0) {\n                // 0x403e0f\n                v545 = *(char *)*str == 45;\n            }\n        }\n        // 0x403e1b\n        v522 = v545;\n        int64_t v546 = 0x100000000 * v543 >> 32; // 0x403e29\n        int32_t v547 = v544 >> 31; // 0x403e2b\n        *v9 = ((int32_t)(-0x6e5d4c3b * v546 / 0x100000000) + v544 >> 11) - v547;\n        int32_t v548 = ((int32_t)(v1 + -0x77777777 * v546 / 0x100000000) >> 5) - v547; // 0x403e45\n        v520 = -60 * ((v548 + (int32_t)(-0x77777777 * (int64_t)v548 / 0x100000000) >> 5) - (v548 >> 31)) + v548;\n        v524 = -60 * v548 + (int32_t)v1;\n        v1 = v524;\n        v171 = v521;\n        switch (v129) {\n            case 1: {\n                goto lab_0x4049e9;\n            }\n            case 0: {\n                int64_t v549 = (int64_t)(100 * *v9 + v520); // 0x404a46\n                v1 = v549;\n                v132 = v549;\n                v168 = v521;\n                v162 = 1;\n                v172 = 0;\n                v154 = v522;\n                v156 = 5;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x4035fc;\n            }\n            case 2: {\n                goto lab_0x4049c5;\n            }\n            case 3: {\n                if (v524 != 0) {\n                    goto lab_0x4049c5;\n                } else {\n                    if (v520 != 0) {\n                        goto lab_0x4049e9;\n                    } else {\n                        int64_t v550 = (int64_t)*v9; // 0x404a59\n                        v1 = v550;\n                        v132 = v550;\n                        v168 = v521;\n                        v162 = 1;\n                        v172 = v520;\n                        v154 = v522;\n                        v156 = 3;\n                        v140 = v112;\n                        v146 = v55;\n                        goto lab_0x4035fc;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40382b;\n            }\n        }\n    }\n  lab_0x403da0:;\n    int64_t v551 = v126;\n    int64_t v552 = v551 - 1;\n    while (*(char *)v552 != 37) {\n        // 0x403da7\n        v551 = v552;\n        v552 = v551 - 1;\n    }\n    int64_t v553 = 0x100000000 * (v126 + 2 - v551) >> 32; // 0x403dc0\n    int64_t v554 = (int32_t)v112 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x403dd0\n    int64_t v555 = v553 >= v554 ? v553 : v554; // 0x403dd8\n    *v18 = v555;\n    int64_t v556 = v555; // 0x403de1\n    int64_t v557 = v554; // 0x403de1\n    int64_t v558 = v126; // 0x403de1\n    int64_t v559 = v553; // 0x403de1\n    int64_t v560 = v552; // 0x403de1\n    goto lab_0x403863;\n  lab_0x403863:;\n    int64_t v561 = -1 - v56;\n    result = 0;\n    if (v561 <= v556) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    int64_t v562 = v558;\n    int64_t v407 = v561; // 0x403871\n    int64_t v408 = v562; // 0x403871\n    int64_t size3; // 0x403280\n    int64_t data4; // 0x403280\n    int64_t v526; // 0x403280\n    if (a1 == 0) {\n        goto lab_0x403590;\n    } else {\n        // 0x403877\n        data4 = v560;\n        size3 = v559;\n        if (size3 >= v557) {\n            goto lab_0x4038c3;\n        } else {\n            int64_t v563 = (0x100000000 * v112 >> 32) - size3; // 0x403882\n            if (v55 == 48) {\n                // 0x40479b\n                v526 = v562;\n                if (v563 == 0) {\n                    goto lab_0x4038c3;\n                } else {\n                    // 0x4047a7\n                    *v19 = v562;\n                    int64_t v564; // 0x403280\n                    int64_t v565 = v564 + 1; // 0x4047c0\n                    fputc(48, stream);\n                    v564 = v565;\n                    while (v563 != v565) {\n                        int64_t v566 = v564;\n                        v565 = v566 + 1;\n                        fputc(48, stream);\n                        v564 = v565;\n                    }\n                    // 0x4038be\n                    v526 = *v19;\n                    goto lab_0x4038c3;\n                }\n            } else {\n                // 0x40388f\n                v526 = v562;\n                if (v563 == 0) {\n                    goto lab_0x4038c3;\n                } else {\n                    // 0x403896\n                    *v19 = v562;\n                    int64_t v567 = 0; // 0x4038a1\n                    v567++;\n                    fputc(32, stream);\n                    while (v563 != v567) {\n                        // 0x4038a8\n                        v567++;\n                        fputc(32, stream);\n                    }\n                    // 0x4038be\n                    v526 = *v19;\n                    goto lab_0x4038c3;\n                }\n            }\n        }\n    }\n  lab_0x40382b:;\n    int64_t v568 = v171;\n    v126 = v568;\n    if (*(char *)v568 != 37) {\n        goto lab_0x403da0;\n    } else {\n        int64_t v569 = (int32_t)v112 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x40383d\n        int64_t v570 = v569 != 0 ? v569 : 1; // 0x403854\n        *v18 = v570;\n        v556 = v570;\n        v557 = v569;\n        v558 = v568;\n        v559 = 1;\n        v560 = v568;\n        goto lab_0x403863;\n    }\n  lab_0x40360f:\n    // 0x40360f\n    *v16 = 0;\n    *v20 = 0x2520;\n    int64_t v326 = v124; // 0x403619\n    int64_t v327 = v169; // 0x403619\n    int64_t v328 = v157; // 0x403619\n    int64_t v329 = v141; // 0x403619\n    int64_t v330 = v147; // 0x403619\n    goto lab_0x403621;\n  lab_0x4035af:;\n    int64_t v325 = v170;\n    *v20 = 0x2520;\n    v326 = v325;\n    v327 = v123;\n    v328 = 0;\n    v329 = v112;\n    v330 = v55;\n    int64_t v331; // 0x403280\n    int64_t v332; // 0x403280\n    int64_t v333; // 0x403280\n    int64_t v334; // 0x403280\n    int64_t v335; // 0x403280\n    int64_t v336; // 0x403280\n    if (v122 != 0) {\n        goto lab_0x403621;\n    } else {\n        // 0x4035c5\n        v334 = *v21;\n        v336 = v325;\n        v335 = v123;\n        v331 = v112;\n        v332 = v55;\n        v333 = v122;\n        goto lab_0x4034b0;\n    }\n  lab_0x4036bc:;\n    unsigned char v337 = *v7; // 0x4036bc\n    *v14 = (int32_t)v112;\n    *v12 = (int32_t)v55;\n    *v23 = (int32_t)v337;\n    *v24 = (int64_t)*v22;\n    uint64_t v338 = function_403280(0, *v18, *tm, (int64_t)v337, *v25, *v10); // 0x4036f3\n    int32_t v339 = *v14; // 0x4036ff\n    int64_t v340 = v339; // 0x4036ff\n    uint64_t v341 = v339 >= 0 ? v340 : 0; // 0x40370d\n    int64_t v342 = v338 >= v341 ? v338 : v341; // 0x403717\n    result = 0;\n    if (v342 >= -1 - v56) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    // 0x403724\n    v175 = v341;\n    v163 = v342;\n    if (a1 != 0) {\n        if (v338 < v341) {\n            int64_t v343 = v340 - v338; // 0x403736\n            if (*v12 == 48) {\n                // 0x40483b\n                if (v343 != 0) {\n                    int64_t v344 = 1; // 0x404858\n                    fputc(48, stream);\n                    int64_t v345 = v344; // 0x404864\n                    while (v343 != v344) {\n                        // 0x404850\n                        v344 = v345 + 1;\n                        fputc(48, stream);\n                        v345 = v344;\n                    }\n                }\n            } else {\n                // 0x403743\n                if (v343 != 0) {\n                    int64_t v346 = 1; // 0x403758\n                    fputc(32, stream);\n                    int64_t v347 = v346; // 0x403764\n                    while (v343 != v346) {\n                        // 0x403750\n                        v346 = v347 + 1;\n                        fputc(32, stream);\n                        v347 = v346;\n                    }\n                }\n            }\n        }\n        // 0x403766\n        *v24 = (int64_t)*v22;\n        int64_t v348 = *tm; // 0x403783\n        function_403280(a1, *v18, v348, (int64_t)*v23, *v25, *v10);\n        v175 = v348;\n        v163 = v342;\n    }\n    goto lab_0x403796;\n  lab_0x40395c:\n    // 0x40395c\n    v45 = v51;\n    v46 = v52;\n    v39 = v176;\n    v59 = v123;\n    v57 = *v18 + v56;\n    goto lab_0x40330a;\n  lab_0x403490:\n    // 0x403490\n    *v16 = 0;\n    *v20 = 0x2520;\n    v334 = *v21;\n    v336 = v124;\n    v335 = v123;\n    v331 = v112;\n    v332 = v55;\n    v333 = 0;\n    goto lab_0x4034b0;\n  lab_0x403796:\n    // 0x403796\n    v45 = v51;\n    v46 = v52;\n    v39 = v175;\n    v59 = v123;\n    v57 = v163 + v56;\n    goto lab_0x40330a;\n  lab_0x404450:;\n    int64_t v349 = v150;\n    int64_t v350 = v138;\n    int64_t v351 = v167;\n    *c3 = 45;\n    int64_t v352 = v351; // 0x404459\n    int64_t v353 = v350; // 0x404459\n    int64_t v354 = v144; // 0x404459\n    int64_t v355 = v349; // 0x404459\n    int32_t v356; // 0x403280\n    char v357; // 0x403280\n    int64_t v358; // 0x403280\n    int64_t v359; // 0x403280\n    int64_t v360; // 0x403280\n    if ((int32_t)v144 != 45) {\n        goto lab_0x403b03;\n    } else {\n        // 0x40445f\n        *v16 = 45;\n        v356 = v350;\n        v357 = 45;\n        v360 = v351;\n        v358 = v350;\n        v359 = v349;\n        goto lab_0x404464;\n    }\n  lab_0x403f7b:;\n    int64_t v361 = v137;\n    int64_t v362 = v15 - v151; // 0x403f86\n    int32_t v363; // 0x403280\n    int32_t v364; // 0x403280\n    int64_t v365; // 0x403280\n    int64_t v366; // 0x403280\n    int64_t v367; // 0x403280\n    int64_t v368; // 0x403280\n    int64_t v369; // 0x403280\n    int64_t v370; // 0x403280\n    int64_t v371; // 0x403280\n    int64_t v372; // 0x403280\n    int64_t v373; // 0x403280\n    if ((int32_t)v143 == 45) {\n        goto lab_0x403fa5;\n    } else {\n        int32_t v374 = v135 - (int32_t)v362; // 0x403f96\n        *v14 = v374;\n        if (v374 >= 0 == (v374 != 0)) {\n            int64_t v375; // 0x403280\n            int64_t v376; // 0x403280\n            int64_t v377; // 0x403280\n            int32_t v378; // 0x403f8c\n            if (v378 == 95) {\n                // 0x404663\n                *c3 = 0;\n                int32_t v379 = *v14;\n                v364 = v379;\n                v371 = v377;\n                v373 = v376;\n                v365 = v361;\n                v368 = v375;\n                goto lab_0x404668;\n            } else {\n                int32_t v380 = *v9; // 0x403336\n                result = 0;\n                v363 = v374;\n                v372 = v376;\n                int64_t v381; // 0x403280\n                v366 = v381;\n                v367 = v56;\n                v369 = v375;\n                v370 = v362;\n                if (v377 <= (int64_t)v380) {\n                    // break -> 0x403317\n                    goto lab_0x403317_12;\n                }\n                goto lab_0x403be7;\n            }\n        } else {\n            goto lab_0x403fa5;\n        }\n    }\n  lab_0x4035f0:\n    // 0x4035f0\n    v132 = v131;\n    v168 = v123;\n    v162 = 0;\n    v172 = 0;\n    v154 = 0;\n    v156 = v155;\n    v140 = v139;\n    v146 = v145;\n    goto lab_0x4035fc;\n  lab_0x403590:\n    // 0x403590\n    v45 = v51;\n    v46 = v52;\n    v39 = v407;\n    v59 = v408;\n    v57 = *v18 + v56;\n    goto lab_0x40330a;\n  lab_0x403621:\n    // 0x403621\n    *(char *)(v5 + 130) = (char)v122;\n    v334 = v5 + 131;\n    v336 = v326;\n    v335 = v327;\n    v331 = v329;\n    v332 = v330;\n    v333 = v328 & 0xffffffff;\n    goto lab_0x4034b0;\n  lab_0x4035fc:;\n    int64_t v382 = v146;\n    int64_t v383 = v140;\n    int64_t v384 = v156;\n    int64_t v385 = v154;\n    int64_t v386 = v172;\n    int64_t v387 = v162;\n    int64_t v388 = v168;\n    int64_t v389 = v132;\n    v133 = v389;\n    v164 = v388;\n    v160 = v387;\n    v173 = v386;\n    v152 = v385;\n    v158 = v384;\n    v142 = v383;\n    v148 = v382;\n    int64_t v390; // 0x403280\n    int64_t v391; // 0x403280\n    int64_t v392; // 0x403280\n    int64_t v393; // 0x403280\n    int64_t v394; // 0x403280\n    int64_t v395; // 0x403280\n    int64_t v396; // 0x403280\n    int64_t v397; // 0x403280\n    if (v122 != 79) {\n        goto lab_0x403a60;\n    } else {\n        // 0x403606\n        v169 = v388;\n        v157 = v384;\n        v141 = v383;\n        v147 = v382;\n        v390 = v389;\n        v396 = v388;\n        v395 = v387;\n        v397 = v386;\n        v393 = v385;\n        v394 = v384;\n        v391 = v383;\n        v392 = v382;\n        if ((char)v385 != 0) {\n            goto lab_0x403a65;\n        } else {\n            goto lab_0x40360f;\n        }\n    }\n  lab_0x4039c3:;\n    int32_t v398 = v177;\n    int64_t v399 = (v398 + (int32_t)(-0x6db6db6d * (int64_t)v398 / 0x100000000) >> 2) - (v398 >> 31); // 0x4039d2\n    v1 = v399;\n    v131 = v399;\n    v155 = 2;\n    v139 = v112;\n    v145 = v55;\n    goto lab_0x4035f0;\n  lab_0x403a60:\n    // 0x403a60\n    v390 = v133;\n    v396 = v164;\n    v395 = v160;\n    v397 = v173;\n    v393 = v152;\n    v394 = v158;\n    v391 = v142;\n    v392 = v148;\n    v165 = v164;\n    v161 = v160;\n    v174 = v173;\n    v153 = v152;\n    v159 = v158;\n    v136 = v142;\n    v149 = v148;\n    if ((char)v152 == 0) {\n        goto lab_0x403a67;\n    } else {\n        goto lab_0x403a65;\n    }\n  lab_0x4034b0:;\n    int64_t v400 = v333;\n    int64_t v401 = v335;\n    *(char *)v334 = (char)v336;\n    *(char *)(v334 + 1) = 0;\n    *v9 = (int32_t)v331;\n    *v12 = (int32_t)v332;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x4034da\n    v45 = v51;\n    v46 = v52;\n    v39 = format;\n    v59 = v401;\n    v57 = v56;\n    if (copied_chars == 0) {\n        goto lab_0x40330a;\n    } else {\n        int32_t v402 = *v9; // 0x4034e8\n        int64_t v403 = v402; // 0x4034e8\n        int64_t size = (int64_t)copied_chars - 1; // 0x4034ed\n        int64_t v404 = -1 - v56;\n        uint64_t v405 = v402 >= 0 ? v403 : 0; // 0x4034ff\n        uint64_t v406 = size >= v405 ? size : v405; // 0x403509\n        *v18 = v406;\n        result = 0;\n        if (v406 >= v404) {\n            // break -> 0x403317\n            goto lab_0x403317_12;\n        }\n        // 0x40351b\n        v407 = v404;\n        v408 = v401;\n        if (a1 != 0) {\n            if ((int32_t)v400 == 0 == size < v405) {\n                int64_t v409 = v403 - size; // 0x403532\n                if (*v12 == 48) {\n                    // 0x404555\n                    if (v409 != 0) {\n                        int64_t v410 = 1; // 0x404570\n                        fputc(48, stream);\n                        int64_t v411 = v410; // 0x40457c\n                        while (v409 != v410) {\n                            // 0x404568\n                            v410 = v411 + 1;\n                            fputc(48, stream);\n                            v411 = v410;\n                        }\n                    }\n                } else {\n                    // 0x40353f\n                    if (v409 != 0) {\n                        int64_t v412 = 1; // 0x403558\n                        fputc(32, stream);\n                        int64_t v413 = v412; // 0x403564\n                        while (v409 != v412) {\n                            // 0x403550\n                            v412 = v413 + 1;\n                            fputc(32, stream);\n                            v413 = v412;\n                        }\n                    }\n                }\n            }\n            // 0x403566\n            if (*v16 != 0) {\n                // 0x40453d\n                function_4031c0(v3, data2, size);\n                v407 = size;\n                v408 = v401;\n            } else {\n                // 0x403571\n                if (*v7 == 0) {\n                    // 0x404520\n                    fwrite((int64_t *)data2, (int32_t)size, 1, stream);\n                    v407 = 1;\n                    v408 = v401;\n                } else {\n                    // 0x40357c\n                    function_403220(v3, data2, size);\n                    v407 = size;\n                    v408 = v401;\n                }\n            }\n        }\n        goto lab_0x403590;\n    }\n  lab_0x403c20:;\n    int64_t v414 = v134;\n    v131 = v414;\n    v155 = 2;\n    v139 = v112;\n    v145 = v55;\n    switch ((int32_t)v55) {\n        case 48: {\n            goto lab_0x4035f0;\n        }\n        case 45: {\n            goto lab_0x4035f0;\n        }\n        default: {\n            // 0x403c3a\n            v131 = v414;\n            v155 = 2;\n            v139 = v112;\n            v145 = 95;\n            goto lab_0x4035f0;\n        }\n    }\n  lab_0x403a67:;\n    int64_t v415 = v149;\n    int64_t v416 = v136;\n    int64_t v417 = v159;\n    int64_t v418 = v161;\n    int64_t v419 = v165;\n    *v26 = (char)v153;\n    int64_t v420 = v15 - 1;\n    int64_t v421 = v420; // 0x403a88\n    if (v174 % 2 != 0) {\n        // 0x403a8a\n        *(char *)v420 = 58;\n        v421 = v15 - 2;\n    }\n    int64_t v422 = v421;\n    uint32_t v423 = (int32_t)v174 >> 1; // 0x403a9d\n    int64_t v424 = 0xcccccccd * (v1 & 0xffffffff) / 0x800000000; // 0x403a9f\n    *(char *)v422 = (char)v1 + 48 + -10 * (char)v424;\n    while (v423 == 0 != (int32_t)v1 < 10) {\n        // 0x403ac2\n        v1 = v424;\n        int64_t v425 = v423; // 0x403ac4\n        int64_t v426 = v422;\n        v420 = v426 - 1;\n        v421 = v420;\n        if (v425 % 2 != 0) {\n            // 0x403a8a\n            *(char *)v420 = 58;\n            v421 = v426 - 2;\n        }\n        // 0x403a98\n        v422 = v421;\n        v423 = (int32_t)v425 >> 1;\n        v424 = 0xcccccccd * (v1 & 0xffffffff) / 0x800000000;\n        *(char *)v422 = (char)v1 + 48 + -10 * (char)v424;\n    }\n    int32_t v427 = v417; // 0x403ad0\n    int32_t v428 = v416;\n    int32_t v429 = v427 - v428; // 0x403ad0\n    int64_t v430 = v429 < 0 == ((v429 ^ v427) & (int32_t)(v416 ^ v417)) < 0 ? v417 : v416;\n    int32_t v431 = v430; // 0x403add\n    *v9 = v431;\n    v167 = v419;\n    v138 = v416;\n    v144 = v415;\n    v150 = v422;\n    if (*v26 != 0) {\n        goto lab_0x404450;\n    } else {\n        // 0x403aeb\n        v135 = v431;\n        v166 = v419;\n        v137 = v416;\n        v143 = v415;\n        v151 = v422;\n        if ((char)v418 == 0) {\n            goto lab_0x403f7b;\n        } else {\n            if ((int32_t)v415 == 45) {\n                // 0x4047d3\n                *v16 = 43;\n                v356 = v428;\n                v357 = 43;\n                v360 = v419;\n                v358 = v416;\n                v359 = v422;\n                goto lab_0x404464;\n            } else {\n                // 0x403afe\n                *c3 = 43;\n                v352 = v419;\n                v353 = v416;\n                v354 = v415;\n                v355 = v422;\n                goto lab_0x403b03;\n            }\n        }\n    }\n  lab_0x403b03:;\n    int64_t v432 = v355;\n    int64_t v433 = v354;\n    int64_t v434 = v353;\n    int64_t v435 = v352;\n    int64_t v436 = v15 - v432; // 0x403b0f\n    int32_t v437 = *v9 + -1 - (int32_t)v436; // 0x403b15\n    *v14 = v437;\n    uint64_t v438 = -1 - v56;\n    int64_t v439; // 0x403280\n    int64_t v440; // 0x403280\n    int64_t v441; // 0x403280\n    int64_t v442; // 0x403280\n    int64_t v443; // 0x403280\n    int64_t v444; // 0x403280\n    if (v437 < 1) {\n        int32_t v445 = v434; // 0x404583\n        int64_t v446 = 0x100000000 * v434 >> 32;\n        int64_t v447 = v445 >= 0 ? v446 : 0; // 0x404594\n        int64_t v448 = v447 != 0 ? v447 : 1; // 0x40459a\n        *v19 = v448;\n        result = 0;\n        if (v448 >= v438) {\n            // break -> 0x403317\n            goto lab_0x403317_12;\n        }\n        int64_t v449 = v448; // 0x4045af\n        int64_t v450 = v447; // 0x4045af\n        int64_t v451 = v435; // 0x4045af\n        if (a1 != 0) {\n            int64_t v452 = v447; // 0x4045bd\n            int64_t v453 = v435; // 0x4045bd\n            int64_t v454 = v434; // 0x4045bd\n            int64_t v455 = v433; // 0x4045bd\n            if (!((v447 < 2 | *v9 != 0))) {\n                int64_t v456 = v446 - 1; // 0x4045c8\n                *v28 = v456;\n                int32_t v457 = v433; // 0x4045d1\n                if (v457 == 48) {\n                    // 0x404a7e\n                    v452 = v447;\n                    v453 = v435;\n                    v454 = v434;\n                    v455 = v433;\n                    if (v456 != 0) {\n                        // 0x404a8a\n                        *v35 = 48;\n                        *v32 = v445;\n                        *v33 = v435;\n                        int64_t v458 = 0; // 0x404a9e\n                        v458++;\n                        fputc(48, stream);\n                        while (*v28 != v458) {\n                            // 0x404aa1\n                            v458++;\n                            fputc(48, stream);\n                        }\n                        // 0x404ab9\n                        v452 = v447;\n                        v453 = *v33;\n                        v454 = (int64_t)*v32;\n                        v455 = (int64_t)*v35;\n                    }\n                } else {\n                    // 0x4045db\n                    v452 = v447;\n                    v453 = v435;\n                    v454 = v434;\n                    v455 = v433;\n                    if (v456 != 0) {\n                        // 0x4045e2\n                        *v35 = v457;\n                        *v32 = v445;\n                        *v33 = v447;\n                        *v38 = v435;\n                        int64_t v459 = 0; // 0x4045f6\n                        v459++;\n                        fputc(32, stream);\n                        while (*v28 != v459) {\n                            // 0x4045fb\n                            v459++;\n                            fputc(32, stream);\n                        }\n                        // 0x404611\n                        v452 = *v33;\n                        v453 = *v38;\n                        v454 = (int64_t)*v32;\n                        v455 = (int64_t)*v35;\n                    }\n                }\n            }\n            // 0x404625\n            *v34 = v452;\n            *v35 = (int32_t)v454;\n            *v36 = (int32_t)v455;\n            fputc((int32_t)*c3, stream);\n            v450 = *v34;\n            v449 = *v19;\n            v451 = v453;\n        }\n        int64_t v460 = v449 + v56; // 0x404650\n        v442 = -1 - v460;\n        v444 = v450;\n        v443 = v451;\n        v439 = v460;\n        v440 = v432;\n        v441 = v436;\n        goto lab_0x403fb7;\n    } else {\n        int32_t v461 = v433; // 0x403b2c\n        v364 = v437;\n        v371 = v438;\n        v373 = v435;\n        v365 = v434;\n        v368 = v432;\n        if (v461 == 95) {\n            goto lab_0x404668;\n        } else {\n            int64_t v462 = (int64_t)*v9; // 0x403b36\n            v1 = v462;\n            result = 0;\n            if (v438 <= v462) {\n                // break -> 0x403317\n                goto lab_0x403317_12;\n            }\n            int64_t v463 = 0x100000000 * v434 >> 32;\n            uint64_t v464 = (int32_t)v434 >= 0 ? v463 : 0; // 0x403b58\n            int64_t v465 = v464 != 0 ? v464 : 1; // 0x403b5e\n            *v28 = v465;\n            result = 0;\n            if (v465 >= v438) {\n                // break -> 0x403317\n                goto lab_0x403317_12;\n            }\n            int64_t v466 = v465; // 0x403b73\n            int64_t v467 = v435; // 0x403b73\n            int64_t v468 = v433; // 0x403b73\n            if (a1 != 0) {\n                int64_t v469 = v435; // 0x403b77\n                int64_t v470 = v433; // 0x403b77\n                if (v464 >= 2 && (int32_t)v1 == 0) {\n                    int64_t v471 = v463 - 1; // 0x403b82\n                    *v30 = v471;\n                    if (v461 == 48) {\n                        // 0x404ad0\n                        v469 = v435;\n                        v470 = v433;\n                        if (v471 != 0) {\n                            // 0x404adc\n                            *v34 = v435;\n                            int64_t v472 = 0; // 0x404ae6\n                            v472++;\n                            fputc(48, stream);\n                            while (*v30 != v472) {\n                                // 0x404ae9\n                                v472++;\n                                fputc(48, stream);\n                            }\n                            // 0x404b01\n                            v469 = *v34;\n                            v470 = v433 & 0xffffffff;\n                        }\n                    } else {\n                        // 0x403b95\n                        v469 = v435;\n                        v470 = v433;\n                        if (v471 != 0) {\n                            // 0x403b9c\n                            *v32 = v461;\n                            *v33 = v435;\n                            int64_t v473 = 0; // 0x403ba6\n                            v473++;\n                            fputc(32, stream);\n                            while (*v30 != v473) {\n                                // 0x403bab\n                                v473++;\n                                fputc(32, stream);\n                            }\n                            // 0x403bc1\n                            v469 = *v33;\n                            v470 = (int64_t)*v32;\n                        }\n                    }\n                }\n                // 0x403bcb\n                *v35 = (int32_t)v470;\n                fputc((int32_t)*c3, stream);\n                v466 = *v28;\n                v467 = v469;\n                v468 = (int64_t)*v35;\n            }\n            // 0x403be2\n            v363 = *v14;\n            v372 = v467;\n            v366 = v468;\n            v367 = v466 + v56;\n            v369 = v432;\n            v370 = v436;\n            goto lab_0x403be7;\n        }\n    }\n  lab_0x403fa5:\n    // 0x403fa5\n    v442 = -1 - v56;\n    v444 = (int32_t)v361 >= 0 ? 0x100000000 * v361 >> 32 : 0;\n    v443 = v166;\n    v439 = v56;\n    v440 = v151;\n    v441 = v362;\n    goto lab_0x403fb7;\n  lab_0x4049e9:;\n    int64_t v519 = (int64_t)(100 * *v9 + v520); // 0x4049f9\n    v1 = v519;\n    v132 = v519;\n    v168 = v521;\n    v162 = 1;\n    v172 = 4;\n    v154 = v522;\n    v156 = 6;\n    v140 = v112;\n    v146 = v55;\n    goto lab_0x4035fc;\n  lab_0x4049c5:;\n    int64_t v523 = (int64_t)(100 * v520 + v524 + 0x2710 * *v9); // 0x4049e2\n    v1 = v523;\n    v132 = v523;\n    v168 = v521;\n    v162 = 1;\n    v172 = 20;\n    v154 = v522;\n    v156 = 9;\n    v140 = v112;\n    v146 = v55;\n    goto lab_0x4035fc;\n  lab_0x4038c3:;\n    int64_t v525 = v526;\n    if (*v7 == 0) {\n        // 0x404508\n        fwrite((int64_t *)data4, (int32_t)size3, 1, stream);\n        v407 = 1;\n        v408 = v525;\n    } else {\n        // 0x4038ce\n        function_403220(v3, data4, size3);\n        v407 = size3;\n        v408 = v525;\n    }\n    goto lab_0x403590;\n  lab_0x403a65:\n    // 0x403a65\n    v1 = -v390 & 0xffffffff;\n    v165 = v396;\n    v161 = v395;\n    v174 = v397;\n    v153 = v393;\n    v159 = v394;\n    v136 = v391;\n    v149 = v392;\n    goto lab_0x403a67;\n  lab_0x404464:;\n    int32_t v527 = v356;\n    int64_t v528 = 0x100000000 * v358 >> 32;\n    int64_t v529 = v527 >= 0 ? v528 : 0; // 0x40447c\n    uint64_t v530 = v529 != 0 ? v529 : 1; // 0x404482\n    result = 0;\n    if (v530 >= -1 - v56) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    int64_t v531 = v360;\n    int64_t v532 = v529; // 0x404492\n    int64_t v533 = v531; // 0x404492\n    if (a1 != 0) {\n        char v534 = v357;\n        int32_t v535 = v527; // 0x40449c\n        char c5 = v534; // 0x40449c\n        int64_t v536 = v529; // 0x40449c\n        int64_t v537 = v531; // 0x40449c\n        if (!((v529 < 2 | *v9 != 0))) {\n            int64_t v538 = v528 - 1; // 0x40497d\n            v535 = v527;\n            c5 = v534;\n            v536 = v529;\n            v537 = v531;\n            if (v538 != 0) {\n                // 0x404987\n                *v12 = v527;\n                *v28 = v529;\n                *v30 = v531;\n                int64_t v539 = 0; // 0x404998\n                v539++;\n                fputc(32, stream);\n                while (v538 != v539) {\n                    // 0x40499b\n                    v539++;\n                    fputc(32, stream);\n                }\n                // 0x4049b1\n                v535 = *v12;\n                c5 = *v16;\n                v536 = *v28;\n                v537 = *v30;\n            }\n        }\n        // 0x4044a8\n        *v28 = v536;\n        *v12 = v535;\n        fputc((int32_t)c5, stream);\n        v532 = *v28;\n        v533 = v537;\n    }\n    int64_t v540 = v530 + v56; // 0x4044c9\n    v442 = -1 - v540;\n    v444 = v532;\n    v443 = v533;\n    v439 = v540;\n    v440 = v359;\n    v441 = v15 - v359;\n    goto lab_0x403fb7;\n  lab_0x403fb7:;\n    uint64_t size2 = v441;\n    int64_t data3 = v440;\n    int64_t v474 = v443;\n    uint64_t v475 = v444;\n    uint64_t v476 = size2 >= v475 ? size2 : v475; // 0x403fbd\n    *v19 = v476;\n    result = 0;\n    if (v476 >= v442) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    int64_t v477 = v475; // 0x403fd2\n    int64_t v478 = v474; // 0x403fd2\n    if (a1 == 0) {\n        goto lab_0x40403c;\n    } else {\n        // 0x403fd4\n        if (size2 < v475 == *v9 == 0) {\n            // 0x403fe1\n            int64_t v479; // 0x403280\n            int64_t v480 = (0x100000000 * v479 >> 32) - size2; // 0x403fe4\n            int64_t v481; // 0x403280\n            if ((int32_t)v481 == 48) {\n                // 0x40475d\n                if (v480 == 0) {\n                    goto lab_0x404023;\n                } else {\n                    // 0x404769\n                    *v18 = v474;\n                    int64_t v482 = 0; // 0x404773\n                    int64_t v483 = v482;\n                    int64_t v484 = v483 + 1; // 0x404780\n                    fputc(48, stream);\n                    v482 = v484;\n                    while (v480 != v484) {\n                        // 0x404778\n                        v483 = v482;\n                        v484 = v483 + 1;\n                        fputc(48, stream);\n                        v482 = v484;\n                    }\n                    // 0x40401e\n                    goto lab_0x404023;\n                }\n            } else {\n                // 0x403ff1\n                if (v480 == 0) {\n                    goto lab_0x404023;\n                } else {\n                    // 0x403ff8\n                    *v18 = v474;\n                    int64_t v485 = 0; // 0x404003\n                    int64_t v486 = v485;\n                    int64_t v487 = v486 + 1; // 0x404010\n                    fputc(32, stream);\n                    v485 = v487;\n                    while (v480 != v487) {\n                        // 0x404008\n                        v486 = v485;\n                        v487 = v486 + 1;\n                        fputc(32, stream);\n                        v485 = v487;\n                    }\n                    // 0x40401e\n                    goto lab_0x404023;\n                }\n            }\n        } else {\n            goto lab_0x404023;\n        }\n    }\n  lab_0x404668:;\n    uint64_t v488 = (int64_t)v364; // 0x404668\n    result = 0;\n    if (v371 <= v488) {\n        // break -> 0x403317\n        goto lab_0x403317_12;\n    }\n    int64_t v489 = v368;\n    int64_t v490 = v365;\n    int64_t v491 = v373;\n    int32_t v492 = v364; // 0x404679\n    int64_t v493 = v490; // 0x404679\n    if (a1 != 0) {\n        // 0x404801\n        *v36 = (int32_t)v490;\n        int64_t v494 = 0; // 0x404812\n        v494++;\n        fputc(32, stream);\n        while (v494 < v488) {\n            // 0x404818\n            v494++;\n            fputc(32, stream);\n        }\n        // 0x40482e\n        v492 = *v14;\n        v493 = (int64_t)*v36;\n    }\n    int32_t v495 = v492; // 0x40467f\n    int32_t v496 = v493; // 0x404683\n    int64_t v497 = v56 + v488; // 0x404686\n    int32_t v498 = v495 - v496; // 0x40468b\n    int64_t v499 = v498 < 0 == ((v498 ^ v495) & (v495 ^ v496)) < 0 ? 0 : (int64_t)(v496 - v495); // 0x404694\n    char v500 = *c3; // 0x40469b\n    int64_t v501 = -1 - v497;\n    int64_t v502 = 0x100000000 * v499 >> 32;\n    if (v500 == 0) {\n        // 0x4047e5\n        v442 = v501;\n        v444 = v502;\n        v443 = v491;\n        v439 = v497;\n        v440 = v489;\n        v441 = v15 - v489;\n    } else {\n        uint64_t v503 = v499 != 0 ? v502 : 1; // 0x4046b4\n        result = 0;\n        if (v503 >= v501) {\n            // break -> 0x403317\n            goto lab_0x403317_12;\n        }\n        int64_t v504 = v502; // 0x4046c4\n        int64_t v505 = v491; // 0x4046c4\n        if (a1 != 0) {\n            char c4 = v500; // 0x4046ce\n            int64_t v506 = v491; // 0x4046ce\n            int64_t v507 = v499; // 0x4046ce\n            if (*v9 == 0) {\n                uint32_t v508 = (int32_t)v499; // 0x4046d0\n                c4 = v500;\n                v506 = v491;\n                v507 = v499;\n                if (v508 >= 2) {\n                    // 0x404b0e\n                    *v36 = v508;\n                    *v19 = v502 - 1;\n                    *v30 = v491;\n                    int64_t v509 = 0; // 0x404b27\n                    v509++;\n                    fputc(32, stream);\n                    while (*v19 != v509) {\n                        // 0x404b2a\n                        v509++;\n                        fputc(32, stream);\n                    }\n                    // 0x404b42\n                    c4 = *c3;\n                    v506 = *v30;\n                    v507 = (int64_t)*v36;\n                }\n            }\n            // 0x4046da\n            *v28 = v502;\n            *v14 = (int32_t)v507;\n            fputc((int32_t)c4, stream);\n            v504 = *v28;\n            v505 = v506;\n        }\n        int64_t v510 = v503 + v497; // 0x4046fb\n        v442 = -1 - v510;\n        v444 = v504;\n        v443 = v505;\n        v439 = v510;\n        v440 = v489;\n        v441 = v15 - v489;\n    }\n    goto lab_0x403fb7;\n  lab_0x40403c:\n    // 0x40403c\n    v45 = v51;\n    v46 = v52;\n    v39 = v477;\n    v59 = v478;\n    v57 = *v19 + v439;\n    goto lab_0x40330a;\n  lab_0x403be7:;\n    int64_t v511 = v366;\n    int64_t v512 = v372;\n    int64_t v513 = v363; // 0x403be7\n    *v19 = v513;\n    int64_t v514 = v513; // 0x403bf7\n    int64_t v515 = v512; // 0x403bf7\n    if (a1 != 0) {\n        // 0x40471d\n        *v36 = (int32_t)v511;\n        *v37 = v512;\n        int64_t v516 = 0; // 0x404731\n        v516++;\n        fputc(48, stream);\n        while (v516 < *v19) {\n            // 0x404738\n            v516++;\n            fputc(48, stream);\n        }\n        // 0x40474e\n        v514 = *v19;\n        v515 = *v37;\n    }\n    int64_t v517 = v514 + v367; // 0x403bfd\n    v442 = -1 - v517;\n    v444 = 0;\n    v443 = v515;\n    v439 = v517;\n    v440 = v369;\n    v441 = v370;\n    goto lab_0x403fb7;\n  lab_0x404023:;\n    int64_t v518 = v474;\n    if (*v7 == 0) {\n        // 0x4044f0\n        fwrite((int64_t *)data3, (int32_t)size2, 1, stream);\n        v477 = 1;\n        v478 = v518;\n    } else {\n        // 0x40402e\n        function_403220(v3, data3, size2);\n        v477 = size2;\n        v478 = v518;\n    }\n    goto lab_0x40403c;\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404bbf",
            "decompiledFuncCode": "int64_t function_404ba0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5) {\n    char v1 = 0; // bp-9, 0x404ba9\n    int64_t result = function_403280((int32_t)a1, a2, (int64_t)a3, 0, (int64_t)&v1, a4); // 0x404bb5\n    return result;\n}\n"
        },
        {
            "funcName": "function_404bc0",
            "funcStartAddr": "404bc0",
            "funcEndAddr": "404bfa",
            "decompiledFuncCode": "int64_t function_404bc0(int64_t * tp) {\n    int64_t result = 0; // 0x404bd4\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x404bd6\n        int64_t tp2; // bp-24, 0x404bc0\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *tp = tp2;\n        int128_t v1; // 0x404bc0\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)((int64_t)tp + 8) = result;\n    }\n    // 0x404bf4\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c9c",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x404c00\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x404c25\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x404c56\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x404c78\n    int64_t v4 = v2 - 1; // 0x404c88\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x404c90\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404ca0",
            "funcStartAddr": "404ca0",
            "funcEndAddr": "404e1e",
            "decompiledFuncCode": "int64_t function_404ca0(int64_t a1, int64_t a2, uint64_t a3, uint64_t result) {\n    int64_t * v1 = (int64_t *)(a1 + 168); // 0x404ca0\n    int64_t result3 = *v1; // 0x404ca0\n    if (result3 == 0) {\n        goto lab_0x404cf8;\n    } else {\n        int64_t * v2 = (int64_t *)(a1 + 48); // 0x404cb6\n        if (*v2 != 0) {\n            goto lab_0x404cf8;\n        } else {\n            // 0x404cbd\n            if (*(char *)(a1 + 161) != 0) {\n                goto lab_0x404cf8;\n            } else {\n                int64_t * v3 = (int64_t *)(a1 + 200); // 0x404cc6\n                if (result < 3 != (*v3 == 0)) {\n                    int128_t v4 = __asm_movdqu((int128_t)a2); // 0x404cda\n                    *(char *)(a1 + 216) = 1;\n                    __asm_movups(*(int128_t *)(a1 + 32), v4);\n                    *v2 = result;\n                    return result;\n                }\n                // 0x404e00\n                *v3 = 1;\n                goto lab_0x404e10;\n            }\n        }\n    }\n  lab_0x404cf8:\n    if (result >= 5) {\n        // 0x404d02\n        *v1 = result3 + 1;\n        *(int64_t *)(a1 + 48) = result - 4;\n        *(int64_t *)(a1 + 64) = (a3 / 0x8000000000000000 & -100) + a3;\n        *(int64_t *)(a1 + 56) = a3 / 0x8000000000000000;\n        *(int64_t *)(a1 + 40) = a3 / 0x8000000000000000;\n        return 0x346dc5d63886594b * a3;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 200); // 0x404d98\n    *v5 = *v5 + 1;\n    if (result >= 3) {\n        // 0x404da6\n        *(int64_t *)(a1 + 72) = a3 / 0x8000000000000000;\n        int64_t result2 = a3 / 0x8000000000000000 & 100; // 0x404dd3\n        *(int64_t *)(a1 + 80) = a3 - result2;\n        // 0x404dde\n        *(int64_t *)(a1 + 88) = 0;\n        *(int64_t *)(a1 + 96) = 0;\n        *(int32_t *)(a1 + 28) = 2;\n        return result2;\n    }\n    goto lab_0x404e10;\n  lab_0x404e10:\n    // 0x404e10\n    *(int64_t *)(a1 + 72) = a3;\n    *(int64_t *)(a1 + 80) = 0;\n    // 0x404dde\n    *(int64_t *)(a1 + 88) = 0;\n    *(int64_t *)(a1 + 96) = 0;\n    *(int32_t *)(a1 + 28) = 2;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404f19",
            "decompiledFuncCode": "int64_t function_404e20(int32_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int32_t v1 = a1 / 797; // 0x404e5d\n    int32_t v2 = __sprintf_chk((char *)a2, 1, -1, \"%c%02d\", 43, (int64_t)(v1 < 0 ? -v1 : v1)); // 0x404e75\n    int32_t v3 = -3600 * v1 + a1; // 0x404e7a\n    if (v3 == 0) {\n        // 0x404ee0\n        return result;\n    }\n    int64_t v4 = (int64_t)v2 + result; // 0x404e8b\n    *(char *)v4 = 58;\n    *(char *)(v4 + 1) = 48;\n    uint32_t v5 = (v3 < 0 ? -v3 : v3) % 60;\n    if (v5 != 0) {\n        // 0x404ef0\n        *(char *)(v4 + 3) = 58;\n        char v6 = v5 / 10;\n        *(char *)(v4 + 4) = v6 | 48;\n        *(char *)(v4 + 5) = (char)v5 + 48 + -10 * v6;\n        *(char *)(v4 + 6) = 0;\n    } else {\n        // 0x404edd\n        *(char *)(v4 + 3) = 0;\n    }\n    // 0x404ee0\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "404f8e",
            "decompiledFuncCode": "int64_t function_404f20(int32_t a1, int64_t * a2, int32_t a3, int64_t a4) {\n    int32_t v1 = a1 + 1900; // 0x404f62\n    char * v2 = v1 < 0 == ((v1 ^ a1) & (a1 ^ -0x80000000)) < 0 ? (char *)((int64_t)\"-%02d%02d\" + 1) : \"-%02d%02d\"; // 0x404f84\n    __sprintf_chk((char *)a2, 1, -1, v2);\n    return (int64_t)a2;\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "40504e",
            "decompiledFuncCode": "int64_t function_404f90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404f90\n    int64_t v1; // 0x404f90\n    if ((char)v1 != 0) {\n        // 0x404fb8\n        int128_t v2; // 0x404f90\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x404fef\n    fwrite((int64_t *)\"date: \", 1, 6, g47);\n    int64_t v3 = 8; // bp-208, 0x40502b\n    return function_40e010((int64_t)g47, a1, &v3);\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "4050bb",
            "decompiledFuncCode": "int64_t function_405050(int64_t a1, int32_t * a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = a4; // bp-80, 0x405058\n    int64_t v2 = (int64_t)a3; // 0x405061\n    if (a4 == -1) {\n        // 0x4050a0\n        int64_t v3; // bp-72, 0x405050\n        v2 = function_40de20(a1, &v1, &v3);\n        if (v2 == 0) {\n            // 0x405092\n            return 0;\n        }\n    }\n    int64_t v4 = (int64_t)a2;\n    int32_t v5 = *(int32_t *)(v4 + 4); // 0x405065\n    int32_t v6 = *(int32_t *)v2; // 0x405068\n    int32_t v7 = *(int32_t *)(v2 + 4); // 0x40506a\n    int32_t v8 = *(int32_t *)(v4 + 8); // 0x40506f\n    int32_t v9 = *(int32_t *)(v2 + 8); // 0x405072\n    int32_t v10 = *(int32_t *)(v4 + 12); // 0x405077\n    int32_t v11 = *(int32_t *)(v2 + 12); // 0x40507a\n    int32_t v12 = *(int32_t *)(v4 + 16); // 0x40507f\n    int32_t v13 = *(int32_t *)(v2 + 16); // 0x405082\n    int32_t v14 = *(int32_t *)(v2 + 20) ^ *(int32_t *)(v4 + 20); // 0x40508a\n    int64_t v15; // 0x405050\n    int64_t result = (int64_t)((v7 ^ v5 | v6 ^ (int32_t)v15 | v9 ^ v8 | v11 ^ v10 | v13 ^ v12 | v14) == 0) | (int64_t)(v14 & -256); // 0x40508f\n    // 0x405092\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050f5",
            "decompiledFuncCode": "int64_t function_4050c0(uint64_t a1, int64_t a2, char * a3) {\n    // 0x4050c0\n    __fprintf_chk(g47, 1, (char *)((a1 % 256 ^ 1) + (int64_t)\" %+ld %s\"));\n    return 1;\n}\n"
        },
        {
            "funcName": "function_405100",
            "funcStartAddr": "405100",
            "funcEndAddr": "4051b5",
            "decompiledFuncCode": "int64_t function_405100(int64_t a1, char a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1; // 0x405100\n    int64_t v2; // 0x405100\n    if (a4 > 2) {\n        if (a5 >= 0) {\n            goto lab_0x40510e;\n        } else {\n            // 0x40517d\n            v1 = (uint64_t)a3 / 0x8000000000000000;\n            v2 = (a3 >> 63 & -100) + a3;\n            goto lab_0x405162;\n        }\n    } else {\n        // 0x405109\n        v1 = a3;\n        v2 = 0;\n        if (a5 < 0) {\n            goto lab_0x405162;\n        } else {\n            goto lab_0x40510e;\n        }\n    }\n  lab_0x40510e:;\n    int128_t v3 = a3; // 0x405110\n    int128_t v4 = 60 * v3; // 0x405110\n    int64_t v5 = v4; // 0x405110\n    int64_t v6; // 0x405100\n    int64_t v7; // 0x405100\n    if (a2 != 0) {\n        int64_t v8 = v5 - a5; // 0x405152\n        v6 = v8;\n        v7 = (v8 ^ v5) & (v5 ^ a5);\n    } else {\n        int64_t v9 = v5 + a5; // 0x40511e\n        v6 = v9;\n        v7 = (v9 ^ v5) & (v9 ^ a5);\n    }\n    int64_t v10 = v6; // 0x405128\n    if (v4 != 0x3c0000000000000000 * v3 >> 64 || v7 < 0) {\n        // 0x405148\n        return 0;\n    }\n    goto lab_0x40512a;\n  lab_0x405162:\n    // 0x405162\n    v10 = v2 + 60 * v1;\n    goto lab_0x40512a;\n  lab_0x40512a:;\n    int64_t result = 0; // 0x40513a\n    if (v10 < 1441) {\n        // 0x40513c\n        *(int32_t *)a1 = 60 * (int32_t)v10;\n        result = 1;\n    }\n    // 0x405148\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "40527a",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t a1, int64_t a2) {\n    char * str = (char *)a2;\n    int64_t v1 = (int64_t)&g10; // 0x4051d4\n    int64_t str2 = (int64_t)\"GMT\"; // 0x4051d4\n    int64_t result = v1; // 0x4051f6\n    int64_t v2; // 0x4051c0\n    int64_t v3; // 0x4051c0\n    int64_t str4; // 0x4051c0\n    int64_t str3; // 0x4051c0\n    while (strcmp(str, (char *)str2) != 0) {\n        // 0x4051e0\n        v1 += 16;\n        str2 = *(int64_t *)v1;\n        if (str2 == 0) {\n            int64_t v4 = a1 + 232; // 0x405200\n            int64_t v5 = *(int64_t *)v4; // 0x405200\n            v3 = v4;\n            str3 = v5;\n            if (v5 != 0) {\n                goto lab_0x405254;\n            } else {\n                // 0x405218\n                v2 = (int64_t)&g9;\n                str4 = (int64_t)\"WET\";\n                goto lab_0x405234;\n            }\n        }\n        result = v1;\n    }\n    // 0x4051f8\n    return result;\n  lab_0x405254:\n    // 0x405254\n    result = v3;\n    if (strcmp(str, (char *)str3) != 0) {\n        int64_t v6 = v3 + 16; // 0x405248\n        int64_t v7 = *(int64_t *)v6; // 0x40524c\n        v3 = v6;\n        str3 = v7;\n        if (v7 == 0) {\n            // 0x405218\n            v2 = (int64_t)&g9;\n            str4 = (int64_t)\"WET\";\n            goto lab_0x405234;\n        } else {\n            goto lab_0x405254;\n        }\n    } else {\n        return result;\n    }\n  lab_0x405234:\n    // 0x405234\n    result = v2;\n    if (strcmp(str, (char *)str4) != 0) {\n        int64_t v8 = v2 + 16; // 0x405228\n        int64_t v9 = *(int64_t *)v8; // 0x40522c\n        result = 0;\n        v2 = v8;\n        str4 = v9;\n        if (v9 == 0) {\n            return result;\n        } else {\n            goto lab_0x405234;\n        }\n    } else {\n        return result;\n    }\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "405405",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int64_t a2) {\n    // 0x405280\n    int64_t v1; // 0x405280\n    function_404f90((int64_t)dcgettext(NULL, \"parsed %s part: \", 5), a1, 5, v1, v1, v1);\n    int64_t v2 = *(int64_t *)(a2 + 104); // 0x4052aa\n    int64_t v3; // 0x405280\n    int64_t v4; // 0x405280\n    int64_t v5; // 0x405280\n    int64_t v6; // 0x405280\n    int64_t v7; // 0x405280\n    int64_t v8; // 0x405280\n    if (v2 != 0) {\n        uint64_t v9 = function_4050c0(0, v2, \"year(s)\"); // 0x4053e7\n        int64_t v10 = *(int64_t *)(a2 + 112); // 0x4053ec\n        int64_t v11 = v9 % 256; // 0x4053f0\n        v3 = v11;\n        v7 = v10;\n        v4 = v11;\n        if (v10 != 0) {\n            goto lab_0x4052c6;\n        } else {\n            goto lab_0x4052d7;\n        }\n    } else {\n        int64_t v12 = *(int64_t *)(a2 + 112); // 0x4052b7\n        v3 = 0;\n        v7 = v12;\n        if (v12 == 0) {\n            int64_t v13 = *(int64_t *)(a2 + 120); // 0x405368\n            v5 = 0;\n            v8 = v13;\n            if (v13 != 0) {\n                goto lab_0x4052dc;\n            } else {\n                // 0x405377\n                v6 = 0;\n                if (*(int64_t *)(a2 + 128) == 0) {\n                    // 0x405385\n                    v6 = 0;\n                    if (*(int64_t *)(a2 + 136) == 0) {\n                        // 0x405393\n                        v6 = 0;\n                        if (*(int64_t *)(a2 + 144) == 0) {\n                            // 0x4053a1\n                            v6 = 0;\n                            if (*(int32_t *)(a2 + 152) == 0) {\n                                // 0x4053af\n                                return fputs(dcgettext(NULL, \"today/this/now\\n\", 5), g47);\n                            }\n                        }\n                    }\n                }\n                goto lab_0x4052e9;\n            }\n        } else {\n            goto lab_0x4052c6;\n        }\n    }\n  lab_0x4052c6:\n    // 0x4052c6\n    v4 = function_4050c0(v3, v7, \"month(s)\") % 256;\n    goto lab_0x4052d7;\n  lab_0x4052d7:;\n    int64_t v14 = *(int64_t *)(a2 + 120);\n    v5 = v4;\n    v8 = v14;\n    v6 = v4;\n    if (v14 == 0) {\n        goto lab_0x4052e9;\n    } else {\n        goto lab_0x4052dc;\n    }\n  lab_0x4052e9:;\n    int64_t v15 = *(int64_t *)(a2 + 128); // 0x4052e9\n    int64_t v16 = v6; // 0x4052f3\n    if (v15 != 0) {\n        // 0x4052f5\n        v16 = function_4050c0(v6, v15, \"hour(s)\") % 256;\n    }\n    int64_t v17 = *(int64_t *)(a2 + 136); // 0x405302\n    int64_t v18 = v16; // 0x40530c\n    if (v17 != 0) {\n        // 0x40530e\n        v18 = function_4050c0(v16, v17, \"minutes\") % 256;\n    }\n    int64_t v19 = *(int64_t *)(a2 + 144); // 0x40531b\n    int64_t v20 = v18; // 0x405325\n    if (v19 != 0) {\n        // 0x405327\n        v20 = function_4050c0(v18, v19, \"seconds\") % 256;\n    }\n    int32_t v21 = *(int32_t *)(a2 + 152); // 0x405334\n    if (v21 != 0) {\n        // 0x405340\n        function_4050c0(v20, (int64_t)v21, \"nanoseconds\");\n    }\n    // 0x40534a\n    return fputc(10, g47);\n  lab_0x4052dc:\n    // 0x4052dc\n    v6 = function_4050c0(v5, v8, \"day(s)\") % 256;\n    goto lab_0x4052e9;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "4054a5",
            "decompiledFuncCode": "int64_t function_405410(int32_t * a1, int64_t * a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = (int64_t)a3;\n    int64_t v1; // 0x405410\n    int64_t v2 = function_40ff70(result, 100, \"(Y-M-D) %Y-%m-%d %H:%M:%S\", (int64_t)a1, 0, 0, v1, v1, v1); // 0x405434\n    int32_t v3 = v2; // 0x405444\n    if (a2 == NULL || v3 > 99) {\n        // 0x405451\n        return result;\n    }\n    int64_t v4 = (int64_t)a2;\n    if (*(int64_t *)(v4 + 208) == 0) {\n        // 0x405451\n        return result;\n    }\n    // 0x405460\n    int64_t v5; // bp-56, 0x405410\n    int64_t v6 = function_404e20(*(int32_t *)(v4 + 24), &v5); // 0x405468\n    __snprintf_chk((char *)((0x100000000 * v2 >> 32) + result), 100 - v3, 1, -1, \" TZ=%s\", (char *)v6);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4054b0",
            "funcStartAddr": "4054b0",
            "funcEndAddr": "40559d",
            "decompiledFuncCode": "int64_t function_4054b0(int64_t a1, int64_t * str) {\n    int64_t result = (int64_t)str;\n    if (*(char *)(a1 + 224) == 0) {\n        // 0x405558\n        *(char *)str = 0;\n        if (*(int32_t *)(a1 + 16) >= 7) {\n            // 0x40554a\n            return result;\n        }\n        // 0x405571\n        __snprintf_chk((char *)result, 100, 1, -1, (char *)0x4144ac);\n        return result;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x4054c9\n    uint64_t v2 = v1 + 1; // 0x4054cd\n    int32_t v3; // 0x4054b0\n    if (v2 < 14) {\n        int32_t chars_printed = snprintf((char *)str, 100, \"%s\", (char *)(v1 + (int64_t)\"last\" + 1 + 10 * v2)); // 0x4054f2\n        v3 = chars_printed;\n        if (chars_printed < 100 != *(int32_t *)(a1 + 16) < 7) {\n            // 0x40554a\n            return result;\n        }\n    } else {\n        // 0x405520\n        v3 = __snprintf_chk((char *)str, 100, 1, -1, \"%ld\", (int32_t)v1);\n        if (*(int32_t *)(a1 + 16) >= 7) {\n            // 0x40554a\n            return result;\n        }\n    }\n    char * v4 = v3 == 0 ? (char *)0x4144ac : (char *)0x4144ab; // 0x40551d\n    int32_t v5 = (0x6400000000 - 0x100000000 * (int64_t)v3) / 0x100000000;\n    __snprintf_chk((char *)((int64_t)v3 + result), v5, 1, -1, v4);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "405940",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2) {\n    // 0x4055a0\n    int64_t v1; // 0x4055a0\n    function_404f90((int64_t)dcgettext(NULL, \"parsed %s part: \", 5), a1, 5, v1, v1, v1);\n    char * v2; // 0x4055a0\n    char * v3; // 0x4055a0\n    int64_t v4; // 0x4055a0\n    if (*(int64_t *)(a2 + 168) == 0) {\n        goto lab_0x4055e5;\n    } else {\n        char * v5 = (char *)(a2 + 218); // 0x4055d8\n        if (*v5 == 0) {\n            int64_t v6 = *(int64_t *)(a2 + 40); // 0x4057c0\n            int64_t v7 = *(int64_t *)(a2 + 64); // 0x4057c4\n            int64_t v8 = *(int64_t *)(a2 + 56); // 0x4057cf\n            __fprintf_chk(g47, 1, \"(Y-M-D) %04ld-%02ld-%02ld\", (int32_t)v6, (int32_t)v8, (int32_t)v7);\n            *v5 = 1;\n            char * v9 = (char *)(a2 + 223);\n            char * v10 = (char *)(a2 + 216);\n            v4 = 1;\n            if (*v10 == *v9) {\n                goto lab_0x405636;\n            } else {\n                // 0x405803\n                fputc(32, g47);\n                v3 = v9;\n                v2 = v10;\n                goto lab_0x4055f6;\n            }\n        } else {\n            goto lab_0x4055e5;\n        }\n    }\n  lab_0x4055e5:;\n    char * v11 = (char *)(a2 + 223);\n    char * v12 = (char *)(a2 + 216);\n    v3 = v11;\n    v2 = v12;\n    v4 = 0;\n    if (*v12 == *v11) {\n        goto lab_0x405636;\n    } else {\n        goto lab_0x4055f6;\n    }\n  lab_0x405636:;\n    // 0x405636\n    char * v13; // 0x4055a0\n    int64_t v14; // 0x4055a0\n    if (*(int64_t *)(a2 + 200) == 0) {\n        goto lab_0x40564d;\n    } else {\n        char * v15 = (char *)(a2 + 221); // 0x405640\n        if (*v15 == 0) {\n            // 0x405820\n            __fprintf_chk(g47, 1, (char *)((v4 | (int64_t)\" %02ld:%02ld:%02ld\") ^ 1));\n            int64_t v16 = *(int64_t *)(a2 + 96); // 0x40584c\n            if (v16 != 0) {\n                // 0x4058f8\n                __fprintf_chk(g47, 1, \".%09d\", v16);\n            }\n            // 0x405859\n            if (*(int32_t *)(a2 + 28) == 1) {\n                // 0x405920\n                fwrite((int64_t *)\"pm\", 1, 2, g47);\n            }\n            // 0x405863\n            *v15 = 1;\n            v14 = 1;\n            if (*(int64_t *)(a2 + 176) == 0) {\n                goto lab_0x4056ba;\n            } else {\n                char * v17 = (char *)(a2 + 219);\n                unsigned char v18 = *v17; // 0x40587d\n                v14 = v18;\n                v13 = v17;\n                if (v18 != 0) {\n                    goto lab_0x4056ba;\n                } else {\n                    goto lab_0x40588c;\n                }\n            }\n        } else {\n            goto lab_0x40564d;\n        }\n    }\n  lab_0x4055f6:\n    // 0x4055f6\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"year: %04ld\", 5));\n    *v3 = *v2;\n    v4 = 1;\n    goto lab_0x405636;\n  lab_0x40564d:\n    // 0x40564d\n    v14 = v4;\n    char * v19; // 0x4055a0\n    if (*(int64_t *)(a2 + 176) == 0) {\n        goto lab_0x4056ba;\n    } else {\n        char * v20 = (char *)(a2 + 219);\n        v14 = v4;\n        if (*v20 != 0) {\n            goto lab_0x4056ba;\n        } else {\n            // 0x405660\n            v19 = v20;\n            v13 = v20;\n            if (v4 != 0) {\n                goto lab_0x40588c;\n            } else {\n                goto lab_0x405668;\n            }\n        }\n    }\n  lab_0x4056ba:;\n    // 0x4056ba\n    char * v21; // 0x4055a0\n    int64_t v22; // 0x4055a0\n    if (*(int64_t *)(a2 + 184) == 0) {\n        goto lab_0x405750;\n    } else {\n        char * v23 = (char *)(a2 + 220); // 0x4056c8\n        if (*v23 != 0) {\n            goto lab_0x405750;\n        } else {\n            // 0x4056d1\n            __fprintf_chk(g47, 1, (char *)((v14 ^ 1) + (int64_t)\" isdst=%d%s\"));\n            *v23 = 1;\n            if (*(int64_t *)(a2 + 208) == 0) {\n                goto lab_0x405729;\n            } else {\n                char * v24 = (char *)(a2 + 222);\n                v21 = v24;\n                v22 = (int64_t)\" UTC%s\";\n                if (*v24 == 0) {\n                    goto lab_0x4058b5;\n                } else {\n                    goto lab_0x405729;\n                }\n            }\n        }\n    }\n  lab_0x405750:\n    // 0x405750\n    if (*(int64_t *)(a2 + 208) == 0) {\n        goto lab_0x405767;\n    } else {\n        char * v25 = (char *)(a2 + 222);\n        if (*v25 == 0) {\n            // 0x4058a8\n            v21 = v25;\n            v22 = (v14 ^ 1) + (int64_t)\" UTC%s\";\n            goto lab_0x4058b5;\n        } else {\n            goto lab_0x405767;\n        }\n    }\n  lab_0x405767:\n    // 0x405767\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x4057a2\n        return fputc(10, g47);\n    }\n    if ((char)v14 != 0) {\n        // 0x405736\n        fputc(32, g47);\n        goto lab_0x405778;\n    } else {\n        goto lab_0x405778;\n    }\n  lab_0x40588c:\n    // 0x40588c\n    fputc(32, g47);\n    v19 = v13;\n    goto lab_0x405668;\n  lab_0x405668:;\n    // 0x405668\n    int64_t v26; // bp-152, 0x4055a0\n    function_4054b0(a2, &v26);\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s (day ordinal=%ld number=%d)\", 5));\n    *v19 = 1;\n    v14 = 1;\n    goto lab_0x4056ba;\n  lab_0x405778:\n    // 0x405778\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"number of seconds: %ld\", 5));\n    // 0x4057a2\n    return fputc(10, g47);\n  lab_0x405729:\n    // 0x405729\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x4057a2\n        return fputc(10, g47);\n    }\n    // 0x405736\n    fputc(32, g47);\n    goto lab_0x405778;\n  lab_0x4058b5:\n    // 0x4058b5\n    function_404e20(*(int32_t *)(a2 + 24), &v26);\n    __fprintf_chk(g47, 1, (char *)v22);\n    *v21 = 1;\n    if (*(char *)(a2 + 160) == 0) {\n        // 0x4057a2\n        return fputc(10, g47);\n    }\n    // 0x405736\n    fputc(32, g47);\n    goto lab_0x405778;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "407bb2",
            "decompiledFuncCode": "int64_t function_405940(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405940\n    int64_t v1; // bp-1512, 0x405940\n    int64_t v2 = &v1; // 0x405968\n    int64_t v3; // bp-1352, 0x405940\n    int64_t v4 = &v3; // 0x40596f\n    v3 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 16);\n    int64_t v6 = v2 + 56;\n    int64_t * v7 = (int64_t *)v6;\n    int64_t v8 = v2 + 64;\n    int64_t * v9 = (int64_t *)(v2 + 8);\n    int64_t * v10 = (int64_t *)v8;\n    int64_t v11 = v2 + 208;\n    int64_t * v12 = (int64_t *)(v2 + 40);\n    int64_t * v13 = (int64_t *)(v2 + 48);\n    int32_t * v14 = (int32_t *)(v2 + 36);\n    int64_t v15 = v2 + 224;\n    int64_t v16 = v2 + 272;\n    int128_t * v17 = (int128_t *)v16;\n    int64_t v18 = v2 + 320;\n    int64_t * v19 = (int64_t *)v18;\n    int64_t v20 = v2 + 288;\n    int128_t * v21 = (int128_t *)v20;\n    int64_t v22 = v2 + 304;\n    int128_t * v23 = (int128_t *)v22;\n    int32_t * v24 = (int32_t *)(v2 + 24);\n    int64_t v25 = v2 + 72;\n    int64_t * v26 = (int64_t *)v25;\n    int64_t * v27 = (int64_t *)(v2 - 16);\n    int64_t * v28 = (int64_t *)(v2 - 24);\n    int64_t * v29 = (int64_t *)(v2 - 32);\n    int32_t * v30 = (int32_t *)(v2 + 324);\n    char * v31 = (char *)v8;\n    int64_t v32 = v2 + 88;\n    int64_t * v33 = (int64_t *)v32;\n    int64_t * v34 = (int64_t *)(v2 + 96);\n    int64_t v35 = v2 + 104;\n    int64_t * v36 = (int64_t *)v35;\n    int64_t * v37 = (int64_t *)(v2 + 80);\n    int64_t * v38 = (int64_t *)(v2 + 112);\n    int64_t * v39 = (int64_t *)(v2 + 120);\n    int32_t * v40 = (int32_t *)v35;\n    int32_t * v41 = (int32_t *)v32;\n    int64_t v42; // bp-1176, 0x405940\n    int64_t v43 = &v42; // 0x405940\n    int64_t v44 = 0xfffffffe; // 0x405940\n    int64_t v45 = 0; // 0x405940\n    int64_t v46 = (int64_t)a1; // 0x405940\n    int64_t v47 = v4; // 0x405940\n    int64_t v48 = 38; // 0x405940\n    int64_t v49; // 0x405940\n    int64_t v50; // 0x405940\n    int64_t v51; // 0x405940\n    int64_t v52; // 0x405940\n    int64_t v53; // 0x405940\n    int64_t v54; // 0x405940\n    int64_t v55; // 0x405940\n    int64_t v56; // 0x405940\n    int64_t v57; // 0x405940\n    int64_t v58; // 0x405940\n    int64_t v59; // 0x405940\n    int64_t v60; // 0x405940\n    int64_t v61; // 0x405940\n    int64_t v62; // 0x405940\n    int64_t v63; // 0x405940\n    int64_t v64; // 0x405940\n    int64_t v65; // 0x405940\n    int64_t v66; // 0x405940\n    int64_t v67; // 0x405940\n    int64_t v68; // 0x405940\n    int64_t v69; // 0x405940\n    int64_t v70; // 0x405940\n    int64_t * v71; // 0x405bf0\n    int128_t v72; // 0x405940\n    int128_t v73; // 0x405940\n    while (true) {\n      lab_0x40599c:\n        // 0x40599c\n        v53 = v48;\n        v52 = v47;\n        v59 = v46;\n        v56 = v45;\n        v65 = v43;\n        v73 = v72;\n        int32_t v74 = v44;\n        int32_t v75 = v74; // 0x40599f\n        int64_t v76 = v65; // 0x40599f\n        int64_t v77 = v44; // 0x40599f\n        int64_t v78 = v56; // 0x40599f\n        int64_t v79 = v59; // 0x40599f\n        int64_t v80 = v53; // 0x40599f\n        if (v74 == -2) {\n            // 0x405bf0\n            v71 = (int64_t *)v59;\n            int64_t v81 = *v71; // 0x405bf0\n            v49 = v81;\n            v68 = (int64_t)*(char *)v81;\n            while (true) {\n              lab_0x405c07_2:;\n                int64_t v82 = v68;\n                int64_t v83 = v49;\n                v51 = v83;\n                v70 = v82;\n                if (v82 < 33) {\n                    int64_t v84 = v83; // 0x405c28\n                    v50 = v83;\n                    v69 = v82;\n                    if ((1 << v82 % 64 & 0x100003e00) == 0) {\n                        goto lab_0x405c61;\n                    } else {\n                        int64_t v85 = v84 + 1;\n                        *v71 = v85;\n                        unsigned char v86 = *(char *)v85; // 0x405c31\n                        int64_t v87 = v86; // 0x405c31\n                        v51 = v85;\n                        v70 = v87;\n                        while (v86 < 33) {\n                            // 0x405c43\n                            v84 = v85;\n                            v50 = v85;\n                            v69 = v87;\n                            if ((1 << v87 % 64 & 0x100003e00) == 0) {\n                                goto lab_0x405c61;\n                            }\n                            v85 = v84 + 1;\n                            *v71 = v85;\n                            v86 = *(char *)v85;\n                            v87 = v86;\n                            v51 = v85;\n                            v70 = v87;\n                        }\n                        goto lab_0x405d80;\n                    }\n                } else {\n                    goto lab_0x405d80;\n                }\n            }\n            goto lab_0x405ea9_3;\n        } else {\n            int64_t v88 = v80;\n            int64_t v89 = v79;\n            int64_t v90 = v78;\n            int64_t v91 = v76;\n            int32_t v92 = v75;\n            v62 = 0;\n            v66 = v91;\n            v64 = 0;\n            v57 = v90;\n            v60 = v89;\n            v54 = v88;\n            if (v92 < 1) {\n                goto lab_0x4059c2;\n            } else {\n                int64_t v93 = v77;\n                v67 = v91;\n                v63 = v93;\n                v58 = v90;\n                v61 = v89;\n                v55 = v88;\n                if (v92 < 278) {\n                    goto lab_0x405e58;\n                } else {\n                    // 0x4059b9\n                    v62 = 2;\n                    v66 = v91;\n                    v64 = v93;\n                    v57 = v90;\n                    v60 = v89;\n                    v54 = v88 + 2 & 0xffffffff;\n                    goto lab_0x4059c2;\n                }\n            }\n        }\n    }\n  lab_0x405abd_8:;\n    // 0x405abd\n    int64_t result; // 0x405940\n    return result;\n  lab_0x405c61:;\n    int64_t v94 = v69;\n    int64_t v95 = v50;\n    int64_t v96 = v95; // 0x405c67\n    int64_t v97 = v94; // 0x405c67\n    int64_t v98 = 0; // 0x405c67\n    if ((int32_t)v94 < 58) {\n        // break -> 0x405ea9\n        goto lab_0x405ea9_3;\n    }\n    int64_t v99 = v94 + 0xffffffbf; // 0x405c6d\n    int64_t v100 = v95; // 0x405c73\n    int64_t v101 = v95; // 0x405c73\n    int64_t v102 = v99; // 0x405c73\n    int64_t v103 = v94; // 0x405c73\n    if ((int32_t)v99 >= 58) {\n        goto lab_0x405bb5_2;\n    }\n    goto lab_0x405c79;\n  lab_0x405c07:;\n    // 0x405c07\n    int64_t v114; // 0x405940\n    v49 = v114;\n    int64_t v115; // 0x405940\n    v68 = v115;\n    goto lab_0x405c07_2;\n  lab_0x405cb4:;\n    // 0x405cb4\n    int64_t v106; // 0x405940\n    int64_t v116 = v106;\n    int64_t v105; // 0x405940\n    int64_t v117 = v105;\n    int64_t v118 = v117; // 0x405cb7\n    int64_t v104; // 0x405940\n    if (v117 >= v2 + 147) {\n        goto lab_0x405cbf;\n    } else {\n        // 0x405cb9\n        *(char *)v117 = (char)v104;\n        v118 = v117 + 1;\n        goto lab_0x405cbf;\n    }\n  lab_0x405bb5_2:\n    // 0x405bb5\n    *v71 = v100 + 1;\n    unsigned char v119 = *(char *)v100; // 0x405bbc\n    v62 = 0;\n    v66 = v65;\n    v64 = 0;\n    v57 = v56;\n    v60 = v59;\n    v54 = v53;\n    v67 = v65;\n    v63 = v119;\n    v58 = v56;\n    v61 = v59;\n    v55 = v53;\n    if (v119 != 0) {\n        goto lab_0x405e58;\n    } else {\n        goto lab_0x4059c2;\n    }\n  lab_0x4059c2:;\n    int64_t v120 = v54;\n    int64_t v121 = v60;\n    int64_t v122 = v57;\n    int64_t v123 = v64;\n    int64_t v124 = v66;\n    int128_t v125 = v73; // 0x4059c6\n    int64_t v126 = v124; // 0x4059c6\n    int64_t v127 = v123; // 0x4059c6\n    int64_t v128 = v122; // 0x4059c6\n    int64_t v129 = v121; // 0x4059c6\n    int64_t v130 = v52; // 0x4059c6\n    int64_t v131; // 0x405940\n    int64_t v132; // 0x405940\n    int64_t v133; // 0x405940\n    int64_t v134; // 0x405940\n    int64_t v135; // 0x405940\n    int64_t v136; // 0x405940\n    int64_t v137; // 0x405940\n    int64_t v138; // 0x405940\n    int64_t v139; // 0x405940\n    int64_t v140; // 0x405940\n    int64_t v141; // 0x405940\n    int64_t v142; // 0x405940\n    int64_t v143; // 0x405940\n    int64_t v144; // 0x405940\n    int64_t v145; // 0x405940\n    int128_t v146; // 0x405940\n    int128_t v147; // 0x405940\n    if ((int32_t)v120 < 113) {\n        int64_t v148 = 0x100000000 * v120 >> 32; // 0x4059cc\n        char v149 = *(char *)(v148 + (int64_t)&g13); // 0x4059cf\n        v125 = v73;\n        v126 = v124;\n        v127 = v123;\n        v128 = v122;\n        v129 = v121;\n        v130 = v52;\n        if ((int32_t)v149 != (int32_t)v62) {\n            goto lab_0x405a90;\n        } else {\n            unsigned char v150 = *(char *)(v148 + (int64_t)&g14); // 0x4059df\n            if (v150 == 0) {\n                int64_t v151 = v124 + 104; // 0x406060\n                int64_t v152 = v124 + 56; // 0x406064\n                int128_t v153 = __asm_movdqu(*(int128_t *)v152); // 0x406064\n                int64_t v154 = v124 + 72; // 0x40606f\n                int128_t v155 = __asm_movdqu(*(int128_t *)v154); // 0x40606f\n                *v17 = (int128_t)__asm_movaps(v153);\n                int64_t v156 = v124 + 88; // 0x406080\n                int128_t v157 = __asm_movdqu(*(int128_t *)v156); // 0x406080\n                *v19 = *(int64_t *)v151;\n                *v21 = (int128_t)__asm_movaps(v155);\n                *v23 = (int128_t)__asm_movaps(v157);\n                *v5 = *(int64_t *)v156;\n                *v9 = *(int64_t *)(v124 + 96);\n                *v24 = *(int32_t *)v151;\n                v147 = v155;\n                v139 = 0xffffffe4;\n                v144 = v52;\n                v145 = v124;\n                v140 = v123;\n                v135 = 0;\n                v138 = v121;\n                v131 = *(int64_t *)(v124 + 64);\n                v132 = *(int64_t *)(v124 + 80);\n                v133 = *(int64_t *)v154;\n                v134 = *(int64_t *)v152;\n                goto lab_0x4060d0;\n            } else {\n                int32_t v158 = *v14; // 0x4059f0\n                int64_t v159 = v124 + 56; // 0x405a02\n                *v14 = v158 - 1 + (int32_t)(v158 == 0);\n                *(int64_t *)(v2 + 216) = *v12;\n                int128_t v160 = __asm_movdqa(*(int128_t *)v11); // 0x405a1c\n                *(int64_t *)v15 = *v13;\n                int128_t v161 = __asm_movdqa(*(int128_t *)v15); // 0x405a35\n                __asm_movups(*(int128_t *)v159, v160);\n                int128_t v162 = __asm_movdqa(*(int128_t *)(v2 + 240)); // 0x405a41\n                *(int64_t *)(v124 + 104) = *(int64_t *)(v2 + 256);\n                __asm_movups(*(int128_t *)(v124 + 72), v161);\n                __asm_movups(*(int128_t *)(v124 + 88), v162);\n                v146 = v161;\n                v143 = v52;\n                v142 = v159;\n                v141 = 0xfffffffe;\n                v136 = v150;\n                v137 = v121;\n                goto lab_0x405a56;\n            }\n        }\n    } else {\n        goto lab_0x405a90;\n    }\n  lab_0x405e62_2:;\n    // 0x405e62\n    int64_t v163; // 0x405940\n    v62 = v163;\n    int64_t v164; // 0x405940\n    v66 = v164;\n    int64_t v165; // 0x405940\n    v64 = v165;\n    int64_t v166; // 0x405940\n    v57 = v166;\n    int64_t v167; // 0x405940\n    v60 = v167;\n    int64_t v168; // 0x405940\n    v54 = v168 + v163 & 0xffffffff;\n    goto lab_0x4059c2;\n  lab_0x405d80:;\n    int64_t v169 = v70;\n    int64_t v170 = v51; // 0x405e00\n    char v171 = v169;\n    char v107; // 0x405940\n    int64_t v108; // 0x405940\n    if ((int32_t)v169 < 58) {\n        // 0x405df0\n        v96 = v170;\n        v97 = v169;\n        v98 = 0;\n        if ((v171 - 43 & -3) != 0) {\n            // break -> 0x405ea9\n            goto lab_0x405ea9_3;\n        }\n        goto lab_0x405dfe;\n    } else {\n        if ((v171 - 43 & -3) == 0) {\n            goto lab_0x405dfe;\n        } else {\n            int64_t v172 = v169 + 0xffffffbf; // 0x405d96\n            v101 = v170;\n            v102 = v172;\n            v103 = v169;\n            v107 = v171;\n            v108 = v170;\n            if ((int32_t)v172 < 58) {\n                goto lab_0x405c79;\n            } else {\n                goto lab_0x405da2;\n            }\n        }\n    }\n  lab_0x405c79:\n    // 0x405c79\n    v104 = v103;\n    v105 = v2 + 128;\n    v106 = v101;\n    if ((1 << v102 % 64) % 0x3ffffff04000000 != 0) {\n        goto lab_0x405cb4;\n    }\n    // 0x405c79\n    v107 = v103;\n    v108 = v101;\n    goto lab_0x405da2;\n  lab_0x405dfe:;\n    int64_t v563 = v170 + 1;\n    *v71 = v563;\n    unsigned char v564 = *(char *)v563; // 0x405e12\n    int64_t v565 = v564; // 0x405e12\n    while (v564 < 33) {\n        int64_t v566 = v563; // 0x405e36\n        v114 = v563;\n        v115 = v565;\n        if ((1 << v565 % 64 & 0x100003e00) == 0) {\n            goto lab_0x405c07;\n        }\n        v563 = v566 + 1;\n        *v71 = v563;\n        v564 = *(char *)v563;\n        v565 = v564;\n    }\n    // 0x405e70\n    v114 = v563;\n    v115 = v565;\n    if ((int32_t)v564 < 58) {\n        // 0x405e81\n        v96 = v563;\n        v97 = v565;\n        v98 = v171 != 45 ? 1 : 0xffffffff;\n        goto lab_0x405ea9_3;\n    }\n    goto lab_0x405c07;\n  lab_0x405da2:\n    // 0x405da2\n    v100 = v108;\n    int64_t v109 = v108; // 0x405da5\n    if (v107 != 40) {\n        goto lab_0x405bb5_2;\n    }\n    int64_t v110 = v109 + 1; // 0x405dd0\n    *v71 = v110;\n    char v111 = *(char *)v109; // 0x405dd7\n    v62 = 0;\n    v66 = v65;\n    v64 = 0;\n    v57 = v56;\n    v60 = v59;\n    v54 = v53;\n    if (v111 == 0) {\n        goto lab_0x4059c2;\n    }\n    int64_t v112 = v111 != 40 ? (int64_t)(v111 == 41) : 1;\n    v109 = v110;\n    while (v112 != 0) {\n        int64_t v113 = v112;\n        v110 = v109 + 1;\n        *v71 = v110;\n        v111 = *(char *)v109;\n        v62 = 0;\n        v66 = v65;\n        v64 = 0;\n        v57 = v56;\n        v60 = v59;\n        v54 = v53;\n        if (v111 == 0) {\n            goto lab_0x4059c2;\n        }\n        // 0x405de3\n        v112 = (v111 != 40 ? (int64_t)(v111 == 41) : 1) + v113;\n        v109 = v110;\n    }\n    // 0x40604b\n    v114 = v110;\n    v115 = (int64_t)*(char *)v110;\n    goto lab_0x405c07;\n  lab_0x405ea9_3:;\n    int64_t v173 = v98;\n    int64_t v174 = v96;\n    uint64_t v175 = v97 % 256; // 0x405e86\n    int64_t v176 = v174;\n    int64_t v177 = 0x100000000 * (v173 == 0xffffffff ? 48 - v175 : v175 + 0xffffffd0) / 0x100000000;\n    int64_t v178 = v176 + 1; // 0x405ea9\n    unsigned char v179 = *(char *)v178; // 0x405ea9\n    while (v179 == 57 || (int32_t)v179 < 57) {\n        int128_t v180 = v177; // 0x405f90\n        int128_t v181 = 10 * v180; // 0x405f90\n        v163 = 2;\n        v164 = v65;\n        v165 = 63;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        if (v181 != 0xa0000000000000000 * v180 >> 64) {\n            goto lab_0x405e62_2;\n        }\n        int64_t v182 = v179; // 0x405ea9\n        int64_t v183 = v181; // 0x405f90\n        int64_t v184 = 0x100000000 * (v173 == 0xffffffff ? 48 - v182 : v182 + 0xffffffd0) >> 32; // 0x405e9d\n        int64_t v185 = v184 + v183; // 0x405ea0\n        v163 = 2;\n        v164 = v65;\n        v165 = 63;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        int64_t v186 = v185; // 0x405ea3\n        int64_t v187 = v178; // 0x405ea3\n        if (((v185 ^ v183) & (v185 ^ v184)) < 0) {\n            goto lab_0x405e62_2;\n        }\n        v176 = v187;\n        v177 = v186;\n        v178 = v176 + 1;\n        v179 = *(char *)v178;\n    }\n    int64_t v188; // 0x405940\n    int64_t v189; // 0x405940\n    int64_t v190; // 0x405940\n    int64_t v191; // 0x405940\n    int64_t v192; // 0x405940\n    int64_t v193; // 0x405940\n    int64_t v194; // 0x405940\n    int64_t v195; // 0x405940\n    if ((v179 - 44 & -3) != 0) {\n        goto lab_0x406010;\n    } else {\n        // 0x405ece\n        if ((int32_t)((int64_t)*(char *)(v176 + 2) + 0xffffffd0) < 10) {\n            int64_t v196; // 0x405940\n            int64_t v197 = v196 + 0xffffffd0; // 0x405ef3\n            int64_t v198; // 0x405940\n            int64_t v199; // 0x405940\n            int64_t v200; // 0x405940\n            int64_t v201; // 0x405940\n            int64_t v202; // 0x405940\n            int64_t v203; // 0x405940\n            int64_t v204; // 0x405ef7\n            int64_t v205; // 0x405efe\n            char v206; // 0x405efe\n            int64_t v207; // 0x405efe\n            if ((int32_t)v197 < 10) {\n                // 0x405efe\n                v205 = v200 + 1;\n                v206 = *(char *)v205;\n                v207 = v206;\n                v203 = v197 + v204 & 0xffffffff;\n                v201 = v205;\n                v202 = v207 + 0xffffffd0;\n                v198 = v207;\n                v199 = v207 & 0xffffffff;\n            }\n            // 0x405f10\n            int64_t v208; // 0x405940\n            int64_t v209 = v208;\n            int64_t v210; // 0x405940\n            int64_t v211 = v210;\n            int64_t v212; // 0x405940\n            v195 = 10 * v212 & 0xfffffffe;\n            int32_t v213; // 0x405940\n            int32_t v214 = v213 - 1; // 0x405f10\n            v213 = v214;\n            v212 = v195;\n            v210 = v211;\n            v208 = v209;\n            // 0x405ede\n            while (v214 != 0) {\n                // 0x405ef0\n                v197 = v196 + 0xffffffd0;\n                if ((int32_t)v197 < 10) {\n                    // 0x405efe\n                    v205 = v200 + 1;\n                    v206 = *(char *)v205;\n                    v207 = v206;\n                    v203 = v197 + v204 & 0xffffffff;\n                    v201 = v205;\n                    v202 = v207 + 0xffffffd0;\n                    v198 = v207;\n                    v199 = v207 & 0xffffffff;\n                }\n                // 0x405f10\n                v209 = v208;\n                v211 = v210;\n                v195 = 10 * v212 & 0xfffffffe;\n                v214 = v213 - 1;\n                v213 = v214;\n                v212 = v195;\n                v210 = v211;\n                v208 = v209;\n            }\n            int64_t v215 = v197;\n            if (v173 == 0xffffffff) {\n                // 0x4062b1\n                v191 = v211;\n                if ((int32_t)v215 < 10) {\n                    int64_t v216 = v211; // 0x4062be\n                    int32_t v217; // 0x405940\n                    char v218; // 0x405940\n                    int64_t v219; // 0x405940\n                    if ((char)v209 != 48) {\n                        char v220 = *(char *)v211;\n                        v217 = (int32_t)v220 - 48;\n                        v218 = v220;\n                        v219 = v211;\n                      lab_0x4062dc:;\n                        int64_t v221 = v195 + 1 & 0xffffffff; // 0x4062e0\n                        v192 = v221;\n                        v188 = v219;\n                        v193 = v221;\n                        v189 = v219;\n                        if (v217 < 9 || v218 == 57) {\n                            goto lab_0x405f27;\n                        } else {\n                            goto lab_0x405f47;\n                        }\n                    } else {\n                        int64_t v222 = v216 + 1; // 0x4062c0\n                        char v223 = *(char *)v222; // 0x4062c4\n                        int32_t v224 = (int32_t)v223 - 48;\n                        v191 = v222;\n                        while (v223 == 57 || v224 < 9) {\n                            // 0x4062d6\n                            v216 = v222;\n                            v217 = v224;\n                            v218 = v223;\n                            v219 = v222;\n                            if (v223 != 48) {\n                                goto lab_0x4062dc;\n                            }\n                            v222 = v216 + 1;\n                            v223 = *(char *)v222;\n                            v224 = (int32_t)v223 - 48;\n                            v191 = v222;\n                        }\n                        goto lab_0x4076d0;\n                    }\n                } else {\n                    goto lab_0x4076d0;\n                }\n            } else {\n                // 0x405f1e\n                v192 = v195;\n                v188 = v211;\n                v194 = v195;\n                v190 = v211;\n                if ((int32_t)v215 < 10) {\n                    goto lab_0x405f27;\n                } else {\n                    goto lab_0x4076a1;\n                }\n            }\n        } else {\n            goto lab_0x406010;\n        }\n    }\n  lab_0x406010:\n    // 0x406010\n    *v71 = v178;\n    *v12 = v177;\n    *(char *)v11 = (char)((int32_t)v173 < 0);\n    *v13 = v178 - v174;\n    v163 = v174 + 20 + (v174 ^ 0xffffffff) + (int64_t)(v173 == 0) & 0xffffffff;\n    v164 = v65;\n    v165 = v178 + (v173 == 0 ? 276 : 275) + (v178 ^ 0xffffffff) & 0xffffffff;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    goto lab_0x405e62_2;\n  lab_0x405a90:;\n    int64_t v225 = v130;\n    int64_t v226 = v129;\n    int64_t v227 = v128;\n    int64_t v228 = v127;\n    int64_t v229 = v126;\n    unsigned char v230 = *(char *)(v227 + (int64_t)&g17); // 0x405a90\n    int64_t v231; // 0x405940\n    int64_t v232; // 0x405940\n    int64_t v233; // 0x405940\n    int64_t v234; // 0x405940\n    int64_t v235; // 0x405940\n    int64_t v236; // 0x405940\n    int64_t v237; // 0x405940\n    int64_t v238; // 0x405940\n    int64_t v239; // 0x405940\n    int64_t v240; // 0x405940\n    int64_t v241; // 0x405940\n    int64_t v242; // 0x405940\n    int64_t v243; // 0x405940\n    int64_t v244; // 0x405940\n    int64_t v245; // 0x405940\n    int64_t v246; // 0x405940\n    int64_t v247; // 0x405940\n    int64_t v248; // 0x405940\n    int64_t v249; // 0x405940\n    int64_t v250; // 0x405940\n    int64_t v251; // 0x405940\n    int64_t v252; // 0x405940\n    int64_t v253; // 0x405940\n    int64_t v254; // 0x405940\n    int64_t v255; // 0x405940\n    int64_t v256; // 0x405940\n    int64_t v257; // 0x405940\n    int64_t v258; // 0x405940\n    char * v259; // 0x405940\n    int64_t v260; // 0x405940\n    int64_t v261; // 0x405940\n    int64_t v262; // 0x405940\n    int64_t v263; // 0x405940\n    int64_t v264; // 0x405940\n    int64_t v265; // 0x405940\n    int64_t v266; // 0x405940\n    int64_t v267; // 0x405b5a\n    int64_t v268; // 0x405b5d\n    int64_t v269; // 0x405b6d\n    int64_t v270; // 0x405b79\n    int128_t v271; // 0x405940\n    int128_t v272; // 0x405940\n    int128_t v273; // 0x405940\n    int128_t v274; // 0x405940\n    int128_t v275; // 0x405940\n    if (v230 != 0) {\n        // 0x405b20\n        v271 = v125;\n        int64_t v276 = v230; // 0x405a90\n        int64_t v277 = (int64_t)*(char *)(v276 + (int64_t)&g11); // 0x405b2b\n        int64_t v278 = 56 * (1 - v277) + v229; // 0x405b44\n        int64_t v279 = v278 + 48; // 0x405b48\n        int128_t v280 = __asm_movdqu(*(int128_t *)v278); // 0x405b4c\n        int64_t v281 = v278 + 16; // 0x405b50\n        int128_t v282 = __asm_movdqu(*(int128_t *)v281); // 0x405b50\n        int64_t v283 = v278 + 32; // 0x405b55\n        int128_t v284 = __asm_movdqu(*(int128_t *)v283); // 0x405b55\n        v267 = *(int64_t *)v278;\n        v268 = *(int64_t *)(v278 + 8);\n        *v19 = *(int64_t *)v279;\n        v269 = *(int64_t *)v281;\n        *v17 = (int128_t)__asm_movaps(v280);\n        v270 = *(int64_t *)(v278 + 24);\n        *v21 = (int128_t)__asm_movaps(v282);\n        *v5 = *(int64_t *)v283;\n        *v23 = (int128_t)__asm_movaps(v284);\n        *v9 = *(int64_t *)(v278 + 40);\n        *v24 = *(int32_t *)v279;\n        g67 = v230 - 4;\n        v252 = (int64_t)\"hybrid\";\n        switch (v230) {\n            case 4: {\n                int128_t v285 = __asm_movdqu(*(int128_t *)v229); // 0x406772\n                *(char *)(v226 + 160) = 1;\n                __asm_movups(*(int128_t *)(v226 + 88), v285);\n                *v26 = v268;\n                *v10 = v270;\n                *v7 = v226;\n                v274 = v285;\n                v247 = v225 - 4;\n                v251 = v229 - 112;\n                v259 = dcgettext(NULL, \"number of seconds\", 5);\n                v257 = 2;\n                goto lab_0x4067b9;\n            }\n            case 7: {\n                // 0x406cc4\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v286 = (int64_t *)(v226 + 200); // 0x406cd8\n                *v286 = *v286 + 1;\n                int64_t * v287 = (int64_t *)(v226 + 168); // 0x406ce0\n                *v287 = *v287 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"datetime\";\n                goto lab_0x40683e;\n            }\n            case 8: {\n                // 0x406c9e\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v288 = (int64_t *)(v226 + 200); // 0x406cb2\n                *v288 = *v288 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"time\";\n                goto lab_0x40683e;\n            }\n            case 9: {\n                // 0x406860\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v289 = (int64_t *)(v226 + 184); // 0x406874\n                *v289 = *v289 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"local_zone\";\n                goto lab_0x40683e;\n            }\n            case 10: {\n                // 0x40681d\n                *v26 = v268;\n                int64_t * v290 = (int64_t *)(v226 + 208); // 0x40682c\n                *v290 = *v290 + 1;\n                *v10 = v270;\n                *v7 = v226;\n                v253 = (int64_t)\"zone\";\n                goto lab_0x40683e;\n            }\n            case 11: {\n                // 0x406f01\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v291 = (int64_t *)(v226 + 168); // 0x406f15\n                *v291 = *v291 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"date\";\n                goto lab_0x40683e;\n            }\n            case 12: {\n                // 0x406edb\n                *v26 = v268;\n                *v10 = v270;\n                int64_t * v292 = (int64_t *)(v226 + 176); // 0x406eef\n                *v292 = *v292 + 1;\n                *v7 = v226;\n                v253 = (int64_t)\"day\";\n                goto lab_0x40683e;\n            }\n            case 13: {\n                // 0x406ebd\n                v252 = (int64_t)\"relative\";\n                goto lab_0x406dd7;\n            }\n            case 14: {\n                // 0x406e3b\n                *v26 = v226;\n                *v10 = v268;\n                *v7 = v270;\n                char * v293 = dcgettext(NULL, \"number\", 5); // 0x406e56\n                int64_t v294 = *v26; // 0x406e5b\n                int64_t v295 = v229 - 56; // 0x406e60\n                int64_t v296 = v225 - 2; // 0x406e64\n                int64_t v297 = *v7; // 0x406e76\n                int64_t v298 = *v10; // 0x406e83\n                v147 = v271;\n                v139 = 4;\n                v144 = v296;\n                v145 = v295;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v294;\n                v131 = v298;\n                v132 = v297;\n                v133 = v269;\n                v134 = v267;\n                if (*(char *)(v294 + 217) == 0) {\n                    goto lab_0x4060d0;\n                } else {\n                    // 0x406e8e\n                    *v40 = -93;\n                    *v34 = v295;\n                    *v41 = 4;\n                    *v37 = v298;\n                    *v26 = v296;\n                    *v10 = v297;\n                    *v7 = v294;\n                    function_4055a0((int64_t)v293, v294);\n                    v275 = v271;\n                    goto lab_0x4067f6;\n                }\n            }\n            case 15: {\n                goto lab_0x406dd7;\n            }\n            case 18: {\n                // 0x406d7f\n                *(int64_t *)(v226 + 80) = 0;\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 96) = 0;\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 19: {\n                // 0x406d3a\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 96) = 0;\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 160);\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 20: {\n                // 0x406cf2\n                *(int64_t *)(v226 + 88) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 272);\n                *(int64_t *)(v226 + 96) = (int64_t)*(int32_t *)(v229 - 48);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 160);\n                *(int32_t *)(v226 + 28) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 7;\n                v144 = v225 - 12;\n                v145 = v229 - 336;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 22: {\n                // 0x406b07\n                *(int64_t *)(v226 + 80) = 0;\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 96) = 0;\n                *(int32_t *)(v226 + 28) = 2;\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 23: {\n                // 0x406ac1\n                *(int64_t *)(v226 + 88) = 0;\n                *(int64_t *)(v226 + 96) = 0;\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 160);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 48);\n                *(int32_t *)(v226 + 28) = 2;\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 24: {\n                // 0x40641f\n                *(int32_t *)(v226 + 28) = 2;\n                *(int64_t *)(v226 + 88) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 72) = *(int64_t *)(v229 - 272);\n                *(int64_t *)(v226 + 80) = *(int64_t *)(v229 - 160);\n                *(int64_t *)(v226 + 96) = (int64_t)*(int32_t *)(v229 - 48);\n                v147 = v271;\n                v139 = 8;\n                v144 = v225 - 12;\n                v145 = v229 - 336;\n                v140 = v228;\n                v135 = 20;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 27: {\n                int64_t v299 = *(int64_t *)(v229 - 40); // 0x4063c1\n                int64_t v300 = *(int64_t *)v229; // 0x4063c5\n                *v26 = v268;\n                int64_t v301 = *(int64_t *)(v229 - 48); // 0x4063d1\n                char v302 = *(char *)(v229 - 56); // 0x4063d5\n                *v10 = v270;\n                int64_t * v303 = (int64_t *)(v226 + 208); // 0x4063de\n                *v303 = *v303 + 1;\n                *v7 = v226;\n                if ((char)function_405100(v226 + 24, v302, v301, v299, v300) == 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x406407\n                v147 = v271;\n                v139 = 10;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffe5;\n                v138 = *v7;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 28: {\n                // 0x4063a2\n                *(int32_t *)(v226 + 20) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 11;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 29: {\n                // 0x40637a\n                *(int32_t *)(v226 + 20) = 1;\n                int64_t * v304 = (int64_t *)(v226 + 192); // 0x406390\n                *v304 = *v304 + 1;\n                v147 = v271;\n                v139 = 11;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 30: {\n                // 0x40635b\n                v256 = *(int64_t *)v229;\n                goto lab_0x40635e;\n            }\n            case 31: {\n                // 0x40633b\n                *(int32_t *)(v226 + 24) = 0x6270;\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 32: {\n                // 0x406c87\n                *v26 = v268;\n                *v10 = v270;\n                *(int32_t *)(v226 + 24) = (int32_t)*(int64_t *)(v229 - 56);\n                goto lab_0x406b59;\n            }\n            case 33: {\n                // 0x406b47\n                *v26 = v268;\n                *v10 = v270;\n                *(int32_t *)(v226 + 24) = 0x6270;\n                goto lab_0x406b59;\n            }\n            case 34: {\n                int64_t v305 = *(int64_t *)(v229 - 40); // 0x406fd5\n                int64_t v306 = *(int64_t *)v229; // 0x406fd9\n                *v26 = v268;\n                int64_t v307 = *(int64_t *)(v229 - 48); // 0x406fe5\n                char v308 = *(char *)(v229 - 56); // 0x406fe9\n                *v10 = v270;\n                *v7 = v226;\n                if ((char)function_405100(v226 + 24, v308, v307, v305, v306) == 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                int64_t v309 = *v7; // 0x407004\n                int32_t * v310 = (int32_t *)(v309 + 24); // 0x40700b\n                int64_t v311 = (int64_t)*v310; // 0x40700b\n                int64_t v312 = *(int64_t *)(v229 - 112); // 0x40700f\n                int64_t v313 = v312 + v311; // 0x40700f\n                *v310 = (int32_t)v313;\n                if (v313 >= 0x80000000 || ((v313 ^ v311) & (v313 ^ v312)) < 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x407030\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v309;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 35: {\n                // 0x406fc9\n                v256 = (int64_t)(*(int32_t *)v229 + 3600);\n                goto lab_0x40635e;\n            }\n            case 36: {\n                // 0x406fa5\n                *(int32_t *)(v226 + 24) = *(int32_t *)(v229 - 56) + 3600;\n                v147 = v271;\n                v139 = 12;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 37: {\n                // 0x406f7e\n                *(int64_t *)(v226 + 8) = 0;\n                *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)v229;\n                v147 = v271;\n                v139 = 13;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 38: {\n                // 0x406f56\n                *(int64_t *)(v226 + 8) = 0;\n                *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)(v229 - 56);\n                v147 = v271;\n                v139 = 13;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 39: {\n                // 0x406f27\n                v255 = v229 - 56;\n                goto lab_0x406f2b;\n            }\n            case 40: {\n                // 0x40742f\n                v255 = v229 - 48;\n                goto lab_0x406f2b;\n            }\n            case 41: {\n                // 0x407404\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 + 8);\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 42: {\n                int64_t * v314 = (int64_t *)(v229 - 208); // 0x4073a0\n                int64_t v315 = *v314; // 0x4073a0\n                char v316 = *(char *)(v226 + 217); // 0x4073a7\n                if (v315 < 4) {\n                    int64_t v317 = *(int64_t *)(v229 - 216); // 0x4077c9\n                    *v7 = v317;\n                    int64_t v318 = v317; // 0x4077d7\n                    int64_t v319 = v226; // 0x4077d7\n                    int64_t v320 = v268; // 0x4077d7\n                    int64_t v321 = v270; // 0x4077d7\n                    if (v316 != 0) {\n                        // 0x407920\n                        *v37 = v226;\n                        *v26 = v268;\n                        *v10 = v270;\n                        char * v322 = dcgettext(NULL, \"warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\\n\", 5); // 0x40793b\n                        function_404f90((int64_t)v322, *v7, 5, v315, v227, v226);\n                        v319 = *v37;\n                        v320 = *v26;\n                        v321 = *v10;\n                        v318 = *v7;\n                    }\n                    int128_t v323 = __asm_movdqu(*(int128_t *)v229); // 0x4077e2\n                    *(int64_t *)(v319 + 56) = v318;\n                    __asm_movups(*(int128_t *)(v319 + 32), v323);\n                    *(int64_t *)(v319 + 64) = *(int64_t *)(v229 - 104);\n                    *(int64_t *)(v319 + 48) = *(int64_t *)(v229 + 16);\n                    v147 = v271;\n                    v139 = 14;\n                    v144 = v225 - 10;\n                    v145 = v229 - 280;\n                    v140 = v228;\n                    v135 = 0xffffffa3;\n                    v138 = v319;\n                    v131 = v320;\n                    v132 = v321;\n                    v133 = v269;\n                    v134 = v267;\n                } else {\n                    int64_t v324 = v315; // 0x4073bb\n                    int64_t v325 = v226; // 0x4073bb\n                    int64_t v326 = v268; // 0x4073bb\n                    int64_t v327 = v270; // 0x4073bb\n                    if (v316 != 0) {\n                        // 0x4078c4\n                        *v33 = v226;\n                        *v37 = v268;\n                        *v26 = v270;\n                        *v10 = v315;\n                        *v7 = *(int64_t *)(v229 - 216);\n                        char * v328 = dcgettext(NULL, \"warning: value %ld has %ld digits. Assuming YYYY/MM/DD\\n\", 5); // 0x4078f0\n                        int64_t v329 = *v10; // 0x4078f5\n                        function_404f90((int64_t)v328, *v7, v329, v329, v227, v226);\n                        v325 = *v33;\n                        v326 = *v37;\n                        v327 = *v26;\n                        v324 = *v314;\n                    }\n                    int128_t v330 = __asm_movdqu(*(int128_t *)(v229 - 224)); // 0x4073c8\n                    *(int64_t *)(v325 + 48) = v324;\n                    __asm_movups(*(int128_t *)(v325 + 32), v330);\n                    *(int64_t *)(v325 + 56) = *(int64_t *)(v229 - 104);\n                    *(int64_t *)(v325 + 64) = *(int64_t *)(v229 + 8);\n                    v147 = v330;\n                    v139 = 14;\n                    v144 = v225 - 10;\n                    v145 = v229 - 280;\n                    v140 = v228;\n                    v135 = 0xffffffa3;\n                    v138 = v325;\n                    v131 = v326;\n                    v132 = v327;\n                    v133 = v269;\n                    v134 = v267;\n                }\n                goto lab_0x4060d0;\n            }\n            case 43: {\n                // 0x407360\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                int64_t v331 = *(int64_t *)(v229 + 8); // 0x40737a\n                *(int64_t *)(v226 + 40) = -v331;\n                if (v331 == -0x8000000000000000) {\n                    // break -> 0x405abd\n                    break;\n                }\n                goto lab_0x407263;\n            }\n            case 44: {\n                // 0x407314\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 112);\n                int64_t v332 = *(int64_t *)(v229 - 48); // 0x407326\n                *(int64_t *)(v226 + 64) = -v332;\n                if (v332 == -0x8000000000000000) {\n                    // break -> 0x405abd\n                    break;\n                }\n                int64_t v333 = *(int64_t *)(v229 + 8); // 0x40733d\n                *(int64_t *)(v226 + 40) = -v333;\n                if (v333 == -0x8000000000000000) {\n                    // break -> 0x405abd\n                    break;\n                }\n                goto lab_0x407263;\n            }\n            case 45: {\n                // 0x4072ec\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 + 8);\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 46: {\n                int128_t v334 = __asm_movdqu(*(int128_t *)v229); // 0x4072b4\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 168);\n                __asm_movups(*(int128_t *)(v226 + 32), v334);\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                *(int64_t *)(v226 + 48) = *(int64_t *)(v229 + 16);\n                v147 = v334;\n                v139 = 14;\n                v144 = v225 - 8;\n                v145 = v229 - 224;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 47: {\n                // 0x407286\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 48);\n                *(int64_t *)(v226 + 56) = *(int64_t *)v229;\n                v147 = v271;\n                v139 = 14;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 48: {\n                int128_t v335 = __asm_movdqu(*(int128_t *)v229); // 0x40724e\n                *(int64_t *)(v226 + 64) = *(int64_t *)(v229 - 104);\n                __asm_movups(*(int128_t *)(v226 + 32), v335);\n                *(int64_t *)(v226 + 56) = *(int64_t *)(v229 - 56);\n                goto lab_0x407263;\n            }\n            case 50: {\n                int128_t v336 = __asm_movdqu(*(int128_t *)(v229 - 112)); // 0x4071e9\n                *(int64_t *)(v226 + 48) = *(int64_t *)(v229 - 96);\n                int64_t v337 = *(int64_t *)(v229 - 48); // 0x4071fc\n                __asm_movups(*(int128_t *)(v226 + 32), v336);\n                *(int64_t *)(v226 + 56) = -v337;\n                if (v337 == -0x8000000000000000) {\n                    // break -> 0x405abd\n                    break;\n                }\n                int64_t v338 = *(int64_t *)(v229 + 8); // 0x407218\n                *(int64_t *)(v226 + 64) = -v338;\n                if (v338 == -0x8000000000000000) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x40722f\n                v147 = v336;\n                v139 = 15;\n                v144 = v225 - 6;\n                v145 = v229 - 168;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 51: {\n                int64_t * v339 = (int64_t *)(v226 + 144); // 0x40709e\n                int32_t v340 = *(int32_t *)(v229 - 8); // 0x4070b5\n                *v33 = *v339;\n                int64_t * v341 = (int64_t *)(v226 + 128); // 0x4070be\n                *v7 = *(int64_t *)(v229 - 56);\n                *v10 = *(int64_t *)(v229 - 48);\n                int64_t * v342 = (int64_t *)(v226 + 136); // 0x4070cf\n                int64_t v343 = *v342; // 0x4070cf\n                *v34 = *v341;\n                int64_t * v344 = (int64_t *)(v226 + 120); // 0x4070db\n                *v26 = *(int64_t *)(v229 - 40);\n                int64_t v345 = *(int64_t *)(v229 - 16); // 0x4070e4\n                *v36 = *v344;\n                int64_t * v346 = (int64_t *)(v226 + 112); // 0x4070ed\n                *v37 = *(int64_t *)(v229 - 32);\n                int64_t v347 = *(int64_t *)(v229 - 24); // 0x4070f6\n                *v38 = *v346;\n                int64_t * v348 = (int64_t *)(v226 + 104); // 0x4070ff\n                int32_t * v349 = (int32_t *)(v226 + 152); // 0x407103\n                int32_t v350 = *v349; // 0x407103\n                *v39 = *v348;\n                int64_t v351 = *v33;\n                char v352; // 0x405940\n                if (*(int32_t *)v229 < 0) {\n                    int32_t v353 = v350 - v340; // 0x40781f\n                    *v349 = v353;\n                    int64_t v354 = v351 - v345; // 0x40782f\n                    *v339 = v354;\n                    int64_t v355 = v343 - v347; // 0x407842\n                    *v342 = v355;\n                    int64_t v356 = *v34; // 0x407851\n                    int64_t v357 = *v37; // 0x407856\n                    int64_t v358 = v356 - v357; // 0x407856\n                    *v341 = v358;\n                    int64_t v359 = *v36; // 0x407868\n                    int64_t v360 = *v26; // 0x40786d\n                    int64_t v361 = v359 - v360; // 0x40786d\n                    *v344 = v361;\n                    int64_t v362 = *v38; // 0x40787a\n                    *v26 = (int64_t)(((v361 ^ v359) & (v360 ^ v359)) < 0);\n                    int64_t v363 = *v10; // 0x407886\n                    int64_t v364 = v362 - v363; // 0x407886\n                    *v346 = v364;\n                    int64_t v365 = *v39; // 0x407893\n                    *v10 = (int64_t)(((v364 ^ v362) & (v363 ^ v362)) < 0);\n                    int64_t v366 = *v7; // 0x40789f\n                    int64_t v367 = v365 - v366; // 0x40789f\n                    *v348 = v367;\n                    char v368 = *(char *)v25; // 0x4078b5\n                    char v369 = *v31; // 0x4078b9\n                    v352 = v368 | (char)(((v355 ^ v343) & (v347 ^ v343)) < 0 | ((v353 ^ v350) & (v350 ^ v340)) < 0 | ((v354 ^ v351) & (v351 ^ v345)) < 0 | ((v358 ^ v356) & (v357 ^ v356)) < 0) | v369 | (char)(((v367 ^ v365) & (v366 ^ v365)) < 0);\n                } else {\n                    int32_t v370 = v350 + v340; // 0x40711e\n                    *v349 = v370;\n                    int64_t v371 = v351 + v345; // 0x40712e\n                    int64_t v372 = v347 + v343; // 0x40713a\n                    *v339 = v371;\n                    *v342 = v372;\n                    int64_t v373 = *v34; // 0x407151\n                    int64_t v374 = *v37; // 0x407156\n                    int64_t v375 = v374 + v373; // 0x407156\n                    *v33 = (int64_t)(((v372 ^ v343) & (v372 ^ v347)) < 0);\n                    *v341 = v375;\n                    int64_t v376 = *v36; // 0x40716d\n                    int64_t v377 = *v26; // 0x407172\n                    int64_t v378 = v377 + v376; // 0x407172\n                    *v344 = v378;\n                    int64_t v379 = *v38; // 0x407181\n                    int64_t v380 = *v10; // 0x407186\n                    int64_t v381 = v380 + v379; // 0x407186\n                    *v346 = v381;\n                    int64_t v382 = *v39; // 0x407192\n                    *v10 = (int64_t)(((v381 ^ v379) & (v381 ^ v380)) < 0);\n                    int64_t v383 = *v7; // 0x40719e\n                    int64_t v384 = v383 + v382; // 0x40719e\n                    *v348 = v384;\n                    char v385 = *(char *)v32; // 0x4071af\n                    char v386 = *v31; // 0x4071b7\n                    v352 = v385 | (char)(((v370 ^ v350) & (v370 ^ v340)) < 0 | ((v371 ^ v351) & (v371 ^ v345)) < 0 | ((v375 ^ v373) & (v375 ^ v374)) < 0 | ((v378 ^ v376) & (v378 ^ v377)) < 0) | v386 | (char)(((v384 ^ v382) & (v384 ^ v383)) < 0);\n                }\n                // 0x4071bd\n                if (v352 != 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x4071c5\n                *(char *)(v226 + 161) = 1;\n                v147 = v271;\n                v139 = 16;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 52: {\n                goto lab_0x406188;\n            }\n            case 53: {\n                goto lab_0x406188;\n            }\n            case 54: {\n                // 0x4069bc\n                *v30 = 0;\n                v254 = v229 - 56;\n                goto lab_0x4069cb;\n            }\n            case 55: {\n                // 0x407055\n                *v30 = 0;\n                v254 = v229 - 48;\n                goto lab_0x4069cb;\n            }\n            case 56: {\n                // 0x4069e3\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 0;\n                v133 = 0;\n                v134 = 1;\n                goto lab_0x4060d0;\n            }\n            case 57: {\n                // 0x40674e\n                *v30 = 0;\n                v245 = 17;\n                v241 = 0xffffffa3;\n                v231 = *(int64_t *)(v229 - 56);\n                goto lab_0x406726;\n            }\n            case 58: {\n                // 0x406704\n                *v30 = 0;\n                v245 = 17;\n                v241 = 0xffffffa3;\n                v231 = *(int64_t *)(v229 - 48);\n                goto lab_0x406726;\n            }\n            case 59: {\n                // 0x4066b8\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 1;\n                v132 = 0;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x4060d0;\n            }\n            case 60: {\n                int64_t v387 = *(int64_t *)v229; // 0x40667f\n                int128_t v388 = (int128_t)v387 * (int128_t)*(int64_t *)(v229 - 56); // 0x40667f\n                int128_t v389 = __asm_pxor(v271, v271); // 0x406683\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v389);\n                *v21 = (int128_t)__asm_movaps(v389);\n                *v23 = (int128_t)__asm_movaps(v389);\n                v273 = v389;\n                v234 = v388;\n                if (v388 > 0x7fffffffffffffff) {\n                    // break -> 0x405abd\n                    break;\n                }\n                goto lab_0x406666;\n            }\n            case 61: {\n                int64_t v390 = *(int64_t *)v229; // 0x406631\n                int128_t v391 = (int128_t)v390 * (int128_t)*(int64_t *)(v229 - 48); // 0x406631\n                int128_t v392 = __asm_pxor(v271, v271); // 0x406635\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v392);\n                *v21 = (int128_t)__asm_movaps(v392);\n                *v23 = (int128_t)__asm_movaps(v392);\n                v273 = v392;\n                v234 = v391;\n                if (v391 > 0x7fffffffffffffff) {\n                    // break -> 0x405abd\n                    break;\n                }\n                goto lab_0x406666;\n            }\n            case 62: {\n                // 0x4065e4\n                *v30 = 0;\n                v272 = v271;\n                v244 = 17;\n                v246 = v225 - 2;\n                v250 = v229 - 56;\n                v240 = 0xffffffa3;\n                v233 = *(int64_t *)v229;\n                goto lab_0x406605;\n            }\n            case 63: {\n                // 0x4065c0\n                *v30 = 0;\n                v243 = 17;\n                v239 = 0xffffffa3;\n                v232 = *(int64_t *)(v229 - 56);\n                goto lab_0x406598;\n            }\n            case 64: {\n                // 0x406576\n                *v30 = 0;\n                v243 = 17;\n                v239 = 0xffffffa3;\n                v232 = *(int64_t *)(v229 - 48);\n                goto lab_0x406598;\n            }\n            case 65: {\n                // 0x40652a\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 0;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 1;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x4060d0;\n            }\n            case 66: {\n                // 0x406519\n                *v30 = 0;\n                v264 = v229 - 56;\n                goto lab_0x4064df;\n            }\n            case 67: {\n                // 0x4064d0\n                *v30 = 0;\n                v264 = v229 - 48;\n                goto lab_0x4064df;\n            }\n            case 68: {\n                // 0x406487\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 0;\n                *v5 = 1;\n                v147 = v271;\n                v139 = 17;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = 0;\n                v133 = 0;\n                v134 = 0;\n                goto lab_0x4060d0;\n            }\n            case 69: {\n                // 0x406a2f\n                *v30 = 0;\n                v262 = v229 - 56;\n                goto lab_0x406316;\n            }\n            case 70: {\n                // 0x406307\n                *v30 = 0;\n                v262 = v229 - 48;\n                goto lab_0x406316;\n            }\n            case 71: {\n                goto lab_0x406269;\n            }\n            case 72: {\n                goto lab_0x406269;\n            }\n            case 73: {\n                // 0x40696c\n                *v30 = 0;\n                *v24 = 0;\n                *v9 = 1;\n                v242 = 17;\n                v248 = v225 - 2;\n                v249 = v229 - 56;\n                v236 = 0xffffffa3;\n                goto lab_0x406297;\n            }\n            case 75: {\n                // 0x406922\n                *v30 = 0;\n                v235 = *(int64_t *)(v229 - 48);\n                v258 = 60;\n                v265 = 18;\n                goto lab_0x406944;\n            }\n            case 76: {\n                // 0x4068fb\n                *v30 = 0;\n                v245 = 18;\n                v241 = 60;\n                v231 = *(int64_t *)(v229 - 48);\n                goto lab_0x406726;\n            }\n            case 77: {\n                int64_t v393 = *(int64_t *)v229; // 0x4068ae\n                int128_t v394 = (int128_t)v393 * (int128_t)*(int64_t *)(v229 - 48); // 0x4068ae\n                int128_t v395 = __asm_pxor(v271, v271); // 0x4068b2\n                *v19 = 0;\n                *v17 = (int128_t)__asm_movaps(v395);\n                *v21 = (int128_t)__asm_movaps(v395);\n                *v23 = (int128_t)__asm_movaps(v395);\n                if (v394 > 0x7fffffffffffffff) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x4068e3\n                v272 = v395;\n                v244 = 18;\n                v246 = v225 - 4;\n                v250 = v229 - 112;\n                v240 = 60;\n                v233 = v394;\n                goto lab_0x406605;\n            }\n            case 78: {\n                // 0x406883\n                *v30 = 0;\n                v243 = 18;\n                v239 = 60;\n                v232 = *(int64_t *)(v229 - 48);\n                goto lab_0x406598;\n            }\n            case 79: {\n                // 0x406a95\n                *v30 = 0;\n                v261 = *(int64_t *)(v229 - 48);\n                v238 = 60;\n                v263 = 18;\n                goto lab_0x4064f7;\n            }\n            case 80: {\n                // 0x406a69\n                *v30 = 0;\n                v260 = *(int64_t *)(v229 - 48);\n                v237 = 60;\n                v266 = 18;\n                goto lab_0x40632e;\n            }\n            case 81: {\n                // 0x406a43\n                *v30 = 0;\n                v272 = v271;\n                v244 = 19;\n                v246 = v225 - 2;\n                v250 = v229 - 56;\n                v240 = 0xffffffa3;\n                v233 = *(int64_t *)v229;\n                goto lab_0x406605;\n            }\n            case 85: {\n                // 0x406468\n                v147 = v271;\n                v139 = 21;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v226;\n                v131 = 0;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x4060d0;\n            }\n            case 87: {\n                // 0x407595\n                v147 = v271;\n                v139 = 22;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa4;\n                v138 = v226;\n                v131 = 0;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x4060d0;\n            }\n            case 88: {\n                // 0x407547\n                *v26 = v268;\n                *v10 = v270;\n                *v27 = *(int64_t *)(v229 + 16);\n                *v28 = *(int64_t *)(v229 + 8);\n                *v29 = *(int64_t *)v229;\n                *v7 = v226;\n                function_404ca0(v226, (int64_t)&g73, (int64_t)&g73, (int64_t)&g73);\n                v147 = v271;\n                v139 = 23;\n                v144 = v225 - 2;\n                v145 = v229 - 56;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = *v7;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 89: {\n                // 0x407438\n                *v26 = v268;\n                *v10 = v270;\n                *v27 = *(int64_t *)(v229 - 40);\n                *v28 = *(int64_t *)(v229 - 48);\n                *v29 = *(int64_t *)(v229 - 56);\n                *v7 = v226;\n                function_404ca0(v226, (int64_t)&g73, (int64_t)&g73, (int64_t)&g73);\n                int32_t v396 = *(int32_t *)(v229 + 48); // 0x407460\n                int64_t v397 = *v7; // 0x407466\n                int32_t * v398 = (int32_t *)(v397 + 152); // 0x40746b\n                int32_t v399 = *v398; // 0x40746b\n                int32_t v400 = v399 + v396; // 0x40746b\n                *v398 = v400;\n                int64_t * v401 = (int64_t *)(v397 + 144); // 0x40747d\n                int64_t v402 = *v401; // 0x40747d\n                int64_t v403 = *(int64_t *)(v229 + 40); // 0x407484\n                int64_t v404 = v403 + v402; // 0x407484\n                *v401 = v404;\n                int64_t * v405 = (int64_t *)(v397 + 136); // 0x407497\n                int64_t v406 = *v405; // 0x407497\n                int64_t v407 = *(int64_t *)(v229 + 32); // 0x4074a1\n                int64_t v408 = v407 + v406; // 0x4074a1\n                *v405 = v408;\n                int64_t * v409 = (int64_t *)(v397 + 128); // 0x4074b2\n                int64_t v410 = *v409; // 0x4074b2\n                int64_t v411 = *(int64_t *)(v229 + 24); // 0x4074b9\n                int64_t v412 = v411 + v410; // 0x4074b9\n                *v409 = v412;\n                int64_t * v413 = (int64_t *)(v397 + 120); // 0x4074cb\n                int64_t v414 = *v413; // 0x4074cb\n                int64_t v415 = *(int64_t *)(v229 + 16); // 0x4074cf\n                int64_t v416 = v415 + v414; // 0x4074cf\n                *v413 = v416;\n                int64_t * v417 = (int64_t *)(v397 + 112); // 0x4074de\n                int64_t v418 = *v417; // 0x4074de\n                int64_t v419 = *(int64_t *)(v229 + 8); // 0x4074e2\n                int64_t v420 = v419 + v418; // 0x4074e2\n                *v417 = v420;\n                int64_t * v421 = (int64_t *)(v397 + 104); // 0x4074f0\n                int64_t v422 = *v421; // 0x4074f0\n                int64_t v423 = *(int64_t *)v229; // 0x4074f4\n                int64_t v424 = v423 + v422; // 0x4074f4\n                *v421 = v424;\n                if (((v400 ^ v396) & (v400 ^ v399)) < 0 | ((v404 ^ v402) & (v404 ^ v403)) < 0 | ((v408 ^ v406) & (v408 ^ v407)) < 0 | ((v412 ^ v410) & (v412 ^ v411)) < 0 || ((v416 ^ v414) & (v416 ^ v415)) < 0 || ((v420 ^ v418) & (v420 ^ v419)) < 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x407514\n                if (((v424 ^ v422) & (v424 ^ v423)) < 0) {\n                    // break -> 0x405abd\n                    break;\n                }\n                // 0x40751d\n                *(char *)(v397 + 161) = 1;\n                v147 = v271;\n                v139 = 24;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 0xffffffa3;\n                v138 = v397;\n                v131 = *v26;\n                v132 = *v10;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n            case 90: {\n                // 0x407069\n                v147 = v271;\n                v139 = 25;\n                v144 = v225 - 2 * v277;\n                v145 = -56 * v277 + v229;\n                v140 = v228;\n                v135 = 43;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = -1;\n                goto lab_0x4060d0;\n            }\n            case 91: {\n                // 0x4069a0\n                v147 = v271;\n                v139 = 25;\n                v144 = v225 - 4;\n                v145 = v229 - 112;\n                v140 = v228;\n                v135 = 43;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = *(int64_t *)(v229 + 8);\n                goto lab_0x4060d0;\n            }\n            default: {\n                unsigned char v425 = *(char *)(v276 + (int64_t)&g12); // 0x407b27\n                int64_t v426 = (int64_t)v425 + 0xffffffe4; // 0x407b31\n                char v427 = *(char *)((0x100000000 * v426 >> 32) + (int64_t)&g16); // 0x407b37\n                v147 = v271;\n                v139 = v426 & 0xffffffff;\n                v144 = v225 - 2 * v277;\n                v145 = -56 * v277 + v229;\n                v140 = v228;\n                v135 = v427;\n                v138 = v226;\n                v131 = v268;\n                v132 = v270;\n                v133 = v269;\n                v134 = v267;\n                goto lab_0x4060d0;\n            }\n        }\n    } else {\n        // 0x405aa2\n        if (*v14 == 3) {\n            int32_t v428 = v228; // 0x405aa9\n            result = 1;\n            if (v428 == 0 && v428 >= 0 != v428 != 0) {\n                // break -> 0x405abd\n                goto lab_0x405abd_8;\n            }\n        }\n        int64_t v429 = v229; // 0x405940\n        int64_t v430 = v227; // 0x405940\n        int64_t v431 = v225; // 0x405aed\n        unsigned char v432; // 0x405ad0\n        while (true) {\n            char v433 = *(char *)(v430 + (int64_t)&g18); // 0x405af9\n            if (v433 != -93) {\n                if ((int32_t)v433 < 112) {\n                    int64_t v434 = v433; // 0x405af9\n                    char v435 = *(char *)(v434 + 0x416401); // 0x405b10\n                    if (v435 == 1) {\n                        // 0x405b19\n                        v432 = *(char *)(v434 + 0x416481);\n                        if (v432 != 0) {\n                            // break -> 0x405fb0\n                            break;\n                        }\n                    }\n                }\n            }\n            // 0x405ae8\n            result = 1;\n            if (v431 == v4) {\n                // break (via goto) -> 0x405abd\n                goto lab_0x405abd_8;\n            }\n            // 0x405aed\n            v431 -= 2;\n            v429 -= 56;\n            v430 = (int64_t)*(int16_t *)v431;\n        }\n        int64_t v436 = *v12; // 0x405fb0\n        int64_t v437; // 0x405940\n        int64_t v438 = v437 + 56; // 0x405fb5\n        *v14 = 3;\n        int64_t * v439; // 0x405940\n        *v439 = v436;\n        int64_t v440 = *v13; // 0x405fcc\n        int128_t * v441; // 0x405940\n        int128_t v442 = *v441; // 0x405fd1\n        int128_t v443 = __asm_movdqa(v442); // 0x405fd1\n        int64_t * v444; // 0x405940\n        *v444 = v440;\n        int64_t * v445; // 0x405940\n        int64_t v446 = *v445; // 0x405fe2\n        int128_t v447 = *(int128_t *)v438; // 0x405fea\n        __asm_movups(v447, v443);\n        int128_t * v448; // 0x405940\n        int128_t v449 = *v448; // 0x405fed\n        int128_t v450 = __asm_movdqa(v449); // 0x405fed\n        *(int64_t *)(v437 + 104) = v446;\n        int128_t v451 = *(int128_t *)(v437 + 72); // 0x405ffa\n        __asm_movups(v451, v450);\n        int128_t * v452; // 0x405940\n        int128_t v453 = *v452; // 0x405ffe\n        int128_t v454 = __asm_movdqa(v453); // 0x405ffe\n        int128_t v455 = *(int128_t *)(v437 + 88); // 0x406007\n        __asm_movups(v455, v454);\n        v146 = v454;\n        int64_t v456; // 0x405940\n        v143 = v456;\n        v142 = v438;\n        int64_t v457; // 0x405940\n        v141 = v457;\n        v136 = v432;\n        v137 = v226;\n        goto lab_0x405a56;\n    }\n  lab_0x405e58:;\n    unsigned char v458 = *(char *)((0x100000000 * v63 >> 32) + (int64_t)&g19); // 0x405e5b\n    v163 = v458;\n    v164 = v67;\n    v165 = v63;\n    v166 = v58;\n    v167 = v61;\n    v168 = v55;\n    goto lab_0x405e62_2;\n  lab_0x406dd7:\n    // 0x406dd7\n    *v26 = v226;\n    *v10 = v268;\n    *v7 = v270;\n    char * v459 = dcgettext(NULL, (char *)v252, 5); // 0x406dd9\n    int64_t v460 = *v26; // 0x406dde\n    int64_t v461 = v229 - 56; // 0x406de3\n    int64_t v462 = v225 - 2; // 0x406de7\n    int64_t v463 = *v7; // 0x406df9\n    int64_t v464 = *v10; // 0x406e06\n    v147 = v271;\n    v139 = 4;\n    v144 = v462;\n    v145 = v461;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v460;\n    v131 = v464;\n    v132 = v463;\n    v133 = v269;\n    v134 = v267;\n    char * v465; // 0x405940\n    int64_t v466; // 0x405940\n    if (*(char *)(v460 + 217) == 0) {\n        goto lab_0x4060d0;\n    } else {\n        // 0x406e11\n        *v40 = -93;\n        *v34 = v461;\n        *v41 = 4;\n        *v37 = v464;\n        *v26 = v462;\n        *v10 = v463;\n        *v7 = v460;\n        v466 = v460;\n        v465 = v459;\n        goto lab_0x406c7d;\n    }\n  lab_0x406188:;\n    int32_t v467 = *(int32_t *)(v229 + 48); // 0x406188\n    int32_t * v468 = (int32_t *)(v226 + 152); // 0x40618e\n    int32_t v469 = *v468; // 0x40618e\n    int32_t v470 = v469 + v467; // 0x40618e\n    *v468 = v470;\n    int64_t * v471 = (int64_t *)(v226 + 144); // 0x4061a0\n    int64_t v472 = *v471; // 0x4061a0\n    int64_t v473 = *(int64_t *)(v229 + 40); // 0x4061a7\n    int64_t v474 = v473 + v472; // 0x4061a7\n    *v471 = v474;\n    int64_t * v475 = (int64_t *)(v226 + 136); // 0x4061ba\n    int64_t v476 = *v475; // 0x4061ba\n    int64_t v477 = *(int64_t *)(v229 + 32); // 0x4061c4\n    int64_t v478 = v477 + v476; // 0x4061c4\n    *v475 = v478;\n    int64_t * v479 = (int64_t *)(v226 + 128); // 0x4061d5\n    int64_t v480 = *v479; // 0x4061d5\n    int64_t v481 = *(int64_t *)(v229 + 24); // 0x4061dc\n    int64_t v482 = v481 + v480; // 0x4061dc\n    *v479 = v482;\n    int64_t * v483 = (int64_t *)(v226 + 120); // 0x4061ed\n    int64_t v484 = *v483; // 0x4061ed\n    int64_t v485 = *(int64_t *)(v229 + 16); // 0x4061f1\n    int64_t v486 = v485 + v484; // 0x4061f1\n    *v483 = v486;\n    int64_t * v487 = (int64_t *)(v226 + 112); // 0x4061fc\n    int64_t v488 = *v487; // 0x4061fc\n    *v7 = (int64_t)(((v486 ^ v484) & (v486 ^ v485)) < 0);\n    int64_t v489 = *(int64_t *)(v229 + 8); // 0x406207\n    int64_t v490 = v489 + v488; // 0x406207\n    *v487 = v490;\n    *v10 = (int64_t)(((v490 ^ v488) & (v490 ^ v489)) < 0);\n    int64_t * v491 = (int64_t *)(v226 + 104); // 0x406217\n    int64_t v492 = *v491; // 0x406217\n    int64_t v493 = *(int64_t *)v229; // 0x40621d\n    int64_t v494 = v493 + v492; // 0x40621d\n    *v491 = v494;\n    char v495 = *v31; // 0x40622c\n    char v496 = *(char *)v6; // 0x406233\n    result = 1;\n    if ((v495 || (char)(((v470 ^ v467) & (v470 ^ v469)) < 0 | ((v474 ^ v472) & (v474 ^ v473)) < 0 | ((v478 ^ v476) & (v478 ^ v477)) < 0 || ((v482 ^ v480) & (v482 ^ v481)) < 0) || v496) != 0) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    // 0x406240\n    result = 1;\n    if (((v494 ^ v492) & (v494 ^ v493)) < 0) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    // 0x406249\n    *(char *)(v226 + 161) = 1;\n    v147 = v271;\n    v139 = 16;\n    v144 = v225 - 2;\n    v145 = v229 - 56;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x4060d0;\n  lab_0x406269:\n    // 0x406269\n    *v30 = 0;\n    *v9 = *(int64_t *)(v229 - 56);\n    *v24 = *(int32_t *)(v229 - 48);\n    v242 = 17;\n    v248 = v225 - 4;\n    v249 = v229 - 112;\n    v236 = 0xffffffa3;\n    goto lab_0x406297;\n  lab_0x405a56:;\n    int64_t v551 = v143 + 2; // 0x405a56\n    *(int16_t *)v551 = (int16_t)v136;\n    result = 2;\n    int64_t v552; // bp-1314, 0x405940\n    if (v551 >= (int64_t)&v552) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    // 0x405a6d\n    result = 0;\n    if ((int32_t)v136 == 12) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    char v553 = *(char *)(v136 + (int64_t)&g18); // 0x405a7a\n    v72 = v146;\n    v43 = v142;\n    v44 = v141;\n    v45 = v136;\n    v46 = v137;\n    v47 = v551;\n    v48 = v553;\n    v125 = v146;\n    v126 = v142;\n    v127 = v141;\n    v128 = v136;\n    v129 = v137;\n    v130 = v551;\n    if (v553 != -93) {\n        goto lab_0x40599c;\n    } else {\n        goto lab_0x405a90;\n    }\n  lab_0x4076d0:;\n    int64_t v554 = v191;\n    v193 = v195;\n    v189 = v554;\n    int64_t * v549; // 0x405940\n    if (v195 != 0) {\n        goto lab_0x405f47;\n    } else {\n        // 0x4076d8\n        *v71 = v554;\n        *v549 = v177;\n        *v12 = 0;\n        v163 = 21;\n        v164 = v65;\n        v165 = 276;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n        goto lab_0x405e62_2;\n    }\n  lab_0x405f27:;\n    int64_t v555 = v188 + 1; // 0x405f27\n    char v556 = *(char *)v555; // 0x405f2b\n    while (v556 == 57 || (int32_t)v556 < 57) {\n        // 0x405f27\n        v555++;\n        v556 = *(char *)v555;\n    }\n    // 0x405f37\n    v193 = v192;\n    v189 = v555;\n    v194 = v192;\n    v190 = v555;\n    if ((int32_t)v173 >= 0 || (int32_t)v192 == 0) {\n        goto lab_0x4076a1;\n    } else {\n        goto lab_0x405f47;\n    }\n  lab_0x4076a1:;\n    int64_t v557 = v190;\n    int64_t v558 = 0x100000000 * v194 >> 32; // 0x4076a4\n    *v71 = v557;\n    *v12 = v558;\n    *v549 = v177;\n    v163 = v558 + (v173 == 0 ? 23 : 22) + (v558 ^ 0xffffffff) & 0xffffffff;\n    v164 = v65;\n    v165 = v557 + (v173 == 0 ? 278 : 277) + (v557 ^ 0xffffffff) & 0xffffffff;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    goto lab_0x405e62_2;\n  lab_0x4060d0:;\n    int64_t v497 = v138;\n    int64_t v498 = v140;\n    int64_t v499 = v144;\n    int64_t v500 = v139;\n    int128_t v501 = v147;\n    *(int64_t *)v16 = v134;\n    int64_t v502 = v145 + 56; // 0x4060e1\n    *(int64_t *)(v2 + 280) = v131;\n    int128_t v503 = __asm_movdqa(*v17); // 0x4060ed\n    *(int64_t *)v22 = *v5;\n    *(int64_t *)v20 = v133;\n    *(int64_t *)(v2 + 296) = v132;\n    int128_t v504 = __asm_movdqa(*v21); // 0x406113\n    *(int64_t *)(v2 + 312) = *v9;\n    int128_t v505 = __asm_movdqa(*v23); // 0x406124\n    *(int32_t *)v18 = *v24;\n    __asm_movups(*(int128_t *)v502, v503);\n    *(int64_t *)(v145 + 104) = *v19;\n    __asm_movups(*(int128_t *)(v145 + 72), v504);\n    __asm_movups(*(int128_t *)(v145 + 88), v505);\n    int16_t v506 = *(int16_t *)v499; // 0x40614c\n    int64_t v507 = v135 + (int64_t)v506; // 0x40614f\n    if ((int32_t)v507 < 113) {\n        int64_t v508 = 0x100000000 * v507 >> 32; // 0x40615a\n        char v509 = *(char *)(v508 + (int64_t)&g13); // 0x40615d\n        if (v506 == (int16_t)v509) {\n            // 0x4075b8\n            v146 = v501;\n            v143 = v499;\n            v142 = v502;\n            v141 = v498;\n            v136 = (int64_t)*(char *)(v508 + (int64_t)&g14);\n            v137 = v497;\n            goto lab_0x405a56;\n        } else {\n            goto lab_0x40616f;\n        }\n    } else {\n        goto lab_0x40616f;\n    }\n  lab_0x4067b9:;\n    int64_t v510 = v257;\n    int64_t v511 = v251;\n    int64_t v512 = v247;\n    int128_t v513 = v274;\n    int64_t v514 = *v7; // 0x4067b9\n    int64_t v515 = *v26; // 0x4067c3\n    v147 = v513;\n    v139 = v510;\n    v144 = v512;\n    v145 = v511;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v514;\n    v131 = v515;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    if (*(char *)(v514 + 217) == 0) {\n        goto lab_0x4060d0;\n    } else {\n        // 0x4067d6\n        *v40 = -93;\n        *v34 = v511;\n        *v41 = (int32_t)v510;\n        *v37 = v515;\n        *v26 = v512;\n        function_4055a0((int64_t)v259, v514);\n        v275 = v513;\n        goto lab_0x4067f6;\n    }\n  lab_0x40683e:\n    // 0x40683e\n    v274 = v271;\n    v247 = v225 - 2;\n    v251 = v229 - 56;\n    v259 = dcgettext(NULL, (char *)v253, 5);\n    v257 = 4;\n    goto lab_0x4067b9;\n  lab_0x40635e:\n    // 0x40635e\n    *(int32_t *)(v226 + 24) = (int32_t)v256;\n    v147 = v271;\n    v139 = 12;\n    v144 = v225 - 2;\n    v145 = v229 - 56;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x4060d0;\n  lab_0x406b59:;\n    int32_t v516 = *(int32_t *)(v229 + 48); // 0x406b59\n    int32_t * v517 = (int32_t *)(v226 + 152); // 0x406b5f\n    int32_t v518 = *v517; // 0x406b5f\n    int32_t v519 = v518 + v516; // 0x406b5f\n    *v517 = v519;\n    int64_t * v520 = (int64_t *)(v226 + 144); // 0x406b71\n    int64_t v521 = *v520; // 0x406b71\n    int64_t v522 = *(int64_t *)(v229 + 40); // 0x406b78\n    int64_t v523 = v522 + v521; // 0x406b78\n    *v520 = v523;\n    int64_t * v524 = (int64_t *)(v226 + 136); // 0x406b8b\n    int64_t v525 = *v524; // 0x406b8b\n    int64_t v526 = *(int64_t *)(v229 + 32); // 0x406b95\n    int64_t v527 = v526 + v525; // 0x406b95\n    *v524 = v527;\n    int64_t * v528 = (int64_t *)(v226 + 128); // 0x406ba6\n    int64_t v529 = *v528; // 0x406ba6\n    int64_t v530 = *(int64_t *)(v229 + 24); // 0x406bad\n    int64_t v531 = v530 + v529; // 0x406bad\n    *v528 = v531;\n    int64_t * v532 = (int64_t *)(v226 + 120); // 0x406bbf\n    int64_t v533 = *v532; // 0x406bbf\n    int64_t v534 = *(int64_t *)(v229 + 16); // 0x406bc3\n    int64_t v535 = v534 + v533; // 0x406bc3\n    *v532 = v535;\n    int64_t * v536 = (int64_t *)(v226 + 112); // 0x406bd2\n    int64_t v537 = *v536; // 0x406bd2\n    int64_t v538 = *(int64_t *)(v229 + 8); // 0x406bd6\n    int64_t v539 = v538 + v537; // 0x406bd6\n    *v536 = v539;\n    int64_t * v540 = (int64_t *)(v226 + 104); // 0x406be4\n    int64_t v541 = *v540; // 0x406be4\n    int64_t v542 = *(int64_t *)v229; // 0x406be8\n    int64_t v543 = v542 + v541; // 0x406be8\n    *v540 = v543;\n    result = 1;\n    if (((v519 ^ v516) & (v519 ^ v518)) < 0 | ((v523 ^ v521) & (v523 ^ v522)) < 0 | ((v527 ^ v525) & (v527 ^ v526)) < 0 | ((v531 ^ v529) & (v531 ^ v530)) < 0 || ((v535 ^ v533) & (v535 ^ v534)) < 0 || ((v539 ^ v537) & (v539 ^ v538)) < 0) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    // 0x406c08\n    result = 1;\n    if (((v543 ^ v541) & (v543 ^ v542)) < 0) {\n        // break -> 0x405abd\n        goto lab_0x405abd_8;\n    }\n    // 0x406c11\n    *(char *)(v226 + 161) = 1;\n    *v7 = v226;\n    char * v544 = dcgettext(NULL, \"relative\", 5); // 0x406c2a\n    int64_t v545 = *v7; // 0x406c2f\n    int64_t v546 = v225 - 4; // 0x406c34\n    int64_t v547 = v229 - 112; // 0x406c38\n    int64_t v548 = *v26; // 0x406c57\n    v147 = v271;\n    v139 = 12;\n    v144 = v546;\n    v145 = v547;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v545;\n    v131 = v548;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    if (*(char *)(v545 + 217) == 0) {\n        goto lab_0x4060d0;\n    } else {\n        // 0x406c62\n        *v40 = -93;\n        *v34 = v547;\n        *v41 = 12;\n        *v37 = v548;\n        *v26 = v546;\n        v466 = v545;\n        v465 = v544;\n        goto lab_0x406c7d;\n    }\n  lab_0x406f2b:\n    // 0x406f2b\n    *(int64_t *)(v226 + 8) = *(int64_t *)v255;\n    *(char *)(v226 + 224) = 1;\n    *(int32_t *)(v226 + 16) = (int32_t)*(int64_t *)v229;\n    v147 = v271;\n    v139 = 13;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x4060d0;\n  lab_0x407263:\n    // 0x407263\n    *(int64_t *)(v226 + 48) = *(int64_t *)(v229 + 16);\n    v147 = v271;\n    v139 = 14;\n    v144 = v225 - 6;\n    v145 = v229 - 168;\n    v140 = v228;\n    v135 = 0xffffffa3;\n    v138 = v226;\n    v131 = v268;\n    v132 = v270;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x4060d0;\n  lab_0x4069cb:\n    // 0x4069cb\n    v235 = *(int64_t *)v254;\n    v258 = 0xffffffa3;\n    v265 = 17;\n    goto lab_0x406944;\n  lab_0x406726:\n    // 0x406726\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v245;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v241;\n    v138 = v226;\n    v131 = v231;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x4060d0;\n  lab_0x406666:\n    // 0x406666\n    v272 = v273;\n    v244 = 17;\n    v246 = v225 - 4;\n    v250 = v229 - 112;\n    v240 = 0xffffffa3;\n    v233 = v234;\n    goto lab_0x406605;\n  lab_0x406605:\n    // 0x406605\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v272;\n    v139 = v244;\n    v144 = v246;\n    v145 = v250;\n    v140 = v228;\n    v135 = v240;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = v233;\n    v134 = 0;\n    goto lab_0x4060d0;\n  lab_0x406598:\n    // 0x406598\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v243;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v239;\n    v138 = v226;\n    v131 = 0;\n    v132 = v232;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x4060d0;\n  lab_0x4064df:\n    // 0x4064df\n    v261 = *(int64_t *)v264;\n    v238 = 0xffffffa3;\n    v263 = 17;\n    goto lab_0x4064f7;\n  lab_0x406316:\n    // 0x406316\n    v260 = *(int64_t *)v262;\n    v237 = 0xffffffa3;\n    v266 = 17;\n    goto lab_0x40632e;\n  lab_0x406297:\n    // 0x406297\n    *v5 = 0;\n    v147 = v271;\n    v139 = v242;\n    v144 = v248;\n    v145 = v249;\n    v140 = v228;\n    v135 = v236;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x4060d0;\n  lab_0x406944:\n    // 0x406944\n    *v24 = 0;\n    *v9 = 0;\n    *v5 = 0;\n    v147 = v271;\n    v139 = v265;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v258;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = v235;\n    goto lab_0x4060d0;\n  lab_0x4064f7:\n    // 0x4064f7\n    *v5 = v261;\n    *v24 = 0;\n    *v9 = 0;\n    v147 = v271;\n    v139 = v263;\n    v144 = v225 - 4;\n    v145 = v229 - 112;\n    v140 = v228;\n    v135 = v238;\n    v138 = v226;\n    v131 = 0;\n    v132 = 0;\n    v133 = 0;\n    v134 = 0;\n    goto lab_0x4060d0;\n  lab_0x40632e:\n    // 0x40632e\n    *v9 = v260;\n    *v24 = 0;\n    v242 = v266;\n    v248 = v225 - 4;\n    v249 = v229 - 112;\n    v236 = v237;\n    goto lab_0x406297;\n  lab_0x405f47:\n    // 0x405f47\n    v163 = 2;\n    v164 = v65;\n    v165 = 63;\n    v166 = v56;\n    v167 = v59;\n    v168 = v53;\n    if (v177 != -0x8000000000000000) {\n        // 0x405f5a\n        *v71 = v189;\n        *v549 = v177 - 1;\n        *v12 = 0x3b9aca0000000000 - 0x100000000 * v193 >> 32;\n        v163 = 21;\n        v164 = v65;\n        v165 = 276;\n        v166 = v56;\n        v167 = v59;\n        v168 = v53;\n    }\n    goto lab_0x405e62_2;\n  lab_0x40616f:;\n    char v550 = *(char *)((0x100000000 * v500 >> 32) + (int64_t)&g15); // 0x406171\n    v146 = v501;\n    v143 = v499;\n    v142 = v502;\n    v141 = v498;\n    v136 = v550;\n    v137 = v497;\n    goto lab_0x405a56;\n  lab_0x4067f6:\n    // 0x4067f6\n    v147 = v275;\n    v139 = (int64_t)*v41;\n    v144 = *v26;\n    v145 = *v34;\n    v140 = v228;\n    v135 = (int64_t)*v40;\n    v138 = *v7;\n    v131 = *v37;\n    v132 = *v10;\n    v133 = v269;\n    v134 = v267;\n    goto lab_0x4060d0;\n  lab_0x406c7d:\n    // 0x406c7d\n    function_405280((int64_t)v465, v466);\n    v275 = v271;\n    goto lab_0x4067f6;\n  lab_0x405cbf:;\n    int64_t v559 = v116 + 1;\n    int64_t v560 = v118;\n    *v71 = v559;\n    unsigned char v561 = *(char *)v559; // 0x405cc2\n    if ((int32_t)v561 < 123) {\n        unsigned char v562 = (v561 + 63) % 64;\n        if (v561 == 46 || v562 != 0 != ((1 << (int64_t)v562) % 0x3ffffff04000000 == 0)) {\n            goto lab_0x405cb0;\n        } else {\n            goto lab_0x405cdf;\n        }\n    } else {\n        if (v561 == 46) {\n            goto lab_0x405cb0;\n        } else {\n            goto lab_0x405cdf;\n        }\n    }\n  lab_0x405cb0:\n    // 0x405cb0\n    v104 = v561;\n    v105 = v560;\n    v106 = v559;\n    goto lab_0x405cb4;\n  lab_0x405cdf:\n    // 0x405cdf\n    *(char *)v560 = 0;\n}\n"
        },
        {
            "funcName": "function_407bc0",
            "funcStartAddr": "407bc0",
            "funcEndAddr": "409b86",
            "decompiledFuncCode": "int64_t function_407bc0(int64_t * a1, int64_t str, int32_t a3, uint32_t a4, int64_t a5, int64_t a6) {\n    // 0x407bc0\n    int128_t v1; // 0x407bc0\n    int128_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x407beb\n    int64_t v3 = a3; // 0x407bf8\n    if (a3 == 0) {\n        // 0x408660\n        int64_t v4; // bp-984, 0x407bc0\n        function_404bc0(&v4);\n        v3 = &v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x407bfe\n    int64_t * v6 = (int64_t *)v3; // 0x407c02\n    int64_t v7 = *v6; // 0x407c02\n    int64_t v8; // 0x407bc0\n    unsigned char v9 = *(char *)&v8; // 0x407c0e\n    int64_t v10 = str; // 0x407c14\n    if (v9 < 33) {\n        // 0x407c16\n        v10 = str;\n        if ((1 << (int64_t)(v9 % 64) & 0x100003e00) != 0) {\n            int64_t v11 = str + 1; // 0x408405\n            unsigned char v12 = *(char *)v11; // 0x408409\n            v10 = v11;\n            while (v12 < 33) {\n                unsigned char v13 = v12 % 64;\n                int64_t v14 = v13 == 0 ? 1 : 1 << (int64_t)v13;\n                v8 = v14;\n                v10 = v11;\n                if ((v14 & 0x100003e00) == 0) {\n                    // break -> 0x407c2a\n                    break;\n                }\n                v11++;\n                v12 = *(char *)v11;\n                v10 = v11;\n            }\n        }\n    }\n    // 0x407c2a\n    int64_t v15; // bp-1080, 0x407bc0\n    int64_t v16 = &v15; // 0x407bd3\n    v8 = v10;\n    bool v17; // 0x407bc0\n    int64_t v18 = v17 ? -1 : 1;\n    int64_t v19 = (int64_t)\"TZ=\\\"\"; // 0x407bc0\n    int64_t v20 = v10; // 0x407c37\n    int64_t v21 = 4; // 0x407c37\n    unsigned char v22 = *(char *)v20; // 0x407c37\n    char v23 = *(char *)v19; // 0x407c37\n    v20 += v18;\n    v8 = v20;\n    v21--;\n    char v24 = v23; // 0x407c37\n    bool v25 = false; // 0x407c37\n    while (v22 == v23) {\n        v19 += v18;\n        v24 = v22;\n        v25 = true;\n        if (v21 == 0) {\n            // break -> \n            break;\n        }\n        v22 = *(char *)v20;\n        v23 = *(char *)v19;\n        v20 += v18;\n        v8 = v20;\n        v21--;\n        v24 = v23;\n        v25 = false;\n    }\n    unsigned char v26 = v24;\n    int64_t v27; // 0x407bc0\n    int64_t size; // 0x408480\n    int64_t v28; // 0x407bc0\n    int64_t v29; // 0x407bc0\n    int64_t v30; // 0x407bc0\n    int64_t v31; // 0x407bc0\n    char v32; // 0x407bc0\n    int64_t v33; // 0x407bc0\n    int64_t v34; // 0x407bc0\n    int64_t v35; // 0x407bc0\n    int64_t v36; // 0x407bc0\n    int32_t v37; // bp-808, 0x407bc0\n    if ((v22 >= v26 && !v25) != v22 < v26) {\n        goto lab_0x407c98;\n    } else {\n        int64_t v38 = v10 + 4; // 0x407c42\n        char v39 = *(char *)v38; // 0x407c42\n        v8 = v38;\n        v27 = 1;\n        v32 = v39;\n        v35 = v38;\n        if (v39 == 0) {\n            goto lab_0x407c98;\n        } else {\n            while (true) {\n              lab_0x407c7b:;\n                int64_t v40 = v35;\n                char v41 = v32;\n                size = v27;\n                if (v41 != 92) {\n                    // 0x407c60\n                    v31 = v40;\n                    if (v41 == 34) {\n                        // break -> 0x408480\n                        break;\n                    }\n                    goto lab_0x407c6b;\n                } else {\n                    int64_t v42 = v40 + 1; // 0x407c7f\n                    v31 = v42;\n                    switch (*(char *)v42) {\n                        case 92: {\n                            goto lab_0x407c6b;\n                        }\n                        case 34: {\n                            goto lab_0x407c6b;\n                        }\n                        default: {\n                            goto lab_0x407c98;\n                        }\n                    }\n                }\n            }\n            int64_t v43 = v38; // 0x408484\n            int64_t v44; // bp-568, 0x407bc0\n            int64_t * mem = &v44; // 0x408484\n            if (size > 100) {\n                // 0x40862b\n                mem = malloc((int32_t)size);\n                v43 = 0x100000000 * v38 >> 32;\n                v8 = v43;\n                if (mem == NULL) {\n                    // 0x4083df\n                    free((int64_t *)*(int64_t *)(v16 + 8));\n                    return 0;\n                }\n            }\n            int64_t v45 = (int64_t)mem;\n            int64_t v46 = v21; // 0x4084a9\n            int64_t v47 = v45; // 0x4084a9\n            if (v39 != 34) {\n                int64_t v48 = v45 + 1; // 0x4084b9\n                int64_t v49 = v43 + (int64_t)(v39 == 92); // 0x4084bd\n                char v50 = *(char *)v49; // 0x4084c0\n                int64_t v51 = v49 + 1; // 0x4084c3\n                char v52 = *(char *)v51; // 0x4084c3\n                v8 = v51;\n                *(char *)mem = v50;\n                int64_t v53 = v48; // 0x4084d3\n                char v54 = v50; // 0x4084d3\n                if (v52 != 34) {\n                    int64_t v55 = v48 + 1; // 0x4084b9\n                    int64_t v56 = v8 + (int64_t)(v52 == 92); // 0x4084bd\n                    char v57 = *(char *)v56; // 0x4084c0\n                    int64_t v58 = v56 + 1; // 0x4084c3\n                    char v59 = *(char *)v58; // 0x4084c3\n                    v8 = v58;\n                    *(char *)v48 = v57;\n                    int64_t v60 = v55; // 0x4084d3\n                    v53 = v55;\n                    v54 = v57;\n                    while (v59 != 34) {\n                        // 0x4084b0\n                        v55 = v60 + 1;\n                        v56 = v8 + (int64_t)(v59 == 92);\n                        v57 = *(char *)v56;\n                        v58 = v56 + 1;\n                        v59 = *(char *)v58;\n                        v8 = v58;\n                        *(char *)v60 = v57;\n                        v60 = v55;\n                        v53 = v55;\n                        v54 = v57;\n                    }\n                }\n                // 0x4084d5\n                v46 = v54;\n                v47 = v53;\n            }\n            // 0x4084d5\n            *(char *)v47 = 0;\n            int64_t v61 = function_40db40(v45, v8, v47); // 0x4084e2\n            if (v61 == 0) {\n                // 0x4083df\n                free((int64_t *)*(int64_t *)(v16 + 8));\n                return 0;\n            }\n            int64_t v62 = (0x100000000 * v8 >> 32) + 1; // 0x4084f8\n            unsigned char v63 = *(char *)v62; // 0x4084f8\n            int64_t v64 = v46; // 0x408502\n            int64_t v65 = v62; // 0x408502\n            if (v63 < 33) {\n                // 0x408504\n                v64 = v46;\n                v65 = v62;\n                if ((1 << (int64_t)(v63 % 64) & 0x100003e00) != 0) {\n                    int64_t v66 = v62 + 1; // 0x408519\n                    unsigned char v67 = *(char *)v66; // 0x40851d\n                    int64_t v68 = v67; // 0x40851d\n                    v64 = v68;\n                    v65 = v66;\n                    while (v67 < 33) {\n                        int64_t v69 = 1 << v68 % 64;\n                        v8 = v69;\n                        v64 = v68;\n                        v65 = v66;\n                        if ((v69 & 0x100003e00) == 0) {\n                            // break -> 0x408538\n                            break;\n                        }\n                        v66++;\n                        v67 = *(char *)v66;\n                        v68 = v67;\n                        v64 = v68;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x408538\n            v8 = v3;\n            int64_t v70 = function_40de20(v61, v6, (int64_t *)&v37); // 0x408546\n            v36 = v45;\n            v34 = v64;\n            v28 = v65;\n            v29 = v61;\n            v33 = 0;\n            v30 = v61;\n            if (v70 != 0) {\n                goto lab_0x407cc0;\n            } else {\n                goto lab_0x4083d2;\n            }\n        }\n    }\n  lab_0x407c98:\n    // 0x407c98\n    v8 = v3;\n    int64_t v71 = function_40de20(a5, v6, (int64_t *)&v37); // 0x407ca6\n    v36 = a6;\n    v34 = v21;\n    v28 = v10;\n    v29 = a5;\n    if (v71 == 0) {\n        // 0x4083df\n        free((int64_t *)*(int64_t *)(v16 + 8));\n        return 0;\n    }\n    goto lab_0x407cc0;\n  lab_0x407c6b:;\n    int64_t v305 = v31 + 1; // 0x407c6b\n    char v306 = *(char *)v305; // 0x407c6f\n    v27 = size + 1;\n    v32 = v306;\n    v35 = v305;\n    if (v306 == 0) {\n        goto lab_0x407c98;\n    }\n    goto lab_0x407c7b;\n  lab_0x407cc0:;\n    char v72 = *(char *)v28; // 0x407cc0\n    int128_t v73 = __asm_pxor(v2, v2); // 0x407cc5\n    __asm_movups(v1, v73);\n    int32_t v74 = v72 == 0 ? (int32_t)&g2 : (int32_t)v28; // 0x407d0b\n    int32_t v75 = v74; // bp-344, 0x407d0b\n    __asm_movups(v1, v73);\n    __asm_movups(v1, v73);\n    int64_t v76 = v7 + 0x76a700; // 0x407e60\n    char * str3 = NULL; // 0x407e63\n    int64_t v77; // 0x407bc0\n    int64_t v78; // bp-456, 0x407bc0\n    int64_t v79; // bp-680, 0x407bc0\n    int32_t v80; // 0x407bc0\n    if ((v76 & (v7 ^ -0x8000000000000000)) >= 0) {\n        int64_t v81 = v80;\n        int64_t v82 = &v78; // 0x407e65\n        int64_t v83 = 0x76a700; // 0x407bc0\n        v8 = &v79;\n        v79 = v76;\n        char * v84; // 0x407bc0\n        bool v85 = v84 == NULL | function_40de20(v29, &v79, &v78) == 0;\n        v77 = v81;\n        while (true || v85) {\n            int64_t v86 = v83 + 0x76a700; // 0x407eab\n            if ((int32_t)v86 == 0x1da9c00) {\n                // 0x407ebb\n                str3 = NULL;\n                v77 = v85 ? v82 : v81;\n                goto lab_0x407ebb_3;\n            }\n            int64_t v87 = 0x100000000 * v86 >> 32; // 0x407e5d\n            int64_t v88 = v87 + v7; // 0x407e60\n            v83 = v86 & 0xffffffff;\n            if (((v88 ^ v87) & (v88 ^ v7)) < 0) {\n                // 0x407ebb\n                str3 = NULL;\n                v77 = v85 ? v82 : v81;\n                goto lab_0x407ebb_3;\n            }\n            v8 = &v79;\n            v79 = v88;\n            v85 = v84 == NULL | function_40de20(v29, &v79, &v78) == 0;\n            v77 = v81;\n        }\n    }\n    goto lab_0x407ebb_3;\n  lab_0x407ebb_3:;\n    // 0x407ebb\n    int64_t str2; // 0x407bc0\n    if (str2 != 0) {\n        // 0x407ec8\n        v8 = (int64_t)str3;\n        if (str3 != NULL) {\n            // 0x407ed5\n            strcmp((char *)str2, str3);\n        }\n    }\n    uint32_t v89 = a4 % 2; // 0x407d1e\n    int64_t v90 = function_405940((int64_t *)&v75, v8, v77, v34); // 0x407eea\n    int64_t v91; // 0x407bc0\n    char * v92; // 0x407bc0\n    char v93; // 0x407bc0\n    int64_t v94; // 0x407bc0\n    if ((int32_t)v90 != 0) {\n        // 0x408430\n        v33 = 0;\n        v30 = v29;\n        if (v89 != 0) {\n            uint64_t v95 = (int64_t)v75; // 0x40843c\n            char * v96; // 0x407bc0\n            if ((int64_t)len + str > v95) {\n                // 0x408950\n                v96 = dcgettext(NULL, \"error: parsing failed, stopped at '%s'\\n\", 5);\n            } else {\n                // 0x408457\n                v96 = dcgettext(NULL, \"error: parsing failed\\n\", 5);\n            }\n            // 0x408463\n            function_404f90((int64_t)v96, v95, 5, v34, a5, a6);\n            v33 = 0;\n            v30 = v29;\n        }\n        goto lab_0x4083d2;\n    } else {\n        // 0x407ef7\n        v94 = v34;\n        v93 = 0;\n        if (v89 != 0) {\n            // 0x4085a0\n            function_404f90((int64_t)dcgettext(NULL, \"input timezone: \", 5), (int64_t)\"input timezone: \", 5, v34, a5, a6);\n            v8 = (int64_t)\"parsed date/time string\";\n            if (v36 == 0) {\n                // 0x408674\n                v8 = (int64_t)\"system default\";\n                v91 = (int64_t)\"system default\";\n                goto lab_0x408680;\n            } else {\n                if (v29 == a5) {\n                    // 0x4089e0\n                    v8 = v36;\n                    int64_t v97 = (int64_t)\"UTC0\"; // 0x407bc0\n                    int64_t v98 = v36; // 0x4089f4\n                    int64_t v99 = 5; // 0x4089f4\n                    unsigned char v100 = *(char *)v98; // 0x4089f4\n                    char v101 = *(char *)v97; // 0x4089f4\n                    v98 += v18;\n                    v8 = v98;\n                    char v102 = v101; // 0x4089f4\n                    bool v103 = false; // 0x4089f4\n                    while (v100 == v101) {\n                        v99--;\n                        v97 += v18;\n                        v102 = v100;\n                        v103 = true;\n                        if (v99 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v100 = *(char *)v98;\n                        v101 = *(char *)v97;\n                        v98 += v18;\n                        v8 = v98;\n                        v102 = v101;\n                        v103 = false;\n                    }\n                    unsigned char v104 = v102;\n                    v8 = (int64_t)\"TZ=\\\"UTC0\\\" environment value or -u\";\n                    v91 = (int64_t)\"TZ=\\\"UTC0\\\" environment value or -u\";\n                    if ((v100 >= v104 && !v103) == v100 < v104) {\n                        goto lab_0x408680;\n                    } else {\n                        // 0x408a08\n                        v92 = dcgettext(NULL, \"TZ=\\\"%s\\\" environment value\", 5);\n                        goto lab_0x408613;\n                    }\n                } else {\n                    // 0x4085ff\n                    v92 = dcgettext(NULL, \"TZ=\\\"%s\\\" in date string\", 5);\n                    goto lab_0x408613;\n                }\n            }\n        } else {\n            goto lab_0x407f52;\n        }\n    }\n  lab_0x4083d2:\n    // 0x4083d2\n    if (v30 != a5) {\n        // 0x4083d7\n        function_40de00(v30);\n    }\n    // 0x4083df\n    free((int64_t *)*(int64_t *)(v16 + 8));\n    return v33 & 0xffffffff;\n  lab_0x407f52:;\n    int64_t v105 = v80; // 0x407d03\n    int64_t v106 = v105 + 1900; // 0x407d18\n    int64_t v107; // 0x407bc0\n    int32_t v108; // 0x407bc0\n    int64_t v109; // 0x407bc0\n    if (v106 < 0) {\n        int64_t v110 = -3800 - v105; // 0x408a86\n        v108 = v110;\n        v109 = (v105 - 0x7ffffffffffff894 & 0x7ffffffffffff128 - v105) < 0 | v110 >= 0x80000000;\n        goto lab_0x407faa;\n    } else {\n        if (v106 >= 1900) {\n            // 0x4089ca\n            v107 = 0;\n            if (v80 >= 0) {\n                goto lab_0x407f92;\n            } else {\n                // 0x4089d3\n                v107 = 1;\n                goto lab_0x407f92;\n            }\n        } else {\n            // 0x407f89\n            v107 = 0;\n            if (v80 >= 0) {\n                // 0x4089d3\n                v107 = 1;\n                goto lab_0x407f92;\n            } else {\n                goto lab_0x407f92;\n            }\n        }\n    }\n  lab_0x408680:\n    // 0x408680\n    __fprintf_chk(g47, 1, dcgettext(NULL, (char *)v91, 5));\n    goto lab_0x4088a0;\n  lab_0x407faa:;\n    // 0x407faa\n    int32_t v111; // 0x407bc0\n    int32_t v112; // 0x407bc0\n    int64_t v113; // 0x407bc0\n    int64_t v114; // 0x407bc0\n    int64_t v115; // 0x407bc0\n    int32_t v116; // 0x407bc0\n    int32_t v117; // 0x407bc0\n    int32_t v118; // bp-936, 0x407bc0\n    char v119; // 0x407bc0\n    int64_t v120; // 0x408000\n    int64_t v121; // 0x407fb3\n    int64_t v122; // 0x407fbd\n    int64_t v123; // 0x407fc7\n    int64_t v124; // 0x407fdb\n    if ((char)v109 != 0) {\n        if (v93 != 0) {\n            // 0x408eb1\n            function_404f90((int64_t)dcgettext(NULL, \"error: out-of-range year %ld\\n\", 5), v106, 5, v94, a5, a6);\n        }\n        // 0x408a4b\n        v113 = v89;\n        goto lab_0x408a53;\n    } else {\n        // 0x407fb3\n        v121 = v80 + 1;\n        v122 = v121 - 1;\n        v123 = v122 & 0xffffffff;\n        v8 = v123;\n        v124 = v89;\n        v113 = v124;\n        if (v121 >= 0x80000001 || ((v122 ^ v121) & -v121) < 0) {\n            goto lab_0x408a53;\n        } else {\n            // 0x407feb\n            v120 = v80;\n            if (v119 == 0) {\n                // 0x408ed4\n                v118 = 0;\n                v111 = 0;\n                v116 = 0;\n                v114 = 0;\n                v112 = 0;\n                if (v89 != 0) {\n                    // 0x409350\n                    function_404f90((int64_t)\"warning: using midnight as starting time: 00:00:00\\n\", v123, v120, v124, a5, a6);\n                    v117 = 0;\n                    v115 = 0;\n                    goto lab_0x40935c;\n                } else {\n                    goto lab_0x408e80;\n                }\n            } else {\n                int64_t v125 = v80; // 0x408e1a\n                if (v80 < 24) {\n                    // 0x408e3f\n                    v118 = v37;\n                    v111 = v37;\n                    v114 = v5;\n                    if (v89 != 0) {\n                        int64_t v126 = v125 & 0xffffffff; // 0x408e3f\n                        int64_t v127 = v37; // 0x408e52\n                        __snprintf_chk((char *)&v79, 100, 1, 100, \"%02d:%02d:%02d\", v126, (int64_t)v80, v127);\n                        char * v128 = dcgettext(NULL, \"using current time as starting value: '%s'\\n\", 5); // 0x409569\n                        function_404f90((int64_t)v128, (int64_t)&v79, 5, 100, v127, v126);\n                        v115 = v5;\n                        goto lab_0x40935c;\n                    } else {\n                        goto lab_0x408e80;\n                    }\n                } else {\n                    // 0x409583\n                    v33 = 0;\n                    v30 = v29;\n                    if (v89 != 0) {\n                        char * v129 = dcgettext(NULL, \"error: invalid hour %ld%s\\n\", 5); // 0x409597\n                        function_404f90((int64_t)v129, v125, (int64_t)&g25, v124, a5, 2);\n                        v33 = 0;\n                        v30 = v29;\n                    }\n                    goto lab_0x4083d2;\n                }\n            }\n        }\n    }\n  lab_0x4088a0:\n    // 0x4088a0\n    v8 = (int64_t)g47;\n    fputc(10, g47);\n    v8 = 0;\n    v94 = 0;\n    v93 = v89;\n    goto lab_0x407f52;\n  lab_0x408613:\n    // 0x408613\n    __fprintf_chk(g47, 1, v92);\n    goto lab_0x4088a0;\n  lab_0x407f92:\n    // 0x407f92\n    v109 = v105 >= 0x80000000 ? 1 : v107;\n    goto lab_0x407faa;\n  lab_0x408a53:\n    // 0x408a53\n    v8 = (int64_t)\"error: year, month, or day overflow\\n\";\n    int64_t v130 = (int64_t)\"error: year, month, or day overflow\\n\"; // 0x408a5f\n    int64_t v131 = v113; // 0x408a5f\n    int64_t v132 = a5; // 0x408a5f\n    int64_t v133 = a6; // 0x408a5f\n    if ((char)v113 == 0) {\n        goto lab_0x4083d2;\n    } else {\n        goto lab_0x408a65;\n    }\n  lab_0x408a65:\n    // 0x408a65\n    function_404f90((int64_t)dcgettext(NULL, (char *)v130, 5), v8, 5, v131, v132, v133);\n    v33 = 0;\n    v30 = v29;\n    goto lab_0x4083d2;\n  lab_0x408e80:;\n    int64_t v134 = v112;\n    int32_t v135 = v111; // bp-872, 0x4080b1\n    int64_t v136 = function_40ded0(v29, (int64_t)&v118, (int64_t)v108, 0); // 0x4080e8\n    v8 = &v135;\n    int64_t v137 = function_405050(v29, &v135, (int64_t *)&v118, v136); // 0x408106\n    int64_t v138; // 0x407bc0\n    int64_t v139; // 0x407bc0\n    int64_t v140; // 0x407bc0\n    int64_t v141; // 0x407bc0\n    int64_t v142; // 0x407bc0\n    int64_t v143; // 0x407bc0\n    int64_t v144; // 0x407bc0\n    int64_t v145; // 0x407bc0\n    int64_t v146; // 0x407bc0\n    int64_t v147; // 0x407bc0\n    int64_t v148; // 0x407bc0\n    int64_t v149; // 0x407bc0\n    int64_t v150; // 0x407bc0\n    int32_t v151; // 0x407bc0\n    int32_t v152; // 0x407bc0\n    int64_t v153; // 0x407bc0\n    int64_t v154; // bp-744, 0x407bc0\n    int32_t v155; // 0x407bc0\n    int64_t v156; // 0x409605\n    int64_t * v157; // 0x408fd7\n    int64_t * v158; // 0x408fdf\n    if ((char)v137 != 0) {\n        // 0x408b9b\n        v153 = v114;\n        if (v89 == 0) {\n            int64_t v159 = v116;\n            int64_t v160 = v80; // 0x408c86\n            int64_t v161 = v1; // 0x408c8e\n            v151 = 0;\n            v143 = 0;\n            v146 = v136;\n            v145 = v136;\n            v139 = v134;\n            v141 = v159;\n            v148 = v160;\n            v152 = 0;\n            v149 = v161;\n            v138 = v134;\n            v140 = v159;\n            if (((int64_t)v1 || v160 || v161) != 0) {\n                goto lab_0x409322;\n            } else {\n                goto lab_0x408cac;\n            }\n        } else {\n            // 0x408f8d\n            v156 = function_404f20(v108, &v154, v80, v136);\n            __snprintf_chk((char *)&v79, 100, 1, 100, \"(Y-M-D) %s-%02d-%02d\", (char *)v156, v121 & 0xffffffff, v120);\n            char * v162 = dcgettext(NULL, \"using current date as starting value: '%s'\\n\", 5); // 0x40963f\n            function_404f90((int64_t)v162, (int64_t)&v79, 5, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n            int64_t v163 = function_405410((int32_t *)(v16 + 144), (int64_t *)(v16 + 736), &v79, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156); // 0x408fb1\n            function_404f90((int64_t)dcgettext(NULL, \"starting date/time: '%s'\\n\", 5), v163, 5, 100, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n            v157 = (int64_t *)(v16 + 840);\n            int64_t v164 = *v157; // 0x408fd7\n            v158 = (int64_t *)(v16 + 848);\n            int64_t v165 = *v158; // 0x408fdf\n            int64_t * v166 = (int64_t *)(v16 + 856); // 0x408fe7\n            int64_t v167 = *v166; // 0x408fe7\n            unsigned char v168 = *(char *)(v16 + 953); // 0x408fef\n            int64_t v169 = v165 | v164; // 0x408ffa\n            v8 = v169;\n            v143 = v168;\n            v146 = v167;\n            v145 = v136;\n            v139 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n            v141 = v156;\n            if ((v167 || v169) == 0) {\n                goto lab_0x408cac;\n            } else {\n                // 0x409009\n                v148 = v165;\n                v149 = v164;\n                v138 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n                v140 = v156;\n                if (v168 == 0) {\n                    goto lab_0x409322;\n                } else {\n                    // 0x409011\n                    v147 = v167;\n                    if (v169 == 0) {\n                        goto lab_0x409534;\n                    } else {\n                        int64_t v170 = v167; // 0x409022\n                        if (*(int32_t *)(v16 + 156) != 15) {\n                            // 0x409024\n                            function_404f90((int64_t)dcgettext(NULL, \"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\", 5), (int64_t)\"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\", 5, v167, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n                            v170 = *v166;\n                        }\n                        // 0x409047\n                        v147 = v170;\n                        if (v147 != 0) {\n                            goto lab_0x409534;\n                        } else {\n                            goto lab_0x409050;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        int64_t v171 = v118; // 0x408138\n        int64_t v172 = v155; // 0x408153\n        if (v155 == v112 == v135 == v118) {\n            // 0x409971\n            v33 = 0;\n            v30 = v29;\n            if (v89 == 0) {\n                goto lab_0x4083d2;\n            } else {\n                // 0x409979\n                function_404f90((int64_t)dcgettext(NULL, \"error: invalid date/time value:\\n\", 5), (int64_t)\"error: invalid date/time value:\\n\", 5, v172, v134, v171);\n                int64_t v173 = function_405410(&v135, (int64_t *)&v75, &v78, v172, v134, v171); // 0x4099af\n                function_404f90((int64_t)dcgettext(NULL, \"    user provided time: '%s'\\n\", 5), v173, 5, v172, v134, v171);\n                int64_t v174 = function_405410(&v118, (int64_t *)&v75, &v78, v172, v134, v171); // 0x4099e8\n                function_404f90((int64_t)dcgettext(NULL, \"       normalized time: '%s'\\n\", 5), v174, 5, v172, v134, v171);\n                v142 = (int64_t)&g25;\n                v150 = (int64_t)&g25;\n                v144 = &v78;\n                goto lab_0x409795;\n            }\n        } else {\n            // 0x4096b8\n            v33 = 0;\n            v30 = v29;\n            if (v89 == 0) {\n                goto lab_0x4083d2;\n            } else {\n                char * v175 = dcgettext(NULL, \"error: invalid date/time value:\\n\", 5); // 0x4096df\n                int64_t v176 = &v78; // 0x4096e4\n                function_404f90((int64_t)v175, (int64_t)\"error: invalid date/time value:\\n\", 5, v172, v134, v171);\n                int64_t v177 = function_405410(&v135, (int64_t *)&v75, &v78, v172, v134, v171); // 0x409709\n                function_404f90((int64_t)dcgettext(NULL, \"    user provided time: '%s'\\n\", 5), v177, 5, v172, v134, v171);\n                int64_t v178 = function_405410(&v118, (int64_t *)&v75, &v78, v172, v134, v171); // 0x409742\n                function_404f90((int64_t)dcgettext(NULL, \"       normalized time: '%s'\\n\", 5), v178, 5, v172, v134, v171);\n                v142 = (int64_t)\"--\";\n                v150 = (int64_t)&g25;\n                v144 = v176;\n                if (v135 != v118) {\n                    int64_t v179 = v155 != v112 ? (int64_t)\"--\" : (int64_t)&g25; // 0x409791\n                    v142 = v179;\n                    v150 = (int64_t)\"--\";\n                    v144 = v176;\n                }\n                goto lab_0x409795;\n            }\n        }\n    }\n  lab_0x40935c:\n    // 0x40935c\n    v8 = v123;\n    v111 = v118;\n    v116 = v117;\n    int32_t v180; // 0x407bc0\n    v155 = v180;\n    v114 = v115;\n    v112 = v180;\n    goto lab_0x408e80;\n  lab_0x409322:;\n    int64_t v181 = (int64_t)*(int32_t *)(v16 + 164); // 0x409322\n    int64_t v182 = v149 + v181; // 0x40932a\n    int64_t v183 = 0x100000000 * v182 >> 32; // 0x409330\n    v33 = 0;\n    v30 = v29;\n    int64_t v184; // 0x407bc0\n    int64_t v185; // 0x407bc0\n    int64_t v186; // 0x407bc0\n    int64_t v187; // 0x407bc0\n    int32_t v188; // 0x407bc0\n    if (v182 != v183) {\n        goto lab_0x4083d2;\n    } else {\n        // 0x40933f\n        v33 = 0;\n        v30 = v29;\n        if (((v182 ^ v181) & (v182 ^ v149)) < 0) {\n            goto lab_0x4083d2;\n        } else {\n            // 0x409347\n            *(int32_t *)(v16 + 24) = (int32_t)v182;\n            v184 = v148;\n            v188 = v152;\n            v187 = v183;\n            v185 = v138;\n            v186 = v140;\n            goto lab_0x409085;\n        }\n    }\n  lab_0x408cac:;\n    int64_t v189 = v145;\n    int32_t v190 = v151; // 0x408cb5\n    int64_t v191 = v143; // 0x408cb5\n    int64_t v192 = v146; // 0x408cb5\n    int64_t v193 = v189; // 0x408cb5\n    int64_t v194 = v139; // 0x408cb5\n    int64_t v195 = v141; // 0x408cb5\n    if (*(int64_t *)(v16 + 944) == 0) {\n        goto lab_0x408ce1;\n    } else {\n        int64_t v196 = (int64_t)*(int32_t *)(v16 + 760); // 0x408cb7\n        int64_t v197 = *(int64_t *)(v16 + 184); // 0x408cc4\n        int64_t v198 = v196 - v197; // 0x408cc4\n        int64_t v199 = v189 - v198; // 0x408ccf\n        bool v200 = ((v198 ^ v196) & (v197 ^ v196)) < 0 | ((v199 ^ v189) & (v198 ^ v189)) < 0;\n        int64_t v201 = v200; // 0x408cd8\n        v190 = v151;\n        v191 = v143;\n        v192 = v201;\n        v193 = v199;\n        v194 = v139;\n        v195 = v141;\n        if (v200) {\n            // 0x4095b3\n            v33 = 0;\n            v30 = v29;\n            if ((char)v143 != 0) {\n                // 0x4095bb\n                function_404f90((int64_t)dcgettext(NULL, \"error: timezone %d caused time_t overflow\\n\", 5), v196 & 0xffffffff, 5, v201, v139, v141);\n                v33 = 0;\n                v30 = v29;\n            }\n            goto lab_0x4083d2;\n        } else {\n            goto lab_0x408ce1;\n        }\n    }\n  lab_0x408ce1:;\n    // 0x408ce1\n    int64_t v202; // 0x407bc0\n    int64_t v203; // 0x407bc0\n    int64_t v204; // 0x407bc0\n    int64_t v205; // 0x407bc0\n    int64_t v206; // 0x407bc0\n    int64_t v207; // 0x407bc0\n    int64_t v208; // 0x407bc0\n    int64_t v209; // 0x407bc0\n    int64_t v210; // 0x407bc0\n    int64_t v211; // 0x407bc0\n    int64_t v212; // 0x407bc0\n    int64_t v213; // 0x407bc0\n    int64_t v214; // 0x407bc0\n    int32_t v215; // 0x407bc0\n    int32_t v216; // 0x407bc0\n    if ((char)v191 != 0) {\n        int64_t v217 = function_405410(&v118, (int64_t *)&v75, &v79, v192, v194, v195); // 0x40943c\n        function_404f90((int64_t)dcgettext(NULL, \"'%s' = %ld epoch-seconds\\n\", 5), v217, v193, v192, v194, v195);\n        v213 = v192;\n        v209 = v124;\n        v204 = v194;\n        v207 = 0;\n        // 0x40947f\n        v8 = 0;\n        int64_t v218 = (0x100000000 * v153 >> 32) + 0x3b9aca00 + -0x3b9aca00 * ((int64_t)(v153 < 0) % 2); // 0x4094d5\n        v213 = v218;\n        v209 = v124;\n        v204 = 0;\n        v207 = 0;\n        int64_t v219 = v1; // 0x40951d\n        int128_t v220 = v219; // 0x409525\n        int128_t v221 = 60 * v220; // 0x409525\n        v216 = v1;\n        v212 = v218;\n        v214 = v221;\n        v211 = v193;\n        v208 = v124;\n        v205 = 0;\n        v206 = 0;\n        v203 = v219;\n        v213 = v218;\n        v209 = v124;\n        v204 = 0;\n        v207 = 0;\n        if (v221 == 0x3c0000000000000000 * v220 >> 64) {\n            goto lab_0x408dab;\n        } else {\n            goto lab_0x4093f6;\n        }\n    } else {\n        // 0x408ce1\n        v202 = v16 + 24;\n        v215 = v190;\n        v210 = v193;\n        goto lab_0x408ce9;\n    }\n  lab_0x409795:\n    // 0x409795\n    __snprintf_chk((char *)v144, 100, 1, 100, \"                                 %4s %2s %2s %2s %2s %2s\", (char *)&g25, (char *)&g25, (char *)&g25, (char *)&g25, (char *)v142, (char *)v150);\n    int64_t v222 = 52; // 0x408303\n    if (v119 == 32) {\n        int64_t v223 = 51;\n        while (v223 != 0) {\n            int64_t v224 = v223 - 1; // 0x408310\n            if (*(char *)(v224 + v144) != 32) {\n                // break -> 0x408321\n                break;\n            }\n            v223 = v224;\n        }\n        // 0x408321\n        v222 = 0x100000000 * v223 >> 32;\n    }\n    // 0x40835f\n    *(char *)(v16 + 624 + v222) = 0;\n    function_404f90((int64_t)\"%s\\n\", v144, v222, 100, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v225 = dcgettext((char *)((int32_t)\"%s\\n\" ^ (int32_t)\"%s\\n\"), \"     possible reasons:\\n\", 5); // 0x408344\n    function_404f90((int64_t)v225, (int64_t)\"     possible reasons:\\n\", 5, 100, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v226 = dcgettext(NULL, \"       numeric values overflow;\\n\", 5); // 0x408395\n    function_404f90((int64_t)v226, (int64_t)\"       numeric values overflow;\\n\", 5, v120, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    char * v227 = dcgettext(NULL, \"missing timezone\", 5); // 0x409a22\n    function_404f90((int64_t)\"       %s\\n\", (int64_t)v227, 5, v120, (int64_t)\"                                 %4s %2s %2s %2s %2s %2s\", (int64_t)&g25);\n    v33 = 0;\n    v30 = v29;\n    goto lab_0x4083d2;\n  lab_0x409534:\n    if (v116 != 12) {\n        // 0x409542\n        function_404f90((int64_t)dcgettext(NULL, \"warning: when adding relative days, it is recommended to specify noon\\n\", 5), (int64_t)\"warning: when adding relative days, it is recommended to specify noon\\n\", 5, v147, (int64_t)\"(Y-M-D) %s-%02d-%02d\", v156);\n    }\n    goto lab_0x409050;\n  lab_0x409085:;\n    int32_t * v276 = (int32_t *)(v16 + 160); // 0x409085\n    int64_t v277 = (int64_t)*v276; // 0x409085\n    int64_t v272 = v184 + v277; // 0x40908d\n    int64_t v232 = v187; // 0x40909f\n    int64_t v233 = v185; // 0x40909f\n    int64_t v234 = v186; // 0x40909f\n    int64_t v273; // 0x4090b7\n    int64_t v275; // 0x409128\n    int64_t v269; // 0x4097f9\n    if (v272 >= 0x80000000) {\n        goto lab_0x4091b9;\n    } else {\n        // 0x4090a5\n        v232 = v187;\n        v233 = v185;\n        v234 = v186;\n        if (((v272 ^ v277) & (v272 ^ v184)) < 0) {\n            goto lab_0x4091b9;\n        } else {\n            int32_t * v278 = (int32_t *)(v16 + 156); // 0x4090af\n            int64_t v279 = (int64_t)*v278; // 0x4090af\n            int64_t v280 = *(int64_t *)(v16 + 856); // 0x4090b7\n            v273 = v280 + v279;\n            int64_t v281 = 0x100000000 * v273 >> 32; // 0x4090bf\n            v232 = v187;\n            v233 = v185;\n            v234 = v186;\n            if (v273 != v281) {\n                goto lab_0x4091b9;\n            } else {\n                // 0x4090ce\n                v232 = v187;\n                v233 = v185;\n                v234 = v186;\n                if (((v273 ^ v279) & (v273 ^ v280)) < 0) {\n                    goto lab_0x4091b9;\n                } else {\n                    int64_t v282 = v16 + 24;\n                    int64_t v283 = v16 + 144; // 0x4090da\n                    int32_t v284 = v272; // 0x4090e5\n                    *v276 = v284;\n                    int32_t v285 = v273; // 0x4090ed\n                    *v278 = v285;\n                    *(int32_t *)(v16 + 164) = *(int32_t *)v282;\n                    *(int64_t *)v283 = *(int64_t *)(v16 + 208);\n                    *(int32_t *)(v16 + 152) = *(int32_t *)(v16 + 216);\n                    *(int32_t *)(v16 + 176) = *(int32_t *)(v16 + 240);\n                    v275 = function_40ded0(v29, v283, v281, v187);\n                    if (v275 == -1) {\n                        // 0x409a76\n                        v33 = 0;\n                        v30 = v29;\n                        if (v89 != 0) {\n                            int64_t v286 = function_405410(&v118, (int64_t *)&v75, &v79, v187, v185, v186); // 0x409a9c\n                            function_404f90((int64_t)dcgettext(NULL, \"error: adding relative date resulted in an invalid date: '%s'\\n\", 5), v286, 5, v187, v185, v186);\n                            v33 = 0;\n                            v30 = v29;\n                        }\n                        goto lab_0x4083d2;\n                    } else {\n                        unsigned char v287 = *(char *)(v16 + 953); // 0x40913a\n                        if (v287 != 0) {\n                            int64_t v288 = v1; // 0x4097dd\n                            v269 = 0x100000000 * v288 >> 32;\n                            function_404f90((int64_t)dcgettext(NULL, \"after date adjustment (%+ld years, %+ld months, %+ld days),\\n\", 5), (int64_t)v1, (int64_t)v80, v269, v185, v186);\n                            int64_t v289 = function_405410(&v118, (int64_t *)&v75, &v79, v269, v185, v186); // 0x40982a\n                            function_404f90((int64_t)dcgettext(NULL, \"    new date/time = '%s'\\n\", 5), v289, 5, v269, v185, v186);\n                            v151 = v188;\n                            v143 = v124;\n                            v146 = v269;\n                            v145 = v275;\n                            v139 = v185;\n                            v141 = v186;\n                            if (v288 != 0) {\n                                goto lab_0x408cac;\n                            } else {\n                                if (v80 != v285) {\n                                    goto lab_0x4098ba;\n                                } else {\n                                    // 0x40989d\n                                    v151 = v188;\n                                    if (v80 != 0 || (int32_t)v122 == v284) {\n                                        goto lab_0x408cac;\n                                    } else {\n                                        goto lab_0x4098ba;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x40914a\n                            v202 = v282;\n                            v215 = v188;\n                            v210 = v275;\n                            if (*(int64_t *)(v16 + 944) == 0) {\n                                goto lab_0x408ce9;\n                            } else {\n                                int64_t v290 = (int64_t)*(int32_t *)(v16 + 760); // 0x40915b\n                                int64_t v291 = *(int64_t *)(v16 + 184); // 0x409163\n                                int64_t v292 = v290 - v291; // 0x409163\n                                int64_t v293 = v275 - v292; // 0x40916e\n                                v33 = 0;\n                                v30 = v29;\n                                v190 = v188;\n                                v191 = v287;\n                                v192 = 0;\n                                v193 = v293;\n                                v194 = v185;\n                                v195 = v186;\n                                if (((v292 ^ v290) & (v291 ^ v290)) >= 0 && ((v293 ^ v275) & (v292 ^ v275)) >= 0) {\n                                    goto lab_0x408ce1;\n                                } else {\n                                    goto lab_0x4083d2;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4093f6:\n    // 0x4093f6\n    v33 = 0;\n    v30 = v29;\n    if ((char)v209 == 0) {\n        goto lab_0x4083d2;\n    } else {\n        // 0x4093ff\n        v8 = (int64_t)\"error: adding relative time caused an overflow\\n\";\n        v130 = (int64_t)\"error: adding relative time caused an overflow\\n\";\n        v131 = v213;\n        v132 = v204;\n        v133 = v207;\n        goto lab_0x408a65;\n    }\n  lab_0x408ce9:;\n    int64_t v294 = *(int64_t *)(v16 + 864); // 0x408ce9\n    int128_t v295 = v294; // 0x408cf1\n    int128_t v296 = 3600 * v295; // 0x408cf1\n    *(int64_t *)v202 = v294;\n    v33 = 0;\n    v30 = v29;\n    if (v296 == 0xe100000000000000000 * v295 >> 64) {\n        int64_t v297 = v296; // 0x408cf1\n        int64_t v298 = (int64_t)*(int32_t *)(v16 + 888); // 0x408d03\n        v8 = v298;\n        int64_t v299 = v210 + v297; // 0x408d90\n        v33 = 0;\n        v30 = v29;\n        if (((v299 ^ v210) & (v299 ^ v297)) < 0) {\n            goto lab_0x4083d2;\n        } else {\n            int64_t v300 = *(int64_t *)(v16 + 832) + v298; // 0x408d1d\n            int64_t v301 = v300 + 0x3b9aca00 + (v300 >> 63 & -0x3b9aca00); // 0x408d51\n            int64_t v302 = *(int64_t *)(v16 + 872); // 0x408d99\n            int128_t v303 = v302; // 0x408da1\n            int128_t v304 = 60 * v303; // 0x408da1\n            v33 = 0;\n            v30 = v29;\n            v216 = v215;\n            v212 = v301;\n            v214 = v304;\n            v211 = v299;\n            v208 = v109;\n            v205 = v298;\n            v206 = v300 - v301 >> 63;\n            v203 = v302;\n            if (v304 == 0x3c0000000000000000 * v303 >> 64) {\n                goto lab_0x408dab;\n            } else {\n                goto lab_0x4083d2;\n            }\n        }\n    } else {\n        goto lab_0x4083d2;\n    }\n  lab_0x409050:;\n    int64_t v228 = (int64_t)*(int32_t *)(v16 + 164); // 0x409052\n    int64_t v229 = *v157; // 0x40905a\n    int64_t v230 = v229 + v228; // 0x40905a\n    int64_t v231 = 0x100000000 * v230 >> 32; // 0x409062\n    v232 = v231;\n    v233 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n    v234 = v156;\n    if (v230 != v231) {\n        goto lab_0x4091b9;\n    } else {\n        // 0x409071\n        v232 = v231;\n        v233 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n        v234 = v156;\n        if (((v230 ^ v228) & (v230 ^ v229)) < 0) {\n            goto lab_0x4091b9;\n        } else {\n            // 0x409079\n            *(int32_t *)(v16 + 24) = (int32_t)v230;\n            v184 = *v158;\n            v187 = v231;\n            v185 = (int64_t)\"(Y-M-D) %s-%02d-%02d\";\n            v186 = v156;\n            goto lab_0x409085;\n        }\n    }\n  lab_0x4091b9:\n    // 0x4091b9\n    v33 = 0;\n    v30 = v29;\n    if (*(char *)(v16 + 953) != 0) {\n        // 0x4091c7\n        function_404f90((int64_t)dcgettext(NULL, \"error: %s:%d\\n\", 5), (int64_t)\"parse-datetime.y\", 2167, v232, v233, v234);\n        v33 = 0;\n        v30 = v29;\n    }\n    goto lab_0x4083d2;\n  lab_0x408dab:;\n    int64_t v235 = v206;\n    int64_t v236 = v211 + v214; // 0x408dab\n    v213 = v212;\n    v209 = v208;\n    v204 = v205;\n    v207 = v235;\n    int64_t v237; // 0x407bc0\n    int64_t v238; // 0x407bc0\n    int64_t v239; // 0x407bc0\n    int64_t v240; // 0x407bc0\n    int64_t * v241; // 0x408dd0\n    unsigned char v242; // 0x408df5\n    if (((v236 ^ v211) & (v236 ^ v214)) < 0) {\n        goto lab_0x4093f6;\n    } else {\n        int64_t v243 = *(int64_t *)(v16 + 880); // 0x408db4\n        int64_t v244 = v243 + v236; // 0x408dbc\n        v213 = v212;\n        v209 = v208;\n        v204 = v205;\n        v207 = v235;\n        if (((v244 ^ v236) & (v244 ^ v243)) < 0) {\n            goto lab_0x4093f6;\n        } else {\n            // 0x408dc5\n            v213 = v212;\n            v209 = v208;\n            v204 = v205;\n            v207 = v235;\n            // 0x408dd0\n            v241 = (int64_t *)(v16 + 40);\n            int64_t v245 = *v241; // 0x408dd0\n            *(int64_t *)v245 = v244;\n            *(int64_t *)(v245 + 8) = v212;\n            int64_t v246 = v212; // 0x408ddf\n            int64_t v247 = v205; // 0x408ddf\n            if ((char)v208 != 0) {\n                // 0x408de1\n                v246 = v212;\n                v247 = v205;\n                if ((v243 | v203 | v8 | *(int64_t *)(v16 + 24)) != 0) {\n                    int64_t v248 = v205 & 0xffffffff; // 0x409adf\n                    function_404f90((int64_t)dcgettext(NULL, \"after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\\n\", 5), (int64_t)v216, v203, v243, v248, v235);\n                    function_404f90((int64_t)dcgettext(NULL, \"    new time = %ld epoch-seconds\\n\", 5), v244, 5, v243, v248, v235);\n                    v246 = v243;\n                    v247 = v248;\n                    if (v80 != -1) {\n                        int64_t v249 = function_40de20(v29, a1, &v154); // 0x409b35\n                        v246 = v243;\n                        v247 = v248;\n                        if (false && v249 != 0) {\n                            // 0x409b57\n                            function_404f90((int64_t)dcgettext(NULL, \"warning: daylight saving time changed after time adjustment\\n\", 5), (int64_t)\"warning: daylight saving time changed after time adjustment\\n\", 5, v243, v248, v235);\n                            v246 = v243;\n                            v247 = v248;\n                        }\n                    }\n                }\n            }\n            // 0x408df5\n            v242 = *(char *)(v16 + 953);\n            v33 = 1;\n            v30 = v29;\n            if (v242 == 0) {\n                goto lab_0x4083d2;\n            } else {\n                // 0x408729\n                v238 = v247;\n                int64_t * v250 = (int64_t *)(v16 + 16); // 0x408729\n                v8 = (int64_t)\"timezone: system default\\n\";\n                v237 = (int64_t)\"timezone: system default\\n\";\n                v239 = v246;\n                if (*v250 == 0) {\n                    goto lab_0x408763;\n                } else {\n                    int64_t v251 = *v250; // 0x40873b\n                    v8 = v251;\n                    int64_t v252 = (int64_t)\"UTC0\"; // 0x407bc0\n                    int64_t v253 = v251; // 0x40874f\n                    unsigned char v254 = *(char *)v253; // 0x40874f\n                    char v255 = *(char *)v252; // 0x40874f\n                    v253 += v18;\n                    v8 = v253;\n                    int64_t v256 = 4; // 0x40874f\n                    char v257 = v255; // 0x40874f\n                    bool v258 = false; // 0x40874f\n                    while (v254 == v255) {\n                        v252 += v18;\n                        v257 = v254;\n                        v258 = true;\n                        if (v256 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v254 = *(char *)v253;\n                        v255 = *(char *)v252;\n                        v253 += v18;\n                        v8 = v253;\n                        v256--;\n                        v257 = v255;\n                        v258 = false;\n                    }\n                    unsigned char v259 = v257;\n                    if ((v254 >= v259 && !v258) != v254 < v259) {\n                        char * v260 = dcgettext(NULL, \"timezone: TZ=\\\"%s\\\" environment value\\n\", 5); // 0x408968\n                        function_404f90((int64_t)v260, *v250, 5, v256, v238, v235);\n                        v240 = v256;\n                        goto lab_0x408774;\n                    } else {\n                        // 0x40875e\n                        v8 = (int64_t)\"timezone: Universal Time\\n\";\n                        v237 = (int64_t)\"timezone: Universal Time\\n\";\n                        v239 = v256;\n                        goto lab_0x408763;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x408763:\n    // 0x408763\n    function_404f90((int64_t)dcgettext(NULL, (char *)v237, 5), v8, 5, v239, v238, v235);\n    v240 = v239;\n    goto lab_0x408774;\n  lab_0x4098ba:\n    // 0x4098ba\n    function_404f90((int64_t)dcgettext(NULL, \"warning: month/year adjustment resulted in shifted dates:\\n\", 5), (int64_t)\"warning: month/year adjustment resulted in shifted dates:\\n\", 5, v269, v185, v186);\n    int64_t v270 = function_404f20(v188, &v154, 5, v269); // 0x4098e1\n    int64_t v271 = v272 + 1; // 0x409901\n    function_404f90((int64_t)dcgettext(NULL, \"     adjusted Y M D: %s %02d %02d\\n\", 5), 0x100000000 * v270 >> 32, v271 & 0xffffffff, v273 & 0xffffffff, v185, v186);\n    int64_t v274 = function_404f20(v108, &v154, (int32_t)v271, v120); // 0x409937\n    function_404f90((int64_t)dcgettext(NULL, \"   normalized Y M D: %s %02d %02d\\n\", 5), v274, v121 & 0xffffffff, v120, v185, v186);\n    v143 = v124;\n    v146 = v120;\n    v145 = v275;\n    v139 = v185;\n    v141 = v186;\n    goto lab_0x408cac;\n  lab_0x408774:;\n    int64_t timep = *v241; // 0x408774\n    int64_t v261 = *(int64_t *)timep; // 0x408785\n    int64_t v262 = *(int64_t *)(timep + 8); // 0x408789\n    function_404f90((int64_t)dcgettext(NULL, \"final: %ld.%09d (epoch-seconds)\\n\", 5), v261, v262 & 0xffffffff, v240, v238, v235);\n    int64_t time2 = v16 + 336; // 0x4087a2\n    v8 = time2;\n    if (gmtime_r((int32_t *)timep, (struct tm *)time2) != NULL) {\n        int64_t v263 = function_405410((int32_t *)time2, NULL, (int64_t *)(v16 + 400), v240, v238, v235); // 0x4087c9\n        function_404f90((int64_t)dcgettext(NULL, \"final: %s (UTC)\\n\", 5), v263, 5, v240, v238, v235);\n    }\n    int64_t v264 = v242; // 0x408df5\n    int64_t v265 = v16 + 624; // 0x4087f4\n    int64_t v266 = function_40de20(v29, (int64_t *)*v241, (int64_t *)v265); // 0x4087ff\n    v33 = v264;\n    v30 = v29;\n    if (v266 != 0) {\n        int64_t v267 = function_404e20(*(int32_t *)(v16 + 664), (int64_t *)(v16 + 112)); // 0x408819\n        int64_t v268 = function_405410((int32_t *)v265, NULL, (int64_t *)(v16 + 400), v240, v238, v235); // 0x408833\n        function_404f90((int64_t)dcgettext(NULL, \"final: %s (UTC%s)\\n\", 5), v268, v267, v240, v238, v235);\n        v33 = v264;\n        v30 = v29;\n    }\n    goto lab_0x4083d2;\n}\n"
        },
        {
            "funcName": "function_409b90",
            "funcStartAddr": "409b90",
            "funcEndAddr": "409bf7",
            "decompiledFuncCode": "int64_t function_409b90(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t env_val = (int64_t)getenv(\"TZ\"); // 0x409bae\n    int64_t v1 = function_40db40(env_val, a2, a3); // 0x409bb9\n    int64_t result = 0; // 0x409bc1\n    if (v1 != 0) {\n        int64_t v2 = function_407bc0((int64_t *)a1, a2, (int32_t)a3, 0, v1, env_val); // 0x409bd7\n        function_40de00(v1);\n        result = v2 & 0xffffffff;\n    }\n    // 0x409be6\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c00",
            "funcStartAddr": "409c00",
            "funcEndAddr": "409c8b",
            "decompiledFuncCode": "int64_t function_409c00(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int32_t v2 = v1;\n    int64_t result; // 0x409c00\n    if (a3 == 1) {\n        // 0x409c60\n        *(int32_t *)a1 = v2;\n        if (v2 > 68) {\n            // 0x409c53\n            return 1;\n        }\n        // 0x409c6e\n        result = 0;\n        if ((a4 & 8) == 0) {\n            // 0x409c73\n            *(int32_t *)a1 = v2 + 100;\n            return 1;\n        }\n    } else {\n        if (a3 != 2) {\n            // 0x409c28\n            int64_t t; // bp-16, 0x409c00\n            time((int32_t *)&t);\n            struct tm * time_info = localtime((int32_t *)&t); // 0x409c3f\n            int64_t v3 = (int64_t)time_info; // 0x409c3f\n            result = v3;\n            if (time_info != NULL) {\n                // 0x409c49\n                *(int32_t *)a1 = *(int32_t *)(v3 + 20);\n                result = 1;\n            }\n        } else {\n            // 0x409c0c\n            result = 0;\n            if ((a4 & 2) != 0) {\n                // 0x409c11\n                *(int32_t *)a1 = 100 * v2 - 1900 + *(int32_t *)(v1 + 4);\n                return 1;\n            }\n        }\n    }\n    // 0x409c53\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c90",
            "funcStartAddr": "409c90",
            "funcEndAddr": "409f37",
            "decompiledFuncCode": "int64_t function_409c90(int64_t * a1, int64_t a2, uint64_t a3) {\n    char * str = (char *)a2; // 0x409caa\n    int64_t len = strlen(str); // 0x409caa\n    int64_t v1 = len; // 0x409cb6\n    int64_t v2 = 0; // 0x409cb6\n    if ((a3 & 4) != 0) {\n        char * found_char_pos = strchr(str, 46); // 0x409cc4\n        int64_t v3 = (int64_t)found_char_pos; // 0x409cc4\n        v1 = len;\n        v2 = v3;\n        if (found_char_pos != NULL) {\n            int64_t v4 = v3 - a2; // 0x409cd1\n            v1 = v4;\n            v2 = v3;\n            if (len - v4 != 3) {\n                // 0x409ce2\n                return 0;\n            }\n        }\n    }\n    // 0x409cfb\n    if (v1 >= 13 || v1 % 2 != 0) {\n        // 0x409ce2\n        return 0;\n    }\n    int64_t v5 = a3 & 0xffffffff; // 0x409c9d\n    int64_t timep; // bp-200, 0x409c90\n    int64_t v6 = &timep; // 0x409ca3\n    int64_t v7 = a2; // 0x409d13\n    int64_t result = 0; // 0x409d21\n    int64_t v8; // 0x409c90\n    uint64_t v9; // 0x409d2c\n    int64_t v10; // 0x409d4c\n    while ((int32_t)*(char *)v7 < 58) {\n        // 0x409d23\n        v7++;\n        if (v1 + a2 == v7) {\n            // 0x409d2c\n            v9 = v1 / 2;\n            v10 = v6 + 96;\n            v8 = 0;\n            goto lab_0x409d38;\n        }\n        result = 0;\n    }\n    // 0x409ce2\n    return result;\n  lab_0x409d38:;\n    int64_t v11 = 2 * v8 + a2;\n    int64_t v12 = (int64_t)*(char *)v11; // 0x409d38\n    char v13 = *(char *)(v11 + 1); // 0x409d43\n    *(int32_t *)(v10 + 4 * v8) = (int32_t)((int64_t)v13 + 0xffffffd0 + 2 * (v12 + 0xffffff10 + 4 * v12));\n    int64_t v14 = v8 + 1; // 0x409d50\n    v8 = v14;\n    int32_t v15; // bp-104, 0x409c90\n    int32_t v16; // bp-148, 0x409c90\n    int32_t v17; // 0x409c90\n    int32_t v18; // 0x409c90\n    int32_t v19; // 0x409c90\n    int32_t v20; // bp-88, 0x409c90\n    int32_t v21; // 0x409ede\n    if (v9 != v14) {\n        goto lab_0x409d38;\n    } else {\n        int64_t v22 = v9 - 4; // 0x409d59\n        if (a3 % 2 == 0) {\n            int64_t v23 = function_409c00((int64_t *)&v16, (int64_t *)&v15, v22, v5); // 0x409ecc\n            result = 0;\n            if ((char)v23 == 0) {\n                return result;\n            } else {\n                int64_t v24 = v6 + 80 + 4 * v9; // 0x409ed9\n                v21 = *(int32_t *)v24;\n                v17 = *(int32_t *)(v24 + 4);\n                v18 = *(int32_t *)(v24 + 8);\n                v19 = *(int32_t *)(v24 + 12);\n                goto lab_0x409da3;\n            }\n        } else {\n            int64_t v25 = function_409c00((int64_t *)&v16, (int64_t *)&v20, v22, v5); // 0x409d96\n            result = 0;\n            v21 = v15;\n            if ((char)v25 == 0) {\n                return result;\n            } else {\n                goto lab_0x409da3;\n            }\n        }\n    }\n  lab_0x409da3:;\n    int32_t v26 = 0; // 0x409da6\n    if (v2 == 0) {\n        goto lab_0x409dd9;\n    } else {\n        int64_t v27 = (int64_t)*(char *)(v2 + 1) + 0xffffffd0; // 0x409db1\n        result = 0;\n        if ((int32_t)v27 < 10) {\n            char v28 = *(char *)(v2 + 2); // 0x409dbd\n            result = 0;\n            if (v28 == 57 || (int32_t)v28 < 57) {\n                // 0x409dce\n                v26 = 10 * (v27 & 0xffffffff) + 0xffffffd0 + (int64_t)v28;\n                goto lab_0x409dd9;\n            } else {\n                return result;\n            }\n        } else {\n            return result;\n        }\n    }\n  lab_0x409dd9:;\n    int32_t v29 = v21 - 1;\n    v15 = v26;\n    v20 = v29;\n    int64_t v30 = function_40da50(&v15); // 0x409e09\n    timep = v30;\n    int64_t v31 = &v15; // 0x409e1b\n    if (v30 == -1) {\n        struct tm * time_info = localtime((int32_t *)&timep); // 0x409f0b\n        result = 0;\n        v31 = (int64_t)time_info;\n        if (time_info != NULL) {\n            goto lab_0x409e21;\n        } else {\n            return result;\n        }\n    } else {\n        goto lab_0x409e21;\n    }\n  lab_0x409e21:;\n    int32_t v32 = *(int32_t *)(v31 + 20); // 0x409e29\n    int32_t v33 = *(int32_t *)(v31 + 16); // 0x409e2c\n    int32_t v34 = *(int32_t *)(v31 + 12); // 0x409e35\n    int32_t v35 = *(int32_t *)v31; // 0x409e42\n    int32_t v36 = *(int32_t *)(v31 + 8); // 0x409e44\n    int32_t v37 = *(int32_t *)(v31 + 4); // 0x409e4d\n    if ((v33 ^ v29 | v32 ^ v16 | v34 ^ v17 | v35 ^ v26 || v36 ^ v18 || v37 ^ v19) == 0) {\n        // 0x409e98\n        *a1 = timep;\n        return 1;\n    }\n    // 0x409e58\n    result = 0;\n    if (v26 != 60) {\n        return result;\n    } else {\n        // 0x409e61\n        int64_t v38; // bp-184, 0x409c90\n        int64_t * v39 = __stpcpy_chk((char *)&v38, str, 16); // 0x409e6e\n        *(int16_t *)((int64_t)v39 - 2) = 0x3935;\n        *(char *)v39 = 0;\n        int64_t v40; // bp-192, 0x409c90\n        int64_t v41 = function_409c90(&v40, (int64_t)&v38, v5); // 0x409e8b\n        result = v41;\n        if ((char)v41 != 0) {\n            // 0x409e98\n            *a1 = timep;\n            return 1;\n        }\n        return result;\n    }\n}\n"
        },
        {
            "funcName": "function_409f40",
            "funcStartAddr": "409f40",
            "funcEndAddr": "409fd9",
            "decompiledFuncCode": "int64_t function_409f40(int64_t str) {\n    // 0x409f40\n    if (str == 0) {\n        // 0x409fb9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g47);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x409f4e\n    int64_t result = (int64_t)found_char_pos; // 0x409f4e\n    if (found_char_pos == NULL) {\n        // 0x409fa9\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x409f58\n    if (v1 - str < 7) {\n        // 0x409fa9\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    // 0x409f68\n    bool v2; // 0x409f40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x409f40\n    int64_t v5 = result - 6; // 0x409f40\n    int64_t v6 = 7; // 0x409f76\n    unsigned char v7 = *(char *)v5; // 0x409f76\n    char v8 = *(char *)v4; // 0x409f76\n    char v9 = v8; // 0x409f76\n    bool v10 = false; // 0x409f76\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x409f80\n    int64_t v13 = v1; // 0x409f80\n    int64_t v14 = 3; // 0x409f80\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x409fa9\n        g53 = str;\n        g46 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x409f92\n    char v16 = *(char *)v12; // 0x409f92\n    char v17 = v16; // 0x409f92\n    bool v18 = false; // 0x409f92\n    while (v15 == v16) {\n        // 0x409f82\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x409f9c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x409f9e\n        v20 = result + 4;\n        g43 = v20;\n    }\n    // 0x409fa9\n    g53 = v20;\n    g46 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409fe0",
            "funcStartAddr": "409fe0",
            "funcEndAddr": "40a0d2",
            "decompiledFuncCode": "int64_t function_409fe0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x409ff4\n    int64_t result = (int64_t)v1; // 0x409ff4\n    if (result != a1) {\n        // 0x40a001\n        return result;\n    }\n    int64_t v2 = function_40e190(); // 0x40a010\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x40a0c6\n    if (v3 == 85) {\n        // 0x40a020\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x40a0b8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g24 : (int64_t)&g8;\n            return result2;\n        }\n        char v4 = *v1; // 0x40a04e\n        int64_t result3 = v4 != 96 ? (int64_t)&g20 : (int64_t)&g23; // 0x40a05b\n        // 0x40a001\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x40a0b8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g24 : (int64_t)&g8;\n        return result2;\n    }\n    char v5 = *v1; // 0x40a09d\n    int64_t result4 = v5 != 96 ? (int64_t)&g21 : (int64_t)&g22; // 0x40a0aa\n    // 0x40a001\n    return result4;\n}\n"
        },
        {
            "funcName": "function_40a0e0",
            "funcStartAddr": "40a0e0",
            "funcEndAddr": "40a137",
            "decompiledFuncCode": "int64_t function_40a0e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x40a0e0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x40a128\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a137",
            "funcStartAddr": "40a137",
            "funcEndAddr": "40b301",
            "decompiledFuncCode": "int64_t function_40a137(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x40a181\n    int64_t v3 = 0; // 0x40a181\n    int64_t v4; // 0x40a137\n    int64_t v5; // 0x40a137\n    int64_t v6; // 0x40a137\n    int64_t v7; // 0x40a137\n    int64_t v8; // 0x40a137\n    int64_t v9; // 0x40a137\n    int64_t v10; // 0x40a137\n    int64_t v11; // 0x40a137\n    int64_t v12; // 0x40a137\n    int64_t v13; // 0x40a137\n    int64_t v14; // 0x40a137\n    int64_t v15; // 0x40a137\n    int64_t v16; // 0x40a137\n    int64_t v17; // 0x40a137\n    int64_t v18; // 0x40a137\n    int64_t result; // 0x40a137\n    int64_t v19; // 0x40a137\n    int32_t wc; // bp+132, 0x40a137\n    int64_t ps; // bp+136, 0x40a137\n    char v20; // 0x40a6f0\n    int64_t v21; // 0x40a6f0\n    int64_t v22; // 0x40aa98\n    int64_t v23; // 0x40a137\n    int64_t v24; // 0x40aab7\n    int32_t v25; // 0x40a137\n    while (true) {\n      lab_0x40a188_2:\n        // 0x40a188\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x40a137\n        int64_t v27; // 0x40a1bc\n        while (true) {\n          lab_0x40a188:\n            // 0x40a188\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x40a193\n            if (v15 == -1) {\n                // 0x40a195\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x40a1a3\n            if (v28) {\n                // break (via goto) -> 0x40a908\n                goto lab_0x40a908;\n            }\n            // 0x40a1ac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g72 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40a79b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x40a2e1;\n                    }\n                    // 0x40abbd\n                    v26 = v5 + 1;\n                    goto lab_0x40a188;\n                }\n                case 7: {\n                    goto lab_0x40a2e1;\n                }\n                case 8: {\n                    goto lab_0x40a2e1;\n                }\n                case 9: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x40a2e1;\n                }\n                case 12: {\n                    goto lab_0x40a2e1;\n                }\n                case 13: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40a2ad;\n                }\n                case 36: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x40a2e1;\n                }\n                case 38: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x40a2e1;\n                }\n                case 44: {\n                    goto lab_0x40a2e1;\n                }\n                case 45: {\n                    goto lab_0x40a2e1;\n                }\n                case 46: {\n                    goto lab_0x40a2e1;\n                }\n                case 47: {\n                    goto lab_0x40a2e1;\n                }\n                case 48: {\n                    goto lab_0x40a2e1;\n                }\n                case 49: {\n                    goto lab_0x40a2e1;\n                }\n                case 50: {\n                    goto lab_0x40a2e1;\n                }\n                case 51: {\n                    goto lab_0x40a2e1;\n                }\n                case 52: {\n                    goto lab_0x40a2e1;\n                }\n                case 53: {\n                    goto lab_0x40a2e1;\n                }\n                case 54: {\n                    goto lab_0x40a2e1;\n                }\n                case 55: {\n                    goto lab_0x40a2e1;\n                }\n                case 56: {\n                    goto lab_0x40a2e1;\n                }\n                case 57: {\n                    goto lab_0x40a2e1;\n                }\n                case 58: {\n                    goto lab_0x40a2e1;\n                }\n                case 59: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x40a2e1;\n                }\n                case 66: {\n                    goto lab_0x40a2e1;\n                }\n                case 67: {\n                    goto lab_0x40a2e1;\n                }\n                case 68: {\n                    goto lab_0x40a2e1;\n                }\n                case 69: {\n                    goto lab_0x40a2e1;\n                }\n                case 70: {\n                    goto lab_0x40a2e1;\n                }\n                case 71: {\n                    goto lab_0x40a2e1;\n                }\n                case 72: {\n                    goto lab_0x40a2e1;\n                }\n                case 73: {\n                    goto lab_0x40a2e1;\n                }\n                case 74: {\n                    goto lab_0x40a2e1;\n                }\n                case 75: {\n                    goto lab_0x40a2e1;\n                }\n                case 76: {\n                    goto lab_0x40a2e1;\n                }\n                case 77: {\n                    goto lab_0x40a2e1;\n                }\n                case 78: {\n                    goto lab_0x40a2e1;\n                }\n                case 79: {\n                    goto lab_0x40a2e1;\n                }\n                case 80: {\n                    goto lab_0x40a2e1;\n                }\n                case 81: {\n                    goto lab_0x40a2e1;\n                }\n                case 82: {\n                    goto lab_0x40a2e1;\n                }\n                case 83: {\n                    goto lab_0x40a2e1;\n                }\n                case 84: {\n                    goto lab_0x40a2e1;\n                }\n                case 85: {\n                    goto lab_0x40a2e1;\n                }\n                case 86: {\n                    goto lab_0x40a2e1;\n                }\n                case 87: {\n                    goto lab_0x40a2e1;\n                }\n                case 88: {\n                    goto lab_0x40a2e1;\n                }\n                case 89: {\n                    goto lab_0x40a2e1;\n                }\n                case 90: {\n                    goto lab_0x40a2e1;\n                }\n                case 91: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x40a2e1;\n                }\n                case 94: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x40a2e1;\n                }\n                case 96: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x40a2e1;\n                }\n                case 98: {\n                    goto lab_0x40a2e1;\n                }\n                case 99: {\n                    goto lab_0x40a2e1;\n                }\n                case 100: {\n                    goto lab_0x40a2e1;\n                }\n                case 101: {\n                    goto lab_0x40a2e1;\n                }\n                case 102: {\n                    goto lab_0x40a2e1;\n                }\n                case 103: {\n                    goto lab_0x40a2e1;\n                }\n                case 104: {\n                    goto lab_0x40a2e1;\n                }\n                case 105: {\n                    goto lab_0x40a2e1;\n                }\n                case 106: {\n                    goto lab_0x40a2e1;\n                }\n                case 107: {\n                    goto lab_0x40a2e1;\n                }\n                case 108: {\n                    goto lab_0x40a2e1;\n                }\n                case 109: {\n                    goto lab_0x40a2e1;\n                }\n                case 110: {\n                    goto lab_0x40a2e1;\n                }\n                case 111: {\n                    goto lab_0x40a2e1;\n                }\n                case 112: {\n                    goto lab_0x40a2e1;\n                }\n                case 113: {\n                    goto lab_0x40a2e1;\n                }\n                case 114: {\n                    goto lab_0x40a2e1;\n                }\n                case 115: {\n                    goto lab_0x40a2e1;\n                }\n                case 116: {\n                    goto lab_0x40a2e1;\n                }\n                case 117: {\n                    goto lab_0x40a2e1;\n                }\n                case 118: {\n                    goto lab_0x40a2e1;\n                }\n                case 119: {\n                    goto lab_0x40a2e1;\n                }\n                case 120: {\n                    goto lab_0x40a2e1;\n                }\n                case 121: {\n                    goto lab_0x40a2e1;\n                }\n                case 122: {\n                    goto lab_0x40a2e1;\n                }\n                case 123: {\n                    goto lab_0x40a285;\n                }\n                case 124: {\n                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x40a285;\n                }\n                case 126: {\n                    goto lab_0x40a2ad;\n                }\n                default: {\n                    goto lab_0x40a685;\n                }\n            }\n        }\n      lab_0x40a685:\n        if (v23 != 1) {\n            // 0x40a9f0\n            ps = 0;\n            int64_t len = v15; // 0x40aa00\n            if (v15 == -1) {\n                // 0x40aa02\n                len = strlen((char *)str);\n            }\n            // 0x40aa2e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40aa8f:\n                // 0x40aa8f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x40aa94\n                int64_t v30 = v29 + str;\n                v24 = function_40d310(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40b00a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40b00a_2;\n                    }\n                    case -2: {\n                        // 0x40b0ed\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x40b127\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40b12a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x40b137\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x40b130\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40b00a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40b00a_2;\n                    }\n                    case 1: {\n                        goto lab_0x40aa60;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40ab0c\n                        char v34 = *(char *)v33; // 0x40ab1d\n                        unsigned char v35; // 0x40a137\n                        if (v34 < 125) {\n                            // 0x40ab28\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40ab3f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x40ab10\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40ab1d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x40ab28\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40ab3f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x40ab10\n                            v33++;\n                        }\n                        goto lab_0x40aa60;\n                    }\n                }\n            }\n            goto lab_0x40b00a_2;\n        } else {\n            // 0x40a6d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x40a2e1;\n        }\n    }\n  lab_0x40a908:\n    // 0x40a908\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40b20a\n        if (v8 > result) {\n            // 0x40b213\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x40a537\n        return result;\n    }\n    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40a2e1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x40a2f0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40a4fa_2;\n        }\n    }\n    int64_t v39 = result; // 0x40a3f1\n    char v40 = v20; // 0x40a3f1\n    int64_t v41 = v38; // 0x40a3f1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x40a3f1\n    int64_t v43 = v36; // 0x40a3f1\n    goto lab_0x40a36d;\n  lab_0x40a4fa_2:\n    // 0x40a537\n    return function_40a0e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40b00a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x40a2e1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40abde\n        int64_t v50 = v5 + 1; // 0x40acc1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x40acc8\n        char v52 = v20; // 0x40acc8\n        int64_t v53 = result; // 0x40acc8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x40ac91\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x40ac95\n            int64_t v56 = v54 + 1; // 0x40ac9a\n            int64_t v57 = v51 + 1; // 0x40acc1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40ac8c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x40ac91\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x40ac95\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40a36d;\n    }\n  lab_0x40aa60:\n    // 0x40aa60\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40aa7f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40aa82\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40b00a\n        goto lab_0x40b00a_2;\n    }\n    goto lab_0x40aa8f;\n  lab_0x40a2ad:\n    // 0x40a2ad\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40a4fa_2;\n    }\n    goto lab_0x40a2e1;\n  lab_0x40a285:;\n    bool v60 = v15 == 1; // 0x40a290\n    if (v15 == -1) {\n        // 0x40a292\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40a29e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x40a2e1;\n    } else {\n        goto lab_0x40a2ad;\n    }\n  lab_0x40a36d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x40a372\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x40a376\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x40a188_2;\n}\n"
        },
        {
            "funcName": "function_40b310",
            "funcStartAddr": "40b310",
            "funcEndAddr": "40b4ae",
            "decompiledFuncCode": "int64_t function_40b310(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40b312\n    int32_t * v3 = __errno_location(); // 0x40b32c\n    int64_t v4 = (int64_t)g36; // 0x40b331\n    int32_t v5 = *v3; // 0x40b33b\n    int64_t v6 = v4; // 0x40b351\n    if (v2 >= (int64_t)*(int32_t *)&g39) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x40b4a9\n            function_40c3e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x40b360\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x40b367\n        int64_t v9; // 0x40b310\n        if (g36 == &g37) {\n            int64_t v10 = function_40c1f0(0, v8); // 0x40b48a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g37); // 0x40b48f\n            *(int64_t *)&g36 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_40c1f0(v4, v8); // 0x40b37b\n            *(int64_t *)&g36 = v12;\n            v9 = v12;\n        }\n        // 0x40b38a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g39; // 0x40b38a\n        int32_t v14 = v7; // 0x40b391\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g39 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x40b3c1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40b3cb\n    int64_t * v17 = (int64_t *)v15; // 0x40b3ce\n    uint64_t v18 = *v17; // 0x40b3ce\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x40b3d1\n    int64_t result = *v19; // 0x40b3d1\n    int64_t v20; // 0x40b310\n    uint64_t v21 = function_40a0e0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x40b3f4\n    if (v18 > v21) {\n        // 0x40b46b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x40b407\n    *v17 = v22;\n    if (result != (int64_t)&g54) {\n        // 0x40b417\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_40c190(v22); // 0x40b431\n    *v19 = result2;\n    int64_t v23; // 0x40b310\n    function_40a0e0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40b46b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b4b0",
            "funcStartAddr": "40b4b0",
            "funcEndAddr": "40b4e4",
            "decompiledFuncCode": "int64_t function_40b4b0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40b4b7\n    int64_t result = function_40c390(a1 == 0 ? (int64_t)&g55 : a1, 56); // 0x40b4d6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b4f0",
            "funcStartAddr": "40b4f0",
            "funcEndAddr": "40b4ff",
            "decompiledFuncCode": "int64_t function_40b4f0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g55 : a1); // 0x40b4fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b500",
            "funcStartAddr": "40b500",
            "funcEndAddr": "40b50f",
            "decompiledFuncCode": "int64_t function_40b500(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 : a1; // 0x40b508\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g55;\n}\n"
        },
        {
            "funcName": "function_40b510",
            "funcStartAddr": "40b510",
            "funcEndAddr": "40b543",
            "decompiledFuncCode": "int64_t function_40b510(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 + 8 : a1 + 8; // 0x40b529\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40b52e\n    uint32_t v3 = *v2; // 0x40b52e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x40b532\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_40b550",
            "funcStartAddr": "40b550",
            "funcEndAddr": "40b563",
            "decompiledFuncCode": "int64_t function_40b550(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g55 + 4 : a1 + 4); // 0x40b55c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_40b570",
            "funcStartAddr": "40b570",
            "funcEndAddr": "40b59b",
            "decompiledFuncCode": "int64_t function_40b570(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g55 : a1; // 0x40b578\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x40b595\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40b58c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g55;\n}\n"
        },
        {
            "funcName": "function_40b5a0",
            "funcStartAddr": "40b5a0",
            "funcEndAddr": "40b612",
            "decompiledFuncCode": "int64_t function_40b5a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g55 : a5; // 0x40b5c2\n    int32_t * v2 = __errno_location(); // 0x40b5cb\n    uint32_t v3 = *(int32_t *)v1; // 0x40b5eb\n    int64_t result = function_40a0e0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40b5fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b620",
            "funcStartAddr": "40b620",
            "funcEndAddr": "40b701",
            "decompiledFuncCode": "int64_t function_40b620(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g55 : a4; // 0x40b642\n    int32_t * v2 = __errno_location(); // 0x40b648\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x40b667\n    int32_t * v4 = (int32_t *)v1; // 0x40b66a\n    int64_t v5 = function_40a0e0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x40b685\n    int64_t v6 = v5 + 1; // 0x40b68a\n    int64_t result = function_40c190(v6); // 0x40b69f\n    function_40a0e0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x40b6e4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40b6ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b710",
            "funcStartAddr": "40b710",
            "funcEndAddr": "40b71a",
            "decompiledFuncCode": "int64_t function_40b710(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b710\n    return function_40b620(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_40b720",
            "funcStartAddr": "40b720",
            "funcEndAddr": "40b7b5",
            "decompiledFuncCode": "int64_t function_40b720(void) {\n    uint32_t v1 = *(int32_t *)&g39; // 0x40b720\n    int64_t v2 = v1; // 0x40b720\n    int64_t v3 = v2; // 0x40b734\n    if (v1 >= 2) {\n        int64_t v4 = &g39;\n        int64_t v5 = v4 + 16; // 0x40b753\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g73;\n        while (v5 != (int64_t)g36 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x40b750\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g73;\n        }\n    }\n    int64_t v6 = v3; // 0x40b76d\n    if (g37 != 0x61b360) {\n        // 0x40b76f\n        free((int64_t *)g37);\n        g37 = 256;\n        *(int64_t *)&g38 = (int64_t)&g54;\n        v6 = &g73;\n    }\n    int64_t result = v6; // 0x40b791\n    if (g36 != &g37) {\n        // 0x40b793\n        free(g36);\n        *(int64_t *)&g36 = (int64_t)&g37;\n        result = &g73;\n    }\n    // 0x40b7a6\n    *(int32_t *)&g39 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b7c0",
            "funcStartAddr": "40b7c0",
            "funcEndAddr": "40b7d1",
            "decompiledFuncCode": "int64_t function_40b7c0(void) {\n    // 0x40b7c0\n    int64_t v1; // 0x40b7c0\n    return function_40b310(v1, v1, -1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_40b7e0",
            "funcStartAddr": "40b7e0",
            "funcEndAddr": "40b7ea",
            "decompiledFuncCode": "int64_t function_40b7e0(void) {\n    // 0x40b7e0\n    int64_t v1; // 0x40b7e0\n    return function_40b310(v1, v1, v1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_40b7f0",
            "funcStartAddr": "40b7f0",
            "funcEndAddr": "40b806",
            "decompiledFuncCode": "int64_t function_40b7f0(int64_t a1) {\n    // 0x40b7f0\n    return function_40b310(0, a1, -1, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_40b810",
            "funcStartAddr": "40b810",
            "funcEndAddr": "40b822",
            "decompiledFuncCode": "int64_t function_40b810(int64_t a1, int64_t a2) {\n    // 0x40b810\n    return function_40b310(0, a1, a2, (int64_t *)&g55);\n}\n"
        },
        {
            "funcName": "function_40b830",
            "funcStartAddr": "40b830",
            "funcEndAddr": "40b898",
            "decompiledFuncCode": "int64_t function_40b830(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40b840\n    return function_40b310((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40b8a0",
            "funcStartAddr": "40b8a0",
            "funcEndAddr": "40b904",
            "decompiledFuncCode": "int64_t function_40b8a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40b8b0\n    return function_40b310((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_40b910",
            "funcStartAddr": "40b910",
            "funcEndAddr": "40b91c",
            "decompiledFuncCode": "int64_t function_40b910(int64_t a1, int64_t a2) {\n    // 0x40b910\n    return function_40b830(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_40b920",
            "funcStartAddr": "40b920",
            "funcEndAddr": "40b92f",
            "decompiledFuncCode": "int64_t function_40b920(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b920\n    return function_40b8a0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_40b930",
            "funcStartAddr": "40b930",
            "funcEndAddr": "40b9a0",
            "decompiledFuncCode": "int64_t function_40b930(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g55); // 0x40b93d\n    int128_t v2 = __asm_movdqa(g56); // 0x40b945\n    int128_t v3 = __asm_movdqa(g57); // 0x40b94d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x40b962\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x40b978\n    uint32_t v6 = *v5; // 0x40b978\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40b97d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_40b310(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_40b9a0",
            "funcStartAddr": "40b9a0",
            "funcEndAddr": "40b9ad",
            "decompiledFuncCode": "int64_t function_40b9a0(int64_t a1, int64_t a2) {\n    // 0x40b9a0\n    return function_40b930(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_40b9b0",
            "funcStartAddr": "40b9b0",
            "funcEndAddr": "40b9c1",
            "decompiledFuncCode": "int64_t function_40b9b0(int64_t a1) {\n    // 0x40b9b0\n    return function_40b930(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_40b9d0",
            "funcStartAddr": "40b9d0",
            "funcEndAddr": "40b9da",
            "decompiledFuncCode": "int64_t function_40b9d0(void) {\n    // 0x40b9d0\n    int64_t v1; // 0x40b9d0\n    return function_40b930(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_40b9e0",
            "funcStartAddr": "40b9e0",
            "funcEndAddr": "40ba4e",
            "decompiledFuncCode": "int64_t function_40b9e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40b9fa\n    return function_40b310((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40ba50",
            "funcStartAddr": "40ba50",
            "funcEndAddr": "40babc",
            "decompiledFuncCode": "int64_t function_40ba50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g55); // 0x40ba57\n    int128_t v2 = __asm_movdqa(g56); // 0x40ba5f\n    int128_t v3 = __asm_movdqa(g57); // 0x40ba67\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x40ba89\n    if (a2 == 0 || a3 == 0) {\n        // 0x40bab7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40ba9a\n    return function_40b310(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_40bac0",
            "funcStartAddr": "40bac0",
            "funcEndAddr": "40bac9",
            "decompiledFuncCode": "int64_t function_40bac0(void) {\n    // 0x40bac0\n    int64_t v1; // 0x40bac0\n    return function_40ba50(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_40bad0",
            "funcStartAddr": "40bad0",
            "funcEndAddr": "40bae7",
            "decompiledFuncCode": "int64_t function_40bad0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bad0\n    return function_40ba50(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_40baf0",
            "funcStartAddr": "40baf0",
            "funcEndAddr": "40bb03",
            "decompiledFuncCode": "int64_t function_40baf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40baf0\n    return function_40ba50(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40bb10",
            "funcStartAddr": "40bb10",
            "funcEndAddr": "40bb1a",
            "decompiledFuncCode": "int64_t function_40bb10(void) {\n    // 0x40bb10\n    int64_t v1; // 0x40bb10\n    return function_40b310(v1, v1, v1, &g35);\n}\n"
        },
        {
            "funcName": "function_40bb20",
            "funcStartAddr": "40bb20",
            "funcEndAddr": "40bb32",
            "decompiledFuncCode": "int64_t function_40bb20(int64_t a1, int64_t a2) {\n    // 0x40bb20\n    return function_40b310(0, a1, a2, &g35);\n}\n"
        },
        {
            "funcName": "function_40bb40",
            "funcStartAddr": "40bb40",
            "funcEndAddr": "40bb51",
            "decompiledFuncCode": "int64_t function_40bb40(int64_t a1, int64_t a2) {\n    // 0x40bb40\n    return function_40b310(a1, a2, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40bb60",
            "funcStartAddr": "40bb60",
            "funcEndAddr": "40bb76",
            "decompiledFuncCode": "int64_t function_40bb60(int64_t a1) {\n    // 0x40bb60\n    return function_40b310(0, a1, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40bb80",
            "funcStartAddr": "40bb80",
            "funcEndAddr": "40bbe4",
            "decompiledFuncCode": "int64_t function_40bb80(int64_t tp) {\n    int32_t v1 = clock_settime(0, (struct timespec *)tp); // 0x40bb8e\n    if (v1 == 0) {\n        // 0x40bbdb\n        return 0;\n    }\n    int32_t v2 = *__errno_location(); // 0x40bb9e\n    int32_t result = v1; // 0x40bba1\n    if (v2 != 1) {\n        int64_t tv = 0; // bp-40, 0x40bbba\n        result = settimeofday((struct timeval *)&tv, NULL);\n    }\n    // 0x40bbdb\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bbf0",
            "funcStartAddr": "40bbf0",
            "funcEndAddr": "40bfcd",
            "decompiledFuncCode": "int64_t function_40bbf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x40bc88\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40bc0c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x40bc26\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40bc6b\n    if (a6 < 10) {\n        // 0x40bc7a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x40bd72\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_40bfd0",
            "funcStartAddr": "40bfd0",
            "funcEndAddr": "40bff0",
            "decompiledFuncCode": "int64_t function_40bfd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40bfd0\n    if (a5 == 0) {\n        // 0x40bfeb\n        return function_40bbf0(a1, a2, a3, a4, a5, 0, (int64_t)&g73);\n    }\n    int64_t v1 = 0; // 0x40bfd7\n    v1++;\n    int64_t v2 = v1; // 0x40bfe9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x40bfe0\n        v1++;\n        v2 = v1;\n    }\n    // 0x40bfeb\n    return function_40bbf0(a1, a2, a3, a4, a5, v2, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_40bff0",
            "funcStartAddr": "40bff0",
            "funcEndAddr": "40c050",
            "decompiledFuncCode": "int64_t function_40bff0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x40bff0\n    int64_t v3 = &v2; // 0x40bff0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x40c023\n    int64_t v6; // 0x40c00d\n    int64_t * v7; // 0x40c02b\n    int64_t v8; // 0x40c02b\n    int64_t v9; // 0x40c037\n    if (v5 < 48) {\n        // 0x40c000\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x40c043\n            break;\n        }\n    } else {\n        // 0x40c02b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x40c043\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x40c021\n    while (v4 != 9) {\n        // 0x40c019\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x40c000\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x40c043\n                break;\n            }\n        } else {\n            // 0x40c02b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x40c043\n                break;\n            }\n        }\n        // 0x40c019\n        v10 = 10;\n    }\n    // 0x40c043\n    return function_40bbf0(a1, a2, a3, a4, v3, v10, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_40c050",
            "funcStartAddr": "40c050",
            "funcEndAddr": "40c10c",
            "decompiledFuncCode": "int64_t function_40c050(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x40c050\n    int64_t v1; // bp-168, 0x40c050\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x40c050\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x40c050\n    int64_t v8; // 0x40c050\n    int64_t v9; // bp-56, 0x40c050\n    int64_t v10; // 0x40c0b5\n    int64_t v11; // 0x40c0d9\n    if ((int32_t)v6 < 48) {\n        // 0x40c0a0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x40c0f0\n            break;\n        }\n    } else {\n        // 0x40c0d2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x40c0f0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40c0ca\n    int64_t v13 = 10; // 0x40c0ca\n    while (v5 != 9) {\n        // 0x40c0cc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x40c0a0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x40c0f0\n                break;\n            }\n        } else {\n            // 0x40c0d2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x40c0f0\n                break;\n            }\n        }\n        // 0x40c0c2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x40c0f0\n    int64_t v14; // bp-136, 0x40c050\n    int64_t result = function_40bbf0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g73); // 0x40c0ff\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c110",
            "funcStartAddr": "40c110",
            "funcEndAddr": "40c184",
            "decompiledFuncCode": "int64_t function_40c110(int64_t a1) {\n    // 0x40c110\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x40c173\n    return fputs_unlocked(v1, g44);\n}\n"
        },
        {
            "funcName": "function_40c190",
            "funcStartAddr": "40c190",
            "funcEndAddr": "40c1aa",
            "decompiledFuncCode": "int64_t function_40c190(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x40c194\n    if (size != 0 != (mem == NULL)) {\n        // 0x40c1a3\n        return (int64_t)mem;\n    }\n    // 0x40c1a5\n    function_40c3e0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c1b0",
            "funcStartAddr": "40c1b0",
            "funcEndAddr": "40c1d1",
            "decompiledFuncCode": "int64_t function_40c1b0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x40c1b3\n    int64_t v2 = v1; // 0x40c1b3\n    if (v2 < 0) {\n        // 0x40c1cb\n        function_40c3e0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40c1c9\n        return function_40c190(v2);\n    }\n    // 0x40c1cb\n    function_40c3e0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c1e0",
            "funcStartAddr": "40c1e0",
            "funcEndAddr": "40c1e2",
            "decompiledFuncCode": "int64_t function_40c1e0(void) {\n    // 0x40c1e0\n    int64_t v1; // 0x40c1e0\n    return function_40c190(v1);\n}\n"
        },
        {
            "funcName": "function_40c1f0",
            "funcStartAddr": "40c1f0",
            "funcEndAddr": "40c226",
            "decompiledFuncCode": "int64_t function_40c1f0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x40c218\n        free(v1);\n        return (int32_t)&g73 ^ (int32_t)&g73;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x40c201\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x40c210\n        return (int64_t)mem;\n    }\n    // 0x40c221\n    function_40c3e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c230",
            "funcStartAddr": "40c230",
            "funcEndAddr": "40c251",
            "decompiledFuncCode": "int64_t function_40c230(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x40c233\n    int64_t v2 = v1; // 0x40c233\n    if (v2 < 0) {\n        // 0x40c24b\n        function_40c3e0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40c249\n        return function_40c1f0(a1, v2);\n    }\n    // 0x40c24b\n    function_40c3e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c260",
            "funcStartAddr": "40c260",
            "funcEndAddr": "40c2e6",
            "decompiledFuncCode": "int64_t function_40c260(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40c2bb\n            function_40c3e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40c1f0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x40c2a3\n    if (a2 == 0) {\n        // 0x40c2c8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x40c2a8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40c2bb\n        function_40c3e0(a1);\n        // UNREACHABLE\n    }\n    // 0x40c28a\n    *(int64_t *)a2 = v2;\n    return function_40c1f0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_40c2f0",
            "funcStartAddr": "40c2f0",
            "funcEndAddr": "40c340",
            "decompiledFuncCode": "int64_t function_40c2f0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x40c2f0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40c33a\n            function_40c3e0(a1);\n            // UNREACHABLE\n        }\n        // 0x40c312\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40c1f0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x40c325\n        *(int64_t *)a2 = 128;\n        return function_40c1f0(0, 128);\n    }\n    // 0x40c338\n    if (a2 < 0) {\n        // 0x40c33a\n        function_40c3e0(a1);\n        // UNREACHABLE\n    }\n    // 0x40c312\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_40c1f0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_40c340",
            "funcStartAddr": "40c340",
            "funcEndAddr": "40c357",
            "decompiledFuncCode": "int64_t function_40c340(int64_t a1, int64_t a2) {\n    // 0x40c340\n    return (int64_t)memset((int64_t *)function_40c190(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_40c360",
            "funcStartAddr": "40c360",
            "funcEndAddr": "40c38e",
            "decompiledFuncCode": "int64_t function_40c360(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x40c367\n    if ((int64_t)v1 < 0) {\n        // 0x40c389\n        function_40c3e0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x40c389\n        function_40c3e0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40c37a\n    if (mem != NULL) {\n        // 0x40c384\n        return (int64_t)mem;\n    }\n    // 0x40c389\n    function_40c3e0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c390",
            "funcStartAddr": "40c390",
            "funcEndAddr": "40c3b8",
            "decompiledFuncCode": "int64_t function_40c390(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40c190(a2); // 0x40c39f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_40c3c0",
            "funcStartAddr": "40c3c0",
            "funcEndAddr": "40c3d3",
            "decompiledFuncCode": "int64_t function_40c3c0(int64_t str) {\n    // 0x40c3c0\n    return function_40c390(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_40c3e0",
            "funcStartAddr": "40c3e0",
            "funcEndAddr": "40c411",
            "decompiledFuncCode": "int64_t function_40c3e0(int64_t a1) {\n    // 0x40c3e0\n    error(g34, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40c420",
            "funcStartAddr": "40c420",
            "funcEndAddr": "40c49b",
            "decompiledFuncCode": "int64_t function_40c420(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40c427\n    if (fileno(stream) < 0) {\n        // 0x40c487\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40c43a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40c46b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40c487\n            return fclose(stream);\n        }\n    }\n    // 0x40c43c\n    if ((int32_t)function_40c4a0(a1, v1) == 0) {\n        // 0x40c487\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40c448\n    int32_t v3 = *v2; // 0x40c450\n    int64_t result = fclose(stream); // 0x40c45e\n    if (v3 != 0) {\n        // 0x40c490\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40c460\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c4a0",
            "funcStartAddr": "40c4a0",
            "funcEndAddr": "40c4e0",
            "decompiledFuncCode": "int64_t function_40c4a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40c4ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40c4ba\n        return fflush(stream);\n    }\n    // 0x40c4c8\n    function_40c4e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40c4e0",
            "funcStartAddr": "40c4e0",
            "funcEndAddr": "40c537",
            "decompiledFuncCode": "int64_t function_40c4e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40c4e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40c4ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40c51b\n    int64_t result = -1; // 0x40c524\n    if (v1 != -1) {\n        // 0x40c526\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40c532\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c540",
            "funcStartAddr": "40c540",
            "funcEndAddr": "40c61f",
            "decompiledFuncCode": "int64_t function_40c540(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40c54c\n    uint32_t v2 = *v1; // 0x40c54c\n    int64_t v3 = a2 & 0xffffffff; // 0x40c551\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40c554\n    uint64_t v5 = (int64_t)*v4; // 0x40c554\n    int64_t v6; // 0x40c5c2\n    if (v3 <= v5) {\n      lab_0x40c5bc_2:\n        // 0x40c5bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40c542\n    int64_t v8 = v2; // 0x40c540\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40c5bc\n        goto lab_0x40c5bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40c578\n    int64_t v17; // 0x40c586\n    int64_t * v18; // 0x40c5a0\n    int64_t * v19; // 0x40c5a3\n    int64_t v20; // 0x40c5ae\n    int64_t v21; // 0x40c586\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40c583\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40c5a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40c5b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40c5bc\n            goto lab_0x40c5bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40c5bc\n            goto lab_0x40c5bc_2;\n        }\n        // 0x40c572\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40c5fb\n    int64_t * v23 = (int64_t *)v22; // 0x40c600\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40c603\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40c600\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40c617\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40c56d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40c5bc\n            goto lab_0x40c5bc_2;\n        }\n        // 0x40c572\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40c583\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40c5a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40c5b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40c5bc\n                goto lab_0x40c5bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40c5bc\n                goto lab_0x40c5bc_2;\n            }\n            // 0x40c572\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40c5e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40c600\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40c617\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40c5bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c620",
            "funcStartAddr": "40c620",
            "funcEndAddr": "40cc3c",
            "decompiledFuncCode": "int64_t function_40c620(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40c63f\n    int64_t v2 = *v1; // 0x40c63f\n    char * str2 = (char *)v2; // 0x40c64c\n    char c = *str2; // 0x40c64c\n    int64_t v3 = v2; // 0x40c678\n    int64_t v4 = 0; // 0x40c620\n    int32_t v5; // 0x40c620\n    int64_t v6; // 0x40c620\n    int64_t v7; // 0x40c620\n    int64_t v8; // 0x40c620\n    int64_t v9; // 0x40c620\n    int64_t v10; // 0x40c620\n    int64_t v11; // 0x40c620\n    int64_t v12; // 0x40c620\n    int64_t v13; // 0x40c620\n    int64_t str3; // 0x40c620\n    int64_t v14; // 0x40c620\n    int64_t v15; // 0x40c620\n    int64_t v16; // 0x40c620\n    int64_t v17; // 0x40c620\n    int32_t v18; // 0x40c620\n    int32_t v19; // 0x40c620\n    int32_t v20; // 0x40c620\n    int32_t v21; // 0x40c620\n    int32_t v22; // 0x40c620\n    int32_t v23; // 0x40c620\n    int32_t v24; // 0x40c620\n    int32_t v25; // 0x40c620\n    int32_t v26; // 0x40c620\n    int32_t v27; // 0x40c620\n    int32_t v28; // 0x40c620\n    int32_t v29; // 0x40c620\n    int64_t nmemb; // 0x40c620\n    int64_t v30; // 0x40c620\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40c67c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40c678\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40c688\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40c68e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40c658\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40c6bc\n                int64_t v34; // 0x40c620\n                int64_t v35; // 0x40c620\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40c6c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40c840;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40c6d6\n                int64_t v37 = *(int64_t *)v36; // 0x40c6da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40c6b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40c6c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40c840;\n                        }\n                    }\n                    // 0x40c6d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40c726:\n                    // 0x40c726\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40c780;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40c8f0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40c780;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40c8a0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40c74a;\n                                } else {\n                                    // 0x40c8ac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40c74a;\n                                    } else {\n                                        // 0x40c8ba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40c74a;\n                                        } else {\n                                            goto lab_0x40c780;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40c74a;\n                            }\n                        }\n                    }\n                }\n              lab_0x40c791:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40c966\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40cb12\n                            flockfile(g47);\n                            int64_t v41 = *v1; // 0x40cb32\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40cb7f\n                            int64_t v43 = (int64_t)g47;\n                            int64_t v44 = v43; // 0x40cb99\n                            int64_t v45; // 0x40cb9b\n                            if (*(char *)v42 != 0) {\n                                // 0x40cb9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g47;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40cb93\n                            while (v17 + nmemb != v42) {\n                                // 0x40cb95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40cb9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g47;\n                                }\n                                // 0x40cb88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40cbc0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g47);\n                            v40 = *v1;\n                        } else {\n                            // 0x40c974\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40cacf\n                        free((int64_t *)v17);\n                    }\n                    // 0x40c9c9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40c9e0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40c88e\n                    return 63;\n                }\n                // 0x40c7b0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40c834\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40c840:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40c850\n                    uint32_t v50 = *v49; // 0x40c850\n                    int64_t v51 = v50; // 0x40c850\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40c85a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40c863\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40ca8f\n                                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40ca3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40c88e\n                            return 63;\n                        }\n                        // 0x40c8d8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40cbef\n                                    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40caed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40cb00\n                                // 0x40c88e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40c9fe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40ca12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40c87b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40c87e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40c882\n                    int64_t result = v59; // 0x40c888\n                    if (v58 != 0) {\n                        // 0x40c88a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40c88e\n                    return result;\n                }\n            } else {\n                // 0x40c68e\n                v5 = v32;\n            }\n            // break -> 0x40c7b5\n            break;\n        }\n    }\n    // 0x40c7b5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40c7cd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40c7d7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40c88e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40c919\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40c806\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40c816\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40c780:\n    // 0x40c780\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40c780\n    int64_t v63 = *(int64_t *)v62; // 0x40c784\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40c791\n        goto lab_0x40c791;\n    }\n    goto lab_0x40c726;\n  lab_0x40c74a:\n    // 0x40c74a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40c620\n    int32_t v65; // 0x40c620\n    int32_t v66; // 0x40c620\n    if (v27 != 0) {\n        goto lab_0x40c780;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40c900\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40c780;\n            } else {\n                goto lab_0x40c771;\n            }\n        } else {\n            // 0x40c765\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40ca5c\n                int64_t v67 = (int64_t)mem; // 0x40ca5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40c780;\n                } else {\n                    // 0x40ca6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40c771;\n                }\n            } else {\n                goto lab_0x40c771;\n            }\n        }\n    }\n  lab_0x40c771:\n    // 0x40c771\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40c780;\n}\n"
        },
        {
            "funcName": "function_40cc40",
            "funcStartAddr": "40cc40",
            "funcEndAddr": "40d206",
            "decompiledFuncCode": "int64_t function_40cc40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40cc61\n    if (v3 < 1) {\n        // 0x40ce1e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40cc5d\n    int32_t v5 = *(int32_t *)a7; // 0x40cc69\n    uint64_t v6 = a1 & 0xffffffff; // 0x40cc6b\n    int64_t v7 = v2; // 0x40cc70\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40cc73\n    *v8 = 0;\n    int64_t v9; // 0x40cc40\n    int64_t v10; // 0x40cc40\n    int64_t v11; // 0x40cc40\n    int64_t v12; // 0x40cc40\n    int64_t str; // 0x40cc40\n    int64_t v13; // 0x40cc40\n    int64_t v14; // 0x40cc40\n    int64_t v15; // 0x40cc40\n    int64_t v16; // 0x40cc40\n    int64_t v17; // 0x40cc40\n    int32_t v18; // 0x40cc40\n    char v19; // 0x40cc40\n    if (v5 == 0) {\n        // 0x40ce58\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40cc8a;\n    } else {\n        // 0x40cc83\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40ccd0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40ccd3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40cd98;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40cce6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40ccf6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40cdac;\n                } else {\n                    goto lab_0x40cd08;\n                }\n            }\n        } else {\n            goto lab_0x40cc8a;\n        }\n    }\n  lab_0x40cc8a:\n    // 0x40cc8a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40cc90\n    *v24 = 0;\n    int64_t v25; // 0x40cc40\n    int64_t v26; // 0x40cc40\n    int64_t v27; // 0x40cc40\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40cd80\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40cd8d;\n        }\n        case 43: {\n            // 0x40d090\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40cd8d;\n        }\n        default: {\n            // 0x40ccac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40d00f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40d128\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40cd8d;\n                } else {\n                    // 0x40d01d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40ccba;\n                }\n            } else {\n                goto lab_0x40ccba;\n            }\n        }\n    }\n  lab_0x40cd98:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40cd9f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40cd08;\n    } else {\n        goto lab_0x40cdac;\n    }\n  lab_0x40ccba:\n    // 0x40ccba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40cd8d;\n  lab_0x40cd8d:\n    // 0x40cd8d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40cd98;\n  lab_0x40cd08:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40cd08\n    int64_t v31 = v30; // 0x40cd08\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40cd0a\n    if ((int64_t)*v32 > v31) {\n        // 0x40cd0f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40cd12\n    if (*v33 > v30) {\n        // 0x40cd17\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40cd1a\n    int64_t v35 = v31; // 0x40cd1e\n    int64_t v36 = v15; // 0x40cd1e\n    int64_t v37; // 0x40cc40\n    int64_t v38; // 0x40cc40\n    int64_t v39; // 0x40cc40\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40ce88\n        int64_t v41 = v40; // 0x40ce88\n        v2 = v41;\n        int64_t v42; // 0x40cc40\n        if (*v33 == v40) {\n            // 0x40d070\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40d078\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40ce94\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40ce98\n                function_40c540(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40cea8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40ceb1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40ceba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40ced1\n            int64_t v47 = v45 & 0xffffffff; // 0x40ced5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40cede\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40cee4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40cee6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40cec0\n            int64_t v49 = v48 & 0xffffffff; // 0x40cec0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40ced1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40cede\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40cee4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40cee6;\n                    }\n                }\n                // 0x40cec0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40d088\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40cee6;\n    } else {\n        goto lab_0x40cd24;\n    }\n  lab_0x40cdac:\n    // 0x40cdac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40cdaf\n    int64_t v51 = v12; // 0x40cdaf\n    int64_t v52 = v14; // 0x40cdaf\n    if (*(char *)v10 == 0) {\n        goto lab_0x40cd08;\n    } else {\n        goto lab_0x40cdb5;\n    }\n  lab_0x40cd24:;\n    int32_t v53 = v35; // 0x40cd24\n    int64_t v54; // 0x40cc40\n    int64_t v55; // 0x40cc40\n    int64_t v56; // 0x40cc40\n    int64_t v57; // 0x40cc40\n    int64_t v58; // 0x40cc40\n    int64_t v59; // 0x40cc40\n    char * v60; // 0x40cc40\n    int64_t v61; // 0x40cc40\n    int64_t v62; // 0x40cd39\n    int64_t v63; // 0x40cc40\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40ce73\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40ce76;\n    } else {\n        // 0x40cd2c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40cc40\n        int64_t v66 = v65 ? -1 : 1; // 0x40cd40\n        int64_t v67 = (int64_t)\"--\"; // 0x40cc40\n        int64_t v68 = v62; // 0x40cc40\n        int64_t v69 = 3; // 0x40cd40\n        unsigned char v70 = *(char *)v68; // 0x40cd40\n        char v71 = *(char *)v67; // 0x40cd40\n        char v72 = v71; // 0x40cd40\n        bool v73 = false; // 0x40cd40\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40ce30\n            if (*(char *)v62 == 45) {\n                // 0x40cef0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40cef0\n                if (c == 0) {\n                    goto lab_0x40ce3a;\n                } else {\n                    // 0x40cefd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40cf80;\n                    } else {\n                        if (c == 45) {\n                            // 0x40d163\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40cfd5;\n                        } else {\n                            // 0x40cf0e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40cf80;\n                            } else {\n                                // 0x40cf13\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40cf34;\n                                } else {\n                                    // 0x40cf1a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40cf80;\n                                    } else {\n                                        goto lab_0x40cf34;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40ce3a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40cd50\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40cd53\n            int64_t v77 = v35 + 1; // 0x40cd56\n            int32_t v78 = v77; // 0x40cd59\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40d0c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40cd67\n                    function_40c540(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40cd75\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40ce76;\n        }\n    }\n  lab_0x40cdb5:;\n    // 0x40cdb5\n    int64_t v79; // bp-104, 0x40cc40\n    int64_t v80 = &v79; // 0x40cc4a\n    int64_t v81 = v50 + 1; // 0x40cdb5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40cdbc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40cdc1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40cdc5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40cdc9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40cdd1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40cdd6\n    int32_t c2 = v84; // 0x40cdd6\n    char * found_char_pos = strchr(str2, c2); // 0x40cdd6\n    int64_t v87 = *v82; // 0x40cddb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40cde5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40cdf0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40d0e0\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40d0ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40ce1e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40cdd6\n    char v91 = *(char *)(v90 + 1); // 0x40ce0b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40cdc5\n        if (v91 != 58) {\n            // 0x40ce1e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40d034\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40d138\n                *v8 = 0;\n            } else {\n                // 0x40d11c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40d05e\n            *v83 = 0;\n            // 0x40ce1e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40d03e\n        if (v93 != 0) {\n            // 0x40d0d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40d05e\n            *v83 = 0;\n            // 0x40ce1e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40d051\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40d05e\n            *v83 = 0;\n            // 0x40ce1e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40d19a\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40d14a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40d151\n        // 0x40d05e\n        *v83 = 0;\n        // 0x40ce1e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40cfa9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40cfab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40d1d0\n                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40d181\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40d188\n            // 0x40ce1e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40cfb6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40cfba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40cfd5;\n  lab_0x40cee6:\n    // 0x40cee6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40cd24;\n  lab_0x40cfd5:;\n    int64_t v99 = function_40c620(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40cff3\n    // 0x40ce1e\n    return v99 & 0xffffffff;\n  lab_0x40ce76:;\n    int32_t v100 = v55; // 0x40ce76\n    if (v100 != (int32_t)v59) {\n        // 0x40ce7a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40ce1e\n    return 0xffffffff;\n  lab_0x40ce3a:\n    // 0x40ce3a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40ce41\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40ce1e\n    return v99 & 0xffffffff;\n  lab_0x40cf80:\n    // 0x40cf80\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40cdb5;\n  lab_0x40cf34:\n    // 0x40cf34\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40c620(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40cf5a\n    if ((int32_t)v101 != -1) {\n        // 0x40ce1e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40cf6f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40cf80;\n}\n"
        },
        {
            "funcName": "function_40d210",
            "funcStartAddr": "40d210",
            "funcEndAddr": "40d266",
            "decompiledFuncCode": "int64_t function_40d210(int64_t a1) {\n    // 0x40d210\n    *(int32_t *)&g58 = g42;\n    *(int32_t *)&g59 = g41;\n    int64_t v1; // 0x40d210\n    int64_t result = function_40cc40(v1, v1, v1, v1, v1, v1, &g58, a1 & 0xffffffff); // 0x40d236\n    g42 = *(int32_t *)&g58;\n    g65 = (int32_t *)g61;\n    *(int32_t *)&g40 = g60;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d270",
            "funcStartAddr": "40d270",
            "funcEndAddr": "40d288",
            "decompiledFuncCode": "int64_t function_40d270(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40d270\n    return function_40d210(1);\n}\n"
        },
        {
            "funcName": "function_40d290",
            "funcStartAddr": "40d290",
            "funcEndAddr": "40d2a3",
            "decompiledFuncCode": "int64_t function_40d290(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x40d290\n    return function_40d210(0);\n}\n"
        },
        {
            "funcName": "function_40d2b0",
            "funcStartAddr": "40d2b0",
            "funcEndAddr": "40d2c5",
            "decompiledFuncCode": "int64_t function_40d2b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40d2b0\n    return function_40cc40(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40d2d0",
            "funcStartAddr": "40d2d0",
            "funcEndAddr": "40d2e6",
            "decompiledFuncCode": "int64_t function_40d2d0(void) {\n    // 0x40d2d0\n    return function_40d210(0);\n}\n"
        },
        {
            "funcName": "function_40d2f0",
            "funcStartAddr": "40d2f0",
            "funcEndAddr": "40d308",
            "decompiledFuncCode": "int64_t function_40d2f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40d2f0\n    return function_40cc40(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40d310",
            "funcStartAddr": "40d310",
            "funcEndAddr": "40d38a",
            "decompiledFuncCode": "int64_t function_40d310(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40d31b\n    int64_t v2 = (int64_t)&g25; // 0x40d31b\n    int32_t * pwc; // 0x40d310\n    int64_t v3; // 0x40d310\n    int64_t n; // 0x40d310\n    if (a2 == 0) {\n        goto lab_0x40d362;\n    } else {\n        // 0x40d31d\n        if (a3 == 0) {\n            // 0x40d348\n            return -2;\n        }\n        // 0x40d329\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40d362;\n        } else {\n            goto lab_0x40d334;\n        }\n    }\n  lab_0x40d362:\n    // 0x40d362\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40d310\n    pwc = (int32_t *)&v4;\n    goto lab_0x40d334;\n  lab_0x40d334:;\n    char * wstr = (char *)v3; // 0x40d33a\n    int64_t ps; // 0x40d310\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40d33a\n    int64_t result = v5; // 0x40d33a\n    if (v5 < 0xfffffffe) {\n        // 0x40d348\n        return result;\n    }\n    int64_t result2 = result; // 0x40d379\n    if ((char)function_40e130(0, v3) == 0) {\n        // 0x40d37b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40d348\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d390",
            "funcStartAddr": "40d390",
            "funcEndAddr": "40d4a7",
            "decompiledFuncCode": "int64_t function_40d390(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x40d3be\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x40d3da\n    int32_t v3 = v1; // 0x40d3e3\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x40d3f4\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x40d404\n    int32_t v6 = v2 / 25; // 0x40d418\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x40d429\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_40d4b0",
            "funcStartAddr": "40d4b0",
            "funcEndAddr": "40d541",
            "decompiledFuncCode": "int64_t function_40d4b0(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x40d4be\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x40d4c3\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x40d4c9\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x40d4cf\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x40d4d5\n        int64_t v6 = function_40d390(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x40d4d9\n        int64_t result = v6 + a6; // 0x40d4e2\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x40d4e7\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x40d50d\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x40d511\n        return result2;\n    }\n    // 0x40d520\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x40d4e7\n        return -0x8000000000000000;\n    }\n    // 0x40d52f\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_40d550",
            "funcStartAddr": "40d550",
            "funcEndAddr": "40d60f",
            "decompiledFuncCode": "int64_t function_40d550(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x40d57d\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x40d5bb\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x40d57d\n        return result;\n    }\n    int64_t v2 = v1; // 0x40d5c1\n    while (v2 != 0) {\n        // 0x40d5c8\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x40d57d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d610",
            "funcStartAddr": "40d610",
            "funcEndAddr": "40da4a",
            "decompiledFuncCode": "int64_t function_40d610(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x40d62b\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x40d633\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x40d644\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x40d647\n    int32_t v5 = v4 / 12; // 0x40d665\n    int32_t v6 = -12 * v5 + v4; // 0x40d66f\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40d67a\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x40d681\n    int64_t v9 = 0; // 0x40d687\n    if (v8 % 4 == 0) {\n        // 0x40d689\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x40d8f0\n            v9 = v8 < 0;\n        }\n    }\n    // 0x40d6c5\n    int64_t v10; // 0x40d610\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g26); // 0x40d6f7\n    int32_t v14 = v11 - 59; // 0x40d710\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x40d713\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x40d727\n    int64_t v17 = function_40d390(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x40d750\n    int64_t v18; // bp-280, 0x40d610\n    int64_t v19 = &v18; // 0x40d755\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x40d7a3\n    int64_t v22 = v19 + 80; // 0x40d7a8\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x40d773\n    int64_t v34 = v17; // 0x40d773\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_40d550(*v20, v22, v21); // 0x40d7ad\n    int64_t v38 = *v23; // 0x40d7b2\n    *v24 = v37;\n    int64_t v39 = function_40d4b0(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g73); // 0x40d7d4\n    while (v38 != v39) {\n        // 0x40d7e4\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x40d7ee\n            if (v40 < 0) {\n                goto lab_0x40d817_3;\n            }\n            int32_t v41 = *v32; // 0x40d7fb\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x40d817_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x40d817_3;\n                }\n            }\n        }\n        // 0x40d778\n        v33--;\n        if (v33 == 0) {\n            // 0x40d8d7\n            return -1;\n        }\n        // 0x40d781\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_40d550(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_40d4b0(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g73);\n    }\n    int32_t v42 = *v32; // 0x40d920\n    int32_t v43 = *v30; // 0x40d924\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x40d92b\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x40d944\n    int64_t v46 = v44; // 0x40d944\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x40d960\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x40d99b\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x40d965\n        int64_t v52 = 0x92c70; // 0x40d965\n        while (true) {\n            int64_t v53 = -v52; // 0x40d992\n            int64_t v54 = v53 & 0xffffffff; // 0x40d992\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x40d995\n            int64_t v56 = v55 + v51; // 0x40d998\n            *v49 = v56;\n            int64_t v57 = v51; // 0x40d9a0\n            int32_t v58 = 2; // 0x40d9a0\n            int64_t v59 = v54; // 0x40d9a0\n            int32_t v60 = 2; // 0x40d9a0\n            int64_t v61 = v54; // 0x40d9a0\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x40d9be:\n                // 0x40d9be\n                function_40d550(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x40d9d5\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x40d9ea\n                    break;\n                }\n                // 0x40da40\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x40d987\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x40d610\n            int64_t v66 = v59; // 0x40d9a2\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x40d9a2\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x40d9ab\n                int64_t v69 = v68 + v64; // 0x40d9b4\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x40d9be;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x40d970\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x40d820;\n            }\n        }\n        // 0x40d9ea\n        *v24 = v50;\n        *v23 = function_40d4b0(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g73);\n        function_40d550(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x40d820;\n  lab_0x40d817_3:\n    // 0x40d817\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x40d820;\n  lab_0x40d820:;\n    int64_t v71 = *(int64_t *)(v19 + 56); // 0x40d828\n    int32_t v72 = *(int32_t *)v21; // 0x40d830\n    int32_t v73 = *(int32_t *)(v19 + 64); // 0x40d834\n    int64_t v74 = *(int64_t *)(v19 + 48); // 0x40d83b\n    *(int64_t *)v74 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v71;\n    int64_t result = v45; // 0x40d845\n    if (v72 != v73) {\n        int32_t v75 = *v25; // 0x40d849\n        int64_t v76 = (int64_t)(v72 == 60 == v73 < 1) - (int64_t)v75 + (int64_t)v73; // 0x40d865\n        int64_t v77 = v76 + v45; // 0x40d868\n        *v23 = v77;\n        if (((v77 ^ v45) & (v77 ^ v76)) < 0) {\n            // 0x40d8d7\n            return -1;\n        }\n        // 0x40d872\n        *(int64_t *)(v19 + 160) = v77;\n        if (*v20 == 0) {\n            // 0x40d8d7\n            return -1;\n        }\n        // 0x40d893\n        result = *v23;\n    }\n    int128_t v78 = __asm_movdqa(*(int128_t *)v21); // 0x40d898\n    int128_t v79 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x40d89e\n    int128_t v80 = __asm_movdqa(*(int128_t *)v29); // 0x40d8a4\n    __asm_movups(*(int128_t *)v46, v78);\n    __asm_movups(*(int128_t *)(v46 + 16), v79);\n    __asm_movups(*(int128_t *)(v46 + 32), v80);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x40d8d7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40da50",
            "funcStartAddr": "40da50",
            "funcEndAddr": "40da6c",
            "decompiledFuncCode": "int64_t function_40da50(int32_t * a1) {\n    // 0x40da50\n    tzset();\n    return function_40d610((int64_t)a1, 0x4019b0, &g62);\n}\n"
        },
        {
            "funcName": "function_40da70",
            "funcStartAddr": "40da70",
            "funcEndAddr": "40dab5",
            "decompiledFuncCode": "int64_t function_40da70(int64_t a1) {\n    // 0x40da70\n    int32_t v1; // 0x40da70\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x40daa0\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x40da7a\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x40da88\n    if (v1 == 0) {\n        // 0x40da8a\n        tzset();\n        result = 1;\n    }\n    // 0x40da94\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dac0",
            "funcStartAddr": "40dac0",
            "funcEndAddr": "40dae9",
            "decompiledFuncCode": "int64_t function_40dac0(int64_t a1) {\n    // 0x40dac0\n    if (a1 == 0) {\n        // 0x40dae0\n        int64_t result; // 0x40dac0\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x40dad0\n    int64_t v2 = *v1; // 0x40dad0\n    free(v1);\n    while (v2 != 0) {\n        // 0x40dad0\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x40dae0\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_40daf0",
            "funcStartAddr": "40daf0",
            "funcEndAddr": "40db31",
            "decompiledFuncCode": "int64_t function_40daf0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40dafd\n    int64_t v2 = function_40da70(a1); // 0x40db0b\n    int32_t v3 = *v1; // 0x40db14\n    if ((char)v2 == 0) {\n        // 0x40db16\n        v3 = *v1;\n    }\n    // 0x40db19\n    function_40dac0(a1);\n    *v1 = v3;\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40db40",
            "funcStartAddr": "40db40",
            "funcEndAddr": "40dbcf",
            "decompiledFuncCode": "int64_t function_40db40(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x40db40\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x40dbad\n        int64_t result = (int64_t)mem; // 0x40dbad\n        result2 = result;\n        if (mem != NULL) {\n            // 0x40dbba\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x40db4c\n        uint64_t v1 = (int64_t)len + 1; // 0x40db56\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x40db6a\n        int64_t v2 = (int64_t)mem2; // 0x40db6a\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x40db77\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x40db83\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x40db9b\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40dbd0",
            "funcStartAddr": "40dbd0",
            "funcEndAddr": "40dd45",
            "decompiledFuncCode": "int64_t function_40dbd0(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x40dbde\n    uint64_t v2 = *v1; // 0x40dbde\n    if (v2 == 0) {\n        // 0x40dc81\n        return 1;\n    }\n    int64_t v3; // 0x40dbd0\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x40dbf6\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x40dc81\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x40dc04\n    if (*str2 == 0) {\n        // 0x40dc78\n        *v1 = (int64_t)&g25;\n        // 0x40dc81\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x40dc09\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x40dc78\n        *v1 = str;\n        // 0x40dc81\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x40dc27\n    int64_t v7; // 0x40dbd0\n    int64_t v8; // 0x40dbd0\n    int64_t v9; // 0x40dbd0\n    int64_t v10; // 0x40dc2c\n    if (*str3 == 0) {\n        // 0x40dc2c\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x40dcb8\n            goto lab_0x40dcb8;\n        }\n        // 0x40dc39\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x40dce8\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x40dcf6;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x40dc4b\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x40dbd0\n    int64_t v13; // 0x40dc55\n    int64_t str4; // 0x40dc5e\n    int32_t strcmp_rc; // 0x40dc6b\n    while (*str5 == 0) {\n        // 0x40dc55\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x40dc18\n            break;\n        }\n        // 0x40dc5e\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x40dc78\n            *v1 = v12;\n            // 0x40dc81\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40dc2c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40dcb8\n                goto lab_0x40dcb8;\n            }\n            // 0x40dc39\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40dce8\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40dcf6;\n            }\n        }\n        // 0x40dc43\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x40dc78\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x40dc27\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40dc2c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40dcb8\n                goto lab_0x40dcb8;\n            }\n            // 0x40dc39\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40dce8\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40dcf6;\n            }\n        }\n        // 0x40dc43\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x40dc55\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x40dc18\n                break;\n            }\n            // 0x40dc5e\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x40dc78\n                *v1 = v12;\n                // 0x40dc81\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x40dc2c\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x40dcb8\n                    goto lab_0x40dcb8;\n                }\n                // 0x40dc39\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x40dce8\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x40dcf6;\n                }\n            }\n            // 0x40dc43\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x40dc78\n        *v1 = v11;\n    }\n    // 0x40dc81\n    return 1;\n  lab_0x40dcb8:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x40dcc0\n    int64_t v15 = v6 - v10; // 0x40dcc7\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x40dcd5\n        *__errno_location() = 12;\n        // 0x40dc81\n        return 0;\n    }\n    goto lab_0x40dcf6;\n  lab_0x40dcf6:\n    // 0x40dcf6\n    if (v7 + v8 < 119) {\n        // 0x40dcff\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x40dc78\n        *v1 = v6;\n        // 0x40dc81\n        return 1;\n    }\n    int64_t v17 = function_40db40(v2, v2, v9); // 0x40dd23\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x40dc81\n        return 0;\n    }\n    // 0x40dd31\n    *(char *)(v17 + 8) = 0;\n    // 0x40dc78\n    *v1 = v17 + 9;\n    // 0x40dc81\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40dd50",
            "funcStartAddr": "40dd50",
            "funcEndAddr": "40ddff",
            "decompiledFuncCode": "int64_t function_40dd50(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x40dd5c\n    int64_t v1 = (int64_t)env_val; // 0x40dd5c\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x40dd50\n    if (env_val == NULL) {\n        // 0x40ddc0\n        if (v2 == 0) {\n            // 0x40dd8d\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x40dd98\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x40dd8d\n                return 1;\n            }\n        }\n    }\n    // 0x40dd71\n    int64_t v4; // 0x40dd50\n    int64_t result = function_40db40(v1, v3, v4); // 0x40dd74\n    if (result == 0) {\n        // 0x40dd8d\n        return 0;\n    }\n    // 0x40dd81\n    if ((char)function_40da70(a1) != 0) {\n        // 0x40dd8d\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x40ddd8\n    if (result != 1) {\n        // 0x40dde9\n        function_40dac0(result);\n    }\n    // 0x40ddf1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40de00",
            "funcStartAddr": "40de00",
            "funcEndAddr": "40de11",
            "decompiledFuncCode": "int64_t function_40de00(int64_t a1) {\n    // 0x40de00\n    if (a1 == 1) {\n        // 0x40de10\n        int64_t result; // 0x40de00\n        return result;\n    }\n    // 0x40de06\n    return function_40dac0(a1);\n}\n"
        },
        {
            "funcName": "function_40de20",
            "funcStartAddr": "40de20",
            "funcEndAddr": "40dec5",
            "decompiledFuncCode": "int64_t function_40de20(int64_t a1, int64_t * timep, int64_t * time2) {\n    if (a1 == 0) {\n        // 0x40deb0\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time2);\n    }\n    int64_t v1 = function_40dd50(a1); // 0x40de38\n    if (v1 == 0) {\n        // 0x40de6a\n        return 0;\n    }\n    // 0x40de45\n    if (localtime_r((int32_t *)timep, (struct tm *)time2) != NULL) {\n        int64_t result = (int64_t)time2;\n        if ((char)function_40dbd0(a1, result) != 0) {\n            // 0x40de64\n            if (v1 == 1 || (char)function_40daf0(v1) != 0) {\n                // 0x40de6a\n                return result;\n            }\n            // 0x40de6a\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x40de86\n        function_40daf0(v1);\n    }\n    // 0x40de6a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40ded0",
            "funcStartAddr": "40ded0",
            "funcEndAddr": "40dfec",
            "decompiledFuncCode": "int64_t function_40ded0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40ded0\n    int32_t v1; // 0x40ded0\n    int32_t v2 = v1;\n    if (a1 == 0) {\n        // 0x40dfc8\n        return function_40dff0(a2);\n    }\n    int64_t v3 = function_40dd50(a1); // 0x40dee7\n    if (v3 == 0) {\n        // 0x40df3e\n        return -1;\n    }\n    int64_t v4 = function_40da50((int32_t *)a2); // 0x40defb\n    int64_t timep = v4; // bp-96, 0x40df00\n    if (v4 == -1) {\n        // 0x40df50\n        int32_t time2; // bp-88, 0x40ded0\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time2) == NULL) {\n            goto lab_0x40df23;\n        } else {\n            int32_t v5 = *(int32_t *)(a2 + 32); // 0x40df64\n            if (v2 >= 0 == v5 > -1 == (v5 == 0 != (v2 == 0))) {\n                goto lab_0x40df23;\n            } else {\n                int32_t v6 = *(int32_t *)(a2 + 16); // 0x40df83\n                int32_t v7 = *(int32_t *)(a2 + 20); // 0x40df86\n                int32_t v8 = *(int32_t *)(a2 + 12); // 0x40df93\n                int32_t v9 = *(int32_t *)(a2 + 8); // 0x40df9c\n                int32_t v10 = *(int32_t *)(a2 + 4); // 0x40dfa5\n                if ((v7 ^ v1 | v6 ^ v1 | v8 ^ v1 | v9 ^ v1 || v10 ^ v1 || time2 ^ (int32_t)(int64_t)&time2) == 0) {\n                    goto lab_0x40df0b;\n                } else {\n                    goto lab_0x40df23;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40df0b;\n    }\n  lab_0x40df0b:\n    // 0x40df0b\n    if ((char)function_40dbd0(a1, a2) == 0) {\n        // 0x40df1a\n        timep = -1;\n    }\n    goto lab_0x40df23;\n  lab_0x40df23:\n    if (v3 != 1) {\n        // 0x40df29\n        if ((char)function_40daf0(v3) == 0) {\n            // 0x40df3e\n            return -1;\n        }\n    }\n    // 0x40df3e\n    return timep;\n}\n"
        },
        {
            "funcName": "function_40dff0",
            "funcStartAddr": "40dff0",
            "funcEndAddr": "40e006",
            "decompiledFuncCode": "int64_t function_40dff0(int64_t a1) {\n    // 0x40dff0\n    *(int32_t *)(a1 + 32) = 0;\n    return function_40d610(a1, 0x401ab0, &g63);\n}\n"
        },
        {
            "funcName": "function_40e010",
            "funcStartAddr": "40e010",
            "funcEndAddr": "40e0cd",
            "decompiledFuncCode": "int64_t function_40e010(int64_t stream, int64_t a2, int64_t * a3) {\n    int32_t v1 = 2000; // bp-2048, 0x40e030\n    int64_t v2; // bp-2040, 0x40e010\n    int64_t v3; // 0x40e010\n    int64_t v4 = function_40ffa0(&v2, (int64_t *)&v1, a2, (int64_t)a3, v3, v3, 2000, (int64_t)&g73); // 0x40e03c\n    if (v4 == 0) {\n        // 0x40e0be\n        function_40ff90(stream);\n        // 0x40e07c\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x40e041\n    int64_t * data = (int64_t *)v4; // 0x40e05c\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x40e090\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x40e09a\n            free(data);\n        }\n        // 0x40e07c\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x40e06b\n        free(data);\n    }\n    // 0x40e073\n    if (nmemb > -1) {\n        // 0x40e07c\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x40e0b3\n    *__errno_location() = 75;\n    // 0x40e0be\n    function_40ff90(stream);\n    // 0x40e07c\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e0d0",
            "funcStartAddr": "40e0d0",
            "funcEndAddr": "40e12d",
            "decompiledFuncCode": "int64_t function_40e0d0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40e0d7\n    int64_t v2; // 0x40e0d0\n    int64_t result = function_40c420(a1, v2); // 0x40e0e8\n    if ((v2 & 32) != 0) {\n        // 0x40e110\n        if ((int32_t)result == 0) {\n            // 0x40e114\n            *__errno_location() = 0;\n        }\n        // 0x40e10a\n        return 0xffffffff;\n    }\n    // 0x40e0f1\n    if ((int32_t)result == 0) {\n        // 0x40e10a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40e0f8\n    if (v1 == 0) {\n        // 0x40e0fa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40e10a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e130",
            "funcStartAddr": "40e130",
            "funcEndAddr": "40e18e",
            "decompiledFuncCode": "int64_t function_40e130(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40e136\n    if (locale == NULL) {\n        // 0x40e163\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40e136\n    bool v2; // 0x40e130\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"C\"; // 0x40e130\n    int64_t v5 = v1; // 0x40e130\n    int64_t v6 = 2; // 0x40e155\n    unsigned char v7 = *(char *)v5; // 0x40e155\n    char v8 = *(char *)v4; // 0x40e155\n    char v9 = v8; // 0x40e155\n    bool v10 = false; // 0x40e155\n    while (v7 == v8) {\n        // 0x40e148\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40e161\n    int64_t v13 = v1; // 0x40e161\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40e163\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40e161\n    unsigned char v15 = *(char *)v13; // 0x40e17d\n    char v16 = *(char *)v12; // 0x40e17d\n    char v17 = v16; // 0x40e17d\n    bool v18 = false; // 0x40e17d\n    while (v15 == v16) {\n        // 0x40e170\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40e190",
            "funcStartAddr": "40e190",
            "funcEndAddr": "40e6f2",
            "decompiledFuncCode": "int64_t function_40e190(void) {\n    char * v1 = nl_langinfo(14); // 0x40e1a6\n    char * v2 = g64; // 0x40e1ab\n    char * v3; // 0x40e190\n    int64_t v4; // 0x40e190\n    int64_t v5; // 0x40e190\n    int64_t v6; // 0x40e190\n    int64_t v7; // 0x40e190\n    int32_t size; // 0x40e190\n    int32_t size2; // 0x40e190\n    int32_t len; // 0x40e262\n    int64_t v8; // 0x40e262\n    char * env_val; // 0x40e24d\n    if (v2 == NULL) {\n        // 0x40e248\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40e2b5;\n        } else {\n            // 0x40e25a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40e2b5;\n            } else {\n                // 0x40e25f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40e24d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40e6e5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40e2b5;\n                    } else {\n                        // 0x40e659\n                        size2 = len + 14;\n                        goto lab_0x40e27b;\n                    }\n                } else {\n                    goto lab_0x40e27b;\n                }\n            }\n        }\n    } else {\n        // 0x40e190\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40e1ca;\n    }\n  lab_0x40e4fc:;\n    // 0x40e4fc\n    struct _IO_FILE * stream; // 0x40e33b\n    int32_t v10 = __uflow(stream); // 0x40e4ff\n    int64_t v11; // 0x40e190\n    int64_t v12 = v11; // 0x40e509\n    int64_t v13; // 0x40e190\n    int64_t v14 = v13; // 0x40e509\n    int32_t v15 = v10; // 0x40e509\n    int64_t v16; // 0x40e190\n    int64_t v17 = v16; // 0x40e509\n    int64_t v18 = v11; // 0x40e509\n    int64_t v19 = v13; // 0x40e509\n    int64_t v20 = v16; // 0x40e509\n    if (v10 == -1) {\n        // break -> 0x40e50f\n        goto lab_0x40e50f;\n    }\n    goto lab_0x40e389;\n  lab_0x40e37e:;\n    // 0x40e37e\n    int64_t v90; // 0x40e190\n    int64_t * v32; // 0x40e370\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40e190\n    v12 = v89;\n    int64_t v91; // 0x40e190\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40e190\n    v17 = v92;\n    goto lab_0x40e389;\n  lab_0x40e389:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40e190\n    int32_t v25; // bp-120, 0x40e190\n    int32_t v26; // bp-184, 0x40e190\n    int64_t v27; // 0x40e33b\n    int64_t v28; // 0x40e358\n    int64_t v29; // 0x40e35d\n    int64_t * v30; // 0x40e374\n    switch (c) {\n        case 32: {\n            goto lab_0x40e370;\n        }\n        case 10: {\n            goto lab_0x40e370;\n        }\n        case 9: {\n            goto lab_0x40e370;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40e561\n            int32_t v33; // 0x40e190\n            char v34; // 0x40e190\n            int32_t v35; // 0x40e56e\n            if (v31 < *v30) {\n                // 0x40e540\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40e56b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40e561\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40e540\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40e56b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40e550\n                v36 = v33;\n            }\n            // 0x40e63f\n            if (v36 == -1) {\n                // break -> 0x40e50f\n                break;\n            }\n            goto lab_0x40e370;\n        }\n        default: {\n            // 0x40e39f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40e50f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40e3c8\n            int64_t v39 = v37 + 4; // 0x40e3ca\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40e3d6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40e3d8\n            while (v41 == 0) {\n                // 0x40e3c8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40e3f6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40e402\n            int64_t v45 = v43 + 4; // 0x40e404\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40e410\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40e412\n            while (v47 == 0) {\n                // 0x40e402\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40e3ff\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40e428\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40e438\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40e43c\n            int64_t v52 = v51 + v48; // 0x40e445\n            int64_t * mem; // 0x40e190\n            int64_t v53; // 0x40e190\n            int64_t v54; // 0x40e190\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40e57b\n                int64_t v56 = v55 + 3; // 0x40e587\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40e461\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40e470\n            if (mem == NULL) {\n                // 0x40e69c\n                free((int64_t *)v21);\n                function_40c420(v27, v53);\n                v24 = (int64_t)&g25;\n                goto lab_0x40e314;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40e488\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40e492\n            uint32_t v62 = (int32_t)v59; // 0x40e495\n            int64_t v63; // 0x40e190\n            if (v62 >= 8) {\n                // 0x40e5a4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40e5be\n                int64_t v66 = v61 - v65; // 0x40e5c2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40e5cd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40e5de\n                    int64_t v70 = v69 & 0xffffffff; // 0x40e5de\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40e5db\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40e66f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40e4a7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40e4ab\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40e4bb\n            int64_t v74 = v60 - 1; // 0x40e4bf\n            uint32_t v75 = (int32_t)v73; // 0x40e4c4\n            int64_t v76; // 0x40e190\n            if (v75 >= 8) {\n                // 0x40e5f2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40e5fc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40e60c\n                int64_t v80 = v74 - v79; // 0x40e610\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40e61b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40e62b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40e629\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40e686\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40e68e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40e4d6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40e4da\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40e6d3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40e4ee\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40e37e;\n            } else {\n                goto lab_0x40e4fc;\n            }\n        }\n    }\n  lab_0x40e370:;\n    int64_t v93 = v23; // 0x40e190\n    int64_t v94 = v22; // 0x40e190\n    int64_t v95 = v21; // 0x40e190\n    goto lab_0x40e370_2;\n  lab_0x40e2b5:;\n    int64_t * mem3 = malloc(size); // 0x40e2b5\n    int64_t v97 = (int64_t)&g25; // 0x40e2c0\n    int64_t v98; // 0x40e190\n    int64_t path; // 0x40e190\n    if (mem3 == NULL) {\n        goto lab_0x40e292;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40e2b5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40e2d6;\n    }\n  lab_0x40e1ca:;\n    int64_t str = v1 == NULL ? (int64_t)&g25 : (int64_t)v1; // 0x40e1bd\n    char v100 = *v3; // 0x40e1ca\n    int64_t v101; // 0x40e190\n    if (v100 == 0) {\n        // 0x40e224\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40e190\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40e190\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40e210\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40e217;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40e1e0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40e1ed\n        char v107 = *(char *)v106; // 0x40e1f2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40e224\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40e1fb\n    v104 = v103 + 1;\n  lab_0x40e217:\n    // 0x40e224\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40e292:;\n    char * v108 = (char *)v97;\n    g64 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40e1ca;\n  lab_0x40e2d6:;\n    int64_t v109 = v98 + path; // 0x40e2d6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40e302\n    v24 = (int64_t)&g25;\n    if (fd >= 0) {\n        // 0x40e331\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40e662\n            close(fd);\n            v24 = (int64_t)&g25;\n        } else {\n            // 0x40e355\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40e370_2:;\n                uint64_t v96 = *v32; // 0x40e370\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40e4fc;\n                } else {\n                    goto lab_0x40e37e;\n                }\n            }\n          lab_0x40e50f:\n            // 0x40e50f\n            function_40c420(v27, v19);\n            v24 = (int64_t)&g25;\n            if (v18 != 0) {\n                // 0x40e52e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40e314;\n  lab_0x40e27b:;\n    int64_t * mem4 = malloc(size2); // 0x40e27b\n    v97 = (int64_t)&g25;\n    if (mem4 != NULL) {\n        // 0x40e321\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40e2d6;\n    } else {\n        goto lab_0x40e292;\n    }\n  lab_0x40e314:\n    // 0x40e314\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40e292;\n}\n"
        },
        {
            "funcName": "function_40e700",
            "funcStartAddr": "40e700",
            "funcEndAddr": "40e741",
            "decompiledFuncCode": "int64_t function_40e700(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40e739\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x40e713\n    int64_t v2 = a3; // 0x40e718\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40e720\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40e728\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40e720\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40e739\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e750",
            "funcStartAddr": "40e750",
            "funcEndAddr": "40e791",
            "decompiledFuncCode": "int64_t function_40e750(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x40e789\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x40e763\n    int64_t v2 = a3; // 0x40e768\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x40e770\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x40e778\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x40e770\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x40e789\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e7a0",
            "funcStartAddr": "40e7a0",
            "funcEndAddr": "40ff65",
            "decompiledFuncCode": "int64_t function_40e7a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3;\n    int64_t v2 = a1;\n    int64_t v3 = a2; // bp-1224, 0x40e7c4\n    char v4 = *(char *)&v1; // 0x40e7ec\n    v3 = a2;\n    int64_t result = 0; // 0x40e7f4\n    int64_t v5 = v2; // 0x40e7f4\n    char v6; // 0x40e7a0\n    char v7; // 0x40e7a0\n    char v8; // 0x40e7a0\n    char v9; // 0x40e7a0\n    char v10; // 0x40e7a0\n    char v11; // 0x40e7a0\n    char v12; // 0x40e7a0\n    char v13; // 0x40e7a0\n    char v14; // 0x40e7a0\n    char v15; // 0x40e7a0\n    int64_t v16; // 0x40e7a0\n    int64_t v17; // 0x40e7a0\n    int64_t v18; // 0x40e7a0\n    int64_t v19; // 0x40e7a0\n    int64_t v20; // 0x40e7a0\n    int64_t v21; // 0x40e7a0\n    int64_t v22; // 0x40e7a0\n    int64_t v23; // 0x40e7a0\n    int64_t v24; // 0x40e7a0\n    int64_t v25; // 0x40e7a0\n    int64_t v26; // 0x40e7a0\n    int64_t v27; // 0x40e7a0\n    int64_t v28; // 0x40e7a0\n    int64_t v29; // 0x40e7a0\n    char v30; // 0x40e7a0\n    int64_t v31; // 0x40e7a0\n    int64_t v32; // 0x40e7a0\n    int64_t v33; // 0x40e7a0\n    int64_t v34; // 0x40e7a0\n    int64_t v35; // 0x40e7a0\n    int64_t v36; // 0x40e7a0\n    int64_t v37; // 0x40e7a0\n    int64_t v38; // 0x40e7a0\n    char * v39; // 0x40e7a0\n    int64_t v40; // 0x40e7a0\n    char * v41; // 0x40e7a0\n    int64_t v42; // 0x40e7a0\n    int64_t * str; // 0x40e7a0\n    char * v43; // 0x40e7a0\n    int64_t * v44; // 0x40e7a0\n    int64_t format; // 0x40e7a0\n    int16_t * v45; // 0x40e7a0\n    int64_t * v46; // 0x40e7a0\n    int32_t * v47; // 0x40e7a0\n    int32_t * v48; // 0x40e7a0\n    int64_t v49; // 0x40e7b5\n    int64_t * v50; // 0x40e7a0\n    int64_t * v51; // 0x40e7a0\n    int64_t * v52; // 0x40e7a0\n    int64_t * v53; // 0x40e7a0\n    int64_t * v54; // 0x40e7a0\n    int64_t * v55; // 0x40e7a0\n    int32_t * v56; // 0x40e7a0\n    int64_t v57; // 0x40e7a0\n    char * v58; // 0x40e7a0\n    int64_t * v59; // 0x40e7a0\n    int32_t * v60; // 0x40e7a0\n    int64_t * v61; // 0x40e7a0\n    int64_t * v62; // 0x40e7a0\n    int64_t * tm; // 0x40e7a0\n    int64_t v63; // 0x40e7a0\n    int32_t * v64; // 0x40e7a0\n    int64_t * v65; // 0x40e7a0\n    int64_t str2; // 0x40e7a0\n    if (v4 != 0) {\n        // 0x40e80a\n        v49 = &v3;\n        tm = (int64_t *)(v49 + 8);\n        v63 = v49 + 48;\n        v64 = (int32_t *)v63;\n        v65 = (int64_t *)(v49 + 1232);\n        str2 = v49 + 144;\n        int64_t v66 = v49 + 64;\n        v39 = (char *)v66;\n        v40 = v49 + 135;\n        v41 = (char *)v63;\n        v42 = v49 + 44;\n        str = (int64_t *)(v49 + 32);\n        int64_t v67 = v49 + 72;\n        v43 = (char *)v67;\n        v44 = (int64_t *)v63;\n        format = v49 + 112;\n        v45 = (int16_t *)format;\n        v46 = (int64_t *)(v49 + 16);\n        v47 = (int32_t *)(v49 + 1240);\n        v48 = (int32_t *)v66;\n        v50 = (int64_t *)(v49 - 8);\n        v51 = (int64_t *)(v49 - 16);\n        v52 = (int64_t *)(v49 + 24);\n        v53 = (int64_t *)v66;\n        int64_t v68 = v49 + 80;\n        v54 = (int64_t *)v68;\n        v55 = (int64_t *)v67;\n        v56 = (int32_t *)v67;\n        v57 = v49 + 145;\n        int64_t v69 = v49 + 88;\n        v58 = (char *)v69;\n        v59 = (int64_t *)v69;\n        v60 = (int32_t *)v68;\n        v61 = (int64_t *)(v49 + 104);\n        v62 = (int64_t *)(v49 + 96);\n        v30 = v4;\n        v33 = a3;\n        v19 = 0;\n        v22 = v2;\n        while (true) {\n          lab_0x40e80a:\n            // 0x40e80a\n            v23 = v22;\n            v20 = v19;\n            int64_t v70 = v33;\n            char v71 = v30;\n            char v72 = v7;\n            char v73 = v6;\n            if (v71 == 37) {\n                char v74 = v73; // 0x40e894\n                char v75 = v72; // 0x40e894\n                int64_t v76 = v70; // 0x40e894\n                int64_t v77 = 0; // 0x40e894\n                int64_t v78 = (int64_t)*(char *)(v49 + 43); // 0x40e894\n                int64_t v79 = 0; // 0x40e894\n                int64_t v80; // 0x40e7a0\n                while (true) {\n                  lab_0x40e898_2:\n                    // 0x40e898\n                    v16 = v78;\n                    v10 = v74;\n                    v11 = v75;\n                    v34 = v76;\n                    v26 = v77;\n                    v17 = v79;\n                    while (true) {\n                      lab_0x40e898:;\n                        int64_t v81 = v26;\n                        char v82 = v11;\n                        char v83 = v10;\n                        int64_t v84 = v34 + 1; // 0x40e898\n                        char v85 = *(char *)v84; // 0x40e89c\n                        v14 = v83;\n                        v15 = v82;\n                        v31 = 48;\n                        v36 = v84;\n                        v28 = v81;\n                        if (v85 == 48) {\n                            goto lab_0x40e8c8;\n                        } else {\n                            // 0x40e8a8\n                            v18 = v17;\n                            v27 = v81;\n                            v35 = v84;\n                            v80 = v85;\n                            v13 = v82;\n                            v12 = v83;\n                            while (v12 <= v13) {\n                                if (v80 != 35) {\n                                    // 0x40e8d0\n                                    v14 = v12;\n                                    v15 = v13;\n                                    v31 = v80;\n                                    v36 = v35;\n                                    v28 = v27;\n                                    if ((char)v80 == 45) {\n                                        goto lab_0x40e8c8;\n                                    } else {\n                                        int64_t v86 = v80 & 0xffffffff;\n                                        v38 = v86;\n                                        v37 = v35;\n                                        v32 = 0xffffffff;\n                                        v29 = v86;\n                                        if ((int32_t)v80 < 58) {\n                                            goto lab_0x40e931;\n                                        } else {\n                                            goto lab_0x40e8e8_2;\n                                        }\n                                    }\n                                }\n                                int64_t v87 = v35 + 1; // 0x40e8ae\n                                char v88 = *(char *)v87; // 0x40e8b2\n                                int64_t v89 = v88; // 0x40e8b2\n                                v14 = v88;\n                                v15 = 48;\n                                v31 = v89;\n                                v36 = v87;\n                                v28 = 1;\n                                if (v88 == 48) {\n                                    goto lab_0x40e8c8;\n                                }\n                                v27 = 1;\n                                v35 = v87;\n                                v80 = v89;\n                                v13 = 48;\n                                v12 = v88;\n                            }\n                            char v90 = v80;\n                            v74 = v12;\n                            v75 = v13;\n                            v76 = v35;\n                            v77 = v27;\n                            v78 = 1;\n                            v79 = v18;\n                            if (v90 != 94) {\n                                // 0x40e920\n                                v14 = v12;\n                                v15 = v13;\n                                v31 = v80;\n                                v36 = v35;\n                                v28 = v27;\n                                if (v90 != 95) {\n                                    // break (via goto) -> 0x40e924\n                                    goto lab_0x40e924;\n                                }\n                                goto lab_0x40e8c8;\n                            } else {\n                                goto lab_0x40e898_2;\n                            }\n                        }\n                    }\n                }\n              lab_0x40e924:;\n                int64_t v91 = v80 & 0xffffffff;\n                v38 = v91;\n                v37 = v35;\n                v32 = 0xffffffff;\n                v29 = v91;\n                if ((int32_t)v80 < 58) {\n                    goto lab_0x40e931;\n                } else {\n                    goto lab_0x40e8e8_2;\n                }\n            } else {\n                int64_t v92 = v3 - v20; // 0x40e812\n                v1 = v92;\n                if (v92 < 2) {\n                    // break -> 0x40e853\n                    break;\n                }\n                int64_t v93 = 0; // 0x40e81e\n                if (v23 != 0) {\n                    // 0x40e820\n                    *(char *)v23 = v71;\n                    v93 = v23 + 1;\n                }\n                // 0x40e827\n                v8 = v73;\n                v9 = v72;\n                v25 = v70;\n                v21 = v20 + 1;\n                v24 = v93;\n                goto lab_0x40e82e;\n            }\n        }\n      lab_0x40e853_11:\n        // 0x40e853\n        return 0;\n    }\n    goto lab_0x40e83b_2;\n  lab_0x40e8c8:\n    // 0x40e8c8\n    v10 = v14;\n    v11 = v15;\n    v34 = v36;\n    v26 = v28;\n    v17 = v31 & 0xffffffff;\n    goto lab_0x40e898;\n  lab_0x40e97e:;\n    // 0x40e97e\n    int64_t v94; // 0x40e93b\n    v38 = v94;\n    int64_t v95; // 0x40e933\n    v37 = v95;\n    v32 = 0x7fffffff;\n    v29 = v94;\n    int64_t v96; // 0x40e93d\n    if ((int32_t)v96 >= 10) {\n        // break -> 0x40e8e8\n        goto lab_0x40e8e8_2;\n    }\n    // 0x40e983\n    int64_t v97; // 0x40e7a0\n    int64_t v98 = v97 + 2; // 0x40e983\n    int64_t v99 = (int64_t)*(char *)v98; // 0x40e983\n    int64_t v100 = v99 + 0xffffffd0 & 0xffffffff; // 0x40e992\n    v1 = v100;\n    int64_t v101 = v100; // 0x40e995\n    int64_t v102 = v99; // 0x40e995\n    int64_t v103 = v99 & 0xffffffff; // 0x40e995\n    int64_t v104 = v98; // 0x40e995\n    int64_t v105 = 0x7fffffff; // 0x40e995\n    goto lab_0x40e95a;\n  lab_0x40e95a:;\n    int64_t v106 = v105;\n    int64_t v107 = v104;\n    int64_t v108 = v107; // 0x40e95d\n    int64_t v109 = v106; // 0x40e95d\n    if ((int32_t)v101 >= 10) {\n        // 0x40e95f\n        v38 = v103;\n        v37 = v107;\n        v32 = v106;\n        v29 = v102 & 0xffffffff;\n        goto lab_0x40e8e8_2;\n    }\n    goto lab_0x40e933;\n  lab_0x40e931:\n    // 0x40e931\n    v108 = v35;\n    v109 = 0;\n    while (true) {\n      lab_0x40e933:;\n        int64_t v110 = v109;\n        v97 = v108;\n        v95 = v97 + 1;\n        int64_t v111 = (int64_t)*(char *)v95; // 0x40e933\n        v94 = v111 & 0xffffffff;\n        v96 = v111 + 0xffffffd0;\n        int64_t v112 = v96 & 0xffffffff; // 0x40e93d\n        v1 = v112;\n        int32_t v113 = v110; // 0x40e940\n        if (v113 > 0xccccccc) {\n            goto lab_0x40e97e;\n        } else {\n            char v114 = *(char *)v97; // 0x40e948\n            if (v113 != 0xccccccc || v114 < 56) {\n                // 0x40e94d\n                v101 = v112;\n                v102 = v111;\n                v103 = v94;\n                v104 = v95;\n                v105 = 10 * v110 + 0xffffffd0 + (int64_t)v114 & 0xffffffff;\n                goto lab_0x40e95a;\n            } else {\n                goto lab_0x40e97e;\n            }\n        }\n    }\n    goto lab_0x40e8e8_2;\n  lab_0x40e8e8_2:;\n    int64_t v115 = v32;\n    int64_t v116 = v37;\n    int64_t v117 = v38; // 0x40e7a0\n    int64_t v118 = v116; // 0x40e7a0\n    int64_t v119 = 0; // 0x40e7a0\n    int64_t v120; // 0x40e7a0\n    switch ((char)v120) {\n        case 69: {\n        }\n        case 79: {\n            int64_t v121 = v116 + 1; // 0x40e968\n            v117 = (int64_t)*(char *)v121;\n            v118 = v121;\n            v119 = v29;\n            // break -> 0x40e8fe\n            break;\n        }\n    }\n    int64_t v122 = v119;\n    int64_t v123 = v118;\n    int64_t v124 = v117;\n    g68 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v124; // 0x40e901\n    int64_t v127 = v16; // 0x40e901\n    int64_t v128 = 0; // 0x40e901\n    int64_t v129 = 1; // 0x40e901\n    int64_t v130 = v123; // 0x40e901\n    int64_t v131 = v16; // 0x40e901\n    int64_t v132 = v123; // 0x40e901\n    int64_t v133 = 0; // 0x40e901\n    int64_t v134; // 0x40e7a0\n    int64_t v135; // 0x40e7a0\n    int64_t v136; // 0x40e7a0\n    int64_t v137; // 0x40e7a0\n    int64_t v138; // 0x40e7a0\n    int64_t v139; // 0x40e7a0\n    int64_t v140; // 0x40e7a0\n    int64_t v141; // 0x40e7a0\n    int64_t v142; // 0x40e7a0\n    int64_t v143; // 0x40e7a0\n    int64_t v144; // 0x40e7a0\n    int64_t v145; // 0x40e7a0\n    int64_t v146; // 0x40e7a0\n    int64_t v147; // 0x40e7a0\n    int64_t v148; // 0x40e7a0\n    int64_t v149; // 0x40e7a0\n    int64_t v150; // 0x40e7a0\n    int64_t v151; // 0x40e7a0\n    int64_t v152; // 0x40e7a0\n    int64_t v153; // 0x40e7a0\n    int64_t v154; // 0x40e7a0\n    int64_t v155; // 0x40e7a0\n    int64_t v156; // 0x40e7a0\n    int64_t v157; // 0x40e7a0\n    int64_t v158; // 0x40e7a0\n    int64_t v159; // 0x40e7a0\n    int64_t v160; // 0x40e7a0\n    int64_t v161; // 0x40e7a0\n    int64_t v162; // 0x40e7a0\n    int64_t v163; // 0x40e7a0\n    int64_t v164; // 0x40e7a0\n    int64_t v165; // 0x40e7a0\n    int64_t v166; // 0x40e7a0\n    int64_t v167; // 0x40e7a0\n    int64_t v168; // 0x40e7a0\n    int64_t v169; // 0x40e7a0\n    int64_t v170; // 0x40e7a0\n    int64_t v171; // 0x40e7a0\n    int64_t v172; // 0x40e7a0\n    int64_t v173; // 0x40e7a0\n    int64_t v174; // 0x40e7a0\n    int64_t v175; // 0x40e7a0\n    int64_t v176; // 0x40e7a0\n    int64_t v177; // 0x40e7a0\n    int64_t v178; // 0x40e7a0\n    int64_t v179; // 0x40e7a0\n    int64_t v180; // 0x40e7a0\n    int64_t v181; // 0x40e7a0\n    int64_t v182; // 0x40e7a0\n    int64_t v183; // 0x40e7a0\n    int64_t v184; // 0x40e7a0\n    int64_t v185; // 0x40e7a0\n    int32_t v186; // 0x40e7a0\n    switch (v125) {\n        case 0: {\n            // 0x40f883\n            v177 = v123 - 1;\n            goto lab_0x40f777;\n        }\n        case 37: {\n            int64_t v187 = v3 - v20; // 0x40f81e\n            v1 = v187;\n            int32_t v188 = v115; // 0x40f821\n            int64_t v189 = 0x100000000 * v115 >> 32;\n            int64_t v190 = v188 >= 0 ? v189 : 0; // 0x40f826\n            int64_t v191 = v190 != 0 ? v190 : 1; // 0x40f82b\n            v134 = v187;\n            v162 = v190;\n            v176 = 1;\n            v160 = v123;\n            v161 = v123;\n            v142 = v16;\n            v152 = v191;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40f623;\n            } else {\n                // 0x40f838\n                if (v191 >= v187) {\n                    // break -> 0x40e853\n                    break;\n                }\n                // 0x40f841\n                v155 = v191;\n                v156 = 0;\n                if (v23 != 0) {\n                    int64_t v192 = v124; // 0x40f84d\n                    int64_t v193 = v23; // 0x40f84d\n                    if (v188 >= 2) {\n                        int64_t v194 = v189 - 1; // 0x40f852\n                        v1 = v194;\n                        int64_t v195 = v194 + v23; // 0x40f856\n                        int64_t * v196 = (int64_t *)v23;\n                        int32_t v197 = v194;\n                        if (v18 == 48) {\n                            // 0x40fee6\n                            memset(v196, 48, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        } else {\n                            // 0x40f864\n                            memset(v196, 32, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        }\n                    }\n                    // 0x40f877\n                    *(char *)v193 = (char)v192;\n                    v155 = v191;\n                    v156 = v193 + 1;\n                }\n                goto lab_0x40f1c6;\n            }\n        }\n        case 58: {\n            int64_t v198 = v123 + 1; // 0x40f8df\n            char v199 = *(char *)v198; // 0x40f8df\n            v1 = v198;\n            int64_t v200 = v198; // 0x40f8ef\n            char v201 = v199; // 0x40f8ef\n            int64_t v202 = 1; // 0x40f8ef\n            if (v199 == 58) {\n                int64_t v203 = 2; // 0x40f917\n                int64_t v204 = v203 + v123; // 0x40f91b\n                char v205 = *(char *)v204; // 0x40f91b\n                v1 = v204;\n                v200 = v204;\n                v201 = v205;\n                v202 = v203;\n                int64_t v206 = v203; // 0x40f926\n                while (v205 == 58) {\n                    // 0x40f917\n                    v203 = v206 + 1;\n                    v204 = v203 + v123;\n                    v205 = *(char *)v204;\n                    v1 = v204;\n                    v200 = v204;\n                    v201 = v205;\n                    v202 = v203;\n                    v206 = v203;\n                }\n            }\n            // 0x40f8f1\n            v130 = v123;\n            v131 = v16;\n            v132 = v200;\n            v133 = v202;\n            if (v201 != 122) {\n                goto lab_0x40f5e8;\n            } else {\n                goto lab_0x40f6c0;\n            }\n        }\n        case 65: {\n            goto lab_0x40e9b0;\n        }\n        case 66: {\n            goto lab_0x40e9b0;\n        }\n        case 67: {\n            // 0x40f513\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40ef52;\n            } else {\n                // 0x40f51d\n                *v41 = 0;\n                int32_t v207 = *(int32_t *)(*tm + 20); // 0x40f532\n                int32_t v208 = v207 / 100; // 0x40f543\n                int32_t v209 = v208 + 19; // 0x40f547\n                int32_t v210 = v207 + 1900; // 0x40f55b\n                v171 = v123;\n                v168 = v115;\n                v182 = v209 - (int32_t)(-100 * v208 + v207 < 0 == v209 >= 0 == (v209 != 0));\n                v178 = 0;\n                v157 = v210 < 0 != ((v210 ^ v207) & (v207 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40ef3f;\n            }\n        }\n        case 68: {\n            // 0x40eca7\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40ecb0\n                *v44 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x40ecb9;\n            }\n        }\n        case 70: {\n            // 0x40eda9\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40edb2\n                *v44 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x40ecb9;\n            }\n        }\n        case 71: {\n            goto lab_0x40edc0;\n        }\n        case 72: {\n            // 0x40f052\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f05c\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 8);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 73: {\n            // 0x40f06f\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f079\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)v42;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 77: {\n            // 0x40f088\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f092\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 4);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 78: {\n            // 0x40f0a5\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                uint32_t v211 = (int32_t)v115; // 0x40f0af\n                if (v211 != -1) {\n                    int64_t v212 = (int64_t)*v47;\n                    int64_t v213 = v212; // 0x40fd41\n                    int64_t v214 = v115; // 0x40fd41\n                    int64_t v215 = v212; // 0x40fd41\n                    if (v211 <= 8) {\n                        int64_t v216 = v213;\n                        int64_t v217 = (v214 & 0xffffffff) + 1; // 0x40fd65\n                        int64_t v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31); // 0x40fd70\n                        v214 = v217;\n                        v215 = v218;\n                        while ((int32_t)v217 != 9) {\n                            // 0x40fd60\n                            v216 = v218;\n                            v217 = (v214 & 0xffffffff) + 1;\n                            v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31);\n                            v214 = v217;\n                            v215 = v218;\n                        }\n                    }\n                    // 0x40fd77\n                    v167 = v115;\n                    v181 = v215;\n                    v138 = v115 & 0xffffffff;\n                    v148 = v18;\n                } else {\n                    // 0x40f0b8\n                    v167 = 9;\n                    v181 = (int64_t)*v47;\n                    v138 = 9;\n                    v148 = v18;\n                }\n                goto lab_0x40ef30;\n            }\n        }\n        case 80: {\n            goto lab_0x40f0d5;\n        }\n        case 82: {\n            // 0x40f044\n            *v44 = (int64_t)\"%H:%M\";\n            goto lab_0x40ecb9;\n        }\n        case 83: {\n            // 0x40f4c0\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f4ca\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)*tm;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 84: {\n            // 0x40f909\n            *v44 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x40ecb9;\n        }\n        case 85: {\n            // 0x40f4dc\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                int64_t v219 = *tm; // 0x40f4e6\n                v186 = *(int32_t *)(v219 + 28) + 7 - *(int32_t *)(v219 + 24);\n                goto lab_0x40f4fd;\n            }\n        }\n        case 86: {\n            goto lab_0x40edc0;\n        }\n        case 87: {\n            // 0x40f56e\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                int64_t v220 = *tm; // 0x40f574\n                int32_t v221 = *(int32_t *)(v220 + 24); // 0x40f57e\n                int32_t v222 = v221 + 6; // 0x40f582\n                *v64 = v221;\n                int32_t v223 = *(int32_t *)(v220 + 28); // 0x40f5a5\n                v186 = 1 - v221 + v223 + 7 * ((v222 + (int32_t)(-0x6db6db6d * (int64_t)v222 / 0x100000000) >> 2) - (v222 >> 31));\n                goto lab_0x40f4fd;\n            }\n        }\n        case 88: {\n            goto lab_0x40eaf0;\n        }\n        case 89: {\n            // 0x40f46d\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            v130 = v123;\n            v131 = v16;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x40ef52;\n                }\n                case 79: {\n                    goto lab_0x40f5e8;\n                }\n                default: {\n                    // 0x40f481\n                    *v41 = 0;\n                    int32_t v224 = *(int32_t *)(*tm + 20); // 0x40f491\n                    int32_t v225 = v224 + 1900; // 0x40f494\n                    v174 = v123;\n                    v164 = v115;\n                    v185 = v225;\n                    v180 = 0;\n                    v159 = v225 < 0 != ((v225 ^ v224) & (v224 ^ -0x80000000)) < 0;\n                    v136 = 4;\n                    v145 = v18;\n                    goto lab_0x40f4b0;\n                }\n            }\n        }\n        case 90: {\n            char v226 = v27; // 0x40ef74\n            *v43 = v226;\n            *v39 = v226 != 0 ? 0 : (char)v16;\n            int32_t len = strlen((char *)*str); // 0x40ef8f\n            uint64_t v227 = (int64_t)len; // 0x40ef8f\n            int64_t v228 = 0x100000000 * v115 >> 32;\n            uint64_t v229 = (int32_t)v115 >= 0 ? v228 : 0; // 0x40efa5\n            int64_t v230 = v229 <= v227 ? v227 : v229; // 0x40efad\n            int64_t v231 = v3 - v20; // 0x40efb1\n            v1 = v231;\n            *v44 = v230;\n            if (v231 <= v230) {\n                // break -> 0x40e853\n                break;\n            }\n            int64_t v232 = v230; // 0x40efc5\n            int64_t v233 = 0; // 0x40efc5\n            if (v23 != 0) {\n                char v234 = *v39; // 0x40efca\n                char v235 = *v43; // 0x40efd0\n                char v236 = v235; // 0x40efd6\n                char v237 = v234; // 0x40efd6\n                int64_t v238 = v23; // 0x40efd6\n                if (v229 > v227) {\n                    int64_t v239 = v228 - v227; // 0x40efdb\n                    v1 = v239;\n                    int64_t v240 = v239 + v23; // 0x40efde\n                    if (v18 == 48) {\n                        // 0x40fefe\n                        memset((int64_t *)v23, 48, (int32_t)v239);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    } else {\n                        // 0x40efec\n                        *v43 = v235;\n                        *v39 = v234;\n                        memset((int64_t *)v23, 32, (int32_t)v1);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    }\n                }\n                int64_t v241 = v238;\n                v1 = v227;\n                int64_t v242 = *str; // 0x40f015\n                if (v236 != 0) {\n                    // 0x40fe3c\n                    function_40e700(v241, v242, v227);\n                } else {\n                    // 0x40f026\n                    if (v237 == 0) {\n                        // 0x40fe32\n                        memcpy((int64_t *)v241, (int64_t *)v242, len);\n                    } else {\n                        // 0x40f02f\n                        function_40e750(v241, v242, v227);\n                    }\n                }\n                // 0x40f034\n                v232 = *v44;\n                v233 = v241 + v227;\n            }\n            // 0x40f037\n            v8 = v12;\n            v9 = v13;\n            v25 = v123;\n            v21 = v232 + v20;\n            v24 = v233;\n            goto lab_0x40e82e;\n        }\n        case 97: {\n            goto lab_0x40e9b0;\n        }\n        case 98: {\n            goto lab_0x40f5d1;\n        }\n        case 99: {\n            goto lab_0x40eaf0;\n        }\n        case 100: {\n            // 0x40f7ad\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f7b7\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 12);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 101: {\n            // 0x40f7ca\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f7d4\n                v183 = *tm + 12;\n                goto lab_0x40f101;\n            }\n        }\n        case 103: {\n            goto lab_0x40edc0;\n        }\n        case 104: {\n            goto lab_0x40f5d1;\n        }\n        case 106: {\n            // 0x40f7e1\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f7eb\n                *v41 = 0;\n                int32_t v243 = *(int32_t *)(*tm + 28); // 0x40f7fb\n                int32_t v244 = v243 + 1; // 0x40f7fe\n                v171 = v123;\n                v168 = v115;\n                v182 = v244;\n                v178 = 0;\n                v157 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v139 = 3;\n                v149 = v18;\n                goto lab_0x40ef3f;\n            }\n        }\n        case 107: {\n            // 0x40f0ef\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f0f9\n                v183 = *tm + 8;\n                goto lab_0x40f101;\n            }\n        }\n        case 108: {\n            // 0x40f126\n            v183 = v42;\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                goto lab_0x40f101;\n            }\n        }\n        case 109: {\n            // 0x40f136\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f140\n                *v41 = 0;\n                int32_t v245 = *(int32_t *)(*tm + 16); // 0x40f150\n                int32_t v246 = v245 + 1; // 0x40f153\n                v171 = v123;\n                v168 = v115;\n                v182 = v246;\n                v178 = 0;\n                v157 = v246 < 0 != (v246 & (v245 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40ef3f;\n            }\n        }\n        case 110: {\n            int32_t v247 = v115; // 0x40f164\n            int64_t v248 = 0x100000000 * v115 >> 32;\n            int64_t v249 = v247 >= 0 ? v248 : 0; // 0x40f175\n            int64_t v250 = v249 == 0 ? 1 : v249; // 0x40f17b\n            if (v3 - v20 <= v250) {\n                // break -> 0x40e853\n                break;\n            }\n            // 0x40f18f\n            v155 = v250;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v251 = v23; // 0x40f197\n                if (v247 >= 2) {\n                    int64_t v252 = v248 - 1; // 0x40f19c\n                    v1 = v252;\n                    int64_t v253 = v252 + v23; // 0x40f1a0\n                    int64_t * v254 = (int64_t *)v23;\n                    int32_t v255 = v252;\n                    if (v18 == 48) {\n                        // 0x40fe8b\n                        memset(v254, 48, v255);\n                        v251 = v253;\n                    } else {\n                        // 0x40f1ae\n                        memset(v254, 32, v255);\n                        v251 = v253;\n                    }\n                }\n                // 0x40f1be\n                *(char *)v251 = 10;\n                v155 = v250;\n                v156 = v251 + 1;\n            }\n            goto lab_0x40f1c6;\n        }\n        case 112: {\n            // 0x40f901\n            v129 = 0;\n            goto lab_0x40f0d5;\n        }\n        case 113: {\n            // 0x40f1d1\n            v172 = v123;\n            v169 = v115;\n            v140 = 1;\n            v150 = v18;\n            if ((int32_t)v122 == 79) {\n                goto lab_0x40ef52;\n            } else {\n                // 0x40f1e9\n                *v41 = 0;\n                v173 = v123;\n                v163 = v115;\n                v184 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v179 = 0;\n                v158 = 0;\n                v141 = 1;\n                v151 = v18;\n                goto lab_0x40f200;\n            }\n        }\n        case 114: {\n            goto lab_0x40eafd;\n        }\n        case 115: {\n            int64_t v256 = *tm; // 0x40eb1d\n            *v39 = (char)v16;\n            int128_t v257 = __asm_movdqu(*(int128_t *)(v256 + 32)); // 0x40eb3f\n            int128_t v258 = __asm_movdqu(*(int128_t *)v256); // 0x40eb44\n            int128_t v259 = __asm_movdqu(*(int128_t *)(v256 + 16)); // 0x40eb48\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v258);\n            *(int128_t *)(v49 + 160) = (int128_t)__asm_movaps(v259);\n            *(int128_t *)v63 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v49 + 176) = (int128_t)__asm_movaps(v257);\n            *(int64_t *)(v49 + 192) = *(int64_t *)(v256 + 48);\n            int64_t v260 = function_40ded0(*v65, str2, v1, v124); // 0x40eb76\n            int64_t v261 = v260;\n            int64_t v262 = v261 >> 63; // 0x40eba8\n            int64_t v263 = (v261 >> 63 & -10) + v261; // 0x40ebb5\n            int64_t v264 = (v260 < 0 ? -v263 : v263) + 48; // 0x40ebc8\n            v1 = v264 & 0xffffffff;\n            int64_t v265 = v40 - 1; // 0x40ebcb\n            *(char *)v265 = (char)v264;\n            int64_t v266 = v265; // 0x40ebd6\n            while (v262 != 0) {\n                // 0x40eb90\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & -10) + v261;\n                v264 = (v260 < 0 ? -v263 : v263) + 48;\n                v1 = v264 & 0xffffffff;\n                v265 = v266 - 1;\n                *(char *)v265 = (char)v264;\n                v266 = v265;\n            }\n            int64_t v267 = (int64_t)*v39; // 0x40eb7b\n            int32_t v268 = v115; // 0x40ebd8\n            int64_t v269 = v268 >= 0 == (v268 != 0) ? v115 & 0xffffffff : 1; // 0x40ebe0\n            v170 = v123;\n            v166 = v115;\n            v135 = v269;\n            v144 = v267;\n            v147 = v18;\n            v154 = v265;\n            v175 = v123;\n            v165 = v115;\n            v137 = v269;\n            v143 = v267;\n            v146 = v18;\n            v153 = v265;\n            if (v260 < 0) {\n                goto lab_0x40f948;\n            } else {\n                goto lab_0x40ebed;\n            }\n        }\n        case 116: {\n            int32_t v270 = v115; // 0x40f3c4\n            int64_t v271 = 0x100000000 * v115 >> 32;\n            int64_t v272 = v270 >= 0 ? v271 : 0; // 0x40f3d5\n            int64_t v273 = v272 == 0 ? 1 : v272; // 0x40f3db\n            if (v3 - v20 <= v273) {\n                // break -> 0x40e853\n                break;\n            }\n            // 0x40f3ef\n            v155 = v273;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v274 = v23; // 0x40f3fb\n                if (v270 >= 2) {\n                    int64_t v275 = v271 - 1; // 0x40f400\n                    v1 = v275;\n                    int64_t v276 = v275 + v23; // 0x40f404\n                    int64_t * v277 = (int64_t *)v23;\n                    int32_t v278 = v275;\n                    if (v18 == 48) {\n                        // 0x40fea0\n                        memset(v277, 48, v278);\n                        v274 = v276;\n                    } else {\n                        // 0x40f412\n                        memset(v277, 32, v278);\n                        v274 = v276;\n                    }\n                }\n                // 0x40f422\n                *(char *)v274 = 9;\n                v155 = v273;\n                v156 = v274 + 1;\n            }\n            goto lab_0x40f1c6;\n        }\n        case 117: {\n            int32_t v279 = *(int32_t *)(*tm + 24); // 0x40f43f\n            int32_t v280 = v279 + 6; // 0x40f442\n            *v64 = v279;\n            v167 = v115;\n            v181 = v279 + 7 + -7 * ((v280 + (int32_t)(-0x6db6db6d * (int64_t)v280 / 0x100000000) >> 2) - (v280 >> 31));\n            v138 = 1;\n            v148 = v18;\n            goto lab_0x40ef30;\n        }\n        case 119: {\n            // 0x40f5b8\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40f5e8;\n            } else {\n                // 0x40f5be\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 24);\n                v138 = 1;\n                v148 = v18;\n                goto lab_0x40ef30;\n            }\n        }\n        case 120: {\n            goto lab_0x40eaf0;\n        }\n        case 121: {\n            // 0x40f890\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x40ef52;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x40f8aa\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x40f8c2\n                v167 = v115;\n                v181 = v283;\n                v138 = 2;\n                v148 = v18;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x40f8d1\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x40f8d7\n                    v167 = v115;\n                    v181 = v285 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n                goto lab_0x40ef30;\n            }\n        }\n        case 122: {\n            goto lab_0x40f6c0;\n        }\n        default: {\n            goto lab_0x40f5e8;\n        }\n    }\n  lab_0x40e82e:\n    // 0x40e82e\n    v5 = v24;\n    result = v21;\n    int64_t v286 = v25 + 1; // 0x40e82e\n    char v287 = *(char *)v286; // 0x40e82e\n    v6 = v8;\n    v7 = v9;\n    v30 = v287;\n    v33 = v286;\n    v19 = result;\n    v22 = v5;\n    if (v287 == 0) {\n        // 0x40e83b\n        goto lab_0x40e83b_2;\n    }\n    goto lab_0x40e80a;\n  lab_0x40e9b0:\n    // 0x40e9b0\n    v130 = v123;\n    v131 = v16;\n    int64_t v288; // 0x40e7a0\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40f5e8;\n    } else {\n        // 0x40e9b9\n        v288 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff;\n        goto lab_0x40e9c0;\n    }\n  lab_0x40edc0:\n    // 0x40edc0\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 69) {\n        goto lab_0x40f5e8;\n    } else {\n        int64_t v289 = *tm; // 0x40edca\n        int32_t v290 = *(int32_t *)(v289 + 20); // 0x40edcf\n        uint32_t v291 = *(int32_t *)(v289 + 28); // 0x40edd2\n        uint32_t v292 = *(int32_t *)(v289 + 24); // 0x40edd6\n        *v64 = v290;\n        int32_t v293 = v290 - 100 + (v290 >> 31 & 400); // 0x40eded\n        int32_t v294 = v291 - v292; // 0x40edf4\n        int32_t v295 = v294 + 382; // 0x40edf7\n        int32_t v296 = v291 - 379 - v294 + 7 * ((v295 + (int32_t)(-0x6db6db6d * (int64_t)v295 / 0x100000000) >> 2) - (v295 >> 31)); // 0x40ee1e\n        int32_t v297; // 0x40e7a0\n        int32_t v298; // 0x40eea9\n        if (v296 < 0) {\n            // 0x40fcb7\n            v1 = 365;\n            int64_t v299 = 365; // 0x40fcc3\n            if ((v293 + 3) % 4 == 0) {\n                int32_t v300 = v293 - 1;\n                v1 = 366;\n                v299 = 366;\n                if (v300 % 100 - v300 == 1 - v293) {\n                    uint32_t v301 = v300 % 400;\n                    int64_t v302 = v301; // 0x40fcee\n                    int64_t v303 = v302 + 366 + (v302 ^ 0xffffffff) + (int64_t)(v301 == 0) & 0xffffffff; // 0x40fcf7\n                    v1 = v303;\n                    v299 = v303;\n                }\n            }\n            int64_t v304 = v299; // 0x40fcfd\n            int64_t v305; // 0x40edd2\n            int64_t v306 = v304 + v305; // 0x40fcfd\n            int64_t v307; // 0x40edd6\n            int64_t v308 = v306 - v307 + 382; // 0x40fd11\n            v297 = (int32_t)(v306 - v308) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v308 >> 32) / 0x100000000 + v308) >> 2) - ((int32_t)v308 >> 31));\n        } else {\n            int64_t v309 = 365; // 0x40ee35\n            if (v293 % 4 == 0) {\n                // 0x40ee37\n                v309 = 366;\n                if (v293 % 100 == 0) {\n                    // 0x40ee5c\n                    v309 = v293 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v310 = (int64_t)v291 - v309; // 0x40ee80\n            int64_t v311 = v310 - (int64_t)v292 + 382; // 0x40ee87\n            v298 = (int32_t)(v310 - v311) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v311 >> 32) / 0x100000000 + v311) >> 2) - ((int32_t)v311 >> 31));\n            v297 = v298 >= 0 ? v298 : v296;\n        }\n        int64_t v312 = (v298 >> 31) + 1;\n        if (v125 == 71) {\n            uint32_t v313 = *v64; // 0x40fda5\n            *v41 = 0;\n            int32_t v314 = -1900 - (int32_t)v312; // 0x40fdb9\n            int32_t v315 = v313 - v314; // 0x40fdbc\n            v171 = v123;\n            v168 = v115;\n            v182 = v312 + 1900 + (int64_t)v313 & 0xffffffff;\n            v178 = 0;\n            v157 = v315 < 0 != ((v315 ^ v313) & (v313 ^ v314)) < 0;\n            v139 = 4;\n            v149 = v18;\n            goto lab_0x40ef3f;\n        } else {\n            if (v125 != 103) {\n                int32_t v316 = v297;\n                int32_t v317 = v316 < 0 ? 2 : 1; // 0x40fd9a\n                v167 = v115;\n                v181 = v317 + (v316 + (int32_t)(-0x6db6db6d * (int64_t)v316 / 0x100000000) >> 2);\n                v138 = 2;\n                v148 = v18;\n            } else {\n                int32_t v318 = *v64; // 0x40eecf\n                int32_t v319 = v312; // 0x40eefa\n                int32_t v320 = (v318 % 100 + v319) % 100;\n                int64_t v321 = v320; // 0x40ef10\n                v167 = v115;\n                v181 = v321;\n                v138 = 2;\n                v148 = v18;\n                if (v320 < 0) {\n                    int32_t v322 = -1900 - v319; // 0x40ef20\n                    int32_t v323 = v318 - v322; // 0x40ef25\n                    int64_t v324 = v323 < 0 == ((v323 ^ v318) & (v318 ^ v322)) < 0 ? v321 + 100 : -v321; // 0x40ef28\n                    v167 = v115;\n                    v181 = v324 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n            }\n            goto lab_0x40ef30;\n        }\n    }\n  lab_0x40f0d5:\n    // 0x40f0d5\n    v126 = 112;\n    v127 = (char)v27 != 0 ? 0 : v16;\n    v128 = ((char)v27 != 0 ? v27 : v129) & 0xffffffff;\n    goto lab_0x40eafd;\n  lab_0x40eaf0:\n    // 0x40eaf0\n    v126 = v124;\n    v127 = v16;\n    v128 = 0;\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 79) {\n        goto lab_0x40f5e8;\n    } else {\n        goto lab_0x40eafd;\n    }\n  lab_0x40f5d1:;\n    int64_t v660 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff; // 0x40f5d4\n    v288 = v660;\n    v130 = v123;\n    v131 = v660;\n    if ((int32_t)v122 == 0) {\n        goto lab_0x40e9c0;\n    } else {\n        goto lab_0x40f5e8;\n    }\n  lab_0x40eafd:;\n    int64_t v325 = v128;\n    int64_t v326 = v127;\n    int64_t v327 = v126;\n    *v45 = 0x2520;\n    int64_t v328 = v327; // 0x40eb0a\n    int64_t v329 = v123; // 0x40eb0a\n    int64_t v330 = v115; // 0x40eb0a\n    int64_t v331 = 0; // 0x40eb0a\n    int64_t v332 = v326; // 0x40eb0a\n    int64_t v333 = v18; // 0x40eb0a\n    int64_t v334 = v325; // 0x40eb0a\n    int64_t v335; // 0x40e7a0\n    int64_t v336; // 0x40e7a0\n    int64_t v337; // 0x40e7a0\n    int64_t v338; // 0x40e7a0\n    int64_t v339; // 0x40e7a0\n    int64_t v340; // 0x40e7a0\n    int64_t v341; // 0x40e7a0\n    int64_t v342; // 0x40e7a0\n    if ((int32_t)v122 != 0) {\n        goto lab_0x40ef5f;\n    } else {\n        // 0x40eb10\n        v340 = *v46;\n        v342 = v327;\n        v341 = v115;\n        v338 = v123;\n        v339 = v122;\n        v335 = v326;\n        v336 = v18;\n        v337 = v325;\n        goto lab_0x40e9e0;\n    }\n  lab_0x40f6c0:;\n    int64_t v343 = v132;\n    int64_t v344 = *tm; // 0x40f6c0\n    v8 = v12;\n    v9 = v13;\n    v25 = v343;\n    v21 = v20;\n    v24 = v23;\n    int64_t v345; // 0x40e7a0\n    uint32_t v346; // 0x40f70e\n    uint32_t v347; // 0x40f743\n    int32_t v348; // 0x40f747\n    if (*(int32_t *)(v344 + 32) < 0) {\n        goto lab_0x40e82e;\n    } else {\n        int64_t v349 = *(int64_t *)(v344 + 40); // 0x40f6d0\n        int32_t v350 = v349; // 0x40f6da\n        int64_t v351 = 1; // 0x40f6dc\n        if (v350 >= 0) {\n            // 0x40f6de\n            v351 = 0;\n            if (v350 == 0) {\n                // 0x40f6e6\n                v351 = *(char *)*str == 45;\n            }\n        }\n        // 0x40f6f2\n        v345 = v351;\n        int64_t v352 = 0x100000000 * v349 >> 32; // 0x40f6fe\n        int32_t v353 = v350 >> 31; // 0x40f702\n        *v48 = v353;\n        v346 = ((int32_t)(-0x6e5d4c3b * v352 / 0x100000000) + v350 >> 11) - v353;\n        *v64 = v346;\n        int32_t v354 = ((int32_t)(-0x77777777 * v352 / 0x100000000 + v349) >> 5) - *v48; // 0x40f720\n        v347 = -60 * ((v354 + (int32_t)(-0x77777777 * (int64_t)v354 / 0x100000000) >> 5) - (v354 >> 31)) + v354;\n        v348 = -60 * v354 + v350;\n        v177 = v343;\n        switch (v133) {\n            case 1: {\n                goto lab_0x40fe16;\n            }\n            case 0: {\n                // 0x40fe46\n                *v41 = 1;\n                v171 = v343;\n                v168 = v115;\n                v182 = v347 + 100 * v346;\n                v178 = 0;\n                v157 = v345;\n                v139 = 5;\n                v149 = v18;\n                goto lab_0x40ef3f;\n            }\n            case 2: {\n                goto lab_0x40fdf2;\n            }\n            case 3: {\n                if (v348 != 0) {\n                    goto lab_0x40fdf2;\n                } else {\n                    if (v347 != 0) {\n                        goto lab_0x40fe16;\n                    } else {\n                        // 0x40fe67\n                        *v41 = 1;\n                        v171 = v343;\n                        v168 = v115;\n                        v182 = v346;\n                        v178 = v347;\n                        v157 = v345;\n                        v139 = 3;\n                        v149 = v18;\n                        goto lab_0x40ef3f;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40f777;\n            }\n        }\n    }\n  lab_0x40f5e8:;\n    int64_t v355 = v130 + 1; // 0x40f5ec\n    v1 = v355 & 0xffffffff;\n    int64_t v356 = v130 - 1;\n    int64_t v357 = v356; // 0x40f5fe\n    while (*(char *)v356 != 37) {\n        // 0x40f5ef\n        v356 = v357 - 1;\n        v357 = v356;\n    }\n    int64_t v358 = 0x100000000 * (v355 - v356) >> 32; // 0x40f609\n    int64_t v359 = v3 - v20; // 0x40f60f\n    v1 = v359;\n    int64_t v360 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40f617\n    v134 = v359;\n    v162 = v360;\n    v176 = v358;\n    v160 = v130;\n    v161 = v356;\n    v142 = v131;\n    v152 = v358 >= v360 ? v358 : v360;\n    goto lab_0x40f623;\n  lab_0x40f623:\n    // 0x40f623\n    if (v134 <= v152) {\n        // break -> 0x40e853\n        goto lab_0x40e853_11;\n    }\n    int64_t v361 = v160;\n    int64_t v362 = v361; // 0x40f62f\n    int64_t v363 = 0; // 0x40f62f\n    if (v23 != 0) {\n        int64_t v364 = v142;\n        int64_t v365 = v161;\n        int64_t v366 = v176;\n        int64_t v367 = v366; // 0x40f638\n        int64_t v368 = v361; // 0x40f638\n        int64_t v369 = v365; // 0x40f638\n        int64_t v370 = v364; // 0x40f638\n        int64_t v371 = v23; // 0x40f638\n        if (v366 < v162) {\n            // 0x40f63a\n            *v54 = v366;\n            int64_t v372 = (0x100000000 * v115 >> 32) - v366; // 0x40f642\n            v1 = v372;\n            *v55 = v361;\n            int64_t v373 = v372 + v23; // 0x40f64a\n            *v53 = v365;\n            *v41 = (char)v364;\n            int64_t * v374 = (int64_t *)v23;\n            int32_t v375 = v1;\n            if (v18 == 48) {\n                // 0x40fbc4\n                memset(v374, 48, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            } else {\n                // 0x40f662\n                memset(v374, 32, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            }\n        }\n        int64_t v376 = v371;\n        int64_t v377 = v369;\n        *v53 = v368;\n        v1 = v367;\n        *v44 = v367;\n        if ((char)v370 == 0) {\n            // 0x40fa0e\n            memcpy((int64_t *)v376, (int64_t *)v377, (int32_t)v1);\n        } else {\n            // 0x40f6a3\n            function_40e750(v376, v377, v1);\n        }\n        // 0x40f6b2\n        v362 = *v53;\n        v363 = *v44 + v376;\n    }\n    // 0x40f6b5\n    v8 = v12;\n    v9 = v13;\n    v25 = v362;\n    v21 = v152 + v20;\n    v24 = v363;\n    goto lab_0x40e82e;\n  lab_0x40f777:;\n    int64_t v378 = v177;\n    int64_t v379 = v3 - v20; // 0x40f780\n    v1 = v379;\n    v130 = v378;\n    v131 = v16;\n    if (*(char *)v378 != 37) {\n        goto lab_0x40f5e8;\n    } else {\n        int64_t v380 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x40f788\n        v134 = v379;\n        v162 = v380;\n        v176 = 1;\n        v160 = v378;\n        v161 = v378;\n        v142 = v16;\n        v152 = v380 != 0 ? v380 : 1;\n        goto lab_0x40f623;\n    }\n  lab_0x40ef52:\n    // 0x40ef52\n    *v45 = 0x2520;\n    v328 = v124;\n    v329 = v172;\n    v330 = v169;\n    v331 = v140;\n    v332 = v16;\n    v333 = v150;\n    v334 = 0;\n    goto lab_0x40ef5f;\n  lab_0x40ecb9:\n    // 0x40ecb9\n    *v50 = (int64_t)*v47;\n    *v51 = *v65;\n    int64_t v643 = *v44; // 0x40ece2\n    v1 = v643;\n    uint64_t v644 = function_40e7a0(0, -1, v643, *tm, v16, *v52); // 0x40ece7\n    int64_t v645 = 0x100000000 * v115 >> 32;\n    uint64_t v646 = (int32_t)v115 >= 0 ? v645 : 0; // 0x40ed00\n    int64_t v647 = v644 >= v646 ? v644 : v646; // 0x40ed08\n    int64_t v648 = v3 - v20; // 0x40ed0c\n    *v53 = v647;\n    if (v648 <= v647) {\n        // break -> 0x40e853\n        goto lab_0x40e853_11;\n    }\n    int64_t v649 = v647; // 0x40ed20\n    int64_t v650 = 0; // 0x40ed20\n    if (v23 != 0) {\n        int64_t v651 = v644; // 0x40ed25\n        int64_t v652 = v648; // 0x40ed25\n        int64_t v653 = v23; // 0x40ed25\n        if (v644 < v646) {\n            // 0x40ed27\n            *v54 = v644;\n            int64_t v654 = v645 - v644; // 0x40ed2f\n            v1 = v654;\n            *v55 = v648;\n            int64_t v655 = v654 + v23; // 0x40ed37\n            int64_t * v656 = (int64_t *)v23;\n            int32_t v657 = v1;\n            if (v18 == 48) {\n                // 0x40fc98\n                memset(v656, 48, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            } else {\n                // 0x40ed45\n                memset(v656, 32, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            }\n        }\n        // 0x40ed5f\n        *v55 = v651;\n        *v50 = (int64_t)*v47;\n        *v51 = *v65;\n        int64_t v658 = *v44; // 0x40ed86\n        v1 = v658;\n        function_40e7a0((int32_t)v653, v652, v658, *tm, v16, *v52);\n        v649 = *v53;\n        v650 = *v55 + v653;\n    }\n    // 0x40ed9c\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v649 + v20;\n    v24 = v650;\n    goto lab_0x40e82e;\n  lab_0x40e9c0:\n    // 0x40e9c0\n    *v45 = 0x2520;\n    v340 = *v46;\n    v342 = v124;\n    v341 = v115;\n    v338 = v123;\n    v339 = 0;\n    v335 = v288;\n    v336 = v18;\n    v337 = 0;\n    goto lab_0x40e9e0;\n  lab_0x40f101:;\n    int64_t v659 = (int64_t)*(int32_t *)v183;\n    v167 = v115;\n    v181 = v659;\n    v138 = 2;\n    v148 = v18;\n    switch ((int32_t)v18) {\n        case 48: {\n            goto lab_0x40ef30;\n        }\n        case 45: {\n            goto lab_0x40ef30;\n        }\n        default: {\n            // 0x40f11b\n            v167 = v115;\n            v181 = v659;\n            v138 = 2;\n            v148 = 95;\n            goto lab_0x40ef30;\n        }\n    }\n  lab_0x40f1c6:\n    // 0x40f1c6\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v155 + v20;\n    v24 = v156;\n    goto lab_0x40e82e;\n  lab_0x40ef5f:\n    // 0x40ef5f\n    *(char *)(v49 + 114) = (char)v122;\n    v340 = v49 + 115;\n    v342 = v328;\n    v341 = v330;\n    v338 = v329;\n    v339 = v331 & 0xffffffff;\n    v335 = v332;\n    v336 = v333;\n    v337 = v334;\n    goto lab_0x40e9e0;\n  lab_0x40f948:;\n    int64_t v630 = v153;\n    int64_t v631 = v143;\n    int64_t v632 = v137;\n    int64_t v633 = v165;\n    int64_t v634 = v175;\n    *v41 = 45;\n    char v436 = 45; // 0x40f956\n    int64_t v437 = v634; // 0x40f956\n    int64_t v438 = v633; // 0x40f956\n    int64_t v439 = v632; // 0x40f956\n    int64_t v440 = v631; // 0x40f956\n    int64_t v441 = v146; // 0x40f956\n    int64_t v442 = v630; // 0x40f956\n    int32_t v429; // 0x40e7a0\n    int64_t v433; // 0x40e7a0\n    int64_t v434; // 0x40e7a0\n    int64_t v435; // 0x40e7a0\n    int64_t v432; // 0x40e7a0\n    int64_t v431; // 0x40e7a0\n    int64_t v430; // 0x40e7a0\n    if ((int32_t)v146 != 45) {\n        goto lab_0x40f290;\n    } else {\n        // 0x40f948\n        v429 = v633;\n        v430 = 45;\n        v431 = v634;\n        v432 = v633;\n        v433 = v632;\n        v434 = v631;\n        v435 = v630;\n        goto lab_0x40f95c;\n    }\n  lab_0x40ebed:;\n    int64_t v524 = v135;\n    int64_t v523 = v166;\n    int64_t v522 = v40 - v154; // 0x40ebf9\n    char v505; // 0x40e7a0\n    int64_t v510; // 0x40e7a0\n    int64_t v511; // 0x40e7a0\n    int64_t v512; // 0x40e7a0\n    int64_t v509; // 0x40e7a0\n    int64_t v506; // 0x40e7a0\n    int64_t v508; // 0x40e7a0\n    int64_t v507; // 0x40e7a0\n    if ((int32_t)v147 == 45) {\n        goto lab_0x40ec14;\n    } else {\n        int32_t v635 = v524 - v522; // 0x40ec0b\n        if (v635 >= 0 == (v635 != 0)) {\n            int64_t v636; // 0x40ebfc\n            int32_t v637; // 0x40ebff\n            if (v637 == 95) {\n                // 0x40fb0e\n                *v41 = 0;\n                v505 = 0;\n                v506 = v636;\n                int64_t v638; // 0x40e7a0\n                v507 = v638;\n                v508 = v523;\n                int64_t v639; // 0x40ec08\n                v509 = v639;\n                v510 = v524;\n                int64_t v640; // 0x40e7a0\n                v511 = v640;\n                int64_t v641; // 0x40e7a0\n                v512 = v641;\n                goto lab_0x40fb13;\n            } else {\n                int64_t v642 = 0x100000000 * v524 >> 32; // 0x40fddb\n                v1 = v642;\n                if (v642 >= v636) {\n                    // break -> 0x40e853\n                    goto lab_0x40e853_11;\n                }\n                // 0x40fde7\n                goto lab_0x40f365;\n            }\n        } else {\n            goto lab_0x40ec14;\n        }\n    }\n  lab_0x40ef30:\n    // 0x40ef30\n    *v41 = 0;\n    v171 = v123;\n    v168 = v167;\n    v182 = v181;\n    v178 = 0;\n    v157 = 0;\n    v139 = v138;\n    v149 = v148;\n    goto lab_0x40ef3f;\n  lab_0x40ef3f:;\n    int64_t v596 = v149;\n    int64_t v597 = v139;\n    int64_t v598 = v157;\n    int64_t v599 = v178;\n    int64_t v600 = v182;\n    int64_t v601 = v168;\n    int64_t v602 = v171;\n    v174 = v602;\n    v164 = v601;\n    v185 = v600;\n    v180 = v599;\n    v159 = v598;\n    v136 = v597;\n    v145 = v596;\n    int64_t v603; // 0x40e7a0\n    int64_t v604; // 0x40e7a0\n    int64_t v605; // 0x40e7a0\n    int64_t v606; // 0x40e7a0\n    int64_t v607; // 0x40e7a0\n    int64_t v608; // 0x40e7a0\n    int64_t v609; // 0x40e7a0\n    if ((int32_t)v122 != 79) {\n        goto lab_0x40f4b0;\n    } else {\n        // 0x40ef49\n        v172 = v602;\n        v169 = v601;\n        v140 = v597;\n        v150 = v596;\n        v607 = v602;\n        v606 = v601;\n        v609 = v600;\n        v608 = v599;\n        v605 = v598;\n        v603 = v597;\n        v604 = v596;\n        if ((char)v598 != 0) {\n            goto lab_0x40f4b9;\n        } else {\n            goto lab_0x40ef52;\n        }\n    }\n  lab_0x40f4fd:;\n    int32_t v610 = v186;\n    int64_t v611 = -0x6db6db6d * (int64_t)v610 / 0x100000000;\n    v1 = v611;\n    v167 = v115;\n    v181 = (v610 + (int32_t)v611 >> 2) - (v610 >> 31);\n    v138 = 2;\n    v148 = v18;\n    goto lab_0x40ef30;\n  lab_0x40f4b0:\n    // 0x40f4b0\n    v173 = v174;\n    v163 = v164;\n    v184 = v185;\n    v179 = v180;\n    v158 = v159;\n    v141 = v136;\n    v151 = v145;\n    v607 = v174;\n    v606 = v164;\n    v609 = v185;\n    v608 = v180;\n    v605 = v159;\n    v603 = v136;\n    v604 = v145;\n    if ((char)v159 == 0) {\n        goto lab_0x40f200;\n    } else {\n        goto lab_0x40f4b9;\n    }\n  lab_0x40e9e0:;\n    int64_t v381 = v337;\n    int64_t v382 = v336;\n    int64_t v383 = v341;\n    *(char *)v340 = (char)v342;\n    v1 = format;\n    *(char *)(v340 + 1) = 0;\n    *v44 = v338;\n    *v56 = (int32_t)v339;\n    *v39 = (char)v335;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x40ea0c\n    int64_t v384 = *v44; // 0x40ea11\n    v8 = v12;\n    v9 = v13;\n    v25 = v384;\n    v21 = v20;\n    v24 = v23;\n    int64_t v385; // 0x40e7a0\n    int64_t v386; // 0x40e7a0\n    int64_t v387; // 0x40e7a0\n    int64_t v388; // 0x40e7a0\n    int64_t v389; // 0x40e7a0\n    int64_t v390; // 0x40e7a0\n    int64_t v391; // 0x40e7a0\n    int64_t v392; // 0x40e7a0\n    int64_t v393; // 0x40e7a0\n    int64_t v394; // 0x40e7a0\n    int64_t v395; // 0x40e7a0\n    int64_t v396; // 0x40e7a0\n    if (copied_chars == 0) {\n        goto lab_0x40e82e;\n    } else {\n        uint64_t v397 = (int64_t)copied_chars - 1; // 0x40ea1f\n        int64_t v398 = 0x100000000 * v383 >> 32;\n        uint64_t v399 = (int32_t)v383 >= 0 ? v398 : 0; // 0x40ea31\n        int64_t v400 = v397 >= v399 ? v397 : v399; // 0x40ea39\n        int64_t v401 = v3 - v20; // 0x40ea3d\n        v1 = v401;\n        if (v401 <= v400) {\n            // break -> 0x40e853\n            goto lab_0x40e853_11;\n        }\n        // 0x40ea49\n        v392 = v400;\n        v391 = v384;\n        v388 = v20;\n        v390 = 0;\n        if (v23 == 0) {\n            goto lab_0x40eae6;\n        } else {\n            char v402 = *v39; // 0x40ea57\n            int64_t v403 = v397; // 0x40ea60\n            int64_t v404 = v384; // 0x40ea60\n            char v405 = v402; // 0x40ea60\n            int64_t v406 = v23; // 0x40ea60\n            if (v397 < v399 == *v56 == 0) {\n                // 0x40ea67\n                *v55 = v397;\n                int64_t v407 = v398 - v397; // 0x40ea6f\n                v1 = v407;\n                *v53 = v384;\n                int64_t v408 = v407 + v23; // 0x40ea77\n                *v41 = v402;\n                int64_t * v409 = (int64_t *)v23;\n                int32_t v410 = v1;\n                if ((int32_t)v382 == 48) {\n                    // 0x40fa36\n                    memset(v409, 48, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                } else {\n                    // 0x40ea8a\n                    memset(v409, 32, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                }\n            }\n            int64_t v411 = v406;\n            *v53 = v404;\n            v1 = v403;\n            *v44 = v403;\n            v393 = v400;\n            v396 = v57;\n            v395 = v411;\n            v385 = v405;\n            v386 = v20;\n            if ((char)v381 != 0) {\n                // 0x40fa22\n                function_40e700(v411, v57, v1);\n                v394 = v400;\n                v387 = v20;\n                v389 = v411;\n                goto lab_0x40eae3;\n            } else {\n                goto lab_0x40eacb;\n            }\n        }\n    }\n  lab_0x40f200:;\n    int64_t v412 = v151;\n    int64_t v413 = v141;\n    int64_t v414 = v163;\n    int64_t v415 = v173;\n    *v39 = (char)v158;\n    int64_t v416 = v184; // 0x40f213\n    int64_t v417 = v40 - 1;\n    int64_t v418 = v417; // 0x40f220\n    if (v179 % 2 != 0) {\n        // 0x40f222\n        *(char *)v417 = 58;\n        v418 = v40 - 2;\n    }\n    int64_t v419 = v418;\n    uint32_t v420 = (int32_t)v179 >> 1; // 0x40f235\n    int64_t v421 = 0xcccccccd * v416 / 0x800000000; // 0x40f237\n    v1 = v421;\n    *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    while (v416 < 10 != (v420 == 0)) {\n        // 0x40f25a\n        v416 = v1 & 0xffffffff;\n        int64_t v422 = v420; // 0x40f25c\n        int64_t v423 = v419;\n        v417 = v423 - 1;\n        v418 = v417;\n        if (v422 % 2 != 0) {\n            // 0x40f222\n            *(char *)v417 = 58;\n            v418 = v423 - 2;\n        }\n        // 0x40f230\n        v419 = v418;\n        v420 = (int32_t)v422 >> 1;\n        v421 = 0xcccccccd * v416 / 0x800000000;\n        v1 = v421;\n        *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    }\n    int32_t v424 = v413; // 0x40f266\n    int32_t v425 = v414;\n    int32_t v426 = v424 - v425; // 0x40f266\n    int64_t v427 = v426 < 0 == ((v426 ^ v424) & (int32_t)(v413 ^ v414)) < 0 ? v413 : v414;\n    int64_t v428 = v427 & 0xffffffff; // 0x40f269\n    v175 = v415;\n    v165 = v414;\n    v137 = v428;\n    v143 = v16;\n    v146 = v412;\n    v153 = v419;\n    if (*v39 != 0) {\n        goto lab_0x40f948;\n    } else {\n        // 0x40f276\n        v170 = v415;\n        v166 = v414;\n        v135 = v428;\n        v144 = v16;\n        v147 = v412;\n        v154 = v419;\n        if (*v41 == 0) {\n            goto lab_0x40ebed;\n        } else {\n            // 0x40f281\n            v429 = v425;\n            v430 = 43;\n            v431 = v415;\n            v432 = v414;\n            v433 = v428;\n            v434 = v16;\n            v435 = v419;\n            if ((int32_t)v412 == 45) {\n                goto lab_0x40f95c;\n            } else {\n                // 0x40f28b\n                *v41 = 43;\n                v436 = 43;\n                v437 = v415;\n                v438 = v414;\n                v439 = v428;\n                v440 = v16;\n                v441 = v412;\n                v442 = v419;\n                goto lab_0x40f290;\n            }\n        }\n    }\n  lab_0x40f290:;\n    int64_t v443 = v442;\n    int64_t v444 = v441;\n    int64_t v445 = v440;\n    int64_t v446 = v439;\n    int64_t v447 = v438;\n    int64_t v448 = v437;\n    int64_t v449 = v40 - v443; // 0x40f2a0\n    int64_t v450 = (v449 ^ 0xffffffff) + v446; // 0x40f2a3\n    uint64_t v451 = v3 - v20; // 0x40f2a6\n    int64_t v452; // 0x40e7a0\n    int64_t v453; // 0x40e7a0\n    int64_t v454; // 0x40e7a0\n    int64_t v455; // 0x40e7a0\n    int64_t v456; // 0x40e7a0\n    int64_t v457; // 0x40e7a0\n    int64_t v458; // 0x40e7a0\n    int64_t v459; // 0x40e7a0\n    int64_t v460; // 0x40e7a0\n    int64_t v461; // 0x40e7a0\n    int64_t v462; // 0x40e7a0\n    int64_t v463; // 0x40e7a0\n    int64_t v464; // 0x40e7a0\n    int64_t v465; // 0x40e7a0\n    int64_t v466; // 0x40e7a0\n    int64_t v467; // 0x40e7a0\n    int64_t v468; // 0x40e7a0\n    int64_t v469; // 0x40e7a0\n    int64_t v470; // 0x40e7a0\n    int64_t v471; // 0x40e7a0\n    int64_t v472; // 0x40e7a0\n    int64_t v473; // 0x40e7a0\n    int64_t v474; // 0x40e7a0\n    int64_t v475; // 0x40e7a0\n    int64_t v476; // 0x40e7a0\n    int64_t v477; // 0x40f2ea\n    if ((int32_t)v450 < 1) {\n        int64_t v478 = 0x100000000 * v447 >> 32;\n        int64_t v479 = (int32_t)v447 >= 0 ? v478 : 0; // 0x40fa6d\n        int64_t v480 = v479 != 0 ? v479 : 1; // 0x40fa73\n        if (v480 >= v451) {\n            // break -> 0x40e853\n            goto lab_0x40e853_11;\n        }\n        int64_t v481 = v449; // 0x40fa83\n        int64_t v482 = v480; // 0x40fa83\n        int64_t v483 = v479; // 0x40fa83\n        int64_t v484 = v446; // 0x40fa83\n        int64_t v485 = v445; // 0x40fa83\n        int64_t v486 = 0; // 0x40fa83\n        if (v23 != 0) {\n            int32_t v487 = v446; // 0x40fa85\n            int64_t v488 = v449; // 0x40fa88\n            int64_t v489 = v480; // 0x40fa88\n            int64_t v490 = v479; // 0x40fa88\n            int64_t v491 = v446; // 0x40fa88\n            int64_t v492 = v445; // 0x40fa88\n            int64_t v493 = v23; // 0x40fa88\n            if (v487 == 0 && v479 >= 2) {\n                // 0x40fa90\n                *v61 = v449;\n                int64_t v494 = v478 - 1; // 0x40fa98\n                v1 = v494;\n                *v62 = v480;\n                *v59 = v479;\n                *v53 = v494 + v23;\n                *v60 = v487;\n                *v43 = (char)v445;\n                if ((int32_t)v444 == 48) {\n                    // 0x40feb5\n                    int64_t * v495; // 0x40e7a0\n                    int32_t v496; // 0x40e7a0\n                    memset(v495, 48, v496);\n                    int64_t v497 = *v53; // 0x40fec2\n                    unsigned char v498 = *v43; // 0x40fec7\n                    uint32_t v499 = *v60; // 0x40fecd\n                    int64_t v500 = *v59; // 0x40fed2\n                    int64_t v501 = *v62; // 0x40fed7\n                    int64_t v502 = *v61; // 0x40fedc\n                    v488 = v502;\n                    v489 = v501;\n                    v490 = v500;\n                    v491 = v499;\n                    v492 = v498;\n                    v493 = v497;\n                } else {\n                    // 0x40fac3\n                    memset((int64_t *)v23, 32, (int32_t)v1);\n                    v488 = *v61;\n                    v489 = *v62;\n                    v490 = *v59;\n                    v491 = (int64_t)*v60;\n                    v492 = (int64_t)*v43;\n                    v493 = *v53;\n                }\n            }\n            // 0x40faef\n            *(char *)v493 = *v41;\n            v481 = v488;\n            v482 = v489;\n            v483 = v490;\n            v484 = v491;\n            v485 = v492;\n            v486 = v493 + 1;\n        }\n        int64_t v503 = v482 + v20; // 0x40fb00\n        v472 = v3 - v503;\n        v476 = v481;\n        v473 = v447;\n        v468 = v448;\n        v469 = v483;\n        v453 = v484;\n        v457 = v485;\n        v459 = v444;\n        v461 = v443;\n        v462 = v503;\n        v466 = v486;\n        goto lab_0x40ec26;\n    } else {\n        int32_t v504 = v444; // 0x40f2b2\n        v505 = v436;\n        v506 = v451;\n        v507 = v448;\n        v508 = v447;\n        v509 = v450;\n        v510 = v446;\n        v511 = v445;\n        v512 = v443;\n        if (v504 == 95) {\n            goto lab_0x40fb13;\n        } else {\n            // 0x40f2bc\n            if (0x100000000 * v446 >> 32 >= v451) {\n                // break -> 0x40e853\n                goto lab_0x40e853_11;\n            }\n            int64_t v513 = 0x100000000 * v447 >> 32;\n            int64_t v514 = (int32_t)v447 >= 0 ? v513 : 0; // 0x40f2d7\n            v1 = v514;\n            uint64_t v515 = v514 != 0 ? v514 : 1; // 0x40f2dd\n            if (v515 >= v451) {\n                // break -> 0x40e853\n                goto lab_0x40e853_11;\n            }\n            // 0x40f2ea\n            v477 = v515 + v20;\n            int64_t v516 = 0x100000000 * v450 >> 32; // 0x40f2ed\n            v475 = v449;\n            v467 = v448;\n            v471 = v516;\n            v452 = v446;\n            v456 = v445;\n            v458 = v444;\n            v460 = v443;\n            v463 = v477;\n            v465 = 0;\n            if (v23 == 0) {\n                goto lab_0x40f3b0;\n            } else {\n                int32_t v517 = v446; // 0x40f2fc\n                v474 = v449;\n                v470 = v516;\n                v454 = v446;\n                v455 = v445;\n                v464 = v23;\n                if (v517 == 0 && v514 >= 2) {\n                    // 0x40f307\n                    *v59 = v516;\n                    int64_t v518 = v513 - 1; // 0x40f30f\n                    v1 = v518;\n                    *v54 = v449;\n                    int64_t v519 = v518 + v23; // 0x40f318\n                    *v56 = v517;\n                    *v39 = (char)v445;\n                    int64_t * v520 = (int64_t *)v23;\n                    int32_t v521 = v1;\n                    if (v504 == 48) {\n                        // 0x40ff1f\n                        memset(v520, 48, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    } else {\n                        // 0x40f330\n                        memset(v520, 32, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    }\n                }\n                // 0x40f355\n                *(char *)v464 = *v41;\n                goto lab_0x40f365;\n            }\n        }\n    }\n  lab_0x40ec14:\n    // 0x40ec14\n    v472 = v3 - v20;\n    v476 = v522;\n    v473 = v523;\n    v468 = v170;\n    v469 = (int32_t)v523 >= 0 ? 0x100000000 * v523 >> 32 : 0;\n    v453 = v524;\n    v457 = v144;\n    v459 = v147;\n    v461 = v154;\n    v462 = v20;\n    v466 = v23;\n    goto lab_0x40ec26;\n  lab_0x40fe16:\n    // 0x40fe16\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v347 + 100 * v346;\n    v178 = 4;\n    v157 = v345;\n    v139 = 6;\n    v149 = v18;\n    goto lab_0x40ef3f;\n  lab_0x40fdf2:\n    // 0x40fdf2\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v348 + 0x2710 * v346 + 100 * v347;\n    v178 = 20;\n    v157 = v345;\n    v139 = 9;\n    v149 = v18;\n    goto lab_0x40ef3f;\n  lab_0x40f4b9:\n    // 0x40f4b9\n    v173 = v607;\n    v163 = v606;\n    v184 = -v609 & 0xffffffff;\n    v179 = v608;\n    v158 = v605;\n    v141 = v603;\n    v151 = v604;\n    goto lab_0x40f200;\n  lab_0x40f95c:;\n    int64_t v612 = 0x100000000 * v432 >> 32;\n    int64_t v613 = v429 >= 0 ? v612 : 0; // 0x40f972\n    uint64_t v614 = v613 != 0 ? v613 : 1; // 0x40f978\n    if (v3 - v20 <= v614) {\n        // break -> 0x40e853\n        goto lab_0x40e853_11;\n    }\n    int64_t v615 = v434;\n    int64_t v616 = v433;\n    int64_t v617 = v613; // 0x40f98b\n    int64_t v618 = v616; // 0x40f98b\n    int64_t v619 = v615; // 0x40f98b\n    int64_t v620 = 0; // 0x40f98b\n    if (v23 != 0) {\n        int64_t v621 = v430;\n        int32_t v622 = v616; // 0x40f98d\n        int64_t v623 = v621; // 0x40f990\n        int64_t v624 = v613; // 0x40f990\n        int64_t v625 = v616; // 0x40f990\n        int64_t v626 = v615; // 0x40f990\n        int64_t v627 = v23; // 0x40f990\n        if (v622 == 0 && v613 >= 2) {\n            // 0x40f998\n            *v58 = (char)v621;\n            int64_t v628 = v612 - 1; // 0x40f9a7\n            *v54 = v613;\n            v1 = v628;\n            *v56 = v622;\n            *v39 = (char)v615;\n            *v44 = v628;\n            memset((int64_t *)v23, 32, (int32_t)v628);\n            v624 = *v54;\n            v623 = (int64_t)*v58;\n            v625 = (int64_t)*v56;\n            v626 = (int64_t)*v39;\n            v627 = *v44 + v23;\n        }\n        // 0x40f9e4\n        *(char *)v627 = (char)v623;\n        v617 = v624;\n        v618 = v625;\n        v619 = v626;\n        v620 = v627 + 1;\n    }\n    int64_t v629 = v614 + v20; // 0x40f9ef\n    v472 = v3 - v629;\n    v476 = v40 - v435;\n    v473 = v432;\n    v468 = v431;\n    v469 = v617;\n    v453 = v618;\n    v457 = v619;\n    v459 = 45;\n    v461 = v435;\n    v462 = v629;\n    v466 = v620;\n    goto lab_0x40ec26;\n  lab_0x40ec26:;\n    uint64_t v525 = v469;\n    uint64_t v526 = v476;\n    int64_t v527 = v526 >= v525 ? v526 : v525; // 0x40ec2c\n    if (v527 >= v472) {\n        // break -> 0x40e853\n        goto lab_0x40e853_11;\n    }\n    int64_t v528 = v466;\n    int64_t v529 = v462;\n    int64_t v530 = v468;\n    v392 = v527;\n    v391 = v530;\n    v388 = v529;\n    v390 = 0;\n    if (v528 == 0) {\n        goto lab_0x40eae6;\n    } else {\n        int64_t v531 = v457;\n        int64_t v532 = v526; // 0x40ec45\n        int64_t v533 = v530; // 0x40ec45\n        int64_t v534 = v531; // 0x40ec45\n        int64_t v535 = v528; // 0x40ec45\n        if (v526 < v525 == (int32_t)v453 == 0) {\n            // 0x40ec4c\n            *v55 = v526;\n            int64_t v536 = (0x100000000 * v473 >> 32) - v526; // 0x40ec54\n            v1 = v536;\n            *v53 = v530;\n            *v41 = (char)v531;\n            if ((int32_t)v459 == 48) {\n                // 0x40fb97\n                int64_t * v537; // 0x40e7a0\n                int32_t v538; // 0x40e7a0\n                memset(v537, 48, v538);\n                unsigned char v539 = *v41; // 0x40fba7\n                int64_t v540 = *v53; // 0x40fbad\n                int64_t v541 = *v55; // 0x40fbb2\n                v532 = v541;\n                v533 = v540;\n                v534 = v539;\n                int64_t v542; // 0x40ec5c\n                v535 = v542;\n            } else {\n                // 0x40ec6f\n                memset((int64_t *)v528, 32, (int32_t)v1);\n                v532 = *v55;\n                v533 = *v53;\n                v534 = (int64_t)*v41;\n                v535 = v528 + v536;\n            }\n        }\n        // 0x40ec8f\n        *v53 = v533;\n        v1 = v532;\n        *v44 = v532;\n        v393 = v527;\n        v396 = v461;\n        v395 = v535;\n        v385 = v534;\n        v386 = v529;\n        goto lab_0x40eacb;\n    }\n  lab_0x40eae6:\n    // 0x40eae6\n    v8 = v12;\n    v9 = v13;\n    v25 = v391;\n    v21 = v388 + v392;\n    v24 = v390;\n    goto lab_0x40e82e;\n  lab_0x40fb13:;\n    int64_t v543 = v509;\n    int64_t v544 = 0x100000000 * v543 >> 32; // 0x40fb13\n    if (v544 >= v506) {\n        // break -> 0x40e853\n        goto lab_0x40e853_11;\n    }\n    int64_t v545 = v512;\n    int64_t v546 = v511;\n    int64_t v547 = v510;\n    int64_t v548 = v508;\n    int64_t v549 = v507;\n    char v550 = v505; // 0x40fb22\n    int64_t v551 = v543 & 0xffffffff; // 0x40fb22\n    int64_t v552 = v547; // 0x40fb22\n    int64_t v553 = v546; // 0x40fb22\n    int64_t v554 = 0; // 0x40fb22\n    if (v23 != 0) {\n        // 0x40fb24\n        v1 = v544;\n        *v60 = (int32_t)v543;\n        *v56 = (int32_t)v547;\n        *v39 = (char)v546;\n        memset((int64_t *)v23, 32, (int32_t)v544);\n        v550 = *v41;\n        v551 = (int64_t)*v60;\n        v552 = (int64_t)*v56;\n        v553 = (int64_t)*v39;\n        v554 = v544 + v23;\n    }\n    int64_t v555 = v554;\n    int64_t v556 = v553;\n    int64_t v557 = v552;\n    int64_t v558 = v551;\n    char v559 = v550; // 0x40fb70\n    int64_t v560 = v544 + v20; // 0x40fb58\n    int32_t v561 = v558; // 0x40fb5e\n    int32_t v562 = v561 - (int32_t)v548; // 0x40fb5e\n    int64_t v563 = v562 < 0 == ((v562 ^ v561) & (int32_t)(v558 ^ v548)) < 0 ? 0 : v548 - v558 & 0xffffffff; // 0x40fb66\n    int64_t v564 = v3 - v560; // 0x40fb6d\n    int64_t v565 = 0x100000000 * v563 >> 32;\n    if (v559 != 0) {\n        int64_t v566 = v563 != 0 ? v565 : 1; // 0x40fc0b\n        if (v566 >= v564) {\n            // break -> 0x40e853\n            goto lab_0x40e853_11;\n        }\n        int64_t v567 = v566; // 0x40fc1b\n        int64_t v568 = v565; // 0x40fc1b\n        int64_t v569 = v557; // 0x40fc1b\n        int64_t v570 = v556; // 0x40fc1b\n        int64_t v571 = 0; // 0x40fc1b\n        if (v555 != 0) {\n            int32_t v572 = v557; // 0x40fc1d\n            char v573 = v559; // 0x40fc20\n            int64_t v574 = v566; // 0x40fc20\n            int64_t v575 = v565; // 0x40fc20\n            int64_t v576 = v557; // 0x40fc20\n            int64_t v577 = v556; // 0x40fc20\n            int64_t v578 = v555; // 0x40fc20\n            if (v572 == 0 && v565 >= 2) {\n                int64_t v579 = v565 - 1; // 0x40fc28\n                *v59 = v566;\n                v1 = v579;\n                *v60 = v572;\n                *v43 = (char)v556;\n                *v53 = v565;\n                memset((int64_t *)v555, 32, (int32_t)v579);\n                v574 = *v59;\n                v575 = *v53;\n                v573 = *v41;\n                v576 = (int64_t)*v60;\n                v577 = (int64_t)*v43;\n                v578 = v579 + v555;\n            }\n            // 0x40fc68\n            v568 = v575;\n            v567 = v574;\n            *(char *)v578 = v573;\n            v569 = v576;\n            v570 = v577;\n            v571 = v578 + 1;\n        }\n        int64_t v580 = v567 + v560; // 0x40fc79\n        v472 = v3 - v580;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v568;\n        v453 = v569;\n        v457 = v570;\n        v459 = 95;\n        v461 = v545;\n        v462 = v580;\n        v466 = v571;\n    } else {\n        // 0x40fb7b\n        v472 = v564;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v565;\n        v453 = v557;\n        v457 = v556;\n        v459 = 95;\n        v461 = v545;\n        v462 = v560;\n        v466 = v555;\n    }\n    goto lab_0x40ec26;\n  lab_0x40eacb:;\n    int64_t v581 = v386;\n    int64_t v582 = v395;\n    int64_t v583 = v396;\n    int64_t v584 = v393;\n    if ((char)v385 == 0) {\n        // 0x40f930\n        memcpy((int64_t *)v582, (int64_t *)v583, (int32_t)v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    } else {\n        // 0x40ead4\n        function_40e750(v582, v583, v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    }\n    goto lab_0x40eae3;\n  lab_0x40f3b0:;\n    int64_t v585 = v463 + v471; // 0x40f3b4\n    v472 = v3 - v585;\n    v476 = v475;\n    v473 = 0;\n    v468 = v467;\n    v469 = 0;\n    v453 = v452;\n    v457 = v456;\n    v459 = v458;\n    v461 = v460;\n    v462 = v585;\n    v466 = v465;\n    goto lab_0x40ec26;\n  lab_0x40f365:;\n    int64_t v586 = v464 + 1;\n    int64_t v587 = v477;\n    int64_t v588 = v443;\n    int64_t v589 = v444;\n    int64_t v590 = v455;\n    int64_t v591 = v454;\n    int64_t v592 = v470;\n    int64_t v593 = v448;\n    int64_t v594 = v474;\n    v475 = v594;\n    v467 = v593;\n    v471 = v592;\n    v452 = v591;\n    v456 = v590;\n    v458 = v589;\n    v460 = v588;\n    v463 = v587;\n    v465 = 0;\n    if (v586 != 0) {\n        // 0x40f36a\n        v1 = v592;\n        *v59 = v594;\n        *v60 = (int32_t)v591;\n        *v55 = v593;\n        *v39 = (char)v590;\n        *v44 = v592;\n        memset((int64_t *)v586, 48, (int32_t)v592);\n        int64_t v595 = *v44; // 0x40f393\n        v475 = *v59;\n        v467 = *v55;\n        v471 = v595;\n        v452 = (int64_t)*v60;\n        v456 = (int64_t)*v39;\n        v458 = v589;\n        v460 = v588;\n        v463 = v587;\n        v465 = v595 + v586;\n    }\n    goto lab_0x40f3b0;\n  lab_0x40eae3:\n    // 0x40eae3\n    v392 = v394;\n    v391 = *v53;\n    v388 = v387;\n    v390 = *v44 + v389;\n    goto lab_0x40eae6;\n  lab_0x40e83b_2:\n    // 0x40e83b\n    if (v3 != 0 && v5 != 0) {\n        // 0x40e847\n        *(char *)v5 = 0;\n    }\n    // 0x40e853\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ff70",
            "funcStartAddr": "40ff70",
            "funcEndAddr": "40ff8f",
            "decompiledFuncCode": "int64_t function_40ff70(int64_t a1, int64_t a2, char * a3, int64_t a4, int32_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    char v1 = 0; // bp-9, 0x40ff74\n    int64_t result = function_40e7a0((int32_t)a1, a2, (int64_t)a3, a4, 0, (int64_t)&v1); // 0x40ff85\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ff90",
            "funcStartAddr": "40ff90",
            "funcEndAddr": "40ff94",
            "decompiledFuncCode": "int64_t function_40ff90(int64_t a1) {\n    // 0x40ff90\n    int64_t result; // 0x40ff90\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ffa0",
            "funcStartAddr": "40ffa0",
            "funcEndAddr": "411ab9",
            "decompiledFuncCode": "int64_t function_40ffa0(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x40ffa0\n    int64_t v1; // bp-1416, 0x40ffa0\n    int64_t v2; // bp-1656, 0x40ffa0\n    if ((int32_t)function_411ce0(a3, &v1, &v2) < 0) {\n        // 0x410610\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40ffab\n    int64_t v4; // bp-1384, 0x40ffa0\n    int64_t v5; // bp-1640, 0x40ffa0\n    int64_t v6; // 0x40ffa0\n    if ((int32_t)function_411ac0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x410ef7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x410f13\n            free((int64_t *)v6);\n        }\n        // 0x410f18\n        *__errno_location() = 22;\n        // 0x410610\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x41000b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x410013\n    uint64_t v9 = v8 + v6; // 0x410017\n    int64_t v10; // 0x40ffa0\n    char * v11; // 0x40ffa0\n    int64_t v12; // 0x40ffa0\n    if (v9 < v8) {\n        // 0x4106c0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4105c9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x4106c0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x4105c9;\n        } else {\n            uint64_t size = v9 + 6; // 0x410027\n            if (size < 4000) {\n                // 0x410170\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x40ffa0\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x410064;\n            } else {\n                if (size == -1) {\n                    // 0x4106c0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x4105c9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x410048\n                    if (mem == NULL) {\n                        // 0x4106c0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x4105c9;\n                    } else {\n                        // 0x41005d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x410064;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x410590_2:;\n    // 0x410590\n    int64_t v14; // 0x40ffa0\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x410598\n    int64_t v17 = v16; // 0x4105a6\n    int64_t v18 = v16; // 0x4105a6\n    int64_t v19 = v15; // 0x4105a6\n    int64_t v20; // 0x40ffa0\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x4107b8;\n    } else {\n        goto lab_0x4105b1;\n    }\n  lab_0x4105c9:\n    // 0x4105c9\n    if (v6 != (int64_t)&v4) {\n        // 0x4105e0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4105fc\n        free((int64_t *)v6);\n    }\n    // 0x410601\n    *(int32_t *)v10 = 12;\n    // 0x410610\n    return 0;\n  lab_0x410064:\n    // 0x410064\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x41009d\n    int64_t v23 = *v22; // 0x41009d\n    int64_t v24 = 0; // 0x4100a3\n    int64_t v25 = v20; // 0x4100a3\n    int64_t v26 = v21; // 0x4100a3\n    int64_t v27 = 0; // 0x4100a3\n    int64_t v28; // 0x40ffa0\n    int64_t v29; // 0x40ffa0\n    int64_t v30; // 0x40ffa0\n    int64_t v31; // 0x40ffa0\n    int64_t v32; // 0x40ffa0\n    int64_t v33; // 0x40ffa0\n    int64_t v34; // 0x40ffa0\n    if (v23 == a3) {\n        goto lab_0x4106b3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x4100a9\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x4100bb;\n    }\n  lab_0x4106b3:;\n    int64_t v36 = v24; // 0x4106b6\n    float80_t v37; // 0x40ffa0\n    float80_t v38 = v37; // 0x4106b6\n    float80_t v39; // 0x40ffa0\n    float80_t v40 = v39; // 0x4106b6\n    int64_t v41 = v25; // 0x4106b6\n    int64_t v42 = v26; // 0x4106b6\n    int64_t v43 = v27; // 0x4106b6\n    int64_t v44; // 0x40ffa0\n    int64_t v45 = v44; // 0x4106b6\n    goto lab_0x410218;\n  lab_0x410218:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x40ffa0\n    int64_t v51; // 0x40ffa0\n    int64_t v52; // 0x40ffa0\n    int64_t v53; // 0x40ffa0\n    int64_t v54; // 0x40ffa0\n    int64_t v55; // 0x40ffa0\n    int64_t v56; // 0x40ffa0\n    int64_t v57; // 0x40ffa0\n    int64_t dest_mem2; // 0x40ffa0\n    int64_t dest_mem3; // 0x40ffa0\n    int64_t v58; // 0x40ffa0\n    float80_t v59; // 0x40ffa0\n    float80_t v60; // 0x40ffa0\n    float80_t v61; // 0x40ffa0\n    float80_t v62; // 0x40ffa0\n    float80_t v63; // 0x40ffa0\n    uint64_t v64; // 0x411346\n    char * v65; // 0x41022c\n    char v66; // 0x41022c\n    int64_t v67; // 0x410254\n    uint32_t v68; // 0x410258\n    int64_t v69; // 0x410635\n    char v70; // 0x40ffa0\n    if (v1 == v49) {\n        // 0x411340\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x411aaa\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x4113a2;\n            } else {\n                goto lab_0x410590_2;\n            }\n        } else {\n            // 0x411350\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x4113a2;\n            } else {\n                if (v47 != 0) {\n                    // 0x41196d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x410590_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x411973\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x41136e;\n                        } else {\n                            goto lab_0x41197f;\n                        }\n                    }\n                } else {\n                    // 0x41135e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x41136e;\n                    } else {\n                        goto lab_0x41197f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x41022c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x410231\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x410e00\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x410590_2;\n                } else {\n                    goto lab_0x410692;\n                }\n            } else {\n                // 0x410642\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x410692;\n                } else {\n                    if (v47 != 0) {\n                        // 0x410f30\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x410590_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x410f36\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x410660;\n                            } else {\n                                goto lab_0x410f42;\n                            }\n                        }\n                    } else {\n                        // 0x410650\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x410660;\n                        } else {\n                            goto lab_0x410f42;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            // 0x410249\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g69 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x410bc0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x410697;\n                }\n                case 19: {\n                    // 0x410bb0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x410697;\n                }\n                case 20: {\n                    // 0x410b98\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x410697;\n                }\n                case 21: {\n                    goto lab_0x410780;\n                }\n                case 22: {\n                    goto lab_0x410780;\n                }\n                default: {\n                    // 0x41026a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x410710\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x41072d;\n                        } else {\n                            // 0x410717\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x4102a0;\n                            } else {\n                                goto lab_0x41072d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4102a0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4100bb:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x40ffa0\n    float80_t v77 = v76;\n    float80_t v78; // 0x40ffa0\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x40ffa0\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x4100be\n    int64_t v89 = v85; // 0x4100be\n    int64_t v90 = v84; // 0x4100be\n    float80_t v91 = v79; // 0x4100be\n    float80_t v92 = v77; // 0x4100be\n    int64_t v93 = v75; // 0x4100be\n    int64_t v94 = v80; // 0x4100be\n    int64_t v95 = v81; // 0x4100be\n    int64_t v96 = v82; // 0x4100be\n    int64_t v97 = v87; // 0x4100be\n    int64_t v98; // 0x40ffa0\n    int64_t v99; // 0x40ffa0\n    int64_t v100; // 0x40ffa0\n    int64_t v101; // 0x40ffa0\n    int64_t v102; // 0x40ffa0\n    if (v82 >= v87) {\n        goto lab_0x410209;\n    } else {\n        if (v82 != 0) {\n            // 0x4101a0\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x410590_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x4101a6\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x4101bb;\n                } else {\n                    goto lab_0x4101ae;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4100e4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x4101ce;\n                } else {\n                    goto lab_0x4100f0;\n                }\n            } else {\n                goto lab_0x4101ae;\n            }\n        }\n    }\n  lab_0x410209:\n    // 0x410209\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x410218;\n  lab_0x4113a2:\n    // 0x4113a2\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x4113aa\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x4113bb\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x4113c7\n    if (v12 != 0) {\n        // 0x4113d3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x4113f2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x41140e\n        free((int64_t *)v6);\n    }\n    // 0x411413\n    *a2 = v46;\n    // 0x410610\n    return result;\n  lab_0x410780:\n    // 0x410780\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x410697;\n  lab_0x4101ae:\n    // 0x4101ae\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        goto lab_0x4101bb;\n    }\n  lab_0x4107b8:\n    // 0x4107b8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x4105b1;\n  lab_0x4105b1:\n    if (v12 == 0) {\n        // 0x4106c0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4105c9;\n    } else {\n        // 0x4105c1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x4105c9;\n    }\n  lab_0x410692:\n    // 0x410692\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x410697;\n  lab_0x4102a0:;\n    int64_t v273 = (int64_t)v11; // 0x4102a0\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x4102a7\n    int64_t v275 = v273 + 1; // 0x4102ab\n    *v11 = 37;\n    int64_t v276 = v275; // 0x4102b4\n    if (v274 % 2 != 0) {\n        // 0x4102b6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x4102a7\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x4102c7\n    if ((v277 & 2) != 0) {\n        // 0x4102c9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4102d3\n    if ((v277 & 4) != 0) {\n        // 0x4102d5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4102df\n    if ((v277 & 8) != 0) {\n        // 0x4102e1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x4102eb\n    if ((v277 & 16) != 0) {\n        // 0x4102ed\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x4102f7\n    if ((v277 & 64) != 0) {\n        // 0x4102f9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x410303\n    if ((v277 & 32) != 0) {\n        // 0x410305\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x41030d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x410311\n    int64_t v293 = v290; // 0x410318\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x410327\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x41034a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x41034e\n    int64_t v298 = v295; // 0x410355\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x410364\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x41025a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x410390\n    int64_t v272; // 0x40ffa0\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x410399\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x410798;\n        } else {\n            if (v301 == 12) {\n                // 0x410f58\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x4103c0;\n            } else {\n                // 0x4103b0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x410790\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x410798;\n                } else {\n                    goto lab_0x4103c0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4103c0;\n    }\n  lab_0x410697:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x410697\n    int64_t v111 = v55 + 88; // 0x41069b\n    int64_t v112 = *(int64_t *)v111; // 0x41069f\n    int64_t v113 = v49 + 1; // 0x4106a2\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x4100a9\n        int64_t v115 = v114 + v105; // 0x4100af\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x4106d8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x410590_2;\n            } else {\n                goto lab_0x410209;\n            }\n        } else {\n            goto lab_0x4100bb;\n        }\n    } else {\n        goto lab_0x4106b3;\n    }\n  lab_0x4101bb:;\n    int64_t v116 = v80 == v20; // 0x4101c2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x4100f0;\n    } else {\n        goto lab_0x4101ce;\n    }\n  lab_0x4101ce:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x40ffa0\n    if (v102 != 0) {\n        goto lab_0x4100f0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4101ea\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x4107a5;\n        } else {\n            // 0x4101f8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x410209;\n        }\n    }\n  lab_0x4100f0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x410107\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x410590_2;\n    } else {\n        // 0x41012d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x410155\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x410209;\n    }\n  lab_0x41136e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x411934\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x410590_2;\n        } else {\n            // 0x411945\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x41195a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x4113a2;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x411391\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x4107a5;\n        } else {\n            // 0x41139f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x4113a2;\n        }\n    }\n  lab_0x41197f:\n    // 0x41197f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        goto lab_0x41136e;\n    }\n  lab_0x41072d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x41072d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x410731\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x410735\n    int64_t v123 = 0; // 0x41073c\n    int64_t v124 = v122; // 0x41073c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x410742\n        int64_t v126 = v120; // 0x41074a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x4116d1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x4116e9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x4116fb\n            int64_t v131 = v128; // 0x411704\n            int64_t v132 = v130; // 0x411704\n            int64_t v133; // 0x40ffa0\n            int64_t v134; // 0x411716\n            if (v130 < v129) {\n                // 0x411706\n                if (v121 == v128) {\n                    // break -> 0x410520\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x41050b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x410520\n                        goto lab_0x410520;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x4116c8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x4116d1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x411706\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x410520\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x41050b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x410520\n                            goto lab_0x410520;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x4116c8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x410754\n            if (*(int32_t *)v135 != 5) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x410760\n            int64_t v137 = v136; // 0x410760\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x41076d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x410520:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x410520\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x410524\n    int64_t v142; // 0x40ffa0\n    int64_t v143; // 0x40ffa0\n    int64_t v144; // 0x40ffa0\n    if (v140 == v141) {\n        goto lab_0x410bd0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x410531\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x411734\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x41173d\n            if (v141 == v146) {\n                goto lab_0x410bee;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x411763\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x41176a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x411783\n                int64_t v152 = v151; // 0x41178c\n                int64_t v153 = v149; // 0x41178c\n                int64_t v154; // 0x40ffa0\n                int64_t v155; // 0x411797\n                if (v151 < v150) {\n                    // 0x41178e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x410590_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x4117aa\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x410590_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x411750\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x411759\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x41178e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x410590_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x4117aa\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x410590_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x411750\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x41055c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x410543\n            if (*(int32_t *)v156 != 5) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x410550\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x410bd0;\n            } else {\n                goto lab_0x41055c;\n            }\n        }\n    }\n  lab_0x4103c0:\n    // 0x4103c0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x4103cd\n    int64_t v160 = 0; // 0x4103d5\n    if (v159 != -1) {\n        // 0x4103db\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x410ccc\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x4103fe\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x41040c\n        if (*(int32_t *)v162 != 5) {\n            // 0x410ccc\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x41041f\n        int64_t v164; // bp-8, 0x40ffa0\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x40ffa0\n    uint64_t v165; // 0x410436\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x410e68\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x410494\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x410590_2;\n    } else {\n        // 0x410440\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x410494\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x410b70\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x410590_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x410b76\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x410462;\n                } else {\n                    goto lab_0x410b82;\n                }\n            }\n        } else {\n            // 0x410452\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x410462;\n            } else {\n                goto lab_0x410b82;\n            }\n        }\n    }\n  lab_0x410660:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x410e89\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x410590_2;\n        } else {\n            // 0x410ea1\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x410eb2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x410692;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x410681\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x4107a5;\n        } else {\n            // 0x41068f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x410692;\n        }\n    }\n  lab_0x410f42:\n    // 0x410f42\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        goto lab_0x410660;\n    }\n  lab_0x410bd0:\n    // 0x410bd0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x410bee;\n  lab_0x410798:\n    // 0x410798\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x4103c0;\n  lab_0x4107a5:\n    // 0x4107a5\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x4107b8;\n  lab_0x410bee:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x410bf4\n    v14 = v48;\n    int64_t v170; // 0x40ffa0\n    int64_t v171; // 0x40ffa0\n    int64_t * v172; // 0x40ffa0\n    int64_t v173; // 0x40ffa0\n    int64_t v174; // bp-760, 0x40ffa0\n    uint64_t size5; // 0x410bf8\n    if (v169 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        // 0x410c09\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x410c69;\n        } else {\n            // 0x410c15\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x410590_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x410c3d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x410590_2;\n                } else {\n                    goto lab_0x410c69;\n                }\n            }\n        }\n    }\n  lab_0x41055c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x410bee;\n    } else {\n        // 0x410565\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x410bee;\n        } else {\n            goto lab_0x410590_2;\n        }\n    }\n  lab_0x410462:\n    // 0x410462\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x410e29\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x410e44\n            if (v48 == v20 && v46 != 0) {\n                // 0x410e52\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x410494\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x410483\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x410494\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x410590_2;\n  lab_0x410b82:\n    // 0x410b82\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        goto lab_0x410462;\n    }\n  lab_0x410c69:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x40ffa0\n    int64_t v181; // 0x40ffa0\n    int64_t v182; // 0x40ffa0\n    int64_t v183; // 0x40ffa0\n    int64_t v184; // 0x40ffa0\n    int64_t v185; // 0x40ffa0\n    int64_t v186; // 0x40ffa0\n    int64_t v187; // 0x40ffa0\n    int64_t v188; // 0x40ffa0\n    int64_t v189; // 0x40ffa0\n    int64_t v190; // 0x40ffa0\n    int64_t v191; // 0x40ffa0\n    int64_t v192; // 0x40ffa0\n    int64_t v193; // 0x40ffa0\n    float80_t v194; // 0x40ffa0\n    float80_t v195; // 0x40ffa0\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x4117e2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x4117f0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x41191d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x411129;\n    } else {\n        // 0x410c71\n        int64_t v198; // 0x40ffa0\n        float80_t v199; // 0x40ffa0\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x411431\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x41143e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x41129a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x410c9f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x410ca8\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x410ccc\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x411816\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x411816\n                            v181 = v187 + 3;\n                            goto lab_0x411991;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x411991;\n                            } else {\n                                goto lab_0x411852;\n                            }\n                        }\n                    } else {\n                        // 0x411523\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x411117;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x411531\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x411a7a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x411578\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x41158b\n                                int64_t v207 = v176 & 0xffffffff; // 0x41158e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x41159c\n                                int64_t v209 = v187 + 1; // 0x4115b9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x4115ce\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x4115db\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x411129;\n                        }\n                    }\n                } else {\n                    // 0x4112c8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x4112c8\n                        v180 = v187 + 1;\n                        goto lab_0x411877;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x411877;\n                        } else {\n                            goto lab_0x4112e8;\n                        }\n                    }\n                }\n            } else {\n                // 0x411100\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x411117;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x41164c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x41165d\n                    char v215 = *v213; // 0x411664\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x4116a0\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x4116ad\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x411675\n                        v182 = v218;\n                        int64_t v219; // 0x411667\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x411129;\n                }\n            }\n        } else {\n            float80_t v220; // 0x40ffa0\n            if (v220 != 0.0L) {\n                // 0x410ccc\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x41131b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x41132a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x411603\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x411129;\n        }\n    }\n  lab_0x411129:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x41112c\n    int64_t v229 = v228; // 0x411132\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x411134\n        int64_t v232 = v231 + v224; // 0x411137\n        int64_t v233 = v232 - v225; // 0x41113e\n        if ((v230 & 2) != 0) {\n            // 0x4115e3\n            v229 = v233;\n            int64_t v234 = v224; // 0x4115e6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x4115f0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x4115f0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x411455\n                int64_t v238 = v224; // 0x41145b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x411469\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x411460\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x411475\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x411488\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x411161\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x411181\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x411178\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x41118a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x411198\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x410ccc\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x4111c8\n    int64_t dest_mem5 = v48; // 0x4111d5\n    int64_t v250 = v248; // 0x4111d5\n    int64_t v251 = v47; // 0x4111d5\n    int64_t v252; // 0x40ffa0\n    if (v47 - v46 > v248) {\n        goto lab_0x411250;\n    } else {\n        if (v249 < v46) {\n            // 0x411422\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x410590_2;\n            } else {\n                goto lab_0x411250;\n            }\n        } else {\n            // 0x4111e0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x411250;\n            } else {\n                if (v47 != 0) {\n                    // 0x4117b8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x410590_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x4117be\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x4111fe;\n                        } else {\n                            goto lab_0x4117ca;\n                        }\n                    }\n                } else {\n                    // 0x4111ee\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x4111fe;\n                    } else {\n                        goto lab_0x4117ca;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x411250:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x411261\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x41127d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x410697;\n  lab_0x411117:\n    // 0x411117\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x411129;\n  lab_0x411877:;\n    char * v257 = nl_langinfo(0x10000); // 0x4118aa\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x4118bb\n    char v259 = *v257; // 0x4118c2\n    int64_t v260 = v176 & 0xffffffff; // 0x4118c5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x4118d3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x411900\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x41190d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x4112e8;\n  lab_0x4112e8:\n    // 0x4112e8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x411129;\n  lab_0x4111fe:\n    // 0x4111fe\n    if (v48 == 0 || v48 == v20) {\n        // 0x41149b\n        int64_t size7; // 0x40ffa0\n        int64_t * mem12 = malloc((int32_t)size7); // 0x4114b2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x410590_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x4114be\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x4114e9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x411250;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x41122d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x410590_2;\n        } else {\n            // 0x41123b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x411250;\n        }\n    }\n  lab_0x4117ca:\n    // 0x4117ca\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x410590_2;\n    } else {\n        goto lab_0x4111fe;\n    }\n  lab_0x411991:;\n    int64_t v265 = v187 + 4; // 0x411991\n    char v266 = *nl_langinfo(0x10000); // 0x4119dc\n    int64_t v267 = v176 & 0xffffffff; // 0x4119df\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x4119e6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x411a0d\n        int64_t v270 = v265 + 1; // 0x411a15\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x411852;\n  lab_0x411852:\n    // 0x411852\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x411129;\n}\n"
        },
        {
            "funcName": "function_411ac0",
            "funcStartAddr": "411ac0",
            "funcEndAddr": "411cd9",
            "decompiledFuncCode": "int64_t function_411ac0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x411b23\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x411ad8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x411ae9\n    g70 = v5;\n    int64_t v6; // 0x411ac0\n    int64_t v7; // 0x411ac0\n    int64_t v8; // 0x411ac0\n    int64_t v9; // 0x411ac0\n    int64_t v10; // 0x411ac0\n    int64_t v11; // 0x411ac0\n    int64_t v12; // 0x411ac0\n    uint32_t v13; // 0x411be0\n    int64_t * v14; // 0x411c10\n    int64_t v15; // 0x411c18\n    uint32_t v16; // 0x411c60\n    uint32_t v17; // 0x411c30\n    int64_t * v18; // 0x411bc0\n    int64_t v19; // 0x411bc0\n    int64_t * v20; // 0x411bd0\n    int64_t v21; // 0x411bd0\n    int64_t * v22; // 0x411ba8\n    int64_t v23; // 0x411ba8\n    int64_t * v24; // 0x411b90\n    int64_t v25; // 0x411b90\n    int64_t * v26; // 0x411cb0\n    uint32_t v27; // 0x411b70\n    int64_t v28; // 0x411cb0\n    int64_t * v29; // 0x411ca0\n    int64_t v30; // 0x411ca0\n    uint32_t v31; // 0x411b50\n    int64_t * v32; // 0x411cc8\n    int64_t v33; // 0x411cc8\n    int64_t v34; // 0x411c73\n    uint32_t v35; // 0x411b30\n    int64_t v36; // 0x411c47\n    uint32_t v37; // 0x411af8\n    int32_t * v38; // 0x411be0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x411b70\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x411b77\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x411bc0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x411b83\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x411b16\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x411b50\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x411b57\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x411bd0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x411b63\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x411b16\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x411b30\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x411b37\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x411ba8\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x411b43\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x411b16\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x411af8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x411b03\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x411b90\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x411b0f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x411b16\n            break;\n        }\n        case 11: {\n            // 0x411be0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x411bef\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x411cb0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x411bfc\n            *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x411b16\n            break;\n        }\n        case 12: {\n            // 0x411c10\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x411b16\n            break;\n        }\n        case 15: {\n            // 0x411c60\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x411c67\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x411ca0\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x411c73\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x411b16\n            break;\n        }\n        case 16: {\n            // 0x411c30\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x411c3b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x411cc8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x411c47\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x411b16\n            break;\n        }\n        default: {\n            // 0x411b23\n            return 0xffffffff;\n        }\n    }\n    // 0x411b16\n    v3++;\n    int64_t v39 = v4 + 32; // 0x411b21\n    while (v3 < v2) {\n        // 0x411ae0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g70 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x411b70\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x411b77\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x411bc0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x411b83\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x411b16\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x411b50\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x411b57\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x411bd0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x411b63\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x411b16\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x411b30\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x411b37\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x411ba8\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x411b43\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x411b16\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x411af8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x411b03\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x411b90\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x411b0f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x411b16\n                break;\n            }\n            case 11: {\n                // 0x411be0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x411bef\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x411cb0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x411bfc\n                *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x411b16\n                break;\n            }\n            case 12: {\n                // 0x411c10\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x411b16\n                break;\n            }\n            case 15: {\n                // 0x411c60\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x411c67\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x411ca0\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x411c73\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x411b16\n                break;\n            }\n            case 16: {\n                // 0x411c30\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x411c3b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x411cc8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x411c47\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x411b16\n                break;\n            }\n            default: {\n                // 0x411b23\n                return 0xffffffff;\n            }\n        }\n        // 0x411b16\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x411b23\n    return 0;\n}\n"
        },
        {
            "funcName": "function_411ce0",
            "funcStartAddr": "411ce0",
            "funcEndAddr": "4129e9",
            "decompiledFuncCode": "int64_t function_411ce0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x411ce2\n    int64_t v4 = v1 + 16; // 0x411ce6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x411d19\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x411d2e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x411d5b\n    int32_t v8 = 0; // 0x411d60\n    int64_t v9 = 0; // 0x411d60\n    int64_t v10 = v3; // 0x411d60\n    int64_t v11 = a1; // 0x411d60\n    int64_t v12 = 0; // 0x411d60\n    char v13; // 0x411ce0\n    int64_t v14; // 0x411ce0\n    int64_t v15; // 0x411ce0\n    int64_t v16; // 0x411ce0\n    int64_t v17; // 0x411ce0\n    int64_t v18; // 0x411ce0\n    int64_t v19; // 0x411ce0\n    int64_t v20; // 0x411ce0\n    int64_t v21; // 0x411ce0\n    int64_t v22; // 0x411ce0\n    int64_t v23; // 0x411ce0\n    int64_t v24; // 0x411ce0\n    int64_t v25; // 0x411ce0\n    int64_t v26; // 0x411ce0\n    int64_t v27; // 0x411ce0\n    int64_t v28; // 0x411ce0\n    int64_t v29; // 0x411ce0\n    int64_t v30; // 0x411ce0\n    int32_t v31; // 0x411ce0\n    int64_t v32; // 0x411ce0\n    int64_t v33; // 0x411d50\n    int64_t v34; // 0x411da0\n    int64_t * v35; // 0x411dc3\n    int64_t v36; // 0x411e26\n    if (v7 != 0) {\n        // 0x411d50\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x411ce0\n        int64_t v38 = 7; // 0x411ce0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x411ce0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x411d50:\n            // 0x411d50\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x411d93\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x411da8\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x411de4\n                int64_t v43 = v42; // 0x411de4\n                int64_t v44 = v43; // 0x411ded\n                int64_t v45 = v33; // 0x411ded\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x412180\n                    char v47 = *(char *)v46; // 0x412184\n                    int64_t v48 = v46; // 0x41218d\n                    while (v47 < 58) {\n                        // 0x412180\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x41218f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x412825\n                        char v52 = *(char *)v51; // 0x412825\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x412829\n                        int64_t v54 = v33; // 0x41283d\n                        int64_t v55 = v51; // 0x41283d\n                        char v56 = v52; // 0x41283d\n                        int64_t v57 = v53; // 0x41283d\n                        bool v58 = v52 < 58; // 0x41283d\n                        bool v59 = v52 < 58; // 0x41283d\n                        char v60 = v52; // 0x41283d\n                        int64_t v61 = v51; // 0x41283d\n                        int64_t v62; // 0x412852\n                        int64_t v63; // 0x412825\n                        char v64; // 0x412825\n                        int64_t v65; // 0x412829\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x4124a8_9;\n                            }\n                            // 0x412823\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x41283f\n                                if (v64 >= 58) {\n                                    goto lab_0x4124a8_9;\n                                }\n                                // 0x412823\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x4127f8\n                        while (v58) {\n                            // 0x4127fe\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x4124a8_9;\n                                }\n                                // 0x412823\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x41283f\n                                    if (v64 >= 58) {\n                                        goto lab_0x4124a8_9;\n                                    }\n                                    // 0x412823\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x4127f4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x4128fd\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x4124a8_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x41290e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x411ce0\n                v36 = v45;\n                char v70; // 0x411ce0\n                while (true) {\n                    // 0x411e26\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x411e40\n                                *v41 = *v41 | 2;\n                                // break -> 0x411e20\n                                break;\n                            }\n                            case 43: {\n                                // 0x411e50\n                                *v41 = *v41 | 4;\n                                // break -> 0x411e20\n                                break;\n                            }\n                            case 32: {\n                                // 0x411e60\n                                *v41 = *v41 | 8;\n                                // break -> 0x411e20\n                                break;\n                            }\n                            case 35: {\n                                // 0x411e70\n                                *v41 = *v41 | 16;\n                                // break -> 0x411e20\n                                break;\n                            }\n                            case 48: {\n                                // 0x411e80\n                                *v41 = *v41 | 32;\n                                // break -> 0x411e20\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x411e88\n                                    break;\n                                }\n                                // 0x411e16\n                                *v41 = *v41 | 64;\n                                // break -> 0x411e20\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x411e2f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x411e20\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x411ce0\n                int64_t * v72; // 0x411db1\n                int64_t * v73; // 0x411dba\n                if (v70 == 42) {\n                    // 0x411efd\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x411f1d\n                    int64_t v75 = v74; // 0x411f1d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x411f21\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x411f27\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x4122fd\n                        char v80 = *(char *)v79; // 0x412301\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x4122fd\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x41230d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x412311\n                        int64_t v82 = v36; // 0x412311\n                        int64_t v83 = 0; // 0x412311\n                        if (v80 != 36) {\n                            goto lab_0x411f2d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x412342\n                            int64_t v89 = v85; // 0x412342\n                            int64_t v90 = v87; // 0x412342\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x412347\n                            int64_t v95 = v92 + 1; // 0x41234a\n                            char v96 = *(char *)v95; // 0x41234a\n                            int64_t v97 = v96; // 0x41234a\n                            while (v94 < v91) {\n                                // 0x412361\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x4124a8_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x41231b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x412324\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x412361\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x4124a8_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x41231b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x41299b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x4124a8_9;\n                            }\n                            // 0x4129a9\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x411f3c;\n                        }\n                    } else {\n                        goto lab_0x411f2d;\n                    }\n                } else {\n                    // 0x411e8d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x411ce0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x4125ab\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x4125b0\n                        int64_t v102 = v71; // 0x4125b9\n                        char * v103 = v100; // 0x4125b9\n                        int64_t v104 = v36; // 0x4125b9\n                        int64_t v105 = v71; // 0x4125b9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x4125c3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x4125c3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x4125c3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x4125d2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x4125f5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x411e98;\n                }\n            } else {\n                goto lab_0x411d58;\n            }\n        }\n    }\n  lab_0x411d62:\n    // 0x411d62\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x411d84\n    return 0;\n  lab_0x4124a8_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x4124b3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x4124c5\n    if (v3 != v115) {\n        // 0x4124d0\n        free((int64_t *)v115);\n    }\n    // 0x4124d5\n    *__errno_location() = 22;\n    // 0x411d84\n    return 0xffffffff;\n  lab_0x412680_5:;\n    // 0x412680\n    int64_t v116; // 0x411ce0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x412685\n    int64_t v119; // 0x411ce0\n    if (v4 == v117) {\n        goto lab_0x412699_3;\n    } else {\n        // 0x412687\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x412699_3;\n    }\n  lab_0x412699_3:;\n    int64_t v120 = *v5; // 0x412699\n    int32_t * v121; // 0x4126a9\n    if (v3 == v120) {\n        // 0x4126a9\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x4126a4\n    free((int64_t *)v120);\n    // 0x4126a9\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x411d58:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x411d5b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x411d62\n        goto lab_0x411d62;\n    }\n    goto lab_0x411d50;\n  lab_0x411f2d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x411f2d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x4122d3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x4124a8_9;\n        }\n        // 0x4122eb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x411f3c;\n  lab_0x411e98:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x411e9b\n    int64_t v147 = v339; // 0x411e9b\n    int64_t v145 = v338; // 0x411e9b\n    int64_t v143 = v337; // 0x411e9b\n    int64_t v186; // 0x411ce0\n    int64_t v190; // 0x411ce0\n    int64_t v189; // 0x411ce0\n    int64_t v188; // 0x411ce0\n    int64_t v187; // 0x411ce0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x411fa0;\n    } else {\n        goto lab_0x411ea1;\n    }\n  lab_0x411f3c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x411f3c\n    int64_t v132 = v128; // 0x411f43\n    int64_t v133 = v16; // 0x411f43\n    int64_t v134 = v131; // 0x411f43\n    int64_t v135; // 0x411ce0\n    int64_t v136; // 0x411ce0\n    int64_t v137; // 0x411ce0\n    int64_t v138; // 0x4121ef\n    if (v16 > v127) {\n        goto lab_0x411f4c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x4121e5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x412680_5;\n        }\n        int64_t size = 32 * v138; // 0x41220e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x41276c\n            if (mem == NULL) {\n                goto lab_0x412699_3;\n            }\n            // 0x41278e\n            v135 = (int64_t)mem;\n            goto lab_0x412799;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x41222f\n            int64_t v140 = *v6; // 0x412234\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x412680_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x41222f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x412799;\n            } else {\n                goto lab_0x41226d;\n            }\n        }\n    }\n  lab_0x411ea1:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x411ea8\n    int64_t v151 = v146; // 0x411ea8\n    int64_t v152 = v144; // 0x411ea8\n    uint64_t v153; // 0x411ce0\n    int64_t v154; // 0x411ce0\n    int64_t v155; // 0x411ee7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x411eeb\n        int64_t v158; // 0x411ce0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x412050\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x411ee3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x412058\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x411ee0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x411ee3\n                    break;\n                }\n            }\n        } else {\n            // 0x411ef0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x411ee3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x412058\n    int64_t v162 = v161 % 256; // 0x412064\n    g71 = v162;\n    int64_t v163 = 17; // 0x412067\n    int64_t v164 = v154; // 0x412067\n    int64_t v165 = v154; // 0x412067\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x4120d1;\n        }\n        case 28: {\n            goto lab_0x412422;\n        }\n        case 30: {\n            // 0x41244e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x412079;\n        }\n        case 32: {\n            goto lab_0x412422;\n        }\n        case 33: {\n            goto lab_0x412422;\n        }\n        case 34: {\n            goto lab_0x412422;\n        }\n        case 46: {\n            // 0x41243f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x412079;\n        }\n        case 51: {\n            goto lab_0x41245d;\n        }\n        case 60: {\n            goto lab_0x412422;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x412379\n            int32_t v167 = v166 - 7; // 0x412379\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x41237f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x412079;\n        }\n        case 63: {\n            goto lab_0x4123d0;\n        }\n        case 64: {\n            goto lab_0x412422;\n        }\n        case 65: {\n            goto lab_0x412422;\n        }\n        case 66: {\n            goto lab_0x412422;\n        }\n        case 68: {\n            goto lab_0x4123d0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x41238f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x412395\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x41239d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x4123ab\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x4123bf\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x412079;\n        }\n        case 74: {\n            goto lab_0x41245d;\n        }\n        case 75: {\n            goto lab_0x412079;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x412070\n            int32_t v172 = v171 - 7; // 0x412070\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x412076\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x412079;\n        }\n        case 80: {\n            goto lab_0x41245d;\n        }\n        case 83: {\n            goto lab_0x41245d;\n        }\n        default: {\n            goto lab_0x4124a8_9;\n        }\n    }\n  lab_0x411f4c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x411f63\n        int64_t v178 = v176; // 0x411ce0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x411f58\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x411f58\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x411f71\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x411f7d\n    int32_t v182 = *v181; // 0x411f7d\n    if (v182 != 0) {\n        // 0x4125fe\n        if (v182 != 5) {\n            goto lab_0x4124a8_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x412607\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x411e98;\n    } else {\n        // 0x411f87\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x411f8d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x411ea1;\n        } else {\n            goto lab_0x411fa0;\n        }\n    }\n  lab_0x411fa0:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x411fa0\n    char v197 = *v196; // 0x411fa0\n    int64_t * v198; // 0x411dc8\n    *v198 = v192;\n    int64_t v199; // 0x411ce0\n    int64_t v200; // 0x411ce0\n    int64_t v201; // 0x411ce0\n    int64_t v202; // 0x411ce0\n    int64_t v203; // 0x411ce0\n    int64_t * v204; // 0x411dd1\n    int64_t * v205; // 0x411dda\n    int64_t v206; // 0x411fb9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x4121a0\n        int64_t v208 = v193; // 0x4121a9\n        char * v209; // 0x411ce0\n        int64_t v210; // 0x411ce0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x4121b0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x4121b4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x4121b0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x4121be\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x4121a0\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x4121d1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x411ea1;\n    } else {\n        // 0x411faf\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x411fcf\n        int64_t v219 = v218; // 0x411fcf\n        int64_t v220 = v219 + 0xffffffd0; // 0x411fd3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x411fd9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x412884\n            char v224 = *(char *)v223; // 0x412888\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x412884\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x412894\n            v201 = v223;\n            int64_t v225 = v219; // 0x412898\n            int64_t v226 = v206; // 0x412898\n            int64_t v227 = 0; // 0x412898\n            if (v224 != 36) {\n                goto lab_0x411fdf;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x4128c9\n                int64_t v233 = v229; // 0x4128c9\n                int64_t v234 = v231; // 0x4128c9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x4128ce\n                int64_t v239 = v236 + 1; // 0x4128d5\n                char v240 = *(char *)v239; // 0x4128d9\n                int64_t v241 = v240; // 0x4128d9\n                while (v238 < v235) {\n                    // 0x4128e7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x4124a8_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x4128a2\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x4128ab\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x4128e7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x4124a8_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x4128a2\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x4129b7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x4124a8_9;\n                }\n                // 0x4129c5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x411fee;\n            }\n        } else {\n            goto lab_0x411fdf;\n        }\n    }\n  lab_0x4120d1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x4120d6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x4120de\n    *a2 = v245;\n    int64_t v246; // 0x411ce0\n    int64_t v247; // 0x411ce0\n    int64_t dest_mem; // 0x411ce0\n    int64_t v248; // 0x411ce0\n    int64_t v249; // 0x4129d3\n    if (v246 > v245) {\n        // 0x4120ea\n        goto lab_0x411d58;\n    } else {\n        if (v246 < 0) {\n            // 0x4129d3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x412680_5;\n        }\n        int64_t v250 = 2 * v246; // 0x412106\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x4129d3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x412680_5;\n        }\n        int64_t v251 = *v5; // 0x412117\n        int64_t size2 = 176 * v246; // 0x412129\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x412279\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x4127dc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x4126a9\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x412687\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x412699_3;\n            }\n            goto lab_0x412294;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x41213b\n            if (mem4 == NULL) {\n                // 0x4129d3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x412680_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x41213b\n            int64_t v254 = *v5; // 0x41215d\n            int64_t v255 = *a2; // 0x412161\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x412294;\n            } else {\n                goto lab_0x41216f;\n            }\n        }\n    }\n  lab_0x412422:\n    // 0x412422\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x412437\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x412079;\n  lab_0x41245d:;\n    uint32_t v335 = (int32_t)v153; // 0x412465\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x41246b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x412473\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x412481\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x41248e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x412079;\n  lab_0x4123d0:;\n    uint32_t v336 = (int32_t)v153; // 0x4123d8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x4123de\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4123e6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x4123f4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x412401\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x412079;\n  lab_0x412079:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x411ce0\n    int64_t v260; // 0x411ce0\n    int64_t * v261; // 0x411ddf\n    if (v259 == -1) {\n        // 0x412584\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x4124a8_9;\n        }\n        // 0x41259c\n        v260 = v148;\n    } else {\n        // 0x412083\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x412088\n    int64_t v264 = v258; // 0x41208f\n    int64_t v265 = v162; // 0x41208f\n    int64_t v266 = v263; // 0x41208f\n    int64_t v267; // 0x411ce0\n    int64_t v268; // 0x411ce0\n    int64_t v269; // 0x411ce0\n    int64_t v270; // 0x411ce0\n    int64_t v271; // 0x411ce0\n    if (v142 > v262) {\n        goto lab_0x412095;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x4124f8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x412502\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x412680_5;\n        }\n        int64_t size3 = 32 * v273; // 0x412521\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x412534\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x412619\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x412699_3;\n            }\n            goto lab_0x412636;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x412541\n            if (mem6 == NULL) {\n                // 0x4129d3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x412680_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x412541\n            int64_t v276 = v274 & 0xffffffff; // 0x412546\n            int64_t v277 = *v6; // 0x412571\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x412636;\n            } else {\n                goto lab_0x41257b;\n            }\n        }\n    }\n  lab_0x412095:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x4120ab\n        int64_t v282 = v279; // 0x411ce0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x4120a0\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x4120a0\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x4120b9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x4120c5\n    int32_t v286 = *v285; // 0x4120c5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x4124ea\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x4124a8_9;\n        }\n    } else {\n        // 0x4120cf\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x4120d1;\n  lab_0x412799:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x412799\n    int64_t * v290; // 0x411ce0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x41226d;\n  lab_0x41226d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x411f4c;\n  lab_0x411fdf:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x411fdf\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x41285a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x4124a8_9;\n        }\n        // 0x412872\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x411fee;\n  lab_0x411fee:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x411fee\n    int64_t v300 = v296; // 0x411ff5\n    int64_t v301 = v191; // 0x411ff5\n    int64_t v302 = v299; // 0x411ff5\n    int64_t v303; // 0x411ce0\n    int64_t v304; // 0x411ce0\n    int64_t v305; // 0x411ce0\n    int64_t v306; // 0x4126d2\n    if (v191 > v295) {\n        goto lab_0x411ffe;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x4126c8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x412680_5;\n        }\n        int64_t size4 = 32 * v306; // 0x4126ed\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x41291e\n            if (mem7 == NULL) {\n                goto lab_0x412699_3;\n            }\n            // 0x412940\n            v304 = (int64_t)mem7;\n            goto lab_0x41294b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x41270e\n            int64_t v308 = *v6; // 0x412713\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x412680_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x41270e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x41294b;\n            } else {\n                goto lab_0x41274c;\n            }\n        }\n    }\n  lab_0x412294:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x411ce0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x41216f;\n  lab_0x41216f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x411d58;\n  lab_0x412636:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x41264c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x41257b;\n  lab_0x41257b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x412095;\n  lab_0x411ffe:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x412013\n        int64_t v324 = v322; // 0x411ce0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x412008\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x412008\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x412021\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x41202e\n    int32_t v328 = *v327; // 0x41202e\n    if (v328 != 0) {\n        // 0x412755\n        if (v328 != 5) {\n            goto lab_0x4124a8_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x41275e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x412038\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x412041\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x411ea1;\n  lab_0x41294b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x41294b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x41274c;\n  lab_0x41274c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x411ffe;\n}\n"
        },
        {
            "funcName": "function_4129f0",
            "funcStartAddr": "4129f0",
            "funcEndAddr": "412a4d",
            "decompiledFuncCode": "int64_t function_4129f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4129f0\n    return function_4018d0();\n}\n"
        },
        {
            "funcName": "function_412a50",
            "funcStartAddr": "412a50",
            "funcEndAddr": "412a51",
            "decompiledFuncCode": "int64_t function_412a50(void) {\n    // 0x412a50\n    int64_t result; // 0x412a50\n    return result;\n}\n"
        },
        {
            "funcName": "function_412a60",
            "funcStartAddr": "412a60",
            "funcEndAddr": "412a78",
            "decompiledFuncCode": "int64_t function_412a60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x412a60\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g31);\n}\n"
        },
        {
            "funcName": "function_412a78",
            "funcStartAddr": "412a78",
            "funcEndAddr": "412a98",
            "decompiledFuncCode": "int64_t function_412a78(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g27; // 0x412a82\n    while (*(int64_t *)v1 != -1) {\n        // 0x412a83\n        v1 -= 8;\n    }\n    // 0x412a94\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_date.elf"
}