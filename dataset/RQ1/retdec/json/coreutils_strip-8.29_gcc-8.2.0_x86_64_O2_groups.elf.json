{
    "funcInfo": [
        {
            "funcName": "function_401800",
            "funcStartAddr": "401800",
            "funcEndAddr": "401805",
            "decompiledFuncCode": "int64_t function_401800(void) {\n    // 0x401800\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401805",
            "funcStartAddr": "401805",
            "funcEndAddr": "40180a",
            "decompiledFuncCode": "int64_t function_401805(void) {\n    // 0x401805\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40180a",
            "funcStartAddr": "40180a",
            "funcEndAddr": "40180f",
            "decompiledFuncCode": "int64_t function_40180a(void) {\n    // 0x40180a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40180f",
            "funcStartAddr": "40180f",
            "funcEndAddr": "401814",
            "decompiledFuncCode": "int64_t function_40180f(void) {\n    // 0x40180f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401814",
            "funcStartAddr": "401814",
            "funcEndAddr": "401819",
            "decompiledFuncCode": "int64_t function_401814(void) {\n    // 0x401814\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401819",
            "funcStartAddr": "401819",
            "funcEndAddr": "40181e",
            "decompiledFuncCode": "int64_t function_401819(void) {\n    // 0x401819\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401820",
            "funcStartAddr": "401820",
            "funcEndAddr": "401b0b",
            "decompiledFuncCode": "int64_t function_401820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401826\n    function_402250(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_405f50(0x402160, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2; // 0x401820\n    int64_t v3 = function_405440(v1, a2, (int64_t *)&g10, &g2, 0, v2); // 0x40187b\n    int32_t v4 = v3; // 0x401880\n    if (v4 != -1) {\n        if (v4 == -131) {\n            // 0x40188c\n            function_4042f0((int64_t)g29, \"groups\", \"GNU coreutils\", (int64_t)g17, \"David MacKenzie\", \"James Youngman\");\n            exit(0);\n            // UNREACHABLE\n        }\n        if (v4 == -130) {\n            // 0x401a74\n            function_401bf0(0);\n            // UNREACHABLE\n        }\n        // 0x4018cc\n        function_401bf0(1);\n        // UNREACHABLE\n    }\n    uint32_t v5 = *(int32_t *)0x60927c; // 0x4018d6\n    if (v5 != (int32_t)a1) {\n        int64_t v6 = v5; // 0x4018d6\n        if (v1 <= v6) {\n            // 0x401a55\n            return 0;\n        }\n        struct passwd * v7 = getpwnam((char *)*(int64_t *)((0x100000000 * v6 >> 29) + a2)); // 0x401989\n        int64_t v8; // 0x401820\n        int64_t v9; // 0x401989\n        int64_t v10; // 0x401911\n        int64_t v11; // 0x40191c\n        int64_t v12; // 0x401938\n        int64_t v13; // 0x40193c\n        int64_t v14; // 0x401941\n        int64_t v15; // 0x40194f\n        int64_t * v16; // 0x401952\n        uint64_t v17; // 0x401952\n        if (v7 != NULL) {\n            // 0x4018f8\n            v9 = (int64_t)v7;\n            v10 = *(int64_t *)(8 * (int64_t)g26 + a2);\n            __printf_chk(1, \"%s : \", (char *)v10);\n            v11 = (int64_t)*(int32_t *)(v9 + 20);\n            v12 = *(int64_t *)(8 * (int64_t)g26 + a2);\n            v13 = function_401f60(v12, (int64_t)*(int32_t *)(v9 + 16), v11, v11, 1, 32);\n            v14 = (int64_t)g29;\n            v15 = (char)v13 == 0 ? 0 : 1;\n            v16 = (int64_t *)(v14 + 40);\n            v17 = *v16;\n            if (v17 >= *(int64_t *)(v14 + 48)) {\n                // 0x401a65\n                __overflow(g29, 10);\n                v8 = v15;\n            } else {\n                // 0x401960\n                *v16 = v17 + 1;\n                *(char *)v17 = 10;\n                v8 = v15;\n            }\n        } else {\n            // 0x401997\n            function_403e70(*(int64_t *)(8 * (int64_t)g26 + a2));\n            error(0, (int32_t)\"%s: no such user\" ^ (int32_t)\"%s: no such user\", dcgettext(NULL, \"%s: no such user\", 5));\n            v8 = 0;\n        }\n        // 0x40196b\n        g26 = &g27;\n        int64_t v18 = &g27; // 0x40197d\n        int64_t v19 = v8; // 0x40197d\n        while (v1 > (int64_t)&g27) {\n            // 0x401983\n            v7 = getpwnam((char *)*(int64_t *)((0x100000000 * v18 >> 29) + a2));\n            if (v7 != NULL) {\n                // 0x4018f8\n                v9 = (int64_t)v7;\n                v10 = *(int64_t *)(8 * (int64_t)g26 + a2);\n                __printf_chk(1, \"%s : \", (char *)v10);\n                v11 = (int64_t)*(int32_t *)(v9 + 20);\n                v12 = *(int64_t *)(8 * (int64_t)g26 + a2);\n                v13 = function_401f60(v12, (int64_t)*(int32_t *)(v9 + 16), v11, v11, 1, 32);\n                v14 = (int64_t)g29;\n                v15 = (char)v13 == 0 ? 0 : v19 & 0xffffffff;\n                v16 = (int64_t *)(v14 + 40);\n                v17 = *v16;\n                if (v17 >= *(int64_t *)(v14 + 48)) {\n                    // 0x401a65\n                    __overflow(g29, 10);\n                    v8 = v15;\n                } else {\n                    // 0x401960\n                    *v16 = v17 + 1;\n                    *(char *)v17 = 10;\n                    v8 = v15;\n                }\n            } else {\n                // 0x401997\n                function_403e70(*(int64_t *)(8 * (int64_t)g26 + a2));\n                error(0, (int32_t)\"%s: no such user\" ^ (int32_t)\"%s: no such user\", dcgettext(NULL, \"%s: no such user\", 5));\n                v8 = 0;\n            }\n            // 0x40196b\n            g26 = &g27;\n            v18 = &g27;\n            v19 = v8;\n        }\n        // 0x401a55\n        return v8 % 256 ^ 1;\n    }\n    int32_t * err_num = __errno_location(); // 0x4019d0\n    *err_num = 0;\n    uint32_t v20 = getuid(); // 0x4019de\n    int64_t v21 = v20; // 0x4019e3\n    int64_t v22; // 0x401820\n    int64_t v23; // 0x401820\n    if (v20 == -1) {\n        // 0x401a7b\n        if (*err_num == 0) {\n            goto lab_0x4019ee;\n        } else {\n            // 0x401a84\n            error(1, *err_num, dcgettext(NULL, \"cannot get real UID\", 5));\n            v23 = &g49;\n            v22 = v1;\n            goto lab_0x401aa6;\n        }\n    } else {\n        goto lab_0x4019ee;\n    }\n  lab_0x4019ee:\n    // 0x4019ee\n    *err_num = 0;\n    uint32_t v24 = getegid(); // 0x4019f4\n    int64_t v25 = v24; // 0x4019ff\n    int64_t v26 = 0xffffffff; // 0x4019ff\n    if (v24 == -1) {\n        goto lab_0x401ad1;\n    } else {\n        goto lab_0x401a05;\n    }\n  lab_0x401ad1:\n    // 0x401ad1\n    v25 = v26;\n    int64_t v27; // 0x401820\n    int64_t v28; // 0x401820\n    if (*err_num == 0) {\n        goto lab_0x401a05;\n    } else {\n        // 0x401ada\n        error(1, *err_num, dcgettext(NULL, \"cannot get effective GID\", 5));\n        v27 = v21;\n        v28 = 1;\n        goto lab_0x401afc;\n    }\n  lab_0x401a05:\n    // 0x401a05\n    *err_num = 0;\n    int32_t v29 = getgid(); // 0x401a0b\n    int64_t v30 = v29; // 0x401a13\n    int64_t v31 = v25; // 0x401a13\n    v23 = -1;\n    v22 = v25;\n    if (v29 == -1) {\n        goto lab_0x401aa6;\n    } else {\n        goto lab_0x401a19;\n    }\n  lab_0x401aa6:\n    // 0x401aa6\n    v30 = v23;\n    v31 = v22;\n    if (*err_num == 0) {\n        goto lab_0x401a19;\n    } else {\n        // 0x401aaf\n        error(1, *err_num, dcgettext(NULL, \"cannot get real GID\", 5));\n        v26 = v22;\n        goto lab_0x401ad1;\n    }\n  lab_0x401a19:;\n    int64_t v32 = function_401f60(0, v21, v30 & 0xffffffff, v31 & 0xffffffff, 1, 32); // 0x401a2e\n    int64_t v33 = (int64_t)g29; // 0x401a33\n    int64_t v34 = v32 & 0xffffffff; // 0x401a3a\n    int64_t * v35 = (int64_t *)(v33 + 40); // 0x401a3c\n    uint64_t v36 = *v35; // 0x401a3c\n    v27 = v34;\n    v28 = v33;\n    if (v36 < *(int64_t *)(v33 + 48)) {\n        // 0x401a4a\n        *v35 = v36 + 1;\n        *(char *)v36 = 10;\n        // 0x401a55\n        return v34 % 256 ^ 1;\n    }\n    goto lab_0x401afc;\n  lab_0x401afc:\n    // 0x401afc\n    __overflow((struct _IO_FILE *)v28, 10);\n    // 0x401a55\n    return v27 % 256 ^ 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401b10",
            "funcEndAddr": "401b3b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401b10\n    int64_t v1; // 0x401b10\n    __libc_start_main(0x401820, (int32_t)a4, (char **)&v1, (void (*)())0x405ee0, (void (*)())0x405f40, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b3b",
            "funcStartAddr": "401b3b",
            "funcEndAddr": "401b5a",
            "decompiledFuncCode": "int64_t function_401b3b(void) {\n    // 0x401b3b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401b5a",
            "funcStartAddr": "401b5a",
            "funcEndAddr": "401b91",
            "decompiledFuncCode": "int64_t function_401b5a(void) {\n    // 0x401b5a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401b91",
            "funcStartAddr": "401b91",
            "funcEndAddr": "401be8",
            "decompiledFuncCode": "int64_t function_401b91(void) {\n    // 0x401b91\n    if (g32 != 0) {\n        // 0x401be7\n        int64_t result; // 0x401b91\n        return result;\n    }\n    int64_t v1 = g33; // 0x401bc4\n    int64_t result2; // 0x401bd6\n    if (g33 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401bd6\n        result2 = function_401b3b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401bc6\n        v1++;\n    }\n    // 0x401bba\n    g33 = v1;\n    // 0x401bd6\n    result2 = function_401b3b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401be8",
            "funcStartAddr": "401be8",
            "funcEndAddr": "401bed",
            "decompiledFuncCode": "int64_t function_401be8(void) {\n    // 0x401be8\n    return function_401b5a();\n}\n"
        },
        {
            "funcName": "function_401bf0",
            "funcStartAddr": "401bf0",
            "funcEndAddr": "401edd",
            "decompiledFuncCode": "int64_t function_401bf0(int64_t a1) {\n    int32_t status = a1; // 0x401c06\n    if (status != 0) {\n        // 0x401c0a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401c2f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401c36\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [USERNAME]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print group memberships for each USERNAME or, if no USERNAME is specified, for\\nthe current process (which may differ if the groups database has changed).\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x401cbd\n    bool v2; // 0x401bf0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401d40\n    int64_t v6 = *(int64_t *)v5; // 0x401d44\n    int64_t v7 = 7; // 0x401d4a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"groups\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401d56\n        char v11 = *(char *)v9; // 0x401d56\n        char v12 = v11; // 0x401d56\n        bool v13 = false; // 0x401d56\n        while (v10 == v11) {\n            // 0x401d4c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401d56\n            int64_t v15 = v8 + v3; // 0x401d56\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401d62\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x401d62\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401e74;\n        } else {\n            // 0x401e5e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401eb3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401dc4;\n            } else {\n                goto lab_0x401e74;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401dc4;\n        } else {\n            // 0x401daa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401eb3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401dc4;\n            } else {\n                goto lab_0x401dc4;\n            }\n        }\n    }\n  lab_0x401e74:\n    // 0x401e74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401e04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c2f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401dc4:\n    // 0x401dc4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401e04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c2f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "401f55",
            "decompiledFuncCode": "int64_t function_401ee0(int64_t gid, int64_t a2) {\n    int64_t v1 = 1; // 0x401ef0\n    if ((char)a2 != 0) {\n        struct group * v2 = getgrgid((int32_t)gid); // 0x401ef6\n        if (v2 != NULL) {\n            // 0x401f40\n            fputs_unlocked((char *)*(int64_t *)v2, g29);\n            return a2 & 0xffffffff & 0xffffffff;\n        }\n        // 0x401f08\n        error(0, (int32_t)\"cannot find name for group ID %lu\" ^ (int32_t)\"cannot find name for group ID %lu\", dcgettext(NULL, \"cannot find name for group ID %lu\", 5));\n        v1 = 0;\n    }\n    int64_t v3 = function_402200(gid & 0xffffffff, &g34); // 0x401f38\n    // 0x401f40\n    fputs_unlocked((char *)v3, g29);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_401f60",
            "funcStartAddr": "401f60",
            "funcEndAddr": "40213f",
            "decompiledFuncCode": "int64_t function_401f60(int64_t a1, int64_t uid, int64_t a3, int64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = a6; // 0x401f80\n    int64_t v2 = 1; // 0x401f80\n    int64_t v3; // 0x401f60\n    if (a1 != 0) {\n        // 0x401f86\n        v1 = a6 & 0xffffffff;\n        v2 = v3 & 0xffffff00 | (int64_t)(getpwuid((int32_t)uid) != NULL);\n    }\n    uint64_t v4 = a5 % 256; // 0x401fa1\n    int64_t v5 = (char)function_401ee0(a3 & 0xffffffff, v4) == 0 ? 0 : v2; // 0x401fbb\n    int32_t v6 = a3; // 0x401fbf\n    int32_t v7 = a4; // 0x401fbf\n    int64_t v8 = v5; // 0x401fc1\n    if (v6 != v7) {\n        int64_t v9 = (int64_t)g29; // 0x401fc3\n        int64_t * v10 = (int64_t *)(v9 + 40); // 0x401fcf\n        uint64_t v11 = *v10; // 0x401fcf\n        if (v11 >= *(int64_t *)(v9 + 48)) {\n            // 0x402131\n            __overflow(g29, (int32_t)v1 % 256);\n        } else {\n            // 0x401fdd\n            *v10 = v11 + 1;\n            *(char *)v11 = (char)v1;\n        }\n        // 0x401fe8\n        v8 = (char)function_401ee0(a4 & 0xffffffff, v4) == 0 ? 0 : v5 & 0xffffffff;\n    }\n    int64_t v12 = function_4046c0(); // 0x402010\n    int32_t v13 = v12; // 0x402015\n    if (v13 < 0) {\n        int32_t * err_num = __errno_location(); // 0x4020c0\n        if (a1 == 0) {\n            // 0x402110\n            error(0, *err_num, dcgettext(NULL, \"failed to get groups for the current process\", 5));\n        } else {\n            // 0x4020cd\n            function_403e70(a1);\n            error(0, *err_num, dcgettext(NULL, \"failed to get groups for user %s\", 5));\n        }\n        // 0x40209b\n        return 0;\n    }\n    // 0x40201d\n    if (v13 == 0) {\n        // 0x402096\n        free((int64_t *)v3);\n        // 0x40209b\n        return v8 & 0xffffffff;\n    }\n    int64_t v14 = 0x100000000000000 * a6 >> 56; // 0x401f78\n    int64_t v15 = 0;\n    int32_t * v16 = (int32_t *)(v15 + v3); // 0x402040\n    int32_t v17 = *v16; // 0x402040\n    int64_t v18 = v8; // 0x402046\n    int64_t v19; // 0x40204c\n    int64_t * v20; // 0x402053\n    uint64_t v21; // 0x402053\n    if (v17 != v7 && v17 != v6) {\n        // 0x40204c\n        v19 = (int64_t)g29;\n        v20 = (int64_t *)(v19 + 40);\n        v21 = *v20;\n        if (v21 >= *(int64_t *)(v19 + 48)) {\n            // 0x402100\n            __overflow(g29, (int32_t)v14 % 256);\n        } else {\n            // 0x402061\n            *v20 = v21 + 1;\n            *(char *)v21 = (char)v14;\n        }\n        // 0x402070\n        v18 = (char)function_401ee0((int64_t)*v16, v4) != 0 ? v8 : 0;\n    }\n    int64_t v22 = v18;\n    int64_t v23 = v15 + 4; // 0x402094\n    int64_t v24 = v22; // 0x402094\n    while ((4 * v12 + 0x3fffffffc & 0x3fffffffc) != v15) {\n        // 0x402040\n        v15 = v23;\n        int64_t v25 = v22;\n        v16 = (int32_t *)(v15 + v3);\n        v17 = *v16;\n        v18 = v25;\n        if (v17 != v7 && v17 != v6) {\n            // 0x40204c\n            v19 = (int64_t)g29;\n            v20 = (int64_t *)(v19 + 40);\n            v21 = *v20;\n            if (v21 >= *(int64_t *)(v19 + 48)) {\n                // 0x402100\n                __overflow(g29, (int32_t)v14 % 256);\n            } else {\n                // 0x402061\n                *v20 = v21 + 1;\n                *(char *)v21 = (char)v14;\n            }\n            // 0x402070\n            v18 = (char)function_401ee0((int64_t)*v16, v4) != 0 ? v25 : 0;\n        }\n        // 0x40208d\n        v22 = v18;\n        v23 = v15 + 4;\n        v24 = v22;\n    }\n    // 0x402096\n    free((int64_t *)v3);\n    // 0x40209b\n    return v24 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_402140",
            "funcStartAddr": "402140",
            "funcEndAddr": "402148",
            "decompiledFuncCode": "int64_t function_402140(int64_t a1) {\n    // 0x402140\n    g36 = a1;\n    int64_t result; // 0x402140\n    return result;\n}\n"
        },
        {
            "funcName": "function_402150",
            "funcStartAddr": "402150",
            "funcEndAddr": "402158",
            "decompiledFuncCode": "int64_t function_402150(int64_t a1) {\n    // 0x402150\n    g35 = a1;\n    int64_t result; // 0x402150\n    return result;\n}\n"
        },
        {
            "funcName": "function_402160",
            "funcStartAddr": "402160",
            "funcEndAddr": "4021fe",
            "decompiledFuncCode": "int64_t function_402160(void) {\n    // 0x402160\n    int32_t * err_num; // 0x402176\n    if ((int32_t)function_405540((int64_t)g29) == 0) {\n        goto lab_0x40218c;\n    } else {\n        // 0x402176\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x4021a3;\n        } else {\n            // 0x402187\n            if (*err_num != 32) {\n                goto lab_0x4021a3;\n            } else {\n                goto lab_0x40218c;\n            }\n        }\n    }\n  lab_0x40218c:;\n    int64_t result = function_405540((int64_t)g31); // 0x402193\n    if ((int32_t)result == 0) {\n        // 0x40219c\n        return result;\n    }\n    // 0x4021de\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4021a3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4021af\n    if (g36 == 0) {\n        // 0x4021e9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4021c3\n        error(0, *err_num, \"%s: %s\", (char *)function_403cc0((int64_t)g36), v1);\n    }\n    // 0x4021de\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402200",
            "funcStartAddr": "402200",
            "funcEndAddr": "402248",
            "decompiledFuncCode": "int64_t function_402200(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x402200\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x402212\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40221b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x402244\n    return result;\n}\n"
        },
        {
            "funcName": "function_402250",
            "funcStartAddr": "402250",
            "funcEndAddr": "4022e9",
            "decompiledFuncCode": "int64_t function_402250(int64_t str) {\n    // 0x402250\n    if (str == 0) {\n        // 0x4022c9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40225e\n    int64_t result = (int64_t)found_char_pos; // 0x40225e\n    if (found_char_pos == NULL) {\n        // 0x4022b9\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402268\n    if (v1 - str < 7) {\n        // 0x4022b9\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x402278\n    bool v2; // 0x402250\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402250\n    int64_t v5 = result - 6; // 0x402250\n    int64_t v6 = 7; // 0x402286\n    unsigned char v7 = *(char *)v5; // 0x402286\n    char v8 = *(char *)v4; // 0x402286\n    char v9 = v8; // 0x402286\n    bool v10 = false; // 0x402286\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402290\n    int64_t v13 = v1; // 0x402290\n    int64_t v14 = 3; // 0x402290\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4022b9\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4022a2\n    char v16 = *(char *)v12; // 0x4022a2\n    char v17 = v16; // 0x4022a2\n    bool v18 = false; // 0x4022a2\n    while (v15 == v16) {\n        // 0x402292\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4022ac\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4022ae\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x4022b9\n    g37 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4022f0",
            "funcStartAddr": "4022f0",
            "funcEndAddr": "4023e2",
            "decompiledFuncCode": "int64_t function_4022f0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402304\n    int64_t result = (int64_t)v1; // 0x402304\n    if (result != a1) {\n        // 0x402311\n        return result;\n    }\n    int64_t v2 = function_405600(); // 0x402320\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4023d6\n    if (v3 == 85) {\n        // 0x402330\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4023c8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40235e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40236b\n        // 0x402311\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4023c8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4023ad\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4023ba\n    // 0x402311\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4023f0",
            "funcStartAddr": "4023f0",
            "funcEndAddr": "402447",
            "decompiledFuncCode": "int64_t function_4023f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4023f0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402438\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402447",
            "funcStartAddr": "402447",
            "funcEndAddr": "403611",
            "decompiledFuncCode": "int64_t function_402447(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402491\n    int64_t v3 = 0; // 0x402491\n    int64_t v4; // 0x402447\n    int64_t v5; // 0x402447\n    int64_t v6; // 0x402447\n    int64_t v7; // 0x402447\n    int64_t v8; // 0x402447\n    int64_t v9; // 0x402447\n    int64_t v10; // 0x402447\n    int64_t v11; // 0x402447\n    int64_t v12; // 0x402447\n    int64_t v13; // 0x402447\n    int64_t v14; // 0x402447\n    int64_t v15; // 0x402447\n    int64_t v16; // 0x402447\n    int64_t v17; // 0x402447\n    int64_t v18; // 0x402447\n    int64_t result; // 0x402447\n    int64_t v19; // 0x402447\n    int32_t wc; // bp+132, 0x402447\n    int64_t ps; // bp+136, 0x402447\n    char v20; // 0x402a00\n    int64_t v21; // 0x402a00\n    int64_t v22; // 0x402da8\n    int64_t v23; // 0x402447\n    int64_t v24; // 0x402dc7\n    int32_t v25; // 0x402447\n    while (true) {\n      lab_0x402498_2:\n        // 0x402498\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402447\n        int64_t v27; // 0x4024cc\n        while (true) {\n          lab_0x402498:\n            // 0x402498\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4024a3\n            if (v15 == -1) {\n                // 0x4024a5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4024b3\n            if (v28) {\n                // break (via goto) -> 0x402c18\n                goto lab_0x402c18;\n            }\n            // 0x4024bc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402aab\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4025f1;\n                    }\n                    // 0x402ecd\n                    v26 = v5 + 1;\n                    goto lab_0x402498;\n                }\n                case 7: {\n                    goto lab_0x4025f1;\n                }\n                case 8: {\n                    goto lab_0x4025f1;\n                }\n                case 9: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4025f1;\n                }\n                case 12: {\n                    goto lab_0x4025f1;\n                }\n                case 13: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4025bd;\n                }\n                case 36: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4025f1;\n                }\n                case 38: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4025f1;\n                }\n                case 44: {\n                    goto lab_0x4025f1;\n                }\n                case 45: {\n                    goto lab_0x4025f1;\n                }\n                case 46: {\n                    goto lab_0x4025f1;\n                }\n                case 47: {\n                    goto lab_0x4025f1;\n                }\n                case 48: {\n                    goto lab_0x4025f1;\n                }\n                case 49: {\n                    goto lab_0x4025f1;\n                }\n                case 50: {\n                    goto lab_0x4025f1;\n                }\n                case 51: {\n                    goto lab_0x4025f1;\n                }\n                case 52: {\n                    goto lab_0x4025f1;\n                }\n                case 53: {\n                    goto lab_0x4025f1;\n                }\n                case 54: {\n                    goto lab_0x4025f1;\n                }\n                case 55: {\n                    goto lab_0x4025f1;\n                }\n                case 56: {\n                    goto lab_0x4025f1;\n                }\n                case 57: {\n                    goto lab_0x4025f1;\n                }\n                case 58: {\n                    goto lab_0x4025f1;\n                }\n                case 59: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4025f1;\n                }\n                case 66: {\n                    goto lab_0x4025f1;\n                }\n                case 67: {\n                    goto lab_0x4025f1;\n                }\n                case 68: {\n                    goto lab_0x4025f1;\n                }\n                case 69: {\n                    goto lab_0x4025f1;\n                }\n                case 70: {\n                    goto lab_0x4025f1;\n                }\n                case 71: {\n                    goto lab_0x4025f1;\n                }\n                case 72: {\n                    goto lab_0x4025f1;\n                }\n                case 73: {\n                    goto lab_0x4025f1;\n                }\n                case 74: {\n                    goto lab_0x4025f1;\n                }\n                case 75: {\n                    goto lab_0x4025f1;\n                }\n                case 76: {\n                    goto lab_0x4025f1;\n                }\n                case 77: {\n                    goto lab_0x4025f1;\n                }\n                case 78: {\n                    goto lab_0x4025f1;\n                }\n                case 79: {\n                    goto lab_0x4025f1;\n                }\n                case 80: {\n                    goto lab_0x4025f1;\n                }\n                case 81: {\n                    goto lab_0x4025f1;\n                }\n                case 82: {\n                    goto lab_0x4025f1;\n                }\n                case 83: {\n                    goto lab_0x4025f1;\n                }\n                case 84: {\n                    goto lab_0x4025f1;\n                }\n                case 85: {\n                    goto lab_0x4025f1;\n                }\n                case 86: {\n                    goto lab_0x4025f1;\n                }\n                case 87: {\n                    goto lab_0x4025f1;\n                }\n                case 88: {\n                    goto lab_0x4025f1;\n                }\n                case 89: {\n                    goto lab_0x4025f1;\n                }\n                case 90: {\n                    goto lab_0x4025f1;\n                }\n                case 91: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4025f1;\n                }\n                case 94: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4025f1;\n                }\n                case 96: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4025f1;\n                }\n                case 98: {\n                    goto lab_0x4025f1;\n                }\n                case 99: {\n                    goto lab_0x4025f1;\n                }\n                case 100: {\n                    goto lab_0x4025f1;\n                }\n                case 101: {\n                    goto lab_0x4025f1;\n                }\n                case 102: {\n                    goto lab_0x4025f1;\n                }\n                case 103: {\n                    goto lab_0x4025f1;\n                }\n                case 104: {\n                    goto lab_0x4025f1;\n                }\n                case 105: {\n                    goto lab_0x4025f1;\n                }\n                case 106: {\n                    goto lab_0x4025f1;\n                }\n                case 107: {\n                    goto lab_0x4025f1;\n                }\n                case 108: {\n                    goto lab_0x4025f1;\n                }\n                case 109: {\n                    goto lab_0x4025f1;\n                }\n                case 110: {\n                    goto lab_0x4025f1;\n                }\n                case 111: {\n                    goto lab_0x4025f1;\n                }\n                case 112: {\n                    goto lab_0x4025f1;\n                }\n                case 113: {\n                    goto lab_0x4025f1;\n                }\n                case 114: {\n                    goto lab_0x4025f1;\n                }\n                case 115: {\n                    goto lab_0x4025f1;\n                }\n                case 116: {\n                    goto lab_0x4025f1;\n                }\n                case 117: {\n                    goto lab_0x4025f1;\n                }\n                case 118: {\n                    goto lab_0x4025f1;\n                }\n                case 119: {\n                    goto lab_0x4025f1;\n                }\n                case 120: {\n                    goto lab_0x4025f1;\n                }\n                case 121: {\n                    goto lab_0x4025f1;\n                }\n                case 122: {\n                    goto lab_0x4025f1;\n                }\n                case 123: {\n                    goto lab_0x402595;\n                }\n                case 124: {\n                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402595;\n                }\n                case 126: {\n                    goto lab_0x4025bd;\n                }\n                default: {\n                    goto lab_0x402995;\n                }\n            }\n        }\n      lab_0x402995:\n        if (v23 != 1) {\n            // 0x402d00\n            ps = 0;\n            int64_t len = v15; // 0x402d10\n            if (v15 == -1) {\n                // 0x402d12\n                len = strlen((char *)str);\n            }\n            // 0x402d3e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402d9f:\n                // 0x402d9f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402da4\n                int64_t v30 = v29 + str;\n                v24 = function_4054c0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40331a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40331a_2;\n                    }\n                    case -2: {\n                        // 0x4033fd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403437\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40343a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403447\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403440\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40331a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40331a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402d70;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402e1c\n                        char v34 = *(char *)v33; // 0x402e2d\n                        unsigned char v35; // 0x402447\n                        if (v34 < 125) {\n                            // 0x402e38\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402e4f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402e20\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402e2d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402e38\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402e4f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402e20\n                            v33++;\n                        }\n                        goto lab_0x402d70;\n                    }\n                }\n            }\n            goto lab_0x40331a_2;\n        } else {\n            // 0x4029e4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4025f1;\n        }\n    }\n  lab_0x402c18:\n    // 0x402c18\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40351a\n        if (v8 > result) {\n            // 0x403523\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402847\n        return result;\n    }\n    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4025f1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402600\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40280a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402701\n    char v40 = v20; // 0x402701\n    int64_t v41 = v38; // 0x402701\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402701\n    int64_t v43 = v36; // 0x402701\n    goto lab_0x40267d;\n  lab_0x40280a_2:\n    // 0x402847\n    return function_4023f0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40331a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4025f1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402eee\n        int64_t v50 = v5 + 1; // 0x402fd1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402fd8\n        char v52 = v20; // 0x402fd8\n        int64_t v53 = result; // 0x402fd8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402fa1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402fa5\n            int64_t v56 = v54 + 1; // 0x402faa\n            int64_t v57 = v51 + 1; // 0x402fd1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402f9c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402fa1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402fa5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40267d;\n    }\n  lab_0x402d70:\n    // 0x402d70\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402d8f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402d92\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40331a\n        goto lab_0x40331a_2;\n    }\n    goto lab_0x402d9f;\n  lab_0x4025bd:\n    // 0x4025bd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40280a_2;\n    }\n    goto lab_0x4025f1;\n  lab_0x402595:;\n    bool v60 = v15 == 1; // 0x4025a0\n    if (v15 == -1) {\n        // 0x4025a2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4025ae\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4025f1;\n    } else {\n        goto lab_0x4025bd;\n    }\n  lab_0x40267d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402682\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402686\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402498_2;\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "4037be",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403622\n    int32_t * v3 = __errno_location(); // 0x40363c\n    int64_t v4 = (int64_t)g20; // 0x403641\n    int32_t v5 = *v3; // 0x40364b\n    int64_t v6 = v4; // 0x403661\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4037b9\n            function_404680(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403670\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403677\n        int64_t v9; // 0x403620\n        if (g20 == &g21) {\n            int64_t v10 = function_404490(0, v8); // 0x40379a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x40379f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404490(v4, v8); // 0x40368b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x40369a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x40369a\n        int32_t v14 = v7; // 0x4036a1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4036d1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4036db\n    int64_t * v17 = (int64_t *)v15; // 0x4036de\n    uint64_t v18 = *v17; // 0x4036de\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4036e1\n    int64_t result = *v19; // 0x4036e1\n    int64_t v20; // 0x403620\n    uint64_t v21 = function_4023f0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403704\n    if (v18 > v21) {\n        // 0x40377b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403717\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x403727\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404430(v22); // 0x403741\n    *v19 = result2;\n    int64_t v23; // 0x403620\n    function_4023f0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40377b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4037c0",
            "funcStartAddr": "4037c0",
            "funcEndAddr": "4037f4",
            "decompiledFuncCode": "int64_t function_4037c0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4037c7\n    int64_t result = function_404630(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x4037e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403800",
            "funcStartAddr": "403800",
            "funcEndAddr": "40380f",
            "decompiledFuncCode": "int64_t function_403800(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x40380c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403810",
            "funcStartAddr": "403810",
            "funcEndAddr": "40381f",
            "decompiledFuncCode": "int64_t function_403810(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403818\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403820",
            "funcStartAddr": "403820",
            "funcEndAddr": "403853",
            "decompiledFuncCode": "int64_t function_403820(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x403839\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40383e\n    uint32_t v3 = *v2; // 0x40383e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403842\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "403873",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x40386c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "4038ab",
            "decompiledFuncCode": "int64_t function_403880(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403888\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4038a5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40389c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "403922",
            "decompiledFuncCode": "int64_t function_4038b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x4038d2\n    int32_t * v2 = __errno_location(); // 0x4038db\n    uint32_t v3 = *(int32_t *)v1; // 0x4038fb\n    int64_t result = function_4023f0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40390a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403a11",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x403952\n    int32_t * v2 = __errno_location(); // 0x403958\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403977\n    int32_t * v4 = (int32_t *)v1; // 0x40397a\n    int64_t v5 = function_4023f0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403995\n    int64_t v6 = v5 + 1; // 0x40399a\n    int64_t result = function_404430(v6); // 0x4039af\n    function_4023f0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4039f4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4039fd\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403a2a",
            "decompiledFuncCode": "int64_t function_403a20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403a20\n    return function_403930(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403ac5",
            "decompiledFuncCode": "int64_t function_403a30(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403a30\n    int64_t v2 = v1; // 0x403a30\n    int64_t v3 = v2; // 0x403a44\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x403a63\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403a60\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x403a7d\n    if (g21 != 0x609300) {\n        // 0x403a7f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g38;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x403aa1\n    if (g20 != &g21) {\n        // 0x403aa3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g49;\n    }\n    // 0x403ab6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ad0",
            "funcStartAddr": "403ad0",
            "funcEndAddr": "403ae1",
            "decompiledFuncCode": "int64_t function_403ad0(void) {\n    // 0x403ad0\n    int64_t v1; // 0x403ad0\n    return function_403620(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403afa",
            "decompiledFuncCode": "int64_t function_403af0(void) {\n    // 0x403af0\n    int64_t v1; // 0x403af0\n    return function_403620(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b16",
            "decompiledFuncCode": "int64_t function_403b00(int64_t a1) {\n    // 0x403b00\n    return function_403620(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403b20",
            "funcStartAddr": "403b20",
            "funcEndAddr": "403b32",
            "decompiledFuncCode": "int64_t function_403b20(int64_t a1, int64_t a2) {\n    // 0x403b20\n    return function_403620(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403b40",
            "funcStartAddr": "403b40",
            "funcEndAddr": "403ba8",
            "decompiledFuncCode": "int64_t function_403b40(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403b50\n    return function_403620((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403c14",
            "decompiledFuncCode": "int64_t function_403bb0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403bc0\n    return function_403620((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403c2c",
            "decompiledFuncCode": "int64_t function_403c20(int64_t a1, int64_t a2) {\n    // 0x403c20\n    return function_403b40(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403c3f",
            "decompiledFuncCode": "int64_t function_403c30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403c30\n    return function_403bb0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403c40",
            "funcStartAddr": "403c40",
            "funcEndAddr": "403cb0",
            "decompiledFuncCode": "int64_t function_403c40(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403c4d\n    int128_t v2 = __asm_movdqa(g40); // 0x403c55\n    int128_t v3 = __asm_movdqa(g41); // 0x403c5d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403c72\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403c88\n    uint32_t v6 = *v5; // 0x403c88\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403c8d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403620(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403cb0",
            "funcStartAddr": "403cb0",
            "funcEndAddr": "403cbd",
            "decompiledFuncCode": "int64_t function_403cb0(int64_t a1, int64_t a2) {\n    // 0x403cb0\n    return function_403c40(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403cc0",
            "funcStartAddr": "403cc0",
            "funcEndAddr": "403cd1",
            "decompiledFuncCode": "int64_t function_403cc0(int64_t a1) {\n    // 0x403cc0\n    return function_403c40(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403ce0",
            "funcStartAddr": "403ce0",
            "funcEndAddr": "403cea",
            "decompiledFuncCode": "int64_t function_403ce0(void) {\n    // 0x403ce0\n    int64_t v1; // 0x403ce0\n    return function_403c40(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403cf0",
            "funcStartAddr": "403cf0",
            "funcEndAddr": "403d5e",
            "decompiledFuncCode": "int64_t function_403cf0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403d0a\n    return function_403620(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "403dcc",
            "decompiledFuncCode": "int64_t function_403d60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403d67\n    int128_t v2 = __asm_movdqa(g40); // 0x403d6f\n    int128_t v3 = __asm_movdqa(g41); // 0x403d77\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403d99\n    if (a2 == 0 || a3 == 0) {\n        // 0x403dc7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403daa\n    return function_403620(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403dd0",
            "funcStartAddr": "403dd0",
            "funcEndAddr": "403dd9",
            "decompiledFuncCode": "int64_t function_403dd0(void) {\n    // 0x403dd0\n    int64_t v1; // 0x403dd0\n    return function_403d60(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403de0",
            "funcStartAddr": "403de0",
            "funcEndAddr": "403df7",
            "decompiledFuncCode": "int64_t function_403de0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403de0\n    return function_403d60(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403e13",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403e00\n    return function_403d60(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e2a",
            "decompiledFuncCode": "int64_t function_403e20(void) {\n    // 0x403e20\n    int64_t v1; // 0x403e20\n    return function_403620(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e42",
            "decompiledFuncCode": "int64_t function_403e30(int64_t a1, int64_t a2) {\n    // 0x403e30\n    return function_403620(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403e61",
            "decompiledFuncCode": "int64_t function_403e50(void) {\n    // 0x403e50\n    int64_t v1; // 0x403e50\n    return function_403620(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403e70",
            "funcStartAddr": "403e70",
            "funcEndAddr": "403e86",
            "decompiledFuncCode": "int64_t function_403e70(int64_t a1) {\n    // 0x403e70\n    return function_403620(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "40426d",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403f28\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403eac\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403ec6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403f0b\n    if (a6 < 10) {\n        // 0x403f1a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404012\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404270",
            "funcStartAddr": "404270",
            "funcEndAddr": "404290",
            "decompiledFuncCode": "int64_t function_404270(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404270\n    if (a5 == 0) {\n        // 0x40428b\n        return function_403e90(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x404277\n    v1++;\n    int64_t v2 = v1; // 0x404289\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404280\n        v1++;\n        v2 = v1;\n    }\n    // 0x40428b\n    return function_403e90(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042f0",
            "decompiledFuncCode": "int64_t function_404290(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404290\n    int64_t v3 = &v2; // 0x404290\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4042c3\n    int64_t v6; // 0x4042ad\n    int64_t * v7; // 0x4042cb\n    int64_t v8; // 0x4042cb\n    int64_t v9; // 0x4042d7\n    if (v5 < 48) {\n        // 0x4042a0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4042e3\n            break;\n        }\n    } else {\n        // 0x4042cb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4042e3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4042c1\n    while (v4 != 9) {\n        // 0x4042b9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4042a0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4042e3\n                break;\n            }\n        } else {\n            // 0x4042cb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4042e3\n                break;\n            }\n        }\n        // 0x4042b9\n        v10 = 10;\n    }\n    // 0x4042e3\n    return function_403e90(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "4043ac",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4042f0\n    int64_t v1; // bp-168, 0x4042f0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4042f0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4042f0\n    int64_t v8; // 0x4042f0\n    int64_t v9; // bp-56, 0x4042f0\n    int64_t v10; // 0x404355\n    int64_t v11; // 0x404379\n    if ((int32_t)v6 < 48) {\n        // 0x404340\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404390\n            break;\n        }\n    } else {\n        // 0x404372\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404390\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40436a\n    int64_t v13 = 10; // 0x40436a\n    while (v5 != 9) {\n        // 0x40436c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404340\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404390\n                break;\n            }\n        } else {\n            // 0x404372\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404390\n                break;\n            }\n        }\n        // 0x404362\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404390\n    int64_t v14; // bp-136, 0x4042f0\n    int64_t result = function_403e90(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x40439f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043b0",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "404424",
            "decompiledFuncCode": "int64_t function_4043b0(int64_t a1) {\n    // 0x4043b0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404413\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40444a",
            "decompiledFuncCode": "int64_t function_404430(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404434\n    if (size != 0 != (mem == NULL)) {\n        // 0x404443\n        return (int64_t)mem;\n    }\n    // 0x404445\n    function_404680(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404450",
            "funcStartAddr": "404450",
            "funcEndAddr": "404471",
            "decompiledFuncCode": "int64_t function_404450(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404453\n    int64_t v2 = v1; // 0x404453\n    if (v2 < 0) {\n        // 0x40446b\n        function_404680(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404469\n        return function_404430(v2);\n    }\n    // 0x40446b\n    function_404680(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "404482",
            "decompiledFuncCode": "int64_t function_404480(void) {\n    // 0x404480\n    int64_t v1; // 0x404480\n    return function_404430(v1);\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "4044c6",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4044b8\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4044a1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4044b0\n        return (int64_t)mem;\n    }\n    // 0x4044c1\n    function_404680(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "4044f1",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4044d3\n    int64_t v2 = v1; // 0x4044d3\n    if (v2 < 0) {\n        // 0x4044eb\n        function_404680(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4044e9\n        return function_404490(a1, v2);\n    }\n    // 0x4044eb\n    function_404680(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "404586",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40455b\n            function_404680(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404490(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404543\n    if (a2 == 0) {\n        // 0x404568\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404548\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40455b\n        function_404680(a1);\n        // UNREACHABLE\n    }\n    // 0x40452a\n    *(int64_t *)a2 = v2;\n    return function_404490(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "4045e0",
            "decompiledFuncCode": "int64_t function_404590(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404590\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4045da\n            function_404680(a1);\n            // UNREACHABLE\n        }\n        // 0x4045b2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404490(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4045c5\n        *(int64_t *)a2 = 128;\n        return function_404490(0, 128);\n    }\n    // 0x4045d8\n    if (a2 < 0) {\n        // 0x4045da\n        function_404680(a1);\n        // UNREACHABLE\n    }\n    // 0x4045b2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404490(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "4045f7",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2) {\n    // 0x4045e0\n    return (int64_t)memset((int64_t *)function_404430(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "40462e",
            "decompiledFuncCode": "int64_t function_404600(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404607\n    if ((int64_t)v1 < 0) {\n        // 0x404629\n        function_404680(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404629\n        function_404680(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40461a\n    if (mem != NULL) {\n        // 0x404624\n        return (int64_t)mem;\n    }\n    // 0x404629\n    function_404680(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404630",
            "funcStartAddr": "404630",
            "funcEndAddr": "404658",
            "decompiledFuncCode": "int64_t function_404630(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404430(a2); // 0x40463f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "404673",
            "decompiledFuncCode": "int64_t function_404660(int64_t str) {\n    // 0x404660\n    return function_404630(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "4046b1",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1) {\n    // 0x404680\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046e7",
            "decompiledFuncCode": "int64_t function_4046c0(void) {\n    // 0x4046c0\n    int64_t v1; // 0x4046c0\n    int64_t v2 = function_405bb0(v1, v1, v1); // 0x4046c1\n    if ((int32_t)v2 != -1 || *__errno_location() != 12) {\n        // 0x4046cd\n        return v2 & 0xffffffff;\n    }\n    // 0x4046e2\n    function_404680(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "4047cf",
            "decompiledFuncCode": "int64_t function_4046f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4046fc\n    uint32_t v2 = *v1; // 0x4046fc\n    int64_t v3 = a2 & 0xffffffff; // 0x404701\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404704\n    uint64_t v5 = (int64_t)*v4; // 0x404704\n    int64_t v6; // 0x404772\n    if (v3 <= v5) {\n      lab_0x40476c_2:\n        // 0x40476c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4046f2\n    int64_t v8 = v2; // 0x4046f0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40476c\n        goto lab_0x40476c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404728\n    int64_t v17; // 0x404736\n    int64_t * v18; // 0x404750\n    int64_t * v19; // 0x404753\n    int64_t v20; // 0x40475e\n    int64_t v21; // 0x404736\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404733\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404750\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404767\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40476c\n            goto lab_0x40476c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40476c\n            goto lab_0x40476c_2;\n        }\n        // 0x404722\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4047ab\n    int64_t * v23 = (int64_t *)v22; // 0x4047b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4047b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4047b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4047c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40471d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40476c\n            goto lab_0x40476c_2;\n        }\n        // 0x404722\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404733\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404750\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404767\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40476c\n                goto lab_0x40476c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40476c\n                goto lab_0x40476c_2;\n            }\n            // 0x404722\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404790\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4047b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4047c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40476c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "404dec",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4047ef\n    int64_t v2 = *v1; // 0x4047ef\n    char * str2 = (char *)v2; // 0x4047fc\n    char c = *str2; // 0x4047fc\n    int64_t v3 = v2; // 0x404828\n    int64_t v4 = 0; // 0x4047d0\n    int32_t v5; // 0x4047d0\n    int64_t v6; // 0x4047d0\n    int64_t v7; // 0x4047d0\n    int64_t v8; // 0x4047d0\n    int64_t v9; // 0x4047d0\n    int64_t v10; // 0x4047d0\n    int64_t v11; // 0x4047d0\n    int64_t v12; // 0x4047d0\n    int64_t v13; // 0x4047d0\n    int64_t str3; // 0x4047d0\n    int64_t v14; // 0x4047d0\n    int64_t v15; // 0x4047d0\n    int64_t v16; // 0x4047d0\n    int64_t v17; // 0x4047d0\n    int32_t v18; // 0x4047d0\n    int32_t v19; // 0x4047d0\n    int32_t v20; // 0x4047d0\n    int32_t v21; // 0x4047d0\n    int32_t v22; // 0x4047d0\n    int32_t v23; // 0x4047d0\n    int32_t v24; // 0x4047d0\n    int32_t v25; // 0x4047d0\n    int32_t v26; // 0x4047d0\n    int32_t v27; // 0x4047d0\n    int32_t v28; // 0x4047d0\n    int32_t v29; // 0x4047d0\n    int64_t nmemb; // 0x4047d0\n    int64_t v30; // 0x4047d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40482c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404828\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404838\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40483e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404808\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40486c\n                int64_t v34; // 0x4047d0\n                int64_t v35; // 0x4047d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404875\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4049f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404886\n                int64_t v37 = *(int64_t *)v36; // 0x40488a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404860\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404875\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4049f0;\n                        }\n                    }\n                    // 0x404886\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4048d6:\n                    // 0x4048d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404930;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404aa0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404930;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404a50\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4048fa;\n                                } else {\n                                    // 0x404a5c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4048fa;\n                                    } else {\n                                        // 0x404a6a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4048fa;\n                                        } else {\n                                            goto lab_0x404930;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4048fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x404941:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404b16\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404cc2\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x404ce2\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404d2f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x404d49\n                            int64_t v45; // 0x404d4b\n                            if (*(char *)v42 != 0) {\n                                // 0x404d4b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404d43\n                            while (v17 + nmemb != v42) {\n                                // 0x404d45\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404d4b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x404d38\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404d70\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x404b24\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404c7f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404b79\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404b90\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404a3e\n                    return 63;\n                }\n                // 0x404960\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4049e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4049f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404a00\n                    uint32_t v50 = *v49; // 0x404a00\n                    int64_t v51 = v50; // 0x404a00\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404a0a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404a13\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404c3f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404bea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404a3e\n                            return 63;\n                        }\n                        // 0x404a88\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404d9f\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404c9d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404cb0\n                                // 0x404a3e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404bae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404bc2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404a2b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404a2e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404a32\n                    int64_t result = v59; // 0x404a38\n                    if (v58 != 0) {\n                        // 0x404a3a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404a3e\n                    return result;\n                }\n            } else {\n                // 0x40483e\n                v5 = v32;\n            }\n            // break -> 0x404965\n            break;\n        }\n    }\n    // 0x404965\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40497d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404987\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404a3e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404ac9\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4049b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4049c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404930:\n    // 0x404930\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404930\n    int64_t v63 = *(int64_t *)v62; // 0x404934\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404941\n        goto lab_0x404941;\n    }\n    goto lab_0x4048d6;\n  lab_0x4048fa:\n    // 0x4048fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4047d0\n    int32_t v65; // 0x4047d0\n    int32_t v66; // 0x4047d0\n    if (v27 != 0) {\n        goto lab_0x404930;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404ab0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404930;\n            } else {\n                goto lab_0x404921;\n            }\n        } else {\n            // 0x404915\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404c0c\n                int64_t v67 = (int64_t)mem; // 0x404c0c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404930;\n                } else {\n                    // 0x404c1f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404921;\n                }\n            } else {\n                goto lab_0x404921;\n            }\n        }\n    }\n  lab_0x404921:\n    // 0x404921\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404930;\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "4053b6",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404e11\n    if (v3 < 1) {\n        // 0x404fce\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404e0d\n    int32_t v5 = *(int32_t *)a7; // 0x404e19\n    uint64_t v6 = a1 & 0xffffffff; // 0x404e1b\n    int64_t v7 = v2; // 0x404e20\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404e23\n    *v8 = 0;\n    int64_t v9; // 0x404df0\n    int64_t v10; // 0x404df0\n    int64_t v11; // 0x404df0\n    int64_t v12; // 0x404df0\n    int64_t str; // 0x404df0\n    int64_t v13; // 0x404df0\n    int64_t v14; // 0x404df0\n    int64_t v15; // 0x404df0\n    int64_t v16; // 0x404df0\n    int64_t v17; // 0x404df0\n    int32_t v18; // 0x404df0\n    char v19; // 0x404df0\n    if (v5 == 0) {\n        // 0x405008\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404e3a;\n    } else {\n        // 0x404e33\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404e80\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404e83\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404f48;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404e96\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404ea6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404f5c;\n                } else {\n                    goto lab_0x404eb8;\n                }\n            }\n        } else {\n            goto lab_0x404e3a;\n        }\n    }\n  lab_0x404e3a:\n    // 0x404e3a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404e40\n    *v24 = 0;\n    int64_t v25; // 0x404df0\n    int64_t v26; // 0x404df0\n    int64_t v27; // 0x404df0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404f30\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404f3d;\n        }\n        case 43: {\n            // 0x405240\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404f3d;\n        }\n        default: {\n            // 0x404e5c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4051bf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4052d8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404f3d;\n                } else {\n                    // 0x4051cd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404e6a;\n                }\n            } else {\n                goto lab_0x404e6a;\n            }\n        }\n    }\n  lab_0x404f48:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404f4f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404eb8;\n    } else {\n        goto lab_0x404f5c;\n    }\n  lab_0x404e6a:\n    // 0x404e6a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404f3d;\n  lab_0x404f3d:\n    // 0x404f3d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404f48;\n  lab_0x404eb8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404eb8\n    int64_t v31 = v30; // 0x404eb8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404eba\n    if ((int64_t)*v32 > v31) {\n        // 0x404ebf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404ec2\n    if (*v33 > v30) {\n        // 0x404ec7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404eca\n    int64_t v35 = v31; // 0x404ece\n    int64_t v36 = v15; // 0x404ece\n    int64_t v37; // 0x404df0\n    int64_t v38; // 0x404df0\n    int64_t v39; // 0x404df0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405038\n        int64_t v41 = v40; // 0x405038\n        v2 = v41;\n        int64_t v42; // 0x404df0\n        if (*v33 == v40) {\n            // 0x405220\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405228\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405044\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405058\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405061\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40506a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405081\n            int64_t v47 = v45 & 0xffffffff; // 0x405085\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40508e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405094\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405096;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405070\n            int64_t v49 = v48 & 0xffffffff; // 0x405070\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405081\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40508e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405094\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405096;\n                    }\n                }\n                // 0x405070\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405238\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405096;\n    } else {\n        goto lab_0x404ed4;\n    }\n  lab_0x404f5c:\n    // 0x404f5c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404f5f\n    int64_t v51 = v12; // 0x404f5f\n    int64_t v52 = v14; // 0x404f5f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404eb8;\n    } else {\n        goto lab_0x404f65;\n    }\n  lab_0x404ed4:;\n    int32_t v53 = v35; // 0x404ed4\n    int64_t v54; // 0x404df0\n    int64_t v55; // 0x404df0\n    int64_t v56; // 0x404df0\n    int64_t v57; // 0x404df0\n    int64_t v58; // 0x404df0\n    int64_t v59; // 0x404df0\n    char * v60; // 0x404df0\n    int64_t v61; // 0x404df0\n    int64_t v62; // 0x404ee9\n    int64_t v63; // 0x404df0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405023\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405026;\n    } else {\n        // 0x404edc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404df0\n        int64_t v66 = v65 ? -1 : 1; // 0x404ef0\n        int64_t v67 = (int64_t)\"--\"; // 0x404df0\n        int64_t v68 = v62; // 0x404df0\n        int64_t v69 = 3; // 0x404ef0\n        unsigned char v70 = *(char *)v68; // 0x404ef0\n        char v71 = *(char *)v67; // 0x404ef0\n        char v72 = v71; // 0x404ef0\n        bool v73 = false; // 0x404ef0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404fe0\n            if (*(char *)v62 == 45) {\n                // 0x4050a0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4050a0\n                if (c == 0) {\n                    goto lab_0x404fea;\n                } else {\n                    // 0x4050ad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405130;\n                    } else {\n                        if (c == 45) {\n                            // 0x405313\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405185;\n                        } else {\n                            // 0x4050be\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405130;\n                            } else {\n                                // 0x4050c3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4050e4;\n                                } else {\n                                    // 0x4050ca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405130;\n                                    } else {\n                                        goto lab_0x4050e4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404fea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404f00\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404f03\n            int64_t v77 = v35 + 1; // 0x404f06\n            int32_t v78 = v77; // 0x404f09\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405270\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404f17\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404f25\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405026;\n        }\n    }\n  lab_0x404f65:;\n    // 0x404f65\n    int64_t v79; // bp-104, 0x404df0\n    int64_t v80 = &v79; // 0x404dfa\n    int64_t v81 = v50 + 1; // 0x404f65\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404f6c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404f71\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404f75\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404f79\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404f81\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404f86\n    int32_t c2 = v84; // 0x404f86\n    char * found_char_pos = strchr(str2, c2); // 0x404f86\n    int64_t v87 = *v82; // 0x404f8b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404f95\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404fa0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405290\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40525d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404fce\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404f86\n    char v91 = *(char *)(v90 + 1); // 0x404fbb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404f75\n        if (v91 != 58) {\n            // 0x404fce\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4051e4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4052e8\n                *v8 = 0;\n            } else {\n                // 0x4052cc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40520e\n            *v83 = 0;\n            // 0x404fce\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4051ee\n        if (v93 != 0) {\n            // 0x405280\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40520e\n            *v83 = 0;\n            // 0x404fce\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405201\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40520e\n            *v83 = 0;\n            // 0x404fce\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40534a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4052fa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405301\n        // 0x40520e\n        *v83 = 0;\n        // 0x404fce\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405159\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40515b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405380\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405331\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405338\n            // 0x404fce\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405166\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40516a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405185;\n  lab_0x405096:\n    // 0x405096\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404ed4;\n  lab_0x405185:;\n    int64_t v99 = function_4047d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4051a3\n    // 0x404fce\n    return v99 & 0xffffffff;\n  lab_0x405026:;\n    int32_t v100 = v55; // 0x405026\n    if (v100 != (int32_t)v59) {\n        // 0x40502a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404fce\n    return 0xffffffff;\n  lab_0x404fea:\n    // 0x404fea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404ff1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404fce\n    return v99 & 0xffffffff;\n  lab_0x405130:\n    // 0x405130\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404f65;\n  lab_0x4050e4:\n    // 0x4050e4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4047d0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40510a\n    if ((int32_t)v101 != -1) {\n        // 0x404fce\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40511f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405130;\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "405416",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1) {\n    // 0x4053c0\n    *(int32_t *)&g42 = g26;\n    *(int32_t *)&g43 = g25;\n    int64_t v1; // 0x4053c0\n    int64_t result = function_404df0(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x4053e6\n    g26 = *(int32_t *)&g42;\n    g47 = g45;\n    *(int32_t *)&g24 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "405438",
            "decompiledFuncCode": "int64_t function_405420(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405420\n    return function_4053c0(1);\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "405453",
            "decompiledFuncCode": "int64_t function_405440(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x405440\n    return function_4053c0(0);\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "405475",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405460\n    return function_404df0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "405496",
            "decompiledFuncCode": "int64_t function_405480(void) {\n    // 0x405480\n    return function_4053c0(0);\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "4054b8",
            "decompiledFuncCode": "int64_t function_4054a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4054a0\n    return function_404df0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "40553a",
            "decompiledFuncCode": "int64_t function_4054c0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4054cb\n    int64_t v2 = (int64_t)&g10; // 0x4054cb\n    int32_t * pwc; // 0x4054c0\n    int64_t v3; // 0x4054c0\n    int64_t n; // 0x4054c0\n    if (a2 == 0) {\n        goto lab_0x405512;\n    } else {\n        // 0x4054cd\n        if (a3 == 0) {\n            // 0x4054f8\n            return -2;\n        }\n        // 0x4054d9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405512;\n        } else {\n            goto lab_0x4054e4;\n        }\n    }\n  lab_0x405512:\n    // 0x405512\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4054c0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4054e4;\n  lab_0x4054e4:;\n    char * wstr = (char *)v3; // 0x4054ea\n    int64_t ps; // 0x4054c0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4054ea\n    int64_t result = v5; // 0x4054ea\n    if (v5 < 0xfffffffe) {\n        // 0x4054f8\n        return result;\n    }\n    int64_t result2 = result; // 0x405529\n    if ((char)function_4055a0(0, v3) == 0) {\n        // 0x40552b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4054f8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "40559d",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405547\n    int64_t v2; // 0x405540\n    int64_t result = function_405dc0(a1, v2); // 0x405558\n    if ((v2 & 32) != 0) {\n        // 0x405580\n        if ((int32_t)result == 0) {\n            // 0x405584\n            *__errno_location() = 0;\n        }\n        // 0x40557a\n        return 0xffffffff;\n    }\n    // 0x405561\n    if ((int32_t)result == 0) {\n        // 0x40557a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405568\n    if (v1 == 0) {\n        // 0x40556a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40557a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "4055fe",
            "decompiledFuncCode": "int64_t function_4055a0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4055a6\n    if (locale == NULL) {\n        // 0x4055d3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4055a6\n    bool v2; // 0x4055a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4055a0\n    int64_t v5 = v1; // 0x4055a0\n    int64_t v6 = 2; // 0x4055c5\n    unsigned char v7 = *(char *)v5; // 0x4055c5\n    char v8 = *(char *)v4; // 0x4055c5\n    char v9 = v8; // 0x4055c5\n    bool v10 = false; // 0x4055c5\n    while (v7 == v8) {\n        // 0x4055b8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4055d1\n    int64_t v13 = v1; // 0x4055d1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4055d3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4055d1\n    unsigned char v15 = *(char *)v13; // 0x4055ed\n    char v16 = *(char *)v12; // 0x4055ed\n    char v17 = v16; // 0x4055ed\n    bool v18 = false; // 0x4055ed\n    while (v15 == v16) {\n        // 0x4055e0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "405b62",
            "decompiledFuncCode": "int64_t function_405600(void) {\n    char * v1 = nl_langinfo(14); // 0x405616\n    char * v2 = g46; // 0x40561b\n    char * v3; // 0x405600\n    int64_t v4; // 0x405600\n    int64_t v5; // 0x405600\n    int64_t v6; // 0x405600\n    int64_t v7; // 0x405600\n    int32_t size; // 0x405600\n    int32_t size2; // 0x405600\n    int32_t len; // 0x4056d2\n    int64_t v8; // 0x4056d2\n    char * env_val; // 0x4056bd\n    if (v2 == NULL) {\n        // 0x4056b8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405725;\n        } else {\n            // 0x4056ca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405725;\n            } else {\n                // 0x4056cf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4056bd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405b55\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405725;\n                    } else {\n                        // 0x405ac9\n                        size2 = len + 14;\n                        goto lab_0x4056eb;\n                    }\n                } else {\n                    goto lab_0x4056eb;\n                }\n            }\n        }\n    } else {\n        // 0x405600\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40563a;\n    }\n  lab_0x40596c:;\n    // 0x40596c\n    struct _IO_FILE * stream; // 0x4057ab\n    int32_t v10 = __uflow(stream); // 0x40596f\n    int64_t v11; // 0x405600\n    int64_t v12 = v11; // 0x405979\n    int64_t v13; // 0x405600\n    int64_t v14 = v13; // 0x405979\n    int32_t v15 = v10; // 0x405979\n    int64_t v16; // 0x405600\n    int64_t v17 = v16; // 0x405979\n    int64_t v18 = v11; // 0x405979\n    int64_t v19 = v13; // 0x405979\n    int64_t v20 = v16; // 0x405979\n    if (v10 == -1) {\n        // break -> 0x40597f\n        goto lab_0x40597f;\n    }\n    goto lab_0x4057f9;\n  lab_0x4057ee:;\n    // 0x4057ee\n    int64_t v90; // 0x405600\n    int64_t * v32; // 0x4057e0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405600\n    v12 = v89;\n    int64_t v91; // 0x405600\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405600\n    v17 = v92;\n    goto lab_0x4057f9;\n  lab_0x4057f9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405600\n    int32_t v25; // bp-120, 0x405600\n    int32_t v26; // bp-184, 0x405600\n    int64_t v27; // 0x4057ab\n    int64_t v28; // 0x4057c8\n    int64_t v29; // 0x4057cd\n    int64_t * v30; // 0x4057e4\n    switch (c) {\n        case 32: {\n            goto lab_0x4057e0;\n        }\n        case 10: {\n            goto lab_0x4057e0;\n        }\n        case 9: {\n            goto lab_0x4057e0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4059d1\n            int32_t v33; // 0x405600\n            char v34; // 0x405600\n            int32_t v35; // 0x4059de\n            if (v31 < *v30) {\n                // 0x4059b0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4059db\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4059d1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4059b0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4059db\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4059c0\n                v36 = v33;\n            }\n            // 0x405aaf\n            if (v36 == -1) {\n                // break -> 0x40597f\n                break;\n            }\n            goto lab_0x4057e0;\n        }\n        default: {\n            // 0x40580f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40597f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405838\n            int64_t v39 = v37 + 4; // 0x40583a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405846\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405848\n            while (v41 == 0) {\n                // 0x405838\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405866\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405872\n            int64_t v45 = v43 + 4; // 0x405874\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405880\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405882\n            while (v47 == 0) {\n                // 0x405872\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40586f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405898\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4058a8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4058ac\n            int64_t v52 = v51 + v48; // 0x4058b5\n            int64_t * mem; // 0x405600\n            int64_t v53; // 0x405600\n            int64_t v54; // 0x405600\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4059eb\n                int64_t v56 = v55 + 3; // 0x4059f7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4058d1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4058e0\n            if (mem == NULL) {\n                // 0x405b0c\n                free((int64_t *)v21);\n                function_405dc0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x405784;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4058f8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405902\n            uint32_t v62 = (int32_t)v59; // 0x405905\n            int64_t v63; // 0x405600\n            if (v62 >= 8) {\n                // 0x405a14\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405a2e\n                int64_t v66 = v61 - v65; // 0x405a32\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405a3d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405a4e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405a4e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405a4b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405adf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405917\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40591b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40592b\n            int64_t v74 = v60 - 1; // 0x40592f\n            uint32_t v75 = (int32_t)v73; // 0x405934\n            int64_t v76; // 0x405600\n            if (v75 >= 8) {\n                // 0x405a62\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405a6c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405a7c\n                int64_t v80 = v74 - v79; // 0x405a80\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405a8b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405a9b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405a99\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405af6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405afe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405946\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40594a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405b43\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40595e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4057ee;\n            } else {\n                goto lab_0x40596c;\n            }\n        }\n    }\n  lab_0x4057e0:;\n    int64_t v93 = v23; // 0x405600\n    int64_t v94 = v22; // 0x405600\n    int64_t v95 = v21; // 0x405600\n    goto lab_0x4057e0_2;\n  lab_0x405725:;\n    int64_t * mem3 = malloc(size); // 0x405725\n    int64_t v97 = (int64_t)&g10; // 0x405730\n    int64_t v98; // 0x405600\n    int64_t path; // 0x405600\n    if (mem3 == NULL) {\n        goto lab_0x405702;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405725\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405746;\n    }\n  lab_0x40563a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40562d\n    char v100 = *v3; // 0x40563a\n    int64_t v101; // 0x405600\n    if (v100 == 0) {\n        // 0x405694\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405600\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405600\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405680\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405687;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405650\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40565d\n        char v107 = *(char *)v106; // 0x405662\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405694\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40566b\n    v104 = v103 + 1;\n  lab_0x405687:\n    // 0x405694\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405702:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40563a;\n  lab_0x405746:;\n    int64_t v109 = v98 + path; // 0x405746\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405772\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x4057a1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405ad2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x4057c5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4057e0_2:;\n                uint64_t v96 = *v32; // 0x4057e0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40596c;\n                } else {\n                    goto lab_0x4057ee;\n                }\n            }\n          lab_0x40597f:\n            // 0x40597f\n            function_405dc0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x40599e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405784;\n  lab_0x4056eb:;\n    int64_t * mem4 = malloc(size2); // 0x4056eb\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x405791\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405746;\n    } else {\n        goto lab_0x405702;\n    }\n  lab_0x405784:\n    // 0x405784\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405702;\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405ba6",
            "decompiledFuncCode": "int64_t function_405b70(int32_t a1, uint64_t a2) {\n    int64_t v1 = 4 * a2; // 0x405b7a\n    if (v1 < 0) {\n        // 0x405b90\n        *__errno_location() = 12;\n        return 0;\n    }\n    if (a2 < 0x4000000000000000) {\n        // 0x405b88\n        return (int64_t)realloc((int64_t *)(int64_t)a1, (int32_t)v1);\n    }\n    // 0x405b90\n    *__errno_location() = 12;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405bb0",
            "funcStartAddr": "405bb0",
            "funcEndAddr": "405dbb",
            "decompiledFuncCode": "int64_t function_405bb0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t grouplist2[1]; // 0x405da9\n    int32_t grouplist[1]; // 0x405ce4\n    int64_t result; // 0x405bb0\n    int64_t result2; // 0x405bb0\n    int64_t v1; // 0x405bb0\n    int64_t v2; // 0x405bb0\n    int64_t v3; // 0x405bb0\n    int32_t v4; // 0x405bb0\n    int32_t ngroups; // bp-44, 0x405bb0\n    int32_t v5; // 0x405c9d\n    if (a1 == 0) {\n        int32_t v6 = getgroups(0, {0}); // 0x405c8c\n        ngroups = v6;\n        if (v6 < 0) {\n            // 0x405d48\n            if (*__errno_location() != 38) {\n                // 0x405c34\n                return 0xffffffff;\n            }\n            int64_t * mem = malloc(4); // 0x405d5b\n            result = 0xffffffff;\n            if (mem == NULL) {\n                // 0x405c34\n                return result;\n            }\n            int32_t v7 = a2; // 0x405d69\n            *(int32_t *)mem = v7;\n            *(int64_t *)a3 = (int64_t)mem;\n            return v7 != -1;\n        }\n        int64_t v8 = v6; // 0x405c8c\n        v5 = a2;\n        if (v5 == -1 == (v6 != 0)) {\n            int64_t v9 = function_405b70(0, v8); // 0x405d8b\n            if (v9 == 0) {\n                // 0x405c34\n                return 0xffffffff;\n            }\n            // 0x405d9c\n            v3 = v9;\n            v4 = ngroups;\n            goto lab_0x405da0;\n        } else {\n            int64_t v10 = v8 + 1; // 0x405cb2\n            ngroups = v10;\n            int64_t v11 = function_405b70(0, 0x100000000 * v10 >> 32); // 0x405cbe\n            if (v11 == 0) {\n                // 0x405c34\n                return 0xffffffff;\n            }\n            // 0x405ccf\n            v3 = v11;\n            v4 = ngroups;\n            if (v5 == -1) {\n                goto lab_0x405da0;\n            } else {\n                // 0x405cdd\n                grouplist[0] = (int32_t)v11 + 4;\n                int32_t v12 = getgroups(ngroups - 1, grouplist); // 0x405ce4\n                v1 = v11;\n                if (v12 < 0) {\n                    goto lab_0x405c18;\n                } else {\n                    // 0x405cf1\n                    *(int32_t *)v11 = v5;\n                    result2 = v12 + 1;\n                    v2 = v11;\n                    goto lab_0x405cf7;\n                }\n            }\n        }\n    } else {\n        // 0x405bcb\n        ngroups = 10;\n        int64_t groups = function_405b70(0, 10); // 0x405bdd\n        if (groups == 0) {\n            // 0x405c34\n            return 0xffffffff;\n        }\n        int32_t group = a2; // 0x405bf2\n        char * user = (char *)a1; // 0x405bfd\n        int32_t v13 = getgrouplist(user, group, (int32_t *)groups, &ngroups); // 0x405bfd\n        int64_t v14 = groups; // 0x405c04\n        int32_t v15 = ngroups; // 0x405c04\n        if (v13 < 0) {\n            int64_t v16 = ngroups; // 0x405c48\n            int64_t v17 = v16; // 0x405c4f\n            int64_t v18; // 0x405c51\n            if (ngroups == 10) {\n                // 0x405c51\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n            }\n            int64_t groups2 = function_405b70((int32_t)groups, 0x100000000 * v17 >> 32); // 0x405c5d\n            v1 = groups;\n            while (groups2 != 0) {\n                uint32_t v19 = getgrouplist(user, group, (int32_t *)groups2, &ngroups); // 0x405bfd\n                v14 = groups2;\n                v15 = ngroups;\n                int64_t v20 = groups2; // 0x405c04\n                if (v19 >= 0) {\n                    goto lab_0x405c06;\n                }\n                v16 = ngroups;\n                v17 = v16;\n                // 0x405c51\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n                // 0x405c57\n                groups2 = function_405b70((int32_t)v20, 0x100000000 * v17 >> 32);\n                v1 = v20;\n            }\n        } else {\n          lab_0x405c06:;\n            int64_t v21 = function_405b70((int32_t)v14, (int64_t)v15); // 0x405c0e\n            v1 = v14;\n            if (v21 != 0) {\n                // 0x405c70\n                *(int64_t *)a3 = v21;\n                return ngroups;\n            }\n        }\n        goto lab_0x405c18;\n    }\n  lab_0x405d2b:;\n    // 0x405d2b\n    int64_t v22; // 0x405bb0\n    int64_t v23 = v22 + 4; // 0x405d2b\n    int64_t v24; // 0x405bb0\n    result = v24;\n    int64_t v25 = v24; // 0x405d32\n    v22 = v23;\n    int64_t v26; // 0x405bb0\n    int64_t v27 = v26; // 0x405d32\n    uint64_t v28; // 0x405d09\n    if (v28 <= v23) {\n        return result;\n    }\n    goto lab_0x405d38;\n  lab_0x405c18:;\n    int32_t * v33 = __errno_location(); // 0x405c18\n    free((int64_t *)v1);\n    // 0x405c34\n    return 0xffffffff;\n  lab_0x405da0:\n    // 0x405da0\n    grouplist2[0] = v3;\n    int32_t v34 = getgroups(v4 - (int32_t)(v5 != -1), grouplist2); // 0x405da9\n    v1 = v3;\n    result2 = v34;\n    v2 = v3;\n    if (v34 >= 0) {\n        goto lab_0x405cf7;\n    } else {\n        goto lab_0x405c18;\n    }\n  lab_0x405cf7:\n    // 0x405cf7\n    *(int64_t *)a3 = v2;\n    if ((int32_t)result2 < 2) {\n        // 0x405c34\n        return result2;\n    }\n    // 0x405d04\n    v28 = (0x100000000 * result2 >> 30) + v2;\n    int64_t v35 = v2 + 4; // 0x405d0d\n    v25 = result2;\n    v22 = v35;\n    if (v28 <= v35) {\n        // 0x405c34\n        return result2;\n    }\n    v27 = v2;\n    while (true) {\n      lab_0x405d38:;\n        int64_t v29 = v27;\n        int64_t v30 = v25;\n        int32_t v31 = *(int32_t *)v22; // 0x405d38\n        if (v31 != *(int32_t *)v2) {\n            // 0x405d20\n            if (*(int32_t *)v29 == v31) {\n                // 0x405d3e\n                v24 = v30 + 0xffffffff & 0xffffffff;\n                v26 = v29;\n                goto lab_0x405d2b;\n            } else {\n                int64_t v32 = v29 + 4; // 0x405d24\n                *(int32_t *)v32 = v31;\n                v24 = v30;\n                v26 = v32;\n                goto lab_0x405d2b;\n            }\n        } else {\n            // 0x405d3e\n            v24 = v30 + 0xffffffff & 0xffffffff;\n            v26 = v29;\n            goto lab_0x405d2b;\n        }\n    }\n    int64_t result3 = result;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_405dc0",
            "funcStartAddr": "405dc0",
            "funcEndAddr": "405e3b",
            "decompiledFuncCode": "int64_t function_405dc0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405dc7\n    if (fileno(stream) < 0) {\n        // 0x405e27\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405dda\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405e0b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405e27\n            return fclose(stream);\n        }\n    }\n    // 0x405ddc\n    if ((int32_t)function_405e40(a1, v1) == 0) {\n        // 0x405e27\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405de8\n    int32_t v3 = *v2; // 0x405df0\n    int64_t result = fclose(stream); // 0x405dfe\n    if (v3 != 0) {\n        // 0x405e30\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405e00\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e40",
            "funcStartAddr": "405e40",
            "funcEndAddr": "405e80",
            "decompiledFuncCode": "int64_t function_405e40(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405e5a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405e5a\n        return fflush(stream);\n    }\n    // 0x405e68\n    function_405e80(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405e80",
            "funcStartAddr": "405e80",
            "funcEndAddr": "405ed7",
            "decompiledFuncCode": "int64_t function_405e80(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405e80\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405e8a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405ebb\n    int64_t result = -1; // 0x405ec4\n    if (v1 != -1) {\n        // 0x405ec6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405ed2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ee0",
            "funcStartAddr": "405ee0",
            "funcEndAddr": "405f3d",
            "decompiledFuncCode": "int64_t function_405ee0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405ee0\n    return function_401428();\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f41",
            "decompiledFuncCode": "int64_t function_405f40(void) {\n    // 0x405f40\n    int64_t result; // 0x405f40\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f50",
            "funcStartAddr": "405f50",
            "funcEndAddr": "405f68",
            "decompiledFuncCode": "int64_t function_405f50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405f50\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_405f68",
            "funcStartAddr": "405f68",
            "funcEndAddr": "405f88",
            "decompiledFuncCode": "int64_t function_405f68(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x405f72\n    while (*(int64_t *)v1 != -1) {\n        // 0x405f73\n        v1 -= 8;\n    }\n    // 0x405f84\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_groups.elf"
}