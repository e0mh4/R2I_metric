{
    "funcInfo": [
        {
            "funcName": "function_4016c0",
            "funcStartAddr": "4016c0",
            "funcEndAddr": "4016c5",
            "decompiledFuncCode": "int64_t function_4016c0(void) {\n    // 0x4016c0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016c5",
            "funcStartAddr": "4016c5",
            "funcEndAddr": "4016ca",
            "decompiledFuncCode": "int64_t function_4016c5(void) {\n    // 0x4016c5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016ca",
            "funcStartAddr": "4016ca",
            "funcEndAddr": "4016cf",
            "decompiledFuncCode": "int64_t function_4016ca(void) {\n    // 0x4016ca\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016cf",
            "funcStartAddr": "4016cf",
            "funcEndAddr": "4016d4",
            "decompiledFuncCode": "int64_t function_4016cf(void) {\n    // 0x4016cf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016d4",
            "funcStartAddr": "4016d4",
            "funcEndAddr": "4016d9",
            "decompiledFuncCode": "int64_t function_4016d4(void) {\n    // 0x4016d4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016d9",
            "funcStartAddr": "4016d9",
            "funcEndAddr": "4016de",
            "decompiledFuncCode": "int64_t function_4016d9(void) {\n    // 0x4016d9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4016e0",
            "funcStartAddr": "4016e0",
            "funcEndAddr": "401837",
            "decompiledFuncCode": "int64_t function_4016e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x4016e2\n    function_402120(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_405ba0(0x401ee0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    setvbuf(g30, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    function_402010(v1, a2, \"cksum\", \"coreutils\", (int64_t)g19, 0x401bd0);\n    int64_t v2 = function_405400(v1, a2, (int64_t *)&g12, &g3, 0, 0x401bd0); // 0x401777\n    if ((int32_t)v2 != -1) {\n        // 0x40182d\n        function_401bd0(1);\n        // UNREACHABLE\n    }\n    uint32_t v3 = *(int32_t *)0x60923c; // 0x401787\n    g36 = 0;\n    int64_t v4; // 0x4016e0\n    int64_t v5; // 0x4016e0\n    if (v3 == (int32_t)a1) {\n        goto lab_0x401816;\n    } else {\n        uint64_t v6 = (int64_t)v3; // 0x401787\n        if (v1 <= v6) {\n            // 0x4017e1\n            return 0;\n        }\n        int64_t v7 = 1; // 0x4017b9\n        int64_t v8 = 0x100000000 * v6 / 0x20000000 + a2;\n        int64_t v9 = v8 + 8; // 0x4017c8\n        v7 &= function_401920(*(int64_t *)v8, 1);\n        v4 = v7;\n        v5 = 1;\n        while (v9 != a2 + 8 + 8 * (((v6 ^ 0xffffffff) + a1 & 0xffffffff) + (int64_t)v3)) {\n            // 0x4017c0\n            v8 = v9;\n            v9 = v8 + 8;\n            v7 &= function_401920(*(int64_t *)v8, 1);\n            v4 = v7;\n            v5 = 1;\n        }\n        goto lab_0x4017d8;\n    }\n  lab_0x401816:\n    // 0x401816\n    v4 = function_401920((int64_t)\"-\", 0) & 0xffffffff;\n    v5 = 0;\n    goto lab_0x4017d8;\n  lab_0x4017d8:;\n    int64_t v10 = v4; // 0x4017df\n    if (g36 == 0) {\n        // 0x4017e1\n        return v10 % 256 ^ 1;\n    }\n    // 0x4017ed\n    v10 = v4;\n    if ((int32_t)function_404590((int64_t)g31, v5) != -1) {\n        // 0x4017e1\n        return v10 % 256 ^ 1;\n    }\n    // 0x4017fe\n    error(1, *__errno_location(), \"-\");\n    goto lab_0x401816;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401840",
            "funcEndAddr": "40186b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401840\n    int64_t v1; // 0x401840\n    __libc_start_main(0x4016e0, (int32_t)a4, (char **)&v1, (void (*)())0x405b30, (void (*)())0x405b90, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40186b",
            "funcStartAddr": "40186b",
            "funcEndAddr": "40188a",
            "decompiledFuncCode": "int64_t function_40186b(void) {\n    // 0x40186b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_40188a",
            "funcStartAddr": "40188a",
            "funcEndAddr": "4018c1",
            "decompiledFuncCode": "int64_t function_40188a(void) {\n    // 0x40188a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4018c1",
            "funcStartAddr": "4018c1",
            "funcEndAddr": "401918",
            "decompiledFuncCode": "int64_t function_4018c1(void) {\n    // 0x4018c1\n    if (g34 != 0) {\n        // 0x401917\n        int64_t result; // 0x4018c1\n        return result;\n    }\n    int64_t v1 = g35; // 0x4018f4\n    int64_t result2; // 0x401906\n    if (g35 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401906\n        result2 = function_40186b();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x4018f6\n        v1++;\n    }\n    // 0x4018ea\n    g35 = v1;\n    // 0x401906\n    result2 = function_40186b();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401918",
            "funcStartAddr": "401918",
            "funcEndAddr": "40191d",
            "decompiledFuncCode": "int64_t function_401918(void) {\n    // 0x401918\n    return function_40188a();\n}\n"
        },
        {
            "funcName": "function_401920",
            "funcStartAddr": "401920",
            "funcEndAddr": "401bd0",
            "decompiledFuncCode": "int64_t function_401920(int64_t file_path, int64_t a2) {\n    // 0x401920\n    bool v1; // 0x401920\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = (int64_t)\"-\"; // 0x401920\n    int64_t v4 = file_path; // 0x401920\n    int64_t v5 = 2; // 0x401948\n    unsigned char v6 = *(char *)v4; // 0x401948\n    char v7 = *(char *)v3; // 0x401948\n    char v8 = v7; // 0x401948\n    bool v9 = false; // 0x401948\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    struct _IO_FILE * v11; // 0x401920\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x401b4b\n        v11 = file;\n        if (file != NULL) {\n            goto lab_0x401965;\n        } else {\n            goto lab_0x401a9b;\n        }\n    } else {\n        // 0x401957\n        g36 = 1;\n        v11 = g31;\n        goto lab_0x401965;\n    }\n  lab_0x401965:;\n    int64_t v12 = (int64_t)v11;\n    int64_t v13; // 0x401920\n    function_401f90(v12, 2, v13);\n    int64_t v14; // bp-65592, 0x401920\n    int64_t v15 = &v14; // 0x40198d\n    int64_t v16 = 0;\n    int64_t v17 = 0;\n    int32_t v18 = fread_unlocked(&v14, 1, 0x10000, v11); // 0x401992\n    int64_t v19; // 0x401920\n    int64_t v20; // 0x401920\n    while (v18 != 0) {\n        int64_t v21 = v18; // 0x401992\n        int64_t v22 = v16 + v21; // 0x4019a0\n        if (v22 < v16) {\n            // 0x401b61\n            function_403bc0(0, 3, file_path);\n            error(1, (int32_t)\"%s: file too long\" ^ (int32_t)\"%s: file too long\", dcgettext(NULL, \"%s: file too long\", 5));\n            goto lab_0x401b98;\n        }\n        int64_t v23 = v15 + 1; // 0x4019b8\n        char v24 = *(char *)v15; // 0x4019c3\n        int64_t v25 = *(int64_t *)(8 * (int64_t)(v24 ^ (char)(v17 / 0x1000000)) + (int64_t)&g2); // 0x4019cd\n        int64_t v26 = v25 ^ 256 * v17; // 0x4019cd\n        int64_t v27 = v26; // 0x4019db\n        while (v23 != v21 + v15) {\n            int64_t v28 = v23;\n            v23 = v28 + 1;\n            v24 = *(char *)v28;\n            v25 = *(int64_t *)(8 * (int64_t)(v24 ^ (char)(v27 / 0x1000000)) + (int64_t)&g2);\n            v26 = v25 ^ 256 * v27;\n            v27 = v26;\n        }\n        int32_t v29 = v11->e0; // 0x4019dd\n        if ((v29 & 16) != 0) {\n            // 0x4019e4\n            v20 = v26;\n            v19 = v22;\n            if ((v29 & 32) != 0) {\n                goto lab_0x401af0;\n            } else {\n                goto lab_0x4019ec;\n            }\n        }\n        v16 = v22;\n        v17 = v26;\n        v18 = fread_unlocked(&v14, 1, 0x10000, v11);\n    }\n    // 0x401ae5\n    v20 = v17;\n    v19 = v16;\n    if ((v11->e0 & 32) == 0) {\n        goto lab_0x4019ec;\n    } else {\n        goto lab_0x401af0;\n    }\n  lab_0x401a9b:\n    // 0x401a9b\n    error(0, *__errno_location(), \"%s\", (char *)function_403bc0(0, 3, file_path));\n    // 0x401a76\n    return 0;\n  lab_0x4019ec:;\n    int64_t v30 = (int64_t)\"-\"; // 0x401920\n    int64_t v31 = 2; // 0x401920\n    unsigned char v32 = *(char *)file_path; // 0x4019f7\n    char v33 = *(char *)v30; // 0x4019f7\n    int64_t v34 = file_path + v2; // 0x4019f7\n    char v35 = v33; // 0x4019f7\n    bool v36 = false; // 0x4019f7\n    while (v32 == v33) {\n        int64_t v37 = v31 - 1; // 0x4019f7\n        v30 += v2;\n        v31 = v37;\n        v35 = v32;\n        v36 = true;\n        if (v37 == 0) {\n            // break -> \n            break;\n        }\n        v32 = *(char *)v34;\n        v33 = *(char *)v30;\n        v34 += v2;\n        v35 = v33;\n        v36 = false;\n    }\n    unsigned char v38 = v35;\n    if ((v32 >= v38 && !v36) != v32 < v38) {\n        // 0x401a8a\n        if ((int32_t)function_404590(v12, v34) != -1) {\n            goto lab_0x401a06;\n        } else {\n            goto lab_0x401a9b;\n        }\n    } else {\n        goto lab_0x401a06;\n    }\n  lab_0x401af0:\n    // 0x401af0\n    error(0, *__errno_location(), \"%s\", (char *)function_403bc0(0, 3, file_path));\n    int64_t v39 = (int64_t)\"-\"; // 0x401920\n    int64_t v40 = 2; // 0x401920\n    unsigned char v41 = *(char *)file_path; // 0x401b25\n    char v42 = *(char *)v39; // 0x401b25\n    int64_t v43 = file_path + v2; // 0x401b25\n    char v44 = v42; // 0x401b25\n    bool v45 = false; // 0x401b25\n    while (v41 == v42) {\n        int64_t v46 = v40 - 1; // 0x401b25\n        v39 += v2;\n        v40 = v46;\n        v44 = v41;\n        v45 = true;\n        if (v46 == 0) {\n            // break -> \n            break;\n        }\n        v41 = *(char *)v43;\n        v42 = *(char *)v39;\n        v43 += v2;\n        v44 = v42;\n        v45 = false;\n    }\n    unsigned char v47 = v44;\n    if ((v41 >= v47 && !v45) != v41 < v47) {\n        // 0x401b36\n        function_404590(v12, v43);\n    }\n    // 0x401a76\n    return 0;\n  lab_0x401a06:;\n    // 0x401a06\n    int64_t v48; // bp-65624, 0x401920\n    int64_t v49 = function_401fc0(v19, &v48); // 0x401a0c\n    int64_t v50 = v20; // 0x401a14\n    if (v19 != 0) {\n        uint64_t v51 = v19;\n        int64_t v52 = *(int64_t *)((8 * (v20 / 0x1000000 ^ v51) & 2040) + (int64_t)&g2); // 0x401a31\n        int64_t v53 = v52 ^ 256 * v20; // 0x401a31\n        int64_t v54 = v53; // 0x401a40\n        int64_t v55 = v51 / 256; // 0x401a40\n        v50 = v53;\n        while (v51 >= 256) {\n            // 0x401a20\n            v51 = v55;\n            v52 = *(int64_t *)((8 * (v54 / 0x1000000 ^ v51) & 2040) + (int64_t)&g2);\n            v53 = v52 ^ 256 * v54;\n            v54 = v53;\n            v55 = v51 / 256;\n            v50 = v53;\n        }\n    }\n    int32_t v56 = -1 - (int32_t)v50;\n    char * v57 = (char *)v49;\n    if ((char)a2 != 0) {\n        // 0x401ac9\n        __printf_chk(1, \"%u %s %s\\n\", v56, v57, (char *)file_path);\n    } else {\n        // 0x401a4d\n        __printf_chk(1, \"%u %s\\n\", v56, v57);\n    }\n    // 0x401a61\n    if ((*(char *)g30 & 32) == 0) {\n        // 0x401a76\n        return 1;\n    }\n  lab_0x401b98:\n    // 0x401b98\n    error(1, *__errno_location(), \"-: %s\", dcgettext(NULL, \"write error\", 5));\n    return &g51;\n}\n"
        },
        {
            "funcName": "function_401bd0",
            "funcStartAddr": "401bd0",
            "funcEndAddr": "401ebd",
            "decompiledFuncCode": "int64_t function_401bd0(int64_t a1) {\n    int32_t status = a1; // 0x401be6\n    if (status != 0) {\n        // 0x401bea\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401c0f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401c16\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [FILE]...\\n  or:  %s [OPTION]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print CRC checksum and byte counts of each FILE.\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x401ca0\n    bool v2; // 0x401bd0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401d20\n    int64_t v6 = *(int64_t *)v5; // 0x401d24\n    int64_t v7 = 6; // 0x401d2a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"cksum\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401d36\n        char v11 = *(char *)v9; // 0x401d36\n        char v12 = v11; // 0x401d36\n        bool v13 = false; // 0x401d36\n        while (v10 == v11) {\n            // 0x401d2c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401d36\n            int64_t v15 = v8 + v3; // 0x401d36\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401d42\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x401d42\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401e54;\n        } else {\n            // 0x401e3e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401da4;\n            } else {\n                goto lab_0x401e54;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401da4;\n        } else {\n            // 0x401d8a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401da4;\n            } else {\n                goto lab_0x401da4;\n            }\n        }\n    }\n  lab_0x401e54:\n    // 0x401e54\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401de4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c0f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401da4:\n    // 0x401da4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401de4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c0f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ec0",
            "funcStartAddr": "401ec0",
            "funcEndAddr": "401ec8",
            "decompiledFuncCode": "int64_t function_401ec0(int64_t a1) {\n    // 0x401ec0\n    g38 = a1;\n    int64_t result; // 0x401ec0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "401ed8",
            "decompiledFuncCode": "int64_t function_401ed0(int64_t a1) {\n    // 0x401ed0\n    g37 = a1;\n    int64_t result; // 0x401ed0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "401f7e",
            "decompiledFuncCode": "int64_t function_401ee0(void) {\n    // 0x401ee0\n    int32_t * err_num; // 0x401ef6\n    if ((int32_t)function_405500((int64_t)g30) == 0) {\n        goto lab_0x401f0c;\n    } else {\n        // 0x401ef6\n        err_num = __errno_location();\n        if (g37 == 0) {\n            goto lab_0x401f23;\n        } else {\n            // 0x401f07\n            if (*err_num != 32) {\n                goto lab_0x401f23;\n            } else {\n                goto lab_0x401f0c;\n            }\n        }\n    }\n  lab_0x401f0c:;\n    int64_t result = function_405500((int64_t)g33); // 0x401f13\n    if ((int32_t)result == 0) {\n        // 0x401f1c\n        return result;\n    }\n    // 0x401f5e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x401f23:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401f2f\n    if (g38 == 0) {\n        // 0x401f69\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401f43\n        error(0, *err_num, \"%s: %s\", (char *)function_403b90((int64_t)g38), v1);\n    }\n    // 0x401f5e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f80",
            "funcStartAddr": "401f80",
            "funcEndAddr": "401f85",
            "decompiledFuncCode": "int64_t function_401f80(void) {\n    // 0x401f80\n    int64_t fd; // 0x401f80\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_401f90",
            "funcStartAddr": "401f90",
            "funcEndAddr": "401fb1",
            "decompiledFuncCode": "int64_t function_401f90(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x401f90\n    if (stream == 0) {\n        // 0x401fb0\n        int64_t result; // 0x401f90\n        return result;\n    }\n    // 0x401f95\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_401fc0",
            "funcStartAddr": "401fc0",
            "funcEndAddr": "402008",
            "decompiledFuncCode": "int64_t function_401fc0(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x401fc0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x401fd2\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x401fdb\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x402004\n    return result;\n}\n"
        },
        {
            "funcName": "function_402010",
            "funcStartAddr": "402010",
            "funcEndAddr": "402112",
            "decompiledFuncCode": "int64_t function_402010(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x402010\n    int64_t v1; // 0x402010\n    if ((char)v1 != 0) {\n        // 0x402023\n        int128_t v2; // 0x402010\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g27; // 0x40205a\n    g27 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x40206f\n        g27 = v3;\n        g28 = 0;\n        int64_t result; // 0x402010\n        return result;\n    }\n    int64_t result2 = function_405400(a1, a2, &g4, (int64_t *)&g5, 0, a6); // 0x4020a9\n    int32_t v4 = result2; // 0x4020ae\n    switch (v4) {\n        default: {\n            // 0x4020b8\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x4020da\n                function_404160((int64_t)g30, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x40206f\n            g27 = v3;\n            g28 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_402120",
            "funcStartAddr": "402120",
            "funcEndAddr": "4021b9",
            "decompiledFuncCode": "int64_t function_402120(int64_t str) {\n    // 0x402120\n    if (str == 0) {\n        // 0x402199\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40212e\n    int64_t result = (int64_t)found_char_pos; // 0x40212e\n    if (found_char_pos == NULL) {\n        // 0x402189\n        g39 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402138\n    if (v1 - str < 7) {\n        // 0x402189\n        g39 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x402148\n    bool v2; // 0x402120\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402120\n    int64_t v5 = result - 6; // 0x402120\n    int64_t v6 = 7; // 0x402156\n    unsigned char v7 = *(char *)v5; // 0x402156\n    char v8 = *(char *)v4; // 0x402156\n    char v9 = v8; // 0x402156\n    bool v10 = false; // 0x402156\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402160\n    int64_t v13 = v1; // 0x402160\n    int64_t v14 = 3; // 0x402160\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402189\n        g39 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402172\n    char v16 = *(char *)v12; // 0x402172\n    char v17 = v16; // 0x402172\n    bool v18 = false; // 0x402172\n    while (v15 == v16) {\n        // 0x402162\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40217c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40217e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x402189\n    g39 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4021c0",
            "funcStartAddr": "4021c0",
            "funcEndAddr": "4022b2",
            "decompiledFuncCode": "int64_t function_4021c0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4021d4\n    int64_t result = (int64_t)v1; // 0x4021d4\n    if (result != a1) {\n        // 0x4021e1\n        return result;\n    }\n    int64_t v2 = function_4055c0(); // 0x4021f0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4022a6\n    if (v3 == 85) {\n        // 0x402200\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402298\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x40222e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x40223b\n        // 0x4021e1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402298\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x40227d\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x40228a\n    // 0x4021e1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4022c0",
            "funcStartAddr": "4022c0",
            "funcEndAddr": "402317",
            "decompiledFuncCode": "int64_t function_4022c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4022c0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402308\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402317",
            "funcStartAddr": "402317",
            "funcEndAddr": "4034e1",
            "decompiledFuncCode": "int64_t function_402317(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402361\n    int64_t v3 = 0; // 0x402361\n    int64_t v4; // 0x402317\n    int64_t v5; // 0x402317\n    int64_t v6; // 0x402317\n    int64_t v7; // 0x402317\n    int64_t v8; // 0x402317\n    int64_t v9; // 0x402317\n    int64_t v10; // 0x402317\n    int64_t v11; // 0x402317\n    int64_t v12; // 0x402317\n    int64_t v13; // 0x402317\n    int64_t v14; // 0x402317\n    int64_t v15; // 0x402317\n    int64_t v16; // 0x402317\n    int64_t v17; // 0x402317\n    int64_t v18; // 0x402317\n    int64_t result; // 0x402317\n    int64_t v19; // 0x402317\n    int32_t wc; // bp+132, 0x402317\n    int64_t ps; // bp+136, 0x402317\n    char v20; // 0x4028d0\n    int64_t v21; // 0x4028d0\n    int64_t v22; // 0x402c78\n    int64_t v23; // 0x402317\n    int64_t v24; // 0x402c97\n    int32_t v25; // 0x402317\n    while (true) {\n      lab_0x402368_2:\n        // 0x402368\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402317\n        int64_t v27; // 0x40239c\n        while (true) {\n          lab_0x402368:\n            // 0x402368\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402373\n            if (v15 == -1) {\n                // 0x402375\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402383\n            if (v28) {\n                // break (via goto) -> 0x402ae8\n                goto lab_0x402ae8;\n            }\n            // 0x40238c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g50 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40297b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4024c1;\n                    }\n                    // 0x402d9d\n                    v26 = v5 + 1;\n                    goto lab_0x402368;\n                }\n                case 7: {\n                    goto lab_0x4024c1;\n                }\n                case 8: {\n                    goto lab_0x4024c1;\n                }\n                case 9: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4024c1;\n                }\n                case 12: {\n                    goto lab_0x4024c1;\n                }\n                case 13: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40248d;\n                }\n                case 36: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4024c1;\n                }\n                case 38: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4024c1;\n                }\n                case 44: {\n                    goto lab_0x4024c1;\n                }\n                case 45: {\n                    goto lab_0x4024c1;\n                }\n                case 46: {\n                    goto lab_0x4024c1;\n                }\n                case 47: {\n                    goto lab_0x4024c1;\n                }\n                case 48: {\n                    goto lab_0x4024c1;\n                }\n                case 49: {\n                    goto lab_0x4024c1;\n                }\n                case 50: {\n                    goto lab_0x4024c1;\n                }\n                case 51: {\n                    goto lab_0x4024c1;\n                }\n                case 52: {\n                    goto lab_0x4024c1;\n                }\n                case 53: {\n                    goto lab_0x4024c1;\n                }\n                case 54: {\n                    goto lab_0x4024c1;\n                }\n                case 55: {\n                    goto lab_0x4024c1;\n                }\n                case 56: {\n                    goto lab_0x4024c1;\n                }\n                case 57: {\n                    goto lab_0x4024c1;\n                }\n                case 58: {\n                    goto lab_0x4024c1;\n                }\n                case 59: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4024c1;\n                }\n                case 66: {\n                    goto lab_0x4024c1;\n                }\n                case 67: {\n                    goto lab_0x4024c1;\n                }\n                case 68: {\n                    goto lab_0x4024c1;\n                }\n                case 69: {\n                    goto lab_0x4024c1;\n                }\n                case 70: {\n                    goto lab_0x4024c1;\n                }\n                case 71: {\n                    goto lab_0x4024c1;\n                }\n                case 72: {\n                    goto lab_0x4024c1;\n                }\n                case 73: {\n                    goto lab_0x4024c1;\n                }\n                case 74: {\n                    goto lab_0x4024c1;\n                }\n                case 75: {\n                    goto lab_0x4024c1;\n                }\n                case 76: {\n                    goto lab_0x4024c1;\n                }\n                case 77: {\n                    goto lab_0x4024c1;\n                }\n                case 78: {\n                    goto lab_0x4024c1;\n                }\n                case 79: {\n                    goto lab_0x4024c1;\n                }\n                case 80: {\n                    goto lab_0x4024c1;\n                }\n                case 81: {\n                    goto lab_0x4024c1;\n                }\n                case 82: {\n                    goto lab_0x4024c1;\n                }\n                case 83: {\n                    goto lab_0x4024c1;\n                }\n                case 84: {\n                    goto lab_0x4024c1;\n                }\n                case 85: {\n                    goto lab_0x4024c1;\n                }\n                case 86: {\n                    goto lab_0x4024c1;\n                }\n                case 87: {\n                    goto lab_0x4024c1;\n                }\n                case 88: {\n                    goto lab_0x4024c1;\n                }\n                case 89: {\n                    goto lab_0x4024c1;\n                }\n                case 90: {\n                    goto lab_0x4024c1;\n                }\n                case 91: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4024c1;\n                }\n                case 94: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4024c1;\n                }\n                case 96: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4024c1;\n                }\n                case 98: {\n                    goto lab_0x4024c1;\n                }\n                case 99: {\n                    goto lab_0x4024c1;\n                }\n                case 100: {\n                    goto lab_0x4024c1;\n                }\n                case 101: {\n                    goto lab_0x4024c1;\n                }\n                case 102: {\n                    goto lab_0x4024c1;\n                }\n                case 103: {\n                    goto lab_0x4024c1;\n                }\n                case 104: {\n                    goto lab_0x4024c1;\n                }\n                case 105: {\n                    goto lab_0x4024c1;\n                }\n                case 106: {\n                    goto lab_0x4024c1;\n                }\n                case 107: {\n                    goto lab_0x4024c1;\n                }\n                case 108: {\n                    goto lab_0x4024c1;\n                }\n                case 109: {\n                    goto lab_0x4024c1;\n                }\n                case 110: {\n                    goto lab_0x4024c1;\n                }\n                case 111: {\n                    goto lab_0x4024c1;\n                }\n                case 112: {\n                    goto lab_0x4024c1;\n                }\n                case 113: {\n                    goto lab_0x4024c1;\n                }\n                case 114: {\n                    goto lab_0x4024c1;\n                }\n                case 115: {\n                    goto lab_0x4024c1;\n                }\n                case 116: {\n                    goto lab_0x4024c1;\n                }\n                case 117: {\n                    goto lab_0x4024c1;\n                }\n                case 118: {\n                    goto lab_0x4024c1;\n                }\n                case 119: {\n                    goto lab_0x4024c1;\n                }\n                case 120: {\n                    goto lab_0x4024c1;\n                }\n                case 121: {\n                    goto lab_0x4024c1;\n                }\n                case 122: {\n                    goto lab_0x4024c1;\n                }\n                case 123: {\n                    goto lab_0x402465;\n                }\n                case 124: {\n                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402465;\n                }\n                case 126: {\n                    goto lab_0x40248d;\n                }\n                default: {\n                    goto lab_0x402865;\n                }\n            }\n        }\n      lab_0x402865:\n        if (v23 != 1) {\n            // 0x402bd0\n            ps = 0;\n            int64_t len = v15; // 0x402be0\n            if (v15 == -1) {\n                // 0x402be2\n                len = strlen((char *)str);\n            }\n            // 0x402c0e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402c6f:\n                // 0x402c6f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402c74\n                int64_t v30 = v29 + str;\n                v24 = function_405480(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4031ea_2;\n                    }\n                    case -1: {\n                        goto lab_0x4031ea_2;\n                    }\n                    case -2: {\n                        // 0x4032cd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403307\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40330a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403317\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403310\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4031ea\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4031ea_2;\n                    }\n                    case 1: {\n                        goto lab_0x402c40;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402cec\n                        char v34 = *(char *)v33; // 0x402cfd\n                        unsigned char v35; // 0x402317\n                        if (v34 < 125) {\n                            // 0x402d08\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402d1f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402cf0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402cfd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402d08\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402d1f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402cf0\n                            v33++;\n                        }\n                        goto lab_0x402c40;\n                    }\n                }\n            }\n            goto lab_0x4031ea_2;\n        } else {\n            // 0x4028b4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4024c1;\n        }\n    }\n  lab_0x402ae8:\n    // 0x402ae8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4033ea\n        if (v8 > result) {\n            // 0x4033f3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402717\n        return result;\n    }\n    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4024c1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4024d0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4026da_2;\n        }\n    }\n    int64_t v39 = result; // 0x4025d1\n    char v40 = v20; // 0x4025d1\n    int64_t v41 = v38; // 0x4025d1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4025d1\n    int64_t v43 = v36; // 0x4025d1\n    goto lab_0x40254d;\n  lab_0x4026da_2:\n    // 0x402717\n    return function_4022c0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4031ea_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4024c1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402dbe\n        int64_t v50 = v5 + 1; // 0x402ea1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402ea8\n        char v52 = v20; // 0x402ea8\n        int64_t v53 = result; // 0x402ea8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402e71\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402e75\n            int64_t v56 = v54 + 1; // 0x402e7a\n            int64_t v57 = v51 + 1; // 0x402ea1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402e6c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402e71\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402e75\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40254d;\n    }\n  lab_0x402c40:\n    // 0x402c40\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402c5f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402c62\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4031ea\n        goto lab_0x4031ea_2;\n    }\n    goto lab_0x402c6f;\n  lab_0x40248d:\n    // 0x40248d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4026da_2;\n    }\n    goto lab_0x4024c1;\n  lab_0x402465:;\n    bool v60 = v15 == 1; // 0x402470\n    if (v15 == -1) {\n        // 0x402472\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40247e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4024c1;\n    } else {\n        goto lab_0x40248d;\n    }\n  lab_0x40254d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402552\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402556\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402368_2;\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "40368e",
            "decompiledFuncCode": "int64_t function_4034f0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4034f2\n    int32_t * v3 = __errno_location(); // 0x40350c\n    int64_t v4 = (int64_t)g22; // 0x403511\n    int32_t v5 = *v3; // 0x40351b\n    int64_t v6 = v4; // 0x403531\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403689\n            function_404550(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403540\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403547\n        int64_t v9; // 0x4034f0\n        if (g22 == &g23) {\n            int64_t v10 = function_404360(0, v8); // 0x40366a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x40366f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404360(v4, v8); // 0x40355b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40356a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40356a\n        int32_t v14 = v7; // 0x403571\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4035a1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4035ab\n    int64_t * v17 = (int64_t *)v15; // 0x4035ae\n    uint64_t v18 = *v17; // 0x4035ae\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4035b1\n    int64_t result = *v19; // 0x4035b1\n    int64_t v20; // 0x4034f0\n    uint64_t v21 = function_4022c0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4035d4\n    if (v18 > v21) {\n        // 0x40364b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4035e7\n    *v17 = v22;\n    if (result != (int64_t)&g40) {\n        // 0x4035f7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404300(v22); // 0x403611\n    *v19 = result2;\n    int64_t v23; // 0x4034f0\n    function_4022c0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40364b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403690",
            "funcStartAddr": "403690",
            "funcEndAddr": "4036c4",
            "decompiledFuncCode": "int64_t function_403690(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403697\n    int64_t result = function_404500(a1 == 0 ? (int64_t)&g41 : a1, 56); // 0x4036b6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "4036df",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g41 : a1); // 0x4036dc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4036e0",
            "funcStartAddr": "4036e0",
            "funcEndAddr": "4036ef",
            "decompiledFuncCode": "int64_t function_4036e0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x4036e8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_4036f0",
            "funcStartAddr": "4036f0",
            "funcEndAddr": "403723",
            "decompiledFuncCode": "int64_t function_4036f0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 + 8 : a1 + 8; // 0x403709\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40370e\n    uint32_t v3 = *v2; // 0x40370e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403712\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "403743",
            "decompiledFuncCode": "int64_t function_403730(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g41 + 4 : a1 + 4); // 0x40373c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403750",
            "funcStartAddr": "403750",
            "funcEndAddr": "40377b",
            "decompiledFuncCode": "int64_t function_403750(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x403758\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403775\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40376c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_403780",
            "funcStartAddr": "403780",
            "funcEndAddr": "4037f2",
            "decompiledFuncCode": "int64_t function_403780(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g41 : a5; // 0x4037a2\n    int32_t * v2 = __errno_location(); // 0x4037ab\n    uint32_t v3 = *(int32_t *)v1; // 0x4037cb\n    int64_t result = function_4022c0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4037da\n    return result;\n}\n"
        },
        {
            "funcName": "function_403800",
            "funcStartAddr": "403800",
            "funcEndAddr": "4038e1",
            "decompiledFuncCode": "int64_t function_403800(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g41 : a4; // 0x403822\n    int32_t * v2 = __errno_location(); // 0x403828\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403847\n    int32_t * v4 = (int32_t *)v1; // 0x40384a\n    int64_t v5 = function_4022c0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403865\n    int64_t v6 = v5 + 1; // 0x40386a\n    int64_t result = function_404300(v6); // 0x40387f\n    function_4022c0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4038c4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4038cd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "4038fa",
            "decompiledFuncCode": "int64_t function_4038f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4038f0\n    return function_403800(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403900",
            "funcStartAddr": "403900",
            "funcEndAddr": "403995",
            "decompiledFuncCode": "int64_t function_403900(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x403900\n    int64_t v2 = v1; // 0x403900\n    int64_t v3 = v2; // 0x403914\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403933\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g51;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403930\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g51;\n        }\n    }\n    int64_t v6 = v3; // 0x40394d\n    if (g23 != 0x6092a0) {\n        // 0x40394f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g40;\n        v6 = &g51;\n    }\n    int64_t result = v6; // 0x403971\n    if (g22 != &g23) {\n        // 0x403973\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g51;\n    }\n    // 0x403986\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4039a0",
            "funcStartAddr": "4039a0",
            "funcEndAddr": "4039b1",
            "decompiledFuncCode": "int64_t function_4039a0(void) {\n    // 0x4039a0\n    int64_t v1; // 0x4039a0\n    return function_4034f0(v1, v1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_4039c0",
            "funcStartAddr": "4039c0",
            "funcEndAddr": "4039ca",
            "decompiledFuncCode": "int64_t function_4039c0(void) {\n    // 0x4039c0\n    int64_t v1; // 0x4039c0\n    return function_4034f0(v1, v1, v1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "4039e6",
            "decompiledFuncCode": "int64_t function_4039d0(int64_t a1) {\n    // 0x4039d0\n    return function_4034f0(0, a1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "403a02",
            "decompiledFuncCode": "int64_t function_4039f0(int64_t a1, int64_t a2) {\n    // 0x4039f0\n    return function_4034f0(0, a1, a2, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403a78",
            "decompiledFuncCode": "int64_t function_403a10(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403a20\n    return function_4034f0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403ae4",
            "decompiledFuncCode": "int64_t function_403a80(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403a90\n    return function_4034f0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403afc",
            "decompiledFuncCode": "int64_t function_403af0(int64_t a1, int64_t a2) {\n    // 0x403af0\n    return function_403a10(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b0f",
            "decompiledFuncCode": "int64_t function_403b00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403b00\n    return function_403a80(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403b80",
            "decompiledFuncCode": "int64_t function_403b10(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x403b1d\n    int128_t v2 = __asm_movdqa(g42); // 0x403b25\n    int128_t v3 = __asm_movdqa(g43); // 0x403b2d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403b42\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403b58\n    uint32_t v6 = *v5; // 0x403b58\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403b5d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4034f0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403b80",
            "funcStartAddr": "403b80",
            "funcEndAddr": "403b8d",
            "decompiledFuncCode": "int64_t function_403b80(int64_t a1, int64_t a2) {\n    // 0x403b80\n    return function_403b10(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403b90",
            "funcStartAddr": "403b90",
            "funcEndAddr": "403ba1",
            "decompiledFuncCode": "int64_t function_403b90(int64_t a1) {\n    // 0x403b90\n    return function_403b10(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403bba",
            "decompiledFuncCode": "int64_t function_403bb0(void) {\n    // 0x403bb0\n    int64_t v1; // 0x403bb0\n    return function_403b10(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403bc0",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403c2e",
            "decompiledFuncCode": "int64_t function_403bc0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403bda\n    return function_4034f0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403c9c",
            "decompiledFuncCode": "int64_t function_403c30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x403c37\n    int128_t v2 = __asm_movdqa(g42); // 0x403c3f\n    int128_t v3 = __asm_movdqa(g43); // 0x403c47\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403c69\n    if (a2 == 0 || a3 == 0) {\n        // 0x403c97\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403c7a\n    return function_4034f0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403ca0",
            "funcStartAddr": "403ca0",
            "funcEndAddr": "403ca9",
            "decompiledFuncCode": "int64_t function_403ca0(void) {\n    // 0x403ca0\n    int64_t v1; // 0x403ca0\n    return function_403c30(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403cb0",
            "funcStartAddr": "403cb0",
            "funcEndAddr": "403cc7",
            "decompiledFuncCode": "int64_t function_403cb0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403cb0\n    return function_403c30(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403cd0",
            "funcStartAddr": "403cd0",
            "funcEndAddr": "403ce3",
            "decompiledFuncCode": "int64_t function_403cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403cd0\n    return function_403c30(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403cf0",
            "funcStartAddr": "403cf0",
            "funcEndAddr": "403cfa",
            "decompiledFuncCode": "int64_t function_403cf0(void) {\n    // 0x403cf0\n    int64_t v1; // 0x403cf0\n    return function_4034f0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d12",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, int64_t a2) {\n    // 0x403d00\n    return function_4034f0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_403d20",
            "funcStartAddr": "403d20",
            "funcEndAddr": "403d31",
            "decompiledFuncCode": "int64_t function_403d20(void) {\n    // 0x403d20\n    int64_t v1; // 0x403d20\n    return function_4034f0(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403d40",
            "funcStartAddr": "403d40",
            "funcEndAddr": "403d56",
            "decompiledFuncCode": "int64_t function_403d40(int64_t a1) {\n    // 0x403d40\n    return function_4034f0(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "40413d",
            "decompiledFuncCode": "int64_t function_403d60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403df8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403d7c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403d96\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403ddb\n    if (a6 < 10) {\n        // 0x403dea\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403ee2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404140",
            "funcStartAddr": "404140",
            "funcEndAddr": "404160",
            "decompiledFuncCode": "int64_t function_404140(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404140\n    if (a5 == 0) {\n        // 0x40415b\n        return function_403d60(a1, a2, a3, a4, a5, 0, (int64_t)&g51);\n    }\n    int64_t v1 = 0; // 0x404147\n    v1++;\n    int64_t v2 = v1; // 0x404159\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404150\n        v1++;\n        v2 = v1;\n    }\n    // 0x40415b\n    return function_403d60(a1, a2, a3, a4, a5, v2, (int64_t)&g51);\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "4041c0",
            "decompiledFuncCode": "int64_t function_404160(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x404160\n    int64_t v4 = &v3; // 0x404160\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x404193\n    int64_t v7; // 0x40417d\n    int64_t * v8; // 0x40419b\n    int64_t v9; // 0x40419b\n    int64_t v10; // 0x4041a7\n    if (v6 < 48) {\n        // 0x404170\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x4041b3\n            break;\n        }\n    } else {\n        // 0x40419b\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x4041b3\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x404191\n    while (v5 != 9) {\n        // 0x404189\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x404170\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x4041b3\n                break;\n            }\n        } else {\n            // 0x40419b\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x4041b3\n                break;\n            }\n        }\n        // 0x404189\n        v11 = 10;\n    }\n    // 0x4041b3\n    return function_403d60(a1, a2, a3, a4, v4, v11, (int64_t)&g51);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "40427c",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4041c0\n    int64_t v1; // bp-168, 0x4041c0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4041c0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4041c0\n    int64_t v8; // 0x4041c0\n    int64_t v9; // bp-56, 0x4041c0\n    int64_t v10; // 0x404225\n    int64_t v11; // 0x404249\n    if ((int32_t)v6 < 48) {\n        // 0x404210\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404260\n            break;\n        }\n    } else {\n        // 0x404242\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404260\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40423a\n    int64_t v13 = 10; // 0x40423a\n    while (v5 != 9) {\n        // 0x40423c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404210\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404260\n                break;\n            }\n        } else {\n            // 0x404242\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404260\n                break;\n            }\n        }\n        // 0x404232\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404260\n    int64_t v14; // bp-136, 0x4041c0\n    int64_t result = function_403d60(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g51); // 0x40426f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "4042f4",
            "decompiledFuncCode": "int64_t function_404280(int64_t a1) {\n    // 0x404280\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4042e3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40431a",
            "decompiledFuncCode": "int64_t function_404300(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404304\n    if (size != 0 != (mem == NULL)) {\n        // 0x404313\n        return (int64_t)mem;\n    }\n    // 0x404315\n    function_404550(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404320",
            "funcStartAddr": "404320",
            "funcEndAddr": "404341",
            "decompiledFuncCode": "int64_t function_404320(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404323\n    int64_t v2 = v1; // 0x404323\n    if (v2 < 0) {\n        // 0x40433b\n        function_404550(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404339\n        return function_404300(v2);\n    }\n    // 0x40433b\n    function_404550(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404350",
            "funcStartAddr": "404350",
            "funcEndAddr": "404352",
            "decompiledFuncCode": "int64_t function_404350(void) {\n    // 0x404350\n    int64_t v1; // 0x404350\n    return function_404300(v1);\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "404396",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404388\n        free(v1);\n        return (int32_t)&g51 ^ (int32_t)&g51;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404371\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404380\n        return (int64_t)mem;\n    }\n    // 0x404391\n    function_404550(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043c1",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4043a3\n    int64_t v2 = v1; // 0x4043a3\n    if (v2 < 0) {\n        // 0x4043bb\n        function_404550(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4043b9\n        return function_404360(a1, v2);\n    }\n    // 0x4043bb\n    function_404550(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4043d0",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "404456",
            "decompiledFuncCode": "int64_t function_4043d0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40442b\n            function_404550(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404360(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404413\n    if (a2 == 0) {\n        // 0x404438\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404418\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40442b\n        function_404550(a1);\n        // UNREACHABLE\n    }\n    // 0x4043fa\n    *(int64_t *)a2 = v2;\n    return function_404360(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "4044b0",
            "decompiledFuncCode": "int64_t function_404460(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404460\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4044aa\n            function_404550(a1);\n            // UNREACHABLE\n        }\n        // 0x404482\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404360(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404495\n        *(int64_t *)a2 = 128;\n        return function_404360(0, 128);\n    }\n    // 0x4044a8\n    if (a2 < 0) {\n        // 0x4044aa\n        function_404550(a1);\n        // UNREACHABLE\n    }\n    // 0x404482\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404360(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4044b0",
            "funcStartAddr": "4044b0",
            "funcEndAddr": "4044c7",
            "decompiledFuncCode": "int64_t function_4044b0(int64_t a1, int64_t a2) {\n    // 0x4044b0\n    return (int64_t)memset((int64_t *)function_404300(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "4044fe",
            "decompiledFuncCode": "int64_t function_4044d0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4044d7\n    if ((int64_t)v1 < 0) {\n        // 0x4044f9\n        function_404550(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4044f9\n        function_404550(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4044ea\n    if (mem != NULL) {\n        // 0x4044f4\n        return (int64_t)mem;\n    }\n    // 0x4044f9\n    function_404550(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "404528",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404300(a2); // 0x40450f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404530",
            "funcStartAddr": "404530",
            "funcEndAddr": "404543",
            "decompiledFuncCode": "int64_t function_404530(int64_t str) {\n    // 0x404530\n    return function_404500(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "404581",
            "decompiledFuncCode": "int64_t function_404550(int64_t a1) {\n    // 0x404550\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "40460b",
            "decompiledFuncCode": "int64_t function_404590(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404597\n    if (fileno(stream) < 0) {\n        // 0x4045f7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4045aa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4045db\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4045f7\n            return fclose(stream);\n        }\n    }\n    // 0x4045ac\n    if ((int32_t)function_404610(a1, v1) == 0) {\n        // 0x4045f7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4045b8\n    int32_t v3 = *v2; // 0x4045c0\n    int64_t result = fclose(stream); // 0x4045ce\n    if (v3 != 0) {\n        // 0x404600\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4045d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "404650",
            "decompiledFuncCode": "int64_t function_404610(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40462a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40462a\n        return fflush(stream);\n    }\n    // 0x404638\n    function_404650(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "4046a7",
            "decompiledFuncCode": "int64_t function_404650(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404650\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40465a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40468b\n    int64_t result = -1; // 0x404694\n    if (v1 != -1) {\n        // 0x404696\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4046a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046b0",
            "funcStartAddr": "4046b0",
            "funcEndAddr": "40478f",
            "decompiledFuncCode": "int64_t function_4046b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4046bc\n    uint32_t v2 = *v1; // 0x4046bc\n    int64_t v3 = a2 & 0xffffffff; // 0x4046c1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4046c4\n    uint64_t v5 = (int64_t)*v4; // 0x4046c4\n    int64_t v6; // 0x404732\n    if (v3 <= v5) {\n      lab_0x40472c_2:\n        // 0x40472c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4046b2\n    int64_t v8 = v2; // 0x4046b0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40472c\n        goto lab_0x40472c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4046e8\n    int64_t v17; // 0x4046f6\n    int64_t * v18; // 0x404710\n    int64_t * v19; // 0x404713\n    int64_t v20; // 0x40471e\n    int64_t v21; // 0x4046f6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4046f3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404710\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404727\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40472c\n            goto lab_0x40472c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40472c\n            goto lab_0x40472c_2;\n        }\n        // 0x4046e2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40476b\n    int64_t * v23 = (int64_t *)v22; // 0x404770\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404773\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404770\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404787\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4046dd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40472c\n            goto lab_0x40472c_2;\n        }\n        // 0x4046e2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4046f3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404710\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404727\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40472c\n                goto lab_0x40472c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40472c\n                goto lab_0x40472c_2;\n            }\n            // 0x4046e2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404750\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404770\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404787\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40472c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "404dac",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4047af\n    int64_t v2 = *v1; // 0x4047af\n    char * str2 = (char *)v2; // 0x4047bc\n    char c = *str2; // 0x4047bc\n    int64_t v3 = v2; // 0x4047e8\n    int64_t v4 = 0; // 0x404790\n    int32_t v5; // 0x404790\n    int64_t v6; // 0x404790\n    int64_t v7; // 0x404790\n    int64_t v8; // 0x404790\n    int64_t v9; // 0x404790\n    int64_t v10; // 0x404790\n    int64_t v11; // 0x404790\n    int64_t v12; // 0x404790\n    int64_t v13; // 0x404790\n    int64_t str3; // 0x404790\n    int64_t v14; // 0x404790\n    int64_t v15; // 0x404790\n    int64_t v16; // 0x404790\n    int64_t v17; // 0x404790\n    int32_t v18; // 0x404790\n    int32_t v19; // 0x404790\n    int32_t v20; // 0x404790\n    int32_t v21; // 0x404790\n    int32_t v22; // 0x404790\n    int32_t v23; // 0x404790\n    int32_t v24; // 0x404790\n    int32_t v25; // 0x404790\n    int32_t v26; // 0x404790\n    int32_t v27; // 0x404790\n    int32_t v28; // 0x404790\n    int32_t v29; // 0x404790\n    int64_t nmemb; // 0x404790\n    int64_t v30; // 0x404790\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4047ec\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4047e8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4047f8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4047fe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4047c8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40482c\n                int64_t v34; // 0x404790\n                int64_t v35; // 0x404790\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404835\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4049b0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404846\n                int64_t v37 = *(int64_t *)v36; // 0x40484a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404820\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404835\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4049b0;\n                        }\n                    }\n                    // 0x404846\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404896:\n                    // 0x404896\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4048f0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404a60\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4048f0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404a10\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4048ba;\n                                } else {\n                                    // 0x404a1c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4048ba;\n                                    } else {\n                                        // 0x404a2a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4048ba;\n                                        } else {\n                                            goto lab_0x4048f0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4048ba;\n                            }\n                        }\n                    }\n                }\n              lab_0x404901:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404ad6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404c82\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x404ca2\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404cef\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x404d09\n                            int64_t v45; // 0x404d0b\n                            if (*(char *)v42 != 0) {\n                                // 0x404d0b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404d03\n                            while (v17 + nmemb != v42) {\n                                // 0x404d05\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404d0b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x404cf8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404d30\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x404ae4\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404c3f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404b39\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404b50\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4049fe\n                    return 63;\n                }\n                // 0x404920\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4049a4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4049b0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4049c0\n                    uint32_t v50 = *v49; // 0x4049c0\n                    int64_t v51 = v50; // 0x4049c0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4049ca\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4049d3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404bff\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404baa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4049fe\n                            return 63;\n                        }\n                        // 0x404a48\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404d5f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404c5d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404c70\n                                // 0x4049fe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404b6e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404b82\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4049eb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4049ee\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4049f2\n                    int64_t result = v59; // 0x4049f8\n                    if (v58 != 0) {\n                        // 0x4049fa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4049fe\n                    return result;\n                }\n            } else {\n                // 0x4047fe\n                v5 = v32;\n            }\n            // break -> 0x404925\n            break;\n        }\n    }\n    // 0x404925\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40493d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404947\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4049fe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404a89\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404976\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404986\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4048f0:\n    // 0x4048f0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4048f0\n    int64_t v63 = *(int64_t *)v62; // 0x4048f4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404901\n        goto lab_0x404901;\n    }\n    goto lab_0x404896;\n  lab_0x4048ba:\n    // 0x4048ba\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404790\n    int32_t v65; // 0x404790\n    int32_t v66; // 0x404790\n    if (v27 != 0) {\n        goto lab_0x4048f0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404a70\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4048f0;\n            } else {\n                goto lab_0x4048e1;\n            }\n        } else {\n            // 0x4048d5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404bcc\n                int64_t v67 = (int64_t)mem; // 0x404bcc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4048f0;\n                } else {\n                    // 0x404bdf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4048e1;\n                }\n            } else {\n                goto lab_0x4048e1;\n            }\n        }\n    }\n  lab_0x4048e1:\n    // 0x4048e1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4048f0;\n}\n"
        },
        {
            "funcName": "function_404db0",
            "funcStartAddr": "404db0",
            "funcEndAddr": "405376",
            "decompiledFuncCode": "int64_t function_404db0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404dd1\n    if (v3 < 1) {\n        // 0x404f8e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404dcd\n    int32_t v5 = *(int32_t *)a7; // 0x404dd9\n    uint64_t v6 = a1 & 0xffffffff; // 0x404ddb\n    int64_t v7 = v2; // 0x404de0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404de3\n    *v8 = 0;\n    int64_t v9; // 0x404db0\n    int64_t v10; // 0x404db0\n    int64_t v11; // 0x404db0\n    int64_t v12; // 0x404db0\n    int64_t str; // 0x404db0\n    int64_t v13; // 0x404db0\n    int64_t v14; // 0x404db0\n    int64_t v15; // 0x404db0\n    int64_t v16; // 0x404db0\n    int64_t v17; // 0x404db0\n    int32_t v18; // 0x404db0\n    char v19; // 0x404db0\n    if (v5 == 0) {\n        // 0x404fc8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404dfa;\n    } else {\n        // 0x404df3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404e40\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404e43\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404f08;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404e56\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404e66\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404f1c;\n                } else {\n                    goto lab_0x404e78;\n                }\n            }\n        } else {\n            goto lab_0x404dfa;\n        }\n    }\n  lab_0x404dfa:\n    // 0x404dfa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404e00\n    *v24 = 0;\n    int64_t v25; // 0x404db0\n    int64_t v26; // 0x404db0\n    int64_t v27; // 0x404db0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404ef0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404efd;\n        }\n        case 43: {\n            // 0x405200\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404efd;\n        }\n        default: {\n            // 0x404e1c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40517f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405298\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404efd;\n                } else {\n                    // 0x40518d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404e2a;\n                }\n            } else {\n                goto lab_0x404e2a;\n            }\n        }\n    }\n  lab_0x404f08:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404f0f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404e78;\n    } else {\n        goto lab_0x404f1c;\n    }\n  lab_0x404e2a:\n    // 0x404e2a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404efd;\n  lab_0x404efd:\n    // 0x404efd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404f08;\n  lab_0x404e78:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404e78\n    int64_t v31 = v30; // 0x404e78\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404e7a\n    if ((int64_t)*v32 > v31) {\n        // 0x404e7f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404e82\n    if (*v33 > v30) {\n        // 0x404e87\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404e8a\n    int64_t v35 = v31; // 0x404e8e\n    int64_t v36 = v15; // 0x404e8e\n    int64_t v37; // 0x404db0\n    int64_t v38; // 0x404db0\n    int64_t v39; // 0x404db0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404ff8\n        int64_t v41 = v40; // 0x404ff8\n        v2 = v41;\n        int64_t v42; // 0x404db0\n        if (*v33 == v40) {\n            // 0x4051e0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4051e8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405004\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405008\n                function_4046b0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405018\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405021\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40502a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405041\n            int64_t v47 = v45 & 0xffffffff; // 0x405045\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40504e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405054\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405056;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405030\n            int64_t v49 = v48 & 0xffffffff; // 0x405030\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405041\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40504e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405054\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405056;\n                    }\n                }\n                // 0x405030\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4051f8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405056;\n    } else {\n        goto lab_0x404e94;\n    }\n  lab_0x404f1c:\n    // 0x404f1c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404f1f\n    int64_t v51 = v12; // 0x404f1f\n    int64_t v52 = v14; // 0x404f1f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404e78;\n    } else {\n        goto lab_0x404f25;\n    }\n  lab_0x404e94:;\n    int32_t v53 = v35; // 0x404e94\n    int64_t v54; // 0x404db0\n    int64_t v55; // 0x404db0\n    int64_t v56; // 0x404db0\n    int64_t v57; // 0x404db0\n    int64_t v58; // 0x404db0\n    int64_t v59; // 0x404db0\n    char * v60; // 0x404db0\n    int64_t v61; // 0x404db0\n    int64_t v62; // 0x404ea9\n    int64_t v63; // 0x404db0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404fe3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404fe6;\n    } else {\n        // 0x404e9c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404db0\n        int64_t v66 = v65 ? -1 : 1; // 0x404eb0\n        int64_t v67 = (int64_t)\"--\"; // 0x404db0\n        int64_t v68 = v62; // 0x404db0\n        int64_t v69 = 3; // 0x404eb0\n        unsigned char v70 = *(char *)v68; // 0x404eb0\n        char v71 = *(char *)v67; // 0x404eb0\n        char v72 = v71; // 0x404eb0\n        bool v73 = false; // 0x404eb0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404fa0\n            if (*(char *)v62 == 45) {\n                // 0x405060\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405060\n                if (c == 0) {\n                    goto lab_0x404faa;\n                } else {\n                    // 0x40506d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4050f0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4052d3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405145;\n                        } else {\n                            // 0x40507e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4050f0;\n                            } else {\n                                // 0x405083\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4050a4;\n                                } else {\n                                    // 0x40508a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4050f0;\n                                    } else {\n                                        goto lab_0x4050a4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404faa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404ec0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404ec3\n            int64_t v77 = v35 + 1; // 0x404ec6\n            int32_t v78 = v77; // 0x404ec9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405230\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404ed7\n                    function_4046b0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404ee5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404fe6;\n        }\n    }\n  lab_0x404f25:;\n    // 0x404f25\n    int64_t v79; // bp-104, 0x404db0\n    int64_t v80 = &v79; // 0x404dba\n    int64_t v81 = v50 + 1; // 0x404f25\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404f2c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404f31\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404f35\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404f39\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404f41\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404f46\n    int32_t c2 = v84; // 0x404f46\n    char * found_char_pos = strchr(str2, c2); // 0x404f46\n    int64_t v87 = *v82; // 0x404f4b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404f55\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404f60\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405250\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40521d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404f8e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404f46\n    char v91 = *(char *)(v90 + 1); // 0x404f7b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404f35\n        if (v91 != 58) {\n            // 0x404f8e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4051a4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4052a8\n                *v8 = 0;\n            } else {\n                // 0x40528c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4051ce\n            *v83 = 0;\n            // 0x404f8e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4051ae\n        if (v93 != 0) {\n            // 0x405240\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4051ce\n            *v83 = 0;\n            // 0x404f8e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4051c1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4051ce\n            *v83 = 0;\n            // 0x404f8e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40530a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4052ba\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4052c1\n        // 0x4051ce\n        *v83 = 0;\n        // 0x404f8e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405119\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40511b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405340\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4052f1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4052f8\n            // 0x404f8e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405126\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40512a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405145;\n  lab_0x405056:\n    // 0x405056\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404e94;\n  lab_0x405145:;\n    int64_t v99 = function_404790(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405163\n    // 0x404f8e\n    return v99 & 0xffffffff;\n  lab_0x404fe6:;\n    int32_t v100 = v55; // 0x404fe6\n    if (v100 != (int32_t)v59) {\n        // 0x404fea\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404f8e\n    return 0xffffffff;\n  lab_0x404faa:\n    // 0x404faa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404fb1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404f8e\n    return v99 & 0xffffffff;\n  lab_0x4050f0:\n    // 0x4050f0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404f25;\n  lab_0x4050a4:\n    // 0x4050a4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404790(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x4050ca\n    if ((int32_t)v101 != -1) {\n        // 0x404f8e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4050df\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4050f0;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "4053d6",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1) {\n    // 0x405380\n    *(int32_t *)&g44 = g28;\n    *(int32_t *)&g45 = g27;\n    int64_t v1; // 0x405380\n    int64_t result = function_404db0(v1, v1, v1, v1, v1, v1, &g44, a1 & 0xffffffff); // 0x4053a6\n    g28 = *(int32_t *)&g44;\n    g49 = g47;\n    *(int32_t *)&g26 = g46;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053e0",
            "funcStartAddr": "4053e0",
            "funcEndAddr": "4053f8",
            "decompiledFuncCode": "int64_t function_4053e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4053e0\n    return function_405380(1);\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "405413",
            "decompiledFuncCode": "int64_t function_405400(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x405400\n    return function_405380(0);\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "405435",
            "decompiledFuncCode": "int64_t function_405420(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405420\n    return function_404db0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "405456",
            "decompiledFuncCode": "int64_t function_405440(void) {\n    // 0x405440\n    return function_405380(0);\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "405478",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405460\n    return function_404db0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "4054fa",
            "decompiledFuncCode": "int64_t function_405480(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40548b\n    int64_t v2 = (int64_t)&g12; // 0x40548b\n    int32_t * pwc; // 0x405480\n    int64_t v3; // 0x405480\n    int64_t n; // 0x405480\n    if (a2 == 0) {\n        goto lab_0x4054d2;\n    } else {\n        // 0x40548d\n        if (a3 == 0) {\n            // 0x4054b8\n            return -2;\n        }\n        // 0x405499\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4054d2;\n        } else {\n            goto lab_0x4054a4;\n        }\n    }\n  lab_0x4054d2:\n    // 0x4054d2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405480\n    pwc = (int32_t *)&v4;\n    goto lab_0x4054a4;\n  lab_0x4054a4:;\n    char * wstr = (char *)v3; // 0x4054aa\n    int64_t ps; // 0x405480\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4054aa\n    int64_t result = v5; // 0x4054aa\n    if (v5 < 0xfffffffe) {\n        // 0x4054b8\n        return result;\n    }\n    int64_t result2 = result; // 0x4054e9\n    if ((char)function_405560(0, v3) == 0) {\n        // 0x4054eb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4054b8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405500",
            "funcStartAddr": "405500",
            "funcEndAddr": "40555d",
            "decompiledFuncCode": "int64_t function_405500(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405507\n    int64_t v2; // 0x405500\n    int64_t result = function_404590(a1, v2); // 0x405518\n    if ((v2 & 32) != 0) {\n        // 0x405540\n        if ((int32_t)result == 0) {\n            // 0x405544\n            *__errno_location() = 0;\n        }\n        // 0x40553a\n        return 0xffffffff;\n    }\n    // 0x405521\n    if ((int32_t)result == 0) {\n        // 0x40553a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405528\n    if (v1 == 0) {\n        // 0x40552a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40553a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "4055be",
            "decompiledFuncCode": "int64_t function_405560(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405566\n    if (locale == NULL) {\n        // 0x405593\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405566\n    bool v2; // 0x405560\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x405560\n    int64_t v5 = v1; // 0x405560\n    int64_t v6 = 2; // 0x405585\n    unsigned char v7 = *(char *)v5; // 0x405585\n    char v8 = *(char *)v4; // 0x405585\n    char v9 = v8; // 0x405585\n    bool v10 = false; // 0x405585\n    while (v7 == v8) {\n        // 0x405578\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405591\n    int64_t v13 = v1; // 0x405591\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405593\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405591\n    unsigned char v15 = *(char *)v13; // 0x4055ad\n    char v16 = *(char *)v12; // 0x4055ad\n    char v17 = v16; // 0x4055ad\n    bool v18 = false; // 0x4055ad\n    while (v15 == v16) {\n        // 0x4055a0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "405b22",
            "decompiledFuncCode": "int64_t function_4055c0(void) {\n    char * v1 = nl_langinfo(14); // 0x4055d6\n    char * v2 = g48; // 0x4055db\n    char * v3; // 0x4055c0\n    int64_t v4; // 0x4055c0\n    int64_t v5; // 0x4055c0\n    int64_t v6; // 0x4055c0\n    int64_t v7; // 0x4055c0\n    int32_t size; // 0x4055c0\n    int32_t size2; // 0x4055c0\n    int32_t len; // 0x405692\n    int64_t v8; // 0x405692\n    char * env_val; // 0x40567d\n    if (v2 == NULL) {\n        // 0x405678\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4056e5;\n        } else {\n            // 0x40568a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4056e5;\n            } else {\n                // 0x40568f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40567d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405b15\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4056e5;\n                    } else {\n                        // 0x405a89\n                        size2 = len + 14;\n                        goto lab_0x4056ab;\n                    }\n                } else {\n                    goto lab_0x4056ab;\n                }\n            }\n        }\n    } else {\n        // 0x4055c0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4055fa;\n    }\n  lab_0x40592c:;\n    // 0x40592c\n    struct _IO_FILE * stream; // 0x40576b\n    int32_t v10 = __uflow(stream); // 0x40592f\n    int64_t v11; // 0x4055c0\n    int64_t v12 = v11; // 0x405939\n    int64_t v13; // 0x4055c0\n    int64_t v14 = v13; // 0x405939\n    int32_t v15 = v10; // 0x405939\n    int64_t v16; // 0x4055c0\n    int64_t v17 = v16; // 0x405939\n    int64_t v18 = v11; // 0x405939\n    int64_t v19 = v13; // 0x405939\n    int64_t v20 = v16; // 0x405939\n    if (v10 == -1) {\n        // break -> 0x40593f\n        goto lab_0x40593f;\n    }\n    goto lab_0x4057b9;\n  lab_0x4057ae:;\n    // 0x4057ae\n    int64_t v90; // 0x4055c0\n    int64_t * v32; // 0x4057a0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4055c0\n    v12 = v89;\n    int64_t v91; // 0x4055c0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4055c0\n    v17 = v92;\n    goto lab_0x4057b9;\n  lab_0x4057b9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4055c0\n    int32_t v25; // bp-120, 0x4055c0\n    int32_t v26; // bp-184, 0x4055c0\n    int64_t v27; // 0x40576b\n    int64_t v28; // 0x405788\n    int64_t v29; // 0x40578d\n    int64_t * v30; // 0x4057a4\n    switch (c) {\n        case 32: {\n            goto lab_0x4057a0;\n        }\n        case 10: {\n            goto lab_0x4057a0;\n        }\n        case 9: {\n            goto lab_0x4057a0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405991\n            int32_t v33; // 0x4055c0\n            char v34; // 0x4055c0\n            int32_t v35; // 0x40599e\n            if (v31 < *v30) {\n                // 0x405970\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40599b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405991\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405970\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40599b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405980\n                v36 = v33;\n            }\n            // 0x405a6f\n            if (v36 == -1) {\n                // break -> 0x40593f\n                break;\n            }\n            goto lab_0x4057a0;\n        }\n        default: {\n            // 0x4057cf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40593f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4057f8\n            int64_t v39 = v37 + 4; // 0x4057fa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405806\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405808\n            while (v41 == 0) {\n                // 0x4057f8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405826\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405832\n            int64_t v45 = v43 + 4; // 0x405834\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405840\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405842\n            while (v47 == 0) {\n                // 0x405832\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40582f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405858\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405868\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40586c\n            int64_t v52 = v51 + v48; // 0x405875\n            int64_t * mem; // 0x4055c0\n            int64_t v53; // 0x4055c0\n            int64_t v54; // 0x4055c0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4059ab\n                int64_t v56 = v55 + 3; // 0x4059b7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405891\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4058a0\n            if (mem == NULL) {\n                // 0x405acc\n                free((int64_t *)v21);\n                function_404590(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x405744;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4058b8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4058c2\n            uint32_t v62 = (int32_t)v59; // 0x4058c5\n            int64_t v63; // 0x4055c0\n            if (v62 >= 8) {\n                // 0x4059d4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4059ee\n                int64_t v66 = v61 - v65; // 0x4059f2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4059fd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405a0e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405a0e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405a0b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405a9f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4058d7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4058db\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4058eb\n            int64_t v74 = v60 - 1; // 0x4058ef\n            uint32_t v75 = (int32_t)v73; // 0x4058f4\n            int64_t v76; // 0x4055c0\n            if (v75 >= 8) {\n                // 0x405a22\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405a2c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405a3c\n                int64_t v80 = v74 - v79; // 0x405a40\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405a4b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405a5b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405a59\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405ab6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405abe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405906\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40590a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405b03\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40591e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4057ae;\n            } else {\n                goto lab_0x40592c;\n            }\n        }\n    }\n  lab_0x4057a0:;\n    int64_t v93 = v23; // 0x4055c0\n    int64_t v94 = v22; // 0x4055c0\n    int64_t v95 = v21; // 0x4055c0\n    goto lab_0x4057a0_2;\n  lab_0x4056e5:;\n    int64_t * mem3 = malloc(size); // 0x4056e5\n    int64_t v97 = (int64_t)&g12; // 0x4056f0\n    int64_t v98; // 0x4055c0\n    int64_t path; // 0x4055c0\n    if (mem3 == NULL) {\n        goto lab_0x4056c2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4056e5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405706;\n    }\n  lab_0x4055fa:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x4055ed\n    char v100 = *v3; // 0x4055fa\n    int64_t v101; // 0x4055c0\n    if (v100 == 0) {\n        // 0x405654\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4055c0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4055c0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405640\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405647;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405610\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40561d\n        char v107 = *(char *)v106; // 0x405622\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405654\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40562b\n    v104 = v103 + 1;\n  lab_0x405647:\n    // 0x405654\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4056c2:;\n    char * v108 = (char *)v97;\n    g48 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4055fa;\n  lab_0x405706:;\n    int64_t v109 = v98 + path; // 0x405706\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405732\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405761\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405a92\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405785\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4057a0_2:;\n                uint64_t v96 = *v32; // 0x4057a0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40592c;\n                } else {\n                    goto lab_0x4057ae;\n                }\n            }\n          lab_0x40593f:\n            // 0x40593f\n            function_404590(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40595e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405744;\n  lab_0x4056ab:;\n    int64_t * mem4 = malloc(size2); // 0x4056ab\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405751\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405706;\n    } else {\n        goto lab_0x4056c2;\n    }\n  lab_0x405744:\n    // 0x405744\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4056c2;\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405b8d",
            "decompiledFuncCode": "int64_t function_405b30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405b30\n    return function_401330();\n}\n"
        },
        {
            "funcName": "function_405b90",
            "funcStartAddr": "405b90",
            "funcEndAddr": "405b91",
            "decompiledFuncCode": "int64_t function_405b90(void) {\n    // 0x405b90\n    int64_t result; // 0x405b90\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bb8",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405ba0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_405bb8",
            "funcStartAddr": "405bb8",
            "funcEndAddr": "405bd8",
            "decompiledFuncCode": "int64_t function_405bb8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x405bc2\n    while (*(int64_t *)v1 != -1) {\n        // 0x405bc3\n        v1 -= 8;\n    }\n    // 0x405bd4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cksum.elf"
}