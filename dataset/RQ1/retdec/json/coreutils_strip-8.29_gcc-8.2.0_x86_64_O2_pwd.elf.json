{
    "funcInfo": [
        {
            "funcName": "function_401a50",
            "funcStartAddr": "401a50",
            "funcEndAddr": "401a55",
            "decompiledFuncCode": "int64_t function_401a50(void) {\n    // 0x401a50\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a55",
            "funcStartAddr": "401a55",
            "funcEndAddr": "401a5a",
            "decompiledFuncCode": "int64_t function_401a55(void) {\n    // 0x401a55\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a5a",
            "funcStartAddr": "401a5a",
            "funcEndAddr": "401a5f",
            "decompiledFuncCode": "int64_t function_401a5a(void) {\n    // 0x401a5a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a5f",
            "funcStartAddr": "401a5f",
            "funcEndAddr": "401a64",
            "decompiledFuncCode": "int64_t function_401a5f(void) {\n    // 0x401a5f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a64",
            "funcStartAddr": "401a64",
            "funcEndAddr": "401a69",
            "decompiledFuncCode": "int64_t function_401a64(void) {\n    // 0x401a64\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a69",
            "funcStartAddr": "401a69",
            "funcEndAddr": "401a6e",
            "decompiledFuncCode": "int64_t function_401a69(void) {\n    // 0x401a69\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a70",
            "funcStartAddr": "401a70",
            "funcEndAddr": "401c23",
            "decompiledFuncCode": "int64_t function_401a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401a72\n    char * env_val = getenv(\"POSIXLY_CORRECT\"); // 0x401a7f\n    function_4027f0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_4070f0(0x402750, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    char v2 = env_val != NULL; // 0x401ac5\n    int64_t v3; // 0x401a70\n    int64_t v4; // 0x401a70\n    int64_t str; // 0x401b61\n    int64_t v5; // 0x401b9e\n    int64_t * v6; // 0x401ba8\n    int64_t v7; // 0x401bb3\n    int64_t * v8; // 0x401bbf\n    int64_t v9; // 0x401bc2\n    int64_t * str2; // 0x401bc7\n    int64_t str3; // 0x401b75\n    while (true) {\n        uint32_t v10 = (int32_t)function_405f00(v1, a2, \"LP\", &g2, 0, a6);\n        switch (v10) {\n            case -1: {\n                // 0x401b50\n                v4 = a2;\n                v3 = v1;\n                if (v1 > (int64_t)*(int32_t *)0x60a29c) {\n                    // 0x401bee\n                    error(0, (int32_t)\"ignoring non-option arguments\" ^ (int32_t)\"ignoring non-option arguments\", dcgettext(NULL, \"ignoring non-option arguments\", 5));\n                    v4 = (int32_t)\"ignoring non-option arguments\" ^ (int32_t)\"ignoring non-option arguments\";\n                    v3 = 0;\n                }\n                // 0x401b5d\n                if (v2 != 0) {\n                    // 0x401b61\n                    str = function_401d10();\n                    if (str != 0) {\n                        // 0x401b6b\n                        puts((char *)str);\n                        // 0x401b92\n                        return 0;\n                    }\n                }\n                // 0x401b75\n                str3 = function_404cb0(v3, v4);\n                if (str3 == 0) {\n                    // 0x401b99\n                    v5 = function_404a20(24);\n                    v6 = (int64_t *)(v5 + 8);\n                    *v6 = 0x2000;\n                    v7 = function_404a20(0x2000);\n                    v8 = (int64_t *)v5;\n                    *v8 = v7;\n                    v9 = v7 - 1 + *v6;\n                    str2 = (int64_t *)(v5 + 16);\n                    *str2 = v9;\n                    *(char *)v9 = 0;\n                    function_401f10(v5);\n                    puts((char *)*str2);\n                    free((int64_t *)*v8);\n                    free(v8);\n                } else {\n                    // 0x401b82\n                    puts((char *)str3);\n                    free((int64_t *)str3);\n                }\n                // 0x401b92\n                return 0;\n            }\n            case -130: {\n                // 0x401c12\n                function_4023d0(0);\n                // UNREACHABLE\n            }\n        }\n        if (v10 <= 0xffffff7e) {\n            if (v10 == -131) {\n                // 0x401b0b\n                function_4048e0((int64_t)g28, \"pwd\", \"GNU coreutils\", (int64_t)g17, \"Jim Meyering\", 0);\n                exit(0);\n                // UNREACHABLE\n            }\n            goto lab_0x401c19;\n        }\n        char v11 = 1; // 0x401af5\n        if (v10 != 76) {\n            // 0x401b40\n            v11 = 0;\n            if (v10 != 80) {\n              lab_0x401c19:\n                // 0x401c19\n                function_4023d0(1);\n                // UNREACHABLE\n            }\n        }\n        // 0x401ac8\n        v2 = v11;\n    }\n    // 0x401b50\n    v4 = a2;\n    v3 = v1;\n    if (v1 > (int64_t)*(int32_t *)0x60a29c) {\n        // 0x401bee\n        error(0, (int32_t)\"ignoring non-option arguments\" ^ (int32_t)\"ignoring non-option arguments\", dcgettext(NULL, \"ignoring non-option arguments\", 5));\n        v4 = (int32_t)\"ignoring non-option arguments\" ^ (int32_t)\"ignoring non-option arguments\";\n        v3 = 0;\n    }\n    // 0x401b5d\n    if (v2 != 0) {\n        // 0x401b61\n        str = function_401d10();\n        if (str != 0) {\n            // 0x401b6b\n            puts((char *)str);\n            // 0x401b92\n            return 0;\n        }\n    }\n    // 0x401b75\n    str3 = function_404cb0(v3, v4);\n    if (str3 == 0) {\n        // 0x401b99\n        v5 = function_404a20(24);\n        v6 = (int64_t *)(v5 + 8);\n        *v6 = 0x2000;\n        v7 = function_404a20(0x2000);\n        v8 = (int64_t *)v5;\n        *v8 = v7;\n        v9 = v7 - 1 + *v6;\n        str2 = (int64_t *)(v5 + 16);\n        *str2 = v9;\n        *(char *)v9 = 0;\n        function_401f10(v5);\n        puts((char *)*str2);\n        free((int64_t *)*v8);\n        free(v8);\n    } else {\n        // 0x401b82\n        puts((char *)str3);\n        free((int64_t *)str3);\n    }\n    // 0x401b92\n    return 0;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401c30",
            "funcEndAddr": "401c5b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401c30\n    int64_t v1; // 0x401c30\n    __libc_start_main(0x401a70, (int32_t)a4, (char **)&v1, (void (*)())0x407080, (void (*)())0x4070e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c5b",
            "funcStartAddr": "401c5b",
            "funcEndAddr": "401c7a",
            "decompiledFuncCode": "int64_t function_401c5b(void) {\n    // 0x401c5b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_401c7a",
            "funcStartAddr": "401c7a",
            "funcEndAddr": "401cb1",
            "decompiledFuncCode": "int64_t function_401c7a(void) {\n    // 0x401c7a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401cb1",
            "funcStartAddr": "401cb1",
            "funcEndAddr": "401d08",
            "decompiledFuncCode": "int64_t function_401cb1(void) {\n    // 0x401cb1\n    if (g31 != 0) {\n        // 0x401d07\n        int64_t result; // 0x401cb1\n        return result;\n    }\n    int64_t v1 = g32; // 0x401ce4\n    int64_t result2; // 0x401cf6\n    if (g32 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401cf6\n        result2 = function_401c5b();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401ce6\n        v1++;\n    }\n    // 0x401cda\n    g32 = v1;\n    // 0x401cf6\n    result2 = function_401c5b();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401d08",
            "funcStartAddr": "401d08",
            "funcEndAddr": "401d0d",
            "decompiledFuncCode": "int64_t function_401d08(void) {\n    // 0x401d08\n    return function_401c7a();\n}\n"
        },
        {
            "funcName": "function_401d10",
            "funcStartAddr": "401d10",
            "funcEndAddr": "401dcc",
            "decompiledFuncCode": "int64_t function_401d10(void) {\n    char * env_val = getenv(\"PWD\"); // 0x401d1d\n    if (env_val == NULL || *env_val != 47) {\n        // 0x401d72\n        return 0;\n    }\n    int64_t result = (int64_t)env_val; // 0x401d1d\n    int64_t v1 = function_406480(result, \"/.\"); // 0x401d41\n    int64_t v2 = v1; // 0x401d49\n    if (v1 == 0) {\n      lab_0x401d7e:;\n        // 0x401d7e\n        int64_t v3; // bp-152, 0x401d10\n        int64_t v4; // bp-296, 0x401d10\n        if (__xstat(1, env_val, (struct stat *)&v4) != 0 || true != (__xstat(1, \".\", (struct stat *)&v3) == 0)) {\n            // 0x401d72\n            return 0;\n        }\n        // 0x401dbc\n        if (v4 == v3) {\n            // 0x401d72\n            return result;\n        }\n        // 0x401d72\n        return 0;\n    }\n    while (true) {\n      lab_0x401d4b:;\n        int64_t v5 = v2;\n        char v6 = *(char *)(v5 + 2); // 0x401d4b\n        switch (v6) {\n            case 0: {\n                return 0;\n            }\n            case 47: {\n                return 0;\n            }\n            default: {\n                if (v6 == 46) {\n                    char v7 = *(char *)(v5 + 3); // 0x401d5d\n                    if (v7 != 0 != v7 != 47) {\n                        // break -> 0x401d70\n                        break;\n                    }\n                }\n                // 0x401d38\n                v2 = function_406480(v5 + 1, \"/.\");\n                if (v2 == 0) {\n                    goto lab_0x401d7e;\n                }\n                goto lab_0x401d4b;\n            }\n        }\n    }\n    // 0x401d72\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401dd0",
            "funcStartAddr": "401dd0",
            "funcEndAddr": "401e4b",
            "decompiledFuncCode": "int64_t function_401dd0(uint64_t a1) {\n    uint128_t v1 = 3 * (int128_t)a1; // 0x401ddb\n    if ((int64_t)v1 < 0) {\n        // 0x401e46\n        function_404c70(a1);\n        // UNREACHABLE\n    }\n    if (v1 % 0x30000000000000001 != 0) {\n        // 0x401e46\n        function_404c70(a1);\n        // UNREACHABLE\n    }\n    int64_t v2 = 3 * a1; // 0x401dee\n    int64_t result = function_404a20(v2); // 0x401df8\n    if (a1 == 0) {\n        // 0x401e38\n        *(char *)(result - 1) = 0;\n        return result;\n    }\n    int64_t v3 = result + v2; // 0x401e02\n    *(char *)(result + 2) = 47;\n    int64_t v4 = result + 3; // 0x401e19\n    *(int16_t *)result = 0x2e2e;\n    while (v4 != v3) {\n        int64_t v5 = v4;\n        *(char *)(v5 + 2) = 47;\n        v4 = v5 + 3;\n        *(int16_t *)v5 = 0x2e2e;\n    }\n    // 0x401e26\n    *(char *)(v3 - 1) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e50",
            "funcStartAddr": "401e50",
            "funcEndAddr": "401f10",
            "decompiledFuncCode": "int64_t function_401e50(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x401e67\n    int64_t v2 = *v1; // 0x401e67\n    uint64_t v3 = v2 - a1; // 0x401e6e\n    uint64_t v4 = a3 + 1; // 0x401e71\n    int64_t v5 = v2; // 0x401e78\n    if (v4 > v3) {\n        int64_t * v6 = (int64_t *)(a1 + 8); // 0x401e7a\n        int64_t v7 = *v6 + v4; // 0x401e7a\n        int64_t v8 = 2 * v7; // 0x401e87\n        if (v8 < 0) {\n            // 0x401f0b\n            return function_404c70(v7);\n        }\n        if (v7 < 0) {\n            // 0x401f0b\n            return function_404c70(v7);\n        }\n        int64_t v9 = function_404a20(v8); // 0x401e94\n        int64_t v10 = *v6; // 0x401e99\n        int64_t v11 = v8 + v3; // 0x401e9d\n        int64_t v12 = v11 - v10 + v9; // 0x401eb6\n        *v1 = v12;\n        memcpy((int64_t *)v12, (int64_t *)(v11 + v3), (int32_t)(v10 - v3));\n        free((int64_t *)v11);\n        *(int64_t *)a1 = v9;\n        v5 = *v1;\n        *v6 = v8;\n    }\n    int64_t v13 = v5 + -1 - a3; // 0x401ee3\n    *v1 = v13;\n    *(char *)v13 = 47;\n    int64_t v14 = *v1; // 0x401ef0\n    return (int64_t)memcpy((int64_t *)(v14 + 1), (int64_t *)a2, (int32_t)a3);\n}\n"
        },
        {
            "funcName": "function_401f10",
            "funcStartAddr": "401f10",
            "funcEndAddr": "4023d0",
            "decompiledFuncCode": "int64_t function_401f10(int64_t a1) {\n    // 0x401f10\n    int64_t v1; // bp-488, 0x401f10\n    int64_t v2; // bp-504, 0x401f10\n    if (function_404430(&v2) == 0) {\n        goto lab_0x40238f;\n    } else {\n        // 0x401f3e\n        if (__xstat(1, \".\", (struct stat *)&v1) < 0) {\n            goto lab_0x402350;\n        } else {\n            // 0x401f60\n            goto lab_0x401f60_2;\n        }\n    }\n  lab_0x4022d0_2:;\n    // 0x4022d0\n    int64_t v3; // 0x401f10\n    function_404410(function_401dd0(v3));\n    char * format = dcgettext(NULL, \"failed to chdir to %s\", 5); // 0x4022ef\n    int32_t * v4 = __errno_location(); // 0x4022f7\n    int32_t err_num = *v4; // 0x402307\n    error(1, err_num, format);\n    goto lab_0x402310;\n  lab_0x402297:\n    // 0x402297\n    function_404410(function_401dd0(v3));\n    char * format3 = dcgettext(NULL, \"failed to stat %s\", 5); // 0x4022b6\n    int32_t * v6; // 0x401fd7\n    int32_t err_num3 = *v6; // 0x4022bb\n    error(1, err_num3, format3);\n    goto lab_0x4022d0_2;\n  lab_0x40225e:\n    // 0x40225e\n    function_404410(function_401dd0(v3));\n    char * format4 = dcgettext(NULL, \"reading directory %s\", 5); // 0x40227d\n    int32_t err_num4 = *v6; // 0x402282\n    error(1, err_num4, format4);\n    goto lab_0x402297;\n  lab_0x402044_3:;\n    // 0x402044\n    int64_t v7; // 0x402018\n    char * str; // 0x401f10\n    function_401e50(a1, v7, (int64_t)strlen(str));\n    int64_t v8; // 0x401f10\n    struct __dirstream * dirp; // 0x40200a\n    int64_t v9; // 0x401f7e\n    if (closedir(dirp) != 0) {\n        goto lab_0x40225e;\n    } else {\n        int128_t v10 = __asm_movdqa(0); // 0x40206c\n        int128_t v11; // 0x401f10\n        int128_t v12 = __asm_movdqa(v11); // 0x40207a\n        int128_t v13; // 0x401f10\n        int128_t v14 = __asm_movdqa(v13); // 0x402083\n        int128_t v15; // 0x401f10\n        int128_t v16 = __asm_movdqa(v15); // 0x40208c\n        v1 = __asm_movaps(v10);\n        int128_t v17; // 0x401f10\n        int128_t v18 = __asm_movdqa(v17); // 0x40209a\n        int128_t v19; // 0x401f10\n        int128_t v20 = __asm_movdqa(v19); // 0x4020a3\n        __asm_movaps(v12);\n        int128_t v21; // 0x401f10\n        int128_t v22 = __asm_movdqa(v21); // 0x4020b1\n        int128_t v23; // 0x401f10\n        int128_t v24 = __asm_movdqa(v23); // 0x4020ba\n        __asm_movaps(v14);\n        int128_t v25; // 0x401f10\n        int128_t v26 = __asm_movdqa(v25); // 0x4020c8\n        __asm_movaps(v16);\n        __asm_movaps(v18);\n        __asm_movaps(v20);\n        __asm_movaps(v22);\n        __asm_movaps(v24);\n        __asm_movaps(v26);\n        v8 = v9;\n        goto lab_0x401f60_2;\n    }\n  lab_0x4021e8:\n    // 0x4021e8\n    if (chdir(\"..\") < 0) {\n        goto lab_0x4022d0_2;\n    }\n    // 0x4021fa\n    int64_t v27; // 0x401f10\n    int64_t v28 = v27;\n    int128_t v29; // bp-344, 0x401f10\n    int32_t v30 = __xstat(1, \".\", (struct stat *)&v29); // 0x40220c\n    int64_t v31 = v28; // 0x402216\n    int32_t v32 = v30; // 0x402216\n    goto lab_0x401fd7;\n  lab_0x401fd7:;\n    int32_t v33 = v32;\n    v6 = __errno_location();\n    if (v33 <= -1) {\n        goto lab_0x402297;\n    }\n    int64_t v34 = v31;\n    int128_t v35 = v29; // 0x401fe8\n    int64_t v36 = v1; // 0x401ff0\n    *v6 = 0;\n    dirp = (struct __dirstream *)v34;\n    struct dirent * v37 = readdir(dirp); // 0x40200a\n    int64_t v38; // 0x401f10\n    if (v37 != NULL) {\n        // 0x402018\n        v9 = v3 + 1;\n        struct dirent * v39 = v37; // 0x401f10\n        while (true) {\n            struct dirent * v40 = v39;\n            struct dirent * v41 = v40; // 0x401f10\n            struct dirent * v42; // 0x401f10\n            while (true) {\n                struct dirent * v43 = v41;\n                struct dirent * v44 = v43; // 0x401f10\n                v42 = v44;\n                int64_t v45 = (int64_t)v42;\n                v7 = v45 + 19;\n                str = (char *)v7;\n                char v46 = *str; // 0x402018\n                if (v46 != 46) {\n                    // break (via goto) -> 0x402026\n                    goto lab_0x402026_2;\n                }\n                int64_t v47 = v45 + 20; // 0x40215a\n                char v48 = *(char *)v47; // 0x40215a\n                char v49 = *(char *)(v47 + (int64_t)(v48 == 46)); // 0x402161\n                while (v49 != 0) {\n                    if (v49 != 47) {\n                        // break (via goto) -> 0x402026\n                        goto lab_0x402026_2;\n                    }\n                    struct dirent * v50 = readdir(dirp); // 0x40217a\n                    v44 = v50;\n                    if (v50 == NULL) {\n                        // break (via goto) -> 0x402190\n                        goto lab_0x402190_2;\n                    }\n                    v42 = v44;\n                    v45 = (int64_t)v42;\n                    v7 = v45 + 19;\n                    str = (char *)v7;\n                    v46 = *str;\n                    if (v46 != 46) {\n                        // break (via goto) -> 0x402026\n                        goto lab_0x402026_2;\n                    }\n                    // 0x402158\n                    v47 = v45 + 20;\n                    v48 = *(char *)v47;\n                    v49 = *(char *)(v47 + (int64_t)(v48 == 46));\n                }\n                struct dirent * v51 = readdir(dirp); // 0x40200a\n                v41 = v51;\n                if (v51 == NULL) {\n                    // break (via goto) -> 0x402190\n                    goto lab_0x402190_2;\n                }\n            }\n          lab_0x402026_2:;\n            int64_t v52 = *(int64_t *)v42; // 0x402026\n            if (v36 != (int64_t)v35 || v52 == 0) {\n                // 0x402100\n                int64_t v53; // bp-200, 0x401f10\n                int32_t v54 = __lxstat(1, str, (struct stat *)&v53); // 0x402110\n                int64_t v55; // 0x401f10\n                if (v55 == v38 && v54 >= 0) {\n                    if (v36 == (int64_t)v35) {\n                        goto lab_0x402044_3;\n                    }\n                    int64_t v56 = v1; // 0x402139\n                    int64_t v57 = v53; // 0x40213e\n                    if (v57 == v56) {\n                        goto lab_0x402044_3;\n                    }\n                }\n            } else {\n                if (v52 == v38) {\n                    goto lab_0x402044_3;\n                }\n            }\n            // 0x402000\n            *v6 = 0;\n            struct dirent * v58 = readdir(dirp); // 0x40200a\n            v39 = v58;\n            if (v58 == NULL) {\n                // break -> 0x402190\n                break;\n            }\n        }\n    }\n  lab_0x402190_2:;\n    int32_t v59 = *v6; // 0x402190\n    int32_t v60 = closedir(dirp);\n    if (v59 != 0) {\n        // 0x402253\n        *v6 = v59;\n        goto lab_0x40225e;\n    }\n    if (v60 != 0) {\n        goto lab_0x40225e;\n    }\n    int64_t v61 = function_404410(function_401dd0(v3)); // 0x4021b6\n    error(1, (int32_t)\"couldn't find directory entry in %s with matching i-node\" ^ (int32_t)\"couldn't find directory entry in %s with matching i-node\", dcgettext(NULL, \"couldn't find directory entry in %s with matching i-node\", 5));\n    v27 = v61;\n    goto lab_0x4021e8;\n  lab_0x40238f:\n    // 0x40238f\n    function_4041c0(4, (int64_t *)\"/\");\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to get attributes of %s\", 5));\n    return &g47;\n  lab_0x402350:\n    // 0x402350\n    function_4041c0(4, (int64_t *)\".\");\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to stat %s\", 5));\n    goto lab_0x40238f;\n  lab_0x401f60_2:\n    while (true) {\n        // 0x401f60\n        v3 = v8;\n        int64_t * v62; // 0x401f65\n        int64_t v63 = *v62; // 0x401f65\n        if (v38 == v63) {\n            // 0x401f6f\n            int64_t * v64; // 0x401f10\n            int64_t v65 = *v64; // 0x401f6f\n            int64_t v66 = v1; // 0x401f73\n            if (v66 == v65) {\n                int64_t v67 = *(int64_t *)(a1 + 16); // 0x402225\n                char v68 = *(char *)v67; // 0x402229\n                int64_t v69 = v67; // 0x40222c\n                int64_t result; // 0x401f10\n                if (v68 != 0) {\n                    // 0x40222e\n                    result = v69;\n                    return result;\n                }\n                int64_t v70 = function_401e50(a1, (int64_t)&g10, 0); // 0x40224c\n                v69 = v70;\n                // 0x40222e\n                result = v69;\n                return result;\n            }\n        }\n        struct __dirstream * dirp2 = opendir(\"..\"); // 0x401f8c\n        if (dirp2 == NULL) {\n            // break -> 0x402310\n            break;\n        }\n        int64_t v71 = (int64_t)dirp2; // 0x401f8c\n        int32_t fd = dirfd(dirp2); // 0x401fa0\n        v27 = v71;\n        if (fd < 0) {\n            goto lab_0x4021e8;\n        } else {\n            // 0x401faf\n            if (fchdir(fd) < 0) {\n                goto lab_0x4022d0_2;\n            }\n            int32_t v72 = __fxstat(1, fd, (struct stat *)&v29); // 0x401fcd\n            v31 = v71;\n            v32 = v72;\n            goto lab_0x401fd7;\n        }\n    }\n    goto lab_0x402310;\n  lab_0x402310:\n    // 0x402310\n    function_404410(function_401dd0(v3));\n    char * format2 = dcgettext(NULL, \"cannot open directory %s\", 5); // 0x40232f\n    int32_t * v5 = __errno_location(); // 0x402337\n    int32_t err_num2 = *v5; // 0x402347\n    error(1, err_num2, format2);\n    goto lab_0x402350;\n}\n"
        },
        {
            "funcName": "function_4023d0",
            "funcStartAddr": "4023d0",
            "funcEndAddr": "40272d",
            "decompiledFuncCode": "int64_t function_4023d0(int32_t status) {\n    // 0x4023d0\n    if (status != 0) {\n        // 0x4023ea\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40240f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402416\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print the full filename of the current working directory.\\n\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -L, --logical   use PWD from environment, even if it contains symlinks\\n  -P, --physical  avoid all symlinks\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf no option is specified, -P is assumed.\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402508\n    bool v2; // 0x4023d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402590\n    int64_t v6 = *(int64_t *)v5; // 0x402594\n    int64_t v7 = 4; // 0x40259a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"pwd\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4025a6\n        char v11 = *(char *)v9; // 0x4025a6\n        char v12 = v11; // 0x4025a6\n        bool v13 = false; // 0x4025a6\n        while (v10 == v11) {\n            // 0x40259c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4025a6\n            int64_t v15 = v8 + v3; // 0x4025a6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4025b2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x4025b2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4026c4;\n        } else {\n            // 0x4026ae\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402703\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402614;\n            } else {\n                goto lab_0x4026c4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402614;\n        } else {\n            // 0x4025fa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402703\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402614;\n            } else {\n                goto lab_0x402614;\n            }\n        }\n    }\n  lab_0x4026c4:\n    // 0x4026c4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402654\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40240f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402614:\n    // 0x402614\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402654\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40240f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402730",
            "funcStartAddr": "402730",
            "funcEndAddr": "402738",
            "decompiledFuncCode": "int64_t function_402730(int64_t a1) {\n    // 0x402730\n    g34 = a1;\n    int64_t result; // 0x402730\n    return result;\n}\n"
        },
        {
            "funcName": "function_402740",
            "funcStartAddr": "402740",
            "funcEndAddr": "402748",
            "decompiledFuncCode": "int64_t function_402740(int64_t a1) {\n    // 0x402740\n    g33 = a1;\n    int64_t result; // 0x402740\n    return result;\n}\n"
        },
        {
            "funcName": "function_402750",
            "funcStartAddr": "402750",
            "funcEndAddr": "4027ee",
            "decompiledFuncCode": "int64_t function_402750(void) {\n    // 0x402750\n    int32_t * err_num; // 0x402766\n    if ((int32_t)function_406820((int64_t)g28) == 0) {\n        goto lab_0x40277c;\n    } else {\n        // 0x402766\n        err_num = __errno_location();\n        if (g33 == 0) {\n            goto lab_0x402793;\n        } else {\n            // 0x402777\n            if (*err_num != 32) {\n                goto lab_0x402793;\n            } else {\n                goto lab_0x40277c;\n            }\n        }\n    }\n  lab_0x40277c:;\n    int64_t result = function_406820((int64_t)g30); // 0x402783\n    if ((int32_t)result == 0) {\n        // 0x40278c\n        return result;\n    }\n    // 0x4027ce\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x402793:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40279f\n    if (g34 == 0) {\n        // 0x4027d9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4027b3\n        error(0, *err_num, \"%s: %s\", (char *)function_404260((int64_t)g34), v1);\n    }\n    // 0x4027ce\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4027f0",
            "funcStartAddr": "4027f0",
            "funcEndAddr": "402889",
            "decompiledFuncCode": "int64_t function_4027f0(int64_t str) {\n    // 0x4027f0\n    if (str == 0) {\n        // 0x402869\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4027fe\n    int64_t result = (int64_t)found_char_pos; // 0x4027fe\n    if (found_char_pos == NULL) {\n        // 0x402859\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402808\n    if (v1 - str < 7) {\n        // 0x402859\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x402818\n    bool v2; // 0x4027f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4027f0\n    int64_t v5 = result - 6; // 0x4027f0\n    int64_t v6 = 7; // 0x402826\n    unsigned char v7 = *(char *)v5; // 0x402826\n    char v8 = *(char *)v4; // 0x402826\n    char v9 = v8; // 0x402826\n    bool v10 = false; // 0x402826\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402830\n    int64_t v13 = v1; // 0x402830\n    int64_t v14 = 3; // 0x402830\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402859\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402842\n    char v16 = *(char *)v12; // 0x402842\n    char v17 = v16; // 0x402842\n    bool v18 = false; // 0x402842\n    while (v15 == v16) {\n        // 0x402832\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40284c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40284e\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x402859\n    g35 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402890",
            "funcStartAddr": "402890",
            "funcEndAddr": "402982",
            "decompiledFuncCode": "int64_t function_402890(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4028a4\n    int64_t result = (int64_t)v1; // 0x4028a4\n    if (result != a1) {\n        // 0x4028b1\n        return result;\n    }\n    int64_t v2 = function_4068e0(); // 0x4028c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402976\n    if (v3 == 85) {\n        // 0x4028d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402968\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x4028fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40290b\n        // 0x4028b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402968\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x40294d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40295a\n    // 0x4028b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402990",
            "funcStartAddr": "402990",
            "funcEndAddr": "4029e7",
            "decompiledFuncCode": "int64_t function_402990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402990\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4029d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4029e7",
            "funcStartAddr": "4029e7",
            "funcEndAddr": "403bb1",
            "decompiledFuncCode": "int64_t function_4029e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402a31\n    int64_t v3 = 0; // 0x402a31\n    int64_t v4; // 0x4029e7\n    int64_t v5; // 0x4029e7\n    int64_t v6; // 0x4029e7\n    int64_t v7; // 0x4029e7\n    int64_t v8; // 0x4029e7\n    int64_t v9; // 0x4029e7\n    int64_t v10; // 0x4029e7\n    int64_t v11; // 0x4029e7\n    int64_t v12; // 0x4029e7\n    int64_t v13; // 0x4029e7\n    int64_t v14; // 0x4029e7\n    int64_t v15; // 0x4029e7\n    int64_t v16; // 0x4029e7\n    int64_t v17; // 0x4029e7\n    int64_t v18; // 0x4029e7\n    int64_t result; // 0x4029e7\n    int64_t v19; // 0x4029e7\n    int32_t wc; // bp+132, 0x4029e7\n    int64_t ps; // bp+136, 0x4029e7\n    char v20; // 0x402fa0\n    int64_t v21; // 0x402fa0\n    int64_t v22; // 0x403348\n    int64_t v23; // 0x4029e7\n    int64_t v24; // 0x403367\n    int32_t v25; // 0x4029e7\n    while (true) {\n      lab_0x402a38_2:\n        // 0x402a38\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4029e7\n        int64_t v27; // 0x402a6c\n        while (true) {\n          lab_0x402a38:\n            // 0x402a38\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402a43\n            if (v15 == -1) {\n                // 0x402a45\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402a53\n            if (v28) {\n                // break (via goto) -> 0x4031b8\n                goto lab_0x4031b8;\n            }\n            // 0x402a5c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g46 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40304b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402b91;\n                    }\n                    // 0x40346d\n                    v26 = v5 + 1;\n                    goto lab_0x402a38;\n                }\n                case 7: {\n                    goto lab_0x402b91;\n                }\n                case 8: {\n                    goto lab_0x402b91;\n                }\n                case 9: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402b91;\n                }\n                case 12: {\n                    goto lab_0x402b91;\n                }\n                case 13: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402b5d;\n                }\n                case 36: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402b91;\n                }\n                case 38: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402b91;\n                }\n                case 44: {\n                    goto lab_0x402b91;\n                }\n                case 45: {\n                    goto lab_0x402b91;\n                }\n                case 46: {\n                    goto lab_0x402b91;\n                }\n                case 47: {\n                    goto lab_0x402b91;\n                }\n                case 48: {\n                    goto lab_0x402b91;\n                }\n                case 49: {\n                    goto lab_0x402b91;\n                }\n                case 50: {\n                    goto lab_0x402b91;\n                }\n                case 51: {\n                    goto lab_0x402b91;\n                }\n                case 52: {\n                    goto lab_0x402b91;\n                }\n                case 53: {\n                    goto lab_0x402b91;\n                }\n                case 54: {\n                    goto lab_0x402b91;\n                }\n                case 55: {\n                    goto lab_0x402b91;\n                }\n                case 56: {\n                    goto lab_0x402b91;\n                }\n                case 57: {\n                    goto lab_0x402b91;\n                }\n                case 58: {\n                    goto lab_0x402b91;\n                }\n                case 59: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402b91;\n                }\n                case 66: {\n                    goto lab_0x402b91;\n                }\n                case 67: {\n                    goto lab_0x402b91;\n                }\n                case 68: {\n                    goto lab_0x402b91;\n                }\n                case 69: {\n                    goto lab_0x402b91;\n                }\n                case 70: {\n                    goto lab_0x402b91;\n                }\n                case 71: {\n                    goto lab_0x402b91;\n                }\n                case 72: {\n                    goto lab_0x402b91;\n                }\n                case 73: {\n                    goto lab_0x402b91;\n                }\n                case 74: {\n                    goto lab_0x402b91;\n                }\n                case 75: {\n                    goto lab_0x402b91;\n                }\n                case 76: {\n                    goto lab_0x402b91;\n                }\n                case 77: {\n                    goto lab_0x402b91;\n                }\n                case 78: {\n                    goto lab_0x402b91;\n                }\n                case 79: {\n                    goto lab_0x402b91;\n                }\n                case 80: {\n                    goto lab_0x402b91;\n                }\n                case 81: {\n                    goto lab_0x402b91;\n                }\n                case 82: {\n                    goto lab_0x402b91;\n                }\n                case 83: {\n                    goto lab_0x402b91;\n                }\n                case 84: {\n                    goto lab_0x402b91;\n                }\n                case 85: {\n                    goto lab_0x402b91;\n                }\n                case 86: {\n                    goto lab_0x402b91;\n                }\n                case 87: {\n                    goto lab_0x402b91;\n                }\n                case 88: {\n                    goto lab_0x402b91;\n                }\n                case 89: {\n                    goto lab_0x402b91;\n                }\n                case 90: {\n                    goto lab_0x402b91;\n                }\n                case 91: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402b91;\n                }\n                case 94: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402b91;\n                }\n                case 96: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402b91;\n                }\n                case 98: {\n                    goto lab_0x402b91;\n                }\n                case 99: {\n                    goto lab_0x402b91;\n                }\n                case 100: {\n                    goto lab_0x402b91;\n                }\n                case 101: {\n                    goto lab_0x402b91;\n                }\n                case 102: {\n                    goto lab_0x402b91;\n                }\n                case 103: {\n                    goto lab_0x402b91;\n                }\n                case 104: {\n                    goto lab_0x402b91;\n                }\n                case 105: {\n                    goto lab_0x402b91;\n                }\n                case 106: {\n                    goto lab_0x402b91;\n                }\n                case 107: {\n                    goto lab_0x402b91;\n                }\n                case 108: {\n                    goto lab_0x402b91;\n                }\n                case 109: {\n                    goto lab_0x402b91;\n                }\n                case 110: {\n                    goto lab_0x402b91;\n                }\n                case 111: {\n                    goto lab_0x402b91;\n                }\n                case 112: {\n                    goto lab_0x402b91;\n                }\n                case 113: {\n                    goto lab_0x402b91;\n                }\n                case 114: {\n                    goto lab_0x402b91;\n                }\n                case 115: {\n                    goto lab_0x402b91;\n                }\n                case 116: {\n                    goto lab_0x402b91;\n                }\n                case 117: {\n                    goto lab_0x402b91;\n                }\n                case 118: {\n                    goto lab_0x402b91;\n                }\n                case 119: {\n                    goto lab_0x402b91;\n                }\n                case 120: {\n                    goto lab_0x402b91;\n                }\n                case 121: {\n                    goto lab_0x402b91;\n                }\n                case 122: {\n                    goto lab_0x402b91;\n                }\n                case 123: {\n                    goto lab_0x402b35;\n                }\n                case 124: {\n                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402b35;\n                }\n                case 126: {\n                    goto lab_0x402b5d;\n                }\n                default: {\n                    goto lab_0x402f35;\n                }\n            }\n        }\n      lab_0x402f35:\n        if (v23 != 1) {\n            // 0x4032a0\n            ps = 0;\n            int64_t len = v15; // 0x4032b0\n            if (v15 == -1) {\n                // 0x4032b2\n                len = strlen((char *)str);\n            }\n            // 0x4032de\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40333f:\n                // 0x40333f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403344\n                int64_t v30 = v29 + str;\n                v24 = function_405f80(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4038ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4038ba_2;\n                    }\n                    case -2: {\n                        // 0x40399d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4039d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4039da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4039e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4039e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4038ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4038ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x403310;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4033bc\n                        char v34 = *(char *)v33; // 0x4033cd\n                        unsigned char v35; // 0x4029e7\n                        if (v34 < 125) {\n                            // 0x4033d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4033ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4033c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4033cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4033d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4033ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4033c0\n                            v33++;\n                        }\n                        goto lab_0x403310;\n                    }\n                }\n            }\n            goto lab_0x4038ba_2;\n        } else {\n            // 0x402f84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402b91;\n        }\n    }\n  lab_0x4031b8:\n    // 0x4031b8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403aba\n        if (v8 > result) {\n            // 0x403ac3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402de7\n        return result;\n    }\n    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402b91:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402ba0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402daa_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ca1\n    char v40 = v20; // 0x402ca1\n    int64_t v41 = v38; // 0x402ca1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ca1\n    int64_t v43 = v36; // 0x402ca1\n    goto lab_0x402c1d;\n  lab_0x402daa_2:\n    // 0x402de7\n    return function_402990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4038ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402b91;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40348e\n        int64_t v50 = v5 + 1; // 0x403571\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403578\n        char v52 = v20; // 0x403578\n        int64_t v53 = result; // 0x403578\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403541\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403545\n            int64_t v56 = v54 + 1; // 0x40354a\n            int64_t v57 = v51 + 1; // 0x403571\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40353c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403541\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403545\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402c1d;\n    }\n  lab_0x403310:\n    // 0x403310\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40332f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403332\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4038ba\n        goto lab_0x4038ba_2;\n    }\n    goto lab_0x40333f;\n  lab_0x402b5d:\n    // 0x402b5d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402daa_2;\n    }\n    goto lab_0x402b91;\n  lab_0x402b35:;\n    bool v60 = v15 == 1; // 0x402b40\n    if (v15 == -1) {\n        // 0x402b42\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402b4e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402b91;\n    } else {\n        goto lab_0x402b5d;\n    }\n  lab_0x402c1d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402c22\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402c26\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402a38_2;\n}\n"
        },
        {
            "funcName": "function_403bc0",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403d5e",
            "decompiledFuncCode": "int64_t function_403bc0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403bc2\n    int32_t * v3 = __errno_location(); // 0x403bdc\n    int64_t v4 = (int64_t)g20; // 0x403be1\n    int32_t v5 = *v3; // 0x403beb\n    int64_t v6 = v4; // 0x403c01\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403d59\n            function_404c70(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403c10\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403c17\n        int64_t v9; // 0x403bc0\n        if (g20 == &g21) {\n            int64_t v10 = function_404a80(0, v8); // 0x403d3a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x403d3f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404a80(v4, v8); // 0x403c2b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x403c3a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x403c3a\n        int32_t v14 = v7; // 0x403c41\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403c71\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403c7b\n    int64_t * v17 = (int64_t *)v15; // 0x403c7e\n    uint64_t v18 = *v17; // 0x403c7e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403c81\n    int64_t result = *v19; // 0x403c81\n    int64_t v20; // 0x403bc0\n    uint64_t v21 = function_402990(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ca4\n    if (v18 > v21) {\n        // 0x403d1b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403cb7\n    *v17 = v22;\n    if (result != (int64_t)&g36) {\n        // 0x403cc7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404a20(v22); // 0x403ce1\n    *v19 = result2;\n    int64_t v23; // 0x403bc0\n    function_402990(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403d1b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "403d94",
            "decompiledFuncCode": "int64_t function_403d60(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403d67\n    int64_t result = function_404c20(a1 == 0 ? (int64_t)&g37 : a1, 56); // 0x403d86\n    return result;\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403daf",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g37 : a1); // 0x403dac\n    return result;\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "403dbf",
            "decompiledFuncCode": "int64_t function_403db0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403db8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403dc0",
            "funcStartAddr": "403dc0",
            "funcEndAddr": "403df3",
            "decompiledFuncCode": "int64_t function_403dc0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 + 8 : a1 + 8; // 0x403dd9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403dde\n    uint32_t v3 = *v2; // 0x403dde\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403de2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403e13",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g37 + 4 : a1 + 4); // 0x403e0c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e4b",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403e28\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403e45\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403e3c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403ec2",
            "decompiledFuncCode": "int64_t function_403e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g37 : a5; // 0x403e72\n    int32_t * v2 = __errno_location(); // 0x403e7b\n    uint32_t v3 = *(int32_t *)v1; // 0x403e9b\n    int64_t result = function_402990(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403eaa\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403fb1",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g37 : a4; // 0x403ef2\n    int32_t * v2 = __errno_location(); // 0x403ef8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403f17\n    int32_t * v4 = (int32_t *)v1; // 0x403f1a\n    int64_t v5 = function_402990(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403f35\n    int64_t v6 = v5 + 1; // 0x403f3a\n    int64_t result = function_404a20(v6); // 0x403f4f\n    function_402990(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403f94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403f9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "403fca",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403fc0\n    return function_403ed0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "404065",
            "decompiledFuncCode": "int64_t function_403fd0(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403fd0\n    int64_t v2 = v1; // 0x403fd0\n    int64_t v3 = v2; // 0x403fe4\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404003\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g47;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404000\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g47;\n        }\n    }\n    int64_t v6 = v3; // 0x40401d\n    if (g21 != 0x60a300) {\n        // 0x40401f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g36;\n        v6 = &g47;\n    }\n    int64_t result = v6; // 0x404041\n    if (g20 != &g21) {\n        // 0x404043\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g47;\n    }\n    // 0x404056\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404081",
            "decompiledFuncCode": "int64_t function_404070(void) {\n    // 0x404070\n    int64_t v1; // 0x404070\n    return function_403bc0(v1, v1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "40409a",
            "decompiledFuncCode": "int64_t function_404090(void) {\n    // 0x404090\n    int64_t v1; // 0x404090\n    return function_403bc0(v1, v1, v1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040b6",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1) {\n    // 0x4040a0\n    return function_403bc0(0, a1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040d2",
            "decompiledFuncCode": "int64_t function_4040c0(int64_t a1, int64_t a2) {\n    // 0x4040c0\n    return function_403bc0(0, a1, a2, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "404148",
            "decompiledFuncCode": "int64_t function_4040e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4040f0\n    return function_403bc0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "4041b4",
            "decompiledFuncCode": "int64_t function_404150(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404160\n    return function_403bc0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041cc",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t * a2) {\n    // 0x4041c0\n    return function_4040e0(0, a1 & 0xffffffff, (int64_t)a2);\n}\n"
        },
        {
            "funcName": "function_4041d0",
            "funcStartAddr": "4041d0",
            "funcEndAddr": "4041df",
            "decompiledFuncCode": "int64_t function_4041d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4041d0\n    return function_404150(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "404250",
            "decompiledFuncCode": "int64_t function_4041e0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x4041ed\n    int128_t v2 = __asm_movdqa(g38); // 0x4041f5\n    int128_t v3 = __asm_movdqa(g39); // 0x4041fd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404212\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404228\n    uint32_t v6 = *v5; // 0x404228\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40422d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403bc0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40425d",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2) {\n    // 0x404250\n    return function_4041e0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404271",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1) {\n    // 0x404260\n    return function_4041e0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "40428a",
            "decompiledFuncCode": "int64_t function_404280(void) {\n    // 0x404280\n    int64_t v1; // 0x404280\n    return function_4041e0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042fe",
            "decompiledFuncCode": "int64_t function_404290(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4042aa\n    return function_403bc0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40436c",
            "decompiledFuncCode": "int64_t function_404300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x404307\n    int128_t v2 = __asm_movdqa(g38); // 0x40430f\n    int128_t v3 = __asm_movdqa(g39); // 0x404317\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404339\n    if (a2 == 0 || a3 == 0) {\n        // 0x404367\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40434a\n    return function_403bc0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "404379",
            "decompiledFuncCode": "int64_t function_404370(void) {\n    // 0x404370\n    int64_t v1; // 0x404370\n    return function_404300(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "404397",
            "decompiledFuncCode": "int64_t function_404380(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404380\n    return function_404300(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043b3",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4043a0\n    return function_404300(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043ca",
            "decompiledFuncCode": "int64_t function_4043c0(void) {\n    // 0x4043c0\n    int64_t v1; // 0x4043c0\n    return function_403bc0(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_4043d0",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "4043e2",
            "decompiledFuncCode": "int64_t function_4043d0(int64_t a1, int64_t a2) {\n    // 0x4043d0\n    return function_403bc0(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404401",
            "decompiledFuncCode": "int64_t function_4043f0(void) {\n    // 0x4043f0\n    int64_t v1; // 0x4043f0\n    return function_403bc0(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404426",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1) {\n    // 0x404410\n    return function_403bc0(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40447b",
            "decompiledFuncCode": "int64_t function_404430(int64_t * a1) {\n    // 0x404430\n    int64_t v1; // bp-152, 0x404430\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x404470\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "40485d",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404518\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40449c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4044b6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4044fb\n    if (a6 < 10) {\n        // 0x40450a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404602\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "404880",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404860\n    if (a5 == 0) {\n        // 0x40487b\n        return function_404480(a1, a2, a3, a4, a5, 0, (int64_t)&g47);\n    }\n    int64_t v1 = 0; // 0x404867\n    v1++;\n    int64_t v2 = v1; // 0x404879\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404870\n        v1++;\n        v2 = v1;\n    }\n    // 0x40487b\n    return function_404480(a1, a2, a3, a4, a5, v2, (int64_t)&g47);\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "4048e0",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404880\n    int64_t v3 = &v2; // 0x404880\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4048b3\n    int64_t v6; // 0x40489d\n    int64_t * v7; // 0x4048bb\n    int64_t v8; // 0x4048bb\n    int64_t v9; // 0x4048c7\n    if (v5 < 48) {\n        // 0x404890\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4048d3\n            break;\n        }\n    } else {\n        // 0x4048bb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4048d3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4048b1\n    while (v4 != 9) {\n        // 0x4048a9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404890\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4048d3\n                break;\n            }\n        } else {\n            // 0x4048bb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4048d3\n                break;\n            }\n        }\n        // 0x4048a9\n        v10 = 10;\n    }\n    // 0x4048d3\n    return function_404480(a1, a2, a3, a4, v3, v10, (int64_t)&g47);\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "40499c",
            "decompiledFuncCode": "int64_t function_4048e0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4048e0\n    int64_t v1; // bp-168, 0x4048e0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4048e0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4048e0\n    int64_t v8; // 0x4048e0\n    int64_t v9; // bp-56, 0x4048e0\n    int64_t v10; // 0x404945\n    int64_t v11; // 0x404969\n    if ((int32_t)v6 < 48) {\n        // 0x404930\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404980\n            break;\n        }\n    } else {\n        // 0x404962\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404980\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40495a\n    int64_t v13 = 10; // 0x40495a\n    while (v5 != 9) {\n        // 0x40495c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404930\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404980\n                break;\n            }\n        } else {\n            // 0x404962\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404980\n                break;\n            }\n        }\n        // 0x404952\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404980\n    int64_t v14; // bp-136, 0x4048e0\n    int64_t result = function_404480(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g47); // 0x40498f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "404a14",
            "decompiledFuncCode": "int64_t function_4049a0(int64_t a1) {\n    // 0x4049a0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404a03\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a3a",
            "decompiledFuncCode": "int64_t function_404a20(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404a24\n    if (size != 0 != (mem == NULL)) {\n        // 0x404a33\n        return (int64_t)mem;\n    }\n    // 0x404a35\n    function_404c70(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a61",
            "decompiledFuncCode": "int64_t function_404a40(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404a43\n    int64_t v2 = v1; // 0x404a43\n    if (v2 < 0) {\n        // 0x404a5b\n        function_404c70(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a59\n        return function_404a20(v2);\n    }\n    // 0x404a5b\n    function_404c70(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404a72",
            "decompiledFuncCode": "int64_t function_404a70(void) {\n    // 0x404a70\n    int64_t v1; // 0x404a70\n    return function_404a20(v1);\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404ab6",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404aa8\n        free(v1);\n        return (int32_t)&g47 ^ (int32_t)&g47;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404a91\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404aa0\n        return (int64_t)mem;\n    }\n    // 0x404ab1\n    function_404c70(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404ae1",
            "decompiledFuncCode": "int64_t function_404ac0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404ac3\n    int64_t v2 = v1; // 0x404ac3\n    if (v2 < 0) {\n        // 0x404adb\n        function_404c70(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404ad9\n        return function_404a80(a1, v2);\n    }\n    // 0x404adb\n    function_404c70(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404b76",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404b4b\n            function_404c70(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a80(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404b33\n    if (a2 == 0) {\n        // 0x404b58\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404b38\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404b4b\n        function_404c70(a1);\n        // UNREACHABLE\n    }\n    // 0x404b1a\n    *(int64_t *)a2 = v2;\n    return function_404a80(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404bd0",
            "decompiledFuncCode": "int64_t function_404b80(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404b80\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404bca\n            function_404c70(a1);\n            // UNREACHABLE\n        }\n        // 0x404ba2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404a80(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404bb5\n        *(int64_t *)a2 = 128;\n        return function_404a80(0, 128);\n    }\n    // 0x404bc8\n    if (a2 < 0) {\n        // 0x404bca\n        function_404c70(a1);\n        // UNREACHABLE\n    }\n    // 0x404ba2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404a80(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404be7",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int64_t a2) {\n    // 0x404bd0\n    return (int64_t)memset((int64_t *)function_404a20(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c1e",
            "decompiledFuncCode": "int64_t function_404bf0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404bf7\n    if ((int64_t)v1 < 0) {\n        // 0x404c19\n        function_404c70(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404c19\n        function_404c70(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404c0a\n    if (mem != NULL) {\n        // 0x404c14\n        return (int64_t)mem;\n    }\n    // 0x404c19\n    function_404c70(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c48",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404a20(a2); // 0x404c2f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404c50",
            "funcStartAddr": "404c50",
            "funcEndAddr": "404c63",
            "decompiledFuncCode": "int64_t function_404c50(int64_t str) {\n    // 0x404c50\n    return function_404c20(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404ca1",
            "decompiledFuncCode": "int64_t function_404c70(int64_t a1) {\n    // 0x404c70\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cdf",
            "decompiledFuncCode": "int64_t function_404cb0(int64_t a1, int64_t a2) {\n    int64_t result = function_404ce0(0, 0); // 0x404cb5\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x404cc2\n        return result;\n    }\n    // 0x404cda\n    function_404c70(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "4051a2",
            "decompiledFuncCode": "int64_t function_404ce0(int32_t a1, int32_t a2) {\n    // 0x404ce0\n    int32_t size; // 0x404ce0\n    int32_t v1; // 0x404ce0\n    int32_t v2; // 0x404ce0\n    if (a2 != 0) {\n        // 0x404d40\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x404d12;\n        } else {\n            goto lab_0x404d5c;\n        }\n    } else {\n        // 0x404d00\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x405100\n            *__errno_location() = 22;\n            // 0x404d26\n            return 0;\n        }\n        goto lab_0x404d12;\n    }\n  lab_0x4050a0:;\n    // 0x4050a0\n    int32_t v3; // 0x40509a\n    int64_t v4 = v3; // 0x4050a2\n    int64_t v5; // 0x404ce0\n    int64_t dirp2 = v5; // 0x4050a2\n    int32_t * v6; // 0x404de6\n    if (v3 != 0) {\n        goto lab_0x4050b1;\n    } else {\n        // 0x4050a4\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x4050b1;\n    }\n  lab_0x404eb2:;\n    // 0x404eb2\n    int64_t v7; // 0x404ce0\n    int64_t v8 = v7;\n    int64_t v9; // 0x404ce0\n    int64_t v10 = v9 + 19; // 0x404eb2\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x404ce0\n    int64_t v12; // 0x404ce0\n    int32_t v13; // 0x404ce0\n    int32_t fd; // 0x404e02\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x404ee5\n        if (v11 == v12) {\n            // break -> 0x404f00\n            goto lab_0x404f00;\n        }\n    }\n    int64_t v14 = v8; // 0x404ce0\n    goto lab_0x404e70_2;\n  lab_0x40517e_2:\n    // 0x40517e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x4050b1;\n  lab_0x404d12:;\n    int64_t * mem = malloc(size); // 0x404d17\n    int32_t v41 = (int64_t)mem; // 0x404d1c\n    int32_t result = v41; // 0x404d24\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x404d26\n        return result;\n    }\n    goto lab_0x404d5c;\n  lab_0x404d5c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x404d61\n    int64_t v46 = v45 - 1; // 0x404d70\n    *(char *)v46 = 0;\n    int64_t v47; // 0x404ce0\n    int64_t v48; // 0x404ce0\n    int32_t * v49; // 0x404ce0\n    int64_t v50; // 0x404ce0\n    int64_t v33; // 0x404ce0\n    int64_t v40; // 0x404ce0\n    int64_t v51; // 0x404ce0\n    int32_t v38; // 0x404ce0\n    int32_t v52; // 0x404ce0\n    int32_t v53; // 0x404ce0\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x4050d8;\n    } else {\n        // 0x404d86\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x4050d8;\n        } else {\n            // 0x404db1\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x404ff8;\n            } else {\n                // 0x404de6\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x404df3\n                int32_t v55 = v42; // 0x404df3\n                int64_t v56 = v11; // 0x404df3\n                int64_t v57 = v46; // 0x404df3\n                int64_t v58 = 0; // 0x404df3\n                int32_t fd2 = -100; // 0x404df3\n                int64_t dirp3; // 0x404ce0\n                while (true) {\n                    // 0x404df6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x405127\n                        break;\n                    }\n                    // 0x404e12\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x405138\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40511d;\n                        } else {\n                            // 0x405141\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40511d;\n                        }\n                    }\n                    // 0x404e2b\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x404e30\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x405119\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40511d;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x404e57\n                    if (dirp == NULL) {\n                        // 0x405119\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40511d;\n                    }\n                    // 0x404e68\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x404e70_2:;\n                        int64_t v15 = v14; // 0x404ce0\n                        int64_t v16; // 0x404ce0\n                        int64_t v17; // 0x404ce0\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x404e7b\n                            int64_t v20; // 0x404ce0\n                            int64_t v21; // 0x404ce0\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x405050\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x4050a0;\n                                }\n                                // 0x40505d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x405068\n                                if (v23 == NULL) {\n                                    // 0x40509a\n                                    v3 = *v6;\n                                    goto lab_0x4050a0;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x404eb2;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x404e93\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x405080\n                            if (*(char *)v28 != 0) {\n                                // 0x40508a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x404e93\n                                    break;\n                                }\n                            }\n                            // 0x404e70\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x404eb2;\n                        } else {\n                            // 0x404e98\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x404ead\n                            int64_t v32; // 0x404ce0\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x404e70\n                                v14 = v31;\n                                goto lab_0x404e70_2;\n                            } else {\n                                goto lab_0x404eb2;\n                            }\n                        }\n                    }\n                  lab_0x404f00:;\n                    int64_t v61 = v38; // 0x404f08\n                    uint64_t v62 = v57 - v61; // 0x404f08\n                    int32_t len = strlen(str); // 0x404f0d\n                    uint64_t v63 = (int64_t)len; // 0x404f0d\n                    int32_t v64 = v60; // 0x404f18\n                    int32_t v65 = v38; // 0x404f18\n                    int64_t dest_mem = v57; // 0x404f18\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x405190\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x4050b1;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x404f26\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x404f31\n                        uint64_t v68 = v67 + v66; // 0x404f35\n                        if (v68 < v66) {\n                            goto lab_0x40517e_2;\n                        }\n                        // 0x404f48\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x404f50\n                        if (mem2 == NULL) {\n                            goto lab_0x40517e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x404f50\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x404fad\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x404fde\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x4050e0;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x404ff8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x405127\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x4050b9;\n                } else {\n                    goto lab_0x4050b1;\n                }\n            }\n        }\n    }\n  lab_0x4050d8:\n    // 0x4050d8\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x4050e0;\n  lab_0x4050e0:;\n    int64_t v77 = (int64_t)*v49; // 0x4050e6\n    int64_t v34 = v77; // 0x4050ea\n    int32_t * v35 = v49; // 0x4050ea\n    int32_t * v36 = v49; // 0x4050ea\n    int32_t v37 = v53; // 0x4050ea\n    int64_t v39 = v77; // 0x4050ea\n    if (a1 != 0) {\n        goto lab_0x4050c1;\n    } else {\n        goto lab_0x4050ec;\n    }\n  lab_0x4050c1:\n    // 0x4050c1\n    *v35 = (int32_t)v34;\n    // 0x404d26\n    return 0;\n  lab_0x4050ec:\n    // 0x4050ec\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x4050c1;\n  lab_0x404ff8:\n    // 0x404ff8\n    if (v51 == v47 - 1 + v48) {\n        // 0x405167\n        int64_t v78; // 0x404ce0\n        int64_t v79 = v78 - 1; // 0x40516c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x405022\n    int32_t v81 = v50 - v51; // 0x405022\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40502d\n    if (a2 == 0) {\n        // 0x405150\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x404d26\n    return result2;\n  lab_0x4050b9:\n    // 0x4050b9\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x4050ec;\n    } else {\n        goto lab_0x4050c1;\n    }\n  lab_0x4050b1:\n    // 0x4050b1\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x4050b9;\n  lab_0x40511d:\n    // 0x40511d\n    close(fd);\n    v33 = v40;\n    goto lab_0x4050b9;\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "40528f",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4051bc\n    uint32_t v2 = *v1; // 0x4051bc\n    int64_t v3 = a2 & 0xffffffff; // 0x4051c1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4051c4\n    uint64_t v5 = (int64_t)*v4; // 0x4051c4\n    int64_t v6; // 0x405232\n    if (v3 <= v5) {\n      lab_0x40522c_2:\n        // 0x40522c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4051b2\n    int64_t v8 = v2; // 0x4051b0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40522c\n        goto lab_0x40522c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4051e8\n    int64_t v17; // 0x4051f6\n    int64_t * v18; // 0x405210\n    int64_t * v19; // 0x405213\n    int64_t v20; // 0x40521e\n    int64_t v21; // 0x4051f6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4051f3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405210\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405227\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40522c\n            goto lab_0x40522c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40522c\n            goto lab_0x40522c_2;\n        }\n        // 0x4051e2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40526b\n    int64_t * v23 = (int64_t *)v22; // 0x405270\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405273\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405270\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405287\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4051dd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40522c\n            goto lab_0x40522c_2;\n        }\n        // 0x4051e2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4051f3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405210\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405227\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40522c\n                goto lab_0x40522c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40522c\n                goto lab_0x40522c_2;\n            }\n            // 0x4051e2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405250\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405270\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405287\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40522c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405290",
            "funcStartAddr": "405290",
            "funcEndAddr": "4058ac",
            "decompiledFuncCode": "int64_t function_405290(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4052af\n    int64_t v2 = *v1; // 0x4052af\n    char * str2 = (char *)v2; // 0x4052bc\n    char c = *str2; // 0x4052bc\n    int64_t v3 = v2; // 0x4052e8\n    int64_t v4 = 0; // 0x405290\n    int32_t v5; // 0x405290\n    int64_t v6; // 0x405290\n    int64_t v7; // 0x405290\n    int64_t v8; // 0x405290\n    int64_t v9; // 0x405290\n    int64_t v10; // 0x405290\n    int64_t v11; // 0x405290\n    int64_t v12; // 0x405290\n    int64_t v13; // 0x405290\n    int64_t str3; // 0x405290\n    int64_t v14; // 0x405290\n    int64_t v15; // 0x405290\n    int64_t v16; // 0x405290\n    int64_t v17; // 0x405290\n    int32_t v18; // 0x405290\n    int32_t v19; // 0x405290\n    int32_t v20; // 0x405290\n    int32_t v21; // 0x405290\n    int32_t v22; // 0x405290\n    int32_t v23; // 0x405290\n    int32_t v24; // 0x405290\n    int32_t v25; // 0x405290\n    int32_t v26; // 0x405290\n    int32_t v27; // 0x405290\n    int32_t v28; // 0x405290\n    int32_t v29; // 0x405290\n    int64_t nmemb; // 0x405290\n    int64_t v30; // 0x405290\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4052ec\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4052e8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4052f8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4052fe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4052c8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40532c\n                int64_t v34; // 0x405290\n                int64_t v35; // 0x405290\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405335\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4054b0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405346\n                int64_t v37 = *(int64_t *)v36; // 0x40534a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405320\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405335\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4054b0;\n                        }\n                    }\n                    // 0x405346\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405396:\n                    // 0x405396\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4053f0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405560\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4053f0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405510\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4053ba;\n                                } else {\n                                    // 0x40551c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4053ba;\n                                    } else {\n                                        // 0x40552a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4053ba;\n                                        } else {\n                                            goto lab_0x4053f0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4053ba;\n                            }\n                        }\n                    }\n                }\n              lab_0x405401:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4055d6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405782\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x4057a2\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4057ef\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x405809\n                            int64_t v45; // 0x40580b\n                            if (*(char *)v42 != 0) {\n                                // 0x40580b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405803\n                            while (v17 + nmemb != v42) {\n                                // 0x405805\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40580b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x4057f8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405830\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x4055e4\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40573f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405639\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405650\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4054fe\n                    return 63;\n                }\n                // 0x405420\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4054a4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4054b0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4054c0\n                    uint32_t v50 = *v49; // 0x4054c0\n                    int64_t v51 = v50; // 0x4054c0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4054ca\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4054d3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4056ff\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4056aa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4054fe\n                            return 63;\n                        }\n                        // 0x405548\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40585f\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40575d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405770\n                                // 0x4054fe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40566e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405682\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4054eb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4054ee\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4054f2\n                    int64_t result = v59; // 0x4054f8\n                    if (v58 != 0) {\n                        // 0x4054fa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4054fe\n                    return result;\n                }\n            } else {\n                // 0x4052fe\n                v5 = v32;\n            }\n            // break -> 0x405425\n            break;\n        }\n    }\n    // 0x405425\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40543d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405447\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4054fe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405589\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405476\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405486\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4053f0:\n    // 0x4053f0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4053f0\n    int64_t v63 = *(int64_t *)v62; // 0x4053f4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405401\n        goto lab_0x405401;\n    }\n    goto lab_0x405396;\n  lab_0x4053ba:\n    // 0x4053ba\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405290\n    int32_t v65; // 0x405290\n    int32_t v66; // 0x405290\n    if (v27 != 0) {\n        goto lab_0x4053f0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405570\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4053f0;\n            } else {\n                goto lab_0x4053e1;\n            }\n        } else {\n            // 0x4053d5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4056cc\n                int64_t v67 = (int64_t)mem; // 0x4056cc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4053f0;\n                } else {\n                    // 0x4056df\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4053e1;\n                }\n            } else {\n                goto lab_0x4053e1;\n            }\n        }\n    }\n  lab_0x4053e1:\n    // 0x4053e1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4053f0;\n}\n"
        },
        {
            "funcName": "function_4058b0",
            "funcStartAddr": "4058b0",
            "funcEndAddr": "405e76",
            "decompiledFuncCode": "int64_t function_4058b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4058d1\n    if (v3 < 1) {\n        // 0x405a8e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4058cd\n    int32_t v5 = *(int32_t *)a7; // 0x4058d9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4058db\n    int64_t v7 = v2; // 0x4058e0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4058e3\n    *v8 = 0;\n    int64_t v9; // 0x4058b0\n    int64_t v10; // 0x4058b0\n    int64_t v11; // 0x4058b0\n    int64_t v12; // 0x4058b0\n    int64_t str; // 0x4058b0\n    int64_t v13; // 0x4058b0\n    int64_t v14; // 0x4058b0\n    int64_t v15; // 0x4058b0\n    int64_t v16; // 0x4058b0\n    int64_t v17; // 0x4058b0\n    int32_t v18; // 0x4058b0\n    char v19; // 0x4058b0\n    if (v5 == 0) {\n        // 0x405ac8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4058fa;\n    } else {\n        // 0x4058f3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405940\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405943\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405a08;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405956\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405966\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405a1c;\n                } else {\n                    goto lab_0x405978;\n                }\n            }\n        } else {\n            goto lab_0x4058fa;\n        }\n    }\n  lab_0x4058fa:\n    // 0x4058fa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405900\n    *v24 = 0;\n    int64_t v25; // 0x4058b0\n    int64_t v26; // 0x4058b0\n    int64_t v27; // 0x4058b0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4059f0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4059fd;\n        }\n        case 43: {\n            // 0x405d00\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4059fd;\n        }\n        default: {\n            // 0x40591c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405c7f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405d98\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4059fd;\n                } else {\n                    // 0x405c8d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40592a;\n                }\n            } else {\n                goto lab_0x40592a;\n            }\n        }\n    }\n  lab_0x405a08:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405a0f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405978;\n    } else {\n        goto lab_0x405a1c;\n    }\n  lab_0x40592a:\n    // 0x40592a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4059fd;\n  lab_0x4059fd:\n    // 0x4059fd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405a08;\n  lab_0x405978:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405978\n    int64_t v31 = v30; // 0x405978\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40597a\n    if ((int64_t)*v32 > v31) {\n        // 0x40597f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405982\n    if (*v33 > v30) {\n        // 0x405987\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40598a\n    int64_t v35 = v31; // 0x40598e\n    int64_t v36 = v15; // 0x40598e\n    int64_t v37; // 0x4058b0\n    int64_t v38; // 0x4058b0\n    int64_t v39; // 0x4058b0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405af8\n        int64_t v41 = v40; // 0x405af8\n        v2 = v41;\n        int64_t v42; // 0x4058b0\n        if (*v33 == v40) {\n            // 0x405ce0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405ce8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405b04\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405b08\n                function_4051b0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405b18\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405b21\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405b2a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405b41\n            int64_t v47 = v45 & 0xffffffff; // 0x405b45\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405b4e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405b54\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405b56;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405b30\n            int64_t v49 = v48 & 0xffffffff; // 0x405b30\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405b41\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405b4e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405b54\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405b56;\n                    }\n                }\n                // 0x405b30\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405cf8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405b56;\n    } else {\n        goto lab_0x405994;\n    }\n  lab_0x405a1c:\n    // 0x405a1c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405a1f\n    int64_t v51 = v12; // 0x405a1f\n    int64_t v52 = v14; // 0x405a1f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405978;\n    } else {\n        goto lab_0x405a25;\n    }\n  lab_0x405994:;\n    int32_t v53 = v35; // 0x405994\n    int64_t v54; // 0x4058b0\n    int64_t v55; // 0x4058b0\n    int64_t v56; // 0x4058b0\n    int64_t v57; // 0x4058b0\n    int64_t v58; // 0x4058b0\n    int64_t v59; // 0x4058b0\n    char * v60; // 0x4058b0\n    int64_t v61; // 0x4058b0\n    int64_t v62; // 0x4059a9\n    int64_t v63; // 0x4058b0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405ae3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405ae6;\n    } else {\n        // 0x40599c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4058b0\n        int64_t v66 = v65 ? -1 : 1; // 0x4059b0\n        int64_t v67 = (int64_t)\"--\"; // 0x4058b0\n        int64_t v68 = v62; // 0x4058b0\n        int64_t v69 = 3; // 0x4059b0\n        unsigned char v70 = *(char *)v68; // 0x4059b0\n        char v71 = *(char *)v67; // 0x4059b0\n        char v72 = v71; // 0x4059b0\n        bool v73 = false; // 0x4059b0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405aa0\n            if (*(char *)v62 == 45) {\n                // 0x405b60\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405b60\n                if (c == 0) {\n                    goto lab_0x405aaa;\n                } else {\n                    // 0x405b6d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405bf0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405dd3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405c45;\n                        } else {\n                            // 0x405b7e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405bf0;\n                            } else {\n                                // 0x405b83\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405ba4;\n                                } else {\n                                    // 0x405b8a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405bf0;\n                                    } else {\n                                        goto lab_0x405ba4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405aaa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4059c0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4059c3\n            int64_t v77 = v35 + 1; // 0x4059c6\n            int32_t v78 = v77; // 0x4059c9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405d30\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4059d7\n                    function_4051b0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4059e5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405ae6;\n        }\n    }\n  lab_0x405a25:;\n    // 0x405a25\n    int64_t v79; // bp-104, 0x4058b0\n    int64_t v80 = &v79; // 0x4058ba\n    int64_t v81 = v50 + 1; // 0x405a25\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405a2c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405a31\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405a35\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405a39\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405a41\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405a46\n    int32_t c2 = v84; // 0x405a46\n    char * found_char_pos = strchr(str2, c2); // 0x405a46\n    int64_t v87 = *v82; // 0x405a4b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405a55\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405a60\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405d50\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405d1d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405a8e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405a46\n    char v91 = *(char *)(v90 + 1); // 0x405a7b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405a35\n        if (v91 != 58) {\n            // 0x405a8e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405ca4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405da8\n                *v8 = 0;\n            } else {\n                // 0x405d8c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405cce\n            *v83 = 0;\n            // 0x405a8e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405cae\n        if (v93 != 0) {\n            // 0x405d40\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405cce\n            *v83 = 0;\n            // 0x405a8e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405cc1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405cce\n            *v83 = 0;\n            // 0x405a8e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405e0a\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405dba\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405dc1\n        // 0x405cce\n        *v83 = 0;\n        // 0x405a8e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405c19\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405c1b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405e40\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405df1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405df8\n            // 0x405a8e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405c26\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405c2a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405c45;\n  lab_0x405b56:\n    // 0x405b56\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405994;\n  lab_0x405c45:;\n    int64_t v99 = function_405290(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405c63\n    // 0x405a8e\n    return v99 & 0xffffffff;\n  lab_0x405ae6:;\n    int32_t v100 = v55; // 0x405ae6\n    if (v100 != (int32_t)v59) {\n        // 0x405aea\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405a8e\n    return 0xffffffff;\n  lab_0x405aaa:\n    // 0x405aaa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405ab1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405a8e\n    return v99 & 0xffffffff;\n  lab_0x405bf0:\n    // 0x405bf0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405a25;\n  lab_0x405ba4:\n    // 0x405ba4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405290(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x405bca\n    if ((int32_t)v101 != -1) {\n        // 0x405a8e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405bdf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405bf0;\n}\n"
        },
        {
            "funcName": "function_405e80",
            "funcStartAddr": "405e80",
            "funcEndAddr": "405ed6",
            "decompiledFuncCode": "int64_t function_405e80(int64_t a1) {\n    // 0x405e80\n    *(int32_t *)&g40 = g26;\n    *(int32_t *)&g41 = g25;\n    int64_t v1; // 0x405e80\n    int64_t result = function_4058b0(v1, v1, v1, v1, v1, v1, &g40, a1 & 0xffffffff); // 0x405ea6\n    g26 = *(int32_t *)&g40;\n    g45 = g43;\n    *(int32_t *)&g24 = g42;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ee0",
            "funcStartAddr": "405ee0",
            "funcEndAddr": "405ef8",
            "decompiledFuncCode": "int64_t function_405ee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ee0\n    return function_405e80(1);\n}\n"
        },
        {
            "funcName": "function_405f00",
            "funcStartAddr": "405f00",
            "funcEndAddr": "405f13",
            "decompiledFuncCode": "int64_t function_405f00(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x405f00\n    return function_405e80(0);\n}\n"
        },
        {
            "funcName": "function_405f20",
            "funcStartAddr": "405f20",
            "funcEndAddr": "405f35",
            "decompiledFuncCode": "int64_t function_405f20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f20\n    return function_4058b0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f56",
            "decompiledFuncCode": "int64_t function_405f40(void) {\n    // 0x405f40\n    return function_405e80(0);\n}\n"
        },
        {
            "funcName": "function_405f60",
            "funcStartAddr": "405f60",
            "funcEndAddr": "405f78",
            "decompiledFuncCode": "int64_t function_405f60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f60\n    return function_4058b0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405f80",
            "funcStartAddr": "405f80",
            "funcEndAddr": "405ffa",
            "decompiledFuncCode": "int64_t function_405f80(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405f8b\n    int64_t v2 = (int64_t)&g10; // 0x405f8b\n    int32_t * pwc; // 0x405f80\n    int64_t v3; // 0x405f80\n    int64_t n; // 0x405f80\n    if (a2 == 0) {\n        goto lab_0x405fd2;\n    } else {\n        // 0x405f8d\n        if (a3 == 0) {\n            // 0x405fb8\n            return -2;\n        }\n        // 0x405f99\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405fd2;\n        } else {\n            goto lab_0x405fa4;\n        }\n    }\n  lab_0x405fd2:\n    // 0x405fd2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405f80\n    pwc = (int32_t *)&v4;\n    goto lab_0x405fa4;\n  lab_0x405fa4:;\n    char * wstr = (char *)v3; // 0x405faa\n    int64_t ps; // 0x405f80\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405faa\n    int64_t result = v5; // 0x405faa\n    if (v5 < 0xfffffffe) {\n        // 0x405fb8\n        return result;\n    }\n    int64_t result2 = result; // 0x405fe9\n    if ((char)function_406880(0, v3) == 0) {\n        // 0x405feb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405fb8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406000",
            "funcStartAddr": "406000",
            "funcEndAddr": "40612e",
            "decompiledFuncCode": "int64_t function_406000(int64_t a1, uint64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 1; // 0x406027\n    int64_t v2 = 0; // 0x406027\n    int64_t v3 = -1; // 0x406027\n    int64_t v4; // 0x406000\n    int64_t v5; // 0x406000\n    int64_t v6; // 0x406000\n    if (a2 <= 1) {\n        // 0x406053\n        *a3 = 1;\n        v5 = -1;\n        v4 = -1;\n        v6 = 1;\n    } else {\n        int64_t v7; // 0x406000\n        int64_t v8; // 0x406000\n        int64_t v9; // 0x406000\n        int64_t v10; // 0x406000\n        while (true) {\n            // 0x406029\n            v9 = v3;\n            int64_t v11 = v9 + a1; // 0x406029\n            char * v12 = (char *)(v11 + 1);\n            int64_t v13 = 1;\n            unsigned char v14 = *(char *)(v13 + v11); // 0x40602d\n            unsigned char v15 = *(char *)(v1 + a1); // 0x406032\n            int64_t v16 = v1; // 0x406035\n            int64_t v17 = v1; // 0x406035\n            int64_t v18 = v13; // 0x406035\n            int64_t v19 = v2; // 0x406035\n            int64_t v20 = 1; // 0x406035\n            char v21 = v14; // 0x406035\n            char v22 = v15; // 0x406035\n            unsigned char v23; // 0x40602d\n            unsigned char v24; // 0x406032\n            int64_t v25; // 0x406047\n            if (v15 < v14) {\n                v10 = v16;\n                v25 = v10 + 1;\n                if (v25 >= a2) {\n                    // break (via goto) -> 0x406053\n                    goto lab_0x406053;\n                }\n                // 0x406029\n                v23 = *v12;\n                v24 = *(char *)(v25 + a1);\n                while (v24 < v23) {\n                    // 0x40603b\n                    v10 = v25;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x406053\n                        goto lab_0x406053;\n                    }\n                    // 0x406029\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                }\n                // 0x4060b8\n                v17 = v25;\n                v18 = 1;\n                v19 = v10;\n                v20 = v10 - v9;\n                v21 = v23;\n                v22 = v24;\n            }\n            // 0x4060b8\n            v3 = v19;\n            while (v22 == v21) {\n                int64_t v26 = v18;\n                v13 = v26 == v20 ? 1 : v26 + 1;\n                int64_t v27 = v26 == v20 ? v17 : v3;\n                int64_t v28 = v27 + v13; // 0x406020\n                v8 = v9;\n                v7 = v20;\n                if (v28 >= a2) {\n                    goto lab_0x406053_3;\n                }\n                v14 = *(char *)(v13 + v11);\n                v15 = *(char *)(v28 + a1);\n                v16 = v28;\n                v17 = v28;\n                v18 = v13;\n                v19 = v27;\n                v21 = v14;\n                v22 = v15;\n                if (v15 < v14) {\n                    v10 = v16;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x406053\n                        goto lab_0x406053;\n                    }\n                    // 0x406029\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                    while (v24 < v23) {\n                        // 0x40603b\n                        v10 = v25;\n                        v25 = v10 + 1;\n                        if (v25 >= a2) {\n                            // break (via goto) -> 0x406053\n                            goto lab_0x406053;\n                        }\n                        // 0x406029\n                        v23 = *v12;\n                        v24 = *(char *)(v25 + a1);\n                    }\n                    // 0x4060b8\n                    v17 = v25;\n                    v18 = 1;\n                    v19 = v10;\n                    v20 = v10 - v9;\n                    v21 = v23;\n                    v22 = v24;\n                }\n                // 0x4060b8\n                v3 = v19;\n            }\n            // 0x4060ba\n            v1 = v3 + 2;\n            v2 = v3 + 1;\n            v8 = v3;\n            v7 = 1;\n            if (v1 >= a2) {\n                goto lab_0x406053_3;\n            }\n        }\n      lab_0x406053:\n        // 0x406053\n        v8 = v9;\n        v7 = v10 - v9;\n      lab_0x406053_3:\n        // 0x406053\n        *a3 = v7;\n        int64_t v29 = 1; // 0x406077\n        int64_t v30 = -1; // 0x406077\n        int64_t v31 = 0; // 0x406077\n        v5 = v8;\n        v4 = -1;\n        v6 = 1;\n        if (a2 > 1) {\n            int64_t v32; // 0x406000\n            int64_t v33; // 0x406000\n            while (true) {\n                // 0x406079\n                v32 = v30;\n                int64_t v34 = v32 + a1; // 0x406079\n                char * v35 = (char *)(v34 + 1);\n                int64_t v36 = 1;\n                unsigned char v37 = *(char *)(v36 + v34); // 0x40607d\n                unsigned char v38 = *(char *)(v29 + a1); // 0x406082\n                int64_t v39 = v29; // 0x406086\n                int64_t v40 = v29; // 0x406086\n                int64_t v41 = 1; // 0x406086\n                int64_t v42 = v36; // 0x406086\n                int64_t v43 = v31; // 0x406086\n                char v44 = v37; // 0x406086\n                char v45 = v38; // 0x406086\n                int64_t v46; // 0x406094\n                unsigned char v47; // 0x40607d\n                unsigned char v48; // 0x406082\n                if (v38 > v37) {\n                    v33 = v39;\n                    v46 = v33 + 1;\n                    if (v46 >= a2) {\n                        // break (via goto) -> 0x4060a0\n                        goto lab_0x4060a0;\n                    }\n                    // 0x406079\n                    v47 = *v35;\n                    v48 = *(char *)(v46 + a1);\n                    while (v48 > v47) {\n                        // 0x406088\n                        v33 = v46;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x4060a0\n                            goto lab_0x4060a0;\n                        }\n                        // 0x406079\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                    }\n                    // 0x4060d8\n                    v40 = v46;\n                    v41 = v33 - v32;\n                    v42 = 1;\n                    v43 = v33;\n                    v44 = v47;\n                    v45 = v48;\n                }\n                int64_t v49 = v43;\n                while (v45 == v44) {\n                    int64_t v50 = v42;\n                    v36 = v50 == v41 ? 1 : v50 + 1;\n                    int64_t v51 = v50 == v41 ? v40 : v49;\n                    int64_t v52 = v51 + v36; // 0x406070\n                    v5 = v8;\n                    v4 = v32;\n                    v6 = v41;\n                    if (v52 >= a2) {\n                        goto lab_0x4060a0_3;\n                    }\n                    v37 = *(char *)(v36 + v34);\n                    v38 = *(char *)(v52 + a1);\n                    v39 = v52;\n                    v40 = v52;\n                    v42 = v36;\n                    v43 = v51;\n                    v44 = v37;\n                    v45 = v38;\n                    if (v38 > v37) {\n                        v33 = v39;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x4060a0\n                            goto lab_0x4060a0;\n                        }\n                        // 0x406079\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                        while (v48 > v47) {\n                            // 0x406088\n                            v33 = v46;\n                            v46 = v33 + 1;\n                            if (v46 >= a2) {\n                                // break (via goto) -> 0x4060a0\n                                goto lab_0x4060a0;\n                            }\n                            // 0x406079\n                            v47 = *v35;\n                            v48 = *(char *)(v46 + a1);\n                        }\n                        // 0x4060d8\n                        v40 = v46;\n                        v41 = v33 - v32;\n                        v42 = 1;\n                        v43 = v33;\n                        v44 = v47;\n                        v45 = v48;\n                    }\n                    // 0x4060d8\n                    v49 = v43;\n                }\n                int64_t v53 = v49 + 2; // 0x406070\n                v29 = v53;\n                v30 = v49;\n                v31 = v49 + 1;\n                v5 = v8;\n                v4 = v49;\n                v6 = 1;\n                if (v53 >= a2) {\n                    goto lab_0x4060a0_3;\n                }\n            }\n          lab_0x4060a0:\n            // 0x4060a0\n            v5 = v8;\n            v4 = v32;\n            v6 = v33 - v32;\n        }\n    }\n  lab_0x4060a0_3:;\n    int64_t v54 = v4 + 1; // 0x4060a0\n    int64_t v55 = v5 + 1; // 0x4060a4\n    int64_t result = v55; // 0x4060ab\n    if (v54 >= v55) {\n        // 0x4060ad\n        *a3 = v6;\n        result = v54;\n    }\n    // 0x4060b3\n    return result;\n}\n"
        },
        {
            "funcName": "function_406130",
            "funcStartAddr": "406130",
            "funcEndAddr": "406479",
            "decompiledFuncCode": "int64_t function_406130(int64_t a1, int64_t a2, int64_t str, int64_t a4) {\n    // 0x406130\n    int64_t v1; // 0x406130\n    int64_t v2; // bp-2112, 0x406130\n    int64_t v3; // 0x406130\n    if (a4 < 3) {\n        // 0x406450\n        v2 = 1;\n        v1 = a4 - 1;\n        v3 = 1;\n    } else {\n        // 0x406157\n        int64_t v4; // 0x406130\n        v1 = function_406000(str, a4, &v2, a4, v4, v4);\n        v3 = v2;\n    }\n    // 0x406174\n    int64_t v5; // bp-2184, 0x406130\n    int64_t v6 = &v5; // 0x406146\n    int64_t n = v1;\n    int64_t v7; // bp-2104, 0x406130\n    int64_t v8 = &v7; // 0x406181\n    *(int64_t *)v8 = a4;\n    v8 += 8;\n    int64_t v9; // bp-56, 0x406130\n    while (v8 != (int64_t)&v9) {\n        // 0x406188\n        *(int64_t *)v8 = a4;\n        v8 += 8;\n    }\n    int64_t str2 = v3 + str; // 0x406199\n    int64_t v10; // 0x406130\n    int64_t result; // 0x406130\n    if (a4 == 0) {\n        // 0x4062ea\n        v10 = -1;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x4062ff\n            return 0;\n        }\n    } else {\n        int64_t v11 = a4 - 1;\n        int64_t v12 = v6 + 80; // 0x4061c5\n        int64_t v13 = str + 1; // 0x4061c1\n        *(int64_t *)(8 * (int64_t)*(char *)str + v12) = v11 + str - str;\n        while (a4 + str != v13) {\n            int64_t v14 = v13;\n            unsigned char v15 = *(char *)v14; // 0x4061b8\n            v13 = v14 + 1;\n            *(int64_t *)(8 * (int64_t)v15 + v12) = v11 + str - v14;\n        }\n        // 0x4061cf\n        v10 = v11;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x40631b\n            if (function_406f70(a2 + a1, 0, a4 - a2) != 0) {\n                // 0x4062ff\n                return 0;\n            }\n            int64_t v16 = a4 - v3; // 0x406332\n            int64_t v17 = 0;\n            int64_t v18 = 0; // 0x406130\n            int64_t v19 = a4;\n            while (v19 != 0) {\n                int64_t v20 = v17;\n                int64_t v21 = 0x100000000 * v18;\n                uint64_t v22 = *(int64_t *)(8 * (int64_t)*(char *)(a1 - 1 + v19) + v12); // 0x4063b4\n                int64_t v23; // 0x406130\n                int64_t v24; // 0x406130\n                if (v22 != 0) {\n                    int64_t v25 = v22; // 0x406355\n                    if (v22 < v3) {\n                        // 0x406357\n                        v25 = v21 != 0 ? 0x100000000 * v16 >> 32 : v22;\n                    }\n                    // 0x406360\n                    v23 = 0;\n                    v24 = v25 + v20;\n                } else {\n                    uint64_t v26 = v21 >> 32; // 0x40639b\n                    int64_t v27 = v26 >= n ? v26 : n; // 0x4063c4\n                    if (v27 >= v11) {\n                        // 0x406400\n                        if (v26 < n) {\n                            int64_t v28 = v20 + a1; // 0x40640d\n                            char * v29; // 0x406130\n                            char v30 = *v29; // 0x406411\n                            int64_t v31; // 0x40631b\n                            char v32 = *(char *)(v28 + v31); // 0x406416\n                            int64_t v33 = v31; // 0x40641a\n                            if (v32 == v30) {\n                                int64_t v34 = v33;\n                                while (v26 != v34) {\n                                    int64_t v35 = v34 - 1;\n                                    char v36 = *(char *)(v35 + v28); // 0x406420\n                                    char v37 = *(char *)(v35 + str); // 0x406425\n                                    v33 = v35;\n                                    if (v37 != v36) {\n                                        // break -> 0x406438\n                                        break;\n                                    }\n                                    v34 = v33;\n                                }\n                            }\n                        }\n                        // 0x406438\n                        if (v26 + 1 > n) {\n                            // 0x406470\n                            result = v20 + a1;\n                            return result;\n                        }\n                        // 0x406441\n                        v23 = v16;\n                        v24 = v20 + v3;\n                    } else {\n                        int64_t v38 = v27;\n                        char v39 = *(char *)(v20 + a1 + v38); // 0x4063e1\n                        while (*(char *)(v38 + str) == v39) {\n                            int64_t v40 = v38 + 1; // 0x4063d8\n                            if (v40 == v11) {\n                                goto lab_0x406400;\n                            }\n                            v38 = v40;\n                            v39 = *(char *)(v20 + a1 + v38);\n                        }\n                        // 0x4063eb\n                        v23 = 0;\n                        v24 = v38 + v20 + 1 - n;\n                    }\n                }\n                // 0x406366\n                v17 = v24;\n                int64_t v41 = v17 + a4; // 0x406369\n                v18 = v23;\n                if (function_406f70(v19 + a1, 0, v41 - v19) != 0) {\n                    // break -> 0x4062ff\n                    break;\n                }\n                v19 = v41;\n            }\n            // 0x4062ff\n            return 0;\n        }\n    }\n    uint64_t v42 = a4 - n; // 0x4061ee\n    int64_t v43 = (v42 < n ? n : v42) + 1; // 0x4061fb\n    v2 = v43;\n    int64_t v44 = function_406f70(a2 + a1, 0, a4 - a2); // 0x406240\n    if (a4 == 0) {\n        // 0x4062ff\n        return 0;\n    }\n    int64_t v45 = n - 1;\n    int64_t v46 = v44; // 0x406130\n    int64_t v47 = a4; // 0x406226\n    int64_t v48 = 0;\n    int64_t v49; // 0x406130\n    int64_t v50; // 0x406130\n    int64_t v51; // 0x406130\n    int64_t v52; // 0x406130\n    int64_t v53; // 0x406256\n    int64_t v54; // 0x406271\n    while (true) {\n      lab_0x406253:\n        // 0x406253\n        result = 0;\n        if (v46 != 0) {\n            // break -> 0x4062ff\n            break;\n        }\n        // 0x406261\n        v49 = v47;\n        v53 = 0x100000000 * v48 >> 32;\n        unsigned char v55 = *(char *)(a1 - 1 + v49); // 0x406261\n        int64_t v56 = *(int64_t *)(v6 + 80 + 8 * (int64_t)v55); // 0x406267\n        v51 = v56;\n        v50 = v53;\n        if (v56 != 0) {\n            goto lab_0x406220;\n        } else {\n            // 0x406271\n            v54 = v53 + a1;\n            if (n >= v10) {\n                goto lab_0x4062a3;\n            } else {\n                // 0x40627a\n                v52 = n;\n                if (*(char *)(v54 + n) == *(char *)(n + str)) {\n                    int64_t v57 = n + 1; // 0x40629a\n                    while (v57 < v10) {\n                        int64_t v58 = v57; // 0x406298\n                        v52 = v57;\n                        if (*(char *)(v57 + str) != *(char *)(v57 + v54)) {\n                            goto lab_0x4062e0;\n                        }\n                        v57 = v58 + 1;\n                    }\n                    goto lab_0x4062a3;\n                } else {\n                    goto lab_0x4062e0;\n                }\n            }\n        }\n    }\n  lab_0x4062ff_3:\n    // 0x4062ff\n    return result;\n  lab_0x4062e0:\n    // 0x4062e0\n    v51 = v52;\n    v50 = 1 - n + v53;\n    goto lab_0x406220;\n  lab_0x406220:;\n    int64_t v59 = v50 + v51; // 0x406220\n    goto lab_0x406223;\n  lab_0x406223:\n    // 0x406223\n    v48 = v59;\n    v47 = v48 + a4;\n    v46 = function_406f70(v49 + a1, 0, v47 - v49);\n    result = 0;\n    if (v47 == 0) {\n        // break -> 0x4062ff\n        goto lab_0x4062ff_3;\n    }\n    goto lab_0x406253;\n  lab_0x4062a3:\n    // 0x4062a3\n    result = v54;\n    if (n == 0) {\n        // break -> 0x4062ff\n        goto lab_0x4062ff_3;\n    }\n    // 0x4062ad\n    if (*(char *)(v54 + v45) == *(char *)(v45 + str)) {\n        result = v54;\n        if (v45 == 0) {\n            // break (via goto) -> 0x4062ff\n            goto lab_0x4062ff_3;\n        }\n        int64_t v60 = v45 - 1; // 0x4062ca\n        int64_t v61 = v60; // 0x4062c8\n        while (*(char *)(v60 + str) == *(char *)(v60 + v54)) {\n            // 0x4062ca\n            result = v54;\n            if (v61 == 0) {\n                // break (via goto) -> 0x4062ff\n                goto lab_0x4062ff_3;\n            }\n            // 0x4062c0\n            v60 = v61 - 1;\n            v61 = v60;\n        }\n    }\n    // 0x406311\n    v59 = v53 + v43;\n    goto lab_0x406223;\n}\n"
        },
        {
            "funcName": "function_406480",
            "funcStartAddr": "406480",
            "funcEndAddr": "406814",
            "decompiledFuncCode": "int64_t function_406480(int64_t result, char * str) {\n    int64_t v1 = (int64_t)str;\n    char v2 = result;\n    char c = v1;\n    if (v2 == 0) {\n        // 0x406545\n        return c == 0 ? result : 0;\n    }\n    int64_t v3 = result; // 0x4064a0\n    int64_t v4 = v1; // 0x4064a0\n    if (c == 0) {\n        // 0x406545\n        return result;\n    }\n    int64_t v5 = 1; // 0x4064a0\n    v3++;\n    v4++;\n    unsigned char v6 = *(char *)v4; // 0x4064d1\n    v5 &= (int64_t)(c == v2);\n    char v7 = *(char *)v3; // 0x4064d7\n    while (v7 != 0) {\n        // 0x4064c0\n        if (v6 == 0) {\n            goto lab_0x4064e5;\n        }\n        char v8 = v6;\n        v3++;\n        v4++;\n        v6 = *(char *)v4;\n        v5 &= (int64_t)(v8 == v7);\n        v7 = *(char *)v3;\n    }\n    // 0x4064de\n    if (v6 != 0) {\n        // 0x406545\n        return 0;\n    }\n  lab_0x4064e5:\n    // 0x4064e5\n    if (v5 != 0) {\n        // 0x406545\n        return result;\n    }\n    uint64_t v9 = v4 - v1; // 0x4064f7\n    char * found_char_pos = strchr((char *)(result + 1), (int32_t)c); // 0x4064fe\n    int64_t result2 = (int64_t)found_char_pos; // 0x4064fe\n    if (v9 == 1 || found_char_pos == NULL) {\n        // 0x406545\n        return result2;\n    }\n    uint64_t v10 = v9 + result; // 0x406511\n    int64_t v11 = v10 < result2 ? 1 : v10 - result2; // 0x406527\n    if (v9 >= 32) {\n        // 0x406545\n        return function_406130(result2, v11, v1, v9);\n    }\n    int64_t v12; // 0x406480\n    int64_t v13; // bp-64, 0x406480\n    int64_t v14; // 0x406480\n    if (v9 < 3) {\n        // 0x4067e9\n        v13 = 1;\n        v12 = v9 - 1;\n        v14 = 1;\n    } else {\n        // 0x40656a\n        v12 = function_406000(v1, v9, &v13, (int64_t)v6, v11, v1 % 256);\n        v14 = v13;\n    }\n    int64_t n = v12;\n    int64_t v15; // 0x406480\n    int64_t v16; // 0x406480\n    int64_t v17; // 0x406480\n    int64_t v18; // 0x406480\n    int64_t v19; // 0x406480\n    int64_t v20; // 0x4066f0\n    int64_t v21; // 0x406480\n    int64_t v22; // 0x406480\n    if (memcmp((int64_t *)str, (int64_t *)(v14 + v1), (int32_t)n) != 0) {\n        uint64_t v23 = v9 - n; // 0x4066e3\n        v20 = (v23 < n ? n : v23) + 1;\n        v13 = v20;\n        if (v9 == 0 | function_406f70(v11 + result2, 0, v9 - v11) != 0) {\n            // 0x406545\n            return 0;\n        }\n        // 0x406738\n        v21 = n - 1;\n        int64_t v24 = 0x100000000 - 0x100000000 * n >> 32;\n        v15 = v9;\n        v17 = 0;\n        while (true) {\n          lab_0x406738:\n            // 0x406738\n            v18 = v17;\n            v16 = v15;\n            v22 = v18 + result2;\n            if (v9 > n) {\n                // 0x406741\n                if (*(char *)(v22 + n) == *(char *)(n + v1)) {\n                    int64_t v25 = n + 1; // 0x40676a\n                    while (v9 > v25) {\n                        int64_t v26 = v25; // 0x406768\n                        int64_t v27 = v25; // 0x406768\n                        if (*(char *)(v25 + v1) != *(char *)(v25 + v22)) {\n                            // 0x4067b0\n                            v19 = v18 + v24 + v27;\n                            goto lab_0x4067bd;\n                        }\n                        v25 = v26 + 1;\n                    }\n                    goto lab_0x406773;\n                } else {\n                    // 0x4067b0\n                    v19 = v18 + v24 + n;\n                    goto lab_0x4067bd;\n                }\n            } else {\n                goto lab_0x406773;\n            }\n        }\n      lab_0x406545_3:\n        // 0x406545\n        return 0;\n    }\n    // 0x4065b7\n    if (v9 == 0 | function_406f70(v11 + result2, 0, v9 - v11) != 0) {\n        // 0x406545\n        return 0;\n    }\n    int64_t v28 = n - 1; // 0x4065b7\n    char * v29 = (char *)(v28 + v1);\n    int64_t v30 = 0x100000000 * (v9 - v14) / 0x100000000;\n    int64_t v31 = 0x100000000 - 0x100000000 * n >> 32;\n    int64_t v32 = v9; // 0x406480\n    int64_t v33 = 0; // 0x406480\n    int64_t v34 = 0; // 0x406480\n    int64_t v35; // 0x406480\n    uint64_t v36; // 0x406480\n    int64_t v37; // 0x406480\n    int64_t v38; // 0x406480\n    while (true) {\n      lab_0x406612:\n        // 0x406612\n        v36 = v34;\n        v37 = v33;\n        v35 = v32;\n        int64_t v39 = n >= v36 ? n : v36; // 0x406618\n        if (v9 > v39) {\n            // 0x406621\n            v38 = v39;\n            if (*(char *)(v39 + v37 + result2) != *(char *)(v39 + v1)) {\n                goto lab_0x4066c0;\n            } else {\n                int64_t v40; // 0x406480\n                while (v9 != v40 + 1) {\n                    // 0x406640\n                    int64_t v41; // 0x406480\n                    int64_t v42; // 0x40664a\n                    char v43 = *(char *)(v42 + v41); // 0x406640\n                    char v44 = *(char *)(v42 + v1); // 0x406644\n                    v40 = v42;\n                    v38 = v42;\n                    if (v44 != v43) {\n                        goto lab_0x4066c0;\n                    }\n                    int64_t v45 = v40;\n                    v42 = v45 + 1;\n                }\n                goto lab_0x406653;\n            }\n        } else {\n            goto lab_0x406653;\n        }\n    }\n  lab_0x40680c:\n    // 0x406545\n    return v37 + result2;\n  lab_0x406773:\n    // 0x406773\n    if (n == 0) {\n        return 0;\n    }\n    // 0x40677d\n    int64_t result3; // 0x406480\n    if (*(char *)(v22 + v21) == *(char *)(v21 + v1)) {\n        result3 = v22;\n        if (v21 == 0) {\n            return result3;\n        }\n        int64_t v46 = v21 - 1; // 0x40679a\n        int64_t v47 = v46; // 0x406798\n        while (*(char *)(v46 + v1) == *(char *)(v46 + v22)) {\n            // 0x40679a\n            result3 = v22;\n            if (v47 == 0) {\n                return result3;\n            }\n            // 0x406790\n            v46 = v47 - 1;\n            v47 = v46;\n        }\n    }\n    // 0x4067c8\n    v19 = v18 + v20;\n    goto lab_0x4067bd;\n  lab_0x4067bd:;\n    int64_t v48 = v19 + v9; // 0x406718\n    int64_t v49 = function_406f70(v16 + result2, 0, v48 - v16); // 0x406729\n    v15 = v48;\n    v17 = v19;\n    if (v48 == 0 || v49 != 0) {\n        // break -> 0x406545\n        goto lab_0x406545_3;\n    }\n    goto lab_0x406738;\n  lab_0x4066c0:;\n    int64_t v50 = 0; // 0x4066d0\n    int64_t v51 = v37 + v31 + v38; // 0x4066d0\n    goto lab_0x4066af;\n  lab_0x406653:;\n    int64_t v54 = n; // 0x40665b\n    if (n > v36) {\n        int64_t v55 = v37 + result2; // 0x406666\n        v54 = n;\n        if (*v29 == *(char *)(v55 + v28)) {\n            int64_t v56 = v28;\n            v54 = v56;\n            while (v36 != v56) {\n                int64_t v57 = v56 - 1;\n                int64_t v58 = v57; // 0x40668a\n                v54 = v56;\n                if (*(char *)(v57 + v1) != *(char *)(v57 + v55)) {\n                    // break -> 0x406698\n                    break;\n                }\n                v56 = v58;\n                v54 = v56;\n            }\n        }\n    }\n    // 0x406698\n    if (v36 + 1 > v54) {\n        // break -> 0x40680c\n        goto lab_0x40680c;\n    }\n    // 0x4066a5\n    v50 = v30;\n    v51 = v37 + v14;\n    goto lab_0x4066af;\n  lab_0x4066af:;\n    int64_t v52 = v51 + v9; // 0x4065e0\n    int64_t v53 = function_406f70(v35 + result2, 0, v52 - v35); // 0x4065f6\n    result3 = 0;\n    v32 = v52;\n    v33 = v51;\n    v34 = v50;\n    if (v52 == 0 || v53 != 0) {\n      lab_0x406545_3:\n        // 0x406545\n        return result3;\n    }\n    goto lab_0x406612;\n}\n"
        },
        {
            "funcName": "function_406820",
            "funcStartAddr": "406820",
            "funcEndAddr": "40687d",
            "decompiledFuncCode": "int64_t function_406820(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406827\n    int64_t v2; // 0x406820\n    int64_t result = function_406e50(a1, v2); // 0x406838\n    if ((v2 & 32) != 0) {\n        // 0x406860\n        if ((int32_t)result == 0) {\n            // 0x406864\n            *__errno_location() = 0;\n        }\n        // 0x40685a\n        return 0xffffffff;\n    }\n    // 0x406841\n    if ((int32_t)result == 0) {\n        // 0x40685a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406848\n    if (v1 == 0) {\n        // 0x40684a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40685a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406880",
            "funcStartAddr": "406880",
            "funcEndAddr": "4068de",
            "decompiledFuncCode": "int64_t function_406880(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406886\n    if (locale == NULL) {\n        // 0x4068b3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406886\n    bool v2; // 0x406880\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x406880\n    int64_t v5 = v1; // 0x406880\n    int64_t v6 = 2; // 0x4068a5\n    unsigned char v7 = *(char *)v5; // 0x4068a5\n    char v8 = *(char *)v4; // 0x4068a5\n    char v9 = v8; // 0x4068a5\n    bool v10 = false; // 0x4068a5\n    while (v7 == v8) {\n        // 0x406898\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4068b1\n    int64_t v13 = v1; // 0x4068b1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4068b3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4068b1\n    unsigned char v15 = *(char *)v13; // 0x4068cd\n    char v16 = *(char *)v12; // 0x4068cd\n    char v17 = v16; // 0x4068cd\n    bool v18 = false; // 0x4068cd\n    while (v15 == v16) {\n        // 0x4068c0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4068e0",
            "funcStartAddr": "4068e0",
            "funcEndAddr": "406e42",
            "decompiledFuncCode": "int64_t function_4068e0(void) {\n    char * v1 = nl_langinfo(14); // 0x4068f6\n    char * v2 = g44; // 0x4068fb\n    char * v3; // 0x4068e0\n    int64_t v4; // 0x4068e0\n    int64_t v5; // 0x4068e0\n    int64_t v6; // 0x4068e0\n    int64_t v7; // 0x4068e0\n    int32_t size; // 0x4068e0\n    int32_t size2; // 0x4068e0\n    int32_t len; // 0x4069b2\n    int64_t v8; // 0x4069b2\n    char * env_val; // 0x40699d\n    if (v2 == NULL) {\n        // 0x406998\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406a05;\n        } else {\n            // 0x4069aa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406a05;\n            } else {\n                // 0x4069af\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40699d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406e35\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406a05;\n                    } else {\n                        // 0x406da9\n                        size2 = len + 14;\n                        goto lab_0x4069cb;\n                    }\n                } else {\n                    goto lab_0x4069cb;\n                }\n            }\n        }\n    } else {\n        // 0x4068e0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40691a;\n    }\n  lab_0x406c4c:;\n    // 0x406c4c\n    struct _IO_FILE * stream; // 0x406a8b\n    int32_t v10 = __uflow(stream); // 0x406c4f\n    int64_t v11; // 0x4068e0\n    int64_t v12 = v11; // 0x406c59\n    int64_t v13; // 0x4068e0\n    int64_t v14 = v13; // 0x406c59\n    int32_t v15 = v10; // 0x406c59\n    int64_t v16; // 0x4068e0\n    int64_t v17 = v16; // 0x406c59\n    int64_t v18 = v11; // 0x406c59\n    int64_t v19 = v13; // 0x406c59\n    int64_t v20 = v16; // 0x406c59\n    if (v10 == -1) {\n        // break -> 0x406c5f\n        goto lab_0x406c5f;\n    }\n    goto lab_0x406ad9;\n  lab_0x406ace:;\n    // 0x406ace\n    int64_t v90; // 0x4068e0\n    int64_t * v32; // 0x406ac0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4068e0\n    v12 = v89;\n    int64_t v91; // 0x4068e0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4068e0\n    v17 = v92;\n    goto lab_0x406ad9;\n  lab_0x406ad9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4068e0\n    int32_t v25; // bp-120, 0x4068e0\n    int32_t v26; // bp-184, 0x4068e0\n    int64_t v27; // 0x406a8b\n    int64_t v28; // 0x406aa8\n    int64_t v29; // 0x406aad\n    int64_t * v30; // 0x406ac4\n    switch (c) {\n        case 32: {\n            goto lab_0x406ac0;\n        }\n        case 10: {\n            goto lab_0x406ac0;\n        }\n        case 9: {\n            goto lab_0x406ac0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406cb1\n            int32_t v33; // 0x4068e0\n            char v34; // 0x4068e0\n            int32_t v35; // 0x406cbe\n            if (v31 < *v30) {\n                // 0x406c90\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406cbb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406cb1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406c90\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406cbb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406ca0\n                v36 = v33;\n            }\n            // 0x406d8f\n            if (v36 == -1) {\n                // break -> 0x406c5f\n                break;\n            }\n            goto lab_0x406ac0;\n        }\n        default: {\n            // 0x406aef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406c5f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406b18\n            int64_t v39 = v37 + 4; // 0x406b1a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406b26\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406b28\n            while (v41 == 0) {\n                // 0x406b18\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406b46\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406b52\n            int64_t v45 = v43 + 4; // 0x406b54\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406b60\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406b62\n            while (v47 == 0) {\n                // 0x406b52\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406b4f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406b78\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406b88\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406b8c\n            int64_t v52 = v51 + v48; // 0x406b95\n            int64_t * mem; // 0x4068e0\n            int64_t v53; // 0x4068e0\n            int64_t v54; // 0x4068e0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406ccb\n                int64_t v56 = v55 + 3; // 0x406cd7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406bb1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406bc0\n            if (mem == NULL) {\n                // 0x406dec\n                free((int64_t *)v21);\n                function_406e50(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x406a64;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406bd8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406be2\n            uint32_t v62 = (int32_t)v59; // 0x406be5\n            int64_t v63; // 0x4068e0\n            if (v62 >= 8) {\n                // 0x406cf4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406d0e\n                int64_t v66 = v61 - v65; // 0x406d12\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406d1d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406d2e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406d2e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406d2b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406dbf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406bf7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406bfb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406c0b\n            int64_t v74 = v60 - 1; // 0x406c0f\n            uint32_t v75 = (int32_t)v73; // 0x406c14\n            int64_t v76; // 0x4068e0\n            if (v75 >= 8) {\n                // 0x406d42\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406d4c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406d5c\n                int64_t v80 = v74 - v79; // 0x406d60\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406d6b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406d7b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406d79\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406dd6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406dde\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406c26\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406c2a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406e23\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406c3e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x406ace;\n            } else {\n                goto lab_0x406c4c;\n            }\n        }\n    }\n  lab_0x406ac0:;\n    int64_t v93 = v23; // 0x4068e0\n    int64_t v94 = v22; // 0x4068e0\n    int64_t v95 = v21; // 0x4068e0\n    goto lab_0x406ac0_2;\n  lab_0x406a05:;\n    int64_t * mem3 = malloc(size); // 0x406a05\n    int64_t v97 = (int64_t)&g10; // 0x406a10\n    int64_t v98; // 0x4068e0\n    int64_t path; // 0x4068e0\n    if (mem3 == NULL) {\n        goto lab_0x4069e2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406a05\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406a26;\n    }\n  lab_0x40691a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40690d\n    char v100 = *v3; // 0x40691a\n    int64_t v101; // 0x4068e0\n    if (v100 == 0) {\n        // 0x406974\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4068e0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4068e0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406960\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406967;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406930\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40693d\n        char v107 = *(char *)v106; // 0x406942\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406974\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40694b\n    v104 = v103 + 1;\n  lab_0x406967:\n    // 0x406974\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4069e2:;\n    char * v108 = (char *)v97;\n    g44 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40691a;\n  lab_0x406a26:;\n    int64_t v109 = v98 + path; // 0x406a26\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406a52\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x406a81\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406db2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x406aa5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406ac0_2:;\n                uint64_t v96 = *v32; // 0x406ac0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406c4c;\n                } else {\n                    goto lab_0x406ace;\n                }\n            }\n          lab_0x406c5f:\n            // 0x406c5f\n            function_406e50(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x406c7e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406a64;\n  lab_0x4069cb:;\n    int64_t * mem4 = malloc(size2); // 0x4069cb\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x406a71\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406a26;\n    } else {\n        goto lab_0x4069e2;\n    }\n  lab_0x406a64:\n    // 0x406a64\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4069e2;\n}\n"
        },
        {
            "funcName": "function_406e50",
            "funcStartAddr": "406e50",
            "funcEndAddr": "406ecb",
            "decompiledFuncCode": "int64_t function_406e50(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406e57\n    if (fileno(stream) < 0) {\n        // 0x406eb7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x406e6a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x406e9b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406eb7\n            return fclose(stream);\n        }\n    }\n    // 0x406e6c\n    if ((int32_t)function_406ed0(a1, v1) == 0) {\n        // 0x406eb7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406e78\n    int32_t v3 = *v2; // 0x406e80\n    int64_t result = fclose(stream); // 0x406e8e\n    if (v3 != 0) {\n        // 0x406ec0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406e90\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ed0",
            "funcStartAddr": "406ed0",
            "funcEndAddr": "406f10",
            "decompiledFuncCode": "int64_t function_406ed0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x406eea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x406eea\n        return fflush(stream);\n    }\n    // 0x406ef8\n    function_406f10(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406f10",
            "funcStartAddr": "406f10",
            "funcEndAddr": "406f67",
            "decompiledFuncCode": "int64_t function_406f10(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406f10\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x406f1a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x406f4b\n    int64_t result = -1; // 0x406f54\n    if (v1 != -1) {\n        // 0x406f56\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406f62\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "407074",
            "decompiledFuncCode": "int64_t function_406f70(int64_t result, int32_t a2, int64_t a3) {\n    // 0x406f70\n    if (a3 == 0) {\n        // 0x406fa9\n        return 0;\n    }\n    int64_t v1 = result; // 0x406f7c\n    int64_t v2 = a3; // 0x406f7c\n    int64_t result2; // 0x406f70\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x406f7e\n        int64_t v4 = result; // 0x406f81\n        if ((char)result == v3) {\n            // 0x406fa9\n            return result;\n        }\n        int64_t v5 = a3; // 0x406f81\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x406f90\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x406fb0;\n            }\n            // 0x406f96\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x406fa9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x406fa9\n        return result2;\n    }\n  lab_0x406fb0:;\n    int64_t result3 = v1; // 0x406fdd\n    int64_t v6 = v2; // 0x406fdd\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x406fbf\n        int64_t v9 = 0x10000 * v8 | v8; // 0x406fcc\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x406fd6\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x406ff6\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x407025\n            int64_t v13 = v1 + 8; // 0x407029\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x407013\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x40703c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x407033\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x406fa9\n                return 0;\n            }\n        }\n    }\n  lab_0x40703c:;\n    char v15 = a2; // 0x40703c\n    if (*(char *)result3 == v15) {\n        // 0x406fa9\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x407050\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x406fa9\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x406fa9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407080",
            "funcStartAddr": "407080",
            "funcEndAddr": "4070dd",
            "decompiledFuncCode": "int64_t function_407080(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407080\n    return function_401618();\n}\n"
        },
        {
            "funcName": "function_4070e0",
            "funcStartAddr": "4070e0",
            "funcEndAddr": "4070e1",
            "decompiledFuncCode": "int64_t function_4070e0(void) {\n    // 0x4070e0\n    int64_t result; // 0x4070e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4070f0",
            "funcStartAddr": "4070f0",
            "funcEndAddr": "407108",
            "decompiledFuncCode": "int64_t function_4070f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4070f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_407108",
            "funcStartAddr": "407108",
            "funcEndAddr": "407128",
            "decompiledFuncCode": "int64_t function_407108(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x407112\n    while (*(int64_t *)v1 != -1) {\n        // 0x407113\n        v1 -= 8;\n    }\n    // 0x407124\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_pwd.elf"
}